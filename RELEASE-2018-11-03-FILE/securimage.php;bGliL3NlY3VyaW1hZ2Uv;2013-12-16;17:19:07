{
    "namaFile": "lib\/securimage\/securimage.php",
    "lastUpdate": "2013-12-16+17:19:07.00",
    "contentFile": "\/cGhwCiAgICAgKiAgIGluY2x1ZGUgJ3NlY3VyaW1hZ2UucGhwJzsKICAgICAqICAgJHNlY3VyaW1hZ2UgPSBuZXcgU2VjdXJpbWFnZSgpOwogICAgICogICAkc2VjdXJpbWFnZS0+c2hvdygnYmcuanBnJyk7CiAgICAgKiAgID8+CiAgICAgKiA8L2NvZGU+CiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkYmFja2dyb3VuZF9pbWFnZSAgVGhlIHBhdGggdG8gYW4gaW1hZ2UgdG8gdXNlIGFzIHRoZSBiYWNrZ3JvdW5kIGZvciB0aGUgQ0FQVENIQQogICAgICovCiAgICBmdW5jdGlvbiBzaG93KCRiYWNrZ3JvdW5kX2ltYWdlID0gIiIpCiAgICB7CiAgICAgICAgaWYoJGJhY2tncm91bmRfaW1hZ2UgIT0gIiIgJiYgaXNfcmVhZGFibGUoJGJhY2tncm91bmRfaW1hZ2UpKSB7CiAgICAgICAgICAgICR0aGlzLT5iZ2ltZyA9ICRiYWNrZ3JvdW5kX2ltYWdlOwogICAgICAgIH0KCiAgICAgICAgJHRoaXMtPmRvSW1hZ2UoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFZhbGlkYXRlIHRoZSBjb2RlIGVudGVyZWQgYnkgdGhlIHVzZXIuCiAgICAgKgogICAgICogPGNvZGU+CiAgICAgKiAgICRjb2RlID0gJF9QT1NUWydjb2RlJ107CiAgICAgKiAgIGlmICgkc2VjdXJpbWFnZS0+Y2hlY2soJGNvZGUpID09IGZhbHNlKSB7CiAgICAgKiAgICAgZGllKCJTb3JyeSwgdGhlIGNvZGUgZW50ZXJlZCBkaWQgbm90IG1hdGNoLiIpOwogICAgICogICB9IGVsc2UgewogICAgICogICAgICR2YWxpZCA9IHRydWU7CiAgICAgKiAgIH0KICAgICAqIDwvY29kZT4KICAgICAqIEBwYXJhbSBzdHJpbmcgJGNvZGUgIFRoZSBjb2RlIHRoZSB1c2VyIGVudGVyZWQKICAgICAqIEByZXR1cm4gYm9vbGVhbiAgdHJ1ZSBpZiB0aGUgY29kZSB3YXMgY29ycmVjdCwgZmFsc2UgaWYgbm90CiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoZWNrKCRjb2RlKQogICAgewogICAgICAgICR0aGlzLT5jb2RlX2VudGVyZWQgPSAkY29kZTsKICAgICAgICAkdGhpcy0+dmFsaWRhdGUoKTsKICAgICAgICByZXR1cm4gJHRoaXMtPmNvcnJlY3RfY29kZTsKICAgIH0KCiAgICAvKioKICAgICAqIE91dHB1dCBhdWRpbyBmaWxlIHdpdGggSFRUUCBoZWFkZXJzIHRvIGJyb3dzZXIKICAgICAqIAogICAgICogPGNvZGU+CiAgICAgKiAgICRzb3VuZCA9IG5ldyBTZWN1cmltYWdlKCk7CiAgICAgKiAgICRzb3VuZC0+YXVkaW9fZm9ybWF0ID0gJ21wMyc7CiAgICAgKiAgICRzb3VuZC0+b3V0cHV0QXVkaW9GaWxlKCk7CiAgICAgKiA8L2NvZGU+CiAgICAgKiAKICAgICAqIEBzaW5jZSAyLjAKICAgICAqLwogICAgZnVuY3Rpb24gb3V0cHV0QXVkaW9GaWxlKCkKICAgIHsKICAgICAgICBpZiAoc3RydG9sb3dlcigkdGhpcy0+YXVkaW9fZm9ybWF0KSA9PSAnd2F2JykgewogICAgICAgICAgICBoZWFkZXIoJ0NvbnRlbnQtdHlwZTogYXVkaW8veC13YXYnKTsKICAgICAgICAgICAgJGV4dCA9ICd3YXYnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGhlYWRlcignQ29udGVudC10eXBlOiBhdWRpby9tcGVnJyk7IC8vIGRlZmF1bHQgdG8gbXAzCiAgICAgICAgICAgICRleHQgPSAnbXAzJzsKICAgICAgICB9CgogICAgICAgIGhlYWRlcigiQ29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudDsgZmlsZW5hbWU9XCJzZWN1cmltYWdlX2F1ZGlvLnskZXh0fVwiIik7CiAgICAgICAgaGVhZGVyKCdDYWNoZS1Db250cm9sOiBuby1zdG9yZSwgbm8tY2FjaGUsIG11c3QtcmV2YWxpZGF0ZScpOwogICAgICAgIGhlYWRlcignRXhwaXJlczogU3VuLCAxIEphbiAyMDAwIDEyOjAwOjAwIEdNVCcpOwogICAgICAgIGhlYWRlcignTGFzdC1Nb2RpZmllZDogJyAuIGdtZGF0ZSgnRCwgZCBNIFkgSDppOnMnKSAuICdHTVQnKTsKCiAgICAgICAgJGF1ZGlvID0gJHRoaXMtPmdldEF1ZGlibGVDb2RlKCRleHQpOwoKICAgICAgICBoZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoOiAnIC4gc3RybGVuKCRhdWRpbykpOwoKICAgICAgICBlY2hvICRhdWRpbzsKICAgICAgICBleGl0OwogICAgfQoKICAgIC8qKgogICAgICogR2VuZXJhdGUgYW5kIG91dHB1dCB0aGUgaW1hZ2UKICAgICAqCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRvSW1hZ2UoKQogICAgewogICAgICAgIGlmICgkdGhpcy0+dXNlX2dkX2ZvbnQgPT0gdHJ1ZSkgewogICAgICAgICAgICAkdGhpcy0+aXNjYWxlID0gMTsKICAgICAgICB9CiAgICAgICAgaWYoJHRoaXMtPnVzZV90cmFuc3BhcmVudF90ZXh0ID09IHRydWUgfHwgJHRoaXMtPmJnaW1nICE9ICIiKSB7CiAgICAgICAgICAgICR0aGlzLT5pbSAgICAgPSBpbWFnZWNyZWF0ZXRydWVjb2xvcigkdGhpcy0+aW1hZ2Vfd2lkdGgsICR0aGlzLT5pbWFnZV9oZWlnaHQpOwogICAgICAgICAgICAkdGhpcy0+dG1waW1nID0gaW1hZ2VjcmVhdGV0cnVlY29sb3IoJHRoaXMtPmltYWdlX3dpZHRoICogJHRoaXMtPmlzY2FsZSwgJHRoaXMtPmltYWdlX2hlaWdodCAqICR0aGlzLT5pc2NhbGUpOwoKICAgICAgICB9IGVsc2UgeyAvL25vIHRyYW5zcGFyZW5jeQogICAgICAgICAgICAkdGhpcy0+aW0gICAgID0gaW1hZ2VjcmVhdGUoJHRoaXMtPmltYWdlX3dpZHRoLCAkdGhpcy0+aW1hZ2VfaGVpZ2h0KTsKICAgICAgICAgICAgJHRoaXMtPnRtcGltZyA9IGltYWdlY3JlYXRlKCR0aGlzLT5pbWFnZV93aWR0aCAqICR0aGlzLT5pc2NhbGUsICR0aGlzLT5pbWFnZV9oZWlnaHQgKiAkdGhpcy0+aXNjYWxlKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJHRoaXMtPmFsbG9jYXRlQ29sb3JzKCk7CiAgICAgICAgaW1hZ2VwYWxldHRlY29weSgkdGhpcy0+dG1waW1nLCAkdGhpcy0+aW0pOwoKICAgICAgICAkdGhpcy0+c2V0QmFja2dyb3VuZCgpOwoKICAgICAgICAkdGhpcy0+Y3JlYXRlQ29kZSgpOwoKICAgICAgICBpZiAoISR0aGlzLT5kcmF3X2xpbmVzX292ZXJfdGV4dCAmJiAkdGhpcy0+bnVtX2xpbmVzID4gMCkgJHRoaXMtPmRyYXdMaW5lcygpOwoKICAgICAgICAkdGhpcy0+ZHJhd1dvcmQoKTsKICAgICAgICBpZiAoJHRoaXMtPnVzZV9nZF9mb250ID09IGZhbHNlICYmIGlzX3JlYWRhYmxlKCR0aGlzLT50dGZfZmlsZSkpICR0aGlzLT5kaXN0b3J0ZWRDb3B5KCk7CgogICAgICAgIGlmICgkdGhpcy0+ZHJhd19saW5lc19vdmVyX3RleHQgJiYgJHRoaXMtPm51bV9saW5lcyA+IDApICR0aGlzLT5kcmF3TGluZXMoKTsKCiAgICAgICAgaWYgKHRyaW0oJHRoaXMtPmltYWdlX3NpZ25hdHVyZSkgIT0gJycpICAgICR0aGlzLT5hZGRTaWduYXR1cmUoKTsKCiAgICAgICAgJHRoaXMtPm91dHB1dCgpOwoKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBBbGxvY2F0ZSBhbGwgY29sb3JzIHRoYXQgd2lsbCBiZSB1c2VkIGluIHRoZSBDQVBUQ0hBIGltYWdlCiAgICAgKiAKICAgICAqIEBzaW5jZSAyLjAuMQogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFsbG9jYXRlQ29sb3JzKCkKICAgIHsKICAgICAgICAvLyBhbGxvY2F0ZSBiZyBjb2xvciBmaXJzdCBmb3IgaW1hZ2VjcmVhdGUKICAgICAgICAkdGhpcy0+Z2RiZ2NvbG9yID0gaW1hZ2Vjb2xvcmFsbG9jYXRlKCR0aGlzLT5pbSwgJHRoaXMtPmltYWdlX2JnX2NvbG9yLT5yLCAkdGhpcy0+aW1hZ2VfYmdfY29sb3ItPmcsICR0aGlzLT5pbWFnZV9iZ19jb2xvci0+Yik7CiAgICAgICAgCiAgICAgICAgJGFscGhhID0gaW50dmFsKCR0aGlzLT50ZXh0X3RyYW5zcGFyZW5jeV9wZXJjZW50YWdlIC8gMTAwICogMTI3KTsKICAgICAgICAKICAgICAgICBpZiAoJHRoaXMtPnVzZV90cmFuc3BhcmVudF90ZXh0ID09IHRydWUpIHsKICAgICAgICAgICAgJHRoaXMtPmdkdGV4dGNvbG9yID0gaW1hZ2Vjb2xvcmFsbG9jYXRlYWxwaGEoJHRoaXMtPmltLCAkdGhpcy0+dGV4dF9jb2xvci0+ciwgJHRoaXMtPnRleHRfY29sb3ItPmcsICR0aGlzLT50ZXh0X2NvbG9yLT5iLCAkYWxwaGEpOwogICAgICAgICAgICAkdGhpcy0+Z2RsaW5lY29sb3IgPSBpbWFnZWNvbG9yYWxsb2NhdGVhbHBoYSgkdGhpcy0+aW0sICR0aGlzLT5saW5lX2NvbG9yLT5yLCAkdGhpcy0+bGluZV9jb2xvci0+ZywgJHRoaXMtPmxpbmVfY29sb3ItPmIsICRhbHBoYSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHRoaXMtPmdkdGV4dGNvbG9yID0gaW1hZ2Vjb2xvcmFsbG9jYXRlKCR0aGlzLT5pbSwgJHRoaXMtPnRleHRfY29sb3ItPnIsICR0aGlzLT50ZXh0X2NvbG9yLT5nLCAkdGhpcy0+dGV4dF9jb2xvci0+Yik7CiAgICAgICAgICAgICR0aGlzLT5nZGxpbmVjb2xvciA9IGltYWdlY29sb3JhbGxvY2F0ZSgkdGhpcy0+aW0sICR0aGlzLT5saW5lX2NvbG9yLT5yLCAkdGhpcy0+bGluZV9jb2xvci0+ZywgJHRoaXMtPmxpbmVfY29sb3ItPmIpOwogICAgICAgIH0KICAgIAogICAgICAgICR0aGlzLT5nZHNpZ25hdHVyZWNvbG9yID0gaW1hZ2Vjb2xvcmFsbG9jYXRlKCR0aGlzLT5pbSwgJHRoaXMtPnNpZ25hdHVyZV9jb2xvci0+ciwgJHRoaXMtPnNpZ25hdHVyZV9jb2xvci0+ZywgJHRoaXMtPnNpZ25hdHVyZV9jb2xvci0+Yik7CiAgICAKICAgICAgICBpZiAoJHRoaXMtPnVzZV9tdWx0aV90ZXh0ID09IHRydWUpIHsKICAgICAgICAgICAgJHRoaXMtPmdkbXVsdGljb2xvciA9IGFycmF5KCk7CiAgICAgICAgCiAgICAgICAgICAgIGZvcmVhY2goJHRoaXMtPm11bHRpX3RleHRfY29sb3IgYXMgJGNvbG9yKSB7CiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPnVzZV90cmFuc3BhcmVudF90ZXh0ID09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Z2RtdWx0aWNvbG9yW10gPSBpbWFnZWNvbG9yYWxsb2NhdGVhbHBoYSgkdGhpcy0+aW0sICRjb2xvci0+ciwgJGNvbG9yLT5nLCAkY29sb3ItPmIsICRhbHBoYSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICR0aGlzLT5nZG11bHRpY29sb3JbXSA9IGltYWdlY29sb3JhbGxvY2F0ZSgkdGhpcy0+aW0sICRjb2xvci0+ciwgJGNvbG9yLT5nLCAkY29sb3ItPmIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBiYWNrZ3JvdW5kIG9mIHRoZSBDQVBUQ0hBIGltYWdlCiAgICAgKgogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiBzZXRCYWNrZ3JvdW5kKCkKICAgIHsKICAgICAgICBpbWFnZWZpbGxlZHJlY3RhbmdsZSgkdGhpcy0+aW0sIDAsIDAsICR0aGlzLT5pbWFnZV93aWR0aCAqICR0aGlzLT5pc2NhbGUsICR0aGlzLT5pbWFnZV9oZWlnaHQgKiAkdGhpcy0+aXNjYWxlLCAkdGhpcy0+Z2RiZ2NvbG9yKTsKICAgIGltYWdlZmlsbGVkcmVjdGFuZ2xlKCR0aGlzLT50bXBpbWcsIDAsIDAsICR0aGlzLT5pbWFnZV93aWR0aCAqICR0aGlzLT5pc2NhbGUsICR0aGlzLT5pbWFnZV9oZWlnaHQgKiAkdGhpcy0+aXNjYWxlLCAkdGhpcy0+Z2RiZ2NvbG9yKTsKICAgIAogICAgICAgIGlmICgkdGhpcy0+YmdpbWcgPT0gJycpIHsKICAgICAgICAgICAgaWYgKCR0aGlzLT5iYWNrZ3JvdW5kX2RpcmVjdG9yeSAhPSBudWxsICYmIGlzX2RpcigkdGhpcy0+YmFja2dyb3VuZF9kaXJlY3RvcnkpICYmIGlzX3JlYWRhYmxlKCR0aGlzLT5iYWNrZ3JvdW5kX2RpcmVjdG9yeSkpIHsKICAgICAgICAgICAgICAgICRpbWcgPSAkdGhpcy0+Z2V0QmFja2dyb3VuZEZyb21EaXJlY3RvcnkoKTsKICAgICAgICAgICAgICAgIGlmICgkaW1nICE9IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmJnaW1nID0gJGltZzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJGRhdCA9IEBnZXRpbWFnZXNpemUoJHRoaXMtPmJnaW1nKTsKICAgICAgICBpZigkZGF0ID09IGZhbHNlKSB7IAogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBzd2l0Y2goJGRhdFsyXSkgewogICAgICAgICAgICBjYXNlIDE6ICAkbmV3aW0gPSBAaW1hZ2VjcmVhdGVmcm9tZ2lmKCR0aGlzLT5iZ2ltZyk7IGJyZWFrOwogICAgICAgICAgICBjYXNlIDI6ICAkbmV3aW0gPSBAaW1hZ2VjcmVhdGVmcm9tanBlZygkdGhpcy0+YmdpbWcpOyBicmVhazsKICAgICAgICAgICAgY2FzZSAzOiAgJG5ld2ltID0gQGltYWdlY3JlYXRlZnJvbXBuZygkdGhpcy0+YmdpbWcpOyBicmVhazsKICAgICAgICAgICAgY2FzZSAxNTogJG5ld2ltID0gQGltYWdlY3JlYXRlZnJvbXdibXAoJHRoaXMtPmJnaW1nKTsgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMTY6ICRuZXdpbSA9IEBpbWFnZWNyZWF0ZWZyb214Ym0oJHRoaXMtPmJnaW1nKTsgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmKCEkbmV3aW0pIHJldHVybjsKCiAgICAgICAgaW1hZ2Vjb3B5cmVzaXplZCgkdGhpcy0+aW0sICRuZXdpbSwgMCwgMCwgMCwgMCwgJHRoaXMtPmltYWdlX3dpZHRoLCAkdGhpcy0+aW1hZ2VfaGVpZ2h0LCBpbWFnZXN4KCRuZXdpbSksIGltYWdlc3koJG5ld2ltKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIGZ1bGwgcGF0aCB0byBhIHJhbmRvbSBnaWYsIGpwZywgb3IgcG5nIGZyb20gdGhlIGJhY2tncm91bmQgZGlyZWN0b3J5LgogICAgICoKICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICogQHNlZSBTZWN1cmltYWdlOjokYmFja2dyb3VuZF9kaXJlY3RvcnkKICAgICAqIEByZXR1cm4gbWl4ZWQgIGZhbHNlIGlmIG5vbmUgZm91bmQsIHN0cmluZyAkcGF0aCBpZiBmb3VuZAogICAgICovCiAgICBmdW5jdGlvbiBnZXRCYWNrZ3JvdW5kRnJvbURpcmVjdG9yeSgpCiAgICB7CiAgICAgICAgJGltYWdlcyA9IGFycmF5KCk7CgogICAgICAgIGlmICgkZGggPSBvcGVuZGlyKCR0aGlzLT5iYWNrZ3JvdW5kX2RpcmVjdG9yeSkpIHsKICAgICAgICAgICAgd2hpbGUgKCgkZmlsZSA9IHJlYWRkaXIoJGRoKSkgIT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICBpZiAocHJlZ19tYXRjaCgnLyhqcGd8Z2lmfHBuZykkL2knLCAkZmlsZSkpICRpbWFnZXNbXSA9ICRmaWxlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjbG9zZWRpcigkZGgpOwoKICAgICAgICAgICAgaWYgKHNpemVvZigkaW1hZ2VzKSA+IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBydHJpbSgkdGhpcy0+YmFja2dyb3VuZF9kaXJlY3RvcnksICcvJykgLiAnLycgLiAkaW1hZ2VzW3JhbmQoMCwgc2l6ZW9mKCRpbWFnZXMpLTEpXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogRHJhdyByYW5kb20gY3VydnkgbGluZXMgb3ZlciB0aGUgaW1hZ2U8YnIgLz4KICAgICAqIE1vZGlmaWVkIGNvZGUgZnJvbSBIS0NhcHRjaGEKICAgICAqCiAgICAgKiBAc2luY2UgMi4wCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRyYXdMaW5lcygpCiAgICB7CiAgICAgICAgZm9yICgkbGluZSA9IDA7ICRsaW5lIDwgJHRoaXMtPm51bV9saW5lczsgKyskbGluZSkgewogICAgICAgICAgICAkeCA9ICR0aGlzLT5pbWFnZV93aWR0aCAqICgxICsgJGxpbmUpIC8gKCR0aGlzLT5udW1fbGluZXMgKyAxKTsKICAgICAgICAgICAgJHggKz0gKDAuNSAtICR0aGlzLT5mcmFuZCgpKSAqICR0aGlzLT5pbWFnZV93aWR0aCAvICR0aGlzLT5udW1fbGluZXM7CiAgICAgICAgICAgICR5ID0gcmFuZCgkdGhpcy0+aW1hZ2VfaGVpZ2h0ICogMC4xLCAkdGhpcy0+aW1hZ2VfaGVpZ2h0ICogMC45KTsKICAgICAgICAgICAgIAogICAgICAgICAgICAkdGhldGEgPSAoJHRoaXMtPmZyYW5kKCktMC41KSAqIE1fUEkgKiAwLjc7CiAgICAgICAgICAgICR3ID0gJHRoaXMtPmltYWdlX3dpZHRoOwogICAgICAgICAgICAkbGVuID0gcmFuZCgkdyAqIDAuNCwgJHcgKiAwLjcpOwogICAgICAgICAgICAkbHdpZCA9IHJhbmQoMCwgMik7CiAgICAgICAgICAgICAKICAgICAgICAgICAgJGsgPSAkdGhpcy0+ZnJhbmQoKSAqIDAuNiArIDAuMjsKICAgICAgICAgICAgJGsgPSAkayAqICRrICogMC41OwogICAgICAgICAgICAkcGhpID0gJHRoaXMtPmZyYW5kKCkgKiA2LjI4OwogICAgICAgICAgICAkc3RlcCA9IDAuNTsKICAgICAgICAgICAgJGR4ID0gJHN0ZXAgKiBjb3MoJHRoZXRhKTsKICAgICAgICAgICAgJGR5ID0gJHN0ZXAgKiBzaW4oJHRoZXRhKTsKICAgICAgICAgICAgJG4gPSAkbGVuIC8gJHN0ZXA7CiAgICAgICAgICAgICRhbXAgPSAxLjUgKiAkdGhpcy0+ZnJhbmQoKSAvICgkayArIDUuMCAvICRsZW4pOwogICAgICAgICAgICAkeDAgPSAkeCAtIDAuNSAqICRsZW4gKiBjb3MoJHRoZXRhKTsKICAgICAgICAgICAgJHkwID0gJHkgLSAwLjUgKiAkbGVuICogc2luKCR0aGV0YSk7CiAgICAgICAgICAgICAKICAgICAgICAgICAgJGxkeCA9IHJvdW5kKC0kZHkgKiAkbHdpZCk7CiAgICAgICAgICAgICRsZHkgPSByb3VuZCgkZHggKiAkbHdpZCk7CiAgICAgICAgICAgICAKICAgICAgICAgICAgZm9yICgkaSA9IDA7ICRpIDwgJG47ICsrJGkpIHsKICAgICAgICAgICAgICAgICR4ID0gJHgwICsgJGkgKiAkZHggKyAkYW1wICogJGR5ICogc2luKCRrICogJGkgKiAkc3RlcCArICRwaGkpOwogICAgICAgICAgICAgICAgJHkgPSAkeTAgKyAkaSAqICRkeSAtICRhbXAgKiAkZHggKiBzaW4oJGsgKiAkaSAqICRzdGVwICsgJHBoaSk7CiAgICAgICAgICAgICAgICBpbWFnZWZpbGxlZHJlY3RhbmdsZSgkdGhpcy0+aW0sICR4LCAkeSwgJHggKyAkbHdpZCwgJHkgKyAkbHdpZCwgJHRoaXMtPmdkbGluZWNvbG9yKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIERyYXcgdGhlIENBUFRDSEEgY29kZSBvdmVyIHRoZSBpbWFnZQogICAgICoKICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gZHJhd1dvcmQoKQogICAgewogICAgICAgICR3aWR0aDIgPSAkdGhpcy0+aW1hZ2Vfd2lkdGggKiAkdGhpcy0+aXNjYWxlOwogICAgICAgICRoZWlnaHQyID0gJHRoaXMtPmltYWdlX2hlaWdodCAqICR0aGlzLT5pc2NhbGU7CiAgICAgICAgIAogICAgICAgIGlmICgkdGhpcy0+dXNlX2dkX2ZvbnQgPT0gdHJ1ZSB8fCAhaXNfcmVhZGFibGUoJHRoaXMtPnR0Zl9maWxlKSkgewogICAgICAgICAgICBpZiAoIWlzX2ludCgkdGhpcy0+Z2RfZm9udF9maWxlKSkgeyAvL2lzIGEgZmlsZSBuYW1lCiAgICAgICAgICAgICAgICAkZm9udCA9IEBpbWFnZWxvYWRmb250KCR0aGlzLT5nZF9mb250X2ZpbGUpOwogICAgICAgICAgICAgICAgaWYgKCRmb250ID09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcl9lcnJvcigiRmFpbGVkIHRvIGxvYWQgR0QgRm9udCBmaWxlIHskdGhpcy0+Z2RfZm9udF9maWxlfSAiLCBFX1VTRVJfV0FSTklORyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgeyAvL2dkIGZvbnQgaWRlbnRpZmllcgogICAgICAgICAgICAgICAgJGZvbnQgPSAkdGhpcy0+Z2RfZm9udF9maWxlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpbWFnZXN0cmluZygkdGhpcy0+aW0sICRmb250LCAkdGhpcy0+dGV4dF94X3N0YXJ0LCAoJHRoaXMtPmltYWdlX2hlaWdodCAvIDIpIC0gKCR0aGlzLT5nZF9mb250X3NpemUgLyAyKSwgJHRoaXMtPmNvZGUsICR0aGlzLT5nZHRleHRjb2xvcik7CiAgICAgICAgfSBlbHNlIHsgLy90dGYgZm9udAogICAgICAgICAgICAkZm9udF9zaXplID0gJGhlaWdodDIgKiAuMzU7CiAgICAgICAgICAgICRiYiA9IGltYWdldHRmYmJveCgkZm9udF9zaXplLCAwLCAkdGhpcy0+dHRmX2ZpbGUsICR0aGlzLT5jb2RlKTsKICAgICAgICAgICAgJHR4ID0gJGJiWzRdIC0gJGJiWzBdOwogICAgICAgICAgICAkdHkgPSAkYmJbNV0gLSAkYmJbMV07CiAgICAgICAgICAgICR4ICA9IGZsb29yKCR3aWR0aDIgLyAyIC0gJHR4IC8gMiAtICRiYlswXSk7CiAgICAgICAgICAgICR5ICA9IHJvdW5kKCRoZWlnaHQyIC8gMiAtICR0eSAvIDIgLSAkYmJbMV0pOwoKICAgICAgICAgICAgJHN0cmxlbiA9IHN0cmxlbigkdGhpcy0+Y29kZSk7CiAgICAgICAgICAgIGlmICghaXNfYXJyYXkoJHRoaXMtPm11bHRpX3RleHRfY29sb3IpKSAkdGhpcy0+dXNlX211bHRpX3RleHQgPSBmYWxzZTsKCgogICAgICAgICAgICBpZiAoJHRoaXMtPnVzZV9tdWx0aV90ZXh0ID09IGZhbHNlICYmICR0aGlzLT50ZXh0X2FuZ2xlX21pbmltdW0gPT0gMCAmJiAkdGhpcy0+dGV4dF9hbmdsZV9tYXhpbXVtID09IDApIHsgLy8gbm8gYW5nbGVkIG9yIG11bHRpLWNvbG9yIGNoYXJhY3RlcnMKICAgICAgICAgICAgICAgIGltYWdldHRmdGV4dCgkdGhpcy0+dG1waW1nLCAkZm9udF9zaXplLCAwLCAkeCwgJHksICR0aGlzLT5nZHRleHRjb2xvciwgJHRoaXMtPnR0Zl9maWxlLCAkdGhpcy0+Y29kZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmb3IoJGkgPSAwOyAkaSA8ICRzdHJsZW47ICsrJGkpIHsKICAgICAgICAgICAgICAgICAgICAkYW5nbGUgPSByYW5kKCR0aGlzLT50ZXh0X2FuZ2xlX21pbmltdW0sICR0aGlzLT50ZXh0X2FuZ2xlX21heGltdW0pOwogICAgICAgICAgICAgICAgICAgICR5ID0gcmFuZCgkeSAtIDUsICR5ICsgNSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLT51c2VfbXVsdGlfdGV4dCA9PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRmb250X2NvbG9yID0gJHRoaXMtPmdkbXVsdGljb2xvcltyYW5kKDAsIHNpemVvZigkdGhpcy0+Z2RtdWx0aWNvbG9yKSAtIDEpXTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkZm9udF9jb2xvciA9ICR0aGlzLT5nZHRleHRjb2xvcjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJGNoID0gJHRoaXMtPmNvZGV7JGl9OwogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpbWFnZXR0ZnRleHQoJHRoaXMtPnRtcGltZywgJGZvbnRfc2l6ZSwgJGFuZ2xlLCAkeCwgJHksICRmb250X2NvbG9yLCAkdGhpcy0+dHRmX2ZpbGUsICRjaCk7CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC8vIGVzdGltYXRlIGNoYXJhY3RlciB3aWR0aHMgdG8gaW5jcmVtZW50ICR4IHdpdGhvdXQgY3JlYXRpbmcgc3BhY2VzIHRoYXQgYXJlIHRvbyBsYXJnZSBvciB0b28gc21hbGwKICAgICAgICAgICAgICAgICAgICAvLyB0aGVzZSBhcmUgYmVzdCBlc3RpbWF0ZXMgdG8gYWxpZ24gdGV4dCBidXQgbWF5IHZhcnkgYmV0d2VlbiBmb250cwogICAgICAgICAgICAgICAgICAgIC8vIGZvciBvcHRpbWFsIGNoYXJhY3RlciB3aWR0aHMsIGRvIG5vdCB1c2UgbXVsdGlwbGUgdGV4dCBjb2xvcnMgb3IgY2hhcmFjdGVyIGFuZ2xlcyBhbmQgdGhlIGNvbXBsZXRlIHN0cmluZyB3aWxsIGJlIHdyaXR0ZW4gYnkgaW1hZ2V0dGZ0ZXh0CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cnBvcygnYWJjZGVnaGtub3Bxc3V2eHl6JywgJGNoKSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJG1pbl94ID0gJGZvbnRfc2l6ZSAtICgkdGhpcy0+aXNjYWxlICogNik7CiAgICAgICAgICAgICAgICAgICAgICAgICRtYXhfeCA9ICRmb250X3NpemUgLSAoJHRoaXMtPmlzY2FsZSAqIDYpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RycG9zKCdpbEkxJywgJGNoKSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJG1pbl94ID0gJGZvbnRfc2l6ZSAvIDU7CiAgICAgICAgICAgICAgICAgICAgICAgICRtYXhfeCA9ICRmb250X3NpemUgLyAzOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RycG9zKCdmanJ0JywgJGNoKSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJG1pbl94ID0gJGZvbnRfc2l6ZSAtICgkdGhpcy0+aXNjYWxlICogMTIpOwogICAgICAgICAgICAgICAgICAgICAgICAkbWF4X3ggPSAkZm9udF9zaXplIC0gKCR0aGlzLT5pc2NhbGUgKiAxMik7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkY2ggPT0gJ3dtJykgewogICAgICAgICAgICAgICAgICAgICAgICAkbWluX3ggPSAkZm9udF9zaXplOwogICAgICAgICAgICAgICAgICAgICAgICAkbWF4X3ggPSAkZm9udF9zaXplICsgKCR0aGlzLT5pc2NhbGUgKiAzKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBudW1iZXJzLCBjYXBpdGFscyBvciB1bmljb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICRtaW5feCA9ICRmb250X3NpemUgKyAoJHRoaXMtPmlzY2FsZSAqIDIpOwogICAgICAgICAgICAgICAgICAgICAgICAkbWF4X3ggPSAkZm9udF9zaXplICsgKCR0aGlzLT5pc2NhbGUgKiA1KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICR4ICs9IHJhbmQoJG1pbl94LCAkbWF4X3gpOwogICAgICAgICAgICAgICAgfSAvL2ZvciBsb29wCiAgICAgICAgICAgIH0gLy8gYW5nbGVkIG9yIG11bHRpLWNvbG9yCiAgICAgICAgfSAvL2Vsc2UgdHRmIGZvbnQKICAgICAgICAvLyR0aGlzLT5pbSA9ICR0aGlzLT50bXBpbWc7CiAgICAgICAgLy8kdGhpcy0+b3V0cHV0KCk7CiAgICB9IC8vZnVuY3Rpb24KCiAgICAvKioKICAgICAqIFdhcnAgdGV4dCBmcm9tIHRlbXBvcmFyeSBpbWFnZSBvbnRvIGZpbmFsIGltYWdlLjxiciAvPgogICAgICogTW9kaWZpZWQgZm9yIHNlY3VyaW1hZ2UKICAgICAqCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEBzaW5jZSAyLjAKICAgICAqIEBhdXRob3IgSGFuLUt3YW5nIE5pZW5odXlzIG1vZGlmaWVkCiAgICAgKiBAY29weXJpZ2h0IEhhbi1Ld2FuZyBOZWluaHV5cwogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gZGlzdG9ydGVkQ29weSgpCiAgICB7CiAgICAgICAgJG51bXBvbGVzID0gMzsgLy8gZGlzdG9ydGlvbiBmYWN0b3IKICAgICAgICAgCiAgICAgICAgLy8gbWFrZSBhcnJheSBvZiBwb2xlcyBBS0EgYXR0cmFjdG9yIHBvaW50cwogICAgICAgIGZvciAoJGkgPSAwOyAkaSA8ICRudW1wb2xlczsgKyskaSkgewogICAgICAgICAgICAkcHhbJGldICA9IHJhbmQoJHRoaXMtPmltYWdlX3dpZHRoICogMC4zLCAkdGhpcy0+aW1hZ2Vfd2lkdGggKiAwLjcpOwogICAgICAgICAgICAkcHlbJGldICA9IHJhbmQoJHRoaXMtPmltYWdlX2hlaWdodCAqIDAuMywgJHRoaXMtPmltYWdlX2hlaWdodCAqIDAuNyk7CiAgICAgICAgICAgICRyYWRbJGldID0gcmFuZCgkdGhpcy0+aW1hZ2Vfd2lkdGggKiAwLjQsICR0aGlzLT5pbWFnZV93aWR0aCAqIDAuNyk7CiAgICAgICAgICAgICR0bXAgICAgID0gLSR0aGlzLT5mcmFuZCgpICogMC4xNSAtIDAuMTU7CiAgICAgICAgICAgICRhbXBbJGldID0gJHRoaXMtPnBlcnR1cmJhdGlvbiAqICR0bXA7CiAgICAgICAgfQogICAgICAgICAKICAgICAgICAkYmdDb2wgICA9IGltYWdlY29sb3JhdCgkdGhpcy0+dG1waW1nLCAwLCAwKTsKICAgICAgICAkd2lkdGgyICA9ICR0aGlzLT5pc2NhbGUgKiAkdGhpcy0+aW1hZ2Vfd2lkdGg7CiAgICAgICAgJGhlaWdodDIgPSAkdGhpcy0+aXNjYWxlICogJHRoaXMtPmltYWdlX2hlaWdodDsKICAgICAgICAgCiAgICAgICAgaW1hZ2VwYWxldHRlY29weSgkdGhpcy0+aW0sICR0aGlzLT50bXBpbWcpOyAvLyBjb3B5IHBhbGV0dGUgdG8gZmluYWwgaW1hZ2Ugc28gdGV4dCBjb2xvcnMgY29tZSBhY3Jvc3MKICAgICAgICAgCiAgICAgICAgLy8gbG9vcCBvdmVyICRpbWcgcGl4ZWxzLCB0YWtlIHBpeGVscyBmcm9tICR0bXBpbWcgd2l0aCBkaXN0b3J0aW9uIGZpZWxkCiAgICAgICAgZm9yICgkaXggPSAwOyAkaXggPCAkdGhpcy0+aW1hZ2Vfd2lkdGg7ICsrJGl4KSB7CiAgICAgICAgICAgIGZvciAoJGl5ID0gMDsgJGl5IDwgJHRoaXMtPmltYWdlX2hlaWdodDsgKyskaXkpIHsKICAgICAgICAgICAgICAgICR4ID0gJGl4OwogICAgICAgICAgICAgICAgJHkgPSAkaXk7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBmb3IgKCRpID0gMDsgJGkgPCAkbnVtcG9sZXM7ICsrJGkpIHsKICAgICAgICAgICAgICAgICAgICAkZHggPSAkaXggLSAkcHhbJGldOwogICAgICAgICAgICAgICAgICAgICRkeSA9ICRpeSAtICRweVskaV07CiAgICAgICAgICAgICAgICAgICAgaWYgKCRkeCA9PSAwICYmICRkeSA9PSAwKSBjb250aW51ZTsKCiAgICAgICAgICAgICAgICAgICAgJHIgPSBzcXJ0KCRkeCAqICRkeCArICRkeSAqICRkeSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRyID4gJHJhZFskaV0pIGNvbnRpbnVlOwoKICAgICAgICAgICAgICAgICAgICAkcnNjYWxlID0gJGFtcFskaV0gKiBzaW4oMy4xNCAqICRyIC8gJHJhZFskaV0pOwogICAgICAgICAgICAgICAgICAgICR4ICs9ICRkeCAqICRyc2NhbGU7CiAgICAgICAgICAgICAgICAgICAgJHkgKz0gJGR5ICogJHJzY2FsZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRjID0gJGJnQ29sOwogICAgICAgICAgICAgICAgJHggKj0gJHRoaXMtPmlzY2FsZTsKICAgICAgICAgICAgICAgICR5ICo9ICR0aGlzLT5pc2NhbGU7CgogICAgICAgICAgICAgICAgaWYgKCR4ID49IDAgJiYgJHggPCAkd2lkdGgyICYmICR5ID49IDAgJiYgJHkgPCAkaGVpZ2h0MikgewogICAgICAgICAgICAgICAgICAgICRjID0gaW1hZ2Vjb2xvcmF0KCR0aGlzLT50bXBpbWcsICR4LCAkeSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCRjICE9ICRiZ0NvbCkgeyAvLyBvbmx5IGNvcHkgcGl4ZWxzIG9mIGxldHRlcnMgdG8gcHJlc2VydmUgYW55IGJhY2tncm91bmQgaW1hZ2UKICAgICAgICAgICAgICAgICAgICBpbWFnZXNldHBpeGVsKCR0aGlzLT5pbSwgJGl4LCAkaXksICRjKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZSBhIGNvZGUgYW5kIHNhdmUgdG8gdGhlIHNlc3Npb24KICAgICAqCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEBzaW5jZSAxLjAuMQogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gY3JlYXRlQ29kZSgpCiAgICB7CiAgICAgICAgJHRoaXMtPmNvZGUgPSBmYWxzZTsKCiAgICAgICAgaWYgKCR0aGlzLT51c2Vfd29yZGxpc3QgJiYgaXNfcmVhZGFibGUoJHRoaXMtPndvcmRsaXN0X2ZpbGUpKSB7CiAgICAgICAgICAgICR0aGlzLT5jb2RlID0gJHRoaXMtPnJlYWRDb2RlRnJvbUZpbGUoKTsKICAgICAgICB9CgogICAgICAgIGlmICgkdGhpcy0+Y29kZSA9PSBmYWxzZSkgewogICAgICAgICAgICAkdGhpcy0+Y29kZSA9ICR0aGlzLT5nZW5lcmF0ZUNvZGUoJHRoaXMtPmNvZGVfbGVuZ3RoKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJHRoaXMtPnNhdmVEYXRhKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZW5lcmF0ZSBhIGNvZGUKICAgICAqCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEBwYXJhbSBpbnQgJGxlbiAgVGhlIGNvZGUgbGVuZ3RoCiAgICAgKiBAcmV0dXJuIHN0cmluZwogICAgICovCiAgICBmdW5jdGlvbiBnZW5lcmF0ZUNvZGUoJGxlbikKICAgIHsKICAgICAgICAkY29kZSA9ICcnOwoKICAgICAgICBmb3IoJGkgPSAxLCAkY3NsZW4gPSBzdHJsZW4oJHRoaXMtPmNoYXJzZXQpOyAkaSA8PSAkbGVuOyArKyRpKSB7CiAgICAgICAgICAgICRjb2RlIC49ICR0aGlzLT5jaGFyc2V0e3JhbmQoMCwgJGNzbGVuIC0gMSl9OwogICAgICAgIH0KICAgICAgICByZXR1cm4gJGNvZGU7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWFkcyBhIHdvcmQgbGlzdCBmaWxlIHRvIGdldCBhIGNvZGUKICAgICAqCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEBzaW5jZSAxLjAuMgogICAgICogQHJldHVybiBtaXhlZCAgZmFsc2Ugb24gZmFpbHVyZSwgYSB3b3JkIG9uIHN1Y2Nlc3MKICAgICAqLwogICAgZnVuY3Rpb24gcmVhZENvZGVGcm9tRmlsZSgpCiAgICB7CiAgICAgICAgJGZwID0gQGZvcGVuKCR0aGlzLT53b3JkbGlzdF9maWxlLCAncmInKTsKICAgICAgICBpZiAoISRmcCkgcmV0dXJuIGZhbHNlOwoKICAgICAgICAkZnNpemUgPSBmaWxlc2l6ZSgkdGhpcy0+d29yZGxpc3RfZmlsZSk7CiAgICAgICAgaWYgKCRmc2l6ZSA8IDMyKSByZXR1cm4gZmFsc2U7IC8vIHRvbyBzbWFsbCBvZiBhIGxpc3QgdG8gYmUgZWZmZWN0aXZlCgogICAgICAgIGlmICgkZnNpemUgPCAxMjgpIHsKICAgICAgICAgICAgJG1heCA9ICRmc2l6ZTsgLy8gc3RpbGwgcHJldHR5IHNtYWxsIGJ1dCBjaGFuZ2VzIHRoZSByYW5nZSBvZiBzZWVraW5nCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJG1heCA9IDEyODsKICAgICAgICB9CgogICAgICAgIGZzZWVrKCRmcCwgcmFuZCgwLCAkZnNpemUgLSAkbWF4KSwgU0VFS19TRVQpOwogICAgICAgICRkYXRhID0gZnJlYWQoJGZwLCAxMjgpOyAvLyByZWFkIGEgcmFuZG9tIDEyOCBieXRlcyBmcm9tIGZpbGUKICAgICAgICBmY2xvc2UoJGZwKTsKICAgICAgICAkZGF0YSA9IHByZWdfcmVwbGFjZSgiL1xyP1xuLyIsICJcbiIsICRkYXRhKTsKCiAgICAgICAgJHN0YXJ0ID0gc3RycG9zKCRkYXRhLCAiXG4iLCByYW5kKDAsIDEwMCkpICsgMTsgLy8gcmFuZG9tIHN0YXJ0IHBvc2l0aW9uCiAgICAgICAgJGVuZCAgID0gc3RycG9zKCRkYXRhLCAiXG4iLCAkc3RhcnQpOyAgICAgICAgICAgLy8gZmluZCBlbmQgb2Ygd29yZAoKICAgICAgICByZXR1cm4gc3RydG9sb3dlcihzdWJzdHIoJGRhdGEsICRzdGFydCwgJGVuZCAtICRzdGFydCkpOyAvLyByZXR1cm4gc3Vic3RyaW5nIGluIDEyOCBieXRlcwogICAgfQoKICAgIC8qKgogICAgICogT3V0cHV0IGltYWdlIHRvIHRoZSBicm93c2VyCiAgICAgKgogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiBvdXRwdXQoKQogICAgewogICAgICAgIGhlYWRlcigiRXhwaXJlczogTW9uLCAyNiBKdWwgMTk5NyAwNTowMDowMCBHTVQiKTsKICAgICAgICBoZWFkZXIoIkxhc3QtTW9kaWZpZWQ6ICIgLiBnbWRhdGUoIkQsIGQgTSBZIEg6aTpzIikgLiAiR01UIik7CiAgICAgICAgaGVhZGVyKCJDYWNoZS1Db250cm9sOiBuby1zdG9yZSwgbm8tY2FjaGUsIG11c3QtcmV2YWxpZGF0ZSIpOwogICAgICAgIGhlYWRlcigiQ2FjaGUtQ29udHJvbDogcG9zdC1jaGVjaz0wLCBwcmUtY2hlY2s9MCIsIGZhbHNlKTsKICAgICAgICBoZWFkZXIoIlByYWdtYTogbm8tY2FjaGUiKTsKCiAgICAgICAgc3dpdGNoKCR0aGlzLT5pbWFnZV90eXBlKQogICAgICAgIHsKICAgICAgICAgICAgY2FzZSBTSV9JTUFHRV9KUEVHOgogICAgICAgICAgICAgICAgaGVhZGVyKCJDb250ZW50LVR5cGU6IGltYWdlL2pwZWciKTsKICAgICAgICAgICAgICAgIGltYWdlanBlZygkdGhpcy0+aW0sIG51bGwsIDkwKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSBTSV9JTUFHRV9HSUY6CiAgICAgICAgICAgICAgICBoZWFkZXIoIkNvbnRlbnQtVHlwZTogaW1hZ2UvZ2lmIik7CiAgICAgICAgICAgICAgICBpbWFnZWdpZigkdGhpcy0+aW0pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgaGVhZGVyKCJDb250ZW50LVR5cGU6IGltYWdlL3BuZyIpOwogICAgICAgICAgICAgICAgaW1hZ2VwbmcoJHRoaXMtPmltKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgaW1hZ2VkZXN0cm95KCR0aGlzLT5pbSk7CiAgICAgICAgZXhpdDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBXQVYgb3IgTVAzIGZpbGUgZGF0YSBvZiB0aGUgc3Bva2VuIGNvZGUuPGJyIC8+CiAgICAgKiBUaGlzIGlzIGFwcHJvcHJpYXRlIGZvciBvdXRwdXQgdG8gdGhlIGJyb3dzZXIgYXMgYXVkaW8veC13YXYgb3IgYXVkaW8vbXBlZwogICAgICoKICAgICAqIEBzaW5jZSAxLjAuMQogICAgICogQHJldHVybiBzdHJpbmcgIFdBViBvciBNUDMgZGF0YQogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0QXVkaWJsZUNvZGUoJGZvcm1hdCA9ICd3YXYnKQogICAgewogICAgICAgICRsZXR0ZXJzID0gYXJyYXkoKTsKICAgICAgICAkY29kZSAgICA9ICR0aGlzLT5nZXRDb2RlKCk7CgogICAgICAgIGlmICgkY29kZSA9PSAnJykgewogICAgICAgICAgICAkdGhpcy0+Y3JlYXRlQ29kZSgpOwogICAgICAgICAgICAkY29kZSA9ICR0aGlzLT5nZXRDb2RlKCk7CiAgICAgICAgfQoKICAgICAgICBmb3IoJGkgPSAwOyAkaSA8IHN0cmxlbigkY29kZSk7ICsrJGkpIHsKICAgICAgICAgICAgJGxldHRlcnNbXSA9ICRjb2RleyRpfTsKICAgICAgICB9CgogICAgICAgIGlmICgkZm9ybWF0ID09ICdtcDMnKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+Z2VuZXJhdGVNUDMoJGxldHRlcnMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+Z2VuZXJhdGVXQVYoJGxldHRlcnMpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFNldCB0aGUgcGF0aCB0byB0aGUgYXVkaW8gZGlyZWN0b3J5LjxiciAvPgogICAgICoKICAgICAqIEBzaW5jZSAxLjAuNAogICAgICogQHJldHVybiBib29sIHRydWUgaWYgdGhlIGRpcmVjdG9yeSBleGlzdHMgYW5kIGlzIHJlYWRibGUsIGZhbHNlIGlmIG5vdAogICAgICovCiAgICBmdW5jdGlvbiBzZXRBdWRpb1BhdGgoJGF1ZGlvX2RpcmVjdG9yeSkKICAgIHsKICAgICAgICBpZiAoaXNfZGlyKCRhdWRpb19kaXJlY3RvcnkpICYmIGlzX3JlYWRhYmxlKCRhdWRpb19kaXJlY3RvcnkpKSB7CiAgICAgICAgICAgICR0aGlzLT5hdWRpb19wYXRoID0gJGF1ZGlvX2RpcmVjdG9yeTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFNhdmUgdGhlIGNvZGUgaW4gdGhlIHNlc3Npb24KICAgICAqCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNhdmVEYXRhKCkKICAgIHsKICAgICAgICAkX1NFU1NJT05bJ3NlY3VyaW1hZ2VfY29kZV92YWx1ZSddID0gc3RydG9sb3dlcigkdGhpcy0+Y29kZSk7CiAgICAgICAgJF9TRVNTSU9OWydzZWN1cmltYWdlX2NvZGVfY3RpbWUnXSA9IHRpbWUoKTsKICAgICAgICAKICAgICAgICAkdGhpcy0+c2F2ZUNvZGVUb0RhdGFiYXNlKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBWYWxpZGF0ZSB0aGUgY29kZSB0byB0aGUgdXNlciBjb2RlCiAgICAgKgogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiB2YWxpZGF0ZSgpCiAgICB7CiAgICAgICAgLy8gcmV0cmlldmUgY29kZSBmcm9tIHNlc3Npb24sIGlmIG5vIGNvZGUgZXhpc3RzIGNoZWNrIHNxbGl0ZSBkYXRhYmFzZSBpZiBzdXBwb3J0ZWQuCiAgICAgICAgJGNvZGUgPSAnJzsKCiAgICAgICAgaWYgKGlzc2V0KCRfU0VTU0lPTlsnc2VjdXJpbWFnZV9jb2RlX3ZhbHVlJ10pICYmIHRyaW0oJF9TRVNTSU9OWydzZWN1cmltYWdlX2NvZGVfdmFsdWUnXSkgIT0gJycpIHsKICAgICAgICAgICAgaWYgKCR0aGlzLT5pc0NvZGVFeHBpcmVkKCRfU0VTU0lPTlsnc2VjdXJpbWFnZV9jb2RlX2N0aW1lJ10pID09IGZhbHNlKSB7IAogICAgICAgICAgICAgICRjb2RlID0gJF9TRVNTSU9OWydzZWN1cmltYWdlX2NvZGVfdmFsdWUnXTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoJHRoaXMtPnVzZV9zcWxpdGVfZGIgPT0gdHJ1ZSAmJiBmdW5jdGlvbl9leGlzdHMoJ3NxbGl0ZV9vcGVuJykpIHsgLy8gbm8gY29kZSBpbiBzZXNzaW9uIC0gbWF5IG1lYW4gdXNlciBoYXMgY29va2llcyB0dXJuZWQgb2ZmCiAgICAgICAgICAgICR0aGlzLT5vcGVuRGF0YWJhc2UoKTsKICAgICAgICAgICAgJGNvZGUgPSAkdGhpcy0+Z2V0Q29kZUZyb21EYXRhYmFzZSgpOwogICAgICAgIH0gZWxzZSB7IC8qIHNlc3Npb24gY29kZSBpbnZhbGlkIG9yIG5vbi1leGlzdGFudCBhbmQgY29kZSBub3QgZm91bmQgaW4gc3FsaXRlIGRiIG9yIHNxbGl0ZSBpcyBub3QgYXZhaWxhYmxlICovIH0KICAgICAgICAKICAgICAgICAkY29kZSAgICAgICAgICAgICAgID0gdHJpbShzdHJ0b2xvd2VyKCRjb2RlKSk7CiAgICAgICAgJGNvZGVfZW50ZXJlZCAgICAgICA9IHRyaW0oc3RydG9sb3dlcigkdGhpcy0+Y29kZV9lbnRlcmVkKSk7CiAgICAgICAgJHRoaXMtPmNvcnJlY3RfY29kZSA9IGZhbHNlOwogICAgICAgIAogICAgICAgIGlmICgkY29kZSAhPSAnJykgewogICAgICAgICAgICAgICAgICAgIGlmICgkY29kZSA9PSAkY29kZV9lbnRlcmVkKSB7CiAgICAgICAgICAgICAgJHRoaXMtPmNvcnJlY3RfY29kZSA9IHRydWU7CiAgICAgICAgICAgICAgJF9TRVNTSU9OWydzZWN1cmltYWdlX2NvZGVfdmFsdWUnXSA9ICcnOwogICAgICAgICAgICAgICRfU0VTU0lPTlsnc2VjdXJpbWFnZV9jb2RlX2N0aW1lJ10gPSAnJzsKICAgICAgICAgICAgICAkdGhpcy0+Y2xlYXJDb2RlRnJvbURhdGFiYXNlKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogR2V0IHRoZSBjYXB0Y2hhIGNvZGUKICAgICAqCiAgICAgKiBAc2luY2UgMS4wLjEKICAgICAqIEByZXR1cm4gc3RyaW5nCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldENvZGUoKQogICAgewogICAgICAgIGlmIChpc3NldCgkX1NFU1NJT05bJ3NlY3VyaW1hZ2VfY29kZV92YWx1ZSddKSAmJiAhZW1wdHkoJF9TRVNTSU9OWydzZWN1cmltYWdlX2NvZGVfdmFsdWUnXSkpIHsKICAgICAgICAgICAgcmV0dXJuIHN0cnRvbG93ZXIoJF9TRVNTSU9OWydzZWN1cmltYWdlX2NvZGVfdmFsdWUnXSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKCR0aGlzLT5zcWxpdGVfaGFuZGxlID09IGZhbHNlKSAkdGhpcy0+b3BlbkRhdGFiYXNlKCk7CiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmdldENvZGVGcm9tRGF0YWJhc2UoKTsgLy8gYXR0ZW1wdCB0byBnZXQgZnJvbSBkYXRhYmFzZSwgcmV0dXJucyBlbXB0eSBzdHJpbmcgaWYgc3FsaXRlIGlzIG5vdCBhdmFpbGFibGUgb3IgZGlzYWJsZWQKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVjayBpZiB0aGUgdXNlciBlbnRlcmVkIGNvZGUgd2FzIGNvcnJlY3QKICAgICAqCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEByZXR1cm4gYm9vbGVhbgogICAgICovCiAgICBmdW5jdGlvbiBjaGVja0NvZGUoKQogICAgewogICAgICAgIHJldHVybiAkdGhpcy0+Y29ycmVjdF9jb2RlOwogICAgfQoKICAgIC8qKgogICAgICogR2VuZXJhdGUgYSB3YXYgZmlsZSBieSBjb25jYXRlbmF0aW5nIGluZGl2aWR1YWwgZmlsZXMKICAgICAqCiAgICAgKiBAc2luY2UgMS4wLjEKICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICogQHBhcmFtIGFycmF5ICRsZXR0ZXJzICBBcnJheSBvZiBsZXR0ZXJzIHRvIGJ1aWxkIGEgZmlsZSBmcm9tCiAgICAgKiBAcmV0dXJuIHN0cmluZyAgV0FWIGZpbGUgZGF0YQogICAgICovCiAgICBmdW5jdGlvbiBnZW5lcmF0ZVdBVigkbGV0dGVycykKICAgIHsKICAgICAgICAkZGF0YV9sZW4gICAgPSAwOwogICAgICAgICRmaWxlcyAgICAgICA9IGFycmF5KCk7CiAgICAgICAgJG91dF9kYXRhICAgID0gJyc7CgogICAgICAgIGZvcmVhY2ggKCRsZXR0ZXJzIGFzICRsZXR0ZXIpIHsKICAgICAgICAgICAgJGZpbGVuYW1lID0gJHRoaXMtPmF1ZGlvX3BhdGggLiBzdHJ0b3VwcGVyKCRsZXR0ZXIpIC4gJy53YXYnOwoKICAgICAgICAgICAgJGZwID0gZm9wZW4oJGZpbGVuYW1lLCAncmInKTsKCiAgICAgICAgICAgICRmaWxlID0gYXJyYXkoKTsKCiAgICAgICAgICAgICRkYXRhID0gZnJlYWQoJGZwLCBmaWxlc2l6ZSgkZmlsZW5hbWUpKTsgLy8gcmVhZCBmaWxlIGluCgogICAgICAgICAgICAkaGVhZGVyID0gc3Vic3RyKCRkYXRhLCAwLCAzNik7CiAgICAgICAgICAgICRib2R5ICAgPSBzdWJzdHIoJGRhdGEsIDQ0KTsKCgogICAgICAgICAgICAkZGF0YSA9IHVucGFjaygnTkNodW5rSUQvVkNodW5rU2l6ZS9ORm9ybWF0L05TdWJDaHVuazFJRC9WU3ViQ2h1bmsxU2l6ZS92QXVkaW9Gb3JtYXQvdk51bUNoYW5uZWxzL1ZTYW1wbGVSYXRlL1ZCeXRlUmF0ZS92QmxvY2tBbGlnbi92Qml0c1BlclNhbXBsZScsICRoZWFkZXIpOwoKICAgICAgICAgICAgJGZpbGVbJ3N1Yl9jaHVuazFfaWQnXSAgID0gJGRhdGFbJ1N1YkNodW5rMUlEJ107CiAgICAgICAgICAgICRmaWxlWydiaXRzX3Blcl9zYW1wbGUnXSA9ICRkYXRhWydCaXRzUGVyU2FtcGxlJ107CiAgICAgICAgICAgICRmaWxlWydjaGFubmVscyddICAgICAgICA9ICRkYXRhWydOdW1DaGFubmVscyddOwogICAgICAgICAgICAkZmlsZVsnZm9ybWF0J10gICAgICAgICAgPSAkZGF0YVsnQXVkaW9Gb3JtYXQnXTsKICAgICAgICAgICAgJGZpbGVbJ3NhbXBsZV9yYXRlJ10gICAgID0gJGRhdGFbJ1NhbXBsZVJhdGUnXTsKICAgICAgICAgICAgJGZpbGVbJ3NpemUnXSAgICAgICAgICAgID0gJGRhdGFbJ0NodW5rU2l6ZSddICsgODsKICAgICAgICAgICAgJGZpbGVbJ2RhdGEnXSAgICAgICAgICAgID0gJGJvZHk7CgogICAgICAgICAgICBpZiAoICgkcCA9IHN0cnBvcygkZmlsZVsnZGF0YSddLCAnTElTVCcpKSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIC8vIElmIHRoZSBMSVNUIGRhdGEgaXMgbm90IGF0IHRoZSBlbmQgb2YgdGhlIGZpbGUsIHRoaXMgd2lsbCBwcm9iYWJseSBicmVhayB5b3VyIHNvdW5kIGZpbGUKICAgICAgICAgICAgICAgICRpbmZvICAgICAgICAgPSBzdWJzdHIoJGZpbGVbJ2RhdGEnXSwgJHAgKyA0LCA4KTsKICAgICAgICAgICAgICAgICRkYXRhICAgICAgICAgPSB1bnBhY2soJ1ZsZW5ndGgvVmp1bmsnLCAkaW5mbyk7CiAgICAgICAgICAgICAgICAkZmlsZVsnZGF0YSddID0gc3Vic3RyKCRmaWxlWydkYXRhJ10sIDAsICRwKTsKICAgICAgICAgICAgICAgICRmaWxlWydzaXplJ10gPSAkZmlsZVsnc2l6ZSddIC0gKHN0cmxlbigkZmlsZVsnZGF0YSddKSAtICRwKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGZpbGVzW10gPSAkZmlsZTsKICAgICAgICAgICAgJGRhdGEgICAgPSBudWxsOwogICAgICAgICAgICAkaGVhZGVyICA9IG51bGw7CiAgICAgICAgICAgICRib2R5ICAgID0gbnVsbDsKCiAgICAgICAgICAgICRkYXRhX2xlbiArPSBzdHJsZW4oJGZpbGVbJ2RhdGEnXSk7CgogICAgICAgICAgICBmY2xvc2UoJGZwKTsKICAgICAgICB9CgogICAgICAgICRvdXRfZGF0YSA9ICcnOwogICAgICAgIGZvcigkaSA9IDA7ICRpIDwgc2l6ZW9mKCRmaWxlcyk7ICsrJGkpIHsKICAgICAgICAgICAgaWYgKCRpID09IDApIHsgLy8gb3V0cHV0IGhlYWRlcgogICAgICAgICAgICAgICAgJG91dF9kYXRhIC49IHBhY2soJ0M0VkM4Jywgb3JkKCdSJyksIG9yZCgnSScpLCBvcmQoJ0YnKSwgb3JkKCdGJyksICRkYXRhX2xlbiArIDM2LCBvcmQoJ1cnKSwgb3JkKCdBJyksIG9yZCgnVicpLCBvcmQoJ0UnKSwgb3JkKCdmJyksIG9yZCgnbScpLCBvcmQoJ3QnKSwgb3JkKCcgJykpOwoKICAgICAgICAgICAgICAgICRvdXRfZGF0YSAuPSBwYWNrKCdWdnZWVnZ2JywKICAgICAgICAgICAgICAgIDE2LAogICAgICAgICAgICAgICAgJGZpbGVzWyRpXVsnZm9ybWF0J10sCiAgICAgICAgICAgICAgICAkZmlsZXNbJGldWydjaGFubmVscyddLAogICAgICAgICAgICAgICAgJGZpbGVzWyRpXVsnc2FtcGxlX3JhdGUnXSwKICAgICAgICAgICAgICAgICRmaWxlc1skaV1bJ3NhbXBsZV9yYXRlJ10gKiAoKCRmaWxlc1skaV1bJ2JpdHNfcGVyX3NhbXBsZSddICogJGZpbGVzWyRpXVsnY2hhbm5lbHMnXSkgLyA4KSwKICAgICAgICAgICAgICAgICgkZmlsZXNbJGldWydiaXRzX3Blcl9zYW1wbGUnXSAqICRmaWxlc1skaV1bJ2NoYW5uZWxzJ10pIC8gOCwKICAgICAgICAgICAgICAgICRmaWxlc1skaV1bJ2JpdHNfcGVyX3NhbXBsZSddICk7CgogICAgICAgICAgICAgICAgJG91dF9kYXRhIC49IHBhY2soJ0M0Jywgb3JkKCdkJyksIG9yZCgnYScpLCBvcmQoJ3QnKSwgb3JkKCdhJykpOwoKICAgICAgICAgICAgICAgICRvdXRfZGF0YSAuPSBwYWNrKCdWJywgJGRhdGFfbGVuKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJG91dF9kYXRhIC49ICRmaWxlc1skaV1bJ2RhdGEnXTsKICAgICAgICB9CgogICAgICAgICR0aGlzLT5zY3JhbWJsZUF1ZGlvRGF0YSgkb3V0X2RhdGEsICd3YXYnKTsKICAgICAgICByZXR1cm4gJG91dF9kYXRhOwogICAgfQoKICAgIC8qKgogICAgICogUmFuZG9tbHkgbW9kaWZ5IHRoZSBhdWRpbyBkYXRhIHRvIHNjcmFtYmxlIHNvdW5kIGFuZCBwcmV2ZW50IGJpbmFyeSByZWNvZ25pdGlvbi48YnIgLz4KICAgICAqIFRha2UgY2FyZSBub3QgdG8gImJyZWFrIiB0aGUgYXVkaW8gZmlsZSBieSBsZWF2aW5nIHRoZSBoZWFkZXIgZGF0YSBpbnRhY3QuCiAgICAgKgogICAgICogQHNpbmNlIDIuMAogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKiBAcGFyYW0gJGRhdGEgU291bmQgZGF0YSBpbiBtcDMgb2Ygd2F2IGZvcm1hdAogICAgICovCiAgICBmdW5jdGlvbiBzY3JhbWJsZUF1ZGlvRGF0YSgmJGRhdGEsICRmb3JtYXQpCiAgICB7CiAgICAgICAgaWYgKCRmb3JtYXQgPT0gJ3dhdicpIHsKICAgICAgICAgICAgJHN0YXJ0ID0gc3RycG9zKCRkYXRhLCAnZGF0YScpICsgNDsgLy8gbG9vayBmb3IgImRhdGEiIGluZGljYXRvcgogICAgICAgICAgICBpZiAoJHN0YXJ0ID09PSBmYWxzZSkgJHN0YXJ0ID0gNDQ7ICAvLyBpZiBub3QgZm91bmQgYXNzdW1lIDQ0IGJ5dGUgaGVhZGVyCiAgICAgICAgfSBlbHNlIHsgLy8gbXAzCiAgICAgICAgICAgICRzdGFydCA9IDQ7IC8vIDQgYnl0ZSAoMzIgYml0KSBmcmFtZSBoZWFkZXIKICAgICAgICB9CiAgICAgICAgIAogICAgICAgICRzdGFydCAgKz0gcmFuZCgxLCA2NCk7IC8vIHJhbmRvbWl6ZSBzdGFydGluZyBvZmZzZXQKICAgICAgICAkZGF0YWxlbiA9IHN0cmxlbigkZGF0YSkgLSAkc3RhcnQgLSAyNTY7IC8vIGxlYXZlIGxhc3QgMjU2IGJ5dGVzIHVuY2hhbmdlZAogICAgICAgICAKICAgICAgICBmb3IgKCRpID0gJHN0YXJ0OyAkaSA8ICRkYXRhbGVuOyAkaSArPSA2NCkgewogICAgICAgICAgICAkY2ggPSBvcmQoJGRhdGF7JGl9KTsKICAgICAgICAgICAgaWYgKCRjaCA8IDkgfHwgJGNoID4gMTE5KSBjb250aW51ZTsKCiAgICAgICAgICAgICRkYXRheyRpfSA9IGNocigkY2ggKyByYW5kKC04LCA4KSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogR2VuZXJhdGUgYW4gbXAzIGZpbGUgYnkgY29uY2F0ZW5hdGluZyBpbmRpdmlkdWFsIGZpbGVzCiAgICAgKiBAc2luY2UgMS4wLjQKICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICogQHBhcmFtIGFycmF5ICRsZXR0ZXJzICBBcnJheSBvZiBsZXR0ZXJzIHRvIGJ1aWxkIGEgZmlsZSBmcm9tCiAgICAgKiBAcmV0dXJuIHN0cmluZyAgTVAzIGZpbGUgZGF0YQogICAgICovCiAgICBmdW5jdGlvbiBnZW5lcmF0ZU1QMygkbGV0dGVycykKICAgIHsKICAgICAgICAkZGF0YV9sZW4gICAgPSAwOwogICAgICAgICRmaWxlcyAgICAgICA9IGFycmF5KCk7CiAgICAgICAgJG91dF9kYXRhICAgID0gJyc7CgogICAgICAgIGZvcmVhY2ggKCRsZXR0ZXJzIGFzICRsZXR0ZXIpIHsKICAgICAgICAgICAgJGZpbGVuYW1lID0gJHRoaXMtPmF1ZGlvX3BhdGggLiBzdHJ0b3VwcGVyKCRsZXR0ZXIpIC4gJy5tcDMnOwoKICAgICAgICAgICAgJGZwICAgPSBmb3BlbigkZmlsZW5hbWUsICdyYicpOwogICAgICAgICAgICAkZGF0YSA9IGZyZWFkKCRmcCwgZmlsZXNpemUoJGZpbGVuYW1lKSk7IC8vIHJlYWQgZmlsZSBpbgoKICAgICAgICAgICAgJHRoaXMtPnNjcmFtYmxlQXVkaW9EYXRhKCRkYXRhLCAnbXAzJyk7CiAgICAgICAgICAgICRvdXRfZGF0YSAuPSAkZGF0YTsKCiAgICAgICAgICAgIGZjbG9zZSgkZnApOwogICAgICAgIH0KCgogICAgICAgIHJldHVybiAkb3V0X2RhdGE7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZW5lcmF0ZSByYW5kb20gbnVtYmVyIGxlc3MgdGhhbiAxCiAgICAgKiBAc2luY2UgMi4wCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEByZXR1cm4gZmxvYXQKICAgICAqLwogICAgZnVuY3Rpb24gZnJhbmQoKQogICAgewogICAgICAgIHJldHVybiAwLjAwMDEqcmFuZCgwLDk5OTkpOwogICAgfQoKICAgIC8qKgogICAgICogUHJpbnQgc2lnbmF0dXJlIHRleHQgb24gaW1hZ2UKICAgICAqCiAgICAgKiBAc2luY2UgMi4wCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFkZFNpZ25hdHVyZSgpCiAgICB7CiAgICAgICAgaWYgKCR0aGlzLT51c2VfZ2RfZm9udCkgewogICAgICAgICAgICBpbWFnZXN0cmluZygkdGhpcy0+aW0sIDUsICR0aGlzLT5pbWFnZV93aWR0aCAtIChzdHJsZW4oJHRoaXMtPmltYWdlX3NpZ25hdHVyZSkgKiAxMCksICR0aGlzLT5pbWFnZV9oZWlnaHQgLSAyMCwgJHRoaXMtPmltYWdlX3NpZ25hdHVyZSwgJHRoaXMtPmdkc2lnbmF0dXJlY29sb3IpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAKICAgICAgICAgICAgJGJib3ggPSBpbWFnZXR0ZmJib3goMTAsIDAsICR0aGlzLT5zaWduYXR1cmVfZm9udCwgJHRoaXMtPmltYWdlX3NpZ25hdHVyZSk7CiAgICAgICAgICAgICR0ZXh0bGVuID0gJGJib3hbMl0gLSAkYmJveFswXTsKICAgICAgICAgICAgJHggPSAkdGhpcy0+aW1hZ2Vfd2lkdGggLSAkdGV4dGxlbiAtIDU7CiAgICAgICAgICAgICR5ID0gJHRoaXMtPmltYWdlX2hlaWdodCAtIDM7CiAgICAgICAgICAgICAKICAgICAgICAgICAgaW1hZ2V0dGZ0ZXh0KCR0aGlzLT5pbSwgMTAsIDAsICR4LCAkeSwgJHRoaXMtPmdkc2lnbmF0dXJlY29sb3IsICR0aGlzLT5zaWduYXR1cmVfZm9udCwgJHRoaXMtPmltYWdlX3NpZ25hdHVyZSk7CiAgICAgICAgfQogICAgfQogICAgCiAgICAvKioKICAgICAqIEdldCBoYXNoZWQgSVAgYWRkcmVzcyBvZiByZW1vdGUgdXNlcgogICAgICogCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEBzaW5jZSAyLjAuMQogICAgICogQHJldHVybiBzdHJpbmcKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0SVBIYXNoKCkKICAgIHsKICAgICAgICByZXR1cm4gc3RydG9sb3dlcihtZDUoJF9TRVJWRVJbJ1JFTU9URV9BRERSJ10pKTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBPcGVuIFNRTGl0ZSBkYXRhYmFzZQogICAgICogCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEBzaW5jZSAyLjAuMQogICAgICogQHJldHVybiBib29sIHRydWUgaWYgZGF0YWJhc2Ugd2FzIG9wZW5lZCBzdWNjZXNzZnVsbHkKICAgICAqLwogICAgZnVuY3Rpb24gb3BlbkRhdGFiYXNlKCkKICAgIHsKICAgICAgICAkdGhpcy0+c3FsaXRlX2hhbmRsZSA9IGZhbHNlOwogICAgICAgIAogICAgICAgIGlmICgkdGhpcy0+dXNlX3NxbGl0ZV9kYiAmJiBmdW5jdGlvbl9leGlzdHMoJ3NxbGl0ZV9vcGVuJykpIHsKICAgICAgICAgICAgJHRoaXMtPnNxbGl0ZV9oYW5kbGUgPSBzcWxpdGVfb3BlbigkdGhpcy0+c3FsaXRlX2RhdGFiYXNlLCAwNjY2LCAkZXJyb3IpOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKCR0aGlzLT5zcWxpdGVfaGFuZGxlICE9PSBmYWxzZSkgewogICAgICAgICAgICAgICAgJHJlcyA9IHNxbGl0ZV9xdWVyeSgkdGhpcy0+c3FsaXRlX2hhbmRsZSwgIlBSQUdNQSB0YWJsZV9pbmZvKGNvZGVzKSIpOwogICAgICAgICAgICAgICAgaWYgKHNxbGl0ZV9udW1fcm93cygkcmVzKSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgIHNxbGl0ZV9xdWVyeSgkdGhpcy0+c3FsaXRlX2hhbmRsZSwgIkNSRUFURSBUQUJMRSBjb2RlcyAoaXBoYXNoIFZBUkNIQVIoMzIpIFBSSU1BUlkgS0VZLCBjb2RlIFZBUkNIQVIoMzIpIE5PVCBOVUxMLCBjcmVhdGVkIElOVEVHRVIpIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+c3FsaXRlX2hhbmRsZSAhPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuICR0aGlzLT5zcWxpdGVfaGFuZGxlOwogICAgfQogICAgCiAgICAvKioKICAgICAqIFNhdmUgY2FwdGNoYSBjb2RlIHRvIHNxbGl0ZSBkYXRhYmFzZQogICAgICogCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEBzaW5jZSAyLjAuMQogICAgICogQHJldHVybiBib29sIHRydWUgaWYgY29kZSB3YXMgc2F2ZWQsIGZhbHNlIGlmIG5vdAogICAgICovCiAgICBmdW5jdGlvbiBzYXZlQ29kZVRvRGF0YWJhc2UoKQogICAgewogICAgICAgICRzdWNjZXNzID0gZmFsc2U7CiAgICAgICAgCiAgICAgICAgJHRoaXMtPm9wZW5EYXRhYmFzZSgpOwogICAgICAgIAogICAgICAgIGlmICgkdGhpcy0+dXNlX3NxbGl0ZV9kYiAmJiAkdGhpcy0+c3FsaXRlX2hhbmRsZSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgJGlwID0gJHRoaXMtPmdldElQSGFzaCgpOwogICAgICAgICAgICAkdGltZSA9IHRpbWUoKTsKICAgICAgICAgICAgJGNvZGUgPSAkX1NFU1NJT05bJ3NlY3VyaW1hZ2VfY29kZV92YWx1ZSddOyAvLyBoYXNoIGNvZGUgZm9yIHNlY3VyaXR5IC0gaWYgY29va2llcyBhcmUgZGlzYWJsZWQgdGhlIHNlc3Npb24gc3RpbGwgZXhpc3RzIGF0IHRoaXMgcG9pbnQKICAgICAgICAgICAgJHN1Y2Nlc3MgPSBzcWxpdGVfcXVlcnkoJHRoaXMtPnNxbGl0ZV9oYW5kbGUsICJJTlNFUlQgT1IgUkVQTEFDRSBJTlRPIGNvZGVzKGlwaGFzaCwgY29kZSwgY3JlYXRlZCkgVkFMVUVTKCckaXAnLCAnJGNvZGUnLCAkdGltZSkiKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuICRzdWNjZXNzICE9PSBmYWxzZTsKICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBHZXQgc3RvcmVkIGNhcHRjaGEgY29kZSBmcm9tIHNxbGl0ZSBkYXRhYmFzZSBiYXNlZCBvbiBpcCBhZGRyZXNzIGhhc2gKICAgICAqIAogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKiBAc2luY2UgMi4wLjEKICAgICAqIEByZXR1cm4gc3RyaW5nIGNhcHRjaGEgY29kZQogICAgICovCiAgICBmdW5jdGlvbiBnZXRDb2RlRnJvbURhdGFiYXNlKCkKICAgIHsKICAgICRjb2RlID0gJyc7CgogICAgaWYgKCR0aGlzLT51c2Vfc3FsaXRlX2RiICYmICR0aGlzLT5zcWxpdGVfaGFuZGxlICE9PSBmYWxzZSkgewogICAgICAgICRpcCA9ICR0aGlzLT5nZXRJUEhhc2goKTsKICAgICAgICAKICAgICAgICAkcmVzID0gc3FsaXRlX3F1ZXJ5KCR0aGlzLT5zcWxpdGVfaGFuZGxlLCAiU0VMRUNUICogRlJPTSBjb2RlcyBXSEVSRSBpcGhhc2ggPSAnJGlwJyIpOwogICAgICAgIGlmICgkcmVzICYmIHNxbGl0ZV9udW1fcm93cygkcmVzKSA+IDApIHsKICAgICAgICAgICAgJHJlcyA9IHNxbGl0ZV9mZXRjaF9hcnJheSgkcmVzKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICgkdGhpcy0+aXNDb2RlRXhwaXJlZCgkcmVzWydjcmVhdGVkJ10pID09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAkY29kZSA9ICRyZXNbJ2NvZGUnXTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIAogICAgcmV0dXJuICRjb2RlOwogICAgfQogICAgCiAgICAvKioKICAgICAqIERlbGV0ZSBhIGNvZGUgZnJvbSB0aGUgZGF0YWJhc2UgYnkgaXAgYWRkcmVzcyBoYXNoCiAgICAgKiAKICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICogQHNpbmNlIDIuMC4xCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNsZWFyQ29kZUZyb21EYXRhYmFzZSgpCiAgICB7CiAgICAgICAgaWYgKCR0aGlzLT5zcWxpdGVfaGFuZGxlICE9PSBmYWxzZSkgewogICAgICAgICAgICAkaXAgPSAkdGhpcy0+Z2V0SVBIYXNoKCk7CiAgICAgICAgICAgIAogICAgICAgICAgICBzcWxpdGVfcXVlcnkoJHRoaXMtPnNxbGl0ZV9oYW5kbGUsICJERUxFVEUgRlJPTSBjb2RlcyBXSEVSRSBpcGhhc2ggPSAnJGlwJyIpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgLyoqCiAgICAgKiBQdXJnZSBjb2RlcyBvdmVyIGEgZGF5IG9sZCBmcm9tIGRhdGFiYXNlCiAgICAgKiAKICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICogQHNpbmNlIDIuMC4xCiAgICAgKi8KICAgIGZ1bmN0aW9uIHB1cmdlT2xkQ29kZXNGcm9tRGF0YWJhc2UoKQogICAgewogICAgICAgIGlmICgkdGhpcy0+dXNlX3NxbGl0ZV9kYiAmJiAkdGhpcy0+c3FsaXRlX2hhbmRsZSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgJG5vdyAgID0gdGltZSgpOwogICAgICAgICAgICAkbGltaXQgPSAoIWlzX251bWVyaWMoJHRoaXMtPmV4cGlyeV90aW1lKSB8fCAkdGhpcy0+ZXhwaXJ5X3RpbWUgPCAxKSA\/IDg2NDAwIDogJHRoaXMtPmV4cGlyeV90aW1lOwogICAgICAgICAgICAKICAgICAgICAgICAgc3FsaXRlX3F1ZXJ5KCR0aGlzLT5zcWxpdGVfaGFuZGxlLCAiREVMRVRFIEZST00gY29kZXMgV0hFUkUgJG5vdyAtIGNyZWF0ZWQgPiAkbGltaXQiKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIC8qKgogICAgICogQ2hlY2sgYSBjb2RlIHRvIHNlZSBpZiBpdCBpcyBleHBpcmVkIGJhc2VkIG9uIGNyZWF0aW9uIHRpbWUKICAgICAqIAogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKiBAc2luY2UgMi4wLjEKICAgICAqIEBwYXJhbSAkY3JlYXRpb25fdGltZSB1bml4IHRpbWVzdGFtcCBvZiBjb2RlIGNyZWF0aW9uIHRpbWUKICAgICAqIEByZXR1cm4gYm9vbCB0cnVlIGlmIGNvZGUgaGFzIGV4cGlyZWQsIGZhbHNlIGlmIG5vdAogICAgICovCiAgICBmdW5jdGlvbiBpc0NvZGVFeHBpcmVkKCRjcmVhdGlvbl90aW1lKQogICAgewogICAgICAgICRleHBpcmVkID0gdHJ1ZTsKICAgICAgICAKICAgICAgICBpZiAoIWlzX251bWVyaWMoJHRoaXMtPmV4cGlyeV90aW1lKSB8fCAkdGhpcy0+ZXhwaXJ5X3RpbWUgPCAxKSB7CiAgICAgICAgICAgICRleHBpcmVkID0gZmFsc2U7CiAgICAgICAgfSBlbHNlIGlmICh0aW1lKCkgLSAkY3JlYXRpb25fdGltZSA8ICR0aGlzLT5leHBpcnlfdGltZSkgewogICAgICAgICAgICAkZXhwaXJlZCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gJGV4cGlyZWQ7CiAgICB9CiAgICAKfSAvKiBjbGFzcyBTZWN1cmltYWdlICovCgoKLyoqCiAqIENvbG9yIG9iamVjdCBmb3IgU2VjdXJpbWFnZSBDQVBUQ0hBCiAqCiAqIEBzaW5jZSAyLjAKICogQHBhY2thZ2UgU2VjdXJpbWFnZQogKiBAc3VicGFja2FnZSBjbGFzc2VzCiAqCiAqLwpjbGFzcyBTZWN1cmltYWdlX0NvbG9yIHsKICAgIC8qKgogICAgICogUmVkIGNvbXBvbmVudDogMC0yNTUKICAgICAqCiAgICAgKiBAdmFyIGludAogICAgICovCiAgICB2YXIgJHI7CiAgICAvKioKICAgICAqIEdyZWVuIGNvbXBvbmVudDogMC0yNTUKICAgICAqCiAgICAgKiBAdmFyIGludAogICAgICovCiAgICB2YXIgJGc7CiAgICAvKioKICAgICAqIEJsdWUgY29tcG9uZW50OiAwLTI1NQogICAgICoKICAgICAqIEB2YXIgaW50CiAgICAgKi8KICAgIHZhciAkYjsKCiAgICAvKioKICAgICAqIENyZWF0ZSBhIG5ldyBTZWN1cmltYWdlX0NvbG9yIG9iamVjdC48YnIgLz4KICAgICAqIFNwZWNpZnkgdGhlIHJlZCwgZ3JlZW4sIGFuZCBibHVlIGNvbXBvbmVudHMgdXNpbmcgdGhlaXIgSFRNTCBoZXggY29kZSBlcXVpdmFsZW50LjxiciAvPgogICAgICogRXhhbXBsZTogVGhlIGNvZGUgZm9yIHRoZSBIVE1MIGNvbG9yICM0QTIwM0MgaXM6PGJyIC8+CiAgICAgKiAkY29sb3IgPSBuZXcgU2VjdXJpbWFnZV9Db2xvcigweDRBLCAweDIwLCAweDNDKTsKICAgICAqCiAgICAgKiBAcGFyYW0gJHJlZCBSZWQgY29tcG9uZW50IDAtMjU1CiAgICAgKiBAcGFyYW0gJGdyZWVuIEdyZWVuIGNvbXBvbmVudCAwLTI1NQogICAgICogQHBhcmFtICRibHVlIEJsdWUgY29tcG9uZW50IDAtMjU1CiAgICAgKi8KICAgIGZ1bmN0aW9uIFNlY3VyaW1hZ2VfQ29sb3IoJHJlZCwgJGdyZWVuID0gbnVsbCwgJGJsdWUgPSBudWxsKQogICAgewogICAgICAgIGlmICgkZ3JlZW4gPT0gbnVsbCAmJiAkYmx1ZSA9PSBudWxsICYmIHByZWdfbWF0Y2goJy9eI1thLWYwLTldezMsNn0kL2knLCAkcmVkKSkgewogICAgICAgICAgICAkY29sID0gc3Vic3RyKCRyZWQsIDEpOwogICAgICAgICAgICBpZiAoc3RybGVuKCRjb2wpID09IDMpIHsKICAgICAgICAgICAgICAgICRyZWQgICA9IHN0cl9yZXBlYXQoc3Vic3RyKCRjb2wsIDAsIDEpLCAyKTsKICAgICAgICAgICAgICAgICRncmVlbiA9IHN0cl9yZXBlYXQoc3Vic3RyKCRjb2wsIDEsIDEpLCAyKTsKICAgICAgICAgICAgICAgICRibHVlICA9IHN0cl9yZXBlYXQoc3Vic3RyKCRjb2wsIDIsIDEpLCAyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRyZWQgICA9IHN1YnN0cigkY29sLCAwLCAyKTsKICAgICAgICAgICAgICAgICRncmVlbiA9IHN1YnN0cigkY29sLCAyLCAyKTsKICAgICAgICAgICAgICAgICRibHVlICA9IHN1YnN0cigkY29sLCA0LCAyKTsgCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICRyZWQgICA9IGhleGRlYygkcmVkKTsKICAgICAgICAgICAgJGdyZWVuID0gaGV4ZGVjKCRncmVlbik7CiAgICAgICAgICAgICRibHVlICA9IGhleGRlYygkYmx1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKCRyZWQgPCAwKSAkcmVkICAgICAgID0gMDsKICAgICAgICAgICAgaWYgKCRyZWQgPiAyNTUpICRyZWQgICAgID0gMjU1OwogICAgICAgICAgICBpZiAoJGdyZWVuIDwgMCkgJGdyZWVuICAgPSAwOwogICAgICAgICAgICBpZiAoJGdyZWVuID4gMjU1KSAkZ3JlZW4gPSAyNTU7CiAgICAgICAgICAgIGlmICgkYmx1ZSA8IDApICRibHVlICAgICA9IDA7CiAgICAgICAgICAgIGlmICgkYmx1ZSA+IDI1NSkgJGJsdWUgICA9IDI1NTsKICAgICAgICB9CgogICAgICAgICR0aGlzLT5yID0gJHJlZDsKICAgICAgICAkdGhpcy0+ZyA9ICRncmVlbjsKICAgICAgICAkdGhpcy0+YiA9ICRibHVlOwogICAgfQp9Cg==",
    "size": "49726"
}