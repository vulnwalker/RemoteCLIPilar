{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/flot\/jquery.flot.selection.js",
    "lastUpdate": "2018-03-22+14:21:22.23",
    "contentFile": "",
    "size": "13141"
}