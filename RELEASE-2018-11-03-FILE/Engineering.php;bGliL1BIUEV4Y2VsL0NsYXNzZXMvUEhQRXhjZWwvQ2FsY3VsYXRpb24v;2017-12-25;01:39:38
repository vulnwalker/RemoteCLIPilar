{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Calculation\/Engineering.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6TmFOKCkgOiAkZlJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6VkFMVUUoKTsKICAgIH0KCgogICAgLyoqCiAgICAgKiAgICBCRVNTRUxKCiAgICAgKgogICAgICogICAgUmV0dXJucyB0aGUgQmVzc2VsIGZ1bmN0aW9uCiAgICAgKgogICAgICogICAgRXhjZWwgRnVuY3Rpb246CiAgICAgKiAgICAgICAgQkVTU0VMSih4LG9yZCkKICAgICAqCiAgICAgKiAgICBAYWNjZXNzICAgIHB1YmxpYwogICAgICogICAgQGNhdGVnb3J5IEVuZ2luZWVyaW5nIEZ1bmN0aW9ucwogICAgICogICAgQHBhcmFtICAgIGZsb2F0ICAgICAgICAkeCAgICAgICAgVGhlIHZhbHVlIGF0IHdoaWNoIHRvIGV2YWx1YXRlIHRoZSBmdW5jdGlvbi4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB4IGlzIG5vbm51bWVyaWMsIEJFU1NFTEogcmV0dXJucyB0aGUgI1ZBTFVFISBlcnJvciB2YWx1ZS4KICAgICAqICAgIEBwYXJhbSAgICBpbnRlZ2VyICAgICAgICAkb3JkICAgIFRoZSBvcmRlciBvZiB0aGUgQmVzc2VsIGZ1bmN0aW9uLiBJZiBuIGlzIG5vdCBhbiBpbnRlZ2VyLCBpdCBpcyB0cnVuY2F0ZWQuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgJG9yZCBpcyBub25udW1lcmljLCBCRVNTRUxKIHJldHVybnMgdGhlICNWQUxVRSEgZXJyb3IgdmFsdWUuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgJG9yZCA8IDAsIEJFU1NFTEogcmV0dXJucyB0aGUgI05VTSEgZXJyb3IgdmFsdWUuCiAgICAgKiAgICBAcmV0dXJuICAgIGZsb2F0CiAgICAgKgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIEJFU1NFTEooJHgsICRvcmQpCiAgICB7CiAgICAgICAgJHggICAgPSAoaXNfbnVsbCgkeCkpICAgID8gMC4wIDogICAgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJHgpOwogICAgICAgICRvcmQgICAgPSAoaXNfbnVsbCgkb3JkKSkgICAgPyAwLjAgOiAgICBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkb3JkKTsKCiAgICAgICAgaWYgKChpc19udW1lcmljKCR4KSkgJiYgKGlzX251bWVyaWMoJG9yZCkpKSB7CiAgICAgICAgICAgICRvcmQgICAgPSBmbG9vcigkb3JkKTsKICAgICAgICAgICAgaWYgKCRvcmQgPCAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpOYU4oKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGZSZXN1bHQgPSAwOwogICAgICAgICAgICBpZiAoYWJzKCR4KSA8PSAzMCkgewogICAgICAgICAgICAgICAgJGZSZXN1bHQgPSAkZlRlcm0gPSBwb3coJHggLyAyLCAkb3JkKSAvIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX01hdGhUcmlnOjpGQUNUKCRvcmQpOwogICAgICAgICAgICAgICAgJG9yZEsgPSAxOwogICAgICAgICAgICAgICAgJGZTcXJYID0gKCR4ICogJHgpIC8gLTQ7CiAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgJGZUZXJtICo9ICRmU3FyWDsKICAgICAgICAgICAgICAgICAgICAkZlRlcm0gLz0gKCRvcmRLICogKCRvcmRLICsgJG9yZCkpOwogICAgICAgICAgICAgICAgICAgICRmUmVzdWx0ICs9ICRmVGVybTsKICAgICAgICAgICAgICAgIH0gd2hpbGUgKChhYnMoJGZUZXJtKSA+IDFlLTEyKSAmJiAoKyskb3JkSyA8IDEwMCkpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJGZfUElfRElWXzIgPSBNX1BJIC8gMjsKICAgICAgICAgICAgICAgICRmX1BJX0RJVl80ID0gTV9QSSAvIDQ7CgogICAgICAgICAgICAgICAgJGZYQWJzID0gYWJzKCR4KTsKICAgICAgICAgICAgICAgICRmUmVzdWx0ID0gc3FydChNXzJESVZQSSAvICRmWEFicykgKiBjb3MoJGZYQWJzIC0gJG9yZCAqICRmX1BJX0RJVl8yIC0gJGZfUElfRElWXzQpOwogICAgICAgICAgICAgICAgaWYgKCgkb3JkICYgMSkgJiYgKCR4IDwgMCkpIHsKICAgICAgICAgICAgICAgICAgICAkZlJlc3VsdCA9IC0kZlJlc3VsdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gKGlzX25hbigkZlJlc3VsdCkpID8gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpOYU4oKSA6ICRmUmVzdWx0OwogICAgICAgIH0KICAgICAgICByZXR1cm4gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpWQUxVRSgpOwogICAgfQoKCiAgICBwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBiZXNzZWxLMCgkZk51bSkKICAgIHsKICAgICAgICBpZiAoJGZOdW0gPD0gMikgewogICAgICAgICAgICAkZk51bTIgPSAkZk51bSAqIDAuNTsKICAgICAgICAgICAgJHkgPSAoJGZOdW0yICogJGZOdW0yKTsKICAgICAgICAgICAgJGZSZXQgPSAtbG9nKCRmTnVtMikgKiBzZWxmOjpCRVNTRUxJKCRmTnVtLCAwKSArCiAgICAgICAgICAgICAgICAoLTAuNTc3MjE1NjYgKyAkeSAqICgwLjQyMjc4NDIwICsgJHkgKiAoMC4yMzA2OTc1NiArICR5ICogKDAuMzQ4ODU5MGUtMSArICR5ICogKDAuMjYyNjk4ZS0yICsgJHkgKgogICAgICAgICAgICAgICAgKDAuMTA3NTBlLTMgKyAkeSAqIDAuNzRlLTUpKSkpKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHkgPSAyIC8gJGZOdW07CiAgICAgICAgICAgICRmUmV0ID0gZXhwKC0kZk51bSkgLyBzcXJ0KCRmTnVtKSAqCiAgICAgICAgICAgICAgICAoMS4yNTMzMTQxNCArICR5ICogKC0wLjc4MzIzNThlLTEgKyAkeSAqICgwLjIxODk1NjhlLTEgKyAkeSAqICgtMC4xMDYyNDQ2ZS0xICsgJHkgKgogICAgICAgICAgICAgICAgKDAuNTg3ODcyZS0yICsgJHkgKiAoLTAuMjUxNTQwZS0yICsgJHkgKiAwLjUzMjA4ZS0zKSkpKSkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJGZSZXQ7CiAgICB9CgoKICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGJlc3NlbEsxKCRmTnVtKQogICAgewogICAgICAgIGlmICgkZk51bSA8PSAyKSB7CiAgICAgICAgICAgICRmTnVtMiA9ICRmTnVtICogMC41OwogICAgICAgICAgICAkeSA9ICgkZk51bTIgKiAkZk51bTIpOwogICAgICAgICAgICAkZlJldCA9IGxvZygkZk51bTIpICogc2VsZjo6QkVTU0VMSSgkZk51bSwgMSkgKwogICAgICAgICAgICAgICAgKDEgKyAkeSAqICgwLjE1NDQzMTQ0ICsgJHkgKiAoLTAuNjcyNzg1NzkgKyAkeSAqICgtMC4xODE1Njg5NyArICR5ICogKC0wLjE5MTk0MDJlLTEgKyAkeSAqCiAgICAgICAgICAgICAgICAoLTAuMTEwNDA0ZS0yICsgJHkgKiAoLTAuNDY4NmUtNCkpKSkpKSkgLyAkZk51bTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkeSA9IDIgLyAkZk51bTsKICAgICAgICAgICAgJGZSZXQgPSBleHAoLSRmTnVtKSAvIHNxcnQoJGZOdW0pICoKICAgICAgICAgICAgICAgICgxLjI1MzMxNDE0ICsgJHkgKiAoMC4yMzQ5ODYxOSArICR5ICogKC0wLjM2NTU2MjBlLTEgKyAkeSAqICgwLjE1MDQyNjhlLTEgKyAkeSAqICgtMC43ODAzNTNlLTIgKyAkeSAqCiAgICAgICAgICAgICAgICAoMC4zMjU2MTRlLTIgKyAkeSAqICgtMC42ODI0NWUtMykpKSkpKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAkZlJldDsKICAgIH0KCgogICAgLyoqCiAgICAgKiAgICBCRVNTRUxLCiAgICAgKgogICAgICogICAgUmV0dXJucyB0aGUgbW9kaWZpZWQgQmVzc2VsIGZ1bmN0aW9uIEtuKHgpLCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBCZXNzZWwgZnVuY3Rpb25zIGV2YWx1YXRlZAogICAgICogICAgICAgIGZvciBwdXJlbHkgaW1hZ2luYXJ5IGFyZ3VtZW50cy4KICAgICAqCiAgICAgKiAgICBFeGNlbCBGdW5jdGlvbjoKICAgICAqICAgICAgICBCRVNTRUxLKHgsb3JkKQogICAgICoKICAgICAqICAgIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiAgICBAY2F0ZWdvcnkgRW5naW5lZXJpbmcgRnVuY3Rpb25zCiAgICAgKiAgICBAcGFyYW0gICAgZmxvYXQgICAgICAgICR4ICAgICAgICBUaGUgdmFsdWUgYXQgd2hpY2ggdG8gZXZhbHVhdGUgdGhlIGZ1bmN0aW9uLgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHggaXMgbm9ubnVtZXJpYywgQkVTU0VMSyByZXR1cm5zIHRoZSAjVkFMVUUhIGVycm9yIHZhbHVlLgogICAgICogICAgQHBhcmFtICAgIGludGVnZXIgICAgICAgICRvcmQgICAgVGhlIG9yZGVyIG9mIHRoZSBCZXNzZWwgZnVuY3Rpb24uIElmIG4gaXMgbm90IGFuIGludGVnZXIsIGl0IGlzIHRydW5jYXRlZC4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiAkb3JkIGlzIG5vbm51bWVyaWMsIEJFU1NFTEsgcmV0dXJucyB0aGUgI1ZBTFVFISBlcnJvciB2YWx1ZS4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiAkb3JkIDwgMCwgQkVTU0VMSyByZXR1cm5zIHRoZSAjTlVNISBlcnJvciB2YWx1ZS4KICAgICAqICAgIEByZXR1cm4gICAgZmxvYXQKICAgICAqCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gQkVTU0VMSygkeCwgJG9yZCkKICAgIHsKICAgICAgICAkeCAgICAgICAgPSAoaXNfbnVsbCgkeCkpICAgICAgICA\/IDAuMCA6ICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCR4KTsKICAgICAgICAkb3JkICAgID0gKGlzX251bGwoJG9yZCkpICAgID8gMC4wIDogICAgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJG9yZCk7CgogICAgICAgIGlmICgoaXNfbnVtZXJpYygkeCkpICYmIChpc19udW1lcmljKCRvcmQpKSkgewogICAgICAgICAgICBpZiAoKCRvcmQgPCAwKSB8fCAoJHggPT0gMC4wKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6TmFOKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXRjaCAoZmxvb3IoJG9yZCkpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZjo6YmVzc2VsSzAoJHgpOwogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmOjpiZXNzZWxLMSgkeCk7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICRmVG94ICAgID0gMiAvICR4OwogICAgICAgICAgICAgICAgICAgICRmQmttICAgID0gc2VsZjo6YmVzc2VsSzAoJHgpOwogICAgICAgICAgICAgICAgICAgICRmQmsgICAgPSBzZWxmOjpiZXNzZWxLMSgkeCk7CiAgICAgICAgICAgICAgICAgICAgZm9yICgkbiA9IDE7ICRuIDwgJG9yZDsgKyskbikgewogICAgICAgICAgICAgICAgICAgICAgICAkZkJrcCAgICA9ICRmQmttICsgJG4gKiAkZlRveCAqICRmQms7CiAgICAgICAgICAgICAgICAgICAgICAgICRmQmttICAgID0gJGZCazsKICAgICAgICAgICAgICAgICAgICAgICAgJGZCayAgICA9ICRmQmtwOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gKGlzX25hbigkZkJrKSkgPyBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6Ok5hTigpIDogJGZCazsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6VkFMVUUoKTsKICAgIH0KCgogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gYmVzc2VsWTAoJGZOdW0pCiAgICB7CiAgICAgICAgaWYgKCRmTnVtIDwgOC4wKSB7CiAgICAgICAgICAgICR5ID0gKCRmTnVtICogJGZOdW0pOwogICAgICAgICAgICAkZjEgPSAtMjk1NzgyMTM4OS4wICsgJHkgKiAoNzA2MjgzNDA2NS4wICsgJHkgKiAoLTUxMjM1OTgwMy42ICsgJHkgKiAoMTA4Nzk4ODEuMjkgKyAkeSAqICgtODYzMjcuOTI3NTcgKyAkeSAqIDIyOC40NjIyNzMzKSkpKTsKICAgICAgICAgICAgJGYyID0gNDAwNzY1NDQyNjkuMCArICR5ICogKDc0NTI0OTk2NC44ICsgJHkgKiAoNzE4OTQ2Ni40MzggKyAkeSAqICg0NzQ0Ny4yNjQ3MCArICR5ICogKDIyNi4xMDMwMjQ0ICsgJHkpKSkpOwogICAgICAgICAgICAkZlJldCA9ICRmMSAvICRmMiArIDAuNjM2NjE5NzcyICogc2VsZjo6QkVTU0VMSigkZk51bSwgMCkgKiBsb2coJGZOdW0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICR6ID0gOC4wIC8gJGZOdW07CiAgICAgICAgICAgICR5ID0gKCR6ICogJHopOwogICAgICAgICAgICAkeHggPSAkZk51bSAtIDAuNzg1Mzk4MTY0OwogICAgICAgICAgICAkZjEgPSAxICsgJHkgKiAoLTAuMTA5ODYyODYyN2UtMiArICR5ICogKDAuMjczNDUxMDQwN2UtNCArICR5ICogKC0wLjIwNzMzNzA2MzllLTUgKyAkeSAqIDAuMjA5Mzg4NzIxMWUtNikpKTsKICAgICAgICAgICAgJGYyID0gLTAuMTU2MjQ5OTk5NWUtMSArICR5ICogKDAuMTQzMDQ4ODc2NWUtMyArICR5ICogKC0wLjY5MTExNDc2NTFlLTUgKyAkeSAqICgwLjc2MjEwOTUxNjFlLTYgKyAkeSAqICgtMC45MzQ5NDUxNTJlLTcpKSkpOwogICAgICAgICAgICAkZlJldCA9IHNxcnQoMC42MzY2MTk3NzIgLyAkZk51bSkgKiAoc2luKCR4eCkgKiAkZjEgKyAkeiAqIGNvcygkeHgpICogJGYyKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICRmUmV0OwogICAgfQoKCiAgICBwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBiZXNzZWxZMSgkZk51bSkKICAgIHsKICAgICAgICBpZiAoJGZOdW0gPCA4LjApIHsKICAgICAgICAgICAgJHkgPSAoJGZOdW0gKiAkZk51bSk7CiAgICAgICAgICAgICRmMSA9ICRmTnVtICogKC0wLjQ5MDA2MDQ5NDNlMTMgKyAkeSAqICgwLjEyNzUyNzQzOTBlMTMgKyAkeSAqICgtMC41MTUzNDM4MTM5ZTExICsgJHkgKiAoMC43MzQ5MjY0NTUxZTkgKyAkeSAqCiAgICAgICAgICAgICAgICAoLTAuNDIzNzkyMjcyNmU3ICsgJHkgKiAwLjg1MTE5Mzc5MzVlNCkpKSkpOwogICAgICAgICAgICAkZjIgPSAwLjI0OTk1ODA1NzBlMTQgKyAkeSAqICgwLjQyNDQ0MTk2NjRlMTIgKyAkeSAqICgwLjM3MzM2NTAzNjdlMTAgKyAkeSAqICgwLjIyNDU5MDQwMDJlOCArICR5ICoKICAgICAgICAgICAgICAgICgwLjEwMjA0MjYwNTBlNiArICR5ICogKDAuMzU0OTYzMjg4NWUzICsgJHkpKSkpKTsKICAgICAgICAgICAgJGZSZXQgPSAkZjEgLyAkZjIgKyAwLjYzNjYxOTc3MiAqICggc2VsZjo6QkVTU0VMSigkZk51bSwgMSkgKiBsb2coJGZOdW0pIC0gMSAvICRmTnVtKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkZlJldCA9IHNxcnQoMC42MzY2MTk3NzIgLyAkZk51bSkgKiBzaW4oJGZOdW0gLSAyLjM1NjE5NDQ5MSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAkZlJldDsKICAgIH0KCgogICAgLyoqCiAgICAgKiAgICBCRVNTRUxZCiAgICAgKgogICAgICogICAgUmV0dXJucyB0aGUgQmVzc2VsIGZ1bmN0aW9uLCB3aGljaCBpcyBhbHNvIGNhbGxlZCB0aGUgV2ViZXIgZnVuY3Rpb24gb3IgdGhlIE5ldW1hbm4gZnVuY3Rpb24uCiAgICAgKgogICAgICogICAgRXhjZWwgRnVuY3Rpb246CiAgICAgKiAgICAgICAgQkVTU0VMWSh4LG9yZCkKICAgICAqCiAgICAgKiAgICBAYWNjZXNzICAgIHB1YmxpYwogICAgICogICAgQGNhdGVnb3J5IEVuZ2luZWVyaW5nIEZ1bmN0aW9ucwogICAgICogICAgQHBhcmFtICAgIGZsb2F0ICAgICAgICAkeCAgICAgICAgVGhlIHZhbHVlIGF0IHdoaWNoIHRvIGV2YWx1YXRlIHRoZSBmdW5jdGlvbi4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB4IGlzIG5vbm51bWVyaWMsIEJFU1NFTEsgcmV0dXJucyB0aGUgI1ZBTFVFISBlcnJvciB2YWx1ZS4KICAgICAqICAgIEBwYXJhbSAgICBpbnRlZ2VyICAgICAgICAkb3JkICAgIFRoZSBvcmRlciBvZiB0aGUgQmVzc2VsIGZ1bmN0aW9uLiBJZiBuIGlzIG5vdCBhbiBpbnRlZ2VyLCBpdCBpcyB0cnVuY2F0ZWQuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgJG9yZCBpcyBub25udW1lcmljLCBCRVNTRUxLIHJldHVybnMgdGhlICNWQUxVRSEgZXJyb3IgdmFsdWUuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgJG9yZCA8IDAsIEJFU1NFTEsgcmV0dXJucyB0aGUgI05VTSEgZXJyb3IgdmFsdWUuCiAgICAgKgogICAgICogICAgQHJldHVybiAgICBmbG9hdAogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIEJFU1NFTFkoJHgsICRvcmQpCiAgICB7CiAgICAgICAgJHggICAgICAgID0gKGlzX251bGwoJHgpKSAgICAgICAgPyAwLjAgOiAgICBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkeCk7CiAgICAgICAgJG9yZCAgICA9IChpc19udWxsKCRvcmQpKSAgICA\\",
    "size": "110732"
}