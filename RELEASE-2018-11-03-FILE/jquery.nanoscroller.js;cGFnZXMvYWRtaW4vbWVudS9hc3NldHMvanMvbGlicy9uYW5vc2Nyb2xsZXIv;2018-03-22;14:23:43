{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/nanoscroller\/jquery.nanoscroller.js",
    "lastUpdate": "2018-03-22+14:23:43.07",
    "contentFile": "\/PS4rTWFjIE9TIFgpKD89LitGaXJlZm94KS8udGVzdCh1YSk7CiAgICBpZiAoIWlzT1NYRkYpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgdmVyc2lvbiA9IC9GaXJlZm94XC9cZHsyfVwuLy5leGVjKHVhKTsKICAgIGlmICh2ZXJzaW9uKSB7CiAgICAgIHZlcnNpb24gPSB2ZXJzaW9uWzBdLnJlcGxhY2UoL1xEKy9nLCAnJyk7CiAgICB9CiAgICByZXR1cm4gaXNPU1hGRiAmJiArdmVyc2lvbiA+IDIzOwogIH07CgogIC8qKgogICAgQGNsYXNzIE5hbm9TY3JvbGwKICAgIEBwYXJhbSBlbGVtZW50IHtIVE1MRWxlbWVudHxOb2RlfSB0aGUgbWFpbiBlbGVtZW50CiAgICBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBuYW5vU2Nyb2xsZXIncyBvcHRpb25zCiAgICBAY29uc3RydWN0b3IKICAgKi8KICBOYW5vU2Nyb2xsID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gTmFub1Njcm9sbChlbCwgb3B0aW9ucykgewogICAgICB0aGlzLmVsID0gZWw7CiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7CiAgICAgIEJST1dTRVJfU0NST0xMQkFSX1dJRFRIIHx8IChCUk9XU0VSX1NDUk9MTEJBUl9XSURUSCA9IGdldEJyb3dzZXJTY3JvbGxiYXJXaWR0aCgpKTsKICAgICAgdGhpcy4kZWwgPSAkKHRoaXMuZWwpOwogICAgICB0aGlzLmRvYyA9ICQodGhpcy5vcHRpb25zLmRvY3VtZW50Q29udGV4dCB8fCBkb2N1bWVudCk7CiAgICAgIHRoaXMud2luID0gJCh0aGlzLm9wdGlvbnMud2luZG93Q29udGV4dCB8fCB3aW5kb3cpOwogICAgICB0aGlzLmJvZHkgPSB0aGlzLmRvYy5maW5kKCdib2R5Jyk7CiAgICAgIHRoaXMuJGNvbnRlbnQgPSB0aGlzLiRlbC5jaGlsZHJlbigiLiIgKyBvcHRpb25zLmNvbnRlbnRDbGFzcyk7CiAgICAgIHRoaXMuJGNvbnRlbnQuYXR0cigndGFiaW5kZXgnLCB0aGlzLm9wdGlvbnMudGFiSW5kZXggfHwgMCk7CiAgICAgIHRoaXMuY29udGVudCA9IHRoaXMuJGNvbnRlbnRbMF07CiAgICAgIHRoaXMucHJldmlvdXNQb3NpdGlvbiA9IDA7CiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaU9TTmF0aXZlU2Nyb2xsaW5nICYmICh0aGlzLmVsLnN0eWxlLldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nICE9IG51bGwpKSB7CiAgICAgICAgdGhpcy5uYXRpdmVTY3JvbGxpbmcoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmdlbmVyYXRlKCk7CiAgICAgIH0KICAgICAgdGhpcy5jcmVhdGVFdmVudHMoKTsKICAgICAgdGhpcy5hZGRFdmVudHMoKTsKICAgICAgdGhpcy5yZXNldCgpOwogICAgfQoKCiAgICAvKioKICAgICAgUHJldmVudHMgdGhlIHJlc3Qgb2YgdGhlIHBhZ2UgYmVpbmcgc2Nyb2xsZWQKICAgICAgd2hlbiB1c2VyIHNjcm9sbHMgdGhlIGAubmFuby1jb250ZW50YCBlbGVtZW50LgogICAgICBAbWV0aG9kIHByZXZlbnRTY3JvbGxpbmcKICAgICAgQHBhcmFtIGV2ZW50IHtFdmVudH0KICAgICAgQHBhcmFtIGRpcmVjdGlvbiB7U3RyaW5nfSBTY3JvbGwgZGlyZWN0aW9uICh1cCBvciBkb3duKQogICAgICBAcHJpdmF0ZQogICAgICovCgogICAgTmFub1Njcm9sbC5wcm90b3R5cGUucHJldmVudFNjcm9sbGluZyA9IGZ1bmN0aW9uKGUsIGRpcmVjdGlvbikgewogICAgICBpZiAoIXRoaXMuaXNBY3RpdmUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYgKGUudHlwZSA9PT0gRE9NU0NST0xMKSB7CiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRE9XTiAmJiBlLm9yaWdpbmFsRXZlbnQuZGV0YWlsID4gMCB8fCBkaXJlY3Rpb24gPT09IFVQICYmIGUub3JpZ2luYWxFdmVudC5kZXRhaWwgPCAwKSB7CiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gTU9VU0VXSEVFTCkgewogICAgICAgIGlmICghZS5vcmlnaW5hbEV2ZW50IHx8ICFlLm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBET1dOICYmIGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhIDwgMCB8fCBkaXJlY3Rpb24gPT09IFVQICYmIGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhID4gMCkgewogICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgfQogICAgfTsKCgogICAgLyoqCiAgICAgIEVuYWJsZSBpT1MgbmF0aXZlIHNjcm9sbGluZwogICAgICBAbWV0aG9kIG5hdGl2ZVNjcm9sbGluZwogICAgICBAcHJpdmF0ZQogICAgICovCgogICAgTmFub1Njcm9sbC5wcm90b3R5cGUubmF0aXZlU2Nyb2xsaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuJGNvbnRlbnQuY3NzKHsKICAgICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJwogICAgICB9KTsKICAgICAgdGhpcy5pT1NOYXRpdmVTY3JvbGxpbmcgPSB0cnVlOwogICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTsKICAgIH07CgoKICAgIC8qKgogICAgICBVcGRhdGVzIHRob3NlIG5hbm9TY3JvbGxlciBwcm9wZXJ0aWVzIHRoYXQKICAgICAgYXJlIHJlbGF0ZWQgdG8gY3VycmVudCBzY3JvbGxiYXIgcG9zaXRpb24uCiAgICAgIEBtZXRob2QgdXBkYXRlU2Nyb2xsVmFsdWVzCiAgICAgIEBwcml2YXRlCiAgICAgKi8KCiAgICBOYW5vU2Nyb2xsLnByb3RvdHlwZS51cGRhdGVTY3JvbGxWYWx1ZXMgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNvbnRlbnQsIGRpcmVjdGlvbjsKICAgICAgY29udGVudCA9IHRoaXMuY29udGVudDsKICAgICAgdGhpcy5tYXhTY3JvbGxUb3AgPSBjb250ZW50LnNjcm9sbEhlaWdodCAtIGNvbnRlbnQuY2xpZW50SGVpZ2h0OwogICAgICB0aGlzLnByZXZTY3JvbGxUb3AgPSB0aGlzLmNvbnRlbnRTY3JvbGxUb3AgfHwgMDsKICAgICAgdGhpcy5jb250ZW50U2Nyb2xsVG9wID0gY29udGVudC5zY3JvbGxUb3A7CiAgICAgIGRpcmVjdGlvbiA9IHRoaXMuY29udGVudFNjcm9sbFRvcCA+IHRoaXMucHJldmlvdXNQb3NpdGlvbiA\/ICJkb3duIiA6IHRoaXMuY29udGVudFNjcm9sbFRvcCA8IHRoaXMucHJldmlvdXNQb3NpdGlvbiA\\/ICd2aXNpYmxlJyA6ICcnKQogICAgICB9KTsKICAgICAgY29udGVudFBvc2l0aW9uID0gdGhpcy4kY29udGVudC5jc3MoJ3Bvc2l0aW9uJyk7CiAgICAgIGlmIChjb250ZW50UG9zaXRpb24gPT09ICdzdGF0aWMnIHx8IGNvbnRlbnRQb3NpdGlvbiA9PT0gJ3JlbGF0aXZlJykgewogICAgICAgIHJpZ2h0ID0gcGFyc2VJbnQodGhpcy4kY29udGVudC5jc3MoJ3JpZ2h0JyksIDEwKTsKICAgICAgICBpZiAocmlnaHQpIHsKICAgICAgICAgIHRoaXMuJGNvbnRlbnQuY3NzKHsKICAgICAgICAgICAgcmlnaHQ6ICcnLAogICAgICAgICAgICBtYXJnaW5SaWdodDogcmlnaHQKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdGhpczsKICAgIH07CgoKICAgIC8qKgogICAgICBAbWV0aG9kIHNjcm9sbAogICAgICBAcHJpdmF0ZQogICAgICBAZXhhbXBsZQogICAgICAgICAgJCgiLm5hbm8iKS5uYW5vU2Nyb2xsZXIoeyBzY3JvbGw6ICd0b3AnIH0pOwogICAgICovCgogICAgTmFub1Njcm9sbC5wcm90b3R5cGUuc2Nyb2xsID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLnNsaWRlclkgPSBNYXRoLm1heCgwLCB0aGlzLnNsaWRlclkpOwogICAgICB0aGlzLnNsaWRlclkgPSBNYXRoLm1pbih0aGlzLm1heFNsaWRlclRvcCwgdGhpcy5zbGlkZXJZKTsKICAgICAgdGhpcy4kY29udGVudC5zY3JvbGxUb3AodGhpcy5tYXhTY3JvbGxUb3AgKiB0aGlzLnNsaWRlclkgLyB0aGlzLm1heFNsaWRlclRvcCk7CiAgICAgIGlmICghdGhpcy5pT1NOYXRpdmVTY3JvbGxpbmcpIHsKICAgICAgICB0aGlzLnVwZGF0ZVNjcm9sbFZhbHVlcygpOwogICAgICAgIHRoaXMuc2V0T25TY3JvbGxTdHlsZXMoKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpczsKICAgIH07CgoKICAgIC8qKgogICAgICBTY3JvbGwgYXQgdGhlIGJvdHRvbSB3aXRoIGFuIG9mZnNldCB2YWx1ZQogICAgICBAbWV0aG9kIHNjcm9sbEJvdHRvbQogICAgICBAcGFyYW0gb2Zmc2V0WSB7TnVtYmVyfQogICAgICBAY2hhaW5hYmxlCiAgICAgIEBleGFtcGxlCiAgICAgICAgICAkKCIubmFubyIpLm5hbm9TY3JvbGxlcih7IHNjcm9sbEJvdHRvbTogdmFsdWUgfSk7CiAgICAgKi8KCiAgICBOYW5vU2Nyb2xsLnByb3RvdHlwZS5zY3JvbGxCb3R0b20gPSBmdW5jdGlvbihvZmZzZXRZKSB7CiAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLiRjb250ZW50LnNjcm9sbFRvcCh0aGlzLmNvbnRlbnRIZWlnaHQgLSB0aGlzLiRjb250ZW50LmhlaWdodCgpIC0gb2Zmc2V0WSkudHJpZ2dlcihNT1VTRVdIRUVMKTsKICAgICAgdGhpcy5zdG9wKCkucmVzdG9yZSgpOwogICAgICByZXR1cm4gdGhpczsKICAgIH07CgoKICAgIC8qKgogICAgICBTY3JvbGwgYXQgdGhlIHRvcCB3aXRoIGFuIG9mZnNldCB2YWx1ZQogICAgICBAbWV0aG9kIHNjcm9sbFRvcAogICAgICBAcGFyYW0gb2Zmc2V0WSB7TnVtYmVyfQogICAgICBAY2hhaW5hYmxlCiAgICAgIEBleGFtcGxlCiAgICAgICAgICAkKCIubmFubyIpLm5hbm9TY3JvbGxlcih7IHNjcm9sbFRvcDogdmFsdWUgfSk7CiAgICAgKi8KCiAgICBOYW5vU2Nyb2xsLnByb3RvdHlwZS5zY3JvbGxUb3AgPSBmdW5jdGlvbihvZmZzZXRZKSB7CiAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLiRjb250ZW50LnNjcm9sbFRvcCgrb2Zmc2V0WSkudHJpZ2dlcihNT1VTRVdIRUVMKTsKICAgICAgdGhpcy5zdG9wKCkucmVzdG9yZSgpOwogICAgICByZXR1cm4gdGhpczsKICAgIH07CgoKICAgIC8qKgogICAgICBTY3JvbGwgdG8gYW4gZWxlbWVudAogICAgICBAbWV0aG9kIHNjcm9sbFRvCiAgICAgIEBwYXJhbSBub2RlIHtOb2RlfSBBIG5vZGUgdG8gc2Nyb2xsIHRvLgogICAgICBAY2hhaW5hYmxlCiAgICAgIEBleGFtcGxlCiAgICAgICAgICAkKCIubmFubyIpLm5hbm9TY3JvbGxlcih7IHNjcm9sbFRvOiAkKCcjYV9ub2RlJykgfSk7CiAgICAgKi8KCiAgICBOYW5vU2Nyb2xsLnByb3RvdHlwZS5zY3JvbGxUbyA9IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMuc2Nyb2xsVG9wKHRoaXMuJGVsLmZpbmQobm9kZSkuZ2V0KDApLm9mZnNldFRvcCk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfTsKCgogICAgLyoqCiAgICAgIFRvIHN0b3AgdGhlIG9wZXJhdGlvbi4KICAgICAgVGhpcyBvcHRpb24gd2lsbCB0ZWxsIHRoZSBwbHVnaW4gdG8gZGlzYWJsZSBhbGwgZXZlbnQgYmluZGluZ3MgYW5kIGhpZGUgdGhlIGdhZGdldCBzY3JvbGxiYXIgZnJvbSB0aGUgVUkuCiAgICAgIEBtZXRob2Qgc3RvcAogICAgICBAY2hhaW5hYmxlCiAgICAgIEBleGFtcGxlCiAgICAgICAgICAkKCIubmFubyIpLm5hbm9TY3JvbGxlcih7IHN0b3A6IHRydWUgfSk7CiAgICAgKi8KCiAgICBOYW5vU2Nyb2xsLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmIChjQUYgJiYgdGhpcy5zY3JvbGxSQUYpIHsKICAgICAgICBjQUYodGhpcy5zY3JvbGxSQUYpOwogICAgICAgIHRoaXMuc2Nyb2xsUkFGID0gbnVsbDsKICAgICAgfQogICAgICB0aGlzLnN0b3BwZWQgPSB0cnVlOwogICAgICB0aGlzLnJlbW92ZUV2ZW50cygpOwogICAgICBpZiAoIXRoaXMuaU9TTmF0aXZlU2Nyb2xsaW5nKSB7CiAgICAgICAgdGhpcy5wYW5lLmhpZGUoKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpczsKICAgIH07CgoKICAgIC8qKgogICAgICBEZXN0cm95cyBuYW5vU2Nyb2xsZXIgYW5kIHJlc3RvcmVzIGJyb3dzZXIncyBuYXRpdmUgc2Nyb2xsYmFyLgogICAgICBAbWV0aG9kIGRlc3Ryb3kKICAgICAgQGNoYWluYWJsZQogICAgICBAZXhhbXBsZQogICAgICAgICAgJCgiLm5hbm8iKS5uYW5vU2Nyb2xsZXIoeyBkZXN0cm95OiB0cnVlIH0pOwogICAgICovCgogICAgTmFub1Njcm9sbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAoIXRoaXMuc3RvcHBlZCkgewogICAgICAgIHRoaXMuc3RvcCgpOwogICAgICB9CiAgICAgIGlmICghdGhpcy5pT1NOYXRpdmVTY3JvbGxpbmcgJiYgdGhpcy5wYW5lLmxlbmd0aCkgewogICAgICAgIHRoaXMucGFuZS5yZW1vdmUoKTsKICAgICAgfQogICAgICBpZiAoQlJPV1NFUl9JU19JRTcpIHsKICAgICAgICB0aGlzLiRjb250ZW50LmhlaWdodCgnJyk7CiAgICAgIH0KICAgICAgdGhpcy4kY29udGVudC5yZW1vdmVBdHRyKCd0YWJpbmRleCcpOwogICAgICBpZiAodGhpcy4kZWwuaGFzQ2xhc3MoJ2hhcy1zY3JvbGxiYXInKSkgewogICAgICAgIHRoaXMuJGVsLnJlbW92ZUNsYXNzKCdoYXMtc2Nyb2xsYmFyJyk7CiAgICAgICAgdGhpcy4kY29udGVudC5jc3MoewogICAgICAgICAgcmlnaHQ6ICcnCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKCiAgICAvKioKICAgICAgVG8gZmxhc2ggdGhlIHNjcm9sbGJhciBnYWRnZXQgZm9yIGFuIGFtb3VudCBvZiB0aW1lIGRlZmluZWQgaW4gcGx1Z2luIHNldHRpbmdzIChkZWZhdWx0cyB0byAxLDVzKS4KICAgICAgVXNlZnVsIGlmIHlvdSB3YW50IHRvIHNob3cgdGhlIHVzZXIgKGUuZy4gb24gcGFnZWxvYWQpIHRoYXQgdGhlcmUgaXMgbW9yZSBjb250ZW50IHdhaXRpbmcgZm9yIGhpbS4KICAgICAgQG1ldGhvZCBmbGFzaAogICAgICBAY2hhaW5hYmxlCiAgICAgIEBleGFtcGxlCiAgICAgICAgICAkKCIubmFubyIpLm5hbm9TY3JvbGxlcih7IGZsYXNoOiB0cnVlIH0pOwogICAgICovCgogICAgTmFub1Njcm9sbC5wcm90b3R5cGUuZmxhc2ggPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKHRoaXMuaU9TTmF0aXZlU2Nyb2xsaW5nKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLnJlc2V0KCk7CiAgICAgIHRoaXMucGFuZS5hZGRDbGFzcygnZmxhc2hlZCcpOwogICAgICBzZXRUaW1lb3V0KChmdW5jdGlvbihfdGhpcykgewogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgIF90aGlzLnBhbmUucmVtb3ZlQ2xhc3MoJ2ZsYXNoZWQnKTsKICAgICAgICB9OwogICAgICB9KSh0aGlzKSwgdGhpcy5vcHRpb25zLmZsYXNoRGVsYXkpOwogICAgICByZXR1cm4gdGhpczsKICAgIH07CgogICAgcmV0dXJuIE5hbm9TY3JvbGw7CgogIH0pKCk7CiAgJC5mbi5uYW5vU2Nyb2xsZXIgPSBmdW5jdGlvbihzZXR0aW5ncykgewogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgdmFyIG9wdGlvbnMsIHNjcm9sbGJhcjsKICAgICAgaWYgKCEoc2Nyb2xsYmFyID0gdGhpcy5uYW5vc2Nyb2xsZXIpKSB7CiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgc2V0dGluZ3MpOwogICAgICAgIHRoaXMubmFub3Njcm9sbGVyID0gc2Nyb2xsYmFyID0gbmV3IE5hbm9TY3JvbGwodGhpcywgb3B0aW9ucyk7CiAgICAgIH0KICAgICAgaWYgKHNldHRpbmdzICYmIHR5cGVvZiBzZXR0aW5ncyA9PT0gIm9iamVjdCIpIHsKICAgICAgICAkLmV4dGVuZChzY3JvbGxiYXIub3B0aW9ucywgc2V0dGluZ3MpOwogICAgICAgIGlmIChzZXR0aW5ncy5zY3JvbGxCb3R0b20gIT0gbnVsbCkgewogICAgICAgICAgcmV0dXJuIHNjcm9sbGJhci5zY3JvbGxCb3R0b20oc2V0dGluZ3Muc2Nyb2xsQm90dG9tKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNldHRpbmdzLnNjcm9sbFRvcCAhPSBudWxsKSB7CiAgICAgICAgICByZXR1cm4gc2Nyb2xsYmFyLnNjcm9sbFRvcChzZXR0aW5ncy5zY3JvbGxUb3ApOwogICAgICAgIH0KICAgICAgICBpZiAoc2V0dGluZ3Muc2Nyb2xsVG8pIHsKICAgICAgICAgIHJldHVybiBzY3JvbGxiYXIuc2Nyb2xsVG8oc2V0dGluZ3Muc2Nyb2xsVG8pOwogICAgICAgIH0KICAgICAgICBpZiAoc2V0dGluZ3Muc2Nyb2xsID09PSAnYm90dG9tJykgewogICAgICAgICAgcmV0dXJuIHNjcm9sbGJhci5zY3JvbGxCb3R0b20oMCk7CiAgICAgICAgfQogICAgICAgIGlmIChzZXR0aW5ncy5zY3JvbGwgPT09ICd0b3AnKSB7CiAgICAgICAgICByZXR1cm4gc2Nyb2xsYmFyLnNjcm9sbFRvcCgwKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNldHRpbmdzLnNjcm9sbCAmJiBzZXR0aW5ncy5zY3JvbGwgaW5zdGFuY2VvZiAkKSB7CiAgICAgICAgICByZXR1cm4gc2Nyb2xsYmFyLnNjcm9sbFRvKHNldHRpbmdzLnNjcm9sbCk7CiAgICAgICAgfQogICAgICAgIGlmIChzZXR0aW5ncy5zdG9wKSB7CiAgICAgICAgICByZXR1cm4gc2Nyb2xsYmFyLnN0b3AoKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNldHRpbmdzLmRlc3Ryb3kpIHsKICAgICAgICAgIHJldHVybiBzY3JvbGxiYXIuZGVzdHJveSgpOwogICAgICAgIH0KICAgICAgICBpZiAoc2V0dGluZ3MuZmxhc2gpIHsKICAgICAgICAgIHJldHVybiBzY3JvbGxiYXIuZmxhc2goKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHNjcm9sbGJhci5yZXNldCgpOwogICAgfSk7CiAgfTsKICAkLmZuLm5hbm9TY3JvbGxlci5Db25zdHJ1Y3RvciA9IE5hbm9TY3JvbGw7Cn0pOwoKLy8jIHNvdXJjZU1hcHBpbmdVUkw9anF1ZXJ5Lm5hbm9zY3JvbGxlci5qcy5tYXAK",
    "size": "26211"
}