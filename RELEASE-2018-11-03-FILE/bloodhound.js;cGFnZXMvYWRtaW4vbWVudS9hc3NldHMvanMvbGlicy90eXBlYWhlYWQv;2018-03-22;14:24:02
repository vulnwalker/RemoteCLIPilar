{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/typeahead\/bloodhound.js",
    "lastUpdate": "2018-03-22+14:24:02.98",
    "contentFile": "LyohCiAqIHR5cGVhaGVhZC5qcyAwLjEwLjUKICogaHR0cHM6Ly9naXRodWIuY29tL3R3aXR0ZXIvdHlwZWFoZWFkLmpzCiAqIENvcHlyaWdodCAyMDEzLTIwMTQgVHdpdHRlciwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzOyBMaWNlbnNlZCBNSVQKICovCgooZnVuY3Rpb24oJCkgewogICAgdmFyIF8gPSBmdW5jdGlvbigpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgaXNNc2llOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID8gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvKG1zaWUgfHJ2OikoXGQrKC5cZCspPykvaSlbMl0gOiBmYWxzZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNCbGFua1N0cmluZzogZnVuY3Rpb24oc3RyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIXN0ciB8fCAvXlxzKiQvLnRlc3Qoc3RyKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXNjYXBlUmVnRXhDaGFyczogZnVuY3Rpb24oc3RyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcLVxbXF1cL1x7XH1cKFwpXCpcK1w\/XC5cXFxeXCRcfF0vZywgIlxcJCYiKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNTdHJpbmc6IGZ1bmN0aW9uKG9iaikgewogICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICJzdHJpbmciOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpc051bWJlcjogZnVuY3Rpb24ob2JqKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gIm51bWJlciI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzQXJyYXk6ICQuaXNBcnJheSwKICAgICAgICAgICAgaXNGdW5jdGlvbjogJC5pc0Z1bmN0aW9uLAogICAgICAgICAgICBpc09iamVjdDogJC5pc1BsYWluT2JqZWN0LAogICAgICAgICAgICBpc1VuZGVmaW5lZDogZnVuY3Rpb24ob2JqKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gInVuZGVmaW5lZCI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRvU3RyOiBmdW5jdGlvbiB0b1N0cihzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gXy5pc1VuZGVmaW5lZChzKSB8fCBzID09PSBudWxsID8gIiIgOiBzICsgIiI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJpbmQ6ICQucHJveHksCiAgICAgICAgICAgIGVhY2g6IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGNiKSB7CiAgICAgICAgICAgICAgICAkLmVhY2goY29sbGVjdGlvbiwgcmV2ZXJzZUFyZ3MpOwogICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV2ZXJzZUFyZ3MoaW5kZXgsIHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKHZhbHVlLCBpbmRleCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1hcDogJC5tYXAsCiAgICAgICAgICAgIGZpbHRlcjogJC5ncmVwLAogICAgICAgICAgICBldmVyeTogZnVuY3Rpb24ob2JqLCB0ZXN0KSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGlmICghb2JqKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQuZWFjaChvYmosIGZ1bmN0aW9uKGtleSwgdmFsKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzdWx0ID0gdGVzdC5jYWxsKG51bGwsIHZhbCwga2V5LCBvYmopKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gISFyZXN1bHQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNvbWU6IGZ1bmN0aW9uKG9iaiwgdGVzdCkgewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlOwogICAgICAgICAgICAgICAgaWYgKCFvYmopIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJC5lYWNoKG9iaiwgZnVuY3Rpb24oa2V5LCB2YWwpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID0gdGVzdC5jYWxsKG51bGwsIHZhbCwga2V5LCBvYmopKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiAhIXJlc3VsdDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWl4aW46ICQuZXh0ZW5kLAogICAgICAgICAgICBnZXRVbmlxdWVJZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgY291bnRlciA9IDA7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50ZXIrKzsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0oKSwKICAgICAgICAgICAgdGVtcGxhdGlmeTogZnVuY3Rpb24gdGVtcGxhdGlmeShvYmopIHsKICAgICAgICAgICAgICAgIHJldHVybiAkLmlzRnVuY3Rpb24ob2JqKSA\/IG9iaiA6IHRlbXBsYXRlOwogICAgICAgICAgICAgICAgZnVuY3Rpb24gdGVtcGxhdGUoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhvYmopOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWZlcjogZnVuY3Rpb24oZm4pIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZm4sIDApOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWJvdW5jZTogZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7CiAgICAgICAgICAgICAgICB2YXIgdGltZW91dCwgcmVzdWx0OwogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cywgbGF0ZXIsIGNhbGxOb3c7CiAgICAgICAgICAgICAgICAgICAgbGF0ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW1tZWRpYXRlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0OwogICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxOb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRocm90dGxlOiBmdW5jdGlvbihmdW5jLCB3YWl0KSB7CiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCwgYXJncywgdGltZW91dCwgcmVzdWx0LCBwcmV2aW91cywgbGF0ZXI7CiAgICAgICAgICAgICAgICBwcmV2aW91cyA9IDA7CiAgICAgICAgICAgICAgICBsYXRlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHByZXZpb3VzID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKSwgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7CiAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgICAgICAgICAgICAgICAgICBpZiAocmVtYWluaW5nIDw9IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpOwogICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMgPSBub3c7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGltZW91dCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5vb3A6IGZ1bmN0aW9uKCkge30KICAgICAgICB9OwogICAgfSgpOwogICAgdmFyIFZFUlNJT04gPSAiMC4xMC41IjsKICAgIHZhciB0b2tlbml6ZXJzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgInVzZSBzdHJpY3QiOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIG5vbndvcmQ6IG5vbndvcmQsCiAgICAgICAgICAgIHdoaXRlc3BhY2U6IHdoaXRlc3BhY2UsCiAgICAgICAgICAgIG9iajogewogICAgICAgICAgICAgICAgbm9ud29yZDogZ2V0T2JqVG9rZW5pemVyKG5vbndvcmQpLAogICAgICAgICAgICAgICAgd2hpdGVzcGFjZTogZ2V0T2JqVG9rZW5pemVyKHdoaXRlc3BhY2UpCiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGZ1bmN0aW9uIHdoaXRlc3BhY2Uoc3RyKSB7CiAgICAgICAgICAgIHN0ciA9IF8udG9TdHIoc3RyKTsKICAgICAgICAgICAgcmV0dXJuIHN0ciA\/IHN0ci5zcGxpdCgvXHMrLykgOiBbXTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gbm9ud29yZChzdHIpIHsKICAgICAgICAgICAgc3RyID0gXy50b1N0cihzdHIpOwogICAgICAgICAgICByZXR1cm4gc3RyID8gc3RyLnNwbGl0KC9cVysvKSA6IFtdOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRPYmpUb2tlbml6ZXIodG9rZW5pemVyKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRLZXkoKSB7CiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiB0b2tlbml6ZShvKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VucyA9IFtdOwogICAgICAgICAgICAgICAgICAgIF8uZWFjaChhcmdzLCBmdW5jdGlvbihrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VucyA9IHRva2Vucy5jb25jYXQodG9rZW5pemVyKF8udG9TdHIob1trXSkpKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW5zOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICB9KCk7CiAgICB2YXIgTHJ1Q2FjaGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgZnVuY3Rpb24gTHJ1Q2FjaGUobWF4U2l6ZSkgewogICAgICAgICAgICB0aGlzLm1heFNpemUgPSBfLmlzTnVtYmVyKG1heFNpemUpID8gbWF4U2l6ZSA6IDEwMDsKICAgICAgICAgICAgdGhpcy5yZXNldCgpOwogICAgICAgICAgICBpZiAodGhpcy5tYXhTaXplIDw9IDApIHsKICAgICAgICAgICAgICAgIHRoaXMuc2V0ID0gdGhpcy5nZXQgPSAkLm5vb3A7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgXy5taXhpbihMcnVDYWNoZS5wcm90b3R5cGUsIHsKICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWwpIHsKICAgICAgICAgICAgICAgIHZhciB0YWlsSXRlbSA9IHRoaXMubGlzdC50YWlsLCBub2RlOwogICAgICAgICAgICAgICAgaWYgKHRoaXMuc2l6ZSA+PSB0aGlzLm1heFNpemUpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3QucmVtb3ZlKHRhaWxJdGVtKTsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5oYXNoW3RhaWxJdGVtLmtleV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAobm9kZSA9IHRoaXMuaGFzaFtrZXldKSB7CiAgICAgICAgICAgICAgICAgICAgbm9kZS52YWwgPSB2YWw7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0Lm1vdmVUb0Zyb250KG5vZGUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBub2RlID0gbmV3IE5vZGUoa2V5LCB2YWwpOwogICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdC5hZGQobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNoW2tleV0gPSBub2RlOwogICAgICAgICAgICAgICAgICAgIHRoaXMuc2l6ZSsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHsKICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5oYXNoW2tleV07CiAgICAgICAgICAgICAgICBpZiAobm9kZSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdC5tb3ZlVG9Gcm9udChub2RlKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS52YWw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHsKICAgICAgICAgICAgICAgIHRoaXMuc2l6ZSA9IDA7CiAgICAgICAgICAgICAgICB0aGlzLmhhc2ggPSB7fTsKICAgICAgICAgICAgICAgIHRoaXMubGlzdCA9IG5ldyBMaXN0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBmdW5jdGlvbiBMaXN0KCkgewogICAgICAgICAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsOwogICAgICAgIH0KICAgICAgICBfLm1peGluKExpc3QucHJvdG90eXBlLCB7CiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gYWRkKG5vZGUpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgICBub2RlLm5leHQgPSB0aGlzLmhlYWQ7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkLnByZXYgPSBub2RlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5oZWFkID0gbm9kZTsKICAgICAgICAgICAgICAgIHRoaXMudGFpbCA9IHRoaXMudGFpbCB8fCBub2RlOwogICAgICAgICAgICB9LAogICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShub2RlKSB7CiAgICAgICAgICAgICAgICBub2RlLnByZXYgPyBub2RlLnByZXYubmV4dCA9IG5vZGUubmV4dCA6IHRoaXMuaGVhZCA9IG5vZGUubmV4dDsKICAgICAgICAgICAgICAgIG5vZGUubmV4dCA\/IG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2IDogdGhpcy50YWlsID0gbm9kZS5wcmV2OwogICAgICAgICAgICB9LAogICAgICAgICAgICBtb3ZlVG9Gcm9udDogZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUobm9kZSk7CiAgICAgICAgICAgICAgICB0aGlzLmFkZChub2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGZ1bmN0aW9uIE5vZGUoa2V5LCB2YWwpIHsKICAgICAgICAgICAgdGhpcy5rZXkgPSBrZXk7CiAgICAgICAgICAgIHRoaXMudmFsID0gdmFsOwogICAgICAgICAgICB0aGlzLnByZXYgPSB0aGlzLm5leHQgPSBudWxsOwogICAgICAgIH0KICAgICAgICByZXR1cm4gTHJ1Q2FjaGU7CiAgICB9KCk7CiAgICB2YXIgUGVyc2lzdGVudFN0b3JhZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIGxzLCBtZXRob2RzOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGxzID0gd2luZG93LmxvY2FsU3RvcmFnZTsKICAgICAgICAgICAgbHMuc2V0SXRlbSgifn5+IiwgIiEiKTsKICAgICAgICAgICAgbHMucmVtb3ZlSXRlbSgifn5+Iik7CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIGxzID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gUGVyc2lzdGVudFN0b3JhZ2UobmFtZXNwYWNlKSB7CiAgICAgICAgICAgIHRoaXMucHJlZml4ID0gWyAiX18iLCBuYW1lc3BhY2UsICJfXyIgXS5qb2luKCIiKTsKICAgICAgICAgICAgdGhpcy50dGxLZXkgPSAiX190dGxfXyI7CiAgICAgICAgICAgIHRoaXMua2V5TWF0Y2hlciA9IG5ldyBSZWdFeHAoIl4iICsgXy5lc2NhcGVSZWdFeENoYXJzKHRoaXMucHJlZml4KSk7CiAgICAgICAgfQogICAgICAgIGlmIChscyAmJiB3aW5kb3cuSlNPTikgewogICAgICAgICAgICBtZXRob2RzID0gewogICAgICAgICAgICAgICAgX3ByZWZpeDogZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJlZml4ICsga2V5OwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF90dGxLZXk6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcmVmaXgoa2V5KSArIHRoaXMudHRsS2V5OwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFeHBpcmVkKGtleSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoa2V5KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZShscy5nZXRJdGVtKHRoaXMuX3ByZWZpeChrZXkpKSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbCwgdHRsKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNOdW1iZXIodHRsKSkgewogICAgICAgICAgICAgICAgICAgICAgICBscy5zZXRJdGVtKHRoaXMuX3R0bEtleShrZXkpLCBlbmNvZGUobm93KCkgKyB0dGwpKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBscy5yZW1vdmVJdGVtKHRoaXMuX3R0bEtleShrZXkpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxzLnNldEl0ZW0odGhpcy5fcHJlZml4KGtleSksIGVuY29kZSh2YWwpKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICAgICAgICAgIGxzLnJlbW92ZUl0ZW0odGhpcy5fdHRsS2V5KGtleSkpOwogICAgICAgICAgICAgICAgICAgIGxzLnJlbW92ZUl0ZW0odGhpcy5fcHJlZml4KGtleSkpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNsZWFyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSwga2V5LCBrZXlzID0gW10sIGxlbiA9IGxzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChrZXkgPSBscy5rZXkoaSkpLm1hdGNoKHRoaXMua2V5TWF0Y2hlcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkucmVwbGFjZSh0aGlzLmtleU1hdGNoZXIsICIiKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0ga2V5cy5sZW5ndGg7IGktLTsgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKGtleXNbaV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBpc0V4cGlyZWQ6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICAgICAgICAgIHZhciB0dGwgPSBkZWNvZGUobHMuZ2V0SXRlbSh0aGlzLl90dGxLZXkoa2V5KSkpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfLmlzTnVtYmVyKHR0bCkgJiYgbm93KCkgPiB0dGwgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbWV0aG9kcyA9IHsKICAgICAgICAgICAgICAgIGdldDogXy5ub29wLAogICAgICAgICAgICAgICAgc2V0OiBfLm5vb3AsCiAgICAgICAgICAgICAgICByZW1vdmU6IF8ubm9vcCwKICAgICAgICAgICAgICAgIGNsZWFyOiBfLm5vb3AsCiAgICAgICAgICAgICAgICBpc0V4cGlyZWQ6IF8ubm9vcAogICAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBfLm1peGluKFBlcnNpc3RlbnRTdG9yYWdlLnByb3RvdHlwZSwgbWV0aG9kcyk7CiAgICAgICAgcmV0dXJuIFBlcnNpc3RlbnRTdG9yYWdlOwogICAgICAgIGZ1bmN0aW9uIG5vdygpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBlbmNvZGUodmFsKSB7CiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShfLmlzVW5kZWZpbmVkKHZhbCkgPyBudWxsIDogdmFsKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZGVjb2RlKHZhbCkgewogICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWwpOwogICAgICAgIH0KICAgIH0oKTsKICAgIHZhciBUcmFuc3BvcnQgPSBmdW5jdGlvbigpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIHBlbmRpbmdSZXF1ZXN0c0NvdW50ID0gMCwgcGVuZGluZ1JlcXVlc3RzID0ge30sIG1heFBlbmRpbmdSZXF1ZXN0cyA9IDYsIHNoYXJlZENhY2hlID0gbmV3IExydUNhY2hlKDEwKTsKICAgICAgICBmdW5jdGlvbiBUcmFuc3BvcnQobykgewogICAgICAgICAgICBvID0gbyB8fCB7fTsKICAgICAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5sYXN0VXJsID0gbnVsbDsKICAgICAgICAgICAgdGhpcy5fc2VuZCA9IG8udHJhbnNwb3J0ID8gY2FsbGJhY2tUb0RlZmVycmVkKG8udHJhbnNwb3J0KSA6ICQuYWpheDsKICAgICAgICAgICAgdGhpcy5fZ2V0ID0gby5yYXRlTGltaXRlciA\/IG8ucmF0ZUxpbWl0ZXIodGhpcy5fZ2V0KSA6IHRoaXMuX2dldDsKICAgICAgICAgICAgdGhpcy5fY2FjaGUgPSBvLmNhY2hlID09PSBmYWxzZSA\/IG5ldyBMcnVDYWNoZSgwKSA6IHNoYXJlZENhY2hlOwogICAgICAgIH0KICAgICAgICBUcmFuc3BvcnQuc2V0TWF4UGVuZGluZ1JlcXVlc3RzID0gZnVuY3Rpb24gc2V0TWF4UGVuZGluZ1JlcXVlc3RzKG51bSkgewogICAgICAgICAgICBtYXhQZW5kaW5nUmVxdWVzdHMgPSBudW07CiAgICAgICAgfTsKICAgICAgICBUcmFuc3BvcnQucmVzZXRDYWNoZSA9IGZ1bmN0aW9uIHJlc2V0Q2FjaGUoKSB7CiAgICAgICAgICAgIHNoYXJlZENhY2hlLnJlc2V0KCk7CiAgICAgICAgfTsKICAgICAgICBfLm1peGluKFRyYW5zcG9ydC5wcm90b3R5cGUsIHsKICAgICAgICAgICAgX2dldDogZnVuY3Rpb24odXJsLCBvLCBjYikgewogICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLCBqcVhocjsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbmNlbGxlZCB8fCB1cmwgIT09IHRoaXMubGFzdFVybCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChqcVhociA9IHBlbmRpbmdSZXF1ZXN0c1t1cmxdKSB7CiAgICAgICAgICAgICAgICAgICAganFYaHIuZG9uZShkb25lKS5mYWlsKGZhaWwpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwZW5kaW5nUmVxdWVzdHNDb3VudCA8IG1heFBlbmRpbmdSZXF1ZXN0cykgewogICAgICAgICAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0c0NvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlcXVlc3RzW3VybF0gPSB0aGlzLl9zZW5kKHVybCwgbykuZG9uZShkb25lKS5mYWlsKGZhaWwpLmFsd2F5cyhhbHdheXMpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRGVja1JlcXVlc3RBcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9uZShyZXNwKSB7CiAgICAgICAgICAgICAgICAgICAgY2IgJiYgY2IobnVsbCwgcmVzcCk7CiAgICAgICAgICAgICAgICAgICAgdGhhdC5fY2FjaGUuc2V0KHVybCwgcmVzcCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmYWlsKCkgewogICAgICAgICAgICAgICAgICAgIGNiICYmIGNiKHRydWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gYWx3YXlzKCkgewogICAgICAgICAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0c0NvdW50LS07CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBlbmRpbmdSZXF1ZXN0c1t1cmxdOwogICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Lm9uRGVja1JlcXVlc3RBcmdzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2dldC5hcHBseSh0aGF0LCB0aGF0Lm9uRGVja1JlcXVlc3RBcmdzKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5vbkRlY2tSZXF1ZXN0QXJncyA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHVybCwgbywgY2IpIHsKICAgICAgICAgICAgICAgIHZhciByZXNwOwogICAgICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihvKSkgewogICAgICAgICAgICAgICAgICAgIGNiID0gbzsKICAgICAgICAgICAgICAgICAgICBvID0ge307CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbGxlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgdGhpcy5sYXN0VXJsID0gdXJsOwogICAgICAgICAgICAgICAgaWYgKHJlc3AgPSB0aGlzLl9jYWNoZS5nZXQodXJsKSkgewogICAgICAgICAgICAgICAgICAgIF8uZGVmZXIoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNiICYmIGNiKG51bGwsIHJlc3ApOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXQodXJsLCBvLCBjYik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gISFyZXNwOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIFRyYW5zcG9ydDsKICAgICAgICBmdW5jdGlvbiBjYWxsYmFja1RvRGVmZXJyZWQoZm4pIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGN1c3RvbVNlbmRXcmFwcGVyKHVybCwgbykgewogICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpOwogICAgICAgICAgICAgICAgZm4odXJsLCBvLCBvblN1Y2Nlc3MsIG9uRXJyb3IpOwogICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkOwogICAgICAgICAgICAgICAgZnVuY3Rpb24gb25TdWNjZXNzKHJlc3ApIHsKICAgICAgICAgICAgICAgICAgICBfLmRlZmVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3ApOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gb25FcnJvcihlcnIpIHsKICAgICAgICAgICAgICAgICAgICBfLmRlZmVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICB9KCk7CiAgICB2YXIgU2VhcmNoSW5kZXggPSBmdW5jdGlvbigpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgZnVuY3Rpb24gU2VhcmNoSW5kZXgobykgewogICAgICAgICAgICBvID0gbyB8fCB7fTsKICAgICAgICAgICAgaWYgKCFvLmRhdHVtVG9rZW5pemVyIHx8ICFvLnF1ZXJ5VG9rZW5pemVyKSB7CiAgICAgICAgICAgICAgICAkLmVycm9yKCJkYXR1bVRva2VuaXplciBhbmQgcXVlcnlUb2tlbml6ZXIgYXJlIGJvdGggcmVxdWlyZWQiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmRhdHVtVG9rZW5pemVyID0gby5kYXR1bVRva2VuaXplcjsKICAgICAgICAgICAgdGhpcy5xdWVyeVRva2VuaXplciA9IG8ucXVlcnlUb2tlbml6ZXI7CiAgICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICB9CiAgICAgICAgXy5taXhpbihTZWFyY2hJbmRleC5wcm90b3R5cGUsIHsKICAgICAgICAgICAgYm9vdHN0cmFwOiBmdW5jdGlvbiBib290c3RyYXAobykgewogICAgICAgICAgICAgICAgdGhpcy5kYXR1bXMgPSBvLmRhdHVtczsKICAgICAgICAgICAgICAgIHRoaXMudHJpZSA9IG8udHJpZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWRkOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgICAgICAgICAgICBkYXRhID0gXy5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFsgZGF0YSBdOwogICAgICAgICAgICAgICAgXy5lYWNoKGRhdGEsIGZ1bmN0aW9uKGRhdHVtKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGlkLCB0b2tlbnM7CiAgICAgICAgICAgICAgICAgICAgaWQgPSB0aGF0LmRhdHVtcy5wdXNoKGRhdHVtKSAtIDE7CiAgICAgICAgICAgICAgICAgICAgdG9rZW5zID0gbm9ybWFsaXplVG9rZW5zKHRoYXQuZGF0dW1Ub2tlbml6ZXIoZGF0dW0pKTsKICAgICAgICAgICAgICAgICAgICBfLmVhY2godG9rZW5zLCBmdW5jdGlvbih0b2tlbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSwgY2hhcnMsIGNoOwogICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gdGhhdC50cmllOwogICAgICAgICAgICAgICAgICAgICAgICBjaGFycyA9IHRva2VuLnNwbGl0KCIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoID0gY2hhcnMuc2hpZnQoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGRyZW5bY2hdIHx8IChub2RlLmNoaWxkcmVuW2NoXSA9IG5ld05vZGUoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmlkcy5wdXNoKGlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KHF1ZXJ5KSB7CiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsIHRva2VucywgbWF0Y2hlczsKICAgICAgICAgICAgICAgIHRva2VucyA9IG5vcm1hbGl6ZVRva2Vucyh0aGlzLnF1ZXJ5VG9rZW5pemVyKHF1ZXJ5KSk7CiAgICAgICAgICAgICAgICBfLmVhY2godG9rZW5zLCBmdW5jdGlvbih0b2tlbikgewogICAgICAgICAgICAgICAgICAgIHZhciBub2RlLCBjaGFycywgY2gsIGlkczsKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIG5vZGUgPSB0aGF0LnRyaWU7CiAgICAgICAgICAgICAgICAgICAgY2hhcnMgPSB0b2tlbi5zcGxpdCgiIik7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5vZGUgJiYgKGNoID0gY2hhcnMuc2hpZnQoKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGRyZW5bY2hdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSAmJiBjaGFycy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWRzID0gbm9kZS5pZHMuc2xpY2UoMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBtYXRjaGVzID8gZ2V0SW50ZXJzZWN0aW9uKG1hdGNoZXMsIGlkcykgOiBpZHM7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcyA\/IF8ubWFwKHVuaXF1ZShtYXRjaGVzKSwgZnVuY3Rpb24oaWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5kYXR1bXNbaWRdOwogICAgICAgICAgICAgICAgfSkgOiBbXTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkgewogICAgICAgICAgICAgICAgdGhpcy5kYXR1bXMgPSBbXTsKICAgICAgICAgICAgICAgIHRoaXMudHJpZSA9IG5ld05vZGUoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbiBzZXJpYWxpemUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIGRhdHVtczogdGhpcy5kYXR1bXMsCiAgICAgICAgICAgICAgICAgICAgdHJpZTogdGhpcy50cmllCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIFNlYXJjaEluZGV4OwogICAgICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVRva2Vucyh0b2tlbnMpIHsKICAgICAgICAgICAgdG9rZW5zID0gXy5maWx0ZXIodG9rZW5zLCBmdW5jdGlvbih0b2tlbikgewogICAgICAgICAgICAgICAgcmV0dXJuICEhdG9rZW47CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB0b2tlbnMgPSBfLm1hcCh0b2tlbnMsIGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW4udG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiB0b2tlbnM7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIG5ld05vZGUoKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBpZHM6IFtdLAogICAgICAgICAgICAgICAgY2hpbGRyZW46IHt9CiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHVuaXF1ZShhcnJheSkgewogICAgICAgICAgICB2YXIgc2VlbiA9IHt9LCB1bmlxdWVzID0gW107CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICAgICAgaWYgKCFzZWVuW2FycmF5W2ldXSkgewogICAgICAgICAgICAgICAgICAgIHNlZW5bYXJyYXlbaV1dID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB1bmlxdWVzLnB1c2goYXJyYXlbaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB1bmlxdWVzOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRJbnRlcnNlY3Rpb24oYXJyYXlBLCBhcnJheUIpIHsKICAgICAgICAgICAgdmFyIGFpID0gMCwgYmkgPSAwLCBpbnRlcnNlY3Rpb24gPSBbXTsKICAgICAgICAgICAgYXJyYXlBID0gYXJyYXlBLnNvcnQoY29tcGFyZSk7CiAgICAgICAgICAgIGFycmF5QiA9IGFycmF5Qi5zb3J0KGNvbXBhcmUpOwogICAgICAgICAgICB2YXIgbGVuQXJyYXlBID0gYXJyYXlBLmxlbmd0aCwgbGVuQXJyYXlCID0gYXJyYXlCLmxlbmd0aDsKICAgICAgICAgICAgd2hpbGUgKGFpIDwgbGVuQXJyYXlBICYmIGJpIDwgbGVuQXJyYXlCKSB7CiAgICAgICAgICAgICAgICBpZiAoYXJyYXlBW2FpXSA8IGFycmF5QltiaV0pIHsKICAgICAgICAgICAgICAgICAgICBhaSsrOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcnJheUFbYWldID4gYXJyYXlCW2JpXSkgewogICAgICAgICAgICAgICAgICAgIGJpKys7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbi5wdXNoKGFycmF5QVthaV0pOwogICAgICAgICAgICAgICAgICAgIGFpKys7CiAgICAgICAgICAgICAgICAgICAgYmkrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uOwogICAgICAgICAgICBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0oKTsKICAgIHZhciBvUGFyc2VyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgInVzZSBzdHJpY3QiOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGxvY2FsOiBnZXRMb2NhbCwKICAgICAgICAgICAgcHJlZmV0Y2g6IGdldFByZWZldGNoLAogICAgICAgICAgICByZW1vdGU6IGdldFJlbW90ZQogICAgICAgIH07CiAgICAgICAgZnVuY3Rpb24gZ2V0TG9jYWwobykgewogICAgICAgICAgICByZXR1cm4gby5sb2NhbCB8fCBudWxsOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRQcmVmZXRjaChvKSB7CiAgICAgICAgICAgIHZhciBwcmVmZXRjaCwgZGVmYXVsdHM7CiAgICAgICAgICAgIGRlZmF1bHRzID0gewogICAgICAgICAgICAgICAgdXJsOiBudWxsLAogICAgICAgICAgICAgICAgdGh1bWJwcmludDogIiIsCiAgICAgICAgICAgICAgICB0dGw6IDI0ICogNjAgKiA2MCAqIDFlMywKICAgICAgICAgICAgICAgIGZpbHRlcjogbnVsbCwKICAgICAgICAgICAgICAgIGFqYXg6IHt9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmIChwcmVmZXRjaCA9IG8ucHJlZmV0Y2ggfHwgbnVsbCkgewogICAgICAgICAgICAgICAgcHJlZmV0Y2ggPSBfLmlzU3RyaW5nKHByZWZldGNoKSA\/IHsKICAgICAgICAgICAgICAgICAgICB1cmw6IHByZWZldGNoCiAgICAgICAgICAgICAgICB9IDogcHJlZmV0Y2g7CiAgICAgICAgICAgICAgICBwcmVmZXRjaCA9IF8ubWl4aW4oZGVmYXVsdHMsIHByZWZldGNoKTsKICAgICAgICAgICAgICAgIHByZWZldGNoLnRodW1icHJpbnQgPSBWRVJTSU9OICsgcHJlZmV0Y2gudGh1bWJwcmludDsKICAgICAgICAgICAgICAgIHByZWZldGNoLmFqYXgudHlwZSA9IHByZWZldGNoLmFqYXgudHlwZSB8fCAiR0VUIjsKICAgICAgICAgICAgICAgIHByZWZldGNoLmFqYXguZGF0YVR5cGUgPSBwcmVmZXRjaC5hamF4LmRhdGFUeXBlIHx8ICJqc29uIjsKICAgICAgICAgICAgICAgICFwcmVmZXRjaC51cmwgJiYgJC5lcnJvcigicHJlZmV0Y2ggcmVxdWlyZXMgdXJsIHRvIGJlIHNldCIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwcmVmZXRjaDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZ2V0UmVtb3RlKG8pIHsKICAgICAgICAgICAgdmFyIHJlbW90ZSwgZGVmYXVsdHM7CiAgICAgICAgICAgIGRlZmF1bHRzID0gewogICAgICAgICAgICAgICAgdXJsOiBudWxsLAogICAgICAgICAgICAgICAgY2FjaGU6IHRydWUsCiAgICAgICAgICAgICAgICB3aWxkY2FyZDogIiVRVUVSWSIsCiAgICAgICAgICAgICAgICByZXBsYWNlOiBudWxsLAogICAgICAgICAgICAgICAgcmF0ZUxpbWl0Qnk6ICJkZWJvdW5jZSIsCiAgICAgICAgICAgICAgICByYXRlTGltaXRXYWl0OiAzMDAsCiAgICAgICAgICAgICAgICBzZW5kOiBudWxsLAogICAgICAgICAgICAgICAgZmlsdGVyOiBudWxsLAogICAgICAgICAgICAgICAgYWpheDoge30KICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKHJlbW90ZSA9IG8ucmVtb3RlIHx8IG51bGwpIHsKICAgICAgICAgICAgICAgIHJlbW90ZSA9IF8uaXNTdHJpbmcocmVtb3RlKSA\/IHsKICAgICAgICAgICAgICAgICAgICB1cmw6IHJlbW90ZQogICAgICAgICAgICAgICAgfSA6IHJlbW90ZTsKICAgICAgICAgICAgICAgIHJlbW90ZSA9IF8ubWl4aW4oZGVmYXVsdHMsIHJlbW90ZSk7CiAgICAgICAgICAgICAgICByZW1vdGUucmF0ZUxpbWl0ZXIgPSAvXnRocm90dGxlJC9pLnRlc3QocmVtb3RlLnJhdGVMaW1pdEJ5KSA\/IGJ5VGhyb3R0bGUocmVtb3RlLnJhdGVMaW1pdFdhaXQpIDogYnlEZWJvdW5jZShyZW1vdGUucmF0ZUxpbWl0V2FpdCk7CiAgICAgICAgICAgICAgICByZW1vdGUuYWpheC50eXBlID0gcmVtb3RlLmFqYXgudHlwZSB8fCAiR0VUIjsKICAgICAgICAgICAgICAgIHJlbW90ZS5hamF4LmRhdGFUeXBlID0gcmVtb3RlLmFqYXguZGF0YVR5cGUgfHwgImpzb24iOwogICAgICAgICAgICAgICAgZGVsZXRlIHJlbW90ZS5yYXRlTGltaXRCeTsKICAgICAgICAgICAgICAgIGRlbGV0ZSByZW1vdGUucmF0ZUxpbWl0V2FpdDsKICAgICAgICAgICAgICAgICFyZW1vdGUudXJsICYmICQuZXJyb3IoInJlbW90ZSByZXF1aXJlcyB1cmwgdG8gYmUgc2V0Iik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlbW90ZTsKICAgICAgICAgICAgZnVuY3Rpb24gYnlEZWJvdW5jZSh3YWl0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZm4pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gXy5kZWJvdW5jZShmbiwgd2FpdCk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGJ5VGhyb3R0bGUod2FpdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF8udGhyb3R0bGUoZm4sIHdhaXQpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0oKTsKICAgIChmdW5jdGlvbihyb290KSB7CiAgICAgICAgInVzZSBzdHJpY3QiOwogICAgICAgIHZhciBvbGQsIGtleXM7CiAgICAgICAgb2xkID0gcm9vdC5CbG9vZGhvdW5kOwogICAgICAgIGtleXMgPSB7CiAgICAgICAgICAgIGRhdGE6ICJkYXRhIiwKICAgICAgICAgICAgcHJvdG9jb2w6ICJwcm90b2NvbCIsCiAgICAgICAgICAgIHRodW1icHJpbnQ6ICJ0aHVtYnByaW50IgogICAgICAgIH07CiAgICAgICAgcm9vdC5CbG9vZGhvdW5kID0gQmxvb2Rob3VuZDsKICAgICAgICBmdW5jdGlvbiBCbG9vZGhvdW5kKG8pIHsKICAgICAgICAgICAgaWYgKCFvIHx8ICFvLmxvY2FsICYmICFvLnByZWZldGNoICYmICFvLnJlbW90ZSkgewogICAgICAgICAgICAgICAgJC5lcnJvcigib25lIG9mIGxvY2FsLCBwcmVmZXRjaCwgb3IgcmVtb3RlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5saW1pdCA9IG8ubGltaXQgfHwgNTsKICAgICAgICAgICAgdGhpcy5zb3J0ZXIgPSBnZXRTb3J0ZXIoby5zb3J0ZXIpOwogICAgICAgICAgICB0aGlzLmR1cERldGVjdG9yID0gby5kdXBEZXRlY3RvciB8fCBpZ25vcmVEdXBsaWNhdGVzOwogICAgICAgICAgICB0aGlzLmxvY2FsID0gb1BhcnNlci5sb2NhbChvKTsKICAgICAgICAgICAgdGhpcy5wcmVmZXRjaCA9IG9QYXJzZXIucHJlZmV0Y2gobyk7CiAgICAgICAgICAgIHRoaXMucmVtb3RlID0gb1BhcnNlci5yZW1vdGUobyk7CiAgICAgICAgICAgIHRoaXMuY2FjaGVLZXkgPSB0aGlzLnByZWZldGNoID8gdGhpcy5wcmVmZXRjaC5jYWNoZUtleSB8fCB0aGlzLnByZWZldGNoLnVybCA6IG51bGw7CiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBuZXcgU2VhcmNoSW5kZXgoewogICAgICAgICAgICAgICAgZGF0dW1Ub2tlbml6ZXI6IG8uZGF0dW1Ub2tlbml6ZXIsCiAgICAgICAgICAgICAgICBxdWVyeVRva2VuaXplcjogby5xdWVyeVRva2VuaXplcgogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhpcy5zdG9yYWdlID0gdGhpcy5jYWNoZUtleSA\/IG5ldyBQZXJzaXN0ZW50U3RvcmFnZSh0aGlzLmNhY2hlS2V5KSA6IG51bGw7CiAgICAgICAgfQogICAgICAgIEJsb29kaG91bmQubm9Db25mbGljdCA9IGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7CiAgICAgICAgICAgIHJvb3QuQmxvb2Rob3VuZCA9IG9sZDsKICAgICAgICAgICAgcmV0dXJuIEJsb29kaG91bmQ7CiAgICAgICAgfTsKICAgICAgICBCbG9vZGhvdW5kLnRva2VuaXplcnMgPSB0b2tlbml6ZXJzOwogICAgICAgIF8ubWl4aW4oQmxvb2Rob3VuZC5wcm90b3R5cGUsIHsKICAgICAgICAgICAgX2xvYWRQcmVmZXRjaDogZnVuY3Rpb24gbG9hZFByZWZldGNoKG8pIHsKICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcywgc2VyaWFsaXplZCwgZGVmZXJyZWQ7CiAgICAgICAgICAgICAgICBpZiAoc2VyaWFsaXplZCA9IHRoaXMuX3JlYWRGcm9tU3RvcmFnZShvLnRodW1icHJpbnQpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleC5ib290c3RyYXAoc2VyaWFsaXplZCk7CiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCkucmVzb2x2ZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZCA9ICQuYWpheChvLnVybCwgby5hamF4KS5kb25lKGhhbmRsZVByZWZldGNoUmVzcG9uc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkOwogICAgICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlUHJlZmV0Y2hSZXNwb25zZShyZXNwKSB7CiAgICAgICAgICAgICAgICAgICAgdGhhdC5jbGVhcigpOwogICAgICAgICAgICAgICAgICAgIHRoYXQuYWRkKG8uZmlsdGVyID8gby5maWx0ZXIocmVzcCkgOiByZXNwKTsKICAgICAgICAgICAgICAgICAgICB0aGF0Ll9zYXZlVG9TdG9yYWdlKHRoYXQuaW5kZXguc2VyaWFsaXplKCksIG8udGh1bWJwcmludCwgby50dGwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBfZ2V0RnJvbVJlbW90ZTogZnVuY3Rpb24gZ2V0RnJvbVJlbW90ZShxdWVyeSwgY2IpIHsKICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcywgdXJsLCB1cmlFbmNvZGVkUXVlcnk7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudHJhbnNwb3J0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcXVlcnkgPSBxdWVyeSB8fCAiIjsKICAgICAgICAgICAgICAgIHVyaUVuY29kZWRRdWVyeSA9IGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSk7CiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLnJlbW90ZS5yZXBsYWNlID8gdGhpcy5yZW1vdGUucmVwbGFjZSh0aGlzLnJlbW90ZS51cmwsIHF1ZXJ5KSA6IHRoaXMucmVtb3RlLnVybC5yZXBsYWNlKHRoaXMucmVtb3RlLndpbGRjYXJkLCB1cmlFbmNvZGVkUXVlcnkpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0LmdldCh1cmwsIHRoaXMucmVtb3RlLmFqYXgsIGhhbmRsZVJlbW90ZVJlc3BvbnNlKTsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVJlbW90ZVJlc3BvbnNlKGVyciwgcmVzcCkgewogICAgICAgICAgICAgICAgICAgIGVyciA\/IGNiKFtdKSA6IGNiKHRoYXQucmVtb3RlLmZpbHRlciA\/IHRoYXQucmVtb3RlLmZpbHRlcihyZXNwKSA6IHJlc3ApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBfY2FuY2VsTGFzdFJlbW90ZVJlcXVlc3Q6IGZ1bmN0aW9uIGNhbmNlbExhc3RSZW1vdGVSZXF1ZXN0KCkgewogICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgJiYgdGhpcy50cmFuc3BvcnQuY2FuY2VsKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9zYXZlVG9TdG9yYWdlOiBmdW5jdGlvbiBzYXZlVG9TdG9yYWdlKGRhdGEsIHRodW1icHJpbnQsIHR0bCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmFnZSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXQoa2V5cy5kYXRhLCBkYXRhLCB0dGwpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXQoa2V5cy5wcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wsIHR0bCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnNldChrZXlzLnRodW1icHJpbnQsIHRodW1icHJpbnQsIHR0bCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9yZWFkRnJvbVN0b3JhZ2U6IGZ1bmN0aW9uIHJlYWRGcm9tU3RvcmFnZSh0aHVtYnByaW50KSB7CiAgICAgICAgICAgICAgICB2YXIgc3RvcmVkID0ge30sIGlzRXhwaXJlZDsKICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0b3JhZ2UpIHsKICAgICAgICAgICAgICAgICAgICBzdG9yZWQuZGF0YSA9IHRoaXMuc3RvcmFnZS5nZXQoa2V5cy5kYXRhKTsKICAgICAgICAgICAgICAgICAgICBzdG9yZWQucHJvdG9jb2wgPSB0aGlzLnN0b3JhZ2UuZ2V0KGtleXMucHJvdG9jb2wpOwogICAgICAgICAgICAgICAgICAgIHN0b3JlZC50aHVtYnByaW50ID0gdGhpcy5zdG9yYWdlLmdldChrZXlzLnRodW1icHJpbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaXNFeHBpcmVkID0gc3RvcmVkLnRodW1icHJpbnQgIT09IHRodW1icHJpbnQgfHwgc3RvcmVkLnByb3RvY29sICE9PSBsb2NhdGlvbi5wcm90b2NvbDsKICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZWQuZGF0YSAmJiAhaXNFeHBpcmVkID8gc3RvcmVkLmRhdGEgOiBudWxsOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfaW5pdGlhbGl6ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHsKICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcywgbG9jYWwgPSB0aGlzLmxvY2FsLCBkZWZlcnJlZDsKICAgICAgICAgICAgICAgIGRlZmVycmVkID0gdGhpcy5wcmVmZXRjaCA\/IHRoaXMuX2xvYWRQcmVmZXRjaCh0aGlzLnByZWZldGNoKSA6ICQuRGVmZXJyZWQoKS5yZXNvbHZlKCk7CiAgICAgICAgICAgICAgICBsb2NhbCAmJiBkZWZlcnJlZC5kb25lKGFkZExvY2FsVG9JbmRleCk7CiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRoaXMucmVtb3RlID8gbmV3IFRyYW5zcG9ydCh0aGlzLnJlbW90ZSkgOiBudWxsOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5pdFByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlKCk7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhZGRMb2NhbFRvSW5kZXgoKSB7CiAgICAgICAgICAgICAgICAgICAgdGhhdC5hZGQoXy5pc0Z1bmN0aW9uKGxvY2FsKSA\/IGxvY2FsKCkgOiBsb2NhbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIGluaXRpYWxpemUoZm9yY2UpIHsKICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5pbml0UHJvbWlzZSB8fCBmb3JjZSA\/IHRoaXMuX2luaXRpYWxpemUoKSA6IHRoaXMuaW5pdFByb21pc2U7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gYWRkKGRhdGEpIHsKICAgICAgICAgICAgICAgIHRoaXMuaW5kZXguYWRkKGRhdGEpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldChxdWVyeSwgY2IpIHsKICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcywgbWF0Y2hlcyA9IFtdLCBjYWNoZUhpdCA9IGZhbHNlOwogICAgICAgICAgICAgICAgbWF0Y2hlcyA9IHRoaXMuaW5kZXguZ2V0KHF1ZXJ5KTsKICAgICAgICAgICAgICAgIG1hdGNoZXMgPSB0aGlzLnNvcnRlcihtYXRjaGVzKS5zbGljZSgwLCB0aGlzLmxpbWl0KTsKICAgICAgICAgICAgICAgIG1hdGNoZXMubGVuZ3RoIDwgdGhpcy5saW1pdCA\/IGNhY2hlSGl0ID0gdGhpcy5fZ2V0RnJvbVJlbW90ZShxdWVyeSwgcmV0dXJuUmVtb3RlTWF0Y2hlcykgOiB0aGlzLl9jYW5jZWxMYXN0UmVtb3RlUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgaWYgKCFjYWNoZUhpdCkgewogICAgICAgICAgICAgICAgICAgIChtYXRjaGVzLmxlbmd0aCA+IDAgfHwgIXRoaXMudHJhbnNwb3J0KSAmJiBjYiAmJiBjYihtYXRjaGVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblJlbW90ZU1hdGNoZXMocmVtb3RlTWF0Y2hlcykgewogICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzV2l0aEJhY2tmaWxsID0gbWF0Y2hlcy5zbGljZSgwKTsKICAgICAgICAgICAgICAgICAgICBfLmVhY2gocmVtb3RlTWF0Y2hlcywgZnVuY3Rpb24ocmVtb3RlTWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzRHVwbGljYXRlOwogICAgICAgICAgICAgICAgICAgICAgICBpc0R1cGxpY2F0ZSA9IF8uc29tZShtYXRjaGVzV2l0aEJhY2tmaWxsLCBmdW5jdGlvbihtYXRjaCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQuZHVwRGV0ZWN0b3IocmVtb3RlTWF0Y2gsIG1hdGNoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICFpc0R1cGxpY2F0ZSAmJiBtYXRjaGVzV2l0aEJhY2tmaWxsLnB1c2gocmVtb3RlTWF0Y2gpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlc1dpdGhCYWNrZmlsbC5sZW5ndGggPCB0aGF0LmxpbWl0OwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGNiICYmIGNiKHRoYXQuc29ydGVyKG1hdGNoZXNXaXRoQmFja2ZpbGwpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkgewogICAgICAgICAgICAgICAgdGhpcy5pbmRleC5yZXNldCgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjbGVhclByZWZldGNoQ2FjaGU6IGZ1bmN0aW9uIGNsZWFyUHJlZmV0Y2hDYWNoZSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZSAmJiB0aGlzLnN0b3JhZ2UuY2xlYXIoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2xlYXJSZW1vdGVDYWNoZTogZnVuY3Rpb24gY2xlYXJSZW1vdGVDYWNoZSgpIHsKICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ICYmIFRyYW5zcG9ydC5yZXNldENhY2hlKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHR0QWRhcHRlcjogZnVuY3Rpb24gdHRBZGFwdGVyKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF8uYmluZCh0aGlzLmdldCwgdGhpcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gQmxvb2Rob3VuZDsKICAgICAgICBmdW5jdGlvbiBnZXRTb3J0ZXIoc29ydEZuKSB7CiAgICAgICAgICAgIHJldHVybiBfLmlzRnVuY3Rpb24oc29ydEZuKSA\/IHNvcnQgOiBub1NvcnQ7CiAgICAgICAgICAgIGZ1bmN0aW9uIHNvcnQoYXJyYXkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBhcnJheS5zb3J0KHNvcnRGbik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbm9Tb3J0KGFycmF5KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaWdub3JlRHVwbGljYXRlcygpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0pKHRoaXMpOwp9KSh3aW5kb3cualF1ZXJ5KTs=",
    "size": "27596"
}