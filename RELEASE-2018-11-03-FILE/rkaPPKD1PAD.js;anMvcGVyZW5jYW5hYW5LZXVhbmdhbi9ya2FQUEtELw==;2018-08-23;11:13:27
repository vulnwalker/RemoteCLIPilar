{
    "namaFile": "js\/perencanaanKeuangan\/rkaPPKD\/rkaPPKD1PAD.js",
    "lastUpdate": "2018-08-23+11:13:27.03",
    "contentFile": "dmFyIHJrYVBQS0QxUEFERmlsdGVyU0tQRCA9IG5ldyBTa3BkQ2xzKHsKICBwcmVmaXg6ICJya2FQUEtEMVBBRCIsCiAgZm9ybU5hbWU6ICJya2FQUEtEMVBBREZvcm0iLAoKICBwaWxpaFVydXNhbmZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgLy8gcmthUFBLRDFQQUQucmVmcmVzaExpc3QodHJ1ZSk7CiAgICBya2FQUEtEMVBBRC5maWx0ZXJSZW5kZXIoKTsKICB9LAogIHBpbGloQmlkYW5nQWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgLy8gcmthUFBLRDFQQUQucmVmcmVzaExpc3QodHJ1ZSk7CiAgICBya2FQUEtEMVBBRC5maWx0ZXJSZW5kZXIoKTsKICB9LAogIHBpbGloVW5pdEFmdGVyOiBmdW5jdGlvbigpIHsKICAgIC8vIHJrYVBQS0QxUEFELnJlZnJlc2hMaXN0KHRydWUpOwogICAgcmthUFBLRDFQQUQuZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwaWxpaFN1YlVuaXRBZnRlcjogZnVuY3Rpb24oKSB7CiAgICAvLyBya2FQUEtEMVBBRC5yZWZyZXNoTGlzdCh0cnVlKTsKICAgIHJrYVBQS0QxUEFELmZpbHRlclJlbmRlcigpOwogIH0sCiAgcGlsaWhTZWtzaUFmdGVyOiBmdW5jdGlvbigpIHsKICAgIC8vIHJrYVBQS0QxUEFELnJlZnJlc2hMaXN0KHRydWUpOwogICAgcmthUFBLRDFQQUQuZmlsdGVyUmVuZGVyKCk7CiAgfQp9KTsKdmFyIHJrYVBQS0QxUEFEID0gbmV3IERhZnRhck9iajIoewogIHByZWZpeDogInJrYVBQS0QxUEFEIiwKICB1cmw6ICJwZ0tldS5waHA\/UGc9cmthUFBLRDFQQUQiLAogIGZvcm1OYW1lOiAicmthUFBLRDFQQURGb3JtIiwKICBya2FQUEtEMVBBRF9mb3JtOiAiMCIsIC8vZGVmYXVsdCBqcyBya2FQUEtEMVBBRAogIGxvYWRpbmc6IGZ1bmN0aW9uKCkgewogICAgLy9hbGVydCgnbG9hZGluZycpOwogICAgdGhpcy50b3BCYXJSZW5kZXIoKTsKICAgIHRoaXMuZmlsdGVyUmVuZGVyKCk7CiAgICB0aGlzLmRhZnRhclJlbmRlcigpOwogICAgdGhpcy5zdW1IYWxSZW5kZXIoKTsKICB9LAogIHRvcEJhclJlbmRlcjogZnVuY3Rpb24oKXsKICAgIHZhciBtZT10aGlzOwogICAgLy9yZW5kZXIgc3VidGl0bGUKICAgICQuYWpheCh7CiAgICAgIHVybDogdGhpcy51cmwrJyZ0aXBlPXN1YnRpdGxlJywKICAgICAgdHlwZTonUE9TVCcsCiAgICAgIGRhdGE6JCgnIycrdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtZS5wcmVmaXgrJ19jb250X3RpdGxlJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50OwogICAgICBtZS50b3BCYXJSZW5kZXJBZnRlcigpCiAgICAgIH0KICAgIH0pOwogIH0sCiAgLy8gZmlsdGVyUmVuZGVyQWZ0ZXI6IGZ1bmN0aW9uKCkgewogIC8vICAgdGhpcy5kYWZ0YXJSZW5kZXIoKTsKICAvLyB9LAogIGRldGFpbDogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgZXJybXNnID0gdGhpcy5DZWtDaGVja2JveCgpOwogICAgaWYgKGVycm1zZyA9PSAiIikgewogICAgICB2YXIgYm94ID0gdGhpcy5HZXRDYnhDaGVja2VkKCk7CiAgICB9IGVsc2UgewogICAgICBhbGVydChlcnJtc2cpOwogICAgfQogIH0sCiAgZGFmdGFyUmVuZGVyOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7IC8vcmVuZGVyIGRhZnRhcgogICAgYWRkQ292ZXJQYWdlMigiZGFmdGFyX2NvdmVyIiwgMSwgdHJ1ZSwgdHJ1ZSwgewogICAgICByZW5kZXJUbzogdGhpcy5wcmVmaXggKyAiX2NvbnRfZGFmdGFyIiwKICAgICAgaW1nc3JjOiAiaW1hZ2VzL3dhaXQuZ2lmIiwKICAgICAgc3R5bGU6IHsgcG9zaXRpb246ICJhYnNvbHV0ZSIsIHRvcDogIjUiLCBsZWZ0OiAiNSIgfQogICAgfSk7CiAgICAkLmFqYXgoewogICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPWRhZnRhciIsCiAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgZGF0YTogJCgiIyIgKyB0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtZS5wcmVmaXggKyAiX2NvbnRfZGFmdGFyIikuaW5uZXJIVE1MID0KICAgICAgICAgIHJlc3AuY29udGVudDsKICAgICAgICBtZS5zdW1IYWxSZW5kZXIoKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBCYXJ1OiBmdW5jdGlvbigpewogICAgdmFyIG1lID0gdGhpczsKCiAgCQllcnJtc2cgPSAnJzsKCiAgCQlpZigkKCIjZmlsdGVyVXJ1c2FuIikudmFsKCkgPT0gJzAwJyl7CiAgCQkJZXJybXNnID0gIlBpbGloIFVydXNhbiI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyU0tQRCIpLnZhbCgpID09ICcwMCcpewogIAkJCWVycm1zZyA9ICJQaWxpaCBCaWRhbmciOwogIAkJfWVsc2UgaWYoJCgiI2ZpbHRlclNLUEQiKS52YWwoKSA9PSAnMDAnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggU0tQRCI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyQ29uY2F0UHJvZ3JhbSIpLnZhbCgpID09ICcnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggUHJvZ3JhbSI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyUSIpLnZhbCgpID09ICcnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggS2VnaWF0YW4iOwogIAkJfQogIAkJaWYoZXJybXNnID09JycpewogIAkJCXZhciBtZSA9IHRoaXM7CiAgCQkJdmFyIGFGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5mb3JtTmFtZSk7CiAgCQkJJC5hamF4KHsKICAJCQkgIHVybDogdGhpcy51cmwrJyZ0aXBlPUJhcnUnLAogIAkJCSAgdHlwZSA6ICdQT1NUJywKICAJCQkgIGRhdGE6JCgnIycrdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgCQkJICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgCQkJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CiAgCQkJCQlpZihyZXNwLmVyciA9PSAiIikgewogIAkJCQkJCWFGb3JtLmFjdGlvbj0gJ3BnS2V1LnBocD9QZz1ya2FQUEtEMVBBRElucyc7CiAgCQkJCQkJYUZvcm0udGFyZ2V0PSdfYmxhbmsnOwogIAkJCQkJCWFGb3JtLnN1Ym1pdCgpOwogIAkJCQkJCWFGb3JtLnRhcmdldD0nJzsKICAJCQkJCX1lbHNlewogIAkJCQkJCWFsZXJ0KHJlc3AuZXJyKTsKICAJCQkJCX0KICAJCQkgIH0KICAJCQl9KTsKICAJCX1lbHNlewogIAkJCQlhbGVydChlcnJtc2cpOwogIAkJfQoJfSwKICBuZXdCbGFua1BhZ2U6IGZ1bmN0aW9uKCl7CiAgICB2YXIgbWUgPSB0aGlzOwogIAkJZXJybXNnID0gJyc7CiAgCQlpZigkKCIjZmlsdGVyVXJ1c2FuIikudmFsKCkgPT0gJzAwJyl7CiAgCQkJZXJybXNnID0gIlBpbGloIFVydXNhbiI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyU0tQRCIpLnZhbCgpID09ICcwMCcpewogIAkJCWVycm1zZyA9ICJQaWxpaCBCaWRhbmciOwogIAkJfWVsc2UgaWYoJCgiI2ZpbHRlclNLUEQiKS52YWwoKSA9PSAnMDAnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggU0tQRCI7CiAgCQl9CiAgCQlpZihlcnJtc2cgPT0nJyl7CiAgCQkJdmFyIG1lID0gdGhpczsKICAJCQl2YXIgYUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmZvcm1OYW1lKTsKICAJCQkkLmFqYXgoewogIAkJCSAgdXJsOiB0aGlzLnVybCsnJnRpcGU9bmV3QmxhbmtQYWdlJywKICAJCQkgIHR5cGUgOiAnUE9TVCcsCiAgCQkJICBkYXRhOiQoJyMnK3RoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogIAkJCSAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogIAkJCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwogIAkJCQkJaWYocmVzcC5lcnIgPT0gIiIpIHsKICAJCQkJCQlhRm9ybS5hY3Rpb249ICdwZ0tldS5waHA\",
    "size": "24692"
}