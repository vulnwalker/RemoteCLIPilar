{
    "namaFile": "js\/perencanaanAset\/rkbmdKuasaPengguna\/rkbmdPengadaanKuasaPengguna.js",
    "lastUpdate": "2018-10-22+10:04:17.26",
    "contentFile": "var rkbmdPengadaanKuasaPenggunaFilterSKPD = new SkpdCls({
  prefix: "rkbmdPengadaanKuasaPengguna",
  formName: "rkbmdPengadaanKuasaPenggunaForm",

  pilihUrusanfter: function() {
    rkbmdPengadaanKuasaPengguna.filterRender(true);
  },
  pilihBidangAfter: function() {
    rkbmdPengadaanKuasaPengguna.filterRender(true);
  },
  pilihUnitAfter: function() {
    rkbmdPengadaanKuasaPengguna.filterRender(true);
  },
  pilihSubUnitAfter: function() {
    rkbmdPengadaanKuasaPengguna.filterRender(true);
  },
  pilihSeksiAfter: function() {
    rkbmdPengadaanKuasaPengguna.filterRender(true);
  }
});
var rkbmdPengadaanKuasaPengguna = new DaftarObj2({
  prefix: "rkbmdPengadaanKuasaPengguna",
  url: "pages.php?Pg=rkbmdPengadaanKuasaPengguna",
  formName: "rkbmdPengadaanKuasaPenggunaForm",
  rkbmdPengadaanKuasaPengguna_form: "0", //default js rkbmdPengadaanKuasaPengguna
  loading: function() {
    //alert('loading');
    this.topBarRender();
    this.filterRender();
    this.daftarRender();
    this.sumHalRender();
  },
  filterRenderAfter: function() {
    // this.daftarRender();
  },
  programChanged: function() {
    var arrayP = $("#p")
      .val()
      .split(".");
    var bk = arrayP[0];
    var ck = arrayP[1];
    var hiddenP = arrayP[2];

    $("#bk").val(bk);
    $("#ck").val(ck);
    $("#hiddenP").val(hiddenP);
    $("#q").val("");
    rkbmdPengadaanKuasaPengguna.refreshList(true);
  },
  detail: function() {
    //alert('detail');
    var me = this;
    errmsg = this.CekCheckbox();
    if (errmsg == "") {
      var box = this.GetCbxChecked();
      //UserAktivitasDet.genDetail();
    } else {
      alert(errmsg);
    }
  },
  pilihBidang: function() {
    rkbmdPengadaanKuasaPengguna.refreshList(true);
  },
  BidangAfter2: function() {
    rkbmdPengadaanKuasaPengguna.refreshList(true);
  },
  comboSKPDChanged: function() {
    rkbmdPengadaanKuasaPengguna.refreshList(true);
  },
  CariModul: function() {
    var me = this;

    popupModul.el_namaModul = "namaModul";
    popupModul.el_idModul = "idModul";
    /*		RefBarangButuh.el_nama_barang= 'nama_barang';		*/
    popupModul.windowSaveAfter = function() {};
    popupModul.windowShow();
  },

  histori: function(id) {
    var me = this;

    popupHistori.el_namaHistori = "namaHistori";
    popupHistori.el_idHistori = "idHistori";
    popupHistori.windowSaveAfter = function() {};
    popupHistori.windowShow(id);
  },
  daftarRender: function() {
    var me = this; //render daftar
    addCoverPage2("daftar_cover", 1, true, true, {
      renderTo: this.prefix + "_cont_daftar",
      imgsrc: "images/wait.gif",
      style: { position: "absolute", top: "5", left: "5" }
    });

    $.ajax({
      url: this.url + "&tipe=daftar",
      type: "POST",
      data: $("#" + this.formName).serialize(),
      success: function(data) {
        var resp = eval("(" + data + ")");
        document.getElementById(me.prefix + "_cont_daftar").innerHTML =
          resp.content;

        me.sumHalRender();
      }
    });
  },

  pilihPangkat: function() {
    var me = this;
    $.ajax({
      url: this.url + "&tipe=pilihPangkat",
      type: "POST",
      data: {
        c1: $("#rkbmdPengadaanKuasaPenggunaSKPD2fmURUSAN").val(),
        c: $("#rkbmdPengadaanKuasaPenggunaSKPD2fmSKPD").val(),
        d: $("#rkbmdPengadaanKuasaPenggunaSKPD2fmUNIT").val(),
        e: $("#rkbmdPengadaanKuasaPenggunaSKPD2fmSUBUNIT").val(),
        e1: $("#rkbmdPengadaanKuasaPenggunaSKPD2fmSEKSI").val(),
        dc1: $("#dc1").val(),
        dc: $("#dc").val(),
        dd: $("#dd").val(),
        kategori: $("#kategori").val(),
        namapegawai: $("#namapegawai").val(),
        nippegawai: $("#nippegawai").val(),
        pangkatakhir: $("#pangkatakhir").val(),
        golang_akhir: $("#golang_akhir").val(),
        jabatan: $("#jabatan").val(),
        eselon_akhir: $("#eselon_akhir").val()
      },
      success: function(data) {
        var resp = eval("(" + data + ")");

        if (resp.err == "") {
          document.getElementById("golang_akhir").value = resp.content;
        } else {
          alert(resp.err);
        }
      }
    });
  },
  Baru: function() {
    var me = this;

    errmsg = "";

    if ($("#filterUrusan").val() == "00") {
      errmsg = "Pilih Urusan";
    } else if ($("#filterSKPD").val() == "00") {
      errmsg = "Pilih Bidang";
    } else if ($("#filterSKPD").val() == "00") {
      errmsg = "Pilih SKPD";
    } else if ($("#filterUnit").val() == "00") {
      errmsg = "Pilih Unit";
    } else if ($("#filterSubUnit").val() == "000") {
      errmsg = "Pilih Sub Unit";
    }
    if (errmsg == "") {
      var me = this;
      var aForm = document.getElementById(this.formName);
      $.ajax({
        url: this.url + "&tipe=Baru",
        type: "POST",
        data: $("#" + this.formName).serialize(),
        success: function(data) {
          var resp = eval("(" + data + ")");
          if (resp.err == "") {
            $("#newBlankPage").val("1");
            aForm.action = "pages.php?Pg=rkbmdPengadaanKuasaPenggunaIns";
            aForm.target = "_blank";
            aForm.submit();
            aForm.target = "";
          } else {
            alert(resp.err);
          }
        }
      });
    } else {
      alert(errmsg);
    }
  },
  Info: function() {
    var aForm = document.getElementById(this.formName);
    $.ajax({
      url: this.url + "&tipe=hubla",
      type: "POST",
      data: $("#" + this.formName).serialize(),
      success: function(data) {
        var resp = eval("(" + data + ")");
        if (resp.err == "") {
          var kodeRek = resp.content.kodeRek;
          aForm.action = "pages.php?Pg=alokasiDpa";
          aForm.target = "_blank";
          aForm.submit();
          aForm.target = "";
        } else {
          alert(resp.err);
        }
      }
    });
  },
  unlockFindRekening: function() {
    var me = this;
    if ($("#cmbJenisRKAForm").val() == "") {
      $("#findRekening").attr("disabled", true);
    } else {
      $("#findRekening").attr("disabled", false);
      $("#findRekening").attr(
        "onclick",
        "rkbmdPengadaanKuasaPengguna.findRekening('" +
          $("#cmbJenisRKAForm").val() +
          "');"
      );
    }
  },

  Hapus: function() {
    var me = this;
    if (document.getElementById(this.prefix + "_jmlcek")) {
      var jmlcek = document.getElementById(this.prefix + "_jmlcek").value;
    } else {
      var jmlcek = "";
    }

    if (jmlcek == 0) {
      alert("Data Belum Dipilih!");
    } else {
      if (confirm("Yakin Hapus semua data dalam program yang di pilih ?")) {
        var cover = this.prefix + "_hapuscover";
        addCoverPage2(cover, 1, true, false);
        $.ajax({
          type: "POST",
          data: $("#" + this.formName).serialize(),
          url: this.url + "&tipe=remove",
          success: function(data) {
            var resp = eval("(" + data + ")");
            delElem(cover);
            if (resp.err == "") {
              me.AfterHapus();
            } else {
              alert(resp.err);
            }
          },
          error: ajaxError
        });
      }
    }
  },
  hapusBarang: function(idBarang) {
    var me = this;
    if (confirm("Yakin Hapus barang yang di pilih \\",
    "size": "22352"
}