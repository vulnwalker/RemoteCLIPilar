{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/d3\/d3.v2.js",
    "lastUpdate": "2018-03-22+14:20:04.85",
    "contentFile": "KGZ1bmN0aW9uKCkgewogIGZ1bmN0aW9uIGQzX2NsYXNzKGN0b3IsIHByb3BlcnRpZXMpIHsKICAgIHRyeSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wZXJ0aWVzKSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0b3IucHJvdG90eXBlLCBrZXksIHsKICAgICAgICAgIHZhbHVlOiBwcm9wZXJ0aWVzW2tleV0sCiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZQogICAgICAgIH0pOwogICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGN0b3IucHJvdG90eXBlID0gcHJvcGVydGllczsKICAgIH0KICB9CiAgZnVuY3Rpb24gZDNfYXJyYXlDb3B5KHBzZXVkb2FycmF5KSB7CiAgICB2YXIgaSA9IC0xLCBuID0gcHNldWRvYXJyYXkubGVuZ3RoLCBhcnJheSA9IFtdOwogICAgd2hpbGUgKCsraSA8IG4pIGFycmF5LnB1c2gocHNldWRvYXJyYXlbaV0pOwogICAgcmV0dXJuIGFycmF5OwogIH0KICBmdW5jdGlvbiBkM19hcnJheVNsaWNlKHBzZXVkb2FycmF5KSB7CiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocHNldWRvYXJyYXkpOwogIH0KICBmdW5jdGlvbiBkM19NYXAoKSB7fQogIGZ1bmN0aW9uIGQzX2lkZW50aXR5KGQpIHsKICAgIHJldHVybiBkOwogIH0KICBmdW5jdGlvbiBkM190aGlzKCkgewogICAgcmV0dXJuIHRoaXM7CiAgfQogIGZ1bmN0aW9uIGQzX3RydWUoKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gZDNfZnVuY3Rvcih2KSB7CiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICJmdW5jdGlvbiIgPyB2IDogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB2OwogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfcmViaW5kKHRhcmdldCwgc291cmNlLCBtZXRob2QpIHsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIHZhbHVlID0gbWV0aG9kLmFwcGx5KHNvdXJjZSwgYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0YXJnZXQgOiB2YWx1ZTsKICAgIH07CiAgfQogIGZ1bmN0aW9uIGQzX251bWJlcih4KSB7CiAgICByZXR1cm4geCAhPSBudWxsICYmICFpc05hTih4KTsKICB9CiAgZnVuY3Rpb24gZDNfemlwTGVuZ3RoKGQpIHsKICAgIHJldHVybiBkLmxlbmd0aDsKICB9CiAgZnVuY3Rpb24gZDNfc3BsaXR0ZXIoZCkgewogICAgcmV0dXJuIGQgPT0gbnVsbDsKICB9CiAgZnVuY3Rpb24gZDNfY29sbGFwc2UocykgewogICAgcmV0dXJuIHMudHJpbSgpLnJlcGxhY2UoL1xzKy9nLCAiICIpOwogIH0KICBmdW5jdGlvbiBkM19yYW5nZV9pbnRlZ2VyU2NhbGUoeCkgewogICAgdmFyIGsgPSAxOwogICAgd2hpbGUgKHggKiBrICUgMSkgayAqPSAxMDsKICAgIHJldHVybiBrOwogIH0KICBmdW5jdGlvbiBkM19kaXNwYXRjaCgpIHt9CiAgZnVuY3Rpb24gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpIHsKICAgIGZ1bmN0aW9uIGV2ZW50KCkgewogICAgICB2YXIgeiA9IGxpc3RlbmVycywgaSA9IC0xLCBuID0gei5sZW5ndGgsIGw7CiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAobCA9IHpbaV0ub24pIGwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIGRpc3BhdGNoOwogICAgfQogICAgdmFyIGxpc3RlbmVycyA9IFtdLCBsaXN0ZW5lckJ5TmFtZSA9IG5ldyBkM19NYXA7CiAgICBldmVudC5vbiA9IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7CiAgICAgIHZhciBsID0gbGlzdGVuZXJCeU5hbWUuZ2V0KG5hbWUpLCBpOwogICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiBsICYmIGwub247CiAgICAgIGlmIChsKSB7CiAgICAgICAgbC5vbiA9IG51bGw7CiAgICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKDAsIGkgPSBsaXN0ZW5lcnMuaW5kZXhPZihsKSkuY29uY2F0KGxpc3RlbmVycy5zbGljZShpICsgMSkpOwogICAgICAgIGxpc3RlbmVyQnlOYW1lLnJlbW92ZShuYW1lKTsKICAgICAgfQogICAgICBpZiAobGlzdGVuZXIpIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyQnlOYW1lLnNldChuYW1lLCB7CiAgICAgICAgb246IGxpc3RlbmVyCiAgICAgIH0pKTsKICAgICAgcmV0dXJuIGRpc3BhdGNoOwogICAgfTsKICAgIHJldHVybiBldmVudDsKICB9CiAgZnVuY3Rpb24gZDNfZm9ybWF0X3ByZWNpc2lvbih4LCBwKSB7CiAgICByZXR1cm4gcCAtICh4ID8gMSArIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIE1hdGgucG93KDEwLCAxICsgTWF0aC5mbG9vcihNYXRoLmxvZyh4KSAvIE1hdGguTE4xMCkgLSBwKSkgLyBNYXRoLkxOMTApIDogMSk7CiAgfQogIGZ1bmN0aW9uIGQzX2Zvcm1hdF90eXBlRGVmYXVsdCh4KSB7CiAgICByZXR1cm4geCArICIiOwogIH0KICBmdW5jdGlvbiBkM19mb3JtYXRfZ3JvdXAodmFsdWUpIHsKICAgIHZhciBpID0gdmFsdWUubGFzdEluZGV4T2YoIi4iKSwgZiA9IGkgPj0gMCA\/IHZhbHVlLnN1YnN0cmluZyhpKSA6IChpID0gdmFsdWUubGVuZ3RoLCAiIiksIHQgPSBbXTsKICAgIHdoaWxlIChpID4gMCkgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IDMsIGkgKyAzKSk7CiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbigiLCIpICsgZjsKICB9CiAgZnVuY3Rpb24gZDNfZm9ybWF0UHJlZml4KGQsIGkpIHsKICAgIHZhciBrID0gTWF0aC5wb3coMTAsIE1hdGguYWJzKDggLSBpKSAqIDMpOwogICAgcmV0dXJuIHsKICAgICAgc2NhbGU6IGkgPiA4ID8gZnVuY3Rpb24oZCkgewogICAgICAgIHJldHVybiBkIC8gazsKICAgICAgfSA6IGZ1bmN0aW9uKGQpIHsKICAgICAgICByZXR1cm4gZCAqIGs7CiAgICAgIH0sCiAgICAgIHN5bWJvbDogZAogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfZWFzZV9jbGFtcChmKSB7CiAgICByZXR1cm4gZnVuY3Rpb24odCkgewogICAgICByZXR1cm4gdCA8PSAwID8gMCA6IHQgPj0gMSA\/IDEgOiBmKHQpOwogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfZWFzZV9yZXZlcnNlKGYpIHsKICAgIHJldHVybiBmdW5jdGlvbih0KSB7CiAgICAgIHJldHVybiAxIC0gZigxIC0gdCk7CiAgICB9OwogIH0KICBmdW5jdGlvbiBkM19lYXNlX3JlZmxlY3QoZikgewogICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHsKICAgICAgcmV0dXJuIC41ICogKHQgPCAuNSA\/IGYoMiAqIHQpIDogMiAtIGYoMiAtIDIgKiB0KSk7CiAgICB9OwogIH0KICBmdW5jdGlvbiBkM19lYXNlX2lkZW50aXR5KHQpIHsKICAgIHJldHVybiB0OwogIH0KICBmdW5jdGlvbiBkM19lYXNlX3BvbHkoZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHsKICAgICAgcmV0dXJuIE1hdGgucG93KHQsIGUpOwogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfZWFzZV9zaW4odCkgewogICAgcmV0dXJuIDEgLSBNYXRoLmNvcyh0ICogTWF0aC5QSSAvIDIpOwogIH0KICBmdW5jdGlvbiBkM19lYXNlX2V4cCh0KSB7CiAgICByZXR1cm4gTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKTsKICB9CiAgZnVuY3Rpb24gZDNfZWFzZV9jaXJjbGUodCkgewogICAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KTsKICB9CiAgZnVuY3Rpb24gZDNfZWFzZV9lbGFzdGljKGEsIHApIHsKICAgIHZhciBzOwogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwID0gLjQ1OwogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7CiAgICAgIGEgPSAxOwogICAgICBzID0gcCAvIDQ7CiAgICB9IGVsc2UgcyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKDEgLyBhKTsKICAgIHJldHVybiBmdW5jdGlvbih0KSB7CiAgICAgIHJldHVybiAxICsgYSAqIE1hdGgucG93KDIsIDEwICogLXQpICogTWF0aC5zaW4oKHQgLSBzKSAqIDIgKiBNYXRoLlBJIC8gcCk7CiAgICB9OwogIH0KICBmdW5jdGlvbiBkM19lYXNlX2JhY2socykgewogICAgaWYgKCFzKSBzID0gMS43MDE1ODsKICAgIHJldHVybiBmdW5jdGlvbih0KSB7CiAgICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpOwogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfZWFzZV9ib3VuY2UodCkgewogICAgcmV0dXJuIHQgPCAxIC8gMi43NSA\/IDcuNTYyNSAqIHQgKiB0IDogdCA8IDIgLyAyLjc1ID8gNy41NjI1ICogKHQgLT0gMS41IC8gMi43NSkgKiB0ICsgLjc1IDogdCA8IDIuNSAvIDIuNzUgPyA3LjU2MjUgKiAodCAtPSAyLjI1IC8gMi43NSkgKiB0ICsgLjkzNzUgOiA3LjU2MjUgKiAodCAtPSAyLjYyNSAvIDIuNzUpICogdCArIC45ODQzNzU7CiAgfQogIGZ1bmN0aW9uIGQzX2V2ZW50Q2FuY2VsKCkgewogICAgZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICBkMy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogIH0KICBmdW5jdGlvbiBkM19ldmVudFNvdXJjZSgpIHsKICAgIHZhciBlID0gZDMuZXZlbnQsIHM7CiAgICB3aGlsZSAocyA9IGUuc291cmNlRXZlbnQpIGUgPSBzOwogICAgcmV0dXJuIGU7CiAgfQogIGZ1bmN0aW9uIGQzX2V2ZW50RGlzcGF0Y2godGFyZ2V0KSB7CiAgICB2YXIgZGlzcGF0Y2ggPSBuZXcgZDNfZGlzcGF0Y2gsIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgIHdoaWxlICgrK2kgPCBuKSBkaXNwYXRjaFthcmd1bWVudHNbaV1dID0gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpOwogICAgZGlzcGF0Y2gub2YgPSBmdW5jdGlvbih0aGl6LCBhcmd1bWVudHopIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUxKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhciBlMCA9IGUxLnNvdXJjZUV2ZW50ID0gZDMuZXZlbnQ7CiAgICAgICAgICBlMS50YXJnZXQgPSB0YXJnZXQ7CiAgICAgICAgICBkMy5ldmVudCA9IGUxOwogICAgICAgICAgZGlzcGF0Y2hbZTEudHlwZV0uYXBwbHkodGhpeiwgYXJndW1lbnR6KTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgZDMuZXZlbnQgPSBlMDsKICAgICAgICB9CiAgICAgIH07CiAgICB9OwogICAgcmV0dXJuIGRpc3BhdGNoOwogIH0KICBmdW5jdGlvbiBkM190cmFuc2Zvcm0obSkgewogICAgdmFyIHIwID0gWyBtLmEsIG0uYiBdLCByMSA9IFsgbS5jLCBtLmQgXSwga3ggPSBkM190cmFuc2Zvcm1Ob3JtYWxpemUocjApLCBreiA9IGQzX3RyYW5zZm9ybURvdChyMCwgcjEpLCBreSA9IGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShkM190cmFuc2Zvcm1Db21iaW5lKHIxLCByMCwgLWt6KSkgfHwgMDsKICAgIGlmIChyMFswXSAqIHIxWzFdIDwgcjFbMF0gKiByMFsxXSkgewogICAgICByMFswXSAqPSAtMTsKICAgICAgcjBbMV0gKj0gLTE7CiAgICAgIGt4ICo9IC0xOwogICAgICBreiAqPSAtMTsKICAgIH0KICAgIHRoaXMucm90YXRlID0gKGt4ID8gTWF0aC5hdGFuMihyMFsxXSwgcjBbMF0pIDogTWF0aC5hdGFuMigtcjFbMF0sIHIxWzFdKSkgKiBkM190cmFuc2Zvcm1EZWdyZWVzOwogICAgdGhpcy50cmFuc2xhdGUgPSBbIG0uZSwgbS5mIF07CiAgICB0aGlzLnNjYWxlID0gWyBreCwga3kgXTsKICAgIHRoaXMuc2tldyA9IGt5ID8gTWF0aC5hdGFuMihreiwga3kpICogZDNfdHJhbnNmb3JtRGVncmVlcyA6IDA7CiAgfQogIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybURvdChhLCBiKSB7CiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXTsKICB9CiAgZnVuY3Rpb24gZDNfdHJhbnNmb3JtTm9ybWFsaXplKGEpIHsKICAgIHZhciBrID0gTWF0aC5zcXJ0KGQzX3RyYW5zZm9ybURvdChhLCBhKSk7CiAgICBpZiAoaykgewogICAgICBhWzBdIC89IGs7CiAgICAgIGFbMV0gLz0gazsKICAgIH0KICAgIHJldHVybiBrOwogIH0KICBmdW5jdGlvbiBkM190cmFuc2Zvcm1Db21iaW5lKGEsIGIsIGspIHsKICAgIGFbMF0gKz0gayAqIGJbMF07CiAgICBhWzFdICs9IGsgKiBiWzFdOwogICAgcmV0dXJuIGE7CiAgfQogIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlQnlOYW1lKG5hbWUpIHsKICAgIHJldHVybiBuYW1lID09ICJ0cmFuc2Zvcm0iID8gZDMuaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBkMy5pbnRlcnBvbGF0ZTsKICB9CiAgZnVuY3Rpb24gZDNfdW5pbnRlcnBvbGF0ZU51bWJlcihhLCBiKSB7CiAgICBiID0gYiAtIChhID0gK2EpID8gMSAvIChiIC0gYSkgOiAwOwogICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsKICAgICAgcmV0dXJuICh4IC0gYSkgKiBiOwogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfdW5pbnRlcnBvbGF0ZUNsYW1wKGEsIGIpIHsKICAgIGIgPSBiIC0gKGEgPSArYSkgPyAxIC8gKGIgLSBhKSA6IDA7CiAgICByZXR1cm4gZnVuY3Rpb24oeCkgewogICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgKHggLSBhKSAqIGIpKTsKICAgIH07CiAgfQogIGZ1bmN0aW9uIGQzX0NvbG9yKCkge30KICBmdW5jdGlvbiBkM19yZ2IociwgZywgYikgewogICAgcmV0dXJuIG5ldyBkM19SZ2IociwgZywgYik7CiAgfQogIGZ1bmN0aW9uIGQzX1JnYihyLCBnLCBiKSB7CiAgICB0aGlzLnIgPSByOwogICAgdGhpcy5nID0gZzsKICAgIHRoaXMuYiA9IGI7CiAgfQogIGZ1bmN0aW9uIGQzX3JnYl9oZXgodikgewogICAgcmV0dXJuIHYgPCAxNiA\/ICIwIiArIE1hdGgubWF4KDAsIHYpLnRvU3RyaW5nKDE2KSA6IE1hdGgubWluKDI1NSwgdikudG9TdHJpbmcoMTYpOwogIH0KICBmdW5jdGlvbiBkM19yZ2JfcGFyc2UoZm9ybWF0LCByZ2IsIGhzbCkgewogICAgdmFyIHIgPSAwLCBnID0gMCwgYiA9IDAsIG0xLCBtMiwgbmFtZTsKICAgIG0xID0gLyhbYS16XSspXCgoLiopXCkvaS5leGVjKGZvcm1hdCk7CiAgICBpZiAobTEpIHsKICAgICAgbTIgPSBtMVsyXS5zcGxpdCgiLCIpOwogICAgICBzd2l0Y2ggKG0xWzFdKSB7CiAgICAgICBjYXNlICJoc2wiOgogICAgICAgIHsKICAgICAgICAgIHJldHVybiBoc2wocGFyc2VGbG9hdChtMlswXSksIHBhcnNlRmxvYXQobTJbMV0pIC8gMTAwLCBwYXJzZUZsb2F0KG0yWzJdKSAvIDEwMCk7CiAgICAgICAgfQogICAgICAgY2FzZSAicmdiIjoKICAgICAgICB7CiAgICAgICAgICByZXR1cm4gcmdiKGQzX3JnYl9wYXJzZU51bWJlcihtMlswXSksIGQzX3JnYl9wYXJzZU51bWJlcihtMlsxXSksIGQzX3JnYl9wYXJzZU51bWJlcihtMlsyXSkpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKG5hbWUgPSBkM19yZ2JfbmFtZXMuZ2V0KGZvcm1hdCkpIHJldHVybiByZ2IobmFtZS5yLCBuYW1lLmcsIG5hbWUuYik7CiAgICBpZiAoZm9ybWF0ICE9IG51bGwgJiYgZm9ybWF0LmNoYXJBdCgwKSA9PT0gIiMiKSB7CiAgICAgIGlmIChmb3JtYXQubGVuZ3RoID09PSA0KSB7CiAgICAgICAgciA9IGZvcm1hdC5jaGFyQXQoMSk7CiAgICAgICAgciArPSByOwogICAgICAgIGcgPSBmb3JtYXQuY2hhckF0KDIpOwogICAgICAgIGcgKz0gZzsKICAgICAgICBiID0gZm9ybWF0LmNoYXJBdCgzKTsKICAgICAgICBiICs9IGI7CiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNykgewogICAgICAgIHIgPSBmb3JtYXQuc3Vic3RyaW5nKDEsIDMpOwogICAgICAgIGcgPSBmb3JtYXQuc3Vic3RyaW5nKDMsIDUpOwogICAgICAgIGIgPSBmb3JtYXQuc3Vic3RyaW5nKDUsIDcpOwogICAgICB9CiAgICAgIHIgPSBwYXJzZUludChyLCAxNik7CiAgICAgIGcgPSBwYXJzZUludChnLCAxNik7CiAgICAgIGIgPSBwYXJzZUludChiLCAxNik7CiAgICB9CiAgICByZXR1cm4gcmdiKHIsIGcsIGIpOwogIH0KICBmdW5jdGlvbiBkM19yZ2JfaHNsKHIsIGcsIGIpIHsKICAgIHZhciBtaW4gPSBNYXRoLm1pbihyIC89IDI1NSwgZyAvPSAyNTUsIGIgLz0gMjU1KSwgbWF4ID0gTWF0aC5tYXgociwgZywgYiksIGQgPSBtYXggLSBtaW4sIGgsIHMsIGwgPSAobWF4ICsgbWluKSAvIDI7CiAgICBpZiAoZCkgewogICAgICBzID0gbCA8IC41ID8gZCAvIChtYXggKyBtaW4pIDogZCAvICgyIC0gbWF4IC0gbWluKTsKICAgICAgaWYgKHIgPT0gbWF4KSBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGVsc2UgaWYgKGcgPT0gbWF4KSBoID0gKGIgLSByKSAvIGQgKyAyOyBlbHNlIGggPSAociAtIGcpIC8gZCArIDQ7CiAgICAgIGggKj0gNjA7CiAgICB9IGVsc2UgewogICAgICBzID0gaCA9IDA7CiAgICB9CiAgICByZXR1cm4gZDNfaHNsKGgsIHMsIGwpOwogIH0KICBmdW5jdGlvbiBkM19yZ2JfbGFiKHIsIGcsIGIpIHsKICAgIHIgPSBkM19yZ2JfeHl6KHIpOwogICAgZyA9IGQzX3JnYl94eXooZyk7CiAgICBiID0gZDNfcmdiX3h5eihiKTsKICAgIHZhciB4ID0gZDNfeHl6X2xhYigoLjQxMjQ1NjQgKiByICsgLjM1NzU3NjEgKiBnICsgLjE4MDQzNzUgKiBiKSAvIGQzX2xhYl9YKSwgeSA9IGQzX3h5el9sYWIoKC4yMTI2NzI5ICogciArIC43MTUxNTIyICogZyArIC4wNzIxNzUgKiBiKSAvIGQzX2xhYl9ZKSwgeiA9IGQzX3h5el9sYWIoKC4wMTkzMzM5ICogciArIC4xMTkxOTIgKiBnICsgLjk1MDMwNDEgKiBiKSAvIGQzX2xhYl9aKTsKICAgIHJldHVybiBkM19sYWIoMTE2ICogeSAtIDE2LCA1MDAgKiAoeCAtIHkpLCAyMDAgKiAoeSAtIHopKTsKICB9CiAgZnVuY3Rpb24gZDNfcmdiX3h5eihyKSB7CiAgICByZXR1cm4gKHIgLz0gMjU1KSA8PSAuMDQwNDUgPyByIC8gMTIuOTIgOiBNYXRoLnBvdygociArIC4wNTUpIC8gMS4wNTUsIDIuNCk7CiAgfQogIGZ1bmN0aW9uIGQzX3JnYl9wYXJzZU51bWJlcihjKSB7CiAgICB2YXIgZiA9IHBhcnNlRmxvYXQoYyk7CiAgICByZXR1cm4gYy5jaGFyQXQoYy5sZW5ndGggLSAxKSA9PT0gIiUiID8gTWF0aC5yb3VuZChmICogMi41NSkgOiBmOwogIH0KICBmdW5jdGlvbiBkM19oc2woaCwgcywgbCkgewogICAgcmV0dXJuIG5ldyBkM19Ic2woaCwgcywgbCk7CiAgfQogIGZ1bmN0aW9uIGQzX0hzbChoLCBzLCBsKSB7CiAgICB0aGlzLmggPSBoOwogICAgdGhpcy5zID0gczsKICAgIHRoaXMubCA9IGw7CiAgfQogIGZ1bmN0aW9uIGQzX2hzbF9yZ2IoaCwgcywgbCkgewogICAgZnVuY3Rpb24gdihoKSB7CiAgICAgIGlmIChoID4gMzYwKSBoIC09IDM2MDsgZWxzZSBpZiAoaCA8IDApIGggKz0gMzYwOwogICAgICBpZiAoaCA8IDYwKSByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjA7CiAgICAgIGlmIChoIDwgMTgwKSByZXR1cm4gbTI7CiAgICAgIGlmIChoIDwgMjQwKSByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MDsKICAgICAgcmV0dXJuIG0xOwogICAgfQogICAgZnVuY3Rpb24gdnYoaCkgewogICAgICByZXR1cm4gTWF0aC5yb3VuZCh2KGgpICogMjU1KTsKICAgIH0KICAgIHZhciBtMSwgbTI7CiAgICBoID0gaCAlIDM2MDsKICAgIGlmIChoIDwgMCkgaCArPSAzNjA7CiAgICBzID0gcyA8IDAgPyAwIDogcyA+IDEgPyAxIDogczsKICAgIGwgPSBsIDwgMCA\/IDAgOiBsID4gMSA\/IDEgOiBsOwogICAgbTIgPSBsIDw9IC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzOwogICAgbTEgPSAyICogbCAtIG0yOwogICAgcmV0dXJuIGQzX3JnYih2dihoICsgMTIwKSwgdnYoaCksIHZ2KGggLSAxMjApKTsKICB9CiAgZnVuY3Rpb24gZDNfaGNsKGgsIGMsIGwpIHsKICAgIHJldHVybiBuZXcgZDNfSGNsKGgsIGMsIGwpOwogIH0KICBmdW5jdGlvbiBkM19IY2woaCwgYywgbCkgewogICAgdGhpcy5oID0gaDsKICAgIHRoaXMuYyA9IGM7CiAgICB0aGlzLmwgPSBsOwogIH0KICBmdW5jdGlvbiBkM19oY2xfbGFiKGgsIGMsIGwpIHsKICAgIHJldHVybiBkM19sYWIobCwgTWF0aC5jb3MoaCAqPSBNYXRoLlBJIC8gMTgwKSAqIGMsIE1hdGguc2luKGgpICogYyk7CiAgfQogIGZ1bmN0aW9uIGQzX2xhYihsLCBhLCBiKSB7CiAgICByZXR1cm4gbmV3IGQzX0xhYihsLCBhLCBiKTsKICB9CiAgZnVuY3Rpb24gZDNfTGFiKGwsIGEsIGIpIHsKICAgIHRoaXMubCA9IGw7CiAgICB0aGlzLmEgPSBhOwogICAgdGhpcy5iID0gYjsKICB9CiAgZnVuY3Rpb24gZDNfbGFiX3JnYihsLCBhLCBiKSB7CiAgICB2YXIgeSA9IChsICsgMTYpIC8gMTE2LCB4ID0geSArIGEgLyA1MDAsIHogPSB5IC0gYiAvIDIwMDsKICAgIHggPSBkM19sYWJfeHl6KHgpICogZDNfbGFiX1g7CiAgICB5ID0gZDNfbGFiX3h5eih5KSAqIGQzX2xhYl9ZOwogICAgeiA9IGQzX2xhYl94eXooeikgKiBkM19sYWJfWjsKICAgIHJldHVybiBkM19yZ2IoZDNfeHl6X3JnYigzLjI0MDQ1NDIgKiB4IC0gMS41MzcxMzg1ICogeSAtIC40OTg1MzE0ICogeiksIGQzX3h5el9yZ2IoLS45NjkyNjYgKiB4ICsgMS44NzYwMTA4ICogeSArIC4wNDE1NTYgKiB6KSwgZDNfeHl6X3JnYiguMDU1NjQzNCAqIHggLSAuMjA0MDI1OSAqIHkgKyAxLjA1NzIyNTIgKiB6KSk7CiAgfQogIGZ1bmN0aW9uIGQzX2xhYl9oY2wobCwgYSwgYikgewogICAgcmV0dXJuIGQzX2hjbChNYXRoLmF0YW4yKGIsIGEpIC8gTWF0aC5QSSAqIDE4MCwgTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpLCBsKTsKICB9CiAgZnVuY3Rpb24gZDNfbGFiX3h5eih4KSB7CiAgICByZXR1cm4geCA+IC4yMDY4OTMwMzQgPyB4ICogeCAqIHggOiAoeCAtIDQgLyAyOSkgLyA3Ljc4NzAzNzsKICB9CiAgZnVuY3Rpb24gZDNfeHl6X2xhYih4KSB7CiAgICByZXR1cm4geCA+IC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiA3Ljc4NzAzNyAqIHggKyA0IC8gMjk7CiAgfQogIGZ1bmN0aW9uIGQzX3h5el9yZ2IocikgewogICAgcmV0dXJuIE1hdGgucm91bmQoMjU1ICogKHIgPD0gLjAwMzA0ID8gMTIuOTIgKiByIDogMS4wNTUgKiBNYXRoLnBvdyhyLCAxIC8gMi40KSAtIC4wNTUpKTsKICB9CiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uKGdyb3VwcykgewogICAgZDNfYXJyYXlTdWJjbGFzcyhncm91cHMsIGQzX3NlbGVjdGlvblByb3RvdHlwZSk7CiAgICByZXR1cm4gZ3JvdXBzOwogIH0KICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpIHsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGQzX3NlbGVjdChzZWxlY3RvciwgdGhpcyk7CiAgICB9OwogIH0KICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc2VsZWN0b3JBbGwoc2VsZWN0b3IpIHsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGQzX3NlbGVjdEFsbChzZWxlY3RvciwgdGhpcyk7CiAgICB9OwogIH0KICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkgewogICAgZnVuY3Rpb24gYXR0ck51bGwoKSB7CiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpOwogICAgfQogICAgZnVuY3Rpb24gYXR0ck51bGxOUygpIHsKICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTsKICAgIH0KICAgIGZ1bmN0aW9uIGF0dHJDb25zdGFudCgpIHsKICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpOwogICAgfQogICAgZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoKSB7CiAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCwgdmFsdWUpOwogICAgfQogICAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKCkgewogICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHgpOwogICAgfQogICAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoKSB7CiAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgaWYgKHggPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTsgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwsIHgpOwogICAgfQogICAgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSk7CiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA\/IG5hbWUubG9jYWwgPyBhdHRyTnVsbE5TIDogYXR0ck51bGwgOiB0eXBlb2YgdmFsdWUgPT09ICJmdW5jdGlvbiIgPyBuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24gOiBuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQ7CiAgfQogIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jbGFzc2VkUmUobmFtZSkgewogICAgcmV0dXJuIG5ldyBSZWdFeHAoIig\/Ol58XFxzKykiICsgZDMucmVxdW90ZShuYW1lKSArICIoPzpcXHMrfCQpIiwgImciKTsKICB9CiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpIHsKICAgIGZ1bmN0aW9uIGNsYXNzZWRDb25zdGFudCgpIHsKICAgICAgdmFyIGkgPSAtMTsKICAgICAgd2hpbGUgKCsraSA8IG4pIG5hbWVbaV0odGhpcywgdmFsdWUpOwogICAgfQogICAgZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKCkgewogICAgICB2YXIgaSA9IC0xLCB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgd2hpbGUgKCsraSA8IG4pIG5hbWVbaV0odGhpcywgeCk7CiAgICB9CiAgICBuYW1lID0gbmFtZS50cmltKCkuc3BsaXQoL1xzKy8pLm1hcChkM19zZWxlY3Rpb25fY2xhc3NlZE5hbWUpOwogICAgdmFyIG4gPSBuYW1lLmxlbmd0aDsKICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICJmdW5jdGlvbiIgPyBjbGFzc2VkRnVuY3Rpb24gOiBjbGFzc2VkQ29uc3RhbnQ7CiAgfQogIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jbGFzc2VkTmFtZShuYW1lKSB7CiAgICB2YXIgcmUgPSBkM19zZWxlY3Rpb25fY2xhc3NlZFJlKG5hbWUpOwogICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7CiAgICAgIGlmIChjID0gbm9kZS5jbGFzc0xpc3QpIHJldHVybiB2YWx1ZSA\/IGMuYWRkKG5hbWUpIDogYy5yZW1vdmUobmFtZSk7CiAgICAgIHZhciBjID0gbm9kZS5jbGFzc05hbWUsIGNiID0gYy5iYXNlVmFsICE9IG51bGwsIGN2ID0gY2IgPyBjLmJhc2VWYWwgOiBjOwogICAgICBpZiAodmFsdWUpIHsKICAgICAgICByZS5sYXN0SW5kZXggPSAwOwogICAgICAgIGlmICghcmUudGVzdChjdikpIHsKICAgICAgICAgIGN2ID0gZDNfY29sbGFwc2UoY3YgKyAiICIgKyBuYW1lKTsKICAgICAgICAgIGlmIChjYikgYy5iYXNlVmFsID0gY3Y7IGVsc2Ugbm9kZS5jbGFzc05hbWUgPSBjdjsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoY3YpIHsKICAgICAgICBjdiA9IGQzX2NvbGxhcHNlKGN2LnJlcGxhY2UocmUsICIgIikpOwogICAgICAgIGlmIChjYikgYy5iYXNlVmFsID0gY3Y7IGVsc2Ugbm9kZS5jbGFzc05hbWUgPSBjdjsKICAgICAgfQogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkgewogICAgZnVuY3Rpb24gc3R5bGVOdWxsKCkgewogICAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpOwogICAgfQogICAgZnVuY3Rpb24gc3R5bGVDb25zdGFudCgpIHsKICAgICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpOwogICAgfQogICAgZnVuY3Rpb24gc3R5bGVGdW5jdGlvbigpIHsKICAgICAgdmFyIHggPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICBpZiAoeCA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpOyBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgeCwgcHJpb3JpdHkpOwogICAgfQogICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBzdHlsZU51bGwgOiB0eXBlb2YgdmFsdWUgPT09ICJmdW5jdGlvbiIgPyBzdHlsZUZ1bmN0aW9uIDogc3R5bGVDb25zdGFudDsKICB9CiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3Byb3BlcnR5KG5hbWUsIHZhbHVlKSB7CiAgICBmdW5jdGlvbiBwcm9wZXJ0eU51bGwoKSB7CiAgICAgIGRlbGV0ZSB0aGlzW25hbWVdOwogICAgfQogICAgZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudCgpIHsKICAgICAgdGhpc1tuYW1lXSA9IHZhbHVlOwogICAgfQogICAgZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbigpIHsKICAgICAgdmFyIHggPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICBpZiAoeCA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTsgZWxzZSB0aGlzW25hbWVdID0geDsKICAgIH0KICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gcHJvcGVydHlOdWxsIDogdHlwZW9mIHZhbHVlID09PSAiZnVuY3Rpb24iID8gcHJvcGVydHlGdW5jdGlvbiA6IHByb3BlcnR5Q29uc3RhbnQ7CiAgfQogIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9kYXRhTm9kZShkYXRhKSB7CiAgICByZXR1cm4gewogICAgICBfX2RhdGFfXzogZGF0YQogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2ZpbHRlcihzZWxlY3RvcikgewogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZDNfc2VsZWN0TWF0Y2hlcyh0aGlzLCBzZWxlY3Rvcik7CiAgICB9OwogIH0KICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc29ydENvbXBhcmF0b3IoY29tcGFyYXRvcikgewogICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSBjb21wYXJhdG9yID0gZDMuYXNjZW5kaW5nOwogICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoYSAmJiBhLl9fZGF0YV9fLCBiICYmIGIuX19kYXRhX18pOwogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX29uKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKSB7CiAgICBmdW5jdGlvbiBvblJlbW92ZSgpIHsKICAgICAgdmFyIHdyYXBwZXIgPSB0aGlzW25hbWVdOwogICAgICBpZiAod3JhcHBlcikgewogICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCB3cmFwcGVyLCB3cmFwcGVyLiQpOwogICAgICAgIGRlbGV0ZSB0aGlzW25hbWVdOwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBvbkFkZCgpIHsKICAgICAgZnVuY3Rpb24gd3JhcHBlcihlKSB7CiAgICAgICAgdmFyIG8gPSBkMy5ldmVudDsKICAgICAgICBkMy5ldmVudCA9IGU7CiAgICAgICAgYXJnc1swXSA9IG5vZGUuX19kYXRhX187CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KG5vZGUsIGFyZ3MpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBkMy5ldmVudCA9IG87CiAgICAgICAgfQogICAgICB9CiAgICAgIHZhciBub2RlID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsKICAgICAgb25SZW1vdmUuY2FsbCh0aGlzKTsKICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIHRoaXNbbmFtZV0gPSB3cmFwcGVyLCB3cmFwcGVyLiQgPSBjYXB0dXJlKTsKICAgICAgd3JhcHBlci5fID0gbGlzdGVuZXI7CiAgICB9CiAgICB2YXIgbmFtZSA9ICJfX29uIiArIHR5cGUsIGkgPSB0eXBlLmluZGV4T2YoIi4iKTsKICAgIGlmIChpID4gMCkgdHlwZSA9IHR5cGUuc3Vic3RyaW5nKDAsIGkpOwogICAgcmV0dXJuIGxpc3RlbmVyID8gb25BZGQgOiBvblJlbW92ZTsKICB9CiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2VhY2goZ3JvdXBzLCBjYWxsYmFjaykgewogICAgZm9yICh2YXIgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgaisrKSB7CiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47IGkrKykgewogICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrKG5vZGUsIGksIGopOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZ3JvdXBzOwogIH0KICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZW50ZXIoc2VsZWN0aW9uKSB7CiAgICBkM19hcnJheVN1YmNsYXNzKHNlbGVjdGlvbiwgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlKTsKICAgIHJldHVybiBzZWxlY3Rpb247CiAgfQogIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb24oZ3JvdXBzLCBpZCwgdGltZSkgewogICAgZDNfYXJyYXlTdWJjbGFzcyhncm91cHMsIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUpOwogICAgdmFyIHR3ZWVucyA9IG5ldyBkM19NYXAsIGV2ZW50ID0gZDMuZGlzcGF0Y2goInN0YXJ0IiwgImVuZCIpLCBlYXNlID0gZDNfdHJhbnNpdGlvbkVhc2U7CiAgICBncm91cHMuaWQgPSBpZDsKICAgIGdyb3Vwcy50aW1lID0gdGltZTsKICAgIGdyb3Vwcy50d2VlbiA9IGZ1bmN0aW9uKG5hbWUsIHR3ZWVuKSB7CiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIHR3ZWVucy5nZXQobmFtZSk7CiAgICAgIGlmICh0d2VlbiA9PSBudWxsKSB0d2VlbnMucmVtb3ZlKG5hbWUpOyBlbHNlIHR3ZWVucy5zZXQobmFtZSwgdHdlZW4pOwogICAgICByZXR1cm4gZ3JvdXBzOwogICAgfTsKICAgIGdyb3Vwcy5lYXNlID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZWFzZTsKICAgICAgZWFzZSA9IHR5cGVvZiB2YWx1ZSA9PT0gImZ1bmN0aW9uIiA\/IHZhbHVlIDogZDMuZWFzZS5hcHBseShkMywgYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIGdyb3VwczsKICAgIH07CiAgICBncm91cHMuZWFjaCA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7CiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGQzX3RyYW5zaXRpb25fZWFjaC5jYWxsKGdyb3VwcywgdHlwZSk7CiAgICAgIGV2ZW50Lm9uKHR5cGUsIGxpc3RlbmVyKTsKICAgICAgcmV0dXJuIGdyb3VwczsKICAgIH07CiAgICBkMy50aW1lcihmdW5jdGlvbihlbGFwc2VkKSB7CiAgICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaChncm91cHMsIGZ1bmN0aW9uKG5vZGUsIGksIGopIHsKICAgICAgICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7CiAgICAgICAgICBpZiAobG9jay5hY3RpdmUgPiBpZCkgcmV0dXJuIHN0b3AoKTsKICAgICAgICAgIGxvY2suYWN0aXZlID0gaWQ7CiAgICAgICAgICB0d2VlbnMuZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSA9IHZhbHVlLmNhbGwobm9kZSwgZCwgaSkpIHsKICAgICAgICAgICAgICB0d2VlbmVkLnB1c2godmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIGV2ZW50LnN0YXJ0LmNhbGwobm9kZSwgZCwgaSk7CiAgICAgICAgICBpZiAoIXRpY2soZWxhcHNlZCkpIGQzLnRpbWVyKHRpY2ssIDAsIHRpbWUpOwogICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkgewogICAgICAgICAgaWYgKGxvY2suYWN0aXZlICE9PSBpZCkgcmV0dXJuIHN0b3AoKTsKICAgICAgICAgIHZhciB0ID0gKGVsYXBzZWQgLSBkZWxheSkgLyBkdXJhdGlvbiwgZSA9IGVhc2UodCksIG4gPSB0d2VlbmVkLmxlbmd0aDsKICAgICAgICAgIHdoaWxlIChuID4gMCkgewogICAgICAgICAgICB0d2VlbmVkWy0tbl0uY2FsbChub2RlLCBlKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0ID49IDEpIHsKICAgICAgICAgICAgc3RvcCgpOwogICAgICAgICAgICBkM190cmFuc2l0aW9uSWQgPSBpZDsKICAgICAgICAgICAgZXZlbnQuZW5kLmNhbGwobm9kZSwgZCwgaSk7CiAgICAgICAgICAgIGQzX3RyYW5zaXRpb25JZCA9IDA7CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBzdG9wKCkgewogICAgICAgICAgaWYgKCEtLWxvY2suY291bnQpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbl9fOwogICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgfQogICAgICAgIHZhciB0d2VlbmVkID0gW10sIGRlbGF5ID0gbm9kZS5kZWxheSwgZHVyYXRpb24gPSBub2RlLmR1cmF0aW9uLCBsb2NrID0gKG5vZGUgPSBub2RlLm5vZGUpLl9fdHJhbnNpdGlvbl9fIHx8IChub2RlLl9fdHJhbnNpdGlvbl9fID0gewogICAgICAgICAgYWN0aXZlOiAwLAogICAgICAgICAgY291bnQ6IDAKICAgICAgICB9KSwgZCA9IG5vZGUuX19kYXRhX187CiAgICAgICAgKytsb2NrLmNvdW50OwogICAgICAgIGRlbGF5IDw9IGVsYXBzZWQgPyBzdGFydChlbGFwc2VkKSA6IGQzLnRpbWVyKHN0YXJ0LCBkZWxheSwgdGltZSk7CiAgICAgIH0pOwogICAgfSwgMCwgdGltZSk7CiAgICByZXR1cm4gZ3JvdXBzOwogIH0KICBmdW5jdGlvbiBkM190cmFuc2l0aW9uX2VhY2goY2FsbGJhY2spIHsKICAgIHZhciBpZCA9IGQzX3RyYW5zaXRpb25JZCwgZWFzZSA9IGQzX3RyYW5zaXRpb25FYXNlLCBkZWxheSA9IGQzX3RyYW5zaXRpb25EZWxheSwgZHVyYXRpb24gPSBkM190cmFuc2l0aW9uRHVyYXRpb247CiAgICBkM190cmFuc2l0aW9uSWQgPSB0aGlzLmlkOwogICAgZDNfdHJhbnNpdGlvbkVhc2UgPSB0aGlzLmVhc2UoKTsKICAgIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUsIGksIGopIHsKICAgICAgZDNfdHJhbnNpdGlvbkRlbGF5ID0gbm9kZS5kZWxheTsKICAgICAgZDNfdHJhbnNpdGlvbkR1cmF0aW9uID0gbm9kZS5kdXJhdGlvbjsKICAgICAgY2FsbGJhY2suY2FsbChub2RlID0gbm9kZS5ub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKTsKICAgIH0pOwogICAgZDNfdHJhbnNpdGlvbklkID0gaWQ7CiAgICBkM190cmFuc2l0aW9uRWFzZSA9IGVhc2U7CiAgICBkM190cmFuc2l0aW9uRGVsYXkgPSBkZWxheTsKICAgIGQzX3RyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uOwogICAgcmV0dXJuIHRoaXM7CiAgfQogIGZ1bmN0aW9uIGQzX3R3ZWVuTnVsbChkLCBpLCBhKSB7CiAgICByZXR1cm4gYSAhPSAiIiAmJiBkM190d2VlblJlbW92ZTsKICB9CiAgZnVuY3Rpb24gZDNfdHdlZW5CeU5hbWUoYiwgbmFtZSkgewogICAgcmV0dXJuIGQzLnR3ZWVuKGIsIGQzX2ludGVycG9sYXRlQnlOYW1lKG5hbWUpKTsKICB9CiAgZnVuY3Rpb24gZDNfdGltZXJfc3RlcCgpIHsKICAgIHZhciBlbGFwc2VkLCBub3cgPSBEYXRlLm5vdygpLCB0MSA9IGQzX3RpbWVyX3F1ZXVlOwogICAgd2hpbGUgKHQxKSB7CiAgICAgIGVsYXBzZWQgPSBub3cgLSB0MS50aGVuOwogICAgICBpZiAoZWxhcHNlZCA+PSB0MS5kZWxheSkgdDEuZmx1c2ggPSB0MS5jYWxsYmFjayhlbGFwc2VkKTsKICAgICAgdDEgPSB0MS5uZXh0OwogICAgfQogICAgdmFyIGRlbGF5ID0gZDNfdGltZXJfZmx1c2goKSAtIG5vdzsKICAgIGlmIChkZWxheSA+IDI0KSB7CiAgICAgIGlmIChpc0Zpbml0ZShkZWxheSkpIHsKICAgICAgICBjbGVhclRpbWVvdXQoZDNfdGltZXJfdGltZW91dCk7CiAgICAgICAgZDNfdGltZXJfdGltZW91dCA9IHNldFRpbWVvdXQoZDNfdGltZXJfc3RlcCwgZGVsYXkpOwogICAgICB9CiAgICAgIGQzX3RpbWVyX2ludGVydmFsID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGQzX3RpbWVyX2ludGVydmFsID0gMTsKICAgICAgZDNfdGltZXJfZnJhbWUoZDNfdGltZXJfc3RlcCk7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGQzX3RpbWVyX2ZsdXNoKCkgewogICAgdmFyIHQwID0gbnVsbCwgdDEgPSBkM190aW1lcl9xdWV1ZSwgdGhlbiA9IEluZmluaXR5OwogICAgd2hpbGUgKHQxKSB7CiAgICAgIGlmICh0MS5mbHVzaCkgewogICAgICAgIGRlbGV0ZSBkM190aW1lcl9ieUlkW3QxLmNhbGxiYWNrLmlkXTsKICAgICAgICB0MSA9IHQwID8gdDAubmV4dCA9IHQxLm5leHQgOiBkM190aW1lcl9xdWV1ZSA9IHQxLm5leHQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhlbiA9IE1hdGgubWluKHRoZW4sIHQxLnRoZW4gKyB0MS5kZWxheSk7CiAgICAgICAgdDEgPSAodDAgPSB0MSkubmV4dDsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHRoZW47CiAgfQogIGZ1bmN0aW9uIGQzX21vdXNlUG9pbnQoY29udGFpbmVyLCBlKSB7CiAgICB2YXIgc3ZnID0gY29udGFpbmVyLm93bmVyU1ZHRWxlbWVudCB8fCBjb250YWluZXI7CiAgICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7CiAgICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpOwogICAgICBpZiAoZDNfbW91c2VfYnVnNDQwODMgPCAwICYmICh3aW5kb3cuc2Nyb2xsWCB8fCB3aW5kb3cuc2Nyb2xsWSkpIHsKICAgICAgICBzdmcgPSBkMy5zZWxlY3QoZG9jdW1lbnQuYm9keSkuYXBwZW5kKCJzdmciKS5zdHlsZSgicG9zaXRpb24iLCAiYWJzb2x1dGUiKS5zdHlsZSgidG9wIiwgMCkuc3R5bGUoImxlZnQiLCAwKTsKICAgICAgICB2YXIgY3RtID0gc3ZnWzBdWzBdLmdldFNjcmVlbkNUTSgpOwogICAgICAgIGQzX21vdXNlX2J1ZzQ0MDgzID0gIShjdG0uZiB8fCBjdG0uZSk7CiAgICAgICAgc3ZnLnJlbW92ZSgpOwogICAgICB9CiAgICAgIGlmIChkM19tb3VzZV9idWc0NDA4MykgewogICAgICAgIHBvaW50LnggPSBlLnBhZ2VYOwogICAgICAgIHBvaW50LnkgPSBlLnBhZ2VZOwogICAgICB9IGVsc2UgewogICAgICAgIHBvaW50LnggPSBlLmNsaWVudFg7CiAgICAgICAgcG9pbnQueSA9IGUuY2xpZW50WTsKICAgICAgfQogICAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShjb250YWluZXIuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTsKICAgICAgcmV0dXJuIFsgcG9pbnQueCwgcG9pbnQueSBdOwogICAgfQogICAgdmFyIHJlY3QgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICByZXR1cm4gWyBlLmNsaWVudFggLSByZWN0LmxlZnQgLSBjb250YWluZXIuY2xpZW50TGVmdCwgZS5jbGllbnRZIC0gcmVjdC50b3AgLSBjb250YWluZXIuY2xpZW50VG9wIF07CiAgfQogIGZ1bmN0aW9uIGQzX25vb3AoKSB7fQogIGZ1bmN0aW9uIGQzX3NjYWxlRXh0ZW50KGRvbWFpbikgewogICAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLCBzdG9wID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXTsKICAgIHJldHVybiBzdGFydCA8IHN0b3AgPyBbIHN0YXJ0LCBzdG9wIF0gOiBbIHN0b3AsIHN0YXJ0IF07CiAgfQogIGZ1bmN0aW9uIGQzX3NjYWxlUmFuZ2Uoc2NhbGUpIHsKICAgIHJldHVybiBzY2FsZS5yYW5nZUV4dGVudCA\/IHNjYWxlLnJhbmdlRXh0ZW50KCkgOiBkM19zY2FsZUV4dGVudChzY2FsZS5yYW5nZSgpKTsKICB9CiAgZnVuY3Rpb24gZDNfc2NhbGVfbmljZShkb21haW4sIG5pY2UpIHsKICAgIHZhciBpMCA9IDAsIGkxID0gZG9tYWluLmxlbmd0aCAtIDEsIHgwID0gZG9tYWluW2kwXSwgeDEgPSBkb21haW5baTFdLCBkeDsKICAgIGlmICh4MSA8IHgwKSB7CiAgICAgIGR4ID0gaTAsIGkwID0gaTEsIGkxID0gZHg7CiAgICAgIGR4ID0geDAsIHgwID0geDEsIHgxID0gZHg7CiAgICB9CiAgICBpZiAobmljZSA9IG5pY2UoeDEgLSB4MCkpIHsKICAgICAgZG9tYWluW2kwXSA9IG5pY2UuZmxvb3IoeDApOwogICAgICBkb21haW5baTFdID0gbmljZS5jZWlsKHgxKTsKICAgIH0KICAgIHJldHVybiBkb21haW47CiAgfQogIGZ1bmN0aW9uIGQzX3NjYWxlX25pY2VEZWZhdWx0KCkgewogICAgcmV0dXJuIE1hdGg7CiAgfQogIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhcihkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSwgY2xhbXApIHsKICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7CiAgICAgIHZhciBsaW5lYXIgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA\/IGQzX3NjYWxlX3BvbHlsaW5lYXIgOiBkM19zY2FsZV9iaWxpbmVhciwgdW5pbnRlcnBvbGF0ZSA9IGNsYW1wID8gZDNfdW5pbnRlcnBvbGF0ZUNsYW1wIDogZDNfdW5pbnRlcnBvbGF0ZU51bWJlcjsKICAgICAgb3V0cHV0ID0gbGluZWFyKGRvbWFpbiwgcmFuZ2UsIHVuaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKTsKICAgICAgaW5wdXQgPSBsaW5lYXIocmFuZ2UsIGRvbWFpbiwgdW5pbnRlcnBvbGF0ZSwgZDMuaW50ZXJwb2xhdGUpOwogICAgICByZXR1cm4gc2NhbGU7CiAgICB9CiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7CiAgICAgIHJldHVybiBvdXRwdXQoeCk7CiAgICB9CiAgICB2YXIgb3V0cHV0LCBpbnB1dDsKICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHsKICAgICAgcmV0dXJuIGlucHV0KHkpOwogICAgfTsKICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluOwogICAgICBkb21haW4gPSB4Lm1hcChOdW1iZXIpOwogICAgICByZXR1cm4gcmVzY2FsZSgpOwogICAgfTsKICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTsKICAgICAgcmFuZ2UgPSB4OwogICAgICByZXR1cm4gcmVzY2FsZSgpOwogICAgfTsKICAgIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbih4KSB7CiAgICAgIHJldHVybiBzY2FsZS5yYW5nZSh4KS5pbnRlcnBvbGF0ZShkMy5pbnRlcnBvbGF0ZVJvdW5kKTsKICAgIH07CiAgICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2xhbXA7CiAgICAgIGNsYW1wID0geDsKICAgICAgcmV0dXJuIHJlc2NhbGUoKTsKICAgIH07CiAgICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGU7CiAgICAgIGludGVycG9sYXRlID0geDsKICAgICAgcmV0dXJuIHJlc2NhbGUoKTsKICAgIH07CiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKG0pIHsKICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSk7CiAgICB9OwogICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKG0pIHsKICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tGb3JtYXQoZG9tYWluLCBtKTsKICAgIH07CiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oKSB7CiAgICAgIGQzX3NjYWxlX25pY2UoZG9tYWluLCBkM19zY2FsZV9saW5lYXJOaWNlKTsKICAgICAgcmV0dXJuIHJlc2NhbGUoKTsKICAgIH07CiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXIoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUsIGNsYW1wKTsKICAgIH07CiAgICByZXR1cm4gcmVzY2FsZSgpOwogIH0KICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJSZWJpbmQoc2NhbGUsIGxpbmVhcikgewogICAgcmV0dXJuIGQzLnJlYmluZChzY2FsZSwgbGluZWFyLCAicmFuZ2UiLCAicmFuZ2VSb3VuZCIsICJpbnRlcnBvbGF0ZSIsICJjbGFtcCIpOwogIH0KICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJOaWNlKGR4KSB7CiAgICBkeCA9IE1hdGgucG93KDEwLCBNYXRoLnJvdW5kKE1hdGgubG9nKGR4KSAvIE1hdGguTE4xMCkgLSAxKTsKICAgIHJldHVybiBkeCAmJiB7CiAgICAgIGZsb29yOiBmdW5jdGlvbih4KSB7CiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoeCAvIGR4KSAqIGR4OwogICAgICB9LAogICAgICBjZWlsOiBmdW5jdGlvbih4KSB7CiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh4IC8gZHgpICogZHg7CiAgICAgIH0KICAgIH07CiAgfQogIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pIHsKICAgIHZhciBleHRlbnQgPSBkM19zY2FsZUV4dGVudChkb21haW4pLCBzcGFuID0gZXh0ZW50WzFdIC0gZXh0ZW50WzBdLCBzdGVwID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3BhbiAvIG0pIC8gTWF0aC5MTjEwKSksIGVyciA9IG0gLyBzcGFuICogc3RlcDsKICAgIGlmIChlcnIgPD0gLjE1KSBzdGVwICo9IDEwOyBlbHNlIGlmIChlcnIgPD0gLjM1KSBzdGVwICo9IDU7IGVsc2UgaWYgKGVyciA8PSAuNzUpIHN0ZXAgKj0gMjsKICAgIGV4dGVudFswXSA9IE1hdGguY2VpbChleHRlbnRbMF0gLyBzdGVwKSAqIHN0ZXA7CiAgICBleHRlbnRbMV0gPSBNYXRoLmZsb29yKGV4dGVudFsxXSAvIHN0ZXApICogc3RlcCArIHN0ZXAgKiAuNTsKICAgIGV4dGVudFsyXSA9IHN0ZXA7CiAgICByZXR1cm4gZXh0ZW50OwogIH0KICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJUaWNrcyhkb21haW4sIG0pIHsKICAgIHJldHVybiBkMy5yYW5nZS5hcHBseShkMywgZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlKGRvbWFpbiwgbSkpOwogIH0KICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJUaWNrRm9ybWF0KGRvbWFpbiwgbSkgewogICAgcmV0dXJuIGQzLmZvcm1hdCgiLC4iICsgTWF0aC5tYXgoMCwgLU1hdGguZmxvb3IoTWF0aC5sb2coZDNfc2NhbGVfbGluZWFyVGlja1JhbmdlKGRvbWFpbiwgbSlbMl0pIC8gTWF0aC5MTjEwICsgLjAxKSkgKyAiZiIpOwogIH0KICBmdW5jdGlvbiBkM19zY2FsZV9iaWxpbmVhcihkb21haW4sIHJhbmdlLCB1bmludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSkgewogICAgdmFyIHUgPSB1bmludGVycG9sYXRlKGRvbWFpblswXSwgZG9tYWluWzFdKSwgaSA9IGludGVycG9sYXRlKHJhbmdlWzBdLCByYW5nZVsxXSk7CiAgICByZXR1cm4gZnVuY3Rpb24oeCkgewogICAgICByZXR1cm4gaSh1KHgpKTsKICAgIH07CiAgfQogIGZ1bmN0aW9uIGQzX3NjYWxlX3BvbHlsaW5lYXIoZG9tYWluLCByYW5nZSwgdW5pbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpIHsKICAgIHZhciB1ID0gW10sIGkgPSBbXSwgaiA9IDAsIGsgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMTsKICAgIGlmIChkb21haW5ba10gPCBkb21haW5bMF0pIHsKICAgICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpOwogICAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpOwogICAgfQogICAgd2hpbGUgKCsraiA8PSBrKSB7CiAgICAgIHUucHVzaCh1bmludGVycG9sYXRlKGRvbWFpbltqIC0gMV0sIGRvbWFpbltqXSkpOwogICAgICBpLnB1c2goaW50ZXJwb2xhdGUocmFuZ2VbaiAtIDFdLCByYW5nZVtqXSkpOwogICAgfQogICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsKICAgICAgdmFyIGogPSBkMy5iaXNlY3QoZG9tYWluLCB4LCAxLCBrKSAtIDE7CiAgICAgIHJldHVybiBpW2pdKHVbal0oeCkpOwogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfc2NhbGVfbG9nKGxpbmVhciwgbG9nKSB7CiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7CiAgICAgIHJldHVybiBsaW5lYXIobG9nKHgpKTsKICAgIH0KICAgIHZhciBwb3cgPSBsb2cucG93OwogICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeCkgewogICAgICByZXR1cm4gcG93KGxpbmVhci5pbnZlcnQoeCkpOwogICAgfTsKICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbGluZWFyLmRvbWFpbigpLm1hcChwb3cpOwogICAgICBsb2cgPSB4WzBdIDwgMCA\/IGQzX3NjYWxlX2xvZ24gOiBkM19zY2FsZV9sb2dwOwogICAgICBwb3cgPSBsb2cucG93OwogICAgICBsaW5lYXIuZG9tYWluKHgubWFwKGxvZykpOwogICAgICByZXR1cm4gc2NhbGU7CiAgICB9OwogICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKCkgewogICAgICBsaW5lYXIuZG9tYWluKGQzX3NjYWxlX25pY2UobGluZWFyLmRvbWFpbigpLCBkM19zY2FsZV9uaWNlRGVmYXVsdCkpOwogICAgICByZXR1cm4gc2NhbGU7CiAgICB9OwogICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KGxpbmVhci5kb21haW4oKSksIHRpY2tzID0gW107CiAgICAgIGlmIChleHRlbnQuZXZlcnkoaXNGaW5pdGUpKSB7CiAgICAgICAgdmFyIGkgPSBNYXRoLmZsb29yKGV4dGVudFswXSksIGogPSBNYXRoLmNlaWwoZXh0ZW50WzFdKSwgdSA9IHBvdyhleHRlbnRbMF0pLCB2ID0gcG93KGV4dGVudFsxXSk7CiAgICAgICAgaWYgKGxvZyA9PT0gZDNfc2NhbGVfbG9nbikgewogICAgICAgICAgdGlja3MucHVzaChwb3coaSkpOwogICAgICAgICAgZm9yICg7IGkrKyA8IGo7ICkgZm9yICh2YXIgayA9IDk7IGsgPiAwOyBrLS0pIHRpY2tzLnB1c2gocG93KGkpICogayk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGZvciAoOyBpIDwgajsgaSsrKSBmb3IgKHZhciBrID0gMTsgayA8IDEwOyBrKyspIHRpY2tzLnB1c2gocG93KGkpICogayk7CiAgICAgICAgICB0aWNrcy5wdXNoKHBvdyhpKSk7CiAgICAgICAgfQogICAgICAgIGZvciAoaSA9IDA7IHRpY2tzW2ldIDwgdTsgaSsrKSB7fQogICAgICAgIGZvciAoaiA9IHRpY2tzLmxlbmd0aDsgdGlja3NbaiAtIDFdID4gdjsgai0tKSB7fQogICAgICAgIHRpY2tzID0gdGlja3Muc2xpY2UoaSwgaik7CiAgICAgIH0KICAgICAgcmV0dXJuIHRpY2tzOwogICAgfTsKICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihuLCBmb3JtYXQpIHsKICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBmb3JtYXQgPSBkM19zY2FsZV9sb2dGb3JtYXQ7CiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIGZvcm1hdDsKICAgICAgdmFyIGsgPSBNYXRoLm1heCguMSwgbiAvIHNjYWxlLnRpY2tzKCkubGVuZ3RoKSwgZiA9IGxvZyA9PT0gZDNfc2NhbGVfbG9nbiA\/IChlID0gLTFlLTEyLCBNYXRoLmZsb29yKSA6IChlID0gMWUtMTIsIE1hdGguY2VpbCksIGU7CiAgICAgIHJldHVybiBmdW5jdGlvbihkKSB7CiAgICAgICAgcmV0dXJuIGQgLyBwb3coZihsb2coZCkgKyBlKSkgPD0gayA\\/IHNlZ21lbnRzLmpvaW4oIiIpIDogbnVsbDsKICAgIH0KICAgIHZhciB4ID0gZDNfc3ZnX2xpbmVYLCB5ID0gZDNfc3ZnX2xpbmVZLCBkZWZpbmVkID0gZDNfdHJ1ZSwgaW50ZXJwb2xhdGUgPSBkM19zdmdfbGluZUxpbmVhciwgaW50ZXJwb2xhdGVLZXkgPSBpbnRlcnBvbGF0ZS5rZXksIHRlbnNpb24gPSAuNzsKICAgIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDsKICAgICAgeCA9IF87CiAgICAgIHJldHVybiBsaW5lOwogICAgfTsKICAgIGxpbmUueSA9IGZ1bmN0aW9uKF8pIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTsKICAgICAgeSA9IF87CiAgICAgIHJldHVybiBsaW5lOwogICAgfTsKICAgIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZGVmaW5lZDsKICAgICAgZGVmaW5lZCA9IF87CiAgICAgIHJldHVybiBsaW5lOwogICAgfTsKICAgIGxpbmUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGludGVycG9sYXRlS2V5OwogICAgICBpZiAodHlwZW9mIF8gPT09ICJmdW5jdGlvbiIpIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUgPSBfOyBlbHNlIGludGVycG9sYXRlS2V5ID0gKGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVJbnRlcnBvbGF0b3JzLmdldChfKSB8fCBkM19zdmdfbGluZUxpbmVhcikua2V5OwogICAgICByZXR1cm4gbGluZTsKICAgIH07CiAgICBsaW5lLnRlbnNpb24gPSBmdW5jdGlvbihfKSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRlbnNpb247CiAgICAgIHRlbnNpb24gPSBfOwogICAgICByZXR1cm4gbGluZTsKICAgIH07CiAgICByZXR1cm4gbGluZTsKICB9CiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVYKGQpIHsKICAgIHJldHVybiBkWzBdOwogIH0KICBmdW5jdGlvbiBkM19zdmdfbGluZVkoZCkgewogICAgcmV0dXJuIGRbMV07CiAgfQogIGZ1bmN0aW9uIGQzX3N2Z19saW5lTGluZWFyKHBvaW50cykgewogICAgcmV0dXJuIHBvaW50cy5qb2luKCJMIik7CiAgfQogIGZ1bmN0aW9uIGQzX3N2Z19saW5lTGluZWFyQ2xvc2VkKHBvaW50cykgewogICAgcmV0dXJuIGQzX3N2Z19saW5lTGluZWFyKHBvaW50cykgKyAiWiI7CiAgfQogIGZ1bmN0aW9uIGQzX3N2Z19saW5lU3RlcEJlZm9yZShwb2ludHMpIHsKICAgIHZhciBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGgsIHAgPSBwb2ludHNbMF0sIHBhdGggPSBbIHBbMF0sICIsIiwgcFsxXSBdOwogICAgd2hpbGUgKCsraSA8IG4pIHBhdGgucHVzaCgiViIsIChwID0gcG9pbnRzW2ldKVsxXSwgIkgiLCBwWzBdKTsKICAgIHJldHVybiBwYXRoLmpvaW4oIiIpOwogIH0KICBmdW5jdGlvbiBkM19zdmdfbGluZVN0ZXBBZnRlcihwb2ludHMpIHsKICAgIHZhciBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGgsIHAgPSBwb2ludHNbMF0sIHBhdGggPSBbIHBbMF0sICIsIiwgcFsxXSBdOwogICAgd2hpbGUgKCsraSA8IG4pIHBhdGgucHVzaCgiSCIsIChwID0gcG9pbnRzW2ldKVswXSwgIlYiLCBwWzFdKTsKICAgIHJldHVybiBwYXRoLmpvaW4oIiIpOwogIH0KICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsT3Blbihwb2ludHMsIHRlbnNpb24pIHsKICAgIHJldHVybiBwb2ludHMubGVuZ3RoIDwgNCA\/IGQzX3N2Z19saW5lTGluZWFyKHBvaW50cykgOiBwb2ludHNbMV0gKyBkM19zdmdfbGluZUhlcm1pdGUocG9pbnRzLnNsaWNlKDEsIHBvaW50cy5sZW5ndGggLSAxKSwgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKHBvaW50cywgdGVuc2lvbikpOwogIH0KICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsQ2xvc2VkKHBvaW50cywgdGVuc2lvbikgewogICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPCAzID8gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKSA6IHBvaW50c1swXSArIGQzX3N2Z19saW5lSGVybWl0ZSgocG9pbnRzLnB1c2gocG9pbnRzWzBdKSwgcG9pbnRzKSwgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKFsgcG9pbnRzW3BvaW50cy5sZW5ndGggLSAyXSBdLmNvbmNhdChwb2ludHMsIFsgcG9pbnRzWzFdIF0pLCB0ZW5zaW9uKSk7CiAgfQogIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWwocG9pbnRzLCB0ZW5zaW9uLCBjbG9zZWQpIHsKICAgIHJldHVybiBwb2ludHMubGVuZ3RoIDwgMyA\/IGQzX3N2Z19saW5lTGluZWFyKHBvaW50cykgOiBwb2ludHNbMF0gKyBkM19zdmdfbGluZUhlcm1pdGUocG9pbnRzLCBkM19zdmdfbGluZUNhcmRpbmFsVGFuZ2VudHMocG9pbnRzLCB0ZW5zaW9uKSk7CiAgfQogIGZ1bmN0aW9uIGQzX3N2Z19saW5lSGVybWl0ZShwb2ludHMsIHRhbmdlbnRzKSB7CiAgICBpZiAodGFuZ2VudHMubGVuZ3RoIDwgMSB8fCBwb2ludHMubGVuZ3RoICE9IHRhbmdlbnRzLmxlbmd0aCAmJiBwb2ludHMubGVuZ3RoICE9IHRhbmdlbnRzLmxlbmd0aCArIDIpIHsKICAgICAgcmV0dXJuIGQzX3N2Z19saW5lTGluZWFyKHBvaW50cyk7CiAgICB9CiAgICB2YXIgcXVhZCA9IHBvaW50cy5sZW5ndGggIT0gdGFuZ2VudHMubGVuZ3RoLCBwYXRoID0gIiIsIHAwID0gcG9pbnRzWzBdLCBwID0gcG9pbnRzWzFdLCB0MCA9IHRhbmdlbnRzWzBdLCB0ID0gdDAsIHBpID0gMTsKICAgIGlmIChxdWFkKSB7CiAgICAgIHBhdGggKz0gIlEiICsgKHBbMF0gLSB0MFswXSAqIDIgLyAzKSArICIsIiArIChwWzFdIC0gdDBbMV0gKiAyIC8gMykgKyAiLCIgKyBwWzBdICsgIiwiICsgcFsxXTsKICAgICAgcDAgPSBwb2ludHNbMV07CiAgICAgIHBpID0gMjsKICAgIH0KICAgIGlmICh0YW5nZW50cy5sZW5ndGggPiAxKSB7CiAgICAgIHQgPSB0YW5nZW50c1sxXTsKICAgICAgcCA9IHBvaW50c1twaV07CiAgICAgIHBpKys7CiAgICAgIHBhdGggKz0gIkMiICsgKHAwWzBdICsgdDBbMF0pICsgIiwiICsgKHAwWzFdICsgdDBbMV0pICsgIiwiICsgKHBbMF0gLSB0WzBdKSArICIsIiArIChwWzFdIC0gdFsxXSkgKyAiLCIgKyBwWzBdICsgIiwiICsgcFsxXTsKICAgICAgZm9yICh2YXIgaSA9IDI7IGkgPCB0YW5nZW50cy5sZW5ndGg7IGkrKywgcGkrKykgewogICAgICAgIHAgPSBwb2ludHNbcGldOwogICAgICAgIHQgPSB0YW5nZW50c1tpXTsKICAgICAgICBwYXRoICs9ICJTIiArIChwWzBdIC0gdFswXSkgKyAiLCIgKyAocFsxXSAtIHRbMV0pICsgIiwiICsgcFswXSArICIsIiArIHBbMV07CiAgICAgIH0KICAgIH0KICAgIGlmIChxdWFkKSB7CiAgICAgIHZhciBscCA9IHBvaW50c1twaV07CiAgICAgIHBhdGggKz0gIlEiICsgKHBbMF0gKyB0WzBdICogMiAvIDMpICsgIiwiICsgKHBbMV0gKyB0WzFdICogMiAvIDMpICsgIiwiICsgbHBbMF0gKyAiLCIgKyBscFsxXTsKICAgIH0KICAgIHJldHVybiBwYXRoOwogIH0KICBmdW5jdGlvbiBkM19zdmdfbGluZUNhcmRpbmFsVGFuZ2VudHMocG9pbnRzLCB0ZW5zaW9uKSB7CiAgICB2YXIgdGFuZ2VudHMgPSBbXSwgYSA9ICgxIC0gdGVuc2lvbikgLyAyLCBwMCwgcDEgPSBwb2ludHNbMF0sIHAyID0gcG9pbnRzWzFdLCBpID0gMSwgbiA9IHBvaW50cy5sZW5ndGg7CiAgICB3aGlsZSAoKytpIDwgbikgewogICAgICBwMCA9IHAxOwogICAgICBwMSA9IHAyOwogICAgICBwMiA9IHBvaW50c1tpXTsKICAgICAgdGFuZ2VudHMucHVzaChbIGEgKiAocDJbMF0gLSBwMFswXSksIGEgKiAocDJbMV0gLSBwMFsxXSkgXSk7CiAgICB9CiAgICByZXR1cm4gdGFuZ2VudHM7CiAgfQogIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXMocG9pbnRzKSB7CiAgICBpZiAocG9pbnRzLmxlbmd0aCA8IDMpIHJldHVybiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpOwogICAgdmFyIGkgPSAxLCBuID0gcG9pbnRzLmxlbmd0aCwgcGkgPSBwb2ludHNbMF0sIHgwID0gcGlbMF0sIHkwID0gcGlbMV0sIHB4ID0gWyB4MCwgeDAsIHgwLCAocGkgPSBwb2ludHNbMV0pWzBdIF0sIHB5ID0gWyB5MCwgeTAsIHkwLCBwaVsxXSBdLCBwYXRoID0gWyB4MCwgIiwiLCB5MCBdOwogICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCBweCwgcHkpOwogICAgd2hpbGUgKCsraSA8IG4pIHsKICAgICAgcGkgPSBwb2ludHNbaV07CiAgICAgIHB4LnNoaWZ0KCk7CiAgICAgIHB4LnB1c2gocGlbMF0pOwogICAgICBweS5zaGlmdCgpOwogICAgICBweS5wdXNoKHBpWzFdKTsKICAgICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCBweCwgcHkpOwogICAgfQogICAgaSA9IC0xOwogICAgd2hpbGUgKCsraSA8IDIpIHsKICAgICAgcHguc2hpZnQoKTsKICAgICAgcHgucHVzaChwaVswXSk7CiAgICAgIHB5LnNoaWZ0KCk7CiAgICAgIHB5LnB1c2gocGlbMV0pOwogICAgICBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHB4LCBweSk7CiAgICB9CiAgICByZXR1cm4gcGF0aC5qb2luKCIiKTsKICB9CiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCYXNpc09wZW4ocG9pbnRzKSB7CiAgICBpZiAocG9pbnRzLmxlbmd0aCA8IDQpIHJldHVybiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpOwogICAgdmFyIHBhdGggPSBbXSwgaSA9IC0xLCBuID0gcG9pbnRzLmxlbmd0aCwgcGksIHB4ID0gWyAwIF0sIHB5ID0gWyAwIF07CiAgICB3aGlsZSAoKytpIDwgMykgewogICAgICBwaSA9IHBvaW50c1tpXTsKICAgICAgcHgucHVzaChwaVswXSk7CiAgICAgIHB5LnB1c2gocGlbMV0pOwogICAgfQogICAgcGF0aC5wdXNoKGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHgpICsgIiwiICsgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweSkpOwogICAgLS1pOwogICAgd2hpbGUgKCsraSA8IG4pIHsKICAgICAgcGkgPSBwb2ludHNbaV07CiAgICAgIHB4LnNoaWZ0KCk7CiAgICAgIHB4LnB1c2gocGlbMF0pOwogICAgICBweS5zaGlmdCgpOwogICAgICBweS5wdXNoKHBpWzFdKTsKICAgICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCBweCwgcHkpOwogICAgfQogICAgcmV0dXJuIHBhdGguam9pbigiIik7CiAgfQogIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXNDbG9zZWQocG9pbnRzKSB7CiAgICB2YXIgcGF0aCwgaSA9IC0xLCBuID0gcG9pbnRzLmxlbmd0aCwgbSA9IG4gKyA0LCBwaSwgcHggPSBbXSwgcHkgPSBbXTsKICAgIHdoaWxlICgrK2kgPCA0KSB7CiAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTsKICAgICAgcHgucHVzaChwaVswXSk7CiAgICAgIHB5LnB1c2gocGlbMV0pOwogICAgfQogICAgcGF0aCA9IFsgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweCksICIsIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweSkgXTsKICAgIC0taTsKICAgIHdoaWxlICgrK2kgPCBtKSB7CiAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTsKICAgICAgcHguc2hpZnQoKTsKICAgICAgcHgucHVzaChwaVswXSk7CiAgICAgIHB5LnNoaWZ0KCk7CiAgICAgIHB5LnB1c2gocGlbMV0pOwogICAgICBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHB4LCBweSk7CiAgICB9CiAgICByZXR1cm4gcGF0aC5qb2luKCIiKTsKICB9CiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCdW5kbGUocG9pbnRzLCB0ZW5zaW9uKSB7CiAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGggLSAxOwogICAgaWYgKG4pIHsKICAgICAgdmFyIHgwID0gcG9pbnRzWzBdWzBdLCB5MCA9IHBvaW50c1swXVsxXSwgZHggPSBwb2ludHNbbl1bMF0gLSB4MCwgZHkgPSBwb2ludHNbbl1bMV0gLSB5MCwgaSA9IC0xLCBwLCB0OwogICAgICB3aGlsZSAoKytpIDw9IG4pIHsKICAgICAgICBwID0gcG9pbnRzW2ldOwogICAgICAgIHQgPSBpIC8gbjsKICAgICAgICBwWzBdID0gdGVuc2lvbiAqIHBbMF0gKyAoMSAtIHRlbnNpb24pICogKHgwICsgdCAqIGR4KTsKICAgICAgICBwWzFdID0gdGVuc2lvbiAqIHBbMV0gKyAoMSAtIHRlbnNpb24pICogKHkwICsgdCAqIGR5KTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGQzX3N2Z19saW5lQmFzaXMocG9pbnRzKTsKICB9CiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVEb3Q0KGEsIGIpIHsKICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl0gKyBhWzNdICogYlszXTsKICB9CiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCB4LCB5KSB7CiAgICBwYXRoLnB1c2goIkMiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjEsIHgpLCAiLCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMSwgeSksICIsIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIyLCB4KSwgIiwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjIsIHkpLCAiLCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgeCksICIsIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCB5KSk7CiAgfQogIGZ1bmN0aW9uIGQzX3N2Z19saW5lU2xvcGUocDAsIHAxKSB7CiAgICByZXR1cm4gKHAxWzFdIC0gcDBbMV0pIC8gKHAxWzBdIC0gcDBbMF0pOwogIH0KICBmdW5jdGlvbiBkM19zdmdfbGluZUZpbml0ZURpZmZlcmVuY2VzKHBvaW50cykgewogICAgdmFyIGkgPSAwLCBqID0gcG9pbnRzLmxlbmd0aCAtIDEsIG0gPSBbXSwgcDAgPSBwb2ludHNbMF0sIHAxID0gcG9pbnRzWzFdLCBkID0gbVswXSA9IGQzX3N2Z19saW5lU2xvcGUocDAsIHAxKTsKICAgIHdoaWxlICgrK2kgPCBqKSB7CiAgICAgIG1baV0gPSAoZCArIChkID0gZDNfc3ZnX2xpbmVTbG9wZShwMCA9IHAxLCBwMSA9IHBvaW50c1tpICsgMV0pKSkgLyAyOwogICAgfQogICAgbVtpXSA9IGQ7CiAgICByZXR1cm4gbTsKICB9CiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVNb25vdG9uZVRhbmdlbnRzKHBvaW50cykgewogICAgdmFyIHRhbmdlbnRzID0gW10sIGQsIGEsIGIsIHMsIG0gPSBkM19zdmdfbGluZUZpbml0ZURpZmZlcmVuY2VzKHBvaW50cyksIGkgPSAtMSwgaiA9IHBvaW50cy5sZW5ndGggLSAxOwogICAgd2hpbGUgKCsraSA8IGopIHsKICAgICAgZCA9IGQzX3N2Z19saW5lU2xvcGUocG9pbnRzW2ldLCBwb2ludHNbaSArIDFdKTsKICAgICAgaWYgKE1hdGguYWJzKGQpIDwgMWUtNikgewogICAgICAgIG1baV0gPSBtW2kgKyAxXSA9IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYSA9IG1baV0gLyBkOwogICAgICAgIGIgPSBtW2kgKyAxXSAvIGQ7CiAgICAgICAgcyA9IGEgKiBhICsgYiAqIGI7CiAgICAgICAgaWYgKHMgPiA5KSB7CiAgICAgICAgICBzID0gZCAqIDMgLyBNYXRoLnNxcnQocyk7CiAgICAgICAgICBtW2ldID0gcyAqIGE7CiAgICAgICAgICBtW2kgKyAxXSA9IHMgKiBiOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaSA9IC0xOwogICAgd2hpbGUgKCsraSA8PSBqKSB7CiAgICAgIHMgPSAocG9pbnRzW01hdGgubWluKGosIGkgKyAxKV1bMF0gLSBwb2ludHNbTWF0aC5tYXgoMCwgaSAtIDEpXVswXSkgLyAoNiAqICgxICsgbVtpXSAqIG1baV0pKTsKICAgICAgdGFuZ2VudHMucHVzaChbIHMgfHwgMCwgbVtpXSAqIHMgfHwgMCBdKTsKICAgIH0KICAgIHJldHVybiB0YW5nZW50czsKICB9CiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVNb25vdG9uZShwb2ludHMpIHsKICAgIHJldHVybiBwb2ludHMubGVuZ3RoIDwgMyA\\\/IC0xIDogYS55ID4gYi55ID8gMSA6IGEueCA8IGIueCA\/IC0xIDogYS54ID4gYi54ID8gMSA6IDA7CiAgICAgIH0pLAogICAgICBib3R0b21TaXRlOiBudWxsCiAgICB9OwogICAgdmFyIEVkZ2VMaXN0ID0gewogICAgICBsaXN0OiBbXSwKICAgICAgbGVmdEVuZDogbnVsbCwKICAgICAgcmlnaHRFbmQ6IG51bGwsCiAgICAgIGluaXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIEVkZ2VMaXN0LmxlZnRFbmQgPSBFZGdlTGlzdC5jcmVhdGVIYWxmRWRnZShudWxsLCAibCIpOwogICAgICAgIEVkZ2VMaXN0LnJpZ2h0RW5kID0gRWRnZUxpc3QuY3JlYXRlSGFsZkVkZ2UobnVsbCwgImwiKTsKICAgICAgICBFZGdlTGlzdC5sZWZ0RW5kLnIgPSBFZGdlTGlzdC5yaWdodEVuZDsKICAgICAgICBFZGdlTGlzdC5yaWdodEVuZC5sID0gRWRnZUxpc3QubGVmdEVuZDsKICAgICAgICBFZGdlTGlzdC5saXN0LnVuc2hpZnQoRWRnZUxpc3QubGVmdEVuZCwgRWRnZUxpc3QucmlnaHRFbmQpOwogICAgICB9LAogICAgICBjcmVhdGVIYWxmRWRnZTogZnVuY3Rpb24oZWRnZSwgc2lkZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBlZGdlOiBlZGdlLAogICAgICAgICAgc2lkZTogc2lkZSwKICAgICAgICAgIHZlcnRleDogbnVsbCwKICAgICAgICAgIGw6IG51bGwsCiAgICAgICAgICByOiBudWxsCiAgICAgICAgfTsKICAgICAgfSwKICAgICAgaW5zZXJ0OiBmdW5jdGlvbihsYiwgaGUpIHsKICAgICAgICBoZS5sID0gbGI7CiAgICAgICAgaGUuciA9IGxiLnI7CiAgICAgICAgbGIuci5sID0gaGU7CiAgICAgICAgbGIuciA9IGhlOwogICAgICB9LAogICAgICBsZWZ0Qm91bmQ6IGZ1bmN0aW9uKHApIHsKICAgICAgICB2YXIgaGUgPSBFZGdlTGlzdC5sZWZ0RW5kOwogICAgICAgIGRvIHsKICAgICAgICAgIGhlID0gaGUucjsKICAgICAgICB9IHdoaWxlIChoZSAhPSBFZGdlTGlzdC5yaWdodEVuZCAmJiBHZW9tLnJpZ2h0T2YoaGUsIHApKTsKICAgICAgICBoZSA9IGhlLmw7CiAgICAgICAgcmV0dXJuIGhlOwogICAgICB9LAogICAgICBkZWw6IGZ1bmN0aW9uKGhlKSB7CiAgICAgICAgaGUubC5yID0gaGUucjsKICAgICAgICBoZS5yLmwgPSBoZS5sOwogICAgICAgIGhlLmVkZ2UgPSBudWxsOwogICAgICB9LAogICAgICByaWdodDogZnVuY3Rpb24oaGUpIHsKICAgICAgICByZXR1cm4gaGUucjsKICAgICAgfSwKICAgICAgbGVmdDogZnVuY3Rpb24oaGUpIHsKICAgICAgICByZXR1cm4gaGUubDsKICAgICAgfSwKICAgICAgbGVmdFJlZ2lvbjogZnVuY3Rpb24oaGUpIHsKICAgICAgICByZXR1cm4gaGUuZWRnZSA9PSBudWxsID8gU2l0ZXMuYm90dG9tU2l0ZSA6IGhlLmVkZ2UucmVnaW9uW2hlLnNpZGVdOwogICAgICB9LAogICAgICByaWdodFJlZ2lvbjogZnVuY3Rpb24oaGUpIHsKICAgICAgICByZXR1cm4gaGUuZWRnZSA9PSBudWxsID8gU2l0ZXMuYm90dG9tU2l0ZSA6IGhlLmVkZ2UucmVnaW9uW2QzX3Zvcm9ub2lfb3Bwb3NpdGVbaGUuc2lkZV1dOwogICAgICB9CiAgICB9OwogICAgdmFyIEdlb20gPSB7CiAgICAgIGJpc2VjdDogZnVuY3Rpb24oczEsIHMyKSB7CiAgICAgICAgdmFyIG5ld0VkZ2UgPSB7CiAgICAgICAgICByZWdpb246IHsKICAgICAgICAgICAgbDogczEsCiAgICAgICAgICAgIHI6IHMyCiAgICAgICAgICB9LAogICAgICAgICAgZXA6IHsKICAgICAgICAgICAgbDogbnVsbCwKICAgICAgICAgICAgcjogbnVsbAogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgdmFyIGR4ID0gczIueCAtIHMxLngsIGR5ID0gczIueSAtIHMxLnksIGFkeCA9IGR4ID4gMCA\/IGR4IDogLWR4LCBhZHkgPSBkeSA+IDAgPyBkeSA6IC1keTsKICAgICAgICBuZXdFZGdlLmMgPSBzMS54ICogZHggKyBzMS55ICogZHkgKyAoZHggKiBkeCArIGR5ICogZHkpICogLjU7CiAgICAgICAgaWYgKGFkeCA+IGFkeSkgewogICAgICAgICAgbmV3RWRnZS5hID0gMTsKICAgICAgICAgIG5ld0VkZ2UuYiA9IGR5IC8gZHg7CiAgICAgICAgICBuZXdFZGdlLmMgLz0gZHg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG5ld0VkZ2UuYiA9IDE7CiAgICAgICAgICBuZXdFZGdlLmEgPSBkeCAvIGR5OwogICAgICAgICAgbmV3RWRnZS5jIC89IGR5OwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3RWRnZTsKICAgICAgfSwKICAgICAgaW50ZXJzZWN0OiBmdW5jdGlvbihlbDEsIGVsMikgewogICAgICAgIHZhciBlMSA9IGVsMS5lZGdlLCBlMiA9IGVsMi5lZGdlOwogICAgICAgIGlmICghZTEgfHwgIWUyIHx8IGUxLnJlZ2lvbi5yID09IGUyLnJlZ2lvbi5yKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgdmFyIGQgPSBlMS5hICogZTIuYiAtIGUxLmIgKiBlMi5hOwogICAgICAgIGlmIChNYXRoLmFicyhkKSA8IDFlLTEwKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgdmFyIHhpbnQgPSAoZTEuYyAqIGUyLmIgLSBlMi5jICogZTEuYikgLyBkLCB5aW50ID0gKGUyLmMgKiBlMS5hIC0gZTEuYyAqIGUyLmEpIC8gZCwgZTFyID0gZTEucmVnaW9uLnIsIGUyciA9IGUyLnJlZ2lvbi5yLCBlbCwgZTsKICAgICAgICBpZiAoZTFyLnkgPCBlMnIueSB8fCBlMXIueSA9PSBlMnIueSAmJiBlMXIueCA8IGUyci54KSB7CiAgICAgICAgICBlbCA9IGVsMTsKICAgICAgICAgIGUgPSBlMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZWwgPSBlbDI7CiAgICAgICAgICBlID0gZTI7CiAgICAgICAgfQogICAgICAgIHZhciByaWdodE9mU2l0ZSA9IHhpbnQgPj0gZS5yZWdpb24uci54OwogICAgICAgIGlmIChyaWdodE9mU2l0ZSAmJiBlbC5zaWRlID09PSAibCIgfHwgIXJpZ2h0T2ZTaXRlICYmIGVsLnNpZGUgPT09ICJyIikgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIHJldHVybiB7CiAgICAgICAgICB4OiB4aW50LAogICAgICAgICAgeTogeWludAogICAgICAgIH07CiAgICAgIH0sCiAgICAgIHJpZ2h0T2Y6IGZ1bmN0aW9uKGhlLCBwKSB7CiAgICAgICAgdmFyIGUgPSBoZS5lZGdlLCB0b3BzaXRlID0gZS5yZWdpb24uciwgcmlnaHRPZlNpdGUgPSBwLnggPiB0b3BzaXRlLng7CiAgICAgICAgaWYgKHJpZ2h0T2ZTaXRlICYmIGhlLnNpZGUgPT09ICJsIikgewogICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgfQogICAgICAgIGlmICghcmlnaHRPZlNpdGUgJiYgaGUuc2lkZSA9PT0gInIiKSB7CiAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgaWYgKGUuYSA9PT0gMSkgewogICAgICAgICAgdmFyIGR5cCA9IHAueSAtIHRvcHNpdGUueSwgZHhwID0gcC54IC0gdG9wc2l0ZS54LCBmYXN0ID0gMCwgYWJvdmUgPSAwOwogICAgICAgICAgaWYgKCFyaWdodE9mU2l0ZSAmJiBlLmIgPCAwIHx8IHJpZ2h0T2ZTaXRlICYmIGUuYiA+PSAwKSB7CiAgICAgICAgICAgIGFib3ZlID0gZmFzdCA9IGR5cCA+PSBlLmIgKiBkeHA7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhYm92ZSA9IHAueCArIHAueSAqIGUuYiA+IGUuYzsKICAgICAgICAgICAgaWYgKGUuYiA8IDApIHsKICAgICAgICAgICAgICBhYm92ZSA9ICFhYm92ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWFib3ZlKSB7CiAgICAgICAgICAgICAgZmFzdCA9IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghZmFzdCkgewogICAgICAgICAgICB2YXIgZHhzID0gdG9wc2l0ZS54IC0gZS5yZWdpb24ubC54OwogICAgICAgICAgICBhYm92ZSA9IGUuYiAqIChkeHAgKiBkeHAgLSBkeXAgKiBkeXApIDwgZHhzICogZHlwICogKDEgKyAyICogZHhwIC8gZHhzICsgZS5iICogZS5iKTsKICAgICAgICAgICAgaWYgKGUuYiA8IDApIHsKICAgICAgICAgICAgICBhYm92ZSA9ICFhYm92ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgeWwgPSBlLmMgLSBlLmEgKiBwLngsIHQxID0gcC55IC0geWwsIHQyID0gcC54IC0gdG9wc2l0ZS54LCB0MyA9IHlsIC0gdG9wc2l0ZS55OwogICAgICAgICAgYWJvdmUgPSB0MSAqIHQxID4gdDIgKiB0MiArIHQzICogdDM7CiAgICAgICAgfQogICAgICAgIHJldHVybiBoZS5zaWRlID09PSAibCIgPyBhYm92ZSA6ICFhYm92ZTsKICAgICAgfSwKICAgICAgZW5kUG9pbnQ6IGZ1bmN0aW9uKGVkZ2UsIHNpZGUsIHNpdGUpIHsKICAgICAgICBlZGdlLmVwW3NpZGVdID0gc2l0ZTsKICAgICAgICBpZiAoIWVkZ2UuZXBbZDNfdm9yb25vaV9vcHBvc2l0ZVtzaWRlXV0pIHJldHVybjsKICAgICAgICBjYWxsYmFjayhlZGdlKTsKICAgICAgfSwKICAgICAgZGlzdGFuY2U6IGZ1bmN0aW9uKHMsIHQpIHsKICAgICAgICB2YXIgZHggPSBzLnggLSB0LngsIGR5ID0gcy55IC0gdC55OwogICAgICAgIHJldHVybiBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpOwogICAgICB9CiAgICB9OwogICAgdmFyIEV2ZW50UXVldWUgPSB7CiAgICAgIGxpc3Q6IFtdLAogICAgICBpbnNlcnQ6IGZ1bmN0aW9uKGhlLCBzaXRlLCBvZmZzZXQpIHsKICAgICAgICBoZS52ZXJ0ZXggPSBzaXRlOwogICAgICAgIGhlLnlzdGFyID0gc2l0ZS55ICsgb2Zmc2V0OwogICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gRXZlbnRRdWV1ZS5saXN0LCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgIHZhciBuZXh0ID0gbGlzdFtpXTsKICAgICAgICAgIGlmIChoZS55c3RhciA+IG5leHQueXN0YXIgfHwgaGUueXN0YXIgPT0gbmV4dC55c3RhciAmJiBzaXRlLnggPiBuZXh0LnZlcnRleC54KSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxpc3Quc3BsaWNlKGksIDAsIGhlKTsKICAgICAgfSwKICAgICAgZGVsOiBmdW5jdGlvbihoZSkgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBscyA9IEV2ZW50UXVldWUubGlzdCwgbCA9IGxzLmxlbmd0aDsgaSA8IGwgJiYgbHNbaV0gIT0gaGU7ICsraSkge30KICAgICAgICBscy5zcGxpY2UoaSwgMSk7CiAgICAgIH0sCiAgICAgIGVtcHR5OiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gRXZlbnRRdWV1ZS5saXN0Lmxlbmd0aCA9PT0gMDsKICAgICAgfSwKICAgICAgbmV4dEV2ZW50OiBmdW5jdGlvbihoZSkgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBscyA9IEV2ZW50UXVldWUubGlzdCwgbCA9IGxzLmxlbmd0aDsgaSA8IGw7ICsraSkgewogICAgICAgICAgaWYgKGxzW2ldID09IGhlKSByZXR1cm4gbHNbaSArIDFdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfSwKICAgICAgbWluOiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZWxlbSA9IEV2ZW50UXVldWUubGlzdFswXTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgeDogZWxlbS52ZXJ0ZXgueCwKICAgICAgICAgIHk6IGVsZW0ueXN0YXIKICAgICAgICB9OwogICAgICB9LAogICAgICBleHRyYWN0TWluOiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gRXZlbnRRdWV1ZS5saXN0LnNoaWZ0KCk7CiAgICAgIH0KICAgIH07CiAgICBFZGdlTGlzdC5pbml0KCk7CiAgICBTaXRlcy5ib3R0b21TaXRlID0gU2l0ZXMubGlzdC5zaGlmdCgpOwogICAgdmFyIG5ld1NpdGUgPSBTaXRlcy5saXN0LnNoaWZ0KCksIG5ld0ludFN0YXI7CiAgICB2YXIgbGJuZCwgcmJuZCwgbGxibmQsIHJyYm5kLCBiaXNlY3RvcjsKICAgIHZhciBib3QsIHRvcCwgdGVtcCwgcCwgdjsKICAgIHZhciBlLCBwbTsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIGlmICghRXZlbnRRdWV1ZS5lbXB0eSgpKSB7CiAgICAgICAgbmV3SW50U3RhciA9IEV2ZW50UXVldWUubWluKCk7CiAgICAgIH0KICAgICAgaWYgKG5ld1NpdGUgJiYgKEV2ZW50UXVldWUuZW1wdHkoKSB8fCBuZXdTaXRlLnkgPCBuZXdJbnRTdGFyLnkgfHwgbmV3U2l0ZS55ID09IG5ld0ludFN0YXIueSAmJiBuZXdTaXRlLnggPCBuZXdJbnRTdGFyLngpKSB7CiAgICAgICAgbGJuZCA9IEVkZ2VMaXN0LmxlZnRCb3VuZChuZXdTaXRlKTsKICAgICAgICByYm5kID0gRWRnZUxpc3QucmlnaHQobGJuZCk7CiAgICAgICAgYm90ID0gRWRnZUxpc3QucmlnaHRSZWdpb24obGJuZCk7CiAgICAgICAgZSA9IEdlb20uYmlzZWN0KGJvdCwgbmV3U2l0ZSk7CiAgICAgICAgYmlzZWN0b3IgPSBFZGdlTGlzdC5jcmVhdGVIYWxmRWRnZShlLCAibCIpOwogICAgICAgIEVkZ2VMaXN0Lmluc2VydChsYm5kLCBiaXNlY3Rvcik7CiAgICAgICAgcCA9IEdlb20uaW50ZXJzZWN0KGxibmQsIGJpc2VjdG9yKTsKICAgICAgICBpZiAocCkgewogICAgICAgICAgRXZlbnRRdWV1ZS5kZWwobGJuZCk7CiAgICAgICAgICBFdmVudFF1ZXVlLmluc2VydChsYm5kLCBwLCBHZW9tLmRpc3RhbmNlKHAsIG5ld1NpdGUpKTsKICAgICAgICB9CiAgICAgICAgbGJuZCA9IGJpc2VjdG9yOwogICAgICAgIGJpc2VjdG9yID0gRWRnZUxpc3QuY3JlYXRlSGFsZkVkZ2UoZSwgInIiKTsKICAgICAgICBFZGdlTGlzdC5pbnNlcnQobGJuZCwgYmlzZWN0b3IpOwogICAgICAgIHAgPSBHZW9tLmludGVyc2VjdChiaXNlY3RvciwgcmJuZCk7CiAgICAgICAgaWYgKHApIHsKICAgICAgICAgIEV2ZW50UXVldWUuaW5zZXJ0KGJpc2VjdG9yLCBwLCBHZW9tLmRpc3RhbmNlKHAsIG5ld1NpdGUpKTsKICAgICAgICB9CiAgICAgICAgbmV3U2l0ZSA9IFNpdGVzLmxpc3Quc2hpZnQoKTsKICAgICAgfSBlbHNlIGlmICghRXZlbnRRdWV1ZS5lbXB0eSgpKSB7CiAgICAgICAgbGJuZCA9IEV2ZW50UXVldWUuZXh0cmFjdE1pbigpOwogICAgICAgIGxsYm5kID0gRWRnZUxpc3QubGVmdChsYm5kKTsKICAgICAgICByYm5kID0gRWRnZUxpc3QucmlnaHQobGJuZCk7CiAgICAgICAgcnJibmQgPSBFZGdlTGlzdC5yaWdodChyYm5kKTsKICAgICAgICBib3QgPSBFZGdlTGlzdC5sZWZ0UmVnaW9uKGxibmQpOwogICAgICAgIHRvcCA9IEVkZ2VMaXN0LnJpZ2h0UmVnaW9uKHJibmQpOwogICAgICAgIHYgPSBsYm5kLnZlcnRleDsKICAgICAgICBHZW9tLmVuZFBvaW50KGxibmQuZWRnZSwgbGJuZC5zaWRlLCB2KTsKICAgICAgICBHZW9tLmVuZFBvaW50KHJibmQuZWRnZSwgcmJuZC5zaWRlLCB2KTsKICAgICAgICBFZGdlTGlzdC5kZWwobGJuZCk7CiAgICAgICAgRXZlbnRRdWV1ZS5kZWwocmJuZCk7CiAgICAgICAgRWRnZUxpc3QuZGVsKHJibmQpOwogICAgICAgIHBtID0gImwiOwogICAgICAgIGlmIChib3QueSA+IHRvcC55KSB7CiAgICAgICAgICB0ZW1wID0gYm90OwogICAgICAgICAgYm90ID0gdG9wOwogICAgICAgICAgdG9wID0gdGVtcDsKICAgICAgICAgIHBtID0gInIiOwogICAgICAgIH0KICAgICAgICBlID0gR2VvbS5iaXNlY3QoYm90LCB0b3ApOwogICAgICAgIGJpc2VjdG9yID0gRWRnZUxpc3QuY3JlYXRlSGFsZkVkZ2UoZSwgcG0pOwogICAgICAgIEVkZ2VMaXN0Lmluc2VydChsbGJuZCwgYmlzZWN0b3IpOwogICAgICAgIEdlb20uZW5kUG9pbnQoZSwgZDNfdm9yb25vaV9vcHBvc2l0ZVtwbV0sIHYpOwogICAgICAgIHAgPSBHZW9tLmludGVyc2VjdChsbGJuZCwgYmlzZWN0b3IpOwogICAgICAgIGlmIChwKSB7CiAgICAgICAgICBFdmVudFF1ZXVlLmRlbChsbGJuZCk7CiAgICAgICAgICBFdmVudFF1ZXVlLmluc2VydChsbGJuZCwgcCwgR2VvbS5kaXN0YW5jZShwLCBib3QpKTsKICAgICAgICB9CiAgICAgICAgcCA9IEdlb20uaW50ZXJzZWN0KGJpc2VjdG9yLCBycmJuZCk7CiAgICAgICAgaWYgKHApIHsKICAgICAgICAgIEV2ZW50UXVldWUuaW5zZXJ0KGJpc2VjdG9yLCBwLCBHZW9tLmRpc3RhbmNlKHAsIGJvdCkpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogICAgZm9yIChsYm5kID0gRWRnZUxpc3QucmlnaHQoRWRnZUxpc3QubGVmdEVuZCk7IGxibmQgIT0gRWRnZUxpc3QucmlnaHRFbmQ7IGxibmQgPSBFZGdlTGlzdC5yaWdodChsYm5kKSkgewogICAgICBjYWxsYmFjayhsYm5kLmVkZ2UpOwogICAgfQogIH0KICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlTm9kZSgpIHsKICAgIHJldHVybiB7CiAgICAgIGxlYWY6IHRydWUsCiAgICAgIG5vZGVzOiBbXSwKICAgICAgcG9pbnQ6IG51bGwKICAgIH07CiAgfQogIGZ1bmN0aW9uIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBub2RlLCB4MSwgeTEsIHgyLCB5MikgewogICAgaWYgKCFmKG5vZGUsIHgxLCB5MSwgeDIsIHkyKSkgewogICAgICB2YXIgc3ggPSAoeDEgKyB4MikgKiAuNSwgc3kgPSAoeTEgKyB5MikgKiAuNSwgY2hpbGRyZW4gPSBub2RlLm5vZGVzOwogICAgICBpZiAoY2hpbGRyZW5bMF0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblswXSwgeDEsIHkxLCBzeCwgc3kpOwogICAgICBpZiAoY2hpbGRyZW5bMV0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblsxXSwgc3gsIHkxLCB4Miwgc3kpOwogICAgICBpZiAoY2hpbGRyZW5bMl0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblsyXSwgeDEsIHN5LCBzeCwgeTIpOwogICAgICBpZiAoY2hpbGRyZW5bM10pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblszXSwgc3gsIHN5LCB4MiwgeTIpOwogICAgfQogIH0KICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlUG9pbnQocCkgewogICAgcmV0dXJuIHsKICAgICAgeDogcFswXSwKICAgICAgeTogcFsxXQogICAgfTsKICB9CiAgZnVuY3Rpb24gZDNfdGltZV91dGMoKSB7CiAgICB0aGlzLl8gPSBuZXcgRGF0ZShhcmd1bWVudHMubGVuZ3RoID4gMSA\/IERhdGUuVVRDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBhcmd1bWVudHNbMF0pOwogIH0KICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdEFiYnJldmlhdGUobmFtZSkgewogICAgcmV0dXJuIG5hbWUuc3Vic3RyaW5nKDAsIDMpOwogIH0KICBmdW5jdGlvbiBkM190aW1lX3BhcnNlKGRhdGUsIHRlbXBsYXRlLCBzdHJpbmcsIGopIHsKICAgIHZhciBjLCBwLCBpID0gMCwgbiA9IHRlbXBsYXRlLmxlbmd0aCwgbSA9IHN0cmluZy5sZW5ndGg7CiAgICB3aGlsZSAoaSA8IG4pIHsKICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xOwogICAgICBjID0gdGVtcGxhdGUuY2hhckNvZGVBdChpKyspOwogICAgICBpZiAoYyA9PSAzNykgewogICAgICAgIHAgPSBkM190aW1lX3BhcnNlcnNbdGVtcGxhdGUuY2hhckF0KGkrKyldOwogICAgICAgIGlmICghcCB8fCAoaiA9IHAoZGF0ZSwgc3RyaW5nLCBqKSkgPCAwKSByZXR1cm4gLTE7CiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7CiAgICAgICAgcmV0dXJuIC0xOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gajsKICB9CiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRSZShuYW1lcykgewogICAgcmV0dXJuIG5ldyBSZWdFeHAoIl4oPzoiICsgbmFtZXMubWFwKGQzLnJlcXVvdGUpLmpvaW4oInwiKSArICIpIiwgImkiKTsKICB9CiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRMb29rdXAobmFtZXMpIHsKICAgIHZhciBtYXAgPSBuZXcgZDNfTWFwLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7CiAgICB3aGlsZSAoKytpIDwgbikgbWFwLnNldChuYW1lc1tpXS50b0xvd2VyQ2FzZSgpLCBpKTsKICAgIHJldHVybiBtYXA7CiAgfQogIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2KGRhdGUsIHN0cmluZywgaSkgewogICAgZDNfdGltZV9kYXlBYmJyZXZSZS5sYXN0SW5kZXggPSAwOwogICAgdmFyIG4gPSBkM190aW1lX2RheUFiYnJldlJlLmV4ZWMoc3RyaW5nLnN1YnN0cmluZyhpKSk7CiAgICByZXR1cm4gbiA\/IGkgKz0gblswXS5sZW5ndGggOiAtMTsKICB9CiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVdlZWtkYXkoZGF0ZSwgc3RyaW5nLCBpKSB7CiAgICBkM190aW1lX2RheVJlLmxhc3RJbmRleCA9IDA7CiAgICB2YXIgbiA9IGQzX3RpbWVfZGF5UmUuZXhlYyhzdHJpbmcuc3Vic3RyaW5nKGkpKTsKICAgIHJldHVybiBuID8gaSArPSBuWzBdLmxlbmd0aCA6IC0xOwogIH0KICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTW9udGhBYmJyZXYoZGF0ZSwgc3RyaW5nLCBpKSB7CiAgICBkM190aW1lX21vbnRoQWJicmV2UmUubGFzdEluZGV4ID0gMDsKICAgIHZhciBuID0gZDNfdGltZV9tb250aEFiYnJldlJlLmV4ZWMoc3RyaW5nLnN1YnN0cmluZyhpKSk7CiAgICByZXR1cm4gbiA\/IChkYXRlLm0gPSBkM190aW1lX21vbnRoQWJicmV2TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICs9IG5bMF0ubGVuZ3RoKSA6IC0xOwogIH0KICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTW9udGgoZGF0ZSwgc3RyaW5nLCBpKSB7CiAgICBkM190aW1lX21vbnRoUmUubGFzdEluZGV4ID0gMDsKICAgIHZhciBuID0gZDNfdGltZV9tb250aFJlLmV4ZWMoc3RyaW5nLnN1YnN0cmluZyhpKSk7CiAgICByZXR1cm4gbiA\/IChkYXRlLm0gPSBkM190aW1lX21vbnRoTG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICs9IG5bMF0ubGVuZ3RoKSA6IC0xOwogIH0KICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTG9jYWxlRnVsbChkYXRlLCBzdHJpbmcsIGkpIHsKICAgIHJldHVybiBkM190aW1lX3BhcnNlKGRhdGUsIGQzX3RpbWVfZm9ybWF0cy5jLnRvU3RyaW5nKCksIHN0cmluZywgaSk7CiAgfQogIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VMb2NhbGVEYXRlKGRhdGUsIHN0cmluZywgaSkgewogICAgcmV0dXJuIGQzX3RpbWVfcGFyc2UoZGF0ZSwgZDNfdGltZV9mb3JtYXRzLngudG9TdHJpbmcoKSwgc3RyaW5nLCBpKTsKICB9CiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUxvY2FsZVRpbWUoZGF0ZSwgc3RyaW5nLCBpKSB7CiAgICByZXR1cm4gZDNfdGltZV9wYXJzZShkYXRlLCBkM190aW1lX2Zvcm1hdHMuWC50b1N0cmluZygpLCBzdHJpbmcsIGkpOwogIH0KICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRnVsbFllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7CiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7CiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc3Vic3RyaW5nKGksIGkgKyA0KSk7CiAgICByZXR1cm4gbiA\/IChkYXRlLnkgPSArblswXSwgaSArPSBuWzBdLmxlbmd0aCkgOiAtMTsKICB9CiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7CiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7CiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc3Vic3RyaW5nKGksIGkgKyAyKSk7CiAgICByZXR1cm4gbiA\/IChkYXRlLnkgPSBkM190aW1lX2V4cGFuZFllYXIoK25bMF0pLCBpICs9IG5bMF0ubGVuZ3RoKSA6IC0xOwogIH0KICBmdW5jdGlvbiBkM190aW1lX2V4cGFuZFllYXIoZCkgewogICAgcmV0dXJuIGQgKyAoZCA+IDY4ID8gMTkwMCA6IDJlMyk7CiAgfQogIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aE51bWJlcihkYXRlLCBzdHJpbmcsIGkpIHsKICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDsKICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zdWJzdHJpbmcoaSwgaSArIDIpKTsKICAgIHJldHVybiBuID8gKGRhdGUubSA9IG5bMF0gLSAxLCBpICs9IG5bMF0ubGVuZ3RoKSA6IC0xOwogIH0KICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRGF5KGRhdGUsIHN0cmluZywgaSkgewogICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwOwogICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnN1YnN0cmluZyhpLCBpICsgMikpOwogICAgcmV0dXJuIG4gPyAoZGF0ZS5kID0gK25bMF0sIGkgKz0gblswXS5sZW5ndGgpIDogLTE7CiAgfQogIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VIb3VyMjQoZGF0ZSwgc3RyaW5nLCBpKSB7CiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7CiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc3Vic3RyaW5nKGksIGkgKyAyKSk7CiAgICByZXR1cm4gbiA\/IChkYXRlLkggPSArblswXSwgaSArPSBuWzBdLmxlbmd0aCkgOiAtMTsKICB9CiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZU1pbnV0ZXMoZGF0ZSwgc3RyaW5nLCBpKSB7CiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7CiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc3Vic3RyaW5nKGksIGkgKyAyKSk7CiAgICByZXR1cm4gbiA\/IChkYXRlLk0gPSArblswXSwgaSArPSBuWzBdLmxlbmd0aCkgOiAtMTsKICB9CiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVNlY29uZHMoZGF0ZSwgc3RyaW5nLCBpKSB7CiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7CiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc3Vic3RyaW5nKGksIGkgKyAyKSk7CiAgICByZXR1cm4gbiA\/IChkYXRlLlMgPSArblswXSwgaSArPSBuWzBdLmxlbmd0aCkgOiAtMTsKICB9CiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZU1pbGxpc2Vjb25kcyhkYXRlLCBzdHJpbmcsIGkpIHsKICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDsKICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zdWJzdHJpbmcoaSwgaSArIDMpKTsKICAgIHJldHVybiBuID8gKGRhdGUuTCA9ICtuWzBdLCBpICs9IG5bMF0ubGVuZ3RoKSA6IC0xOwogIH0KICBmdW5jdGlvbiBkM190aW1lX3BhcnNlQW1QbShkYXRlLCBzdHJpbmcsIGkpIHsKICAgIHZhciBuID0gZDNfdGltZV9hbVBtTG9va3VwLmdldChzdHJpbmcuc3Vic3RyaW5nKGksIGkgKz0gMikudG9Mb3dlckNhc2UoKSk7CiAgICByZXR1cm4gbiA9PSBudWxsID8gLTEgOiAoZGF0ZS5wID0gbiwgaSk7CiAgfQogIGZ1bmN0aW9uIGQzX3RpbWVfem9uZShkKSB7CiAgICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKSwgenMgPSB6ID4gMCA\/ICItIiA6ICIrIiwgemggPSB+fihNYXRoLmFicyh6KSAvIDYwKSwgem0gPSBNYXRoLmFicyh6KSAlIDYwOwogICAgcmV0dXJuIHpzICsgZDNfdGltZV96ZmlsbDIoemgpICsgZDNfdGltZV96ZmlsbDIoem0pOwogIH0KICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdElzb05hdGl2ZShkYXRlKSB7CiAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpOwogIH0KICBmdW5jdGlvbiBkM190aW1lX2ludGVydmFsKGxvY2FsLCBzdGVwLCBudW1iZXIpIHsKICAgIGZ1bmN0aW9uIHJvdW5kKGRhdGUpIHsKICAgICAgdmFyIGQwID0gbG9jYWwoZGF0ZSksIGQxID0gb2Zmc2V0KGQwLCAxKTsKICAgICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA\/IGQwIDogZDE7CiAgICB9CiAgICBmdW5jdGlvbiBjZWlsKGRhdGUpIHsKICAgICAgc3RlcChkYXRlID0gbG9jYWwobmV3IGQzX3RpbWUoZGF0ZSAtIDEpKSwgMSk7CiAgICAgIHJldHVybiBkYXRlOwogICAgfQogICAgZnVuY3Rpb24gb2Zmc2V0KGRhdGUsIGspIHsKICAgICAgc3RlcChkYXRlID0gbmV3IGQzX3RpbWUoK2RhdGUpLCBrKTsKICAgICAgcmV0dXJuIGRhdGU7CiAgICB9CiAgICBmdW5jdGlvbiByYW5nZSh0MCwgdDEsIGR0KSB7CiAgICAgIHZhciB0aW1lID0gY2VpbCh0MCksIHRpbWVzID0gW107CiAgICAgIGlmIChkdCA+IDEpIHsKICAgICAgICB3aGlsZSAodGltZSA8IHQxKSB7CiAgICAgICAgICBpZiAoIShudW1iZXIodGltZSkgJSBkdCkpIHRpbWVzLnB1c2gobmV3IERhdGUoK3RpbWUpKTsKICAgICAgICAgIHN0ZXAodGltZSwgMSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHdoaWxlICh0aW1lIDwgdDEpIHRpbWVzLnB1c2gobmV3IERhdGUoK3RpbWUpKSwgc3RlcCh0aW1lLCAxKTsKICAgICAgfQogICAgICByZXR1cm4gdGltZXM7CiAgICB9CiAgICBmdW5jdGlvbiByYW5nZV91dGModDAsIHQxLCBkdCkgewogICAgICB0cnkgewogICAgICAgIGQzX3RpbWUgPSBkM190aW1lX3V0YzsKICAgICAgICB2YXIgdXRjID0gbmV3IGQzX3RpbWVfdXRjOwogICAgICAgIHV0Yy5fID0gdDA7CiAgICAgICAgcmV0dXJuIHJhbmdlKHV0YywgdDEsIGR0KTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBkM190aW1lID0gRGF0ZTsKICAgICAgfQogICAgfQogICAgbG9jYWwuZmxvb3IgPSBsb2NhbDsKICAgIGxvY2FsLnJvdW5kID0gcm91bmQ7CiAgICBsb2NhbC5jZWlsID0gY2VpbDsKICAgIGxvY2FsLm9mZnNldCA9IG9mZnNldDsKICAgIGxvY2FsLnJhbmdlID0gcmFuZ2U7CiAgICB2YXIgdXRjID0gbG9jYWwudXRjID0gZDNfdGltZV9pbnRlcnZhbF91dGMobG9jYWwpOwogICAgdXRjLmZsb29yID0gdXRjOwogICAgdXRjLnJvdW5kID0gZDNfdGltZV9pbnRlcnZhbF91dGMocm91bmQpOwogICAgdXRjLmNlaWwgPSBkM190aW1lX2ludGVydmFsX3V0YyhjZWlsKTsKICAgIHV0Yy5vZmZzZXQgPSBkM190aW1lX2ludGVydmFsX3V0YyhvZmZzZXQpOwogICAgdXRjLnJhbmdlID0gcmFuZ2VfdXRjOwogICAgcmV0dXJuIGxvY2FsOwogIH0KICBmdW5jdGlvbiBkM190aW1lX2ludGVydmFsX3V0YyhtZXRob2QpIHsKICAgIHJldHVybiBmdW5jdGlvbihkYXRlLCBrKSB7CiAgICAgIHRyeSB7CiAgICAgICAgZDNfdGltZSA9IGQzX3RpbWVfdXRjOwogICAgICAgIHZhciB1dGMgPSBuZXcgZDNfdGltZV91dGM7CiAgICAgICAgdXRjLl8gPSBkYXRlOwogICAgICAgIHJldHVybiBtZXRob2QodXRjLCBrKS5fOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIGQzX3RpbWUgPSBEYXRlOwogICAgICB9CiAgICB9OwogIH0KICBmdW5jdGlvbiBkM190aW1lX3NjYWxlKGxpbmVhciwgbWV0aG9kcywgZm9ybWF0KSB7CiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7CiAgICAgIHJldHVybiBsaW5lYXIoeCk7CiAgICB9CiAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih4KSB7CiAgICAgIHJldHVybiBkM190aW1lX3NjYWxlRGF0ZShsaW5lYXIuaW52ZXJ0KHgpKTsKICAgIH07CiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmVhci5kb21haW4oKS5tYXAoZDNfdGltZV9zY2FsZURhdGUpOwogICAgICBsaW5lYXIuZG9tYWluKHgpOwogICAgICByZXR1cm4gc2NhbGU7CiAgICB9OwogICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKG0pIHsKICAgICAgcmV0dXJuIHNjYWxlLmRvbWFpbihkM19zY2FsZV9uaWNlKHNjYWxlLmRvbWFpbigpLCBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbTsKICAgICAgfSkpOwogICAgfTsKICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24obSwgaykgewogICAgICB2YXIgZXh0ZW50ID0gZDNfdGltZV9zY2FsZUV4dGVudChzY2FsZS5kb21haW4oKSk7CiAgICAgIGlmICh0eXBlb2YgbSAhPT0gImZ1bmN0aW9uIikgewogICAgICAgIHZhciBzcGFuID0gZXh0ZW50WzFdIC0gZXh0ZW50WzBdLCB0YXJnZXQgPSBzcGFuIC8gbSwgaSA9IGQzLmJpc2VjdChkM190aW1lX3NjYWxlU3RlcHMsIHRhcmdldCk7CiAgICAgICAgaWYgKGkgPT0gZDNfdGltZV9zY2FsZVN0ZXBzLmxlbmd0aCkgcmV0dXJuIG1ldGhvZHMueWVhcihleHRlbnQsIG0pOwogICAgICAgIGlmICghaSkgcmV0dXJuIGxpbmVhci50aWNrcyhtKS5tYXAoZDNfdGltZV9zY2FsZURhdGUpOwogICAgICAgIGlmIChNYXRoLmxvZyh0YXJnZXQgLyBkM190aW1lX3NjYWxlU3RlcHNbaSAtIDFdKSA8IE1hdGgubG9nKGQzX3RpbWVfc2NhbGVTdGVwc1tpXSAvIHRhcmdldCkpIC0taTsKICAgICAgICBtID0gbWV0aG9kc1tpXTsKICAgICAgICBrID0gbVsxXTsKICAgICAgICBtID0gbVswXS5yYW5nZTsKICAgICAgfQogICAgICByZXR1cm4gbShleHRlbnRbMF0sIG5ldyBEYXRlKCtleHRlbnRbMV0gKyAxKSwgayk7CiAgICB9OwogICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZm9ybWF0OwogICAgfTsKICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGQzX3RpbWVfc2NhbGUobGluZWFyLmNvcHkoKSwgbWV0aG9kcywgZm9ybWF0KTsKICAgIH07CiAgICByZXR1cm4gZDMucmViaW5kKHNjYWxlLCBsaW5lYXIsICJyYW5nZSIsICJyYW5nZVJvdW5kIiwgImludGVycG9sYXRlIiwgImNsYW1wIik7CiAgfQogIGZ1bmN0aW9uIGQzX3RpbWVfc2NhbGVFeHRlbnQoZG9tYWluKSB7CiAgICB2YXIgc3RhcnQgPSBkb21haW5bMF0sIHN0b3AgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdOwogICAgcmV0dXJuIHN0YXJ0IDwgc3RvcCA\/IFsgc3RhcnQsIHN0b3AgXSA6IFsgc3RvcCwgc3RhcnQgXTsKICB9CiAgZnVuY3Rpb24gZDNfdGltZV9zY2FsZURhdGUodCkgewogICAgcmV0dXJuIG5ldyBEYXRlKHQpOwogIH0KICBmdW5jdGlvbiBkM190aW1lX3NjYWxlRm9ybWF0KGZvcm1hdHMpIHsKICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7CiAgICAgIHZhciBpID0gZm9ybWF0cy5sZW5ndGggLSAxLCBmID0gZm9ybWF0c1tpXTsKICAgICAgd2hpbGUgKCFmWzFdKGRhdGUpKSBmID0gZm9ybWF0c1stLWldOwogICAgICByZXR1cm4gZlswXShkYXRlKTsKICAgIH07CiAgfQogIGZ1bmN0aW9uIGQzX3RpbWVfc2NhbGVTZXRZZWFyKHkpIHsKICAgIHZhciBkID0gbmV3IERhdGUoeSwgMCwgMSk7CiAgICBkLnNldEZ1bGxZZWFyKHkpOwogICAgcmV0dXJuIGQ7CiAgfQogIGZ1bmN0aW9uIGQzX3RpbWVfc2NhbGVHZXRZZWFyKGQpIHsKICAgIHZhciB5ID0gZC5nZXRGdWxsWWVhcigpLCBkMCA9IGQzX3RpbWVfc2NhbGVTZXRZZWFyKHkpLCBkMSA9IGQzX3RpbWVfc2NhbGVTZXRZZWFyKHkgKyAxKTsKICAgIHJldHVybiB5ICsgKGQgLSBkMCkgLyAoZDEgLSBkMCk7CiAgfQogIGZ1bmN0aW9uIGQzX3RpbWVfc2NhbGVVVENTZXRZZWFyKHkpIHsKICAgIHZhciBkID0gbmV3IERhdGUoRGF0ZS5VVEMoeSwgMCwgMSkpOwogICAgZC5zZXRVVENGdWxsWWVhcih5KTsKICAgIHJldHVybiBkOwogIH0KICBmdW5jdGlvbiBkM190aW1lX3NjYWxlVVRDR2V0WWVhcihkKSB7CiAgICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKSwgZDAgPSBkM190aW1lX3NjYWxlVVRDU2V0WWVhcih5KSwgZDEgPSBkM190aW1lX3NjYWxlVVRDU2V0WWVhcih5ICsgMSk7CiAgICByZXR1cm4geSArIChkIC0gZDApIC8gKGQxIC0gZDApOwogIH0KICBpZiAoIURhdGUubm93KSBEYXRlLm5vdyA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuICsobmV3IERhdGUpOwogIH07CiAgdHJ5IHsKICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLnN0eWxlLnNldFByb3BlcnR5KCJvcGFjaXR5IiwgMCwgIiIpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICB2YXIgZDNfc3R5bGVfcHJvdG90eXBlID0gQ1NTU3R5bGVEZWNsYXJhdGlvbi5wcm90b3R5cGUsIGQzX3N0eWxlX3NldFByb3BlcnR5ID0gZDNfc3R5bGVfcHJvdG90eXBlLnNldFByb3BlcnR5OwogICAgZDNfc3R5bGVfcHJvdG90eXBlLnNldFByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7CiAgICAgIGQzX3N0eWxlX3NldFByb3BlcnR5LmNhbGwodGhpcywgbmFtZSwgdmFsdWUgKyAiIiwgcHJpb3JpdHkpOwogICAgfTsKICB9CiAgZDMgPSB7CiAgICB2ZXJzaW9uOiAiMi4xMC4zIgogIH07CiAgdmFyIGQzX2FycmF5ID0gZDNfYXJyYXlTbGljZTsKICB0cnkgewogICAgZDNfYXJyYXkoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNoaWxkTm9kZXMpWzBdLm5vZGVUeXBlOwogIH0gY2F0Y2ggKGUpIHsKICAgIGQzX2FycmF5ID0gZDNfYXJyYXlDb3B5OwogIH0KICB2YXIgZDNfYXJyYXlTdWJjbGFzcyA9IFtdLl9fcHJvdG9fXyA\/IGZ1bmN0aW9uKGFycmF5LCBwcm90b3R5cGUpIHsKICAgIGFycmF5Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTsKICB9IDogZnVuY3Rpb24oYXJyYXksIHByb3RvdHlwZSkgewogICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvdG90eXBlKSBhcnJheVtwcm9wZXJ0eV0gPSBwcm90b3R5cGVbcHJvcGVydHldOwogIH07CiAgZDMubWFwID0gZnVuY3Rpb24ob2JqZWN0KSB7CiAgICB2YXIgbWFwID0gbmV3IGQzX01hcDsKICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7CiAgICByZXR1cm4gbWFwOwogIH07CiAgZDNfY2xhc3MoZDNfTWFwLCB7CiAgICBoYXM6IGZ1bmN0aW9uKGtleSkgewogICAgICByZXR1cm4gZDNfbWFwX3ByZWZpeCArIGtleSBpbiB0aGlzOwogICAgfSwKICAgIGdldDogZnVuY3Rpb24oa2V5KSB7CiAgICAgIHJldHVybiB0aGlzW2QzX21hcF9wcmVmaXggKyBrZXldOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgICByZXR1cm4gdGhpc1tkM19tYXBfcHJlZml4ICsga2V5XSA9IHZhbHVlOwogICAgfSwKICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7CiAgICAgIGtleSA9IGQzX21hcF9wcmVmaXggKyBrZXk7CiAgICAgIHJldHVybiBrZXkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1trZXldOwogICAgfSwKICAgIGtleXM6IGZ1bmN0aW9uKCkgewogICAgICB2YXIga2V5cyA9IFtdOwogICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7CiAgICAgICAga2V5cy5wdXNoKGtleSk7CiAgICAgIH0pOwogICAgICByZXR1cm4ga2V5czsKICAgIH0sCiAgICB2YWx1ZXM6IGZ1bmN0aW9uKCkgewogICAgICB2YXIgdmFsdWVzID0gW107CiAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpOwogICAgICB9KTsKICAgICAgcmV0dXJuIHZhbHVlczsKICAgIH0sCiAgICBlbnRyaWVzOiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGVudHJpZXMgPSBbXTsKICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgICBlbnRyaWVzLnB1c2goewogICAgICAgICAga2V5OiBrZXksCiAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIHJldHVybiBlbnRyaWVzOwogICAgfSwKICAgIGZvckVhY2g6IGZ1bmN0aW9uKGYpIHsKICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMpIHsKICAgICAgICBpZiAoa2V5LmNoYXJDb2RlQXQoMCkgPT09IGQzX21hcF9wcmVmaXhDb2RlKSB7CiAgICAgICAgICBmLmNhbGwodGhpcywga2V5LnN1YnN0cmluZygxKSwgdGhpc1trZXldKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9KTsKICB2YXIgZDNfbWFwX3ByZWZpeCA9ICJcMCIsIGQzX21hcF9wcmVmaXhDb2RlID0gZDNfbWFwX3ByZWZpeC5jaGFyQ29kZUF0KDApOwogIGQzLmZ1bmN0b3IgPSBkM19mdW5jdG9yOwogIGQzLnJlYmluZCA9IGZ1bmN0aW9uKHRhcmdldCwgc291cmNlKSB7CiAgICB2YXIgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZXRob2Q7CiAgICB3aGlsZSAoKytpIDwgbikgdGFyZ2V0W21ldGhvZCA9IGFyZ3VtZW50c1tpXV0gPSBkM19yZWJpbmQodGFyZ2V0LCBzb3VyY2UsIHNvdXJjZVttZXRob2RdKTsKICAgIHJldHVybiB0YXJnZXQ7CiAgfTsKICBkMy5hc2NlbmRpbmcgPSBmdW5jdGlvbihhLCBiKSB7CiAgICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA\/IDAgOiBOYU47CiAgfTsKICBkMy5kZXNjZW5kaW5nID0gZnVuY3Rpb24oYSwgYikgewogICAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA\/IDEgOiBiID49IGEgPyAwIDogTmFOOwogIH07CiAgZDMubWVhbiA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7CiAgICB2YXIgbiA9IGFycmF5Lmxlbmd0aCwgYSwgbSA9IDAsIGkgPSAtMSwgaiA9IDA7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgewogICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWJlcihhID0gYXJyYXlbaV0pKSBtICs9IChhIC0gbSkgLyArK2o7CiAgICB9IGVsc2UgewogICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWJlcihhID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpKSBtICs9IChhIC0gbSkgLyArK2o7CiAgICB9CiAgICByZXR1cm4gaiA\\/IE1hdGgucm91bmQoeCAqIChuID0gTWF0aC5wb3coMTAsIG4pKSkgLyBuIDogTWF0aC5yb3VuZCh4KTsKICB9OwogIGQzLnhociA9IGZ1bmN0aW9uKHVybCwgbWltZSwgY2FsbGJhY2spIHsKICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3Q7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGNhbGxiYWNrID0gbWltZSwgbWltZSA9IG51bGw7IGVsc2UgaWYgKG1pbWUgJiYgcmVxLm92ZXJyaWRlTWltZVR5cGUpIHJlcS5vdmVycmlkZU1pbWVUeXBlKG1pbWUpOwogICAgcmVxLm9wZW4oIkdFVCIsIHVybCwgdHJ1ZSk7CiAgICBpZiAobWltZSkgcmVxLnNldFJlcXVlc3RIZWFkZXIoIkFjY2VwdCIsIG1pbWUpOwogICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAocmVxLnJlYWR5U3RhdGUgPT09IDQpIHsKICAgICAgICB2YXIgcyA9IHJlcS5zdGF0dXM7CiAgICAgICAgY2FsbGJhY2soIXMgJiYgcmVxLnJlc3BvbnNlIHx8IHMgPj0gMjAwICYmIHMgPCAzMDAgfHwgcyA9PT0gMzA0ID8gcmVxIDogbnVsbCk7CiAgICAgIH0KICAgIH07CiAgICByZXEuc2VuZChudWxsKTsKICB9OwogIGQzLnRleHQgPSBmdW5jdGlvbih1cmwsIG1pbWUsIGNhbGxiYWNrKSB7CiAgICBmdW5jdGlvbiByZWFkeShyZXEpIHsKICAgICAgY2FsbGJhY2socmVxICYmIHJlcS5yZXNwb25zZVRleHQpOwogICAgfQogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7CiAgICAgIGNhbGxiYWNrID0gbWltZTsKICAgICAgbWltZSA9IG51bGw7CiAgICB9CiAgICBkMy54aHIodXJsLCBtaW1lLCByZWFkeSk7CiAgfTsKICBkMy5qc29uID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykgewogICAgZDMudGV4dCh1cmwsICJhcHBsaWNhdGlvbi9qc29uIiwgZnVuY3Rpb24odGV4dCkgewogICAgICBjYWxsYmFjayh0ZXh0ID8gSlNPTi5wYXJzZSh0ZXh0KSA6IG51bGwpOwogICAgfSk7CiAgfTsKICBkMy5odG1sID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykgewogICAgZDMudGV4dCh1cmwsICJ0ZXh0L2h0bWwiLCBmdW5jdGlvbih0ZXh0KSB7CiAgICAgIGlmICh0ZXh0ICE9IG51bGwpIHsKICAgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpOwogICAgICAgIHJhbmdlLnNlbGVjdE5vZGUoZG9jdW1lbnQuYm9keSk7CiAgICAgICAgdGV4dCA9IHJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCh0ZXh0KTsKICAgICAgfQogICAgICBjYWxsYmFjayh0ZXh0KTsKICAgIH0pOwogIH07CiAgZDMueG1sID0gZnVuY3Rpb24odXJsLCBtaW1lLCBjYWxsYmFjaykgewogICAgZnVuY3Rpb24gcmVhZHkocmVxKSB7CiAgICAgIGNhbGxiYWNrKHJlcSAmJiByZXEucmVzcG9uc2VYTUwpOwogICAgfQogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7CiAgICAgIGNhbGxiYWNrID0gbWltZTsKICAgICAgbWltZSA9IG51bGw7CiAgICB9CiAgICBkMy54aHIodXJsLCBtaW1lLCByZWFkeSk7CiAgfTsKICB2YXIgZDNfbnNQcmVmaXggPSB7CiAgICBzdmc6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICB4aHRtbDogImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiLAogICAgeGxpbms6ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiwKICAgIHhtbDogImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSIsCiAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvIgogIH07CiAgZDMubnMgPSB7CiAgICBwcmVmaXg6IGQzX25zUHJlZml4LAogICAgcXVhbGlmeTogZnVuY3Rpb24obmFtZSkgewogICAgICB2YXIgaSA9IG5hbWUuaW5kZXhPZigiOiIpLCBwcmVmaXggPSBuYW1lOwogICAgICBpZiAoaSA+PSAwKSB7CiAgICAgICAgcHJlZml4ID0gbmFtZS5zdWJzdHJpbmcoMCwgaSk7CiAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyaW5nKGkgKyAxKTsKICAgICAgfQogICAgICByZXR1cm4gZDNfbnNQcmVmaXguaGFzT3duUHJvcGVydHkocHJlZml4KSA\/IHsKICAgICAgICBzcGFjZTogZDNfbnNQcmVmaXhbcHJlZml4XSwKICAgICAgICBsb2NhbDogbmFtZQogICAgICB9IDogbmFtZTsKICAgIH0KICB9OwogIGQzLmRpc3BhdGNoID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgZGlzcGF0Y2ggPSBuZXcgZDNfZGlzcGF0Y2gsIGkgPSAtMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICB3aGlsZSAoKytpIDwgbikgZGlzcGF0Y2hbYXJndW1lbnRzW2ldXSA9IGQzX2Rpc3BhdGNoX2V2ZW50KGRpc3BhdGNoKTsKICAgIHJldHVybiBkaXNwYXRjaDsKICB9OwogIGQzX2Rpc3BhdGNoLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7CiAgICB2YXIgaSA9IHR5cGUuaW5kZXhPZigiLiIpLCBuYW1lID0gIiI7CiAgICBpZiAoaSA+IDApIHsKICAgICAgbmFtZSA9IHR5cGUuc3Vic3RyaW5nKGkgKyAxKTsKICAgICAgdHlwZSA9IHR5cGUuc3Vic3RyaW5nKDAsIGkpOwogICAgfQogICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdGhpc1t0eXBlXS5vbihuYW1lKSA6IHRoaXNbdHlwZV0ub24obmFtZSwgbGlzdGVuZXIpOwogIH07CiAgZDMuZm9ybWF0ID0gZnVuY3Rpb24oc3BlY2lmaWVyKSB7CiAgICB2YXIgbWF0Y2ggPSBkM19mb3JtYXRfcmUuZXhlYyhzcGVjaWZpZXIpLCBmaWxsID0gbWF0Y2hbMV0gfHwgIiAiLCBzaWduID0gbWF0Y2hbM10gfHwgIiIsIHpmaWxsID0gbWF0Y2hbNV0sIHdpZHRoID0gK21hdGNoWzZdLCBjb21tYSA9IG1hdGNoWzddLCBwcmVjaXNpb24gPSBtYXRjaFs4XSwgdHlwZSA9IG1hdGNoWzldLCBzY2FsZSA9IDEsIHN1ZmZpeCA9ICIiLCBpbnRlZ2VyID0gZmFsc2U7CiAgICBpZiAocHJlY2lzaW9uKSBwcmVjaXNpb24gPSArcHJlY2lzaW9uLnN1YnN0cmluZygxKTsKICAgIGlmICh6ZmlsbCkgewogICAgICBmaWxsID0gIjAiOwogICAgICBpZiAoY29tbWEpIHdpZHRoIC09IE1hdGguZmxvb3IoKHdpZHRoIC0gMSkgLyA0KTsKICAgIH0KICAgIHN3aXRjaCAodHlwZSkgewogICAgIGNhc2UgIm4iOgogICAgICBjb21tYSA9IHRydWU7CiAgICAgIHR5cGUgPSAiZyI7CiAgICAgIGJyZWFrOwogICAgIGNhc2UgIiUiOgogICAgICBzY2FsZSA9IDEwMDsKICAgICAgc3VmZml4ID0gIiUiOwogICAgICB0eXBlID0gImYiOwogICAgICBicmVhazsKICAgICBjYXNlICJwIjoKICAgICAgc2NhbGUgPSAxMDA7CiAgICAgIHN1ZmZpeCA9ICIlIjsKICAgICAgdHlwZSA9ICJyIjsKICAgICAgYnJlYWs7CiAgICAgY2FzZSAiZCI6CiAgICAgIGludGVnZXIgPSB0cnVlOwogICAgICBwcmVjaXNpb24gPSAwOwogICAgICBicmVhazsKICAgICBjYXNlICJzIjoKICAgICAgc2NhbGUgPSAtMTsKICAgICAgdHlwZSA9ICJyIjsKICAgICAgYnJlYWs7CiAgICB9CiAgICBpZiAodHlwZSA9PSAiciIgJiYgIXByZWNpc2lvbikgdHlwZSA9ICJnIjsKICAgIHR5cGUgPSBkM19mb3JtYXRfdHlwZXMuZ2V0KHR5cGUpIHx8IGQzX2Zvcm1hdF90eXBlRGVmYXVsdDsKICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkgewogICAgICBpZiAoaW50ZWdlciAmJiB2YWx1ZSAlIDEpIHJldHVybiAiIjsKICAgICAgdmFyIG5lZ2F0aXZlID0gdmFsdWUgPCAwICYmICh2YWx1ZSA9IC12YWx1ZSkgPyAiLSIgOiBzaWduOwogICAgICBpZiAoc2NhbGUgPCAwKSB7CiAgICAgICAgdmFyIHByZWZpeCA9IGQzLmZvcm1hdFByZWZpeCh2YWx1ZSwgcHJlY2lzaW9uKTsKICAgICAgICB2YWx1ZSA9IHByZWZpeC5zY2FsZSh2YWx1ZSk7CiAgICAgICAgc3VmZml4ID0gcHJlZml4LnN5bWJvbDsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YWx1ZSAqPSBzY2FsZTsKICAgICAgfQogICAgICB2YWx1ZSA9IHR5cGUodmFsdWUsIHByZWNpc2lvbik7CiAgICAgIGlmICh6ZmlsbCkgewogICAgICAgIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGggKyBuZWdhdGl2ZS5sZW5ndGg7CiAgICAgICAgaWYgKGxlbmd0aCA8IHdpZHRoKSB2YWx1ZSA9IChuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKSkuam9pbihmaWxsKSArIHZhbHVlOwogICAgICAgIGlmIChjb21tYSkgdmFsdWUgPSBkM19mb3JtYXRfZ3JvdXAodmFsdWUpOwogICAgICAgIHZhbHVlID0gbmVnYXRpdmUgKyB2YWx1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoY29tbWEpIHZhbHVlID0gZDNfZm9ybWF0X2dyb3VwKHZhbHVlKTsKICAgICAgICB2YWx1ZSA9IG5lZ2F0aXZlICsgdmFsdWU7CiAgICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsKICAgICAgICBpZiAobGVuZ3RoIDwgd2lkdGgpIHZhbHVlID0gKG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpKS5qb2luKGZpbGwpICsgdmFsdWU7CiAgICAgIH0KICAgICAgcmV0dXJuIHZhbHVlICsgc3VmZml4OwogICAgfTsKICB9OwogIHZhciBkM19mb3JtYXRfcmUgPSAvKD86KFtee10pPyhbPD49Xl0pKT8oWytcLSBdKT8oIyk\\/OlxkK1wuP1xkKnxcLj9cZCspKD86W2VFXVstK10\/XGQrKT8vZzsKICBkMy5pbnRlcnBvbGF0b3JzID0gWyBkMy5pbnRlcnBvbGF0ZU9iamVjdCwgZnVuY3Rpb24oYSwgYikgewogICAgcmV0dXJuIGIgaW5zdGFuY2VvZiBBcnJheSAmJiBkMy5pbnRlcnBvbGF0ZUFycmF5KGEsIGIpOwogIH0sIGZ1bmN0aW9uKGEsIGIpIHsKICAgIHJldHVybiAodHlwZW9mIGEgPT09ICJzdHJpbmciIHx8IHR5cGVvZiBiID09PSAic3RyaW5nIikgJiYgZDMuaW50ZXJwb2xhdGVTdHJpbmcoYSArICIiLCBiICsgIiIpOwogIH0sIGZ1bmN0aW9uKGEsIGIpIHsKICAgIHJldHVybiAodHlwZW9mIGIgPT09ICJzdHJpbmciID8gZDNfcmdiX25hbWVzLmhhcyhiKSB8fCAvXigjfHJnYlwofGhzbFwoKS8udGVzdChiKSA6IGIgaW5zdGFuY2VvZiBkM19Db2xvcikgJiYgZDMuaW50ZXJwb2xhdGVSZ2IoYSwgYik7CiAgfSwgZnVuY3Rpb24oYSwgYikgewogICAgcmV0dXJuICFpc05hTihhID0gK2EpICYmICFpc05hTihiID0gK2IpICYmIGQzLmludGVycG9sYXRlTnVtYmVyKGEsIGIpOwogIH0gXTsKICBkM19Db2xvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnJnYigpICsgIiI7CiAgfTsKICBkMy5yZ2IgPSBmdW5jdGlvbihyLCBnLCBiKSB7CiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA\/IHIgaW5zdGFuY2VvZiBkM19SZ2IgPyBkM19yZ2Ioci5yLCByLmcsIHIuYikgOiBkM19yZ2JfcGFyc2UoIiIgKyByLCBkM19yZ2IsIGQzX2hzbF9yZ2IpIDogZDNfcmdiKH5+ciwgfn5nLCB+fmIpOwogIH07CiAgdmFyIGQzX3JnYlByb3RvdHlwZSA9IGQzX1JnYi5wcm90b3R5cGUgPSBuZXcgZDNfQ29sb3I7CiAgZDNfcmdiUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykgewogICAgayA9IE1hdGgucG93KC43LCBhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpOwogICAgdmFyIHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmIsIGkgPSAzMDsKICAgIGlmICghciAmJiAhZyAmJiAhYikgcmV0dXJuIGQzX3JnYihpLCBpLCBpKTsKICAgIGlmIChyICYmIHIgPCBpKSByID0gaTsKICAgIGlmIChnICYmIGcgPCBpKSBnID0gaTsKICAgIGlmIChiICYmIGIgPCBpKSBiID0gaTsKICAgIHJldHVybiBkM19yZ2IoTWF0aC5taW4oMjU1LCBNYXRoLmZsb29yKHIgLyBrKSksIE1hdGgubWluKDI1NSwgTWF0aC5mbG9vcihnIC8gaykpLCBNYXRoLm1pbigyNTUsIE1hdGguZmxvb3IoYiAvIGspKSk7CiAgfTsKICBkM19yZ2JQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykgewogICAgayA9IE1hdGgucG93KC43LCBhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpOwogICAgcmV0dXJuIGQzX3JnYihNYXRoLmZsb29yKGsgKiB0aGlzLnIpLCBNYXRoLmZsb29yKGsgKiB0aGlzLmcpLCBNYXRoLmZsb29yKGsgKiB0aGlzLmIpKTsKICB9OwogIGQzX3JnYlByb3RvdHlwZS5oc2wgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBkM19yZ2JfaHNsKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpOwogIH07CiAgZDNfcmdiUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gIiMiICsgZDNfcmdiX2hleCh0aGlzLnIpICsgZDNfcmdiX2hleCh0aGlzLmcpICsgZDNfcmdiX2hleCh0aGlzLmIpOwogIH07CiAgdmFyIGQzX3JnYl9uYW1lcyA9IGQzLm1hcCh7CiAgICBhbGljZWJsdWU6ICIjZjBmOGZmIiwKICAgIGFudGlxdWV3aGl0ZTogIiNmYWViZDciLAogICAgYXF1YTogIiMwMGZmZmYiLAogICAgYXF1YW1hcmluZTogIiM3ZmZmZDQiLAogICAgYXp1cmU6ICIjZjBmZmZmIiwKICAgIGJlaWdlOiAiI2Y1ZjVkYyIsCiAgICBiaXNxdWU6ICIjZmZlNGM0IiwKICAgIGJsYWNrOiAiIzAwMDAwMCIsCiAgICBibGFuY2hlZGFsbW9uZDogIiNmZmViY2QiLAogICAgYmx1ZTogIiMwMDAwZmYiLAogICAgYmx1ZXZpb2xldDogIiM4YTJiZTIiLAogICAgYnJvd246ICIjYTUyYTJhIiwKICAgIGJ1cmx5d29vZDogIiNkZWI4ODciLAogICAgY2FkZXRibHVlOiAiIzVmOWVhMCIsCiAgICBjaGFydHJldXNlOiAiIzdmZmYwMCIsCiAgICBjaG9jb2xhdGU6ICIjZDI2OTFlIiwKICAgIGNvcmFsOiAiI2ZmN2Y1MCIsCiAgICBjb3JuZmxvd2VyYmx1ZTogIiM2NDk1ZWQiLAogICAgY29ybnNpbGs6ICIjZmZmOGRjIiwKICAgIGNyaW1zb246ICIjZGMxNDNjIiwKICAgIGN5YW46ICIjMDBmZmZmIiwKICAgIGRhcmtibHVlOiAiIzAwMDA4YiIsCiAgICBkYXJrY3lhbjogIiMwMDhiOGIiLAogICAgZGFya2dvbGRlbnJvZDogIiNiODg2MGIiLAogICAgZGFya2dyYXk6ICIjYTlhOWE5IiwKICAgIGRhcmtncmVlbjogIiMwMDY0MDAiLAogICAgZGFya2dyZXk6ICIjYTlhOWE5IiwKICAgIGRhcmtraGFraTogIiNiZGI3NmIiLAogICAgZGFya21hZ2VudGE6ICIjOGIwMDhiIiwKICAgIGRhcmtvbGl2ZWdyZWVuOiAiIzU1NmIyZiIsCiAgICBkYXJrb3JhbmdlOiAiI2ZmOGMwMCIsCiAgICBkYXJrb3JjaGlkOiAiIzk5MzJjYyIsCiAgICBkYXJrcmVkOiAiIzhiMDAwMCIsCiAgICBkYXJrc2FsbW9uOiAiI2U5OTY3YSIsCiAgICBkYXJrc2VhZ3JlZW46ICIjOGZiYzhmIiwKICAgIGRhcmtzbGF0ZWJsdWU6ICIjNDgzZDhiIiwKICAgIGRhcmtzbGF0ZWdyYXk6ICIjMmY0ZjRmIiwKICAgIGRhcmtzbGF0ZWdyZXk6ICIjMmY0ZjRmIiwKICAgIGRhcmt0dXJxdW9pc2U6ICIjMDBjZWQxIiwKICAgIGRhcmt2aW9sZXQ6ICIjOTQwMGQzIiwKICAgIGRlZXBwaW5rOiAiI2ZmMTQ5MyIsCiAgICBkZWVwc2t5Ymx1ZTogIiMwMGJmZmYiLAogICAgZGltZ3JheTogIiM2OTY5NjkiLAogICAgZGltZ3JleTogIiM2OTY5NjkiLAogICAgZG9kZ2VyYmx1ZTogIiMxZTkwZmYiLAogICAgZmlyZWJyaWNrOiAiI2IyMjIyMiIsCiAgICBmbG9yYWx3aGl0ZTogIiNmZmZhZjAiLAogICAgZm9yZXN0Z3JlZW46ICIjMjI4YjIyIiwKICAgIGZ1Y2hzaWE6ICIjZmYwMGZmIiwKICAgIGdhaW5zYm9ybzogIiNkY2RjZGMiLAogICAgZ2hvc3R3aGl0ZTogIiNmOGY4ZmYiLAogICAgZ29sZDogIiNmZmQ3MDAiLAogICAgZ29sZGVucm9kOiAiI2RhYTUyMCIsCiAgICBncmF5OiAiIzgwODA4MCIsCiAgICBncmVlbjogIiMwMDgwMDAiLAogICAgZ3JlZW55ZWxsb3c6ICIjYWRmZjJmIiwKICAgIGdyZXk6ICIjODA4MDgwIiwKICAgIGhvbmV5ZGV3OiAiI2YwZmZmMCIsCiAgICBob3RwaW5rOiAiI2ZmNjliNCIsCiAgICBpbmRpYW5yZWQ6ICIjY2Q1YzVjIiwKICAgIGluZGlnbzogIiM0YjAwODIiLAogICAgaXZvcnk6ICIjZmZmZmYwIiwKICAgIGtoYWtpOiAiI2YwZTY4YyIsCiAgICBsYXZlbmRlcjogIiNlNmU2ZmEiLAogICAgbGF2ZW5kZXJibHVzaDogIiNmZmYwZjUiLAogICAgbGF3bmdyZWVuOiAiIzdjZmMwMCIsCiAgICBsZW1vbmNoaWZmb246ICIjZmZmYWNkIiwKICAgIGxpZ2h0Ymx1ZTogIiNhZGQ4ZTYiLAogICAgbGlnaHRjb3JhbDogIiNmMDgwODAiLAogICAgbGlnaHRjeWFuOiAiI2UwZmZmZiIsCiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogIiNmYWZhZDIiLAogICAgbGlnaHRncmF5OiAiI2QzZDNkMyIsCiAgICBsaWdodGdyZWVuOiAiIzkwZWU5MCIsCiAgICBsaWdodGdyZXk6ICIjZDNkM2QzIiwKICAgIGxpZ2h0cGluazogIiNmZmI2YzEiLAogICAgbGlnaHRzYWxtb246ICIjZmZhMDdhIiwKICAgIGxpZ2h0c2VhZ3JlZW46ICIjMjBiMmFhIiwKICAgIGxpZ2h0c2t5Ymx1ZTogIiM4N2NlZmEiLAogICAgbGlnaHRzbGF0ZWdyYXk6ICIjNzc4ODk5IiwKICAgIGxpZ2h0c2xhdGVncmV5OiAiIzc3ODg5OSIsCiAgICBsaWdodHN0ZWVsYmx1ZTogIiNiMGM0ZGUiLAogICAgbGlnaHR5ZWxsb3c6ICIjZmZmZmUwIiwKICAgIGxpbWU6ICIjMDBmZjAwIiwKICAgIGxpbWVncmVlbjogIiMzMmNkMzIiLAogICAgbGluZW46ICIjZmFmMGU2IiwKICAgIG1hZ2VudGE6ICIjZmYwMGZmIiwKICAgIG1hcm9vbjogIiM4MDAwMDAiLAogICAgbWVkaXVtYXF1YW1hcmluZTogIiM2NmNkYWEiLAogICAgbWVkaXVtYmx1ZTogIiMwMDAwY2QiLAogICAgbWVkaXVtb3JjaGlkOiAiI2JhNTVkMyIsCiAgICBtZWRpdW1wdXJwbGU6ICIjOTM3MGRiIiwKICAgIG1lZGl1bXNlYWdyZWVuOiAiIzNjYjM3MSIsCiAgICBtZWRpdW1zbGF0ZWJsdWU6ICIjN2I2OGVlIiwKICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAiIzAwZmE5YSIsCiAgICBtZWRpdW10dXJxdW9pc2U6ICIjNDhkMWNjIiwKICAgIG1lZGl1bXZpb2xldHJlZDogIiNjNzE1ODUiLAogICAgbWlkbmlnaHRibHVlOiAiIzE5MTk3MCIsCiAgICBtaW50Y3JlYW06ICIjZjVmZmZhIiwKICAgIG1pc3R5cm9zZTogIiNmZmU0ZTEiLAogICAgbW9jY2FzaW46ICIjZmZlNGI1IiwKICAgIG5hdmFqb3doaXRlOiAiI2ZmZGVhZCIsCiAgICBuYXZ5OiAiIzAwMDA4MCIsCiAgICBvbGRsYWNlOiAiI2ZkZjVlNiIsCiAgICBvbGl2ZTogIiM4MDgwMDAiLAogICAgb2xpdmVkcmFiOiAiIzZiOGUyMyIsCiAgICBvcmFuZ2U6ICIjZmZhNTAwIiwKICAgIG9yYW5nZXJlZDogIiNmZjQ1MDAiLAogICAgb3JjaGlkOiAiI2RhNzBkNiIsCiAgICBwYWxlZ29sZGVucm9kOiAiI2VlZThhYSIsCiAgICBwYWxlZ3JlZW46ICIjOThmYjk4IiwKICAgIHBhbGV0dXJxdW9pc2U6ICIjYWZlZWVlIiwKICAgIHBhbGV2aW9sZXRyZWQ6ICIjZGI3MDkzIiwKICAgIHBhcGF5YXdoaXA6ICIjZmZlZmQ1IiwKICAgIHBlYWNocHVmZjogIiNmZmRhYjkiLAogICAgcGVydTogIiNjZDg1M2YiLAogICAgcGluazogIiNmZmMwY2IiLAogICAgcGx1bTogIiNkZGEwZGQiLAogICAgcG93ZGVyYmx1ZTogIiNiMGUwZTYiLAogICAgcHVycGxlOiAiIzgwMDA4MCIsCiAgICByZWQ6ICIjZmYwMDAwIiwKICAgIHJvc3licm93bjogIiNiYzhmOGYiLAogICAgcm95YWxibHVlOiAiIzQxNjllMSIsCiAgICBzYWRkbGVicm93bjogIiM4YjQ1MTMiLAogICAgc2FsbW9uOiAiI2ZhODA3MiIsCiAgICBzYW5keWJyb3duOiAiI2Y0YTQ2MCIsCiAgICBzZWFncmVlbjogIiMyZThiNTciLAogICAgc2Vhc2hlbGw6ICIjZmZmNWVlIiwKICAgIHNpZW5uYTogIiNhMDUyMmQiLAogICAgc2lsdmVyOiAiI2MwYzBjMCIsCiAgICBza3libHVlOiAiIzg3Y2VlYiIsCiAgICBzbGF0ZWJsdWU6ICIjNmE1YWNkIiwKICAgIHNsYXRlZ3JheTogIiM3MDgwOTAiLAogICAgc2xhdGVncmV5OiAiIzcwODA5MCIsCiAgICBzbm93OiAiI2ZmZmFmYSIsCiAgICBzcHJpbmdncmVlbjogIiMwMGZmN2YiLAogICAgc3RlZWxibHVlOiAiIzQ2ODJiNCIsCiAgICB0YW46ICIjZDJiNDhjIiwKICAgIHRlYWw6ICIjMDA4MDgwIiwKICAgIHRoaXN0bGU6ICIjZDhiZmQ4IiwKICAgIHRvbWF0bzogIiNmZjYzNDciLAogICAgdHVycXVvaXNlOiAiIzQwZTBkMCIsCiAgICB2aW9sZXQ6ICIjZWU4MmVlIiwKICAgIHdoZWF0OiAiI2Y1ZGViMyIsCiAgICB3aGl0ZTogIiNmZmZmZmYiLAogICAgd2hpdGVzbW9rZTogIiNmNWY1ZjUiLAogICAgeWVsbG93OiAiI2ZmZmYwMCIsCiAgICB5ZWxsb3dncmVlbjogIiM5YWNkMzIiCiAgfSk7CiAgZDNfcmdiX25hbWVzLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgZDNfcmdiX25hbWVzLnNldChrZXksIGQzX3JnYl9wYXJzZSh2YWx1ZSwgZDNfcmdiLCBkM19oc2xfcmdiKSk7CiAgfSk7CiAgZDMuaHNsID0gZnVuY3Rpb24oaCwgcywgbCkgewogICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoIGluc3RhbmNlb2YgZDNfSHNsID8gZDNfaHNsKGguaCwgaC5zLCBoLmwpIDogZDNfcmdiX3BhcnNlKCIiICsgaCwgZDNfcmdiX2hzbCwgZDNfaHNsKSA6IGQzX2hzbCgraCwgK3MsICtsKTsKICB9OwogIHZhciBkM19oc2xQcm90b3R5cGUgPSBkM19Ic2wucHJvdG90eXBlID0gbmV3IGQzX0NvbG9yOwogIGQzX2hzbFByb3RvdHlwZS5icmlnaHRlciA9IGZ1bmN0aW9uKGspIHsKICAgIGsgPSBNYXRoLnBvdyguNywgYXJndW1lbnRzLmxlbmd0aCA\/IGsgOiAxKTsKICAgIHJldHVybiBkM19oc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAvIGspOwogIH07CiAgZDNfaHNsUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHsKICAgIGsgPSBNYXRoLnBvdyguNywgYXJndW1lbnRzLmxlbmd0aCA\/IGsgOiAxKTsKICAgIHJldHVybiBkM19oc2wodGhpcy5oLCB0aGlzLnMsIGsgKiB0aGlzLmwpOwogIH07CiAgZDNfaHNsUHJvdG90eXBlLnJnYiA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGQzX2hzbF9yZ2IodGhpcy5oLCB0aGlzLnMsIHRoaXMubCk7CiAgfTsKICBkMy5oY2wgPSBmdW5jdGlvbihoLCBjLCBsKSB7CiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA\/IGggaW5zdGFuY2VvZiBkM19IY2wgPyBkM19oY2woaC5oLCBoLmMsIGgubCkgOiBoIGluc3RhbmNlb2YgZDNfTGFiID8gZDNfbGFiX2hjbChoLmwsIGguYSwgaC5iKSA6IGQzX2xhYl9oY2woKGggPSBkM19yZ2JfbGFiKChoID0gZDMucmdiKGgpKS5yLCBoLmcsIGguYikpLmwsIGguYSwgaC5iKSA6IGQzX2hjbCgraCwgK2MsICtsKTsKICB9OwogIHZhciBkM19oY2xQcm90b3R5cGUgPSBkM19IY2wucHJvdG90eXBlID0gbmV3IGQzX0NvbG9yOwogIGQzX2hjbFByb3RvdHlwZS5icmlnaHRlciA9IGZ1bmN0aW9uKGspIHsKICAgIHJldHVybiBkM19oY2wodGhpcy5oLCB0aGlzLmMsIE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA\/IGsgOiAxKSkpOwogIH07CiAgZDNfaGNsUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHsKICAgIHJldHVybiBkM19oY2wodGhpcy5oLCB0aGlzLmMsIE1hdGgubWF4KDAsIHRoaXMubCAtIGQzX2xhYl9LICogKGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSkpKTsKICB9OwogIGQzX2hjbFByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBkM19oY2xfbGFiKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwpLnJnYigpOwogIH07CiAgZDMubGFiID0gZnVuY3Rpb24obCwgYSwgYikgewogICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBsIGluc3RhbmNlb2YgZDNfTGFiID8gZDNfbGFiKGwubCwgbC5hLCBsLmIpIDogbCBpbnN0YW5jZW9mIGQzX0hjbCA\/IGQzX2hjbF9sYWIobC5sLCBsLmMsIGwuaCkgOiBkM19yZ2JfbGFiKChsID0gZDMucmdiKGwpKS5yLCBsLmcsIGwuYikgOiBkM19sYWIoK2wsICthLCArYik7CiAgfTsKICB2YXIgZDNfbGFiX0sgPSAxODsKICB2YXIgZDNfbGFiX1ggPSAuOTUwNDcsIGQzX2xhYl9ZID0gMSwgZDNfbGFiX1ogPSAxLjA4ODgzOwogIHZhciBkM19sYWJQcm90b3R5cGUgPSBkM19MYWIucHJvdG90eXBlID0gbmV3IGQzX0NvbG9yOwogIGQzX2xhYlByb3RvdHlwZS5icmlnaHRlciA9IGZ1bmN0aW9uKGspIHsKICAgIHJldHVybiBkM19sYWIoTWF0aC5taW4oMTAwLCB0aGlzLmwgKyBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSwgdGhpcy5hLCB0aGlzLmIpOwogIH07CiAgZDNfbGFiUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHsKICAgIHJldHVybiBkM19sYWIoTWF0aC5tYXgoMCwgdGhpcy5sIC0gZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA\/IGsgOiAxKSksIHRoaXMuYSwgdGhpcy5iKTsKICB9OwogIGQzX2xhYlByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBkM19sYWJfcmdiKHRoaXMubCwgdGhpcy5hLCB0aGlzLmIpOwogIH07CiAgdmFyIGQzX3NlbGVjdCA9IGZ1bmN0aW9uKHMsIG4pIHsKICAgIHJldHVybiBuLnF1ZXJ5U2VsZWN0b3Iocyk7CiAgfSwgZDNfc2VsZWN0QWxsID0gZnVuY3Rpb24ocywgbikgewogICAgcmV0dXJuIG4ucXVlcnlTZWxlY3RvckFsbChzKTsKICB9LCBkM19zZWxlY3RSb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBkM19zZWxlY3RNYXRjaGVyID0gZDNfc2VsZWN0Um9vdC5tYXRjaGVzU2VsZWN0b3IgfHwgZDNfc2VsZWN0Um9vdC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZDNfc2VsZWN0Um9vdC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZDNfc2VsZWN0Um9vdC5tc01hdGNoZXNTZWxlY3RvciB8fCBkM19zZWxlY3RSb290Lm9NYXRjaGVzU2VsZWN0b3IsIGQzX3NlbGVjdE1hdGNoZXMgPSBmdW5jdGlvbihuLCBzKSB7CiAgICByZXR1cm4gZDNfc2VsZWN0TWF0Y2hlci5jYWxsKG4sIHMpOwogIH07CiAgaWYgKHR5cGVvZiBTaXp6bGUgPT09ICJmdW5jdGlvbiIpIHsKICAgIGQzX3NlbGVjdCA9IGZ1bmN0aW9uKHMsIG4pIHsKICAgICAgcmV0dXJuIFNpenpsZShzLCBuKVswXSB8fCBudWxsOwogICAgfTsKICAgIGQzX3NlbGVjdEFsbCA9IGZ1bmN0aW9uKHMsIG4pIHsKICAgICAgcmV0dXJuIFNpenpsZS51bmlxdWVTb3J0KFNpenpsZShzLCBuKSk7CiAgICB9OwogICAgZDNfc2VsZWN0TWF0Y2hlcyA9IFNpenpsZS5tYXRjaGVzU2VsZWN0b3I7CiAgfQogIHZhciBkM19zZWxlY3Rpb25Qcm90b3R5cGUgPSBbXTsKICBkMy5zZWxlY3Rpb24gPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBkM19zZWxlY3Rpb25Sb290OwogIH07CiAgZDMuc2VsZWN0aW9uLnByb3RvdHlwZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZTsKICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHsKICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGUsIGdyb3VwLCBub2RlOwogICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gImZ1bmN0aW9uIikgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpOwogICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkgewogICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTsKICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IChncm91cCA9IHRoaXNbal0pLnBhcmVudE5vZGU7CiAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7CiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgewogICAgICAgICAgc3ViZ3JvdXAucHVzaChzdWJub2RlID0gc2VsZWN0b3IuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpKSk7CiAgICAgICAgICBpZiAoc3Vibm9kZSAmJiAiX19kYXRhX18iIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdWJncm91cC5wdXNoKG51bGwpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIGQzX3NlbGVjdGlvbihzdWJncm91cHMpOwogIH07CiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CiAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBub2RlOwogICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gImZ1bmN0aW9uIikgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3JBbGwoc2VsZWN0b3IpOwogICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkgewogICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7CiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgewogICAgICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBkM19hcnJheShzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGkpKSk7CiAgICAgICAgICBzdWJncm91cC5wYXJlbnROb2RlID0gbm9kZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTsKICB9OwogIGQzX3NlbGVjdGlvblByb3RvdHlwZS5hdHRyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgewogICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICJzdHJpbmciKSB7CiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTsKICAgICAgICBuYW1lID0gZDMubnMucXVhbGlmeShuYW1lKTsKICAgICAgICByZXR1cm4gbmFtZS5sb2NhbCA\/IG5vZGUuZ2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCkgOiBub2RlLmdldEF0dHJpYnV0ZShuYW1lKTsKICAgICAgfQogICAgICBmb3IgKHZhbHVlIGluIG5hbWUpIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fYXR0cih2YWx1ZSwgbmFtZVt2YWx1ZV0pKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9hdHRyKG5hbWUsIHZhbHVlKSk7CiAgfTsKICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuY2xhc3NlZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHsKICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAic3RyaW5nIikgewogICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCksIG4gPSAobmFtZSA9IG5hbWUudHJpbSgpLnNwbGl0KC9efFxzKy9nKSkubGVuZ3RoLCBpID0gLTE7CiAgICAgICAgaWYgKHZhbHVlID0gbm9kZS5jbGFzc0xpc3QpIHsKICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIXZhbHVlLmNvbnRhaW5zKG5hbWVbaV0pKSByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhbHVlID0gbm9kZS5jbGFzc05hbWU7CiAgICAgICAgICBpZiAodmFsdWUuYmFzZVZhbCAhPSBudWxsKSB2YWx1ZSA9IHZhbHVlLmJhc2VWYWw7CiAgICAgICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFkM19zZWxlY3Rpb25fY2xhc3NlZFJlKG5hbWVbaV0pLnRlc3QodmFsdWUpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9jbGFzc2VkKHZhbHVlLCBuYW1lW3ZhbHVlXSkpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpKTsKICB9OwogIGQzX3NlbGVjdGlvblByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkgewogICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgaWYgKG4gPCAzKSB7CiAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gInN0cmluZyIpIHsKICAgICAgICBpZiAobiA8IDIpIHZhbHVlID0gIiI7CiAgICAgICAgZm9yIChwcmlvcml0eSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3N0eWxlKHByaW9yaXR5LCBuYW1lW3ByaW9yaXR5XSwgdmFsdWUpKTsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgICBpZiAobiA8IDIpIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm5vZGUoKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTsKICAgICAgcHJpb3JpdHkgPSAiIjsKICAgIH0KICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkpOwogIH07CiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgewogICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICJzdHJpbmciKSByZXR1cm4gdGhpcy5ub2RlKClbbmFtZV07CiAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9wcm9wZXJ0eSh2YWx1ZSwgbmFtZVt2YWx1ZV0pKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9wcm9wZXJ0eShuYW1lLCB2YWx1ZSkpOwogIH07CiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAxID8gdGhpcy5ub2RlKCkudGV4dENvbnRlbnQgOiB0aGlzLmVhY2godHlwZW9mIHZhbHVlID09PSAiZnVuY3Rpb24iID8gZnVuY3Rpb24oKSB7CiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA\/ICIiIDogdjsKICAgIH0gOiB2YWx1ZSA9PSBudWxsID8gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSAiIjsKICAgIH0gOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlOwogICAgfSk7CiAgfTsKICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaHRtbCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyB0aGlzLm5vZGUoKS5pbm5lckhUTUwgOiB0aGlzLmVhY2godHlwZW9mIHZhbHVlID09PSAiZnVuY3Rpb24iID8gZnVuY3Rpb24oKSB7CiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyAiIiA6IHY7CiAgICB9IDogdmFsdWUgPT0gbnVsbCA\/IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmlubmVySFRNTCA9ICIiOwogICAgfSA6IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlOwogICAgfSk7CiAgfTsKICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSkgewogICAgZnVuY3Rpb24gYXBwZW5kKCkgewogICAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModGhpcy5uYW1lc3BhY2VVUkksIG5hbWUpKTsKICAgIH0KICAgIGZ1bmN0aW9uIGFwcGVuZE5TKCkgewogICAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCkpOwogICAgfQogICAgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSk7CiAgICByZXR1cm4gdGhpcy5zZWxlY3QobmFtZS5sb2NhbCA\\/IGQzX3NlbGVjdGlvblJvb3Quc2VsZWN0KHNlbGVjdG9yKSA6IGQzX3NlbGVjdGlvbihbIFsgc2VsZWN0b3IgXSBdKTsKICB9OwogIGQzLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSAic3RyaW5nIiA\/IGQzX3NlbGVjdGlvblJvb3Quc2VsZWN0QWxsKHNlbGVjdG9yKSA6IGQzX3NlbGVjdGlvbihbIGQzX2FycmF5KHNlbGVjdG9yKSBdKTsKICB9OwogIHZhciBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUgPSBbXTsKICBkMy5zZWxlY3Rpb24uZW50ZXIgPSBkM19zZWxlY3Rpb25fZW50ZXI7CiAgZDMuc2VsZWN0aW9uLmVudGVyLnByb3RvdHlwZSA9IGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZTsKICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuYXBwZW5kID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmFwcGVuZDsKICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuaW5zZXJ0ID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmluc2VydDsKICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuZW1wdHkgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZW1wdHk7CiAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLm5vZGUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUubm9kZTsKICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHsKICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGUsIHVwZ3JvdXAsIGdyb3VwLCBub2RlOwogICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkgewogICAgICB1cGdyb3VwID0gKGdyb3VwID0gdGhpc1tqXSkudXBkYXRlOwogICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTsKICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IGdyb3VwLnBhcmVudE5vZGU7CiAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7CiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgewogICAgICAgICAgc3ViZ3JvdXAucHVzaCh1cGdyb3VwW2ldID0gc3Vibm9kZSA9IHNlbGVjdG9yLmNhbGwoZ3JvdXAucGFyZW50Tm9kZSwgbm9kZS5fX2RhdGFfXywgaSkpOwogICAgICAgICAgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobnVsbCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7CiAgfTsKICB2YXIgZDNfdHJhbnNpdGlvblByb3RvdHlwZSA9IFtdLCBkM190cmFuc2l0aW9uTmV4dElkID0gMCwgZDNfdHJhbnNpdGlvbklkID0gMCwgZDNfdHJhbnNpdGlvbkRlZmF1bHREZWxheSA9IDAsIGQzX3RyYW5zaXRpb25EZWZhdWx0RHVyYXRpb24gPSAyNTAsIGQzX3RyYW5zaXRpb25EZWZhdWx0RWFzZSA9IGQzLmVhc2UoImN1YmljLWluLW91dCIpLCBkM190cmFuc2l0aW9uRGVsYXkgPSBkM190cmFuc2l0aW9uRGVmYXVsdERlbGF5LCBkM190cmFuc2l0aW9uRHVyYXRpb24gPSBkM190cmFuc2l0aW9uRGVmYXVsdER1cmF0aW9uLCBkM190cmFuc2l0aW9uRWFzZSA9IGQzX3RyYW5zaXRpb25EZWZhdWx0RWFzZTsKICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmNhbGwgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUuY2FsbDsKICBkMy50cmFuc2l0aW9uID0gZnVuY3Rpb24oc2VsZWN0aW9uKSB7CiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA\/IGQzX3RyYW5zaXRpb25JZCA\/IHNlbGVjdGlvbi50cmFuc2l0aW9uKCkgOiBzZWxlY3Rpb24gOiBkM19zZWxlY3Rpb25Sb290LnRyYW5zaXRpb24oKTsKICB9OwogIGQzLnRyYW5zaXRpb24ucHJvdG90eXBlID0gZDNfdHJhbnNpdGlvblByb3RvdHlwZTsKICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CiAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBzdWJub2RlLCBub2RlOwogICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gImZ1bmN0aW9uIikgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpOwogICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkgewogICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTsKICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkgewogICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdG9yLmNhbGwobm9kZS5ub2RlLCBub2RlLm5vZGUuX19kYXRhX18sIGkpKSkgewogICAgICAgICAgaWYgKCJfX2RhdGFfXyIgaW4gbm9kZS5ub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5ub2RlLl9fZGF0YV9fOwogICAgICAgICAgc3ViZ3JvdXAucHVzaCh7CiAgICAgICAgICAgIG5vZGU6IHN1Ym5vZGUsCiAgICAgICAgICAgIGRlbGF5OiBub2RlLmRlbGF5LAogICAgICAgICAgICBkdXJhdGlvbjogbm9kZS5kdXJhdGlvbgogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobnVsbCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gZDNfdHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuaWQsIHRoaXMudGltZSkuZWFzZSh0aGlzLmVhc2UoKSk7CiAgfTsKICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7CiAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBzdWJub2Rlcywgbm9kZTsKICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICJmdW5jdGlvbiIpIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yQWxsKHNlbGVjdG9yKTsKICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHsKICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkgewogICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHsKICAgICAgICAgIHN1Ym5vZGVzID0gc2VsZWN0b3IuY2FsbChub2RlLm5vZGUsIG5vZGUubm9kZS5fX2RhdGFfXywgaSk7CiAgICAgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTsKICAgICAgICAgIGZvciAodmFyIGsgPSAtMSwgbyA9IHN1Ym5vZGVzLmxlbmd0aDsgKytrIDwgbzsgKSB7CiAgICAgICAgICAgIHN1Ymdyb3VwLnB1c2goewogICAgICAgICAgICAgIG5vZGU6IHN1Ym5vZGVzW2tdLAogICAgICAgICAgICAgIGRlbGF5OiBub2RlLmRlbGF5LAogICAgICAgICAgICAgIGR1cmF0aW9uOiBub2RlLmR1cmF0aW9uCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLmlkLCB0aGlzLnRpbWUpLmVhc2UodGhpcy5lYXNlKCkpOwogIH07CiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHsKICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIGdyb3VwLCBub2RlOwogICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09ICJmdW5jdGlvbiIpIGZpbHRlciA9IGQzX3NlbGVjdGlvbl9maWx0ZXIoZmlsdGVyKTsKICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHsKICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7CiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgZmlsdGVyLmNhbGwobm9kZS5ub2RlLCBub2RlLm5vZGUuX19kYXRhX18sIGkpKSB7CiAgICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLmlkLCB0aGlzLnRpbWUpLmVhc2UodGhpcy5lYXNlKCkpOwogIH07CiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5hdHRyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgewogICAgICBmb3IgKHZhbHVlIGluIG5hbWUpIHRoaXMuYXR0clR3ZWVuKHZhbHVlLCBkM190d2VlbkJ5TmFtZShuYW1lW3ZhbHVlXSwgdmFsdWUpKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgZDNfdHdlZW5CeU5hbWUodmFsdWUsIG5hbWUpKTsKICB9OwogIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0clR3ZWVuID0gZnVuY3Rpb24obmFtZU5TLCB0d2VlbikgewogICAgZnVuY3Rpb24gYXR0clR3ZWVuKGQsIGkpIHsKICAgICAgdmFyIGYgPSB0d2Vlbi5jYWxsKHRoaXMsIGQsIGksIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpKTsKICAgICAgcmV0dXJuIGYgPT09IGQzX3R3ZWVuUmVtb3ZlID8gKHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpLCBudWxsKSA6IGYgJiYgZnVuY3Rpb24odCkgewogICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGYodCkpOwogICAgICB9OwogICAgfQogICAgZnVuY3Rpb24gYXR0clR3ZWVuTlMoZCwgaSkgewogICAgICB2YXIgZiA9IHR3ZWVuLmNhbGwodGhpcywgZCwgaSwgdGhpcy5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSk7CiAgICAgIHJldHVybiBmID09PSBkM190d2VlblJlbW92ZSA\/ICh0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpLCBudWxsKSA6IGYgJiYgZnVuY3Rpb24odCkgewogICAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCwgZih0KSk7CiAgICAgIH07CiAgICB9CiAgICB2YXIgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZU5TKTsKICAgIHJldHVybiB0aGlzLnR3ZWVuKCJhdHRyLiIgKyBuYW1lTlMsIG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2Vlbik7CiAgfTsKICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnN0eWxlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7CiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICBpZiAobiA8IDMpIHsKICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAic3RyaW5nIikgewogICAgICAgIGlmIChuIDwgMikgdmFsdWUgPSAiIjsKICAgICAgICBmb3IgKHByaW9yaXR5IGluIG5hbWUpIHRoaXMuc3R5bGVUd2Vlbihwcmlvcml0eSwgZDNfdHdlZW5CeU5hbWUobmFtZVtwcmlvcml0eV0sIHByaW9yaXR5KSwgdmFsdWUpOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CiAgICAgIHByaW9yaXR5ID0gIiI7CiAgICB9CiAgICByZXR1cm4gdGhpcy5zdHlsZVR3ZWVuKG5hbWUsIGQzX3R3ZWVuQnlOYW1lKHZhbHVlLCBuYW1lKSwgcHJpb3JpdHkpOwogIH07CiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zdHlsZVR3ZWVuID0gZnVuY3Rpb24obmFtZSwgdHdlZW4sIHByaW9yaXR5KSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHByaW9yaXR5ID0gIiI7CiAgICByZXR1cm4gdGhpcy50d2Vlbigic3R5bGUuIiArIG5hbWUsIGZ1bmN0aW9uKGQsIGkpIHsKICAgICAgdmFyIGYgPSB0d2Vlbi5jYWxsKHRoaXMsIGQsIGksIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSkpOwogICAgICByZXR1cm4gZiA9PT0gZDNfdHdlZW5SZW1vdmUgPyAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgbnVsbCkgOiBmICYmIGZ1bmN0aW9uKHQpIHsKICAgICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGYodCksIHByaW9yaXR5KTsKICAgICAgfTsKICAgIH0pOwogIH07CiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiB0aGlzLnR3ZWVuKCJ0ZXh0IiwgZnVuY3Rpb24oZCwgaSkgewogICAgICB0aGlzLnRleHRDb250ZW50ID0gdHlwZW9mIHZhbHVlID09PSAiZnVuY3Rpb24iID8gdmFsdWUuY2FsbCh0aGlzLCBkLCBpKSA6IHZhbHVlOwogICAgfSk7CiAgfTsKICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuZWFjaCgiZW5kLnRyYW5zaXRpb24iLCBmdW5jdGlvbigpIHsKICAgICAgdmFyIHA7CiAgICAgIGlmICghdGhpcy5fX3RyYW5zaXRpb25fXyAmJiAocCA9IHRoaXMucGFyZW50Tm9kZSkpIHAucmVtb3ZlQ2hpbGQodGhpcyk7CiAgICB9KTsKICB9OwogIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIHR5cGVvZiB2YWx1ZSA9PT0gImZ1bmN0aW9uIiA\/IGZ1bmN0aW9uKG5vZGUsIGksIGopIHsKICAgICAgbm9kZS5kZWxheSA9IHZhbHVlLmNhbGwobm9kZSA9IG5vZGUubm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikgfCAwOwogICAgfSA6ICh2YWx1ZSA9IHZhbHVlIHwgMCwgZnVuY3Rpb24obm9kZSkgewogICAgICBub2RlLmRlbGF5ID0gdmFsdWU7CiAgICB9KSk7CiAgfTsKICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCB0eXBlb2YgdmFsdWUgPT09ICJmdW5jdGlvbiIgPyBmdW5jdGlvbihub2RlLCBpLCBqKSB7CiAgICAgIG5vZGUuZHVyYXRpb24gPSBNYXRoLm1heCgxLCB2YWx1ZS5jYWxsKG5vZGUgPSBub2RlLm5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopIHwgMCk7CiAgICB9IDogKHZhbHVlID0gTWF0aC5tYXgoMSwgdmFsdWUgfCAwKSwgZnVuY3Rpb24obm9kZSkgewogICAgICBub2RlLmR1cmF0aW9uID0gdmFsdWU7CiAgICB9KSk7CiAgfTsKICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnNlbGVjdChkM190aGlzKTsKICB9OwogIGQzLnR3ZWVuID0gZnVuY3Rpb24oYiwgaW50ZXJwb2xhdGUpIHsKICAgIGZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oZCwgaSwgYSkgewogICAgICB2YXIgdiA9IGIuY2FsbCh0aGlzLCBkLCBpKTsKICAgICAgcmV0dXJuIHYgPT0gbnVsbCA\/IGEgIT0gIiIgJiYgZDNfdHdlZW5SZW1vdmUgOiBhICE9IHYgJiYgaW50ZXJwb2xhdGUoYSwgdiArICIiKTsKICAgIH0KICAgIGZ1bmN0aW9uIHR3ZWVuU3RyaW5nKGQsIGksIGEpIHsKICAgICAgcmV0dXJuIGEgIT0gYiAmJiBpbnRlcnBvbGF0ZShhLCBiKTsKICAgIH0KICAgIHJldHVybiB0eXBlb2YgYiA9PT0gImZ1bmN0aW9uIiA\/IHR3ZWVuRnVuY3Rpb24gOiBiID09IG51bGwgPyBkM190d2Vlbk51bGwgOiAoYiArPSAiIiwgdHdlZW5TdHJpbmcpOwogIH07CiAgdmFyIGQzX3R3ZWVuUmVtb3ZlID0ge307CiAgdmFyIGQzX3RpbWVyX2lkID0gMCwgZDNfdGltZXJfYnlJZCA9IHt9LCBkM190aW1lcl9xdWV1ZSA9IG51bGwsIGQzX3RpbWVyX2ludGVydmFsLCBkM190aW1lcl90aW1lb3V0OwogIGQzLnRpbWVyID0gZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aGVuKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHsKICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBkZWxheSA9IDA7IGVsc2UgaWYgKCFpc0Zpbml0ZShkZWxheSkpIHJldHVybjsKICAgICAgdGhlbiA9IERhdGUubm93KCk7CiAgICB9CiAgICB2YXIgdGltZXIgPSBkM190aW1lcl9ieUlkW2NhbGxiYWNrLmlkXTsKICAgIGlmICh0aW1lciAmJiB0aW1lci5jYWxsYmFjayA9PT0gY2FsbGJhY2spIHsKICAgICAgdGltZXIudGhlbiA9IHRoZW47CiAgICAgIHRpbWVyLmRlbGF5ID0gZGVsYXk7CiAgICB9IGVsc2UgZDNfdGltZXJfYnlJZFtjYWxsYmFjay5pZCA9ICsrZDNfdGltZXJfaWRdID0gZDNfdGltZXJfcXVldWUgPSB7CiAgICAgIGNhbGxiYWNrOiBjYWxsYmFjaywKICAgICAgdGhlbjogdGhlbiwKICAgICAgZGVsYXk6IGRlbGF5LAogICAgICBuZXh0OiBkM190aW1lcl9xdWV1ZQogICAgfTsKICAgIGlmICghZDNfdGltZXJfaW50ZXJ2YWwpIHsKICAgICAgZDNfdGltZXJfdGltZW91dCA9IGNsZWFyVGltZW91dChkM190aW1lcl90aW1lb3V0KTsKICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxOwogICAgICBkM190aW1lcl9mcmFtZShkM190aW1lcl9zdGVwKTsKICAgIH0KICB9OwogIGQzLnRpbWVyLmZsdXNoID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgZWxhcHNlZCwgbm93ID0gRGF0ZS5ub3coKSwgdDEgPSBkM190aW1lcl9xdWV1ZTsKICAgIHdoaWxlICh0MSkgewogICAgICBlbGFwc2VkID0gbm93IC0gdDEudGhlbjsKICAgICAgaWYgKCF0MS5kZWxheSkgdDEuZmx1c2ggPSB0MS5jYWxsYmFjayhlbGFwc2VkKTsKICAgICAgdDEgPSB0MS5uZXh0OwogICAgfQogICAgZDNfdGltZXJfZmx1c2goKTsKICB9OwogIHZhciBkM190aW1lcl9mcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBmdW5jdGlvbihjYWxsYmFjaykgewogICAgc2V0VGltZW91dChjYWxsYmFjaywgMTcpOwogIH07CiAgZDMubW91c2UgPSBmdW5jdGlvbihjb250YWluZXIpIHsKICAgIHJldHVybiBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgZDNfZXZlbnRTb3VyY2UoKSk7CiAgfTsKICB2YXIgZDNfbW91c2VfYnVnNDQwODMgPSAvV2ViS2l0Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID8gLTEgOiAwOwogIGQzLnRvdWNoZXMgPSBmdW5jdGlvbihjb250YWluZXIsIHRvdWNoZXMpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgdG91Y2hlcyA9IGQzX2V2ZW50U291cmNlKCkudG91Y2hlczsKICAgIHJldHVybiB0b3VjaGVzID8gZDNfYXJyYXkodG91Y2hlcykubWFwKGZ1bmN0aW9uKHRvdWNoKSB7CiAgICAgIHZhciBwb2ludCA9IGQzX21vdXNlUG9pbnQoY29udGFpbmVyLCB0b3VjaCk7CiAgICAgIHBvaW50LmlkZW50aWZpZXIgPSB0b3VjaC5pZGVudGlmaWVyOwogICAgICByZXR1cm4gcG9pbnQ7CiAgICB9KSA6IFtdOwogIH07CiAgZDMuc2NhbGUgPSB7fTsKICBkMy5zY2FsZS5saW5lYXIgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBkM19zY2FsZV9saW5lYXIoWyAwLCAxIF0sIFsgMCwgMSBdLCBkMy5pbnRlcnBvbGF0ZSwgZmFsc2UpOwogIH07CiAgZDMuc2NhbGUubG9nID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gZDNfc2NhbGVfbG9nKGQzLnNjYWxlLmxpbmVhcigpLCBkM19zY2FsZV9sb2dwKTsKICB9OwogIHZhciBkM19zY2FsZV9sb2dGb3JtYXQgPSBkMy5mb3JtYXQoIi4wZSIpOwogIGQzX3NjYWxlX2xvZ3AucG93ID0gZnVuY3Rpb24oeCkgewogICAgcmV0dXJuIE1hdGgucG93KDEwLCB4KTsKICB9OwogIGQzX3NjYWxlX2xvZ24ucG93ID0gZnVuY3Rpb24oeCkgewogICAgcmV0dXJuIC1NYXRoLnBvdygxMCwgLXgpOwogIH07CiAgZDMuc2NhbGUucG93ID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gZDNfc2NhbGVfcG93KGQzLnNjYWxlLmxpbmVhcigpLCAxKTsKICB9OwogIGQzLnNjYWxlLnNxcnQgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBkMy5zY2FsZS5wb3coKS5leHBvbmVudCguNSk7CiAgfTsKICBkMy5zY2FsZS5vcmRpbmFsID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gZDNfc2NhbGVfb3JkaW5hbChbXSwgewogICAgICB0OiAicmFuZ2UiLAogICAgICBhOiBbIFtdIF0KICAgIH0pOwogIH07CiAgZDMuc2NhbGUuY2F0ZWdvcnkxMCA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZShkM19jYXRlZ29yeTEwKTsKICB9OwogIGQzLnNjYWxlLmNhdGVnb3J5MjAgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkyMCk7CiAgfTsKICBkMy5zY2FsZS5jYXRlZ29yeTIwYiA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZShkM19jYXRlZ29yeTIwYik7CiAgfTsKICBkMy5zY2FsZS5jYXRlZ29yeTIwYyA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZShkM19jYXRlZ29yeTIwYyk7CiAgfTsKICB2YXIgZDNfY2F0ZWdvcnkxMCA9IFsgIiMxZjc3YjQiLCAiI2ZmN2YwZSIsICIjMmNhMDJjIiwgIiNkNjI3MjgiLCAiIzk0NjdiZCIsICIjOGM1NjRiIiwgIiNlMzc3YzIiLCAiIzdmN2Y3ZiIsICIjYmNiZDIyIiwgIiMxN2JlY2YiIF07CiAgdmFyIGQzX2NhdGVnb3J5MjAgPSBbICIjMWY3N2I0IiwgIiNhZWM3ZTgiLCAiI2ZmN2YwZSIsICIjZmZiYjc4IiwgIiMyY2EwMmMiLCAiIzk4ZGY4YSIsICIjZDYyNzI4IiwgIiNmZjk4OTYiLCAiIzk0NjdiZCIsICIjYzViMGQ1IiwgIiM4YzU2NGIiLCAiI2M0OWM5NCIsICIjZTM3N2MyIiwgIiNmN2I2ZDIiLCAiIzdmN2Y3ZiIsICIjYzdjN2M3IiwgIiNiY2JkMjIiLCAiI2RiZGI4ZCIsICIjMTdiZWNmIiwgIiM5ZWRhZTUiIF07CiAgdmFyIGQzX2NhdGVnb3J5MjBiID0gWyAiIzM5M2I3OSIsICIjNTI1NGEzIiwgIiM2YjZlY2YiLCAiIzljOWVkZSIsICIjNjM3OTM5IiwgIiM4Y2EyNTIiLCAiI2I1Y2Y2YiIsICIjY2VkYjljIiwgIiM4YzZkMzEiLCAiI2JkOWUzOSIsICIjZTdiYTUyIiwgIiNlN2NiOTQiLCAiIzg0M2MzOSIsICIjYWQ0OTRhIiwgIiNkNjYxNmIiLCAiI2U3OTY5YyIsICIjN2I0MTczIiwgIiNhNTUxOTQiLCAiI2NlNmRiZCIsICIjZGU5ZWQ2IiBdOwogIHZhciBkM19jYXRlZ29yeTIwYyA9IFsgIiMzMTgyYmQiLCAiIzZiYWVkNiIsICIjOWVjYWUxIiwgIiNjNmRiZWYiLCAiI2U2NTUwZCIsICIjZmQ4ZDNjIiwgIiNmZGFlNmIiLCAiI2ZkZDBhMiIsICIjMzFhMzU0IiwgIiM3NGM0NzYiLCAiI2ExZDk5YiIsICIjYzdlOWMwIiwgIiM3NTZiYjEiLCAiIzllOWFjOCIsICIjYmNiZGRjIiwgIiNkYWRhZWIiLCAiIzYzNjM2MyIsICIjOTY5Njk2IiwgIiNiZGJkYmQiLCAiI2Q5ZDlkOSIgXTsKICBkMy5zY2FsZS5xdWFudGlsZSA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGQzX3NjYWxlX3F1YW50aWxlKFtdLCBbXSk7CiAgfTsKICBkMy5zY2FsZS5xdWFudGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGQzX3NjYWxlX3F1YW50aXplKDAsIDEsIFsgMCwgMSBdKTsKICB9OwogIGQzLnNjYWxlLnRocmVzaG9sZCA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGQzX3NjYWxlX3RocmVzaG9sZChbIC41IF0sIFsgMCwgMSBdKTsKICB9OwogIGQzLnNjYWxlLmlkZW50aXR5ID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gZDNfc2NhbGVfaWRlbnRpdHkoWyAwLCAxIF0pOwogIH07CiAgZDMuc3ZnID0ge307CiAgZDMuc3ZnLmFyYyA9IGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gYXJjKCkgewogICAgICB2YXIgcjAgPSBpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCByMSA9IG91dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgZDNfc3ZnX2FyY09mZnNldCwgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgZDNfc3ZnX2FyY09mZnNldCwgZGEgPSAoYTEgPCBhMCAmJiAoZGEgPSBhMCwgYTAgPSBhMSwgYTEgPSBkYSksIGExIC0gYTApLCBkZiA9IGRhIDwgTWF0aC5QSSA\/ICIwIiA6ICIxIiwgYzAgPSBNYXRoLmNvcyhhMCksIHMwID0gTWF0aC5zaW4oYTApLCBjMSA9IE1hdGguY29zKGExKSwgczEgPSBNYXRoLnNpbihhMSk7CiAgICAgIHJldHVybiBkYSA+PSBkM19zdmdfYXJjTWF4ID8gcjAgPyAiTTAsIiArIHIxICsgIkEiICsgcjEgKyAiLCIgKyByMSArICIgMCAxLDEgMCwiICsgLXIxICsgIkEiICsgcjEgKyAiLCIgKyByMSArICIgMCAxLDEgMCwiICsgcjEgKyAiTTAsIiArIHIwICsgIkEiICsgcjAgKyAiLCIgKyByMCArICIgMCAxLDAgMCwiICsgLXIwICsgIkEiICsgcjAgKyAiLCIgKyByMCArICIgMCAxLDAgMCwiICsgcjAgKyAiWiIgOiAiTTAsIiArIHIxICsgIkEiICsgcjEgKyAiLCIgKyByMSArICIgMCAxLDEgMCwiICsgLXIxICsgIkEiICsgcjEgKyAiLCIgKyByMSArICIgMCAxLDEgMCwiICsgcjEgKyAiWiIgOiByMCA\\\/IGQzLnRvdWNoZXMocCkuZmlsdGVyKGZ1bmN0aW9uKHApIHsKICAgICAgICAgIHJldHVybiBwLmlkZW50aWZpZXIgPT09IHRvdWNoSWQ7CiAgICAgICAgfSlbMF0gOiBkMy5tb3VzZShwKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBkcmFnbW92ZSgpIHsKICAgICAgICBpZiAoIXRhcmdldC5wYXJlbnROb2RlKSByZXR1cm4gZHJhZ2VuZCgpOwogICAgICAgIHZhciBwID0gcG9pbnQoKSwgZHggPSBwWzBdIC0gb3JpZ2luX1swXSwgZHkgPSBwWzFdIC0gb3JpZ2luX1sxXTsKICAgICAgICBtb3ZlZCB8PSBkeCB8IGR5OwogICAgICAgIG9yaWdpbl8gPSBwOwogICAgICAgIGQzX2V2ZW50Q2FuY2VsKCk7CiAgICAgICAgZXZlbnRfKHsKICAgICAgICAgIHR5cGU6ICJkcmFnIiwKICAgICAgICAgIHg6IHBbMF0gKyBvZmZzZXRbMF0sCiAgICAgICAgICB5OiBwWzFdICsgb2Zmc2V0WzFdLAogICAgICAgICAgZHg6IGR4LAogICAgICAgICAgZHk6IGR5CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gZHJhZ2VuZCgpIHsKICAgICAgICBldmVudF8oewogICAgICAgICAgdHlwZTogImRyYWdlbmQiCiAgICAgICAgfSk7CiAgICAgICAgaWYgKG1vdmVkKSB7CiAgICAgICAgICBkM19ldmVudENhbmNlbCgpOwogICAgICAgICAgaWYgKGQzLmV2ZW50LnRhcmdldCA9PT0gZXZlbnRUYXJnZXQpIHcub24oImNsaWNrLmRyYWciLCBjbGljaywgdHJ1ZSk7CiAgICAgICAgfQogICAgICAgIHcub24odG91Y2hJZCA\/ICJ0b3VjaG1vdmUuZHJhZy0iICsgdG91Y2hJZCA6ICJtb3VzZW1vdmUuZHJhZyIsIG51bGwpLm9uKHRvdWNoSWQgPyAidG91Y2hlbmQuZHJhZy0iICsgdG91Y2hJZCA6ICJtb3VzZXVwLmRyYWciLCBudWxsKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBjbGljaygpIHsKICAgICAgICBkM19ldmVudENhbmNlbCgpOwogICAgICAgIHcub24oImNsaWNrLmRyYWciLCBudWxsKTsKICAgICAgfQogICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgZXZlbnRfID0gZXZlbnQub2YodGFyZ2V0LCBhcmd1bWVudHMpLCBldmVudFRhcmdldCA9IGQzLmV2ZW50LnRhcmdldCwgdG91Y2hJZCA9IGQzLmV2ZW50LnRvdWNoZXMgJiYgZDMuZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uaWRlbnRpZmllciwgb2Zmc2V0LCBvcmlnaW5fID0gcG9pbnQoKSwgbW92ZWQgPSAwOwogICAgICB2YXIgdyA9IGQzLnNlbGVjdCh3aW5kb3cpLm9uKHRvdWNoSWQgPyAidG91Y2htb3ZlLmRyYWctIiArIHRvdWNoSWQgOiAibW91c2Vtb3ZlLmRyYWciLCBkcmFnbW92ZSkub24odG91Y2hJZCA\/ICJ0b3VjaGVuZC5kcmFnLSIgKyB0b3VjaElkIDogIm1vdXNldXAuZHJhZyIsIGRyYWdlbmQsIHRydWUpOwogICAgICBpZiAob3JpZ2luKSB7CiAgICAgICAgb2Zmc2V0ID0gb3JpZ2luLmFwcGx5KHRhcmdldCwgYXJndW1lbnRzKTsKICAgICAgICBvZmZzZXQgPSBbIG9mZnNldC54IC0gb3JpZ2luX1swXSwgb2Zmc2V0LnkgLSBvcmlnaW5fWzFdIF07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb2Zmc2V0ID0gWyAwLCAwIF07CiAgICAgIH0KICAgICAgaWYgKCF0b3VjaElkKSBkM19ldmVudENhbmNlbCgpOwogICAgICBldmVudF8oewogICAgICAgIHR5cGU6ICJkcmFnc3RhcnQiCiAgICAgIH0pOwogICAgfQogICAgdmFyIGV2ZW50ID0gZDNfZXZlbnREaXNwYXRjaChkcmFnLCAiZHJhZyIsICJkcmFnc3RhcnQiLCAiZHJhZ2VuZCIpLCBvcmlnaW4gPSBudWxsOwogICAgZHJhZy5vcmlnaW4gPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9yaWdpbjsKICAgICAgb3JpZ2luID0geDsKICAgICAgcmV0dXJuIGRyYWc7CiAgICB9OwogICAgcmV0dXJuIGQzLnJlYmluZChkcmFnLCBldmVudCwgIm9uIik7CiAgfTsKICBkMy5iZWhhdmlvci56b29tID0gZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiB6b29tKCkgewogICAgICB0aGlzLm9uKCJtb3VzZWRvd24uem9vbSIsIG1vdXNlZG93bikub24oIm1vdXNld2hlZWwuem9vbSIsIG1vdXNld2hlZWwpLm9uKCJtb3VzZW1vdmUuem9vbSIsIG1vdXNlbW92ZSkub24oIkRPTU1vdXNlU2Nyb2xsLnpvb20iLCBtb3VzZXdoZWVsKS5vbigiZGJsY2xpY2suem9vbSIsIGRibGNsaWNrKS5vbigidG91Y2hzdGFydC56b29tIiwgdG91Y2hzdGFydCkub24oInRvdWNobW92ZS56b29tIiwgdG91Y2htb3ZlKS5vbigidG91Y2hlbmQuem9vbSIsIHRvdWNoc3RhcnQpOwogICAgfQogICAgZnVuY3Rpb24gbG9jYXRpb24ocCkgewogICAgICByZXR1cm4gWyAocFswXSAtIHRyYW5zbGF0ZVswXSkgLyBzY2FsZSwgKHBbMV0gLSB0cmFuc2xhdGVbMV0pIC8gc2NhbGUgXTsKICAgIH0KICAgIGZ1bmN0aW9uIHBvaW50KGwpIHsKICAgICAgcmV0dXJuIFsgbFswXSAqIHNjYWxlICsgdHJhbnNsYXRlWzBdLCBsWzFdICogc2NhbGUgKyB0cmFuc2xhdGVbMV0gXTsKICAgIH0KICAgIGZ1bmN0aW9uIHNjYWxlVG8ocykgewogICAgICBzY2FsZSA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgcykpOwogICAgfQogICAgZnVuY3Rpb24gdHJhbnNsYXRlVG8ocCwgbCkgewogICAgICBsID0gcG9pbnQobCk7CiAgICAgIHRyYW5zbGF0ZVswXSArPSBwWzBdIC0gbFswXTsKICAgICAgdHJhbnNsYXRlWzFdICs9IHBbMV0gLSBsWzFdOwogICAgfQogICAgZnVuY3Rpb24gZGlzcGF0Y2goZXZlbnQpIHsKICAgICAgaWYgKHgxKSB4MS5kb21haW4oeDAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeCkgewogICAgICAgIHJldHVybiAoeCAtIHRyYW5zbGF0ZVswXSkgLyBzY2FsZTsKICAgICAgfSkubWFwKHgwLmludmVydCkpOwogICAgICBpZiAoeTEpIHkxLmRvbWFpbih5MC5yYW5nZSgpLm1hcChmdW5jdGlvbih5KSB7CiAgICAgICAgcmV0dXJuICh5IC0gdHJhbnNsYXRlWzFdKSAvIHNjYWxlOwogICAgICB9KS5tYXAoeTAuaW52ZXJ0KSk7CiAgICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGV2ZW50KHsKICAgICAgICB0eXBlOiAiem9vbSIsCiAgICAgICAgc2NhbGU6IHNjYWxlLAogICAgICAgIHRyYW5zbGF0ZTogdHJhbnNsYXRlCiAgICAgIH0pOwogICAgfQogICAgZnVuY3Rpb24gbW91c2Vkb3duKCkgewogICAgICBmdW5jdGlvbiBtb3VzZW1vdmUoKSB7CiAgICAgICAgbW92ZWQgPSAxOwogICAgICAgIHRyYW5zbGF0ZVRvKGQzLm1vdXNlKHRhcmdldCksIGwpOwogICAgICAgIGRpc3BhdGNoKGV2ZW50Xyk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gbW91c2V1cCgpIHsKICAgICAgICBpZiAobW92ZWQpIGQzX2V2ZW50Q2FuY2VsKCk7CiAgICAgICAgdy5vbigibW91c2Vtb3ZlLnpvb20iLCBudWxsKS5vbigibW91c2V1cC56b29tIiwgbnVsbCk7CiAgICAgICAgaWYgKG1vdmVkICYmIGQzLmV2ZW50LnRhcmdldCA9PT0gZXZlbnRUYXJnZXQpIHcub24oImNsaWNrLnpvb20iLCBjbGljaywgdHJ1ZSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gY2xpY2soKSB7CiAgICAgICAgZDNfZXZlbnRDYW5jZWwoKTsKICAgICAgICB3Lm9uKCJjbGljay56b29tIiwgbnVsbCk7CiAgICAgIH0KICAgICAgdmFyIHRhcmdldCA9IHRoaXMsIGV2ZW50XyA9IGV2ZW50Lm9mKHRhcmdldCwgYXJndW1lbnRzKSwgZXZlbnRUYXJnZXQgPSBkMy5ldmVudC50YXJnZXQsIG1vdmVkID0gMCwgdyA9IGQzLnNlbGVjdCh3aW5kb3cpLm9uKCJtb3VzZW1vdmUuem9vbSIsIG1vdXNlbW92ZSkub24oIm1vdXNldXAuem9vbSIsIG1vdXNldXApLCBsID0gbG9jYXRpb24oZDMubW91c2UodGFyZ2V0KSk7CiAgICAgIHdpbmRvdy5mb2N1cygpOwogICAgICBkM19ldmVudENhbmNlbCgpOwogICAgfQogICAgZnVuY3Rpb24gbW91c2V3aGVlbCgpIHsKICAgICAgaWYgKCF0cmFuc2xhdGUwKSB0cmFuc2xhdGUwID0gbG9jYXRpb24oZDMubW91c2UodGhpcykpOwogICAgICBzY2FsZVRvKE1hdGgucG93KDIsIGQzX2JlaGF2aW9yX3pvb21EZWx0YSgpICogLjAwMikgKiBzY2FsZSk7CiAgICAgIHRyYW5zbGF0ZVRvKGQzLm1vdXNlKHRoaXMpLCB0cmFuc2xhdGUwKTsKICAgICAgZGlzcGF0Y2goZXZlbnQub2YodGhpcywgYXJndW1lbnRzKSk7CiAgICB9CiAgICBmdW5jdGlvbiBtb3VzZW1vdmUoKSB7CiAgICAgIHRyYW5zbGF0ZTAgPSBudWxsOwogICAgfQogICAgZnVuY3Rpb24gZGJsY2xpY2soKSB7CiAgICAgIHZhciBwID0gZDMubW91c2UodGhpcyksIGwgPSBsb2NhdGlvbihwKTsKICAgICAgc2NhbGVUbyhkMy5ldmVudC5zaGlmdEtleSA\\/IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBlbmRBbmdsZSkgLSBzdGFydEFuZ2xlKSAvIGQzLnN1bSh2YWx1ZXMpOwogICAgICB2YXIgaW5kZXggPSBkMy5yYW5nZShkYXRhLmxlbmd0aCk7CiAgICAgIGlmIChzb3J0ICE9IG51bGwpIGluZGV4LnNvcnQoc29ydCA9PT0gZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlID8gZnVuY3Rpb24oaSwgaikgewogICAgICAgIHJldHVybiB2YWx1ZXNbal0gLSB2YWx1ZXNbaV07CiAgICAgIH0gOiBmdW5jdGlvbihpLCBqKSB7CiAgICAgICAgcmV0dXJuIHNvcnQoZGF0YVtpXSwgZGF0YVtqXSk7CiAgICAgIH0pOwogICAgICB2YXIgYXJjcyA9IFtdOwogICAgICBpbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGkpIHsKICAgICAgICB2YXIgZDsKICAgICAgICBhcmNzW2ldID0gewogICAgICAgICAgZGF0YTogZGF0YVtpXSwKICAgICAgICAgIHZhbHVlOiBkID0gdmFsdWVzW2ldLAogICAgICAgICAgc3RhcnRBbmdsZTogYSwKICAgICAgICAgIGVuZEFuZ2xlOiBhICs9IGQgKiBrCiAgICAgICAgfTsKICAgICAgfSk7CiAgICAgIHJldHVybiBhcmNzOwogICAgfQogICAgdmFyIHZhbHVlID0gTnVtYmVyLCBzb3J0ID0gZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlLCBzdGFydEFuZ2xlID0gMCwgZW5kQW5nbGUgPSAyICogTWF0aC5QSTsKICAgIHBpZS52YWx1ZSA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWU7CiAgICAgIHZhbHVlID0geDsKICAgICAgcmV0dXJuIHBpZTsKICAgIH07CiAgICBwaWUuc29ydCA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydDsKICAgICAgc29ydCA9IHg7CiAgICAgIHJldHVybiBwaWU7CiAgICB9OwogICAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0QW5nbGU7CiAgICAgIHN0YXJ0QW5nbGUgPSB4OwogICAgICByZXR1cm4gcGllOwogICAgfTsKICAgIHBpZS5lbmRBbmdsZSA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZW5kQW5nbGU7CiAgICAgIGVuZEFuZ2xlID0geDsKICAgICAgcmV0dXJuIHBpZTsKICAgIH07CiAgICByZXR1cm4gcGllOwogIH07CiAgdmFyIGQzX2xheW91dF9waWVTb3J0QnlWYWx1ZSA9IHt9OwogIGQzLmxheW91dC5zdGFjayA9IGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gc3RhY2soZGF0YSwgaW5kZXgpIHsKICAgICAgdmFyIHNlcmllcyA9IGRhdGEubWFwKGZ1bmN0aW9uKGQsIGkpIHsKICAgICAgICByZXR1cm4gdmFsdWVzLmNhbGwoc3RhY2ssIGQsIGkpOwogICAgICB9KTsKICAgICAgdmFyIHBvaW50cyA9IHNlcmllcy5tYXAoZnVuY3Rpb24oZCwgaSkgewogICAgICAgIHJldHVybiBkLm1hcChmdW5jdGlvbih2LCBpKSB7CiAgICAgICAgICByZXR1cm4gWyB4LmNhbGwoc3RhY2ssIHYsIGkpLCB5LmNhbGwoc3RhY2ssIHYsIGkpIF07CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICB2YXIgb3JkZXJzID0gb3JkZXIuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7CiAgICAgIHNlcmllcyA9IGQzLnBlcm11dGUoc2VyaWVzLCBvcmRlcnMpOwogICAgICBwb2ludHMgPSBkMy5wZXJtdXRlKHBvaW50cywgb3JkZXJzKTsKICAgICAgdmFyIG9mZnNldHMgPSBvZmZzZXQuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7CiAgICAgIHZhciBuID0gc2VyaWVzLmxlbmd0aCwgbSA9IHNlcmllc1swXS5sZW5ndGgsIGksIGosIG87CiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHsKICAgICAgICBvdXQuY2FsbChzdGFjaywgc2VyaWVzWzBdW2pdLCBvID0gb2Zmc2V0c1tqXSwgcG9pbnRzWzBdW2pdWzFdKTsKICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSB7CiAgICAgICAgICBvdXQuY2FsbChzdGFjaywgc2VyaWVzW2ldW2pdLCBvICs9IHBvaW50c1tpIC0gMV1bal1bMV0sIHBvaW50c1tpXVtqXVsxXSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBkYXRhOwogICAgfQogICAgdmFyIHZhbHVlcyA9IGQzX2lkZW50aXR5LCBvcmRlciA9IGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdCwgb2Zmc2V0ID0gZDNfbGF5b3V0X3N0YWNrT2Zmc2V0WmVybywgb3V0ID0gZDNfbGF5b3V0X3N0YWNrT3V0LCB4ID0gZDNfbGF5b3V0X3N0YWNrWCwgeSA9IGQzX2xheW91dF9zdGFja1k7CiAgICBzdGFjay52YWx1ZXMgPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZhbHVlczsKICAgICAgdmFsdWVzID0geDsKICAgICAgcmV0dXJuIHN0YWNrOwogICAgfTsKICAgIHN0YWNrLm9yZGVyID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmRlcjsKICAgICAgb3JkZXIgPSB0eXBlb2YgeCA9PT0gImZ1bmN0aW9uIiA\/IHggOiBkM19sYXlvdXRfc3RhY2tPcmRlcnMuZ2V0KHgpIHx8IGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdDsKICAgICAgcmV0dXJuIHN0YWNrOwogICAgfTsKICAgIHN0YWNrLm9mZnNldCA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb2Zmc2V0OwogICAgICBvZmZzZXQgPSB0eXBlb2YgeCA9PT0gImZ1bmN0aW9uIiA\/IHggOiBkM19sYXlvdXRfc3RhY2tPZmZzZXRzLmdldCh4KSB8fCBkM19sYXlvdXRfc3RhY2tPZmZzZXRaZXJvOwogICAgICByZXR1cm4gc3RhY2s7CiAgICB9OwogICAgc3RhY2sueCA9IGZ1bmN0aW9uKHopIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDsKICAgICAgeCA9IHo7CiAgICAgIHJldHVybiBzdGFjazsKICAgIH07CiAgICBzdGFjay55ID0gZnVuY3Rpb24oeikgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5OwogICAgICB5ID0gejsKICAgICAgcmV0dXJuIHN0YWNrOwogICAgfTsKICAgIHN0YWNrLm91dCA9IGZ1bmN0aW9uKHopIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3V0OwogICAgICBvdXQgPSB6OwogICAgICByZXR1cm4gc3RhY2s7CiAgICB9OwogICAgcmV0dXJuIHN0YWNrOwogIH07CiAgdmFyIGQzX2xheW91dF9zdGFja09yZGVycyA9IGQzLm1hcCh7CiAgICAiaW5zaWRlLW91dCI6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCwgaSwgaiwgbWF4ID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrTWF4SW5kZXgpLCBzdW1zID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtKSwgaW5kZXggPSBkMy5yYW5nZShuKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICByZXR1cm4gbWF4W2FdIC0gbWF4W2JdOwogICAgICB9KSwgdG9wID0gMCwgYm90dG9tID0gMCwgdG9wcyA9IFtdLCBib3R0b21zID0gW107CiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHsKICAgICAgICBqID0gaW5kZXhbaV07CiAgICAgICAgaWYgKHRvcCA8IGJvdHRvbSkgewogICAgICAgICAgdG9wICs9IHN1bXNbal07CiAgICAgICAgICB0b3BzLnB1c2goaik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGJvdHRvbSArPSBzdW1zW2pdOwogICAgICAgICAgYm90dG9tcy5wdXNoKGopOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gYm90dG9tcy5yZXZlcnNlKCkuY29uY2F0KHRvcHMpOwogICAgfSwKICAgIHJldmVyc2U6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgcmV0dXJuIGQzLnJhbmdlKGRhdGEubGVuZ3RoKS5yZXZlcnNlKCk7CiAgICB9LAogICAgImRlZmF1bHQiOiBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHQKICB9KTsKICB2YXIgZDNfbGF5b3V0X3N0YWNrT2Zmc2V0cyA9IGQzLm1hcCh7CiAgICBzaWxob3VldHRlOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIG0gPSBkYXRhWzBdLmxlbmd0aCwgc3VtcyA9IFtdLCBtYXggPSAwLCBpLCBqLCBvLCB5MCA9IFtdOwogICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7CiAgICAgICAgZm9yIChpID0gMCwgbyA9IDA7IGkgPCBuOyBpKyspIG8gKz0gZGF0YVtpXVtqXVsxXTsKICAgICAgICBpZiAobyA+IG1heCkgbWF4ID0gbzsKICAgICAgICBzdW1zLnB1c2gobyk7CiAgICAgIH0KICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgewogICAgICAgIHkwW2pdID0gKG1heCAtIHN1bXNbal0pIC8gMjsKICAgICAgfQogICAgICByZXR1cm4geTA7CiAgICB9LAogICAgd2lnZ2xlOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIHggPSBkYXRhWzBdLCBtID0geC5sZW5ndGgsIG1heCA9IDAsIGksIGosIGssIHMxLCBzMiwgczMsIGR4LCBvLCBvMCwgeTAgPSBbXTsKICAgICAgeTBbMF0gPSBvID0gbzAgPSAwOwogICAgICBmb3IgKGogPSAxOyBqIDwgbTsgKytqKSB7CiAgICAgICAgZm9yIChpID0gMCwgczEgPSAwOyBpIDwgbjsgKytpKSBzMSArPSBkYXRhW2ldW2pdWzFdOwogICAgICAgIGZvciAoaSA9IDAsIHMyID0gMCwgZHggPSB4W2pdWzBdIC0geFtqIC0gMV1bMF07IGkgPCBuOyArK2kpIHsKICAgICAgICAgIGZvciAoayA9IDAsIHMzID0gKGRhdGFbaV1bal1bMV0gLSBkYXRhW2ldW2ogLSAxXVsxXSkgLyAoMiAqIGR4KTsgayA8IGk7ICsraykgewogICAgICAgICAgICBzMyArPSAoZGF0YVtrXVtqXVsxXSAtIGRhdGFba11baiAtIDFdWzFdKSAvIGR4OwogICAgICAgICAgfQogICAgICAgICAgczIgKz0gczMgKiBkYXRhW2ldW2pdWzFdOwogICAgICAgIH0KICAgICAgICB5MFtqXSA9IG8gLT0gczEgPyBzMiAvIHMxICogZHggOiAwOwogICAgICAgIGlmIChvIDwgbzApIG8wID0gbzsKICAgICAgfQogICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB5MFtqXSAtPSBvMDsKICAgICAgcmV0dXJuIHkwOwogICAgfSwKICAgIGV4cGFuZDogZnVuY3Rpb24oZGF0YSkgewogICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLCBtID0gZGF0YVswXS5sZW5ndGgsIGsgPSAxIC8gbiwgaSwgaiwgbywgeTAgPSBbXTsKICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgewogICAgICAgIGZvciAoaSA9IDAsIG8gPSAwOyBpIDwgbjsgaSsrKSBvICs9IGRhdGFbaV1bal1bMV07CiAgICAgICAgaWYgKG8pIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIGRhdGFbaV1bal1bMV0gLz0gbzsgZWxzZSBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBkYXRhW2ldW2pdWzFdID0gazsKICAgICAgfQogICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB5MFtqXSA9IDA7CiAgICAgIHJldHVybiB5MDsKICAgIH0sCiAgICB6ZXJvOiBkM19sYXlvdXRfc3RhY2tPZmZzZXRaZXJvCiAgfSk7CiAgZDMubGF5b3V0Lmhpc3RvZ3JhbSA9IGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gaGlzdG9ncmFtKGRhdGEsIGkpIHsKICAgICAgdmFyIGJpbnMgPSBbXSwgdmFsdWVzID0gZGF0YS5tYXAodmFsdWVyLCB0aGlzKSwgcmFuZ2UgPSByYW5nZXIuY2FsbCh0aGlzLCB2YWx1ZXMsIGkpLCB0aHJlc2hvbGRzID0gYmlubmVyLmNhbGwodGhpcywgcmFuZ2UsIHZhbHVlcywgaSksIGJpbiwgaSA9IC0xLCBuID0gdmFsdWVzLmxlbmd0aCwgbSA9IHRocmVzaG9sZHMubGVuZ3RoIC0gMSwgayA9IGZyZXF1ZW5jeSA\/IDEgOiAxIC8gbiwgeDsKICAgICAgd2hpbGUgKCsraSA8IG0pIHsKICAgICAgICBiaW4gPSBiaW5zW2ldID0gW107CiAgICAgICAgYmluLmR4ID0gdGhyZXNob2xkc1tpICsgMV0gLSAoYmluLnggPSB0aHJlc2hvbGRzW2ldKTsKICAgICAgICBiaW4ueSA9IDA7CiAgICAgIH0KICAgICAgaWYgKG0gPiAwKSB7CiAgICAgICAgaSA9IC0xOwogICAgICAgIHdoaWxlICgrK2kgPCBuKSB7CiAgICAgICAgICB4ID0gdmFsdWVzW2ldOwogICAgICAgICAgaWYgKHggPj0gcmFuZ2VbMF0gJiYgeCA8PSByYW5nZVsxXSkgewogICAgICAgICAgICBiaW4gPSBiaW5zW2QzLmJpc2VjdCh0aHJlc2hvbGRzLCB4LCAxLCBtKSAtIDFdOwogICAgICAgICAgICBiaW4ueSArPSBrOwogICAgICAgICAgICBiaW4ucHVzaChkYXRhW2ldKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGJpbnM7CiAgICB9CiAgICB2YXIgZnJlcXVlbmN5ID0gdHJ1ZSwgdmFsdWVyID0gTnVtYmVyLCByYW5nZXIgPSBkM19sYXlvdXRfaGlzdG9ncmFtUmFuZ2UsIGJpbm5lciA9IGQzX2xheW91dF9oaXN0b2dyYW1CaW5TdHVyZ2VzOwogICAgaGlzdG9ncmFtLnZhbHVlID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZXI7CiAgICAgIHZhbHVlciA9IHg7CiAgICAgIHJldHVybiBoaXN0b2dyYW07CiAgICB9OwogICAgaGlzdG9ncmFtLnJhbmdlID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZXI7CiAgICAgIHJhbmdlciA9IGQzX2Z1bmN0b3IoeCk7CiAgICAgIHJldHVybiBoaXN0b2dyYW07CiAgICB9OwogICAgaGlzdG9ncmFtLmJpbnMgPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGJpbm5lcjsKICAgICAgYmlubmVyID0gdHlwZW9mIHggPT09ICJudW1iZXIiID8gZnVuY3Rpb24ocmFuZ2UpIHsKICAgICAgICByZXR1cm4gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpbkZpeGVkKHJhbmdlLCB4KTsKICAgICAgfSA6IGQzX2Z1bmN0b3IoeCk7CiAgICAgIHJldHVybiBoaXN0b2dyYW07CiAgICB9OwogICAgaGlzdG9ncmFtLmZyZXF1ZW5jeSA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZnJlcXVlbmN5OwogICAgICBmcmVxdWVuY3kgPSAhIXg7CiAgICAgIHJldHVybiBoaXN0b2dyYW07CiAgICB9OwogICAgcmV0dXJuIGhpc3RvZ3JhbTsKICB9OwogIGQzLmxheW91dC5oaWVyYXJjaHkgPSBmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIHJlY3Vyc2UoZGF0YSwgZGVwdGgsIG5vZGVzKSB7CiAgICAgIHZhciBjaGlsZHMgPSBjaGlsZHJlbi5jYWxsKGhpZXJhcmNoeSwgZGF0YSwgZGVwdGgpLCBub2RlID0gZDNfbGF5b3V0X2hpZXJhcmNoeUlubGluZSA\/IGRhdGEgOiB7CiAgICAgICAgZGF0YTogZGF0YQogICAgICB9OwogICAgICBub2RlLmRlcHRoID0gZGVwdGg7CiAgICAgIG5vZGVzLnB1c2gobm9kZSk7CiAgICAgIGlmIChjaGlsZHMgJiYgKG4gPSBjaGlsZHMubGVuZ3RoKSkgewogICAgICAgIHZhciBpID0gLTEsIG4sIGMgPSBub2RlLmNoaWxkcmVuID0gW10sIHYgPSAwLCBqID0gZGVwdGggKyAxLCBkOwogICAgICAgIHdoaWxlICgrK2kgPCBuKSB7CiAgICAgICAgICBkID0gcmVjdXJzZShjaGlsZHNbaV0sIGosIG5vZGVzKTsKICAgICAgICAgIGQucGFyZW50ID0gbm9kZTsKICAgICAgICAgIGMucHVzaChkKTsKICAgICAgICAgIHYgKz0gZC52YWx1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKHNvcnQpIGMuc29ydChzb3J0KTsKICAgICAgICBpZiAodmFsdWUpIG5vZGUudmFsdWUgPSB2OwogICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7CiAgICAgICAgbm9kZS52YWx1ZSA9ICt2YWx1ZS5jYWxsKGhpZXJhcmNoeSwgZGF0YSwgZGVwdGgpIHx8IDA7CiAgICAgIH0KICAgICAgcmV0dXJuIG5vZGU7CiAgICB9CiAgICBmdW5jdGlvbiByZXZhbHVlKG5vZGUsIGRlcHRoKSB7CiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sIHYgPSAwOwogICAgICBpZiAoY2hpbGRyZW4gJiYgKG4gPSBjaGlsZHJlbi5sZW5ndGgpKSB7CiAgICAgICAgdmFyIGkgPSAtMSwgbiwgaiA9IGRlcHRoICsgMTsKICAgICAgICB3aGlsZSAoKytpIDwgbikgdiArPSByZXZhbHVlKGNoaWxkcmVuW2ldLCBqKTsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSkgewogICAgICAgIHYgPSArdmFsdWUuY2FsbChoaWVyYXJjaHksIGQzX2xheW91dF9oaWVyYXJjaHlJbmxpbmUgPyBub2RlIDogbm9kZS5kYXRhLCBkZXB0aCkgfHwgMDsKICAgICAgfQogICAgICBpZiAodmFsdWUpIG5vZGUudmFsdWUgPSB2OwogICAgICByZXR1cm4gdjsKICAgIH0KICAgIGZ1bmN0aW9uIGhpZXJhcmNoeShkKSB7CiAgICAgIHZhciBub2RlcyA9IFtdOwogICAgICByZWN1cnNlKGQsIDAsIG5vZGVzKTsKICAgICAgcmV0dXJuIG5vZGVzOwogICAgfQogICAgdmFyIHNvcnQgPSBkM19sYXlvdXRfaGllcmFyY2h5U29ydCwgY2hpbGRyZW4gPSBkM19sYXlvdXRfaGllcmFyY2h5Q2hpbGRyZW4sIHZhbHVlID0gZDNfbGF5b3V0X2hpZXJhcmNoeVZhbHVlOwogICAgaGllcmFyY2h5LnNvcnQgPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnQ7CiAgICAgIHNvcnQgPSB4OwogICAgICByZXR1cm4gaGllcmFyY2h5OwogICAgfTsKICAgIGhpZXJhcmNoeS5jaGlsZHJlbiA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2hpbGRyZW47CiAgICAgIGNoaWxkcmVuID0geDsKICAgICAgcmV0dXJuIGhpZXJhcmNoeTsKICAgIH07CiAgICBoaWVyYXJjaHkudmFsdWUgPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZhbHVlOwogICAgICB2YWx1ZSA9IHg7CiAgICAgIHJldHVybiBoaWVyYXJjaHk7CiAgICB9OwogICAgaGllcmFyY2h5LnJldmFsdWUgPSBmdW5jdGlvbihyb290KSB7CiAgICAgIHJldmFsdWUocm9vdCwgMCk7CiAgICAgIHJldHVybiByb290OwogICAgfTsKICAgIHJldHVybiBoaWVyYXJjaHk7CiAgfTsKICB2YXIgZDNfbGF5b3V0X2hpZXJhcmNoeUlubGluZSA9IGZhbHNlOwogIGQzLmxheW91dC5wYWNrID0gZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBwYWNrKGQsIGkpIHsKICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSksIHJvb3QgPSBub2Rlc1swXTsKICAgICAgcm9vdC54ID0gMDsKICAgICAgcm9vdC55ID0gMDsKICAgICAgZDNfbGF5b3V0X3RyZWVWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHsKICAgICAgICBkLnIgPSBNYXRoLnNxcnQoZC52YWx1ZSk7CiAgICAgIH0pOwogICAgICBkM19sYXlvdXRfdHJlZVZpc2l0QWZ0ZXIocm9vdCwgZDNfbGF5b3V0X3BhY2tTaWJsaW5ncyk7CiAgICAgIHZhciB3ID0gc2l6ZVswXSwgaCA9IHNpemVbMV0sIGsgPSBNYXRoLm1heCgyICogcm9vdC5yIC8gdywgMiAqIHJvb3QuciAvIGgpOwogICAgICBpZiAocGFkZGluZyA+IDApIHsKICAgICAgICB2YXIgZHIgPSBwYWRkaW5nICogayAvIDI7CiAgICAgICAgZDNfbGF5b3V0X3RyZWVWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHsKICAgICAgICAgIGQuciArPSBkcjsKICAgICAgICB9KTsKICAgICAgICBkM19sYXlvdXRfdHJlZVZpc2l0QWZ0ZXIocm9vdCwgZDNfbGF5b3V0X3BhY2tTaWJsaW5ncyk7CiAgICAgICAgZDNfbGF5b3V0X3RyZWVWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHsKICAgICAgICAgIGQuciAtPSBkcjsKICAgICAgICB9KTsKICAgICAgICBrID0gTWF0aC5tYXgoMiAqIHJvb3QuciAvIHcsIDIgKiByb290LnIgLyBoKTsKICAgICAgfQogICAgICBkM19sYXlvdXRfcGFja1RyYW5zZm9ybShyb290LCB3IC8gMiwgaCAvIDIsIDEgLyBrKTsKICAgICAgcmV0dXJuIG5vZGVzOwogICAgfQogICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KGQzX2xheW91dF9wYWNrU29ydCksIHBhZGRpbmcgPSAwLCBzaXplID0gWyAxLCAxIF07CiAgICBwYWNrLnNpemUgPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7CiAgICAgIHNpemUgPSB4OwogICAgICByZXR1cm4gcGFjazsKICAgIH07CiAgICBwYWNrLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBhZGRpbmc7CiAgICAgIHBhZGRpbmcgPSArXzsKICAgICAgcmV0dXJuIHBhY2s7CiAgICB9OwogICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQocGFjaywgaGllcmFyY2h5KTsKICB9OwogIGQzLmxheW91dC5jbHVzdGVyID0gZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBjbHVzdGVyKGQsIGkpIHsKICAgICAgdmFyIG5vZGVzID0gaGllcmFyY2h5LmNhbGwodGhpcywgZCwgaSksIHJvb3QgPSBub2Rlc1swXSwgcHJldmlvdXNOb2RlLCB4ID0gMCwga3gsIGt5OwogICAgICBkM19sYXlvdXRfdHJlZVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkgewogICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47CiAgICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkgewogICAgICAgICAgbm9kZS54ID0gZDNfbGF5b3V0X2NsdXN0ZXJYKGNoaWxkcmVuKTsKICAgICAgICAgIG5vZGUueSA9IGQzX2xheW91dF9jbHVzdGVyWShjaGlsZHJlbik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG5vZGUueCA9IHByZXZpb3VzTm9kZSA\/IHggKz0gc2VwYXJhdGlvbihub2RlLCBwcmV2aW91c05vZGUpIDogMDsKICAgICAgICAgIG5vZGUueSA9IDA7CiAgICAgICAgICBwcmV2aW91c05vZGUgPSBub2RlOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHZhciBsZWZ0ID0gZDNfbGF5b3V0X2NsdXN0ZXJMZWZ0KHJvb3QpLCByaWdodCA9IGQzX2xheW91dF9jbHVzdGVyUmlnaHQocm9vdCksIHgwID0gbGVmdC54IC0gc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLCB4MSA9IHJpZ2h0LnggKyBzZXBhcmF0aW9uKHJpZ2h0LCBsZWZ0KSAvIDI7CiAgICAgIGQzX2xheW91dF90cmVlVmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgbm9kZS54ID0gKG5vZGUueCAtIHgwKSAvICh4MSAtIHgwKSAqIHNpemVbMF07CiAgICAgICAgbm9kZS55ID0gKDEgLSAocm9vdC55ID8gbm9kZS55IC8gcm9vdC55IDogMSkpICogc2l6ZVsxXTsKICAgICAgfSk7CiAgICAgIHJldHVybiBub2RlczsKICAgIH0KICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCkuc29ydChudWxsKS52YWx1ZShudWxsKSwgc2VwYXJhdGlvbiA9IGQzX2xheW91dF90cmVlU2VwYXJhdGlvbiwgc2l6ZSA9IFsgMSwgMSBdOwogICAgY2x1c3Rlci5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzZXBhcmF0aW9uOwogICAgICBzZXBhcmF0aW9uID0geDsKICAgICAgcmV0dXJuIGNsdXN0ZXI7CiAgICB9OwogICAgY2x1c3Rlci5zaXplID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplOwogICAgICBzaXplID0geDsKICAgICAgcmV0dXJuIGNsdXN0ZXI7CiAgICB9OwogICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQoY2x1c3RlciwgaGllcmFyY2h5KTsKICB9OwogIGQzLmxheW91dC50cmVlID0gZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiB0cmVlKGQsIGkpIHsKICAgICAgZnVuY3Rpb24gZmlyc3RXYWxrKG5vZGUsIHByZXZpb3VzU2libGluZykgewogICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sIGxheW91dCA9IG5vZGUuX3RyZWU7CiAgICAgICAgaWYgKGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkgewogICAgICAgICAgdmFyIG4sIGZpcnN0Q2hpbGQgPSBjaGlsZHJlblswXSwgcHJldmlvdXNDaGlsZCwgYW5jZXN0b3IgPSBmaXJzdENoaWxkLCBjaGlsZCwgaSA9IC0xOwogICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsKICAgICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTsKICAgICAgICAgICAgZmlyc3RXYWxrKGNoaWxkLCBwcmV2aW91c0NoaWxkKTsKICAgICAgICAgICAgYW5jZXN0b3IgPSBhcHBvcnRpb24oY2hpbGQsIHByZXZpb3VzQ2hpbGQsIGFuY2VzdG9yKTsKICAgICAgICAgICAgcHJldmlvdXNDaGlsZCA9IGNoaWxkOwogICAgICAgICAgfQogICAgICAgICAgZDNfbGF5b3V0X3RyZWVTaGlmdChub2RlKTsKICAgICAgICAgIHZhciBtaWRwb2ludCA9IC41ICogKGZpcnN0Q2hpbGQuX3RyZWUucHJlbGltICsgY2hpbGQuX3RyZWUucHJlbGltKTsKICAgICAgICAgIGlmIChwcmV2aW91c1NpYmxpbmcpIHsKICAgICAgICAgICAgbGF5b3V0LnByZWxpbSA9IHByZXZpb3VzU2libGluZy5fdHJlZS5wcmVsaW0gKyBzZXBhcmF0aW9uKG5vZGUsIHByZXZpb3VzU2libGluZyk7CiAgICAgICAgICAgIGxheW91dC5tb2QgPSBsYXlvdXQucHJlbGltIC0gbWlkcG9pbnQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsYXlvdXQucHJlbGltID0gbWlkcG9pbnQ7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChwcmV2aW91c1NpYmxpbmcpIHsKICAgICAgICAgICAgbGF5b3V0LnByZWxpbSA9IHByZXZpb3VzU2libGluZy5fdHJlZS5wcmVsaW0gKyBzZXBhcmF0aW9uKG5vZGUsIHByZXZpb3VzU2libGluZyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNlY29uZFdhbGsobm9kZSwgeCkgewogICAgICAgIG5vZGUueCA9IG5vZGUuX3RyZWUucHJlbGltICsgeDsKICAgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuOwogICAgICAgIGlmIChjaGlsZHJlbiAmJiAobiA9IGNoaWxkcmVuLmxlbmd0aCkpIHsKICAgICAgICAgIHZhciBpID0gLTEsIG47CiAgICAgICAgICB4ICs9IG5vZGUuX3RyZWUubW9kOwogICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsKICAgICAgICAgICAgc2Vjb25kV2FsayhjaGlsZHJlbltpXSwgeCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIGFwcG9ydGlvbihub2RlLCBwcmV2aW91c1NpYmxpbmcsIGFuY2VzdG9yKSB7CiAgICAgICAgaWYgKHByZXZpb3VzU2libGluZykgewogICAgICAgICAgdmFyIHZpcCA9IG5vZGUsIHZvcCA9IG5vZGUsIHZpbSA9IHByZXZpb3VzU2libGluZywgdm9tID0gbm9kZS5wYXJlbnQuY2hpbGRyZW5bMF0sIHNpcCA9IHZpcC5fdHJlZS5tb2QsIHNvcCA9IHZvcC5fdHJlZS5tb2QsIHNpbSA9IHZpbS5fdHJlZS5tb2QsIHNvbSA9IHZvbS5fdHJlZS5tb2QsIHNoaWZ0OwogICAgICAgICAgd2hpbGUgKHZpbSA9IGQzX2xheW91dF90cmVlUmlnaHQodmltKSwgdmlwID0gZDNfbGF5b3V0X3RyZWVMZWZ0KHZpcCksIHZpbSAmJiB2aXApIHsKICAgICAgICAgICAgdm9tID0gZDNfbGF5b3V0X3RyZWVMZWZ0KHZvbSk7CiAgICAgICAgICAgIHZvcCA9IGQzX2xheW91dF90cmVlUmlnaHQodm9wKTsKICAgICAgICAgICAgdm9wLl90cmVlLmFuY2VzdG9yID0gbm9kZTsKICAgICAgICAgICAgc2hpZnQgPSB2aW0uX3RyZWUucHJlbGltICsgc2ltIC0gdmlwLl90cmVlLnByZWxpbSAtIHNpcCArIHNlcGFyYXRpb24odmltLCB2aXApOwogICAgICAgICAgICBpZiAoc2hpZnQgPiAwKSB7CiAgICAgICAgICAgICAgZDNfbGF5b3V0X3RyZWVNb3ZlKGQzX2xheW91dF90cmVlQW5jZXN0b3IodmltLCBub2RlLCBhbmNlc3RvciksIG5vZGUsIHNoaWZ0KTsKICAgICAgICAgICAgICBzaXAgKz0gc2hpZnQ7CiAgICAgICAgICAgICAgc29wICs9IHNoaWZ0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNpbSArPSB2aW0uX3RyZWUubW9kOwogICAgICAgICAgICBzaXAgKz0gdmlwLl90cmVlLm1vZDsKICAgICAgICAgICAgc29tICs9IHZvbS5fdHJlZS5tb2Q7CiAgICAgICAgICAgIHNvcCArPSB2b3AuX3RyZWUubW9kOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZpbSAmJiAhZDNfbGF5b3V0X3RyZWVSaWdodCh2b3ApKSB7CiAgICAgICAgICAgIHZvcC5fdHJlZS50aHJlYWQgPSB2aW07CiAgICAgICAgICAgIHZvcC5fdHJlZS5tb2QgKz0gc2ltIC0gc29wOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZpcCAmJiAhZDNfbGF5b3V0X3RyZWVMZWZ0KHZvbSkpIHsKICAgICAgICAgICAgdm9tLl90cmVlLnRocmVhZCA9IHZpcDsKICAgICAgICAgICAgdm9tLl90cmVlLm1vZCArPSBzaXAgLSBzb207CiAgICAgICAgICAgIGFuY2VzdG9yID0gbm9kZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGFuY2VzdG9yOwogICAgICB9CiAgICAgIHZhciBub2RlcyA9IGhpZXJhcmNoeS5jYWxsKHRoaXMsIGQsIGkpLCByb290ID0gbm9kZXNbMF07CiAgICAgIGQzX2xheW91dF90cmVlVmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihub2RlLCBwcmV2aW91c1NpYmxpbmcpIHsKICAgICAgICBub2RlLl90cmVlID0gewogICAgICAgICAgYW5jZXN0b3I6IG5vZGUsCiAgICAgICAgICBwcmVsaW06IDAsCiAgICAgICAgICBtb2Q6IDAsCiAgICAgICAgICBjaGFuZ2U6IDAsCiAgICAgICAgICBzaGlmdDogMCwKICAgICAgICAgIG51bWJlcjogcHJldmlvdXNTaWJsaW5nID8gcHJldmlvdXNTaWJsaW5nLl90cmVlLm51bWJlciArIDEgOiAwCiAgICAgICAgfTsKICAgICAgfSk7CiAgICAgIGZpcnN0V2Fsayhyb290KTsKICAgICAgc2Vjb25kV2Fsayhyb290LCAtcm9vdC5fdHJlZS5wcmVsaW0pOwogICAgICB2YXIgbGVmdCA9IGQzX2xheW91dF90cmVlU2VhcmNoKHJvb3QsIGQzX2xheW91dF90cmVlTGVmdG1vc3QpLCByaWdodCA9IGQzX2xheW91dF90cmVlU2VhcmNoKHJvb3QsIGQzX2xheW91dF90cmVlUmlnaHRtb3N0KSwgZGVlcCA9IGQzX2xheW91dF90cmVlU2VhcmNoKHJvb3QsIGQzX2xheW91dF90cmVlRGVlcGVzdCksIHgwID0gbGVmdC54IC0gc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLCB4MSA9IHJpZ2h0LnggKyBzZXBhcmF0aW9uKHJpZ2h0LCBsZWZ0KSAvIDIsIHkxID0gZGVlcC5kZXB0aCB8fCAxOwogICAgICBkM19sYXlvdXRfdHJlZVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkgewogICAgICAgIG5vZGUueCA9IChub2RlLnggLSB4MCkgLyAoeDEgLSB4MCkgKiBzaXplWzBdOwogICAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggLyB5MSAqIHNpemVbMV07CiAgICAgICAgZGVsZXRlIG5vZGUuX3RyZWU7CiAgICAgIH0pOwogICAgICByZXR1cm4gbm9kZXM7CiAgICB9CiAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLnNvcnQobnVsbCkudmFsdWUobnVsbCksIHNlcGFyYXRpb24gPSBkM19sYXlvdXRfdHJlZVNlcGFyYXRpb24sIHNpemUgPSBbIDEsIDEgXTsKICAgIHRyZWUuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2VwYXJhdGlvbjsKICAgICAgc2VwYXJhdGlvbiA9IHg7CiAgICAgIHJldHVybiB0cmVlOwogICAgfTsKICAgIHRyZWUuc2l6ZSA9IGZ1bmN0aW9uKHgpIHsKICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTsKICAgICAgc2l6ZSA9IHg7CiAgICAgIHJldHVybiB0cmVlOwogICAgfTsKICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHRyZWUsIGhpZXJhcmNoeSk7CiAgfTsKICBkMy5sYXlvdXQudHJlZW1hcCA9IGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gc2NhbGUoY2hpbGRyZW4sIGspIHsKICAgICAgdmFyIGkgPSAtMSwgbiA9IGNoaWxkcmVuLmxlbmd0aCwgY2hpbGQsIGFyZWE7CiAgICAgIHdoaWxlICgrK2kgPCBuKSB7CiAgICAgICAgYXJlYSA9IChjaGlsZCA9IGNoaWxkcmVuW2ldKS52YWx1ZSAqIChrIDwgMCA\/IDAgOiBrKTsKICAgICAgICBjaGlsZC5hcmVhID0gaXNOYU4oYXJlYSkgfHwgYXJlYSA8PSAwID8gMCA6IGFyZWE7CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIHNxdWFyaWZ5KG5vZGUpIHsKICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjsKICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkgewogICAgICAgIHZhciByZWN0ID0gcGFkKG5vZGUpLCByb3cgPSBbXSwgcmVtYWluaW5nID0gY2hpbGRyZW4uc2xpY2UoKSwgY2hpbGQsIGJlc3QgPSBJbmZpbml0eSwgc2NvcmUsIHUgPSBNYXRoLm1pbihyZWN0LmR4LCByZWN0LmR5KSwgbjsKICAgICAgICBzY2FsZShyZW1haW5pbmcsIHJlY3QuZHggKiByZWN0LmR5IC8gbm9kZS52YWx1ZSk7CiAgICAgICAgcm93LmFyZWEgPSAwOwogICAgICAgIHdoaWxlICgobiA9IHJlbWFpbmluZy5sZW5ndGgpID4gMCkgewogICAgICAgICAgcm93LnB1c2goY2hpbGQgPSByZW1haW5pbmdbbiAtIDFdKTsKICAgICAgICAgIHJvdy5hcmVhICs9IGNoaWxkLmFyZWE7CiAgICAgICAgICBpZiAoKHNjb3JlID0gd29yc3Qocm93LCB1KSkgPD0gYmVzdCkgewogICAgICAgICAgICByZW1haW5pbmcucG9wKCk7CiAgICAgICAgICAgIGJlc3QgPSBzY29yZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJvdy5hcmVhIC09IHJvdy5wb3AoKS5hcmVhOwogICAgICAgICAgICBwb3NpdGlvbihyb3csIHUsIHJlY3QsIGZhbHNlKTsKICAgICAgICAgICAgdSA9IE1hdGgubWluKHJlY3QuZHgsIHJlY3QuZHkpOwogICAgICAgICAgICByb3cubGVuZ3RoID0gcm93LmFyZWEgPSAwOwogICAgICAgICAgICBiZXN0ID0gSW5maW5pdHk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChyb3cubGVuZ3RoKSB7CiAgICAgICAgICBwb3NpdGlvbihyb3csIHUsIHJlY3QsIHRydWUpOwogICAgICAgICAgcm93Lmxlbmd0aCA9IHJvdy5hcmVhID0gMDsKICAgICAgICB9CiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChzcXVhcmlmeSk7CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIHN0aWNraWZ5KG5vZGUpIHsKICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjsKICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkgewogICAgICAgIHZhciByZWN0ID0gcGFkKG5vZGUpLCByZW1haW5pbmcgPSBjaGlsZHJlbi5zbGljZSgpLCBjaGlsZCwgcm93ID0gW107CiAgICAgICAgc2NhbGUocmVtYWluaW5nLCByZWN0LmR4ICogcmVjdC5keSAvIG5vZGUudmFsdWUpOwogICAgICAgIHJvdy5hcmVhID0gMDsKICAgICAgICB3aGlsZSAoY2hpbGQgPSByZW1haW5pbmcucG9wKCkpIHsKICAgICAgICAgIHJvdy5wdXNoKGNoaWxkKTsKICAgICAgICAgIHJvdy5hcmVhICs9IGNoaWxkLmFyZWE7CiAgICAgICAgICBpZiAoY2hpbGQueiAhPSBudWxsKSB7CiAgICAgICAgICAgIHBvc2l0aW9uKHJvdywgY2hpbGQueiA\/IHJlY3QuZHggOiByZWN0LmR5LCByZWN0LCAhcmVtYWluaW5nLmxlbmd0aCk7CiAgICAgICAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNoaWxkcmVuLmZvckVhY2goc3RpY2tpZnkpOwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiB3b3JzdChyb3csIHUpIHsKICAgICAgdmFyIHMgPSByb3cuYXJlYSwgciwgcm1heCA9IDAsIHJtaW4gPSBJbmZpbml0eSwgaSA9IC0xLCBuID0gcm93Lmxlbmd0aDsKICAgICAgd2hpbGUgKCsraSA8IG4pIHsKICAgICAgICBpZiAoIShyID0gcm93W2ldLmFyZWEpKSBjb250aW51ZTsKICAgICAgICBpZiAociA8IHJtaW4pIHJtaW4gPSByOwogICAgICAgIGlmIChyID4gcm1heCkgcm1heCA9IHI7CiAgICAgIH0KICAgICAgcyAqPSBzOwogICAgICB1ICo9IHU7CiAgICAgIHJldHVybiBzID8gTWF0aC5tYXgodSAqIHJtYXggKiByYXRpbyAvIHMsIHMgLyAodSAqIHJtaW4gKiByYXRpbykpIDogSW5maW5pdHk7CiAgICB9CiAgICBmdW5jdGlvbiBwb3NpdGlvbihyb3csIHUsIHJlY3QsIGZsdXNoKSB7CiAgICAgIHZhciBpID0gLTEsIG4gPSByb3cubGVuZ3RoLCB4ID0gcmVjdC54LCB5ID0gcmVjdC55LCB2ID0gdSA\/IHJvdW5kKHJvdy5hcmVhIC8gdSkgOiAwLCBvOwogICAgICBpZiAodSA9PSByZWN0LmR4KSB7CiAgICAgICAgaWYgKGZsdXNoIHx8IHYgPiByZWN0LmR5KSB2ID0gcmVjdC5keTsKICAgICAgICB3aGlsZSAoKytpIDwgbikgewogICAgICAgICAgbyA9IHJvd1tpXTsKICAgICAgICAgIG8ueCA9IHg7CiAgICAgICAgICBvLnkgPSB5OwogICAgICAgICAgby5keSA9IHY7CiAgICAgICAgICB4ICs9IG8uZHggPSBNYXRoLm1pbihyZWN0LnggKyByZWN0LmR4IC0geCwgdiA\/IHJvdW5kKG8uYXJlYSAvIHYpIDogMCk7CiAgICAgICAgfQogICAgICAgIG8ueiA9IHRydWU7CiAgICAgICAgby5keCArPSByZWN0LnggKyByZWN0LmR4IC0geDsKICAgICAgICByZWN0LnkgKz0gdjsKICAgICAgICByZWN0LmR5IC09IHY7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGZsdXNoIHx8IHYgPiByZWN0LmR4KSB2ID0gcmVjdC5keDsKICAgICAgICB3aGlsZSAoKytpIDwgbikgewogICAgICAgICAgbyA9IHJvd1tpXTsKICAgICAgICAgIG8ueCA9IHg7CiAgICAgICAgICBvLnkgPSB5OwogICAgICAgICAgby5keCA9IHY7CiAgICAgICAgICB5ICs9IG8uZHkgPSBNYXRoLm1pbihyZWN0LnkgKyByZWN0LmR5IC0geSwgdiA\/IHJvdW5kKG8uYXJlYSAvIHYpIDogMCk7CiAgICAgICAgfQogICAgICAgIG8ueiA9IGZhbHNlOwogICAgICAgIG8uZHkgKz0gcmVjdC55ICsgcmVjdC5keSAtIHk7CiAgICAgICAgcmVjdC54ICs9IHY7CiAgICAgICAgcmVjdC5keCAtPSB2OwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiB0cmVlbWFwKGQpIHsKICAgICAgdmFyIG5vZGVzID0gc3RpY2tpZXMgfHwgaGllcmFyY2h5KGQpLCByb290ID0gbm9kZXNbMF07CiAgICAgIHJvb3QueCA9IDA7CiAgICAgIHJvb3QueSA9IDA7CiAgICAgIHJvb3QuZHggPSBzaXplWzBdOwogICAgICByb290LmR5ID0gc2l6ZVsxXTsKICAgICAgaWYgKHN0aWNraWVzKSBoaWVyYXJjaHkucmV2YWx1ZShyb290KTsKICAgICAgc2NhbGUoWyByb290IF0sIHJvb3QuZHggKiByb290LmR5IC8gcm9vdC52YWx1ZSk7CiAgICAgIChzdGlja2llcyA\/IHN0aWNraWZ5IDogc3F1YXJpZnkpKHJvb3QpOwogICAgICBpZiAoc3RpY2t5KSBzdGlja2llcyA9IG5vZGVzOwogICAgICByZXR1cm4gbm9kZXM7CiAgICB9CiAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLCByb3VuZCA9IE1hdGgucm91bmQsIHNpemUgPSBbIDEsIDEgXSwgcGFkZGluZyA9IG51bGwsIHBhZCA9IGQzX2xheW91dF90cmVlbWFwUGFkTnVsbCwgc3RpY2t5ID0gZmFsc2UsIHN0aWNraWVzLCByYXRpbyA9IC41ICogKDEgKyBNYXRoLnNxcnQoNSkpOwogICAgdHJlZW1hcC5zaXplID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplOwogICAgICBzaXplID0geDsKICAgICAgcmV0dXJuIHRyZWVtYXA7CiAgICB9OwogICAgdHJlZW1hcC5wYWRkaW5nID0gZnVuY3Rpb24oeCkgewogICAgICBmdW5jdGlvbiBwYWRGdW5jdGlvbihub2RlKSB7CiAgICAgICAgdmFyIHAgPSB4LmNhbGwodHJlZW1hcCwgbm9kZSwgbm9kZS5kZXB0aCk7CiAgICAgICAgcmV0dXJuIHAgPT0gbnVsbCA\/IGQzX2xheW91dF90cmVlbWFwUGFkTnVsbChub2RlKSA6IGQzX2xheW91dF90cmVlbWFwUGFkKG5vZGUsIHR5cGVvZiBwID09PSAibnVtYmVyIiA\/IFsgcCwgcCwgcCwgcCBdIDogcCk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gcGFkQ29uc3RhbnQobm9kZSkgewogICAgICAgIHJldHVybiBkM19sYXlvdXRfdHJlZW1hcFBhZChub2RlLCB4KTsKICAgICAgfQogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRkaW5nOwogICAgICB2YXIgdHlwZTsKICAgICAgcGFkID0gKHBhZGRpbmcgPSB4KSA9PSBudWxsID8gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsIDogKHR5cGUgPSB0eXBlb2YgeCkgPT09ICJmdW5jdGlvbiIgPyBwYWRGdW5jdGlvbiA6IHR5cGUgPT09ICJudW1iZXIiID8gKHggPSBbIHgsIHgsIHgsIHggXSwgcGFkQ29uc3RhbnQpIDogcGFkQ29uc3RhbnQ7CiAgICAgIHJldHVybiB0cmVlbWFwOwogICAgfTsKICAgIHRyZWVtYXAucm91bmQgPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJvdW5kICE9IE51bWJlcjsKICAgICAgcm91bmQgPSB4ID8gTWF0aC5yb3VuZCA6IE51bWJlcjsKICAgICAgcmV0dXJuIHRyZWVtYXA7CiAgICB9OwogICAgdHJlZW1hcC5zdGlja3kgPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0aWNreTsKICAgICAgc3RpY2t5ID0geDsKICAgICAgc3RpY2tpZXMgPSBudWxsOwogICAgICByZXR1cm4gdHJlZW1hcDsKICAgIH07CiAgICB0cmVlbWFwLnJhdGlvID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYXRpbzsKICAgICAgcmF0aW8gPSB4OwogICAgICByZXR1cm4gdHJlZW1hcDsKICAgIH07CiAgICByZXR1cm4gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZCh0cmVlbWFwLCBoaWVyYXJjaHkpOwogIH07CiAgZDMuY3N2ID0gZDNfZHN2KCIsIiwgInRleHQvY3N2Iik7CiAgZDMudHN2ID0gZDNfZHN2KCIJIiwgInRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXMiKTsKICBkMy5nZW8gPSB7fTsKICB2YXIgZDNfZ2VvX3JhZGlhbnMgPSBNYXRoLlBJIC8gMTgwOwogIGQzLmdlby5hemltdXRoYWwgPSBmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIGF6aW11dGhhbChjb29yZGluYXRlcykgewogICAgICB2YXIgeDEgPSBjb29yZGluYXRlc1swXSAqIGQzX2dlb19yYWRpYW5zIC0geDAsIHkxID0gY29vcmRpbmF0ZXNbMV0gKiBkM19nZW9fcmFkaWFucywgY3gxID0gTWF0aC5jb3MoeDEpLCBzeDEgPSBNYXRoLnNpbih4MSksIGN5MSA9IE1hdGguY29zKHkxKSwgc3kxID0gTWF0aC5zaW4oeTEpLCBjYyA9IG1vZGUgIT09ICJvcnRob2dyYXBoaWMiID8gc3kwICogc3kxICsgY3kwICogY3kxICogY3gxIDogbnVsbCwgYywgayA9IG1vZGUgPT09ICJzdGVyZW9ncmFwaGljIiA\/IDEgLyAoMSArIGNjKSA6IG1vZGUgPT09ICJnbm9tb25pYyIgPyAxIC8gY2MgOiBtb2RlID09PSAiZXF1aWRpc3RhbnQiID8gKGMgPSBNYXRoLmFjb3MoY2MpLCBjID8gYyAvIE1hdGguc2luKGMpIDogMCkgOiBtb2RlID09PSAiZXF1YWxhcmVhIiA\/IE1hdGguc3FydCgyIC8gKDEgKyBjYykpIDogMSwgeCA9IGsgKiBjeTEgKiBzeDEsIHkgPSBrICogKHN5MCAqIGN5MSAqIGN4MSAtIGN5MCAqIHN5MSk7CiAgICAgIHJldHVybiBbIHNjYWxlICogeCArIHRyYW5zbGF0ZVswXSwgc2NhbGUgKiB5ICsgdHJhbnNsYXRlWzFdIF07CiAgICB9CiAgICB2YXIgbW9kZSA9ICJvcnRob2dyYXBoaWMiLCBvcmlnaW4sIHNjYWxlID0gMjAwLCB0cmFuc2xhdGUgPSBbIDQ4MCwgMjUwIF0sIHgwLCB5MCwgY3kwLCBzeTA7CiAgICBhemltdXRoYWwuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHsKICAgICAgdmFyIHggPSAoY29vcmRpbmF0ZXNbMF0gLSB0cmFuc2xhdGVbMF0pIC8gc2NhbGUsIHkgPSAoY29vcmRpbmF0ZXNbMV0gLSB0cmFuc2xhdGVbMV0pIC8gc2NhbGUsIHAgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSksIGMgPSBtb2RlID09PSAic3RlcmVvZ3JhcGhpYyIgPyAyICogTWF0aC5hdGFuKHApIDogbW9kZSA9PT0gImdub21vbmljIiA\/IE1hdGguYXRhbihwKSA6IG1vZGUgPT09ICJlcXVpZGlzdGFudCIgPyBwIDogbW9kZSA9PT0gImVxdWFsYXJlYSIgPyAyICogTWF0aC5hc2luKC41ICogcCkgOiBNYXRoLmFzaW4ocCksIHNjID0gTWF0aC5zaW4oYyksIGNjID0gTWF0aC5jb3MoYyk7CiAgICAgIHJldHVybiBbICh4MCArIE1hdGguYXRhbjIoeCAqIHNjLCBwICogY3kwICogY2MgKyB5ICogc3kwICogc2MpKSAvIGQzX2dlb19yYWRpYW5zLCBNYXRoLmFzaW4oY2MgKiBzeTAgLSAocCA\/IHkgKiBzYyAqIGN5MCAvIHAgOiAwKSkgLyBkM19nZW9fcmFkaWFucyBdOwogICAgfTsKICAgIGF6aW11dGhhbC5tb2RlID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBtb2RlOwogICAgICBtb2RlID0geCArICIiOwogICAgICByZXR1cm4gYXppbXV0aGFsOwogICAgfTsKICAgIGF6aW11dGhhbC5vcmlnaW4gPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9yaWdpbjsKICAgICAgb3JpZ2luID0geDsKICAgICAgeDAgPSBvcmlnaW5bMF0gKiBkM19nZW9fcmFkaWFuczsKICAgICAgeTAgPSBvcmlnaW5bMV0gKiBkM19nZW9fcmFkaWFuczsKICAgICAgY3kwID0gTWF0aC5jb3MoeTApOwogICAgICBzeTAgPSBNYXRoLnNpbih5MCk7CiAgICAgIHJldHVybiBhemltdXRoYWw7CiAgICB9OwogICAgYXppbXV0aGFsLnNjYWxlID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzY2FsZTsKICAgICAgc2NhbGUgPSAreDsKICAgICAgcmV0dXJuIGF6aW11dGhhbDsKICAgIH07CiAgICBhemltdXRoYWwudHJhbnNsYXRlID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0cmFuc2xhdGU7CiAgICAgIHRyYW5zbGF0ZSA9IFsgK3hbMF0sICt4WzFdIF07CiAgICAgIHJldHVybiBhemltdXRoYWw7CiAgICB9OwogICAgcmV0dXJuIGF6aW11dGhhbC5vcmlnaW4oWyAwLCAwIF0pOwogIH07CiAgZDMuZ2VvLmFsYmVycyA9IGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gYWxiZXJzKGNvb3JkaW5hdGVzKSB7CiAgICAgIHZhciB0ID0gbiAqIChkM19nZW9fcmFkaWFucyAqIGNvb3JkaW5hdGVzWzBdIC0gbG5nMCksIHAgPSBNYXRoLnNxcnQoQyAtIDIgKiBuICogTWF0aC5zaW4oZDNfZ2VvX3JhZGlhbnMgKiBjb29yZGluYXRlc1sxXSkpIC8gbjsKICAgICAgcmV0dXJuIFsgc2NhbGUgKiBwICogTWF0aC5zaW4odCkgKyB0cmFuc2xhdGVbMF0sIHNjYWxlICogKHAgKiBNYXRoLmNvcyh0KSAtIHAwKSArIHRyYW5zbGF0ZVsxXSBdOwogICAgfQogICAgZnVuY3Rpb24gcmVsb2FkKCkgewogICAgICB2YXIgcGhpMSA9IGQzX2dlb19yYWRpYW5zICogcGFyYWxsZWxzWzBdLCBwaGkyID0gZDNfZ2VvX3JhZGlhbnMgKiBwYXJhbGxlbHNbMV0sIGxhdDAgPSBkM19nZW9fcmFkaWFucyAqIG9yaWdpblsxXSwgcyA9IE1hdGguc2luKHBoaTEpLCBjID0gTWF0aC5jb3MocGhpMSk7CiAgICAgIGxuZzAgPSBkM19nZW9fcmFkaWFucyAqIG9yaWdpblswXTsKICAgICAgbiA9IC41ICogKHMgKyBNYXRoLnNpbihwaGkyKSk7CiAgICAgIEMgPSBjICogYyArIDIgKiBuICogczsKICAgICAgcDAgPSBNYXRoLnNxcnQoQyAtIDIgKiBuICogTWF0aC5zaW4obGF0MCkpIC8gbjsKICAgICAgcmV0dXJuIGFsYmVyczsKICAgIH0KICAgIHZhciBvcmlnaW4gPSBbIC05OCwgMzggXSwgcGFyYWxsZWxzID0gWyAyOS41LCA0NS41IF0sIHNjYWxlID0gMWUzLCB0cmFuc2xhdGUgPSBbIDQ4MCwgMjUwIF0sIGxuZzAsIG4sIEMsIHAwOwogICAgYWxiZXJzLmludmVydCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7CiAgICAgIHZhciB4ID0gKGNvb3JkaW5hdGVzWzBdIC0gdHJhbnNsYXRlWzBdKSAvIHNjYWxlLCB5ID0gKGNvb3JkaW5hdGVzWzFdIC0gdHJhbnNsYXRlWzFdKSAvIHNjYWxlLCBwMHkgPSBwMCArIHksIHQgPSBNYXRoLmF0YW4yKHgsIHAweSksIHAgPSBNYXRoLnNxcnQoeCAqIHggKyBwMHkgKiBwMHkpOwogICAgICByZXR1cm4gWyAobG5nMCArIHQgLyBuKSAvIGQzX2dlb19yYWRpYW5zLCBNYXRoLmFzaW4oKEMgLSBwICogcCAqIG4gKiBuKSAvICgyICogbikpIC8gZDNfZ2VvX3JhZGlhbnMgXTsKICAgIH07CiAgICBhbGJlcnMub3JpZ2luID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmlnaW47CiAgICAgIG9yaWdpbiA9IFsgK3hbMF0sICt4WzFdIF07CiAgICAgIHJldHVybiByZWxvYWQoKTsKICAgIH07CiAgICBhbGJlcnMucGFyYWxsZWxzID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYXJhbGxlbHM7CiAgICAgIHBhcmFsbGVscyA9IFsgK3hbMF0sICt4WzFdIF07CiAgICAgIHJldHVybiByZWxvYWQoKTsKICAgIH07CiAgICBhbGJlcnMuc2NhbGUgPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNjYWxlOwogICAgICBzY2FsZSA9ICt4OwogICAgICByZXR1cm4gYWxiZXJzOwogICAgfTsKICAgIGFsYmVycy50cmFuc2xhdGUgPSBmdW5jdGlvbih4KSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRyYW5zbGF0ZTsKICAgICAgdHJhbnNsYXRlID0gWyAreFswXSwgK3hbMV0gXTsKICAgICAgcmV0dXJuIGFsYmVyczsKICAgIH07CiAgICByZXR1cm4gcmVsb2FkKCk7CiAgfTsKICBkMy5nZW8uYWxiZXJzVXNhID0gZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBhbGJlcnNVc2EoY29vcmRpbmF0ZXMpIHsKICAgICAgdmFyIGxvbiA9IGNvb3JkaW5hdGVzWzBdLCBsYXQgPSBjb29yZGluYXRlc1sxXTsKICAgICAgcmV0dXJuIChsYXQgPiA1MCA\/IGFsYXNrYSA6IGxvbiA8IC0xNDAgPyBoYXdhaWkgOiBsYXQgPCAyMSA\\/IFsgY29vcmRpbmF0ZXNbMF0gXSA6IGNvb3JkaW5hdGVzLCByZXNhbXBsZXMsIG9yaWdpbiA9IGFyYy5zb3VyY2UoKTsKICAgICAgd2hpbGUgKCsraSA8IG4pIHsKICAgICAgICByZXNhbXBsZXMgPSBhcmMuc291cmNlKGNvb3JkaW5hdGVzW2kgLSAxXSkoY29vcmRpbmF0ZXNbaV0pLmNvb3JkaW5hdGVzOwogICAgICAgIGZvciAoaiA9IDAsIG0gPSByZXNhbXBsZXMubGVuZ3RoOyArK2ogPCBtOyApIHJlc2FtcGxlZC5wdXNoKHJlc2FtcGxlc1tqXSk7CiAgICAgIH0KICAgICAgYXJjLnNvdXJjZShvcmlnaW4pOwogICAgICByZXR1cm4gcmVzYW1wbGVkOwogICAgfQogICAgdmFyIG9yaWdpbiA9IFsgMCwgMCBdLCBkZWdyZWVzID0gOTAgLSAuMDEsIHJhZGlhbnMgPSBkZWdyZWVzICogZDNfZ2VvX3JhZGlhbnMsIGFyYyA9IGQzLmdlby5ncmVhdEFyYygpLnNvdXJjZShvcmlnaW4pLnRhcmdldChkM19pZGVudGl0eSk7CiAgICBjaXJjbGUuY2xpcCA9IGZ1bmN0aW9uKGQpIHsKICAgICAgaWYgKHR5cGVvZiBvcmlnaW4gPT09ICJmdW5jdGlvbiIpIGFyYy5zb3VyY2Uob3JpZ2luLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgICByZXR1cm4gY2xpcFR5cGUoZCkgfHwgbnVsbDsKICAgIH07CiAgICB2YXIgY2xpcFR5cGUgPSBkM19nZW9fdHlwZSh7CiAgICAgIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvKSB7CiAgICAgICAgdmFyIGZlYXR1cmVzID0gby5mZWF0dXJlcy5tYXAoY2xpcFR5cGUpLmZpbHRlcihkM19pZGVudGl0eSk7CiAgICAgICAgcmV0dXJuIGZlYXR1cmVzICYmIChvID0gT2JqZWN0LmNyZWF0ZShvKSwgby5mZWF0dXJlcyA9IGZlYXR1cmVzLCBvKTsKICAgICAgfSwKICAgICAgRmVhdHVyZTogZnVuY3Rpb24obykgewogICAgICAgIHZhciBnZW9tZXRyeSA9IGNsaXBUeXBlKG8uZ2VvbWV0cnkpOwogICAgICAgIHJldHVybiBnZW9tZXRyeSAmJiAobyA9IE9iamVjdC5jcmVhdGUobyksIG8uZ2VvbWV0cnkgPSBnZW9tZXRyeSwgbyk7CiAgICAgIH0sCiAgICAgIFBvaW50OiBmdW5jdGlvbihvKSB7CiAgICAgICAgcmV0dXJuIHZpc2libGUoby5jb29yZGluYXRlcykgJiYgbzsKICAgICAgfSwKICAgICAgTXVsdGlQb2ludDogZnVuY3Rpb24obykgewogICAgICAgIHZhciBjb29yZGluYXRlcyA9IG8uY29vcmRpbmF0ZXMuZmlsdGVyKHZpc2libGUpOwogICAgICAgIHJldHVybiBjb29yZGluYXRlcy5sZW5ndGggJiYgewogICAgICAgICAgdHlwZTogby50eXBlLAogICAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzCiAgICAgICAgfTsKICAgICAgfSwKICAgICAgTGluZVN0cmluZzogZnVuY3Rpb24obykgewogICAgICAgIHZhciBjb29yZGluYXRlcyA9IGNsaXAoby5jb29yZGluYXRlcyk7CiAgICAgICAgcmV0dXJuIGNvb3JkaW5hdGVzLmxlbmd0aCAmJiAobyA9IE9iamVjdC5jcmVhdGUobyksIG8uY29vcmRpbmF0ZXMgPSBjb29yZGluYXRlcywgbyk7CiAgICAgIH0sCiAgICAgIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24obykgewogICAgICAgIHZhciBjb29yZGluYXRlcyA9IG8uY29vcmRpbmF0ZXMubWFwKGNsaXApLmZpbHRlcihmdW5jdGlvbihkKSB7CiAgICAgICAgICByZXR1cm4gZC5sZW5ndGg7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGNvb3JkaW5hdGVzLmxlbmd0aCAmJiAobyA9IE9iamVjdC5jcmVhdGUobyksIG8uY29vcmRpbmF0ZXMgPSBjb29yZGluYXRlcywgbyk7CiAgICAgIH0sCiAgICAgIFBvbHlnb246IGZ1bmN0aW9uKG8pIHsKICAgICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvLmNvb3JkaW5hdGVzLm1hcChjbGlwKTsKICAgICAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0ubGVuZ3RoICYmIChvID0gT2JqZWN0LmNyZWF0ZShvKSwgby5jb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzLCBvKTsKICAgICAgfSwKICAgICAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvKSB7CiAgICAgICAgdmFyIGNvb3JkaW5hdGVzID0gby5jb29yZGluYXRlcy5tYXAoZnVuY3Rpb24oZCkgewogICAgICAgICAgcmV0dXJuIGQubWFwKGNsaXApOwogICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbihkKSB7CiAgICAgICAgICByZXR1cm4gZFswXS5sZW5ndGg7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGNvb3JkaW5hdGVzLmxlbmd0aCAmJiAobyA9IE9iamVjdC5jcmVhdGUobyksIG8uY29vcmRpbmF0ZXMgPSBjb29yZGluYXRlcywgbyk7CiAgICAgIH0sCiAgICAgIEdlb21ldHJ5Q29sbGVjdGlvbjogZnVuY3Rpb24obykgewogICAgICAgIHZhciBnZW9tZXRyaWVzID0gby5nZW9tZXRyaWVzLm1hcChjbGlwVHlwZSkuZmlsdGVyKGQzX2lkZW50aXR5KTsKICAgICAgICByZXR1cm4gZ2VvbWV0cmllcy5sZW5ndGggJiYgKG8gPSBPYmplY3QuY3JlYXRlKG8pLCBvLmdlb21ldHJpZXMgPSBnZW9tZXRyaWVzLCBvKTsKICAgICAgfQogICAgfSk7CiAgICBjaXJjbGUub3JpZ2luID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmlnaW47CiAgICAgIG9yaWdpbiA9IHg7CiAgICAgIGlmICh0eXBlb2Ygb3JpZ2luICE9PSAiZnVuY3Rpb24iKSBhcmMuc291cmNlKG9yaWdpbik7CiAgICAgIHJldHVybiBjaXJjbGU7CiAgICB9OwogICAgY2lyY2xlLmFuZ2xlID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkZWdyZWVzOwogICAgICByYWRpYW5zID0gKGRlZ3JlZXMgPSAreCkgKiBkM19nZW9fcmFkaWFuczsKICAgICAgcmV0dXJuIGNpcmNsZTsKICAgIH07CiAgICByZXR1cm4gZDMucmViaW5kKGNpcmNsZSwgYXJjLCAicHJlY2lzaW9uIik7CiAgfTsKICBkMy5nZW8uZ3JlYXRBcmMgPSBmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIGdyZWF0QXJjKCkgewogICAgICB2YXIgZCA9IGdyZWF0QXJjLmRpc3RhbmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHQgPSAwLCBkdCA9IHByZWNpc2lvbiAvIGQsIGNvb3JkaW5hdGVzID0gWyBwMCBdOwogICAgICB3aGlsZSAoKHQgKz0gZHQpIDwgMSkgY29vcmRpbmF0ZXMucHVzaChpbnRlcnBvbGF0ZSh0KSk7CiAgICAgIGNvb3JkaW5hdGVzLnB1c2gocDEpOwogICAgICByZXR1cm4gewogICAgICAgIHR5cGU6ICJMaW5lU3RyaW5nIiwKICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXMKICAgICAgfTsKICAgIH0KICAgIHZhciBzb3VyY2UgPSBkM19nZW9fZ3JlYXRBcmNTb3VyY2UsIHAwLCB0YXJnZXQgPSBkM19nZW9fZ3JlYXRBcmNUYXJnZXQsIHAxLCBwcmVjaXNpb24gPSA2ICogZDNfZ2VvX3JhZGlhbnMsIGludGVycG9sYXRlID0gZDNfZ2VvX2dyZWF0QXJjSW50ZXJwb2xhdG9yKCk7CiAgICBncmVhdEFyYy5kaXN0YW5jZSA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gImZ1bmN0aW9uIikgaW50ZXJwb2xhdGUuc291cmNlKHAwID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gImZ1bmN0aW9uIikgaW50ZXJwb2xhdGUudGFyZ2V0KHAxID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgICByZXR1cm4gaW50ZXJwb2xhdGUuZGlzdGFuY2UoKTsKICAgIH07CiAgICBncmVhdEFyYy5zb3VyY2UgPSBmdW5jdGlvbihfKSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvdXJjZTsKICAgICAgc291cmNlID0gXzsKICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICJmdW5jdGlvbiIpIGludGVycG9sYXRlLnNvdXJjZShwMCA9IHNvdXJjZSk7CiAgICAgIHJldHVybiBncmVhdEFyYzsKICAgIH07CiAgICBncmVhdEFyYy50YXJnZXQgPSBmdW5jdGlvbihfKSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRhcmdldDsKICAgICAgdGFyZ2V0ID0gXzsKICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICJmdW5jdGlvbiIpIGludGVycG9sYXRlLnRhcmdldChwMSA9IHRhcmdldCk7CiAgICAgIHJldHVybiBncmVhdEFyYzsKICAgIH07CiAgICBncmVhdEFyYy5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7CiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByZWNpc2lvbiAvIGQzX2dlb19yYWRpYW5zOwogICAgICBwcmVjaXNpb24gPSBfICogZDNfZ2VvX3JhZGlhbnM7CiAgICAgIHJldHVybiBncmVhdEFyYzsKICAgIH07CiAgICByZXR1cm4gZ3JlYXRBcmM7CiAgfTsKICBkMy5nZW8uZ3JlYXRDaXJjbGUgPSBkMy5nZW8uY2lyY2xlOwogIGQzLmdlb20gPSB7fTsKICBkMy5nZW9tLmNvbnRvdXIgPSBmdW5jdGlvbihncmlkLCBzdGFydCkgewogICAgdmFyIHMgPSBzdGFydCB8fCBkM19nZW9tX2NvbnRvdXJTdGFydChncmlkKSwgYyA9IFtdLCB4ID0gc1swXSwgeSA9IHNbMV0sIGR4ID0gMCwgZHkgPSAwLCBwZHggPSBOYU4sIHBkeSA9IE5hTiwgaSA9IDA7CiAgICBkbyB7CiAgICAgIGkgPSAwOwogICAgICBpZiAoZ3JpZCh4IC0gMSwgeSAtIDEpKSBpICs9IDE7CiAgICAgIGlmIChncmlkKHgsIHkgLSAxKSkgaSArPSAyOwogICAgICBpZiAoZ3JpZCh4IC0gMSwgeSkpIGkgKz0gNDsKICAgICAgaWYgKGdyaWQoeCwgeSkpIGkgKz0gODsKICAgICAgaWYgKGkgPT09IDYpIHsKICAgICAgICBkeCA9IHBkeSA9PT0gLTEgPyAtMSA6IDE7CiAgICAgICAgZHkgPSAwOwogICAgICB9IGVsc2UgaWYgKGkgPT09IDkpIHsKICAgICAgICBkeCA9IDA7CiAgICAgICAgZHkgPSBwZHggPT09IDEgPyAtMSA6IDE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZHggPSBkM19nZW9tX2NvbnRvdXJEeFtpXTsKICAgICAgICBkeSA9IGQzX2dlb21fY29udG91ckR5W2ldOwogICAgICB9CiAgICAgIGlmIChkeCAhPSBwZHggJiYgZHkgIT0gcGR5KSB7CiAgICAgICAgYy5wdXNoKFsgeCwgeSBdKTsKICAgICAgICBwZHggPSBkeDsKICAgICAgICBwZHkgPSBkeTsKICAgICAgfQogICAgICB4ICs9IGR4OwogICAgICB5ICs9IGR5OwogICAgfSB3aGlsZSAoc1swXSAhPSB4IHx8IHNbMV0gIT0geSk7CiAgICByZXR1cm4gYzsKICB9OwogIHZhciBkM19nZW9tX2NvbnRvdXJEeCA9IFsgMSwgMCwgMSwgMSwgLTEsIDAsIC0xLCAxLCAwLCAwLCAwLCAwLCAtMSwgMCwgLTEsIE5hTiBdLCBkM19nZW9tX2NvbnRvdXJEeSA9IFsgMCwgLTEsIDAsIDAsIDAsIC0xLCAwLCAwLCAxLCAtMSwgMSwgMSwgMCwgLTEsIDAsIE5hTiBdOwogIGQzLmdlb20uaHVsbCA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7CiAgICBpZiAodmVydGljZXMubGVuZ3RoIDwgMykgcmV0dXJuIFtdOwogICAgdmFyIGxlbiA9IHZlcnRpY2VzLmxlbmd0aCwgcGxlbiA9IGxlbiAtIDEsIHBvaW50cyA9IFtdLCBzdGFjayA9IFtdLCBpLCBqLCBoID0gMCwgeDEsIHkxLCB4MiwgeTIsIHUsIHYsIGEsIHNwOwogICAgZm9yIChpID0gMTsgaSA8IGxlbjsgKytpKSB7CiAgICAgIGlmICh2ZXJ0aWNlc1tpXVsxXSA8IHZlcnRpY2VzW2hdWzFdKSB7CiAgICAgICAgaCA9IGk7CiAgICAgIH0gZWxzZSBpZiAodmVydGljZXNbaV1bMV0gPT0gdmVydGljZXNbaF1bMV0pIHsKICAgICAgICBoID0gdmVydGljZXNbaV1bMF0gPCB2ZXJ0aWNlc1toXVswXSA\\/IGYoZGF0ZSkgOiBjKTsKICAgICAgICAgIGogPSBpICsgMTsKICAgICAgICB9CiAgICAgIH0KICAgICAgc3RyaW5nLnB1c2godGVtcGxhdGUuc3Vic3RyaW5nKGosIGkpKTsKICAgICAgcmV0dXJuIHN0cmluZy5qb2luKCIiKTsKICAgIH0KICAgIHZhciBuID0gdGVtcGxhdGUubGVuZ3RoOwogICAgZm9ybWF0LnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7CiAgICAgIHZhciBkID0gewogICAgICAgIHk6IDE5MDAsCiAgICAgICAgbTogMCwKICAgICAgICBkOiAxLAogICAgICAgIEg6IDAsCiAgICAgICAgTTogMCwKICAgICAgICBTOiAwLAogICAgICAgIEw6IDAKICAgICAgfSwgaSA9IGQzX3RpbWVfcGFyc2UoZCwgdGVtcGxhdGUsIHN0cmluZywgMCk7CiAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsOwogICAgICBpZiAoInAiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7CiAgICAgIHZhciBkYXRlID0gbmV3IGQzX3RpbWU7CiAgICAgIGRhdGUuc2V0RnVsbFllYXIoZC55LCBkLm0sIGQuZCk7CiAgICAgIGRhdGUuc2V0SG91cnMoZC5ILCBkLk0sIGQuUywgZC5MKTsKICAgICAgcmV0dXJuIGRhdGU7CiAgICB9OwogICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgIH07CiAgICByZXR1cm4gZm9ybWF0OwogIH07CiAgdmFyIGQzX3RpbWVfemZpbGwyID0gZDMuZm9ybWF0KCIwMmQiKSwgZDNfdGltZV96ZmlsbDMgPSBkMy5mb3JtYXQoIjAzZCIpLCBkM190aW1lX3pmaWxsNCA9IGQzLmZvcm1hdCgiMDRkIiksIGQzX3RpbWVfc2ZpbGwyID0gZDMuZm9ybWF0KCIyZCIpOwogIHZhciBkM190aW1lX2RheVJlID0gZDNfdGltZV9mb3JtYXRSZShkM190aW1lX2RheXMpLCBkM190aW1lX2RheUFiYnJldlJlID0gZDNfdGltZV9mb3JtYXRSZShkM190aW1lX2RheUFiYnJldmlhdGlvbnMpLCBkM190aW1lX21vbnRoUmUgPSBkM190aW1lX2Zvcm1hdFJlKGQzX3RpbWVfbW9udGhzKSwgZDNfdGltZV9tb250aExvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGQzX3RpbWVfbW9udGhzKSwgZDNfdGltZV9tb250aEFiYnJldlJlID0gZDNfdGltZV9mb3JtYXRSZShkM190aW1lX21vbnRoQWJicmV2aWF0aW9ucyksIGQzX3RpbWVfbW9udGhBYmJyZXZMb29rdXAgPSBkM190aW1lX2Zvcm1hdExvb2t1cChkM190aW1lX21vbnRoQWJicmV2aWF0aW9ucyk7CiAgdmFyIGQzX3RpbWVfZm9ybWF0cyA9IHsKICAgIGE6IGZ1bmN0aW9uKGQpIHsKICAgICAgcmV0dXJuIGQzX3RpbWVfZGF5QWJicmV2aWF0aW9uc1tkLmdldERheSgpXTsKICAgIH0sCiAgICBBOiBmdW5jdGlvbihkKSB7CiAgICAgIHJldHVybiBkM190aW1lX2RheXNbZC5nZXREYXkoKV07CiAgICB9LAogICAgYjogZnVuY3Rpb24oZCkgewogICAgICByZXR1cm4gZDNfdGltZV9tb250aEFiYnJldmlhdGlvbnNbZC5nZXRNb250aCgpXTsKICAgIH0sCiAgICBCOiBmdW5jdGlvbihkKSB7CiAgICAgIHJldHVybiBkM190aW1lX21vbnRoc1tkLmdldE1vbnRoKCldOwogICAgfSwKICAgIGM6IGQzLnRpbWUuZm9ybWF0KGQzX3RpbWVfZm9ybWF0RGF0ZVRpbWUpLAogICAgZDogZnVuY3Rpb24oZCkgewogICAgICByZXR1cm4gZDNfdGltZV96ZmlsbDIoZC5nZXREYXRlKCkpOwogICAgfSwKICAgIGU6IGZ1bmN0aW9uKGQpIHsKICAgICAgcmV0dXJuIGQzX3RpbWVfc2ZpbGwyKGQuZ2V0RGF0ZSgpKTsKICAgIH0sCiAgICBIOiBmdW5jdGlvbihkKSB7CiAgICAgIHJldHVybiBkM190aW1lX3pmaWxsMihkLmdldEhvdXJzKCkpOwogICAgfSwKICAgIEk6IGZ1bmN0aW9uKGQpIHsKICAgICAgcmV0dXJuIGQzX3RpbWVfemZpbGwyKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyKTsKICAgIH0sCiAgICBqOiBmdW5jdGlvbihkKSB7CiAgICAgIHJldHVybiBkM190aW1lX3pmaWxsMygxICsgZDMudGltZS5kYXlPZlllYXIoZCkpOwogICAgfSwKICAgIEw6IGZ1bmN0aW9uKGQpIHsKICAgICAgcmV0dXJuIGQzX3RpbWVfemZpbGwzKGQuZ2V0TWlsbGlzZWNvbmRzKCkpOwogICAgfSwKICAgIG06IGZ1bmN0aW9uKGQpIHsKICAgICAgcmV0dXJuIGQzX3RpbWVfemZpbGwyKGQuZ2V0TW9udGgoKSArIDEpOwogICAgfSwKICAgIE06IGZ1bmN0aW9uKGQpIHsKICAgICAgcmV0dXJuIGQzX3RpbWVfemZpbGwyKGQuZ2V0TWludXRlcygpKTsKICAgIH0sCiAgICBwOiBmdW5jdGlvbihkKSB7CiAgICAgIHJldHVybiBkLmdldEhvdXJzKCkgPj0gMTIgPyAiUE0iIDogIkFNIjsKICAgIH0sCiAgICBTOiBmdW5jdGlvbihkKSB7CiAgICAgIHJldHVybiBkM190aW1lX3pmaWxsMihkLmdldFNlY29uZHMoKSk7CiAgICB9LAogICAgVTogZnVuY3Rpb24oZCkgewogICAgICByZXR1cm4gZDNfdGltZV96ZmlsbDIoZDMudGltZS5zdW5kYXlPZlllYXIoZCkpOwogICAgfSwKICAgIHc6IGZ1bmN0aW9uKGQpIHsKICAgICAgcmV0dXJuIGQuZ2V0RGF5KCk7CiAgICB9LAogICAgVzogZnVuY3Rpb24oZCkgewogICAgICByZXR1cm4gZDNfdGltZV96ZmlsbDIoZDMudGltZS5tb25kYXlPZlllYXIoZCkpOwogICAgfSwKICAgIHg6IGQzLnRpbWUuZm9ybWF0KGQzX3RpbWVfZm9ybWF0RGF0ZSksCiAgICBYOiBkMy50aW1lLmZvcm1hdChkM190aW1lX2Zvcm1hdFRpbWUpLAogICAgeTogZnVuY3Rpb24oZCkgewogICAgICByZXR1cm4gZDNfdGltZV96ZmlsbDIoZC5nZXRGdWxsWWVhcigpICUgMTAwKTsKICAgIH0sCiAgICBZOiBmdW5jdGlvbihkKSB7CiAgICAgIHJldHVybiBkM190aW1lX3pmaWxsNChkLmdldEZ1bGxZZWFyKCkgJSAxZTQpOwogICAgfSwKICAgIFo6IGQzX3RpbWVfem9uZSwKICAgICIlIjogZnVuY3Rpb24oZCkgewogICAgICByZXR1cm4gIiUiOwogICAgfQogIH07CiAgdmFyIGQzX3RpbWVfcGFyc2VycyA9IHsKICAgIGE6IGQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2LAogICAgQTogZDNfdGltZV9wYXJzZVdlZWtkYXksCiAgICBiOiBkM190aW1lX3BhcnNlTW9udGhBYmJyZXYsCiAgICBCOiBkM190aW1lX3BhcnNlTW9udGgsCiAgICBjOiBkM190aW1lX3BhcnNlTG9jYWxlRnVsbCwKICAgIGQ6IGQzX3RpbWVfcGFyc2VEYXksCiAgICBlOiBkM190aW1lX3BhcnNlRGF5LAogICAgSDogZDNfdGltZV9wYXJzZUhvdXIyNCwKICAgIEk6IGQzX3RpbWVfcGFyc2VIb3VyMjQsCiAgICBMOiBkM190aW1lX3BhcnNlTWlsbGlzZWNvbmRzLAogICAgbTogZDNfdGltZV9wYXJzZU1vbnRoTnVtYmVyLAogICAgTTogZDNfdGltZV9wYXJzZU1pbnV0ZXMsCiAgICBwOiBkM190aW1lX3BhcnNlQW1QbSwKICAgIFM6IGQzX3RpbWVfcGFyc2VTZWNvbmRzLAogICAgeDogZDNfdGltZV9wYXJzZUxvY2FsZURhdGUsCiAgICBYOiBkM190aW1lX3BhcnNlTG9jYWxlVGltZSwKICAgIHk6IGQzX3RpbWVfcGFyc2VZZWFyLAogICAgWTogZDNfdGltZV9wYXJzZUZ1bGxZZWFyCiAgfTsKICB2YXIgZDNfdGltZV9udW1iZXJSZSA9IC9eXHMqXGQrLzsKICB2YXIgZDNfdGltZV9hbVBtTG9va3VwID0gZDMubWFwKHsKICAgIGFtOiAwLAogICAgcG06IDEKICB9KTsKICBkMy50aW1lLmZvcm1hdC51dGMgPSBmdW5jdGlvbih0ZW1wbGF0ZSkgewogICAgZnVuY3Rpb24gZm9ybWF0KGRhdGUpIHsKICAgICAgdHJ5IHsKICAgICAgICBkM190aW1lID0gZDNfdGltZV91dGM7CiAgICAgICAgdmFyIHV0YyA9IG5ldyBkM190aW1lOwogICAgICAgIHV0Yy5fID0gZGF0ZTsKICAgICAgICByZXR1cm4gbG9jYWwodXRjKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBkM190aW1lID0gRGF0ZTsKICAgICAgfQogICAgfQogICAgdmFyIGxvY2FsID0gZDMudGltZS5mb3JtYXQodGVtcGxhdGUpOwogICAgZm9ybWF0LnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7CiAgICAgIHRyeSB7CiAgICAgICAgZDNfdGltZSA9IGQzX3RpbWVfdXRjOwogICAgICAgIHZhciBkYXRlID0gbG9jYWwucGFyc2Uoc3RyaW5nKTsKICAgICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLl87CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgZDNfdGltZSA9IERhdGU7CiAgICAgIH0KICAgIH07CiAgICBmb3JtYXQudG9TdHJpbmcgPSBsb2NhbC50b1N0cmluZzsKICAgIHJldHVybiBmb3JtYXQ7CiAgfTsKICB2YXIgZDNfdGltZV9mb3JtYXRJc28gPSBkMy50aW1lLmZvcm1hdC51dGMoIiVZLSVtLSVkVCVIOiVNOiVTLiVMWiIpOwogIGQzLnRpbWUuZm9ybWF0LmlzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nID8gZDNfdGltZV9mb3JtYXRJc29OYXRpdmUgOiBkM190aW1lX2Zvcm1hdElzbzsKICBkM190aW1lX2Zvcm1hdElzb05hdGl2ZS5wYXJzZSA9IGZ1bmN0aW9uKHN0cmluZykgewogICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpOwogICAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7CiAgfTsKICBkM190aW1lX2Zvcm1hdElzb05hdGl2ZS50b1N0cmluZyA9IGQzX3RpbWVfZm9ybWF0SXNvLnRvU3RyaW5nOwogIGQzLnRpbWUuc2Vjb25kID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7CiAgICByZXR1cm4gbmV3IGQzX3RpbWUoTWF0aC5mbG9vcihkYXRlIC8gMWUzKSAqIDFlMyk7CiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7CiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiAxZTMpOwogIH0sIGZ1bmN0aW9uKGRhdGUpIHsKICAgIHJldHVybiBkYXRlLmdldFNlY29uZHMoKTsKICB9KTsKICBkMy50aW1lLnNlY29uZHMgPSBkMy50aW1lLnNlY29uZC5yYW5nZTsKICBkMy50aW1lLnNlY29uZHMudXRjID0gZDMudGltZS5zZWNvbmQudXRjLnJhbmdlOwogIGQzLnRpbWUubWludXRlID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7CiAgICByZXR1cm4gbmV3IGQzX3RpbWUoTWF0aC5mbG9vcihkYXRlIC8gNmU0KSAqIDZlNCk7CiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7CiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiA2ZTQpOwogIH0sIGZ1bmN0aW9uKGRhdGUpIHsKICAgIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTsKICB9KTsKICBkMy50aW1lLm1pbnV0ZXMgPSBkMy50aW1lLm1pbnV0ZS5yYW5nZTsKICBkMy50aW1lLm1pbnV0ZXMudXRjID0gZDMudGltZS5taW51dGUudXRjLnJhbmdlOwogIGQzLnRpbWUuaG91ciA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkgewogICAgdmFyIHRpbWV6b25lID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpIC8gNjA7CiAgICByZXR1cm4gbmV3IGQzX3RpbWUoKE1hdGguZmxvb3IoZGF0ZSAvIDM2ZTUgLSB0aW1lem9uZSkgKyB0aW1lem9uZSkgKiAzNmU1KTsKICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHsKICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIE1hdGguZmxvb3Iob2Zmc2V0KSAqIDM2ZTUpOwogIH0sIGZ1bmN0aW9uKGRhdGUpIHsKICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCk7CiAgfSk7CiAgZDMudGltZS5ob3VycyA9IGQzLnRpbWUuaG91ci5yYW5nZTsKICBkMy50aW1lLmhvdXJzLnV0YyA9IGQzLnRpbWUuaG91ci51dGMucmFuZ2U7CiAgZDMudGltZS5kYXkgPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHsKICAgIHZhciBkYXkgPSBuZXcgZDNfdGltZSgxOTcwLCAwKTsKICAgIGRheS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpOwogICAgcmV0dXJuIGRheTsKICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHsKICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIG9mZnNldCk7CiAgfSwgZnVuY3Rpb24oZGF0ZSkgewogICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTsKICB9KTsKICBkMy50aW1lLmRheXMgPSBkMy50aW1lLmRheS5yYW5nZTsKICBkMy50aW1lLmRheXMudXRjID0gZDMudGltZS5kYXkudXRjLnJhbmdlOwogIGQzLnRpbWUuZGF5T2ZZZWFyID0gZnVuY3Rpb24oZGF0ZSkgewogICAgdmFyIHllYXIgPSBkMy50aW1lLnllYXIoZGF0ZSk7CiAgICByZXR1cm4gTWF0aC5mbG9vcigoZGF0ZSAtIHllYXIgLSAoZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpIC0geWVhci5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDZlNCkgLyA4NjRlNSk7CiAgfTsKICBkM190aW1lX2RheVN5bWJvbHMuZm9yRWFjaChmdW5jdGlvbihkYXksIGkpIHsKICAgIGRheSA9IGRheS50b0xvd2VyQ2FzZSgpOwogICAgaSA9IDcgLSBpOwogICAgdmFyIGludGVydmFsID0gZDMudGltZVtkYXldID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7CiAgICAgIChkYXRlID0gZDMudGltZS5kYXkoZGF0ZSkpLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIGkpICUgNyk7CiAgICAgIHJldHVybiBkYXRlOwogICAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7CiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIE1hdGguZmxvb3Iob2Zmc2V0KSAqIDcpOwogICAgfSwgZnVuY3Rpb24oZGF0ZSkgewogICAgICB2YXIgZGF5ID0gZDMudGltZS55ZWFyKGRhdGUpLmdldERheSgpOwogICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDMudGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpIC0gKGRheSAhPT0gaSk7CiAgICB9KTsKICAgIGQzLnRpbWVbZGF5ICsgInMiXSA9IGludGVydmFsLnJhbmdlOwogICAgZDMudGltZVtkYXkgKyAicyJdLnV0YyA9IGludGVydmFsLnV0Yy5yYW5nZTsKICAgIGQzLnRpbWVbZGF5ICsgIk9mWWVhciJdID0gZnVuY3Rpb24oZGF0ZSkgewogICAgICB2YXIgZGF5ID0gZDMudGltZS55ZWFyKGRhdGUpLmdldERheSgpOwogICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDMudGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpOwogICAgfTsKICB9KTsKICBkMy50aW1lLndlZWsgPSBkMy50aW1lLnN1bmRheTsKICBkMy50aW1lLndlZWtzID0gZDMudGltZS5zdW5kYXkucmFuZ2U7CiAgZDMudGltZS53ZWVrcy51dGMgPSBkMy50aW1lLnN1bmRheS51dGMucmFuZ2U7CiAgZDMudGltZS53ZWVrT2ZZZWFyID0gZDMudGltZS5zdW5kYXlPZlllYXI7CiAgZDMudGltZS5tb250aCA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkgewogICAgZGF0ZSA9IGQzLnRpbWUuZGF5KGRhdGUpOwogICAgZGF0ZS5zZXREYXRlKDEpOwogICAgcmV0dXJuIGRhdGU7CiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7CiAgICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIG9mZnNldCk7CiAgfSwgZnVuY3Rpb24oZGF0ZSkgewogICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTsKICB9KTsKICBkMy50aW1lLm1vbnRocyA9IGQzLnRpbWUubW9udGgucmFuZ2U7CiAgZDMudGltZS5tb250aHMudXRjID0gZDMudGltZS5tb250aC51dGMucmFuZ2U7CiAgZDMudGltZS55ZWFyID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7CiAgICBkYXRlID0gZDMudGltZS5kYXkoZGF0ZSk7CiAgICBkYXRlLnNldE1vbnRoKDAsIDEpOwogICAgcmV0dXJuIGRhdGU7CiAgfSwgZnVuY3Rpb24oZGF0ZSwgb2Zmc2V0KSB7CiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIG9mZnNldCk7CiAgfSwgZnVuY3Rpb24oZGF0ZSkgewogICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTsKICB9KTsKICBkMy50aW1lLnllYXJzID0gZDMudGltZS55ZWFyLnJhbmdlOwogIGQzLnRpbWUueWVhcnMudXRjID0gZDMudGltZS55ZWFyLnV0Yy5yYW5nZTsKICB2YXIgZDNfdGltZV9zY2FsZVN0ZXBzID0gWyAxZTMsIDVlMywgMTVlMywgM2U0LCA2ZTQsIDNlNSwgOWU1LCAxOGU1LCAzNmU1LCAxMDhlNSwgMjE2ZTUsIDQzMmU1LCA4NjRlNSwgMTcyOGU1LCA2MDQ4ZTUsIDI1OTJlNiwgNzc3NmU2LCAzMTUzNmU2IF07CiAgdmFyIGQzX3RpbWVfc2NhbGVMb2NhbE1ldGhvZHMgPSBbIFsgZDMudGltZS5zZWNvbmQsIDEgXSwgWyBkMy50aW1lLnNlY29uZCwgNSBdLCBbIGQzLnRpbWUuc2Vjb25kLCAxNSBdLCBbIGQzLnRpbWUuc2Vjb25kLCAzMCBdLCBbIGQzLnRpbWUubWludXRlLCAxIF0sIFsgZDMudGltZS5taW51dGUsIDUgXSwgWyBkMy50aW1lLm1pbnV0ZSwgMTUgXSwgWyBkMy50aW1lLm1pbnV0ZSwgMzAgXSwgWyBkMy50aW1lLmhvdXIsIDEgXSwgWyBkMy50aW1lLmhvdXIsIDMgXSwgWyBkMy50aW1lLmhvdXIsIDYgXSwgWyBkMy50aW1lLmhvdXIsIDEyIF0sIFsgZDMudGltZS5kYXksIDEgXSwgWyBkMy50aW1lLmRheSwgMiBdLCBbIGQzLnRpbWUud2VlaywgMSBdLCBbIGQzLnRpbWUubW9udGgsIDEgXSwgWyBkMy50aW1lLm1vbnRoLCAzIF0sIFsgZDMudGltZS55ZWFyLCAxIF0gXTsKICB2YXIgZDNfdGltZV9zY2FsZUxvY2FsRm9ybWF0cyA9IFsgWyBkMy50aW1lLmZvcm1hdCgiJVkiKSwgZnVuY3Rpb24oZCkgewogICAgcmV0dXJuIHRydWU7CiAgfSBdLCBbIGQzLnRpbWUuZm9ybWF0KCIlQiIpLCBmdW5jdGlvbihkKSB7CiAgICByZXR1cm4gZC5nZXRNb250aCgpOwogIH0gXSwgWyBkMy50aW1lLmZvcm1hdCgiJWIgJWQiKSwgZnVuY3Rpb24oZCkgewogICAgcmV0dXJuIGQuZ2V0RGF0ZSgpICE9IDE7CiAgfSBdLCBbIGQzLnRpbWUuZm9ybWF0KCIlYSAlZCIpLCBmdW5jdGlvbihkKSB7CiAgICByZXR1cm4gZC5nZXREYXkoKSAmJiBkLmdldERhdGUoKSAhPSAxOwogIH0gXSwgWyBkMy50aW1lLmZvcm1hdCgiJUkgJXAiKSwgZnVuY3Rpb24oZCkgewogICAgcmV0dXJuIGQuZ2V0SG91cnMoKTsKICB9IF0sIFsgZDMudGltZS5mb3JtYXQoIiVJOiVNIiksIGZ1bmN0aW9uKGQpIHsKICAgIHJldHVybiBkLmdldE1pbnV0ZXMoKTsKICB9IF0sIFsgZDMudGltZS5mb3JtYXQoIjolUyIpLCBmdW5jdGlvbihkKSB7CiAgICByZXR1cm4gZC5nZXRTZWNvbmRzKCk7CiAgfSBdLCBbIGQzLnRpbWUuZm9ybWF0KCIuJUwiKSwgZnVuY3Rpb24oZCkgewogICAgcmV0dXJuIGQuZ2V0TWlsbGlzZWNvbmRzKCk7CiAgfSBdIF07CiAgdmFyIGQzX3RpbWVfc2NhbGVMaW5lYXIgPSBkMy5zY2FsZS5saW5lYXIoKSwgZDNfdGltZV9zY2FsZUxvY2FsRm9ybWF0ID0gZDNfdGltZV9zY2FsZUZvcm1hdChkM190aW1lX3NjYWxlTG9jYWxGb3JtYXRzKTsKICBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLnllYXIgPSBmdW5jdGlvbihleHRlbnQsIG0pIHsKICAgIHJldHVybiBkM190aW1lX3NjYWxlTGluZWFyLmRvbWFpbihleHRlbnQubWFwKGQzX3RpbWVfc2NhbGVHZXRZZWFyKSkudGlja3MobSkubWFwKGQzX3RpbWVfc2NhbGVTZXRZZWFyKTsKICB9OwogIGQzLnRpbWUuc2NhbGUgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBkM190aW1lX3NjYWxlKGQzLnNjYWxlLmxpbmVhcigpLCBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLCBkM190aW1lX3NjYWxlTG9jYWxGb3JtYXQpOwogIH07CiAgdmFyIGQzX3RpbWVfc2NhbGVVVENNZXRob2RzID0gZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcy5tYXAoZnVuY3Rpb24obSkgewogICAgcmV0dXJuIFsgbVswXS51dGMsIG1bMV0gXTsKICB9KTsKICB2YXIgZDNfdGltZV9zY2FsZVVUQ0Zvcm1hdHMgPSBbIFsgZDMudGltZS5mb3JtYXQudXRjKCIlWSIpLCBmdW5jdGlvbihkKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9IF0sIFsgZDMudGltZS5mb3JtYXQudXRjKCIlQiIpLCBmdW5jdGlvbihkKSB7CiAgICByZXR1cm4gZC5nZXRVVENNb250aCgpOwogIH0gXSwgWyBkMy50aW1lLmZvcm1hdC51dGMoIiViICVkIiksIGZ1bmN0aW9uKGQpIHsKICAgIHJldHVybiBkLmdldFVUQ0RhdGUoKSAhPSAxOwogIH0gXSwgWyBkMy50aW1lLmZvcm1hdC51dGMoIiVhICVkIiksIGZ1bmN0aW9uKGQpIHsKICAgIHJldHVybiBkLmdldFVUQ0RheSgpICYmIGQuZ2V0VVRDRGF0ZSgpICE9IDE7CiAgfSBdLCBbIGQzLnRpbWUuZm9ybWF0LnV0YygiJUkgJXAiKSwgZnVuY3Rpb24oZCkgewogICAgcmV0dXJuIGQuZ2V0VVRDSG91cnMoKTsKICB9IF0sIFsgZDMudGltZS5mb3JtYXQudXRjKCIlSTolTSIpLCBmdW5jdGlvbihkKSB7CiAgICByZXR1cm4gZC5nZXRVVENNaW51dGVzKCk7CiAgfSBdLCBbIGQzLnRpbWUuZm9ybWF0LnV0YygiOiVTIiksIGZ1bmN0aW9uKGQpIHsKICAgIHJldHVybiBkLmdldFVUQ1NlY29uZHMoKTsKICB9IF0sIFsgZDMudGltZS5mb3JtYXQudXRjKCIuJUwiKSwgZnVuY3Rpb24oZCkgewogICAgcmV0dXJuIGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7CiAgfSBdIF07CiAgdmFyIGQzX3RpbWVfc2NhbGVVVENGb3JtYXQgPSBkM190aW1lX3NjYWxlRm9ybWF0KGQzX3RpbWVfc2NhbGVVVENGb3JtYXRzKTsKICBkM190aW1lX3NjYWxlVVRDTWV0aG9kcy55ZWFyID0gZnVuY3Rpb24oZXh0ZW50LCBtKSB7CiAgICByZXR1cm4gZDNfdGltZV9zY2FsZUxpbmVhci5kb21haW4oZXh0ZW50Lm1hcChkM190aW1lX3NjYWxlVVRDR2V0WWVhcikpLnRpY2tzKG0pLm1hcChkM190aW1lX3NjYWxlVVRDU2V0WWVhcik7CiAgfTsKICBkMy50aW1lLnNjYWxlLnV0YyA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGQzX3RpbWVfc2NhbGUoZDMuc2NhbGUubGluZWFyKCksIGQzX3RpbWVfc2NhbGVVVENNZXRob2RzLCBkM190aW1lX3NjYWxlVVRDRm9ybWF0KTsKICB9Owp9KSgpOw==",
    "size": "239674"
}