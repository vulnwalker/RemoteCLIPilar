{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Reader\/Excel5.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\\\/IFBIUEV4Y2VsX1N0eWxlX1Byb3RlY3Rpb246OlBST1RFQ1RJT05fUFJPVEVDVEVEIDogUEhQRXhjZWxfU3R5bGVfUHJvdGVjdGlvbjo6UFJPVEVDVElPTl9VTlBST1RFQ1RFRCk7CgogICAgICAgICAgICAvLyBiaXQgMjsgbWFzayAweDA0OyAwID0gQ2VsbCBYRiwgMSA9IENlbGwgU3R5bGUgWEYKICAgICAgICAgICAgJGlzQ2VsbFN0eWxlWGYgPSAoMHgwNCAmICR4ZlR5cGVQcm90KSA+PiAyOwoKICAgICAgICAgICAgLy8gb2Zmc2V0OiAgNjsgc2l6ZTogMTsgQWxpZ25tZW50IGFuZCB0ZXh0IGJyZWFrCiAgICAgICAgICAgIC8vIGJpdCAyLTAsIG1hc2sgMHgwNzsgaG9yaXpvbnRhbCBhbGlnbm1lbnQKICAgICAgICAgICAgJGhvckFsaWduID0gKDB4MDcgJiBvcmQoJHJlY29yZERhdGF7Nn0pKSA+PiAwOwogICAgICAgICAgICBzd2l0Y2ggKCRob3JBbGlnbikgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0QWxpZ25tZW50KCktPnNldEhvcml6b250YWwoUEhQRXhjZWxfU3R5bGVfQWxpZ25tZW50OjpIT1JJWk9OVEFMX0dFTkVSQUwpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0QWxpZ25tZW50KCktPnNldEhvcml6b250YWwoUEhQRXhjZWxfU3R5bGVfQWxpZ25tZW50OjpIT1JJWk9OVEFMX0xFRlQpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0QWxpZ25tZW50KCktPnNldEhvcml6b250YWwoUEhQRXhjZWxfU3R5bGVfQWxpZ25tZW50OjpIT1JJWk9OVEFMX0NFTlRFUik7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgJG9ialN0eWxlLT5nZXRBbGlnbm1lbnQoKS0+c2V0SG9yaXpvbnRhbChQSFBFeGNlbF9TdHlsZV9BbGlnbm1lbnQ6OkhPUklaT05UQUxfUklHSFQpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0QWxpZ25tZW50KCktPnNldEhvcml6b250YWwoUEhQRXhjZWxfU3R5bGVfQWxpZ25tZW50OjpIT1JJWk9OVEFMX0ZJTEwpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0QWxpZ25tZW50KCktPnNldEhvcml6b250YWwoUEhQRXhjZWxfU3R5bGVfQWxpZ25tZW50OjpIT1JJWk9OVEFMX0pVU1RJRlkpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0QWxpZ25tZW50KCktPnNldEhvcml6b250YWwoUEhQRXhjZWxfU3R5bGVfQWxpZ25tZW50OjpIT1JJWk9OVEFMX0NFTlRFUl9DT05USU5VT1VTKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBiaXQgMywgbWFzayAweDA4OyB3cmFwIHRleHQKICAgICAgICAgICAgJHdyYXBUZXh0ID0gKDB4MDggJiBvcmQoJHJlY29yZERhdGF7Nn0pKSA+PiAzOwogICAgICAgICAgICBzd2l0Y2ggKCR3cmFwVGV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0QWxpZ25tZW50KCktPnNldFdyYXBUZXh0KGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAkb2JqU3R5bGUtPmdldEFsaWdubWVudCgpLT5zZXRXcmFwVGV4dCh0cnVlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBiaXQgNi00LCBtYXNrIDB4NzA7IHZlcnRpY2FsIGFsaWdubWVudAogICAgICAgICAgICAkdmVydEFsaWduID0gKDB4NzAgJiBvcmQoJHJlY29yZERhdGF7Nn0pKSA+PiA0OwogICAgICAgICAgICBzd2l0Y2ggKCR2ZXJ0QWxpZ24pIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAkb2JqU3R5bGUtPmdldEFsaWdubWVudCgpLT5zZXRWZXJ0aWNhbChQSFBFeGNlbF9TdHlsZV9BbGlnbm1lbnQ6OlZFUlRJQ0FMX1RPUCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgJG9ialN0eWxlLT5nZXRBbGlnbm1lbnQoKS0+c2V0VmVydGljYWwoUEhQRXhjZWxfU3R5bGVfQWxpZ25tZW50OjpWRVJUSUNBTF9DRU5URVIpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0QWxpZ25tZW50KCktPnNldFZlcnRpY2FsKFBIUEV4Y2VsX1N0eWxlX0FsaWdubWVudDo6VkVSVElDQUxfQk9UVE9NKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAkb2JqU3R5bGUtPmdldEFsaWdubWVudCgpLT5zZXRWZXJ0aWNhbChQSFBFeGNlbF9TdHlsZV9BbGlnbm1lbnQ6OlZFUlRJQ0FMX0pVU1RJRlkpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJHRoaXMtPnZlcnNpb24gPT0gc2VsZjo6WExTX0JJRkY4KSB7CiAgICAgICAgICAgICAgICAvLyBvZmZzZXQ6ICA3OyBzaXplOiAxOyBYRl9ST1RBVElPTjogVGV4dCByb3RhdGlvbiBhbmdsZQogICAgICAgICAgICAgICAgJGFuZ2xlID0gb3JkKCRyZWNvcmREYXRhezd9KTsKICAgICAgICAgICAgICAgICRyb3RhdGlvbiA9IDA7CiAgICAgICAgICAgICAgICBpZiAoJGFuZ2xlIDw9IDkwKSB7CiAgICAgICAgICAgICAgICAgICAgJHJvdGF0aW9uID0gJGFuZ2xlOwogICAgICAgICAgICAgICAgfSBlbHNlaWYgKCRhbmdsZSA8PSAxODApIHsKICAgICAgICAgICAgICAgICAgICAkcm90YXRpb24gPSA5MCAtICRhbmdsZTsKICAgICAgICAgICAgICAgIH0gZWxzZWlmICgkYW5nbGUgPT0gMjU1KSB7CiAgICAgICAgICAgICAgICAgICAgJHJvdGF0aW9uID0gLTE2NTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0QWxpZ25tZW50KCktPnNldFRleHRSb3RhdGlvbigkcm90YXRpb24pOwoKICAgICAgICAgICAgICAgIC8vIG9mZnNldDogIDg7IHNpemU6IDE7IEluZGVudGF0aW9uLCBzaHJpbmsgdG8gY2VsbCBzaXplLCBhbmQgdGV4dCBkaXJlY3Rpb24KICAgICAgICAgICAgICAgIC8vIGJpdDogMy0wOyBtYXNrOiAweDBGOyBpbmRlbnQgbGV2ZWwKICAgICAgICAgICAgICAgICRpbmRlbnQgPSAoMHgwRiAmIG9yZCgkcmVjb3JkRGF0YXs4fSkpID4+IDA7CiAgICAgICAgICAgICAgICAkb2JqU3R5bGUtPmdldEFsaWdubWVudCgpLT5zZXRJbmRlbnQoJGluZGVudCk7CgogICAgICAgICAgICAgICAgLy8gYml0OiA0OyBtYXNrOiAweDEwOyAxID0gc2hyaW5rIGNvbnRlbnQgdG8gZml0IGludG8gY2VsbAogICAgICAgICAgICAgICAgJHNocmlua1RvRml0ID0gKDB4MTAgJiBvcmQoJHJlY29yZERhdGF7OH0pKSA+PiA0OwogICAgICAgICAgICAgICAgc3dpdGNoICgkc2hyaW5rVG9GaXQpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0QWxpZ25tZW50KCktPnNldFNocmlua1RvRml0KGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgICAgICAkb2JqU3R5bGUtPmdldEFsaWdubWVudCgpLT5zZXRTaHJpbmtUb0ZpdCh0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gb2Zmc2V0OiAgOTsgc2l6ZTogMTsgRmxhZ3MgdXNlZCBmb3IgYXR0cmlidXRlIGdyb3VwcwoKICAgICAgICAgICAgICAgIC8vIG9mZnNldDogMTA7IHNpemU6IDQ7IENlbGwgYm9yZGVyIGxpbmVzIGFuZCBiYWNrZ3JvdW5kIGFyZWEKICAgICAgICAgICAgICAgIC8vIGJpdDogMy0wOyBtYXNrOiAweDAwMDAwMDBGOyBsZWZ0IHN0eWxlCiAgICAgICAgICAgICAgICBpZiAoJGJvcmRlcnNMZWZ0U3R5bGUgPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1X1N0eWxlX0JvcmRlcjo6bG9va3VwKCgweDAwMDAwMDBGICYgc2VsZjo6Z2V0SW50NGQoJHJlY29yZERhdGEsIDEwKSkgPj4gMCkpIHsKICAgICAgICAgICAgICAgICAgICAkb2JqU3R5bGUtPmdldEJvcmRlcnMoKS0+Z2V0TGVmdCgpLT5zZXRCb3JkZXJTdHlsZSgkYm9yZGVyc0xlZnRTdHlsZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBiaXQ6IDctNDsgbWFzazogMHgwMDAwMDBGMDsgcmlnaHQgc3R5bGUKICAgICAgICAgICAgICAgIGlmICgkYm9yZGVyc1JpZ2h0U3R5bGUgPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1X1N0eWxlX0JvcmRlcjo6bG9va3VwKCgweDAwMDAwMEYwICYgc2VsZjo6Z2V0SW50NGQoJHJlY29yZERhdGEsIDEwKSkgPj4gNCkpIHsKICAgICAgICAgICAgICAgICAgICAkb2JqU3R5bGUtPmdldEJvcmRlcnMoKS0+Z2V0UmlnaHQoKS0+c2V0Qm9yZGVyU3R5bGUoJGJvcmRlcnNSaWdodFN0eWxlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIGJpdDogMTEtODsgbWFzazogMHgwMDAwMEYwMDsgdG9wIHN0eWxlCiAgICAgICAgICAgICAgICBpZiAoJGJvcmRlcnNUb3BTdHlsZSA9IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDVfU3R5bGVfQm9yZGVyOjpsb29rdXAoKDB4MDAwMDBGMDAgJiBzZWxmOjpnZXRJbnQ0ZCgkcmVjb3JkRGF0YSwgMTApKSA+PiA4KSkgewogICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0Qm9yZGVycygpLT5nZXRUb3AoKS0+c2V0Qm9yZGVyU3R5bGUoJGJvcmRlcnNUb3BTdHlsZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBiaXQ6IDE1LTEyOyBtYXNrOiAweDAwMDBGMDAwOyBib3R0b20gc3R5bGUKICAgICAgICAgICAgICAgIGlmICgkYm9yZGVyc0JvdHRvbVN0eWxlID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNV9TdHlsZV9Cb3JkZXI6Omxvb2t1cCgoMHgwMDAwRjAwMCAmIHNlbGY6OmdldEludDRkKCRyZWNvcmREYXRhLCAxMCkpID4+IDEyKSkgewogICAgICAgICAgICAgICAgICAgICRvYmpTdHlsZS0+Z2V0Qm9yZGVycygpLT5nZXRCb3R0b20oKS0+c2V0Qm9yZGVyU3R5bGUoJGJvcmRlcnNCb3R0b21TdHlsZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBiaXQ6IDIyLTE2OyBtYXNrOiAweDAwN0YwMDAwOyBsZWZ0IGNvbG9yCiAgICAgICAgICAgICAgICAkb2JqU3R5bGUtPmdldEJvcmRlcnMoKS0+Z2V0TGVmdCgpLT5jb2xvckluZGV4ID0gKDB4MDA3RjAwMDAgJiBzZWxmOjpnZXRJbnQ0ZCgkcmVjb3JkRGF0YSwgMTApKSA+PiAxNjsKCiAgICAgICAgICAgICAgICAvLyBiaXQ6IDI5LTIzOyBtYXNrOiAweDNGODAwMDAwOyByaWdodCBjb2xvcgogICAgICAgICAgICAgICAgJG9ialN0eWxlLT5nZXRCb3JkZXJzKCktPmdldFJpZ2h0KCktPmNvbG9ySW5kZXggPSAoMHgzRjgwMDAwMCAmIHNlbGY6OmdldEludDRkKCRyZWNvcmREYXRhLCAxMCkpID4+IDIzOwoKICAgICAgICAgICAgICAgIC8vIGJpdDogMzA7IG1hc2s6IDB4NDAwMDAwMDA7IDEgPSBkaWFnb25hbCBsaW5lIGZyb20gdG9wIGxlZnQgdG8gcmlnaHQgYm90dG9tCiAgICAgICAgICAgICAgICAkZGlhZ29uYWxEb3duID0gKDB4NDAwMDAwMDAgJiBzZWxmOjpnZXRJbnQ0ZCgkcmVjb3JkRGF0YSwgMTApKSA+PiAzMCA\\\\\/CiAgICAgICAgaWYgKCgkdGhpcy0+Z2V0UmVhZEZpbHRlcigpICE9PSBudWxsKSAmJiAkdGhpcy0+Z2V0UmVhZEZpbHRlcigpLT5yZWFkQ2VsbCgkY29sdW1uU3RyaW5nLCAkcm93ICsgMSwgJHRoaXMtPnBocFNoZWV0LT5nZXRUaXRsZSgpKSkgewogICAgICAgICAgICAvLyBvZmZzZXQ6IDQ7IHNpemU6IDI7IGluZGV4IHRvIFhGIHJlY29yZAogICAgICAgICAgICAkeGZJbmRleCA9IHNlbGY6OmdldEludDJkKCRyZWNvcmREYXRhLCA0KTsKCiAgICAgICAgICAgIC8vIG9mZnNldDogNjsgc2l6ZTogMTsgdGhlIGJvb2xlYW4gdmFsdWUgb3IgZXJyb3IgdmFsdWUKICAgICAgICAgICAgJGJvb2xFcnIgPSBvcmQoJHJlY29yZERhdGF7Nn0pOwoKICAgICAgICAgICAgLy8gb2Zmc2V0OiA3OyBzaXplOiAxOyAwPWJvb2xlYW47IDE9ZXJyb3IKICAgICAgICAgICAgJGlzRXJyb3IgPSBvcmQoJHJlY29yZERhdGF7N30pOwoKICAgICAgICAgICAgJGNlbGwgPSAkdGhpcy0+cGhwU2hlZXQtPmdldENlbGwoJGNvbHVtblN0cmluZyAuICgkcm93ICsgMSkpOwogICAgICAgICAgICBzd2l0Y2ggKCRpc0Vycm9yKSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6IC8vIGJvb2xlYW4KICAgICAgICAgICAgICAgICAgICAkdmFsdWUgPSAoYm9vbCkgJGJvb2xFcnI7CgogICAgICAgICAgICAgICAgICAgIC8vIGFkZCBjZWxsIHZhbHVlCiAgICAgICAgICAgICAgICAgICAgJGNlbGwtPnNldFZhbHVlRXhwbGljaXQoJHZhbHVlLCBQSFBFeGNlbF9DZWxsX0RhdGFUeXBlOjpUWVBFX0JPT0wpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAxOiAvLyBlcnJvciB0eXBlCiAgICAgICAgICAgICAgICAgICAgJHZhbHVlID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNV9FcnJvckNvZGU6Omxvb2t1cCgkYm9vbEVycik7CgogICAgICAgICAgICAgICAgICAgIC8vIGFkZCBjZWxsIHZhbHVlCiAgICAgICAgICAgICAgICAgICAgJGNlbGwtPnNldFZhbHVlRXhwbGljaXQoJHZhbHVlLCBQSFBFeGNlbF9DZWxsX0RhdGFUeXBlOjpUWVBFX0VSUk9SKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCEkdGhpcy0+cmVhZERhdGFPbmx5KSB7CiAgICAgICAgICAgICAgICAvLyBhZGQgY2VsbCBzdHlsZQogICAgICAgICAgICAgICAgJGNlbGwtPnNldFhmSW5kZXgoJHRoaXMtPm1hcENlbGxYZkluZGV4WyR4ZkluZGV4XSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgoKICAgIC8qKgogICAgICogUmVhZCBNVUxCTEFOSyByZWNvcmQKICAgICAqIFRoaXMgcmVjb3JkIHJlcHJlc2VudHMgYSBjZWxsIHJhbmdlIG9mIGVtcHR5IGNlbGxzLiBBbGwKICAgICAqIGNlbGxzIGFyZSBsb2NhdGVkIGluIHRoZSBzYW1lIHJvdwogICAgICoKICAgICAqIC0tICAgICJPcGVuT2ZmaWNlLm9yZydzIERvY3VtZW50YXRpb24gb2YgdGhlIE1pY3Jvc29mdAogICAgICogICAgICAgICBFeGNlbCBGaWxlIEZvcm1hdCIKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWFkTXVsQmxhbmsoKQogICAgewogICAgICAgICRsZW5ndGggPSBzZWxmOjpnZXRJbnQyZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDIpOwogICAgICAgICRyZWNvcmREYXRhID0gJHRoaXMtPnJlYWRSZWNvcmREYXRhKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgNCwgJGxlbmd0aCk7CgogICAgICAgIC8vIG1vdmUgc3RyZWFtIHBvaW50ZXIgdG8gbmV4dCByZWNvcmQKICAgICAgICAkdGhpcy0+cG9zICs9IDQgKyAkbGVuZ3RoOwoKICAgICAgICAvLyBvZmZzZXQ6IDA7IHNpemU6IDI7IGluZGV4IHRvIHJvdwogICAgICAgICRyb3cgPSBzZWxmOjpnZXRJbnQyZCgkcmVjb3JkRGF0YSwgMCk7CgogICAgICAgIC8vIG9mZnNldDogMjsgc2l6ZTogMjsgaW5kZXggdG8gZmlyc3QgY29sdW1uCiAgICAgICAgJGZjID0gc2VsZjo6Z2V0SW50MmQoJHJlY29yZERhdGEsIDIpOwoKICAgICAgICAvLyBvZmZzZXQ6IDQ7IHNpemU6IDIgeCBuYzsgbGlzdCBvZiBpbmRleGVzIHRvIFhGIHJlY29yZHMKICAgICAgICAvLyBhZGQgc3R5bGUgaW5mb3JtYXRpb24KICAgICAgICBpZiAoISR0aGlzLT5yZWFkRGF0YU9ubHkgJiYgJHRoaXMtPnJlYWRFbXB0eUNlbGxzKSB7CiAgICAgICAgICAgIGZvciAoJGkgPSAwOyAkaSA8ICRsZW5ndGggLyAyIC0gMzsgKyskaSkgewogICAgICAgICAgICAgICAgJGNvbHVtblN0cmluZyA9IFBIUEV4Y2VsX0NlbGw6OnN0cmluZ0Zyb21Db2x1bW5JbmRleCgkZmMgKyAkaSk7CgogICAgICAgICAgICAgICAgLy8gUmVhZCBjZWxsPwogICAgICAgICAgICAgICAgaWYgKCgkdGhpcy0+Z2V0UmVhZEZpbHRlcigpICE9PSBudWxsKSAmJiAkdGhpcy0+Z2V0UmVhZEZpbHRlcigpLT5yZWFkQ2VsbCgkY29sdW1uU3RyaW5nLCAkcm93ICsgMSwgJHRoaXMtPnBocFNoZWV0LT5nZXRUaXRsZSgpKSkgewogICAgICAgICAgICAgICAgICAgICR4ZkluZGV4ID0gc2VsZjo6Z2V0SW50MmQoJHJlY29yZERhdGEsIDQgKyAyICogJGkpOwogICAgICAgICAgICAgICAgICAgICR0aGlzLT5waHBTaGVldC0+Z2V0Q2VsbCgkY29sdW1uU3RyaW5nIC4gKCRyb3cgKyAxKSktPnNldFhmSW5kZXgoJHRoaXMtPm1hcENlbGxYZkluZGV4WyR4ZkluZGV4XSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIG9mZnNldDogNjsgc2l6ZSAyOyBpbmRleCB0byBsYXN0IGNvbHVtbiAobm90IG5lZWRlZCkKICAgIH0KCgogICAgLyoqCiAgICAgKiBSZWFkIExBQkVMIHJlY29yZAogICAgICogVGhpcyByZWNvcmQgcmVwcmVzZW50cyBhIGNlbGwgdGhhdCBjb250YWlucyBhIHN0cmluZy4gSW4KICAgICAqIEJJRkY4IGl0IGlzIHVzdWFsbHkgcmVwbGFjZWQgYnkgdGhlIExBQkVMU1NUIHJlY29yZC4KICAgICAqIEV4Y2VsIHN0aWxsIHVzZXMgdGhpcyByZWNvcmQsIGlmIGl0IGNvcGllcyB1bmZvcm1hdHRlZAogICAgICogdGV4dCBjZWxscyB0byB0aGUgY2xpcGJvYXJkLgogICAgICoKICAgICAqIC0tICAgICJPcGVuT2ZmaWNlLm9yZydzIERvY3VtZW50YXRpb24gb2YgdGhlIE1pY3Jvc29mdAogICAgICogICAgICAgICBFeGNlbCBGaWxlIEZvcm1hdCIKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWFkTGFiZWwoKQogICAgewogICAgICAgICRsZW5ndGggPSBzZWxmOjpnZXRJbnQyZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDIpOwogICAgICAgICRyZWNvcmREYXRhID0gJHRoaXMtPnJlYWRSZWNvcmREYXRhKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgNCwgJGxlbmd0aCk7CgogICAgICAgIC8vIG1vdmUgc3RyZWFtIHBvaW50ZXIgdG8gbmV4dCByZWNvcmQKICAgICAgICAkdGhpcy0+cG9zICs9IDQgKyAkbGVuZ3RoOwoKICAgICAgICAvLyBvZmZzZXQ6IDA7IHNpemU6IDI7IGluZGV4IHRvIHJvdwogICAgICAgICRyb3cgPSBzZWxmOjpnZXRJbnQyZCgkcmVjb3JkRGF0YSwgMCk7CgogICAgICAgIC8vIG9mZnNldDogMjsgc2l6ZTogMjsgaW5kZXggdG8gY29sdW1uCiAgICAgICAgJGNvbHVtbiA9IHNlbGY6OmdldEludDJkKCRyZWNvcmREYXRhLCAyKTsKICAgICAgICAkY29sdW1uU3RyaW5nID0gUEhQRXhjZWxfQ2VsbDo6c3RyaW5nRnJvbUNvbHVtbkluZGV4KCRjb2x1bW4pOwoKICAgICAgICAvLyBSZWFkIGNlbGw\\\/ICRzcGFjZTQgOiAnJzsgLy8gc3BhY2VzIGJlZm9yZSBjbG9zaW5nIHBhcmVudGhlc2lzCiAgICAgICAgICAgICRzcGFjZTUgPSBpc3NldCgkc3BhY2U1KSA\\\\/ICRjaGFyYWN0ZXJDb3VudCA6IDIgKiAkY2hhcmFjdGVyQ291bnQpLCAkaXNDb21wcmVzc2VkKTsKCiAgICAgICAgcmV0dXJuIGFycmF5KAogICAgICAgICAgICAndmFsdWUnID0+ICR2YWx1ZSwKICAgICAgICAgICAgJ3NpemUnID0+ICRpc0NvbXByZXNzZWQgPyAxICsgJGNoYXJhY3RlckNvdW50IDogMSArIDIgKiAkY2hhcmFjdGVyQ291bnQsIC8vIHRoZSBzaXplIGluIGJ5dGVzIGluY2x1ZGluZyB0aGUgb3B0aW9uIGZsYWdzCiAgICAgICAgKTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBDb252ZXJ0IFVURi04IHN0cmluZyB0byBzdHJpbmcgc3Vyb3VuZGVkIGJ5IGRvdWJsZSBxdW90ZXMuIFVzZWQgZm9yIGV4cGxpY2l0IHN0cmluZyB0b2tlbnMgaW4gZm9ybXVsYXMuCiAgICAgKiBFeGFtcGxlOiAgaGVsbG8id29ybGQgIC0tPiAgImhlbGxvIiJ3b3JsZCIKICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICR2YWx1ZSBVVEYtOCBlbmNvZGVkIHN0cmluZwogICAgICogQHJldHVybiBzdHJpbmcKICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gVVRGOHRvRXhjZWxEb3VibGVRdW90ZWQoJHZhbHVlKQogICAgewogICAgICAgIHJldHVybiAnIicgLiBzdHJfcmVwbGFjZSgnIicsICciIicsICR2YWx1ZSkgLiAnIic7CiAgICB9CgoKICAgIC8qKgogICAgICogUmVhZHMgZmlyc3QgOCBieXRlcyBvZiBhIHN0cmluZyBhbmQgcmV0dXJuIElFRUUgNzU0IGZsb2F0CiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkZGF0YSBCaW5hcnkgc3RyaW5nIHRoYXQgaXMgYXQgbGVhc3QgOCBieXRlcyBsb25nCiAgICAgKiBAcmV0dXJuIGZsb2F0CiAgICAgKi8KICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGV4dHJhY3ROdW1iZXIoJGRhdGEpCiAgICB7CiAgICAgICAgJHJrbnVtaGlnaCA9IHNlbGY6OmdldEludDRkKCRkYXRhLCA0KTsKICAgICAgICAkcmtudW1sb3cgPSBzZWxmOjpnZXRJbnQ0ZCgkZGF0YSwgMCk7CiAgICAgICAgJHNpZ24gPSAoJHJrbnVtaGlnaCAmIDB4ODAwMDAwMDApID4+IDMxOwogICAgICAgICRleHAgPSAoKCRya251bWhpZ2ggJiAweDdmZjAwMDAwKSA+PiAyMCkgLSAxMDIzOwogICAgICAgICRtYW50aXNzYSA9ICgweDEwMDAwMCB8ICgkcmtudW1oaWdoICYgMHgwMDBmZmZmZikpOwogICAgICAgICRtYW50aXNzYWxvdzEgPSAoJHJrbnVtbG93ICYgMHg4MDAwMDAwMCkgPj4gMzE7CiAgICAgICAgJG1hbnRpc3NhbG93MiA9ICgkcmtudW1sb3cgJiAweDdmZmZmZmZmKTsKICAgICAgICAkdmFsdWUgPSAkbWFudGlzc2EgLyBwb3coMiwgKDIwIC0gJGV4cCkpOwoKICAgICAgICBpZiAoJG1hbnRpc3NhbG93MSAhPSAwKSB7CiAgICAgICAgICAgICR2YWx1ZSArPSAxIC8gcG93KDIsICgyMSAtICRleHApKTsKICAgICAgICB9CgogICAgICAgICR2YWx1ZSArPSAkbWFudGlzc2Fsb3cyIC8gcG93KDIsICg1MiAtICRleHApKTsKICAgICAgICBpZiAoJHNpZ24pIHsKICAgICAgICAgICAgJHZhbHVlICo9IC0xOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICR2YWx1ZTsKICAgIH0KCgogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gZ2V0SUVFRTc1NCgkcmtudW0pCiAgICB7CiAgICAgICAgaWYgKCgkcmtudW0gJiAweDAyKSAhPSAwKSB7CiAgICAgICAgICAgICR2YWx1ZSA9ICRya251bSA+PiAyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGNoYW5nZXMgYnkgbW1wLCBpbmZvIG9uIElFRUU3NTQgZW5jb2RpbmcgZnJvbQogICAgICAgICAgICAvLyByZXNlYXJjaC5taWNyb3NvZnQuY29tL35ob2xsYXNjaC9jZ2luZGV4L2NvZGluZy9pZWVlZmxvYXQuaHRtbAogICAgICAgICAgICAvLyBUaGUgUksgZm9ybWF0IGNhbGxzIGZvciB1c2luZyBvbmx5IHRoZSBtb3N0IHNpZ25pZmljYW50IDMwIGJpdHMKICAgICAgICAgICAgLy8gb2YgdGhlIDY0IGJpdCBmbG9hdGluZyBwb2ludCB2YWx1ZS4gVGhlIG90aGVyIDM0IGJpdHMgYXJlIGFzc3VtZWQKICAgICAgICAgICAgLy8gdG8gYmUgMCBzbyB3ZSB1c2UgdGhlIHVwcGVyIDMwIGJpdHMgb2YgJHJrbnVtIGFzIGZvbGxvd3MuLi4KICAgICAgICAgICAgJHNpZ24gPSAoJHJrbnVtICYgMHg4MDAwMDAwMCkgPj4gMzE7CiAgICAgICAgICAgICRleHAgPSAoJHJrbnVtICYgMHg3ZmYwMDAwMCkgPj4gMjA7CiAgICAgICAgICAgICRtYW50aXNzYSA9ICgweDEwMDAwMCB8ICgkcmtudW0gJiAweDAwMGZmZmZjKSk7CiAgICAgICAgICAgICR2YWx1ZSA9ICRtYW50aXNzYSAvIHBvdygyLCAoMjAtICgkZXhwIC0gMTAyMykpKTsKICAgICAgICAgICAgaWYgKCRzaWduKSB7CiAgICAgICAgICAgICAgICAkdmFsdWUgPSAtMSAqICR2YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvL2VuZCBvZiBjaGFuZ2VzIGJ5IG1tcAogICAgICAgIH0KICAgICAgICBpZiAoKCRya251bSAmIDB4MDEpICE9IDApIHsKICAgICAgICAgICAgJHZhbHVlIC89IDEwMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICR2YWx1ZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBHZXQgVVRGLTggc3RyaW5nIGZyb20gKGNvbXByZXNzZWQgb3IgdW5jb21wcmVzc2VkKSBVVEYtMTYgc3RyaW5nCiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkc3RyaW5nCiAgICAgKiBAcGFyYW0gYm9vbCAkY29tcHJlc3NlZAogICAgICogQHJldHVybiBzdHJpbmcKICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gZW5jb2RlVVRGMTYoJHN0cmluZywgJGNvbXByZXNzZWQgPSAnJykKICAgIHsKICAgICAgICBpZiAoJGNvbXByZXNzZWQpIHsKICAgICAgICAgICAgJHN0cmluZyA9IHNlbGY6OnVuY29tcHJlc3NCeXRlU3RyaW5nKCRzdHJpbmcpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OkNvbnZlcnRFbmNvZGluZygkc3RyaW5nLCAnVVRGLTgnLCAnVVRGLTE2TEUnKTsKICAgIH0KCiAgICAvKioKICAgICAqIENvbnZlcnQgVVRGLTE2IHN0cmluZyBpbiBjb21wcmVzc2VkIG5vdGF0aW9uIHRvIHVuY29tcHJlc3NlZCBmb3JtLiBPbmx5IHVzZWQgZm9yIEJJRkY4LgogICAgICoKICAgICAqIEBwYXJhbSBzdHJpbmcgJHN0cmluZwogICAgICogQHJldHVybiBzdHJpbmcKICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gdW5jb21wcmVzc0J5dGVTdHJpbmcoJHN0cmluZykKICAgIHsKICAgICAgICAkdW5jb21wcmVzc2VkU3RyaW5nID0gJyc7CiAgICAgICAgJHN0ckxlbiA9IHN0cmxlbigkc3RyaW5nKTsKICAgICAgICBmb3IgKCRpID0gMDsgJGkgPCAkc3RyTGVuOyArKyRpKSB7CiAgICAgICAgICAgICR1bmNvbXByZXNzZWRTdHJpbmcgLj0gJHN0cmluZ1skaV0gLiAiXDAiOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICR1bmNvbXByZXNzZWRTdHJpbmc7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb252ZXJ0IHN0cmluZyB0byBVVEYtOC4gT25seSB1c2VkIGZvciBCSUZGNS4KICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRzdHJpbmcKICAgICAqIEByZXR1cm4gc3RyaW5nCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gZGVjb2RlQ29kZXBhZ2UoJHN0cmluZykKICAgIHsKICAgICAgICByZXR1cm4gUEhQRXhjZWxfU2hhcmVkX1N0cmluZzo6Q29udmVydEVuY29kaW5nKCRzdHJpbmcsICdVVEYtOCcsICR0aGlzLT5jb2RlcGFnZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWFkIDE2LWJpdCB1bnNpZ25lZCBpbnRlZ2VyCiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkZGF0YQogICAgICogQHBhcmFtIGludCAkcG9zCiAgICAgKiBAcmV0dXJuIGludAogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldEludDJkKCRkYXRhLCAkcG9zKQogICAgewogICAgICAgIHJldHVybiBvcmQoJGRhdGFbJHBvc10pIHwgKG9yZCgkZGF0YVskcG9zKzFdKSA8PCA4KTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlYWQgMzItYml0IHNpZ25lZCBpbnRlZ2VyCiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkZGF0YQogICAgICogQHBhcmFtIGludCAkcG9zCiAgICAgKiBAcmV0dXJuIGludAogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldEludDRkKCRkYXRhLCAkcG9zKQogICAgewogICAgICAgIC8vIEZJWDogcmVwcmVzZW50IG51bWJlcnMgY29ycmVjdGx5IG9uIDY0LWJpdCBzeXN0ZW0KICAgICAgICAvLyBodHRwOi8vc291cmNlZm9yZ2UubmV0L3RyYWNrZXIvaW5kZXgucGhwP2Z1bmM9ZGV0YWlsJmFpZD0xNDg3MzcyJmdyb3VwX2lkPTk5MTYwJmF0aWQ9NjIzMzM0CiAgICAgICAgLy8gSGFja2VkIGJ5IEFuZHJlYXMgUmVobSAyMDA2IHRvIGVuc3VyZSBjb3JyZWN0IHJlc3VsdCBvZiB0aGUgPDwyNCBibG9jayBvbiAzMiBhbmQgNjRiaXQgc3lzdGVtcwogICAgICAgICRfb3JfMjQgPSBvcmQoJGRhdGFbJHBvcyArIDNdKTsKICAgICAgICBpZiAoJF9vcl8yNCA+PSAxMjgpIHsKICAgICAgICAgICAgLy8gbmVnYXRpdmUgbnVtYmVyCiAgICAgICAgICAgICRfb3JkXzI0ID0gLWFicygoMjU2IC0gJF9vcl8yNCkgPDwgMjQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRfb3JkXzI0ID0gKCRfb3JfMjQgJiAxMjcpIDw8IDI0OwogICAgICAgIH0KICAgICAgICByZXR1cm4gb3JkKCRkYXRhWyRwb3NdKSB8IChvcmQoJGRhdGFbJHBvcysxXSkgPDwgOCkgfCAob3JkKCRkYXRhWyRwb3MrMl0pIDw8IDE2KSB8ICRfb3JkXzI0OwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gcGFyc2VSaWNoVGV4dCgkaXMgPSAnJykKICAgIHsKICAgICAgICAkdmFsdWUgPSBuZXcgUEhQRXhjZWxfUmljaFRleHQoKTsKICAgICAgICAkdmFsdWUtPmNyZWF0ZVRleHQoJGlzKTsKCiAgICAgICAgcmV0dXJuICR2YWx1ZTsKICAgIH0KfQo=",
    "size": "292640"
}