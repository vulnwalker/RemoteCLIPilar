{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/rickshaw\/rickshaw.js",
    "lastUpdate": "2018-03-22+14:23:50.11",
    "contentFile": "KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7CiAgICAgICAgZGVmaW5lKFsnZDMnXSwgZnVuY3Rpb24gKGQzKSB7CiAgICAgICAgICAgIHJldHVybiAocm9vdC5SaWNrc2hhdyA9IGZhY3RvcnkoZDMpKTsKICAgICAgICB9KTsKICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7CiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2QzJykpOwogICAgfSBlbHNlIHsKICAgICAgICByb290LlJpY2tzaGF3ID0gZmFjdG9yeShkMyk7CiAgICB9Cn0odGhpcywgZnVuY3Rpb24gKGQzKSB7Ci8qIGpzaGludCAtVzA3OSAqLyAKCnZhciBSaWNrc2hhdyA9IHsKCgluYW1lc3BhY2U6IGZ1bmN0aW9uKG5hbWVzcGFjZSwgb2JqKSB7CgoJCXZhciBwYXJ0cyA9IG5hbWVzcGFjZS5zcGxpdCgnLicpOwoKCQl2YXIgcGFyZW50ID0gUmlja3NoYXc7CgoJCWZvcih2YXIgaSA9IDEsIGxlbmd0aCA9IHBhcnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CgkJCXZhciBjdXJyZW50UGFydCA9IHBhcnRzW2ldOwoJCQlwYXJlbnRbY3VycmVudFBhcnRdID0gcGFyZW50W2N1cnJlbnRQYXJ0XSB8fCB7fTsKCQkJcGFyZW50ID0gcGFyZW50W2N1cnJlbnRQYXJ0XTsKCQl9CgkJcmV0dXJuIHBhcmVudDsKCX0sCgoJa2V5czogZnVuY3Rpb24ob2JqKSB7CgkJdmFyIGtleXMgPSBbXTsKCQlmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTsKCQlyZXR1cm4ga2V5czsKCX0sCgoJZXh0ZW5kOiBmdW5jdGlvbihkZXN0aW5hdGlvbiwgc291cmNlKSB7CgoJCWZvciAodmFyIHByb3BlcnR5IGluIHNvdXJjZSkgewoJCQlkZXN0aW5hdGlvbltwcm9wZXJ0eV0gPSBzb3VyY2VbcHJvcGVydHldOwoJCX0KCQlyZXR1cm4gZGVzdGluYXRpb247Cgl9LAoKCWNsb25lOiBmdW5jdGlvbihvYmopIHsKCQlyZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTsKCX0KfTsKLyogQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9KYWtvYm8vUFRDbGFzcyAqLwoKLyoKQ29weXJpZ2h0IChjKSAyMDA1LTIwMTAgU2FtIFN0ZXBoZW5zb24KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQpBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFClNPRlRXQVJFLgoqLwovKiBCYXNlZCBvbiBBbGV4IEFybmVsbCdzIGluaGVyaXRhbmNlIGltcGxlbWVudGF0aW9uLiAqLwovKiogc2VjdGlvbjogTGFuZ3VhZ2UKICogY2xhc3MgQ2xhc3MKICoKICogIE1hbmFnZXMgUHJvdG90eXBlJ3MgY2xhc3MtYmFzZWQgT09QIHN5c3RlbS4KICoKICogIFJlZmVyIHRvIFByb3RvdHlwZSdzIHdlYiBzaXRlIGZvciBhIFt0dXRvcmlhbCBvbiBjbGFzc2VzIGFuZAogKiAgaW5oZXJpdGFuY2VdKGh0dHA6Ly9wcm90b3R5cGVqcy5vcmcvbGVhcm4vY2xhc3MtaW5oZXJpdGFuY2UpLgoqKi8KKGZ1bmN0aW9uKGdsb2JhbENvbnRleHQpIHsKLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovCi8qIEltcG9ydCBmcm9tIG9iamVjdC5qcyAgICAgICAgICAgICAgICAqLwovKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KdmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsCiAgICBOVUxMX1RZUEUgPSAnTnVsbCcsCiAgICBVTkRFRklORURfVFlQRSA9ICdVbmRlZmluZWQnLAogICAgQk9PTEVBTl9UWVBFID0gJ0Jvb2xlYW4nLAogICAgTlVNQkVSX1RZUEUgPSAnTnVtYmVyJywKICAgIFNUUklOR19UWVBFID0gJ1N0cmluZycsCiAgICBPQkpFQ1RfVFlQRSA9ICdPYmplY3QnLAogICAgRlVOQ1RJT05fQ0xBU1MgPSAnW29iamVjdCBGdW5jdGlvbl0nOwpmdW5jdGlvbiBpc0Z1bmN0aW9uKG9iamVjdCkgewogIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmplY3QpID09PSBGVU5DVElPTl9DTEFTUzsKfQpmdW5jdGlvbiBleHRlbmQoZGVzdGluYXRpb24sIHNvdXJjZSkgewogIGZvciAodmFyIHByb3BlcnR5IGluIHNvdXJjZSkgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIC8vIG1vZGlmeSBwcm90ZWN0IHByaW1pdGl2ZSBzbGF1Z2h0ZXIKICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IHNvdXJjZVtwcm9wZXJ0eV07CiAgcmV0dXJuIGRlc3RpbmF0aW9uOwp9CmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7CiAgaWYgKFR5cGUob2JqZWN0KSAhPT0gT0JKRUNUX1RZUEUpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigpOyB9CiAgdmFyIHJlc3VsdHMgPSBbXTsKICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmplY3QpIHsKICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7CiAgICAgIHJlc3VsdHMucHVzaChwcm9wZXJ0eSk7CiAgICB9CiAgfQogIHJldHVybiByZXN1bHRzOwp9CmZ1bmN0aW9uIFR5cGUobykgewogIHN3aXRjaChvKSB7CiAgICBjYXNlIG51bGw6IHJldHVybiBOVUxMX1RZUEU7CiAgICBjYXNlICh2b2lkIDApOiByZXR1cm4gVU5ERUZJTkVEX1RZUEU7CiAgfQogIHZhciB0eXBlID0gdHlwZW9mIG87CiAgc3dpdGNoKHR5cGUpIHsKICAgIGNhc2UgJ2Jvb2xlYW4nOiByZXR1cm4gQk9PTEVBTl9UWVBFOwogICAgY2FzZSAnbnVtYmVyJzogIHJldHVybiBOVU1CRVJfVFlQRTsKICAgIGNhc2UgJ3N0cmluZyc6ICByZXR1cm4gU1RSSU5HX1RZUEU7CiAgfQogIHJldHVybiBPQkpFQ1RfVFlQRTsKfQpmdW5jdGlvbiBpc1VuZGVmaW5lZChvYmplY3QpIHsKICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gInVuZGVmaW5lZCI7Cn0KLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovCi8qIEltcG9ydCBmcm9tIEZ1bmN0aW9uLmpzICAgICAgICAgICAgICAqLwovKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlOwpmdW5jdGlvbiBhcmd1bWVudE5hbWVzKGZuKSB7CiAgdmFyIG5hbWVzID0gZm4udG9TdHJpbmcoKS5tYXRjaCgvXltcc1woXSpmdW5jdGlvblteKF0qXCgoW14pXSopXCkvKVsxXQogICAgLnJlcGxhY2UoL1wvXC8uKj9bXHJcbl18XC9cKig\/Oi58W1xyXG5dKSo\/XCpcLy9nLCAnJykKICAgIC5yZXBsYWNlKC9ccysvZywgJycpLnNwbGl0KCcsJyk7CiAgcmV0dXJuIG5hbWVzLmxlbmd0aCA9PSAxICYmICFuYW1lc1swXSA\\\\/IHRoaXNba2V5XSA6CgkJCQkJdGhpcy5ncmFwaFtrZXldICE9PSB1bmRlZmluZWQgPyB0aGlzLmdyYXBoW2tleV0gOgoJCQkJCXRoaXMuZGVmYXVsdHMoKVtrZXldOwoJCQl9CgoJCX0sIHRoaXMgKTsKCX0sCgoJc2V0U3Ryb2tlV2lkdGg6IGZ1bmN0aW9uKHN0cm9rZVdpZHRoKSB7CgkJaWYgKHN0cm9rZVdpZHRoICE9PSB1bmRlZmluZWQpIHsKCQkJdGhpcy5zdHJva2VXaWR0aCA9IHN0cm9rZVdpZHRoOwoJCX0KCX0sCgoJc2V0VGVuc2lvbjogZnVuY3Rpb24odGVuc2lvbikgewoJCWlmICh0ZW5zaW9uICE9PSB1bmRlZmluZWQpIHsKCQkJdGhpcy50ZW5zaW9uID0gdGVuc2lvbjsKCQl9Cgl9Cn0gKTsKClJpY2tzaGF3Lm5hbWVzcGFjZSgnUmlja3NoYXcuR3JhcGguUmVuZGVyZXIuTGluZScpOwoKUmlja3NoYXcuR3JhcGguUmVuZGVyZXIuTGluZSA9IFJpY2tzaGF3LkNsYXNzLmNyZWF0ZSggUmlja3NoYXcuR3JhcGguUmVuZGVyZXIsIHsKCgluYW1lOiAnbGluZScsCgoJZGVmYXVsdHM6IGZ1bmN0aW9uKCRzdXBlcikgewoKCQlyZXR1cm4gUmlja3NoYXcuZXh0ZW5kKCAkc3VwZXIoKSwgewoJCQl1bnN0YWNrOiB0cnVlLAoJCQlmaWxsOiBmYWxzZSwKCQkJc3Ryb2tlOiB0cnVlCgkJfSApOwoJfSwKCglzZXJpZXNQYXRoRmFjdG9yeTogZnVuY3Rpb24oKSB7CgoJCXZhciBncmFwaCA9IHRoaXMuZ3JhcGg7CgoJCXZhciBmYWN0b3J5ID0gZDMuc3ZnLmxpbmUoKQoJCQkueCggZnVuY3Rpb24oZCkgeyByZXR1cm4gZ3JhcGgueChkLngpIH0gKQoJCQkueSggZnVuY3Rpb24oZCkgeyByZXR1cm4gZ3JhcGgueShkLnkpIH0gKQoJCQkuaW50ZXJwb2xhdGUodGhpcy5ncmFwaC5pbnRlcnBvbGF0aW9uKS50ZW5zaW9uKHRoaXMudGVuc2lvbik7CgoJCWZhY3RvcnkuZGVmaW5lZCAmJiBmYWN0b3J5LmRlZmluZWQoIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueSAhPT0gbnVsbCB9ICk7CgkJcmV0dXJuIGZhY3Rvcnk7Cgl9Cn0gKTsKClJpY2tzaGF3Lm5hbWVzcGFjZSgnUmlja3NoYXcuR3JhcGguUmVuZGVyZXIuU3RhY2snKTsKClJpY2tzaGF3LkdyYXBoLlJlbmRlcmVyLlN0YWNrID0gUmlja3NoYXcuQ2xhc3MuY3JlYXRlKCBSaWNrc2hhdy5HcmFwaC5SZW5kZXJlciwgewoKCW5hbWU6ICdzdGFjaycsCgoJZGVmYXVsdHM6IGZ1bmN0aW9uKCRzdXBlcikgewoKCQlyZXR1cm4gUmlja3NoYXcuZXh0ZW5kKCAkc3VwZXIoKSwgewoJCQlmaWxsOiB0cnVlLAoJCQlzdHJva2U6IGZhbHNlLAoJCQl1bnN0YWNrOiBmYWxzZQoJCX0gKTsKCX0sCgoJc2VyaWVzUGF0aEZhY3Rvcnk6IGZ1bmN0aW9uKCkgewoKCQl2YXIgZ3JhcGggPSB0aGlzLmdyYXBoOwoKCQl2YXIgZmFjdG9yeSA9IGQzLnN2Zy5hcmVhKCkKCQkJLngoIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGdyYXBoLngoZC54KSB9ICkKCQkJLnkwKCBmdW5jdGlvbihkKSB7IHJldHVybiBncmFwaC55KGQueTApIH0gKQoJCQkueTEoIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGdyYXBoLnkoZC55ICsgZC55MCkgfSApCgkJCS5pbnRlcnBvbGF0ZSh0aGlzLmdyYXBoLmludGVycG9sYXRpb24pLnRlbnNpb24odGhpcy50ZW5zaW9uKTsKCgkJZmFjdG9yeS5kZWZpbmVkICYmIGZhY3RvcnkuZGVmaW5lZCggZnVuY3Rpb24oZCkgeyByZXR1cm4gZC55ICE9PSBudWxsIH0gKTsKCQlyZXR1cm4gZmFjdG9yeTsKCX0KfSApOwoKUmlja3NoYXcubmFtZXNwYWNlKCdSaWNrc2hhdy5HcmFwaC5SZW5kZXJlci5CYXInKTsKClJpY2tzaGF3LkdyYXBoLlJlbmRlcmVyLkJhciA9IFJpY2tzaGF3LkNsYXNzLmNyZWF0ZSggUmlja3NoYXcuR3JhcGguUmVuZGVyZXIsIHsKCgluYW1lOiAnYmFyJywKCglkZWZhdWx0czogZnVuY3Rpb24oJHN1cGVyKSB7CgoJCXZhciBkZWZhdWx0cyA9IFJpY2tzaGF3LmV4dGVuZCggJHN1cGVyKCksIHsKCQkJZ2FwU2l6ZTogMC4wNSwKCQkJdW5zdGFjazogZmFsc2UKCQl9ICk7CgoJCWRlbGV0ZSBkZWZhdWx0cy50ZW5zaW9uOwoJCXJldHVybiBkZWZhdWx0czsKCX0sCgoJaW5pdGlhbGl6ZTogZnVuY3Rpb24oJHN1cGVyLCBhcmdzKSB7CgkJYXJncyA9IGFyZ3MgfHwge307CgkJdGhpcy5nYXBTaXplID0gYXJncy5nYXBTaXplIHx8IHRoaXMuZ2FwU2l6ZTsKCQkkc3VwZXIoYXJncyk7Cgl9LAoKCWRvbWFpbjogZnVuY3Rpb24oJHN1cGVyKSB7CgoJCXZhciBkb21haW4gPSAkc3VwZXIoKTsKCgkJdmFyIGZyZXF1ZW50SW50ZXJ2YWwgPSB0aGlzLl9mcmVxdWVudEludGVydmFsKHRoaXMuZ3JhcGguc3RhY2tlZERhdGEuc2xpY2UoLTEpLnNoaWZ0KCkpOwoJCWRvbWFpbi54WzFdICs9IE51bWJlcihmcmVxdWVudEludGVydmFsLm1hZ25pdHVkZSk7CgoJCXJldHVybiBkb21haW47Cgl9LAoKCWJhcldpZHRoOiBmdW5jdGlvbihzZXJpZXMpIHsKCgkJdmFyIGZyZXF1ZW50SW50ZXJ2YWwgPSB0aGlzLl9mcmVxdWVudEludGVydmFsKHNlcmllcy5zdGFjayk7CgkJdmFyIGJhcldpZHRoID0gdGhpcy5ncmFwaC54Lm1hZ25pdHVkZShmcmVxdWVudEludGVydmFsLm1hZ25pdHVkZSkgKiAoMSAtIHRoaXMuZ2FwU2l6ZSk7CgoJCXJldHVybiBiYXJXaWR0aDsKCX0sCgoJcmVuZGVyOiBmdW5jdGlvbihhcmdzKSB7CgoJCWFyZ3MgPSBhcmdzIHx8IHt9OwoKCQl2YXIgZ3JhcGggPSB0aGlzLmdyYXBoOwoJCXZhciBzZXJpZXMgPSBhcmdzLnNlcmllcyB8fCBncmFwaC5zZXJpZXM7CgoJCXZhciB2aXMgPSBhcmdzLnZpcyB8fCBncmFwaC52aXM7CgkJdmlzLnNlbGVjdEFsbCgnKicpLnJlbW92ZSgpOwoKCQl2YXIgYmFyV2lkdGggPSB0aGlzLmJhcldpZHRoKHNlcmllcy5hY3RpdmUoKVswXSk7CgkJdmFyIGJhclhPZmZzZXQgPSAwOwoKCQl2YXIgYWN0aXZlU2VyaWVzQ291bnQgPSBzZXJpZXMuZmlsdGVyKCBmdW5jdGlvbihzKSB7IHJldHVybiAhcy5kaXNhYmxlZDsgfSApLmxlbmd0aDsKCQl2YXIgc2VyaWVzQmFyV2lkdGggPSB0aGlzLnVuc3RhY2sgPyBiYXJXaWR0aCAvIGFjdGl2ZVNlcmllc0NvdW50IDogYmFyV2lkdGg7CgoJCXZhciB0cmFuc2Zvcm0gPSBmdW5jdGlvbihkKSB7CgkJCS8vIGFkZCBhIG1hdHJpeCB0cmFuc2Zvcm0gZm9yIG5lZ2F0aXZlIHZhbHVlcwoJCQl2YXIgbWF0cml4ID0gWyAxLCAwLCAwLCAoZC55IDwgMCA\\/IAoJCQlNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCkgOiAKCQkJb3B0aW9ucy50aW1lQmFzZTsKCgkJdmFyIHRpbWVJbnRlcnZhbCA9IHR5cGVvZihvcHRpb25zLnRpbWVJbnRlcnZhbCkgPT0gJ3VuZGVmaW5lZCcgPwoJCQkxMDAwIDoKCQkJb3B0aW9ucy50aW1lSW50ZXJ2YWw7CgoJCXRoaXMuc2V0VGltZUludGVydmFsKHRpbWVJbnRlcnZhbCk7CgoJCWlmIChkYXRhICYmICh0eXBlb2YoZGF0YSkgPT0gIm9iamVjdCIpICYmIEFycmF5LmlzQXJyYXkoZGF0YSkpIHsKCQkJZGF0YS5mb3JFYWNoKCBmdW5jdGlvbihpdGVtKSB7IHRoaXMuYWRkSXRlbShpdGVtKSB9LCB0aGlzICk7CgkJfQoJfSwKCglhZGRJdGVtOiBmdW5jdGlvbihpdGVtKSB7CgoJCWlmICh0eXBlb2YoaXRlbS5uYW1lKSA9PT0gJ3VuZGVmaW5lZCcpIHsKCQkJdGhyb3coJ2FkZEl0ZW0oKSBuZWVkcyBhIG5hbWUnKTsKCQl9CgoJCWl0ZW0uY29sb3IgPSAoaXRlbS5jb2xvciB8fCB0aGlzLnBhbGV0dGUuY29sb3IoaXRlbS5uYW1lKSk7CgkJaXRlbS5kYXRhID0gKGl0ZW0uZGF0YSB8fCBbXSk7CgoJCS8vIGJhY2tmaWxsLCBpZiBuZWNlc3NhcnkKCQlpZiAoKGl0ZW0uZGF0YS5sZW5ndGggPT09IDApICYmIHRoaXMubGVuZ3RoICYmICh0aGlzLmdldEluZGV4KCkgPiAwKSkgewoJCQl0aGlzWzBdLmRhdGEuZm9yRWFjaCggZnVuY3Rpb24ocGxvdCkgewoJCQkJaXRlbS5kYXRhLnB1c2goeyB4OiBwbG90LngsIHk6IDAgfSk7CgkJCX0gKTsKCQl9IGVsc2UgaWYgKGl0ZW0uZGF0YS5sZW5ndGggPT09IDApIHsKCQkJaXRlbS5kYXRhLnB1c2goeyB4OiB0aGlzLnRpbWVCYXNlIC0gKHRoaXMudGltZUludGVydmFsIHx8IDApLCB5OiAwIH0pOwoJCX0gCgoJCXRoaXMucHVzaChpdGVtKTsKCgkJaWYgKHRoaXMubGVnZW5kKSB7CgkJCXRoaXMubGVnZW5kLmFkZExpbmUodGhpcy5pdGVtQnlOYW1lKGl0ZW0ubmFtZSkpOwoJCX0KCX0sCgoJYWRkRGF0YTogZnVuY3Rpb24oZGF0YSwgeCkgewoKCQl2YXIgaW5kZXggPSB0aGlzLmdldEluZGV4KCk7CgoJCVJpY2tzaGF3LmtleXMoZGF0YSkuZm9yRWFjaCggZnVuY3Rpb24obmFtZSkgewoJCQlpZiAoISB0aGlzLml0ZW1CeU5hbWUobmFtZSkpIHsKCQkJCXRoaXMuYWRkSXRlbSh7IG5hbWU6IG5hbWUgfSk7CgkJCX0KCQl9LCB0aGlzICk7CgoJCXRoaXMuZm9yRWFjaCggZnVuY3Rpb24oaXRlbSkgewoJCQlpdGVtLmRhdGEucHVzaCh7IAoJCQkJeDogeCB8fCAoaW5kZXggKiB0aGlzLnRpbWVJbnRlcnZhbCB8fCAxKSArIHRoaXMudGltZUJhc2UsIAoJCQkJeTogKGRhdGFbaXRlbS5uYW1lXSB8fCAwKSAKCQkJfSk7CgkJfSwgdGhpcyApOwoJfSwKCglnZXRJbmRleDogZnVuY3Rpb24gKCkgewoJCXJldHVybiAodGhpc1swXSAmJiB0aGlzWzBdLmRhdGEgJiYgdGhpc1swXS5kYXRhLmxlbmd0aCkgPyB0aGlzWzBdLmRhdGEubGVuZ3RoIDogMDsKCX0sCgoJaXRlbUJ5TmFtZTogZnVuY3Rpb24obmFtZSkgewoKCQlmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKCQkJaWYgKHRoaXNbaV0ubmFtZSA9PSBuYW1lKQoJCQkJcmV0dXJuIHRoaXNbaV07CgkJfQoJfSwKCglzZXRUaW1lSW50ZXJ2YWw6IGZ1bmN0aW9uKGl2KSB7CgkJdGhpcy50aW1lSW50ZXJ2YWwgPSBpdiAvIDEwMDA7Cgl9LAoKCXNldFRpbWVCYXNlOiBmdW5jdGlvbiAodCkgewoJCXRoaXMudGltZUJhc2UgPSB0OwoJfSwKCglkdW1wOiBmdW5jdGlvbigpIHsKCgkJdmFyIGRhdGEgPSB7CgkJCXRpbWVCYXNlOiB0aGlzLnRpbWVCYXNlLAoJCQl0aW1lSW50ZXJ2YWw6IHRoaXMudGltZUludGVydmFsLAoJCQlpdGVtczogW10KCQl9OwoKCQl0aGlzLmZvckVhY2goIGZ1bmN0aW9uKGl0ZW0pIHsKCgkJCXZhciBuZXdJdGVtID0gewoJCQkJY29sb3I6IGl0ZW0uY29sb3IsCgkJCQluYW1lOiBpdGVtLm5hbWUsCgkJCQlkYXRhOiBbXQoJCQl9OwoKCQkJaXRlbS5kYXRhLmZvckVhY2goIGZ1bmN0aW9uKHBsb3QpIHsKCQkJCW5ld0l0ZW0uZGF0YS5wdXNoKHsgeDogcGxvdC54LCB5OiBwbG90LnkgfSk7CgkJCX0gKTsKCgkJCWRhdGEuaXRlbXMucHVzaChuZXdJdGVtKTsKCQl9ICk7CgoJCXJldHVybiBkYXRhOwoJfSwKCglsb2FkOiBmdW5jdGlvbihkYXRhKSB7CgoJCWlmIChkYXRhLnRpbWVJbnRlcnZhbCkgewoJCQl0aGlzLnRpbWVJbnRlcnZhbCA9IGRhdGEudGltZUludGVydmFsOwoJCX0KCgkJaWYgKGRhdGEudGltZUJhc2UpIHsKCQkJdGhpcy50aW1lQmFzZSA9IGRhdGEudGltZUJhc2U7CgkJfQoKCQlpZiAoZGF0YS5pdGVtcykgewoJCQlkYXRhLml0ZW1zLmZvckVhY2goIGZ1bmN0aW9uKGl0ZW0pIHsKCQkJCXRoaXMucHVzaChpdGVtKTsKCQkJCWlmICh0aGlzLmxlZ2VuZCkgewoJCQkJCXRoaXMubGVnZW5kLmFkZExpbmUodGhpcy5pdGVtQnlOYW1lKGl0ZW0ubmFtZSkpOwoJCQkJfQoKCQkJfSwgdGhpcyApOwoJCX0KCX0KfSApOwoKUmlja3NoYXcuU2VyaWVzLnplcm9GaWxsID0gZnVuY3Rpb24oc2VyaWVzKSB7CglSaWNrc2hhdy5TZXJpZXMuZmlsbChzZXJpZXMsIDApOwp9OwoKUmlja3NoYXcuU2VyaWVzLmZpbGwgPSBmdW5jdGlvbihzZXJpZXMsIGZpbGwpIHsKCgl2YXIgeDsKCXZhciBpID0gMDsKCgl2YXIgZGF0YSA9IHNlcmllcy5tYXAoIGZ1bmN0aW9uKHMpIHsgcmV0dXJuIHMuZGF0YSB9ICk7CgoJd2hpbGUgKCBpIDwgTWF0aC5tYXguYXBwbHkobnVsbCwgZGF0YS5tYXAoIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQubGVuZ3RoIH0gKSkgKSB7CgoJCXggPSBNYXRoLm1pbi5hcHBseSggbnVsbCwgCgkJCWRhdGEKCQkJCS5maWx0ZXIoZnVuY3Rpb24oZCkgeyByZXR1cm4gZFtpXSB9KQoJCQkJLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiBkW2ldLnggfSkKCQkpOwoKCQlkYXRhLmZvckVhY2goIGZ1bmN0aW9uKGQpIHsKCQkJaWYgKCFkW2ldIHx8IGRbaV0ueCAhPSB4KSB7CgkJCQlkLnNwbGljZShpLCAwLCB7IHg6IHgsIHk6IGZpbGwgfSk7CgkJCX0KCQl9ICk7CgoJCWkrKzsKCX0KfTsKClJpY2tzaGF3Lm5hbWVzcGFjZSgnUmlja3NoYXcuU2VyaWVzLkZpeGVkRHVyYXRpb24nKTsKClJpY2tzaGF3LlNlcmllcy5GaXhlZER1cmF0aW9uID0gUmlja3NoYXcuQ2xhc3MuY3JlYXRlKFJpY2tzaGF3LlNlcmllcywgewoKCWluaXRpYWxpemU6IGZ1bmN0aW9uIChkYXRhLCBwYWxldHRlLCBvcHRpb25zKSB7CgoJCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKCQlpZiAodHlwZW9mKG9wdGlvbnMudGltZUludGVydmFsKSA9PT0gJ3VuZGVmaW5lZCcpIHsKCQkJdGhyb3cgbmV3IEVycm9yKCdGaXhlZER1cmF0aW9uIHNlcmllcyByZXF1aXJlcyB0aW1lSW50ZXJ2YWwnKTsKCQl9CgoJCWlmICh0eXBlb2Yob3B0aW9ucy5tYXhEYXRhUG9pbnRzKSA9PT0gJ3VuZGVmaW5lZCcpIHsKCQkJdGhyb3cgbmV3IEVycm9yKCdGaXhlZER1cmF0aW9uIHNlcmllcyByZXF1aXJlcyBtYXhEYXRhUG9pbnRzJyk7CgkJfQoKCQl0aGlzLnBhbGV0dGUgPSBuZXcgUmlja3NoYXcuQ29sb3IuUGFsZXR0ZShwYWxldHRlKTsKCQl0aGlzLnRpbWVCYXNlID0gdHlwZW9mKG9wdGlvbnMudGltZUJhc2UpID09PSAndW5kZWZpbmVkJyA\/IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSA6IG9wdGlvbnMudGltZUJhc2U7CgkJdGhpcy5zZXRUaW1lSW50ZXJ2YWwob3B0aW9ucy50aW1lSW50ZXJ2YWwpOwoKCQlpZiAodGhpc1swXSAmJiB0aGlzWzBdLmRhdGEgJiYgdGhpc1swXS5kYXRhLmxlbmd0aCkgewoJCQl0aGlzLmN1cnJlbnRTaXplID0gdGhpc1swXS5kYXRhLmxlbmd0aDsKCQkJdGhpcy5jdXJyZW50SW5kZXggPSB0aGlzWzBdLmRhdGEubGVuZ3RoOwoJCX0gZWxzZSB7CgkJCXRoaXMuY3VycmVudFNpemUgID0gMDsKCQkJdGhpcy5jdXJyZW50SW5kZXggPSAwOwoJCX0KCgkJdGhpcy5tYXhEYXRhUG9pbnRzID0gb3B0aW9ucy5tYXhEYXRhUG9pbnRzOwoKCgkJaWYgKGRhdGEgJiYgKHR5cGVvZihkYXRhKSA9PSAib2JqZWN0IikgJiYgQXJyYXkuaXNBcnJheShkYXRhKSkgewoJCQlkYXRhLmZvckVhY2goIGZ1bmN0aW9uIChpdGVtKSB7IHRoaXMuYWRkSXRlbShpdGVtKSB9LCB0aGlzICk7CgkJCXRoaXMuY3VycmVudFNpemUgICs9IDE7CgkJCXRoaXMuY3VycmVudEluZGV4ICs9IDE7CgkJfQoKCQkvLyByZXNldCB0aW1lQmFzZSBmb3IgemVyby1maWxsZWQgdmFsdWVzIGlmIG5lZWRlZAoJCXRoaXMudGltZUJhc2UgLT0gKHRoaXMubWF4RGF0YVBvaW50cyAtIHRoaXMuY3VycmVudFNpemUpICogdGhpcy50aW1lSW50ZXJ2YWw7CgoJCS8vIHplcm8tZmlsbCB1cCB0byBtYXhEYXRhUG9pbnRzIHNpemUgaWYgd2UgZG9uJ3QgaGF2ZSB0aGF0IG11Y2ggZGF0YSB5ZXQKCQlpZiAoKHR5cGVvZih0aGlzLm1heERhdGFQb2ludHMpICE9PSAndW5kZWZpbmVkJykgJiYgKHRoaXMuY3VycmVudFNpemUgPCB0aGlzLm1heERhdGFQb2ludHMpKSB7CgkJCWZvciAodmFyIGkgPSB0aGlzLm1heERhdGFQb2ludHMgLSB0aGlzLmN1cnJlbnRTaXplIC0gMTsgaSA+IDE7IGktLSkgewoJCQkJdGhpcy5jdXJyZW50U2l6ZSAgKz0gMTsKCQkJCXRoaXMuY3VycmVudEluZGV4ICs9IDE7CgkJCQl0aGlzLmZvckVhY2goIGZ1bmN0aW9uIChpdGVtKSB7CgkJCQkJaXRlbS5kYXRhLnVuc2hpZnQoeyB4OiAoKGktMSkgKiB0aGlzLnRpbWVJbnRlcnZhbCB8fCAxKSArIHRoaXMudGltZUJhc2UsIHk6IDAsIGk6IGkgfSk7CgkJCQl9LCB0aGlzICk7CgkJCX0KCQl9Cgl9LAoKCWFkZERhdGE6IGZ1bmN0aW9uKCRzdXBlciwgZGF0YSwgeCkgewoKCQkkc3VwZXIoZGF0YSwgeCk7CgoJCXRoaXMuY3VycmVudFNpemUgKz0gMTsKCQl0aGlzLmN1cnJlbnRJbmRleCArPSAxOwoKCQlpZiAodGhpcy5tYXhEYXRhUG9pbnRzICE9PSB1bmRlZmluZWQpIHsKCQkJd2hpbGUgKHRoaXMuY3VycmVudFNpemUgPiB0aGlzLm1heERhdGFQb2ludHMpIHsKCQkJCXRoaXMuZHJvcERhdGEoKTsKCQkJfQoJCX0KCX0sCgoJZHJvcERhdGE6IGZ1bmN0aW9uKCkgewoKCQl0aGlzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkgewoJCQlpdGVtLmRhdGEuc3BsaWNlKDAsIDEpOwoJCX0gKTsKCgkJdGhpcy5jdXJyZW50U2l6ZSAtPSAxOwoJfSwKCglnZXRJbmRleDogZnVuY3Rpb24gKCkgewoJCXJldHVybiB0aGlzLmN1cnJlbnRJbmRleDsKCX0KfSApOwoKCXJldHVybiBSaWNrc2hhdzsKfSkpOwo=",
    "size": "100700"
}