{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Cell.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKgogKiAgICBQSFBFeGNlbF9DZWxsCiAqCiAqICAgIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwKICoKICogICAgVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcgogKiAgICBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqICAgIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlcgogKiAgICB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogICAgVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAqICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqICAgIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCiAqCiAqICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKICogICAgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZQogKiAgICBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BICAwMjExMC0xMzAxICBVU0EKICoKICogICAgQGNhdGVnb3J5ICAgIFBIUEV4Y2VsCiAqICAgIEBwYWNrYWdlICAgIFBIUEV4Y2VsX0NlbGwKICogICAgQGNvcHlyaWdodCAgICBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsIChodHRwOi8vd3d3LmNvZGVwbGV4LmNvbS9QSFBFeGNlbCkKICogICAgQGxpY2Vuc2UgICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9sZ3BsLTIuMS50eHQgICAgTEdQTAogKiAgICBAdmVyc2lvbiAgICAjI1ZFUlNJT04jIywgIyNEQVRFIyMKICovCmNsYXNzIFBIUEV4Y2VsX0NlbGwKewogICAgLyoqCiAgICAgKiAgRGVmYXVsdCByYW5nZSB2YXJpYWJsZSBjb25zdGFudAogICAgICoKICAgICAqICBAdmFyICBzdHJpbmcKICAgICAqLwogICAgY29uc3QgREVGQVVMVF9SQU5HRSA9ICdBMTpBMSc7CgogICAgLyoqCiAgICAgKiAgICBWYWx1ZSBiaW5kZXIgdG8gdXNlCiAgICAgKgogICAgICogICAgQHZhciAgICBQSFBFeGNlbF9DZWxsX0lWYWx1ZUJpbmRlcgogICAgICovCiAgICBwcml2YXRlIHN0YXRpYyAkdmFsdWVCaW5kZXI7CgogICAgLyoqCiAgICAgKiAgICBWYWx1ZSBvZiB0aGUgY2VsbAogICAgICoKICAgICAqICAgIEB2YXIgICAgbWl4ZWQKICAgICAqLwogICAgcHJpdmF0ZSAkdmFsdWU7CgogICAgLyoqCiAgICAgKiAgICBDYWxjdWxhdGVkIHZhbHVlIG9mIHRoZSBjZWxsICh1c2VkIGZvciBjYWNoaW5nKQogICAgICogICAgVGhpcyByZXR1cm5zIHRoZSB2YWx1ZSBsYXN0IGNhbGN1bGF0ZWQgYnkgTVMgRXhjZWwgb3Igd2hpY2hldmVyIHNwcmVhZHNoZWV0IHByb2dyYW0gd2FzIHVzZWQgdG8KICAgICAqICAgICAgICBjcmVhdGUgdGhlIG9yaWdpbmFsIHNwcmVhZHNoZWV0IGZpbGUuCiAgICAgKiAgICBOb3RlIHRoYXQgdGhpcyB2YWx1ZSBpcyBub3QgZ3VhcmFudGVlZCB0byByZWZsZWN0IHRoZSBhY3R1YWwgY2FsY3VsYXRlZCB2YWx1ZSBiZWNhdXNlIGl0IGlzCiAgICAgKiAgICAgICAgcG9zc2libGUgdGhhdCBhdXRvLWNhbGN1bGF0aW9uIHdhcyBkaXNhYmxlZCBpbiB0aGUgb3JpZ2luYWwgc3ByZWFkc2hlZXQsIGFuZCB1bmRlcmx5aW5nIGRhdGEKICAgICAqICAgICAgICB2YWx1ZXMgdXNlZCBieSB0aGUgZm9ybXVsYSBoYXZlIGNoYW5nZWQgc2luY2UgaXQgd2FzIGxhc3QgY2FsY3VsYXRlZC4KICAgICAqCiAgICAgKiAgICBAdmFyIG1peGVkCiAgICAgKi8KICAgIHByaXZhdGUgJGNhbGN1bGF0ZWRWYWx1ZTsKCiAgICAvKioKICAgICAqICAgIFR5cGUgb2YgdGhlIGNlbGwgZGF0YQogICAgICoKICAgICAqICAgIEB2YXIgICAgc3RyaW5nCiAgICAgKi8KICAgIHByaXZhdGUgJGRhdGFUeXBlOwoKICAgIC8qKgogICAgICogICAgUGFyZW50IHdvcmtzaGVldAogICAgICoKICAgICAqICAgIEB2YXIgICAgUEhQRXhjZWxfQ2FjaGVkT2JqZWN0U3RvcmFnZV9DYWNoZUJhc2UKICAgICAqLwogICAgcHJpdmF0ZSAkcGFyZW50OwoKICAgIC8qKgogICAgICogICAgSW5kZXggdG8gY2VsbFhmCiAgICAgKgogICAgICogICAgQHZhciAgICBpbnQKICAgICAqLwogICAgcHJpdmF0ZSAkeGZJbmRleCA9IDA7CgogICAgLyoqCiAgICAgKiAgICBBdHRyaWJ1dGVzIG9mIHRoZSBmb3JtdWxhCiAgICAgKgogICAgICovCiAgICBwcml2YXRlICRmb3JtdWxhQXR0cmlidXRlczsKCgogICAgLyoqCiAgICAgKiAgICBTZW5kIG5vdGlmaWNhdGlvbiB0byB0aGUgY2FjaGUgY29udHJvbGxlcgogICAgICoKICAgICAqICAgIEByZXR1cm4gdm9pZAogICAgICoqLwogICAgcHVibGljIGZ1bmN0aW9uIG5vdGlmeUNhY2hlQ29udHJvbGxlcigpCiAgICB7CiAgICAgICAgJHRoaXMtPnBhcmVudC0+dXBkYXRlQ2FjaGVEYXRhKCR0aGlzKTsKCiAgICAgICAgcmV0dXJuICR0aGlzOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBkZXRhY2goKQogICAgewogICAgICAgICR0aGlzLT5wYXJlbnQgPSBudWxsOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBhdHRhY2goUEhQRXhjZWxfQ2FjaGVkT2JqZWN0U3RvcmFnZV9DYWNoZUJhc2UgJHBhcmVudCkKICAgIHsKICAgICAgICAkdGhpcy0+cGFyZW50ID0gJHBhcmVudDsKICAgIH0KCgogICAgLyoqCiAgICAgKiAgICBDcmVhdGUgYSBuZXcgQ2VsbAogICAgICoKICAgICAqICAgIEBwYXJhbSAgICBtaXhlZCAgICAgICAgICAgICAgICAkcFZhbHVlCiAgICAgKiAgICBAcGFyYW0gICAgc3RyaW5nICAgICAgICAgICAgICAgICRwRGF0YVR5cGUKICAgICAqICAgIEBwYXJhbSAgICBQSFBFeGNlbF9Xb3Jrc2hlZXQgICAgJHBTaGVldAogICAgICogICAgQHRocm93cyAgICBQSFBFeGNlbF9FeGNlcHRpb24KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRwVmFsdWUgPSBudWxsLCAkcERhdGFUeXBlID0gbnVsbCwgUEhQRXhjZWxfV29ya3NoZWV0ICRwU2hlZXQgPSBudWxsKQogICAgewogICAgICAgIC8vIEluaXRpYWxpc2UgY2VsbCB2YWx1ZQogICAgICAgICR0aGlzLT52YWx1ZSA9ICRwVmFsdWU7CgogICAgICAgIC8vIFNldCB3b3Jrc2hlZXQgY2FjaGUKICAgICAgICAkdGhpcy0+cGFyZW50ID0gJHBTaGVldC0+Z2V0Q2VsbENhY2hlQ29udHJvbGxlcigpOwoKICAgICAgICAvLyBTZXQgZGF0YXR5cGU\\\/CiAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCRyYW5nZVsxXSkpIHsKICAgICAgICAgICAgICAgICAgICAkcmV0dXJuVmFsdWVbXSA9ICRyYW5nZVswXTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBSYW5nZS4uLgogICAgICAgICAgICAgICAgbGlzdCgkcmFuZ2VTdGFydCwgJHJhbmdlRW5kKSAgICA9ICRyYW5nZTsKICAgICAgICAgICAgICAgIHNzY2FuZigkcmFuZ2VTdGFydCwgJyVbQS1aXSVkJywgJHN0YXJ0Q29sLCAkc3RhcnRSb3cpOwogICAgICAgICAgICAgICAgc3NjYW5mKCRyYW5nZUVuZCwgJyVbQS1aXSVkJywgJGVuZENvbCwgJGVuZFJvdyk7CiAgICAgICAgICAgICAgICArKyRlbmRDb2w7CgogICAgICAgICAgICAgICAgLy8gQ3VycmVudCBkYXRhCiAgICAgICAgICAgICAgICAkY3VycmVudENvbCA9ICRzdGFydENvbDsKICAgICAgICAgICAgICAgICRjdXJyZW50Um93ID0gJHN0YXJ0Um93OwoKICAgICAgICAgICAgICAgIC8vIExvb3AgY2VsbHMKICAgICAgICAgICAgICAgIHdoaWxlICgkY3VycmVudENvbCAhPSAkZW5kQ29sKSB7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCRjdXJyZW50Um93IDw9ICRlbmRSb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHJldHVyblZhbHVlW10gPSAkY3VycmVudENvbC4kY3VycmVudFJvdzsKICAgICAgICAgICAgICAgICAgICAgICAgKyskY3VycmVudFJvdzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgKyskY3VycmVudENvbDsKICAgICAgICAgICAgICAgICAgICAkY3VycmVudFJvdyA9ICRzdGFydFJvdzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gICAgU29ydCB0aGUgcmVzdWx0IGJ5IGNvbHVtbiBhbmQgcm93CiAgICAgICAgJHNvcnRLZXlzID0gYXJyYXkoKTsKICAgICAgICBmb3JlYWNoIChhcnJheV91bmlxdWUoJHJldHVyblZhbHVlKSBhcyAkY29vcmQpIHsKICAgICAgICAgICAgc3NjYW5mKCRjb29yZCwgJyVbQS1aXSVkJywgJGNvbHVtbiwgJHJvdyk7CiAgICAgICAgICAgICRzb3J0S2V5c1tzcHJpbnRmKCclM3MlMDlkJywgJGNvbHVtbiwgJHJvdyldID0gJGNvb3JkOwogICAgICAgIH0KICAgICAgICBrc29ydCgkc29ydEtleXMpOwoKICAgICAgICAvLyBSZXR1cm4gdmFsdWUKICAgICAgICByZXR1cm4gYXJyYXlfdmFsdWVzKCRzb3J0S2V5cyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb21wYXJlIDIgY2VsbHMKICAgICAqCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfQ2VsbCAgICAkYSAgICBDZWxsIGEKICAgICAqIEBwYXJhbSAgICBQSFBFeGNlbF9DZWxsICAgICRiICAgIENlbGwgYgogICAgICogQHJldHVybiAgICBpbnQgICAgICAgIFJlc3VsdCBvZiBjb21wYXJpc29uIChhbHdheXMgLTEgb3IgMSwgbmV2ZXIgemVybyEpCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY29tcGFyZUNlbGxzKFBIUEV4Y2VsX0NlbGwgJGEsIFBIUEV4Y2VsX0NlbGwgJGIpCiAgICB7CiAgICAgICAgaWYgKCRhLT5nZXRSb3coKSA8ICRiLT5nZXRSb3coKSkgewogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfSBlbHNlaWYgKCRhLT5nZXRSb3coKSA+ICRiLT5nZXRSb3coKSkgewogICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICB9IGVsc2VpZiAoc2VsZjo6Y29sdW1uSW5kZXhGcm9tU3RyaW5nKCRhLT5nZXRDb2x1bW4oKSkgPCBzZWxmOjpjb2x1bW5JbmRleEZyb21TdHJpbmcoJGItPmdldENvbHVtbigpKSkgewogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogR2V0IHZhbHVlIGJpbmRlciB0byB1c2UKICAgICAqCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX0NlbGxfSVZhbHVlQmluZGVyCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0VmFsdWVCaW5kZXIoKQogICAgewogICAgICAgIGlmIChzZWxmOjokdmFsdWVCaW5kZXIgPT09IG51bGwpIHsKICAgICAgICAgICAgc2VsZjo6JHZhbHVlQmluZGVyID0gbmV3IFBIUEV4Y2VsX0NlbGxfRGVmYXVsdFZhbHVlQmluZGVyKCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc2VsZjo6JHZhbHVlQmluZGVyOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHZhbHVlIGJpbmRlciB0byB1c2UKICAgICAqCiAgICAgKiBAcGFyYW0gUEhQRXhjZWxfQ2VsbF9JVmFsdWVCaW5kZXIgJGJpbmRlcgogICAgICogQHRocm93cyBQSFBFeGNlbF9FeGNlcHRpb24KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBzZXRWYWx1ZUJpbmRlcihQSFBFeGNlbF9DZWxsX0lWYWx1ZUJpbmRlciAkYmluZGVyID0gbnVsbCkKICAgIHsKICAgICAgICBpZiAoJGJpbmRlciA9PT0gbnVsbCkgewogICAgICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfRXhjZXB0aW9uKCJBIFBIUEV4Y2VsX0NlbGxfSVZhbHVlQmluZGVyIGlzIHJlcXVpcmVkIGZvciBQSFBFeGNlbCB0byBmdW5jdGlvbiBjb3JyZWN0bHkuIik7CiAgICAgICAgfQoKICAgICAgICBzZWxmOjokdmFsdWVCaW5kZXIgPSAkYmluZGVyOwogICAgfQoKICAgIC8qKgogICAgICogSW1wbGVtZW50IFBIUCBfX2Nsb25lIHRvIGNyZWF0ZSBhIGRlZXAgY2xvbmUsIG5vdCBqdXN0IGEgc2hhbGxvdyBjb3B5LgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jbG9uZSgpCiAgICB7CiAgICAgICAgJHZhcnMgPSBnZXRfb2JqZWN0X3ZhcnMoJHRoaXMpOwogICAgICAgIGZvcmVhY2ggKCR2YXJzIGFzICRrZXkgPT4gJHZhbHVlKSB7CiAgICAgICAgICAgIGlmICgoaXNfb2JqZWN0KCR2YWx1ZSkpICYmICgka2V5ICE9ICdwYXJlbnQnKSkgewogICAgICAgICAgICAgICAgJHRoaXMtPiRrZXkgPSBjbG9uZSAkdmFsdWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+JGtleSA9ICR2YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEdldCBpbmRleCB0byBjZWxsWGYKICAgICAqCiAgICAgKiBAcmV0dXJuIGludAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0WGZJbmRleCgpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT54ZkluZGV4OwogICAgfQoKICAgIC8qKgogICAgICogU2V0IGluZGV4IHRvIGNlbGxYZgogICAgICoKICAgICAqIEBwYXJhbSBpbnQgJHBWYWx1ZQogICAgICogQHJldHVybiBQSFBFeGNlbF9DZWxsCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRYZkluZGV4KCRwVmFsdWUgPSAwKQogICAgewogICAgICAgICR0aGlzLT54ZkluZGV4ID0gJHBWYWx1ZTsKCiAgICAgICAgcmV0dXJuICR0aGlzLT5ub3RpZnlDYWNoZUNvbnRyb2xsZXIoKTsKICAgIH0KCiAgICAvKioKICAgICAqICAgIEBkZXByZWNhdGVkICAgICAgICBTaW5jZSB2ZXJzaW9uIDEuNy44IGZvciBwbGFubmVkIGNoYW5nZXMgdG8gY2VsbCBmb3IgYXJyYXkgZm9ybXVsYSBoYW5kbGluZwogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0Rm9ybXVsYUF0dHJpYnV0ZXMoJHBBdHRyaWJ1dGVzKQogICAgewogICAgICAgICR0aGlzLT5mb3JtdWxhQXR0cmlidXRlcyA9ICRwQXR0cmlidXRlczsKICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiAgICBAZGVwcmVjYXRlZCAgICAgICAgU2luY2UgdmVyc2lvbiAxLjcuOCBmb3IgcGxhbm5lZCBjaGFuZ2VzIHRvIGNlbGwgZm9yIGFycmF5IGZvcm11bGEgaGFuZGxpbmcKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldEZvcm11bGFBdHRyaWJ1dGVzKCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmZvcm11bGFBdHRyaWJ1dGVzOwogICAgfQoKICAgIC8qKgogICAgICogQ29udmVydCB0byBzdHJpbmcKICAgICAqCiAgICAgKiBAcmV0dXJuIHN0cmluZwogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b1N0cmluZygpCiAgICB7CiAgICAgICAgcmV0dXJuIChzdHJpbmcpICR0aGlzLT5nZXRWYWx1ZSgpOwogICAgfQp9Cg==",
    "size": "33604"
}