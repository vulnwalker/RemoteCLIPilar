{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Shared\/Font.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKLyoqCiAqIFBIUEV4Y2VsCiAqCiAqIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwKICoKICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcgogKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlcgogKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCiAqCiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZQogKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BICAwMjExMC0xMzAxICBVU0EKICoKICogQGNhdGVnb3J5ICAgUEhQRXhjZWwKICogQHBhY2thZ2UgICAgUEhQRXhjZWxfU2hhcmVkCiAqIEBjb3B5cmlnaHQgIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwgKGh0dHA6Ly93d3cuY29kZXBsZXguY29tL1BIUEV4Y2VsKQogKiBAbGljZW5zZSAgICBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2xncGwtMi4xLnR4dCAgICBMR1BMCiAqIEB2ZXJzaW9uICAgICMjVkVSU0lPTiMjLCAjI0RBVEUjIwogKi8KCgovKioKICogUEhQRXhjZWxfU2hhcmVkX0ZvbnQKICoKICogQGNhdGVnb3J5ICAgUEhQRXhjZWwKICogQHBhY2thZ2UgICAgUEhQRXhjZWxfU2hhcmVkCiAqIEBjb3B5cmlnaHQgIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwgKGh0dHA6Ly93d3cuY29kZXBsZXguY29tL1BIUEV4Y2VsKQogKi8KY2xhc3MgUEhQRXhjZWxfU2hhcmVkX0ZvbnQKewogICAgLyogTWV0aG9kcyBmb3IgcmVzb2x2aW5nIGF1dG9zaXplIHZhbHVlICovCiAgICBjb25zdCBBVVRPU0laRV9NRVRIT0RfQVBQUk9YICAgID0gJ2FwcHJveCc7CiAgICBjb25zdCBBVVRPU0laRV9NRVRIT0RfRVhBQ1QgICAgID0gJ2V4YWN0JzsKCiAgICBwcml2YXRlIHN0YXRpYyAkYXV0b1NpemVNZXRob2RzID0gYXJyYXkoCiAgICAgICAgc2VsZjo6QVVUT1NJWkVfTUVUSE9EX0FQUFJPWCwKICAgICAgICBzZWxmOjpBVVRPU0laRV9NRVRIT0RfRVhBQ1QsCiAgICApOwoKICAgIC8qKiBDaGFyYWN0ZXIgc2V0IGNvZGVzIHVzZWQgYnkgQklGRjUtOCBpbiBGb250IHJlY29yZHMgKi8KICAgIGNvbnN0IENIQVJTRVRfQU5TSV9MQVRJTiAgICAgICAgICAgICAgICA9IDB4MDA7CiAgICBjb25zdCBDSEFSU0VUX1NZU1RFTV9ERUZBVUxUICAgICAgICAgICAgPSAweDAxOwogICAgY29uc3QgQ0hBUlNFVF9TWU1CT0wgICAgICAgICAgICAgICAgICAgID0gMHgwMjsKICAgIGNvbnN0IENIQVJTRVRfQVBQTEVfUk9NQU4gICAgICAgICAgICAgICA9IDB4NEQ7CiAgICBjb25zdCBDSEFSU0VUX0FOU0lfSkFQQU5FU0VfU0hJRlRKSVMgICAgPSAweDgwOwogICAgY29uc3QgQ0hBUlNFVF9BTlNJX0tPUkVBTl9IQU5HVUwgICAgICAgID0gMHg4MTsKICAgIGNvbnN0IENIQVJTRVRfQU5TSV9LT1JFQU5fSk9IQUIgICAgICAgICA9IDB4ODI7CiAgICBjb25zdCBDSEFSU0VUX0FOU0lfQ0hJTkVTRV9TSU1JUExJRklFRCAgPSAweDg2OyAgICAgICAgLy8gICAgZ2IyMzEyCiAgICBjb25zdCBDSEFSU0VUX0FOU0lfQ0hJTkVTRV9UUkFESVRJT05BTCAgPSAweDg4OyAgICAgICAgLy8gICAgYmlnNQogICAgY29uc3QgQ0hBUlNFVF9BTlNJX0dSRUVLICAgICAgICAgICAgICAgID0gMHhBMTsKICAgIGNvbnN0IENIQVJTRVRfQU5TSV9UVVJLSVNIICAgICAgICAgICAgICA9IDB4QTI7CiAgICBjb25zdCBDSEFSU0VUX0FOU0lfVklFVE5BTUVTRSAgICAgICAgICAgPSAweEEzOwogICAgY29uc3QgQ0hBUlNFVF9BTlNJX0hFQlJFVyAgICAgICAgICAgICAgID0gMHhCMTsKICAgIGNvbnN0IENIQVJTRVRfQU5TSV9BUkFCSUMgICAgICAgICAgICAgICA9IDB4QjI7CiAgICBjb25zdCBDSEFSU0VUX0FOU0lfQkFMVElDICAgICAgICAgICAgICAgPSAweEJBOwogICAgY29uc3QgQ0hBUlNFVF9BTlNJX0NZUklMTElDICAgICAgICAgICAgID0gMHhDQzsKICAgIGNvbnN0IENIQVJTRVRfQU5TSV9USEFJICAgICAgICAgICAgICAgICA9IDB4REQ7CiAgICBjb25zdCBDSEFSU0VUX0FOU0lfTEFUSU5fSUkgICAgICAgICAgICAgPSAweEVFOwogICAgY29uc3QgQ0hBUlNFVF9PRU1fTEFUSU5fSSAgICAgICAgICAgICAgID0gMHhGRjsKCiAgICAvLyAgWFhYOiBDb25zdGFudHMgY3JlYXRlZCEKICAgIC8qKiBGb250IGZpbGVuYW1lcyAqLwogICAgY29uc3QgQVJJQUwgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ2FyaWFsLnR0Zic7CiAgICBjb25zdCBBUklBTF9CT0xEICAgICAgICAgICAgICAgICAgICAgICAgPSAnYXJpYWxiZC50dGYnOwogICAgY29uc3QgQVJJQUxfSVRBTElDICAgICAgICAgICAgICAgICAgICAgID0gJ2FyaWFsaS50dGYnOwogICAgY29uc3QgQVJJQUxfQk9MRF9JVEFMSUMgICAgICAgICAgICAgICAgID0gJ2FyaWFsYmkudHRmJzsKCiAgICBjb25zdCBDQUxJQlJJICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQ0FMSUJSSS5UVEYnOwogICAgY29uc3QgQ0FMSUJSSV9CT0xEICAgICAgICAgICAgICAgICAgICAgID0gJ0NBTElCUklCLlRURic7CiAgICBjb25zdCBDQUxJQlJJX0lUQUxJQyAgICAgICAgICAgICAgICAgICAgPSAnQ0FMSUJSSUkuVFRGJzsKICAgIGNvbnN0IENBTElCUklfQk9MRF9JVEFMSUMgICAgICAgICAgICAgICA9ICdDQUxJQlJJWi5UVEYnOwoKICAgIGNvbnN0IENPTUlDX1NBTlNfTVMgICAgICAgICAgICAgICAgICAgICA9ICdjb21pYy50dGYnOwogICAgY29uc3QgQ09NSUNfU0FOU19NU19CT0xEICAgICAgICAgICAgICAgID0gJ2NvbWljYmQudHRmJzsKCiAgICBjb25zdCBDT1VSSUVSX05FVyAgICAgICAgICAgICAgICAgICAgICAgPSAnY291ci50dGYnOwogICAgY29uc3QgQ09VUklFUl9ORVdfQk9MRCAgICAgICAgICAgICAgICAgID0gJ2NvdXJiZC50dGYnOwogICAgY29uc3QgQ09VUklFUl9ORVdfSVRBTElDICAgICAgICAgICAgICAgID0gJ2NvdXJpLnR0Zic7CiAgICBjb25zdCBDT1VSSUVSX05FV19CT0xEX0lUQUxJQyAgICAgICAgICAgPSAnY291cmJpLnR0Zic7CgogICAgY29uc3QgR0VPUkdJQSAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ2dlb3JnaWEudHRmJzsKICAgIGNvbnN0IEdFT1JHSUFfQk9MRCAgICAgICAgICAgICAgICAgICAgICA9ICdnZW9yZ2lhYi50dGYnOwogICAgY29uc3QgR0VPUkdJQV9JVEFMSUMgICAgICAgICAgICAgICAgICAgID0gJ2dlb3JnaWFpLnR0Zic7CiAgICBjb25zdCBHRU9SR0lBX0JPTERfSVRBTElDICAgICAgICAgICAgICAgPSAnZ2VvcmdpYXoudHRmJzsKCiAgICBjb25zdCBJTVBBQ1QgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnaW1wYWN0LnR0Zic7CgogICAgY29uc3QgTElCRVJBVElPTl9TQU5TICAgICAgICAgICAgICAgICAgID0gJ0xpYmVyYXRpb25TYW5zLVJlZ3VsYXIudHRmJzsKICAgIGNvbnN0IExJQkVSQVRJT05fU0FOU19CT0xEICAgICAgICAgICAgICA9ICdMaWJlcmF0aW9uU2Fucy1Cb2xkLnR0Zic7CiAgICBjb25zdCBMSUJFUkFUSU9OX1NBTlNfSVRBTElDICAgICAgICAgICAgPSAnTGliZXJhdGlvblNhbnMtSXRhbGljLnR0Zic7CiAgICBjb25zdCBMSUJFUkFUSU9OX1NBTlNfQk9MRF9JVEFMSUMgICAgICAgPSAnTGliZXJhdGlvblNhbnMtQm9sZEl0YWxpYy50dGYnOwoKICAgIGNvbnN0IExVQ0lEQV9DT05TT0xFICAgICAgICAgICAgICAgICAgICA9ICdsdWNvbi50dGYnOwogICAgY29uc3QgTFVDSURBX1NBTlNfVU5JQ09ERSAgICAgICAgICAgICAgID0gJ2xfMTA2NDYudHRmJzsKCiAgICBjb25zdCBNSUNST1NPRlRfU0FOU19TRVJJRiAgICAgICAgICAgICAgPSAnbWljcm9zcy50dGYnOwoKICAgIGNvbnN0IFBBTEFUSU5PX0xJTk9UWVBFICAgICAgICAgICAgICAgICA9ICdwYWxhLnR0Zic7CiAgICBjb25zdCBQQUxBVElOT19MSU5PVFlQRV9CT0xEICAgICAgICAgICAgPSAncGFsYWIudHRmJzsKICAgIGNvbnN0IFBBTEFUSU5PX0xJTk9UWVBFX0lUQUxJQyAgICAgICAgICA9ICdwYWxhaS50dGYnOwogICAgY29uc3QgUEFMQVRJTk9fTElOT1RZUEVfQk9MRF9JVEFMSUMgICAgID0gJ3BhbGFiaS50dGYnOwoKICAgIGNvbnN0IFNZTUJPTCAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdzeW1ib2wudHRmJzsKCiAgICBjb25zdCBUQUhPTUEgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAndGFob21hLnR0Zic7CiAgICBjb25zdCBUQUhPTUFfQk9MRCAgICAgICAgICAgICAgICAgICAgICAgPSAndGFob21hYmQudHRmJzsKCiAgICBjb25zdCBUSU1FU19ORVdfUk9NQU4gICAgICAgICAgICAgICAgICAgPSAndGltZXMudHRmJzsKICAgIGNvbnN0IFRJTUVTX05FV19ST01BTl9CT0xEICAgICAgICAgICAgICA9ICd0aW1lc2JkLnR0Zic7CiAgICBjb25zdCBUSU1FU19ORVdfUk9NQU5fSVRBTElDICAgICAgICAgICAgPSAndGltZXNpLnR0Zic7CiAgICBjb25zdCBUSU1FU19ORVdfUk9NQU5fQk9MRF9JVEFMSUMgICAgICAgPSAndGltZXNiaS50dGYnOwoKICAgIGNvbnN0IFRSRUJVQ0hFVF9NUyAgICAgICAgICAgICAgICAgICAgICA9ICd0cmVidWMudHRmJzsKICAgIGNvbnN0IFRSRUJVQ0hFVF9NU19CT0xEICAgICAgICAgICAgICAgICA9ICd0cmVidWNiZC50dGYnOwogICAgY29uc3QgVFJFQlVDSEVUX01TX0lUQUxJQyAgICAgICAgICAgICAgID0gJ3RyZWJ1Y2l0LnR0Zic7CiAgICBjb25zdCBUUkVCVUNIRVRfTVNfQk9MRF9JVEFMSUMgICAgICAgICAgPSAndHJlYnVjYmkudHRmJzsKCiAgICBjb25zdCBWRVJEQU5BICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAndmVyZGFuYS50dGYnOwogICAgY29uc3QgVkVSREFOQV9CT0xEICAgICAgICAgICAgICAgICAgICAgID0gJ3ZlcmRhbmFiLnR0Zic7CiAgICBjb25zdCBWRVJEQU5BX0lUQUxJQyAgICAgICAgICAgICAgICAgICAgPSAndmVyZGFuYWkudHRmJzsKICAgIGNvbnN0IFZFUkRBTkFfQk9MRF9JVEFMSUMgICAgICAgICAgICAgICA9ICd2ZXJkYW5hei50dGYnOwoKICAgIC8qKgogICAgICogQXV0b1NpemUgbWV0aG9kCiAgICAgKgogICAgICogQHZhciBzdHJpbmcKICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgJGF1dG9TaXplTWV0aG9kID0gc2VsZjo6QVVUT1NJWkVfTUVUSE9EX0FQUFJPWDsKCiAgICAvKioKICAgICAqIFBhdGggdG8gZm9sZGVyIGNvbnRhaW5pbmcgVHJ1ZVR5cGUgZm9udCAudHRmIGZpbGVzCiAgICAgKgogICAgICogQHZhciBzdHJpbmcKICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgJHRydWVUeXBlRm9udFBhdGggPSBudWxsOwoKICAgIC8qKgogICAgICogSG93IHdpZGUgaXMgYSBkZWZhdWx0IGNvbHVtbiBmb3IgYSBnaXZlbiBkZWZhdWx0IGZvbnQgYW5kIHNpemU\\/IHNlbGY6OkFSSUFMX0JPTERfSVRBTElDIDogc2VsZjo6QVJJQUxfQk9MRCkKICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgkaXRhbGljID8gc2VsZjo6QVJJQUxfSVRBTElDIDogc2VsZjo6QVJJQUwpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ0NhbGlicmknOgogICAgICAgICAgICAgICAgJGZvbnRGaWxlID0gKAogICAgICAgICAgICAgICAgICAgICRib2xkID8gKCRpdGFsaWMgPyBzZWxmOjpDQUxJQlJJX0JPTERfSVRBTElDIDogc2VsZjo6Q0FMSUJSSV9CT0xEKQogICAgICAgICAgICAgICAgICAgICAgICAgIDogKCRpdGFsaWMgPyBzZWxmOjpDQUxJQlJJX0lUQUxJQyA6IHNlbGY6OkNBTElCUkkpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ0NvdXJpZXIgTmV3JzoKICAgICAgICAgICAgICAgICRmb250RmlsZSA9ICgKICAgICAgICAgICAgICAgICAgICAkYm9sZCA\/ICgkaXRhbGljID8gc2VsZjo6Q09VUklFUl9ORVdfQk9MRF9JVEFMSUMgOiBzZWxmOjpDT1VSSUVSX05FV19CT0xEKQogICAgICAgICAgICAgICAgICAgICAgICAgIDogKCRpdGFsaWMgPyBzZWxmOjpDT1VSSUVSX05FV19JVEFMSUMgOiBzZWxmOjpDT1VSSUVSX05FVykKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnQ29taWMgU2FucyBNUyc6CiAgICAgICAgICAgICAgICAkZm9udEZpbGUgPSAoCiAgICAgICAgICAgICAgICAgICAgJGJvbGQgPyBzZWxmOjpDT01JQ19TQU5TX01TX0JPTEQgOiBzZWxmOjpDT01JQ19TQU5TX01TCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ0dlb3JnaWEnOgogICAgICAgICAgICAgICAgJGZvbnRGaWxlID0gKAogICAgICAgICAgICAgICAgICAgICRib2xkID8gKCRpdGFsaWMgPyBzZWxmOjpHRU9SR0lBX0JPTERfSVRBTElDIDogc2VsZjo6R0VPUkdJQV9CT0xEKQogICAgICAgICAgICAgICAgICAgICAgICAgIDogKCRpdGFsaWMgPyBzZWxmOjpHRU9SR0lBX0lUQUxJQyA6IHNlbGY6OkdFT1JHSUEpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ0ltcGFjdCc6CiAgICAgICAgICAgICAgICAkZm9udEZpbGUgPSBzZWxmOjpJTVBBQ1Q7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnTGliZXJhdGlvbiBTYW5zJzoKICAgICAgICAgICAgICAgICRmb250RmlsZSA9ICgKICAgICAgICAgICAgICAgICAgICAkYm9sZCA\/ICgkaXRhbGljID8gc2VsZjo6TElCRVJBVElPTl9TQU5TX0JPTERfSVRBTElDIDogc2VsZjo6TElCRVJBVElPTl9TQU5TX0JPTEQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoJGl0YWxpYyA\/IHNlbGY6OkxJQkVSQVRJT05fU0FOU19JVEFMSUMgOiBzZWxmOjpMSUJFUkFUSU9OX1NBTlMpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ0x1Y2lkYSBDb25zb2xlJzoKICAgICAgICAgICAgICAgICRmb250RmlsZSA9IHNlbGY6OkxVQ0lEQV9DT05TT0xFOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnOgogICAgICAgICAgICAgICAgJGZvbnRGaWxlID0gc2VsZjo6TFVDSURBX1NBTlNfVU5JQ09ERTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdNaWNyb3NvZnQgU2FucyBTZXJpZic6CiAgICAgICAgICAgICAgICAkZm9udEZpbGUgPSBzZWxmOjpNSUNST1NPRlRfU0FOU19TRVJJRjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdQYWxhdGlubyBMaW5vdHlwZSc6CiAgICAgICAgICAgICAgICAkZm9udEZpbGUgPSAoCiAgICAgICAgICAgICAgICAgICAgJGJvbGQgPyAoJGl0YWxpYyA\/IHNlbGY6OlBBTEFUSU5PX0xJTk9UWVBFX0JPTERfSVRBTElDIDogc2VsZjo6UEFMQVRJTk9fTElOT1RZUEVfQk9MRCkKICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgkaXRhbGljID8gc2VsZjo6UEFMQVRJTk9fTElOT1RZUEVfSVRBTElDIDogc2VsZjo6UEFMQVRJTk9fTElOT1RZUEUpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ1N5bWJvbCc6CiAgICAgICAgICAgICAgICAkZm9udEZpbGUgPSBzZWxmOjpTWU1CT0w7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnVGFob21hJzoKICAgICAgICAgICAgICAgICRmb250RmlsZSA9ICgKICAgICAgICAgICAgICAgICAgICAkYm9sZCA\/IHNlbGY6OlRBSE9NQV9CT0xEIDogc2VsZjo6VEFIT01BCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ1RpbWVzIE5ldyBSb21hbic6CiAgICAgICAgICAgICAgICAkZm9udEZpbGUgPSAoCiAgICAgICAgICAgICAgICAgICAgJGJvbGQgPyAoJGl0YWxpYyA\/IHNlbGY6OlRJTUVTX05FV19ST01BTl9CT0xEX0lUQUxJQyA6IHNlbGY6OlRJTUVTX05FV19ST01BTl9CT0xEKQogICAgICAgICAgICAgICAgICAgICAgICAgIDogKCRpdGFsaWMgPyBzZWxmOjpUSU1FU19ORVdfUk9NQU5fSVRBTElDIDogc2VsZjo6VElNRVNfTkVXX1JPTUFOKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdUcmVidWNoZXQgTVMnOgogICAgICAgICAgICAgICAgJGZvbnRGaWxlID0gKAogICAgICAgICAgICAgICAgICAgICRib2xkID8gKCRpdGFsaWMgPyBzZWxmOjpUUkVCVUNIRVRfTVNfQk9MRF9JVEFMSUMgOiBzZWxmOjpUUkVCVUNIRVRfTVNfQk9MRCkKICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgkaXRhbGljID8gc2VsZjo6VFJFQlVDSEVUX01TX0lUQUxJQyA6IHNlbGY6OlRSRUJVQ0hFVF9NUykKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnVmVyZGFuYSc6CiAgICAgICAgICAgICAgICAkZm9udEZpbGUgPSAoCiAgICAgICAgICAgICAgICAgICAgJGJvbGQgPyAoJGl0YWxpYyA\/IHNlbGY6OlZFUkRBTkFfQk9MRF9JVEFMSUMgOiBzZWxmOjpWRVJEQU5BX0JPTEQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoJGl0YWxpYyA\",
    "size": "29728"
}