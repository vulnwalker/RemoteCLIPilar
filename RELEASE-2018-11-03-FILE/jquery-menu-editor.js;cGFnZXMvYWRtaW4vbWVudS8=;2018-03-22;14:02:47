{
    "namaFile": "pages\/admin\/menu\/jquery-menu-editor.js",
    "lastUpdate": "2018-03-22+14:02:47.81",
    "contentFile": "LyoqCiAqIGpRdWVyeSBNZW51IEVkaXRvcgogKiAKICogKi8KKGZ1bmN0aW9uICgkKXsKICAgICQuZm4uc29ydGFibGVMaXN0cyA9IGZ1bmN0aW9uIChvcHRpb25zKXsKICAgICAgICAvLyBMb2NhbCB2YXJpYWJsZXMuIFRoaXMgc2NvcGUgaXMgYXZhaWxhYmxlIGZvciBhbGwgdGhlIGZ1bmN0aW9ucyBpbiB0aGlzIGNsb3N1cmUuCiAgICAgICAgdmFyIGpRQm9keSA9ICQoJ2JvZHknKS5jc3MoJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJyksCiAgICAgICAgICAgICAgICBkZWZhdWx0cyA9IHsKICAgICAgICAgICAgICAgICAgICBjdXJyRWxDbGFzczogJycsCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJDbGFzczogJycsCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJDc3M6IHsKICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJ3JlbGF0aXZlJywKICAgICAgICAgICAgICAgICAgICAgICAgJ3BhZGRpbmcnOiAwCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBoaW50Q2xhc3M6ICcnLAogICAgICAgICAgICAgICAgICAgIGhpbnRDc3M6IHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnbm9uZScsCiAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdyZWxhdGl2ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICdwYWRkaW5nJzogMAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgaGludFdyYXBwZXJDbGFzczogJycsCiAgICAgICAgICAgICAgICAgICAgaGludFdyYXBwZXJDc3M6IHsvKiBEZXNjcmlwdGlvbiBpcyBiZWxvdyB0aGUgZGVmYXVsdHMgaW4gdGhpcyB2YXIgc2VjdGlvbiAqL30sCiAgICAgICAgICAgICAgICAgICAgYmFzZUNsYXNzOiAnJywKICAgICAgICAgICAgICAgICAgICBiYXNlQ3NzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdhYnNvbHV0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICd0b3AnOiAwIC0gcGFyc2VJbnQoalFCb2R5LmNzcygnbWFyZ2luLXRvcCcpKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiAwIC0gcGFyc2VJbnQoalFCb2R5LmNzcygnbWFyZ2luLWxlZnQnKSksCiAgICAgICAgICAgICAgICAgICAgICAgICdtYXJnaW4nOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAncGFkZGluZyc6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICd6LWluZGV4JzogMjUwMAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb3BlbmVyOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgYXM6ICdodG1sJywKICAgICAgICAgICAgICAgICAgICAgICAgb3BlbjogJycsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlOiAnJywKICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVyQ3NzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmxvYXQnOiAnbGVmdCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiAnY2VudGVyIGNlbnRlcicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1yZXBlYXQnOiAnbm8tcmVwZWF0JwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBvcGVuZXJDbGFzczogJycKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGxpc3RTZWxlY3RvcjogJ3VsJywKICAgICAgICAgICAgICAgICAgICBsaXN0c0NsYXNzOiAnJywgLy8gVXNlZCBmb3IgaGludFdyYXBwZXIgYW5kIGJhc2VFbGVtZW50CiAgICAgICAgICAgICAgICAgICAgbGlzdHNDc3M6IHt9LAogICAgICAgICAgICAgICAgICAgIGluc2VydFpvbmU6IDUwLAogICAgICAgICAgICAgICAgICAgIGluc2VydFpvbmVQbHVzOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICBzY3JvbGw6IDIwLAogICAgICAgICAgICAgICAgICAgIGlnbm9yZUNsYXNzOiAnY2xpY2thYmxlJywgLy8gJycKICAgICAgICAgICAgICAgICAgICBpc0FsbG93ZWQ6IGZ1bmN0aW9uIChjRWwsIGhpbnQsIHRhcmdldCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9LCAvLyBQYXJhbXM6IGN1cnJlbnQgZWwuLCBoaW50IGVsLgogICAgICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbiAoZSwgY0VsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0sIC8vIFBhcmFtczogZSBqUS4gZXZlbnQgb2JqLiwgY3VycmVudCBlbC4KICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gKGNFbCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9LCAvLyBQYXJhbXM6IGN1cnJlbnQgZWwuCiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uIChjRWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgfSAgLy8gUGFyYW1zOiBjdXJyZW50IGVsLgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHNldHRpbmcgPSAkLmV4dGVuZCh0cnVlLCB7fSwgZGVmYXVsdHMsIG9wdGlvbnMpLAogICAgICAgICAgICAgICAgLy8gYmFzZSBlbGVtZW50IGZyb20gd2hpY2ggaXMgY291bnRlZCBwb3NpdGlvbiBvZiBkcmFnZWQgZWxlbWVudAogICAgICAgICAgICAgICAgYmFzZSA9ICQoJzwnICsgc2V0dGluZy5saXN0U2VsZWN0b3IgKyAnIC8+JykKICAgICAgICAgICAgICAgIC5wcmVwZW5kVG8oalFCb2R5KQogICAgICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ3NvcnRhYmxlTGlzdHNCYXNlJykKICAgICAgICAgICAgICAgIC5jc3Moc2V0dGluZy5iYXNlQ3NzKQogICAgICAgICAgICAgICAgLmFkZENsYXNzKHNldHRpbmcubGlzdHNDbGFzcyArICcgJyArIHNldHRpbmcuYmFzZUNsYXNzKSwKICAgICAgICAgICAgICAgIC8vIHBsYWNlaG9sZGVyICE9IHN0YXRlLnBsYWNlaG9sZGVyTm9kZQogICAgICAgICAgICAgICAgLy8gcGxhY2Vob2xkZXIgaXMgZG9jdW1lbnQgZnJhZ21lbnQgYW5kIHN0YXRlLnBsYWNlaG9sZGVyTm9kZSBpcyBkb2N1bWVudCBub2RlCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlciA9ICQoJzxsaSAvPicpCiAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnc29ydGFibGVMaXN0c1BsYWNlaG9sZGVyJykKICAgICAgICAgICAgICAgIC5jc3Moc2V0dGluZy5wbGFjZWhvbGRlckNzcykKICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhzZXR0aW5nLnBsYWNlaG9sZGVyQ2xhc3MpLAogICAgICAgICAgICAgICAgLy8gaGludCBpcyBkb2N1bWVudCBmcmFnbWVudAogICAgICAgICAgICAgICAgaGludCA9ICQoJzxsaSAvPicpCiAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnc29ydGFibGVMaXN0c0hpbnQnKQogICAgICAgICAgICAgICAgLmNzcyhzZXR0aW5nLmhpbnRDc3MpCiAgICAgICAgICAgICAgICAuYWRkQ2xhc3Moc2V0dGluZy5oaW50Q2xhc3MpLAogICAgICAgICAgICAgICAgLy8gSXMgZG9jdW1lbnQgZnJhZ21lbnQgdXNlZCBhcyB3cmFwcGVyIGlmIGhpbnQgaXMgaW5zZXJ0ZWQgdG8gdGhlIGVtcHR5IGxpCiAgICAgICAgICAgICAgICBoaW50V3JhcHBlciA9ICQoJzwnICsgc2V0dGluZy5saXN0U2VsZWN0b3IgKyAnIC8+JykKICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsICdzb3J0YWJsZUxpc3RzSGludFdyYXBwZXInKQogICAgICAgICAgICAgICAgLmFkZENsYXNzKHNldHRpbmcubGlzdHNDbGFzcyArICcgJyArIHNldHRpbmcuaGludFdyYXBwZXJDbGFzcykKICAgICAgICAgICAgICAgIC5jc3Moc2V0dGluZy5saXN0c0NzcykKICAgICAgICAgICAgICAgIC5jc3Moc2V0dGluZy5oaW50V3JhcHBlckNzcyksCiAgICAgICAgICAgICAgICAvLyBJcyArLy0gaWtvbiB0byBvcGVuL2Nsb3NlIG5lc3RlZCBsaXN0cwogICAgICAgICAgICAgICAgb3BlbmVyID0gJCgnPHNwYW4gLz4nKS5hZGRDbGFzcygnc29ydGFibGVMaXN0c09wZW5lciAnICsgc2V0dGluZy5vcGVuZXIub3BlbmVyQ2xhc3MpCiAgICAgICAgICAgICAgICAuY3NzKHNldHRpbmcub3BlbmVyLm9wZW5lckNzcykKICAgICAgICAgICAgICAgIC5vbignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpewogICAgICAgICAgICAgICAgICAgIHZhciBsaSA9ICQodGhpcykuY2xvc2VzdCgnbGknKTsKICAgICAgICAgICAgICAgICAgICBpZiAobGkuaGFzQ2xhc3MoJ3NvcnRhYmxlTGlzdHNDbG9zZWQnKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4obGkpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2UobGkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFByZXZlbnQgZGVmYXVsdAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgIGlmIChzZXR0aW5nLm9wZW5lci5hcyA9PSAnY2xhc3MnKXsKICAgICAgICAgICAgb3BlbmVyLmFkZENsYXNzKHNldHRpbmcub3BlbmVyLmNsb3NlKTsKICAgICAgICB9IGVsc2UgaWYgKHNldHRpbmcub3BlbmVyLmFzID09ICdodG1sJyl7CiAgICAgICAgICAgIG9wZW5lci5odG1sKHNldHRpbmcub3BlbmVyLmNsb3NlKTsKICAgICAgICB9IGVsc2V7CiAgICAgICAgICAgIG9wZW5lci5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAndXJsKCcgKyBzZXR0aW5nLm9wZW5lci5jbG9zZSArICcpJyk7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2pRdWVyeVNvcnRhYmxlTGlzdHMgb3BlbmVyIGFzIGJhY2tncm91bmQgaW1hZ2UgaXMgZGVwcmVjYXRlZC4gSW4gdmVyc2lvbiAyLjAuMCBpdCB3aWxsIGJlIHJlbW92ZWQuIFVzZSBodG1sIGluc3RlYWQgcGxlYXNlLicpOwogICAgICAgIH0KCiAgICAgICAgLy8gQ29udGFpbmVyIHdpdGggYWxsIGFjdHVhbCBlbGVtZW50cyBhbmQgcGFyYW1ldGVycwogICAgICAgIHZhciBzdGF0ZSA9IHsKICAgICAgICAgICAgaXNEcmFnZ2VkOiBmYWxzZSwKICAgICAgICAgICAgaXNSZWxFRlA6IG51bGwsIC8vIEhvdyBicm93c2VyIGNvdW50cyBlbGVtZW50RnJvbVBvaW50KCkgcG9zaXRpb24gKHJlbGF0aXZlIHRvIHdpbmRvdy9kb2N1bWVudCkKICAgICAgICAgICAgb0VsOiBudWxsLCAvLyBvdmVyRWxlbWVudCBpcyBlbGVtZW50IHdoaWNoIHJldHVybnMgZWxlbWVudEZyb21Qb2ludCgpIG1ldGhvZAogICAgICAgICAgICByb290RWw6IG51bGwsCiAgICAgICAgICAgIGNFbDogbnVsbCwgLy8gY3VycmVudEVsZW1lbnQgaXMgY3VycmVudGx5IGRyYWdnZWQgZWxlbWVudAogICAgICAgICAgICB1cFNjcm9sbDogZmFsc2UsCiAgICAgICAgICAgIGRvd25TY3JvbGw6IGZhbHNlLAogICAgICAgICAgICBwWDogMCwKICAgICAgICAgICAgcFk6IDAsCiAgICAgICAgICAgIGNYOiAwLAogICAgICAgICAgICBjWTogMCwKICAgICAgICAgICAgaXNBbGxvd2VkOiB0cnVlLCAvLyBUaGUgZnVuY3Rpb24gaXMgZGVmaW5lZCBpbiBzZXR0aW5nCiAgICAgICAgICAgIGU6IHtwYWdlWDogMCwgcGFnZVk6IDAsIGNsaWVudFg6IDAsIGNsaWVudFk6IDB9LCAvLyBUT0RPOiB1bnVzZWQ\/PwogICAgICAgICAgICBkb2M6ICQoZG9jdW1lbnQpLAogICAgICAgICAgICB3aW46ICQod2luZG93KQogICAgICAgIH07CgogICAgICAgIGlmIChzZXR0aW5nLm9wZW5lci5hY3RpdmUpewogICAgICAgICAgICBpZiAoIXNldHRpbmcub3BlbmVyLm9wZW4pCiAgICAgICAgICAgICAgICB0aHJvdyAnT3BlbmVyLm9wZW4gdmFsdWUgaXMgbm90IGRlZmluZWQuIEl0IHNob3VsZCBiZSB2YWxpZCB1cmwsIGh0bWwgb3IgY3NzIGNsYXNzLic7CiAgICAgICAgICAgIGlmICghc2V0dGluZy5vcGVuZXIuY2xvc2UpCiAgICAgICAgICAgICAgICB0aHJvdyAnT3BlbmVyLmNsb3NlIHZhbHVlIGlzIG5vdCBkZWZpbmVkLiBJdCBzaG91bGQgYmUgdmFsaWQgdXJsLCBodG1sIG9yIGNzcyBjbGFzcy4nOwoKICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24gKCl7CiAgICAgICAgICAgICAgICB2YXIgbGkgPSAkKHRoaXMpOwoKICAgICAgICAgICAgICAgIGlmIChsaS5jaGlsZHJlbihzZXR0aW5nLmxpc3RTZWxlY3RvcikubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICBvcGVuZXIuY2xvbmUodHJ1ZSkucHJlcGVuZFRvKGxpLmNoaWxkcmVuKCdkaXYnKS5maXJzdCgpKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWxpLmhhc0NsYXNzKCdzb3J0YWJsZUxpc3RzT3BlbicpKXsKICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2UobGkpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihsaSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8vIFJldHVybiB0aGlzIGVuc3VyZXMgY2hhaW5pbmcKICAgICAgICByZXR1cm4gdGhpcy5vbignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpewogICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJChlLnRhcmdldCk7CiAgICAgICAgICAgIGlmIChzdGF0ZS5pc0RyYWdnZWQgIT09IGZhbHNlIHx8IChzZXR0aW5nLmlnbm9yZUNsYXNzICYmIHRhcmdldC5oYXNDbGFzcyhzZXR0aW5nLmlnbm9yZUNsYXNzKSkpCiAgICAgICAgICAgICAgICByZXR1cm47IC8vIHNldHRpbmcuaWdub3JlQ2xhc3MgaXMgY2hlY2tlZCBjYXVzZSBoYXNDbGFzcygnJykgcmV0dXJucyB0cnVlCiAgICAgICAgICAgIC8vIFNvbHZlcyBzZWxlY3Rpb24vcmFuZ2UgaGlnaGxpZ2h0aW5nCiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgLy8gRWwgbXVzdCBiZSBsaSBpbiBqUXVlcnkgb2JqZWN0CiAgICAgICAgICAgIHZhciBlbCA9IHRhcmdldC5jbG9zZXN0KCdsaScpLAogICAgICAgICAgICAgICAgICAgIHJFbCA9ICQodGhpcyk7CiAgICAgICAgICAgIC8vIENoZWNrIGlmIGVsIGlzIG5vdCBlbXB0eQogICAgICAgICAgICBpZiAoZWxbIDAgXSl7CiAgICAgICAgICAgICAgICBzZXR0aW5nLm9uRHJhZ1N0YXJ0KGUsIGVsKTsKICAgICAgICAgICAgICAgIHN0YXJ0RHJhZyhlLCBlbCwgckVsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICApOwoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzYyBCaW5kcyBldmVudHMgZHJhZ2dpbmcgYW5kIGVuZERyYWcsIHNldHMgc29tZSBpbml0LiB2YWx1ZXMKICAgICAgICAgKiBAcGFyYW0gZSBldmVudCBvYmouCiAgICAgICAgICogQHBhcmFtIGVsIGN1cnIuIGRyYWdnZWQgZWxlbWVudAogICAgICAgICAqIEBwYXJhbSByRWwgcm9vdCBlbGVtZW50CiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc3RhcnREcmFnKGUsIGVsLCByRWwpewogICAgICAgICAgICBzdGF0ZS5pc0RyYWdnZWQgPSB0cnVlOwoKICAgICAgICAgICAgdmFyIGVsTVQgPSBwYXJzZUludChlbC5jc3MoJ21hcmdpbi10b3AnKSksIC8vIHBhcnNlSW50IGlzIG5lY2VzYXJ5IGNhdXNlIHZhbHVlIGhhcyBweCBhdCB0aGUgZW5kCiAgICAgICAgICAgICAgICAgICAgZWxNQiA9IHBhcnNlSW50KGVsLmNzcygnbWFyZ2luLWJvdHRvbScpKSwKICAgICAgICAgICAgICAgICAgICBlbE1MID0gcGFyc2VJbnQoZWwuY3NzKCdtYXJnaW4tbGVmdCcpKSwKICAgICAgICAgICAgICAgICAgICBlbE1SID0gcGFyc2VJbnQoZWwuY3NzKCdtYXJnaW4tcmlnaHQnKSksCiAgICAgICAgICAgICAgICAgICAgZWxYWSA9IGVsLm9mZnNldCgpLAogICAgICAgICAgICAgICAgICAgIGVsSUggPSBlbC5pbm5lckhlaWdodCgpOwoKICAgICAgICAgICAgc3RhdGUucm9vdEVsID0gewogICAgICAgICAgICAgICAgZWw6IHJFbCwKICAgICAgICAgICAgICAgIG9mZnNldDogckVsLm9mZnNldCgpLAogICAgICAgICAgICAgICAgcm9vdEVsQ2xhc3M6IHJFbC5hdHRyKCdjbGFzcycpCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBzdGF0ZS5jRWwgPSB7CiAgICAgICAgICAgICAgICBlbDogZWwsCiAgICAgICAgICAgICAgICBtVDogZWxNVCwgbUw6IGVsTUwsIG1COiBlbE1CLCBtUjogZWxNUiwKICAgICAgICAgICAgICAgIG9mZnNldDogZWxYWQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgc3RhdGUuY0VsLnh5T2Zmc2V0RGlmZiA9IHtYOiBlLnBhZ2VYIC0gc3RhdGUuY0VsLm9mZnNldC5sZWZ0LCBZOiBlLnBhZ2VZIC0gc3RhdGUuY0VsLm9mZnNldC50b3B9OwogICAgICAgICAgICBzdGF0ZS5jRWwuZWwuYWRkQ2xhc3MoJ3NvcnRhYmxlTGlzdHNDdXJyZW50JyArICcgJyArIHNldHRpbmcuY3VyckVsQ2xhc3MpOwoKICAgICAgICAgICAgZWwuYmVmb3JlKHBsYWNlaG9sZGVyKTsgIC8vIE5vdyBkb2N1bWVudCBoYXMgbm9kZSBwbGFjZWhvbGRlcgoKICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyTm9kZSA9IHN0YXRlLnBsYWNlaG9sZGVyTm9kZSA9ICQoJyNzb3J0YWJsZUxpc3RzUGxhY2Vob2xkZXInKTsgIC8vIGpRdWVyeSBvYmplY3QgJiYgZG9jdW1lbnQgbm9kZQoKICAgICAgICAgICAgZWwuY3NzKHsKICAgICAgICAgICAgICAgICd3aWR0aCc6IGVsLndpZHRoKCksCiAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLAogICAgICAgICAgICAgICAgJ3RvcCc6IGVsWFkudG9wIC0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpIC0gZWxNVCwKICAgICAgICAgICAgICAgICdsZWZ0JzogZWxYWS5sZWZ0IC0gJCh3aW5kb3cpLnNjcm9sbExlZnQoKSAtIGVsTUwKICAgICAgICAgICAgfSkucHJlcGVuZFRvKGJhc2UpOwoKICAgICAgICAgICAgcGxhY2Vob2xkZXJOb2RlLmNzcyh7CiAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdibG9jaycsCiAgICAgICAgICAgICAgICAnaGVpZ2h0JzogZWxJSAogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGhpbnQuY3NzKCdoZWlnaHQnLCBlbElIKTsKICAgICAgICAgICAgc3RhdGUuZG9jLm9uKCdtb3VzZW1vdmUnLCBkcmFnZ2luZykub24oJ21vdXNldXAnLCBlbmREcmFnKTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjIFN0YXJ0IGRyYWdnaW5nCiAgICAgICAgICogQHBhcmFtIGUgZXZlbnQgb2JqLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGRyYWdnaW5nKGUpewogICAgICAgICAgICBpZiAoc3RhdGUuaXNEcmFnZ2VkKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgY0VsID0gc3RhdGUuY0VsLAogICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSBzdGF0ZS5kb2MsCiAgICAgICAgICAgICAgICAgICAgICAgIHdpbiA9IHN0YXRlLndpbjsKCiAgICAgICAgICAgICAgICAvLyBldmVudCB0cmlnZ2VyZWQgYnkgdHJpZ2dlcigpIGZyb20gc2V0SW50ZXJ2YWwgZG9lcyBub3QgaGF2ZSBYWSBwcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICBpZiAoIWUucGFnZVgpewogICAgICAgICAgICAgICAgICAgIHNldEV2ZW50UG9zKGUpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIFNjcm9sbGluZyB1cAogICAgICAgICAgICAgICAgaWYgKGRvYy5zY3JvbGxUb3AoKSA+IHN0YXRlLnJvb3RFbC5vZmZzZXQudG9wIC0gMTAgJiYgZS5jbGllbnRZIDwgNTApewogICAgICAgICAgICAgICAgICAgIGlmICghc3RhdGUudXBTY3JvbGwpIC8vIEhhcyB0byBiZSBoZXJlIGFmdGVyIGNvbmQuIGUuY2xpZW50WSA8IDUwIGNhdXNlIGVsc2UgdW5zZXRzIHRoZSBpbnRlcnZhbAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2Nyb2xsVXAoZSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICBlLnBhZ2VZID0gZS5wYWdlWSAtIHNldHRpbmcuc2Nyb2xsOwogICAgICAgICAgICAgICAgICAgICAgICAkKCdodG1sLCBib2R5JykuZWFjaChmdW5jdGlvbiAoaSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnNjcm9sbFRvcCgkKHRoaXMpLnNjcm9sbFRvcCgpIC0gc2V0dGluZy5zY3JvbGwpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q3Vyc29yUG9zKGUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIFNjcm9sbGluZyBkb3duCiAgICAgICAgICAgICAgICBlbHNlIGlmIChkb2Muc2Nyb2xsVG9wKCkgKyB3aW4uaGVpZ2h0KCkgPCBzdGF0ZS5yb290RWwub2Zmc2V0LnRvcCArIHN0YXRlLnJvb3RFbC5lbC5vdXRlckhlaWdodChmYWxzZSkgKyAxMCAmJiB3aW4uaGVpZ2h0KCkgLSBlLmNsaWVudFkgPCA1MCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLmRvd25TY3JvbGwpewogICAgICAgICAgICAgICAgICAgICAgICBzZXRTY3JvbGxEb3duKGUpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgZS5wYWdlWSA9IGUucGFnZVkgKyBzZXR0aW5nLnNjcm9sbDsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmVhY2goZnVuY3Rpb24gKGkpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuc2Nyb2xsVG9wKCQodGhpcykuc2Nyb2xsVG9wKCkgKyBzZXR0aW5nLnNjcm9sbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXJzb3JQb3MoZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlewogICAgICAgICAgICAgICAgICAgIHNjcm9sbFN0b3Aoc3RhdGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gU2NyaXB0IG5lZWRzIHRvIGtub3cgb2xkIG9FbAogICAgICAgICAgICAgICAgc3RhdGUub0VsT2xkID0gc3RhdGUub0VsOwogICAgICAgICAgICAgICAgY0VsLmVsWyAwIF0uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOyAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHRoZSBuZXh0IHJvdwogICAgICAgICAgICAgICAgc3RhdGUub0VsID0gb0VsID0gZWxGcm9tUG9pbnQoZS5wYWdlWCwgZS5wYWdlWSk7CiAgICAgICAgICAgICAgICBjRWwuZWxbIDAgXS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnOwogICAgICAgICAgICAgICAgc2hvd0hpbnQoZSwgc3RhdGUpOwogICAgICAgICAgICAgICAgc2V0Q0VsUG9zKGUsIHN0YXRlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2MgZW5kRHJhZyB1bmJpbmRzIGV2ZW50cyBtb3VzZW1vdmUvbW91c2V1cCBhbmQgcmVtb3ZlcyByZWR1bmRhbnQgZWxlbWVudHMKICAgICAgICAgKiBAcGFyYW0gZQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGVuZERyYWcoZSl7CiAgICAgICAgICAgIHZhciBjRWwgPSBzdGF0ZS5jRWwsCiAgICAgICAgICAgICAgICAgICAgaGludE5vZGUgPSAkKCcjc29ydGFibGVMaXN0c0hpbnQnLCBzdGF0ZS5yb290RWwuZWwpLAogICAgICAgICAgICAgICAgICAgIGhpbnRTdHlsZSA9IGhpbnRbIDAgXS5zdHlsZSwKICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbCA9IG51bGwsIC8vIGhpbnROb2RlL3BsYWNlaG9sZGVyTm9kZQogICAgICAgICAgICAgICAgICAgIGlzSGludFRhcmdldCA9IGZhbHNlLCAvLyBpZiBjRWwgd2lsbCBiZSBwbGFjZWQgdG8gdGhlIGhpbnROb2RlCiAgICAgICAgICAgICAgICAgICAgaGludFdyYXBwZXJOb2RlID0gJCgnI3NvcnRhYmxlTGlzdHNIaW50V3JhcHBlcicpOwoKICAgICAgICAgICAgaWYgKGhpbnRTdHlsZS5kaXNwbGF5ID09ICdibG9jaycgJiYgaGludE5vZGUubGVuZ3RoICYmIHN0YXRlLmlzQWxsb3dlZCkgewogICAgICAgICAgICAgICAgdGFyZ2V0RWwgPSBoaW50Tm9kZTsKICAgICAgICAgICAgICAgIGlzSGludFRhcmdldCA9IHRydWU7CiAgICAgICAgICAgIH0gZWxzZXsKICAgICAgICAgICAgICAgIHRhcmdldEVsID0gc3RhdGUucGxhY2Vob2xkZXJOb2RlOwogICAgICAgICAgICAgICAgaXNIaW50VGFyZ2V0ID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb2Zmc2V0ID0gdGFyZ2V0RWwub2Zmc2V0KCk7CiAgICAgICAgICAgIGNFbC5lbC5hbmltYXRlKHtsZWZ0OiBvZmZzZXQubGVmdCAtICQod2luZG93KS5zY3JvbGxMZWZ0KCkgLSBzdGF0ZS5jRWwubUwsIHRvcDogb2Zmc2V0LnRvcCAtICQod2luZG93KS5zY3JvbGxUb3AoKSAtIHN0YXRlLmNFbC5tVH0sIDI1MCwKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSAgLy8gY29tcGxldGUgY2FsbGJhY2sKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpZHlDdXJyRWwoY0VsKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEVsLmFmdGVyKGNFbC5lbFsgMCBdKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWxbIDAgXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICBoaW50U3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBoYXZlIHRvIGJlIGRvY3VtZW50IG5vZGUsIG5vdCBoaW50IGFzIGEgcGFydCBvZiBkb2N1bWVudEZyYWdtZW50LgogICAgICAgICAgICAgICAgICAgICAgICBoaW50Tm9kZS5yZW1vdmUoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGhpbnRXcmFwcGVyTm9kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdpZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHNldHRpbmcuaGludFdyYXBwZXJDbGFzcyk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGludFdyYXBwZXJOb2RlLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaW50V3JhcHBlck5vZGUucHJldignZGl2JykuYXBwZW5kKG9wZW5lci5jbG9uZSh0cnVlKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpcmVjdGx5IHJlbW92ZWQgcGxhY2Vob2xkZXIgbG9va3MgYmFkLiBJdCBqdW1wcyB1cCBpZiB0aGUgaGludCBpcyBiZWxvdy4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzSGludFRhcmdldCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5wbGFjZWhvbGRlck5vZGUuc2xpZGVVcCgxNTAsIGZ1bmN0aW9uICgpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnBsYWNlaG9sZGVyTm9kZS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWR5RW1wdHlMaXN0cygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmcub25DaGFuZ2UoY0VsLmVsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nLmNvbXBsZXRlKGNFbC5lbCk7IC8vIEhhdmUgdG8gYmUgaGVyZSBjYXVzZSBpcyBuZWNlc3NhcnkgdG8gcmVtb3ZlIHBsYWNlaG9sZGVyIGJlZm9yZSBjb21wbGV0ZSBjYWxsLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmlzRHJhZ2dlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnBsYWNlaG9sZGVyTm9kZS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpZHlFbXB0eUxpc3RzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nLmNvbXBsZXRlKGNFbC5lbCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0RyYWdnZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHNjcm9sbFN0b3Aoc3RhdGUpOwogICAgICAgICAgICBzdGF0ZS5kb2MudW5iaW5kKCJtb3VzZW1vdmUiLCBkcmFnZ2luZykudW5iaW5kKCJtb3VzZXVwIiwgZW5kRHJhZyk7CiAgICAgICAgfQoKICAgICAgICAvLy8vLy8vL0hlbHBlcnMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgLy8vLy8vLy8gU2Nyb2xsIGhhbmRsZXJzIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzYyBFbnN1cmVzIGF1dG9zY3JvbGwgdXAuCiAgICAgICAgICogQHBhcmFtIGUKICAgICAgICAgKiBAcmV0dXJuIE5vIHZhbHVlCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc2V0U2Nyb2xsVXAoZSl7CiAgICAgICAgICAgIGlmIChzdGF0ZS51cFNjcm9sbCkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgc3RhdGUudXBTY3JvbGwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKXsKICAgICAgICAgICAgICAgIHN0YXRlLmRvYy50cmlnZ2VyKCdtb3VzZW1vdmUnKTsKICAgICAgICAgICAgfSwgNTApOwogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2MgRW5zdXJlcyBhdXRvc2Nyb2xsIGRvd24uCiAgICAgICAgICogQHBhcmFtIGUKICAgICAgICAgKiBAcmV0dXJuIE5vIHZhbHVlCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc2V0U2Nyb2xsRG93bihlKXsKICAgICAgICAgICAgaWYgKHN0YXRlLmRvd25TY3JvbGwpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIHN0YXRlLmRvd25TY3JvbGwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKXsKICAgICAgICAgICAgICAgIHN0YXRlLmRvYy50cmlnZ2VyKCdtb3VzZW1vdmUnKTsKICAgICAgICAgICAgfSwgNTApOwogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2MgVGhpcyBwcm9wZXJ0aWVzIGFyZSB1c2VkIHdoZW4gc2V0U2Nyb2xsVXAoKS9Eb3duKCkgY2FsbHMgdHJpZ2dlcignbW91c2Vtb3ZlJyksIGNhdXNlIHRyaWdnZXIoKSBwcm9kdWNlIGV2ZW50IG9iamVjdCB3aXRob3V0IHBhZ2VZL1kgYW5kIGNsaWVudFgvWS4KICAgICAgICAgKiBAcGFyYW0gZQogICAgICAgICAqIEByZXR1cm4gTm8gdmFsdWUKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBzZXRDdXJzb3JQb3MoZSl7CiAgICAgICAgICAgIHN0YXRlLnBZID0gZS5wYWdlWTsKICAgICAgICAgICAgc3RhdGUucFggPSBlLnBhZ2VYOwogICAgICAgICAgICBzdGF0ZS5jWSA9IGUuY2xpZW50WTsKICAgICAgICAgICAgc3RhdGUuY1ggPSBlLmNsaWVudFg7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzYyBOZWNlc3Nhcnkgd2hpbGUgc2Nyb2xsaW5nLCBjYXVzZSB0cmlnZ2VyKCdtb3VzZW1vdmUnKSBkb2VzIG5vdCBzZXQgY3Vyc29yIFhZIHZhbHVlcyBpbiBldmVudCBvYmplY3QKICAgICAgICAgKiBAcGFyYW0gZQogICAgICAgICAqIEByZXR1cm4gTm8gdmFsdWUKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBzZXRFdmVudFBvcyhlKXsKICAgICAgICAgICAgZS5wYWdlWSA9IHN0YXRlLnBZOwogICAgICAgICAgICBlLnBhZ2VYID0gc3RhdGUucFg7CiAgICAgICAgICAgIGUuY2xpZW50WSA9IHN0YXRlLmNZOwogICAgICAgICAgICBlLmNsaWVudFggPSBzdGF0ZS5jWDsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjIFN0b3BzIHNjcm9sbGluZyBhbmQgc2V0cyB2YXJpYWJsZXMKICAgICAgICAgKiBAcGFyYW0gc3RhdGUKICAgICAgICAgKiBAcmV0dXJuIE5vIHZhbHVlCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc2Nyb2xsU3RvcChzdGF0ZSl7CiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc3RhdGUudXBTY3JvbGwpOwogICAgICAgICAgICBjbGVhckludGVydmFsKHN0YXRlLmRvd25TY3JvbGwpOwogICAgICAgICAgICAvLyBjbGVhckludGVydmFsIGhhdmUgdG8gYmUgYmVmb3JlIHVwU2Nyb2xsL2Rvd25TY3JvbGwgaXMgc2V0IHRvIGZhbHNlCiAgICAgICAgICAgIHN0YXRlLnVwU2Nyb2xsID0gc3RhdGUuZG93blNjcm9sbCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICAvLy8vLy8vIEVuZCBvZiBTY3JvbGwgaGFuZGxlcnMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2MgU2V0cyB0aGUgcG9zaXRpb24gb2YgZHJhZ2dlZCBlbGVtZW50CiAgICAgICAgICogQHBhcmFtIGUgZXZlbnQgb2JqZWN0CiAgICAgICAgICogQHBhcmFtIHN0YXRlIHN0YXRlIG9iamVjdAogICAgICAgICAqIEByZXR1cm4gTm8gdmFsdWUKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBzZXRDRWxQb3MoZSwgc3RhdGUpewogICAgICAgICAgICB2YXIgY0VsID0gc3RhdGUuY0VsOwogICAgICAgICAgICBjRWwuZWwuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcCc6IGUuY2xpZW50WSAtIGNFbC54eU9mZnNldERpZmYuWSAtIGNFbC5tVCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiBlLmNsaWVudFggLSBjRWwueHlPZmZzZXREaWZmLlggLSBjRWwubUwKICAgICAgICAgICAgfSk7IC8vRml4IGRhdmlkICg7KQoKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjIFJldHVybiBlbGVtZW50RnJvbVBvaW50KCkgcmVzdWx0IGFzIGpRdWVyeSBvYmplY3QKICAgICAgICAgKiBAcGFyYW0geCBlLnBhZ2VYCiAgICAgICAgICogQHBhcmFtIHkgZS5wYWdlWQogICAgICAgICAqIEByZXR1cm4gbnVsbHxqUXVlcnkgb2JqZWN0CiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZWxGcm9tUG9pbnQoeCwgeSl7CiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCkKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwoKICAgICAgICAgICAgLy8gRkYvSUUvQ0ggbmVlZHMgY29vcmRpbmF0ZXMgcmVsYXRpdmUgdG8gdGhlIHdpbmRvdywgdW5saWtlCiAgICAgICAgICAgIC8vIE9wZXJhL1NhZmFyaSB3aGljaCBuZWVkcyBhYnNvbHV0ZSBjb29yZGluYXRlcyBvZiBkb2N1bWVudCBpbiBlbGVtZW50RnJvbVBvaW50KCkKICAgICAgICAgICAgdmFyIGlzUmVsRUZQID0gc3RhdGUuaXNSZWxFRlA7CgogICAgICAgICAgICAvLyBpc1JlbGF0aXZlID09PSBudWxsIG1lYW5zIGl0IGlzIG5vdCBjaGVja2VkIHlldAogICAgICAgICAgICBpZiAoaXNSZWxFRlAgPT09IG51bGwpewogICAgICAgICAgICAgICAgdmFyIHMsIHJlczsKICAgICAgICAgICAgICAgIGlmICgocyA9IHN0YXRlLmRvYy5zY3JvbGxUb3AoKSkgPiAwKXsKICAgICAgICAgICAgICAgICAgICBpc1JlbEVGUCA9ICgocmVzID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCgwLCBzICsgJCh3aW5kb3cpLmhlaWdodCgpIC0gMSkpID09IG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHJlcy50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT0gJ0hUTUwnKTsgIC8vIElFOCByZXR1cm5zIGh0bWwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgocyA9IHN0YXRlLmRvYy5zY3JvbGxMZWZ0KCkpID4gMCl7CiAgICAgICAgICAgICAgICAgICAgaXNSZWxFRlAgPSAoKHJlcyA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQocyArICQod2luZG93KS53aWR0aCgpIC0gMSwgMCkpID09IG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHJlcy50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT0gJ0hUTUwnKTsgIC8vIElFOCByZXR1cm5zIGh0bWwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGlzUmVsRUZQKXsKICAgICAgICAgICAgICAgIHggLT0gc3RhdGUuZG9jLnNjcm9sbExlZnQoKTsKICAgICAgICAgICAgICAgIHkgLT0gc3RhdGUuZG9jLnNjcm9sbFRvcCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBSZXR1cm5zIGpRdWVyeSBvYmplY3QKICAgICAgICAgICAgdmFyIGVsID0gJChkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHkpKTsKCiAgICAgICAgICAgIGlmICghc3RhdGUucm9vdEVsLmVsLmZpbmQoZWwpLmxlbmd0aCkgLy8gZWwgaXMgb3V0c2lkZSB0aGUgcm9vdEVsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9IGVsc2UgaWYgKGVsLmlzKCcjc29ydGFibGVMaXN0c1BsYWNlaG9sZGVyJykgfHwgZWwuaXMoJyNzb3J0YWJsZUxpc3RzSGludCcpKSAvLyBlbCBpcyAjcGxhY2Vob2xkZXIvI2hpbnQKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWVsLmlzKCdsaScpKSAvLyBlbCBpcyB1bCBvciBkaXYgb3Igc29tZXRoaW5nIGVsc2UgaW4gbGkgZWxlbS4KICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZWwgPSBlbC5jbG9zZXN0KCdsaScpOwogICAgICAgICAgICAgICAgcmV0dXJuIGVsWyAwIF0gPyBlbCA6IG51bGw7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwuaXMoJ2xpJykpIC8vIGVsIGlzIG1vc3Qgd2FudGVkIGxpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiBlbDsKICAgICAgICAgICAgfQoKICAgICAgICB9CgogICAgICAgIC8vLy8vLy8vIFNob3cgaGludCBoYW5kbGVycyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgICAgICAvKioKICAgICAgICAgKiBAZGVzYyBTaG93cyBvciBoaWRlcyBvciBkb2VzIG5vdCBzaG93IGhpbnQgZWxlbWVudAogICAgICAgICAqIEBwYXJhbSBlIGV2ZW50CiAgICAgICAgICogQHBhcmFtIHN0YXRlCiAgICAgICAgICogQHJldHVybiBObyB2YWx1ZQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHNob3dIaW50KGUsIHN0YXRlKXsKICAgICAgICAgICAgdmFyIG9FbCA9IHN0YXRlLm9FbDsKCiAgICAgICAgICAgIC8vIElmIG9FbCBpcyBudWxsIG9yIGlmIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwgaW4gZHJhZ2dpbmcKICAgICAgICAgICAgaWYgKCFvRWwgfHwgIXN0YXRlLm9FbE9sZCkKICAgICAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgICAgIHZhciBvRWxIID0gb0VsLm91dGVySGVpZ2h0KGZhbHNlKSwKICAgICAgICAgICAgICAgICAgICByZWxZID0gZS5wYWdlWSAtIG9FbC5vZmZzZXQoKS50b3A7CgogICAgICAgICAgICBpZiAoc2V0dGluZy5pbnNlcnRab25lUGx1cyl7CiAgICAgICAgICAgICAgICBpZiAoMTQgPiByZWxZKSAgLy8gSW5zZXJ0aW5nIG9uIHRvcAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHNob3dPblRvcFBsdXMoZSwgb0VsLCA3ID4gcmVsWSk7ICAvLyBMYXN0IGJvb2wgcGFyYW0gZXhwcmVzcyBpZiBoaW50IGluc2VydCBvdXRzaWRlL2luc2lkZQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvRWxIIC0gMTQgPCByZWxZKSAgLy8gSW5zZXJ0aW5nIG9uIGJvdHRvbQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHNob3dPbkJvdHRvbVBsdXMoZSwgb0VsLCBvRWxIIC0gNyA8IHJlbFkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2V7CiAgICAgICAgICAgICAgICBpZiAoNSA+IHJlbFkpICAvLyBJbnNlcnRpbmcgb24gdG9wCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc2hvd09uVG9wKGUsIG9FbCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9FbEggLSA1IDwgcmVsWSkgIC8vIEluc2VydGluZyBvbiBib3R0b20KICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzaG93T25Cb3R0b20oZSwgb0VsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2MgQ2FsbGVkIGZyb20gc2hvd0hpbnQgbWV0aG9kLiBEaXNwbGF5cyBvciBoaWRlcyBoaW50IGVsZW1lbnQKICAgICAgICAgKiBAcGFyYW0gZSBldmVudAogICAgICAgICAqIEBwYXJhbSBvRWwgb0VsZW1lbnQKICAgICAgICAgKiBAcmV0dXJuIE5vIHZhbHVlCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc2hvd09uVG9wKGUsIG9FbCl7CiAgICAgICAgICAgIGlmICgkKCcjc29ydGFibGVMaXN0c0hpbnRXcmFwcGVyJywgc3RhdGUucm9vdEVsLmVsKS5sZW5ndGgpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGhpbnQudW53cmFwKCk7ICAvLyBJZiBoaW50IGlzIHdyYXBwZWQgYnkgdWwvb2wgI3NvcnRhYmxlTGlzdHNIaW50V3JhcHBlcgogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBIaW50IG91dHNpZGUgdGhlIG9FbAogICAgICAgICAgICBpZiAoZS5wYWdlWCAtIG9FbC5vZmZzZXQoKS5sZWZ0IDwgc2V0dGluZy5pbnNlcnRab25lKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgZGlzcGxheTpub25lIGlmIGhpbnQgd2lsbCBiZSBuZXh0IHRvIHRoZSBwbGFjZWhvbGRlcgogICAgICAgICAgICAgICAgaWYgKG9FbC5wcmV2KCcjc29ydGFibGVMaXN0c1BsYWNlaG9sZGVyJykubGVuZ3RoKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGhpbnQuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBvRWwuYmVmb3JlKGhpbnQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIEhpbnQgaW5zaWRlIHRoZSBvRWwKICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBvRWwuY2hpbGRyZW4oKSwKICAgICAgICAgICAgICAgICAgICAgICAgbGlzdCA9IG9FbC5jaGlsZHJlbihzZXR0aW5nLmxpc3RTZWxlY3RvcikuZmlyc3QoKTsKCiAgICAgICAgICAgICAgICBpZiAobGlzdC5jaGlsZHJlbigpLmZpcnN0KCkuaXMoJyNzb3J0YWJsZUxpc3RzUGxhY2Vob2xkZXInKSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBoaW50LmNzcygnZGlzcGxheScsICdub25lJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIEZpbmQgb3V0IGlmIGlzIG5lY2Vzc2FyeSB0byB3cmFwIGhpbnQgYnkgaGludFdyYXBwZXIKICAgICAgICAgICAgICAgIGlmICghbGlzdC5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZpcnN0KCkuYWZ0ZXIoaGludCk7CiAgICAgICAgICAgICAgICAgICAgaGludC53cmFwKGhpbnRXcmFwcGVyKTsKICAgICAgICAgICAgICAgIH0gZWxzZXsKICAgICAgICAgICAgICAgICAgICBsaXN0LnByZXBlbmQoaGludCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLm9FbCl7CiAgICAgICAgICAgICAgICAgICAgb3BlbihvRWwpOyAvLyBUT0RPOmFuaW1hdGlvbj8\/PyAuY2hpbGRyZW4oJ3VsLG9sJykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9CgogICAgICAgICAgICBoaW50LmNzcygnZGlzcGxheScsICdibG9jaycpOwogICAgICAgICAgICAvLyBFbnN1cmVzIHBvc2libGUgZm9ybWF0aW5nIG9mIGVsZW1lbnRzLiBTZWNvbmQgY2FsbCBpcyBpbiB0aGUgZW5kRHJhZyBtZXRob2QuCiAgICAgICAgICAgIHN0YXRlLmlzQWxsb3dlZCA9IHNldHRpbmcuaXNBbGxvd2VkKHN0YXRlLmNFbC5lbCwgaGludCwgaGludC5wYXJlbnRzKCdsaScpLmZpcnN0KCkpOwoKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjIENhbGxlZCBmcm9tIHNob3dIaW50IG1ldGhvZC4gRGlzcGxheXMgb3IgaGlkZXMgaGludCBlbGVtZW50CiAgICAgICAgICogQHBhcmFtIGUgZXZlbnQKICAgICAgICAgKiBAcGFyYW0gb0VsIG9FbGVtZW50CiAgICAgICAgICogQHBhcmFtIG91dHNpZGUgYm9vbAogICAgICAgICAqIEByZXR1cm4gTm8gdmFsdWUKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBzaG93T25Ub3BQbHVzKGUsIG9FbCwgb3V0c2lkZSl7CiAgICAgICAgICAgIGlmICgkKCcjc29ydGFibGVMaXN0c0hpbnRXcmFwcGVyJywgc3RhdGUucm9vdEVsLmVsKS5sZW5ndGgpewogICAgICAgICAgICAgICAgaGludC51bndyYXAoKTsgIC8vIElmIGhpbnQgaXMgd3JhcHBlZCBieSB1bC9vbCAjc29ydGFibGVMaXN0c0hpbnRXcmFwcGVyCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEhpbnQgaW5zaWRlIHRoZSBvRWwKICAgICAgICAgICAgaWYgKCFvdXRzaWRlICYmIGUucGFnZVggLSBvRWwub2Zmc2V0KCkubGVmdCA+IHNldHRpbmcuaW5zZXJ0Wm9uZSl7CiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBvRWwuY2hpbGRyZW4oKSwKICAgICAgICAgICAgICAgICAgICAgICAgbGlzdCA9IG9FbC5jaGlsZHJlbihzZXR0aW5nLmxpc3RTZWxlY3RvcikuZmlyc3QoKTsKCiAgICAgICAgICAgICAgICBpZiAobGlzdC5jaGlsZHJlbigpLmZpcnN0KCkuaXMoJyNzb3J0YWJsZUxpc3RzUGxhY2Vob2xkZXInKSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBoaW50LmNzcygnZGlzcGxheScsICdub25lJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIEZpbmQgb3V0IGlmIGlzIG5lY2Vzc2FyeSB0byB3cmFwIGhpbnQgYnkgaGludFdyYXBwZXIKICAgICAgICAgICAgICAgIGlmICghbGlzdC5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZpcnN0KCkuYWZ0ZXIoaGludCk7CiAgICAgICAgICAgICAgICAgICAgaGludC53cmFwKGhpbnRXcmFwcGVyKTsKICAgICAgICAgICAgICAgIH0gZWxzZXsKICAgICAgICAgICAgICAgICAgICBsaXN0LnByZXBlbmQoaGludCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLm9FbCl7CiAgICAgICAgICAgICAgICAgICAgb3BlbihvRWwpOyAvLyBUT0RPOmFuaW1hdGlvbj8\/PyAuY2hpbGRyZW4oJ3VsLG9sJykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gSGludCBvdXRzaWRlIHRoZSBvRWwKICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgIC8vIEVuc3VyZSBkaXNwbGF5Om5vbmUgaWYgaGludCB3aWxsIGJlIG5leHQgdG8gdGhlIHBsYWNlaG9sZGVyCiAgICAgICAgICAgICAgICBpZiAob0VsLnByZXYoJyNzb3J0YWJsZUxpc3RzUGxhY2Vob2xkZXInKS5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgIGhpbnQuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBvRWwuYmVmb3JlKGhpbnQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBoaW50LmNzcygnZGlzcGxheScsICdibG9jaycpOwogICAgICAgICAgICAvLyBFbnN1cmVzIHBvc2libGUgZm9ybWF0aW5nIG9mIGVsZW1lbnRzLiBTZWNvbmQgY2FsbCBpcyBpbiB0aGUgZW5kRHJhZyBtZXRob2QuCiAgICAgICAgICAgIHN0YXRlLmlzQWxsb3dlZCA9IHNldHRpbmcuaXNBbGxvd2VkKHN0YXRlLmNFbC5lbCwgaGludCwgaGludC5wYXJlbnRzKCdsaScpLmZpcnN0KCkpOwogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2MgQ2FsbGVkIGZyb20gc2hvd0hpbnQgZnVuY3Rpb24uIERpc3BsYXlzIG9yIGhpZGVzIGhpbnQgZWxlbWVudC4KICAgICAgICAgKiBAcGFyYW0gZSBldmVudAogICAgICAgICAqIEBwYXJhbSBvRWwgb0VsZW1lbnQKICAgICAgICAgKiBAcmV0dXJuIE5vIHZhbHVlCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc2hvd09uQm90dG9tKGUsIG9FbCl7CiAgICAgICAgICAgIGlmICgkKCcjc29ydGFibGVMaXN0c0hpbnRXcmFwcGVyJywgc3RhdGUucm9vdEVsLmVsKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGhpbnQudW53cmFwKCk7ICAvLyBJZiBoaW50IGlzIHdyYXBwZWQgYnkgdWwvb2wgc29ydGFibGVMaXN0c0hpbnRXcmFwcGVyCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEhpbnQgb3V0c2lkZSB0aGUgb0VsCiAgICAgICAgICAgIGlmIChlLnBhZ2VYIC0gb0VsLm9mZnNldCgpLmxlZnQgPCBzZXR0aW5nLmluc2VydFpvbmUpewogICAgICAgICAgICAgICAgLy8gRW5zdXJlIGRpc3BsYXk6bm9uZSBpZiBoaW50IHdpbGwgYmUgbmV4dCB0byB0aGUgcGxhY2Vob2xkZXIKICAgICAgICAgICAgICAgIGlmIChvRWwubmV4dCgnI3NvcnRhYmxlTGlzdHNQbGFjZWhvbGRlcicpLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgaGludC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG9FbC5hZnRlcihoaW50KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBIaW50IGluc2lkZSB0aGUgb0VsCiAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBvRWwuY2hpbGRyZW4oKSwKICAgICAgICAgICAgICAgICAgICAgICAgbGlzdCA9IG9FbC5jaGlsZHJlbihzZXR0aW5nLmxpc3RTZWxlY3RvcikubGFzdCgpOyAgLy8gdWwvb2wgfHwgZW1wdHkgalF1ZXJ5IG9iagoKICAgICAgICAgICAgICAgIGlmIChsaXN0LmNoaWxkcmVuKCkubGFzdCgpLmlzKCcjc29ydGFibGVMaXN0c1BsYWNlaG9sZGVyJykpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaGludC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBGaW5kIG91dCBpZiBpcyBuZWNlc3NhcnkgdG8gd3JhcCBoaW50IGJ5IGhpbnRXcmFwcGVyCiAgICAgICAgICAgICAgICBpZiAobGlzdC5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLmxhc3QoKS5hcHBlbmQoaGludCk7CiAgICAgICAgICAgICAgICB9IGVsc2V7CiAgICAgICAgICAgICAgICAgICAgb0VsLmFwcGVuZChoaW50KTsKICAgICAgICAgICAgICAgICAgICBoaW50LndyYXAoaGludFdyYXBwZXIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5vRWwpewogICAgICAgICAgICAgICAgICAgIG9wZW4ob0VsKTsgLy8gVE9ETzogYW5pbWF0aW9uPz8\/CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9CgogICAgICAgICAgICBoaW50LmNzcygnZGlzcGxheScsICdibG9jaycpOwogICAgICAgICAgICAvLyBFbnN1cmVzIHBvc2libGUgZm9ybWF0aW5nIG9mIGVsZW1lbnRzLiBTZWNvbmQgY2FsbCBpcyBpbiB0aGUgZW5kRHJhZyBtZXRob2QuCiAgICAgICAgICAgIHN0YXRlLmlzQWxsb3dlZCA9IHNldHRpbmcuaXNBbGxvd2VkKHN0YXRlLmNFbC5lbCwgaGludCwgaGludC5wYXJlbnRzKCdsaScpLmZpcnN0KCkpOwoKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjIENhbGxlZCBmcm9tIHNob3dIaW50IGZ1bmN0aW9uLiBEaXNwbGF5cyBvciBoaWRlcyBoaW50IGVsZW1lbnQuCiAgICAgICAgICogQHBhcmFtIGUgZXZlbnQKICAgICAgICAgKiBAcGFyYW0gb0VsIG9FbGVtZW50CiAgICAgICAgICogQHBhcmFtIG91dHNpZGUgYm9vbAogICAgICAgICAqIEByZXR1cm4gTm8gdmFsdWUKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBzaG93T25Cb3R0b21QbHVzKGUsIG9FbCwgb3V0c2lkZSl7CiAgICAgICAgICAgIGlmICgkKCcjc29ydGFibGVMaXN0c0hpbnRXcmFwcGVyJywgc3RhdGUucm9vdEVsLmVsKS5sZW5ndGgpewogICAgICAgICAgICAgICAgaGludC51bndyYXAoKTsgIC8vIElmIGhpbnQgaXMgd3JhcHBlZCBieSB1bC9vbCBzb3J0YWJsZUxpc3RzSGludFdyYXBwZXIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSGludCBpbnNpZGUgdGhlIG9FbAogICAgICAgICAgICBpZiAoIW91dHNpZGUgJiYgZS5wYWdlWCAtIG9FbC5vZmZzZXQoKS5sZWZ0ID4gc2V0dGluZy5pbnNlcnRab25lKXsKICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IG9FbC5jaGlsZHJlbigpLAogICAgICAgICAgICAgICAgICAgICAgICBsaXN0ID0gb0VsLmNoaWxkcmVuKHNldHRpbmcubGlzdFNlbGVjdG9yKS5sYXN0KCk7ICAvLyB1bC9vbCB8fCBlbXB0eSBqUXVlcnkgb2JqCgogICAgICAgICAgICAgICAgaWYgKGxpc3QuY2hpbGRyZW4oKS5sYXN0KCkuaXMoJyNzb3J0YWJsZUxpc3RzUGxhY2Vob2xkZXInKSl7CiAgICAgICAgICAgICAgICAgICAgaGludC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBGaW5kIG91dCBpZiBpcyBuZWNlc3NhcnkgdG8gd3JhcCBoaW50IGJ5IGhpbnRXcmFwcGVyCiAgICAgICAgICAgICAgICBpZiAobGlzdC5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLmxhc3QoKS5hcHBlbmQoaGludCk7CiAgICAgICAgICAgICAgICB9IGVsc2V7CiAgICAgICAgICAgICAgICAgICAgb0VsLmFwcGVuZChoaW50KTsKICAgICAgICAgICAgICAgICAgICBoaW50LndyYXAoaGludFdyYXBwZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLm9FbCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBvcGVuKG9FbCk7IC8vIFRPRE86IGFuaW1hdGlvbj8\/PwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBIaW50IG91dHNpZGUgdGhlIG9FbAogICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgLy8gRW5zdXJlIGRpc3BsYXk6bm9uZSBpZiBoaW50IHdpbGwgYmUgbmV4dCB0byB0aGUgcGxhY2Vob2xkZXIKICAgICAgICAgICAgICAgIGlmIChvRWwubmV4dCgnI3NvcnRhYmxlTGlzdHNQbGFjZWhvbGRlcicpLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgaGludC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG9FbC5hZnRlcihoaW50KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaGludC5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTsKICAgICAgICAgICAgLy8gRW5zdXJlcyBwb3NpYmxlIGZvcm1hdGluZyBvZiBlbGVtZW50cy4gU2Vjb25kIGNhbGwgaXMgaW4gdGhlIGVuZERyYWcgbWV0aG9kLgogICAgICAgICAgICBzdGF0ZS5pc0FsbG93ZWQgPSBzZXR0aW5nLmlzQWxsb3dlZChzdGF0ZS5jRWwuZWwsIGhpbnQsIGhpbnQucGFyZW50cygnbGknKS5maXJzdCgpKTsKCiAgICAgICAgfQogICAgICAgIC8vLy8vLy8vIEVuZCBvZiBzaG93IGhpbnQgaGFuZGxlcnMgLy8vLy8vLy8vLy8KICAgICAgICAvLy8vLy8vLyBPcGVuL2Nsb3NlIGhhbmRsZXJzIC8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2MgSGFuZGxlcyBvcGVuaW5nIG5lc3RlZCBsaXN0cwogICAgICAgICAqIEBwYXJhbSBsaQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIG9wZW4obGkpewogICAgICAgICAgICBsaS5yZW1vdmVDbGFzcygnc29ydGFibGVMaXN0c0Nsb3NlZCcpLmFkZENsYXNzKCdzb3J0YWJsZUxpc3RzT3BlbicpOwogICAgICAgICAgICBsaS5jaGlsZHJlbihzZXR0aW5nLmxpc3RTZWxlY3RvcikuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7CgogICAgICAgICAgICB2YXIgb3BlbmVyID0gbGkuY2hpbGRyZW4oJ2RpdicpLmNoaWxkcmVuKCcuc29ydGFibGVMaXN0c09wZW5lcicpLmZpcnN0KCk7CgogICAgICAgICAgICBpZiAoc2V0dGluZy5vcGVuZXIuYXMgPT0gJ2h0bWwnKXsKICAgICAgICAgICAgICAgIG9wZW5lci5odG1sKHNldHRpbmcub3BlbmVyLmNsb3NlKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChzZXR0aW5nLm9wZW5lci5hcyA9PSAnY2xhc3MnKSB7CiAgICAgICAgICAgICAgICBvcGVuZXIuYWRkQ2xhc3Moc2V0dGluZy5vcGVuZXIuY2xvc2UpLnJlbW92ZUNsYXNzKHNldHRpbmcub3BlbmVyLm9wZW4pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgb3BlbmVyLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoJyArIHNldHRpbmcub3BlbmVyLmNsb3NlICsgJyknKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2MgSGFuZGxlcyBvcGVuaW5nIG5lc3RlZCBsaXN0cwogICAgICAgICAqIEBwYXJhbSBsaQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGNsb3NlKGxpKXsKICAgICAgICAgICAgbGkucmVtb3ZlQ2xhc3MoJ3NvcnRhYmxlTGlzdHNPcGVuJykuYWRkQ2xhc3MoJ3NvcnRhYmxlTGlzdHNDbG9zZWQnKTsKICAgICAgICAgICAgbGkuY2hpbGRyZW4oc2V0dGluZy5saXN0U2VsZWN0b3IpLmNzcygnZGlzcGxheScsICdub25lJyk7CiAgICAgICAgICAgIHZhciBvcGVuZXIgPSBsaS5jaGlsZHJlbignZGl2JykuY2hpbGRyZW4oJy5zb3J0YWJsZUxpc3RzT3BlbmVyJykuZmlyc3QoKTsKICAgICAgICAgICAgaWYgKHNldHRpbmcub3BlbmVyLmFzID09ICdodG1sJyl7CiAgICAgICAgICAgICAgICBvcGVuZXIuaHRtbChzZXR0aW5nLm9wZW5lci5vcGVuKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChzZXR0aW5nLm9wZW5lci5hcyA9PSAnY2xhc3MnKXsKICAgICAgICAgICAgICAgIG9wZW5lci5hZGRDbGFzcyhzZXR0aW5nLm9wZW5lci5vcGVuKS5yZW1vdmVDbGFzcyhzZXR0aW5nLm9wZW5lci5jbG9zZSk7CiAgICAgICAgICAgIH0gZWxzZXsKICAgICAgICAgICAgICAgIG9wZW5lci5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAndXJsKCcgKyBzZXR0aW5nLm9wZW5lci5vcGVuICsgJyknKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8vLy8vLyBFbmYgb2Ygb3Blbi9jbG9zZSBoYW5kbGVycyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2MgUGxhY2VzIHRoZSBjdXJyRWwgdG8gdGhlIHRhcmdldCBwbGFjZQogICAgICAgICAqIEBwYXJhbSBjRWwKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiB0aWR5Q3VyckVsKGNFbCl7CiAgICAgICAgICAgIHZhciBjRWxTdHlsZSA9IGNFbC5lbFsgMCBdLnN0eWxlOwogICAgICAgICAgICBjRWwuZWwucmVtb3ZlQ2xhc3Moc2V0dGluZy5jdXJyRWxDbGFzcyArICcgJyArICdzb3J0YWJsZUxpc3RzQ3VycmVudCcpOwogICAgICAgICAgICBjRWxTdHlsZS50b3AgPSAnMCc7CiAgICAgICAgICAgIGNFbFN0eWxlLmxlZnQgPSAnMCc7CiAgICAgICAgICAgIGNFbFN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJzsKICAgICAgICAgICAgY0VsU3R5bGUud2lkdGggPSAnYXV0byc7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzYyBSZW1vdmVzIGVtcHR5IGxpc3RzIGFuZCByZWR1bmRhbnQgb3BlbmVycwogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHRpZHlFbXB0eUxpc3RzKCl7CiAgICAgICAgICAgIC8vIFJlbW92ZSBldmVyeSBlbXB0eSB1bC9vbCBmcm9tIHJvb3QgYW5kIGFsc28gd2l0aCAuc29ydGFibGVMaXN0c09wZW5lcgogICAgICAgICAgICAvLyBoaW50V3JhcHBlciBjYW4gbm90IGJlIHJlbW92ZWQgYmVmb3JlIHRoZSBoaW50CiAgICAgICAgICAgICQoc2V0dGluZy5saXN0U2VsZWN0b3IsIHN0YXRlLnJvb3RFbC5lbCkuZWFjaChmdW5jdGlvbiAoaSl7CiAgICAgICAgICAgICAgICBpZiAoISQodGhpcykuY2hpbGRyZW4oKS5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgICQodGhpcykucHJldignZGl2JykuY2hpbGRyZW4oJy5zb3J0YWJsZUxpc3RzT3BlbmVyJykuZmlyc3QoKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIExpc3QgdG8gSlNPTiBBcnJheQogICAgICogQGF1dGhvciBEYXZpZCBUaWNvbmEgU2FyYXZpYQogICAgICogQGRlc2MgR2V0IHRoZSBqc29uIGZyb20gaHRtbCBsaXN0CiAgICAgKiBAcmV0dXJuIHthcnJheX0gQXJyYXkKICAgICAqLwogICAgJC5mbi5zb3J0YWJsZUxpc3RzVG9Kc29uID0gZnVuY3Rpb24gKCl7CiAgICAgICAgdmFyIGFyciA9IFtdOwogICAgICAgICQodGhpcykuY2hpbGRyZW4oJ2xpJykuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBsaSA9ICQodGhpcyk7CiAgICAgICAgICAgIHZhciBvYmplY3QgPSBsaS5kYXRhKCk7CiAgICAgICAgICAgIGFyci5wdXNoKG9iamVjdCk7CiAgICAgICAgICAgIHZhciBjaCA9IGxpLmNoaWxkcmVuKCd1bCxvbCcpLnNvcnRhYmxlTGlzdHNUb0pzb24oKTsKICAgICAgICAgICAgaWYgKGNoLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIG9iamVjdC5jaGlsZHJlbiA9IGNoOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZGVsZXRlIG9iamVjdC5jaGlsZHJlbjsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBhcnI7CiAgICB9OwoKfShqUXVlcnkpKTsKLyoqCiAqIEBhdXRob3IgRGF2aWQgVGljb25hIFNhcmF2aWEKICogQHBhcmFtIHtzdHJpbmd9IGlkU2VsZWN0b3IgQXR0ciBJRAogKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBbGwgU2V0dGluZ3MKICogKi8KZnVuY3Rpb24gTWVudUVkaXRvcihpZFNlbGVjdG9yLCBvcHRpb25zKSB7CiAgICB2YXIgJG1haW4gPSAkKCIjIiArIGlkU2VsZWN0b3IpOwogICAgdmFyIHNldHRpbmdzID0gewogICAgICAgIGxhYmVsRWRpdDogJzxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWVkaXQgY2xpY2thYmxlIj48L2k+JywKICAgICAgICBsYWJlbFJlbW92ZTogJzxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBjbGlja2FibGUiPjwvaT4nLAogICAgICAgIHRleHRDb25maXJtRGVsZXRlOiAnVGhpcyBpdGVtIHdpbGwgYmUgZGVsZXRlZC4gQXJlIHlvdSBzdXJlPycsCiAgICAgICAgaWNvblBpY2tlcjoge30KICAgIH07CiAgICAkLmV4dGVuZChzZXR0aW5ncywgb3B0aW9ucyk7CiAgICB2YXIgaXRlbUVkaXQgPSAwOwogICAgdmFyIHNvcnRhYmxlUmVhZHkgPSB0cnVlOwogICAgdmFyICRmb3JtID0gbnVsbDsKICAgIHZhciAkdXBkYXRlQnV0dG9uID0gbnVsbDsKICAgIHZhciBpY29uUGlja2VyT3B0ID0gc2V0dGluZ3MuaWNvblBpY2tlcjsKICAgIHZhciBvcHRpb25zID0gc2V0dGluZ3MubGlzdE9wdGlvbnM7CiAgICB2YXIgaWNvblBpY2tlciA9ICQoJyMnK2lkU2VsZWN0b3IrJ19pY29uJykuaWNvbnBpY2tlcihpY29uUGlja2VyT3B0KTsKICAgICRtYWluLnNvcnRhYmxlTGlzdHMoc2V0dGluZ3MubGlzdE9wdGlvbnMpOwogICAgCiAgICBpY29uUGlja2VyLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciBpY29uQ2xhc3MgPSAoZS5pY29uQ2xhc3MgIT09ICcnKSA\\/IHN0ckpzb24gOiBzdHJpbmdUb0FycmF5KHN0ckpzb24pOwogICAgICAgIGlmIChhcnJheUl0ZW0gIT09IG51bGwpIHsKICAgICAgICAgICAgJG1haW4uZW1wdHkoKTsKICAgICAgICAgICAgdmFyIG1lbnUgPSBjcmVhdGVNZW51KGFycmF5SXRlbSk7CiAgICAgICAgICAgIGlmICghc29ydGFibGVSZWFkeSkgewogICAgICAgICAgICAgICAgbWVudS5zb3J0YWJsZUxpc3RzKHNldHRpbmdzLmxpc3RPcHRpb25zKTsKICAgICAgICAgICAgICAgIHNvcnRhYmxlUmVhZHkgPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2V0T3BlbmVycygpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKICAgIHRoaXMuZ2V0U3RyaW5nID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBvYmogPSAkbWFpbi5zb3J0YWJsZUxpc3RzVG9Kc29uKCk7CiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7CiAgICB9OwogICAgCiAgICBmdW5jdGlvbiBUQnV0dG9uR3JvdXAoKSB7CiAgICAgICAgdmFyICRkaXZidG4gPSAkKCc8ZGl2PicpLmFkZENsYXNzKCdidG4tZ3JvdXAgcHVsbC1yaWdodCcpOwogICAgICAgIHZhciAkYnRuRWRpdCA9IFRCdXR0b24oe2NsYXNzQ3NzOiAnYnRuIGJ0bi1wcmltYXJ5IGJ0bi14cyBidG5FZGl0JywgdGV4dDogc2V0dGluZ3MubGFiZWxFZGl0fSk7CiAgICAgICAgdmFyICRidG5SZW12ID0gVEJ1dHRvbih7Y2xhc3NDc3M6ICdidG4gYnRuLWRhbmdlciBidG4teHMgYnRuUmVtb3ZlJywgdGV4dDogc2V0dGluZ3MubGFiZWxSZW1vdmV9KTsKICAgICAgICB2YXIgJGJ0blVwID0gVEJ1dHRvbih7Y2xhc3NDc3M6ICdidG4gYnRuLWRlZmF1bHQgYnRuLXhzIGJ0blVwIGJ0bk1vdmUnLCB0ZXh0OiAnPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCBjbGlja2FibGUiPjwvaT4nfSk7CiAgICAgICAgdmFyICRidG5Eb3duID0gVEJ1dHRvbih7Y2xhc3NDc3M6ICdidG4gYnRuLWRlZmF1bHQgYnRuLXhzIGJ0bkRvd24gYnRuTW92ZScsIHRleHQ6ICc8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24gY2xpY2thYmxlIj48L2k+J30pOwogICAgICAgIHZhciAkYnRuT3V0ID0gVEJ1dHRvbih7Y2xhc3NDc3M6ICdidG4gYnRuLWRlZmF1bHQgYnRuLXhzIGJ0bk91dCBidG5Nb3ZlJywgdGV4dDogJzxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNhdmUgY2xpY2thYmxlIj48L2k+J30pOwogICAgICAgIHZhciAkYnRuSW4gPSBUQnV0dG9uKHtjbGFzc0NzczogJ2J0biBidG4tZGVmYXVsdCBidG4teHMgYnRuSW4gYnRuTW92ZScsIHRleHQ6ICc8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1leHBvcnQgY2xpY2thYmxlIj48L2k+J30pOwogICAgICAgICRkaXZidG4uYXBwZW5kKCRidG5VcCkuYXBwZW5kKCRidG5Eb3duKS5hcHBlbmQoJGJ0bkluKS5hcHBlbmQoJGJ0bk91dCkuYXBwZW5kKCRidG5FZGl0KS5hcHBlbmQoJGJ0blJlbXYpOwogICAgICAgIHJldHVybiAkZGl2YnRuOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBUQnV0dG9uKGF0dHIpIHsKICAgICAgICByZXR1cm4gJCgiPGE+IikuYWRkQ2xhc3MoYXR0ci5jbGFzc0NzcykuYWRkQ2xhc3MoJ2NsaWNrYWJsZScpLmF0dHIoImhyZWYiLCAiIyIpLmh0bWwoYXR0ci50ZXh0KTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gVE9wZW5lcihsaSl7CiAgICAgICAgdmFyIG9wZW5lciA9ICQoJzxzcGFuPicpLmFkZENsYXNzKCdzb3J0YWJsZUxpc3RzT3BlbmVyICcgKyBvcHRpb25zLm9wZW5lci5vcGVuZXJDbGFzcykKICAgICAgICAgICAgICAgIC5jc3Mob3B0aW9ucy5vcGVuZXIub3BlbmVyQ3NzKQogICAgICAgICAgICAgICAgLm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSl7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxpID0gJCh0aGlzKS5jbG9zZXN0KCdsaScpOwogICAgICAgICAgICAgICAgICAgIGlmIChsaS5oYXNDbGFzcygnc29ydGFibGVMaXN0c0Nsb3NlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4obGkpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlKGxpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBQcmV2ZW50IGRlZmF1bHQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgIG9wZW5lci5wcmVwZW5kVG8obGkuY2hpbGRyZW4oJ2RpdicpLmZpcnN0KCkpOwogICAgICAgIGlmICghbGkuaGFzQ2xhc3MoJ3NvcnRhYmxlTGlzdHNPcGVuJykpIHsKICAgICAgICAgICAgY2xvc2UobGkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG9wZW4obGkpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgZnVuY3Rpb24gc2V0T3BlbmVycygpIHsKICAgICAgICAkbWFpbi5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbGkgPSAkKHRoaXMpOwogICAgICAgICAgICBpZiAobGkuY2hpbGRyZW4oJ3VsJykubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBUT3BlbmVyKGxpKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQogICAgZnVuY3Rpb24gb3BlbihsaSl7CiAgICAgICAgbGkucmVtb3ZlQ2xhc3MoJ3NvcnRhYmxlTGlzdHNDbG9zZWQnKS5hZGRDbGFzcygnc29ydGFibGVMaXN0c09wZW4nKTsKICAgICAgICBsaS5jaGlsZHJlbigndWwnKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTsKICAgICAgICB2YXIgb3BlbmVyID0gbGkuY2hpbGRyZW4oJ2RpdicpLmNoaWxkcmVuKCcuc29ydGFibGVMaXN0c09wZW5lcicpLmZpcnN0KCk7CiAgICAgICAgaWYgKG9wdGlvbnMub3BlbmVyLmFzID09PSAnaHRtbCcpIHsKICAgICAgICAgICAgb3BlbmVyLmh0bWwob3B0aW9ucy5vcGVuZXIuY2xvc2UpOwogICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5vcGVuZXIuYXMgPT09ICdjbGFzcycpIHsKICAgICAgICAgICAgb3BlbmVyLmFkZENsYXNzKG9wdGlvbnMub3BlbmVyLmNsb3NlKS5yZW1vdmVDbGFzcyhvcHRpb25zLm9wZW5lci5vcGVuKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBvcGVuZXIuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgJ3VybCgnICsgb3B0aW9ucy5vcGVuZXIuY2xvc2UgKyAnKScpOwogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGNsb3NlKGxpKSB7CiAgICAgICAgbGkucmVtb3ZlQ2xhc3MoJ3NvcnRhYmxlTGlzdHNPcGVuJykuYWRkQ2xhc3MoJ3NvcnRhYmxlTGlzdHNDbG9zZWQnKTsKICAgICAgICBsaS5jaGlsZHJlbigndWwnKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgICAgIHZhciBvcGVuZXIgPSBsaS5jaGlsZHJlbignZGl2JykuY2hpbGRyZW4oJy5zb3J0YWJsZUxpc3RzT3BlbmVyJykuZmlyc3QoKTsKICAgICAgICBpZiAob3B0aW9ucy5vcGVuZXIuYXMgPT09ICdodG1sJykgewogICAgICAgICAgICBvcGVuZXIuaHRtbChvcHRpb25zLm9wZW5lci5vcGVuKTsKICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMub3BlbmVyLmFzID09PSAnY2xhc3MnKSB7CiAgICAgICAgICAgIG9wZW5lci5hZGRDbGFzcyhvcHRpb25zLm9wZW5lci5vcGVuKS5yZW1vdmVDbGFzcyhvcHRpb25zLm9wZW5lci5jbG9zZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb3BlbmVyLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoJyArIG9wdGlvbnMub3BlbmVyLm9wZW4gKyAnKScpOwogICAgICAgIH0KICAgIH0KfQ==",
    "size": "41608"
}