{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Chart\/Axis.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKgogKiBDcmVhdGVkIGJ5IFBocFN0b3JtLgogKiBVc2VyOiBXaWt0b3IgVHJ6b25rb3dza2kKICogRGF0ZTogNi8xNy8xNAogKiBUaW1lOiAxMjoxMSBQTQogKi8KCmNsYXNzIFBIUEV4Y2VsX0NoYXJ0X0F4aXMgZXh0ZW5kcyBQSFBFeGNlbF9DaGFydF9Qcm9wZXJ0aWVzCnsKICAgIC8qKgogICAgICogQXhpcyBOdW1iZXIKICAgICAqCiAgICAgKiBAdmFyICBhcnJheSBvZiBtaXhlZAogICAgICovCiAgICBwcml2YXRlICRheGlzTnVtYmVyID0gYXJyYXkoCiAgICAgICAgJ2Zvcm1hdCcgPT4gc2VsZjo6Rk9STUFUX0NPREVfR0VORVJBTCwKICAgICAgICAnc291cmNlX2xpbmtlZCcgPT4gMQogICAgKTsKCiAgICAvKioKICAgICAqIEF4aXMgT3B0aW9ucwogICAgICoKICAgICAqIEB2YXIgIGFycmF5IG9mIG1peGVkCiAgICAgKi8KICAgIHByaXZhdGUgJGF4aXNPcHRpb25zID0gYXJyYXkoCiAgICAgICAgJ21pbmltdW0nID0+IG51bGwsCiAgICAgICAgJ21heGltdW0nID0+IG51bGwsCiAgICAgICAgJ21ham9yX3VuaXQnID0+IG51bGwsCiAgICAgICAgJ21pbm9yX3VuaXQnID0+IG51bGwsCiAgICAgICAgJ29yaWVudGF0aW9uJyA9PiBzZWxmOjpPUklFTlRBVElPTl9OT1JNQUwsCiAgICAgICAgJ21pbm9yX3RpY2tfbWFyaycgPT4gc2VsZjo6VElDS19NQVJLX05PTkUsCiAgICAgICAgJ21ham9yX3RpY2tfbWFyaycgPT4gc2VsZjo6VElDS19NQVJLX05PTkUsCiAgICAgICAgJ2F4aXNfbGFiZWxzJyA9PiBzZWxmOjpBWElTX0xBQkVMU19ORVhUX1RPLAogICAgICAgICdob3Jpem9udGFsX2Nyb3NzZXMnID0+IHNlbGY6OkhPUklaT05UQUxfQ1JPU1NFU19BVVRPWkVSTywKICAgICAgICAnaG9yaXpvbnRhbF9jcm9zc2VzX3ZhbHVlJyA9PiBudWxsCiAgICApOwoKICAgIC8qKgogICAgICogRmlsbCBQcm9wZXJ0aWVzCiAgICAgKgogICAgICogQHZhciAgYXJyYXkgb2YgbWl4ZWQKICAgICAqLwogICAgcHJpdmF0ZSAkZmlsbFByb3BlcnRpZXMgPSBhcnJheSgKICAgICAgICAndHlwZScgPT4gc2VsZjo6RVhDRUxfQ09MT1JfVFlQRV9BUkdCLAogICAgICAgICd2YWx1ZScgPT4gbnVsbCwKICAgICAgICAnYWxwaGEnID0+IDAKICAgICk7CgogICAgLyoqCiAgICAgKiBMaW5lIFByb3BlcnRpZXMKICAgICAqCiAgICAgKiBAdmFyICBhcnJheSBvZiBtaXhlZAogICAgICovCiAgICBwcml2YXRlICRsaW5lUHJvcGVydGllcyA9IGFycmF5KAogICAgICAgICd0eXBlJyA9PiBzZWxmOjpFWENFTF9DT0xPUl9UWVBFX0FSR0IsCiAgICAgICAgJ3ZhbHVlJyA9PiBudWxsLAogICAgICAgICdhbHBoYScgPT4gMAogICAgKTsKCiAgICAvKioKICAgICAqIExpbmUgU3R5bGUgUHJvcGVydGllcwogICAgICoKICAgICAqIEB2YXIgIGFycmF5IG9mIG1peGVkCiAgICAgKi8KICAgIHByaXZhdGUgJGxpbmVTdHlsZVByb3BlcnRpZXMgPSBhcnJheSgKICAgICAgICAnd2lkdGgnID0+ICc5NTI1JywKICAgICAgICAnY29tcG91bmQnID0+IHNlbGY6OkxJTkVfU1RZTEVfQ09NUE9VTkRfU0lNUExFLAogICAgICAgICdkYXNoJyA9PiBzZWxmOjpMSU5FX1NUWUxFX0RBU0hfU09MSUQsCiAgICAgICAgJ2NhcCcgPT4gc2VsZjo6TElORV9TVFlMRV9DQVBfRkxBVCwKICAgICAgICAnam9pbicgPT4gc2VsZjo6TElORV9TVFlMRV9KT0lOX0JFVkVMLAogICAgICAgICdhcnJvdycgPT4gYXJyYXkoCiAgICAgICAgICAgICdoZWFkJyA9PiBhcnJheSgKICAgICAgICAgICAgICAgICd0eXBlJyA9PiBzZWxmOjpMSU5FX1NUWUxFX0FSUk9XX1RZUEVfTk9BUlJPVywKICAgICAgICAgICAgICAgICdzaXplJyA9PiBzZWxmOjpMSU5FX1NUWUxFX0FSUk9XX1NJWkVfNQogICAgICAgICAgICApLAogICAgICAgICAgICAnZW5kJyA9PiBhcnJheSgKICAgICAgICAgICAgICAgICd0eXBlJyA9PiBzZWxmOjpMSU5FX1NUWUxFX0FSUk9XX1RZUEVfTk9BUlJPVywKICAgICAgICAgICAgICAgICdzaXplJyA9PiBzZWxmOjpMSU5FX1NUWUxFX0FSUk9XX1NJWkVfOAogICAgICAgICAgICApLAogICAgICAgICkKICAgICk7CgogICAgLyoqCiAgICAgKiBTaGFkb3cgUHJvcGVydGllcwogICAgICoKICAgICAqIEB2YXIgIGFycmF5IG9mIG1peGVkCiAgICAgKi8KICAgIHByaXZhdGUgJHNoYWRvd1Byb3BlcnRpZXMgPSBhcnJheSgKICAgICAgICAncHJlc2V0cycgPT4gc2VsZjo6U0hBRE9XX1BSRVNFVFNfTk9TSEFET1csCiAgICAgICAgJ2VmZmVjdCcgPT4gbnVsbCwKICAgICAgICAnY29sb3InID0+IGFycmF5KAogICAgICAgICAgICAndHlwZScgPT4gc2VsZjo6RVhDRUxfQ09MT1JfVFlQRV9TVEFOREFSRCwKICAgICAgICAgICAgJ3ZhbHVlJyA9PiAnYmxhY2snLAogICAgICAgICAgICAnYWxwaGEnID0+IDQwLAogICAgICAgICksCiAgICAgICAgJ3NpemUnID0+IGFycmF5KAogICAgICAgICAgICAnc3gnID0+IG51bGwsCiAgICAgICAgICAgICdzeScgPT4gbnVsbCwKICAgICAgICAgICAgJ2t4JyA9PiBudWxsCiAgICAgICAgKSwKICAgICAgICAnYmx1cicgPT4gbnVsbCwKICAgICAgICAnZGlyZWN0aW9uJyA9PiBudWxsLAogICAgICAgICdkaXN0YW5jZScgPT4gbnVsbCwKICAgICAgICAnYWxnbicgPT4gbnVsbCwKICAgICAgICAncm90V2l0aFNoYXBlJyA9PiBudWxsCiAgICApOwoKICAgIC8qKgogICAgICogR2xvdyBQcm9wZXJ0aWVzCiAgICAgKgogICAgICogQHZhciAgYXJyYXkgb2YgbWl4ZWQKICAgICAqLwogICAgcHJpdmF0ZSAkZ2xvd1Byb3BlcnRpZXMgPSBhcnJheSgKICAgICAgICAnc2l6ZScgPT4gbnVsbCwKICAgICAgICAnY29sb3InID0+IGFycmF5KAogICAgICAgICAgICAndHlwZScgPT4gc2VsZjo6RVhDRUxfQ09MT1JfVFlQRV9TVEFOREFSRCwKICAgICAgICAgICAgJ3ZhbHVlJyA9PiAnYmxhY2snLAogICAgICAgICAgICAnYWxwaGEnID0+IDQwCiAgICAgICAgKQogICAgKTsKCiAgICAvKioKICAgICAqIFNvZnQgRWRnZSBQcm9wZXJ0aWVzCiAgICAgKgogICAgICogQHZhciAgYXJyYXkgb2YgbWl4ZWQKICAgICAqLwogICAgcHJpdmF0ZSAkc29mdEVkZ2VzID0gYXJyYXkoCiAgICAgICAgJ3NpemUnID0+IG51bGwKICAgICk7CgogICAgLyoqCiAgICAgKiBHZXQgU2VyaWVzIERhdGEgVHlwZQogICAgICoKICAgICAqIEByZXR1cm4gIHN0cmluZwogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0QXhpc051bWJlclByb3BlcnRpZXMoJGZvcm1hdF9jb2RlKQogICAgewogICAgICAgICR0aGlzLT5heGlzTnVtYmVyWydmb3JtYXQnXSA9IChzdHJpbmcpICRmb3JtYXRfY29kZTsKICAgICAgICAkdGhpcy0+YXhpc051bWJlclsnc291cmNlX2xpbmtlZCddID0gMDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBBeGlzIE51bWJlciBGb3JtYXQgRGF0YSBUeXBlCiAgICAgKgogICAgICogQHJldHVybiAgc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRBeGlzTnVtYmVyRm9ybWF0KCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmF4aXNOdW1iZXJbJ2Zvcm1hdCddOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IEF4aXMgTnVtYmVyIFNvdXJjZSBMaW5rZWQKICAgICAqCiAgICAgKiBAcmV0dXJuICBzdHJpbmcKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldEF4aXNOdW1iZXJTb3VyY2VMaW5rZWQoKQogICAgewogICAgICAgIHJldHVybiAoc3RyaW5nKSAkdGhpcy0+YXhpc051bWJlclsnc291cmNlX2xpbmtlZCddOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IEF4aXMgT3B0aW9ucyBQcm9wZXJ0aWVzCiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkYXhpc19sYWJlbHMKICAgICAqIEBwYXJhbSBzdHJpbmcgJGhvcml6b250YWxfY3Jvc3Nlc192YWx1ZQogICAgICogQHBhcmFtIHN0cmluZyAkaG9yaXpvbnRhbF9jcm9zc2VzCiAgICAgKiBAcGFyYW0gc3RyaW5nICRheGlzX29yaWVudGF0aW9uCiAgICAgKiBAcGFyYW0gc3RyaW5nICRtYWpvcl90bXQKICAgICAqIEBwYXJhbSBzdHJpbmcgJG1pbm9yX3RtdAogICAgICogQHBhcmFtIHN0cmluZyAkbWluaW11bQogICAgICogQHBhcmFtIHN0cmluZyAkbWF4aW11bQogICAgICogQHBhcmFtIHN0cmluZyAkbWFqb3JfdW5pdAogICAgICogQHBhcmFtIHN0cmluZyAkbWlub3JfdW5pdAogICAgICoKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNldEF4aXNPcHRpb25zUHJvcGVydGllcygkYXhpc19sYWJlbHMsICRob3Jpem9udGFsX2Nyb3NzZXNfdmFsdWUgPSBudWxsLCAkaG9yaXpvbnRhbF9jcm9zc2VzID0gbnVsbCwgJGF4aXNfb3JpZW50YXRpb24gPSBudWxsLCAkbWFqb3JfdG10ID0gbnVsbCwgJG1pbm9yX3RtdCA9IG51bGwsICRtaW5pbXVtID0gbnVsbCwgJG1heGltdW0gPSBudWxsLCAkbWFqb3JfdW5pdCA9IG51bGwsICRtaW5vcl91bml0ID0gbnVsbCkKICAgIHsKICAgICAgICAkdGhpcy0+YXhpc09wdGlvbnNbJ2F4aXNfbGFiZWxzJ10gPSAoc3RyaW5nKSAkYXhpc19sYWJlbHM7CiAgICAgICAgKCRob3Jpem9udGFsX2Nyb3NzZXNfdmFsdWUgIT09IG51bGwpID8gJHRoaXMtPmF4aXNPcHRpb25zWydob3Jpem9udGFsX2Nyb3NzZXNfdmFsdWUnXSA9IChzdHJpbmcpICRob3Jpem9udGFsX2Nyb3NzZXNfdmFsdWUgOiBudWxsOwogICAgICAgICgkaG9yaXpvbnRhbF9jcm9zc2VzICE9PSBudWxsKSA\/ICR0aGlzLT5heGlzT3B0aW9uc1snaG9yaXpvbnRhbF9jcm9zc2VzJ10gPSAoc3RyaW5nKSAkaG9yaXpvbnRhbF9jcm9zc2VzIDogbnVsbDsKICAgICAgICAoJGF4aXNfb3JpZW50YXRpb24gIT09IG51bGwpID8gJHRoaXMtPmF4aXNPcHRpb25zWydvcmllbnRhdGlvbiddID0gKHN0cmluZykgJGF4aXNfb3JpZW50YXRpb24gOiBudWxsOwogICAgICAgICgkbWFqb3JfdG10ICE9PSBudWxsKSA\/ICR0aGlzLT5heGlzT3B0aW9uc1snbWFqb3JfdGlja19tYXJrJ10gPSAoc3RyaW5nKSAkbWFqb3JfdG10IDogbnVsbDsKICAgICAgICAoJG1pbm9yX3RtdCAhPT0gbnVsbCkgPyAkdGhpcy0+YXhpc09wdGlvbnNbJ21pbm9yX3RpY2tfbWFyayddID0gKHN0cmluZykgJG1pbm9yX3RtdCA6IG51bGw7CiAgICAgICAgKCRtaW5vcl90bXQgIT09IG51bGwpID8gJHRoaXMtPmF4aXNPcHRpb25zWydtaW5vcl90aWNrX21hcmsnXSA9IChzdHJpbmcpICRtaW5vcl90bXQgOiBudWxsOwogICAgICAgICgkbWluaW11bSAhPT0gbnVsbCkgPyAkdGhpcy0+YXhpc09wdGlvbnNbJ21pbmltdW0nXSA9IChzdHJpbmcpICRtaW5pbXVtIDogbnVsbDsKICAgICAgICAoJG1heGltdW0gIT09IG51bGwpID8gJHRoaXMtPmF4aXNPcHRpb25zWydtYXhpbXVtJ10gPSAoc3RyaW5nKSAkbWF4aW11bSA6IG51bGw7CiAgICAgICAgKCRtYWpvcl91bml0ICE9PSBudWxsKSA\/ICR0aGlzLT5heGlzT3B0aW9uc1snbWFqb3JfdW5pdCddID0gKHN0cmluZykgJG1ham9yX3VuaXQgOiBudWxsOwogICAgICAgICgkbWlub3JfdW5pdCAhPT0gbnVsbCkgPyAkdGhpcy0+YXhpc09wdGlvbnNbJ21pbm9yX3VuaXQnXSA9IChzdHJpbmcpICRtaW5vcl91bml0IDogbnVsbDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBBeGlzIE9wdGlvbnMgUHJvcGVydHkKICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRwcm9wZXJ0eQogICAgICoKICAgICAqIEByZXR1cm4gc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRBeGlzT3B0aW9uc1Byb3BlcnR5KCRwcm9wZXJ0eSkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmF4aXNPcHRpb25zWyRwcm9wZXJ0eV07CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgQXhpcyBPcmllbnRhdGlvbiBQcm9wZXJ0eQogICAgICoKICAgICAqIEBwYXJhbSBzdHJpbmcgJG9yaWVudGF0aW9uCiAgICAgKgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0QXhpc09yaWVudGF0aW9uKCRvcmllbnRhdGlvbikKICAgIHsKICAgICAgICAkdGhpcy0+b3JpZW50YXRpb24gPSAoc3RyaW5nKSAkb3JpZW50YXRpb247CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgRmlsbCBQcm9wZXJ0eQogICAgICoKICAgICAqIEBwYXJhbSBzdHJpbmcgJGNvbG9yCiAgICAgKiBAcGFyYW0gaW50ICRhbHBoYQogICAgICogQHBhcmFtIHN0cmluZyAkdHlwZQogICAgICoKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNldEZpbGxQYXJhbWV0ZXJzKCRjb2xvciwgJGFscGhhID0gMCwgJHR5cGUgPSBzZWxmOjpFWENFTF9DT0xPUl9UWVBFX0FSR0IpCiAgICB7CiAgICAgICAgJHRoaXMtPmZpbGxQcm9wZXJ0aWVzID0gJHRoaXMtPnNldENvbG9yUHJvcGVydGllcygkY29sb3IsICRhbHBoYSwgJHR5cGUpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IExpbmUgUHJvcGVydHkKICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRjb2xvcgogICAgICogQHBhcmFtIGludCAkYWxwaGEKICAgICAqIEBwYXJhbSBzdHJpbmcgJHR5cGUKICAgICAqCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRMaW5lUGFyYW1ldGVycygkY29sb3IsICRhbHBoYSA9IDAsICR0eXBlID0gc2VsZjo6RVhDRUxfQ09MT1JfVFlQRV9BUkdCKQogICAgewogICAgICAgICR0aGlzLT5saW5lUHJvcGVydGllcyA9ICR0aGlzLT5zZXRDb2xvclByb3BlcnRpZXMoJGNvbG9yLCAkYWxwaGEsICR0eXBlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBGaWxsIFByb3BlcnR5CiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkcHJvcGVydHkKICAgICAqCiAgICAgKiBAcmV0dXJuIHN0cmluZwogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0RmlsbFByb3BlcnR5KCRwcm9wZXJ0eSkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmZpbGxQcm9wZXJ0aWVzWyRwcm9wZXJ0eV07CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgTGluZSBQcm9wZXJ0eQogICAgICoKICAgICAqIEBwYXJhbSBzdHJpbmcgJHByb3BlcnR5CiAgICAgKgogICAgICogQHJldHVybiBzdHJpbmcKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldExpbmVQcm9wZXJ0eSgkcHJvcGVydHkpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5saW5lUHJvcGVydGllc1skcHJvcGVydHldOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IExpbmUgU3R5bGUgUHJvcGVydGllcwogICAgICoKICAgICAqIEBwYXJhbSBmbG9hdCAkbGluZV93aWR0aAogICAgICogQHBhcmFtIHN0cmluZyAkY29tcG91bmRfdHlwZQogICAgICogQHBhcmFtIHN0cmluZyAkZGFzaF90eXBlCiAgICAgKiBAcGFyYW0gc3RyaW5nICRjYXBfdHlwZQogICAgICogQHBhcmFtIHN0cmluZyAkam9pbl90eXBlCiAgICAgKiBAcGFyYW0gc3RyaW5nICRoZWFkX2Fycm93X3R5cGUKICAgICAqIEBwYXJhbSBzdHJpbmcgJGhlYWRfYXJyb3dfc2l6ZQogICAgICogQHBhcmFtIHN0cmluZyAkZW5kX2Fycm93X3R5cGUKICAgICAqIEBwYXJhbSBzdHJpbmcgJGVuZF9hcnJvd19zaXplCiAgICAgKgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0TGluZVN0eWxlUHJvcGVydGllcygkbGluZV93aWR0aCA9IG51bGwsICRjb21wb3VuZF90eXBlID0gbnVsbCwgJGRhc2hfdHlwZSA9IG51bGwsICRjYXBfdHlwZSA9IG51bGwsICRqb2luX3R5cGUgPSBudWxsLCAkaGVhZF9hcnJvd190eXBlID0gbnVsbCwgJGhlYWRfYXJyb3dfc2l6ZSA9IG51bGwsICRlbmRfYXJyb3dfdHlwZSA9IG51bGwsICRlbmRfYXJyb3dfc2l6ZSA9IG51bGwpCiAgICB7CiAgICAgICAgKCFpc19udWxsKCRsaW5lX3dpZHRoKSkgPyAkdGhpcy0+bGluZVN0eWxlUHJvcGVydGllc1snd2lkdGgnXSA9ICR0aGlzLT5nZXRFeGNlbFBvaW50c1dpZHRoKChmbG9hdCkgJGxpbmVfd2lkdGgpIDogbnVsbDsKICAgICAgICAoIWlzX251bGwoJGNvbXBvdW5kX3R5cGUpKSA\/ICR0aGlzLT5saW5lU3R5bGVQcm9wZXJ0aWVzWydjb21wb3VuZCddID0gKHN0cmluZykgJGNvbXBvdW5kX3R5cGUgOiBudWxsOwogICAgICAgICghaXNfbnVsbCgkZGFzaF90eXBlKSkgPyAkdGhpcy0+bGluZVN0eWxlUHJvcGVydGllc1snZGFzaCddID0gKHN0cmluZykgJGRhc2hfdHlwZSA6IG51bGw7CiAgICAgICAgKCFpc19udWxsKCRjYXBfdHlwZSkpID8gJHRoaXMtPmxpbmVTdHlsZVByb3BlcnRpZXNbJ2NhcCddID0gKHN0cmluZykgJGNhcF90eXBlIDogbnVsbDsKICAgICAgICAoIWlzX251bGwoJGpvaW5fdHlwZSkpID8gJHRoaXMtPmxpbmVTdHlsZVByb3BlcnRpZXNbJ2pvaW4nXSA9IChzdHJpbmcpICRqb2luX3R5cGUgOiBudWxsOwogICAgICAgICghaXNfbnVsbCgkaGVhZF9hcnJvd190eXBlKSkgPyAkdGhpcy0+bGluZVN0eWxlUHJvcGVydGllc1snYXJyb3cnXVsnaGVhZCddWyd0eXBlJ10gPSAoc3RyaW5nKSAkaGVhZF9hcnJvd190eXBlIDogbnVsbDsKICAgICAgICAoIWlzX251bGwoJGhlYWRfYXJyb3dfc2l6ZSkpID8gJHRoaXMtPmxpbmVTdHlsZVByb3BlcnRpZXNbJ2Fycm93J11bJ2hlYWQnXVsnc2l6ZSddID0gKHN0cmluZykgJGhlYWRfYXJyb3dfc2l6ZSA6IG51bGw7CiAgICAgICAgKCFpc19udWxsKCRlbmRfYXJyb3dfdHlwZSkpID8gJHRoaXMtPmxpbmVTdHlsZVByb3BlcnRpZXNbJ2Fycm93J11bJ2VuZCddWyd0eXBlJ10gPSAoc3RyaW5nKSAkZW5kX2Fycm93X3R5cGUgOiBudWxsOwogICAgICAgICghaXNfbnVsbCgkZW5kX2Fycm93X3NpemUpKSA\/ICR0aGlzLT5saW5lU3R5bGVQcm9wZXJ0aWVzWydhcnJvdyddWydlbmQnXVsnc2l6ZSddID0gKHN0cmluZykgJGVuZF9hcnJvd19zaXplIDogbnVsbDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBMaW5lIFN0eWxlIFByb3BlcnR5CiAgICAgKgogICAgICogQHBhcmFtIGFycmF5fHN0cmluZyAkZWxlbWVudHMKICAgICAqCiAgICAgKiBAcmV0dXJuIHN0cmluZwogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0TGluZVN0eWxlUHJvcGVydHkoJGVsZW1lbnRzKQogICAgewogICAgICAgIHJldHVybiAkdGhpcy0+Z2V0QXJyYXlFbGVtZW50c1ZhbHVlKCR0aGlzLT5saW5lU3R5bGVQcm9wZXJ0aWVzLCAkZWxlbWVudHMpOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IExpbmUgU3R5bGUgQXJyb3cgRXhjZWwgV2lkdGgKICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRhcnJvdwogICAgICoKICAgICAqIEByZXR1cm4gc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRMaW5lU3R5bGVBcnJvd1dpZHRoKCRhcnJvdykKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmdldExpbmVTdHlsZUFycm93U2l6ZSgkdGhpcy0+bGluZVN0eWxlUHJvcGVydGllc1snYXJyb3cnXVskYXJyb3ddWydzaXplJ10sICd3Jyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgTGluZSBTdHlsZSBBcnJvdyBFeGNlbCBMZW5ndGgKICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRhcnJvdwogICAgICoKICAgICAqIEByZXR1cm4gc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRMaW5lU3R5bGVBcnJvd0xlbmd0aCgkYXJyb3cpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5nZXRMaW5lU3R5bGVBcnJvd1NpemUoJHRoaXMtPmxpbmVTdHlsZVByb3BlcnRpZXNbJ2Fycm93J11bJGFycm93XVsnc2l6ZSddLCAnbGVuJyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgU2hhZG93IFByb3BlcnRpZXMKICAgICAqCiAgICAgKiBAcGFyYW0gaW50ICRzaGFkb3dfcHJlc2V0cwogICAgICogQHBhcmFtIHN0cmluZyAkc2hfY29sb3JfdmFsdWUKICAgICAqIEBwYXJhbSBzdHJpbmcgJHNoX2NvbG9yX3R5cGUKICAgICAqIEBwYXJhbSBzdHJpbmcgJHNoX2NvbG9yX2FscGhhCiAgICAgKiBAcGFyYW0gZmxvYXQgJHNoX2JsdXIKICAgICAqIEBwYXJhbSBpbnQgJHNoX2FuZ2xlCiAgICAgKiBAcGFyYW0gZmxvYXQgJHNoX2Rpc3RhbmNlCiAgICAgKgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0U2hhZG93UHJvcGVydGllcygkc2hfcHJlc2V0cywgJHNoX2NvbG9yX3ZhbHVlID0gbnVsbCwgJHNoX2NvbG9yX3R5cGUgPSBudWxsLCAkc2hfY29sb3JfYWxwaGEgPSBudWxsLCAkc2hfYmx1ciA9IG51bGwsICRzaF9hbmdsZSA9IG51bGwsICRzaF9kaXN0YW5jZSA9IG51bGwpCiAgICB7CiAgICAgICAgJHRoaXMtPnNldFNoYWRvd1ByZXNldHNQcm9wZXJ0aWVzKChpbnQpICRzaF9wcmVzZXRzKQogICAgICAgICAgICAtPnNldFNoYWRvd0NvbG9yKAogICAgICAgICAgICAgICAgaXNfbnVsbCgkc2hfY29sb3JfdmFsdWUpID8gJHRoaXMtPnNoYWRvd1Byb3BlcnRpZXNbJ2NvbG9yJ11bJ3ZhbHVlJ10gOiAkc2hfY29sb3JfdmFsdWUsCiAgICAgICAgICAgICAgICBpc19udWxsKCRzaF9jb2xvcl9hbHBoYSkgPyAoaW50KSAkdGhpcy0+c2hhZG93UHJvcGVydGllc1snY29sb3InXVsnYWxwaGEnXSA6ICRzaF9jb2xvcl9hbHBoYSwKICAgICAgICAgICAgICAgIGlzX251bGwoJHNoX2NvbG9yX3R5cGUpID8gJHRoaXMtPnNoYWRvd1Byb3BlcnRpZXNbJ2NvbG9yJ11bJ3R5cGUnXSA6ICRzaF9jb2xvcl90eXBlCiAgICAgICAgICAgICkKICAgICAgICAgICAgLT5zZXRTaGFkb3dCbHVyKCRzaF9ibHVyKQogICAgICAgICAgICAtPnNldFNoYWRvd0FuZ2xlKCRzaF9hbmdsZSkKICAgICAgICAgICAgLT5zZXRTaGFkb3dEaXN0YW5jZSgkc2hfZGlzdGFuY2UpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IFNoYWRvdyBDb2xvcgogICAgICoKICAgICAqIEBwYXJhbSBpbnQgJHNoYWRvd19wcmVzZXRzCiAgICAgKgogICAgICogQHJldHVybiBQSFBFeGNlbF9DaGFydF9BeGlzCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gc2V0U2hhZG93UHJlc2V0c1Byb3BlcnRpZXMoJHNoYWRvd19wcmVzZXRzKQogICAgewogICAgICAgICR0aGlzLT5zaGFkb3dQcm9wZXJ0aWVzWydwcmVzZXRzJ10gPSAkc2hhZG93X3ByZXNldHM7CiAgICAgICAgJHRoaXMtPnNldFNoYWRvd1Byb3Blcmllc01hcFZhbHVlcygkdGhpcy0+Z2V0U2hhZG93UHJlc2V0c01hcCgkc2hhZG93X3ByZXNldHMpKTsKCiAgICAgICAgcmV0dXJuICR0aGlzOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IFNoYWRvdyBQcm9wZXJ0aWVzIGZyb20gTWFwZWQgVmFsdWVzCiAgICAgKgogICAgICogQHBhcmFtIGFycmF5ICRwcm9wZXJ0aWVzX21hcAogICAgICogQHBhcmFtICogJHJlZmVyZW5jZQogICAgICoKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfQ2hhcnRfQXhpcwogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHNldFNoYWRvd1Byb3Blcmllc01hcFZhbHVlcyhhcnJheSAkcHJvcGVydGllc19tYXAsICYkcmVmZXJlbmNlID0gbnVsbCkKICAgIHsKICAgICAgICAkYmFzZV9yZWZlcmVuY2UgPSAkcmVmZXJlbmNlOwogICAgICAgIGZvcmVhY2ggKCRwcm9wZXJ0aWVzX21hcCBhcyAkcHJvcGVydHlfa2V5ID0+ICRwcm9wZXJ0eV92YWwpIHsKICAgICAgICAgICAgaWYgKGlzX2FycmF5KCRwcm9wZXJ0eV92YWwpKSB7CiAgICAgICAgICAgICAgICBpZiAoJHJlZmVyZW5jZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICRyZWZlcmVuY2UgPSAmICR0aGlzLT5zaGFkb3dQcm9wZXJ0aWVzWyRwcm9wZXJ0eV9rZXldOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkcmVmZXJlbmNlID0gJiAkcmVmZXJlbmNlWyRwcm9wZXJ0eV9rZXldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJHRoaXMtPnNldFNoYWRvd1Byb3Blcmllc01hcFZhbHVlcygkcHJvcGVydHlfdmFsLCAkcmVmZXJlbmNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICgkYmFzZV9yZWZlcmVuY2UgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+c2hhZG93UHJvcGVydGllc1skcHJvcGVydHlfa2V5XSA9ICRwcm9wZXJ0eV92YWw7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRyZWZlcmVuY2VbJHByb3BlcnR5X2tleV0gPSAkcHJvcGVydHlfdmFsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgU2hhZG93IENvbG9yCiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkY29sb3IKICAgICAqIEBwYXJhbSBpbnQgJGFscGhhCiAgICAgKiBAcGFyYW0gc3RyaW5nICR0eXBlCiAgICAgKgogICAgICogQHJldHVybiBQSFBFeGNlbF9DaGFydF9BeGlzCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gc2V0U2hhZG93Q29sb3IoJGNvbG9yLCAkYWxwaGEsICR0eXBlKQogICAgewogICAgICAgICR0aGlzLT5zaGFkb3dQcm9wZXJ0aWVzWydjb2xvciddID0gJHRoaXMtPnNldENvbG9yUHJvcGVydGllcygkY29sb3IsICRhbHBoYSwgJHR5cGUpOwoKICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgU2hhZG93IEJsdXIKICAgICAqCiAgICAgKiBAcGFyYW0gZmxvYXQgJGJsdXIKICAgICAqCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX0NoYXJ0X0F4aXMKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiBzZXRTaGFkb3dCbHVyKCRibHVyKQogICAgewogICAgICAgIGlmICgkYmx1ciAhPT0gbnVsbCkgewogICAgICAgICAgICAkdGhpcy0+c2hhZG93UHJvcGVydGllc1snYmx1ciddID0gKHN0cmluZykgJHRoaXMtPmdldEV4Y2VsUG9pbnRzV2lkdGgoJGJsdXIpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICR0aGlzOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IFNoYWRvdyBBbmdsZQogICAgICoKICAgICAqIEBwYXJhbSBpbnQgJGFuZ2xlCiAgICAgKgogICAgICogQHJldHVybiBQSFBFeGNlbF9DaGFydF9BeGlzCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gc2V0U2hhZG93QW5nbGUoJGFuZ2xlKQogICAgewogICAgICAgIGlmICgkYW5nbGUgIT09IG51bGwpIHsKICAgICAgICAgICAgJHRoaXMtPnNoYWRvd1Byb3BlcnRpZXNbJ2RpcmVjdGlvbiddID0gKHN0cmluZykgJHRoaXMtPmdldEV4Y2VsUG9pbnRzQW5nbGUoJGFuZ2xlKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBTaGFkb3cgRGlzdGFuY2UKICAgICAqCiAgICAgKiBAcGFyYW0gZmxvYXQgJGRpc3RhbmNlCiAgICAgKgogICAgICogQHJldHVybiBQSFBFeGNlbF9DaGFydF9BeGlzCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gc2V0U2hhZG93RGlzdGFuY2UoJGRpc3RhbmNlKQogICAgewogICAgICAgIGlmICgkZGlzdGFuY2UgIT09IG51bGwpIHsKICAgICAgICAgICAgJHRoaXMtPnNoYWRvd1Byb3BlcnRpZXNbJ2Rpc3RhbmNlJ10gPSAoc3RyaW5nKSAkdGhpcy0+Z2V0RXhjZWxQb2ludHNXaWR0aCgkZGlzdGFuY2UpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICR0aGlzOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IEdsb3cgUHJvcGVydHkKICAgICAqCiAgICAgKiBAcGFyYW0gZmxvYXQgJHNpemUKICAgICAqIEBwYXJhbSBzdHJpbmcgJGNvbG9yX3ZhbHVlCiAgICAgKiBAcGFyYW0gaW50ICRjb2xvcl9hbHBoYQogICAgICogQHBhcmFtIHN0cmluZyAkY29sb3JfdHlwZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0U2hhZG93UHJvcGVydHkoJGVsZW1lbnRzKQogICAgewogICAgICAgIHJldHVybiAkdGhpcy0+Z2V0QXJyYXlFbGVtZW50c1ZhbHVlKCR0aGlzLT5zaGFkb3dQcm9wZXJ0aWVzLCAkZWxlbWVudHMpOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IEdsb3cgUHJvcGVydGllcwogICAgICoKICAgICAqIEBwYXJhbSBmbG9hdCAkc2l6ZQogICAgICogQHBhcmFtIHN0cmluZyAkY29sb3JfdmFsdWUKICAgICAqIEBwYXJhbSBpbnQgJGNvbG9yX2FscGhhCiAgICAgKiBAcGFyYW0gc3RyaW5nICRjb2xvcl90eXBlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRHbG93UHJvcGVydGllcygkc2l6ZSwgJGNvbG9yX3ZhbHVlID0gbnVsbCwgJGNvbG9yX2FscGhhID0gbnVsbCwgJGNvbG9yX3R5cGUgPSBudWxsKQogICAgewogICAgICAgICR0aGlzLT5zZXRHbG93U2l6ZSgkc2l6ZSkKICAgICAgICAgICAgLT5zZXRHbG93Q29sb3IoCiAgICAgICAgICAgICAgICBpc19udWxsKCRjb2xvcl92YWx1ZSkgPyAkdGhpcy0+Z2xvd1Byb3BlcnRpZXNbJ2NvbG9yJ11bJ3ZhbHVlJ10gOiAkY29sb3JfdmFsdWUsCiAgICAgICAgICAgICAgICBpc19udWxsKCRjb2xvcl9hbHBoYSkgPyAoaW50KSAkdGhpcy0+Z2xvd1Byb3BlcnRpZXNbJ2NvbG9yJ11bJ2FscGhhJ10gOiAkY29sb3JfYWxwaGEsCiAgICAgICAgICAgICAgICBpc19udWxsKCRjb2xvcl90eXBlKSA\/ICR0aGlzLT5nbG93UHJvcGVydGllc1snY29sb3InXVsndHlwZSddIDogJGNvbG9yX3R5cGUKICAgICAgICAgICAgKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBHbG93IFByb3BlcnR5CiAgICAgKgogICAgICogQHBhcmFtIGFycmF5fHN0cmluZyAkcHJvcGVydHkKICAgICAqCiAgICAgKiBAcmV0dXJuIHN0cmluZwogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0R2xvd1Byb3BlcnR5KCRwcm9wZXJ0eSkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmdldEFycmF5RWxlbWVudHNWYWx1ZSgkdGhpcy0+Z2xvd1Byb3BlcnRpZXMsICRwcm9wZXJ0eSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgR2xvdyBDb2xvcgogICAgICoKICAgICAqIEBwYXJhbSBmbG9hdCAkc2l6ZQogICAgICoKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfQ2hhcnRfQXhpcwogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHNldEdsb3dTaXplKCRzaXplKQogICAgewogICAgICAgIGlmICghaXNfbnVsbCgkc2l6ZSkpIHsKICAgICAgICAgICAgJHRoaXMtPmdsb3dQcm9wZXJ0aWVzWydzaXplJ10gPSAkdGhpcy0+Z2V0RXhjZWxQb2ludHNXaWR0aCgkc2l6ZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgR2xvdyBDb2xvcgogICAgICoKICAgICAqIEBwYXJhbSBzdHJpbmcgJGNvbG9yCiAgICAgKiBAcGFyYW0gaW50ICRhbHBoYQogICAgICogQHBhcmFtIHN0cmluZyAkdHlwZQogICAgICoKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfQ2hhcnRfQXhpcwogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHNldEdsb3dDb2xvcigkY29sb3IsICRhbHBoYSwgJHR5cGUpCiAgICB7CiAgICAgICAgJHRoaXMtPmdsb3dQcm9wZXJ0aWVzWydjb2xvciddID0gJHRoaXMtPnNldENvbG9yUHJvcGVydGllcygkY29sb3IsICRhbHBoYSwgJHR5cGUpOwoKICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgU29mdCBFZGdlcyBTaXplCiAgICAgKgogICAgICogQHBhcmFtIGZsb2F0ICRzaXplCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRTb2Z0RWRnZXMoJHNpemUpCiAgICB7CiAgICAgICAgaWYgKCFpc19udWxsKCRzaXplKSkgewogICAgICAgICAgICAkc29mdEVkZ2VzWydzaXplJ10gPSAoc3RyaW5nKSAkdGhpcy0+Z2V0RXhjZWxQb2ludHNXaWR0aCgkc2l6ZSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogR2V0IFNvZnQgRWRnZXMgU2l6ZQogICAgICoKICAgICAqIEByZXR1cm4gc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRTb2Z0RWRnZXNTaXplKCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPnNvZnRFZGdlc1snc2l6ZSddOwogICAgfQp9Cg==",
    "size": "15640"
}