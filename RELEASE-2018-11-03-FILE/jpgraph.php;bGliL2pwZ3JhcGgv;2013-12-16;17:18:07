{
    "namaFile": "lib\/jpgraph\/jpgraph.php",
    "lastUpdate": "2013-12-16+17:18:07.00",
    "contentFile": "PD9waHAKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLyBGaWxlOiAgICAgICAgSlBHUkFQSC5QSFAKLy8gRGVzY3JpcHRpb246IFBIUCBHcmFwaCBQbG90dGluZyBsaWJyYXJ5LiBCYXNlIG1vZHVsZS4KLy8gQ3JlYXRlZDogICAgIDIwMDEtMDEtMDgKLy8gVmVyOiAgICAgICAgICRJZDoganBncmFwaC5waHAgMTkyNCAyMDEwLTAxLTExIDE0OjAzOjI2WiBsanAgJAovLwovLyBDb3B5cmlnaHQgKGMpIEFzaWFsIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKcmVxdWlyZV9vbmNlKCdqcGctY29uZmlnLmluYy5waHAnKTsKcmVxdWlyZV9vbmNlKCdqcGdyYXBoX2dyYWRpZW50LnBocCcpOwpyZXF1aXJlX29uY2UoJ2pwZ3JhcGhfZXJyaGFuZGxlci5pbmMucGhwJyk7CnJlcXVpcmVfb25jZSgnanBncmFwaF90dGYuaW5jLnBocCcpOwpyZXF1aXJlX29uY2UoJ2pwZ3JhcGhfcmdiLmluYy5waHAnKTsKcmVxdWlyZV9vbmNlKCdqcGdyYXBoX3RleHQuaW5jLnBocCcpOwpyZXF1aXJlX29uY2UoJ2pwZ3JhcGhfbGVnZW5kLmluYy5waHAnKTsKcmVxdWlyZV9vbmNlKCdqcGdyYXBoX3RoZW1lLmluYy5waHAnKTsKcmVxdWlyZV9vbmNlKCdnZF9pbWFnZS5pbmMucGhwJyk7CgovLyBWZXJzaW9uIGluZm8KZGVmaW5lKCdKUEdfVkVSU0lPTicsJzMuNS4wYjEnKTsKCi8vIE1pbmltdW0gcmVxdWlyZWQgUEhQIHZlcnNpb24KZGVmaW5lKCdNSU5fUEhQVkVSU0lPTicsJzUuMS4wJyk7CgovLyBTcGVjaWFsIGZpbGUgbmFtZSB0byBpbmRpY2F0ZSB0aGF0IHdlIG9ubHkgd2FudCB0byBjYWxjCi8vIHRoZSBpbWFnZSBtYXAgaW4gdGhlIGNhbGwgdG8gR3JhcGg6OlN0cm9rZSgpIHVzZWQKLy8gaW50ZXJuYWxseSBmcm9tIHRoZSBHZXRIVE1MQ1NJTSgpIG1ldGhvZC4KZGVmaW5lKCdfQ1NJTV9TUEVDSUFMRklMRScsJ19jc2ltX3NwZWNpYWxfJyk7CgovLyBIVFRQIEdFVCBhcmd1bWVudCB0aGF0IGlzIHVzZWQgd2l0aCBpbWFnZSBtYXAKLy8gdG8gaW5kaWNhdGUgdG8gdGhlIHNjcmlwdCB0byBqdXN0IGdlbmVyYXRlIHRoZSBpbWFnZQovLyBhbmQgbm90IHRoZSBmdWxsIENTSU0gSFRNTCBwYWdlLgpkZWZpbmUoJ19DU0lNX0RJU1BMQVknLCdfanBnX2NzaW1kJyk7CgovLyBTcGVjaWFsIGZpbGVuYW1lIGZvciBHcmFwaDo6U3Ryb2tlKCkuIElmIHRoaXMgZmlsZW5hbWUgaXMgZ2l2ZW4KLy8gdGhlbiB0aGUgaW1hZ2Ugd2lsbCBOT1QgYmUgc3RyZWFtZWQgdG8gYnJvd3NlciBvZiBmaWxlLiBJbnN0ZWFkIHRoZQovLyBTdHJva2UgY2FsbCB3aWxsIHJldHVybiB0aGUgaGFuZGxlciBmb3IgdGhlIGNyZWF0ZWQgR0QgaW1hZ2UuCmRlZmluZSgnX0lNR19IQU5ETEVSJywnX19oYW5kbGUnKTsKCi8vIFNwZWNpYWwgZmlsZW5hbWUgZm9yIEdyYXBoOjpTdHJva2UoKS4gSWYgdGhpcyBmaWxlbmFtZSBpcyBnaXZlbgovLyB0aGUgaW1hZ2Ugd2lsbCBiZSBzdHJva2VkIHRvIGEgZmlsZSB3aXRoIGEgbmFtZSBiYXNlZCBvbiB0aGUgc2NyaXB0IG5hbWUuCmRlZmluZSgnX0lNR19BVVRPJywnYXV0bycpOwoKLy8gVGljayBkZW5zaXR5CmRlZmluZSgiVElDS0RfREVOU0UiLDEpOwpkZWZpbmUoIlRJQ0tEX05PUk1BTCIsMik7CmRlZmluZSgiVElDS0RfU1BBUlNFIiwzKTsKZGVmaW5lKCJUSUNLRF9WRVJZU1BBUlNFIiw0KTsKCi8vIFNpZGUgZm9yIHRpY2tzIGFuZCBsYWJlbHMuCmRlZmluZSgiU0lERV9MRUZUIiwtMSk7CmRlZmluZSgiU0lERV9SSUdIVCIsMSk7CmRlZmluZSgiU0lERV9ET1dOIiwtMSk7CmRlZmluZSgiU0lERV9CT1RUT00iLC0xKTsKZGVmaW5lKCJTSURFX1VQIiwxKTsKZGVmaW5lKCJTSURFX1RPUCIsMSk7CgovLyBMZWdlbmQgdHlwZSBzdGFja2VkIHZlcnRpY2FsIG9yIGhvcml6b250YWwKZGVmaW5lKCJMRUdFTkRfVkVSVCIsMCk7CmRlZmluZSgiTEVHRU5EX0hPUiIsMSk7CgovLyBNYXJrIHR5cGVzIGZvciBwbG90IG1hcmtzCmRlZmluZSgiTUFSS19TUVVBUkUiLDEpOwpkZWZpbmUoIk1BUktfVVRSSUFOR0xFIiwyKTsKZGVmaW5lKCJNQVJLX0RUUklBTkdMRSIsMyk7CmRlZmluZSgiTUFSS19ESUFNT05EIiw0KTsKZGVmaW5lKCJNQVJLX0NJUkNMRSIsNSk7CmRlZmluZSgiTUFSS19GSUxMRURDSVJDTEUiLDYpOwpkZWZpbmUoIk1BUktfQ1JPU1MiLDcpOwpkZWZpbmUoIk1BUktfU1RBUiIsOCk7CmRlZmluZSgiTUFSS19YIiw5KTsKZGVmaW5lKCJNQVJLX0xFRlRUUklBTkdMRSIsMTApOwpkZWZpbmUoIk1BUktfUklHSFRUUklBTkdMRSIsMTEpOwpkZWZpbmUoIk1BUktfRkxBU0giLDEyKTsKZGVmaW5lKCJNQVJLX0lNRyIsMTMpOwpkZWZpbmUoIk1BUktfRkxBRzEiLDE0KTsKZGVmaW5lKCJNQVJLX0ZMQUcyIiwxNSk7CmRlZmluZSgiTUFSS19GTEFHMyIsMTYpOwpkZWZpbmUoIk1BUktfRkxBRzQiLDE3KTsKCi8vIEJ1aWx0aW4gaW1hZ2VzCmRlZmluZSgiTUFSS19JTUdfUFVTSFBJTiIsNTApOwpkZWZpbmUoIk1BUktfSU1HX1NQVVNIUElOIiw1MCk7CmRlZmluZSgiTUFSS19JTUdfTFBVU0hQSU4iLDUxKTsKZGVmaW5lKCJNQVJLX0lNR19ESUFNT05EIiw1Mik7CmRlZmluZSgiTUFSS19JTUdfU1FVQVJFIiw1Myk7CmRlZmluZSgiTUFSS19JTUdfU1RBUiIsNTQpOwpkZWZpbmUoIk1BUktfSU1HX0JBTEwiLDU1KTsKZGVmaW5lKCJNQVJLX0lNR19TQkFMTCIsNTUpOwpkZWZpbmUoIk1BUktfSU1HX01CQUxMIiw1Nik7CmRlZmluZSgiTUFSS19JTUdfTEJBTEwiLDU3KTsKZGVmaW5lKCJNQVJLX0lNR19CRVZFTCIsNTgpOwoKLy8gSW5saW5lIGRlZmluZXMKZGVmaW5lKCJJTkxJTkVfWUVTIiwxKTsKZGVmaW5lKCJJTkxJTkVfTk8iLDApOwoKLy8gRm9ybWF0IGZvciBiYWNrZ3JvdW5kIGltYWdlcwpkZWZpbmUoIkJHSU1HX0ZJTExQTE9UIiwxKTsKZGVmaW5lKCJCR0lNR19GSUxMRlJBTUUiLDIpOwpkZWZpbmUoIkJHSU1HX0NPUFkiLDMpOwpkZWZpbmUoIkJHSU1HX0NFTlRFUiIsNCk7CmRlZmluZSgiQkdJTUdfRlJFRSIsNSk7CgovLyBEZXB0aCBvZiBvYmplY3RzCmRlZmluZSgiREVQVEhfQkFDSyIsMCk7CmRlZmluZSgiREVQVEhfRlJPTlQiLDEpOwoKLy8gRGlyZWN0aW9uCmRlZmluZSgiVkVSVElDQUwiLDEpOwpkZWZpbmUoIkhPUklaT05UQUwiLDApOwoKLy8gQXhpcyBzdHlsZXMgZm9yIHNjaWVudGlmaWMgc3R5bGUgYXhpcwpkZWZpbmUoJ0FYU1RZTEVfU0lNUExFJywxKTsKZGVmaW5lKCdBWFNUWUxFX0JPWElOJywyKTsKZGVmaW5lKCdBWFNUWUxFX0JPWE9VVCcsMyk7CmRlZmluZSgnQVhTVFlMRV9ZQk9YSU4nLDQpOwpkZWZpbmUoJ0FYU1RZTEVfWUJPWE9VVCcsNSk7CgovLyBTdHlsZSBmb3IgdGl0bGUgYmFja2dyb3VuZHMKZGVmaW5lKCdUSVRMRUJLR19TVFlMRTEnLDEpOwpkZWZpbmUoJ1RJVExFQktHX1NUWUxFMicsMik7CmRlZmluZSgnVElUTEVCS0dfU1RZTEUzJywzKTsKZGVmaW5lKCdUSVRMRUJLR19GUkFNRV9OT05FJywwKTsKZGVmaW5lKCdUSVRMRUJLR19GUkFNRV9GVUxMJywxKTsKZGVmaW5lKCdUSVRMRUJLR19GUkFNRV9CT1RUT00nLDIpOwpkZWZpbmUoJ1RJVExFQktHX0ZSQU1FX0JFVkVMJywzKTsKZGVmaW5lKCdUSVRMRUJLR19GSUxMU1RZTEVfSFNUUklQRUQnLDEpOwpkZWZpbmUoJ1RJVExFQktHX0ZJTExTVFlMRV9WU1RSSVBFRCcsMik7CmRlZmluZSgnVElUTEVCS0dfRklMTFNUWUxFX1NPTElEJywzKTsKCi8vIFN0eWxlcyBmb3IgYXhpcyBsYWJlbHMgYmFja2dyb3VuZApkZWZpbmUoJ0xBQkVMQktHX05PTkUnLDApOwpkZWZpbmUoJ0xBQkVMQktHX1hBWElTJywxKTsKZGVmaW5lKCdMQUJFTEJLR19ZQVhJUycsMik7CmRlZmluZSgnTEFCRUxCS0dfWEFYSVNGVUxMJywzKTsKZGVmaW5lKCdMQUJFTEJLR19ZQVhJU0ZVTEwnLDQpOwpkZWZpbmUoJ0xBQkVMQktHX1hZRlVMTCcsNSk7CmRlZmluZSgnTEFCRUxCS0dfWFknLDYpOwoKCi8vIFN0eWxlIGZvciBiYWNrZ3JvdW5kIGdyYWRpZW50IGZpbGxzCmRlZmluZSgnQkdSQURfRlJBTUUnLDEpOwpkZWZpbmUoJ0JHUkFEX01BUkdJTicsMik7CmRlZmluZSgnQkdSQURfUExPVCcsMyk7CgovLyBXaWR0aCBvZiB0YWIgdGl0bGVzCmRlZmluZSgnVEFCVElUTEVfV0lEVEhGSVQnLDApOwpkZWZpbmUoJ1RBQlRJVExFX1dJRFRIRlVMTCcsLTEpOwoKLy8gRGVmaW5lcyBmb3IgM0Qgc2tldyBkaXJlY3Rpb25zCmRlZmluZSgnU0tFVzNEX1VQJywwKTsKZGVmaW5lKCdTS0VXM0RfRE9XTicsMSk7CmRlZmluZSgnU0tFVzNEX0xFRlQnLDIpOwpkZWZpbmUoJ1NLRVczRF9SSUdIVCcsMyk7CgovLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkKZGVmaW5lKCJfSlBHX0RFQlVHIixmYWxzZSk7CmRlZmluZSgiX0ZPUkNFX0lNR1RPRklMRSIsZmFsc2UpOwpkZWZpbmUoIl9GT1JDRV9JTUdESVIiLCcvdG1wL2pwZ2ltZy8nKTsKCgovLwovLyBBdXRvbWF0aWMgc2V0dGluZ3Mgb2YgcGF0aCBmb3IgY2FjaGUgYW5kIGZvbnQgZGlyZWN0b3J5Ci8vIGlmIHRoZXkgaGF2ZSBub3QgYmVlbiBwcmV2aW91c2x5IHNwZWNpZmllZAovLwppZihVU0VfQ0FDSEUpIHsKICAgIGlmICghZGVmaW5lZCgnQ0FDSEVfRElSJykpIHsKICAgICAgICBpZiAoIHN0cnN0ciggUEhQX09TLCAnV0lOJykgKSB7CiAgICAgICAgICAgIGlmKCBlbXB0eSgkX1NFUlZFUlsnVEVNUCddKSApIHsKICAgICAgICAgICAgICAgICR0ID0gbmV3IEVyck1zZ1RleHQoKTsKICAgICAgICAgICAgICAgICRtc2cgPSAkdC0+R2V0KDExLCRmaWxlLCRsaW5lbm8pOwogICAgICAgICAgICAgICAgZGllKCRtc2cpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgZGVmaW5lKCdDQUNIRV9ESVInLCAkX1NFUlZFUlsnVEVNUCddIC4gJy8nKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRlZmluZSgnQ0FDSEVfRElSJywnL3RtcC9qcGdyYXBoX2NhY2hlLycpOwogICAgICAgIH0KICAgIH0KfQplbHNlaWYoICFkZWZpbmVkKCdDQUNIRV9ESVInKSApIHsKICAgIGRlZmluZSgnQ0FDSEVfRElSJywgJycpOwp9CgovLwovLyBTZXR1cCBwYXRoIGZvciB3ZXN0ZXJuL2xhdGluIFRURiBmb250cwovLwppZiAoIWRlZmluZWQoJ1RURl9ESVInKSkgewogICAgaWYgKHN0cnN0ciggUEhQX09TLCAnV0lOJykgKSB7CiAgICAgICAgJHNyb290ID0gZ2V0ZW52KCdTeXN0ZW1Sb290Jyk7CiAgICAgICAgaWYoIGVtcHR5KCRzcm9vdCkgKSB7CiAgICAgICAgICAgICR0ID0gbmV3IEVyck1zZ1RleHQoKTsKICAgICAgICAgICAgJG1zZyA9ICR0LT5HZXQoMTIsJGZpbGUsJGxpbmVubyk7CiAgICAgICAgICAgIGRpZSgkbXNnKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGRlZmluZSgnVFRGX0RJUicsICRzcm9vdC4nL2ZvbnRzLycpOwogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgZGVmaW5lKCdUVEZfRElSJywnL3Vzci9zaGFyZS9mb250cy90cnVldHlwZS8nKTsKICAgIH0KfQoKLy8KLy8gU2V0dXAgcGF0aCBmb3IgTXVsdGlCeXRlIFRURiBmb250cyAoamFwYW5lc2UsIGNoaW5lc2UgZXRjLikKLy8KaWYgKCFkZWZpbmVkKCdNQlRURl9ESVInKSkgewogICAgaWYgKHN0cnN0ciggUEhQX09TLCAnV0lOJykgKSB7CiAgICAgICAgJHNyb290ID0gZ2V0ZW52KCdTeXN0ZW1Sb290Jyk7CiAgICAgICAgaWYoIGVtcHR5KCRzcm9vdCkgKSB7CiAgICAgICAgICAgICR0ID0gbmV3IEVyck1zZ1RleHQoKTsKICAgICAgICAgICAgJG1zZyA9ICR0LT5HZXQoMTIsJGZpbGUsJGxpbmVubyk7CiAgICAgICAgICAgIGRpZSgkbXNnKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGRlZmluZSgnTUJUVEZfRElSJywgJHNyb290LicvZm9udHMvJyk7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBkZWZpbmUoJ01CVFRGX0RJUicsJy91c3Ivc2hhcmUvZm9udHMvdHJ1ZXR5cGUvJyk7CiAgICB9Cn0KCi8vCi8vIENoZWNrIG1pbmltdW0gUEhQIHZlcnNpb24KLy8KZnVuY3Rpb24gQ2hlY2tQSFBWZXJzaW9uKCRhTWluVmVyc2lvbikgewogICAgbGlzdCgkbWFqb3JDLCAkbWlub3JDLCAkZWRpdEMpID0gcHJlZ19zcGxpdCgnL1tcLy4tXS8nLCBQSFBfVkVSU0lPTik7CiAgICBsaXN0KCRtYWpvclIsICRtaW5vclIsICRlZGl0UikgPSBwcmVnX3NwbGl0KCcvW1wvLi1dLycsICRhTWluVmVyc2lvbik7CgogICAgaWYgKCRtYWpvckMgIT0gJG1ham9yUikgcmV0dXJuIGZhbHNlOwogICAgaWYgKCRtYWpvckMgPCAkbWFqb3JSKSByZXR1cm4gZmFsc2U7CiAgICAvLyBzYW1lIG1ham9yIC0gY2hlY2sgbWlub3IKICAgIGlmICgkbWlub3JDID4gJG1pbm9yUikgcmV0dXJuIHRydWU7CiAgICBpZiAoJG1pbm9yQyA8ICRtaW5vclIpIHJldHVybiBmYWxzZTsKICAgIC8vIGFuZCBzYW1lIG1pbm9yCiAgICBpZiAoJGVkaXRDICA+PSAkZWRpdFIpICByZXR1cm4gdHJ1ZTsKICAgIHJldHVybiB0cnVlOwp9CgovLwovLyBNYWtlIHN1cmUgUEhQIHZlcnNpb24gaXMgaGlnaCBlbm91Z2gKLy8KaWYoICFDaGVja1BIUFZlcnNpb24oTUlOX1BIUFZFUlNJT04pICkgewogICAgSnBHcmFwaEVycm9yOjpSYWlzZUwoMTMsUEhQX1ZFUlNJT04sTUlOX1BIUFZFUlNJT04pOwogICAgZGllKCk7Cn0KCi8vCi8vIE1ha2UgR0Qgc2FuaXR5IGNoZWNrCi8vCmlmKCAhZnVuY3Rpb25fZXhpc3RzKCJpbWFnZXR5cGVzIikgfHwgIWZ1bmN0aW9uX2V4aXN0cygnaW1hZ2VjcmVhdGVmcm9tc3RyaW5nJykgKSB7CiAgICBKcEdyYXBoRXJyb3I6OlJhaXNlTCgyNTAwMSk7CiAgICAvLygiVGhpcyBQSFAgaW5zdGFsbGF0aW9uIGlzIG5vdCBjb25maWd1cmVkIHdpdGggdGhlIEdEIGxpYnJhcnkuIFBsZWFzZSByZWNvbXBpbGUgUEhQIHdpdGggR0Qgc3VwcG9ydCB0byBydW4gSnBHcmFwaC4gKE5laXRoZXIgZnVuY3Rpb24gaW1hZ2V0eXBlcygpIG5vciBpbWFnZWNyZWF0ZWZyb21zdHJpbmcoKSBkb2VzIGV4aXN0KSIpOwp9CgovLwovLyBTZXR1cCBQSFAgZXJyb3IgaGFuZGxlcgovLwpmdW5jdGlvbiBfcGhwRXJyb3JIYW5kbGVyKCRlcnJubywkZXJybXNnLCRmaWxlbmFtZSwgJGxpbmVudW0sICR2YXJzKSB7CiAgICAvLyBSZXNwZWN0IGN1cnJlbnQgZXJyb3IgbGV2ZWwKICAgIGlmKCAkZXJybm8gJiBlcnJvcl9yZXBvcnRpbmcoKSApIHsKICAgICAgICBKcEdyYXBoRXJyb3I6OlJhaXNlTCgyNTAwMyxiYXNlbmFtZSgkZmlsZW5hbWUpLCRsaW5lbnVtLCRlcnJtc2cpOwogICAgfQp9CgppZiggSU5TVEFMTF9QSFBfRVJSX0hBTkRMRVIgKSB7CiAgICBzZXRfZXJyb3JfaGFuZGxlcigiX3BocEVycm9ySGFuZGxlciIpOwp9CgovLwovLyBDaGVjayBpZiB0aGVyZSB3ZXJlIGFueSB3YXJuaW5ncywgcGVyaGFwcyBzb21lIHdyb25nIGluY2x1ZGVzIGJ5IHRoZSB1c2VyLiBJbiB0aGlzCi8vIGNhc2Ugd2UgcmFpc2UgaXQgaW1tZWRpYXRlbHkgc2luY2Ugb3RoZXJ3aXNlIHRoZSBpbWFnZSB3aWxsIG5vdCBzaG93IGFuZCBtYWtlcwovLyBkZWJ1Z2dpbmcgZGlmZmljdWx0LiBUaGlzIGlzIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIgc2V0dGluZyBDQVRDSF9QSFBFUlJNU0cKLy8KaWYoIGlzc2V0KCRHTE9CQUxTWydwaHBfZXJyb3Jtc2cnXSkgJiYgQ0FUQ0hfUEhQRVJSTVNHICYmICFwcmVnX21hdGNoKCcvfERlcHJlY2F0ZWR8L2knLCAkR0xPQkFMU1sncGhwX2Vycm9ybXNnJ10pICkgewogICAgSnBHcmFwaEVycm9yOjpSYWlzZUwoMjUwMDQsJEdMT0JBTFNbJ3BocF9lcnJvcm1zZyddKTsKfQoKLy8gVXNlZnVsIG1hdGhlbWF0aWNhbCBmdW5jdGlvbgpmdW5jdGlvbiBzaWduKCRhKSB7cmV0dXJuICRhID49IDAgPyAxIDogLTE7fQoKLy8KLy8gVXRpbGl0eSBmdW5jdGlvbiB0byBnZW5lcmF0ZSBhbiBpbWFnZSBuYW1lIGJhc2VkIG9uIHRoZSBmaWxlbmFtZSB3ZQovLyBhcmUgcnVubmluZyBmcm9tIGFuZCBhc3N1bWluZyB3ZSB1c2UgYXV0byBkZXRlY3Rpb24gb2YgZ3JhcGhpYyBmb3JtYXQKLy8gKHRvcCBsZXZlbCksIGkuZSBpdCBpcyBzYWZlIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgovLyBmcm9tIGEgc2NyaXB0IHRoYXQgdXNlcyBKcEdyYXBoCi8vCmZ1bmN0aW9uIEdlbkltZ05hbWUoKSB7CiAgICAvLyBEZXRlcm1pbmUgd2hhdCBmb3JtYXQgd2Ugc2hvdWxkIHVzZSB3aGVuIHdlIHNhdmUgdGhlIGltYWdlcwogICAgJHN1cHBvcnRlZCA9IGltYWdldHlwZXMoKTsKICAgIGlmKCAkc3VwcG9ydGVkICYgSU1HX1BORyApICAgICRpbWdfZm9ybWF0PSJwbmciOwogICAgZWxzZWlmKCAkc3VwcG9ydGVkICYgSU1HX0dJRiApICRpbWdfZm9ybWF0PSJnaWYiOwogICAgZWxzZWlmKCAkc3VwcG9ydGVkICYgSU1HX0pQRyApICRpbWdfZm9ybWF0PSJqcGVnIjsKICAgIGVsc2VpZiggJHN1cHBvcnRlZCAmIElNR19XQk1QICkgJGltZ19mb3JtYXQ9IndibXAiOwogICAgZWxzZWlmKCAkc3VwcG9ydGVkICYgSU1HX1hQTSApICRpbWdfZm9ybWF0PSJ4cG0iOwoKCiAgICBpZiggIWlzc2V0KCRfU0VSVkVSWydQSFBfU0VMRiddKSApIHsKICAgICAgICBKcEdyYXBoRXJyb3I6OlJhaXNlTCgyNTAwNSk7CiAgICAgICAgLy8oIiBDYW4ndCBhY2Nlc3MgUEhQX1NFTEYsIFBIUCBnbG9iYWwgdmFyaWFibGUuIFlvdSBjYW4ndCBydW4gUEhQIGZyb20gY29tbWFuZCBsaW5lIGlmIHlvdSB3YW50IHRvIHVzZSB0aGUgJ2F1dG8nIG5hbWluZyBvZiBjYWNoZSBvciBpbWFnZSBmaWxlcy4iKTsKICAgIH0KICAgICRmbmFtZSA9IGJhc2VuYW1lKCRfU0VSVkVSWydQSFBfU0VMRiddKTsKICAgIGlmKCAhZW1wdHkoJF9TRVJWRVJbJ1FVRVJZX1NUUklORyddKSApIHsKICAgICAgICAkcSA9IEAkX1NFUlZFUlsnUVVFUllfU1RSSU5HJ107CiAgICAgICAgJGZuYW1lIC49ICdfJy5wcmVnX3JlcGxhY2UoIi9cVy8iLCAiXyIsICRxKS4nLicuJGltZ19mb3JtYXQ7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkZm5hbWUgPSBzdWJzdHIoJGZuYW1lLDAsc3RybGVuKCRmbmFtZSktNCkuJy4nLiRpbWdfZm9ybWF0OwogICAgfQogICAgcmV0dXJuICRmbmFtZTsKfQoKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gQ0xBU1MgSnBnVGltZXIKLy8gRGVzY3JpcHRpb246IEdlbmVyYWwgdGltaW5nIHV0aWxpdHkgY2xhc3MgdG8gaGFuZGxlCi8vIHRpbWUgbWVhc3VyZW1lbnQgb2YgZ2VuZXJhdGluZyBncmFwaHMuIE11bHRpcGxlCi8vIHRpbWVycyBjYW4gYmUgc3RhcnRlZC4KLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KY2xhc3MgSnBnVGltZXIgewogICAgcHJpdmF0ZSAkc3RhcnQsICRpZHg7CgogICAgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKSB7CiAgICAgICAgJHRoaXMtPmlkeD0wOwogICAgfQoKICAgIC8vIFB1c2ggYSBuZXcgdGltZXIgc3RhcnQgb24gc3RhY2sKICAgIGZ1bmN0aW9uIFB1c2goKSB7CiAgICAgICAgbGlzdCgkbXMsJHMpPWV4cGxvZGUoIiAiLG1pY3JvdGltZSgpKTsKICAgICAgICAkdGhpcy0+c3RhcnRbJHRoaXMtPmlkeCsrXT1mbG9vcigkbXMqMTAwMCkgKyAxMDAwKiRzOwogICAgfQoKICAgIC8vIFBvcCB0aGUgbGF0ZXN0IHRpbWVyIHN0YXJ0IGFuZCByZXR1cm4gdGhlIGRpZmYgd2l0aCB0aGUKICAgIC8vIGN1cnJlbnQgdGltZQogICAgZnVuY3Rpb24gUG9wKCkgewogICAgICAgIGFzc2VydCgkdGhpcy0+aWR4PjApOwogICAgICAgIGxpc3QoJG1zLCRzKT1leHBsb2RlKCIgIixtaWNyb3RpbWUoKSk7CiAgICAgICAgJGV0aW1lPWZsb29yKCRtcyoxMDAwKSArICgxMDAwKiRzKTsKICAgICAgICAkdGhpcy0+aWR4LS07CiAgICAgICAgcmV0dXJuICRldGltZS0kdGhpcy0+c3RhcnRbJHRoaXMtPmlkeF07CiAgICB9Cn0gLy8gQ2xhc3MKCi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci8vIENMQVNTIERhdGVMb2NhbGUKLy8gRGVzY3JpcHRpb246IEhvbGQgbG9jYWxpemVkIHRleHQgdXNlZCBpbiBkYXRlcwovLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpjbGFzcyBEYXRlTG9jYWxlIHsKCiAgICBwdWJsaWMgJGlMb2NhbGUgPSAnQyc7IC8vIGVudmlyb25tZW50YWwgbG9jYWxlIGJlIHVzZWQgYnkgZGVmYXVsdAogICAgcHJpdmF0ZSAkaURheUFiYiA9IG51bGwsICRpU2hvcnREYXkgPSBudWxsLCAkaVNob3J0TW9udGggPSBudWxsLCAkaU1vbnRoTmFtZSA9IG51bGw7CgogICAgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKSB7CiAgICAgICAgc2V0dHlwZSgkdGhpcy0+aURheUFiYiwgJ2FycmF5Jyk7CiAgICAgICAgc2V0dHlwZSgkdGhpcy0+aVNob3J0RGF5LCAnYXJyYXknKTsKICAgICAgICBzZXR0eXBlKCR0aGlzLT5pU2hvcnRNb250aCwgJ2FycmF5Jyk7CiAgICAgICAgc2V0dHlwZSgkdGhpcy0+aU1vbnRoTmFtZSwgJ2FycmF5Jyk7CiAgICAgICAgJHRoaXMtPlNldCgnQycpOwogICAgfQoKICAgIGZ1bmN0aW9uIFNldCgkYUxvY2FsZSkgewogICAgICAgIGlmICggaW5fYXJyYXkoJGFMb2NhbGUsIGFycmF5X2tleXMoJHRoaXMtPmlEYXlBYmIpKSApewogICAgICAgICAgICAkdGhpcy0+aUxvY2FsZSA9ICRhTG9jYWxlOwogICAgICAgICAgICByZXR1cm4gVFJVRTsgIC8vIGFscmVhZHkgY2FjaGVkIG5vdGhpbmcgZWxzZSB0byBkbyEKICAgICAgICB9CgogICAgICAgICRwTG9jYWxlID0gc2V0bG9jYWxlKExDX1RJTUUsIDApOyAvLyBnZXQgY3VycmVudCBsb2NhbGUgZm9yIExDX1RJTUUKCiAgICAgICAgaWYgKGlzX2FycmF5KCRhTG9jYWxlKSkgewogICAgICAgICAgICBmb3JlYWNoICgkYUxvY2FsZSBhcyAkbG9jKSB7CiAgICAgICAgICAgICAgICAkcmVzID0gQHNldGxvY2FsZShMQ19USU1FLCAkbG9jKTsKICAgICAgICAgICAgICAgIGlmICggJHJlcyApIHsKICAgICAgICAgICAgICAgICAgICAkYUxvY2FsZSA9ICRsb2M7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRyZXMgPSBAc2V0bG9jYWxlKExDX1RJTUUsICRhTG9jYWxlKTsKICAgICAgICB9CgogICAgICAgIGlmICggISAkcmVzICkgewogICAgICAgICAgICBKcEdyYXBoRXJyb3I6OlJhaXNlTCgyNTAwNywkYUxvY2FsZSk7CiAgICAgICAgICAgIC8vKCJZb3UgYXJlIHRyeWluZyB0byB1c2UgdGhlIGxvY2FsZSAoJGFMb2NhbGUpIHdoaWNoIHlvdXIgUEhQIGluc3RhbGxhdGlvbiBkb2VzIG5vdCBzdXBwb3J0LiBIaW50OiBVc2UgJycgdG8gaW5kaWNhdGUgdGhlIGRlZmF1bHQgbG9jYWxlIGZvciB0aGlzIGdlb2dyYXBoaWMgcmVnaW9uLiIpOwogICAgICAgICAgICByZXR1cm4gRkFMU0U7CiAgICAgICAgfQoKICAgICAgICAkdGhpcy0+aUxvY2FsZSA9ICRhTG9jYWxlOwogICAgICAgIGZvciggJGkgPSAwLCAkb2ZzID0gMCAtIHN0cmZ0aW1lKCcldycpOyAkaSA8IDc7ICRpKyssICRvZnMrKyApIHsKICAgICAgICAgICAgJGRheSA9IHN0cmZ0aW1lKCclYScsIHN0cnRvdGltZSgiJG9mcyBkYXkiKSk7CiAgICAgICAgICAgICRkYXlbMF0gPSBzdHJ0b3VwcGVyKCRkYXlbMF0pOwogICAgICAgICAgICAkdGhpcy0+aURheUFiYlskYUxvY2FsZV1bXT0gJGRheVswXTsKICAgICAgICAgICAgJHRoaXMtPmlTaG9ydERheVskYUxvY2FsZV1bXT0gJGRheTsKICAgICAgICB9CgogICAgICAgIGZvcigkaT0xOyAkaTw9MTI7ICsrJGkpIHsKICAgICAgICAgICAgbGlzdCgkc2hvcnQgLCRmdWxsKSA9IGV4cGxvZGUoJ3wnLCBzdHJmdGltZSgiJWJ8JUIiLHN0cnRvdGltZSgiMjAwMS0kaS0wMSIpKSk7CiAgICAgICAgICAgICR0aGlzLT5pU2hvcnRNb250aFskYUxvY2FsZV1bXSA9IHVjZmlyc3QoJHNob3J0KTsKICAgICAgICAgICAgJHRoaXMtPmlNb250aE5hbWUgWyRhTG9jYWxlXVtdID0gdWNmaXJzdCgkZnVsbCk7CiAgICAgICAgfQoKICAgICAgICBzZXRsb2NhbGUoTENfVElNRSwgJHBMb2NhbGUpOwoKICAgICAgICByZXR1cm4gVFJVRTsKICAgIH0KCgogICAgZnVuY3Rpb24gR2V0RGF5QWJiKCkgewogICAgICAgIHJldHVybiAkdGhpcy0+aURheUFiYlskdGhpcy0+aUxvY2FsZV07CiAgICB9CgogICAgZnVuY3Rpb24gR2V0U2hvcnREYXkoKSB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5pU2hvcnREYXlbJHRoaXMtPmlMb2NhbGVdOwogICAgfQoKICAgIGZ1bmN0aW9uIEdldFNob3J0TW9udGgoKSB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5pU2hvcnRNb250aFskdGhpcy0+aUxvY2FsZV07CiAgICB9CgogICAgZnVuY3Rpb24gR2V0U2hvcnRNb250aE5hbWUoJGFOYnIpIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmlTaG9ydE1vbnRoWyR0aGlzLT5pTG9jYWxlXVskYU5icl07CiAgICB9CgogICAgZnVuY3Rpb24gR2V0TG9uZ01vbnRoTmFtZSgkYU5icikgewogICAgICAgIHJldHVybiAkdGhpcy0+aU1vbnRoTmFtZVskdGhpcy0+aUxvY2FsZV1bJGFOYnJdOwogICAgfQoKICAgIGZ1bmN0aW9uIEdldE1vbnRoKCkgewogICAgICAgIHJldHVybiAkdGhpcy0+aU1vbnRoTmFtZVskdGhpcy0+aUxvY2FsZV07CiAgICB9Cn0KCi8vIEdsb2JhbCBvYmplY3QgaGFuZGxlcnMKJGdEYXRlTG9jYWxlID0gbmV3IERhdGVMb2NhbGUoKTsKJGdKcGdEYXRlTG9jYWxlID0gbmV3IERhdGVMb2NhbGUoKTsKCi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLyBDTEFTUyBGb290ZXIKLy8gRGVzY3JpcHRpb246IEVuY2Fwc3VsYXRlcyB0aGUgZm9vdGVyIGxpbmUgaW4gdGhlIEdyYXBoCi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpjbGFzcyBGb290ZXIgewogICAgcHVibGljICRpTGVmdE1hcmdpbiA9IDMsICRpUmlnaHRNYXJnaW4gPSAzLCAkaUJvdHRvbU1hcmdpbiA9IDMgOwogICAgcHVibGljICRsZWZ0LCRjZW50ZXIsJHJpZ2h0OwogICAgcHJpdmF0ZSAkaVRpbWVyPW51bGwsICRpdGltZXJwb3N0c3RyaW5nPScnOwoKICAgIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkgewogICAgICAgICR0aGlzLT5sZWZ0ID0gbmV3IFRleHQoKTsKICAgICAgICAkdGhpcy0+bGVmdC0+UGFyYWdyYXBoQWxpZ24oJ2xlZnQnKTsKICAgICAgICAkdGhpcy0+Y2VudGVyID0gbmV3IFRleHQoKTsKICAgICAgICAkdGhpcy0+Y2VudGVyLT5QYXJhZ3JhcGhBbGlnbignY2VudGVyJyk7CiAgICAgICAgJHRoaXMtPnJpZ2h0ID0gbmV3IFRleHQoKTsKICAgICAgICAkdGhpcy0+cmlnaHQtPlBhcmFncmFwaEFsaWduKCdyaWdodCcpOwogICAgfQoKICAgIGZ1bmN0aW9uIFNldFRpbWVyKCRhVGltZXIsJGFUaW1lclBvc3RTdHJpbmc9JycpIHsKICAgICAgICAkdGhpcy0+aVRpbWVyID0gJGFUaW1lcjsKICAgICAgICAkdGhpcy0+aXRpbWVycG9zdHN0cmluZyA9ICRhVGltZXJQb3N0U3RyaW5nOwogICAgfQoKICAgIGZ1bmN0aW9uIFNldE1hcmdpbigkYUxlZnQ9MywkYVJpZ2h0PTMsJGFCb3R0b209MykgewogICAgICAgICR0aGlzLT5pTGVmdE1hcmdpbiA9ICRhTGVmdDsKICAgICAgICAkdGhpcy0+aVJpZ2h0TWFyZ2luID0gJGFSaWdodDsKICAgICAgICAkdGhpcy0+aUJvdHRvbU1hcmdpbiA9ICRhQm90dG9tOwogICAgfQoKICAgIGZ1bmN0aW9uIFN0cm9rZSgkYUltZykgewogICAgICAgICR5ID0gJGFJbWctPmhlaWdodCAtICR0aGlzLT5pQm90dG9tTWFyZ2luOwogICAgICAgICR4ID0gJHRoaXMtPmlMZWZ0TWFyZ2luOwogICAgICAgICR0aGlzLT5sZWZ0LT5BbGlnbignbGVmdCcsJ2JvdHRvbScpOwogICAgICAgICR0aGlzLT5sZWZ0LT5TdHJva2UoJGFJbWcsJHgsJHkpOwoKICAgICAgICAkeCA9ICgkYUltZy0+d2lkdGggLSAkdGhpcy0+aUxlZnRNYXJnaW4gLSAkdGhpcy0+aVJpZ2h0TWFyZ2luKS8yOwogICAgICAgICR0aGlzLT5jZW50ZXItPkFsaWduKCdjZW50ZXInLCdib3R0b20nKTsKICAgICAgICAkdGhpcy0+Y2VudGVyLT5TdHJva2UoJGFJbWcsJHgsJHkpOwoKICAgICAgICAkeCA9ICRhSW1nLT53aWR0aCAtICR0aGlzLT5pUmlnaHRNYXJnaW47CiAgICAgICAgJHRoaXMtPnJpZ2h0LT5BbGlnbigncmlnaHQnLCdib3R0b20nKTsKICAgICAgICBpZiggJHRoaXMtPmlUaW1lciAhPSBudWxsICkgewogICAgICAgICAgICAkdGhpcy0+cmlnaHQtPlNldCggJHRoaXMtPnJpZ2h0LT50IC4gc3ByaW50ZignJS4zZicsJHRoaXMtPmlUaW1lci0+UG9wKCkvMTAwMC4wKSAuICR0aGlzLT5pdGltZXJwb3N0c3RyaW5nICk7CiAgICAgICAgfQogICAgICAgICR0aGlzLT5yaWdodC0+U3Ryb2tlKCRhSW1nLCR4LCR5KTsKICAgIH0KfQoKCi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci8vIENMQVNTIEdyYXBoCi8vIERlc2NyaXB0aW9uOiBNYWluIGNsYXNzIHRvIGhhbmRsZSBncmFwaHMKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KY2xhc3MgR3JhcGggewogICAgcHVibGljICRjYWNoZT1udWxsOyAgIC8vIENhY2hlIG9iamVjdCAoc2luZ2xldG9uKQogICAgcHVibGljICRpbWc9bnVsbDsgICAvLyBJbWcgb2JqZWN0IChzaW5nbGV0b24pCiAgICBwdWJsaWMgJHBsb3RzPWFycmF5KCk7ICAvLyBBcnJheSBvZiBhbGwgcGxvdCBvYmplY3QgaW4gdGhlIGdyYXBoIChmb3IgWSAxIGF4aXMpCiAgICBwdWJsaWMgJHkycGxvdHM9YXJyYXkoKTsgIC8vIEFycmF5IG9mIGFsbCBwbG90IG9iamVjdCBpbiB0aGUgZ3JhcGggKGZvciBZIDIgYXhpcykKICAgIHB1YmxpYyAkeW5wbG90cz1hcnJheSgpOwogICAgcHVibGljICR4c2NhbGU9bnVsbDsgIC8vIFggU2NhbGUgb2JqZWN0IChjb3VsZCBiZSBpbnN0YW5jZSBvZiBMaW5lYXJTY2FsZSBvciBMb2dTY2FsZQogICAgcHVibGljICR5c2NhbGU9bnVsbCwkeTJzY2FsZT1udWxsLCAkeW5zY2FsZT1hcnJheSgpOwogICAgcHVibGljICRpSWNvbnMgPSBhcnJheSgpOyAgLy8gQXJyYXkgb2YgSWNvbnMgdG8gYWRkIHRvCiAgICBwdWJsaWMgJGNhY2hlX25hbWU7ICAgLy8gRmlsZSBuYW1lIHRvIGJlIHVzZWQgZm9yIHRoZSBjdXJyZW50IGdyYXBoIGluIHRoZSBjYWNoZSBkaXJlY3RvcnkKICAgIHB1YmxpYyAkeGdyaWQ9bnVsbDsgICAvLyBYIEdyaWQgb2JqZWN0IChsaW5lYXIgb3IgbG9nYXJpdGhtaWMpCiAgICBwdWJsaWMgJHlncmlkPW51bGwsJHkyZ3JpZD1udWxsOyAvL2RpdG8gZm9yIFkKICAgIHB1YmxpYyAkZG9mcmFtZSwkZnJhbWVfY29sb3IsICRmcmFtZV93ZWlnaHQ7IC8vIEZyYW1lIGFyb3VuZCBncmFwaAogICAgcHVibGljICRib3hlZD1mYWxzZSwgJGJveF9jb2xvcj0nYmxhY2snLCAkYm94X3dlaWdodD0xOyAgLy8gQm94IGFyb3VuZCBwbG90IGFyZWEKICAgIHB1YmxpYyAkZG9zaGFkb3c9ZmFsc2UsJHNoYWRvd193aWR0aD00LCRzaGFkb3dfY29sb3I9J2dyYXlAMC41JzsgLy8gU2hhZG93IGZvciBncmFwaAogICAgcHVibGljICR4YXhpcz1udWxsOyAgIC8vIFgtYXhpcyAoaW5zdGFuZSBvZiBBeGlzIGNsYXNzKQogICAgcHVibGljICR5YXhpcz1udWxsLCAkeTJheGlzPW51bGwsICR5bmF4aXM9YXJyYXkoKTsgLy8gWSBheGlzIChpbnN0YW5jZSBvZiBBeGlzIGNsYXNzKQogICAgcHVibGljICRtYXJnaW5fY29sb3I7IC8vIE1hcmdpbiBjb2xvciBvZiBncmFwaAogICAgcHVibGljICRwbG90YXJlYV9jb2xvcj1hcnJheSgyNTUsMjU1LDI1NSk7IC8vIFBsb3QgYXJlYSBjb2xvcgogICAgcHVibGljICR0aXRsZSwkc3VidGl0bGUsJHN1YnN1YnRpdGxlOyAgLy8gVGl0bGUgYW5kIHN1YnRpdGxlKHMpIHRleHQgb2JqZWN0CiAgICBwdWJsaWMgJGF4dHlwZT0ibGlubGluIjsgIC8vIFR5cGUgb2YgYXhpcwogICAgcHVibGljICR4dGlja19mYWN0b3IsJHl0aWNrX2ZhY3RvcjsgLy8gRmFjdG9yIHRvIGRldGVybWluZSB0aGUgbWF4aW11bSBudW1iZXIgb2YgdGlja3MgZGVwZW5kaW5nIG9uIHRoZSBwbG90IHdpZHRoCiAgICBwdWJsaWMgJHRleHRzPW51bGwsICR5MnRleHRzPW51bGw7IC8vIFRleHQgb2JqZWN0IHRvIGdlIHNob3duIGluIHRoZSBncmFwaAogICAgcHVibGljICRsaW5lcz1udWxsLCAkeTJsaW5lcz1udWxsOwogICAgcHVibGljICRiYW5kcz1udWxsLCAkeTJiYW5kcz1udWxsOwogICAgcHVibGljICR0ZXh0X3NjYWxlX29mZj0wLCAkdGV4dF9zY2FsZV9hYnNjZW50ZXJvZmY9LTE7IC8vIFRleHQgc2NhbGUgaW4gZnJhY3Rpb25zIGFuZCBmb3IgY2VudGVyaW5nIGJhcnMKICAgIHB1YmxpYyAkYmFja2dyb3VuZF9pbWFnZT0nJywkYmFja2dyb3VuZF9pbWFnZV90eXBlPS0xLCRiYWNrZ3JvdW5kX2ltYWdlX2Zvcm1hdD0icG5nIjsKICAgIHB1YmxpYyAkYmFja2dyb3VuZF9pbWFnZV9icmlnaHQ9MCwkYmFja2dyb3VuZF9pbWFnZV9jb250cj0wLCRiYWNrZ3JvdW5kX2ltYWdlX3NhdD0wOwogICAgcHVibGljICRiYWNrZ3JvdW5kX2ltYWdlX3hwb3M9MCwkYmFja2dyb3VuZF9pbWFnZV95cG9zPTA7CiAgICBwdWJsaWMgJGltYWdlX2JyaWdodD0wLCAkaW1hZ2VfY29udHI9MCwgJGltYWdlX3NhdD0wOwogICAgcHVibGljICRpbmxpbmU7CiAgICBwdWJsaWMgJHNob3djc2ltPTAsJGNzaW1jb2xvcj0icmVkIjsvL2RlYnVnIHN0dWZmLCBkcmF3IHRoZSBjc2ltIGJvdW5kYXJpcyBvbiB0aGUgaW1hZ2UgaWYgPD4wCiAgICBwdWJsaWMgJGdyaWRfZGVwdGg9REVQVEhfQkFDSzsgLy8gRHJhdyBncmlkIHVuZGVyIGFsbCBwbG90cyBhcyBkZWZhdWx0CiAgICBwdWJsaWMgJGlBeGlzU3R5bGUgPSBBWFNUWUxFX1NJTVBMRTsKICAgIHB1YmxpYyAkaUNTSU1kaXNwbGF5PWZhbHNlLCRpSGFzU3Ryb2tlZCA9IGZhbHNlOwogICAgcHVibGljICRmb290ZXI7CiAgICBwdWJsaWMgJGNzaW1jYWNoZW5hbWUgPSAnJywgJGNzaW1jYWNoZXRpbWVvdXQgPSAwLCAkaUNTSU1JbWdBbHQ9Jyc7CiAgICBwdWJsaWMgJGlEb0NsaXBwaW5nID0gZmFsc2U7CiAgICBwdWJsaWMgJHkyb3JkZXJiYWNrPXRydWU7CiAgICBwdWJsaWMgJHRhYnRpdGxlOwogICAgcHVibGljICRia2dfZ3JhZHR5cGU9LTEsJGJrZ19ncmFkc3R5bGU9QkdSQURfTUFSR0lOOwogICAgcHVibGljICRia2dfZ3JhZGZyb209J25hdnknLCAkYmtnX2dyYWR0bz0nc2lsdmVyJzsKICAgIHB1YmxpYyAkcGxvdF9ncmFkdHlwZT0tMSwkcGxvdF9ncmFkc3R5bGU9QkdSQURfTUFSR0lOOwogICAgcHVibGljICRwbG90X2dyYWRmcm9tPSdzaWx2ZXInLCAkcGxvdF9ncmFkdG89J25hdnknOwoKICAgIHB1YmxpYyAkdGl0bGViYWNrZ3JvdW5kID0gZmFsc2U7CiAgICBwdWJsaWMgJHRpdGxlYmFja2dyb3VuZF9jb2xvciA9ICdsaWdodGJsdWUnLAogICAgICAgICAgICR0aXRsZWJhY2tncm91bmRfc3R5bGUgPSAxLAogICAgICAgICAgICR0aXRsZWJhY2tncm91bmRfZnJhbWVjb2xvciwKICAgICAgICAgICAkdGl0bGViYWNrZ3JvdW5kX2ZyYW1lc3R5bGUsCiAgICAgICAgICAgJHRpdGxlYmFja2dyb3VuZF9mcmFtZXdlaWdodCwKICAgICAgICAgICAkdGl0bGViYWNrZ3JvdW5kX2JldmVsaGVpZ2h0OwogICAgcHVibGljICR0aXRsZWJrZ19maWxsc3R5bGU9VElUTEVCS0dfRklMTFNUWUxFX1NPTElEOwogICAgcHVibGljICR0aXRsZWJrZ19zY29sb3IxPSdibGFjaycsJHRpdGxlYmtnX3Njb2xvcjI9J3doaXRlJzsKICAgIHB1YmxpYyAkZnJhbWViZXZlbCwgJGZyYW1lYmV2ZWxkZXB0aDsKICAgIHB1YmxpYyAkZnJhbWViZXZlbGJvcmRlciwgJGZyYW1lYmV2ZWxib3JkZXJjb2xvcjsKICAgIHB1YmxpYyAkZnJhbWViZXZlbGNvbG9yMSwgJGZyYW1lYmV2ZWxjb2xvcjI7CiAgICBwdWJsaWMgJGJhY2tncm91bmRfaW1hZ2VfbWl4PTEwMDsKICAgIHB1YmxpYyAkYmFja2dyb3VuZF9jZmxhZyA9ICcnOwogICAgcHVibGljICRiYWNrZ3JvdW5kX2NmbGFnX3R5cGUgPSBCR0lNR19GSUxMUExPVDsKICAgIHB1YmxpYyAkYmFja2dyb3VuZF9jZmxhZ19taXggPSAxMDA7CiAgICBwdWJsaWMgJGlJbWdUcmFucz1mYWxzZSwKICAgICAgICAgICAkaUltZ1RyYW5zSG9yaXpvbiA9IDEwMCwkaUltZ1RyYW5zU2tld0Rpc3Q9MTUwLAogICAgICAgICAgICRpSW1nVHJhbnNEaXJlY3Rpb24gPSAxLCAkaUltZ1RyYW5zTWluU2l6ZSA9IHRydWUsCiAgICAgICAgICAgJGlJbWdUcmFuc0ZpbGxDb2xvcj0nd2hpdGUnLCRpSW1nVHJhbnNIaWdoUT1mYWxzZSwKICAgICAgICAgICAkaUltZ1RyYW5zQm9yZGVyPWZhbHNlLCRpSW1nVHJhbnNIb3Jpem9uUG9zPTAuNTsKICAgIHB1YmxpYyAkbGVnZW5kOwogICAgcHVibGljICRncmFwaF90aGVtZTsKICAgIHByb3RlY3RlZCAkaVlBeGlzRGVsdGFQb3M9NTA7CiAgICBwcm90ZWN0ZWQgJGlJY29uRGVwdGg9REVQVEhfQkFDSzsKICAgIHByb3RlY3RlZCAkaUF4aXNMYmxCZ1R5cGUgPSAwLAogICAgICAgICAgICAgICRpWEF4aXNMYmxCZ0ZpbGxDb2xvciA9ICdsaWdodGdyYXknLCAkaVhBeGlzTGJsQmdDb2xvciA9ICdibGFjaycsCiAgICAgICAgICAgICAgJGlZQXhpc0xibEJnRmlsbENvbG9yID0gJ2xpZ2h0Z3JheScsICRpWUF4aXNMYmxCZ0NvbG9yID0gJ2JsYWNrJzsKICAgIHByb3RlY3RlZCAkaVRhYmxlcz1OVUxMOwoKICAgIHByb3RlY3RlZCAkaXNSdW5uaW5nQ2xlYXIgPSBmYWxzZTsKICAgIHByb3RlY3RlZCAkaW5wdXRWYWx1ZXM7CiAgICBwcm90ZWN0ZWQgJGlzQWZ0ZXJTZXRTY2FsZSA9IGZhbHNlOwoKICAgIC8vIGFXSWR0aCAgIFdpZHRoIGluIHBpeGVscyBvZiBpbWFnZQogICAgLy8gYUhlaWdodCAgIEhlaWdodCBpbiBwaXhlbHMgb2YgaW1hZ2UKICAgIC8vIGFDYWNoZWROYW1lIE5hbWUgZm9yIGltYWdlIGZpbGUgaW4gY2FjaGUgZGlyZWN0b3J5CiAgICAvLyBhVGltZU91dCAgVGltZW91dCBpbiBtaW51dGVzIGZvciBpbWFnZSBpbiBjYWNoZQogICAgLy8gYUlubGluZSAgSWYgdHJ1ZSB0aGUgaW1hZ2UgaXMgc3RyZWFtZWQgYmFjayBpbiB0aGUgY2FsbCB0byBTdHJva2UoKQogICAgLy8gICBJZiBmYWxzZSB0aGUgaW1hZ2UgaXMganVzdCBjcmVhdGVkIGluIHRoZSBjYWNoZQogICAgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGFXaWR0aD0zMDAsJGFIZWlnaHQ9MjAwLCRhQ2FjaGVkTmFtZT0nJywkYVRpbWVvdXQ9MCwkYUlubGluZT10cnVlKSB7CgogICAgICAgIGlmKCAhaXNfbnVtZXJpYygkYVdpZHRoKSB8fCAhaXNfbnVtZXJpYygkYUhlaWdodCkgKSB7CiAgICAgICAgICAgIEpwR3JhcGhFcnJvcjo6UmFpc2VMKDI1MDA4KTsvLygnSW1hZ2Ugd2lkdGgvaGVpZ2h0IGFyZ3VtZW50IGluIEdyYXBoOjpHcmFwaCgpIG11c3QgYmUgbnVtZXJpYycpOwogICAgICAgIH0KCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBmcmFtZSBhbmQgbWFyZ2luCiAgICAgICAgJHRoaXMtPkluaXRpYWxpemVGcmFtZUFuZE1hcmdpbigpOwoKICAgICAgICAvLyBBdXRvbWF0aWNhbGx5IGdlbmVyYXRlIHRoZSBpbWFnZSBmaWxlIG5hbWUgYmFzZWQgb24gdGhlIG5hbWUgb2YgdGhlIHNjcmlwdCB0aGF0CiAgICAgICAgLy8gZ2VuZXJhdGVzIHRoZSBncmFwaAogICAgICAgIGlmKCAkYUNhY2hlZE5hbWUgPT0gJ2F1dG8nICkgewogICAgICAgICAgICAkYUNhY2hlZE5hbWU9R2VuSW1nTmFtZSgpOwogICAgICAgIH0KCiAgICAgICAgLy8gU2hvdWxkIHRoZSBpbWFnZSBiZSBzdHJlYW1lZCBiYWNrIHRvIHRoZSBicm93c2VyIG9yIG9ubHkgdG8gdGhlIGNhY2hlPwogICAgICAgICR0aGlzLT5pbmxpbmU9JGFJbmxpbmU7CgogICAgICAgICR0aGlzLT5pbWcgPSBuZXcgUm90SW1hZ2UoJGFXaWR0aCwkYUhlaWdodCk7CiAgICAgICAgJHRoaXMtPmNhY2hlICA9IG5ldyBJbWdTdHJlYW1DYWNoZSgpOwoKICAgICAgICAvLyBXaW5kb3cgZG9lc24ndCBsaWtlICc\/JyBpbiB0aGUgZmlsZSBuYW1lIHNvIHJlcGxhY2UgaXQgd2l0aCBhbiAnXycKICAgICAgICAkYUNhY2hlZE5hbWUgPSBzdHJfcmVwbGFjZSgiPyIsIl8iLCRhQ2FjaGVkTmFtZSk7CiAgICAgICAgJHRoaXMtPlNldHVwQ2FjaGUoJGFDYWNoZWROYW1lLCAkYVRpbWVvdXQpOwoKICAgICAgICAkdGhpcy0+dGl0bGUgPSBuZXcgVGV4dCgpOwogICAgICAgICR0aGlzLT50aXRsZS0+UGFyYWdyYXBoQWxpZ24oJ2NlbnRlcicpOwogICAgICAgICR0aGlzLT50aXRsZS0+U2V0Rm9udChGRl9ERUZBVUxULEZTX05PUk1BTCk7IC8vRkZfRk9OVDIsIEZTX0JPTEQKICAgICAgICAkdGhpcy0+dGl0bGUtPlNldE1hcmdpbig1KTsKICAgICAgICAkdGhpcy0+dGl0bGUtPlNldEFsaWduKCdjZW50ZXInKTsKCiAgICAgICAgJHRoaXMtPnN1YnRpdGxlID0gbmV3IFRleHQoKTsKICAgICAgICAkdGhpcy0+c3VidGl0bGUtPlBhcmFncmFwaEFsaWduKCdjZW50ZXInKTsKICAgICAgICAkdGhpcy0+c3VidGl0bGUtPlNldE1hcmdpbigzKTsKICAgICAgICAkdGhpcy0+c3VidGl0bGUtPlNldEFsaWduKCdjZW50ZXInKTsKCiAgICAgICAgJHRoaXMtPnN1YnN1YnRpdGxlID0gbmV3IFRleHQoKTsKICAgICAgICAkdGhpcy0+c3Vic3VidGl0bGUtPlBhcmFncmFwaEFsaWduKCdjZW50ZXInKTsKICAgICAgICAkdGhpcy0+c3Vic3VidGl0bGUtPlNldE1hcmdpbigzKTsKICAgICAgICAkdGhpcy0+c3Vic3VidGl0bGUtPlNldEFsaWduKCdjZW50ZXInKTsKCiAgICAgICAgJHRoaXMtPmxlZ2VuZCA9IG5ldyBMZWdlbmQoKTsKICAgICAgICAkdGhpcy0+Zm9vdGVyID0gbmV3IEZvb3RlcigpOwoKICAgICAgICAvLyBJZiB0aGUgY2FjaGVkIHZlcnNpb24gZXhpc3QganVzdCByZWFkIGl0IGRpcmVjdGx5IGZyb20gdGhlCiAgICAgICAgLy8gY2FjaGUsIHN0cmVhbSBpdCBiYWNrIHRvIGJyb3dzZXIgYW5kIGV4aXQKICAgICAgICBpZiggJGFDYWNoZWROYW1lIT0nJyAmJiBSRUFEX0NBQ0hFICYmICRhSW5saW5lICkgewogICAgICAgICAgICBpZiggJHRoaXMtPmNhY2hlLT5HZXRBbmRTdHJlYW0oJHRoaXMtPmltZywkYUNhY2hlZE5hbWUpICkgewogICAgICAgICAgICAgICAgZXhpdCgpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkdGhpcy0+U2V0VGlja0RlbnNpdHkoKTsgLy8gTm9ybWFsIGRlbnNpdHkKCiAgICAgICAgJHRoaXMtPnRhYnRpdGxlID0gbmV3IEdyYXBoVGFiVGl0bGUoKTsKCiAgICAgICAgaWYgKCEkdGhpcy0+aXNSdW5uaW5nQ2xlYXIpIHsKICAgICAgICAgICAgJHRoaXMtPmlucHV0VmFsdWVzID0gYXJyYXkoKTsKICAgICAgICAgICAgJHRoaXMtPmlucHV0VmFsdWVzWydhV2lkdGgnXSA9ICRhV2lkdGg7CiAgICAgICAgICAgICR0aGlzLT5pbnB1dFZhbHVlc1snYUhlaWdodCddID0gJGFIZWlnaHQ7CiAgICAgICAgICAgICR0aGlzLT5pbnB1dFZhbHVlc1snYUNhY2hlZE5hbWUnXSA9ICRhQ2FjaGVkTmFtZTsKICAgICAgICAgICAgJHRoaXMtPmlucHV0VmFsdWVzWydhVGltZW91dCddID0gJGFUaW1lb3V0OwogICAgICAgICAgICAkdGhpcy0+aW5wdXRWYWx1ZXNbJ2FJbmxpbmUnXSA9ICRhSW5saW5lOwoKICAgICAgICAgICAgJHRoZW1lX2NsYXNzID0gREVGQVVMVF9USEVNRV9DTEFTUzsKICAgICAgICAgICAgaWYgKGNsYXNzX2V4aXN0cygkdGhlbWVfY2xhc3MpKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+Z3JhcGhfdGhlbWUgPSBuZXcgJHRoZW1lX2NsYXNzKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gSW5pdGlhbGl6ZUZyYW1lQW5kTWFyZ2luKCkgewogICAgICAgICR0aGlzLT5kb2ZyYW1lPXRydWU7CiAgICAgICAgJHRoaXMtPmZyYW1lX2NvbG9yPSdibGFjayc7CiAgICAgICAgJHRoaXMtPmZyYW1lX3dlaWdodD0xOyAKCiAgICAgICAgJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9mcmFtZWNvbG9yID0gJ2JsdWUnOwogICAgICAgICR0aGlzLT50aXRsZWJhY2tncm91bmRfZnJhbWVzdHlsZSA9IDI7CiAgICAgICAgJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9mcmFtZXdlaWdodCA9IDE7CiAgICAgICAgJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9iZXZlbGhlaWdodCA9IDM7CiAgICAgICAgJHRoaXMtPnRpdGxlYmtnX2ZpbGxzdHlsZT1USVRMRUJLR19GSUxMU1RZTEVfU09MSUQ7CiAgICAgICAgJHRoaXMtPnRpdGxlYmtnX3Njb2xvcjE9J2JsYWNrJzsKICAgICAgICAkdGhpcy0+dGl0bGVia2dfc2NvbG9yMj0nd2hpdGUnOwogICAgICAgICR0aGlzLT5mcmFtZWJldmVsID0gZmFsc2U7CiAgICAgICAgJHRoaXMtPmZyYW1lYmV2ZWxkZXB0aCA9IDI7CiAgICAgICAgJHRoaXMtPmZyYW1lYmV2ZWxib3JkZXIgPSBmYWxzZTsKICAgICAgICAkdGhpcy0+ZnJhbWViZXZlbGJvcmRlcmNvbG9yPSdibGFjayc7CiAgICAgICAgJHRoaXMtPmZyYW1lYmV2ZWxjb2xvcjE9J3doaXRlQDAuNCc7CiAgICAgICAgJHRoaXMtPmZyYW1lYmV2ZWxjb2xvcjI9J2JsYWNrQDAuNCc7CgogICAgICAgICR0aGlzLT5tYXJnaW5fY29sb3IgPSBhcnJheSgyNTAsMjUwLDI1MCk7CiAgICB9CgogICAgZnVuY3Rpb24gU2V0dXBDYWNoZSgkYUZpbGVuYW1lLCRhVGltZW91dD02MCkgewogICAgICAgICR0aGlzLT5jYWNoZV9uYW1lID0gJGFGaWxlbmFtZTsKICAgICAgICAkdGhpcy0+Y2FjaGUtPlNldFRpbWVPdXQoJGFUaW1lb3V0KTsKICAgIH0KCiAgICAvLyBFbmFibGUgZmluYWwgaW1hZ2UgcGVyc3BlY3RpdmUgdHJhbnNmb3JtYXRpb24KICAgIGZ1bmN0aW9uIFNldDNEUGVyc3BlY3RpdmUoJGFEaXI9MSwkYUhvcml6b249MTAwLCRhU2tld0Rpc3Q9MTIwLCRhUXVhbGl0eT1mYWxzZSwkYUZpbGxDb2xvcj0nI0ZGRkZGRicsJGFCb3JkZXI9ZmFsc2UsJGFNaW5TaXplPXRydWUsJGFIb3Jpem9uUG9zPTAuNSkgewogICAgICAgICR0aGlzLT5pSW1nVHJhbnMgPSB0cnVlOwogICAgICAgICR0aGlzLT5pSW1nVHJhbnNIb3Jpem9uID0gJGFIb3Jpem9uOwogICAgICAgICR0aGlzLT5pSW1nVHJhbnNTa2V3RGlzdD0gJGFTa2V3RGlzdDsKICAgICAgICAkdGhpcy0+aUltZ1RyYW5zRGlyZWN0aW9uID0gJGFEaXI7CiAgICAgICAgJHRoaXMtPmlJbWdUcmFuc01pblNpemUgPSAkYU1pblNpemU7CiAgICAgICAgJHRoaXMtPmlJbWdUcmFuc0ZpbGxDb2xvcj0kYUZpbGxDb2xvcjsKICAgICAgICAkdGhpcy0+aUltZ1RyYW5zSGlnaFE9JGFRdWFsaXR5OwogICAgICAgICR0aGlzLT5pSW1nVHJhbnNCb3JkZXI9JGFCb3JkZXI7CiAgICAgICAgJHRoaXMtPmlJbWdUcmFuc0hvcml6b25Qb3M9JGFIb3Jpem9uUG9zOwogICAgfQoKICAgIGZ1bmN0aW9uIFNldFVzZXJGb250KCRhTm9ybWFsLCRhQm9sZD0nJywkYUl0YWxpYz0nJywkYUJvbGRJdD0nJykgewogICAgICAgICR0aGlzLT5pbWctPnR0Zi0+U2V0VXNlckZvbnQoJGFOb3JtYWwsJGFCb2xkLCRhSXRhbGljLCRhQm9sZEl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRVc2VyRm9udDEoJGFOb3JtYWwsJGFCb2xkPScnLCRhSXRhbGljPScnLCRhQm9sZEl0PScnKSB7CiAgICAgICAgJHRoaXMtPmltZy0+dHRmLT5TZXRVc2VyRm9udDEoJGFOb3JtYWwsJGFCb2xkLCRhSXRhbGljLCRhQm9sZEl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRVc2VyRm9udDIoJGFOb3JtYWwsJGFCb2xkPScnLCRhSXRhbGljPScnLCRhQm9sZEl0PScnKSB7CiAgICAgICAgJHRoaXMtPmltZy0+dHRmLT5TZXRVc2VyRm9udDIoJGFOb3JtYWwsJGFCb2xkLCRhSXRhbGljLCRhQm9sZEl0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRVc2VyRm9udDMoJGFOb3JtYWwsJGFCb2xkPScnLCRhSXRhbGljPScnLCRhQm9sZEl0PScnKSB7CiAgICAgICAgJHRoaXMtPmltZy0+dHRmLT5TZXRVc2VyRm9udDMoJGFOb3JtYWwsJGFCb2xkLCRhSXRhbGljLCRhQm9sZEl0KTsKICAgIH0KCiAgICAvLyBTZXQgSW1hZ2UgZm9ybWF0IGFuZCBvcHRpb25hbCBxdWFsaXR5CiAgICBmdW5jdGlvbiBTZXRJbWdGb3JtYXQoJGFGb3JtYXQsJGFRdWFsaXR5PTc1KSB7CiAgICAgICAgJHRoaXMtPmltZy0+U2V0SW1nRm9ybWF0KCRhRm9ybWF0LCRhUXVhbGl0eSk7CiAgICB9CgogICAgLy8gU2hvdWxkIHRoZSBncmlkIGJlIGluIGZyb250IG9yIGJhY2sgb2YgdGhlIHBsb3Q\/CiAgICBmdW5jdGlvbiBTZXRHcmlkRGVwdGgoJGFEZXB0aCkgewogICAgICAgICR0aGlzLT5ncmlkX2RlcHRoPSRhRGVwdGg7CiAgICB9CgogICAgZnVuY3Rpb24gU2V0SWNvbkRlcHRoKCRhRGVwdGgpIHsKICAgICAgICAkdGhpcy0+aUljb25EZXB0aD0kYURlcHRoOwogICAgfQoKICAgIC8vIFNwZWNpZnkgZ3JhcGggYW5nbGUgMC0zNjAgZGVncmVlcy4KICAgIGZ1bmN0aW9uIFNldEFuZ2xlKCRhQW5nbGUpIHsKICAgICAgICAkdGhpcy0+aW1nLT5TZXRBbmdsZSgkYUFuZ2xlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRBbHBoYUJsZW5kaW5nKCRhRmxnPXRydWUpIHsKICAgICAgICAkdGhpcy0+aW1nLT5TZXRBbHBoYUJsZW5kaW5nKCRhRmxnKTsKICAgIH0KCiAgICAvLyBTaG9ydGN1dCB0byBpbWFnZSBtYXJnaW4KICAgIGZ1bmN0aW9uIFNldE1hcmdpbigkbG0sJHJtLCR0bSwkYm0pIHsKICAgICAgICAkdGhpcy0+aW1nLT5TZXRNYXJnaW4oJGxtLCRybSwkdG0sJGJtKTsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRZMk9yZGVyQmFjaygkYUJhY2s9dHJ1ZSkgewogICAgICAgICR0aGlzLT55Mm9yZGVyYmFjayA9ICRhQmFjazsKICAgIH0KCiAgICAvLyBSb3RhdGUgdGhlIGdyYXBoIDkwIGRlZ3JlZXMgYW5kIHNldCB0aGUgbWFyZ2luCiAgICAvLyB3aGVuIHdlIGhhdmUgZG9uZSBhIDkwIGRlZ3JlZSByb3RhdGlvbgogICAgZnVuY3Rpb24gU2V0OTBBbmRNYXJnaW4oJGxtPTAsJHJtPTAsJHRtPTAsJGJtPTApIHsKICAgICAgICAkbG0gPSAkbG0gPT0wID8gZmxvb3IoMC4yICogJHRoaXMtPmltZy0+d2lkdGgpICA6ICRsbSA7CiAgICAgICAgJHJtID0gJHJtID09MCA\\/Jy4kdXJsYXJnLidfY3NpbV8uaHRtbCc7CiAgICAgICAgICAgICRiYXNlaW1nID0gJGRpci4nLycuJGJhc2UuJz8nLiR1cmxhcmcuJy4nLiR0aGlzLT5pbWctPmltZ19mb3JtYXQ7CgogICAgICAgICAgICAkdGltZWRvdXQ9ZmFsc2U7CiAgICAgICAgICAgIC8vIERvZXMgaXQgZXhpc3QgYXQgYWxsID8KCiAgICAgICAgICAgIGlmKCBmaWxlX2V4aXN0cygkYmFzZWNzaW0pICYmIGZpbGVfZXhpc3RzKCRiYXNlaW1nKSApIHsKICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgaXQgaGFzbid0IHRpbWVkIG91dAogICAgICAgICAgICAgICAgJGRpZmY9dGltZSgpLWZpbGVtdGltZSgkYmFzZWNzaW0pOwogICAgICAgICAgICAgICAgaWYoICR0aGlzLT5jc2ltY2FjaGV0aW1lb3V0PjAgJiYgKCRkaWZmID4gJHRoaXMtPmNzaW1jYWNoZXRpbWVvdXQqNjApICkgewogICAgICAgICAgICAgICAgICAgICR0aW1lZG91dD10cnVlOwogICAgICAgICAgICAgICAgICAgIEB1bmxpbmsoJGJhc2Vjc2ltKTsKICAgICAgICAgICAgICAgICAgICBAdW5saW5rKCRiYXNlaW1nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmICgkZmggPSBAZm9wZW4oJGJhc2Vjc2ltLCAiciIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZwYXNzdGhydSgkZmgpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEpwR3JhcGhFcnJvcjo6UmFpc2VMKDI1MDI3LCRiYXNlY3NpbSk7Ly8oIiBDYW4ndCBvcGVuIGNhY2hlZCBDU0lNIFwiJGJhc2Vjc2ltXCIgZm9yIHJlYWRpbmcuIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLyBCdWlsZCB0aGUgYXJndW1lbnQgc3RyaW5nIHRvIGJlIHVzZWQgd2l0aCB0aGUgY3NpbSBpbWFnZXMKICAgIHN0YXRpYyBmdW5jdGlvbiBHZXRVUkxBcmd1bWVudHMoJGFBZGRSZWN1cnNpdmVCbG9ja2VyPWZhbHNlKSB7CgogICAgICAgIGlmKCAkYUFkZFJlY3Vyc2l2ZUJsb2NrZXIgKSB7CiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBKUEdSQVBIIGludGVybmFsIGRlZmluZWQgdGhhdCBwcmV2ZW50cwogICAgICAgICAgICAvLyB1cyBmcm9tIHJlY3Vyc2l2ZWx5IGNvbWluZyBoZXJlIGFnYWluCiAgICAgICAgICAgICR1cmxhcmcgPSBfQ1NJTV9ESVNQTEFZLic9MSc7CiAgICAgICAgfQoKICAgICAgICAvLyBOb3cgcmVjb25zdHJ1Y3QgYW55IHVzZXIgVVJMIGFyZ3VtZW50CiAgICAgICAgcmVzZXQoJF9HRVQpOwogICAgICAgIHdoaWxlKCBsaXN0KCRrZXksJHZhbHVlKSA9IGVhY2goJF9HRVQpICkgewogICAgICAgICAgICBpZiggaXNfYXJyYXkoJHZhbHVlKSApIHsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCAkdmFsdWUgYXMgJGsgPT4gJHYgKSB7CiAgICAgICAgICAgICAgICAgICAgJHVybGFyZyAuPSAnJmFtcDsnLiRrZXkuJyU1QicuJGsuJyU1RD0nLnVybGVuY29kZSgkdik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkdXJsYXJnIC49ICcmYW1wOycuJGtleS4nPScudXJsZW5jb2RlKCR2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIEl0J3Mgbm90IGlkZWFsIHRvIGNvbnZlcnQgUE9TVCBhcmd1bWVudCB0byBHRVQgYXJndW1lbnRzCiAgICAgICAgLy8gYnV0IHRoZXJlIGlzIGxpdHRsZSBlbHNlIHdlIGNhbiBkby4gT25lIGlkZWEgZm9yIHRoZQogICAgICAgIC8vIGZ1dHVyZSBtaWdodCBiZSByZWNyZWF0ZSB0aGUgUE9TVCBoZWFkZXIgaW4gY2FzZS4KICAgICAgICByZXNldCgkX1BPU1QpOwogICAgICAgIHdoaWxlKCBsaXN0KCRrZXksJHZhbHVlKSA9IGVhY2goJF9QT1NUKSApIHsKICAgICAgICAgICAgaWYoIGlzX2FycmF5KCR2YWx1ZSkgKSB7CiAgICAgICAgICAgICAgICBmb3JlYWNoICggJHZhbHVlIGFzICRrID0+ICR2ICkgewogICAgICAgICAgICAgICAgICAgICR1cmxhcmcgLj0gJyZhbXA7Jy4ka2V5LiclNUInLiRrLiclNUQ9Jy51cmxlbmNvZGUoJHYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJHVybGFyZyAuPSAnJmFtcDsnLiRrZXkuJz0nLnVybGVuY29kZSgkdmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJHVybGFyZzsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRDU0lNSW1nQWx0KCRhQWx0KSB7CiAgICAgICAgJHRoaXMtPmlDU0lNSW1nQWx0ID0gJGFBbHQ7CiAgICB9CgogICAgZnVuY3Rpb24gU3Ryb2tlQ1NJTSgkYVNjcmlwdE5hbWU9J2F1dG8nLCRhQ1NJTU5hbWU9JycsJGFCb3JkZXI9MCkgewogICAgICAgIGlmKCAkYUNTSU1OYW1lPT0nJyApIHsKICAgICAgICAgICAgLy8gY3JlYXRlIGEgcmFuZG9tIG1hcCBuYW1lCiAgICAgICAgICAgIHNyYW5kICgoZG91YmxlKSBtaWNyb3RpbWUoKSAqIDEwMDAwMDApOwogICAgICAgICAgICAkciA9IHJhbmQoMCwxMDAwMDApOwogICAgICAgICAgICAkYUNTSU1OYW1lPSdfX21hcG5hbWUnLiRyLidfXyc7CiAgICAgICAgfQoKICAgICAgICBpZiggJGFTY3JpcHROYW1lPT0nYXV0bycgKSB7CiAgICAgICAgICAgICRhU2NyaXB0TmFtZT1iYXNlbmFtZSgkX1NFUlZFUlsnUEhQX1NFTEYnXSk7CiAgICAgICAgfQoKICAgICAgICAkdXJsYXJnID0gJHRoaXMtPkdldFVSTEFyZ3VtZW50cyh0cnVlKTsKCiAgICAgICAgaWYoIGVtcHR5KCRfR0VUW19DU0lNX0RJU1BMQVldKSApIHsKICAgICAgICAgICAgLy8gRmlyc3QgZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gY2hlY2sgZm9yIGEgY2FjaGVkIHZlcnNpb24KICAgICAgICAgICAgLy8gVGhpcyBkaWZmZXJzIGZyb20gdGhlIHN0YW5kYXJkIGNhY2hlIGluIHRoZSBzZW5zZSB0aGF0IHRoZQogICAgICAgICAgICAvLyBpbWFnZSBhbmQgQ1NJTSBtYXAgSFRNTCBmaWxlIGlzIHdyaXR0ZW4gcmVsYXRpdmUgdG8gdGhlIGRpcmVjdG9yeQogICAgICAgICAgICAvLyB0aGUgc2NyaXB0IGV4ZWN1dGVzIGluIGFuZCBub3QgdGhlIHNwZWNpZmllZCBjYWNoZSBkaXJlY3RvcnkuCiAgICAgICAgICAgIC8vIFRoZSByZWFzb24gZm9yIHRoaXMgaXMgdGhhdCB0aGUgY2FjaGUgZGlyZWN0b3J5IGlzIG5vdCBuZWNlc3NhcmlseQogICAgICAgICAgICAvLyBhY2Nlc3NpYmxlIGZyb20gdGhlIEhUVFAgc2VydmVyLgogICAgICAgICAgICBpZiggJHRoaXMtPmNzaW1jYWNoZW5hbWUgIT0gJycgKSB7CiAgICAgICAgICAgICAgICAkZGlyID0gZGlybmFtZSgkdGhpcy0+Y3NpbWNhY2hlbmFtZSk7CiAgICAgICAgICAgICAgICAkYmFzZSA9IGJhc2VuYW1lKCR0aGlzLT5jc2ltY2FjaGVuYW1lKTsKICAgICAgICAgICAgICAgICRiYXNlID0gc3RydG9rKCRiYXNlLCcuJyk7CiAgICAgICAgICAgICAgICAkc3VmZml4ID0gc3RydG9rKCcuJyk7CiAgICAgICAgICAgICAgICAkYmFzZWNzaW0gPSAkZGlyLicvJy4kYmFzZS4nPycuJHVybGFyZy4nX2NzaW1fLmh0bWwnOwogICAgICAgICAgICAgICAgJGJhc2VpbWcgPSAkYmFzZS4nPycuJHVybGFyZy4nLicuJHRoaXMtPmltZy0+aW1nX2Zvcm1hdDsKCiAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IGFwYWNoZSBjYW4gd3JpdGUgdG8gZGlyZWN0b3J5IHNwZWNpZmllZAoKICAgICAgICAgICAgICAgIGlmKCBmaWxlX2V4aXN0cygkZGlyKSAmJiAhaXNfd3JpdGVhYmxlKCRkaXIpICkgewogICAgICAgICAgICAgICAgICAgIEpwZ3JhcGhFcnJvcjo6UmFpc2VMKDI1MDI4LCRkaXIpOy8vKCdBcGFjaGUvUEhQIGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiB0byB3cml0ZSB0byB0aGUgQ1NJTSBjYWNoZSBkaXJlY3RvcnkgKCcuJGRpci4nKS4gQ2hlY2sgcGVybWlzc2lvbnMuJyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIGRpcmVjdG9yeSBleGlzdHMKICAgICAgICAgICAgICAgICR0aGlzLT5jYWNoZS0+TWFrZURpcnMoJGRpcik7CgogICAgICAgICAgICAgICAgLy8gV3JpdGUgdGhlIGltYWdlIGZpbGUKICAgICAgICAgICAgICAgICR0aGlzLT5TdHJva2UoQ1NJTUNBQ0hFX0RJUi4kYmFzZWltZyk7CgogICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0IHdyYXBwZXIgSFRNTCBhbmQgd3JpdGUgdG8gZmlsZSBhbmQgc2VuZCBpdCBiYWNrIHRvIGJyb3dzZXIKCiAgICAgICAgICAgICAgICAvLyBJbiB0aGUgc3JjIFVSTCB3ZSBtdXN0IHJlcGxhY2UgdGhlICc\/JyB3aXRoIGl0cyBlbmNvZGluZyB0byBwcmV2ZW50IHRoZSBhcmd1bWVudHMKICAgICAgICAgICAgICAgIC8vIHRvIGJlIGNvbnZlcnRlZCB0byByZWFsIGFyZ3VtZW50cy4KICAgICAgICAgICAgICAgICR0bXAgPSBzdHJfcmVwbGFjZSgnPycsJyUzZicsJGJhc2VpbWcpOwogICAgICAgICAgICAgICAgJGh0bWx3cmFwID0gJHRoaXMtPkdldEhUTUxJbWFnZU1hcCgkYUNTSU1OYW1lKS4iXG4iLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbWcgc3JjPSInLkNTSU1DQUNIRV9IVFRQX0RJUi4kdG1wLiciIGlzbWFwPSJpc21hcCIgdXNlbWFwPSIjJy4kYUNTSU1OYW1lLicgd2lkdGg9IicuJHRoaXMtPmltZy0+d2lkdGguJyIgaGVpZ2h0PSInLiR0aGlzLT5pbWctPmhlaWdodC4iXCIgYWx0PVwiIi4kdGhpcy0+aUNTSU1JbWdBbHQuIlwiIC8+XG4iOwoKICAgICAgICAgICAgICAgIGlmKCRmaCA9ICBAZm9wZW4oJGJhc2Vjc2ltLCd3JykgKSB7CiAgICAgICAgICAgICAgICAgICAgZndyaXRlKCRmaCwkaHRtbHdyYXApOwogICAgICAgICAgICAgICAgICAgIGZjbG9zZSgkZmgpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gJGh0bWx3cmFwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgSnBHcmFwaEVycm9yOjpSYWlzZUwoMjUwMjksJGJhc2Vjc2ltKTsvLygiIENhbid0IHdyaXRlIENTSU0gXCIkYmFzZWNzaW1cIiBmb3Igd3JpdGluZy4gQ2hlY2sgZnJlZSBzcGFjZSBhbmQgcGVybWlzc2lvbnMuIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CgogICAgICAgICAgICAgICAgaWYoICRhU2NyaXB0TmFtZT09JycgKSB7CiAgICAgICAgICAgICAgICAgICAgSnBHcmFwaEVycm9yOjpSYWlzZUwoMjUwMzApOy8vKCdNaXNzaW5nIHNjcmlwdCBuYW1lIGluIGNhbGwgdG8gU3Ryb2tlQ1NJTSgpLiBZb3UgbXVzdCBzcGVjaWZ5IHRoZSBuYW1lIG9mIHRoZSBhY3R1YWwgaW1hZ2Ugc2NyaXB0IGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIgdG8gU3Ryb2tlQ1NJTSgpLicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWNobyAkdGhpcy0+R2V0SFRNTEltYWdlTWFwKCRhQ1NJTU5hbWUpIC4gJHRoaXMtPkdldENTSU1JbWdIVE1MKCRhQ1NJTU5hbWUsICRhU2NyaXB0TmFtZSwgJGFCb3JkZXIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkdGhpcy0+U3Ryb2tlKCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIFN0cm9rZUNTSU1JbWFnZSgpIHsKICAgICAgICBpZiggQCRfR0VUW19DU0lNX0RJU1BMQVldID09IDEgKSB7CiAgICAgICAgICAgICR0aGlzLT5TdHJva2UoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gR2V0Q1NJTUltZ0hUTUwoJGFDU0lNTmFtZSwgJGFTY3JpcHROYW1lPSdhdXRvJywgJGFCb3JkZXI9MCApIHsKICAgICAgICBpZiggJGFTY3JpcHROYW1lPT0nYXV0bycgKSB7CiAgICAgICAgICAgICRhU2NyaXB0TmFtZT1iYXNlbmFtZSgkX1NFUlZFUlsnUEhQX1NFTEYnXSk7CiAgICAgICAgfQogICAgICAgICR1cmxhcmcgPSAkdGhpcy0+R2V0VVJMQXJndW1lbnRzKHRydWUpOwogICAgICAgIHJldHVybiAiPGltZyBzcmM9XCIiLiRhU2NyaXB0TmFtZS4nPycuJHVybGFyZy4iXCIgaXNtYXA9XCJpc21hcFwiIHVzZW1hcD1cIiMiLiRhQ1NJTU5hbWUuJyIgaGVpZ2h0PSInLiR0aGlzLT5pbWctPmhlaWdodC4iXCIgYWx0PVwiIi4kdGhpcy0+aUNTSU1JbWdBbHQuIlwiIC8+XG4iOwogICAgfQoKICAgIGZ1bmN0aW9uIEdldFRleHRzWU1pbk1heCgkYVkyPWZhbHNlKSB7CiAgICAgICAgaWYoICRhWTIgKSB7CiAgICAgICAgICAgICR0eHRzID0gJHRoaXMtPnkydGV4dHM7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkdHh0cyA9ICR0aGlzLT50ZXh0czsKICAgICAgICB9CiAgICAgICAgJG4gPSBjb3VudCgkdHh0cyk7CiAgICAgICAgJG1pbj1udWxsOwogICAgICAgICRtYXg9bnVsbDsKICAgICAgICBmb3IoICRpPTA7ICRpIDwgJG47ICsrJGkgKSB7CiAgICAgICAgICAgIGlmKCAkdHh0c1skaV0tPmlTY2FsZVBvc1kgIT09IG51bGwgJiYgJHR4dHNbJGldLT5pU2NhbGVQb3NYICE9PSBudWxsICApIHsKICAgICAgICAgICAgICAgIGlmKCAkbWluID09PSBudWxsICApIHsKICAgICAgICAgICAgICAgICAgICAkbWluID0gJG1heCA9ICR0eHRzWyRpXS0+aVNjYWxlUG9zWSA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkbWluID0gbWluKCRtaW4sJHR4dHNbJGldLT5pU2NhbGVQb3NZKTsKICAgICAgICAgICAgICAgICAgICAkbWF4ID0gbWF4KCRtYXgsJHR4dHNbJGldLT5pU2NhbGVQb3NZKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiggJG1pbiAhPT0gbnVsbCApIHsKICAgICAgICAgICAgcmV0dXJuIGFycmF5KCRtaW4sJG1heCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gR2V0VGV4dHNYTWluTWF4KCRhWTI9ZmFsc2UpIHsKICAgICAgICBpZiggJGFZMiApIHsKICAgICAgICAgICAgJHR4dHMgPSAkdGhpcy0+eTJ0ZXh0czsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICR0eHRzID0gJHRoaXMtPnRleHRzOwogICAgICAgIH0KICAgICAgICAkbiA9IGNvdW50KCR0eHRzKTsKICAgICAgICAkbWluPW51bGw7CiAgICAgICAgJG1heD1udWxsOwogICAgICAgIGZvciggJGk9MDsgJGkgPCAkbjsgKyskaSApIHsKICAgICAgICAgICAgaWYoICR0eHRzWyRpXS0+aVNjYWxlUG9zWSAhPT0gbnVsbCAmJiAkdHh0c1skaV0tPmlTY2FsZVBvc1ggIT09IG51bGwgICkgewogICAgICAgICAgICAgICAgaWYoICRtaW4gPT09IG51bGwgICkgewogICAgICAgICAgICAgICAgICAgICRtaW4gPSAkbWF4ID0gJHR4dHNbJGldLT5pU2NhbGVQb3NYIDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRtaW4gPSBtaW4oJG1pbiwkdHh0c1skaV0tPmlTY2FsZVBvc1gpOwogICAgICAgICAgICAgICAgICAgICRtYXggPSBtYXgoJG1heCwkdHh0c1skaV0tPmlTY2FsZVBvc1gpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmKCAkbWluICE9PSBudWxsICkgewogICAgICAgICAgICByZXR1cm4gYXJyYXkoJG1pbiwkbWF4KTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBHZXRYTWluTWF4KCkgewoKICAgICAgICBsaXN0KCRtaW4sJHltaW4pID0gJHRoaXMtPnBsb3RzWzBdLT5NaW4oKTsKICAgICAgICBsaXN0KCRtYXgsJHltYXgpID0gJHRoaXMtPnBsb3RzWzBdLT5NYXgoKTsKCiAgICAgICAgJGk9MDsKICAgICAgICAvLyBTb21lIHBsb3RzLCBlLmcuIFBsb3RMaW5lIHNob3VsZCBub3QgYWZmZWN0IHRoZSBzY2FsZQogICAgICAgIC8vIGFuZCB3aWxsIHJldHVybiAobnVsbCxudWxsKS4gV2Ugc2hvdWxkIGlnbm9yZSB0aG9zZQogICAgICAgIC8vIHZhbHVlcy4KICAgICAgICB3aGlsZSggKCRtaW49PT1udWxsIHx8ICRtYXggPT09IG51bGwpICYmICgkaSA8IGNvdW50KCR0aGlzLT5wbG90cyktMSkgKSB7CiAgICAgICAgICAgICsrJGk7CiAgICAgICAgICAgIGxpc3QoJG1pbiwkeW1pbikgPSAkdGhpcy0+cGxvdHNbJGldLT5NaW4oKTsKICAgICAgICAgICAgbGlzdCgkbWF4LCR5bWF4KSA9ICR0aGlzLT5wbG90c1skaV0tPk1heCgpOwogICAgICAgIH0KCiAgICAgICAgZm9yZWFjaCggJHRoaXMtPnBsb3RzIGFzICRwICkgewogICAgICAgICAgICBsaXN0KCR4bWluLCR5bWluKSA9ICRwLT5NaW4oKTsKICAgICAgICAgICAgbGlzdCgkeG1heCwkeW1heCkgPSAkcC0+TWF4KCk7CgogICAgICAgICAgICBpZiggJHhtaW4gIT09IG51bGwgJiYgJHhtYXggIT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICAkbWluID0gTWluKCR4bWluLCRtaW4pOwogICAgICAgICAgICAgICAgJG1heCA9IE1heCgkeG1heCwkbWF4KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYoICR0aGlzLT55MmF4aXMgIT0gbnVsbCApIHsKICAgICAgICAgICAgZm9yZWFjaCggJHRoaXMtPnkycGxvdHMgYXMgJHAgKSB7CiAgICAgICAgICAgICAgICBsaXN0KCR4bWluLCR5bWluKSA9ICRwLT5NaW4oKTsKICAgICAgICAgICAgICAgIGxpc3QoJHhtYXgsJHltYXgpID0gJHAtPk1heCgpOwogICAgICAgICAgICAgICAgJG1pbiA9IE1pbigkeG1pbiwkbWluKTsKICAgICAgICAgICAgICAgICRtYXggPSBNYXgoJHhtYXgsJG1heCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRuID0gY291bnQoJHRoaXMtPnluYXhpcyk7CiAgICAgICAgZm9yKCAkaT0wOyAkaSA8ICRuOyArKyRpICkgewogICAgICAgICAgICBpZiggJHRoaXMtPnluYXhpc1skaV0gIT0gbnVsbCkgewogICAgICAgICAgICAgICAgZm9yZWFjaCggJHRoaXMtPnlucGxvdHNbJGldIGFzICRwICkgewogICAgICAgICAgICAgICAgICAgIGxpc3QoJHhtaW4sJHltaW4pID0gJHAtPk1pbigpOwogICAgICAgICAgICAgICAgICAgIGxpc3QoJHhtYXgsJHltYXgpID0gJHAtPk1heCgpOwogICAgICAgICAgICAgICAgICAgICRtaW4gPSBNaW4oJHhtaW4sJG1pbik7CiAgICAgICAgICAgICAgICAgICAgJG1heCA9IE1heCgkeG1heCwkbWF4KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gYXJyYXkoJG1pbiwkbWF4KTsKICAgIH0KCiAgICBmdW5jdGlvbiBBZGp1c3RNYXJnaW5zRm9yVGl0bGVzKCkgewogICAgICAgICR0b3RyZXF1aXJlZCA9IAogICAgICAgICAgICAoJHRoaXMtPnRpdGxlLT50ICE9ICcnIAogICAgICAgICAgICAgICAgPyAkdGhpcy0+dGl0bGUtPkdldFRleHRIZWlnaHQoJHRoaXMtPmltZykgKyAkdGhpcy0+dGl0bGUtPm1hcmdpbiArIDUgKiBTVVBFUlNBTVBMSU5HX1NDQUxFCiAgICAgICAgICAgICAgICA6IDAgKSArCiAgICAgICAgICAgICgkdGhpcy0+c3VidGl0bGUtPnQgIT0gJycgCiAgICAgICAgICAgICAgICA\\/CiAgICAgICAgaWYoICR0aGlzLT5ib3hlZCApIHsKICAgICAgICAgICAgJHRoaXMtPmltZy0+U2V0TGluZVdlaWdodCgxKTsKICAgICAgICAgICAgJHRoaXMtPmltZy0+U2V0TGluZVN0eWxlKCdzb2xpZCcpOwogICAgICAgICAgICAkdGhpcy0+aW1nLT5TZXRDb2xvcigkdGhpcy0+Ym94X2NvbG9yKTsKICAgICAgICAgICAgZm9yKCRpPTA7ICRpIDwgJHRoaXMtPmJveF93ZWlnaHQ7ICsrJGkgKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5SZWN0YW5nbGUoCiAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5sZWZ0X21hcmdpbi0kaSwkdGhpcy0+aW1nLT50b3BfbWFyZ2luLSRpLAogICAgICAgICAgICAgICAgJHRoaXMtPmltZy0+d2lkdGgtJHRoaXMtPmltZy0+cmlnaHRfbWFyZ2luKyRpLAogICAgICAgICAgICAgICAgJHRoaXMtPmltZy0+aGVpZ2h0LSR0aGlzLT5pbWctPmJvdHRvbV9tYXJnaW4rJGkpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIFNldFRpdGxlQmFja2dyb3VuZEZpbGxTdHlsZSgkYVN0eWxlLCRhQ29sb3IxPSdibGFjaycsJGFDb2xvcjI9J3doaXRlJykgewogICAgICAgICR0aGlzLT50aXRsZWJrZ19maWxsc3R5bGUgPSAkYVN0eWxlOwogICAgICAgICR0aGlzLT50aXRsZWJrZ19zY29sb3IxID0gJGFDb2xvcjE7CiAgICAgICAgJHRoaXMtPnRpdGxlYmtnX3Njb2xvcjIgPSAkYUNvbG9yMjsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRUaXRsZUJhY2tncm91bmQoJGFCYWNrQ29sb3I9J2dyYXknLCAkYVN0eWxlPVRJVExFQktHX1NUWUxFMSwgJGFGcmFtZVN0eWxlPVRJVExFQktHX0ZSQU1FX05PTkUsICRhRnJhbWVDb2xvcj0nYmxhY2snLCAkYUZyYW1lV2VpZ2h0PTEsICRhQmV2ZWxIZWlnaHQ9MywgJGFFbmFibGU9dHJ1ZSkgewogICAgICAgICR0aGlzLT50aXRsZWJhY2tncm91bmQgPSAkYUVuYWJsZTsKICAgICAgICAkdGhpcy0+dGl0bGViYWNrZ3JvdW5kX2NvbG9yID0gJGFCYWNrQ29sb3I7CiAgICAgICAgJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9zdHlsZSA9ICRhU3R5bGU7CiAgICAgICAgJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9mcmFtZWNvbG9yID0gJGFGcmFtZUNvbG9yOwogICAgICAgICR0aGlzLT50aXRsZWJhY2tncm91bmRfZnJhbWVzdHlsZSA9ICRhRnJhbWVTdHlsZTsKICAgICAgICAkdGhpcy0+dGl0bGViYWNrZ3JvdW5kX2ZyYW1ld2VpZ2h0ID0gJGFGcmFtZVdlaWdodDsKICAgICAgICAkdGhpcy0+dGl0bGViYWNrZ3JvdW5kX2JldmVsaGVpZ2h0ID0gJGFCZXZlbEhlaWdodCA7CiAgICB9CgoKICAgIGZ1bmN0aW9uIFN0cm9rZVRpdGxlcygpIHsKCiAgICAgICAgJG1hcmdpbj0zOwoKICAgICAgICBpZiggJHRoaXMtPnRpdGxlYmFja2dyb3VuZCApIHsKICAgICAgICAgICAgLy8gRmluZCBvdXQgaGVpZ2h0CiAgICAgICAgICAgICR0aGlzLT50aXRsZS0+bWFyZ2luICs9IDIgOwogICAgICAgICAgICAkaCA9ICR0aGlzLT50aXRsZS0+R2V0VGV4dEhlaWdodCgkdGhpcy0+aW1nKSskdGhpcy0+dGl0bGUtPm1hcmdpbiskbWFyZ2luOwogICAgICAgICAgICBpZiggJHRoaXMtPnN1YnRpdGxlLT50ICE9ICcnICYmICEkdGhpcy0+c3VidGl0bGUtPmhpZGUgKSB7CiAgICAgICAgICAgICAgICAkaCArPSAkdGhpcy0+c3VidGl0bGUtPkdldFRleHRIZWlnaHQoJHRoaXMtPmltZykrJG1hcmdpbisKICAgICAgICAgICAgICAgICR0aGlzLT5zdWJ0aXRsZS0+bWFyZ2luOwogICAgICAgICAgICAgICAgJGggKz0gMjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiggJHRoaXMtPnN1YnN1YnRpdGxlLT50ICE9ICcnICYmICEkdGhpcy0+c3Vic3VidGl0bGUtPmhpZGUgKSB7CiAgICAgICAgICAgICAgICAkaCArPSAkdGhpcy0+c3Vic3VidGl0bGUtPkdldFRleHRIZWlnaHQoJHRoaXMtPmltZykrJG1hcmdpbisKICAgICAgICAgICAgICAgICR0aGlzLT5zdWJzdWJ0aXRsZS0+bWFyZ2luOwogICAgICAgICAgICAgICAgJGggKz0gMjsKICAgICAgICAgICAgfQogICAgICAgICAgICAkdGhpcy0+aW1nLT5QdXNoQ29sb3IoJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9jb2xvcik7CiAgICAgICAgICAgIGlmKCAkdGhpcy0+dGl0bGViYWNrZ3JvdW5kX3N0eWxlID09PSBUSVRMRUJLR19TVFlMRTEgKSB7CiAgICAgICAgICAgICAgICAvLyBJbnNpZGUgdGhlIGZyYW1lCiAgICAgICAgICAgICAgICBpZiggJHRoaXMtPmZyYW1lYmV2ZWwgKSB7CiAgICAgICAgICAgICAgICAgICAgJHgxID0gJHkxID0gJHRoaXMtPmZyYW1lYmV2ZWxkZXB0aCArIDEgOwogICAgICAgICAgICAgICAgICAgICR4MiA9ICR0aGlzLT5pbWctPndpZHRoIC0gJHRoaXMtPmZyYW1lYmV2ZWxkZXB0aCAtIDIgOwogICAgICAgICAgICAgICAgICAgICR0aGlzLT50aXRsZS0+bWFyZ2luICs9ICR0aGlzLT5mcmFtZWJldmVsZGVwdGggKyAxIDsKICAgICAgICAgICAgICAgICAgICAkaCArPSAkeTEgOwogICAgICAgICAgICAgICAgICAgICRoICs9IDI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkeDEgPSAkeTEgPSAkdGhpcy0+ZnJhbWVfd2VpZ2h0OwogICAgICAgICAgICAgICAgICAgICR4MiA9ICR0aGlzLT5pbWctPndpZHRoIC0gJHRoaXMtPmZyYW1lX3dlaWdodC0xOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZiggJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9zdHlsZSA9PT0gVElUTEVCS0dfU1RZTEUyICkgewogICAgICAgICAgICAgICAgLy8gQ292ZXIgdGhlIGZyYW1lIGFzIHdlbGwKICAgICAgICAgICAgICAgICR4MSA9ICR5MSA9IDA7CiAgICAgICAgICAgICAgICAkeDIgPSAkdGhpcy0+aW1nLT53aWR0aCAtIDEgOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZiggJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9zdHlsZSA9PT0gVElUTEVCS0dfU1RZTEUzICkgewogICAgICAgICAgICAgICAgLy8gQ292ZXIgdGhlIGZyYW1lIGFzIHdlbGwgKHRoZSBkaWZmZXJlbmNlIGlzIHRoYXQKICAgICAgICAgICAgICAgIC8vIGZvciBzdHlsZT09MyBhIGJldmVsIGZyYW1lIGJvcmRlciBpcyBvbiB0b3AKICAgICAgICAgICAgICAgIC8vIG9mIHRoZSB0aXRsZSBiYWNrZ3JvdW5kKQogICAgICAgICAgICAgICAgJHgxID0gJHkxID0gMDsKICAgICAgICAgICAgICAgICR4MiA9ICR0aGlzLT5pbWctPndpZHRoIC0gMSA7CiAgICAgICAgICAgICAgICAkaCArPSAkdGhpcy0+ZnJhbWViZXZlbGRlcHRoIDsKICAgICAgICAgICAgICAgICR0aGlzLT50aXRsZS0+bWFyZ2luICs9ICR0aGlzLT5mcmFtZWJldmVsZGVwdGggOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgSnBHcmFwaEVycm9yOjpSYWlzZUwoMjUwNDMpOy8vKCdVbmtub3duIHRpdGxlIGJhY2tncm91bmQgc3R5bGUuJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCAkdGhpcy0+dGl0bGViYWNrZ3JvdW5kX2ZyYW1lc3R5bGUgPT09IDMgKSB7CiAgICAgICAgICAgICAgICAkaCArPSAkdGhpcy0+dGl0bGViYWNrZ3JvdW5kX2JldmVsaGVpZ2h0KjIgKyAxICA7CiAgICAgICAgICAgICAgICAkdGhpcy0+dGl0bGUtPm1hcmdpbiArPSAkdGhpcy0+dGl0bGViYWNrZ3JvdW5kX2JldmVsaGVpZ2h0IDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoICR0aGlzLT5kb3NoYWRvdyApIHsKICAgICAgICAgICAgICAgICR4MiAtPSAkdGhpcy0+c2hhZG93X3dpZHRoIDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGluZGVudD0wOwogICAgICAgICAgICBpZiggJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9mcmFtZXN0eWxlID09IFRJVExFQktHX0ZSQU1FX0JFVkVMICkgewogICAgICAgICAgICAgICAgJGluZGVudCA9ICR0aGlzLT50aXRsZWJhY2tncm91bmRfYmV2ZWxoZWlnaHQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCAkdGhpcy0+dGl0bGVia2dfZmlsbHN0eWxlPT1USVRMRUJLR19GSUxMU1RZTEVfSFNUUklQRUQgKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5GaWxsZWRSZWN0YW5nbGUyKCR4MSskaW5kZW50LCR5MSskaW5kZW50LCR4Mi0kaW5kZW50LCRoLSRpbmRlbnQsCiAgICAgICAgICAgICAgICAkdGhpcy0+dGl0bGVia2dfc2NvbG9yMSwKICAgICAgICAgICAgICAgICR0aGlzLT50aXRsZWJrZ19zY29sb3IyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoICR0aGlzLT50aXRsZWJrZ19maWxsc3R5bGU9PVRJVExFQktHX0ZJTExTVFlMRV9WU1RSSVBFRCApIHsKICAgICAgICAgICAgICAgICR0aGlzLT5pbWctPkZpbGxlZFJlY3RhbmdsZTIoJHgxKyRpbmRlbnQsJHkxKyRpbmRlbnQsJHgyLSRpbmRlbnQsJGgtJGluZGVudCwKICAgICAgICAgICAgICAgICR0aGlzLT50aXRsZWJrZ19zY29sb3IxLAogICAgICAgICAgICAgICAgJHRoaXMtPnRpdGxlYmtnX3Njb2xvcjIsMik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBTb2xpZCBmaWxsCiAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5GaWxsZWRSZWN0YW5nbGUoJHgxLCR5MSwkeDIsJGgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICR0aGlzLT5pbWctPlBvcENvbG9yKCk7CgogICAgICAgICAgICAkdGhpcy0+aW1nLT5QdXNoQ29sb3IoJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9mcmFtZWNvbG9yKTsKICAgICAgICAgICAgJHRoaXMtPmltZy0+U2V0TGluZVdlaWdodCgkdGhpcy0+dGl0bGViYWNrZ3JvdW5kX2ZyYW1ld2VpZ2h0KTsKICAgICAgICAgICAgaWYoICR0aGlzLT50aXRsZWJhY2tncm91bmRfZnJhbWVzdHlsZSA9PSBUSVRMRUJLR19GUkFNRV9GVUxMICkgewogICAgICAgICAgICAgICAgLy8gRnJhbWUgYmFja2dyb3VuZAogICAgICAgICAgICAgICAgJHRoaXMtPmltZy0+UmVjdGFuZ2xlKCR4MSwkeTEsJHgyLCRoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoICR0aGlzLT50aXRsZWJhY2tncm91bmRfZnJhbWVzdHlsZSA9PSBUSVRMRUJLR19GUkFNRV9CT1RUT00gKSB7CiAgICAgICAgICAgICAgICAvLyBCb3R0b20gbGluZSBvbmx5CiAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5MaW5lKCR4MSwkaCwkeDIsJGgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZiggJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9mcmFtZXN0eWxlID09IFRJVExFQktHX0ZSQU1FX0JFVkVMICkgewogICAgICAgICAgICAgICAgJHRoaXMtPmltZy0+QmV2ZWwoJHgxLCR5MSwkeDIsJGgsJHRoaXMtPnRpdGxlYmFja2dyb3VuZF9iZXZlbGhlaWdodCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJHRoaXMtPmltZy0+UG9wQ29sb3IoKTsKCiAgICAgICAgICAgIC8vIFRoaXMgaXMgY2x1bXN5LiBCdXQgd2UgbmVlZWQgdG8gc3Ryb2tlIHRoZSB3aG9sZSBncmFwaCBmcmFtZSBpZiBpdCBpcwogICAgICAgICAgICAvLyBzZXQgdG8gYmV2ZWwgdG8gZ2V0IHRoZSBiZXZlbCBzaGFkaW5nIG9uIHRvcCBvZiB0aGUgdGV4dCBiYWNrZ3JvdW5kCiAgICAgICAgICAgIGlmKCAkdGhpcy0+ZnJhbWViZXZlbCAmJiAkdGhpcy0+ZG9mcmFtZSAmJiAkdGhpcy0+dGl0bGViYWNrZ3JvdW5kX3N0eWxlID09PSAzICkgewogICAgICAgICAgICAgICAgJHRoaXMtPmltZy0+QmV2ZWwoMSwxLCR0aGlzLT5pbWctPndpZHRoLTIsJHRoaXMtPmltZy0+aGVpZ2h0LTIsCiAgICAgICAgICAgICAgICAkdGhpcy0+ZnJhbWViZXZlbGRlcHRoLAogICAgICAgICAgICAgICAgJHRoaXMtPmZyYW1lYmV2ZWxjb2xvcjEsJHRoaXMtPmZyYW1lYmV2ZWxjb2xvcjIpOwogICAgICAgICAgICAgICAgaWYoICR0aGlzLT5mcmFtZWJldmVsYm9yZGVyICkgewogICAgICAgICAgICAgICAgICAgICR0aGlzLT5pbWctPlNldENvbG9yKCR0aGlzLT5mcmFtZWJldmVsYm9yZGVyY29sb3IpOwogICAgICAgICAgICAgICAgICAgICR0aGlzLT5pbWctPlJlY3RhbmdsZSgwLDAsJHRoaXMtPmltZy0+d2lkdGgtMSwkdGhpcy0+aW1nLT5oZWlnaHQtMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIFN0cm9rZSB0aXRsZQogICAgICAgICR5ID0gJHRoaXMtPnRpdGxlLT5tYXJnaW47CiAgICAgICAgaWYoICR0aGlzLT50aXRsZS0+aGFsaWduID09ICdjZW50ZXInICkgewogICAgICAgICAgICAkdGhpcy0+dGl0bGUtPkNlbnRlcigwLCR0aGlzLT5pbWctPndpZHRoLCR5KTsKICAgICAgICB9CiAgICAgICAgZWxzZWlmKCAkdGhpcy0+dGl0bGUtPmhhbGlnbiA9PSAnbGVmdCcgKSB7CiAgICAgICAgICAgICR0aGlzLT50aXRsZS0+U2V0UG9zKCR0aGlzLT50aXRsZS0+bWFyZ2luKzIsJHkpOwogICAgICAgIH0KICAgICAgICBlbHNlaWYoICR0aGlzLT50aXRsZS0+aGFsaWduID09ICdyaWdodCcgKSB7CiAgICAgICAgICAgICRpbmRlbnQgPSAwOwogICAgICAgICAgICBpZiggJHRoaXMtPmRvc2hhZG93ICkgewogICAgICAgICAgICAgICAgJGluZGVudCA9ICR0aGlzLT5zaGFkb3dfd2lkdGgrMjsKICAgICAgICAgICAgfQogICAgICAgICAgICAkdGhpcy0+dGl0bGUtPlNldFBvcygkdGhpcy0+aW1nLT53aWR0aC0kdGhpcy0+dGl0bGUtPm1hcmdpbi0kaW5kZW50LCR5LCdyaWdodCcpOwogICAgICAgIH0KICAgICAgICAkdGhpcy0+dGl0bGUtPlN0cm9rZSgkdGhpcy0+aW1nKTsKCiAgICAgICAgLy8gLi4uIGFuZCBzdWJ0aXRsZQogICAgICAgICR5ICs9ICR0aGlzLT50aXRsZS0+R2V0VGV4dEhlaWdodCgkdGhpcy0+aW1nKSArICRtYXJnaW4gKyAkdGhpcy0+c3VidGl0bGUtPm1hcmdpbjsKICAgICAgICBpZiggJHRoaXMtPnN1YnRpdGxlLT5oYWxpZ24gPT0gJ2NlbnRlcicgKSB7CiAgICAgICAgICAgICR0aGlzLT5zdWJ0aXRsZS0+Q2VudGVyKDAsJHRoaXMtPmltZy0+d2lkdGgsJHkpOwogICAgICAgIH0KICAgICAgICBlbHNlaWYoICR0aGlzLT5zdWJ0aXRsZS0+aGFsaWduID09ICdsZWZ0JyApIHsKICAgICAgICAgICAgJHRoaXMtPnN1YnRpdGxlLT5TZXRQb3MoJHRoaXMtPnN1YnRpdGxlLT5tYXJnaW4rMiwkeSk7CiAgICAgICAgfQogICAgICAgIGVsc2VpZiggJHRoaXMtPnN1YnRpdGxlLT5oYWxpZ24gPT0gJ3JpZ2h0JyApIHsKICAgICAgICAgICAgJGluZGVudCA9IDA7CiAgICAgICAgICAgIGlmKCAkdGhpcy0+ZG9zaGFkb3cgKQogICAgICAgICAgICAkaW5kZW50ID0gJHRoaXMtPnNoYWRvd193aWR0aCsyOwogICAgICAgICAgICAkdGhpcy0+c3VidGl0bGUtPlNldFBvcygkdGhpcy0+aW1nLT53aWR0aC0kdGhpcy0+c3VidGl0bGUtPm1hcmdpbi0kaW5kZW50LCR5LCdyaWdodCcpOwogICAgICAgIH0KICAgICAgICAkdGhpcy0+c3VidGl0bGUtPlN0cm9rZSgkdGhpcy0+aW1nKTsKCiAgICAgICAgLy8gLi4uIGFuZCBzdWJzdWJ0aXRsZQogICAgICAgICR5ICs9ICR0aGlzLT5zdWJ0aXRsZS0+R2V0VGV4dEhlaWdodCgkdGhpcy0+aW1nKSArICRtYXJnaW4gKyAkdGhpcy0+c3Vic3VidGl0bGUtPm1hcmdpbjsKICAgICAgICBpZiggJHRoaXMtPnN1YnN1YnRpdGxlLT5oYWxpZ24gPT0gJ2NlbnRlcicgKSB7CiAgICAgICAgICAgICR0aGlzLT5zdWJzdWJ0aXRsZS0+Q2VudGVyKDAsJHRoaXMtPmltZy0+d2lkdGgsJHkpOwogICAgICAgIH0KICAgICAgICBlbHNlaWYoICR0aGlzLT5zdWJzdWJ0aXRsZS0+aGFsaWduID09ICdsZWZ0JyApIHsKICAgICAgICAgICAgJHRoaXMtPnN1YnN1YnRpdGxlLT5TZXRQb3MoJHRoaXMtPnN1YnN1YnRpdGxlLT5tYXJnaW4rMiwkeSk7CiAgICAgICAgfQogICAgICAgIGVsc2VpZiggJHRoaXMtPnN1YnN1YnRpdGxlLT5oYWxpZ24gPT0gJ3JpZ2h0JyApIHsKICAgICAgICAgICAgJGluZGVudCA9IDA7CiAgICAgICAgICAgIGlmKCAkdGhpcy0+ZG9zaGFkb3cgKQogICAgICAgICAgICAkaW5kZW50ID0gJHRoaXMtPnNoYWRvd193aWR0aCsyOwogICAgICAgICAgICAkdGhpcy0+c3Vic3VidGl0bGUtPlNldFBvcygkdGhpcy0+aW1nLT53aWR0aC0kdGhpcy0+c3Vic3VidGl0bGUtPm1hcmdpbi0kaW5kZW50LCR5LCdyaWdodCcpOwogICAgICAgIH0KICAgICAgICAkdGhpcy0+c3Vic3VidGl0bGUtPlN0cm9rZSgkdGhpcy0+aW1nKTsKCiAgICAgICAgLy8gLi4uIGFuZCBmYW5jeSB0aXRsZQogICAgICAgICR0aGlzLT50YWJ0aXRsZS0+U3Ryb2tlKCR0aGlzLT5pbWcpOwoKICAgIH0KCiAgICBmdW5jdGlvbiBTdHJva2VUZXh0cygpIHsKICAgICAgICAvLyBTdHJva2UgYW55IHVzZXIgYWRkZWQgdGV4dCBvYmplY3RzCiAgICAgICAgaWYoICR0aGlzLT50ZXh0cyAhPSBudWxsICkgewogICAgICAgICAgICBmb3IoJGk9MDsgJGkgPCBjb3VudCgkdGhpcy0+dGV4dHMpOyArKyRpKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+dGV4dHNbJGldLT5TdHJva2VXaXRoU2NhbGUoJHRoaXMtPmltZywkdGhpcy0+eHNjYWxlLCR0aGlzLT55c2NhbGUpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiggJHRoaXMtPnkydGV4dHMgIT0gbnVsbCAmJiAkdGhpcy0+eTJzY2FsZSAhPSBudWxsICkgewogICAgICAgICAgICBmb3IoJGk9MDsgJGkgPCBjb3VudCgkdGhpcy0+eTJ0ZXh0cyk7ICsrJGkpIHsKICAgICAgICAgICAgICAgICR0aGlzLT55MnRleHRzWyRpXS0+U3Ryb2tlV2l0aFNjYWxlKCR0aGlzLT5pbWcsJHRoaXMtPnhzY2FsZSwkdGhpcy0+eTJzY2FsZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQoKICAgIGZ1bmN0aW9uIFN0cm9rZVRhYmxlcygpIHsKICAgICAgICBpZiggJHRoaXMtPmlUYWJsZXMgIT0gbnVsbCApIHsKICAgICAgICAgICAgJG4gPSBjb3VudCgkdGhpcy0+aVRhYmxlcyk7CiAgICAgICAgICAgIGZvciggJGk9MDsgJGkgPCAkbjsgKyskaSApIHsKICAgICAgICAgICAgICAgICR0aGlzLT5pVGFibGVzWyRpXS0+U3Ryb2tlV2l0aFNjYWxlKCR0aGlzLT5pbWcsJHRoaXMtPnhzY2FsZSwkdGhpcy0+eXNjYWxlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBEaXNwbGF5Q2xpZW50U2lkZWFJbWFnZU1hcEFyZWFzKCkgewogICAgICAgIC8vIERlYnVnIHN0dWZmIC0gZGlzcGxheSB0aGUgb3V0bGluZSBvZiB0aGUgaW1hZ2UgbWFwIGFyZWFzCiAgICAgICAgJGNzaW09Jyc7CiAgICAgICAgZm9yZWFjaCAoJHRoaXMtPnBsb3RzIGFzICRwKSB7CiAgICAgICAgICAgICRjc2ltLj0gJHAtPkdldENTSU1hcmVhcygpOwogICAgICAgIH0KICAgICAgICAkY3NpbSAuPSAkdGhpcy0+bGVnZW5kLT5HZXRDU0lNYXJlYXMoKTsKICAgICAgICBpZiAocHJlZ19tYXRjaF9hbGwoIi9hcmVhIHNoYXBlPVwiKFx3KylcIiBjb29yZHM9XCIoWzAtOVwsIF0rKVwiLyIsICRjc2ltLCAkY29vcmRzKSkgewogICAgICAgICAgICAkdGhpcy0+aW1nLT5TZXRDb2xvcigkdGhpcy0+Y3NpbWNvbG9yKTsKICAgICAgICAgICAgJG4gPSBjb3VudCgkY29vcmRzWzBdKTsKICAgICAgICAgICAgZm9yICgkaT0wOyAkaSA8ICRuOyAkaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoICRjb29yZHNbMV1bJGldID09ICdwb2x5JyApIHsKICAgICAgICAgICAgICAgICAgICBwcmVnX21hdGNoX2FsbCgnL1xzKihbMC05XSspXHMqLFxzKihbMC05XSspXHMqLCovJywkY29vcmRzWzJdWyRpXSwkcHRzKTsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5TZXRTdGFydFBvaW50KCRwdHNbMV1bY291bnQoJHB0c1swXSktMV0sJHB0c1syXVtjb3VudCgkcHRzWzBdKS0xXSk7CiAgICAgICAgICAgICAgICAgICAgJG0gPSBjb3VudCgkcHRzWzBdKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKCRqPTA7ICRqIDwgJG07ICRqKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmltZy0+TGluZVRvKCRwdHNbMV1bJGpdLCRwdHNbMl1bJGpdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoICRjb29yZHNbMV1bJGldID09ICdyZWN0JyApIHsKICAgICAgICAgICAgICAgICAgICAkcHRzID0gcHJlZ19zcGxpdCgnLywvJywgJGNvb3Jkc1syXVskaV0pOwogICAgICAgICAgICAgICAgICAgICR0aGlzLT5pbWctPlNldFN0YXJ0UG9pbnQoJHB0c1swXSwkcHRzWzFdKTsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5MaW5lVG8oJHB0c1syXSwkcHRzWzFdKTsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5MaW5lVG8oJHB0c1syXSwkcHRzWzNdKTsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5MaW5lVG8oJHB0c1swXSwkcHRzWzNdKTsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5MaW5lVG8oJHB0c1swXSwkcHRzWzFdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLyBUZXh0IHNjYWxlIG9mZnNldCBpbiB3b3JsZCBjb29yZGluYXRlcwogICAgZnVuY3Rpb24gU2V0VGV4dFNjYWxlT2ZmKCRhT2ZmKSB7CiAgICAgICAgJHRoaXMtPnRleHRfc2NhbGVfb2ZmID0gJGFPZmY7CiAgICAgICAgJHRoaXMtPnhzY2FsZS0+dGV4dF9zY2FsZV9vZmYgPSAkYU9mZjsKICAgIH0KCiAgICAvLyBUZXh0IHdpZHRoIG9mIGJhciB0byBiZSBjZW50ZXJlZCBpbiBhYnNvbHV0ZSBwaXhlbHMKICAgIGZ1bmN0aW9uIFNldFRleHRTY2FsZUFic0NlbnRlck9mZigkYU9mZikgewogICAgICAgICR0aGlzLT50ZXh0X3NjYWxlX2Fic2NlbnRlcm9mZiA9ICRhT2ZmOwogICAgfQoKICAgIC8vIEdldCBZIG1pbiBhbmQgbWF4IHZhbHVlcyBmb3IgYWRkZWQgbGluZXMKICAgIGZ1bmN0aW9uIEdldExpbmVzWU1pbk1heCggJGFMaW5lcyApIHsKICAgICAgICAkbiA9IGNvdW50KCRhTGluZXMpOwogICAgICAgIGlmKCAkbiA9PSAwICkgcmV0dXJuIGZhbHNlOwogICAgICAgICRtaW4gPSAkYUxpbmVzWzBdLT5zY2FsZXBvc2l0aW9uIDsKICAgICAgICAkbWF4ID0gJG1pbiA7CiAgICAgICAgJGZsZyA9IGZhbHNlOwogICAgICAgIGZvciggJGk9MDsgJGkgPCAkbjsgKyskaSApIHsKICAgICAgICAgICAgaWYoICRhTGluZXNbJGldLT5kaXJlY3Rpb24gPT0gSE9SSVpPTlRBTCApIHsKICAgICAgICAgICAgICAgICRmbGcgPSB0cnVlIDsKICAgICAgICAgICAgICAgICR2ID0gJGFMaW5lc1skaV0tPnNjYWxlcG9zaXRpb24gOwogICAgICAgICAgICAgICAgaWYoICRtaW4gPiAkdiApICRtaW4gPSAkdiA7CiAgICAgICAgICAgICAgICBpZiggJG1heCA8ICR2ICkgJG1heCA9ICR2IDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gJGZsZyA\\/CiAgICBwcm90ZWN0ZWQgJHRpdGxlX2FkanVzdCwkdGl0bGVfbWFyZ2luLCR0aXRsZV9zaWRlPVNJREVfTEVGVDsKICAgIHByb3RlY3RlZCAkdGlja19sYWJlbF9tYXJnaW49NTsKICAgIHByb3RlY3RlZCAkbGFiZWxfaGFsaWduID0gJycsJGxhYmVsX3ZhbGlnbiA9ICcnLCAkbGFiZWxfcGFyYV9hbGlnbj0nbGVmdCc7CiAgICBwcm90ZWN0ZWQgJGhpZGVfbGluZT1mYWxzZTsKICAgIHByb3RlY3RlZCAkaURlbHRhQWJzUG9zPTA7CgogICAgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGltZywkYVNjYWxlLCRjb2xvciA9IGFycmF5KDAsMCwwKSkgewogICAgICAgICR0aGlzLT5pbWcgPSAkaW1nOwogICAgICAgICR0aGlzLT5zY2FsZSA9ICRhU2NhbGU7CiAgICAgICAgJHRoaXMtPmNvbG9yID0gJGNvbG9yOwogICAgICAgICR0aGlzLT50aXRsZT1uZXcgVGV4dCgnJyk7CgogICAgICAgIGlmKCAkYVNjYWxlLT50eXBlID09ICd5JyApIHsKICAgICAgICAgICAgJHRoaXMtPnRpdGxlX21hcmdpbiA9IDI1OwogICAgICAgICAgICAkdGhpcy0+dGl0bGVfYWRqdXN0ID0gJ21pZGRsZSc7CiAgICAgICAgICAgICR0aGlzLT50aXRsZS0+U2V0T3JpZW50YXRpb24oOTApOwogICAgICAgICAgICAkdGhpcy0+dGlja19sYWJlbF9tYXJnaW49NzsKICAgICAgICAgICAgJHRoaXMtPmxhYmVsUG9zPVNJREVfTEVGVDsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICR0aGlzLT50aXRsZV9tYXJnaW4gPSA1OwogICAgICAgICAgICAkdGhpcy0+dGl0bGVfYWRqdXN0ID0gJ2hpZ2gnOwogICAgICAgICAgICAkdGhpcy0+dGl0bGUtPlNldE9yaWVudGF0aW9uKDApOwogICAgICAgICAgICAkdGhpcy0+dGlja19sYWJlbF9tYXJnaW49NTsKICAgICAgICAgICAgJHRoaXMtPmxhYmVsUG9zPVNJREVfRE9XTjsKICAgICAgICAgICAgJHRoaXMtPnRpdGxlX3NpZGU9U0lERV9ET1dOOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBTZXRMYWJlbEZvcm1hdCgkYUZvcm1TdHIpIHsKICAgICAgICAkdGhpcy0+c2NhbGUtPnRpY2tzLT5TZXRMYWJlbEZvcm1hdCgkYUZvcm1TdHIpOwogICAgfQoKICAgIGZ1bmN0aW9uIFNldExhYmVsRm9ybWF0U3RyaW5nKCRhRm9ybVN0ciwkYURhdGU9ZmFsc2UpIHsKICAgICAgICAkdGhpcy0+c2NhbGUtPnRpY2tzLT5TZXRMYWJlbEZvcm1hdCgkYUZvcm1TdHIsJGFEYXRlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRMYWJlbEZvcm1hdENhbGxiYWNrKCRhRnVuY05hbWUpIHsKICAgICAgICAkdGhpcy0+c2NhbGUtPnRpY2tzLT5TZXRGb3JtYXRDYWxsYmFjaygkYUZ1bmNOYW1lKTsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRMYWJlbEFsaWduKCRhSEFsaWduLCRhVkFsaWduPSd0b3AnLCRhUGFyYWdyYXBoQWxpZ249J2xlZnQnKSB7CiAgICAgICAgJHRoaXMtPmxhYmVsX2hhbGlnbiA9ICRhSEFsaWduOwogICAgICAgICR0aGlzLT5sYWJlbF92YWxpZ24gPSAkYVZBbGlnbjsKICAgICAgICAkdGhpcy0+bGFiZWxfcGFyYV9hbGlnbiA9ICRhUGFyYWdyYXBoQWxpZ247CiAgICB9CgogICAgLy8gRG9uJ3QgZGlzcGxheSB0aGUgZmlyc3QgbGFiZWwKICAgIGZ1bmN0aW9uIEhpZGVGaXJzdFRpY2tMYWJlbCgkYVNob3c9ZmFsc2UpIHsKICAgICAgICAkdGhpcy0+c2hvd19maXJzdF9sYWJlbD0kYVNob3c7CiAgICB9CgogICAgZnVuY3Rpb24gSGlkZUxhc3RUaWNrTGFiZWwoJGFTaG93PWZhbHNlKSB7CiAgICAgICAgJHRoaXMtPnNob3dfbGFzdF9sYWJlbD0kYVNob3c7CiAgICB9CgogICAgLy8gTWFudWFsbHkgc3BlY2lmeSB0aGUgbWFqb3IgYW5kIChvcHRpb25hbCkgbWlub3IgdGljayBwb3NpdGlvbiBhbmQgbGFiZWxzCiAgICBmdW5jdGlvbiBTZXRUaWNrUG9zaXRpb25zKCRhTWFqUG9zLCRhTWluUG9zPU5VTEwsJGFMYWJlbHM9TlVMTCkgewogICAgICAgICR0aGlzLT5zY2FsZS0+dGlja3MtPlNldFRpY2tQb3NpdGlvbnMoJGFNYWpQb3MsJGFNaW5Qb3MsJGFMYWJlbHMpOwogICAgfQoKICAgIC8vIE1hbnVhbGx5IHNwZWNpZnkgbWFqb3IgdGljayBwb3NpdGlvbnMgYW5kIG9wdGlvbmFsIGxhYmVscwogICAgZnVuY3Rpb24gU2V0TWFqVGlja1Bvc2l0aW9ucygkYU1halBvcywkYUxhYmVscz1OVUxMKSB7CiAgICAgICAgJHRoaXMtPnNjYWxlLT50aWNrcy0+U2V0VGlja1Bvc2l0aW9ucygkYU1halBvcyxOVUxMLCRhTGFiZWxzKTsKICAgIH0KCiAgICAvLyBIaWRlIG1pbm9yIG9yIG1ham9yIHRpY2sgbWFya3MKICAgIGZ1bmN0aW9uIEhpZGVUaWNrcygkYUhpZGVNaW5vcj10cnVlLCRhSGlkZU1ham9yPXRydWUpIHsKICAgICAgICAkdGhpcy0+c2NhbGUtPnRpY2tzLT5TdXByZXNzTWlub3JUaWNrTWFya3MoJGFIaWRlTWlub3IpOwogICAgICAgICR0aGlzLT5zY2FsZS0+dGlja3MtPlN1cHJlc3NUaWNrTWFya3MoJGFIaWRlTWFqb3IpOwogICAgfQoKICAgIC8vIEhpZGUgemVybyBsYWJlbAogICAgZnVuY3Rpb24gSGlkZVplcm9MYWJlbCgkYUZsYWc9dHJ1ZSkgewogICAgICAgICR0aGlzLT5zY2FsZS0+dGlja3MtPlN1cHJlc3NaZXJvTGFiZWwoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBIaWRlRmlyc3RMYXN0TGFiZWwoKSB7CiAgICAgICAgLy8gVGhlIHR3byBmaXJzdCBjYWxscyB0byB0aWNrcyBtZXRob2Qgd2lsbCBzdXByZXNzCiAgICAgICAgLy8gYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgc2NhbGUgdmFsdWVzLiBIb3dldmVyLCB0aGF0CiAgICAgICAgLy8gd2lsbCBub3QgYWZmZWN0IG1hbnVhbGx5IHNwZWNpZmllZCB2YWx1ZSwgZS5nIHRleHQtc2NhbGVzLgogICAgICAgIC8vIHRoZXJlZm9yIHdlIGFsc28gbWFrZSBhIGtsdWRnZSBoZXJlIHRvIHN1cHJlc3MgbWFudWFsbHkKICAgICAgICAvLyBzcGVjaWZpZWQgc2NhbGUgbGFiZWxzLgogICAgICAgICR0aGlzLT5zY2FsZS0+dGlja3MtPlN1cHJlc3NMYXN0KCk7CiAgICAgICAgJHRoaXMtPnNjYWxlLT50aWNrcy0+U3VwcmVzc0ZpcnN0KCk7CiAgICAgICAgJHRoaXMtPnNob3dfZmlyc3RfbGFiZWwgPSBmYWxzZTsKICAgICAgICAkdGhpcy0+c2hvd19sYXN0X2xhYmVsID0gZmFsc2U7CiAgICB9CgogICAgLy8gSGlkZSB0aGUgYXhpcwogICAgZnVuY3Rpb24gSGlkZSgkYUhpZGU9dHJ1ZSkgewogICAgICAgICR0aGlzLT5oaWRlPSRhSGlkZTsKICAgIH0KCiAgICAvLyBIaWRlIHRoZSBhY3R1YWwgYXhpcy1saW5lLCBidXQgc3RpbGwgcHJpbnQgdGhlIGxhYmVscwogICAgZnVuY3Rpb24gSGlkZUxpbmUoJGFIaWRlPXRydWUpIHsKICAgICAgICAkdGhpcy0+aGlkZV9saW5lID0gJGFIaWRlOwogICAgfQoKICAgIGZ1bmN0aW9uIEhpZGVMYWJlbHMoJGFIaWRlPXRydWUpIHsKICAgICAgICAkdGhpcy0+aGlkZV9sYWJlbHMgPSAkYUhpZGU7CiAgICB9CgogICAgLy8gV2VpZ2h0IG9mIGF4aXMKICAgIGZ1bmN0aW9uIFNldFdlaWdodCgkYVdlaWdodCkgewogICAgICAgICR0aGlzLT53ZWlnaHQgPSAkYVdlaWdodDsKICAgIH0KCiAgICAvLyBBeGlzIGNvbG9yCiAgICBmdW5jdGlvbiBTZXRDb2xvcigkYUNvbG9yLCRhTGFiZWxDb2xvcj1mYWxzZSkgewogICAgICAgICR0aGlzLT5jb2xvciA9ICRhQ29sb3I7CiAgICAgICAgaWYoICEkYUxhYmVsQ29sb3IgKSAkdGhpcy0+bGFiZWxfY29sb3IgPSAkYUNvbG9yOwogICAgICAgIGVsc2UgJHRoaXMtPmxhYmVsX2NvbG9yID0gJGFMYWJlbENvbG9yOwogICAgfQoKICAgIC8vIFRpdGxlIG9uIGF4aXMKICAgIGZ1bmN0aW9uIFNldFRpdGxlKCRhVGl0bGUsJGFBZGp1c3RBbGlnbj0naGlnaCcpIHsKICAgICAgICAkdGhpcy0+dGl0bGUtPlNldCgkYVRpdGxlKTsKICAgICAgICAkdGhpcy0+dGl0bGVfYWRqdXN0PSRhQWRqdXN0QWxpZ247CiAgICB9CgogICAgLy8gU3BlY2lmeSBkaXN0YW5jZSBmcm9tIHRoZSBheGlzCiAgICBmdW5jdGlvbiBTZXRUaXRsZU1hcmdpbigkYU1hcmdpbikgewogICAgICAgICR0aGlzLT50aXRsZV9tYXJnaW49JGFNYXJnaW47CiAgICB9CgogICAgLy8gV2hpY2ggc2lkZSBvZiB0aGUgYXhpcyBzaG91bGQgdGhlIGF4aXMgdGl0bGUgYmU\\\/CiAgICBmdW5jdGlvbiBTZXRUZXh0TGFiZWxTdGFydCgkYVRleHRMYWJlbE9mZikgewogICAgICAgICR0aGlzLT50ZXh0X2xhYmVsX3N0YXJ0PSRhVGV4dExhYmVsT2ZmOwogICAgfQoKfSAvLyBDbGFzcwoKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gQ0xBU1MgTGluZWFyU2NhbGUKLy8gRGVzY3JpcHRpb246IEhhbmRsZSBsaW5lYXIgc2NhbGluZyBiZXR3ZWVuIHNjcmVlbiBhbmQgd29ybGQKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KY2xhc3MgTGluZWFyU2NhbGUgewogICAgcHVibGljICR0ZXh0c2NhbGU9ZmFsc2U7IC8vIEp1c3QgYSBmbGFnIHRvIGxldCB0aGUgUGxvdCBjbGFzcyBmaW5kIG91dCBpZgogICAgLy8gd2UgYXJlIGEgdGV4dHNjYWxlIG9yIG5vdC4gVGhpcyBpcyBhIGNsdWRnZSBzaW5jZQogICAgLy8gdGhpcyBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gR3JhcGg6OmF4dHlwZSBidXQKICAgIC8vIHdlIGRvbid0IGhhdmUgYWNjZXNzIHRvIHRoZSBncmFwaCBvYmplY3QgaW4gdGhlIFBsb3RzCiAgICAvLyBzdHJva2UgbWV0aG9kLiBTbyB3ZSBsZXQgZ3JhcGggc3RvcmUgdGhlIHN0YXR1cyBoZXJlCiAgICAvLyB3aGVuIHRoZSBsaW5lYXIgc2NhbGUgaXMgY3JlYXRlZC4gQSByZWFsIGNsdWRnZS4uLgogICAgcHVibGljICR0eXBlOyAvLyBpcyB0aGlzIHggb3IgeSBzY2FsZSA\/CiAgICBwdWJsaWMgJHRpY2tzPW51bGw7IC8vIFN0b3JlIHRpY2tzCiAgICBwdWJsaWMgJHRleHRfc2NhbGVfb2ZmID0gMDsKICAgIHB1YmxpYyAkc2NhbGVfYWJzPWFycmF5KDAsMCk7CiAgICBwdWJsaWMgJHNjYWxlX2ZhY3RvcjsgLy8gU2NhbGUgZmFjdG9yIGJldHdlZW4gd29ybGQgYW5kIHNjcmVlbgogICAgcHVibGljICRvZmY7IC8vIE9mZnNldCBiZXR3ZWVuIGltYWdlIGVkZ2UgYW5kIHBsb3QgYXJlYQogICAgcHVibGljICRzY2FsZT1hcnJheSgwLDApOwogICAgcHVibGljICRuYW1lID0gJ2xpbic7CiAgICBwdWJsaWMgJGF1dG9fdGlja3M9ZmFsc2U7IC8vIFdoZW4gdXNpbmcgbWFudWFsIHNjYWxlIHNob3VsZCB0aGUgdGlja3MgYmUgYXV0b21hdGljYWxseSBzZXQ\",
    "size": "204582"
}