{
    "namaFile": "js\/spectrum\/docs\/jquery-1.9.1.js",
    "lastUpdate": "2017-10-27+15:20:56.72",
    "contentFile": "LyohCiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjEuOS4xCiAqIGh0dHA6Ly9qcXVlcnkuY29tLwogKgogKiBJbmNsdWRlcyBTaXp6bGUuanMKICogaHR0cDovL3NpenpsZWpzLmNvbS8KICoKICogQ29weXJpZ2h0IDIwMDUsIDIwMTIgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UKICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBEYXRlOiAyMDEzLTItNAogKi8KKGZ1bmN0aW9uKCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCi8vIENhbid0IGRvIHRoaXMgYmVjYXVzZSBzZXZlcmFsIGFwcHMgaW5jbHVkaW5nIEFTUC5ORVQgdHJhY2UKLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmCi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCAidXNlIHN0cmljdCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpCi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrCi8vInVzZSBzdHJpY3QiOwp2YXIKICAvLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHkKICByZWFkeUxpc3QsCgogIC8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KQogIHJvb3RqUXVlcnksCgogIC8vIFN1cHBvcnQ6IElFPDkKICAvLyBGb3IgYHR5cGVvZiBub2RlLm1ldGhvZGAgaW5zdGVhZCBvZiBgbm9kZS5tZXRob2QgIT09IHVuZGVmaW5lZGAKICBjb3JlX3N0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQsCgogIC8vIFVzZSB0aGUgY29ycmVjdCBkb2N1bWVudCBhY2NvcmRpbmdseSB3aXRoIHdpbmRvdyBhcmd1bWVudCAoc2FuZGJveCkKICBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCwKICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbiwKCiAgLy8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlCiAgX2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksCgogIC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlCiAgXyQgPSB3aW5kb3cuJCwKCiAgLy8gW1tDbGFzc11dIC0+IHR5cGUgcGFpcnMKICBjbGFzczJ0eXBlID0ge30sCgogIC8vIExpc3Qgb2YgZGVsZXRlZCBkYXRhIGNhY2hlIGlkcywgc28gd2UgY2FuIHJldXNlIHRoZW0KICBjb3JlX2RlbGV0ZWRJZHMgPSBbXSwKCiAgY29yZV92ZXJzaW9uID0gIjEuOS4xIiwKCiAgLy8gU2F2ZSBhIHJlZmVyZW5jZSB0byBzb21lIGNvcmUgbWV0aG9kcwogIGNvcmVfY29uY2F0ID0gY29yZV9kZWxldGVkSWRzLmNvbmNhdCwKICBjb3JlX3B1c2ggPSBjb3JlX2RlbGV0ZWRJZHMucHVzaCwKICBjb3JlX3NsaWNlID0gY29yZV9kZWxldGVkSWRzLnNsaWNlLAogIGNvcmVfaW5kZXhPZiA9IGNvcmVfZGVsZXRlZElkcy5pbmRleE9mLAogIGNvcmVfdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nLAogIGNvcmVfaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eSwKICBjb3JlX3RyaW0gPSBjb3JlX3ZlcnNpb24udHJpbSwKCiAgLy8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnkKICBqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7CiAgICAvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCcKICAgIHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0LCByb290alF1ZXJ5ICk7CiAgfSwKCiAgLy8gVXNlZCBmb3IgbWF0Y2hpbmcgbnVtYmVycwogIGNvcmVfcG51bSA9IC9bKy1dPyg\/OlxkKlwufClcZCsoPzpbZUVdWystXT9cZCt8KS8uc291cmNlLAoKICAvLyBVc2VkIGZvciBzcGxpdHRpbmcgb24gd2hpdGVzcGFjZQogIGNvcmVfcm5vdHdoaXRlID0gL1xTKy9nLAoKICAvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1AgKGhlcmUncyBsb29raW5nIGF0IHlvdSwgU2FmYXJpIDUuMCBhbmQgSUUpCiAgcnRyaW0gPSAvXltcc1x1RkVGRlx4QTBdK3xbXHNcdUZFRkZceEEwXSskL2csCgogIC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzCiAgLy8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKQogIC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KQogIHJxdWlja0V4cHIgPSAvXig\/Oig8W1x3XFddKz4pW14+XSp8IyhbXHctXSopKSQvLAoKICAvLyBNYXRjaCBhIHN0YW5kYWxvbmUgdGFnCiAgcnNpbmdsZVRhZyA9IC9ePChcdyspXHMqXC8\/Pig\/OjxcL1wxPnwpJC8sCgogIC8vIEpTT04gUmVnRXhwCiAgcnZhbGlkY2hhcnMgPSAvXltcXSw6e31cc10qJC8sCiAgcnZhbGlkYnJhY2VzID0gLyg\/Ol58OnwsKSg\/OlxzKlxbKSsvZywKICBydmFsaWRlc2NhcGUgPSAvXFwoPzpbIlxcXC9iZm5ydF18dVtcZGEtZkEtRl17NH0pL2csCiAgcnZhbGlkdG9rZW5zID0gLyJbXiJcXFxyXG5dKiJ8dHJ1ZXxmYWxzZXxudWxsfC0\/KD86XGQrXC58KVxkKyg\/OltlRV1bKy1dP1xkK3wpL2csCgogIC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZwogIHJtc1ByZWZpeCA9IC9eLW1zLS8sCiAgcmRhc2hBbHBoYSA9IC8tKFtcZGEtel0pL2dpLAoKICAvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpCiAgZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHsKICAgIHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTsKICB9LAoKICAvLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlcgogIGNvbXBsZXRlZCA9IGZ1bmN0aW9uKCBldmVudCApIHsKCiAgICAvLyByZWFkeVN0YXRlID09PSAiY29tcGxldGUiIGlzIGdvb2QgZW5vdWdoIGZvciB1cyB0byBjYWxsIHRoZSBkb20gcmVhZHkgaW4gb2xkSUUKICAgIGlmICggZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciB8fCBldmVudC50eXBlID09PSAibG9hZCIgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gImNvbXBsZXRlIiApIHsKICAgICAgZGV0YWNoKCk7CiAgICAgIGpRdWVyeS5yZWFkeSgpOwogICAgfQogIH0sCiAgLy8gQ2xlYW4tdXAgbWV0aG9kIGZvciBkb20gcmVhZHkgZXZlbnRzCiAgZGV0YWNoID0gZnVuY3Rpb24oKSB7CiAgICBpZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7CiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICJET01Db250ZW50TG9hZGVkIiwgY29tcGxldGVkLCBmYWxzZSApOwogICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggImxvYWQiLCBjb21wbGV0ZWQsIGZhbHNlICk7CgogICAgfSBlbHNlIHsKICAgICAgZG9jdW1lbnQuZGV0YWNoRXZlbnQoICJvbnJlYWR5c3RhdGVjaGFuZ2UiLCBjb21wbGV0ZWQgKTsKICAgICAgd2luZG93LmRldGFjaEV2ZW50KCAib25sb2FkIiwgY29tcGxldGVkICk7CiAgICB9CiAgfTsKCmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7CiAgLy8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZAogIGpxdWVyeTogY29yZV92ZXJzaW9uLAoKICBjb25zdHJ1Y3RvcjogalF1ZXJ5LAogIGluaXQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdGpRdWVyeSApIHsKICAgIHZhciBtYXRjaCwgZWxlbTsKCiAgICAvLyBIQU5ETEU6ICQoIiIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpCiAgICBpZiAoICFzZWxlY3RvciApIHsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgLy8gSGFuZGxlIEhUTUwgc3RyaW5ncwogICAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09ICJzdHJpbmciICkgewogICAgICBpZiAoIHNlbGVjdG9yLmNoYXJBdCgwKSA9PT0gIjwiICYmIHNlbGVjdG9yLmNoYXJBdCggc2VsZWN0b3IubGVuZ3RoIC0gMSApID09PSAiPiIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMgKSB7CiAgICAgICAgLy8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2sKICAgICAgICBtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTsKCiAgICAgIH0gZWxzZSB7CiAgICAgICAgbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7CiAgICAgIH0KCiAgICAgIC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWQKICAgICAgaWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkgewoKICAgICAgICAvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSkKICAgICAgICBpZiAoIG1hdGNoWzFdICkgewogICAgICAgICAgY29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WzBdIDogY29udGV4dDsKCiAgICAgICAgICAvLyBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0CiAgICAgICAgICBqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoCiAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICBjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LAogICAgICAgICAgICB0cnVlCiAgICAgICAgICApICk7CgogICAgICAgICAgLy8gSEFORExFOiAkKGh0bWwsIHByb3BzKQogICAgICAgICAgaWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWzFdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHsKICAgICAgICAgICAgZm9yICggbWF0Y2ggaW4gY29udGV4dCApIHsKICAgICAgICAgICAgICAvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlCiAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkgewogICAgICAgICAgICAgICAgdGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApOwoKICAgICAgICAgICAgICAvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzCiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdGhpczsKCiAgICAgICAgLy8gSEFORExFOiAkKCNpZCkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsyXSApOwoKICAgICAgICAgIC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zCiAgICAgICAgICAvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzCiAgICAgICAgICBpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkgewogICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUgYW5kIE9wZXJhIHJldHVybiBpdGVtcwogICAgICAgICAgICAvLyBieSBuYW1lIGluc3RlYWQgb2YgSUQKICAgICAgICAgICAgaWYgKCBlbGVtLmlkICE9PSBtYXRjaFsyXSApIHsKICAgICAgICAgICAgICByZXR1cm4gcm9vdGpRdWVyeS5maW5kKCBzZWxlY3RvciApOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBPdGhlcndpc2UsIHdlIGluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0CiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gMTsKICAgICAgICAgICAgdGhpc1swXSA9IGVsZW07CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7CiAgICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CgogICAgICAvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKQogICAgICB9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHsKICAgICAgICByZXR1cm4gKCBjb250ZXh0IHx8IHJvb3RqUXVlcnkgKS5maW5kKCBzZWxlY3RvciApOwoKICAgICAgLy8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpCiAgICAgIC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTsKICAgICAgfQoKICAgIC8vIEhBTkRMRTogJChET01FbGVtZW50KQogICAgfSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7CiAgICAgIHRoaXMuY29udGV4dCA9IHRoaXNbMF0gPSBzZWxlY3RvcjsKICAgICAgdGhpcy5sZW5ndGggPSAxOwogICAgICByZXR1cm4gdGhpczsKCiAgICAvLyBIQU5ETEU6ICQoZnVuY3Rpb24pCiAgICAvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHkKICAgIH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkgewogICAgICByZXR1cm4gcm9vdGpRdWVyeS5yZWFkeSggc2VsZWN0b3IgKTsKICAgIH0KCiAgICBpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7CiAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3RvcjsKICAgICAgdGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDsKICAgIH0KCiAgICByZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTsKICB9LAoKICAvLyBTdGFydCB3aXRoIGFuIGVtcHR5IHNlbGVjdG9yCiAgc2VsZWN0b3I6ICIiLAoKICAvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDAKICBsZW5ndGg6IDAsCgogIC8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0CiAgc2l6ZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5sZW5ndGg7CiAgfSwKCiAgdG9BcnJheTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gY29yZV9zbGljZS5jYWxsKCB0aGlzICk7CiAgfSwKCiAgLy8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUgogIC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5CiAgZ2V0OiBmdW5jdGlvbiggbnVtICkgewogICAgcmV0dXJuIG51bSA9PSBudWxsID8KCiAgICAgIC8vIFJldHVybiBhICdjbGVhbicgYXJyYXkKICAgICAgdGhpcy50b0FycmF5KCkgOgoKICAgICAgLy8gUmV0dXJuIGp1c3QgdGhlIG9iamVjdAogICAgICAoIG51bSA8IDAgPyB0aGlzWyB0aGlzLmxlbmd0aCArIG51bSBdIDogdGhpc1sgbnVtIF0gKTsKICB9LAoKICAvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrCiAgLy8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpCiAgcHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7CgogICAgLy8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXQKICAgIHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTsKCiAgICAvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKQogICAgcmV0LnByZXZPYmplY3QgPSB0aGlzOwogICAgcmV0LmNvbnRleHQgPSB0aGlzLmNvbnRleHQ7CgogICAgLy8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXQKICAgIHJldHVybiByZXQ7CiAgfSwKCiAgLy8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC4KICAvLyAoWW91IGNhbiBzZWVkIHRoZSBhcmd1bWVudHMgd2l0aCBhbiBhcnJheSBvZiBhcmdzLCBidXQgdGhpcyBpcwogIC8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5LikKICBlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2ssIGFyZ3MgKSB7CiAgICByZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrLCBhcmdzICk7CiAgfSwKCiAgcmVhZHk6IGZ1bmN0aW9uKCBmbiApIHsKICAgIC8vIEFkZCB0aGUgY2FsbGJhY2sKICAgIGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTsKCiAgICByZXR1cm4gdGhpczsKICB9LAoKICBzbGljZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIGNvcmVfc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7CiAgfSwKCiAgZmlyc3Q6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuZXEoIDAgKTsKICB9LAoKICBsYXN0OiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmVxKCAtMSApOwogIH0sCgogIGVxOiBmdW5jdGlvbiggaSApIHsKICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCwKICAgICAgaiA9ICtpICsgKCBpIDwgMCA\/IGxlbiA6IDAgKTsKICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbal0gXSA6IFtdICk7CiAgfSwKCiAgbWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7CiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAodGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7CiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7CiAgICB9KSk7CiAgfSwKCiAgZW5kOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcihudWxsKTsKICB9LAoKICAvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuCiAgLy8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuCiAgcHVzaDogY29yZV9wdXNoLAogIHNvcnQ6IFtdLnNvcnQsCiAgc3BsaWNlOiBbXS5zcGxpY2UKfTsKCi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb24KalF1ZXJ5LmZuLmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuOwoKalF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHsKICB2YXIgc3JjLCBjb3B5SXNBcnJheSwgY29weSwgbmFtZSwgb3B0aW9ucywgY2xvbmUsCiAgICB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sCiAgICBpID0gMSwKICAgIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsCiAgICBkZWVwID0gZmFsc2U7CgogIC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb24KICBpZiAoIHR5cGVvZiB0YXJnZXQgPT09ICJib29sZWFuIiApIHsKICAgIGRlZXAgPSB0YXJnZXQ7CiAgICB0YXJnZXQgPSBhcmd1bWVudHNbMV0gfHwge307CiAgICAvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0CiAgICBpID0gMjsKICB9CgogIC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KQogIGlmICggdHlwZW9mIHRhcmdldCAhPT0gIm9iamVjdCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKHRhcmdldCkgKSB7CiAgICB0YXJnZXQgPSB7fTsKICB9CgogIC8vIGV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZAogIGlmICggbGVuZ3RoID09PSBpICkgewogICAgdGFyZ2V0ID0gdGhpczsKICAgIC0taTsKICB9CgogIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkgewogICAgLy8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlcwogICAgaWYgKCAob3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdKSAhPSBudWxsICkgewogICAgICAvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0CiAgICAgIGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHsKICAgICAgICBzcmMgPSB0YXJnZXRbIG5hbWUgXTsKICAgICAgICBjb3B5ID0gb3B0aW9uc1sgbmFtZSBdOwoKICAgICAgICAvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wCiAgICAgICAgaWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5cwogICAgICAgIGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoY29weSkpICkgKSB7CiAgICAgICAgICBpZiAoIGNvcHlJc0FycmF5ICkgewogICAgICAgICAgICBjb3B5SXNBcnJheSA9IGZhbHNlOwogICAgICAgICAgICBjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheShzcmMpID8gc3JjIDogW107CgogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3Qoc3JjKSA\/IHNyYyA6IHt9OwogICAgICAgICAgfQoKICAgICAgICAgIC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbQogICAgICAgICAgdGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApOwoKICAgICAgICAvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzCiAgICAgICAgfSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgdGFyZ2V0WyBuYW1lIF0gPSBjb3B5OwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgLy8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3QKICByZXR1cm4gdGFyZ2V0Owp9OwoKalF1ZXJ5LmV4dGVuZCh7CiAgbm9Db25mbGljdDogZnVuY3Rpb24oIGRlZXAgKSB7CiAgICBpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7CiAgICAgIHdpbmRvdy4kID0gXyQ7CiAgICB9CgogICAgaWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHsKICAgICAgd2luZG93LmpRdWVyeSA9IF9qUXVlcnk7CiAgICB9CgogICAgcmV0dXJuIGpRdWVyeTsKICB9LAoKICAvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ\/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLgogIGlzUmVhZHk6IGZhbHNlLAoKICAvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlCiAgLy8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODEKICByZWFkeVdhaXQ6IDEsCgogIC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudAogIGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7CiAgICBpZiAoIGhvbGQgKSB7CiAgICAgIGpRdWVyeS5yZWFkeVdhaXQrKzsKICAgIH0gZWxzZSB7CiAgICAgIGpRdWVyeS5yZWFkeSggdHJ1ZSApOwogICAgfQogIH0sCgogIC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHkKICByZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7CgogICAgLy8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeQogICAgaWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBNYWtlIHN1cmUgYm9keSBleGlzdHMsIGF0IGxlYXN0LCBpbiBjYXNlIElFIGdldHMgYSBsaXR0bGUgb3ZlcnplYWxvdXMgKHRpY2tldCAjNTQ0MykuCiAgICBpZiAoICFkb2N1bWVudC5ib2R5ICkgewogICAgICByZXR1cm4gc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7CiAgICB9CgogICAgLy8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5CiAgICBqUXVlcnkuaXNSZWFkeSA9IHRydWU7CgogICAgLy8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmUKICAgIGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkgewogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZQogICAgcmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApOwoKICAgIC8vIFRyaWdnZXIgYW55IGJvdW5kIHJlYWR5IGV2ZW50cwogICAgaWYgKCBqUXVlcnkuZm4udHJpZ2dlciApIHsKICAgICAgalF1ZXJ5KCBkb2N1bWVudCApLnRyaWdnZXIoInJlYWR5Iikub2ZmKCJyZWFkeSIpOwogICAgfQogIH0sCgogIC8vIFNlZSB0ZXN0L3VuaXQvY29yZS5qcyBmb3IgZGV0YWlscyBjb25jZXJuaW5nIGlzRnVuY3Rpb24uCiAgLy8gU2luY2UgdmVyc2lvbiAxLjMsIERPTSBtZXRob2RzIGFuZCBmdW5jdGlvbnMgbGlrZSBhbGVydAogIC8vIGFyZW4ndCBzdXBwb3J0ZWQuIFRoZXkgcmV0dXJuIGZhbHNlIG9uIElFICgjMjk2OCkuCiAgaXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHsKICAgIHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSAiZnVuY3Rpb24iOwogIH0sCgogIGlzQXJyYXk6IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24oIG9iaiApIHsKICAgIHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSAiYXJyYXkiOwogIH0sCgogIGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkgewogICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PSBvYmoud2luZG93OwogIH0sCgogIGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHsKICAgIHJldHVybiAhaXNOYU4oIHBhcnNlRmxvYXQob2JqKSApICYmIGlzRmluaXRlKCBvYmogKTsKICB9LAoKICB0eXBlOiBmdW5jdGlvbiggb2JqICkgewogICAgaWYgKCBvYmogPT0gbnVsbCApIHsKICAgICAgcmV0dXJuIFN0cmluZyggb2JqICk7CiAgICB9CiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIG9iaiA9PT0gImZ1bmN0aW9uIiA\/CiAgICAgIGNsYXNzMnR5cGVbIGNvcmVfdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgIm9iamVjdCIgOgogICAgICB0eXBlb2Ygb2JqOwogIH0sCgogIGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7CiAgICAvLyBNdXN0IGJlIGFuIE9iamVjdC4KICAgIC8vIEJlY2F1c2Ugb2YgSUUsIHdlIGFsc28gaGF2ZSB0byBjaGVjayB0aGUgcHJlc2VuY2Ugb2YgdGhlIGNvbnN0cnVjdG9yIHByb3BlcnR5LgogICAgLy8gTWFrZSBzdXJlIHRoYXQgRE9NIG5vZGVzIGFuZCB3aW5kb3cgb2JqZWN0cyBkb24ndCBwYXNzIHRocm91Z2gsIGFzIHdlbGwKICAgIGlmICggIW9iaiB8fCBqUXVlcnkudHlwZShvYmopICE9PSAib2JqZWN0IiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHRyeSB7CiAgICAgIC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3QKICAgICAgaWYgKCBvYmouY29uc3RydWN0b3IgJiYKICAgICAgICAhY29yZV9oYXNPd24uY2FsbChvYmosICJjb25zdHJ1Y3RvciIpICYmCiAgICAgICAgIWNvcmVfaGFzT3duLmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgImlzUHJvdG90eXBlT2YiKSApIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0gY2F0Y2ggKCBlICkgewogICAgICAvLyBJRTgsOSBXaWxsIHRocm93IGV4Y2VwdGlvbnMgb24gY2VydGFpbiBob3N0IG9iamVjdHMgIzk4OTcKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLAogICAgLy8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uCgogICAgdmFyIGtleTsKICAgIGZvciAoIGtleSBpbiBvYmogKSB7fQoKICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBjb3JlX2hhc093bi5jYWxsKCBvYmosIGtleSApOwogIH0sCgogIGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7CiAgICB2YXIgbmFtZTsKICAgIGZvciAoIG5hbWUgaW4gb2JqICkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9LAoKICBlcnJvcjogZnVuY3Rpb24oIG1zZyApIHsKICAgIHRocm93IG5ldyBFcnJvciggbXNnICk7CiAgfSwKCiAgLy8gZGF0YTogc3RyaW5nIG9mIGh0bWwKICAvLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsIGRlZmF1bHRzIHRvIGRvY3VtZW50CiAgLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZwogIHBhcnNlSFRNTDogZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkgewogICAgaWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gInN0cmluZyIgKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaWYgKCB0eXBlb2YgY29udGV4dCA9PT0gImJvb2xlYW4iICkgewogICAgICBrZWVwU2NyaXB0cyA9IGNvbnRleHQ7CiAgICAgIGNvbnRleHQgPSBmYWxzZTsKICAgIH0KICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50OwoKICAgIHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSwKICAgICAgc2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTsKCiAgICAvLyBTaW5nbGUgdGFnCiAgICBpZiAoIHBhcnNlZCApIHsKICAgICAgcmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbMV0gKSBdOwogICAgfQoKICAgIHBhcnNlZCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApOwogICAgaWYgKCBzY3JpcHRzICkgewogICAgICBqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTsKICAgIH0KICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApOwogIH0sCgogIHBhcnNlSlNPTjogZnVuY3Rpb24oIGRhdGEgKSB7CiAgICAvLyBBdHRlbXB0IHRvIHBhcnNlIHVzaW5nIHRoZSBuYXRpdmUgSlNPTiBwYXJzZXIgZmlyc3QKICAgIGlmICggd2luZG93LkpTT04gJiYgd2luZG93LkpTT04ucGFyc2UgKSB7CiAgICAgIHJldHVybiB3aW5kb3cuSlNPTi5wYXJzZSggZGF0YSApOwogICAgfQoKICAgIGlmICggZGF0YSA9PT0gbnVsbCApIHsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CgogICAgaWYgKCB0eXBlb2YgZGF0YSA9PT0gInN0cmluZyIgKSB7CgogICAgICAvLyBNYWtlIHN1cmUgbGVhZGluZy90cmFpbGluZyB3aGl0ZXNwYWNlIGlzIHJlbW92ZWQgKElFIGNhbid0IGhhbmRsZSBpdCkKICAgICAgZGF0YSA9IGpRdWVyeS50cmltKCBkYXRhICk7CgogICAgICBpZiAoIGRhdGEgKSB7CiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbmNvbWluZyBkYXRhIGlzIGFjdHVhbCBKU09OCiAgICAgICAgLy8gTG9naWMgYm9ycm93ZWQgZnJvbSBodHRwOi8vanNvbi5vcmcvanNvbjIuanMKICAgICAgICBpZiAoIHJ2YWxpZGNoYXJzLnRlc3QoIGRhdGEucmVwbGFjZSggcnZhbGlkZXNjYXBlLCAiQCIgKQogICAgICAgICAgLnJlcGxhY2UoIHJ2YWxpZHRva2VucywgIl0iICkKICAgICAgICAgIC5yZXBsYWNlKCBydmFsaWRicmFjZXMsICIiKSkgKSB7CgogICAgICAgICAgcmV0dXJuICggbmV3IEZ1bmN0aW9uKCAicmV0dXJuICIgKyBkYXRhICkgKSgpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGpRdWVyeS5lcnJvciggIkludmFsaWQgSlNPTjogIiArIGRhdGEgKTsKICB9LAoKICAvLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nCiAgcGFyc2VYTUw6IGZ1bmN0aW9uKCBkYXRhICkgewogICAgdmFyIHhtbCwgdG1wOwogICAgaWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gInN0cmluZyIgKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdHJ5IHsKICAgICAgaWYgKCB3aW5kb3cuRE9NUGFyc2VyICkgeyAvLyBTdGFuZGFyZAogICAgICAgIHRtcCA9IG5ldyBET01QYXJzZXIoKTsKICAgICAgICB4bWwgPSB0bXAucGFyc2VGcm9tU3RyaW5nKCBkYXRhICwgInRleHQveG1sIiApOwogICAgICB9IGVsc2UgeyAvLyBJRQogICAgICAgIHhtbCA9IG5ldyBBY3RpdmVYT2JqZWN0KCAiTWljcm9zb2Z0LlhNTERPTSIgKTsKICAgICAgICB4bWwuYXN5bmMgPSAiZmFsc2UiOwogICAgICAgIHhtbC5sb2FkWE1MKCBkYXRhICk7CiAgICAgIH0KICAgIH0gY2F0Y2goIGUgKSB7CiAgICAgIHhtbCA9IHVuZGVmaW5lZDsKICAgIH0KICAgIGlmICggIXhtbCB8fCAheG1sLmRvY3VtZW50RWxlbWVudCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJwYXJzZXJlcnJvciIgKS5sZW5ndGggKSB7CiAgICAgIGpRdWVyeS5lcnJvciggIkludmFsaWQgWE1MOiAiICsgZGF0YSApOwogICAgfQogICAgcmV0dXJuIHhtbDsKICB9LAoKICBub29wOiBmdW5jdGlvbigpIHt9LAoKICAvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dAogIC8vIFdvcmthcm91bmRzIGJhc2VkIG9uIGZpbmRpbmdzIGJ5IEppbSBEcmlzY29sbAogIC8vIGh0dHA6Ly93ZWJsb2dzLmphdmEubmV0L2Jsb2cvZHJpc2NvbGwvYXJjaGl2ZS8yMDA5LzA5LzA4L2V2YWwtamF2YXNjcmlwdC1nbG9iYWwtY29udGV4dAogIGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBkYXRhICkgewogICAgaWYgKCBkYXRhICYmIGpRdWVyeS50cmltKCBkYXRhICkgKSB7CiAgICAgIC8vIFdlIHVzZSBleGVjU2NyaXB0IG9uIEludGVybmV0IEV4cGxvcmVyCiAgICAgIC8vIFdlIHVzZSBhbiBhbm9ueW1vdXMgZnVuY3Rpb24gc28gdGhhdCBjb250ZXh0IGlzIHdpbmRvdwogICAgICAvLyByYXRoZXIgdGhhbiBqUXVlcnkgaW4gRmlyZWZveAogICAgICAoIHdpbmRvdy5leGVjU2NyaXB0IHx8IGZ1bmN0aW9uKCBkYXRhICkgewogICAgICAgIHdpbmRvd1sgImV2YWwiIF0uY2FsbCggd2luZG93LCBkYXRhICk7CiAgICAgIH0gKSggZGF0YSApOwogICAgfQogIH0sCgogIC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXMKICAvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpCiAgY2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkgewogICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsICJtcy0iICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApOwogIH0sCgogIG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHsKICAgIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpOwogIH0sCgogIC8vIGFyZ3MgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHkKICBlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjaywgYXJncyApIHsKICAgIHZhciB2YWx1ZSwKICAgICAgaSA9IDAsCiAgICAgIGxlbmd0aCA9IG9iai5sZW5ndGgsCiAgICAgIGlzQXJyYXkgPSBpc0FycmF5bGlrZSggb2JqICk7CgogICAgaWYgKCBhcmdzICkgewogICAgICBpZiAoIGlzQXJyYXkgKSB7CiAgICAgICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApOwoKICAgICAgICAgIGlmICggdmFsdWUgPT09IGZhbHNlICkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yICggaSBpbiBvYmogKSB7CiAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApOwoKICAgICAgICAgIGlmICggdmFsdWUgPT09IGZhbHNlICkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAvLyBBIHNwZWNpYWwsIGZhc3QsIGNhc2UgZm9yIHRoZSBtb3N0IGNvbW1vbiB1c2Ugb2YgZWFjaAogICAgfSBlbHNlIHsKICAgICAgaWYgKCBpc0FycmF5ICkgewogICAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkgewogICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTsKCiAgICAgICAgICBpZiAoIHZhbHVlID09PSBmYWxzZSApIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGZvciAoIGkgaW4gb2JqICkgewogICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTsKCiAgICAgICAgICBpZiAoIHZhbHVlID09PSBmYWxzZSApIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG9iajsKICB9LAoKICAvLyBVc2UgbmF0aXZlIFN0cmluZy50cmltIGZ1bmN0aW9uIHdoZXJldmVyIHBvc3NpYmxlCiAgdHJpbTogY29yZV90cmltICYmICFjb3JlX3RyaW0uY2FsbCgiXHVGRUZGXHhBMCIpID8KICAgIGZ1bmN0aW9uKCB0ZXh0ICkgewogICAgICByZXR1cm4gdGV4dCA9PSBudWxsID8KICAgICAgICAiIiA6CiAgICAgICAgY29yZV90cmltLmNhbGwoIHRleHQgKTsKICAgIH0gOgoKICAgIC8vIE90aGVyd2lzZSB1c2Ugb3VyIG93biB0cmltbWluZyBmdW5jdGlvbmFsaXR5CiAgICBmdW5jdGlvbiggdGV4dCApIHsKICAgICAgcmV0dXJuIHRleHQgPT0gbnVsbCA\/CiAgICAgICAgIiIgOgogICAgICAgICggdGV4dCArICIiICkucmVwbGFjZSggcnRyaW0sICIiICk7CiAgICB9LAoKICAvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5CiAgbWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkgewogICAgdmFyIHJldCA9IHJlc3VsdHMgfHwgW107CgogICAgaWYgKCBhcnIgIT0gbnVsbCApIHsKICAgICAgaWYgKCBpc0FycmF5bGlrZSggT2JqZWN0KGFycikgKSApIHsKICAgICAgICBqUXVlcnkubWVyZ2UoIHJldCwKICAgICAgICAgIHR5cGVvZiBhcnIgPT09ICJzdHJpbmciID8KICAgICAgICAgIFsgYXJyIF0gOiBhcnIKICAgICAgICApOwogICAgICB9IGVsc2UgewogICAgICAgIGNvcmVfcHVzaC5jYWxsKCByZXQsIGFyciApOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHJldDsKICB9LAoKICBpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkgewogICAgdmFyIGxlbjsKCiAgICBpZiAoIGFyciApIHsKICAgICAgaWYgKCBjb3JlX2luZGV4T2YgKSB7CiAgICAgICAgcmV0dXJuIGNvcmVfaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTsKICAgICAgfQoKICAgICAgbGVuID0gYXJyLmxlbmd0aDsKICAgICAgaSA9IGkgPyBpIDwgMCA\/IE1hdGgubWF4KCAwLCBsZW4gKyBpICkgOiBpIDogMDsKCiAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkgewogICAgICAgIC8vIFNraXAgYWNjZXNzaW5nIGluIHNwYXJzZSBhcnJheXMKICAgICAgICBpZiAoIGkgaW4gYXJyICYmIGFyclsgaSBdID09PSBlbGVtICkgewogICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIC0xOwogIH0sCgogIG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHsKICAgIHZhciBsID0gc2Vjb25kLmxlbmd0aCwKICAgICAgaSA9IGZpcnN0Lmxlbmd0aCwKICAgICAgaiA9IDA7CgogICAgaWYgKCB0eXBlb2YgbCA9PT0gIm51bWJlciIgKSB7CiAgICAgIGZvciAoIDsgaiA8IGw7IGorKyApIHsKICAgICAgICBmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgd2hpbGUgKCBzZWNvbmRbal0gIT09IHVuZGVmaW5lZCApIHsKICAgICAgICBmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGorKyBdOwogICAgICB9CiAgICB9CgogICAgZmlyc3QubGVuZ3RoID0gaTsKCiAgICByZXR1cm4gZmlyc3Q7CiAgfSwKCiAgZ3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ICkgewogICAgdmFyIHJldFZhbCwKICAgICAgcmV0ID0gW10sCiAgICAgIGkgPSAwLAogICAgICBsZW5ndGggPSBlbGVtcy5sZW5ndGg7CiAgICBpbnYgPSAhIWludjsKCiAgICAvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zCiAgICAvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvbgogICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CiAgICAgIHJldFZhbCA9ICEhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTsKICAgICAgaWYgKCBpbnYgIT09IHJldFZhbCApIHsKICAgICAgICByZXQucHVzaCggZWxlbXNbIGkgXSApOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHJldDsKICB9LAoKICAvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHkKICBtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHsKICAgIHZhciB2YWx1ZSwKICAgICAgaSA9IDAsCiAgICAgIGxlbmd0aCA9IGVsZW1zLmxlbmd0aCwKICAgICAgaXNBcnJheSA9IGlzQXJyYXlsaWtlKCBlbGVtcyApLAogICAgICByZXQgPSBbXTsKCiAgICAvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIKICAgIGlmICggaXNBcnJheSApIHsKICAgICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CiAgICAgICAgdmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7CgogICAgICAgIGlmICggdmFsdWUgIT0gbnVsbCApIHsKICAgICAgICAgIHJldFsgcmV0Lmxlbmd0aCBdID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CgogICAgLy8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCwKICAgIH0gZWxzZSB7CiAgICAgIGZvciAoIGkgaW4gZWxlbXMgKSB7CiAgICAgICAgdmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7CgogICAgICAgIGlmICggdmFsdWUgIT0gbnVsbCApIHsKICAgICAgICAgIHJldFsgcmV0Lmxlbmd0aCBdID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgLy8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5cwogICAgcmV0dXJuIGNvcmVfY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7CiAgfSwKCiAgLy8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzCiAgZ3VpZDogMSwKCiAgLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55CiAgLy8gYXJndW1lbnRzLgogIHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7CiAgICB2YXIgYXJncywgcHJveHksIHRtcDsKCiAgICBpZiAoIHR5cGVvZiBjb250ZXh0ID09PSAic3RyaW5nIiApIHsKICAgICAgdG1wID0gZm5bIGNvbnRleHQgXTsKICAgICAgY29udGV4dCA9IGZuOwogICAgICBmbiA9IHRtcDsKICAgIH0KCiAgICAvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlYwogICAgLy8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC4KICAgIGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQoKICAgIC8vIFNpbXVsYXRlZCBiaW5kCiAgICBhcmdzID0gY29yZV9zbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTsKICAgIHByb3h5ID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggY29yZV9zbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7CiAgICB9OwoKICAgIC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZAogICAgcHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7CgogICAgcmV0dXJuIHByb3h5OwogIH0sCgogIC8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvbgogIC8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvbgogIGFjY2VzczogZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkgewogICAgdmFyIGkgPSAwLAogICAgICBsZW5ndGggPSBlbGVtcy5sZW5ndGgsCiAgICAgIGJ1bGsgPSBrZXkgPT0gbnVsbDsKCiAgICAvLyBTZXRzIG1hbnkgdmFsdWVzCiAgICBpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gIm9iamVjdCIgKSB7CiAgICAgIGNoYWluYWJsZSA9IHRydWU7CiAgICAgIGZvciAoIGkgaW4ga2V5ICkgewogICAgICAgIGpRdWVyeS5hY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5W2ldLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7CiAgICAgIH0KCiAgICAvLyBTZXRzIG9uZSB2YWx1ZQogICAgfSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKICAgICAgY2hhaW5hYmxlID0gdHJ1ZTsKCiAgICAgIGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkgewogICAgICAgIHJhdyA9IHRydWU7CiAgICAgIH0KCiAgICAgIGlmICggYnVsayApIHsKICAgICAgICAvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXQKICAgICAgICBpZiAoIHJhdyApIHsKICAgICAgICAgIGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApOwogICAgICAgICAgZm4gPSBudWxsOwoKICAgICAgICAvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGJ1bGsgPSBmbjsKICAgICAgICAgIGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7CiAgICAgICAgICAgIHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApOwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmICggZm4gKSB7CiAgICAgICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICBmbiggZWxlbXNbaV0sIGtleSwgcmF3ID8gdmFsdWUgOiB2YWx1ZS5jYWxsKCBlbGVtc1tpXSwgaSwgZm4oIGVsZW1zW2ldLCBrZXkgKSApICk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGNoYWluYWJsZSA\/CiAgICAgIGVsZW1zIDoKCiAgICAgIC8vIEdldHMKICAgICAgYnVsayA\\/CiAgICAgICAgICBpZiAoIGZpcmluZyApIHsKICAgICAgICAgICAgZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7CiAgICAgICAgICAvLyBXaXRoIG1lbW9yeSwgaWYgd2UncmUgbm90IGZpcmluZyB0aGVuCiAgICAgICAgICAvLyB3ZSBzaG91bGQgY2FsbCByaWdodCBhd2F5CiAgICAgICAgICB9IGVsc2UgaWYgKCBtZW1vcnkgKSB7CiAgICAgICAgICAgIGZpcmluZ1N0YXJ0ID0gc3RhcnQ7CiAgICAgICAgICAgIGZpcmUoIG1lbW9yeSApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfSwKICAgICAgLy8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdAogICAgICByZW1vdmU6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICggbGlzdCApIHsKICAgICAgICAgIGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7CiAgICAgICAgICAgIHZhciBpbmRleDsKICAgICAgICAgICAgd2hpbGUoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHsKICAgICAgICAgICAgICBsaXN0LnNwbGljZSggaW5kZXgsIDEgKTsKICAgICAgICAgICAgICAvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXMKICAgICAgICAgICAgICBpZiAoIGZpcmluZyApIHsKICAgICAgICAgICAgICAgIGlmICggaW5kZXggPD0gZmlyaW5nTGVuZ3RoICkgewogICAgICAgICAgICAgICAgICBmaXJpbmdMZW5ndGgtLTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7CiAgICAgICAgICAgICAgICAgIGZpcmluZ0luZGV4LS07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0sCiAgICAgIC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuCiAgICAgIC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLgogICAgICBoYXM6IGZ1bmN0aW9uKCBmbiApIHsKICAgICAgICByZXR1cm4gZm4gPyBqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDogISEoIGxpc3QgJiYgbGlzdC5sZW5ndGggKTsKICAgICAgfSwKICAgICAgLy8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdAogICAgICBlbXB0eTogZnVuY3Rpb24oKSB7CiAgICAgICAgbGlzdCA9IFtdOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9LAogICAgICAvLyBIYXZlIHRoZSBsaXN0IGRvIG5vdGhpbmcgYW55bW9yZQogICAgICBkaXNhYmxlOiBmdW5jdGlvbigpIHsKICAgICAgICBsaXN0ID0gc3RhY2sgPSBtZW1vcnkgPSB1bmRlZmluZWQ7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0sCiAgICAgIC8vIElzIGl0IGRpc2FibGVkPwogICAgICBkaXNhYmxlZDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuICFsaXN0OwogICAgICB9LAogICAgICAvLyBMb2NrIHRoZSBsaXN0IGluIGl0cyBjdXJyZW50IHN0YXRlCiAgICAgIGxvY2s6IGZ1bmN0aW9uKCkgewogICAgICAgIHN0YWNrID0gdW5kZWZpbmVkOwogICAgICAgIGlmICggIW1lbW9yeSApIHsKICAgICAgICAgIHNlbGYuZGlzYWJsZSgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfSwKICAgICAgLy8gSXMgaXQgbG9ja2VkPwogICAgICBsb2NrZWQ6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiAhc3RhY2s7CiAgICAgIH0sCiAgICAgIC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHMKICAgICAgZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkgewogICAgICAgIGFyZ3MgPSBhcmdzIHx8IFtdOwogICAgICAgIGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07CiAgICAgICAgaWYgKCBsaXN0ICYmICggIWZpcmVkIHx8IHN0YWNrICkgKSB7CiAgICAgICAgICBpZiAoIGZpcmluZyApIHsKICAgICAgICAgICAgc3RhY2sucHVzaCggYXJncyApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZmlyZSggYXJncyApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfSwKICAgICAgLy8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHMKICAgICAgZmlyZTogZnVuY3Rpb24oKSB7CiAgICAgICAgc2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0sCiAgICAgIC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZQogICAgICBmaXJlZDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuICEhZmlyZWQ7CiAgICAgIH0KICAgIH07CgogIHJldHVybiBzZWxmOwp9OwpqUXVlcnkuZXh0ZW5kKHsKCiAgRGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkgewogICAgdmFyIHR1cGxlcyA9IFsKICAgICAgICAvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgbGlzdGVuZXIgbGlzdCwgZmluYWwgc3RhdGUKICAgICAgICBbICJyZXNvbHZlIiwgImRvbmUiLCBqUXVlcnkuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLCAicmVzb2x2ZWQiIF0sCiAgICAgICAgWyAicmVqZWN0IiwgImZhaWwiLCBqUXVlcnkuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLCAicmVqZWN0ZWQiIF0sCiAgICAgICAgWyAibm90aWZ5IiwgInByb2dyZXNzIiwgalF1ZXJ5LkNhbGxiYWNrcygibWVtb3J5IikgXQogICAgICBdLAogICAgICBzdGF0ZSA9ICJwZW5kaW5nIiwKICAgICAgcHJvbWlzZSA9IHsKICAgICAgICBzdGF0ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgfSwKICAgICAgICBhbHdheXM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgICAgIHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHsKICAgICAgICAgIHZhciBmbnMgPSBhcmd1bWVudHM7CiAgICAgICAgICByZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uKCBuZXdEZWZlciApIHsKICAgICAgICAgICAgalF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkgewogICAgICAgICAgICAgIHZhciBhY3Rpb24gPSB0dXBsZVsgMCBdLAogICAgICAgICAgICAgICAgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTsKICAgICAgICAgICAgICAvLyBkZWZlcnJlZFsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdIGZvciBmb3J3YXJkaW5nIGFjdGlvbnMgdG8gbmV3RGVmZXIKICAgICAgICAgICAgICBkZWZlcnJlZFsgdHVwbGVbMV0gXShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKICAgICAgICAgICAgICAgIGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuZWQucHJvbWlzZSgpCiAgICAgICAgICAgICAgICAgICAgLmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKQogICAgICAgICAgICAgICAgICAgIC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKQogICAgICAgICAgICAgICAgICAgIC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5ICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBuZXdEZWZlclsgYWN0aW9uICsgIldpdGgiIF0oIHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLCBmbiA\/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50cyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZm5zID0gbnVsbDsKICAgICAgICAgIH0pLnByb21pc2UoKTsKICAgICAgICB9LAogICAgICAgIC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWQKICAgICAgICAvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0CiAgICAgICAgcHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHsKICAgICAgICAgIHJldHVybiBvYmogIT0gbnVsbCA\/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRlZmVycmVkID0ge307CgogICAgLy8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdAogICAgcHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuOwoKICAgIC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHMKICAgIGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHsKICAgICAgdmFyIGxpc3QgPSB0dXBsZVsgMiBdLAogICAgICAgIHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTsKCiAgICAgIC8vIHByb21pc2VbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSA9IGxpc3QuYWRkCiAgICAgIHByb21pc2VbIHR1cGxlWzFdIF0gPSBsaXN0LmFkZDsKCiAgICAgIC8vIEhhbmRsZSBzdGF0ZQogICAgICBpZiAoIHN0YXRlU3RyaW5nICkgewogICAgICAgIGxpc3QuYWRkKGZ1bmN0aW9uKCkgewogICAgICAgICAgLy8gc3RhdGUgPSBbIHJlc29sdmVkIHwgcmVqZWN0ZWQgXQogICAgICAgICAgc3RhdGUgPSBzdGF0ZVN0cmluZzsKCiAgICAgICAgLy8gWyByZWplY3RfbGlzdCB8IHJlc29sdmVfbGlzdCBdLmRpc2FibGU7IHByb2dyZXNzX2xpc3QubG9jawogICAgICAgIH0sIHR1cGxlc1sgaSBeIDEgXVsgMiBdLmRpc2FibGUsIHR1cGxlc1sgMiBdWyAyIF0ubG9jayApOwogICAgICB9CgogICAgICAvLyBkZWZlcnJlZFsgcmVzb2x2ZSB8IHJlamVjdCB8IG5vdGlmeSBdCiAgICAgIGRlZmVycmVkWyB0dXBsZVswXSBdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgZGVmZXJyZWRbIHR1cGxlWzBdICsgIldpdGgiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9OwogICAgICBkZWZlcnJlZFsgdHVwbGVbMF0gKyAiV2l0aCIgXSA9IGxpc3QuZmlyZVdpdGg7CiAgICB9KTsKCiAgICAvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2UKICAgIHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTsKCiAgICAvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55CiAgICBpZiAoIGZ1bmMgKSB7CiAgICAgIGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7CiAgICB9CgogICAgLy8gQWxsIGRvbmUhCiAgICByZXR1cm4gZGVmZXJyZWQ7CiAgfSwKCiAgLy8gRGVmZXJyZWQgaGVscGVyCiAgd2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7CiAgICB2YXIgaSA9IDAsCiAgICAgIHJlc29sdmVWYWx1ZXMgPSBjb3JlX3NsaWNlLmNhbGwoIGFyZ3VtZW50cyApLAogICAgICBsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCwKCiAgICAgIC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXMKICAgICAgcmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8ICggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCwKCiAgICAgIC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LgogICAgICBkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA\\/IGNhY2hlWyBpZCBdIDogY2FjaGVbIGlkIF0uZGF0YTsKCiAgICBpZiAoIHRoaXNDYWNoZSApIHsKCiAgICAgIC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBuYW1lcyBmb3IgZGF0YSBrZXlzCiAgICAgIGlmICggIWpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7CgogICAgICAgIC8vIHRyeSB0aGUgc3RyaW5nIGFzIGEga2V5IGJlZm9yZSBhbnkgbWFuaXB1bGF0aW9uCiAgICAgICAgaWYgKCBuYW1lIGluIHRoaXNDYWNoZSApIHsKICAgICAgICAgIG5hbWUgPSBbIG5hbWUgXTsKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgIC8vIHNwbGl0IHRoZSBjYW1lbCBjYXNlZCB2ZXJzaW9uIGJ5IHNwYWNlcyB1bmxlc3MgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cwogICAgICAgICAgbmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTsKICAgICAgICAgIGlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7CiAgICAgICAgICAgIG5hbWUgPSBbIG5hbWUgXTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNwbGl0KCIgIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIC8vIElmICJuYW1lIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uCiAgICAgICAgLy8gV2hlbiBkYXRhIGlzIGluaXRpYWxseSBjcmVhdGVkLCB2aWEgKCJrZXkiLCAidmFsIikgc2lnbmF0dXJlLAogICAgICAgIC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLgogICAgICAgIC8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIF9ob3dfIGEga2V5IHdhcyBhZGRlZCwgcmVtb3ZlCiAgICAgICAgLy8gYm90aCBwbGFpbiBrZXkgYW5kIGNhbWVsQ2FzZSBrZXkuICMxMjc4NgogICAgICAgIC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLgogICAgICAgIG5hbWUgPSBuYW1lLmNvbmNhdCggalF1ZXJ5Lm1hcCggbmFtZSwgalF1ZXJ5LmNhbWVsQ2FzZSApICk7CiAgICAgIH0KCiAgICAgIGZvciAoIGkgPSAwLCBsID0gbmFtZS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgZGVsZXRlIHRoaXNDYWNoZVsgbmFtZVtpXSBdOwogICAgICB9CgogICAgICAvLyBJZiB0aGVyZSBpcyBubyBkYXRhIGxlZnQgaW4gdGhlIGNhY2hlLCB3ZSB3YW50IHRvIGNvbnRpbnVlCiAgICAgIC8vIGFuZCBsZXQgdGhlIGNhY2hlIG9iamVjdCBpdHNlbGYgZ2V0IGRlc3Ryb3llZAogICAgICBpZiAoICEoIHB2dCA\/IGlzRW1wdHlEYXRhT2JqZWN0IDogalF1ZXJ5LmlzRW1wdHlPYmplY3QgKSggdGhpc0NhY2hlICkgKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICB9CiAgfQoKICAvLyBTZWUgalF1ZXJ5LmRhdGEgZm9yIG1vcmUgaW5mb3JtYXRpb24KICBpZiAoICFwdnQgKSB7CiAgICBkZWxldGUgY2FjaGVbIGlkIF0uZGF0YTsKCiAgICAvLyBEb24ndCBkZXN0cm95IHRoZSBwYXJlbnQgY2FjaGUgdW5sZXNzIHRoZSBpbnRlcm5hbCBkYXRhIG9iamVjdAogICAgLy8gaGFkIGJlZW4gdGhlIG9ubHkgdGhpbmcgbGVmdCBpbiBpdAogICAgaWYgKCAhaXNFbXB0eURhdGFPYmplY3QoIGNhY2hlWyBpZCBdICkgKSB7CiAgICAgIHJldHVybjsKICAgIH0KICB9CgogIC8vIERlc3Ryb3kgdGhlIGNhY2hlCiAgaWYgKCBpc05vZGUgKSB7CiAgICBqUXVlcnkuY2xlYW5EYXRhKCBbIGVsZW0gXSwgdHJ1ZSApOwoKICAvLyBVc2UgZGVsZXRlIHdoZW4gc3VwcG9ydGVkIGZvciBleHBhbmRvcyBvciBgY2FjaGVgIGlzIG5vdCBhIHdpbmRvdyBwZXIgaXNXaW5kb3cgKCMxMDA4MCkKICB9IGVsc2UgaWYgKCBqUXVlcnkuc3VwcG9ydC5kZWxldGVFeHBhbmRvIHx8IGNhY2hlICE9IGNhY2hlLndpbmRvdyApIHsKICAgIGRlbGV0ZSBjYWNoZVsgaWQgXTsKCiAgLy8gV2hlbiBhbGwgZWxzZSBmYWlscywgbnVsbAogIH0gZWxzZSB7CiAgICBjYWNoZVsgaWQgXSA9IG51bGw7CiAgfQp9CgpqUXVlcnkuZXh0ZW5kKHsKICBjYWNoZToge30sCgogIC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZQogIC8vIE5vbi1kaWdpdHMgcmVtb3ZlZCB0byBtYXRjaCByaW5saW5lalF1ZXJ5CiAgZXhwYW5kbzogImpRdWVyeSIgKyAoIGNvcmVfdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXEQvZywgIiIgKSwKCiAgLy8gVGhlIGZvbGxvd2luZyBlbGVtZW50cyB0aHJvdyB1bmNhdGNoYWJsZSBleGNlcHRpb25zIGlmIHlvdQogIC8vIGF0dGVtcHQgdG8gYWRkIGV4cGFuZG8gcHJvcGVydGllcyB0byB0aGVtLgogIG5vRGF0YTogewogICAgImVtYmVkIjogdHJ1ZSwKICAgIC8vIEJhbiBhbGwgb2JqZWN0cyBleGNlcHQgZm9yIEZsYXNoICh3aGljaCBoYW5kbGUgZXhwYW5kb3MpCiAgICAib2JqZWN0IjogImNsc2lkOkQyN0NEQjZFLUFFNkQtMTFjZi05NkI4LTQ0NDU1MzU0MDAwMCIsCiAgICAiYXBwbGV0IjogdHJ1ZQogIH0sCgogIGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgZWxlbSA9IGVsZW0ubm9kZVR5cGUgPyBqUXVlcnkuY2FjaGVbIGVsZW1balF1ZXJ5LmV4cGFuZG9dIF0gOiBlbGVtWyBqUXVlcnkuZXhwYW5kbyBdOwogICAgcmV0dXJuICEhZWxlbSAmJiAhaXNFbXB0eURhdGFPYmplY3QoIGVsZW0gKTsKICB9LAoKICBkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHsKICAgIHJldHVybiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEgKTsKICB9LAoKICByZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHsKICAgIHJldHVybiBpbnRlcm5hbFJlbW92ZURhdGEoIGVsZW0sIG5hbWUgKTsKICB9LAoKICAvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuCiAgX2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkgewogICAgcmV0dXJuIGludGVybmFsRGF0YSggZWxlbSwgbmFtZSwgZGF0YSwgdHJ1ZSApOwogIH0sCgogIF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHsKICAgIHJldHVybiBpbnRlcm5hbFJlbW92ZURhdGEoIGVsZW0sIG5hbWUsIHRydWUgKTsKICB9LAoKICAvLyBBIG1ldGhvZCBmb3IgZGV0ZXJtaW5pbmcgaWYgYSBET00gbm9kZSBjYW4gaGFuZGxlIHRoZSBkYXRhIGV4cGFuZG8KICBhY2NlcHREYXRhOiBmdW5jdGlvbiggZWxlbSApIHsKICAgIC8vIERvIG5vdCBzZXQgZGF0YSBvbiBub24tZWxlbWVudCBiZWNhdXNlIGl0IHdpbGwgbm90IGJlIGNsZWFyZWQgKCM4MzM1KS4KICAgIGlmICggZWxlbS5ub2RlVHlwZSAmJiBlbGVtLm5vZGVUeXBlICE9PSAxICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICB2YXIgbm9EYXRhID0gZWxlbS5ub2RlTmFtZSAmJiBqUXVlcnkubm9EYXRhWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTsKCiAgICAvLyBub2RlcyBhY2NlcHQgZGF0YSB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZDsgcmVqZWN0aW9uIGNhbiBiZSBjb25kaXRpb25hbAogICAgcmV0dXJuICFub0RhdGEgfHwgbm9EYXRhICE9PSB0cnVlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCJjbGFzc2lkIikgPT09IG5vRGF0YTsKICB9Cn0pOwoKalF1ZXJ5LmZuLmV4dGVuZCh7CiAgZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CiAgICB2YXIgYXR0cnMsIG5hbWUsCiAgICAgIGVsZW0gPSB0aGlzWzBdLAogICAgICBpID0gMCwKICAgICAgZGF0YSA9IG51bGw7CgogICAgLy8gR2V0cyBhbGwgdmFsdWVzCiAgICBpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkgewogICAgICBpZiAoIHRoaXMubGVuZ3RoICkgewogICAgICAgIGRhdGEgPSBqUXVlcnkuZGF0YSggZWxlbSApOwoKICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWpRdWVyeS5fZGF0YSggZWxlbSwgInBhcnNlZEF0dHJzIiApICkgewogICAgICAgICAgYXR0cnMgPSBlbGVtLmF0dHJpYnV0ZXM7CiAgICAgICAgICBmb3IgKCA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgbmFtZSA9IGF0dHJzW2ldLm5hbWU7CgogICAgICAgICAgICBpZiAoICFuYW1lLmluZGV4T2YoICJkYXRhLSIgKSApIHsKICAgICAgICAgICAgICBuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSg1KSApOwoKICAgICAgICAgICAgICBkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGpRdWVyeS5fZGF0YSggZWxlbSwgInBhcnNlZEF0dHJzIiwgdHJ1ZSApOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CgogICAgLy8gU2V0cyBtdWx0aXBsZSB2YWx1ZXMKICAgIGlmICggdHlwZW9mIGtleSA9PT0gIm9iamVjdCIgKSB7CiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgalF1ZXJ5LmRhdGEoIHRoaXMsIGtleSApOwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkgewoKICAgICAgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewogICAgICAgIC8vIFRyeSB0byBmZXRjaCBhbnkgaW50ZXJuYWxseSBzdG9yZWQgZGF0YSBmaXJzdAogICAgICAgIHJldHVybiBlbGVtID8gZGF0YUF0dHIoIGVsZW0sIGtleSwgalF1ZXJ5LmRhdGEoIGVsZW0sIGtleSApICkgOiBudWxsOwogICAgICB9CgogICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgalF1ZXJ5LmRhdGEoIHRoaXMsIGtleSwgdmFsdWUgKTsKICAgICAgfSk7CiAgICB9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTsKICB9LAoKICByZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkgewogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMsIGtleSApOwogICAgfSk7CiAgfQp9KTsKCmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7CiAgLy8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueQogIC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZQogIGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7CgogICAgdmFyIG5hbWUgPSAiZGF0YS0iICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsICItJDEiICkudG9Mb3dlckNhc2UoKTsKCiAgICBkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTsKCiAgICBpZiAoIHR5cGVvZiBkYXRhID09PSAic3RyaW5nIiApIHsKICAgICAgdHJ5IHsKICAgICAgICBkYXRhID0gZGF0YSA9PT0gInRydWUiID8gdHJ1ZSA6CiAgICAgICAgICBkYXRhID09PSAiZmFsc2UiID8gZmFsc2UgOgogICAgICAgICAgZGF0YSA9PT0gIm51bGwiID8gbnVsbCA6CiAgICAgICAgICAvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZwogICAgICAgICAgK2RhdGEgKyAiIiA9PT0gZGF0YSA\/ICtkYXRhIDoKICAgICAgICAgIHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOgogICAgICAgICAgICBkYXRhOwogICAgICB9IGNhdGNoKCBlICkge30KCiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlcgogICAgICBqUXVlcnkuZGF0YSggZWxlbSwga2V5LCBkYXRhICk7CgogICAgfSBlbHNlIHsKICAgICAgZGF0YSA9IHVuZGVmaW5lZDsKICAgIH0KICB9CgogIHJldHVybiBkYXRhOwp9CgovLyBjaGVja3MgYSBjYWNoZSBvYmplY3QgZm9yIGVtcHRpbmVzcwpmdW5jdGlvbiBpc0VtcHR5RGF0YU9iamVjdCggb2JqICkgewogIHZhciBuYW1lOwogIGZvciAoIG5hbWUgaW4gb2JqICkgewoKICAgIC8vIGlmIHRoZSBwdWJsaWMgZGF0YSBvYmplY3QgaXMgZW1wdHksIHRoZSBwcml2YXRlIGlzIHN0aWxsIGVtcHR5CiAgICBpZiAoIG5hbWUgPT09ICJkYXRhIiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb2JqW25hbWVdICkgKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgaWYgKCBuYW1lICE9PSAidG9KU09OIiApIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgcmV0dXJuIHRydWU7Cn0KalF1ZXJ5LmV4dGVuZCh7CiAgcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkgewogICAgdmFyIHF1ZXVlOwoKICAgIGlmICggZWxlbSApIHsKICAgICAgdHlwZSA9ICggdHlwZSB8fCAiZngiICkgKyAicXVldWUiOwogICAgICBxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSApOwoKICAgICAgLy8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cAogICAgICBpZiAoIGRhdGEgKSB7CiAgICAgICAgaWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoZGF0YSkgKSB7CiAgICAgICAgICBxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheShkYXRhKSApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBxdWV1ZS5wdXNoKCBkYXRhICk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBxdWV1ZSB8fCBbXTsKICAgIH0KICB9LAoKICBkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHsKICAgIHR5cGUgPSB0eXBlIHx8ICJmeCI7CgogICAgdmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksCiAgICAgIHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLAogICAgICBmbiA9IHF1ZXVlLnNoaWZ0KCksCiAgICAgIGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksCiAgICAgIG5leHQgPSBmdW5jdGlvbigpIHsKICAgICAgICBqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApOwogICAgICB9OwoKICAgIC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWwKICAgIGlmICggZm4gPT09ICJpbnByb2dyZXNzIiApIHsKICAgICAgZm4gPSBxdWV1ZS5zaGlmdCgpOwogICAgICBzdGFydExlbmd0aC0tOwogICAgfQoKICAgIGhvb2tzLmN1ciA9IGZuOwogICAgaWYgKCBmbiApIHsKCiAgICAgIC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmcKICAgICAgLy8gYXV0b21hdGljYWxseSBkZXF1ZXVlZAogICAgICBpZiAoIHR5cGUgPT09ICJmeCIgKSB7CiAgICAgICAgcXVldWUudW5zaGlmdCggImlucHJvZ3Jlc3MiICk7CiAgICAgIH0KCiAgICAgIC8vIGNsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb24KICAgICAgZGVsZXRlIGhvb2tzLnN0b3A7CiAgICAgIGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7CiAgICB9CgogICAgaWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7CiAgICAgIGhvb2tzLmVtcHR5LmZpcmUoKTsKICAgIH0KICB9LAoKICAvLyBub3QgaW50ZW5kZWQgZm9yIHB1YmxpYyBjb25zdW1wdGlvbiAtIGdlbmVyYXRlcyBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm5zIHRoZSBjdXJyZW50IG9uZQogIF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHsKICAgIHZhciBrZXkgPSB0eXBlICsgInF1ZXVlSG9va3MiOwogICAgcmV0dXJuIGpRdWVyeS5fZGF0YSggZWxlbSwga2V5ICkgfHwgalF1ZXJ5Ll9kYXRhKCBlbGVtLCBrZXksIHsKICAgICAgZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IikuYWRkKGZ1bmN0aW9uKCkgewogICAgICAgIGpRdWVyeS5fcmVtb3ZlRGF0YSggZWxlbSwgdHlwZSArICJxdWV1ZSIgKTsKICAgICAgICBqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIGtleSApOwogICAgICB9KQogICAgfSk7CiAgfQp9KTsKCmpRdWVyeS5mbi5leHRlbmQoewogIHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHsKICAgIHZhciBzZXR0ZXIgPSAyOwoKICAgIGlmICggdHlwZW9mIHR5cGUgIT09ICJzdHJpbmciICkgewogICAgICBkYXRhID0gdHlwZTsKICAgICAgdHlwZSA9ICJmeCI7CiAgICAgIHNldHRlci0tOwogICAgfQoKICAgIGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHsKICAgICAgcmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1swXSwgdHlwZSApOwogICAgfQoKICAgIHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgPwogICAgICB0aGlzIDoKICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApOwoKICAgICAgICAvLyBlbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZQogICAgICAgIGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApOwoKICAgICAgICBpZiAoIHR5cGUgPT09ICJmeCIgJiYgcXVldWVbMF0gIT09ICJpbnByb2dyZXNzIiApIHsKICAgICAgICAgIGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7CiAgICAgICAgfQogICAgICB9KTsKICB9LAogIGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkgewogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgalF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTsKICAgIH0pOwogIH0sCiAgLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLgogIC8vIGh0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS8KICBkZWxheTogZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7CiAgICB0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lOwogICAgdHlwZSA9IHR5cGUgfHwgImZ4IjsKCiAgICByZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkgewogICAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTsKICAgICAgaG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGNsZWFyVGltZW91dCggdGltZW91dCApOwogICAgICB9OwogICAgfSk7CiAgfSwKICBjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHsKICAgIHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8ICJmeCIsIFtdICk7CiAgfSwKICAvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlCiAgLy8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpCiAgcHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHsKICAgIHZhciB0bXAsCiAgICAgIGNvdW50ID0gMSwKICAgICAgZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSwKICAgICAgZWxlbWVudHMgPSB0aGlzLAogICAgICBpID0gdGhpcy5sZW5ndGgsCiAgICAgIHJlc29sdmUgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoICEoIC0tY291bnQgKSApIHsKICAgICAgICAgIGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7CiAgICAgICAgfQogICAgICB9OwoKICAgIGlmICggdHlwZW9mIHR5cGUgIT09ICJzdHJpbmciICkgewogICAgICBvYmogPSB0eXBlOwogICAgICB0eXBlID0gdW5kZWZpbmVkOwogICAgfQogICAgdHlwZSA9IHR5cGUgfHwgImZ4IjsKCiAgICB3aGlsZSggaS0tICkgewogICAgICB0bXAgPSBqUXVlcnkuX2RhdGEoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyAicXVldWVIb29rcyIgKTsKICAgICAgaWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkgewogICAgICAgIGNvdW50Kys7CiAgICAgICAgdG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApOwogICAgICB9CiAgICB9CiAgICByZXNvbHZlKCk7CiAgICByZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7CiAgfQp9KTsKdmFyIG5vZGVIb29rLCBib29sSG9vaywKICByY2xhc3MgPSAvW1x0XHJcbl0vZywKICBycmV0dXJuID0gL1xyL2csCiAgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbnxvYmplY3QpJC9pLAogIHJjbGlja2FibGUgPSAvXig\/OmF8YXJlYSkkL2ksCiAgcmJvb2xlYW4gPSAvXig\/OmNoZWNrZWR8c2VsZWN0ZWR8YXV0b2ZvY3VzfGF1dG9wbGF5fGFzeW5jfGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkKSQvaSwKICBydXNlRGVmYXVsdCA9IC9eKD86Y2hlY2tlZHxzZWxlY3RlZCkkL2ksCiAgZ2V0U2V0QXR0cmlidXRlID0galF1ZXJ5LnN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlLAogIGdldFNldElucHV0ID0galF1ZXJ5LnN1cHBvcnQuaW5wdXQ7CgpqUXVlcnkuZm4uZXh0ZW5kKHsKICBhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7CiAgICByZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApOwogIH0sCgogIHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkgewogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgalF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTsKICAgIH0pOwogIH0sCgogIHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHsKICAgIHJldHVybiBqUXVlcnkuYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7CiAgfSwKCiAgcmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7CiAgICBuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lOwogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgLy8gdHJ5L2NhdGNoIGhhbmRsZXMgY2FzZXMgd2hlcmUgSUUgYmFsa3MgKHN1Y2ggYXMgcmVtb3ZpbmcgYSBwcm9wZXJ0eSBvbiB3aW5kb3cpCiAgICAgIHRyeSB7CiAgICAgICAgdGhpc1sgbmFtZSBdID0gdW5kZWZpbmVkOwogICAgICAgIGRlbGV0ZSB0aGlzWyBuYW1lIF07CiAgICAgIH0gY2F0Y2goIGUgKSB7fQogICAgfSk7CiAgfSwKCiAgYWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKICAgIHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLAogICAgICBpID0gMCwKICAgICAgbGVuID0gdGhpcy5sZW5ndGgsCiAgICAgIHByb2NlZWQgPSB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciICYmIHZhbHVlOwoKICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7CiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7CiAgICAgICAgalF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTsKICAgICAgfSk7CiAgICB9CgogICAgaWYgKCBwcm9jZWVkICkgewogICAgICAvLyBUaGUgZGlzanVuY3Rpb24gaGVyZSBpcyBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIHJlbW92ZUNsYXNzKQogICAgICBjbGFzc2VzID0gKCB2YWx1ZSB8fCAiIiApLm1hdGNoKCBjb3JlX3Jub3R3aGl0ZSApIHx8IFtdOwoKICAgICAgZm9yICggOyBpIDwgbGVuOyBpKysgKSB7CiAgICAgICAgZWxlbSA9IHRoaXNbIGkgXTsKICAgICAgICBjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgPwogICAgICAgICAgKCAiICIgKyBlbGVtLmNsYXNzTmFtZSArICIgIiApLnJlcGxhY2UoIHJjbGFzcywgIiAiICkgOgogICAgICAgICAgIiAiCiAgICAgICAgKTsKCiAgICAgICAgaWYgKCBjdXIgKSB7CiAgICAgICAgICBqID0gMDsKICAgICAgICAgIHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHsKICAgICAgICAgICAgaWYgKCBjdXIuaW5kZXhPZiggIiAiICsgY2xhenogKyAiICIgKSA8IDAgKSB7CiAgICAgICAgICAgICAgY3VyICs9IGNsYXp6ICsgIiAiOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGpRdWVyeS50cmltKCBjdXIgKTsKCiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKICAgIHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLAogICAgICBpID0gMCwKICAgICAgbGVuID0gdGhpcy5sZW5ndGgsCiAgICAgIHByb2NlZWQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIgJiYgdmFsdWU7CgogICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHsKICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHsKICAgICAgICBqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApOwogICAgICB9KTsKICAgIH0KICAgIGlmICggcHJvY2VlZCApIHsKICAgICAgY2xhc3NlcyA9ICggdmFsdWUgfHwgIiIgKS5tYXRjaCggY29yZV9ybm90d2hpdGUgKSB8fCBbXTsKCiAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkgewogICAgICAgIGVsZW0gPSB0aGlzWyBpIF07CiAgICAgICAgLy8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcykKICAgICAgICBjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgPwogICAgICAgICAgKCAiICIgKyBlbGVtLmNsYXNzTmFtZSArICIgIiApLnJlcGxhY2UoIHJjbGFzcywgIiAiICkgOgogICAgICAgICAgIiIKICAgICAgICApOwoKICAgICAgICBpZiAoIGN1ciApIHsKICAgICAgICAgIGogPSAwOwogICAgICAgICAgd2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkgewogICAgICAgICAgICAvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzCiAgICAgICAgICAgIHdoaWxlICggY3VyLmluZGV4T2YoICIgIiArIGNsYXp6ICsgIiAiICkgPj0gMCApIHsKICAgICAgICAgICAgICBjdXIgPSBjdXIucmVwbGFjZSggIiAiICsgY2xhenogKyAiICIsICIgIiApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IHZhbHVlID8galF1ZXJ5LnRyaW0oIGN1ciApIDogIiI7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7CiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSwKICAgICAgaXNCb29sID0gdHlwZW9mIHN0YXRlVmFsID09PSAiYm9vbGVhbiI7CgogICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHsKICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHsKICAgICAgICBqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBpLCB0aGlzLmNsYXNzTmFtZSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCApOwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICBpZiAoIHR5cGUgPT09ICJzdHJpbmciICkgewogICAgICAgIC8vIHRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzCiAgICAgICAgdmFyIGNsYXNzTmFtZSwKICAgICAgICAgIGkgPSAwLAogICAgICAgICAgc2VsZiA9IGpRdWVyeSggdGhpcyApLAogICAgICAgICAgc3RhdGUgPSBzdGF0ZVZhbCwKICAgICAgICAgIGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggY29yZV9ybm90d2hpdGUgKSB8fCBbXTsKCiAgICAgICAgd2hpbGUgKCAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0pICkgewogICAgICAgICAgLy8gY2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0CiAgICAgICAgICBzdGF0ZSA9IGlzQm9vbCA\/IHN0YXRlIDogIXNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApOwogICAgICAgICAgc2VsZlsgc3RhdGUgPyAiYWRkQ2xhc3MiIDogInJlbW92ZUNsYXNzIiBdKCBjbGFzc05hbWUgKTsKICAgICAgICB9CgogICAgICAvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZQogICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSBjb3JlX3N0cnVuZGVmaW5lZCB8fCB0eXBlID09PSAiYm9vbGVhbiIgKSB7CiAgICAgICAgaWYgKCB0aGlzLmNsYXNzTmFtZSApIHsKICAgICAgICAgIC8vIHN0b3JlIGNsYXNzTmFtZSBpZiBzZXQKICAgICAgICAgIGpRdWVyeS5fZGF0YSggdGhpcywgIl9fY2xhc3NOYW1lX18iLCB0aGlzLmNsYXNzTmFtZSApOwogICAgICAgIH0KCiAgICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgImZhbHNlIiwKICAgICAgICAvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLgogICAgICAgIC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksCiAgICAgICAgLy8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLgogICAgICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID8gIiIgOiBqUXVlcnkuX2RhdGEoIHRoaXMsICJfX2NsYXNzTmFtZV9fIiApIHx8ICIiOwogICAgICB9CiAgICB9KTsKICB9LAoKICBoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkgewogICAgdmFyIGNsYXNzTmFtZSA9ICIgIiArIHNlbGVjdG9yICsgIiAiLAogICAgICBpID0gMCwKICAgICAgbCA9IHRoaXMubGVuZ3RoOwogICAgZm9yICggOyBpIDwgbDsgaSsrICkgewogICAgICBpZiAoIHRoaXNbaV0ubm9kZVR5cGUgPT09IDEgJiYgKCIgIiArIHRoaXNbaV0uY2xhc3NOYW1lICsgIiAiKS5yZXBsYWNlKHJjbGFzcywgIiAiKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+PSAwICkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZhbHNlOwogIH0sCgogIHZhbDogZnVuY3Rpb24oIHZhbHVlICkgewogICAgdmFyIHJldCwgaG9va3MsIGlzRnVuY3Rpb24sCiAgICAgIGVsZW0gPSB0aGlzWzBdOwoKICAgIGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7CiAgICAgIGlmICggZWxlbSApIHsKICAgICAgICBob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTsKCiAgICAgICAgaWYgKCBob29rcyAmJiAiZ2V0IiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCAidmFsdWUiICkpICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgIH0KCiAgICAgICAgcmV0ID0gZWxlbS52YWx1ZTsKCiAgICAgICAgcmV0dXJuIHR5cGVvZiByZXQgPT09ICJzdHJpbmciID8KICAgICAgICAgIC8vIGhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXMKICAgICAgICAgIHJldC5yZXBsYWNlKHJyZXR1cm4sICIiKSA6CiAgICAgICAgICAvLyBoYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXIKICAgICAgICAgIHJldCA9PSBudWxsID8gIiIgOiByZXQ7CiAgICAgIH0KCiAgICAgIHJldHVybjsKICAgIH0KCiAgICBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7CgogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHsKICAgICAgdmFyIHZhbCwKICAgICAgICBzZWxmID0galF1ZXJ5KHRoaXMpOwoKICAgICAgaWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKCBpc0Z1bmN0aW9uICkgewogICAgICAgIHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIHNlbGYudmFsKCkgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YWwgPSB2YWx1ZTsKICAgICAgfQoKICAgICAgLy8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgIiI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmcKICAgICAgaWYgKCB2YWwgPT0gbnVsbCApIHsKICAgICAgICB2YWwgPSAiIjsKICAgICAgfSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gIm51bWJlciIgKSB7CiAgICAgICAgdmFsICs9ICIiOwogICAgICB9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7CiAgICAgICAgdmFsID0galF1ZXJ5Lm1hcCh2YWwsIGZ1bmN0aW9uICggdmFsdWUgKSB7CiAgICAgICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA\/ICIiIDogdmFsdWUgKyAiIjsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgaG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07CgogICAgICAvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZwogICAgICBpZiAoICFob29rcyB8fCAhKCJzZXQiIGluIGhvb2tzKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgInZhbHVlIiApID09PSB1bmRlZmluZWQgKSB7CiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbDsKICAgICAgfQogICAgfSk7CiAgfQp9KTsKCmpRdWVyeS5leHRlbmQoewogIHZhbEhvb2tzOiB7CiAgICBvcHRpb246IHsKICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAvLyBhdHRyaWJ1dGVzLnZhbHVlIGlzIHVuZGVmaW5lZCBpbiBCbGFja2JlcnJ5IDQuNyBidXQKICAgICAgICAvLyB1c2VzIC52YWx1ZS4gU2VlICM2OTMyCiAgICAgICAgdmFyIHZhbCA9IGVsZW0uYXR0cmlidXRlcy52YWx1ZTsKICAgICAgICByZXR1cm4gIXZhbCB8fCB2YWwuc3BlY2lmaWVkID8gZWxlbS52YWx1ZSA6IGVsZW0udGV4dDsKICAgICAgfQogICAgfSwKICAgIHNlbGVjdDogewogICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgIHZhciB2YWx1ZSwgb3B0aW9uLAogICAgICAgICAgb3B0aW9ucyA9IGVsZW0ub3B0aW9ucywKICAgICAgICAgIGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LAogICAgICAgICAgb25lID0gZWxlbS50eXBlID09PSAic2VsZWN0LW9uZSIgfHwgaW5kZXggPCAwLAogICAgICAgICAgdmFsdWVzID0gb25lID8gbnVsbCA6IFtdLAogICAgICAgICAgbWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsCiAgICAgICAgICBpID0gaW5kZXggPCAwID8KICAgICAgICAgICAgbWF4IDoKICAgICAgICAgICAgb25lID8gaW5kZXggOiAwOwoKICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zCiAgICAgICAgZm9yICggOyBpIDwgbWF4OyBpKysgKSB7CiAgICAgICAgICBvcHRpb24gPSBvcHRpb25zWyBpIF07CgogICAgICAgICAgLy8gb2xkSUUgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpCiAgICAgICAgICBpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiYKICAgICAgICAgICAgICAvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwCiAgICAgICAgICAgICAgKCBqUXVlcnkuc3VwcG9ydC5vcHREaXNhYmxlZCA\/ICFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKCJkaXNhYmxlZCIpID09PSBudWxsICkgJiYKICAgICAgICAgICAgICAoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgIm9wdGdyb3VwIiApICkgKSB7CgogICAgICAgICAgICAvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uCiAgICAgICAgICAgIHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTsKCiAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzCiAgICAgICAgICAgIGlmICggb25lICkgewogICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXkKICAgICAgICAgICAgdmFsdWVzLnB1c2goIHZhbHVlICk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdmFsdWVzOwogICAgICB9LAoKICAgICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7CiAgICAgICAgdmFyIHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICk7CgogICAgICAgIGpRdWVyeShlbGVtKS5maW5kKCJvcHRpb24iKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgdGhpcy5zZWxlY3RlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkodGhpcykudmFsKCksIHZhbHVlcyApID49IDA7CiAgICAgICAgfSk7CgogICAgICAgIGlmICggIXZhbHVlcy5sZW5ndGggKSB7CiAgICAgICAgICBlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlczsKICAgICAgfQogICAgfQogIH0sCgogIGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHsKICAgIHZhciBob29rcywgbm90eG1sLCByZXQsCiAgICAgIG5UeXBlID0gZWxlbS5ub2RlVHlwZTsKCiAgICAvLyBkb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzCiAgICBpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkgewogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWQKICAgIGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBjb3JlX3N0cnVuZGVmaW5lZCApIHsKICAgICAgcmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApOwogICAgfQoKICAgIG5vdHhtbCA9IG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKTsKCiAgICAvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlCiAgICAvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkCiAgICBpZiAoIG5vdHhtbCApIHsKICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgaG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gfHwgKCByYm9vbGVhbi50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IG5vZGVIb29rICk7CiAgICB9CgogICAgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewoKICAgICAgaWYgKCB2YWx1ZSA9PT0gbnVsbCApIHsKICAgICAgICBqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApOwoKICAgICAgfSBlbHNlIGlmICggaG9va3MgJiYgbm90eG1sICYmICJzZXQiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgcmV0dXJuIHJldDsKCiAgICAgIH0gZWxzZSB7CiAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgIiIgKTsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0KCiAgICB9IGVsc2UgaWYgKCBob29rcyAmJiBub3R4bWwgJiYgImdldCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCApIHsKICAgICAgcmV0dXJuIHJldDsKCiAgICB9IGVsc2UgewoKICAgICAgLy8gSW4gSUU5KywgRmxhc2ggb2JqZWN0cyBkb24ndCBoYXZlIC5nZXRBdHRyaWJ1dGUgKCMxMjk0NSkKICAgICAgLy8gU3VwcG9ydDogSUU5KwogICAgICBpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gY29yZV9zdHJ1bmRlZmluZWQgKSB7CiAgICAgICAgcmV0ID0gIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7CiAgICAgIH0KCiAgICAgIC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkCiAgICAgIHJldHVybiByZXQgPT0gbnVsbCA\/CiAgICAgICAgdW5kZWZpbmVkIDoKICAgICAgICByZXQ7CiAgICB9CiAgfSwKCiAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewogICAgdmFyIG5hbWUsIHByb3BOYW1lLAogICAgICBpID0gMCwKICAgICAgYXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIGNvcmVfcm5vdHdoaXRlICk7CgogICAgaWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHsKICAgICAgd2hpbGUgKCAobmFtZSA9IGF0dHJOYW1lc1tpKytdKSApIHsKICAgICAgICBwcm9wTmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTsKCiAgICAgICAgLy8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKQogICAgICAgIGlmICggcmJvb2xlYW4udGVzdCggbmFtZSApICkgewogICAgICAgICAgLy8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2UgZm9yIGJvb2xlYW4gYXR0cmlidXRlcwogICAgICAgICAgLy8gQWxzbyBjbGVhciBkZWZhdWx0Q2hlY2tlZC9kZWZhdWx0U2VsZWN0ZWQgKGlmIGFwcHJvcHJpYXRlKSBmb3IgSUU8OAogICAgICAgICAgaWYgKCAhZ2V0U2V0QXR0cmlidXRlICYmIHJ1c2VEZWZhdWx0LnRlc3QoIG5hbWUgKSApIHsKICAgICAgICAgICAgZWxlbVsgalF1ZXJ5LmNhbWVsQ2FzZSggImRlZmF1bHQtIiArIG5hbWUgKSBdID0KICAgICAgICAgICAgICBlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgIC8vIFNlZSAjOTY5OSBmb3IgZXhwbGFuYXRpb24gb2YgdGhpcyBhcHByb2FjaCAoc2V0dGluZyBmaXJzdCwgdGhlbiByZW1vdmFsKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBqUXVlcnkuYXR0ciggZWxlbSwgbmFtZSwgIiIgKTsKICAgICAgICB9CgogICAgICAgIGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBnZXRTZXRBdHRyaWJ1dGUgPyBuYW1lIDogcHJvcE5hbWUgKTsKICAgICAgfQogICAgfQogIH0sCgogIGF0dHJIb29rczogewogICAgdHlwZTogewogICAgICBzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKICAgICAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSAicmFkaW8iICYmIGpRdWVyeS5ub2RlTmFtZShlbGVtLCAiaW5wdXQiKSApIHsKICAgICAgICAgIC8vIFNldHRpbmcgdGhlIHR5cGUgb24gYSByYWRpbyBidXR0b24gYWZ0ZXIgdGhlIHZhbHVlIHJlc2V0cyB0aGUgdmFsdWUgaW4gSUU2LTkKICAgICAgICAgIC8vIFJlc2V0IHZhbHVlIHRvIGRlZmF1bHQgaW4gY2FzZSB0eXBlIGlzIHNldCBhZnRlciB2YWx1ZSBkdXJpbmcgY3JlYXRpb24KICAgICAgICAgIHZhciB2YWwgPSBlbGVtLnZhbHVlOwogICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoICJ0eXBlIiwgdmFsdWUgKTsKICAgICAgICAgIGlmICggdmFsICkgewogICAgICAgICAgICBlbGVtLnZhbHVlID0gdmFsOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCgogIHByb3BGaXg6IHsKICAgIHRhYmluZGV4OiAidGFiSW5kZXgiLAogICAgcmVhZG9ubHk6ICJyZWFkT25seSIsCiAgICAiZm9yIjogImh0bWxGb3IiLAogICAgImNsYXNzIjogImNsYXNzTmFtZSIsCiAgICBtYXhsZW5ndGg6ICJtYXhMZW5ndGgiLAogICAgY2VsbHNwYWNpbmc6ICJjZWxsU3BhY2luZyIsCiAgICBjZWxscGFkZGluZzogImNlbGxQYWRkaW5nIiwKICAgIHJvd3NwYW46ICJyb3dTcGFuIiwKICAgIGNvbHNwYW46ICJjb2xTcGFuIiwKICAgIHVzZW1hcDogInVzZU1hcCIsCiAgICBmcmFtZWJvcmRlcjogImZyYW1lQm9yZGVyIiwKICAgIGNvbnRlbnRlZGl0YWJsZTogImNvbnRlbnRFZGl0YWJsZSIKICB9LAoKICBwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7CiAgICB2YXIgcmV0LCBob29rcywgbm90eG1sLAogICAgICBuVHlwZSA9IGVsZW0ubm9kZVR5cGU7CgogICAgLy8gZG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2RlcwogICAgaWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIG5vdHhtbCA9IG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKTsKCiAgICBpZiAoIG5vdHhtbCApIHsKICAgICAgLy8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rcwogICAgICBuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lOwogICAgICBob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTsKICAgIH0KCiAgICBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CiAgICAgIGlmICggaG9va3MgJiYgInNldCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICByZXR1cm4gcmV0OwoKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApOwogICAgICB9CgogICAgfSBlbHNlIHsKICAgICAgaWYgKCBob29rcyAmJiAiZ2V0IiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsICkgewogICAgICAgIHJldHVybiByZXQ7CgogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBlbGVtWyBuYW1lIF07CiAgICAgIH0KICAgIH0KICB9LAoKICBwcm9wSG9va3M6IHsKICAgIHRhYkluZGV4OiB7CiAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgLy8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldAogICAgICAgIC8vIGh0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvCiAgICAgICAgdmFyIGF0dHJpYnV0ZU5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoInRhYmluZGV4Iik7CgogICAgICAgIHJldHVybiBhdHRyaWJ1dGVOb2RlICYmIGF0dHJpYnV0ZU5vZGUuc3BlY2lmaWVkID8KICAgICAgICAgIHBhcnNlSW50KCBhdHRyaWJ1dGVOb2RlLnZhbHVlLCAxMCApIDoKICAgICAgICAgIHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8IHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmIGVsZW0uaHJlZiA\/CiAgICAgICAgICAgIDAgOgogICAgICAgICAgICB1bmRlZmluZWQ7CiAgICAgIH0KICAgIH0KICB9Cn0pOwoKLy8gSG9vayBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzCmJvb2xIb29rID0gewogIGdldDogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CiAgICB2YXIKICAgICAgLy8gVXNlIC5wcm9wIHRvIGRldGVybWluZSBpZiB0aGlzIGF0dHJpYnV0ZSBpcyB1bmRlcnN0b29kIGFzIGJvb2xlYW4KICAgICAgcHJvcCA9IGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lICksCgogICAgICAvLyBGZXRjaCBpdCBhY2NvcmRpbmdseQogICAgICBhdHRyID0gdHlwZW9mIHByb3AgPT09ICJib29sZWFuIiAmJiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApLAogICAgICBkZXRhaWwgPSB0eXBlb2YgcHJvcCA9PT0gImJvb2xlYW4iID8KCiAgICAgICAgZ2V0U2V0SW5wdXQgJiYgZ2V0U2V0QXR0cmlidXRlID8KICAgICAgICAgIGF0dHIgIT0gbnVsbCA6CiAgICAgICAgICAvLyBvbGRJRSBmYWJyaWNhdGVzIGFuIGVtcHR5IHN0cmluZyBmb3IgbWlzc2luZyBib29sZWFuIGF0dHJpYnV0ZXMKICAgICAgICAgIC8vIGFuZCBjb25mbGF0ZXMgY2hlY2tlZC9zZWxlY3RlZCBpbnRvIGF0dHJvcGVydGllcwogICAgICAgICAgcnVzZURlZmF1bHQudGVzdCggbmFtZSApID8KICAgICAgICAgICAgZWxlbVsgalF1ZXJ5LmNhbWVsQ2FzZSggImRlZmF1bHQtIiArIG5hbWUgKSBdIDoKICAgICAgICAgICAgISFhdHRyIDoKCiAgICAgICAgLy8gZmV0Y2ggYW4gYXR0cmlidXRlIG5vZGUgZm9yIHByb3BlcnRpZXMgbm90IHJlY29nbml6ZWQgYXMgYm9vbGVhbgogICAgICAgIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApOwoKICAgIHJldHVybiBkZXRhaWwgJiYgZGV0YWlsLnZhbHVlICE9PSBmYWxzZSA\/CiAgICAgIG5hbWUudG9Mb3dlckNhc2UoKSA6CiAgICAgIHVuZGVmaW5lZDsKICB9LAogIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkgewogICAgaWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7CiAgICAgIC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2UKICAgICAgalF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTsKICAgIH0gZWxzZSBpZiAoIGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApICkgewogICAgICAvLyBJRTw4IG5lZWRzIHRoZSAqcHJvcGVydHkqIG5hbWUKICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoICFnZXRTZXRBdHRyaWJ1dGUgJiYgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lLCBuYW1lICk7CgogICAgLy8gVXNlIGRlZmF1bHRDaGVja2VkIGFuZCBkZWZhdWx0U2VsZWN0ZWQgZm9yIG9sZElFCiAgICB9IGVsc2UgewogICAgICBlbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCAiZGVmYXVsdC0iICsgbmFtZSApIF0gPSBlbGVtWyBuYW1lIF0gPSB0cnVlOwogICAgfQoKICAgIHJldHVybiBuYW1lOwogIH0KfTsKCi8vIGZpeCBvbGRJRSB2YWx1ZSBhdHRyb3BlcnR5CmlmICggIWdldFNldElucHV0IHx8ICFnZXRTZXRBdHRyaWJ1dGUgKSB7CiAgalF1ZXJ5LmF0dHJIb29rcy52YWx1ZSA9IHsKICAgIGdldDogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CiAgICAgIHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTsKICAgICAgcmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgImlucHV0IiApID8KCiAgICAgICAgLy8gSWdub3JlIHRoZSB2YWx1ZSAqcHJvcGVydHkqIGJ5IHVzaW5nIGRlZmF1bHRWYWx1ZQogICAgICAgIGVsZW0uZGVmYXVsdFZhbHVlIDoKCiAgICAgICAgcmV0ICYmIHJldC5zcGVjaWZpZWQgPyByZXQudmFsdWUgOiB1bmRlZmluZWQ7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7CiAgICAgIGlmICggalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCAiaW5wdXQiICkgKSB7CiAgICAgICAgLy8gRG9lcyBub3QgcmV0dXJuIHNvIHRoYXQgc2V0QXR0cmlidXRlIGlzIGFsc28gdXNlZAogICAgICAgIGVsZW0uZGVmYXVsdFZhbHVlID0gdmFsdWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gVXNlIG5vZGVIb29rIGlmIGRlZmluZWQgKCMxOTU0KTsgb3RoZXJ3aXNlIHNldEF0dHJpYnV0ZSBpcyBmaW5lCiAgICAgICAgcmV0dXJuIG5vZGVIb29rICYmIG5vZGVIb29rLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKTsKICAgICAgfQogICAgfQogIH07Cn0KCi8vIElFNi83IGRvIG5vdCBzdXBwb3J0IGdldHRpbmcvc2V0dGluZyBzb21lIGF0dHJpYnV0ZXMgd2l0aCBnZXQvc2V0QXR0cmlidXRlCmlmICggIWdldFNldEF0dHJpYnV0ZSApIHsKCiAgLy8gVXNlIHRoaXMgZm9yIGFueSBhdHRyaWJ1dGUgaW4gSUU2LzcKICAvLyBUaGlzIGZpeGVzIGFsbW9zdCBldmVyeSBJRTYvNyBpc3N1ZQogIG5vZGVIb29rID0galF1ZXJ5LnZhbEhvb2tzLmJ1dHRvbiA9IHsKICAgIGdldDogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CiAgICAgIHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTsKICAgICAgcmV0dXJuIHJldCAmJiAoIG5hbWUgPT09ICJpZCIgfHwgbmFtZSA9PT0gIm5hbWUiIHx8IG5hbWUgPT09ICJjb29yZHMiID8gcmV0LnZhbHVlICE9PSAiIiA6IHJldC5zcGVjaWZpZWQgKSA\/CiAgICAgICAgcmV0LnZhbHVlIDoKICAgICAgICB1bmRlZmluZWQ7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7CiAgICAgIC8vIFNldCB0aGUgZXhpc3Rpbmcgb3IgY3JlYXRlIGEgbmV3IGF0dHJpYnV0ZSBub2RlCiAgICAgIHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTsKICAgICAgaWYgKCAhcmV0ICkgewogICAgICAgIGVsZW0uc2V0QXR0cmlidXRlTm9kZSgKICAgICAgICAgIChyZXQgPSBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKCBuYW1lICkpCiAgICAgICAgKTsKICAgICAgfQoKICAgICAgcmV0LnZhbHVlID0gdmFsdWUgKz0gIiI7CgogICAgICAvLyBCcmVhayBhc3NvY2lhdGlvbiB3aXRoIGNsb25lZCBlbGVtZW50cyBieSBhbHNvIHVzaW5nIHNldEF0dHJpYnV0ZSAoIzk2NDYpCiAgICAgIHJldHVybiBuYW1lID09PSAidmFsdWUiIHx8IHZhbHVlID09PSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApID8KICAgICAgICB2YWx1ZSA6CiAgICAgICAgdW5kZWZpbmVkOwogICAgfQogIH07CgogIC8vIFNldCBjb250ZW50ZWRpdGFibGUgdG8gZmFsc2Ugb24gcmVtb3ZhbHMoIzEwNDI5KQogIC8vIFNldHRpbmcgdG8gZW1wdHkgc3RyaW5nIHRocm93cyBhbiBlcnJvciBhcyBhbiBpbnZhbGlkIHZhbHVlCiAgalF1ZXJ5LmF0dHJIb29rcy5jb250ZW50ZWRpdGFibGUgPSB7CiAgICBnZXQ6IG5vZGVIb29rLmdldCwKICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkgewogICAgICBub2RlSG9vay5zZXQoIGVsZW0sIHZhbHVlID09PSAiIiA\/IGZhbHNlIDogdmFsdWUsIG5hbWUgKTsKICAgIH0KICB9OwoKICAvLyBTZXQgd2lkdGggYW5kIGhlaWdodCB0byBhdXRvIGluc3RlYWQgb2YgMCBvbiBlbXB0eSBzdHJpbmcoIEJ1ZyAjODE1MCApCiAgLy8gVGhpcyBpcyBmb3IgcmVtb3ZhbHMKICBqUXVlcnkuZWFjaChbICJ3aWR0aCIsICJoZWlnaHQiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkgewogICAgalF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdLCB7CiAgICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewogICAgICAgIGlmICggdmFsdWUgPT09ICIiICkgewogICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsICJhdXRvIiApOwogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfSk7Cn0KCgovLyBTb21lIGF0dHJpYnV0ZXMgcmVxdWlyZSBhIHNwZWNpYWwgY2FsbCBvbiBJRQovLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4CmlmICggIWpRdWVyeS5zdXBwb3J0LmhyZWZOb3JtYWxpemVkICkgewogIGpRdWVyeS5lYWNoKFsgImhyZWYiLCAic3JjIiwgIndpZHRoIiwgImhlaWdodCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7CiAgICBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0sIHsKICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICB2YXIgcmV0ID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIDIgKTsKICAgICAgICByZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7CiAgICAgIH0KICAgIH0pOwogIH0pOwoKICAvLyBocmVmL3NyYyBwcm9wZXJ0eSBzaG91bGQgZ2V0IHRoZSBmdWxsIG5vcm1hbGl6ZWQgVVJMICgjMTAyOTkvIzEyOTE1KQogIGpRdWVyeS5lYWNoKFsgImhyZWYiLCAic3JjIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKICAgIGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXSA9IHsKICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIDQgKTsKICAgICAgfQogICAgfTsKICB9KTsKfQoKaWYgKCAhalF1ZXJ5LnN1cHBvcnQuc3R5bGUgKSB7CiAgalF1ZXJ5LmF0dHJIb29rcy5zdHlsZSA9IHsKICAgIGdldDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIC8vIFJldHVybiB1bmRlZmluZWQgaW4gdGhlIGNhc2Ugb2YgZW1wdHkgc3RyaW5nCiAgICAgIC8vIE5vdGU6IElFIHVwcGVyY2FzZXMgY3NzIHByb3BlcnR5IG5hbWVzLCBidXQgaWYgd2Ugd2VyZSB0byAudG9Mb3dlckNhc2UoKQogICAgICAvLyAuY3NzVGV4dCwgdGhhdCB3b3VsZCBkZXN0cm95IGNhc2Ugc2Vuc3RpdGl2aXR5IGluIFVSTCdzLCBsaWtlIGluICJiYWNrZ3JvdW5kIgogICAgICByZXR1cm4gZWxlbS5zdHlsZS5jc3NUZXh0IHx8IHVuZGVmaW5lZDsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKICAgICAgcmV0dXJuICggZWxlbS5zdHlsZS5jc3NUZXh0ID0gdmFsdWUgKyAiIiApOwogICAgfQogIH07Cn0KCi8vIFNhZmFyaSBtaXMtcmVwb3J0cyB0aGUgZGVmYXVsdCBzZWxlY3RlZCBwcm9wZXJ0eSBvZiBhbiBvcHRpb24KLy8gQWNjZXNzaW5nIHRoZSBwYXJlbnQncyBzZWxlY3RlZEluZGV4IHByb3BlcnR5IGZpeGVzIGl0CmlmICggIWpRdWVyeS5zdXBwb3J0Lm9wdFNlbGVjdGVkICkgewogIGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSBqUXVlcnkuZXh0ZW5kKCBqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkLCB7CiAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICB2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlOwoKICAgICAgaWYgKCBwYXJlbnQgKSB7CiAgICAgICAgcGFyZW50LnNlbGVjdGVkSW5kZXg7CgogICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGl0IGFsc28gd29ya3Mgd2l0aCBvcHRncm91cHMsIHNlZSAjNTcwMQogICAgICAgIGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7CiAgICAgICAgICBwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4OwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9KTsKfQoKLy8gSUU2LzcgY2FsbCBlbmN0eXBlIGVuY29kaW5nCmlmICggIWpRdWVyeS5zdXBwb3J0LmVuY3R5cGUgKSB7CiAgalF1ZXJ5LnByb3BGaXguZW5jdHlwZSA9ICJlbmNvZGluZyI7Cn0KCi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyCmlmICggIWpRdWVyeS5zdXBwb3J0LmNoZWNrT24gKSB7CiAgalF1ZXJ5LmVhY2goWyAicmFkaW8iLCAiY2hlY2tib3giIF0sIGZ1bmN0aW9uKCkgewogICAgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7CiAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIGluIFdlYmtpdCAiIiBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mICJvbiIgaWYgYSB2YWx1ZSBpc24ndCBzcGVjaWZpZWQKICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoInZhbHVlIikgPT09IG51bGwgPyAib24iIDogZWxlbS52YWx1ZTsKICAgICAgfQogICAgfTsKICB9KTsKfQpqUXVlcnkuZWFjaChbICJyYWRpbyIsICJjaGVja2JveCIgXSwgZnVuY3Rpb24oKSB7CiAgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSBqUXVlcnkuZXh0ZW5kKCBqUXVlcnkudmFsSG9va3NbIHRoaXMgXSwgewogICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7CiAgICAgIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7CiAgICAgICAgcmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeShlbGVtKS52YWwoKSwgdmFsdWUgKSA+PSAwICk7CiAgICAgIH0KICAgIH0KICB9KTsKfSk7CnZhciByZm9ybUVsZW1zID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWEpJC9pLAogIHJrZXlFdmVudCA9IC9ea2V5LywKICBybW91c2VFdmVudCA9IC9eKD86bW91c2V8Y29udGV4dG1lbnUpfGNsaWNrLywKICByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLywKICBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg\\/CiAgICAgIGV2ZW50IDoKICAgICAgbmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSAib2JqZWN0IiAmJiBldmVudCApOwoKICAgIGV2ZW50LmlzVHJpZ2dlciA9IHRydWU7CiAgICBldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIi4iKTsKICAgIGV2ZW50Lm5hbWVzcGFjZV9yZSA9IGV2ZW50Lm5hbWVzcGFjZSA\\/CiAgICAgICAgICAgICAgICBqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+PSAwIDoKICAgICAgICAgICAgICAgIGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCBtYXRjaGVzWyBzZWwgXSApIHsKICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIG1hdGNoZXMubGVuZ3RoICkgewogICAgICAgICAgICBoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgLy8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVycwogICAgaWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkgewogICAgICBoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0pOwogICAgfQoKICAgIHJldHVybiBoYW5kbGVyUXVldWU7CiAgfSwKCiAgZml4OiBmdW5jdGlvbiggZXZlbnQgKSB7CiAgICBpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkgewogICAgICByZXR1cm4gZXZlbnQ7CiAgICB9CgogICAgLy8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzCiAgICB2YXIgaSwgcHJvcCwgY29weSwKICAgICAgdHlwZSA9IGV2ZW50LnR5cGUsCiAgICAgIG9yaWdpbmFsRXZlbnQgPSBldmVudCwKICAgICAgZml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTsKCiAgICBpZiAoICFmaXhIb29rICkgewogICAgICB0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID0KICAgICAgICBybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOgogICAgICAgIHJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDoKICAgICAgICB7fTsKICAgIH0KICAgIGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7CgogICAgZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7CgogICAgaSA9IGNvcHkubGVuZ3RoOwogICAgd2hpbGUgKCBpLS0gKSB7CiAgICAgIHByb3AgPSBjb3B5WyBpIF07CiAgICAgIGV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07CiAgICB9CgogICAgLy8gU3VwcG9ydDogSUU8OQogICAgLy8gRml4IHRhcmdldCBwcm9wZXJ0eSAoIzE5MjUpCiAgICBpZiAoICFldmVudC50YXJnZXQgKSB7CiAgICAgIGV2ZW50LnRhcmdldCA9IG9yaWdpbmFsRXZlbnQuc3JjRWxlbWVudCB8fCBkb2N1bWVudDsKICAgIH0KCiAgICAvLyBTdXBwb3J0OiBDaHJvbWUgMjMrLCBTYWZhcmk\/CiAgICAvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKQogICAgaWYgKCBldmVudC50YXJnZXQubm9kZVR5cGUgPT09IDMgKSB7CiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlOwogICAgfQoKICAgIC8vIFN1cHBvcnQ6IElFPDkKICAgIC8vIEZvciBtb3VzZS9rZXkgZXZlbnRzLCBtZXRhS2V5PT1mYWxzZSBpZiBpdCdzIHVuZGVmaW5lZCAoIzMzNjgsICMxMTMyOCkKICAgIGV2ZW50Lm1ldGFLZXkgPSAhIWV2ZW50Lm1ldGFLZXk7CgogICAgcmV0dXJuIGZpeEhvb2suZmlsdGVyID8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDsKICB9LAoKICAvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudAogIHByb3BzOiAiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoIi5zcGxpdCgiICIpLAoKICBmaXhIb29rczoge30sCgogIGtleUhvb2tzOiB7CiAgICBwcm9wczogImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGUiLnNwbGl0KCIgIiksCiAgICBmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7CgogICAgICAvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHMKICAgICAgaWYgKCBldmVudC53aGljaCA9PSBudWxsICkgewogICAgICAgIGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA\/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGV2ZW50OwogICAgfQogIH0sCgogIG1vdXNlSG9va3M6IHsKICAgIHByb3BzOiAiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIGZyb21FbGVtZW50IG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50Ii5zcGxpdCgiICIpLAogICAgZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkgewogICAgICB2YXIgYm9keSwgZXZlbnREb2MsIGRvYywKICAgICAgICBidXR0b24gPSBvcmlnaW5hbC5idXR0b24sCiAgICAgICAgZnJvbUVsZW1lbnQgPSBvcmlnaW5hbC5mcm9tRWxlbWVudDsKCiAgICAgIC8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGUKICAgICAgaWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHsKICAgICAgICBldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50OwogICAgICAgIGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDsKICAgICAgICBib2R5ID0gZXZlbnREb2MuYm9keTsKCiAgICAgICAgZXZlbnQucGFnZVggPSBvcmlnaW5hbC5jbGllbnRYICsgKCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCApOwogICAgICAgIGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArICggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRUb3AgIHx8IGJvZHkgJiYgYm9keS5jbGllbnRUb3AgIHx8IDAgKTsKICAgICAgfQoKICAgICAgLy8gQWRkIHJlbGF0ZWRUYXJnZXQsIGlmIG5lY2Vzc2FyeQogICAgICBpZiAoICFldmVudC5yZWxhdGVkVGFyZ2V0ICYmIGZyb21FbGVtZW50ICkgewogICAgICAgIGV2ZW50LnJlbGF0ZWRUYXJnZXQgPSBmcm9tRWxlbWVudCA9PT0gZXZlbnQudGFyZ2V0ID8gb3JpZ2luYWwudG9FbGVtZW50IDogZnJvbUVsZW1lbnQ7CiAgICAgIH0KCiAgICAgIC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHQKICAgICAgLy8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXQKICAgICAgaWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA\/IDIgOiAwICkgKSApOwogICAgICB9CgogICAgICByZXR1cm4gZXZlbnQ7CiAgICB9CiAgfSwKCiAgc3BlY2lhbDogewogICAgbG9hZDogewogICAgICAvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkCiAgICAgIG5vQnViYmxlOiB0cnVlCiAgICB9LAogICAgY2xpY2s6IHsKICAgICAgLy8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHQKICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsICJpbnB1dCIgKSAmJiB0aGlzLnR5cGUgPT09ICJjaGVja2JveCIgJiYgdGhpcy5jbGljayApIHsKICAgICAgICAgIHRoaXMuY2xpY2soKTsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBmb2N1czogewogICAgICAvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3QKICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCB0aGlzICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIHRoaXMuZm9jdXMgKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICB0aGlzLmZvY3VzKCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0gY2F0Y2ggKCBlICkgewogICAgICAgICAgICAvLyBTdXBwb3J0OiBJRTw5CiAgICAgICAgICAgIC8vIElmIHdlIGVycm9yIG9uIGZvY3VzIHRvIGhpZGRlbiBlbGVtZW50ICgjMTQ4NiwgIzEyNTE4KSwKICAgICAgICAgICAgLy8gbGV0IC50cmlnZ2VyKCkgcnVuIHRoZSBoYW5kbGVycwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgZGVsZWdhdGVUeXBlOiAiZm9jdXNpbiIKICAgIH0sCiAgICBibHVyOiB7CiAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICggdGhpcyA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiB0aGlzLmJsdXIgKSB7CiAgICAgICAgICB0aGlzLmJsdXIoKTsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRlbGVnYXRlVHlwZTogImZvY3Vzb3V0IgogICAgfSwKCiAgICBiZWZvcmV1bmxvYWQ6IHsKICAgICAgcG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7CgogICAgICAgIC8vIEV2ZW4gd2hlbiByZXR1cm5WYWx1ZSBlcXVhbHMgdG8gdW5kZWZpbmVkIEZpcmVmb3ggd2lsbCBzdGlsbCBzaG93IGFsZXJ0CiAgICAgICAgaWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKCiAgc2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCwgYnViYmxlICkgewogICAgLy8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lLgogICAgLy8gRmFrZSBvcmlnaW5hbEV2ZW50IHRvIGF2b2lkIGRvbm9yJ3Mgc3RvcFByb3BhZ2F0aW9uLCBidXQgaWYgdGhlCiAgICAvLyBzaW11bGF0ZWQgZXZlbnQgcHJldmVudHMgZGVmYXVsdCB0aGVuIHdlIGRvIHRoZSBzYW1lIG9uIHRoZSBkb25vci4KICAgIHZhciBlID0galF1ZXJ5LmV4dGVuZCgKICAgICAgbmV3IGpRdWVyeS5FdmVudCgpLAogICAgICBldmVudCwKICAgICAgeyB0eXBlOiB0eXBlLAogICAgICAgIGlzU2ltdWxhdGVkOiB0cnVlLAogICAgICAgIG9yaWdpbmFsRXZlbnQ6IHt9CiAgICAgIH0KICAgICk7CiAgICBpZiAoIGJ1YmJsZSApIHsKICAgICAgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTsKICAgIH0gZWxzZSB7CiAgICAgIGpRdWVyeS5ldmVudC5kaXNwYXRjaC5jYWxsKCBlbGVtLCBlICk7CiAgICB9CiAgICBpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICB9CiAgfQp9OwoKalF1ZXJ5LnJlbW92ZUV2ZW50ID0gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciA\/CiAgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHsKICAgIGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkgewogICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSwgZmFsc2UgKTsKICAgIH0KICB9IDoKICBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkgewogICAgdmFyIG5hbWUgPSAib24iICsgdHlwZTsKCiAgICBpZiAoIGVsZW0uZGV0YWNoRXZlbnQgKSB7CgogICAgICAvLyAjODU0NSwgIzcwNTQsIHByZXZlbnRpbmcgbWVtb3J5IGxlYWtzIGZvciBjdXN0b20gZXZlbnRzIGluIElFNi04CiAgICAgIC8vIGRldGFjaEV2ZW50IG5lZWRlZCBwcm9wZXJ0eSBvbiBlbGVtZW50LCBieSBuYW1lIG9mIHRoYXQgZXZlbnQsIHRvIHByb3Blcmx5IGV4cG9zZSBpdCB0byBHQwogICAgICBpZiAoIHR5cGVvZiBlbGVtWyBuYW1lIF0gPT09IGNvcmVfc3RydW5kZWZpbmVkICkgewogICAgICAgIGVsZW1bIG5hbWUgXSA9IG51bGw7CiAgICAgIH0KCiAgICAgIGVsZW0uZGV0YWNoRXZlbnQoIG5hbWUsIGhhbmRsZSApOwogICAgfQogIH07CgpqUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHsKICAvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmQKICBpZiAoICEodGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCkgKSB7CiAgICByZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApOwogIH0KCiAgLy8gRXZlbnQgb2JqZWN0CiAgaWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7CiAgICB0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7CiAgICB0aGlzLnR5cGUgPSBzcmMudHlwZTsKCiAgICAvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZAogICAgLy8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuCiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9ICggc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHwgc3JjLnJldHVyblZhbHVlID09PSBmYWxzZSB8fAogICAgICBzcmMuZ2V0UHJldmVudERlZmF1bHQgJiYgc3JjLmdldFByZXZlbnREZWZhdWx0KCkgKSA\\/OiIgKyBvcGVyYXRvcnMgKyB3aGl0ZXNwYWNlICsgIiooPzooWydcIl0pKCg\/OlxcXFwufFteXFxcXF0pKj8pXFwzfCgiICsgaWRlbnRpZmllciArICIpfCl8KSIgKyB3aGl0ZXNwYWNlICsgIipcXF0iLAoKICAvLyBQcmVmZXIgYXJndW1lbnRzIHF1b3RlZCwKICAvLyAgIHRoZW4gbm90IGNvbnRhaW5pbmcgcHNldWRvcy9icmFja2V0cywKICAvLyAgIHRoZW4gYXR0cmlidXRlIHNlbGVjdG9ycy9ub24tcGFyZW50aGV0aWNhbCBleHByZXNzaW9ucywKICAvLyAgIHRoZW4gYW55dGhpbmcgZWxzZQogIC8vIFRoZXNlIHByZWZlcmVuY2VzIGFyZSBoZXJlIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycwogIC8vICAgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgUFNFVURPIHByZUZpbHRlcgogIHBzZXVkb3MgPSAiOigiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyAiKSg\/OlxcKCgoWydcIl0pKCg\/OlxcXFwufFteXFxcXF0pKj8pXFwzfCgoPzpcXFxcLnxbXlxcXFwoKVtcXF1dfCIgKyBhdHRyaWJ1dGVzLnJlcGxhY2UoIDMsIDggKSArICIpKil8LiopXFwpfCkiLAoKICAvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyCiAgcnRyaW0gPSBuZXcgUmVnRXhwKCAiXiIgKyB3aGl0ZXNwYWNlICsgIit8KCg\/Ol58W15cXFxcXSkoPzpcXFxcLikqKSIgKyB3aGl0ZXNwYWNlICsgIiskIiwgImciICksCgogIHJjb21tYSA9IG5ldyBSZWdFeHAoICJeIiArIHdoaXRlc3BhY2UgKyAiKiwiICsgd2hpdGVzcGFjZSArICIqIiApLAogIHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoICJeIiArIHdoaXRlc3BhY2UgKyAiKihbXFx4MjBcXHRcXHJcXG5cXGY+K35dKSIgKyB3aGl0ZXNwYWNlICsgIioiICksCiAgcnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSwKICByaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoICJeIiArIGlkZW50aWZpZXIgKyAiJCIgKSwKCiAgbWF0Y2hFeHByID0gewogICAgIklEIjogbmV3IFJlZ0V4cCggIl4jKCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArICIpIiApLAogICAgIkNMQVNTIjogbmV3IFJlZ0V4cCggIl5cXC4oIiArIGNoYXJhY3RlckVuY29kaW5nICsgIikiICksCiAgICAiTkFNRSI6IG5ldyBSZWdFeHAoICJeXFxbbmFtZT1bJ1wiXT8oIiArIGNoYXJhY3RlckVuY29kaW5nICsgIilbJ1wiXT9cXF0iICksCiAgICAiVEFHIjogbmV3IFJlZ0V4cCggIl4oIiArIGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoICJ3IiwgIncqIiApICsgIikiICksCiAgICAiQVRUUiI6IG5ldyBSZWdFeHAoICJeIiArIGF0dHJpYnV0ZXMgKSwKICAgICJQU0VVRE8iOiBuZXcgUmVnRXhwKCAiXiIgKyBwc2V1ZG9zICksCiAgICAiQ0hJTEQiOiBuZXcgUmVnRXhwKCAiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFwoIiArIHdoaXRlc3BhY2UgKwogICAgICAiKihldmVufG9kZHwoKFsrLV18KShcXGQqKW58KSIgKyB3aGl0ZXNwYWNlICsgIiooPzooWystXXwpIiArIHdoaXRlc3BhY2UgKwogICAgICAiKihcXGQrKXwpKSIgKyB3aGl0ZXNwYWNlICsgIipcXCl8KSIsICJpIiApLAogICAgLy8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpCiAgICAvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgCiAgICAibmVlZHNDb250ZXh0IjogbmV3IFJlZ0V4cCggIl4iICsgd2hpdGVzcGFjZSArICIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXCgiICsKICAgICAgd2hpdGVzcGFjZSArICIqKCg\/Oi1cXGQpP1xcZCopIiArIHdoaXRlc3BhY2UgKyAiKlxcKXwpKD89W14tXXwkKSIsICJpIiApCiAgfSwKCiAgcnNpYmxpbmcgPSAvW1x4MjBcdFxyXG5cZl0qWyt+XS8sCgogIHJuYXRpdmUgPSAvXltee10rXHtccypcW25hdGl2ZSBjb2RlLywKCiAgLy8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzCiAgcnF1aWNrRXhwciA9IC9eKD86IyhbXHctXSspfChcdyspfFwuKFtcdy1dKykpJC8sCgogIHJpbnB1dHMgPSAvXig\/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLAogIHJoZWFkZXIgPSAvXmhcZCQvaSwKCiAgcmVzY2FwZSA9IC8nfFxcL2csCiAgcmF0dHJpYnV0ZVF1b3RlcyA9IC9cPVtceDIwXHRcclxuXGZdKihbXiciXF1dKilbXHgyMFx0XHJcblxmXSpcXS9nLAoKICAvLyBDU1MgZXNjYXBlcyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzCiAgcnVuZXNjYXBlID0gL1xcKFtcZGEtZkEtRl17MSw2fVtceDIwXHRcclxuXGZdP3wuKS9nLAogIGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkICkgewogICAgdmFyIGhpZ2ggPSAiMHgiICsgZXNjYXBlZCAtIDB4MTAwMDA7CiAgICAvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludAogICAgcmV0dXJuIGhpZ2ggIT09IGhpZ2ggPwogICAgICBlc2NhcGVkIDoKICAgICAgLy8gQk1QIGNvZGVwb2ludAogICAgICBoaWdoIDwgMCA\/CiAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6CiAgICAgICAgLy8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpCiAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7CiAgfTsKCi8vIFVzZSBhIHN0cmlwcGVkLWRvd24gc2xpY2UgaWYgd2UgY2FuJ3QgdXNlIGEgbmF0aXZlIG9uZQp0cnkgewogIHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5kb2N1bWVudEVsZW1lbnQuY2hpbGROb2RlcywgMCApWzBdLm5vZGVUeXBlOwp9IGNhdGNoICggZSApIHsKICBzbGljZSA9IGZ1bmN0aW9uKCBpICkgewogICAgdmFyIGVsZW0sCiAgICAgIHJlc3VsdHMgPSBbXTsKICAgIHdoaWxlICggKGVsZW0gPSB0aGlzW2krK10pICkgewogICAgICByZXN1bHRzLnB1c2goIGVsZW0gKTsKICAgIH0KICAgIHJldHVybiByZXN1bHRzOwogIH07Cn0KCi8qKgogKiBGb3IgZmVhdHVyZSBkZXRlY3Rpb24KICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIHRlc3QgZm9yIG5hdGl2ZSBzdXBwb3J0CiAqLwpmdW5jdGlvbiBpc05hdGl2ZSggZm4gKSB7CiAgcmV0dXJuIHJuYXRpdmUudGVzdCggZm4gKyAiIiApOwp9CgovKioKICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplCiAqIEByZXR1cm5zIHtGdW5jdGlvbihzdHJpbmcsIE9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGgKICogIHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpCiAqICBkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5CiAqLwpmdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHsKICB2YXIgY2FjaGUsCiAgICBrZXlzID0gW107CgogIHJldHVybiAoY2FjaGUgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKICAgIC8vIFVzZSAoa2V5ICsgIiAiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KQogICAgaWYgKCBrZXlzLnB1c2goIGtleSArPSAiICIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7CiAgICAgIC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllcwogICAgICBkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdOwogICAgfQogICAgcmV0dXJuIChjYWNoZVsga2V5IF0gPSB2YWx1ZSk7CiAgfSk7Cn0KCi8qKgogKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFyawogKi8KZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHsKICBmblsgZXhwYW5kbyBdID0gdHJ1ZTsKICByZXR1cm4gZm47Cn0KCi8qKgogKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudAogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHQKICovCmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7CiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoKICB0cnkgewogICAgcmV0dXJuIGZuKCBkaXYgKTsKICB9IGNhdGNoIChlKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfSBmaW5hbGx5IHsKICAgIC8vIHJlbGVhc2UgbWVtb3J5IGluIElFCiAgICBkaXYgPSBudWxsOwogIH0KfQoKZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHsKICB2YXIgbWF0Y2gsIGVsZW0sIG0sIG5vZGVUeXBlLAogICAgLy8gUVNBIHZhcnMKICAgIGksIGdyb3Vwcywgb2xkLCBuaWQsIG5ld0NvbnRleHQsIG5ld1NlbGVjdG9yOwoKICBpZiAoICggY29udGV4dCA\/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkgewogICAgc2V0RG9jdW1lbnQoIGNvbnRleHQgKTsKICB9CgogIGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50OwogIHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdOwoKICBpZiAoICFzZWxlY3RvciB8fCB0eXBlb2Ygc2VsZWN0b3IgIT09ICJzdHJpbmciICkgewogICAgcmV0dXJuIHJlc3VsdHM7CiAgfQoKICBpZiAoIChub2RlVHlwZSA9IGNvbnRleHQubm9kZVR5cGUpICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICkgewogICAgcmV0dXJuIFtdOwogIH0KCiAgaWYgKCAhZG9jdW1lbnRJc1hNTCAmJiAhc2VlZCApIHsKCiAgICAvLyBTaG9ydGN1dHMKICAgIGlmICggKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHsKICAgICAgLy8gU3BlZWQtdXA6IFNpenpsZSgiI0lEIikKICAgICAgaWYgKCAobSA9IG1hdGNoWzFdKSApIHsKICAgICAgICBpZiAoIG5vZGVUeXBlID09PSA5ICkgewogICAgICAgICAgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKTsKICAgICAgICAgIC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zCiAgICAgICAgICAvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzCiAgICAgICAgICBpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkgewogICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUsIE9wZXJhLCBhbmQgV2Via2l0IHJldHVybiBpdGVtcwogICAgICAgICAgICAvLyBieSBuYW1lIGluc3RlYWQgb2YgSUQKICAgICAgICAgICAgaWYgKCBlbGVtLmlkID09PSBtICkgewogICAgICAgICAgICAgIHJlc3VsdHMucHVzaCggZWxlbSApOwogICAgICAgICAgICAgIHJldHVybiByZXN1bHRzOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gQ29udGV4dCBpcyBub3QgYSBkb2N1bWVudAogICAgICAgICAgaWYgKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgJiYgKGVsZW0gPSBjb250ZXh0Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiYKICAgICAgICAgICAgY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJiBlbGVtLmlkID09PSBtICkgewogICAgICAgICAgICByZXN1bHRzLnB1c2goIGVsZW0gKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgLy8gU3BlZWQtdXA6IFNpenpsZSgiVEFHIikKICAgICAgfSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7CiAgICAgICAgcHVzaC5hcHBseSggcmVzdWx0cywgc2xpY2UuY2FsbChjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApLCAwKSApOwogICAgICAgIHJldHVybiByZXN1bHRzOwoKICAgICAgLy8gU3BlZWQtdXA6IFNpenpsZSgiLkNMQVNTIikKICAgICAgfSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRCeUNsYXNzTmFtZSAmJiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7CiAgICAgICAgcHVzaC5hcHBseSggcmVzdWx0cywgc2xpY2UuY2FsbChjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSwgMCkgKTsKICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgfQogICAgfQoKICAgIC8vIFFTQSBwYXRoCiAgICBpZiAoIHN1cHBvcnQucXNhICYmICFyYnVnZ3lRU0EudGVzdChzZWxlY3RvcikgKSB7CiAgICAgIG9sZCA9IHRydWU7CiAgICAgIG5pZCA9IGV4cGFuZG87CiAgICAgIG5ld0NvbnRleHQgPSBjb250ZXh0OwogICAgICBuZXdTZWxlY3RvciA9IG5vZGVUeXBlID09PSA5ICYmIHNlbGVjdG9yOwoKICAgICAgLy8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzCiAgICAgIC8vIFdlIGNhbiB3b3JrIGFyb3VuZCB0aGlzIGJ5IHNwZWNpZnlpbmcgYW4gZXh0cmEgSUQgb24gdGhlIHJvb3QKICAgICAgLy8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpCiAgICAgIC8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50cwogICAgICBpZiAoIG5vZGVUeXBlID09PSAxICYmIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gIm9iamVjdCIgKSB7CiAgICAgICAgZ3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7CgogICAgICAgIGlmICggKG9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCJpZCIpKSApIHsKICAgICAgICAgIG5pZCA9IG9sZC5yZXBsYWNlKCByZXNjYXBlLCAiXFwkJiIgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29udGV4dC5zZXRBdHRyaWJ1dGUoICJpZCIsIG5pZCApOwogICAgICAgIH0KICAgICAgICBuaWQgPSAiW2lkPSciICsgbmlkICsgIiddICI7CgogICAgICAgIGkgPSBncm91cHMubGVuZ3RoOwogICAgICAgIHdoaWxlICggaS0tICkgewogICAgICAgICAgZ3JvdXBzW2ldID0gbmlkICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7CiAgICAgICAgfQogICAgICAgIG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIGNvbnRleHQucGFyZW50Tm9kZSB8fCBjb250ZXh0OwogICAgICAgIG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIiwiKTsKICAgICAgfQoKICAgICAgaWYgKCBuZXdTZWxlY3RvciApIHsKICAgICAgICB0cnkgewogICAgICAgICAgcHVzaC5hcHBseSggcmVzdWx0cywgc2xpY2UuY2FsbCggbmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKAogICAgICAgICAgICBuZXdTZWxlY3RvcgogICAgICAgICAgKSwgMCApICk7CiAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9IGNhdGNoKHFzYUVycm9yKSB7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIGlmICggIW9sZCApIHsKICAgICAgICAgICAgY29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoImlkIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICAvLyBBbGwgb3RoZXJzCiAgcmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sICIkMSIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApOwp9CgovKioKICogRGV0ZWN0IHhtbAogKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudAogKi8KaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHsKICAvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0CiAgLy8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpCiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7CiAgcmV0dXJuIGRvY3VtZW50RWxlbWVudCA\/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gIkhUTUwiIDogZmFsc2U7Cn07CgovKioKICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50CiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50CiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnQKICovCnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7CiAgdmFyIGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYzsKCiAgLy8gSWYgbm8gZG9jdW1lbnQgYW5kIGRvY3VtZW50RWxlbWVudCBpcyBhdmFpbGFibGUsIHJldHVybgogIGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7CiAgICByZXR1cm4gZG9jdW1lbnQ7CiAgfQoKICAvLyBTZXQgb3VyIGRvY3VtZW50CiAgZG9jdW1lbnQgPSBkb2M7CiAgZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7CgogIC8vIFN1cHBvcnQgdGVzdHMKICBkb2N1bWVudElzWE1MID0gaXNYTUwoIGRvYyApOwoKICAvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpIHJldHVybnMgb25seSBlbGVtZW50cwogIHN1cHBvcnQudGFnTmFtZU5vQ29tbWVudHMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHsKICAgIGRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoIiIpICk7CiAgICByZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpLmxlbmd0aDsKICB9KTsKCiAgLy8gQ2hlY2sgaWYgYXR0cmlidXRlcyBzaG91bGQgYmUgcmV0cmlldmVkIGJ5IGF0dHJpYnV0ZSBub2RlcwogIHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkgewogICAgZGl2LmlubmVySFRNTCA9ICI8c2VsZWN0Pjwvc2VsZWN0PiI7CiAgICB2YXIgdHlwZSA9IHR5cGVvZiBkaXYubGFzdENoaWxkLmdldEF0dHJpYnV0ZSgibXVsdGlwbGUiKTsKICAgIC8vIElFOCByZXR1cm5zIGEgc3RyaW5nIGZvciBzb21lIGF0dHJpYnV0ZXMgZXZlbiB3aGVuIG5vdCBwcmVzZW50CiAgICByZXR1cm4gdHlwZSAhPT0gImJvb2xlYW4iICYmIHR5cGUgIT09ICJzdHJpbmciOwogIH0pOwoKICAvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIGNhbiBiZSB0cnVzdGVkCiAgc3VwcG9ydC5nZXRCeUNsYXNzTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkgewogICAgLy8gT3BlcmEgY2FuJ3QgZmluZCBhIHNlY29uZCBjbGFzc25hbWUgKGluIDkuNikKICAgIGRpdi5pbm5lckhUTUwgPSAiPGRpdiBjbGFzcz0naGlkZGVuIGUnPjwvZGl2PjxkaXYgY2xhc3M9J2hpZGRlbic+PC9kaXY+IjsKICAgIGlmICggIWRpdi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lIHx8ICFkaXYuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiZSIpLmxlbmd0aCApIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vIFNhZmFyaSAzLjIgY2FjaGVzIGNsYXNzIGF0dHJpYnV0ZXMgYW5kIGRvZXNuJ3QgY2F0Y2ggY2hhbmdlcwogICAgZGl2Lmxhc3RDaGlsZC5jbGFzc05hbWUgPSAiZSI7CiAgICByZXR1cm4gZGl2LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImUiKS5sZW5ndGggPT09IDI7CiAgfSk7CgogIC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZQogIC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlOYW1lIHByaXZpbGVnZXMgZm9ybSBjb250cm9scyBvciByZXR1cm5zIGVsZW1lbnRzIGJ5IElECiAgc3VwcG9ydC5nZXRCeU5hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHsKICAgIC8vIEluamVjdCBjb250ZW50CiAgICBkaXYuaWQgPSBleHBhbmRvICsgMDsKICAgIGRpdi5pbm5lckhUTUwgPSAiPGEgbmFtZT0nIiArIGV4cGFuZG8gKyAiJz48L2E+PGRpdiBuYW1lPSciICsgZXhwYW5kbyArICInPjwvZGl2PiI7CiAgICBkb2NFbGVtLmluc2VydEJlZm9yZSggZGl2LCBkb2NFbGVtLmZpcnN0Q2hpbGQgKTsKCiAgICAvLyBUZXN0CiAgICB2YXIgcGFzcyA9IGRvYy5nZXRFbGVtZW50c0J5TmFtZSAmJgogICAgICAvLyBidWdneSBicm93c2VycyB3aWxsIHJldHVybiBmZXdlciB0aGFuIHRoZSBjb3JyZWN0IDIKICAgICAgZG9jLmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoID09PSAyICsKICAgICAgLy8gYnVnZ3kgYnJvd3NlcnMgd2lsbCByZXR1cm4gbW9yZSB0aGFuIHRoZSBjb3JyZWN0IDAKICAgICAgZG9jLmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICsgMCApLmxlbmd0aDsKICAgIHN1cHBvcnQuZ2V0SWROb3ROYW1lID0gIWRvYy5nZXRFbGVtZW50QnlJZCggZXhwYW5kbyApOwoKICAgIC8vIENsZWFudXAKICAgIGRvY0VsZW0ucmVtb3ZlQ2hpbGQoIGRpdiApOwoKICAgIHJldHVybiBwYXNzOwogIH0pOwoKICAvLyBJRTYvNyByZXR1cm4gbW9kaWZpZWQgYXR0cmlidXRlcwogIEV4cHIuYXR0ckhhbmRsZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkgewogICAgZGl2LmlubmVySFRNTCA9ICI8YSBocmVmPScjJz48L2E+IjsKICAgIHJldHVybiBkaXYuZmlyc3RDaGlsZCAmJiB0eXBlb2YgZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlICE9PSBzdHJ1bmRlZmluZWQgJiYKICAgICAgZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCJocmVmIikgPT09ICIjIjsKICB9KSA\/CiAgICB7fSA6CiAgICB7CiAgICAgICJocmVmIjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCAiaHJlZiIsIDIgKTsKICAgICAgfSwKICAgICAgInR5cGUiOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoInR5cGUiKTsKICAgICAgfQogICAgfTsKCiAgLy8gSUQgZmluZCBhbmQgZmlsdGVyCiAgaWYgKCBzdXBwb3J0LmdldElkTm90TmFtZSApIHsKICAgIEV4cHIuZmluZFsiSUQiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHsKICAgICAgaWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gc3RydW5kZWZpbmVkICYmICFkb2N1bWVudElzWE1MICkgewogICAgICAgIHZhciBtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTsKICAgICAgICAvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJucwogICAgICAgIC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjMKICAgICAgICByZXR1cm4gbSAmJiBtLnBhcmVudE5vZGUgPyBbbV0gOiBbXTsKICAgICAgfQogICAgfTsKICAgIEV4cHIuZmlsdGVyWyJJRCJdID0gZnVuY3Rpb24oIGlkICkgewogICAgICB2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSgiaWQiKSA9PT0gYXR0cklkOwogICAgICB9OwogICAgfTsKICB9IGVsc2UgewogICAgRXhwci5maW5kWyJJRCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkgewogICAgICBpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBzdHJ1bmRlZmluZWQgJiYgIWRvY3VtZW50SXNYTUwgKSB7CiAgICAgICAgdmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApOwoKICAgICAgICByZXR1cm4gbSA\/CiAgICAgICAgICBtLmlkID09PSBpZCB8fCB0eXBlb2YgbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBzdHJ1bmRlZmluZWQgJiYgbS5nZXRBdHRyaWJ1dGVOb2RlKCJpZCIpLnZhbHVlID09PSBpZCA\/CiAgICAgICAgICAgIFttXSA6CiAgICAgICAgICAgIHVuZGVmaW5lZCA6CiAgICAgICAgICBbXTsKICAgICAgfQogICAgfTsKICAgIEV4cHIuZmlsdGVyWyJJRCJdID0gIGZ1bmN0aW9uKCBpZCApIHsKICAgICAgdmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7CiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICB2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IHN0cnVuZGVmaW5lZCAmJiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoImlkIik7CiAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkOwogICAgICB9OwogICAgfTsKICB9CgogIC8vIFRhZwogIEV4cHIuZmluZFsiVEFHIl0gPSBzdXBwb3J0LnRhZ05hbWVOb0NvbW1lbnRzID8KICAgIGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7CiAgICAgIGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IHN0cnVuZGVmaW5lZCApIHsKICAgICAgICByZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7CiAgICAgIH0KICAgIH0gOgogICAgZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHsKICAgICAgdmFyIGVsZW0sCiAgICAgICAgdG1wID0gW10sCiAgICAgICAgaSA9IDAsCiAgICAgICAgcmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApOwoKICAgICAgLy8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50cwogICAgICBpZiAoIHRhZyA9PT0gIioiICkgewogICAgICAgIHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkgewogICAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICB0bXAucHVzaCggZWxlbSApOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRtcDsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0czsKICAgIH07CgogIC8vIE5hbWUKICBFeHByLmZpbmRbIk5BTUUiXSA9IHN1cHBvcnQuZ2V0QnlOYW1lICYmIGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7CiAgICBpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lICE9PSBzdHJ1bmRlZmluZWQgKSB7CiAgICAgIHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBuYW1lICk7CiAgICB9CiAgfTsKCiAgLy8gQ2xhc3MKICBFeHByLmZpbmRbIkNMQVNTIl0gPSBzdXBwb3J0LmdldEJ5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7CiAgICBpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IHN0cnVuZGVmaW5lZCAmJiAhZG9jdW1lbnRJc1hNTCApIHsKICAgICAgcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7CiAgICB9CiAgfTsKCiAgLy8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydAoKICAvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KQogIHJidWdneU1hdGNoZXMgPSBbXTsKCiAgLy8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSksCiAgLy8gbm8gbmVlZCB0byBhbHNvIGFkZCB0byBidWdneU1hdGNoZXMgc2luY2UgbWF0Y2hlcyBjaGVja3MgYnVnZ3lRU0EKICAvLyBBIHN1cHBvcnQgdGVzdCB3b3VsZCByZXF1aXJlIHRvbyBtdWNoIGNvZGUgKHdvdWxkIGluY2x1ZGUgZG9jdW1lbnQgcmVhZHkpCiAgcmJ1Z2d5UVNBID0gWyAiOmZvY3VzIiBdOwoKICBpZiAoIChzdXBwb3J0LnFzYSA9IGlzTmF0aXZlKGRvYy5xdWVyeVNlbGVjdG9yQWxsKSkgKSB7CiAgICAvLyBCdWlsZCBRU0EgcmVnZXgKICAgIC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmkKICAgIGFzc2VydChmdW5jdGlvbiggZGl2ICkgewogICAgICAvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlCiAgICAgIC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljdGx5CiAgICAgIC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLAogICAgICAvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaAogICAgICAvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OQogICAgICBkaXYuaW5uZXJIVE1MID0gIjxzZWxlY3Q+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD4iOwoKICAgICAgLy8gSUU4IC0gU29tZSBib29sZWFuIGF0dHJpYnV0ZXMgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseQogICAgICBpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCgiW3NlbGVjdGVkXSIpLmxlbmd0aCApIHsKICAgICAgICByYnVnZ3lRU0EucHVzaCggIlxcWyIgKyB3aGl0ZXNwYWNlICsgIiooPzpjaGVja2VkfGRpc2FibGVkfGlzbWFwfG11bHRpcGxlfHJlYWRvbmx5fHNlbGVjdGVkfHZhbHVlKSIgKTsKICAgICAgfQoKICAgICAgLy8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHMKICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWQKICAgICAgLy8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHMKICAgICAgaWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIjpjaGVja2VkIikubGVuZ3RoICkgewogICAgICAgIHJidWdneVFTQS5wdXNoKCI6Y2hlY2tlZCIpOwogICAgICB9CiAgICB9KTsKCiAgICBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHsKCiAgICAgIC8vIE9wZXJhIDEwLTEyL0lFOCAtIF49ICQ9ICo9IGFuZCBlbXB0eSB2YWx1ZXMKICAgICAgLy8gU2hvdWxkIG5vdCBzZWxlY3QgYW55dGhpbmcKICAgICAgZGl2LmlubmVySFRNTCA9ICI8aW5wdXQgdHlwZT0naGlkZGVuJyBpPScnLz4iOwogICAgICBpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKCJbaV49JyddIikubGVuZ3RoICkgewogICAgICAgIHJidWdneVFTQS5wdXNoKCAiWypeJF09IiArIHdoaXRlc3BhY2UgKyAiKig\/OlwiXCJ8JycpIiApOwogICAgICB9CgogICAgICAvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKQogICAgICAvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0cwogICAgICBpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCgiOmVuYWJsZWQiKS5sZW5ndGggKSB7CiAgICAgICAgcmJ1Z2d5UVNBLnB1c2goICI6ZW5hYmxlZCIsICI6ZGlzYWJsZWQiICk7CiAgICAgIH0KCiAgICAgIC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zCiAgICAgIGRpdi5xdWVyeVNlbGVjdG9yQWxsKCIqLDp4Iik7CiAgICAgIHJidWdneVFTQS5wdXNoKCIsLio6Iik7CiAgICB9KTsKICB9CgogIGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gaXNOYXRpdmUoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzU2VsZWN0b3IgfHwKICAgIGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8CiAgICBkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fAogICAgZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8CiAgICBkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHsKCiAgICBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHsKICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yCiAgICAgIC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpCiAgICAgIHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgImRpdiIgKTsKCiAgICAgIC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb24KICAgICAgLy8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZAogICAgICBtYXRjaGVzLmNhbGwoIGRpdiwgIltzIT0nJ106eCIgKTsKICAgICAgcmJ1Z2d5TWF0Y2hlcy5wdXNoKCAiIT0iLCBwc2V1ZG9zICk7CiAgICB9KTsKICB9CgogIHJidWdneVFTQSA9IG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCJ8IikgKTsKICByYnVnZ3lNYXRjaGVzID0gbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCJ8IikgKTsKCiAgLy8gRWxlbWVudCBjb250YWlucyBhbm90aGVyCiAgLy8gUHVycG9zZWZ1bGx5IGRvZXMgbm90IGltcGxlbWVudCBpbmNsdXNpdmUgZGVzY2VuZGVudAogIC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmCiAgY29udGFpbnMgPSBpc05hdGl2ZShkb2NFbGVtLmNvbnRhaW5zKSB8fCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uID8KICAgIGZ1bmN0aW9uKCBhLCBiICkgewogICAgICB2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLAogICAgICAgIGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlOwogICAgICByZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmICgKICAgICAgICBhZG93bi5jb250YWlucyA\/CiAgICAgICAgICBhZG93bi5jb250YWlucyggYnVwICkgOgogICAgICAgICAgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2CiAgICAgICkpOwogICAgfSA6CiAgICBmdW5jdGlvbiggYSwgYiApIHsKICAgICAgaWYgKCBiICkgewogICAgICAgIHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkgewogICAgICAgICAgaWYgKCBiID09PSBhICkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKCiAgLy8gRG9jdW1lbnQgb3JkZXIgc29ydGluZwogIHNvcnRPcmRlciA9IGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gPwogIGZ1bmN0aW9uKCBhLCBiICkgewogICAgdmFyIGNvbXBhcmU7CgogICAgaWYgKCBhID09PSBiICkgewogICAgICBoYXNEdXBsaWNhdGUgPSB0cnVlOwogICAgICByZXR1cm4gMDsKICAgIH0KCiAgICBpZiAoIChjb21wYXJlID0gYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSkgKSB7CiAgICAgIGlmICggY29tcGFyZSAmIDEgfHwgYS5wYXJlbnROb2RlICYmIGEucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMTEgKSB7CiAgICAgICAgaWYgKCBhID09PSBkb2MgfHwgY29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkgewogICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KICAgICAgICBpZiAoIGIgPT09IGRvYyB8fCBjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7CiAgICAgICAgICByZXR1cm4gMTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH0KICAgICAgcmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxOwogICAgfQoKICAgIHJldHVybiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uID8gLTEgOiAxOwogIH0gOgogIGZ1bmN0aW9uKCBhLCBiICkgewogICAgdmFyIGN1ciwKICAgICAgaSA9IDAsCiAgICAgIGF1cCA9IGEucGFyZW50Tm9kZSwKICAgICAgYnVwID0gYi5wYXJlbnROb2RlLAogICAgICBhcCA9IFsgYSBdLAogICAgICBicCA9IFsgYiBdOwoKICAgIC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWwKICAgIGlmICggYSA9PT0gYiApIHsKICAgICAgaGFzRHVwbGljYXRlID0gdHJ1ZTsKICAgICAgcmV0dXJuIDA7CgogICAgLy8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWQKICAgIH0gZWxzZSBpZiAoICFhdXAgfHwgIWJ1cCApIHsKICAgICAgcmV0dXJuIGEgPT09IGRvYyA\/IC0xIDoKICAgICAgICBiID09PSBkb2MgPyAxIDoKICAgICAgICBhdXAgPyAtMSA6CiAgICAgICAgYnVwID8gMSA6CiAgICAgICAgMDsKCiAgICAvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVjawogICAgfSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7CiAgICAgIHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTsKICAgIH0KCiAgICAvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvbgogICAgY3VyID0gYTsKICAgIHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHsKICAgICAgYXAudW5zaGlmdCggY3VyICk7CiAgICB9CiAgICBjdXIgPSBiOwogICAgd2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkgewogICAgICBicC51bnNoaWZ0KCBjdXIgKTsKICAgIH0KCiAgICAvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeQogICAgd2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7CiAgICAgIGkrKzsKICAgIH0KCiAgICByZXR1cm4gaSA\/CiAgICAgIC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvcgogICAgICBzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDoKCiAgICAgIC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdAogICAgICBhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOgogICAgICBicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6CiAgICAgIDA7CiAgfTsKCiAgLy8gQWx3YXlzIGFzc3VtZSB0aGUgcHJlc2VuY2Ugb2YgZHVwbGljYXRlcyBpZiBzb3J0IGRvZXNuJ3QKICAvLyBwYXNzIHRoZW0gdG8gb3VyIGNvbXBhcmlzb24gZnVuY3Rpb24gKGFzIGluIEdvb2dsZSBDaHJvbWUpLgogIGhhc0R1cGxpY2F0ZSA9IGZhbHNlOwogIFswLCAwXS5zb3J0KCBzb3J0T3JkZXIgKTsKICBzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSBoYXNEdXBsaWNhdGU7CgogIHJldHVybiBkb2N1bWVudDsKfTsKClNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkgewogIHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7Cn07CgpTaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7CiAgLy8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkCiAgaWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkgewogICAgc2V0RG9jdW1lbnQoIGVsZW0gKTsKICB9CgogIC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZAogIGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsICI9JyQxJ10iICk7CgogIC8vIHJidWdneVFTQSBhbHdheXMgY29udGFpbnMgOmZvY3VzLCBzbyBubyBuZWVkIGZvciBhbiBleGlzdGVuY2UgY2hlY2sKICBpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmICFkb2N1bWVudElzWE1MICYmICghcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KGV4cHIpKSAmJiAhcmJ1Z2d5UVNBLnRlc3QoZXhwcikgKSB7CiAgICB0cnkgewogICAgICB2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7CgogICAgICAvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzCiAgICAgIGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHwKICAgICAgICAgIC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50CiAgICAgICAgICAvLyBmcmFnbWVudCBpbiBJRSA5CiAgICAgICAgICBlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkgewogICAgICAgIHJldHVybiByZXQ7CiAgICAgIH0KICAgIH0gY2F0Y2goZSkge30KICB9CgogIHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbZWxlbV0gKS5sZW5ndGggPiAwOwp9OwoKU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7CiAgLy8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkCiAgaWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkgewogICAgc2V0RG9jdW1lbnQoIGNvbnRleHQgKTsKICB9CiAgcmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7Cn07CgpTaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewogIHZhciB2YWw7CgogIC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZAogIGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHsKICAgIHNldERvY3VtZW50KCBlbGVtICk7CiAgfQoKICBpZiAoICFkb2N1bWVudElzWE1MICkgewogICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTsKICB9CiAgaWYgKCAodmFsID0gRXhwci5hdHRySGFuZGxlWyBuYW1lIF0pICkgewogICAgcmV0dXJuIHZhbCggZWxlbSApOwogIH0KICBpZiAoIGRvY3VtZW50SXNYTUwgfHwgc3VwcG9ydC5hdHRyaWJ1dGVzICkgewogICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7CiAgfQogIHJldHVybiAoICh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSApICYmIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA\/CiAgICBuYW1lIDoKICAgIHZhbCAmJiB2YWwuc3BlY2lmaWVkID8gdmFsLnZhbHVlIDogbnVsbDsKfTsKClNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7CiAgdGhyb3cgbmV3IEVycm9yKCAiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogIiArIG1zZyApOwp9OwoKLy8gRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlcwpTaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkgewogIHZhciBlbGVtLAogICAgZHVwbGljYXRlcyA9IFtdLAogICAgaSA9IDEsCiAgICBqID0gMDsKCiAgLy8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZQogIGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7CiAgcmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTsKCiAgaWYgKCBoYXNEdXBsaWNhdGUgKSB7CiAgICBmb3IgKCA7IChlbGVtID0gcmVzdWx0c1tpXSk7IGkrKyApIHsKICAgICAgaWYgKCBlbGVtID09PSByZXN1bHRzWyBpIC0gMSBdICkgewogICAgICAgIGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTsKICAgICAgfQogICAgfQogICAgd2hpbGUgKCBqLS0gKSB7CiAgICAgIHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTsKICAgIH0KICB9CgogIHJldHVybiByZXN1bHRzOwp9OwoKZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkgewogIHZhciBjdXIgPSBiICYmIGEsCiAgICBkaWZmID0gY3VyICYmICggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLSAoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApOwoKICAvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXMKICBpZiAoIGRpZmYgKSB7CiAgICByZXR1cm4gZGlmZjsKICB9CgogIC8vIENoZWNrIGlmIGIgZm9sbG93cyBhCiAgaWYgKCBjdXIgKSB7CiAgICB3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkgewogICAgICBpZiAoIGN1ciA9PT0gYiApIHsKICAgICAgICByZXR1cm4gLTE7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBhID8gMSA6IC0xOwp9CgovLyBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzCmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkgewogIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKICAgIHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgcmV0dXJuIG5hbWUgPT09ICJpbnB1dCIgJiYgZWxlbS50eXBlID09PSB0eXBlOwogIH07Cn0KCi8vIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9ucwpmdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewogICAgdmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CiAgICByZXR1cm4gKG5hbWUgPT09ICJpbnB1dCIgfHwgbmFtZSA9PT0gImJ1dHRvbiIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTsKICB9Owp9CgovLyBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzCmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkgewogIHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkgewogICAgYXJndW1lbnQgPSArYXJndW1lbnQ7CiAgICByZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkgewogICAgICB2YXIgaiwKICAgICAgICBtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLAogICAgICAgIGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoOwoKICAgICAgLy8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzCiAgICAgIHdoaWxlICggaS0tICkgewogICAgICAgIGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7CiAgICAgICAgICBzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9KTsKfQoKLyoqCiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzCiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbQogKi8KZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7CiAgdmFyIG5vZGUsCiAgICByZXQgPSAiIiwKICAgIGkgPSAwLAogICAgbm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlOwoKICBpZiAoICFub2RlVHlwZSApIHsKICAgIC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5CiAgICBmb3IgKCA7IChub2RlID0gZWxlbVtpXSk7IGkrKyApIHsKICAgICAgLy8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXMKICAgICAgcmV0ICs9IGdldFRleHQoIG5vZGUgKTsKICAgIH0KICB9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7CiAgICAvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzCiAgICAvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChzZWUgIzExMTUzKQogICAgaWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gInN0cmluZyIgKSB7CiAgICAgIHJldHVybiBlbGVtLnRleHRDb250ZW50OwogICAgfSBlbHNlIHsKICAgICAgLy8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuCiAgICAgIGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkgewogICAgICAgIHJldCArPSBnZXRUZXh0KCBlbGVtICk7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHsKICAgIHJldHVybiBlbGVtLm5vZGVWYWx1ZTsKICB9CiAgLy8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzCgogIHJldHVybiByZXQ7Cn07CgpFeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHsKCiAgLy8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyCiAgY2FjaGVMZW5ndGg6IDUwLAoKICBjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbiwKCiAgbWF0Y2g6IG1hdGNoRXhwciwKCiAgZmluZDoge30sCgogIHJlbGF0aXZlOiB7CiAgICAiPiI6IHsgZGlyOiAicGFyZW50Tm9kZSIsIGZpcnN0OiB0cnVlIH0sCiAgICAiICI6IHsgZGlyOiAicGFyZW50Tm9kZSIgfSwKICAgICIrIjogeyBkaXI6ICJwcmV2aW91c1NpYmxpbmciLCBmaXJzdDogdHJ1ZSB9LAogICAgIn4iOiB7IGRpcjogInByZXZpb3VzU2libGluZyIgfQogIH0sCgogIHByZUZpbHRlcjogewogICAgIkFUVFIiOiBmdW5jdGlvbiggbWF0Y2ggKSB7CiAgICAgIG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTsKCiAgICAgIC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkCiAgICAgIG1hdGNoWzNdID0gKCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCAiIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7CgogICAgICBpZiAoIG1hdGNoWzJdID09PSAifj0iICkgewogICAgICAgIG1hdGNoWzNdID0gIiAiICsgbWF0Y2hbM10gKyAiICI7CiAgICAgIH0KCiAgICAgIHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApOwogICAgfSwKCiAgICAiQ0hJTEQiOiBmdW5jdGlvbiggbWF0Y2ggKSB7CiAgICAgIC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbIkNISUxEIl0KICAgICAgICAxIHR5cGUgKG9ubHl8bnRofC4uLikKICAgICAgICAyIHdoYXQgKGNoaWxkfG9mLXR5cGUpCiAgICAgICAgMyBhcmd1bWVudCAoZXZlbnxvZGR8XGQqfFxkKm4oWystXVxkKyk\/fC4uLikKICAgICAgICA0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xkKm58KQogICAgICAgIDUgc2lnbiBvZiB4bi1jb21wb25lbnQKICAgICAgICA2IHggb2YgeG4tY29tcG9uZW50CiAgICAgICAgNyBzaWduIG9mIHktY29tcG9uZW50CiAgICAgICAgOCB5IG9mIHktY29tcG9uZW50CiAgICAgICovCiAgICAgIG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTsKCiAgICAgIGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gIm50aCIgKSB7CiAgICAgICAgLy8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnQKICAgICAgICBpZiAoICFtYXRjaFszXSApIHsKICAgICAgICAgIFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTsKICAgICAgICB9CgogICAgICAgIC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRAogICAgICAgIC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzEKICAgICAgICBtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gImV2ZW4iIHx8IG1hdGNoWzNdID09PSAib2RkIiApICk7CiAgICAgICAgbWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gIm9kZCIgKTsKCiAgICAgIC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50cwogICAgICB9IGVsc2UgaWYgKCBtYXRjaFszXSApIHsKICAgICAgICBTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7CiAgICAgIH0KCiAgICAgIHJldHVybiBtYXRjaDsKICAgIH0sCgogICAgIlBTRVVETyI6IGZ1bmN0aW9uKCBtYXRjaCApIHsKICAgICAgdmFyIGV4Y2VzcywKICAgICAgICB1bnF1b3RlZCA9ICFtYXRjaFs1XSAmJiBtYXRjaFsyXTsKCiAgICAgIGlmICggbWF0Y2hFeHByWyJDSElMRCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzCiAgICAgIGlmICggbWF0Y2hbNF0gKSB7CiAgICAgICAgbWF0Y2hbMl0gPSBtYXRjaFs0XTsKCiAgICAgIC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzCiAgICAgIH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJgogICAgICAgIC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpCiAgICAgICAgKGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJgogICAgICAgIC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpcwogICAgICAgIChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCAiKSIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHsKCiAgICAgICAgLy8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXgKICAgICAgICBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTsKICAgICAgICBtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTsKICAgICAgfQoKICAgICAgLy8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpCiAgICAgIHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApOwogICAgfQogIH0sCgogIGZpbHRlcjogewoKICAgICJUQUciOiBmdW5jdGlvbiggbm9kZU5hbWUgKSB7CiAgICAgIGlmICggbm9kZU5hbWUgPT09ICIqIiApIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9OwogICAgICB9CgogICAgICBub2RlTmFtZSA9IG5vZGVOYW1lLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7CiAgICAgIH07CiAgICB9LAoKICAgICJDTEFTUyI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7CiAgICAgIHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgIiAiIF07CgogICAgICByZXR1cm4gcGF0dGVybiB8fAogICAgICAgIChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggIihefCIgKyB3aGl0ZXNwYWNlICsgIikiICsgY2xhc3NOYW1lICsgIigiICsgd2hpdGVzcGFjZSArICJ8JCkiICkpICYmCiAgICAgICAgY2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QoIGVsZW0uY2xhc3NOYW1lIHx8ICh0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IHN0cnVuZGVmaW5lZCAmJiBlbGVtLmdldEF0dHJpYnV0ZSgiY2xhc3MiKSkgfHwgIiIgKTsKICAgICAgICB9KTsKICAgIH0sCgogICAgIkFUVFIiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkgewogICAgICByZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7CgogICAgICAgIGlmICggcmVzdWx0ID09IG51bGwgKSB7CiAgICAgICAgICByZXR1cm4gb3BlcmF0b3IgPT09ICIhPSI7CiAgICAgICAgfQogICAgICAgIGlmICggIW9wZXJhdG9yICkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICByZXN1bHQgKz0gIiI7CgogICAgICAgIHJldHVybiBvcGVyYXRvciA9PT0gIj0iID8gcmVzdWx0ID09PSBjaGVjayA6CiAgICAgICAgICBvcGVyYXRvciA9PT0gIiE9IiA\/IHJlc3VsdCAhPT0gY2hlY2sgOgogICAgICAgICAgb3BlcmF0b3IgPT09ICJePSIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6CiAgICAgICAgICBvcGVyYXRvciA9PT0gIio9IiA\/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOgogICAgICAgICAgb3BlcmF0b3IgPT09ICIkPSIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOgogICAgICAgICAgb3BlcmF0b3IgPT09ICJ+PSIgPyAoICIgIiArIHJlc3VsdCArICIgIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6CiAgICAgICAgICBvcGVyYXRvciA9PT0gInw9IiA\/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgIi0iIDoKICAgICAgICAgIGZhbHNlOwogICAgICB9OwogICAgfSwKCiAgICAiQ0hJTEQiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkgewogICAgICB2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSAibnRoIiwKICAgICAgICBmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gImxhc3QiLAogICAgICAgIG9mVHlwZSA9IHdoYXQgPT09ICJvZi10eXBlIjsKCiAgICAgIHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID8KCiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIDpudGgtKihuKQogICAgICAgIGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgcmV0dXJuICEhZWxlbS5wYXJlbnROb2RlOwogICAgICAgIH0gOgoKICAgICAgICBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkgewogICAgICAgICAgdmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBkaWZmLCBub2RlSW5kZXgsIHN0YXJ0LAogICAgICAgICAgICBkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyAibmV4dFNpYmxpbmciIDogInByZXZpb3VzU2libGluZyIsCiAgICAgICAgICAgIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSwKICAgICAgICAgICAgbmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksCiAgICAgICAgICAgIHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlOwoKICAgICAgICAgIGlmICggcGFyZW50ICkgewoKICAgICAgICAgICAgLy8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKQogICAgICAgICAgICBpZiAoIHNpbXBsZSApIHsKICAgICAgICAgICAgICB3aGlsZSAoIGRpciApIHsKICAgICAgICAgICAgICAgIG5vZGUgPSBlbGVtOwogICAgICAgICAgICAgICAgd2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHsKICAgICAgICAgICAgICAgICAgaWYgKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pCiAgICAgICAgICAgICAgICBzdGFydCA9IGRpciA9IHR5cGUgPT09ICJvbmx5IiAmJiAhc3RhcnQgJiYgIm5leHRTaWJsaW5nIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07CgogICAgICAgICAgICAvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YAogICAgICAgICAgICBpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7CiAgICAgICAgICAgICAgLy8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4CiAgICAgICAgICAgICAgb3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8IChwYXJlbnRbIGV4cGFuZG8gXSA9IHt9KTsKICAgICAgICAgICAgICBjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTsKICAgICAgICAgICAgICBub2RlSW5kZXggPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsxXTsKICAgICAgICAgICAgICBkaWZmID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMl07CiAgICAgICAgICAgICAgbm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07CgogICAgICAgICAgICAgIHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8CgogICAgICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnQKICAgICAgICAgICAgICAgIChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkgewoKICAgICAgICAgICAgICAgIC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrCiAgICAgICAgICAgICAgICBpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgIG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZQogICAgICAgICAgICB9IGVsc2UgaWYgKCB1c2VDYWNoZSAmJiAoY2FjaGUgPSAoZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0pICYmIGNhY2hlWzBdID09PSBkaXJydW5zICkgewogICAgICAgICAgICAgIGRpZmYgPSBjYWNoZVsxXTsKCiAgICAgICAgICAgIC8vIHhtbCA6bnRoLWNoaWxkKC4uLikgb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk\/LW9mLXR5cGUoLi4uKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0CiAgICAgICAgICAgICAgd2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHwKICAgICAgICAgICAgICAgIChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkgewoKICAgICAgICAgICAgICAgIGlmICggKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgJiYgKytkaWZmICkgewogICAgICAgICAgICAgICAgICAvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50CiAgICAgICAgICAgICAgICAgIGlmICggdXNlQ2FjaGUgKSB7CiAgICAgICAgICAgICAgICAgICAgKG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGlmICggbm9kZSA9PT0gZWxlbSApIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemUKICAgICAgICAgICAgZGlmZiAtPSBsYXN0OwogICAgICAgICAgICByZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgfSwKCiAgICAiUFNFVURPIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7CiAgICAgIC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZQogICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzCiAgICAgIC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzCiAgICAgIC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3MKICAgICAgdmFyIGFyZ3MsCiAgICAgICAgZm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fAogICAgICAgICAgU2l6emxlLmVycm9yKCAidW5zdXBwb3J0ZWQgcHNldWRvOiAiICsgcHNldWRvICk7CgogICAgICAvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0CiAgICAgIC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uCiAgICAgIC8vIGp1c3QgYXMgU2l6emxlIGRvZXMKICAgICAgaWYgKCBmblsgZXhwYW5kbyBdICkgewogICAgICAgIHJldHVybiBmbiggYXJndW1lbnQgKTsKICAgICAgfQoKICAgICAgLy8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzCiAgICAgIGlmICggZm4ubGVuZ3RoID4gMSApIHsKICAgICAgICBhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgIiIsIGFyZ3VtZW50IF07CiAgICAgICAgcmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA\/CiAgICAgICAgICBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7CiAgICAgICAgICAgIHZhciBpZHgsCiAgICAgICAgICAgICAgbWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLAogICAgICAgICAgICAgIGkgPSBtYXRjaGVkLmxlbmd0aDsKICAgICAgICAgICAgd2hpbGUgKCBpLS0gKSB7CiAgICAgICAgICAgICAgaWR4ID0gaW5kZXhPZi5jYWxsKCBzZWVkLCBtYXRjaGVkW2ldICk7CiAgICAgICAgICAgICAgc2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkgOgogICAgICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgIHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApOwogICAgICAgICAgfTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZuOwogICAgfQogIH0sCgogIHBzZXVkb3M6IHsKICAgIC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvcwogICAgIm5vdCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICAgIC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlCiAgICAgIC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nCiAgICAgIC8vIHNwYWNlcyBhcyBjb21iaW5hdG9ycwogICAgICB2YXIgaW5wdXQgPSBbXSwKICAgICAgICByZXN1bHRzID0gW10sCiAgICAgICAgbWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCAiJDEiICkgKTsKCiAgICAgIHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gPwogICAgICAgIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkgewogICAgICAgICAgdmFyIGVsZW0sCiAgICAgICAgICAgIHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSwKICAgICAgICAgICAgaSA9IHNlZWQubGVuZ3RoOwoKICAgICAgICAgIC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmAKICAgICAgICAgIHdoaWxlICggaS0tICkgewogICAgICAgICAgICBpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHsKICAgICAgICAgICAgICBzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KSA6CiAgICAgICAgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHsKICAgICAgICAgIGlucHV0WzBdID0gZWxlbTsKICAgICAgICAgIG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTsKICAgICAgICAgIHJldHVybiAhcmVzdWx0cy5wb3AoKTsKICAgICAgICB9OwogICAgfSksCgogICAgImhhcyI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICByZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7CiAgICAgIH07CiAgICB9KSwKCiAgICAiY29udGFpbnMiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICByZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xOwogICAgICB9OwogICAgfSksCgogICAgLy8gIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3IKICAgIC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlCiAgICAvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLAogICAgLy8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSAiLSIuCiAgICAvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS4KICAgIC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuIgogICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkbwogICAgImxhbmciOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkgewogICAgICAvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWRlcgogICAgICBpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgIiIpICkgewogICAgICAgIFNpenpsZS5lcnJvciggInVuc3VwcG9ydGVkIGxhbmc6ICIgKyBsYW5nICk7CiAgICAgIH0KICAgICAgbGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpOwogICAgICByZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgdmFyIGVsZW1MYW5nOwogICAgICAgIGRvIHsKICAgICAgICAgIGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc1hNTCA\/CiAgICAgICAgICAgIGVsZW0uZ2V0QXR0cmlidXRlKCJ4bWw6bGFuZyIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCJsYW5nIikgOgogICAgICAgICAgICBlbGVtLmxhbmcpICkgewoKICAgICAgICAgICAgZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICByZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArICItIiApID09PSAwOwogICAgICAgICAgfQogICAgICAgIH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfTsKICAgIH0pLAoKICAgIC8vIE1pc2NlbGxhbmVvdXMKICAgICJ0YXJnZXQiOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7CiAgICAgIHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDsKICAgIH0sCgogICAgInJvb3QiOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgcmV0dXJuIGVsZW0gPT09IGRvY0VsZW07CiAgICB9LAoKICAgICJmb2N1cyI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICByZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpOwogICAgfSwKCiAgICAvLyBCb29sZWFuIHByb3BlcnRpZXMKICAgICJlbmFibGVkIjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZTsKICAgIH0sCgogICAgImRpc2FibGVkIjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlOwogICAgfSwKCiAgICAiY2hlY2tlZCI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHMKICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWQKICAgICAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICByZXR1cm4gKG5vZGVOYW1lID09PSAiaW5wdXQiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09ICJvcHRpb24iICYmICEhZWxlbS5zZWxlY3RlZCk7CiAgICB9LAoKICAgICJzZWxlY3RlZCI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0CiAgICAgIC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHkKICAgICAgaWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7CiAgICAgICAgZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7CiAgICAgIH0KCiAgICAgIHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlOwogICAgfSwKCiAgICAvLyBDb250ZW50cwogICAgImVtcHR5IjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvCiAgICAgIC8vIDplbXB0eSBpcyBvbmx5IGFmZmVjdGVkIGJ5IGVsZW1lbnQgbm9kZXMgYW5kIGNvbnRlbnQgbm9kZXMoaW5jbHVkaW5nIHRleHQoMyksIGNkYXRhKDQpKSwKICAgICAgLy8gICBub3QgY29tbWVudCwgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbnMsIG9yIG90aGVycwogICAgICAvLyBUaGFua3MgdG8gRGllZ28gUGVyaW5pIGZvciB0aGUgbm9kZU5hbWUgc2hvcnRjdXQKICAgICAgLy8gICBHcmVhdGVyIHRoYW4gIkAiIG1lYW5zIGFscGhhIGNoYXJhY3RlcnMgKHNwZWNpZmljYWxseSBub3Qgc3RhcnRpbmcgd2l0aCAiIyIgb3IgIj8iKQogICAgICBmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHsKICAgICAgICBpZiAoIGVsZW0ubm9kZU5hbWUgPiAiQCIgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA0ICkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0sCgogICAgInBhcmVudCI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICByZXR1cm4gIUV4cHIucHNldWRvc1siZW1wdHkiXSggZWxlbSApOwogICAgfSwKCiAgICAvLyBFbGVtZW50L2lucHV0IHR5cGVzCiAgICAiaGVhZGVyIjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTsKICAgIH0sCgogICAgImlucHV0IjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTsKICAgIH0sCgogICAgImJ1dHRvbiI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICB2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgcmV0dXJuIG5hbWUgPT09ICJpbnB1dCIgJiYgZWxlbS50eXBlID09PSAiYnV0dG9uIiB8fCBuYW1lID09PSAiYnV0dG9uIjsKICAgIH0sCgogICAgInRleHQiOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgdmFyIGF0dHI7CiAgICAgIC8vIElFNiBhbmQgNyB3aWxsIG1hcCBlbGVtLnR5cGUgdG8gJ3RleHQnIGZvciBuZXcgSFRNTDUgdHlwZXMgKHNlYXJjaCwgZXRjKQogICAgICAvLyB1c2UgZ2V0QXR0cmlidXRlIGluc3RlYWQgdG8gdGVzdCB0aGlzIGNhc2UKICAgICAgcmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gImlucHV0IiAmJgogICAgICAgIGVsZW0udHlwZSA9PT0gInRleHQiICYmCiAgICAgICAgKCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCJ0eXBlIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBlbGVtLnR5cGUgKTsKICAgIH0sCgogICAgLy8gUG9zaXRpb24taW4tY29sbGVjdGlvbgogICAgImZpcnN0IjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIFsgMCBdOwogICAgfSksCgogICAgImxhc3QiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHsKICAgICAgcmV0dXJuIFsgbGVuZ3RoIC0gMSBdOwogICAgfSksCgogICAgImVxIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkgewogICAgICByZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07CiAgICB9KSwKCiAgICAiZXZlbiI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkgewogICAgICB2YXIgaSA9IDA7CiAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkgewogICAgICAgIG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7CiAgICAgIH0KICAgICAgcmV0dXJuIG1hdGNoSW5kZXhlczsKICAgIH0pLAoKICAgICJvZGQiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHsKICAgICAgdmFyIGkgPSAxOwogICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHsKICAgICAgICBtYXRjaEluZGV4ZXMucHVzaCggaSApOwogICAgICB9CiAgICAgIHJldHVybiBtYXRjaEluZGV4ZXM7CiAgICB9KSwKCiAgICAibHQiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7CiAgICAgIHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDsKICAgICAgZm9yICggOyAtLWkgPj0gMDsgKSB7CiAgICAgICAgbWF0Y2hJbmRleGVzLnB1c2goIGkgKTsKICAgICAgfQogICAgICByZXR1cm4gbWF0Y2hJbmRleGVzOwogICAgfSksCgogICAgImd0IjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkgewogICAgICB2YXIgaSA9IGFyZ3VtZW50IDwgMCA\/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7CiAgICAgIGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHsKICAgICAgICBtYXRjaEluZGV4ZXMucHVzaCggaSApOwogICAgICB9CiAgICAgIHJldHVybiBtYXRjaEluZGV4ZXM7CiAgICB9KQogIH0KfTsKCi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zCmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkgewogIEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTsKfQpmb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkgewogIEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7Cn0KCmZ1bmN0aW9uIHRva2VuaXplKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkgewogIHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLAogICAgc29GYXIsIGdyb3VwcywgcHJlRmlsdGVycywKICAgIGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgIiAiIF07CgogIGlmICggY2FjaGVkICkgewogICAgcmV0dXJuIHBhcnNlT25seSA\/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTsKICB9CgogIHNvRmFyID0gc2VsZWN0b3I7CiAgZ3JvdXBzID0gW107CiAgcHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyOwoKICB3aGlsZSAoIHNvRmFyICkgewoKICAgIC8vIENvbW1hIGFuZCBmaXJzdCBydW4KICAgIGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkgewogICAgICBpZiAoIG1hdGNoICkgewogICAgICAgIC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkCiAgICAgICAgc29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7CiAgICAgIH0KICAgICAgZ3JvdXBzLnB1c2goIHRva2VucyA9IFtdICk7CiAgICB9CgogICAgbWF0Y2hlZCA9IGZhbHNlOwoKICAgIC8vIENvbWJpbmF0b3JzCiAgICBpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHsKICAgICAgbWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7CiAgICAgIHRva2Vucy5wdXNoKCB7CiAgICAgICAgdmFsdWU6IG1hdGNoZWQsCiAgICAgICAgLy8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlCiAgICAgICAgdHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sICIgIiApCiAgICAgIH0gKTsKICAgICAgc29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTsKICAgIH0KCiAgICAvLyBGaWx0ZXJzCiAgICBmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkgewogICAgICBpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8CiAgICAgICAgKG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7CiAgICAgICAgbWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7CiAgICAgICAgdG9rZW5zLnB1c2goIHsKICAgICAgICAgIHZhbHVlOiBtYXRjaGVkLAogICAgICAgICAgdHlwZTogdHlwZSwKICAgICAgICAgIG1hdGNoZXM6IG1hdGNoCiAgICAgICAgfSApOwogICAgICAgIHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoICFtYXRjaGVkICkgewogICAgICBicmVhazsKICAgIH0KICB9CgogIC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2VzcwogIC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZwogIC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2VucwogIHJldHVybiBwYXJzZU9ubHkgPwogICAgc29GYXIubGVuZ3RoIDoKICAgIHNvRmFyID8KICAgICAgU2l6emxlLmVycm9yKCBzZWxlY3RvciApIDoKICAgICAgLy8gQ2FjaGUgdGhlIHRva2VucwogICAgICB0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTsKfQoKZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkgewogIHZhciBpID0gMCwKICAgIGxlbiA9IHRva2Vucy5sZW5ndGgsCiAgICBzZWxlY3RvciA9ICIiOwogIGZvciAoIDsgaSA8IGxlbjsgaSsrICkgewogICAgc2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlOwogIH0KICByZXR1cm4gc2VsZWN0b3I7Cn0KCmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7CiAgdmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLAogICAgY2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYgZGlyID09PSAicGFyZW50Tm9kZSIsCiAgICBkb25lTmFtZSA9IGRvbmUrKzsKCiAgcmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgPwogICAgLy8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50CiAgICBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkgewogICAgICB3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkgewogICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkgewogICAgICAgICAgcmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApOwogICAgICAgIH0KICAgICAgfQogICAgfSA6CgogICAgLy8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzCiAgICBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkgewogICAgICB2YXIgZGF0YSwgY2FjaGUsIG91dGVyQ2FjaGUsCiAgICAgICAgZGlya2V5ID0gZGlycnVucyArICIgIiArIGRvbmVOYW1lOwoKICAgICAgLy8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gZGlyIGNhY2hpbmcKICAgICAgaWYgKCB4bWwgKSB7CiAgICAgICAgd2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHsKICAgICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkgewogICAgICAgICAgICBpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7CiAgICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHsKICAgICAgICAgICAgb3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pOwogICAgICAgICAgICBpZiAoIChjYWNoZSA9IG91dGVyQ2FjaGVbIGRpciBdKSAmJiBjYWNoZVswXSA9PT0gZGlya2V5ICkgewogICAgICAgICAgICAgIGlmICggKGRhdGEgPSBjYWNoZVsxXSkgPT09IHRydWUgfHwgZGF0YSA9PT0gY2FjaGVkcnVucyApIHsKICAgICAgICAgICAgICAgIHJldHVybiBkYXRhID09PSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjYWNoZSA9IG91dGVyQ2FjaGVbIGRpciBdID0gWyBkaXJrZXkgXTsKICAgICAgICAgICAgICBjYWNoZVsxXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApIHx8IGNhY2hlZHJ1bnM7CiAgICAgICAgICAgICAgaWYgKCBjYWNoZVsxXSA9PT0gdHJ1ZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfTsKfQoKZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkgewogIHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID8KICAgIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7CiAgICAgIHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoOwogICAgICB3aGlsZSAoIGktLSApIHsKICAgICAgICBpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfSA6CiAgICBtYXRjaGVyc1swXTsKfQoKZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHsKICB2YXIgZWxlbSwKICAgIG5ld1VubWF0Y2hlZCA9IFtdLAogICAgaSA9IDAsCiAgICBsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLAogICAgbWFwcGVkID0gbWFwICE9IG51bGw7CgogIGZvciAoIDsgaSA8IGxlbjsgaSsrICkgewogICAgaWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7CiAgICAgIGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgewogICAgICAgIG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7CiAgICAgICAgaWYgKCBtYXBwZWQgKSB7CiAgICAgICAgICBtYXAucHVzaCggaSApOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIG5ld1VubWF0Y2hlZDsKfQoKZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkgewogIGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkgewogICAgcG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTsKICB9CiAgaWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7CiAgICBwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7CiAgfQogIHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHsKICAgIHZhciB0ZW1wLCBpLCBlbGVtLAogICAgICBwcmVNYXAgPSBbXSwKICAgICAgcG9zdE1hcCA9IFtdLAogICAgICBwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLAoKICAgICAgLy8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHQKICAgICAgZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8ICIqIiwgY29udGV4dC5ub2RlVHlwZSA\/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSwKCiAgICAgIC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvbgogICAgICBtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID8KICAgICAgICBjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6CiAgICAgICAgZWxlbXMsCgogICAgICBtYXRjaGVyT3V0ID0gbWF0Y2hlciA\/CiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cywKICAgICAgICBwb3N0RmluZGVyIHx8ICggc2VlZCA\/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA\\/CiAgICBtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDoKICAgIHN1cGVyTWF0Y2hlcjsKfQoKY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBncm91cCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHsKICB2YXIgaSwKICAgIHNldE1hdGNoZXJzID0gW10sCiAgICBlbGVtZW50TWF0Y2hlcnMgPSBbXSwKICAgIGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgIiAiIF07CgogIGlmICggIWNhY2hlZCApIHsKICAgIC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudAogICAgaWYgKCAhZ3JvdXAgKSB7CiAgICAgIGdyb3VwID0gdG9rZW5pemUoIHNlbGVjdG9yICk7CiAgICB9CiAgICBpID0gZ3JvdXAubGVuZ3RoOwogICAgd2hpbGUgKCBpLS0gKSB7CiAgICAgIGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBncm91cFtpXSApOwogICAgICBpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkgewogICAgICAgIHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApOwogICAgICB9IGVsc2UgewogICAgICAgIGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTsKICAgICAgfQogICAgfQoKICAgIC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvbgogICAgY2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7CiAgfQogIHJldHVybiBjYWNoZWQ7Cn07CgpmdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7CiAgdmFyIGkgPSAwLAogICAgbGVuID0gY29udGV4dHMubGVuZ3RoOwogIGZvciAoIDsgaSA8IGxlbjsgaSsrICkgewogICAgU2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTsKICB9CiAgcmV0dXJuIHJlc3VsdHM7Cn0KCmZ1bmN0aW9uIHNlbGVjdCggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7CiAgdmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsCiAgICBtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApOwoKICBpZiAoICFzZWVkICkgewogICAgLy8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgZ3JvdXAKICAgIGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkgewoKICAgICAgLy8gVGFrZSBhIHNob3J0Y3V0IGFuZCBzZXQgdGhlIGNvbnRleHQgaWYgdGhlIHJvb3Qgc2VsZWN0b3IgaXMgYW4gSUQKICAgICAgdG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApOwogICAgICBpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gIklEIiAmJgogICAgICAgICAgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiAhZG9jdW1lbnRJc1hNTCAmJgogICAgICAgICAgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHsKCiAgICAgICAgY29udGV4dCA9IEV4cHIuZmluZFsiSUQiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0IClbMF07CiAgICAgICAgaWYgKCAhY29udGV4dCApIHsKICAgICAgICAgIHJldHVybiByZXN1bHRzOwogICAgICAgIH0KCiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7CiAgICAgIH0KCiAgICAgIC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmcKICAgICAgaSA9IG1hdGNoRXhwclsibmVlZHNDb250ZXh0Il0udGVzdCggc2VsZWN0b3IgKSA\/IDAgOiB0b2tlbnMubGVuZ3RoOwogICAgICB3aGlsZSAoIGktLSApIHsKICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTsKCiAgICAgICAgLy8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvcgogICAgICAgIGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7CiAgICAgICAgICAvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnMKICAgICAgICAgIGlmICggKHNlZWQgPSBmaW5kKAogICAgICAgICAgICB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksCiAgICAgICAgICAgIHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgY29udGV4dC5wYXJlbnROb2RlIHx8IGNvbnRleHQKICAgICAgICAgICkpICkgewoKICAgICAgICAgICAgLy8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5CiAgICAgICAgICAgIHRva2Vucy5zcGxpY2UoIGksIDEgKTsKICAgICAgICAgICAgc2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTsKICAgICAgICAgICAgaWYgKCAhc2VsZWN0b3IgKSB7CiAgICAgICAgICAgICAgcHVzaC5hcHBseSggcmVzdWx0cywgc2xpY2UuY2FsbCggc2VlZCwgMCApICk7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgLy8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbgogIC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmUKICBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSgKICAgIHNlZWQsCiAgICBjb250ZXh0LAogICAgZG9jdW1lbnRJc1hNTCwKICAgIHJlc3VsdHMsCiAgICByc2libGluZy50ZXN0KCBzZWxlY3RvciApCiAgKTsKICByZXR1cm4gcmVzdWx0czsKfQoKLy8gRGVwcmVjYXRlZApFeHByLnBzZXVkb3NbIm50aCJdID0gRXhwci5wc2V1ZG9zWyJlcSJdOwoKLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzCmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fQpFeHByLmZpbHRlcnMgPSBzZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIucHNldWRvczsKRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTsKCi8vIEluaXRpYWxpemUgd2l0aCB0aGUgZGVmYXVsdCBkb2N1bWVudApzZXREb2N1bWVudCgpOwoKLy8gT3ZlcnJpZGUgc2l6emxlIGF0dHJpYnV0ZSByZXRyaWV2YWwKU2l6emxlLmF0dHIgPSBqUXVlcnkuYXR0cjsKalF1ZXJ5LmZpbmQgPSBTaXp6bGU7CmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9yczsKalF1ZXJ5LmV4cHJbIjoiXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7CmpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDsKalF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDsKalF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MOwpqUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7CgoKfSkoIHdpbmRvdyApOwp2YXIgcnVudGlsID0gL1VudGlsJC8sCiAgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sCiAgaXNTaW1wbGUgPSAvXi5bXjojXFtcLixdKiQvLAogIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQsCiAgLy8gbWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXQKICBndWFyYW50ZWVkVW5pcXVlID0gewogICAgY2hpbGRyZW46IHRydWUsCiAgICBjb250ZW50czogdHJ1ZSwKICAgIG5leHQ6IHRydWUsCiAgICBwcmV2OiB0cnVlCiAgfTsKCmpRdWVyeS5mbi5leHRlbmQoewogIGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKICAgIHZhciBpLCByZXQsIHNlbGYsCiAgICAgIGxlbiA9IHRoaXMubGVuZ3RoOwoKICAgIGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSAic3RyaW5nIiApIHsKICAgICAgc2VsZiA9IHRoaXM7CiAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlcihmdW5jdGlvbigpIHsKICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkgewogICAgICAgICAgaWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pICk7CiAgICB9CgogICAgcmV0ID0gW107CiAgICBmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkgewogICAgICBqUXVlcnkuZmluZCggc2VsZWN0b3IsIHRoaXNbIGkgXSwgcmV0ICk7CiAgICB9CgogICAgLy8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApCiAgICByZXQgPSB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA\/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7CiAgICByZXQuc2VsZWN0b3IgPSAoIHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgIiAiIDogIiIgKSArIHNlbGVjdG9yOwogICAgcmV0dXJuIHJldDsKICB9LAoKICBoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7CiAgICB2YXIgaSwKICAgICAgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksCiAgICAgIGxlbiA9IHRhcmdldHMubGVuZ3RoOwoKICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpIHsKICAgICAgZm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHsKICAgICAgICBpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1tpXSApICkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9LAoKICBub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yLCBmYWxzZSkgKTsKICB9LAoKICBmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yLCB0cnVlKSApOwogIH0sCgogIGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICByZXR1cm4gISFzZWxlY3RvciAmJiAoCiAgICAgIHR5cGVvZiBzZWxlY3RvciA9PT0gInN0cmluZyIgPwogICAgICAgIC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXQKICAgICAgICAvLyBzbyAkKCJwOmZpcnN0IikuaXMoInA6bGFzdCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byAicCIuCiAgICAgICAgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID8KICAgICAgICAgIGpRdWVyeSggc2VsZWN0b3IsIHRoaXMuY29udGV4dCApLmluZGV4KCB0aGlzWzBdICkgPj0gMCA6CiAgICAgICAgICBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgdGhpcyApLmxlbmd0aCA+IDAgOgogICAgICAgIHRoaXMuZmlsdGVyKCBzZWxlY3RvciApLmxlbmd0aCA+IDAgKTsKICB9LAoKICBjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkgewogICAgdmFyIGN1ciwKICAgICAgaSA9IDAsCiAgICAgIGwgPSB0aGlzLmxlbmd0aCwKICAgICAgcmV0ID0gW10sCiAgICAgIHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gInN0cmluZyIgPwogICAgICAgIGpRdWVyeSggc2VsZWN0b3JzLCBjb250ZXh0IHx8IHRoaXMuY29udGV4dCApIDoKICAgICAgICAwOwoKICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHsKICAgICAgY3VyID0gdGhpc1tpXTsKCiAgICAgIHdoaWxlICggY3VyICYmIGN1ci5vd25lckRvY3VtZW50ICYmIGN1ciAhPT0gY29udGV4dCAmJiBjdXIubm9kZVR5cGUgIT09IDExICkgewogICAgICAgIGlmICggcG9zID8gcG9zLmluZGV4KGN1cikgPiAtMSA6IGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihjdXIsIHNlbGVjdG9ycykgKSB7CiAgICAgICAgICByZXQucHVzaCggY3VyICk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgY3VyID0gY3VyLnBhcmVudE5vZGU7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQgKTsKICB9LAoKICAvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluCiAgLy8gdGhlIG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzCiAgaW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkgewoKICAgIC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50CiAgICBpZiAoICFlbGVtICkgewogICAgICByZXR1cm4gKCB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTsKICAgIH0KCiAgICAvLyBpbmRleCBpbiBzZWxlY3RvcgogICAgaWYgKCB0eXBlb2YgZWxlbSA9PT0gInN0cmluZyIgKSB7CiAgICAgIHJldHVybiBqUXVlcnkuaW5BcnJheSggdGhpc1swXSwgalF1ZXJ5KCBlbGVtICkgKTsKICAgIH0KCiAgICAvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnQKICAgIHJldHVybiBqUXVlcnkuaW5BcnJheSgKICAgICAgLy8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkCiAgICAgIGVsZW0uanF1ZXJ5ID8gZWxlbVswXSA6IGVsZW0sIHRoaXMgKTsKICB9LAoKICBhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHsKICAgIHZhciBzZXQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09ICJzdHJpbmciID8KICAgICAgICBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgOgogICAgICAgIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yICYmIHNlbGVjdG9yLm5vZGVUeXBlID8gWyBzZWxlY3RvciBdIDogc2VsZWN0b3IgKSwKICAgICAgYWxsID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBzZXQgKTsKCiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS51bmlxdWUoYWxsKSApOwogIH0sCgogIGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKICAgIHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA\/CiAgICAgIHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoc2VsZWN0b3IpCiAgICApOwogIH0KfSk7CgpqUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrOwoKZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7CiAgZG8gewogICAgY3VyID0gY3VyWyBkaXIgXTsKICB9IHdoaWxlICggY3VyICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApOwoKICByZXR1cm4gY3VyOwp9CgpqUXVlcnkuZWFjaCh7CiAgcGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHsKICAgIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7CiAgICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsOwogIH0sCiAgcGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICByZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgInBhcmVudE5vZGUiICk7CiAgfSwKICBwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHsKICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAicGFyZW50Tm9kZSIsIHVudGlsICk7CiAgfSwKICBuZXh0OiBmdW5jdGlvbiggZWxlbSApIHsKICAgIHJldHVybiBzaWJsaW5nKCBlbGVtLCAibmV4dFNpYmxpbmciICk7CiAgfSwKICBwcmV2OiBmdW5jdGlvbiggZWxlbSApIHsKICAgIHJldHVybiBzaWJsaW5nKCBlbGVtLCAicHJldmlvdXNTaWJsaW5nIiApOwogIH0sCiAgbmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICByZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgIm5leHRTaWJsaW5nIiApOwogIH0sCiAgcHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICByZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgInByZXZpb3VzU2libGluZyIgKTsKICB9LAogIG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkgewogICAgcmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sICJuZXh0U2libGluZyIsIHVudGlsICk7CiAgfSwKICBwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHsKICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAicHJldmlvdXNTaWJsaW5nIiwgdW50aWwgKTsKICB9LAogIHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHsKICAgIHJldHVybiBqUXVlcnkuc2libGluZyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7CiAgfSwKICBjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICByZXR1cm4galF1ZXJ5LnNpYmxpbmcoIGVsZW0uZmlyc3RDaGlsZCApOwogIH0sCiAgY29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgcmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgImlmcmFtZSIgKSA\/CiAgICAgIGVsZW0uY29udGVudERvY3VtZW50IHx8IGVsZW0uY29udGVudFdpbmRvdy5kb2N1bWVudCA6CiAgICAgIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApOwogIH0KfSwgZnVuY3Rpb24oIG5hbWUsIGZuICkgewogIGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHsKICAgIHZhciByZXQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTsKCiAgICBpZiAoICFydW50aWwudGVzdCggbmFtZSApICkgewogICAgICBzZWxlY3RvciA9IHVudGlsOwogICAgfQoKICAgIGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSAic3RyaW5nIiApIHsKICAgICAgcmV0ID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHJldCApOwogICAgfQoKICAgIHJldCA9IHRoaXMubGVuZ3RoID4gMSAmJiAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQ7CgogICAgaWYgKCB0aGlzLmxlbmd0aCA+IDEgJiYgcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHsKICAgICAgcmV0ID0gcmV0LnJldmVyc2UoKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApOwogIH07Cn0pOwoKalF1ZXJ5LmV4dGVuZCh7CiAgZmlsdGVyOiBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHsKICAgIGlmICggbm90ICkgewogICAgICBleHByID0gIjpub3QoIiArIGV4cHIgKyAiKSI7CiAgICB9CgogICAgcmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSA\/CiAgICAgIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihlbGVtc1swXSwgZXhwcikgPyBbIGVsZW1zWzBdIF0gOiBbXSA6CiAgICAgIGpRdWVyeS5maW5kLm1hdGNoZXMoZXhwciwgZWxlbXMpOwogIH0sCgogIGRpcjogZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7CiAgICB2YXIgbWF0Y2hlZCA9IFtdLAogICAgICBjdXIgPSBlbGVtWyBkaXIgXTsKCiAgICB3aGlsZSAoIGN1ciAmJiBjdXIubm9kZVR5cGUgIT09IDkgJiYgKHVudGlsID09PSB1bmRlZmluZWQgfHwgY3VyLm5vZGVUeXBlICE9PSAxIHx8ICFqUXVlcnkoIGN1ciApLmlzKCB1bnRpbCApKSApIHsKICAgICAgaWYgKCBjdXIubm9kZVR5cGUgPT09IDEgKSB7CiAgICAgICAgbWF0Y2hlZC5wdXNoKCBjdXIgKTsKICAgICAgfQogICAgICBjdXIgPSBjdXJbZGlyXTsKICAgIH0KICAgIHJldHVybiBtYXRjaGVkOwogIH0sCgogIHNpYmxpbmc6IGZ1bmN0aW9uKCBuLCBlbGVtICkgewogICAgdmFyIHIgPSBbXTsKCiAgICBmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkgewogICAgICBpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHsKICAgICAgICByLnB1c2goIG4gKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiByOwogIH0KfSk7CgovLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdApmdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIGtlZXAgKSB7CgogIC8vIENhbid0IHBhc3MgbnVsbCBvciB1bmRlZmluZWQgdG8gaW5kZXhPZiBpbiBGaXJlZm94IDQKICAvLyBTZXQgdG8gMCB0byBza2lwIHN0cmluZyBjaGVjawogIHF1YWxpZmllciA9IHF1YWxpZmllciB8fCAwOwoKICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHsKICAgIHJldHVybiBqUXVlcnkuZ3JlcChlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7CiAgICAgIHZhciByZXRWYWwgPSAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICk7CiAgICAgIHJldHVybiByZXRWYWwgPT09IGtlZXA7CiAgICB9KTsKCiAgfSBlbHNlIGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkgewogICAgcmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgcmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgPT09IGtlZXA7CiAgICB9KTsKCiAgfSBlbHNlIGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gInN0cmluZyIgKSB7CiAgICB2YXIgZmlsdGVyZWQgPSBqUXVlcnkuZ3JlcChlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxOwogICAgfSk7CgogICAgaWYgKCBpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHsKICAgICAgcmV0dXJuIGpRdWVyeS5maWx0ZXIocXVhbGlmaWVyLCBmaWx0ZXJlZCwgIWtlZXApOwogICAgfSBlbHNlIHsKICAgICAgcXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBmaWx0ZXJlZCApOwogICAgfQogIH0KCiAgcmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHsKICAgIHJldHVybiAoIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBxdWFsaWZpZXIgKSA+PSAwICkgPT09IGtlZXA7CiAgfSk7Cn0KZnVuY3Rpb24gY3JlYXRlU2FmZUZyYWdtZW50KCBkb2N1bWVudCApIHsKICB2YXIgbGlzdCA9IG5vZGVOYW1lcy5zcGxpdCggInwiICksCiAgICBzYWZlRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKCiAgaWYgKCBzYWZlRnJhZy5jcmVhdGVFbGVtZW50ICkgewogICAgd2hpbGUgKCBsaXN0Lmxlbmd0aCApIHsKICAgICAgc2FmZUZyYWcuY3JlYXRlRWxlbWVudCgKICAgICAgICBsaXN0LnBvcCgpCiAgICAgICk7CiAgICB9CiAgfQogIHJldHVybiBzYWZlRnJhZzsKfQoKdmFyIG5vZGVOYW1lcyA9ICJhYmJyfGFydGljbGV8YXNpZGV8YXVkaW98YmRpfGNhbnZhc3xkYXRhfGRhdGFsaXN0fGRldGFpbHN8ZmlnY2FwdGlvbnxmaWd1cmV8Zm9vdGVyfCIgKwogICAgImhlYWRlcnxoZ3JvdXB8bWFya3xtZXRlcnxuYXZ8b3V0cHV0fHByb2dyZXNzfHNlY3Rpb258c3VtbWFyeXx0aW1lfHZpZGVvIiwKICByaW5saW5lalF1ZXJ5ID0gLyBqUXVlcnlcZCs9Iig\/Om51bGx8XGQrKSIvZywKICBybm9zaGltY2FjaGUgPSBuZXcgUmVnRXhwKCI8KD86IiArIG5vZGVOYW1lcyArICIpW1xccy8+XSIsICJpIiksCiAgcmxlYWRpbmdXaGl0ZXNwYWNlID0gL15ccysvLAogIHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcdzpdKylbXj5dKilcLz4vZ2ksCiAgcnRhZ05hbWUgPSAvPChbXHc6XSspLywKICBydGJvZHkgPSAvPHRib2R5L2ksCiAgcmh0bWwgPSAvPHwmIz9cdys7LywKICBybm9Jbm5lcmh0bWwgPSAvPCg\/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLAogIG1hbmlwdWxhdGlvbl9yY2hlY2thYmxlVHlwZSA9IC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pLAogIC8vIGNoZWNrZWQ9ImNoZWNrZWQiIG9yIGNoZWNrZWQKICByY2hlY2tlZCA9IC9jaGVja2VkXHMqKD86W149XXw9XHMqLmNoZWNrZWQuKS9pLAogIHJzY3JpcHRUeXBlID0gL14kfFwvKD86amF2YXxlY21hKXNjcmlwdC9pLAogIHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXC8oLiopLywKICByY2xlYW5TY3JpcHQgPSAvXlxzKjwhKD86XFtDREFUQVxbfC0tKXwoPzpcXVxdfC0tKT5ccyokL2csCgogIC8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApCiAgd3JhcE1hcCA9IHsKICAgIG9wdGlvbjogWyAxLCAiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPiIsICI8L3NlbGVjdD4iIF0sCiAgICBsZWdlbmQ6IFsgMSwgIjxmaWVsZHNldD4iLCAiPC9maWVsZHNldD4iIF0sCiAgICBhcmVhOiBbIDEsICI8bWFwPiIsICI8L21hcD4iIF0sCiAgICBwYXJhbTogWyAxLCAiPG9iamVjdD4iLCAiPC9vYmplY3Q+IiBdLAogICAgdGhlYWQ6IFsgMSwgIjx0YWJsZT4iLCAiPC90YWJsZT4iIF0sCiAgICB0cjogWyAyLCAiPHRhYmxlPjx0Ym9keT4iLCAiPC90Ym9keT48L3RhYmxlPiIgXSwKICAgIGNvbDogWyAyLCAiPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4iLCAiPC9jb2xncm91cD48L3RhYmxlPiIgXSwKICAgIHRkOiBbIDMsICI8dGFibGU+PHRib2R5Pjx0cj4iLCAiPC90cj48L3Rib2R5PjwvdGFibGU+IiBdLAoKICAgIC8vIElFNi04IGNhbid0IHNlcmlhbGl6ZSBsaW5rLCBzY3JpcHQsIHN0eWxlLCBvciBhbnkgaHRtbDUgKE5vU2NvcGUpIHRhZ3MsCiAgICAvLyB1bmxlc3Mgd3JhcHBlZCBpbiBhIGRpdiB3aXRoIG5vbi1icmVha2luZyBjaGFyYWN0ZXJzIGluIGZyb250IG9mIGl0LgogICAgX2RlZmF1bHQ6IGpRdWVyeS5zdXBwb3J0Lmh0bWxTZXJpYWxpemUgPyBbIDAsICIiLCAiIiBdIDogWyAxLCAiWDxkaXY+IiwgIjwvZGl2PiIgIF0KICB9LAogIHNhZmVGcmFnbWVudCA9IGNyZWF0ZVNhZmVGcmFnbWVudCggZG9jdW1lbnQgKSwKICBmcmFnbWVudERpdiA9IHNhZmVGcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikgKTsKCndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjsKd3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDsKd3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7CgpqUXVlcnkuZm4uZXh0ZW5kKHsKICB0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7CiAgICByZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkgewogICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA\/CiAgICAgICAgalF1ZXJ5LnRleHQoIHRoaXMgKSA6CiAgICAgICAgdGhpcy5lbXB0eSgpLmFwcGVuZCggKCB0aGlzWzBdICYmIHRoaXNbMF0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApLmNyZWF0ZVRleHROb2RlKCB2YWx1ZSApICk7CiAgICB9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApOwogIH0sCgogIHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkgewogICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGkpIHsKICAgICAgICBqUXVlcnkodGhpcykud3JhcEFsbCggaHRtbC5jYWxsKHRoaXMsIGkpICk7CiAgICAgIH0pOwogICAgfQoKICAgIGlmICggdGhpc1swXSApIHsKICAgICAgLy8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmQKICAgICAgdmFyIHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbMF0ub3duZXJEb2N1bWVudCApLmVxKDApLmNsb25lKHRydWUpOwoKICAgICAgaWYgKCB0aGlzWzBdLnBhcmVudE5vZGUgKSB7CiAgICAgICAgd3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbMF0gKTsKICAgICAgfQoKICAgICAgd3JhcC5tYXAoZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGVsZW0gPSB0aGlzOwoKICAgICAgICB3aGlsZSAoIGVsZW0uZmlyc3RDaGlsZCAmJiBlbGVtLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDEgKSB7CiAgICAgICAgICBlbGVtID0gZWxlbS5maXJzdENoaWxkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGVsZW07CiAgICAgIH0pLmFwcGVuZCggdGhpcyApOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0sCgogIHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7CiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7CiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSkgewogICAgICAgIGpRdWVyeSh0aGlzKS53cmFwSW5uZXIoIGh0bWwuY2FsbCh0aGlzLCBpKSApOwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICB2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLAogICAgICAgIGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpOwoKICAgICAgaWYgKCBjb250ZW50cy5sZW5ndGggKSB7CiAgICAgICAgY29udGVudHMud3JhcEFsbCggaHRtbCApOwoKICAgICAgfSBlbHNlIHsKICAgICAgICBzZWxmLmFwcGVuZCggaHRtbCApOwogICAgICB9CiAgICB9KTsKICB9LAoKICB3cmFwOiBmdW5jdGlvbiggaHRtbCApIHsKICAgIHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTsKCiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGkpIHsKICAgICAgalF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA\\/CiAgICAgICAgICAgICAgZmluZE9yQXBwZW5kKCB0aGlzW2ldLCAidGJvZHkiICkgOgogICAgICAgICAgICAgIHRoaXNbaV0sCiAgICAgICAgICAgIG5vZGUsCiAgICAgICAgICAgIGkKICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIGhhc1NjcmlwdHMgKSB7CiAgICAgICAgICBkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50OwoKICAgICAgICAgIC8vIFJlZW5hYmxlIHNjcmlwdHMKICAgICAgICAgIGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTsKCiAgICAgICAgICAvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uCiAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHsKICAgICAgICAgICAgbm9kZSA9IHNjcmlwdHNbIGkgXTsKICAgICAgICAgICAgaWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgIiIgKSAmJgogICAgICAgICAgICAgICFqUXVlcnkuX2RhdGEoIG5vZGUsICJnbG9iYWxFdmFsIiApICYmIGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7CgogICAgICAgICAgICAgIGlmICggbm9kZS5zcmMgKSB7CiAgICAgICAgICAgICAgICAvLyBIb3BlIGFqYXggaXMgYXZhaWxhYmxlLi4uCiAgICAgICAgICAgICAgICBqUXVlcnkuYWpheCh7CiAgICAgICAgICAgICAgICAgIHVybDogbm9kZS5zcmMsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAgICAgICBkYXRhVHlwZTogInNjcmlwdCIsCiAgICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgZ2xvYmFsOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgInRocm93cyI6IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBqUXVlcnkuZ2xvYmFsRXZhbCggKCBub2RlLnRleHQgfHwgbm9kZS50ZXh0Q29udGVudCB8fCBub2RlLmlubmVySFRNTCB8fCAiIiApLnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgIiIgKSApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gRml4ICMxMTgwOTogQXZvaWQgbGVha2luZyBtZW1vcnkKICAgICAgICBmcmFnbWVudCA9IGZpcnN0ID0gbnVsbDsKICAgICAgfQogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0KfSk7CgpmdW5jdGlvbiBmaW5kT3JBcHBlbmQoIGVsZW0sIHRhZyApIHsKICByZXR1cm4gZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIClbMF0gfHwgZWxlbS5hcHBlbmRDaGlsZCggZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIHRhZyApICk7Cn0KCi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb24KZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHsKICB2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSgidHlwZSIpOwogIGVsZW0udHlwZSA9ICggYXR0ciAmJiBhdHRyLnNwZWNpZmllZCApICsgIi8iICsgZWxlbS50eXBlOwogIHJldHVybiBlbGVtOwp9CmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7CiAgdmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7CiAgaWYgKCBtYXRjaCApIHsKICAgIGVsZW0udHlwZSA9IG1hdGNoWzFdOwogIH0gZWxzZSB7CiAgICBlbGVtLnJlbW92ZUF0dHJpYnV0ZSgidHlwZSIpOwogIH0KICByZXR1cm4gZWxlbTsKfQoKLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkCmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHsKICB2YXIgZWxlbSwKICAgIGkgPSAwOwogIGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkgewogICAgalF1ZXJ5Ll9kYXRhKCBlbGVtLCAiZ2xvYmFsRXZhbCIsICFyZWZFbGVtZW50cyB8fCBqUXVlcnkuX2RhdGEoIHJlZkVsZW1lbnRzW2ldLCAiZ2xvYmFsRXZhbCIgKSApOwogIH0KfQoKZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHsKCiAgaWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxIHx8ICFqUXVlcnkuaGFzRGF0YSggc3JjICkgKSB7CiAgICByZXR1cm47CiAgfQoKICB2YXIgdHlwZSwgaSwgbCwKICAgIG9sZERhdGEgPSBqUXVlcnkuX2RhdGEoIHNyYyApLAogICAgY3VyRGF0YSA9IGpRdWVyeS5fZGF0YSggZGVzdCwgb2xkRGF0YSApLAogICAgZXZlbnRzID0gb2xkRGF0YS5ldmVudHM7CgogIGlmICggZXZlbnRzICkgewogICAgZGVsZXRlIGN1ckRhdGEuaGFuZGxlOwogICAgY3VyRGF0YS5ldmVudHMgPSB7fTsKCiAgICBmb3IgKCB0eXBlIGluIGV2ZW50cyApIHsKICAgICAgZm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgalF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApOwogICAgICB9CiAgICB9CiAgfQoKICAvLyBtYWtlIHRoZSBjbG9uZWQgcHVibGljIGRhdGEgb2JqZWN0IGEgY29weSBmcm9tIHRoZSBvcmlnaW5hbAogIGlmICggY3VyRGF0YS5kYXRhICkgewogICAgY3VyRGF0YS5kYXRhID0galF1ZXJ5LmV4dGVuZCgge30sIGN1ckRhdGEuZGF0YSApOwogIH0KfQoKZnVuY3Rpb24gZml4Q2xvbmVOb2RlSXNzdWVzKCBzcmMsIGRlc3QgKSB7CiAgdmFyIG5vZGVOYW1lLCBlLCBkYXRhOwoKICAvLyBXZSBkbyBub3QgbmVlZCB0byBkbyBhbnl0aGluZyBmb3Igbm9uLUVsZW1lbnRzCiAgaWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkgewogICAgcmV0dXJuOwogIH0KCiAgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CgogIC8vIElFNi04IGNvcGllcyBldmVudHMgYm91bmQgdmlhIGF0dGFjaEV2ZW50IHdoZW4gdXNpbmcgY2xvbmVOb2RlLgogIGlmICggIWpRdWVyeS5zdXBwb3J0Lm5vQ2xvbmVFdmVudCAmJiBkZXN0WyBqUXVlcnkuZXhwYW5kbyBdICkgewogICAgZGF0YSA9IGpRdWVyeS5fZGF0YSggZGVzdCApOwoKICAgIGZvciAoIGUgaW4gZGF0YS5ldmVudHMgKSB7CiAgICAgIGpRdWVyeS5yZW1vdmVFdmVudCggZGVzdCwgZSwgZGF0YS5oYW5kbGUgKTsKICAgIH0KCiAgICAvLyBFdmVudCBkYXRhIGdldHMgcmVmZXJlbmNlZCBpbnN0ZWFkIG9mIGNvcGllZCBpZiB0aGUgZXhwYW5kbyBnZXRzIGNvcGllZCB0b28KICAgIGRlc3QucmVtb3ZlQXR0cmlidXRlKCBqUXVlcnkuZXhwYW5kbyApOwogIH0KCiAgLy8gSUUgYmxhbmtzIGNvbnRlbnRzIHdoZW4gY2xvbmluZyBzY3JpcHRzLCBhbmQgdHJpZXMgdG8gZXZhbHVhdGUgbmV3bHktc2V0IHRleHQKICBpZiAoIG5vZGVOYW1lID09PSAic2NyaXB0IiAmJiBkZXN0LnRleHQgIT09IHNyYy50ZXh0ICkgewogICAgZGlzYWJsZVNjcmlwdCggZGVzdCApLnRleHQgPSBzcmMudGV4dDsKICAgIHJlc3RvcmVTY3JpcHQoIGRlc3QgKTsKCiAgLy8gSUU2LTEwIGltcHJvcGVybHkgY2xvbmVzIGNoaWxkcmVuIG9mIG9iamVjdCBlbGVtZW50cyB1c2luZyBjbGFzc2lkLgogIC8vIElFMTAgdGhyb3dzIE5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yIGlmIHBhcmVudCBpcyBudWxsLCAjMTIxMzIuCiAgfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJvYmplY3QiICkgewogICAgaWYgKCBkZXN0LnBhcmVudE5vZGUgKSB7CiAgICAgIGRlc3Qub3V0ZXJIVE1MID0gc3JjLm91dGVySFRNTDsKICAgIH0KCiAgICAvLyBUaGlzIHBhdGggYXBwZWFycyB1bmF2b2lkYWJsZSBmb3IgSUU5LiBXaGVuIGNsb25pbmcgYW4gb2JqZWN0CiAgICAvLyBlbGVtZW50IGluIElFOSwgdGhlIG91dGVySFRNTCBzdHJhdGVneSBhYm92ZSBpcyBub3Qgc3VmZmljaWVudC4KICAgIC8vIElmIHRoZSBzcmMgaGFzIGlubmVySFRNTCBhbmQgdGhlIGRlc3RpbmF0aW9uIGRvZXMgbm90LAogICAgLy8gY29weSB0aGUgc3JjLmlubmVySFRNTCBpbnRvIHRoZSBkZXN0LmlubmVySFRNTC4gIzEwMzI0CiAgICBpZiAoIGpRdWVyeS5zdXBwb3J0Lmh0bWw1Q2xvbmUgJiYgKCBzcmMuaW5uZXJIVE1MICYmICFqUXVlcnkudHJpbShkZXN0LmlubmVySFRNTCkgKSApIHsKICAgICAgZGVzdC5pbm5lckhUTUwgPSBzcmMuaW5uZXJIVE1MOwogICAgfQoKICB9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gImlucHV0IiAmJiBtYW5pcHVsYXRpb25fcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHsKICAgIC8vIElFNi04IGZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3gKICAgIC8vIG9yIHJhZGlvIGJ1dHRvbi4gV29yc2UsIElFNi03IGZhaWwgdG8gZ2l2ZSB0aGUgY2xvbmVkIGVsZW1lbnQKICAgIC8vIGEgY2hlY2tlZCBhcHBlYXJhbmNlIGlmIHRoZSBkZWZhdWx0Q2hlY2tlZCB2YWx1ZSBpc24ndCBhbHNvIHNldAoKICAgIGRlc3QuZGVmYXVsdENoZWNrZWQgPSBkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDsKCiAgICAvLyBJRTYtNyBnZXQgY29uZnVzZWQgYW5kIGVuZCB1cCBzZXR0aW5nIHRoZSB2YWx1ZSBvZiBhIGNsb25lZAogICAgLy8gY2hlY2tib3gvcmFkaW8gYnV0dG9uIHRvIGFuIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mICJvbiIKICAgIGlmICggZGVzdC52YWx1ZSAhPT0gc3JjLnZhbHVlICkgewogICAgICBkZXN0LnZhbHVlID0gc3JjLnZhbHVlOwogICAgfQoKICAvLyBJRTYtOCBmYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZAogIC8vIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zCiAgfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJvcHRpb24iICkgewogICAgZGVzdC5kZWZhdWx0U2VsZWN0ZWQgPSBkZXN0LnNlbGVjdGVkID0gc3JjLmRlZmF1bHRTZWxlY3RlZDsKCiAgLy8gSUU2LTggZmFpbHMgdG8gc2V0IHRoZSBkZWZhdWx0VmFsdWUgdG8gdGhlIGNvcnJlY3QgdmFsdWUgd2hlbgogIC8vIGNsb25pbmcgb3RoZXIgdHlwZXMgb2YgaW5wdXQgZmllbGRzCiAgfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJpbnB1dCIgfHwgbm9kZU5hbWUgPT09ICJ0ZXh0YXJlYSIgKSB7CiAgICBkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7CiAgfQp9CgpqUXVlcnkuZWFjaCh7CiAgYXBwZW5kVG86ICJhcHBlbmQiLAogIHByZXBlbmRUbzogInByZXBlbmQiLAogIGluc2VydEJlZm9yZTogImJlZm9yZSIsCiAgaW5zZXJ0QWZ0ZXI6ICJhZnRlciIsCiAgcmVwbGFjZUFsbDogInJlcGxhY2VXaXRoIgp9LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7CiAgalF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICB2YXIgZWxlbXMsCiAgICAgIGkgPSAwLAogICAgICByZXQgPSBbXSwKICAgICAgaW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLAogICAgICBsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDE7CgogICAgZm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHsKICAgICAgZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUodHJ1ZSk7CiAgICAgIGpRdWVyeSggaW5zZXJ0W2ldIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7CgogICAgICAvLyBNb2Rlcm4gYnJvd3NlcnMgY2FuIGFwcGx5IGpRdWVyeSBjb2xsZWN0aW9ucyBhcyBhcnJheXMsIGJ1dCBvbGRJRSBuZWVkcyBhIC5nZXQoKQogICAgICBjb3JlX3B1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApOwogIH07Cn0pOwoKZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7CiAgdmFyIGVsZW1zLCBlbGVtLAogICAgaSA9IDAsCiAgICBmb3VuZCA9IHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBjb3JlX3N0cnVuZGVmaW5lZCA\/IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCAiKiIgKSA6CiAgICAgIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IGNvcmVfc3RydW5kZWZpbmVkID8gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgIioiICkgOgogICAgICB1bmRlZmluZWQ7CgogIGlmICggIWZvdW5kICkgewogICAgZm9yICggZm91bmQgPSBbXSwgZWxlbXMgPSBjb250ZXh0LmNoaWxkTm9kZXMgfHwgY29udGV4dDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkgewogICAgICBpZiAoICF0YWcgfHwgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCB0YWcgKSApIHsKICAgICAgICBmb3VuZC5wdXNoKCBlbGVtICk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgalF1ZXJ5Lm1lcmdlKCBmb3VuZCwgZ2V0QWxsKCBlbGVtLCB0YWcgKSApOwogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgPwogICAgalF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgZm91bmQgKSA6CiAgICBmb3VuZDsKfQoKLy8gVXNlZCBpbiBidWlsZEZyYWdtZW50LCBmaXhlcyB0aGUgZGVmYXVsdENoZWNrZWQgcHJvcGVydHkKZnVuY3Rpb24gZml4RGVmYXVsdENoZWNrZWQoIGVsZW0gKSB7CiAgaWYgKCBtYW5pcHVsYXRpb25fcmNoZWNrYWJsZVR5cGUudGVzdCggZWxlbS50eXBlICkgKSB7CiAgICBlbGVtLmRlZmF1bHRDaGVja2VkID0gZWxlbS5jaGVja2VkOwogIH0KfQoKalF1ZXJ5LmV4dGVuZCh7CiAgY2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHsKICAgIHZhciBkZXN0RWxlbWVudHMsIG5vZGUsIGNsb25lLCBpLCBzcmNFbGVtZW50cywKICAgICAgaW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTsKCiAgICBpZiAoIGpRdWVyeS5zdXBwb3J0Lmh0bWw1Q2xvbmUgfHwgalF1ZXJ5LmlzWE1MRG9jKGVsZW0pIHx8ICFybm9zaGltY2FjaGUudGVzdCggIjwiICsgZWxlbS5ub2RlTmFtZSArICI+IiApICkgewogICAgICBjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICk7CgogICAgLy8gSUU8PTggZG9lcyBub3QgcHJvcGVybHkgY2xvbmUgZGV0YWNoZWQsIHVua25vd24gZWxlbWVudCBub2RlcwogICAgfSBlbHNlIHsKICAgICAgZnJhZ21lbnREaXYuaW5uZXJIVE1MID0gZWxlbS5vdXRlckhUTUw7CiAgICAgIGZyYWdtZW50RGl2LnJlbW92ZUNoaWxkKCBjbG9uZSA9IGZyYWdtZW50RGl2LmZpcnN0Q2hpbGQgKTsKICAgIH0KCiAgICBpZiAoICghalF1ZXJ5LnN1cHBvcnQubm9DbG9uZUV2ZW50IHx8ICFqUXVlcnkuc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCkgJiYKICAgICAgICAoZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSkgJiYgIWpRdWVyeS5pc1hNTERvYyhlbGVtKSApIHsKCiAgICAgIC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cDovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yCiAgICAgIGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTsKICAgICAgc3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTsKCiAgICAgIC8vIEZpeCBhbGwgSUUgY2xvbmluZyBpc3N1ZXMKICAgICAgZm9yICggaSA9IDA7IChub2RlID0gc3JjRWxlbWVudHNbaV0pICE9IG51bGw7ICsraSApIHsKICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgZGVzdGluYXRpb24gbm9kZSBpcyBub3QgbnVsbDsgRml4ZXMgIzk1ODcKICAgICAgICBpZiAoIGRlc3RFbGVtZW50c1tpXSApIHsKICAgICAgICAgIGZpeENsb25lTm9kZUlzc3Vlcyggbm9kZSwgZGVzdEVsZW1lbnRzW2ldICk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgLy8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZQogICAgaWYgKCBkYXRhQW5kRXZlbnRzICkgewogICAgICBpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkgewogICAgICAgIHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7CiAgICAgICAgZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTsKCiAgICAgICAgZm9yICggaSA9IDA7IChub2RlID0gc3JjRWxlbWVudHNbaV0pICE9IG51bGw7IGkrKyApIHsKICAgICAgICAgIGNsb25lQ29weUV2ZW50KCBub2RlLCBkZXN0RWxlbWVudHNbaV0gKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5CiAgICBkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCAic2NyaXB0IiApOwogICAgaWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHsKICAgICAgc2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgInNjcmlwdCIgKSApOwogICAgfQoKICAgIGRlc3RFbGVtZW50cyA9IHNyY0VsZW1lbnRzID0gbm9kZSA9IG51bGw7CgogICAgLy8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0CiAgICByZXR1cm4gY2xvbmU7CiAgfSwKCiAgYnVpbGRGcmFnbWVudDogZnVuY3Rpb24oIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24gKSB7CiAgICB2YXIgaiwgZWxlbSwgY29udGFpbnMsCiAgICAgIHRtcCwgdGFnLCB0Ym9keSwgd3JhcCwKICAgICAgbCA9IGVsZW1zLmxlbmd0aCwKCiAgICAgIC8vIEVuc3VyZSBhIHNhZmUgZnJhZ21lbnQKICAgICAgc2FmZSA9IGNyZWF0ZVNhZmVGcmFnbWVudCggY29udGV4dCApLAoKICAgICAgbm9kZXMgPSBbXSwKICAgICAgaSA9IDA7CgogICAgZm9yICggOyBpIDwgbDsgaSsrICkgewogICAgICBlbGVtID0gZWxlbXNbIGkgXTsKCiAgICAgIGlmICggZWxlbSB8fCBlbGVtID09PSAwICkgewoKICAgICAgICAvLyBBZGQgbm9kZXMgZGlyZWN0bHkKICAgICAgICBpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09ICJvYmplY3QiICkgewogICAgICAgICAgalF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA\/IFsgZWxlbSBdIDogZWxlbSApOwoKICAgICAgICAvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGUKICAgICAgICB9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkgewogICAgICAgICAgbm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7CgogICAgICAgIC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2RlcwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0bXAgPSB0bXAgfHwgc2FmZS5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCJkaXYiKSApOwoKICAgICAgICAgIC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb24KICAgICAgICAgIHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsiIiwgIiJdIClbMV0udG9Mb3dlckNhc2UoKTsKICAgICAgICAgIHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0OwoKICAgICAgICAgIHRtcC5pbm5lckhUTUwgPSB3cmFwWzFdICsgZWxlbS5yZXBsYWNlKCByeGh0bWxUYWcsICI8JDE+PC8kMj4iICkgKyB3cmFwWzJdOwoKICAgICAgICAgIC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudAogICAgICAgICAgaiA9IHdyYXBbMF07CiAgICAgICAgICB3aGlsZSAoIGotLSApIHsKICAgICAgICAgICAgdG1wID0gdG1wLmxhc3RDaGlsZDsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBNYW51YWxseSBhZGQgbGVhZGluZyB3aGl0ZXNwYWNlIHJlbW92ZWQgYnkgSUUKICAgICAgICAgIGlmICggIWpRdWVyeS5zdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlICYmIHJsZWFkaW5nV2hpdGVzcGFjZS50ZXN0KCBlbGVtICkgKSB7CiAgICAgICAgICAgIG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIHJsZWFkaW5nV2hpdGVzcGFjZS5leGVjKCBlbGVtIClbMF0gKSApOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIFJlbW92ZSBJRSdzIGF1dG9pbnNlcnRlZCA8dGJvZHk+IGZyb20gdGFibGUgZnJhZ21lbnRzCiAgICAgICAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC50Ym9keSApIHsKCiAgICAgICAgICAgIC8vIFN0cmluZyB3YXMgYSA8dGFibGU+LCAqbWF5KiBoYXZlIHNwdXJpb3VzIDx0Ym9keT4KICAgICAgICAgICAgZWxlbSA9IHRhZyA9PT0gInRhYmxlIiAmJiAhcnRib2R5LnRlc3QoIGVsZW0gKSA\\/IG51bSB8fCAwIDogdmFsOwogICAgfQogICAgcmV0dXJuIHZhbDsKICB9LAoKICAvLyBBIG1ldGhvZCBmb3IgcXVpY2tseSBzd2FwcGluZyBpbi9vdXQgQ1NTIHByb3BlcnRpZXMgdG8gZ2V0IGNvcnJlY3QgY2FsY3VsYXRpb25zCiAgc3dhcDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkgewogICAgdmFyIHJldCwgbmFtZSwKICAgICAgb2xkID0ge307CgogICAgLy8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzCiAgICBmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7CiAgICAgIG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdOwogICAgICBlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07CiAgICB9CgogICAgcmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTsKCiAgICAvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXMKICAgIGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHsKICAgICAgZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07CiAgICB9CgogICAgcmV0dXJuIHJldDsKICB9Cn0pOwoKLy8gTk9URTogd2UndmUgaW5jbHVkZWQgdGhlICJ3aW5kb3ciIGluIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlCi8vIGJlY2F1c2UganNkb20gb24gbm9kZS5qcyB3aWxsIGJyZWFrIHdpdGhvdXQgaXQuCmlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7CiAgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7CiAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTsKICB9OwoKICBjdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgX2NvbXB1dGVkICkgewogICAgdmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsCiAgICAgIGNvbXB1dGVkID0gX2NvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApLAoKICAgICAgLy8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgaW4gSUU5LCBzZWUgIzEyNTM3CiAgICAgIHJldCA9IGNvbXB1dGVkID8gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQsCiAgICAgIHN0eWxlID0gZWxlbS5zdHlsZTsKCiAgICBpZiAoIGNvbXB1dGVkICkgewoKICAgICAgaWYgKCByZXQgPT09ICIiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkgewogICAgICAgIHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApOwogICAgICB9CgogICAgICAvLyBBIHRyaWJ1dGUgdG8gdGhlICJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzIgogICAgICAvLyBDaHJvbWUgPCAxNyBhbmQgU2FmYXJpIDUuMCB1c2VzICJjb21wdXRlZCB2YWx1ZSIgaW5zdGVhZCBvZiAidXNlZCB2YWx1ZSIgZm9yIG1hcmdpbi1yaWdodAogICAgICAvLyBTYWZhcmkgNS4xLjcgKGF0IGxlYXN0KSByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIGEgbGFyZ2VyIHNldCBvZiB2YWx1ZXMsIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMKICAgICAgLy8gdGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOiBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzCiAgICAgIGlmICggcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkgewoKICAgICAgICAvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzCiAgICAgICAgd2lkdGggPSBzdHlsZS53aWR0aDsKICAgICAgICBtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoOwogICAgICAgIG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7CgogICAgICAgIC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXQKICAgICAgICBzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7CiAgICAgICAgcmV0ID0gY29tcHV0ZWQud2lkdGg7CgogICAgICAgIC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXMKICAgICAgICBzdHlsZS53aWR0aCA9IHdpZHRoOwogICAgICAgIHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7CiAgICAgICAgc3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDsKICAgICAgfQogICAgfQoKICAgIHJldHVybiByZXQ7CiAgfTsKfSBlbHNlIGlmICggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSApIHsKICBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHsKICAgIHJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTsKICB9OwoKICBjdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgX2NvbXB1dGVkICkgewogICAgdmFyIGxlZnQsIHJzLCByc0xlZnQsCiAgICAgIGNvbXB1dGVkID0gX2NvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApLAogICAgICByZXQgPSBjb21wdXRlZCA\/IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQsCiAgICAgIHN0eWxlID0gZWxlbS5zdHlsZTsKCiAgICAvLyBBdm9pZCBzZXR0aW5nIHJldCB0byBlbXB0eSBzdHJpbmcgaGVyZQogICAgLy8gc28gd2UgZG9uJ3QgZGVmYXVsdCB0byBhdXRvCiAgICBpZiAoIHJldCA9PSBudWxsICYmIHN0eWxlICYmIHN0eWxlWyBuYW1lIF0gKSB7CiAgICAgIHJldCA9IHN0eWxlWyBuYW1lIF07CiAgICB9CgogICAgLy8gRnJvbSB0aGUgYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkcwogICAgLy8gaHR0cDovL2VyaWsuZWFlLm5ldC9hcmNoaXZlcy8yMDA3LzA3LzI3LzE4LjU0LjE1LyNjb21tZW50LTEwMjI5MQoKICAgIC8vIElmIHdlJ3JlIG5vdCBkZWFsaW5nIHdpdGggYSByZWd1bGFyIHBpeGVsIG51bWJlcgogICAgLy8gYnV0IGEgbnVtYmVyIHRoYXQgaGFzIGEgd2VpcmQgZW5kaW5nLCB3ZSBuZWVkIHRvIGNvbnZlcnQgaXQgdG8gcGl4ZWxzCiAgICAvLyBidXQgbm90IHBvc2l0aW9uIGNzcyBhdHRyaWJ1dGVzLCBhcyB0aG9zZSBhcmUgcHJvcG9ydGlvbmFsIHRvIHRoZSBwYXJlbnQgZWxlbWVudCBpbnN0ZWFkCiAgICAvLyBhbmQgd2UgY2FuJ3QgbWVhc3VyZSB0aGUgcGFyZW50IGluc3RlYWQgYmVjYXVzZSBpdCBtaWdodCB0cmlnZ2VyIGEgInN0YWNraW5nIGRvbGxzIiBwcm9ibGVtCiAgICBpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiAhcnBvc2l0aW9uLnRlc3QoIG5hbWUgKSApIHsKCiAgICAgIC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXMKICAgICAgbGVmdCA9IHN0eWxlLmxlZnQ7CiAgICAgIHJzID0gZWxlbS5ydW50aW1lU3R5bGU7CiAgICAgIHJzTGVmdCA9IHJzICYmIHJzLmxlZnQ7CgogICAgICAvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0CiAgICAgIGlmICggcnNMZWZ0ICkgewogICAgICAgIHJzLmxlZnQgPSBlbGVtLmN1cnJlbnRTdHlsZS5sZWZ0OwogICAgICB9CiAgICAgIHN0eWxlLmxlZnQgPSBuYW1lID09PSAiZm9udFNpemUiID8gIjFlbSIgOiByZXQ7CiAgICAgIHJldCA9IHN0eWxlLnBpeGVsTGVmdCArICJweCI7CgogICAgICAvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzCiAgICAgIHN0eWxlLmxlZnQgPSBsZWZ0OwogICAgICBpZiAoIHJzTGVmdCApIHsKICAgICAgICBycy5sZWZ0ID0gcnNMZWZ0OwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHJldCA9PT0gIiIgPyAiYXV0byIgOiByZXQ7CiAgfTsKfQoKZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHsKICB2YXIgbWF0Y2hlcyA9IHJudW1zcGxpdC5leGVjKCB2YWx1ZSApOwogIHJldHVybiBtYXRjaGVzID8KICAgIC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkICJzdWJ0cmFjdCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rcwogICAgTWF0aC5tYXgoIDAsIG1hdGNoZXNbIDEgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDIgXSB8fCAicHgiICkgOgogICAgdmFsdWU7Cn0KCmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHsKICB2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gImJvcmRlciIgOiAiY29udGVudCIgKSA\/CiAgICAvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb24KICAgIDQgOgogICAgLy8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllcwogICAgbmFtZSA9PT0gIndpZHRoIiA\/IDEgOiAwLAoKICAgIHZhbCA9IDA7CgogIGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHsKICAgIC8vIGJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXQKICAgIGlmICggZXh0cmEgPT09ICJtYXJnaW4iICkgewogICAgICB2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7CiAgICB9CgogICAgaWYgKCBpc0JvcmRlckJveCApIHsKICAgICAgLy8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50CiAgICAgIGlmICggZXh0cmEgPT09ICJjb250ZW50IiApIHsKICAgICAgICB2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgInBhZGRpbmciICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApOwogICAgICB9CgogICAgICAvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlcgogICAgICBpZiAoIGV4dHJhICE9PSAibWFyZ2luIiApIHsKICAgICAgICB2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgImJvcmRlciIgKyBjc3NFeHBhbmRbIGkgXSArICJXaWR0aCIsIHRydWUsIHN0eWxlcyApOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZwogICAgICB2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgInBhZGRpbmciICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApOwoKICAgICAgLy8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlcgogICAgICBpZiAoIGV4dHJhICE9PSAicGFkZGluZyIgKSB7CiAgICAgICAgdmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sICJib3JkZXIiICsgY3NzRXhwYW5kWyBpIF0gKyAiV2lkdGgiLCB0cnVlLCBzdHlsZXMgKTsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIHZhbDsKfQoKZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7CgogIC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlCiAgdmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLAogICAgdmFsID0gbmFtZSA9PT0gIndpZHRoIiA\/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCwKICAgIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLAogICAgaXNCb3JkZXJCb3ggPSBqUXVlcnkuc3VwcG9ydC5ib3hTaXppbmcgJiYgalF1ZXJ5LmNzcyggZWxlbSwgImJveFNpemluZyIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gImJvcmRlci1ib3giOwoKICAvLyBzb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWQKICAvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODUKICAvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2NjgKICBpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkgewogICAgLy8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5CiAgICB2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApOwogICAgaWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkgewogICAgICB2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07CiAgICB9CgogICAgLy8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi4KICAgIGlmICggcm51bW5vbnB4LnRlc3QodmFsKSApIHsKICAgICAgcmV0dXJuIHZhbDsKICAgIH0KCiAgICAvLyB3ZSBuZWVkIHRoZSBjaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlcwogICAgLy8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZQogICAgdmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmICggalF1ZXJ5LnN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTsKCiAgICAvLyBOb3JtYWxpemUgIiIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYQogICAgdmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDsKICB9CgogIC8vIHVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzCiAgcmV0dXJuICggdmFsICsKICAgIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KAogICAgICBlbGVtLAogICAgICBuYW1lLAogICAgICBleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gImJvcmRlciIgOiAiY29udGVudCIgKSwKICAgICAgdmFsdWVJc0JvcmRlckJveCwKICAgICAgc3R5bGVzCiAgICApCiAgKSArICJweCI7Cn0KCi8vIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50CmZ1bmN0aW9uIGNzc19kZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7CiAgdmFyIGRvYyA9IGRvY3VtZW50LAogICAgZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdOwoKICBpZiAoICFkaXNwbGF5ICkgewogICAgZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTsKCiAgICAvLyBJZiB0aGUgc2ltcGxlIHdheSBmYWlscywgcmVhZCBmcm9tIGluc2lkZSBhbiBpZnJhbWUKICAgIGlmICggZGlzcGxheSA9PT0gIm5vbmUiIHx8ICFkaXNwbGF5ICkgewogICAgICAvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGUKICAgICAgaWZyYW1lID0gKCBpZnJhbWUgfHwKICAgICAgICBqUXVlcnkoIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz4iKQogICAgICAgIC5jc3MoICJjc3NUZXh0IiwgImRpc3BsYXk6YmxvY2sgIWltcG9ydGFudCIgKQogICAgICApLmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7CgogICAgICAvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2UKICAgICAgZG9jID0gKCBpZnJhbWVbMF0uY29udGVudFdpbmRvdyB8fCBpZnJhbWVbMF0uY29udGVudERvY3VtZW50ICkuZG9jdW1lbnQ7CiAgICAgIGRvYy53cml0ZSgiPCFkb2N0eXBlIGh0bWw+PGh0bWw+PGJvZHk+Iik7CiAgICAgIGRvYy5jbG9zZSgpOwoKICAgICAgZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTsKICAgICAgaWZyYW1lLmRldGFjaCgpOwogICAgfQoKICAgIC8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheQogICAgZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5OwogIH0KCiAgcmV0dXJuIGRpc3BsYXk7Cn0KCi8vIENhbGxlZCBPTkxZIGZyb20gd2l0aGluIGNzc19kZWZhdWx0RGlzcGxheQpmdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7CiAgdmFyIGVsZW0gPSBqUXVlcnkoIGRvYy5jcmVhdGVFbGVtZW50KCBuYW1lICkgKS5hcHBlbmRUbyggZG9jLmJvZHkgKSwKICAgIGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtWzBdLCAiZGlzcGxheSIgKTsKICBlbGVtLnJlbW92ZSgpOwogIHJldHVybiBkaXNwbGF5Owp9CgpqUXVlcnkuZWFjaChbICJoZWlnaHQiLCAid2lkdGgiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkgewogIGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0gewogICAgZ2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkgewogICAgICBpZiAoIGNvbXB1dGVkICkgewogICAgICAgIC8vIGNlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbQogICAgICAgIC8vIGhvd2V2ZXIsIGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXQgZnJvbSB0aGlzCiAgICAgICAgcmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPT09IDAgJiYgcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApICkgPwogICAgICAgICAgalF1ZXJ5LnN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTsKICAgICAgICAgIH0pIDoKICAgICAgICAgIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7CiAgICAgIH0KICAgIH0sCgogICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkgewogICAgICB2YXIgc3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICk7CiAgICAgIHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIGV4dHJhID8KICAgICAgICBhdWdtZW50V2lkdGhPckhlaWdodCgKICAgICAgICAgIGVsZW0sCiAgICAgICAgICBuYW1lLAogICAgICAgICAgZXh0cmEsCiAgICAgICAgICBqUXVlcnkuc3VwcG9ydC5ib3hTaXppbmcgJiYgalF1ZXJ5LmNzcyggZWxlbSwgImJveFNpemluZyIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gImJvcmRlci1ib3giLAogICAgICAgICAgc3R5bGVzCiAgICAgICAgKSA6IDAKICAgICAgKTsKICAgIH0KICB9Owp9KTsKCmlmICggIWpRdWVyeS5zdXBwb3J0Lm9wYWNpdHkgKSB7CiAgalF1ZXJ5LmNzc0hvb2tzLm9wYWNpdHkgPSB7CiAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHsKICAgICAgLy8gSUUgdXNlcyBmaWx0ZXJzIGZvciBvcGFjaXR5CiAgICAgIHJldHVybiByb3BhY2l0eS50ZXN0KCAoY29tcHV0ZWQgJiYgZWxlbS5jdXJyZW50U3R5bGUgPyBlbGVtLmN1cnJlbnRTdHlsZS5maWx0ZXIgOiBlbGVtLnN0eWxlLmZpbHRlcikgfHwgIiIgKSA\/CiAgICAgICAgKCAwLjAxICogcGFyc2VGbG9hdCggUmVnRXhwLiQxICkgKSArICIiIDoKICAgICAgICBjb21wdXRlZCA\/ICIxIiA6ICIiOwogICAgfSwKCiAgICBzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKICAgICAgdmFyIHN0eWxlID0gZWxlbS5zdHlsZSwKICAgICAgICBjdXJyZW50U3R5bGUgPSBlbGVtLmN1cnJlbnRTdHlsZSwKICAgICAgICBvcGFjaXR5ID0galF1ZXJ5LmlzTnVtZXJpYyggdmFsdWUgKSA\/ICJhbHBoYShvcGFjaXR5PSIgKyB2YWx1ZSAqIDEwMCArICIpIiA6ICIiLAogICAgICAgIGZpbHRlciA9IGN1cnJlbnRTdHlsZSAmJiBjdXJyZW50U3R5bGUuZmlsdGVyIHx8IHN0eWxlLmZpbHRlciB8fCAiIjsKCiAgICAgIC8vIElFIGhhcyB0cm91YmxlIHdpdGggb3BhY2l0eSBpZiBpdCBkb2VzIG5vdCBoYXZlIGxheW91dAogICAgICAvLyBGb3JjZSBpdCBieSBzZXR0aW5nIHRoZSB6b29tIGxldmVsCiAgICAgIHN0eWxlLnpvb20gPSAxOwoKICAgICAgLy8gaWYgc2V0dGluZyBvcGFjaXR5IHRvIDEsIGFuZCBubyBvdGhlciBmaWx0ZXJzIGV4aXN0IC0gYXR0ZW1wdCB0byByZW1vdmUgZmlsdGVyIGF0dHJpYnV0ZSAjNjY1MgogICAgICAvLyBpZiB2YWx1ZSA9PT0gIiIsIHRoZW4gcmVtb3ZlIGlubGluZSBvcGFjaXR5ICMxMjY4NQogICAgICBpZiAoICggdmFsdWUgPj0gMSB8fCB2YWx1ZSA9PT0gIiIgKSAmJgogICAgICAgICAgalF1ZXJ5LnRyaW0oIGZpbHRlci5yZXBsYWNlKCByYWxwaGEsICIiICkgKSA9PT0gIiIgJiYKICAgICAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSApIHsKCiAgICAgICAgLy8gU2V0dGluZyBzdHlsZS5maWx0ZXIgdG8gbnVsbCwgIiIgJiAiICIgc3RpbGwgbGVhdmUgImZpbHRlcjoiIGluIHRoZSBjc3NUZXh0CiAgICAgICAgLy8gaWYgImZpbHRlcjoiIGlzIHByZXNlbnQgYXQgYWxsLCBjbGVhclR5cGUgaXMgZGlzYWJsZWQsIHdlIHdhbnQgdG8gYXZvaWQgdGhpcwogICAgICAgIC8vIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSBpcyBJRSBPbmx5LCBidXQgc28gYXBwYXJlbnRseSBpcyB0aGlzIGNvZGUgcGF0aC4uLgogICAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSggImZpbHRlciIgKTsKCiAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gZmlsdGVyIHN0eWxlIGFwcGxpZWQgaW4gYSBjc3MgcnVsZSBvciB1bnNldCBpbmxpbmUgb3BhY2l0eSwgd2UgYXJlIGRvbmUKICAgICAgICBpZiAoIHZhbHVlID09PSAiIiB8fCBjdXJyZW50U3R5bGUgJiYgIWN1cnJlbnRTdHlsZS5maWx0ZXIgKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBvdGhlcndpc2UsIHNldCBuZXcgZmlsdGVyIHZhbHVlcwogICAgICBzdHlsZS5maWx0ZXIgPSByYWxwaGEudGVzdCggZmlsdGVyICkgPwogICAgICAgIGZpbHRlci5yZXBsYWNlKCByYWxwaGEsIG9wYWNpdHkgKSA6CiAgICAgICAgZmlsdGVyICsgIiAiICsgb3BhY2l0eTsKICAgIH0KICB9Owp9CgovLyBUaGVzZSBob29rcyBjYW5ub3QgYmUgYWRkZWQgdW50aWwgRE9NIHJlYWR5IGJlY2F1c2UgdGhlIHN1cHBvcnQgdGVzdAovLyBmb3IgaXQgaXMgbm90IHJ1biB1bnRpbCBhZnRlciBET00gcmVhZHkKalF1ZXJ5KGZ1bmN0aW9uKCkgewogIGlmICggIWpRdWVyeS5zdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQgKSB7CiAgICBqUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSB7CiAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkgewogICAgICAgIGlmICggY29tcHV0ZWQgKSB7CiAgICAgICAgICAvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHQKICAgICAgICAgIC8vIFdvcmsgYXJvdW5kIGJ5IHRlbXBvcmFyaWx5IHNldHRpbmcgZWxlbWVudCBkaXNwbGF5IHRvIGlubGluZS1ibG9jawogICAgICAgICAgcmV0dXJuIGpRdWVyeS5zd2FwKCBlbGVtLCB7ICJkaXNwbGF5IjogImlubGluZS1ibG9jayIgfSwKICAgICAgICAgICAgY3VyQ1NTLCBbIGVsZW0sICJtYXJnaW5SaWdodCIgXSApOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICB9CgogIC8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NAogIC8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQKICAvLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwgd2UganVzdCBjaGVjayBmb3IgaXQgaGVyZQogIGlmICggIWpRdWVyeS5zdXBwb3J0LnBpeGVsUG9zaXRpb24gJiYgalF1ZXJ5LmZuLnBvc2l0aW9uICkgewogICAgalF1ZXJ5LmVhY2goIFsgInRvcCIsICJsZWZ0IiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHsKICAgICAgalF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSB7CiAgICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7CiAgICAgICAgICBpZiAoIGNvbXB1dGVkICkgewogICAgICAgICAgICBjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApOwogICAgICAgICAgICAvLyBpZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXQKICAgICAgICAgICAgcmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID8KICAgICAgICAgICAgICBqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyAicHgiIDoKICAgICAgICAgICAgICBjb21wdXRlZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CiAgICB9KTsKICB9Cgp9KTsKCmlmICggalF1ZXJ5LmV4cHIgJiYgalF1ZXJ5LmV4cHIuZmlsdGVycyApIHsKICBqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkgewogICAgLy8gU3VwcG9ydDogT3BlcmEgPD0gMTIuMTIKICAgIC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHMKICAgIHJldHVybiBlbGVtLm9mZnNldFdpZHRoIDw9IDAgJiYgZWxlbS5vZmZzZXRIZWlnaHQgPD0gMCB8fAogICAgICAoIWpRdWVyeS5zdXBwb3J0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cyAmJiAoKGVsZW0uc3R5bGUgJiYgZWxlbS5zdHlsZS5kaXNwbGF5KSB8fCBqUXVlcnkuY3NzKCBlbGVtLCAiZGlzcGxheSIgKSkgPT09ICJub25lIik7CiAgfTsKCiAgalF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7CiAgICByZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuKCBlbGVtICk7CiAgfTsKfQoKLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllcwpqUXVlcnkuZWFjaCh7CiAgbWFyZ2luOiAiIiwKICBwYWRkaW5nOiAiIiwKICBib3JkZXI6ICJXaWR0aCIKfSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkgewogIGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7CiAgICBleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKICAgICAgdmFyIGkgPSAwLAogICAgICAgIGV4cGFuZGVkID0ge30sCgogICAgICAgIC8vIGFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZwogICAgICAgIHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIiA\/IHZhbHVlLnNwbGl0KCIgIikgOiBbIHZhbHVlIF07CgogICAgICBmb3IgKCA7IGkgPCA0OyBpKysgKSB7CiAgICAgICAgZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPQogICAgICAgICAgcGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdOwogICAgICB9CgogICAgICByZXR1cm4gZXhwYW5kZWQ7CiAgICB9CiAgfTsKCiAgaWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHsKICAgIGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7CiAgfQp9KTsKdmFyIHIyMCA9IC8lMjAvZywKICByYnJhY2tldCA9IC9cW1xdJC8sCiAgckNSTEYgPSAvXHI\/XG4vZywKICByc3VibWl0dGVyVHlwZXMgPSAvXig\/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksCiAgcnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pOwoKalF1ZXJ5LmZuLmV4dGVuZCh7CiAgc2VyaWFsaXplOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApOwogIH0sCiAgc2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7CiAgICAgIC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yICJlbGVtZW50cyIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzCiAgICAgIHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCAiZWxlbWVudHMiICk7CiAgICAgIHJldHVybiBlbGVtZW50cyA\/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzOwogICAgfSkKICAgIC5maWx0ZXIoZnVuY3Rpb24oKXsKICAgICAgdmFyIHR5cGUgPSB0aGlzLnR5cGU7CiAgICAgIC8vIFVzZSAuaXMoIjpkaXNhYmxlZCIpIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzCiAgICAgIHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCAiOmRpc2FibGVkIiApICYmCiAgICAgICAgcnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJgogICAgICAgICggdGhpcy5jaGVja2VkIHx8ICFtYW5pcHVsYXRpb25fcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7CiAgICB9KQogICAgLm1hcChmdW5jdGlvbiggaSwgZWxlbSApewogICAgICB2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7CgogICAgICByZXR1cm4gdmFsID09IG51bGwgPwogICAgICAgIG51bGwgOgogICAgICAgIGpRdWVyeS5pc0FycmF5KCB2YWwgKSA\/CiAgICAgICAgICBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKXsKICAgICAgICAgICAgcmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCAiXHJcbiIgKSB9OwogICAgICAgICAgfSkgOgogICAgICAgICAgeyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsICJcclxuIiApIH07CiAgICB9KS5nZXQoKTsKICB9Cn0pOwoKLy9TZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZgovL2tleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZwpqUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7CiAgdmFyIHByZWZpeCwKICAgIHMgPSBbXSwKICAgIGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewogICAgICAvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWUKICAgICAgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA\/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyAiIiA6IHZhbHVlICk7CiAgICAgIHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSApOwogICAgfTsKCiAgLy8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci4KICBpZiAoIHRyYWRpdGlvbmFsID09PSB1bmRlZmluZWQgKSB7CiAgICB0cmFkaXRpb25hbCA9IGpRdWVyeS5hamF4U2V0dGluZ3MgJiYgalF1ZXJ5LmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbDsKICB9CgogIC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuCiAgaWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHsKICAgIC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50cwogICAgalF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkgewogICAgICBhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApOwogICAgfSk7CgogIH0gZWxzZSB7CiAgICAvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSAib2xkIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXIKICAgIC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LgogICAgZm9yICggcHJlZml4IGluIGEgKSB7CiAgICAgIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7CiAgICB9CiAgfQoKICAvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uCiAgcmV0dXJuIHMuam9pbiggIiYiICkucmVwbGFjZSggcjIwLCAiKyIgKTsKfTsKCmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHsKICB2YXIgbmFtZTsKCiAgaWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7CiAgICAvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS4KICAgIGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkgewogICAgICBpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkgewogICAgICAgIC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci4KICAgICAgICBhZGQoIHByZWZpeCwgdiApOwoKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC4KICAgICAgICBidWlsZFBhcmFtcyggcHJlZml4ICsgIlsiICsgKCB0eXBlb2YgdiA9PT0gIm9iamVjdCIgPyBpIDogIiIgKSArICJdIiwgdiwgdHJhZGl0aW9uYWwsIGFkZCApOwogICAgICB9CiAgICB9KTsKCiAgfSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gIm9iamVjdCIgKSB7CiAgICAvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uCiAgICBmb3IgKCBuYW1lIGluIG9iaiApIHsKICAgICAgYnVpbGRQYXJhbXMoIHByZWZpeCArICJbIiArIG5hbWUgKyAiXSIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7CiAgICB9CgogIH0gZWxzZSB7CiAgICAvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uCiAgICBhZGQoIHByZWZpeCwgb2JqICk7CiAgfQp9CmpRdWVyeS5lYWNoKCAoImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrICIgKwogICJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSAiICsKICAiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudSIpLnNwbGl0KCIgIiksIGZ1bmN0aW9uKCBpLCBuYW1lICkgewoKICAvLyBIYW5kbGUgZXZlbnQgYmluZGluZwogIGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkgewogICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID8KICAgICAgdGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6CiAgICAgIHRoaXMudHJpZ2dlciggbmFtZSApOwogIH07Cn0pOwoKalF1ZXJ5LmZuLmhvdmVyID0gZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7CiAgcmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7Cn07CnZhcgogIC8vIERvY3VtZW50IGxvY2F0aW9uCiAgYWpheExvY1BhcnRzLAogIGFqYXhMb2NhdGlvbiwKICBhamF4X25vbmNlID0galF1ZXJ5Lm5vdygpLAoKICBhamF4X3JxdWVyeSA9IC9cPy8sCiAgcmhhc2ggPSAvIy4qJC8sCiAgcnRzID0gLyhbPyZdKV89W14mXSovLAogIHJoZWFkZXJzID0gL14oLio\/KTpbIFx0XSooW15cclxuXSopXHI\/JC9tZywgLy8gSUUgbGVhdmVzIGFuIFxyIGNoYXJhY3RlciBhdCBFT0wKICAvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb24KICBybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLAogIHJub0NvbnRlbnQgPSAvXig\/OkdFVHxIRUFEKSQvLAogIHJwcm90b2NvbCA9IC9eXC9cLy8sCiAgcnVybCA9IC9eKFtcdy4rLV0rOikoPzpcL1wvKFteXC8\/IzpdKikoPzo6KFxkKyl8KXwpLywKCiAgLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZAogIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQsCgogIC8qIFByZWZpbHRlcnMKICAgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKQogICAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6CiAgICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydAogICAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSkKICAgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlCiAgICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCAiKiIgY2FuIGJlIHVzZWQKICAgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvICIqIiBpZiBuZWVkZWQKICAgKi8KICBwcmVmaWx0ZXJzID0ge30sCgogIC8qIFRyYW5zcG9ydHMgYmluZGluZ3MKICAgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlCiAgICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCAiKiIgY2FuIGJlIHVzZWQKICAgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byAiKiIgaWYgbmVlZGVkCiAgICovCiAgdHJhbnNwb3J0cyA9IHt9LAoKICAvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb24KICBhbGxUeXBlcyA9ICIqLyIuY29uY2F0KCIqIik7CgovLyAjODEzOCwgSUUgbWF5IHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuIGFjY2Vzc2luZwovLyBhIGZpZWxkIGZyb20gd2luZG93LmxvY2F0aW9uIGlmIGRvY3VtZW50LmRvbWFpbiBoYXMgYmVlbiBzZXQKdHJ5IHsKICBhamF4TG9jYXRpb24gPSBsb2NhdGlvbi5ocmVmOwp9IGNhdGNoKCBlICkgewogIC8vIFVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUgb2YgYW4gQSBlbGVtZW50CiAgLy8gc2luY2UgSUUgd2lsbCBtb2RpZnkgaXQgZ2l2ZW4gZG9jdW1lbnQubG9jYXRpb24KICBhamF4TG9jYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiYSIgKTsKICBhamF4TG9jYXRpb24uaHJlZiA9ICIiOwogIGFqYXhMb2NhdGlvbiA9IGFqYXhMb2NhdGlvbi5ocmVmOwp9CgovLyBTZWdtZW50IGxvY2F0aW9uIGludG8gcGFydHMKYWpheExvY1BhcnRzID0gcnVybC5leGVjKCBhamF4TG9jYXRpb24udG9Mb3dlckNhc2UoKSApIHx8IFtdOwoKLy8gQmFzZSAiY29uc3RydWN0b3IiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnQKZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7CgogIC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gIioiCiAgcmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7CgogICAgaWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSAic3RyaW5nIiApIHsKICAgICAgZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjsKICAgICAgZGF0YVR5cGVFeHByZXNzaW9uID0gIioiOwogICAgfQoKICAgIHZhciBkYXRhVHlwZSwKICAgICAgaSA9IDAsCiAgICAgIGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBjb3JlX3Jub3R3aGl0ZSApIHx8IFtdOwoKICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHsKICAgICAgLy8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvbgogICAgICB3aGlsZSAoIChkYXRhVHlwZSA9IGRhdGFUeXBlc1tpKytdKSApIHsKICAgICAgICAvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZAogICAgICAgIGlmICggZGF0YVR5cGVbMF0gPT09ICIrIiApIHsKICAgICAgICAgIGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCAiKiI7CiAgICAgICAgICAoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS51bnNoaWZ0KCBmdW5jICk7CgogICAgICAgIC8vIE90aGVyd2lzZSBhcHBlbmQKICAgICAgICB9IGVsc2UgewogICAgICAgICAgKHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkucHVzaCggZnVuYyApOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH07Cn0KCi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0cwpmdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkgewoKICB2YXIgaW5zcGVjdGVkID0ge30sCiAgICBzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTsKCiAgZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7CiAgICB2YXIgc2VsZWN0ZWQ7CiAgICBpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlOwogICAgalF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHsKICAgICAgdmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTsKICAgICAgaWYoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSAic3RyaW5nIiAmJiAhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7CiAgICAgICAgb3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApOwogICAgICAgIGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7CiAgICAgICAgcmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBzZWxlY3RlZDsKICB9CgogIHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgIioiIF0gJiYgaW5zcGVjdCggIioiICk7Cn0KCi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9ucwovLyB0aGF0IHRha2VzICJmbGF0IiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZCkKLy8gRml4ZXMgIzk4ODcKZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7CiAgdmFyIGRlZXAsIGtleSwKICAgIGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTsKCiAgZm9yICgga2V5IGluIHNyYyApIHsKICAgIGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkgewogICAgICAoIGZsYXRPcHRpb25zWyBrZXkgXSA\/IHRhcmdldCA6ICggZGVlcCB8fCAoZGVlcCA9IHt9KSApIClbIGtleSBdID0gc3JjWyBrZXkgXTsKICAgIH0KICB9CiAgaWYgKCBkZWVwICkgewogICAgalF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpqUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7CiAgaWYgKCB0eXBlb2YgdXJsICE9PSAic3RyaW5nIiAmJiBfbG9hZCApIHsKICAgIHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CiAgfQoKICB2YXIgc2VsZWN0b3IsIHJlc3BvbnNlLCB0eXBlLAogICAgc2VsZiA9IHRoaXMsCiAgICBvZmYgPSB1cmwuaW5kZXhPZigiICIpOwoKICBpZiAoIG9mZiA+PSAwICkgewogICAgc2VsZWN0b3IgPSB1cmwuc2xpY2UoIG9mZiwgdXJsLmxlbmd0aCApOwogICAgdXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTsKICB9CgogIC8vIElmIGl0J3MgYSBmdW5jdGlvbgogIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkgewoKICAgIC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrCiAgICBjYWxsYmFjayA9IHBhcmFtczsKICAgIHBhcmFtcyA9IHVuZGVmaW5lZDsKCiAgLy8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZwogIH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSAib2JqZWN0IiApIHsKICAgIHR5cGUgPSAiUE9TVCI7CiAgfQoKICAvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdAogIGlmICggc2VsZi5sZW5ndGggPiAwICkgewogICAgalF1ZXJ5LmFqYXgoewogICAgICB1cmw6IHVybCwKCiAgICAgIC8vIGlmICJ0eXBlIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gIkdFVCIgbWV0aG9kIHdpbGwgYmUgdXNlZAogICAgICB0eXBlOiB0eXBlLAogICAgICBkYXRhVHlwZTogImh0bWwiLAogICAgICBkYXRhOiBwYXJhbXMKICAgIH0pLmRvbmUoZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHsKCiAgICAgIC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFjawogICAgICByZXNwb25zZSA9IGFyZ3VtZW50czsKCiAgICAgIHNlbGYuaHRtbCggc2VsZWN0b3IgPwoKICAgICAgICAvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXYKICAgICAgICAvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnMKICAgICAgICBqUXVlcnkoIjxkaXY+IikuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOgoKICAgICAgICAvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdAogICAgICAgIHJlc3BvbnNlVGV4dCApOwoKICAgIH0pLmNvbXBsZXRlKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHsKICAgICAgc2VsZi5lYWNoKCBjYWxsYmFjaywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApOwogICAgfSk7CiAgfQoKICByZXR1cm4gdGhpczsKfTsKCi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzCmpRdWVyeS5lYWNoKCBbICJhamF4U3RhcnQiLCAiYWpheFN0b3AiLCAiYWpheENvbXBsZXRlIiwgImFqYXhFcnJvciIsICJhamF4U3VjY2VzcyIsICJhamF4U2VuZCIgXSwgZnVuY3Rpb24oIGksIHR5cGUgKXsKICBqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApewogICAgcmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7CiAgfTsKfSk7CgpqUXVlcnkuZWFjaCggWyAiZ2V0IiwgInBvc3QiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7CiAgalF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkgewogICAgLy8gc2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWQKICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHsKICAgICAgdHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7CiAgICAgIGNhbGxiYWNrID0gZGF0YTsKICAgICAgZGF0YSA9IHVuZGVmaW5lZDsKICAgIH0KCiAgICByZXR1cm4galF1ZXJ5LmFqYXgoewogICAgICB1cmw6IHVybCwKICAgICAgdHlwZTogbWV0aG9kLAogICAgICBkYXRhVHlwZTogdHlwZSwKICAgICAgZGF0YTogZGF0YSwKICAgICAgc3VjY2VzczogY2FsbGJhY2sKICAgIH0pOwogIH07Cn0pOwoKalF1ZXJ5LmV4dGVuZCh7CgogIC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllcwogIGFjdGl2ZTogMCwKCiAgLy8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdAogIGxhc3RNb2RpZmllZDoge30sCiAgZXRhZzoge30sCgogIGFqYXhTZXR0aW5nczogewogICAgdXJsOiBhamF4TG9jYXRpb24sCiAgICB0eXBlOiAiR0VUIiwKICAgIGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGFqYXhMb2NQYXJ0c1sgMSBdICksCiAgICBnbG9iYWw6IHRydWUsCiAgICBwcm9jZXNzRGF0YTogdHJ1ZSwKICAgIGFzeW5jOiB0cnVlLAogICAgY29udGVudFR5cGU6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAogICAgLyoKICAgIHRpbWVvdXQ6IDAsCiAgICBkYXRhOiBudWxsLAogICAgZGF0YVR5cGU6IG51bGwsCiAgICB1c2VybmFtZTogbnVsbCwKICAgIHBhc3N3b3JkOiBudWxsLAogICAgY2FjaGU6IG51bGwsCiAgICB0aHJvd3M6IGZhbHNlLAogICAgdHJhZGl0aW9uYWw6IGZhbHNlLAogICAgaGVhZGVyczoge30sCiAgICAqLwoKICAgIGFjY2VwdHM6IHsKICAgICAgIioiOiBhbGxUeXBlcywKICAgICAgdGV4dDogInRleHQvcGxhaW4iLAogICAgICBodG1sOiAidGV4dC9odG1sIiwKICAgICAgeG1sOiAiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCIsCiAgICAgIGpzb246ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQiCiAgICB9LAoKICAgIGNvbnRlbnRzOiB7CiAgICAgIHhtbDogL3htbC8sCiAgICAgIGh0bWw6IC9odG1sLywKICAgICAganNvbjogL2pzb24vCiAgICB9LAoKICAgIHJlc3BvbnNlRmllbGRzOiB7CiAgICAgIHhtbDogInJlc3BvbnNlWE1MIiwKICAgICAgdGV4dDogInJlc3BvbnNlVGV4dCIKICAgIH0sCgogICAgLy8gRGF0YSBjb252ZXJ0ZXJzCiAgICAvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgIioiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZQogICAgY29udmVydGVyczogewoKICAgICAgLy8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0CiAgICAgICIqIHRleHQiOiB3aW5kb3cuU3RyaW5nLAoKICAgICAgLy8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pCiAgICAgICJ0ZXh0IGh0bWwiOiB0cnVlLAoKICAgICAgLy8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvbgogICAgICAidGV4dCBqc29uIjogalF1ZXJ5LnBhcnNlSlNPTiwKCiAgICAgIC8vIFBhcnNlIHRleHQgYXMgeG1sCiAgICAgICJ0ZXh0IHhtbCI6IGpRdWVyeS5wYXJzZVhNTAogICAgfSwKCiAgICAvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOgogICAgLy8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZgogICAgLy8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmUKICAgIC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKQogICAgZmxhdE9wdGlvbnM6IHsKICAgICAgdXJsOiB0cnVlLAogICAgICBjb250ZXh0OiB0cnVlCiAgICB9CiAgfSwKCiAgLy8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXQKICAvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuCiAgLy8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy4KICBhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkgewogICAgcmV0dXJuIHNldHRpbmdzID8KCiAgICAgIC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0CiAgICAgIGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDoKCiAgICAgIC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3MKICAgICAgYWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7CiAgfSwKCiAgYWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksCiAgYWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksCgogIC8vIE1haW4gbWV0aG9kCiAgYWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHsKCiAgICAvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZQogICAgaWYgKCB0eXBlb2YgdXJsID09PSAib2JqZWN0IiApIHsKICAgICAgb3B0aW9ucyA9IHVybDsKICAgICAgdXJsID0gdW5kZWZpbmVkOwogICAgfQoKICAgIC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0CiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCiAgICB2YXIgLy8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzCiAgICAgIHBhcnRzLAogICAgICAvLyBMb29wIHZhcmlhYmxlCiAgICAgIGksCiAgICAgIC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW0KICAgICAgY2FjaGVVUkwsCiAgICAgIC8vIFJlc3BvbnNlIGhlYWRlcnMgYXMgc3RyaW5nCiAgICAgIHJlc3BvbnNlSGVhZGVyc1N0cmluZywKICAgICAgLy8gdGltZW91dCBoYW5kbGUKICAgICAgdGltZW91dFRpbWVyLAoKICAgICAgLy8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkCiAgICAgIGZpcmVHbG9iYWxzLAoKICAgICAgdHJhbnNwb3J0LAogICAgICAvLyBSZXNwb25zZSBoZWFkZXJzCiAgICAgIHJlc3BvbnNlSGVhZGVycywKICAgICAgLy8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdAogICAgICBzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSwKICAgICAgLy8gQ2FsbGJhY2tzIGNvbnRleHQKICAgICAgY2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsCiAgICAgIC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb24KICAgICAgZ2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmICggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA\/CiAgICAgICAgalF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6CiAgICAgICAgalF1ZXJ5LmV2ZW50LAogICAgICAvLyBEZWZlcnJlZHMKICAgICAgZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSwKICAgICAgY29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksCiAgICAgIC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzCiAgICAgIHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sCiAgICAgIC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpCiAgICAgIHJlcXVlc3RIZWFkZXJzID0ge30sCiAgICAgIHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSwKICAgICAgLy8gVGhlIGpxWEhSIHN0YXRlCiAgICAgIHN0YXRlID0gMCwKICAgICAgLy8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlCiAgICAgIHN0ckFib3J0ID0gImNhbmNlbGVkIiwKICAgICAgLy8gRmFrZSB4aHIKICAgICAganFYSFIgPSB7CiAgICAgICAgcmVhZHlTdGF0ZTogMCwKCiAgICAgICAgLy8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZAogICAgICAgIGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkgewogICAgICAgICAgdmFyIG1hdGNoOwogICAgICAgICAgaWYgKCBzdGF0ZSA9PT0gMiApIHsKICAgICAgICAgICAgaWYgKCAhcmVzcG9uc2VIZWFkZXJzICkgewogICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVycyA9IHt9OwogICAgICAgICAgICAgIHdoaWxlICggKG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkpICkgewogICAgICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoOwogICAgICAgIH0sCgogICAgICAgIC8vIFJhdyBzdHJpbmcKICAgICAgICBnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDsKICAgICAgICB9LAoKICAgICAgICAvLyBDYWNoZXMgdGhlIGhlYWRlcgogICAgICAgIHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHsKICAgICAgICAgIHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgIGlmICggIXN0YXRlICkgewogICAgICAgICAgICBuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gfHwgbmFtZTsKICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgLy8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXIKICAgICAgICBvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHsKICAgICAgICAgIGlmICggIXN0YXRlICkgewogICAgICAgICAgICBzLm1pbWVUeXBlID0gdHlwZTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzCiAgICAgICAgc3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHsKICAgICAgICAgIHZhciBjb2RlOwogICAgICAgICAgaWYgKCBtYXAgKSB7CiAgICAgICAgICAgIGlmICggc3RhdGUgPCAyICkgewogICAgICAgICAgICAgIGZvciAoIGNvZGUgaW4gbWFwICkgewogICAgICAgICAgICAgICAgLy8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lcwogICAgICAgICAgICAgICAgc3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrcwogICAgICAgICAgICAgIGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICAvLyBDYW5jZWwgdGhlIHJlcXVlc3QKICAgICAgICBhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7CiAgICAgICAgICB2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDsKICAgICAgICAgIGlmICggdHJhbnNwb3J0ICkgewogICAgICAgICAgICB0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApOwogICAgICAgICAgfQogICAgICAgICAgZG9uZSggMCwgZmluYWxUZXh0ICk7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CiAgICAgIH07CgogICAgLy8gQXR0YWNoIGRlZmVycmVkcwogICAgZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkOwogICAganFYSFIuc3VjY2VzcyA9IGpxWEhSLmRvbmU7CiAgICBqcVhIUi5lcnJvciA9IGpxWEhSLmZhaWw7CgogICAgLy8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pCiAgICAvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkICgjNTg2NjogSUU3IGlzc3VlIHdpdGggcHJvdG9jb2wtbGVzcyB1cmxzKQogICAgLy8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSkKICAgIC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZQogICAgcy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGFqYXhMb2NhdGlvbiApICsgIiIgKS5yZXBsYWNlKCByaGFzaCwgIiIgKS5yZXBsYWNlKCBycHJvdG9jb2wsIGFqYXhMb2NQYXJ0c1sgMSBdICsgIi8vIiApOwoKICAgIC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNAogICAgcy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTsKCiAgICAvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0CiAgICBzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8ICIqIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIGNvcmVfcm5vdHdoaXRlICkgfHwgWyIiXTsKCiAgICAvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gd2UgaGF2ZSBhIHByb3RvY29sOmhvc3Q6cG9ydCBtaXNtYXRjaAogICAgaWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7CiAgICAgIHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7CiAgICAgIHMuY3Jvc3NEb21haW4gPSAhISggcGFydHMgJiYKICAgICAgICAoIHBhcnRzWyAxIF0gIT09IGFqYXhMb2NQYXJ0c1sgMSBdIHx8IHBhcnRzWyAyIF0gIT09IGFqYXhMb2NQYXJ0c1sgMiBdIHx8CiAgICAgICAgICAoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSAiaHR0cDoiID8gODAgOiA0NDMgKSApICE9CiAgICAgICAgICAgICggYWpheExvY1BhcnRzWyAzIF0gfHwgKCBhamF4TG9jUGFydHNbIDEgXSA9PT0gImh0dHA6IiA\/IDgwIDogNDQzICkgKSApCiAgICAgICk7CiAgICB9CgogICAgLy8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nCiAgICBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09ICJzdHJpbmciICkgewogICAgICBzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApOwogICAgfQoKICAgIC8vIEFwcGx5IHByZWZpbHRlcnMKICAgIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApOwoKICAgIC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlCiAgICBpZiAoIHN0YXRlID09PSAyICkgewogICAgICByZXR1cm4ganFYSFI7CiAgICB9CgogICAgLy8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG8KICAgIGZpcmVHbG9iYWxzID0gcy5nbG9iYWw7CgogICAgLy8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0cwogICAgaWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7CiAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKCJhamF4U3RhcnQiKTsKICAgIH0KCiAgICAvLyBVcHBlcmNhc2UgdGhlIHR5cGUKICAgIHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpOwoKICAgIC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50CiAgICBzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTsKCiAgICAvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2UKICAgIC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvbgogICAgY2FjaGVVUkwgPSBzLnVybDsKCiAgICAvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudAogICAgaWYgKCAhcy5oYXNDb250ZW50ICkgewoKICAgICAgLy8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybAogICAgICBpZiAoIHMuZGF0YSApIHsKICAgICAgICBjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBhamF4X3JxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gIiYiIDogIj8iICkgKyBzLmRhdGEgKTsKICAgICAgICAvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5CiAgICAgICAgZGVsZXRlIHMuZGF0YTsKICAgICAgfQoKICAgICAgLy8gQWRkIGFudGktY2FjaGUgaW4gdXJsIGlmIG5lZWRlZAogICAgICBpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkgewogICAgICAgIHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgPwoKICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSAnXycgcGFyYW1ldGVyLCBzZXQgaXRzIHZhbHVlCiAgICAgICAgICBjYWNoZVVSTC5yZXBsYWNlKCBydHMsICIkMV89IiArIGFqYXhfbm9uY2UrKyApIDoKCiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kCiAgICAgICAgICBjYWNoZVVSTCArICggYWpheF9ycXVlcnkudGVzdCggY2FjaGVVUkwgKSA\/ICImIiA6ICI\/IiApICsgIl89IiArIGFqYXhfbm9uY2UrKzsKICAgICAgfQogICAgfQoKICAgIC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuCiAgICBpZiAoIHMuaWZNb2RpZmllZCApIHsKICAgICAgaWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkgewogICAgICAgIGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoICJJZi1Nb2RpZmllZC1TaW5jZSIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTsKICAgICAgfQogICAgICBpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkgewogICAgICAgIGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoICJJZi1Ob25lLU1hdGNoIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTsKICAgICAgfQogICAgfQoKICAgIC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudAogICAgaWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7CiAgICAgIGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoICJDb250ZW50LVR5cGUiLCBzLmNvbnRlbnRUeXBlICk7CiAgICB9CgogICAgLy8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZQogICAganFYSFIuc2V0UmVxdWVzdEhlYWRlcigKICAgICAgIkFjY2VwdCIsCiAgICAgIHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdID8KICAgICAgICBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gKyAoIHMuZGF0YVR5cGVzWyAwIF0gIT09ICIqIiA\\/KD89JnwkKXxcP1w\/LzsKCi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3MKalF1ZXJ5LmFqYXhTZXR1cCh7CiAganNvbnA6ICJjYWxsYmFjayIsCiAganNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7CiAgICB2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArICJfIiArICggYWpheF9ub25jZSsrICkgKTsKICAgIHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlOwogICAgcmV0dXJuIGNhbGxiYWNrOwogIH0KfSk7CgovLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHMKalF1ZXJ5LmFqYXhQcmVmaWx0ZXIoICJqc29uIGpzb25wIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkgewoKICB2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsCiAgICBqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgPwogICAgICAidXJsIiA6CiAgICAgIHR5cGVvZiBzLmRhdGEgPT09ICJzdHJpbmciICYmICEoIHMuY29udGVudFR5cGUgfHwgIiIgKS5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKSAmJiByanNvbnAudGVzdCggcy5kYXRhICkgJiYgImRhdGEiCiAgICApOwoKICAvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgImpzb25wIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldAogIGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gImpzb25wIiApIHsKCiAgICAvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0CiAgICBjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgPwogICAgICBzLmpzb25wQ2FsbGJhY2soKSA6CiAgICAgIHMuanNvbnBDYWxsYmFjazsKCiAgICAvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhCiAgICBpZiAoIGpzb25Qcm9wICkgewogICAgICBzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsICIkMSIgKyBjYWxsYmFja05hbWUgKTsKICAgIH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkgewogICAgICBzLnVybCArPSAoIGFqYXhfcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyAiJiIgOiAiPyIgKSArIHMuanNvbnAgKyAiPSIgKyBjYWxsYmFja05hbWU7CiAgICB9CgogICAgLy8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvbgogICAgcy5jb252ZXJ0ZXJzWyJzY3JpcHQganNvbiJdID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkgewogICAgICAgIGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgIiB3YXMgbm90IGNhbGxlZCIgKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTsKICAgIH07CgogICAgLy8gZm9yY2UganNvbiBkYXRhVHlwZQogICAgcy5kYXRhVHlwZXNbIDAgXSA9ICJqc29uIjsKCiAgICAvLyBJbnN0YWxsIGNhbGxiYWNrCiAgICBvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07CiAgICB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7CiAgICAgIHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzOwogICAgfTsKCiAgICAvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycykKICAgIGpxWEhSLmFsd2F5cyhmdW5jdGlvbigpIHsKICAgICAgLy8gUmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZQogICAgICB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47CgogICAgICAvLyBTYXZlIGJhY2sgYXMgZnJlZQogICAgICBpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkgewogICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZAogICAgICAgIHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjazsKCiAgICAgICAgLy8gc2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZQogICAgICAgIG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTsKICAgICAgfQoKICAgICAgLy8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlCiAgICAgIGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7CiAgICAgICAgb3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTsKICAgICAgfQoKICAgICAgcmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDsKICAgIH0pOwoKICAgIC8vIERlbGVnYXRlIHRvIHNjcmlwdAogICAgcmV0dXJuICJzY3JpcHQiOwogIH0KfSk7CnZhciB4aHJDYWxsYmFja3MsIHhoclN1cHBvcnRlZCwKICB4aHJJZCA9IDAsCiAgLy8gIzUyODA6IEludGVybmV0IEV4cGxvcmVyIHdpbGwga2VlcCBjb25uZWN0aW9ucyBhbGl2ZSBpZiB3ZSBkb24ndCBhYm9ydCBvbiB1bmxvYWQKICB4aHJPblVubG9hZEFib3J0ID0gd2luZG93LkFjdGl2ZVhPYmplY3QgJiYgZnVuY3Rpb24oKSB7CiAgICAvLyBBYm9ydCBhbGwgcGVuZGluZyByZXF1ZXN0cwogICAgdmFyIGtleTsKICAgIGZvciAoIGtleSBpbiB4aHJDYWxsYmFja3MgKSB7CiAgICAgIHhockNhbGxiYWNrc1sga2V5IF0oIHVuZGVmaW5lZCwgdHJ1ZSApOwogICAgfQogIH07CgovLyBGdW5jdGlvbnMgdG8gY3JlYXRlIHhocnMKZnVuY3Rpb24gY3JlYXRlU3RhbmRhcmRYSFIoKSB7CiAgdHJ5IHsKICAgIHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7CiAgfSBjYXRjaCggZSApIHt9Cn0KCmZ1bmN0aW9uIGNyZWF0ZUFjdGl2ZVhIUigpIHsKICB0cnkgewogICAgcmV0dXJuIG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICB9IGNhdGNoKCBlICkge30KfQoKLy8gQ3JlYXRlIHRoZSByZXF1ZXN0IG9iamVjdAovLyAoVGhpcyBpcyBzdGlsbCBhdHRhY2hlZCB0byBhamF4U2V0dGluZ3MgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkpCmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gd2luZG93LkFjdGl2ZVhPYmplY3QgPwogIC8qIE1pY3Jvc29mdCBmYWlsZWQgdG8gcHJvcGVybHkKICAgKiBpbXBsZW1lbnQgdGhlIFhNTEh0dHBSZXF1ZXN0IGluIElFNyAoY2FuJ3QgcmVxdWVzdCBsb2NhbCBmaWxlcyksCiAgICogc28gd2UgdXNlIHRoZSBBY3RpdmVYT2JqZWN0IHdoZW4gaXQgaXMgYXZhaWxhYmxlCiAgICogQWRkaXRpb25hbGx5IFhNTEh0dHBSZXF1ZXN0IGNhbiBiZSBkaXNhYmxlZCBpbiBJRTcvSUU4IHNvCiAgICogd2UgbmVlZCBhIGZhbGxiYWNrLgogICAqLwogIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuICF0aGlzLmlzTG9jYWwgJiYgY3JlYXRlU3RhbmRhcmRYSFIoKSB8fCBjcmVhdGVBY3RpdmVYSFIoKTsKICB9IDoKICAvLyBGb3IgYWxsIG90aGVyIGJyb3dzZXJzLCB1c2UgdGhlIHN0YW5kYXJkIFhNTEh0dHBSZXF1ZXN0IG9iamVjdAogIGNyZWF0ZVN0YW5kYXJkWEhSOwoKLy8gRGV0ZXJtaW5lIHN1cHBvcnQgcHJvcGVydGllcwp4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpOwpqUXVlcnkuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCAid2l0aENyZWRlbnRpYWxzIiBpbiB4aHJTdXBwb3J0ZWQgKTsKeGhyU3VwcG9ydGVkID0galF1ZXJ5LnN1cHBvcnQuYWpheCA9ICEheGhyU3VwcG9ydGVkOwoKLy8gQ3JlYXRlIHRyYW5zcG9ydCBpZiB0aGUgYnJvd3NlciBjYW4gcHJvdmlkZSBhbiB4aHIKaWYgKCB4aHJTdXBwb3J0ZWQgKSB7CgogIGpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKCBzICkgewogICAgLy8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdAogICAgaWYgKCAhcy5jcm9zc0RvbWFpbiB8fCBqUXVlcnkuc3VwcG9ydC5jb3JzICkgewoKICAgICAgdmFyIGNhbGxiYWNrOwoKICAgICAgcmV0dXJuIHsKICAgICAgICBzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7CgogICAgICAgICAgLy8gR2V0IGEgbmV3IHhocgogICAgICAgICAgdmFyIGhhbmRsZSwgaSwKICAgICAgICAgICAgeGhyID0gcy54aHIoKTsKCiAgICAgICAgICAvLyBPcGVuIHRoZSBzb2NrZXQKICAgICAgICAgIC8vIFBhc3NpbmcgbnVsbCB1c2VybmFtZSwgZ2VuZXJhdGVzIGEgbG9naW4gcG9wdXAgb24gT3BlcmEgKCMyODY1KQogICAgICAgICAgaWYgKCBzLnVzZXJuYW1lICkgewogICAgICAgICAgICB4aHIub3Blbiggcy50eXBlLCBzLnVybCwgcy5hc3luYywgcy51c2VybmFtZSwgcy5wYXNzd29yZCApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgeGhyLm9wZW4oIHMudHlwZSwgcy51cmwsIHMuYXN5bmMgKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkCiAgICAgICAgICBpZiAoIHMueGhyRmllbGRzICkgewogICAgICAgICAgICBmb3IgKCBpIGluIHMueGhyRmllbGRzICkgewogICAgICAgICAgICAgIHhoclsgaSBdID0gcy54aHJGaWVsZHNbIGkgXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWQKICAgICAgICAgIGlmICggcy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHsKICAgICAgICAgICAgeGhyLm92ZXJyaWRlTWltZVR5cGUoIHMubWltZVR5cGUgKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlcgogICAgICAgICAgLy8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZQogICAgICAgICAgLy8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS4KICAgICAgICAgIC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKQogICAgICAgICAgLy8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuCiAgICAgICAgICBpZiAoICFzLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyJYLVJlcXVlc3RlZC1XaXRoIl0gKSB7CiAgICAgICAgICAgIGhlYWRlcnNbIlgtUmVxdWVzdGVkLVdpdGgiXSA9ICJYTUxIdHRwUmVxdWVzdCI7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gTmVlZCBhbiBleHRyYSB0cnkvY2F0Y2ggZm9yIGNyb3NzIGRvbWFpbiByZXF1ZXN0cyBpbiBGaXJlZm94IDMKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAoIGkgaW4gaGVhZGVycyApIHsKICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2goIGVyciApIHt9CgogICAgICAgICAgLy8gRG8gc2VuZCB0aGUgcmVxdWVzdAogICAgICAgICAgLy8gVGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uIHdoaWNoIGlzIGFjdHVhbGx5CiAgICAgICAgICAvLyBoYW5kbGVkIGluIGpRdWVyeS5hamF4IChzbyBubyB0cnkvY2F0Y2ggaGVyZSkKICAgICAgICAgIHhoci5zZW5kKCAoIHMuaGFzQ29udGVudCAmJiBzLmRhdGEgKSB8fCBudWxsICk7CgogICAgICAgICAgLy8gTGlzdGVuZXIKICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oIF8sIGlzQWJvcnQgKSB7CiAgICAgICAgICAgIHZhciBzdGF0dXMsIHJlc3BvbnNlSGVhZGVycywgc3RhdHVzVGV4dCwgcmVzcG9uc2VzOwoKICAgICAgICAgICAgLy8gRmlyZWZveCB0aHJvd3MgZXhjZXB0aW9ucyB3aGVuIGFjY2Vzc2luZyBwcm9wZXJ0aWVzCiAgICAgICAgICAgIC8vIG9mIGFuIHhociB3aGVuIGEgbmV0d29yayBlcnJvciBvY2N1cnJlZAogICAgICAgICAgICAvLyBodHRwOi8vaGVscGZ1bC5rbm9icy1kaWFscy5jb20vaW5kZXgucGhwL0NvbXBvbmVudF9yZXR1cm5lZF9mYWlsdXJlX2NvZGU6XzB4ODAwNDAxMTFfKE5TX0VSUk9SX05PVF9BVkFJTEFCTEUpCiAgICAgICAgICAgIHRyeSB7CgogICAgICAgICAgICAgIC8vIFdhcyBuZXZlciBjYWxsZWQgYW5kIGlzIGFib3J0ZWQgb3IgY29tcGxldGUKICAgICAgICAgICAgICBpZiAoIGNhbGxiYWNrICYmICggaXNBYm9ydCB8fCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApICkgewoKICAgICAgICAgICAgICAgIC8vIE9ubHkgY2FsbGVkIG9uY2UKICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gdW5kZWZpbmVkOwoKICAgICAgICAgICAgICAgIC8vIERvIG5vdCBrZWVwIGFzIGFjdGl2ZSBhbnltb3JlCiAgICAgICAgICAgICAgICBpZiAoIGhhbmRsZSApIHsKICAgICAgICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGpRdWVyeS5ub29wOwogICAgICAgICAgICAgICAgICBpZiAoIHhock9uVW5sb2FkQWJvcnQgKSB7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHhockNhbGxiYWNrc1sgaGFuZGxlIF07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIGFuIGFib3J0CiAgICAgICAgICAgICAgICBpZiAoIGlzQWJvcnQgKSB7CiAgICAgICAgICAgICAgICAgIC8vIEFib3J0IGl0IG1hbnVhbGx5IGlmIG5lZWRlZAogICAgICAgICAgICAgICAgICBpZiAoIHhoci5yZWFkeVN0YXRlICE9PSA0ICkgewogICAgICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICByZXNwb25zZXMgPSB7fTsKICAgICAgICAgICAgICAgICAgc3RhdHVzID0geGhyLnN0YXR1czsKICAgICAgICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzID0geGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpOwoKICAgICAgICAgICAgICAgICAgLy8gV2hlbiByZXF1ZXN0aW5nIGJpbmFyeSBkYXRhLCBJRTYtOSB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbgogICAgICAgICAgICAgICAgICAvLyBvbiBhbnkgYXR0ZW1wdCB0byBhY2Nlc3MgcmVzcG9uc2VUZXh0ICgjMTE0MjYpCiAgICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIHhoci5yZXNwb25zZVRleHQgPT09ICJzdHJpbmciICkgewogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlcy50ZXh0ID0geGhyLnJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCB0aHJvd3MgYW4gZXhjZXB0aW9uIHdoZW4gYWNjZXNzaW5nCiAgICAgICAgICAgICAgICAgIC8vIHN0YXR1c1RleHQgZm9yIGZhdWx0eSBjcm9zcy1kb21haW4gcmVxdWVzdHMKICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0geGhyLnN0YXR1c1RleHQ7CiAgICAgICAgICAgICAgICAgIH0gY2F0Y2goIGUgKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gV2Ugbm9ybWFsaXplIHdpdGggV2Via2l0IGdpdmluZyBhbiBlbXB0eSBzdGF0dXNUZXh0CiAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9ICIiOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgc3RhdHVzIGZvciBub24gc3RhbmRhcmQgYmVoYXZpb3JzCgogICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcmVxdWVzdCBpcyBsb2NhbCBhbmQgd2UgaGF2ZSBkYXRhOiBhc3N1bWUgYSBzdWNjZXNzCiAgICAgICAgICAgICAgICAgIC8vIChzdWNjZXNzIHdpdGggbm8gZGF0YSB3b24ndCBnZXQgbm90aWZpZWQsIHRoYXQncyB0aGUgYmVzdCB3ZQogICAgICAgICAgICAgICAgICAvLyBjYW4gZG8gZ2l2ZW4gY3VycmVudCBpbXBsZW1lbnRhdGlvbnMpCiAgICAgICAgICAgICAgICAgIGlmICggIXN0YXR1cyAmJiBzLmlzTG9jYWwgJiYgIXMuY3Jvc3NEb21haW4gKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcmVzcG9uc2VzLnRleHQgPyAyMDAgOiA0MDQ7CiAgICAgICAgICAgICAgICAgIC8vIElFIC0gIzE0NTA6IHNvbWV0aW1lcyByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMTIyMyApIHsKICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSAyMDQ7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2goIGZpcmVmb3hBY2Nlc3NFeGNlcHRpb24gKSB7CiAgICAgICAgICAgICAgaWYgKCAhaXNBYm9ydCApIHsKICAgICAgICAgICAgICAgIGNvbXBsZXRlKCAtMSwgZmlyZWZveEFjY2Vzc0V4Y2VwdGlvbiApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQ2FsbCBjb21wbGV0ZSBpZiBuZWVkZWQKICAgICAgICAgICAgaWYgKCByZXNwb25zZXMgKSB7CiAgICAgICAgICAgICAgY29tcGxldGUoIHN0YXR1cywgc3RhdHVzVGV4dCwgcmVzcG9uc2VzLCByZXNwb25zZUhlYWRlcnMgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKCiAgICAgICAgICBpZiAoICFzLmFzeW5jICkgewogICAgICAgICAgICAvLyBpZiB3ZSdyZSBpbiBzeW5jIG1vZGUgd2UgZmlyZSB0aGUgY2FsbGJhY2sKICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgIH0gZWxzZSBpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkgewogICAgICAgICAgICAvLyAoSUU2ICYgSUU3KSBpZiBpdCdzIGluIGNhY2hlIGFuZCBoYXMgYmVlbgogICAgICAgICAgICAvLyByZXRyaWV2ZWQgZGlyZWN0bHkgd2UgbmVlZCB0byBmaXJlIHRoZSBjYWxsYmFjawogICAgICAgICAgICBzZXRUaW1lb3V0KCBjYWxsYmFjayApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaGFuZGxlID0gKyt4aHJJZDsKICAgICAgICAgICAgaWYgKCB4aHJPblVubG9hZEFib3J0ICkgewogICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgYWN0aXZlIHhocnMgY2FsbGJhY2tzIGxpc3QgaWYgbmVlZGVkCiAgICAgICAgICAgICAgLy8gYW5kIGF0dGFjaCB0aGUgdW5sb2FkIGhhbmRsZXIKICAgICAgICAgICAgICBpZiAoICF4aHJDYWxsYmFja3MgKSB7CiAgICAgICAgICAgICAgICB4aHJDYWxsYmFja3MgPSB7fTsKICAgICAgICAgICAgICAgIGpRdWVyeSggd2luZG93ICkudW5sb2FkKCB4aHJPblVubG9hZEFib3J0ICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIC8vIEFkZCB0byBsaXN0IG9mIGFjdGl2ZSB4aHJzIGNhbGxiYWNrcwogICAgICAgICAgICAgIHhockNhbGxiYWNrc1sgaGFuZGxlIF0gPSBjYWxsYmFjazsKICAgICAgICAgICAgfQogICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gY2FsbGJhY2s7CiAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCBjYWxsYmFjayApIHsKICAgICAgICAgICAgY2FsbGJhY2soIHVuZGVmaW5lZCwgdHJ1ZSApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgIH0KICB9KTsKfQp2YXIgZnhOb3csIHRpbWVySWQsCiAgcmZ4dHlwZXMgPSAvXig\/OnRvZ2dsZXxzaG93fGhpZGUpJC8sCiAgcmZ4bnVtID0gbmV3IFJlZ0V4cCggIl4oPzooWystXSk9fCkoIiArIGNvcmVfcG51bSArICIpKFthLXolXSopJCIsICJpIiApLAogIHJydW4gPSAvcXVldWVIb29rcyQvLAogIGFuaW1hdGlvblByZWZpbHRlcnMgPSBbIGRlZmF1bHRQcmVmaWx0ZXIgXSwKICB0d2VlbmVycyA9IHsKICAgICIqIjogW2Z1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHsKICAgICAgdmFyIGVuZCwgdW5pdCwKICAgICAgICB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICksCiAgICAgICAgcGFydHMgPSByZnhudW0uZXhlYyggdmFsdWUgKSwKICAgICAgICB0YXJnZXQgPSB0d2Vlbi5jdXIoKSwKICAgICAgICBzdGFydCA9ICt0YXJnZXQgfHwgMCwKICAgICAgICBzY2FsZSA9IDEsCiAgICAgICAgbWF4SXRlcmF0aW9ucyA9IDIwOwoKICAgICAgaWYgKCBwYXJ0cyApIHsKICAgICAgICBlbmQgPSArcGFydHNbMl07CiAgICAgICAgdW5pdCA9IHBhcnRzWzNdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gIiIgOiAicHgiICk7CgogICAgICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSBzdGFydGluZyB2YWx1ZQogICAgICAgIGlmICggdW5pdCAhPT0gInB4IiAmJiBzdGFydCApIHsKICAgICAgICAgIC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50CiAgICAgICAgICAvLyBQcmVmZXIgdGhlIGN1cnJlbnQgcHJvcGVydHksIGJlY2F1c2UgdGhpcyBwcm9jZXNzIHdpbGwgYmUgdHJpdmlhbCBpZiBpdCB1c2VzIHRoZSBzYW1lIHVuaXRzCiAgICAgICAgICAvLyBGYWxsYmFjayB0byBlbmQgb3IgYSBzaW1wbGUgY29uc3RhbnQKICAgICAgICAgIHN0YXJ0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgcHJvcCwgdHJ1ZSApIHx8IGVuZCB8fCAxOwoKICAgICAgICAgIGRvIHsKICAgICAgICAgICAgLy8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyoKICAgICAgICAgICAgLy8gVXNlIGEgc3RyaW5nIGZvciBkb3VibGluZyBmYWN0b3Igc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3cKICAgICAgICAgICAgc2NhbGUgPSBzY2FsZSB8fCAiLjUiOwoKICAgICAgICAgICAgLy8gQWRqdXN0IGFuZCBhcHBseQogICAgICAgICAgICBzdGFydCA9IHN0YXJ0IC8gc2NhbGU7CiAgICAgICAgICAgIGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7CgogICAgICAgICAgLy8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKCkKICAgICAgICAgIC8vIEFuZCBicmVha2luZyB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoCiAgICAgICAgICB9IHdoaWxlICggc2NhbGUgIT09IChzY2FsZSA9IHR3ZWVuLmN1cigpIC8gdGFyZ2V0KSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnMgKTsKICAgICAgICB9CgogICAgICAgIHR3ZWVuLnVuaXQgPSB1bml0OwogICAgICAgIHR3ZWVuLnN0YXJ0ID0gc3RhcnQ7CiAgICAgICAgLy8gSWYgYSArPS8tPSB0b2tlbiB3YXMgcHJvdmlkZWQsIHdlJ3JlIGRvaW5nIGEgcmVsYXRpdmUgYW5pbWF0aW9uCiAgICAgICAgdHdlZW4uZW5kID0gcGFydHNbMV0gPyBzdGFydCArICggcGFydHNbMV0gKyAxICkgKiBlbmQgOiBlbmQ7CiAgICAgIH0KICAgICAgcmV0dXJuIHR3ZWVuOwogICAgfV0KICB9OwoKLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseQpmdW5jdGlvbiBjcmVhdGVGeE5vdygpIHsKICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgZnhOb3cgPSB1bmRlZmluZWQ7CiAgfSk7CiAgcmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTsKfQoKZnVuY3Rpb24gY3JlYXRlVHdlZW5zKCBhbmltYXRpb24sIHByb3BzICkgewogIGpRdWVyeS5lYWNoKCBwcm9wcywgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkgewogICAgdmFyIGNvbGxlY3Rpb24gPSAoIHR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIHR3ZWVuZXJzWyAiKiIgXSApLAogICAgICBpbmRleCA9IDAsCiAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoOwogICAgZm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHsKICAgICAgaWYgKCBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApIHsKCiAgICAgICAgLy8gd2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHkKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgIH0KICB9KTsKfQoKZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkgewogIHZhciByZXN1bHQsCiAgICBzdG9wcGVkLAogICAgaW5kZXggPSAwLAogICAgbGVuZ3RoID0gYW5pbWF0aW9uUHJlZmlsdGVycy5sZW5ndGgsCiAgICBkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7CiAgICAgIC8vIGRvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvcgogICAgICBkZWxldGUgdGljay5lbGVtOwogICAgfSksCiAgICB0aWNrID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICggc3RvcHBlZCApIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgdmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSwKICAgICAgICByZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksCiAgICAgICAgLy8gYXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIDEgLSAoIDAuNSB8fCAwICkgKCMxMjQ5NykKICAgICAgICB0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsCiAgICAgICAgcGVyY2VudCA9IDEgLSB0ZW1wLAogICAgICAgIGluZGV4ID0gMCwKICAgICAgICBsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDsKCiAgICAgIGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkgewogICAgICAgIGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7CiAgICAgIH0KCiAgICAgIGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSk7CgogICAgICBpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHsKICAgICAgICByZXR1cm4gcmVtYWluaW5nOwogICAgICB9IGVsc2UgewogICAgICAgIGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9LAogICAgYW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7CiAgICAgIGVsZW06IGVsZW0sCiAgICAgIHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLAogICAgICBvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7IHNwZWNpYWxFYXNpbmc6IHt9IH0sIG9wdGlvbnMgKSwKICAgICAgb3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLAogICAgICBvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsCiAgICAgIHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSwKICAgICAgZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sCiAgICAgIHR3ZWVuczogW10sCiAgICAgIGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkgewogICAgICAgIHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCwKICAgICAgICAgICAgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApOwogICAgICAgIGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTsKICAgICAgICByZXR1cm4gdHdlZW47CiAgICAgIH0sCiAgICAgIHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkgewogICAgICAgIHZhciBpbmRleCA9IDAsCiAgICAgICAgICAvLyBpZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnMKICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydAogICAgICAgICAgbGVuZ3RoID0gZ290b0VuZCA\/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDsKICAgICAgICBpZiAoIHN0b3BwZWQgKSB7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CiAgICAgICAgc3RvcHBlZCA9IHRydWU7CiAgICAgICAgZm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7CiAgICAgICAgICBhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApOwogICAgICAgIH0KCiAgICAgICAgLy8gcmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZQogICAgICAgIC8vIG90aGVyd2lzZSwgcmVqZWN0CiAgICAgICAgaWYgKCBnb3RvRW5kICkgewogICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgfSksCiAgICBwcm9wcyA9IGFuaW1hdGlvbi5wcm9wczsKCiAgcHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTsKCiAgZm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7CiAgICByZXN1bHQgPSBhbmltYXRpb25QcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7CiAgICBpZiAoIHJlc3VsdCApIHsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9CgogIGNyZWF0ZVR3ZWVucyggYW5pbWF0aW9uLCBwcm9wcyApOwoKICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkgewogICAgYW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7CiAgfQoKICBqUXVlcnkuZngudGltZXIoCiAgICBqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7CiAgICAgIGVsZW06IGVsZW0sCiAgICAgIGFuaW06IGFuaW1hdGlvbiwKICAgICAgcXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlCiAgICB9KQogICk7CgogIC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zCiAgcmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKQogICAgLmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlICkKICAgIC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsICkKICAgIC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApOwp9CgpmdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHsKICB2YXIgdmFsdWUsIG5hbWUsIGluZGV4LCBlYXNpbmcsIGhvb2tzOwoKICAvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3MKICBmb3IgKCBpbmRleCBpbiBwcm9wcyApIHsKICAgIG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApOwogICAgZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdOwogICAgdmFsdWUgPSBwcm9wc1sgaW5kZXggXTsKICAgIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7CiAgICAgIGVhc2luZyA9IHZhbHVlWyAxIF07CiAgICAgIHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdOwogICAgfQoKICAgIGlmICggaW5kZXggIT09IG5hbWUgKSB7CiAgICAgIHByb3BzWyBuYW1lIF0gPSB2YWx1ZTsKICAgICAgZGVsZXRlIHByb3BzWyBpbmRleCBdOwogICAgfQoKICAgIGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07CiAgICBpZiAoIGhvb2tzICYmICJleHBhbmQiIGluIGhvb2tzICkgewogICAgICB2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTsKICAgICAgZGVsZXRlIHByb3BzWyBuYW1lIF07CgogICAgICAvLyBub3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29udCBvdmVyd3JpdGUga2V5cyBhbHJlYWR5IHByZXNlbnQuCiAgICAgIC8vIGFsc28gLSByZXVzaW5nICdpbmRleCcgZnJvbSBhYm92ZSBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgIm5hbWUiCiAgICAgIGZvciAoIGluZGV4IGluIHZhbHVlICkgewogICAgICAgIGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHsKICAgICAgICAgIHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07CiAgICAgICAgICBzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgc3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nOwogICAgfQogIH0KfQoKalF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwgewoKICB0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkgewogICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHsKICAgICAgY2FsbGJhY2sgPSBwcm9wczsKICAgICAgcHJvcHMgPSBbICIqIiBdOwogICAgfSBlbHNlIHsKICAgICAgcHJvcHMgPSBwcm9wcy5zcGxpdCgiICIpOwogICAgfQoKICAgIHZhciBwcm9wLAogICAgICBpbmRleCA9IDAsCiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDsKCiAgICBmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHsKICAgICAgcHJvcCA9IHByb3BzWyBpbmRleCBdOwogICAgICB0d2VlbmVyc1sgcHJvcCBdID0gdHdlZW5lcnNbIHByb3AgXSB8fCBbXTsKICAgICAgdHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApOwogICAgfQogIH0sCgogIHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkgewogICAgaWYgKCBwcmVwZW5kICkgewogICAgICBhbmltYXRpb25QcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7CiAgICB9IGVsc2UgewogICAgICBhbmltYXRpb25QcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7CiAgICB9CiAgfQp9KTsKCmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkgewogIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovCiAgdmFyIHByb3AsIGluZGV4LCBsZW5ndGgsCiAgICB2YWx1ZSwgZGF0YVNob3csIHRvZ2dsZSwKICAgIHR3ZWVuLCBob29rcywgb2xkZmlyZSwKICAgIGFuaW0gPSB0aGlzLAogICAgc3R5bGUgPSBlbGVtLnN0eWxlLAogICAgb3JpZyA9IHt9LAogICAgaGFuZGxlZCA9IFtdLAogICAgaGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApOwoKICAvLyBoYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzCiAgaWYgKCAhb3B0cy5xdWV1ZSApIHsKICAgIGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCAiZngiICk7CiAgICBpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7CiAgICAgIGhvb2tzLnVucXVldWVkID0gMDsKICAgICAgb2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7CiAgICAgIGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoICFob29rcy51bnF1ZXVlZCApIHsKICAgICAgICAgIG9sZGZpcmUoKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CiAgICBob29rcy51bnF1ZXVlZCsrOwoKICAgIGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkgewogICAgICAvLyBkb2luZyB0aGlzIG1ha2VzIHN1cmUgdGhhdCB0aGUgY29tcGxldGUgaGFuZGxlciB3aWxsIGJlIGNhbGxlZAogICAgICAvLyBiZWZvcmUgdGhpcyBjb21wbGV0ZXMKICAgICAgYW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7CiAgICAgICAgaG9va3MudW5xdWV1ZWQtLTsKICAgICAgICBpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sICJmeCIgKS5sZW5ndGggKSB7CiAgICAgICAgICBob29rcy5lbXB0eS5maXJlKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH0KCiAgLy8gaGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3MKICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCAiaGVpZ2h0IiBpbiBwcm9wcyB8fCAid2lkdGgiIGluIHByb3BzICkgKSB7CiAgICAvLyBNYWtlIHN1cmUgdGhhdCBub3RoaW5nIHNuZWFrcyBvdXQKICAgIC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QKICAgIC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZAogICAgLy8gb3ZlcmZsb3dZIGFyZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWUKICAgIG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdOwoKICAgIC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoCiAgICAvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkCiAgICBpZiAoIGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApID09PSAiaW5saW5lIiAmJgogICAgICAgIGpRdWVyeS5jc3MoIGVsZW0sICJmbG9hdCIgKSA9PT0gIm5vbmUiICkgewoKICAgICAgLy8gaW5saW5lLWxldmVsIGVsZW1lbnRzIGFjY2VwdCBpbmxpbmUtYmxvY2s7CiAgICAgIC8vIGJsb2NrLWxldmVsIGVsZW1lbnRzIG5lZWQgdG8gYmUgaW5saW5lIHdpdGggbGF5b3V0CiAgICAgIGlmICggIWpRdWVyeS5zdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgfHwgY3NzX2RlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgPT09ICJpbmxpbmUiICkgewogICAgICAgIHN0eWxlLmRpc3BsYXkgPSAiaW5saW5lLWJsb2NrIjsKCiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3R5bGUuem9vbSA9IDE7CiAgICAgIH0KICAgIH0KICB9CgogIGlmICggb3B0cy5vdmVyZmxvdyApIHsKICAgIHN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC5zaHJpbmtXcmFwQmxvY2tzICkgewogICAgICBhbmltLmFsd2F5cyhmdW5jdGlvbigpIHsKICAgICAgICBzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTsKICAgICAgICBzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07CiAgICAgICAgc3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdOwogICAgICB9KTsKICAgIH0KICB9CgoKICAvLyBzaG93L2hpZGUgcGFzcwogIGZvciAoIGluZGV4IGluIHByb3BzICkgewogICAgdmFsdWUgPSBwcm9wc1sgaW5kZXggXTsKICAgIGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHsKICAgICAgZGVsZXRlIHByb3BzWyBpbmRleCBdOwogICAgICB0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09ICJ0b2dnbGUiOwogICAgICBpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA\/ICJoaWRlIiA6ICJzaG93IiApICkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGhhbmRsZWQucHVzaCggaW5kZXggKTsKICAgIH0KICB9CgogIGxlbmd0aCA9IGhhbmRsZWQubGVuZ3RoOwogIGlmICggbGVuZ3RoICkgewogICAgZGF0YVNob3cgPSBqUXVlcnkuX2RhdGEoIGVsZW0sICJmeHNob3ciICkgfHwgalF1ZXJ5Ll9kYXRhKCBlbGVtLCAiZnhzaG93Iiwge30gKTsKICAgIGlmICggImhpZGRlbiIgaW4gZGF0YVNob3cgKSB7CiAgICAgIGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjsKICAgIH0KCiAgICAvLyBzdG9yZSBzdGF0ZSBpZiBpdHMgdG9nZ2xlIC0gZW5hYmxlcyAuc3RvcCgpLnRvZ2dsZSgpIHRvICJyZXZlcnNlIgogICAgaWYgKCB0b2dnbGUgKSB7CiAgICAgIGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47CiAgICB9CiAgICBpZiAoIGhpZGRlbiApIHsKICAgICAgalF1ZXJ5KCBlbGVtICkuc2hvdygpOwogICAgfSBlbHNlIHsKICAgICAgYW5pbS5kb25lKGZ1bmN0aW9uKCkgewogICAgICAgIGpRdWVyeSggZWxlbSApLmhpZGUoKTsKICAgICAgfSk7CiAgICB9CiAgICBhbmltLmRvbmUoZnVuY3Rpb24oKSB7CiAgICAgIHZhciBwcm9wOwogICAgICBqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sICJmeHNob3ciICk7CiAgICAgIGZvciAoIHByb3AgaW4gb3JpZyApIHsKICAgICAgICBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApOwogICAgICB9CiAgICB9KTsKICAgIGZvciAoIGluZGV4ID0gMCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHsKICAgICAgcHJvcCA9IGhhbmRsZWRbIGluZGV4IF07CiAgICAgIHR3ZWVuID0gYW5pbS5jcmVhdGVUd2VlbiggcHJvcCwgaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAgKTsKICAgICAgb3JpZ1sgcHJvcCBdID0gZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTsKCiAgICAgIGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkgewogICAgICAgIGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDsKICAgICAgICBpZiAoIGhpZGRlbiApIHsKICAgICAgICAgIHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0OwogICAgICAgICAgdHdlZW4uc3RhcnQgPSBwcm9wID09PSAid2lkdGgiIHx8IHByb3AgPT09ICJoZWlnaHQiID8gMSA6IDA7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7CiAgcmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTsKfQpqUXVlcnkuVHdlZW4gPSBUd2VlbjsKClR3ZWVuLnByb3RvdHlwZSA9IHsKICBjb25zdHJ1Y3RvcjogVHdlZW4sCiAgaW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkgewogICAgdGhpcy5lbGVtID0gZWxlbTsKICAgIHRoaXMucHJvcCA9IHByb3A7CiAgICB0aGlzLmVhc2luZyA9IGVhc2luZyB8fCAic3dpbmciOwogICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKICAgIHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7CiAgICB0aGlzLmVuZCA9IGVuZDsKICAgIHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyAiIiA6ICJweCIgKTsKICB9LAogIGN1cjogZnVuY3Rpb24oKSB7CiAgICB2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdOwoKICAgIHJldHVybiBob29rcyAmJiBob29rcy5nZXQgPwogICAgICBob29rcy5nZXQoIHRoaXMgKSA6CiAgICAgIFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTsKICB9LAogIHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7CiAgICB2YXIgZWFzZWQsCiAgICAgIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTsKCiAgICBpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHsKICAgICAgdGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oCiAgICAgICAgcGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uCiAgICAgICk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDsKICAgIH0KICAgIHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDsKCiAgICBpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkgewogICAgICB0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7CiAgICB9CgogICAgaWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7CiAgICAgIGhvb2tzLnNldCggdGhpcyApOwogICAgfSBlbHNlIHsKICAgICAgVHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApOwogICAgfQogICAgcmV0dXJuIHRoaXM7CiAgfQp9OwoKVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlOwoKVHdlZW4ucHJvcEhvb2tzID0gewogIF9kZWZhdWx0OiB7CiAgICBnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHsKICAgICAgdmFyIHJlc3VsdDsKCiAgICAgIGlmICggdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYKICAgICAgICAoIXR3ZWVuLmVsZW0uc3R5bGUgfHwgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwpICkgewogICAgICAgIHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07CiAgICAgIH0KCiAgICAgIC8vIHBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseQogICAgICAvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzCiAgICAgIC8vIHNvLCBzaW1wbGUgdmFsdWVzIHN1Y2ggYXMgIjEwcHgiIGFyZSBwYXJzZWQgdG8gRmxvYXQuCiAgICAgIC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgInJvdGF0ZSgxcmFkKSIgYXJlIHJldHVybmVkIGFzIGlzLgogICAgICByZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCAiIiApOwogICAgICAvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kICJhdXRvIiBhcmUgY29udmVydGVkIHRvIDAuCiAgICAgIHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gImF1dG8iID8gMCA6IHJlc3VsdDsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHsKICAgICAgLy8gdXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQgLSB1c2UgY3NzSG9vayBpZiBpdHMgdGhlcmUgLSB1c2UgLnN0eWxlIGlmIGl0cwogICAgICAvLyBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZQogICAgICBpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7CiAgICAgICAgalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTsKICAgICAgfSBlbHNlIGlmICggdHdlZW4uZWxlbS5zdHlsZSAmJiAoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fCBqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkgewogICAgICAgIGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApOwogICAgICB9IGVsc2UgewogICAgICAgIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdzsKICAgICAgfQogICAgfQogIH0KfTsKCi8vIFJlbW92ZSBpbiAyLjAgLSB0aGlzIHN1cHBvcnRzIElFOCdzIHBhbmljIGJhc2VkIGFwcHJvYWNoCi8vIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2RlcwoKVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0gewogIHNldDogZnVuY3Rpb24oIHR3ZWVuICkgewogICAgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHsKICAgICAgdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93OwogICAgfQogIH0KfTsKCmpRdWVyeS5lYWNoKFsgInRvZ2dsZSIsICJzaG93IiwgImhpZGUiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkgewogIHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdOwogIGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkgewogICAgcmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSAiYm9vbGVhbiIgPwogICAgICBjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOgogICAgICB0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7CiAgfTsKfSk7CgpqUXVlcnkuZm4uZXh0ZW5kKHsKICBmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7CgogICAgLy8gc2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwCiAgICByZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCAib3BhY2l0eSIsIDAgKS5zaG93KCkKCiAgICAgIC8vIGFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZAogICAgICAuZW5kKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7CiAgfSwKICBhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7CiAgICB2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLAogICAgICBvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksCiAgICAgIGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3QKICAgICAgICB2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7CiAgICAgICAgZG9BbmltYXRpb24uZmluaXNoID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBhbmltLnN0b3AoIHRydWUgKTsKICAgICAgICB9OwogICAgICAgIC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseQogICAgICAgIGlmICggZW1wdHkgfHwgalF1ZXJ5Ll9kYXRhKCB0aGlzLCAiZmluaXNoIiApICkgewogICAgICAgICAgYW5pbS5zdG9wKCB0cnVlICk7CiAgICAgICAgfQogICAgICB9OwogICAgICBkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjsKCiAgICByZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA\\/IHZhbCA6IGpRdWVyeSggd2luICkuc2Nyb2xsVG9wKCkKICAgICAgICApOwoKICAgICAgfSBlbHNlIHsKICAgICAgICBlbGVtWyBtZXRob2QgXSA9IHZhbDsKICAgICAgfQogICAgfSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGgsIG51bGwgKTsKICB9Owp9KTsKCmZ1bmN0aW9uIGdldFdpbmRvdyggZWxlbSApIHsKICByZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPwogICAgZWxlbSA6CiAgICBlbGVtLm5vZGVUeXBlID09PSA5ID8KICAgICAgZWxlbS5kZWZhdWx0VmlldyB8fCBlbGVtLnBhcmVudFdpbmRvdyA6CiAgICAgIGZhbHNlOwp9Ci8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kcwpqUXVlcnkuZWFjaCggeyBIZWlnaHQ6ICJoZWlnaHQiLCBXaWR0aDogIndpZHRoIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHsKICBqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiAiaW5uZXIiICsgbmFtZSwgY29udGVudDogdHlwZSwgIiI6ICJvdXRlciIgKyBuYW1lIH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkgewogICAgLy8gbWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoCiAgICBqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHsKICAgICAgdmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gImJvb2xlYW4iICksCiAgICAgICAgZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyAibWFyZ2luIiA6ICJib3JkZXIiICk7CgogICAgICByZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkgewogICAgICAgIHZhciBkb2M7CgogICAgICAgIGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7CiAgICAgICAgICAvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZQogICAgICAgICAgLy8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOgogICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC83NjQKICAgICAgICAgIHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgImNsaWVudCIgKyBuYW1lIF07CiAgICAgICAgfQoKICAgICAgICAvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0CiAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkgewogICAgICAgICAgZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7CgogICAgICAgICAgLy8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLCB3aGljaGV2ZXIgaXMgZ3JlYXRlc3QKICAgICAgICAgIC8vIHVuZm9ydHVuYXRlbHksIHRoaXMgY2F1c2VzIGJ1ZyAjMzgzOCBpbiBJRTYvOCBvbmx5LCBidXQgdGhlcmUgaXMgY3VycmVudGx5IG5vIGdvb2QsIHNtYWxsIHdheSB0byBmaXggaXQuCiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoCiAgICAgICAgICAgIGVsZW0uYm9keVsgInNjcm9sbCIgKyBuYW1lIF0sIGRvY1sgInNjcm9sbCIgKyBuYW1lIF0sCiAgICAgICAgICAgIGVsZW0uYm9keVsgIm9mZnNldCIgKyBuYW1lIF0sIGRvY1sgIm9mZnNldCIgKyBuYW1lIF0sCiAgICAgICAgICAgIGRvY1sgImNsaWVudCIgKyBuYW1lIF0KICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA\/CiAgICAgICAgICAvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0CiAgICAgICAgICBqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDoKCiAgICAgICAgICAvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50CiAgICAgICAgICBqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApOwogICAgICB9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApOwogICAgfTsKICB9KTsKfSk7Ci8vIExpbWl0IHNjb3BlIHBvbGx1dGlvbiBmcm9tIGFueSBkZXByZWNhdGVkIEFQSQovLyAoZnVuY3Rpb24oKSB7CgovLyB9KSgpOwovLyBFeHBvc2UgalF1ZXJ5IHRvIHRoZSBnbG9iYWwgb2JqZWN0CndpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTsKCi8vIEV4cG9zZSBqUXVlcnkgYXMgYW4gQU1EIG1vZHVsZSwgYnV0IG9ubHkgZm9yIEFNRCBsb2FkZXJzIHRoYXQKLy8gdW5kZXJzdGFuZCB0aGUgaXNzdWVzIHdpdGggbG9hZGluZyBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBqUXVlcnkKLy8gaW4gYSBwYWdlIHRoYXQgYWxsIG1pZ2h0IGNhbGwgZGVmaW5lKCkuIFRoZSBsb2FkZXIgd2lsbCBpbmRpY2F0ZQovLyB0aGV5IGhhdmUgc3BlY2lhbCBhbGxvd2FuY2VzIGZvciBtdWx0aXBsZSBqUXVlcnkgdmVyc2lvbnMgYnkKLy8gc3BlY2lmeWluZyBkZWZpbmUuYW1kLmpRdWVyeSA9IHRydWUuIFJlZ2lzdGVyIGFzIGEgbmFtZWQgbW9kdWxlLAovLyBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsCi8vIGJ1dCBub3QgdXNlIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXQgdW5kZXJzdGFuZHMgYW5vbnltb3VzCi8vIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0IHdheSB0byByZWdpc3Rlci4KLy8gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmUgZGVyaXZlZCBmcm9tCi8vIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlIGZpbGUgbmFtZS4KLy8gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50cyB0byBjYWxsCi8vIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuCmlmICggdHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kICYmIGRlZmluZS5hbWQualF1ZXJ5ICkgewogIGRlZmluZSggImpxdWVyeSIsIFtdLCBmdW5jdGlvbiAoKSB7IHJldHVybiBqUXVlcnk7IH0gKTsKfQoKfSkoIHdpbmRvdyApOw==",
    "size": "290323"
}