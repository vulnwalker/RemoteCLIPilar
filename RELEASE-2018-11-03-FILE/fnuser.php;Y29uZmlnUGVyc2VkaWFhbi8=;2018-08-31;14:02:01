{
    "namaFile": "configPersediaan\/fnuser.php",
    "lastUpdate": "2018-08-31+14:02:01.90",
    "contentFile": "PD9waHAKCgpGdW5jdGlvbiBVc2VyTG9naW4oKQp7CiAgICBnbG9iYWwgJEhUVFBfUE9TVF9WQVJTLCAkSFRUUF9DT09LSUVfVkFSUywgJEhUVFBfR0VUX1ZBUlMsICRNYWluOwoKCiAgICAkZXJybXNnICAgICAgPSAnJzsKICAgICRlcnJObyAgICAgICA9IDA7CiAgICAvLy0tIGdldCBkYXRhCiAgICAkVXNlciAgICAgICAgPSBpc3NldCgkSFRUUF9QT1NUX1ZBUlNbJ3VzZXInXSkgPyAkSFRUUF9QT1NUX1ZBUlNbJ3VzZXInXSA6ICIiOwogICAgJFB3ZCAgICAgICAgID0gaXNzZXQoJEhUVFBfUE9TVF9WQVJTWydwYXNzd29yZCddKSA\\/ICRVU0VSX1RJTUVfT1VUMiA6ICRVU0VSX1RJTUVfT1VUOwogICAgLy9pZiAoJGlzaVsnZGlmZiddID49ICR1dCB8fCAkaXNpWydzZXNpbm8nXSA8PiAkSFRUUF9DT09LSUVfVkFSU1snY29zZXNpbm8nXSApewogICAgaWYgKCRpc2lbJ2RpZmYnXSA+PSAkdXQpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIEZBTFNFOwogICAgfQp9CgpmdW5jdGlvbiBDZWtMb2dpbigkY2VrVGltZU91dCA9IFRSVUUpCnsKICAgIGdsb2JhbCAkVVNFUl9USU1FX09VVCwgJEhUVFBfQ09PS0lFX1ZBUlMsICRIVFRQX0dFVF9WQVJTLCAkSFRUUF9DT09LSUVfVkFSUzsKCiAgICBpZiAoaXNzZXQoJEhUVFBfQ09PS0lFX1ZBUlNbJ2NvU3RhdHVzJ10pKSB7CiAgICAgICAgaWYgKCRIVFRQX0NPT0tJRV9WQVJTWydjb1N0YXR1cyddKSB7CiAgICAgICAgICAgICR1c2VyID0gJEhUVFBfQ09PS0lFX1ZBUlNbJ2NvSUQnXTsKCiAgICAgICAgICAgICRpc2kgPSBteXNxbF9mZXRjaF9hcnJheShteXNxbF9xdWVyeSgnc2VsZWN0IG9ubGluZSBmcm9tIGFkbWluIHdoZXJlIHVpZD0iJyAuICR1c2VyIC4gJyIgICcpKTsKICAgICAgICAgICAgLy9lY2hvICdvbD0nLiRpc2lbJ29ubGluZSddLic8YnI+JzsKICAgICAgICAgICAgaWYgKCRpc2lbJ29ubGluZSddID09ICcxJykgewogICAgICAgICAgICAgICAgLy9qaWthIG9ubGluZSwgY2VrIHRpbWUgb3V0CiAgICAgICAgICAgICAgICBpZiAoaXNVc2VyVGltZU91dCgkdXNlcikgPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAvL2ppa2EgYmVsdW0gdGltZW91dCwgY2VrIHNlc2kKICAgICAgICAgICAgICAgICAgICAkc2VzaW5vID0gJEhUVFBfQ09PS0lFX1ZBUlNbJ2Nvc2VzaW5vJ107IC8vZWNobyAkc2VzaW5vOwogICAgICAgICAgICAgICAgICAgICRpc2kyICAgPSBteXNxbF9mZXRjaF9hcnJheShteXNxbF9xdWVyeSgnc2VsZWN0IHNlc2lubyBmcm9tIGFkbWluIHdoZXJlIHVpZD0iJyAuICR1c2VyIC4gJyIgICcpKTsKICAgICAgICAgICAgICAgICAgICBpZiAoJGlzaTJbJ3Nlc2lubyddICE9ICRzZXNpbm8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy9qaWthIGJlZGEgc2VzaSByZXR1cm4gZmFsc2UgKGhhcnVzIGxvZ2luKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRkFMU0U7IC8vYmVkYSBzZXNpCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRSVUU7CgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRjZWtUaW1lT3V0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGQUxTRTsgLy9zdWRhaCB0aW1lb3V0CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRSVUU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy9zdWRhaCBsb2dvZmYKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy9zdWRhaCBsb2dvZmYKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KfQoKCmZ1bmN0aW9uIGxvZ2luX2Nla1Bhc3dvcmQoJHVzZXJJRCwgJHBhc3MpCnsKICAgICRlcnJtc2cgPSAnJzsKCgoKICAgICRzcXJ5ID0gJ3NlbGVjdCAqIGZyb20gYWRtaW4gd2hlcmUgdWlkPSInIC4gJHVzZXJJRCAuICciJzsKICAgICRyb3cgID0gbXlzcWxfZmV0Y2hfYXJyYXkobXlzcWxfcXVlcnkoJHNxcnkpKTsKICAgIHJldHVybiAoJHJvd1sncGFzc3dvcmQnXSA9PSBtZDUoJHBhc3MpKTsKfQoKZnVuY3Rpb24gbG9naW5fY2VrVXNlckJhcnUoJHVzZXJJRCkKewogICAgJGVycm1zZyA9ICcnOwoKICAgICRzcXJ5ID0gJ3NlbGVjdCAqIGZyb20gYWRtaW4gd2hlcmUgdWlkPSInIC4gJHVzZXJJRCAuICciJzsKICAgICRyb3cgID0gbXlzcWxfbnVtX3Jvd3MobXlzcWxfcXVlcnkoJHNxcnkpKTsKCiAgICAvL2lmICgoJGVycm1zZyA9PScnKSYmKCRyb3c9PTApKXskZXJybXNnID0gJ05hbWEgVXNlciB0aWRhayBhZGEhJzt9CiAgICAvL2lmICgoJGVycm1zZyA9PScnKSYmKCBjZWtQYXN3b3JkKCR1c2VySUQsICRwYXNzKSA9IEZBTFNFICkpeyRlcnJtc2cgPSAnUGFzc3dvcmQgU2FsYWghJzt9CiAgICAvL2lmICgkZXJybXNnID09Jycpe30KICAgIC8vcmV0dXJuICRlcnJtc2cKICAgIHJldHVybiAkcm93ID09IDA7Cn0KCmZ1bmN0aW9uIGxvZ2luX2dldFVzZXIoKQp7CiAgICBnbG9iYWwgJEhUVFBfUE9TVF9WQVJTLCAkSFRUUF9DT09LSUVfVkFSUywgJEhUVFBfR0VUX1ZBUlM7CiAgICAvLyRVc2VyID0gJEhUVFBfQ09PS0lFX1ZBUlNbJ2NvSUQnXTsKICAgICRVc2VyID0gJF9DT09LSUVbJ2NvSUQnXTsKICAgIHJldHVybiAkVXNlcjsKfQoKZnVuY3Rpb24gbG9naW5fZ2V0R3JvdXAoKQp7CiAgICBnbG9iYWwgJEhUVFBfUE9TVF9WQVJTLCAkSFRUUF9DT09LSUVfVkFSUywgJEhUVFBfR0VUX1ZBUlM7CiAgICAkR3JvdXAgPSAkX0NPT0tJRVsnY29Hcm91cCddOwogICAgcmV0dXJuICRHcm91cDsKfQoKZnVuY3Rpb24gbG9naW5fc2V0VXNlckNvKCRVc2VyKQp7CiAgICBnbG9iYWwgJEhUVFBfUE9TVF9WQVJTLCAkSFRUUF9DT09LSUVfVkFSUywgJEhUVFBfR0VUX1ZBUlM7CiAgICAvL3NldGNvb2tpZSgnY29JRCcsJFVzZXIpOy8vJFVzZXIgPSAkSFRUUF9DT09LSUVfVkFSU1snY29JRCddOwogICAgc2V0Y29va2llKCJjb0lEIiwgJFVzZXIpOyAvLyRIVFRQX0NPT0tJRV9WQVJTWydjb0lEJ106PSAkVXNlcjsKCiAgICAvL3JldHVybiAkVXNlcjsKfQoKZnVuY3Rpb24gbG9naW5fZ2V0TmFtZSgpCnsKICAgIGdsb2JhbCAkSFRUUF9QT1NUX1ZBUlMsICRIVFRQX0NPT0tJRV9WQVJTLCAkSFRUUF9HRVRfVkFSUzsKICAgICRuYW1lID0gJEhUVFBfQ09PS0lFX1ZBUlNbJ2NvTmFtYSddOwogICAgcmV0dXJuICRuYW1lOwp9CgpmdW5jdGlvbiBsb2dpbl9zaW1wYW4oJG9sZHVpZCwgJHVpZCwgJHBhc3MsICRuYW1lbCkKewogICAgZ2xvYmFsICRjZWs7CiAgICAkc3FyeSA9ICd1cGRhdGUgYWRtaW4KCQkJc2V0IHVpZD0iJyAuICR1aWQgLiAnIiwKCQkJICBwYXNzd29yZD0iJyAuIG1kNSgkcGFzcykgLiAnIiwKCQkJICBuYW1hID0iJyAuICRuYW1lbCAuICciLAoJCQkgIG9ubGluZT0gMAoJCQl3aGVyZSB1aWQ9IicgLiAkb2xkdWlkIC4gJyIgbGltaXQgMSc7CiAgICAkY2VrIC49ICc8YnI+IHNxcnlzaW1wYW49JyAuICRzcXJ5OwogICAgJHJvdyA9IG15c3FsX3F1ZXJ5KCRzcXJ5KTsKfQoKCj8+Cg==",
    "size": "14725"
}