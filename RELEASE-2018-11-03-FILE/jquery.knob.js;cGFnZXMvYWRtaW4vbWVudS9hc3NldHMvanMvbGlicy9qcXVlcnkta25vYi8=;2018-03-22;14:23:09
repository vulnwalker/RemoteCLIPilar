{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/jquery-knob\/jquery.knob.js",
    "lastUpdate": "2018-03-22+14:23:09.00",
    "contentFile": "\/CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGRpdi5wYXJlbnQoKS53aWR0aCgpICoKICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGhpcy5vLndpZHRoKSAvIDEwMAogICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuJGRpdi5wYXJlbnQoKS53aWR0aCgpLAogICAgICAgICAgICAgICAgICAgIGggPSB0aGlzLnJlbGF0aXZlSGVpZ2h0ID8KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGl2LnBhcmVudCgpLmhlaWdodCgpICoKICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGhpcy5vLmhlaWdodCkgLyAxMDAKICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLiRkaXYucGFyZW50KCkuaGVpZ2h0KCk7CgogICAgICAgICAgICAgICAgLy8gYXBwbHkgcmVsYXRpdmUKICAgICAgICAgICAgICAgIHRoaXMudyA9IHRoaXMuaCA9IE1hdGgubWluKHcsIGgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy53ID0gdGhpcy5vLndpZHRoOwogICAgICAgICAgICAgICAgdGhpcy5oID0gdGhpcy5vLmhlaWdodDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gZmluYWxpemUgZGl2CiAgICAgICAgICAgIHRoaXMuJGRpdi5jc3MoewogICAgICAgICAgICAgICAgJ3dpZHRoJzogdGhpcy53ICsgJ3B4JywKICAgICAgICAgICAgICAgICdoZWlnaHQnOiB0aGlzLmggKyAncHgnCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gZmluYWxpemUgY2FudmFzIHdpdGggY29tcHV0ZWQgd2lkdGgKICAgICAgICAgICAgdGhpcy4kYy5hdHRyKHsKICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLncsCiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaAogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIHNjYWxpbmcKICAgICAgICAgICAgaWYgKHRoaXMuc2NhbGUgIT09IDEpIHsKICAgICAgICAgICAgICAgIHRoaXMuJGNbMF0ud2lkdGggPSB0aGlzLiRjWzBdLndpZHRoICogdGhpcy5zY2FsZTsKICAgICAgICAgICAgICAgIHRoaXMuJGNbMF0uaGVpZ2h0ID0gdGhpcy4kY1swXS5oZWlnaHQgKiB0aGlzLnNjYWxlOwogICAgICAgICAgICAgICAgdGhpcy4kYy53aWR0aCh0aGlzLncpOwogICAgICAgICAgICAgICAgdGhpcy4kYy5oZWlnaHQodGhpcy5oKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9kcmF3ID0gZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgLy8gY2FudmFzIHByZS1yZW5kZXJpbmcKICAgICAgICAgICAgdmFyIGQgPSB0cnVlOwoKICAgICAgICAgICAgcy5nID0gcy5jOwoKICAgICAgICAgICAgcy5jbGVhcigpOwoKICAgICAgICAgICAgcy5kSCAmJiAoZCA9IHMuZEgoKSk7CgogICAgICAgICAgICBkICE9PSBmYWxzZSAmJiBzLmRyYXcoKTsKICAgICAgICB9OwoKICAgICAgICB0aGlzLl90b3VjaCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciB0b3VjaE1vdmUgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgdmFyIHYgPSBzLnh5MnZhbCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUub3JpZ2luYWxFdmVudC50b3VjaGVzW3MudF0ucGFnZVgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLm9yaWdpbmFsRXZlbnQudG91Y2hlc1tzLnRdLnBhZ2VZCiAgICAgICAgICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgaWYgKHYgPT0gcy5jdikgcmV0dXJuOwoKICAgICAgICAgICAgICAgIGlmIChzLmNIICYmIHMuY0godikgPT09IGZhbHNlKSByZXR1cm47CgogICAgICAgICAgICAgICAgcy5jaGFuZ2Uocy5fdmFsaWRhdGUodikpOwogICAgICAgICAgICAgICAgcy5fZHJhdygpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy8gZ2V0IHRvdWNoZXMgaW5kZXgKICAgICAgICAgICAgdGhpcy50ID0gay5jLnQoZSk7CgogICAgICAgICAgICAvLyBGaXJzdCB0b3VjaAogICAgICAgICAgICB0b3VjaE1vdmUoZSk7CgogICAgICAgICAgICAvLyBUb3VjaCBldmVudHMgbGlzdGVuZXJzCiAgICAgICAgICAgIGsuYy5kCiAgICAgICAgICAgICAgICAuYmluZCgidG91Y2htb3ZlLmsiLCB0b3VjaE1vdmUpCiAgICAgICAgICAgICAgICAuYmluZCgKICAgICAgICAgICAgICAgICAgICAidG91Y2hlbmQuayIsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBrLmMuZC51bmJpbmQoJ3RvdWNobW92ZS5rIHRvdWNoZW5kLmsnKTsKICAgICAgICAgICAgICAgICAgICAgICAgcy52YWwocy5jdik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CgogICAgICAgIHRoaXMuX21vdXNlID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdmFyIG1vdXNlTW92ZSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICB2YXIgdiA9IHMueHkydmFsKGUucGFnZVgsIGUucGFnZVkpOwoKICAgICAgICAgICAgICAgIGlmICh2ID09IHMuY3YpIHJldHVybjsKCiAgICAgICAgICAgICAgICBpZiAocy5jSCAmJiAocy5jSCh2KSA9PT0gZmFsc2UpKSByZXR1cm47CgogICAgICAgICAgICAgICAgcy5jaGFuZ2Uocy5fdmFsaWRhdGUodikpOwogICAgICAgICAgICAgICAgcy5fZHJhdygpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy8gRmlyc3QgY2xpY2sKICAgICAgICAgICAgbW91c2VNb3ZlKGUpOwoKICAgICAgICAgICAgLy8gTW91c2UgZXZlbnRzIGxpc3RlbmVycwogICAgICAgICAgICBrLmMuZAogICAgICAgICAgICAgICAgLmJpbmQoIm1vdXNlbW92ZS5rIiwgbW91c2VNb3ZlKQogICAgICAgICAgICAgICAgLmJpbmQoCiAgICAgICAgICAgICAgICAgICAgLy8gRXNjYXBlIGtleSBjYW5jZWwgY3VycmVudCBjaGFuZ2UKICAgICAgICAgICAgICAgICAgICAia2V5dXAuayIsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsuYy5kLnVuYmluZCgibW91c2V1cC5rIG1vdXNlbW92ZS5rIGtleXVwLmsiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5lSCAmJiBzLmVIKCkgPT09IGZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmNhbmNlbCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmJpbmQoCiAgICAgICAgICAgICAgICAgICAgIm1vdXNldXAuayIsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgay5jLmQudW5iaW5kKCdtb3VzZW1vdmUuayBtb3VzZXVwLmsga2V5dXAuaycpOwogICAgICAgICAgICAgICAgICAgICAgICBzLnZhbChzLmN2KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5feHkgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBvID0gdGhpcy4kYy5vZmZzZXQoKTsKICAgICAgICAgICAgdGhpcy54ID0gby5sZWZ0OwogICAgICAgICAgICB0aGlzLnkgPSBvLnRvcDsKCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CgogICAgICAgIHRoaXMuX2xpc3RlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCF0aGlzLm8ucmVhZE9ubHkpIHsKICAgICAgICAgICAgICAgIHRoaXMuJGMKICAgICAgICAgICAgICAgICAgICAuYmluZCgKICAgICAgICAgICAgICAgICAgICAgICAgIm1vdXNlZG93biIsCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl94eSgpLl9tb3VzZShlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAuYmluZCgKICAgICAgICAgICAgICAgICAgICAgICAgInRvdWNoc3RhcnQiLAogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5feHkoKS5fdG91Y2goZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLiQuYXR0cigncmVhZG9ubHknLCAncmVhZG9ubHknKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRoaXMucmVsYXRpdmUpIHsKICAgICAgICAgICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcy5fY2FydmUoKS5pbml0KCk7CiAgICAgICAgICAgICAgICAgICAgcy5fZHJhdygpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CgogICAgICAgIHRoaXMuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgIC8vIEhvb2tzCiAgICAgICAgICAgIGlmICh0aGlzLm8uZHJhdykgdGhpcy5kSCA9IHRoaXMuby5kcmF3OwogICAgICAgICAgICBpZiAodGhpcy5vLmNoYW5nZSkgdGhpcy5jSCA9IHRoaXMuby5jaGFuZ2U7CiAgICAgICAgICAgIGlmICh0aGlzLm8uY2FuY2VsKSB0aGlzLmVIID0gdGhpcy5vLmNhbmNlbDsKICAgICAgICAgICAgaWYgKHRoaXMuby5yZWxlYXNlKSB0aGlzLnJIID0gdGhpcy5vLnJlbGVhc2U7CgogICAgICAgICAgICBpZiAodGhpcy5vLmRpc3BsYXlQcmV2aW91cykgewogICAgICAgICAgICAgICAgdGhpcy5wQ29sb3IgPSB0aGlzLmgycmdiYSh0aGlzLm8uZmdDb2xvciwgIjAuNCIpOwogICAgICAgICAgICAgICAgdGhpcy5mZ0NvbG9yID0gdGhpcy5oMnJnYmEodGhpcy5vLmZnQ29sb3IsICIwLjYiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZmdDb2xvciA9IHRoaXMuby5mZ0NvbG9yOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwoKICAgICAgICB0aGlzLl9jbGVhciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy4kY1swXS53aWR0aCA9IHRoaXMuJGNbMF0ud2lkdGg7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5fdmFsaWRhdGUgPSBmdW5jdGlvbiAodikgewogICAgICAgICAgICB2YXIgdmFsID0gKH5+ICgoKHYgPCAwKSA\/IC0wLjUgOiAwLjUpICsgKHYvdGhpcy5vLnN0ZXApKSkgKiB0aGlzLm8uc3RlcDsKICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsICogMTAwKSAvIDEwMDsKICAgICAgICB9OwoKICAgICAgICAvLyBBYnN0cmFjdCBtZXRob2RzCiAgICAgICAgdGhpcy5saXN0ZW4gPSBmdW5jdGlvbiAoKSB7fTsgLy8gb24gc3RhcnQsIG9uZSB0aW1lCiAgICAgICAgdGhpcy5leHRlbmQgPSBmdW5jdGlvbiAoKSB7fTsgLy8gZWFjaCB0aW1lIGNvbmZpZ3VyZSB0cmlnZ2VyZWQKICAgICAgICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7fTsgLy8gZWFjaCB0aW1lIGNvbmZpZ3VyZSB0cmlnZ2VyZWQKICAgICAgICB0aGlzLmNoYW5nZSA9IGZ1bmN0aW9uICh2KSB7fTsgLy8gb24gY2hhbmdlCiAgICAgICAgdGhpcy52YWwgPSBmdW5jdGlvbiAodikge307IC8vIG9uIHJlbGVhc2UKICAgICAgICB0aGlzLnh5MnZhbCA9IGZ1bmN0aW9uICh4LCB5KSB7fTsgLy8KICAgICAgICB0aGlzLmRyYXcgPSBmdW5jdGlvbiAoKSB7fTsgLy8gb24gY2hhbmdlIC8gb24gcmVsZWFzZQogICAgICAgIHRoaXMuY2xlYXIgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX2NsZWFyKCk7IH07CgogICAgICAgIC8vIFV0aWxzCiAgICAgICAgdGhpcy5oMnJnYmEgPSBmdW5jdGlvbiAoaCwgYSkgewogICAgICAgICAgICB2YXIgcmdiOwogICAgICAgICAgICBoID0gaC5zdWJzdHJpbmcoMSw3KQogICAgICAgICAgICByZ2IgPSBbCiAgICAgICAgICAgICAgICBwYXJzZUludChoLnN1YnN0cmluZygwLDIpLCAxNiksCiAgICAgICAgICAgICAgICBwYXJzZUludChoLnN1YnN0cmluZygyLDQpLCAxNiksCiAgICAgICAgICAgICAgICBwYXJzZUludChoLnN1YnN0cmluZyg0LDYpLCAxNikKICAgICAgICAgICAgXTsKCiAgICAgICAgICAgIHJldHVybiAicmdiYSgiICsgcmdiWzBdICsgIiwiICsgcmdiWzFdICsgIiwiICsgcmdiWzJdICsgIiwiICsgYSArICIpIjsKICAgICAgICB9OwoKICAgICAgICB0aGlzLmNvcHkgPSBmdW5jdGlvbiAoZiwgdCkgewogICAgICAgICAgICBmb3IgKHZhciBpIGluIGYpIHsKICAgICAgICAgICAgICAgIHRbaV0gPSBmW2ldOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH07CgoKICAgIC8qKgogICAgICogay5EaWFsCiAgICAgKi8KICAgIGsuRGlhbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBrLm8uY2FsbCh0aGlzKTsKCiAgICAgICAgdGhpcy5zdGFydEFuZ2xlID0gbnVsbDsKICAgICAgICB0aGlzLnh5ID0gbnVsbDsKICAgICAgICB0aGlzLnJhZGl1cyA9IG51bGw7CiAgICAgICAgdGhpcy5saW5lV2lkdGggPSBudWxsOwogICAgICAgIHRoaXMuY3Vyc29yRXh0ID0gbnVsbDsKICAgICAgICB0aGlzLncyID0gbnVsbDsKICAgICAgICB0aGlzLlBJMiA9IDIqTWF0aC5QSTsKCiAgICAgICAgdGhpcy5leHRlbmQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMubyA9ICQuZXh0ZW5kKHsKICAgICAgICAgICAgICAgIGJnQ29sb3I6IHRoaXMuJC5kYXRhKCdiZ2NvbG9yJykgfHwgJyNFRUVFRUUnLAogICAgICAgICAgICAgICAgYW5nbGVPZmZzZXQ6IHRoaXMuJC5kYXRhKCdhbmdsZW9mZnNldCcpIHx8IDAsCiAgICAgICAgICAgICAgICBhbmdsZUFyYzogdGhpcy4kLmRhdGEoJ2FuZ2xlYXJjJykgfHwgMzYwLAogICAgICAgICAgICAgICAgaW5saW5lOiB0cnVlCiAgICAgICAgICAgIH0sIHRoaXMubyk7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy52YWwgPSBmdW5jdGlvbiAodiwgdHJpZ2dlclJlbGVhc2UpIHsKICAgICAgICAgICAgaWYgKG51bGwgIT0gdikgewoKICAgICAgICAgICAgICAgIC8vIHJldmVyc2UgZm9ybWF0CiAgICAgICAgICAgICAgICB2ID0gdGhpcy5vLnBhcnNlKHYpOwoKICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyUmVsZWFzZSAhPT0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAmJiB2ICE9IHRoaXMudgogICAgICAgICAgICAgICAgICAgICYmIHRoaXMuckgKICAgICAgICAgICAgICAgICAgICAmJiB0aGlzLnJIKHYpID09PSBmYWxzZSkgeyByZXR1cm47IH0KCiAgICAgICAgICAgICAgICB0aGlzLmN2ID0gdGhpcy5vLnN0b3BwZXIgPyBtYXgobWluKHYsIHRoaXMuby5tYXgpLCB0aGlzLm8ubWluKSA6IHY7CiAgICAgICAgICAgICAgICB0aGlzLnYgPSB0aGlzLmN2OwogICAgICAgICAgICAgICAgdGhpcy4kLnZhbCh0aGlzLm8uZm9ybWF0KHRoaXMudikpOwogICAgICAgICAgICAgICAgdGhpcy5fZHJhdygpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudjsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHRoaXMueHkydmFsID0gZnVuY3Rpb24gKHgsIHkpIHsKICAgICAgICAgICAgdmFyIGEsIHJldDsKCiAgICAgICAgICAgIGEgPSBNYXRoLmF0YW4yKAogICAgICAgICAgICAgICAgICAgICAgICB4IC0gKHRoaXMueCArIHRoaXMudzIpLAogICAgICAgICAgICAgICAgICAgICAgICAtICh5IC0gdGhpcy55IC0gdGhpcy53MikKICAgICAgICAgICAgICAgICAgICApIC0gdGhpcy5hbmdsZU9mZnNldDsKCiAgICAgICAgICAgIGlmICh0aGlzLm8uZmxpcCkgewogICAgICAgICAgICAgICAgYSA9IHRoaXMuYW5nbGVBcmMgLSBhIC0gdGhpcy5QSTI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aGlzLmFuZ2xlQXJjICE9IHRoaXMuUEkyICYmIChhIDwgMCkgJiYgKGEgPiAtMC41KSkgewoKICAgICAgICAgICAgICAgIC8vIGlmIGlzc2V0IGFuZ2xlQXJjIG9wdGlvbiwgc2V0IHRvIG1pbiBpZiAuNSB1bmRlciBtaW4KICAgICAgICAgICAgICAgIGEgPSAwOwogICAgICAgICAgICB9IGVsc2UgaWYgKGEgPCAwKSB7CiAgICAgICAgICAgICAgICBhICs9IHRoaXMuUEkyOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXQgPSAoYSAqICh0aGlzLm8ubWF4IC0gdGhpcy5vLm1pbikgLyB0aGlzLmFuZ2xlQXJjKSArIHRoaXMuby5taW47CgogICAgICAgICAgICB0aGlzLm8uc3RvcHBlciAmJiAocmV0ID0gbWF4KG1pbihyZXQsIHRoaXMuby5tYXgpLCB0aGlzLm8ubWluKSk7CgogICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgIH07CgogICAgICAgIHRoaXMubGlzdGVuID0gZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgLy8gYmluZCBNb3VzZVdoZWVsCiAgICAgICAgICAgIHZhciBzID0gdGhpcywgbXdUaW1lclN0b3AsCiAgICAgICAgICAgICAgICBtd1RpbWVyUmVsZWFzZSwKICAgICAgICAgICAgICAgIG13ID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICAgICAgICAgIHZhciBvcmkgPSBlLm9yaWdpbmFsRXZlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhWCA9IG9yaS5kZXRhaWwgfHwgb3JpLndoZWVsRGVsdGFYLAogICAgICAgICAgICAgICAgICAgICAgICBkZWx0YVkgPSBvcmkuZGV0YWlsIHx8IG9yaS53aGVlbERlbHRhWSwKICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHMuX3ZhbGlkYXRlKHMuby5wYXJzZShzLiQudmFsKCkpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFYID4gMCB8fCBkZWx0YVkgPiAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzLm8uc3RlcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZGVsdGFYIDwgMCB8fCBkZWx0YVkgPCAwID8gLXMuby5zdGVwIDogMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgICAgICB2ID0gbWF4KG1pbih2LCBzLm8ubWF4KSwgcy5vLm1pbik7CgogICAgICAgICAgICAgICAgICAgIHMudmFsKHYsIGZhbHNlKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHMuckgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIG1vdXNld2hlZWwgc3RvcAogICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobXdUaW1lclN0b3ApOwogICAgICAgICAgICAgICAgICAgICAgICBtd1RpbWVyU3RvcCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5ySCh2KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13VGltZXJTdG9wID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBtb3VzZXdoZWVsIHJlbGVhc2VzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbXdUaW1lclJlbGVhc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13VGltZXJSZWxlYXNlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG13VGltZXJTdG9wKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnJIKHYpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG13VGltZXJSZWxlYXNlID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAga3ZhbCwKICAgICAgICAgICAgICAgIHRvLAogICAgICAgICAgICAgICAgbSA9IDEsCiAgICAgICAgICAgICAgICBrdiA9IHsKICAgICAgICAgICAgICAgICAgICAzNzogLXMuby5zdGVwLAogICAgICAgICAgICAgICAgICAgIDM4OiBzLm8uc3RlcCwKICAgICAgICAgICAgICAgICAgICAzOTogcy5vLnN0ZXAsCiAgICAgICAgICAgICAgICAgICAgNDA6IC1zLm8uc3RlcAogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHRoaXMuJAogICAgICAgICAgICAgICAgLmJpbmQoCiAgICAgICAgICAgICAgICAgICAgImtleWRvd24iLAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrYyA9IGUua2V5Q29kZTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG51bXBhZCBzdXBwb3J0CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrYyA+PSA5NiAmJiBrYyA8PSAxMDUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtjID0gZS5rZXlDb2RlID0ga2MgLSA0ODsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAga3ZhbCA9IHBhcnNlSW50KFN0cmluZy5mcm9tQ2hhckNvZGUoa2MpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihrdmFsKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGtjICE9PSAxMykgICAgICAgICAgICAgICAgICAgICAvLyBlbnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYga2MgIT09IDggICAgICAgICAgICAgICAgICAgICAvLyBicwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYga2MgIT09IDkgICAgICAgICAgICAgICAgICAgICAvLyB0YWIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGtjICE9PSAxODkgICAgICAgICAgICAgICAgICAgLy8gLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKGtjICE9PSAxOTAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBzLiQudmFsKCkubWF0Y2goL1wuLykpICAgLy8gLiBhbGxvd2VkIG9uY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGUucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhcnJvd3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoa2MsWzM3LDM4LDM5LDQwXSkgPiAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSBzLm8ucGFyc2Uocy4kLnZhbCgpKSArIGt2W2tjXSAqIG07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5vLnN0b3BwZXIgJiYgKHYgPSBtYXgobWluKHYsIHMuby5tYXgpLCBzLm8ubWluKSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuY2hhbmdlKHMuX3ZhbGlkYXRlKHYpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl9kcmF3KCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvbmcgdGltZSBrZXlkb3duIHNwZWVkLXVwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gKj0gMjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYmluZCgKICAgICAgICAgICAgICAgICAgICAia2V5dXAiLAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihrdmFsKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0byk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSAxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMudmFsKHMuJC52YWwoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBrdmFsIHBvc3Rjb25kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocy4kLnZhbCgpID4gcy5vLm1heCAmJiBzLiQudmFsKHMuby5tYXgpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKHMuJC52YWwoKSA8IHMuby5taW4gJiYgcy4kLnZhbChzLm8ubWluKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgdGhpcy4kYy5iaW5kKCJtb3VzZXdoZWVsIERPTU1vdXNlU2Nyb2xsIiwgbXcpOwogICAgICAgICAgICB0aGlzLiQuYmluZCgibW91c2V3aGVlbCBET01Nb3VzZVNjcm9sbCIsIG13KQogICAgICAgIH07CgogICAgICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHRoaXMudiA8IHRoaXMuby5taW4KICAgICAgICAgICAgICAgIHx8IHRoaXMudiA+IHRoaXMuby5tYXgpIHsgdGhpcy52ID0gdGhpcy5vLm1pbjsgfQoKICAgICAgICAgICAgdGhpcy4kLnZhbCh0aGlzLnYpOwogICAgICAgICAgICB0aGlzLncyID0gdGhpcy53IC8gMjsKICAgICAgICAgICAgdGhpcy5jdXJzb3JFeHQgPSB0aGlzLm8uY3Vyc29yIC8gMTAwOwogICAgICAgICAgICB0aGlzLnh5ID0gdGhpcy53MiAqIHRoaXMuc2NhbGU7CiAgICAgICAgICAgIHRoaXMubGluZVdpZHRoID0gdGhpcy54eSAqIHRoaXMuby50aGlja25lc3M7CiAgICAgICAgICAgIHRoaXMubGluZUNhcCA9IHRoaXMuby5saW5lQ2FwOwogICAgICAgICAgICB0aGlzLnJhZGl1cyA9IHRoaXMueHkgLSB0aGlzLmxpbmVXaWR0aCAvIDI7CgogICAgICAgICAgICB0aGlzLm8uYW5nbGVPZmZzZXQKICAgICAgICAgICAgJiYgKHRoaXMuby5hbmdsZU9mZnNldCA9IGlzTmFOKHRoaXMuby5hbmdsZU9mZnNldCkgPyAwIDogdGhpcy5vLmFuZ2xlT2Zmc2V0KTsKCiAgICAgICAgICAgIHRoaXMuby5hbmdsZUFyYwogICAgICAgICAgICAmJiAodGhpcy5vLmFuZ2xlQXJjID0gaXNOYU4odGhpcy5vLmFuZ2xlQXJjKSA\/IHRoaXMuUEkyIDogdGhpcy5vLmFuZ2xlQXJjKTsKCiAgICAgICAgICAgIC8vIGRlZyB0byByYWQKICAgICAgICAgICAgdGhpcy5hbmdsZU9mZnNldCA9IHRoaXMuby5hbmdsZU9mZnNldCAqIE1hdGguUEkgLyAxODA7CiAgICAgICAgICAgIHRoaXMuYW5nbGVBcmMgPSB0aGlzLm8uYW5nbGVBcmMgKiBNYXRoLlBJIC8gMTgwOwoKICAgICAgICAgICAgLy8gY29tcHV0ZSBzdGFydCBhbmQgZW5kIGFuZ2xlcwogICAgICAgICAgICB0aGlzLnN0YXJ0QW5nbGUgPSAxLjUgKiBNYXRoLlBJICsgdGhpcy5hbmdsZU9mZnNldDsKICAgICAgICAgICAgdGhpcy5lbmRBbmdsZSA9IDEuNSAqIE1hdGguUEkgKyB0aGlzLmFuZ2xlT2Zmc2V0ICsgdGhpcy5hbmdsZUFyYzsKCiAgICAgICAgICAgIHZhciBzID0gbWF4KAogICAgICAgICAgICAgICAgU3RyaW5nKE1hdGguYWJzKHRoaXMuby5tYXgpKS5sZW5ndGgsCiAgICAgICAgICAgICAgICBTdHJpbmcoTWF0aC5hYnModGhpcy5vLm1pbikpLmxlbmd0aCwKICAgICAgICAgICAgICAgIDIKICAgICAgICAgICAgKSArIDI7CgogICAgICAgICAgICB0aGlzLm8uZGlzcGxheUlucHV0CiAgICAgICAgICAgICAgICAmJiB0aGlzLmkuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJyA6ICgodGhpcy53IC8gMiArIDQpID4+IDApICsgJ3B4JywKICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCcgOiAoKHRoaXMudyAvIDMpID4+IDApICsgJ3B4JywKICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJyA6ICdhYnNvbHV0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICd2ZXJ0aWNhbC1hbGlnbicgOiAnbWlkZGxlJywKICAgICAgICAgICAgICAgICAgICAgICAgJ21hcmdpbi10b3AnIDogKCh0aGlzLncgLyAzKSA+PiAwKSArICdweCcsCiAgICAgICAgICAgICAgICAgICAgICAgICdtYXJnaW4tbGVmdCcgOiAnLScgKyAoKHRoaXMudyAqIDMgLyA0ICsgMikgPj4gMCkgKyAncHgnLAogICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVyJyA6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kJyA6ICdub25lJywKICAgICAgICAgICAgICAgICAgICAgICAgJ2ZvbnQnIDogdGhpcy5vLmZvbnRXZWlnaHQgKyAnICcgKyAoKHRoaXMudyAvIHMpID4+IDApICsgJ3B4ICcgKyB0aGlzLm8uZm9udCwKICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtYWxpZ24nIDogJ2NlbnRlcicsCiAgICAgICAgICAgICAgICAgICAgICAgICdjb2xvcicgOiB0aGlzLm8uaW5wdXRDb2xvciB8fCB0aGlzLm8uZmdDb2xvciwKICAgICAgICAgICAgICAgICAgICAgICAgJ3BhZGRpbmcnIDogJzBweCcsCiAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZScKICAgICAgICAgICAgICAgICAgICAgICAgfSkgfHwgdGhpcy5pLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMHB4JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJ2hpZGRlbicKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5jaGFuZ2UgPSBmdW5jdGlvbiAodikgewogICAgICAgICAgICB0aGlzLmN2ID0gdjsKICAgICAgICAgICAgdGhpcy4kLnZhbCh0aGlzLm8uZm9ybWF0KHYpKTsKICAgICAgICB9OwoKICAgICAgICB0aGlzLmFuZ2xlID0gZnVuY3Rpb24gKHYpIHsKICAgICAgICAgICAgcmV0dXJuICh2IC0gdGhpcy5vLm1pbikgKiB0aGlzLmFuZ2xlQXJjIC8gKHRoaXMuby5tYXggLSB0aGlzLm8ubWluKTsKICAgICAgICB9OwoKICAgICAgICB0aGlzLmFyYyA9IGZ1bmN0aW9uICh2KSB7CiAgICAgICAgICB2YXIgc2EsIGVhOwogICAgICAgICAgdiA9IHRoaXMuYW5nbGUodik7CiAgICAgICAgICBpZiAodGhpcy5vLmZsaXApIHsKICAgICAgICAgICAgICBzYSA9IHRoaXMuZW5kQW5nbGUgKyAwLjAwMDAxOwogICAgICAgICAgICAgIGVhID0gc2EgLSB2IC0gMC4wMDAwMTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc2EgPSB0aGlzLnN0YXJ0QW5nbGUgLSAwLjAwMDAxOwogICAgICAgICAgICAgIGVhID0gc2EgKyB2ICsgMC4wMDAwMTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuby5jdXJzb3IKICAgICAgICAgICAgICAmJiAoc2EgPSBlYSAtIHRoaXMuY3Vyc29yRXh0KQogICAgICAgICAgICAgICYmIChlYSA9IGVhICsgdGhpcy5jdXJzb3JFeHQpOwoKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgczogc2EsCiAgICAgICAgICAgICAgZTogZWEsCiAgICAgICAgICAgICAgZDogdGhpcy5vLmZsaXAgJiYgIXRoaXMuby5jdXJzb3IKICAgICAgICAgIH07CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5kcmF3ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMuZywgICAgICAgICAgICAgICAgIC8vIGNvbnRleHQKICAgICAgICAgICAgICAgIGEgPSB0aGlzLmFyYyh0aGlzLmN2KSwgICAgICAvLyBBcmMKICAgICAgICAgICAgICAgIHBhLCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmV2aW91cyBhcmMKICAgICAgICAgICAgICAgIHIgPSAxOwoKICAgICAgICAgICAgYy5saW5lV2lkdGggPSB0aGlzLmxpbmVXaWR0aDsKICAgICAgICAgICAgYy5saW5lQ2FwID0gdGhpcy5saW5lQ2FwOwoKICAgICAgICAgICAgaWYgKHRoaXMuby5iZ0NvbG9yICE9PSAibm9uZSIpIHsKICAgICAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7CiAgICAgICAgICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9IHRoaXMuby5iZ0NvbG9yOwogICAgICAgICAgICAgICAgICAgIGMuYXJjKHRoaXMueHksIHRoaXMueHksIHRoaXMucmFkaXVzLCB0aGlzLmVuZEFuZ2xlIC0gMC4wMDAwMSwgdGhpcy5zdGFydEFuZ2xlICsgMC4wMDAwMSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBjLnN0cm9rZSgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodGhpcy5vLmRpc3BsYXlQcmV2aW91cykgewogICAgICAgICAgICAgICAgcGEgPSB0aGlzLmFyYyh0aGlzLnYpOwogICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTsKICAgICAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSB0aGlzLnBDb2xvcjsKICAgICAgICAgICAgICAgIGMuYXJjKHRoaXMueHksIHRoaXMueHksIHRoaXMucmFkaXVzLCBwYS5zLCBwYS5lLCBwYS5kKTsKICAgICAgICAgICAgICAgIGMuc3Ryb2tlKCk7CiAgICAgICAgICAgICAgICByID0gdGhpcy5jdiA9PSB0aGlzLnY7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7CiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSByID8gdGhpcy5vLmZnQ29sb3IgOiB0aGlzLmZnQ29sb3IgOwogICAgICAgICAgICBjLmFyYyh0aGlzLnh5LCB0aGlzLnh5LCB0aGlzLnJhZGl1cywgYS5zLCBhLmUsIGEuZCk7CiAgICAgICAgICAgIGMuc3Ryb2tlKCk7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMudmFsKHRoaXMudik7CiAgICAgICAgfTsKICAgIH07CgogICAgJC5mbi5kaWFsID0gJC5mbi5rbm9iID0gZnVuY3Rpb24gKG8pIHsKICAgICAgICByZXR1cm4gdGhpcy5lYWNoKAogICAgICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBrLkRpYWwoKTsKICAgICAgICAgICAgICAgIGQubyA9IG87CiAgICAgICAgICAgICAgICBkLiQgPSAkKHRoaXMpOwogICAgICAgICAgICAgICAgZC5ydW4oKTsKICAgICAgICAgICAgfQogICAgICAgICkucGFyZW50KCk7CiAgICB9OwoKfSkpOw==",
    "size": "26221"
}