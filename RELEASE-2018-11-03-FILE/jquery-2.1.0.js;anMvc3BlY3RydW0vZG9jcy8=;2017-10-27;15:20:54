{
    "namaFile": "js\/spectrum\/docs\/jquery-2.1.0.js",
    "lastUpdate": "2017-10-27+15:20:54.68",
    "contentFile": "LyohCiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjIuMS4wCiAqIGh0dHA6Ly9qcXVlcnkuY29tLwogKgogKiBJbmNsdWRlcyBTaXp6bGUuanMKICogaHR0cDovL3NpenpsZWpzLmNvbS8KICoKICogQ29weXJpZ2h0IDIwMDUsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UKICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBEYXRlOiAyMDE0LTAxLTIzVDIxOjEwWgogKi8KCihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkgewoKICBpZiAoIHR5cGVvZiBtb2R1bGUgPT09ICJvYmplY3QiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gIm9iamVjdCIgKSB7CiAgICAvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIHdpbmRvdyBpcyBwcmVzZW50LAogICAgLy8gZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeQogICAgLy8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBpbmhlcmVudGx5IHBvc3NlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQKICAgIC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBqUXVlcnktbWFraW5nIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMKICAgIC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgd2luZG93CiAgICAvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKCJqcXVlcnkiKSh3aW5kb3cpOwogICAgLy8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mbwogICAgbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgPwogICAgICBmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6CiAgICAgIGZ1bmN0aW9uKCB3ICkgewogICAgICAgIGlmICggIXcuZG9jdW1lbnQgKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50IiApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFjdG9yeSggdyApOwogICAgICB9OwogIH0gZWxzZSB7CiAgICBmYWN0b3J5KCBnbG9iYWwgKTsKICB9CgovLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldAp9KHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7CgovLyBDYW4ndCBkbyB0aGlzIGJlY2F1c2Ugc2V2ZXJhbCBhcHBzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlCi8vIHRoZSBzdGFjayB2aWEgYXJndW1lbnRzLmNhbGxlci5jYWxsZWUgYW5kIEZpcmVmb3ggZGllcyBpZgovLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggInVzZSBzdHJpY3QiIGNhbGwgY2hhaW5zLiAoIzEzMzM1KQovLyBTdXBwb3J0OiBGaXJlZm94IDE4KwovLwoKdmFyIGFyciA9IFtdOwoKdmFyIHNsaWNlID0gYXJyLnNsaWNlOwoKdmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7Cgp2YXIgcHVzaCA9IGFyci5wdXNoOwoKdmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjsKCnZhciBjbGFzczJ0eXBlID0ge307Cgp2YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nOwoKdmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7Cgp2YXIgdHJpbSA9ICIiLnRyaW07Cgp2YXIgc3VwcG9ydCA9IHt9OwoKCgp2YXIKICAvLyBVc2UgdGhlIGNvcnJlY3QgZG9jdW1lbnQgYWNjb3JkaW5nbHkgd2l0aCB3aW5kb3cgYXJndW1lbnQgKHNhbmRib3gpCiAgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsCgogIHZlcnNpb24gPSAiMi4xLjAiLAoKICAvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeQogIGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHsKICAgIC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJwogICAgLy8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZCkKICAgIHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7CiAgfSwKCiAgLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nCiAgcm1zUHJlZml4ID0gL14tbXMtLywKICByZGFzaEFscGhhID0gLy0oW1xkYS16XSkvZ2ksCgogIC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKCkKICBmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkgewogICAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpOwogIH07CgpqUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0gewogIC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWQKICBqcXVlcnk6IHZlcnNpb24sCgogIGNvbnN0cnVjdG9yOiBqUXVlcnksCgogIC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3IKICBzZWxlY3RvcjogIiIsCgogIC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMAogIGxlbmd0aDogMCwKCiAgdG9BcnJheTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApOwogIH0sCgogIC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1IKICAvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheQogIGdldDogZnVuY3Rpb24oIG51bSApIHsKICAgIHJldHVybiBudW0gIT0gbnVsbCA\/CgogICAgICAvLyBSZXR1cm4gYSAnY2xlYW4nIGFycmF5CiAgICAgICggbnVtIDwgMCA\/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXSApIDoKCiAgICAgIC8vIFJldHVybiBqdXN0IHRoZSBvYmplY3QKICAgICAgc2xpY2UuY2FsbCggdGhpcyApOwogIH0sCgogIC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2sKICAvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldCkKICBwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHsKCiAgICAvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldAogICAgdmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApOwoKICAgIC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpCiAgICByZXQucHJldk9iamVjdCA9IHRoaXM7CiAgICByZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDsKCiAgICAvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldAogICAgcmV0dXJuIHJldDsKICB9LAoKICAvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LgogIC8vIChZb3UgY2FuIHNlZWQgdGhlIGFyZ3VtZW50cyB3aXRoIGFuIGFycmF5IG9mIGFyZ3MsIGJ1dCB0aGlzIGlzCiAgLy8gb25seSB1c2VkIGludGVybmFsbHkuKQogIGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXJncyApIHsKICAgIHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTsKICB9LAoKICBtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHsKICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCh0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHsKICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTsKICAgIH0pKTsKICB9LAoKICBzbGljZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApOwogIH0sCgogIGZpcnN0OiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmVxKCAwICk7CiAgfSwKCiAgbGFzdDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5lcSggLTEgKTsKICB9LAoKICBlcTogZnVuY3Rpb24oIGkgKSB7CiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGgsCiAgICAgIGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7CiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzW2pdIF0gOiBbXSApOwogIH0sCgogIGVuZDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IobnVsbCk7CiAgfSwKCiAgLy8gRm9yIGludGVybmFsIHVzZSBvbmx5LgogIC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLgogIHB1c2g6IHB1c2gsCiAgc29ydDogYXJyLnNvcnQsCiAgc3BsaWNlOiBhcnIuc3BsaWNlCn07CgpqUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkgewogIHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSwKICAgIHRhcmdldCA9IGFyZ3VtZW50c1swXSB8fCB7fSwKICAgIGkgPSAxLAogICAgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCwKICAgIGRlZXAgPSBmYWxzZTsKCiAgLy8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvbgogIGlmICggdHlwZW9mIHRhcmdldCA9PT0gImJvb2xlYW4iICkgewogICAgZGVlcCA9IHRhcmdldDsKCiAgICAvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0CiAgICB0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTsKICAgIGkrKzsKICB9CgogIC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KQogIGlmICggdHlwZW9mIHRhcmdldCAhPT0gIm9iamVjdCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKHRhcmdldCkgKSB7CiAgICB0YXJnZXQgPSB7fTsKICB9CgogIC8vIGV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZAogIGlmICggaSA9PT0gbGVuZ3RoICkgewogICAgdGFyZ2V0ID0gdGhpczsKICAgIGktLTsKICB9CgogIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkgewogICAgLy8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlcwogICAgaWYgKCAob3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdKSAhPSBudWxsICkgewogICAgICAvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0CiAgICAgIGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHsKICAgICAgICBzcmMgPSB0YXJnZXRbIG5hbWUgXTsKICAgICAgICBjb3B5ID0gb3B0aW9uc1sgbmFtZSBdOwoKICAgICAgICAvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wCiAgICAgICAgaWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5cwogICAgICAgIGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoY29weSkpICkgKSB7CiAgICAgICAgICBpZiAoIGNvcHlJc0FycmF5ICkgewogICAgICAgICAgICBjb3B5SXNBcnJheSA9IGZhbHNlOwogICAgICAgICAgICBjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheShzcmMpID8gc3JjIDogW107CgogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3Qoc3JjKSA\\/OlxcXFwufFtcXHctXXxbXlxceDAwLVxceGEwXSkrIiwKCiAgLy8gTG9vc2VseSBtb2RlbGVkIG9uIENTUyBpZGVudGlmaWVyIGNoYXJhY3RlcnMKICAvLyBBbiB1bnF1b3RlZCB2YWx1ZSBzaG91bGQgYmUgYSBDU1MgaWRlbnRpZmllciBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9ycwogIC8vIFByb3BlciBzeW50YXg6IGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllcgogIGlkZW50aWZpZXIgPSBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCAidyIsICJ3IyIgKSwKCiAgLy8gQWNjZXB0YWJsZSBvcGVyYXRvcnMgaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzCiAgYXR0cmlidXRlcyA9ICJcXFsiICsgd2hpdGVzcGFjZSArICIqKCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArICIpIiArIHdoaXRlc3BhY2UgKwogICAgIiooPzooWypeJHwhfl0\/PSkiICsgd2hpdGVzcGFjZSArICIqKD86KFsnXCJdKSgoPzpcXFxcLnxbXlxcXFxdKSo\/KVxcM3woIiArIGlkZW50aWZpZXIgKyAiKXwpfCkiICsgd2hpdGVzcGFjZSArICIqXFxdIiwKCiAgLy8gUHJlZmVyIGFyZ3VtZW50cyBxdW90ZWQsCiAgLy8gICB0aGVuIG5vdCBjb250YWluaW5nIHBzZXVkb3MvYnJhY2tldHMsCiAgLy8gICB0aGVuIGF0dHJpYnV0ZSBzZWxlY3RvcnMvbm9uLXBhcmVudGhldGljYWwgZXhwcmVzc2lvbnMsCiAgLy8gICB0aGVuIGFueXRoaW5nIGVsc2UKICAvLyBUaGVzZSBwcmVmZXJlbmNlcyBhcmUgaGVyZSB0byByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMKICAvLyAgIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIFBTRVVETyBwcmVGaWx0ZXIKICBwc2V1ZG9zID0gIjooIiArIGNoYXJhY3RlckVuY29kaW5nICsgIikoPzpcXCgoKFsnXCJdKSgoPzpcXFxcLnxbXlxcXFxdKSo\/KVxcM3woKD86XFxcXC58W15cXFxcKClbXFxdXXwiICsgYXR0cmlidXRlcy5yZXBsYWNlKCAzLCA4ICkgKyAiKSopfC4qKVxcKXwpIiwKCiAgLy8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlcgogIHJ0cmltID0gbmV3IFJlZ0V4cCggIl4iICsgd2hpdGVzcGFjZSArICIrfCgoPzpefFteXFxcXF0pKD86XFxcXC4pKikiICsgd2hpdGVzcGFjZSArICIrJCIsICJnIiApLAoKICByY29tbWEgPSBuZXcgUmVnRXhwKCAiXiIgKyB3aGl0ZXNwYWNlICsgIiosIiArIHdoaXRlc3BhY2UgKyAiKiIgKSwKICByY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCAiXiIgKyB3aGl0ZXNwYWNlICsgIiooWz4rfl18IiArIHdoaXRlc3BhY2UgKyAiKSIgKyB3aGl0ZXNwYWNlICsgIioiICksCgogIHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCAiPSIgKyB3aGl0ZXNwYWNlICsgIiooW15cXF0nXCJdKj8pIiArIHdoaXRlc3BhY2UgKyAiKlxcXSIsICJnIiApLAoKICBycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLAogIHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggIl4iICsgaWRlbnRpZmllciArICIkIiApLAoKICBtYXRjaEV4cHIgPSB7CiAgICAiSUQiOiBuZXcgUmVnRXhwKCAiXiMoIiArIGNoYXJhY3RlckVuY29kaW5nICsgIikiICksCiAgICAiQ0xBU1MiOiBuZXcgUmVnRXhwKCAiXlxcLigiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyAiKSIgKSwKICAgICJUQUciOiBuZXcgUmVnRXhwKCAiXigiICsgY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggInciLCAidyoiICkgKyAiKSIgKSwKICAgICJBVFRSIjogbmV3IFJlZ0V4cCggIl4iICsgYXR0cmlidXRlcyApLAogICAgIlBTRVVETyI6IG5ldyBSZWdFeHAoICJeIiArIHBzZXVkb3MgKSwKICAgICJDSElMRCI6IG5ldyBSZWdFeHAoICJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXCgiICsgd2hpdGVzcGFjZSArCiAgICAgICIqKGV2ZW58b2RkfCgoWystXXwpKFxcZCopbnwpIiArIHdoaXRlc3BhY2UgKyAiKig\/OihbKy1dfCkiICsgd2hpdGVzcGFjZSArCiAgICAgICIqKFxcZCspfCkpIiArIHdoaXRlc3BhY2UgKyAiKlxcKXwpIiwgImkiICksCiAgICAiYm9vbCI6IG5ldyBSZWdFeHAoICJeKD86IiArIGJvb2xlYW5zICsgIikkIiwgImkiICksCiAgICAvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKCkKICAgIC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGAKICAgICJuZWVkc0NvbnRleHQiOiBuZXcgUmVnRXhwKCAiXiIgKyB3aGl0ZXNwYWNlICsgIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg\/OlxcKCIgKwogICAgICB3aGl0ZXNwYWNlICsgIiooKD86LVxcZCk\/XFxkKikiICsgd2hpdGVzcGFjZSArICIqXFwpfCkoPz1bXi1dfCQpIiwgImkiICkKICB9LAoKICByaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSwKICByaGVhZGVyID0gL15oXGQkL2ksCgogIHJuYXRpdmUgPSAvXltee10rXHtccypcW25hdGl2ZSBcdy8sCgogIC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9ycwogIHJxdWlja0V4cHIgPSAvXig\/OiMoW1x3LV0rKXwoXHcrKXxcLihbXHctXSspKSQvLAoKICByc2libGluZyA9IC9bK35dLywKICByZXNjYXBlID0gLyd8XFwvZywKCiAgLy8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVycwogIHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoICJcXFxcKFtcXGRhLWZdezEsNn0iICsgd2hpdGVzcGFjZSArICI\/fCgiICsgd2hpdGVzcGFjZSArICIpfC4pIiwgImlnIiApLAogIGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHsKICAgIHZhciBoaWdoID0gIjB4IiArIGVzY2FwZWQgLSAweDEwMDAwOwogICAgLy8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnQKICAgIC8vIFN1cHBvcnQ6IEZpcmVmb3gKICAgIC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgKyIweCIKICAgIHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID8KICAgICAgZXNjYXBlZCA6CiAgICAgIGhpZ2ggPCAwID8KICAgICAgICAvLyBCTVAgY29kZXBvaW50CiAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6CiAgICAgICAgLy8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpCiAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7CiAgfTsKCi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApCnRyeSB7CiAgcHVzaC5hcHBseSgKICAgIChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSwKICAgIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzCiAgKTsKICAvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMAogIC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHkKICBhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlOwp9IGNhdGNoICggZSApIHsKICBwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA\\/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gIkhUTUwiIDogZmFsc2U7Cn07CgovKioKICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50CiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50CiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnQKICovCnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7CiAgdmFyIGhhc0NvbXBhcmUsCiAgICBkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2MsCiAgICBwYXJlbnQgPSBkb2MuZGVmYXVsdFZpZXc7CgogIC8vIElmIG5vIGRvY3VtZW50IGFuZCBkb2N1bWVudEVsZW1lbnQgaXMgYXZhaWxhYmxlLCByZXR1cm4KICBpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkgewogICAgcmV0dXJuIGRvY3VtZW50OwogIH0KCiAgLy8gU2V0IG91ciBkb2N1bWVudAogIGRvY3VtZW50ID0gZG9jOwogIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50OwoKICAvLyBTdXBwb3J0IHRlc3RzCiAgZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvYyApOwoKICAvLyBTdXBwb3J0OiBJRT44CiAgLy8gSWYgaWZyYW1lIGRvY3VtZW50IGlzIGFzc2lnbmVkIHRvICJkb2N1bWVudCIgdmFyaWFibGUgYW5kIGlmIGlmcmFtZSBoYXMgYmVlbiByZWxvYWRlZCwKICAvLyBJRSB3aWxsIHRocm93ICJwZXJtaXNzaW9uIGRlbmllZCIgZXJyb3Igd2hlbiBhY2Nlc3NpbmcgImRvY3VtZW50IiB2YXJpYWJsZSwgc2VlIGpRdWVyeSAjMTM5MzYKICAvLyBJRTYtOCBkbyBub3Qgc3VwcG9ydCB0aGUgZGVmYXVsdFZpZXcgcHJvcGVydHkgc28gcGFyZW50IHdpbGwgYmUgdW5kZWZpbmVkCiAgaWYgKCBwYXJlbnQgJiYgcGFyZW50ICE9PSBwYXJlbnQudG9wICkgewogICAgLy8gSUUxMSBkb2VzIG5vdCBoYXZlIGF0dGFjaEV2ZW50LCBzbyBhbGwgbXVzdCBzdWZmZXIKICAgIGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7CiAgICAgIHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCAidW5sb2FkIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgc2V0RG9jdW1lbnQoKTsKICAgICAgfSwgZmFsc2UgKTsKICAgIH0gZWxzZSBpZiAoIHBhcmVudC5hdHRhY2hFdmVudCApIHsKICAgICAgcGFyZW50LmF0dGFjaEV2ZW50KCAib251bmxvYWQiLCBmdW5jdGlvbigpIHsKICAgICAgICBzZXREb2N1bWVudCgpOwogICAgICB9KTsKICAgIH0KICB9CgogIC8qIEF0dHJpYnV0ZXMKICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovCgogIC8vIFN1cHBvcnQ6IElFPDgKICAvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXMgKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpCiAgc3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7CiAgICBkaXYuY2xhc3NOYW1lID0gImkiOwogICAgcmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKCJjbGFzc05hbWUiKTsKICB9KTsKCiAgLyogZ2V0RWxlbWVudChzKUJ5KgogIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KCiAgLy8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKSByZXR1cm5zIG9ubHkgZWxlbWVudHMKICBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7CiAgICBkaXYuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVDb21tZW50KCIiKSApOwogICAgcmV0dXJuICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKS5sZW5ndGg7CiAgfSk7CgogIC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlDbGFzc05hbWUgY2FuIGJlIHRydXN0ZWQKICBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkgJiYgYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7CiAgICBkaXYuaW5uZXJIVE1MID0gIjxkaXYgY2xhc3M9J2EnPjwvZGl2PjxkaXYgY2xhc3M9J2EgaSc+PC9kaXY+IjsKCiAgICAvLyBTdXBwb3J0OiBTYWZhcmk8NAogICAgLy8gQ2F0Y2ggY2xhc3Mgb3Zlci1jYWNoaW5nCiAgICBkaXYuZmlyc3RDaGlsZC5jbGFzc05hbWUgPSAiaSI7CiAgICAvLyBTdXBwb3J0OiBPcGVyYTwxMAogICAgLy8gQ2F0Y2ggZ0VCQ04gZmFpbHVyZSB0byBmaW5kIG5vbi1sZWFkaW5nIGNsYXNzZXMKICAgIHJldHVybiBkaXYuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiaSIpLmxlbmd0aCA9PT0gMjsKICB9KTsKCiAgLy8gU3VwcG9ydDogSUU8MTAKICAvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWUKICAvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLAogIC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdAogIHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkgewogICAgZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvOwogICAgcmV0dXJuICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvYy5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDsKICB9KTsKCiAgLy8gSUQgZmluZCBhbmQgZmlsdGVyCiAgaWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7CiAgICBFeHByLmZpbmRbIklEIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7CiAgICAgIGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IHN0cnVuZGVmaW5lZCAmJiBkb2N1bWVudElzSFRNTCApIHsKICAgICAgICB2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7CiAgICAgICAgLy8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnMKICAgICAgICAvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzCiAgICAgICAgcmV0dXJuIG0gJiYgbS5wYXJlbnROb2RlID8gW21dIDogW107CiAgICAgIH0KICAgIH07CiAgICBFeHByLmZpbHRlclsiSUQiXSA9IGZ1bmN0aW9uKCBpZCApIHsKICAgICAgdmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7CiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoImlkIikgPT09IGF0dHJJZDsKICAgICAgfTsKICAgIH07CiAgfSBlbHNlIHsKICAgIC8vIFN1cHBvcnQ6IElFNi83CiAgICAvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0CiAgICBkZWxldGUgRXhwci5maW5kWyJJRCJdOwoKICAgIEV4cHIuZmlsdGVyWyJJRCJdID0gIGZ1bmN0aW9uKCBpZCApIHsKICAgICAgdmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7CiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICB2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IHN0cnVuZGVmaW5lZCAmJiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoImlkIik7CiAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkOwogICAgICB9OwogICAgfTsKICB9CgogIC8vIFRhZwogIEV4cHIuZmluZFsiVEFHIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID8KICAgIGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7CiAgICAgIGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IHN0cnVuZGVmaW5lZCApIHsKICAgICAgICByZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7CiAgICAgIH0KICAgIH0gOgogICAgZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHsKICAgICAgdmFyIGVsZW0sCiAgICAgICAgdG1wID0gW10sCiAgICAgICAgaSA9IDAsCiAgICAgICAgcmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApOwoKICAgICAgLy8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50cwogICAgICBpZiAoIHRhZyA9PT0gIioiICkgewogICAgICAgIHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkgewogICAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICB0bXAucHVzaCggZWxlbSApOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRtcDsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0czsKICAgIH07CgogIC8vIENsYXNzCiAgRXhwci5maW5kWyJDTEFTUyJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7CiAgICBpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IHN0cnVuZGVmaW5lZCAmJiBkb2N1bWVudElzSFRNTCApIHsKICAgICAgcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7CiAgICB9CiAgfTsKCiAgLyogUVNBL21hdGNoZXNTZWxlY3RvcgogIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KCiAgLy8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydAoKICAvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KQogIHJidWdneU1hdGNoZXMgPSBbXTsKCiAgLy8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSkKICAvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3IKICAvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lCiAgLy8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3IKICAvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzgKICByYnVnZ3lRU0EgPSBbXTsKCiAgaWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvYy5xdWVyeVNlbGVjdG9yQWxsICkpICkgewogICAgLy8gQnVpbGQgUVNBIHJlZ2V4CiAgICAvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pCiAgICBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHsKICAgICAgLy8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZQogICAgICAvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHkKICAgICAgLy8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsCiAgICAgIC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoCiAgICAgIC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5CiAgICAgIGRpdi5pbm5lckhUTUwgPSAiPHNlbGVjdCB0PScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+IjsKCiAgICAgIC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTAtMTIKICAgICAgLy8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPQogICAgICBpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKCJbdF49JyddIikubGVuZ3RoICkgewogICAgICAgIHJidWdneVFTQS5wdXNoKCAiWypeJF09IiArIHdoaXRlc3BhY2UgKyAiKig\/OicnfFwiXCIpIiApOwogICAgICB9CgogICAgICAvLyBTdXBwb3J0OiBJRTgKICAgICAgLy8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCAidmFsdWUiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHkKICAgICAgaWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIltzZWxlY3RlZF0iKS5sZW5ndGggKSB7CiAgICAgICAgcmJ1Z2d5UVNBLnB1c2goICJcXFsiICsgd2hpdGVzcGFjZSArICIqKD86dmFsdWV8IiArIGJvb2xlYW5zICsgIikiICk7CiAgICAgIH0KCiAgICAgIC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzCiAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkCiAgICAgIC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzCiAgICAgIGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCI6Y2hlY2tlZCIpLmxlbmd0aCApIHsKICAgICAgICByYnVnZ3lRU0EucHVzaCgiOmNoZWNrZWQiKTsKICAgICAgfQogICAgfSk7CgogICAgYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7CiAgICAgIC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwcwogICAgICAvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnQKICAgICAgdmFyIGlucHV0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSggInR5cGUiLCAiaGlkZGVuIiApOwogICAgICBkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCAibmFtZSIsICJEIiApOwoKICAgICAgLy8gU3VwcG9ydDogSUU4CiAgICAgIC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZQogICAgICBpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKCJbbmFtZT1kXSIpLmxlbmd0aCApIHsKICAgICAgICByYnVnZ3lRU0EucHVzaCggIm5hbWUiICsgd2hpdGVzcGFjZSArICIqWypeJHwhfl0\/PSIgKTsKICAgICAgfQoKICAgICAgLy8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZCkKICAgICAgLy8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHMKICAgICAgaWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIjplbmFibGVkIikubGVuZ3RoICkgewogICAgICAgIHJidWdneVFTQS5wdXNoKCAiOmVuYWJsZWQiLCAiOmRpc2FibGVkIiApOwogICAgICB9CgogICAgICAvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvcwogICAgICBkaXYucXVlcnlTZWxlY3RvckFsbCgiKiw6eCIpOwogICAgICByYnVnZ3lRU0EucHVzaCgiLC4qOiIpOwogICAgfSk7CiAgfQoKICBpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fAogICAgZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwKICAgIGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fAogICAgZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7CgogICAgYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7CiAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvcgogICAgICAvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KQogICAgICBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsICJkaXYiICk7CgogICAgICAvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uCiAgICAgIC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWQKICAgICAgbWF0Y2hlcy5jYWxsKCBkaXYsICJbcyE9JyddOngiICk7CiAgICAgIHJidWdneU1hdGNoZXMucHVzaCggIiE9IiwgcHNldWRvcyApOwogICAgfSk7CiAgfQoKICByYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCJ8IikgKTsKICByYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCJ8IikgKTsKCiAgLyogQ29udGFpbnMKICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovCiAgaGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApOwoKICAvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXIKICAvLyBQdXJwb3NlZnVsbHkgZG9lcyBub3QgaW1wbGVtZW50IGluY2x1c2l2ZSBkZXNjZW5kZW50CiAgLy8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGYKICBjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgPwogICAgZnVuY3Rpb24oIGEsIGIgKSB7CiAgICAgIHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsCiAgICAgICAgYnVwID0gYiAmJiBiLnBhcmVudE5vZGU7CiAgICAgIHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKAogICAgICAgIGFkb3duLmNvbnRhaW5zID8KICAgICAgICAgIGFkb3duLmNvbnRhaW5zKCBidXAgKSA6CiAgICAgICAgICBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTYKICAgICAgKSk7CiAgICB9IDoKICAgIGZ1bmN0aW9uKCBhLCBiICkgewogICAgICBpZiAoIGIgKSB7CiAgICAgICAgd2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7CiAgICAgICAgICBpZiAoIGIgPT09IGEgKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwoKICAvKiBTb3J0aW5nCiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwoKICAvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nCiAgc29ydE9yZGVyID0gaGFzQ29tcGFyZSA\/CiAgZnVuY3Rpb24oIGEsIGIgKSB7CgogICAgLy8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWwKICAgIGlmICggYSA9PT0gYiApIHsKICAgICAgaGFzRHVwbGljYXRlID0gdHJ1ZTsKICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgLy8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbgogICAgdmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uOwogICAgaWYgKCBjb21wYXJlICkgewogICAgICByZXR1cm4gY29tcGFyZTsKICAgIH0KCiAgICAvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50CiAgICBjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgPwogICAgICBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOgoKICAgICAgLy8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkCiAgICAgIDE7CgogICAgLy8gRGlzY29ubmVjdGVkIG5vZGVzCiAgICBpZiAoIGNvbXBhcmUgJiAxIHx8CiAgICAgICghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHsKCiAgICAgIC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudAogICAgICBpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkgewogICAgICAgIHJldHVybiAtMTsKICAgICAgfQogICAgICBpZiAoIGIgPT09IGRvYyB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkgewogICAgICAgIHJldHVybiAxOwogICAgICB9CgogICAgICAvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlcgogICAgICByZXR1cm4gc29ydElucHV0ID8KICAgICAgICAoIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBhICkgLSBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYiApICkgOgogICAgICAgIDA7CiAgICB9CgogICAgcmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxOwogIH0gOgogIGZ1bmN0aW9uKCBhLCBiICkgewogICAgLy8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbAogICAgaWYgKCBhID09PSBiICkgewogICAgICBoYXNEdXBsaWNhdGUgPSB0cnVlOwogICAgICByZXR1cm4gMDsKICAgIH0KCiAgICB2YXIgY3VyLAogICAgICBpID0gMCwKICAgICAgYXVwID0gYS5wYXJlbnROb2RlLAogICAgICBidXAgPSBiLnBhcmVudE5vZGUsCiAgICAgIGFwID0gWyBhIF0sCiAgICAgIGJwID0gWyBiIF07CgogICAgLy8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWQKICAgIGlmICggIWF1cCB8fCAhYnVwICkgewogICAgICByZXR1cm4gYSA9PT0gZG9jID8gLTEgOgogICAgICAgIGIgPT09IGRvYyA\/IDEgOgogICAgICAgIGF1cCA\/IC0xIDoKICAgICAgICBidXAgPyAxIDoKICAgICAgICBzb3J0SW5wdXQgPwogICAgICAgICggaW5kZXhPZi5jYWxsKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBiICkgKSA6CiAgICAgICAgMDsKCiAgICAvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVjawogICAgfSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7CiAgICAgIHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTsKICAgIH0KCiAgICAvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvbgogICAgY3VyID0gYTsKICAgIHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHsKICAgICAgYXAudW5zaGlmdCggY3VyICk7CiAgICB9CiAgICBjdXIgPSBiOwogICAgd2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkgewogICAgICBicC51bnNoaWZ0KCBjdXIgKTsKICAgIH0KCiAgICAvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeQogICAgd2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7CiAgICAgIGkrKzsKICAgIH0KCiAgICByZXR1cm4gaSA\/CiAgICAgIC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvcgogICAgICBzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDoKCiAgICAgIC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdAogICAgICBhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOgogICAgICBicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6CiAgICAgIDA7CiAgfTsKCiAgcmV0dXJuIGRvYzsKfTsKClNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkgewogIHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7Cn07CgpTaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7CiAgLy8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkCiAgaWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkgewogICAgc2V0RG9jdW1lbnQoIGVsZW0gKTsKICB9CgogIC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZAogIGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsICI9JyQxJ10iICk7CgogIGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiYKICAgICggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiYKICAgICggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHsKCiAgICB0cnkgewogICAgICB2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7CgogICAgICAvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzCiAgICAgIGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHwKICAgICAgICAgIC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50CiAgICAgICAgICAvLyBmcmFnbWVudCBpbiBJRSA5CiAgICAgICAgICBlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkgewogICAgICAgIHJldHVybiByZXQ7CiAgICAgIH0KICAgIH0gY2F0Y2goZSkge30KICB9CgogIHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbZWxlbV0gKS5sZW5ndGggPiAwOwp9OwoKU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7CiAgLy8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkCiAgaWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkgewogICAgc2V0RG9jdW1lbnQoIGNvbnRleHQgKTsKICB9CiAgcmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7Cn07CgpTaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewogIC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZAogIGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHsKICAgIHNldERvY3VtZW50KCBlbGVtICk7CiAgfQoKICB2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLAogICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpCiAgICB2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA\/CiAgICAgIGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6CiAgICAgIHVuZGVmaW5lZDsKCiAgcmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID8KICAgIHZhbCA6CiAgICBzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID8KICAgICAgZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6CiAgICAgICh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgPwogICAgICAgIHZhbC52YWx1ZSA6CiAgICAgICAgbnVsbDsKfTsKClNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7CiAgdGhyb3cgbmV3IEVycm9yKCAiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogIiArIG1zZyApOwp9OwoKLyoqCiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXMKICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHMKICovClNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7CiAgdmFyIGVsZW0sCiAgICBkdXBsaWNhdGVzID0gW10sCiAgICBqID0gMCwKICAgIGkgPSAwOwoKICAvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlCiAgaGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlczsKICBzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTsKICByZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApOwoKICBpZiAoIGhhc0R1cGxpY2F0ZSApIHsKICAgIHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkgewogICAgICBpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHsKICAgICAgICBqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7CiAgICAgIH0KICAgIH0KICAgIHdoaWxlICggai0tICkgewogICAgICByZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7CiAgICB9CiAgfQoKICAvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0cwogIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNQogIHNvcnRJbnB1dCA9IG51bGw7CgogIHJldHVybiByZXN1bHRzOwp9OwoKLyoqCiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzCiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbQogKi8KZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7CiAgdmFyIG5vZGUsCiAgICByZXQgPSAiIiwKICAgIGkgPSAwLAogICAgbm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlOwoKICBpZiAoICFub2RlVHlwZSApIHsKICAgIC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5CiAgICB3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHsKICAgICAgLy8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXMKICAgICAgcmV0ICs9IGdldFRleHQoIG5vZGUgKTsKICAgIH0KICB9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7CiAgICAvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzCiAgICAvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKQogICAgaWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gInN0cmluZyIgKSB7CiAgICAgIHJldHVybiBlbGVtLnRleHRDb250ZW50OwogICAgfSBlbHNlIHsKICAgICAgLy8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuCiAgICAgIGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkgewogICAgICAgIHJldCArPSBnZXRUZXh0KCBlbGVtICk7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHsKICAgIHJldHVybiBlbGVtLm5vZGVWYWx1ZTsKICB9CiAgLy8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzCgogIHJldHVybiByZXQ7Cn07CgpFeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHsKCiAgLy8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyCiAgY2FjaGVMZW5ndGg6IDUwLAoKICBjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbiwKCiAgbWF0Y2g6IG1hdGNoRXhwciwKCiAgYXR0ckhhbmRsZToge30sCgogIGZpbmQ6IHt9LAoKICByZWxhdGl2ZTogewogICAgIj4iOiB7IGRpcjogInBhcmVudE5vZGUiLCBmaXJzdDogdHJ1ZSB9LAogICAgIiAiOiB7IGRpcjogInBhcmVudE5vZGUiIH0sCiAgICAiKyI6IHsgZGlyOiAicHJldmlvdXNTaWJsaW5nIiwgZmlyc3Q6IHRydWUgfSwKICAgICJ+IjogeyBkaXI6ICJwcmV2aW91c1NpYmxpbmciIH0KICB9LAoKICBwcmVGaWx0ZXI6IHsKICAgICJBVFRSIjogZnVuY3Rpb24oIG1hdGNoICkgewogICAgICBtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7CgogICAgICAvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZAogICAgICBtYXRjaFszXSA9ICggbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgIiIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApOwoKICAgICAgaWYgKCBtYXRjaFsyXSA9PT0gIn49IiApIHsKICAgICAgICBtYXRjaFszXSA9ICIgIiArIG1hdGNoWzNdICsgIiAiOwogICAgICB9CgogICAgICByZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTsKICAgIH0sCgogICAgIkNISUxEIjogZnVuY3Rpb24oIG1hdGNoICkgewogICAgICAvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByWyJDSElMRCJdCiAgICAgICAgMSB0eXBlIChvbmx5fG50aHwuLi4pCiAgICAgICAgMiB3aGF0IChjaGlsZHxvZi10eXBlKQogICAgICAgIDMgYXJndW1lbnQgKGV2ZW58b2RkfFxkKnxcZCpuKFsrLV1cZCspP3wuLi4pCiAgICAgICAgNCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cZCpufCkKICAgICAgICA1IHNpZ24gb2YgeG4tY29tcG9uZW50CiAgICAgICAgNiB4IG9mIHhuLWNvbXBvbmVudAogICAgICAgIDcgc2lnbiBvZiB5LWNvbXBvbmVudAogICAgICAgIDggeSBvZiB5LWNvbXBvbmVudAogICAgICAqLwogICAgICBtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7CgogICAgICBpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09ICJudGgiICkgewogICAgICAgIC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50CiAgICAgICAgaWYgKCAhbWF0Y2hbM10gKSB7CiAgICAgICAgICBTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7CiAgICAgICAgfQoKICAgICAgICAvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTEQKICAgICAgICAvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xCiAgICAgICAgbWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA\/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09ICJldmVuIiB8fCBtYXRjaFszXSA9PT0gIm9kZCIgKSApOwogICAgICAgIG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09ICJvZGQiICk7CgogICAgICAvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHMKICAgICAgfSBlbHNlIGlmICggbWF0Y2hbM10gKSB7CiAgICAgICAgU2l6emxlLmVycm9yKCBtYXRjaFswXSApOwogICAgICB9CgogICAgICByZXR1cm4gbWF0Y2g7CiAgICB9LAoKICAgICJQU0VVRE8iOiBmdW5jdGlvbiggbWF0Y2ggKSB7CiAgICAgIHZhciBleGNlc3MsCiAgICAgICAgdW5xdW90ZWQgPSAhbWF0Y2hbNV0gJiYgbWF0Y2hbMl07CgogICAgICBpZiAoIG1hdGNoRXhwclsiQ0hJTEQiXS50ZXN0KCBtYXRjaFswXSApICkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICAvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pcwogICAgICBpZiAoIG1hdGNoWzNdICYmIG1hdGNoWzRdICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgbWF0Y2hbMl0gPSBtYXRjaFs0XTsKCiAgICAgIC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzCiAgICAgIH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJgogICAgICAgIC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpCiAgICAgICAgKGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJgogICAgICAgIC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpcwogICAgICAgIChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCAiKSIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHsKCiAgICAgICAgLy8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXgKICAgICAgICBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTsKICAgICAgICBtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTsKICAgICAgfQoKICAgICAgLy8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpCiAgICAgIHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApOwogICAgfQogIH0sCgogIGZpbHRlcjogewoKICAgICJUQUciOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHsKICAgICAgdmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7CiAgICAgIHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSAiKiIgPwogICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6CiAgICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lOwogICAgICAgIH07CiAgICB9LAoKICAgICJDTEFTUyI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7CiAgICAgIHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgIiAiIF07CgogICAgICByZXR1cm4gcGF0dGVybiB8fAogICAgICAgIChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggIihefCIgKyB3aGl0ZXNwYWNlICsgIikiICsgY2xhc3NOYW1lICsgIigiICsgd2hpdGVzcGFjZSArICJ8JCkiICkpICYmCiAgICAgICAgY2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gInN0cmluZyIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBzdHJ1bmRlZmluZWQgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoImNsYXNzIikgfHwgIiIgKTsKICAgICAgICB9KTsKICAgIH0sCgogICAgIkFUVFIiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkgewogICAgICByZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7CgogICAgICAgIGlmICggcmVzdWx0ID09IG51bGwgKSB7CiAgICAgICAgICByZXR1cm4gb3BlcmF0b3IgPT09ICIhPSI7CiAgICAgICAgfQogICAgICAgIGlmICggIW9wZXJhdG9yICkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICByZXN1bHQgKz0gIiI7CgogICAgICAgIHJldHVybiBvcGVyYXRvciA9PT0gIj0iID8gcmVzdWx0ID09PSBjaGVjayA6CiAgICAgICAgICBvcGVyYXRvciA9PT0gIiE9IiA\/IHJlc3VsdCAhPT0gY2hlY2sgOgogICAgICAgICAgb3BlcmF0b3IgPT09ICJePSIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6CiAgICAgICAgICBvcGVyYXRvciA9PT0gIio9IiA\/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOgogICAgICAgICAgb3BlcmF0b3IgPT09ICIkPSIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOgogICAgICAgICAgb3BlcmF0b3IgPT09ICJ+PSIgPyAoICIgIiArIHJlc3VsdCArICIgIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6CiAgICAgICAgICBvcGVyYXRvciA9PT0gInw9IiA\/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgIi0iIDoKICAgICAgICAgIGZhbHNlOwogICAgICB9OwogICAgfSwKCiAgICAiQ0hJTEQiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkgewogICAgICB2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSAibnRoIiwKICAgICAgICBmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gImxhc3QiLAogICAgICAgIG9mVHlwZSA9IHdoYXQgPT09ICJvZi10eXBlIjsKCiAgICAgIHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID8KCiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIDpudGgtKihuKQogICAgICAgIGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgcmV0dXJuICEhZWxlbS5wYXJlbnROb2RlOwogICAgICAgIH0gOgoKICAgICAgICBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkgewogICAgICAgICAgdmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBkaWZmLCBub2RlSW5kZXgsIHN0YXJ0LAogICAgICAgICAgICBkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyAibmV4dFNpYmxpbmciIDogInByZXZpb3VzU2libGluZyIsCiAgICAgICAgICAgIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSwKICAgICAgICAgICAgbmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksCiAgICAgICAgICAgIHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlOwoKICAgICAgICAgIGlmICggcGFyZW50ICkgewoKICAgICAgICAgICAgLy8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKQogICAgICAgICAgICBpZiAoIHNpbXBsZSApIHsKICAgICAgICAgICAgICB3aGlsZSAoIGRpciApIHsKICAgICAgICAgICAgICAgIG5vZGUgPSBlbGVtOwogICAgICAgICAgICAgICAgd2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHsKICAgICAgICAgICAgICAgICAgaWYgKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pCiAgICAgICAgICAgICAgICBzdGFydCA9IGRpciA9IHR5cGUgPT09ICJvbmx5IiAmJiAhc3RhcnQgJiYgIm5leHRTaWJsaW5nIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07CgogICAgICAgICAgICAvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YAogICAgICAgICAgICBpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7CiAgICAgICAgICAgICAgLy8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4CiAgICAgICAgICAgICAgb3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8IChwYXJlbnRbIGV4cGFuZG8gXSA9IHt9KTsKICAgICAgICAgICAgICBjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTsKICAgICAgICAgICAgICBub2RlSW5kZXggPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsxXTsKICAgICAgICAgICAgICBkaWZmID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMl07CiAgICAgICAgICAgICAgbm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07CgogICAgICAgICAgICAgIHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8CgogICAgICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnQKICAgICAgICAgICAgICAgIChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkgewoKICAgICAgICAgICAgICAgIC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrCiAgICAgICAgICAgICAgICBpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgIG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZQogICAgICAgICAgICB9IGVsc2UgaWYgKCB1c2VDYWNoZSAmJiAoY2FjaGUgPSAoZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0pICYmIGNhY2hlWzBdID09PSBkaXJydW5zICkgewogICAgICAgICAgICAgIGRpZmYgPSBjYWNoZVsxXTsKCiAgICAgICAgICAgIC8vIHhtbCA6bnRoLWNoaWxkKC4uLikgb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk\/LW9mLXR5cGUoLi4uKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0CiAgICAgICAgICAgICAgd2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHwKICAgICAgICAgICAgICAgIChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkgewoKICAgICAgICAgICAgICAgIGlmICggKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgJiYgKytkaWZmICkgewogICAgICAgICAgICAgICAgICAvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50CiAgICAgICAgICAgICAgICAgIGlmICggdXNlQ2FjaGUgKSB7CiAgICAgICAgICAgICAgICAgICAgKG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGlmICggbm9kZSA9PT0gZWxlbSApIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemUKICAgICAgICAgICAgZGlmZiAtPSBsYXN0OwogICAgICAgICAgICByZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgfSwKCiAgICAiUFNFVURPIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7CiAgICAgIC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZQogICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzCiAgICAgIC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzCiAgICAgIC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3MKICAgICAgdmFyIGFyZ3MsCiAgICAgICAgZm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fAogICAgICAgICAgU2l6emxlLmVycm9yKCAidW5zdXBwb3J0ZWQgcHNldWRvOiAiICsgcHNldWRvICk7CgogICAgICAvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0CiAgICAgIC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uCiAgICAgIC8vIGp1c3QgYXMgU2l6emxlIGRvZXMKICAgICAgaWYgKCBmblsgZXhwYW5kbyBdICkgewogICAgICAgIHJldHVybiBmbiggYXJndW1lbnQgKTsKICAgICAgfQoKICAgICAgLy8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzCiAgICAgIGlmICggZm4ubGVuZ3RoID4gMSApIHsKICAgICAgICBhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgIiIsIGFyZ3VtZW50IF07CiAgICAgICAgcmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA\/CiAgICAgICAgICBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7CiAgICAgICAgICAgIHZhciBpZHgsCiAgICAgICAgICAgICAgbWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLAogICAgICAgICAgICAgIGkgPSBtYXRjaGVkLmxlbmd0aDsKICAgICAgICAgICAgd2hpbGUgKCBpLS0gKSB7CiAgICAgICAgICAgICAgaWR4ID0gaW5kZXhPZi5jYWxsKCBzZWVkLCBtYXRjaGVkW2ldICk7CiAgICAgICAgICAgICAgc2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkgOgogICAgICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgIHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApOwogICAgICAgICAgfTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZuOwogICAgfQogIH0sCgogIHBzZXVkb3M6IHsKICAgIC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvcwogICAgIm5vdCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICAgIC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlCiAgICAgIC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nCiAgICAgIC8vIHNwYWNlcyBhcyBjb21iaW5hdG9ycwogICAgICB2YXIgaW5wdXQgPSBbXSwKICAgICAgICByZXN1bHRzID0gW10sCiAgICAgICAgbWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCAiJDEiICkgKTsKCiAgICAgIHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gPwogICAgICAgIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkgewogICAgICAgICAgdmFyIGVsZW0sCiAgICAgICAgICAgIHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSwKICAgICAgICAgICAgaSA9IHNlZWQubGVuZ3RoOwoKICAgICAgICAgIC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmAKICAgICAgICAgIHdoaWxlICggaS0tICkgewogICAgICAgICAgICBpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHsKICAgICAgICAgICAgICBzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KSA6CiAgICAgICAgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHsKICAgICAgICAgIGlucHV0WzBdID0gZWxlbTsKICAgICAgICAgIG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTsKICAgICAgICAgIHJldHVybiAhcmVzdWx0cy5wb3AoKTsKICAgICAgICB9OwogICAgfSksCgogICAgImhhcyI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICByZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7CiAgICAgIH07CiAgICB9KSwKCiAgICAiY29udGFpbnMiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICByZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xOwogICAgICB9OwogICAgfSksCgogICAgLy8gIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3IKICAgIC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlCiAgICAvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLAogICAgLy8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSAiLSIuCiAgICAvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS4KICAgIC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuIgogICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkbwogICAgImxhbmciOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkgewogICAgICAvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyCiAgICAgIGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCAiIikgKSB7CiAgICAgICAgU2l6emxlLmVycm9yKCAidW5zdXBwb3J0ZWQgbGFuZzogIiArIGxhbmcgKTsKICAgICAgfQogICAgICBsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7CiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICB2YXIgZWxlbUxhbmc7CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA\/CiAgICAgICAgICAgIGVsZW0ubGFuZyA6CiAgICAgICAgICAgIGVsZW0uZ2V0QXR0cmlidXRlKCJ4bWw6bGFuZyIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCJsYW5nIikpICkgewoKICAgICAgICAgICAgZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICByZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArICItIiApID09PSAwOwogICAgICAgICAgfQogICAgICAgIH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfTsKICAgIH0pLAoKICAgIC8vIE1pc2NlbGxhbmVvdXMKICAgICJ0YXJnZXQiOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7CiAgICAgIHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDsKICAgIH0sCgogICAgInJvb3QiOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgcmV0dXJuIGVsZW0gPT09IGRvY0VsZW07CiAgICB9LAoKICAgICJmb2N1cyI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICByZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpOwogICAgfSwKCiAgICAvLyBCb29sZWFuIHByb3BlcnRpZXMKICAgICJlbmFibGVkIjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZTsKICAgIH0sCgogICAgImRpc2FibGVkIjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlOwogICAgfSwKCiAgICAiY2hlY2tlZCI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHMKICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWQKICAgICAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICByZXR1cm4gKG5vZGVOYW1lID09PSAiaW5wdXQiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09ICJvcHRpb24iICYmICEhZWxlbS5zZWxlY3RlZCk7CiAgICB9LAoKICAgICJzZWxlY3RlZCI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0CiAgICAgIC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHkKICAgICAgaWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7CiAgICAgICAgZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7CiAgICAgIH0KCiAgICAgIHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlOwogICAgfSwKCiAgICAvLyBDb250ZW50cwogICAgImVtcHR5IjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvCiAgICAgIC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSwKICAgICAgLy8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLikKICAgICAgLy8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlbgogICAgICBmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHsKICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0sCgogICAgInBhcmVudCI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICByZXR1cm4gIUV4cHIucHNldWRvc1siZW1wdHkiXSggZWxlbSApOwogICAgfSwKCiAgICAvLyBFbGVtZW50L2lucHV0IHR5cGVzCiAgICAiaGVhZGVyIjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTsKICAgIH0sCgogICAgImlucHV0IjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTsKICAgIH0sCgogICAgImJ1dHRvbiI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICB2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgcmV0dXJuIG5hbWUgPT09ICJpbnB1dCIgJiYgZWxlbS50eXBlID09PSAiYnV0dG9uIiB8fCBuYW1lID09PSAiYnV0dG9uIjsKICAgIH0sCgogICAgInRleHQiOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgdmFyIGF0dHI7CiAgICAgIHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJpbnB1dCIgJiYKICAgICAgICBlbGVtLnR5cGUgPT09ICJ0ZXh0IiAmJgoKICAgICAgICAvLyBTdXBwb3J0OiBJRTw4CiAgICAgICAgLy8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sICJzZWFyY2giKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09ICJ0ZXh0IgogICAgICAgICggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSgidHlwZSIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gInRleHQiICk7CiAgICB9LAoKICAgIC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb24KICAgICJmaXJzdCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBbIDAgXTsKICAgIH0pLAoKICAgICJsYXN0IjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7CiAgICAgIHJldHVybiBbIGxlbmd0aCAtIDEgXTsKICAgIH0pLAoKICAgICJlcSI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHsKICAgICAgcmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdOwogICAgfSksCgogICAgImV2ZW4iOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHsKICAgICAgdmFyIGkgPSAwOwogICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHsKICAgICAgICBtYXRjaEluZGV4ZXMucHVzaCggaSApOwogICAgICB9CiAgICAgIHJldHVybiBtYXRjaEluZGV4ZXM7CiAgICB9KSwKCiAgICAib2RkIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7CiAgICAgIHZhciBpID0gMTsKICAgICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7CiAgICAgICAgbWF0Y2hJbmRleGVzLnB1c2goIGkgKTsKICAgICAgfQogICAgICByZXR1cm4gbWF0Y2hJbmRleGVzOwogICAgfSksCgogICAgImx0IjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkgewogICAgICB2YXIgaSA9IGFyZ3VtZW50IDwgMCA\/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7CiAgICAgIGZvciAoIDsgLS1pID49IDA7ICkgewogICAgICAgIG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7CiAgICAgIH0KICAgICAgcmV0dXJuIG1hdGNoSW5kZXhlczsKICAgIH0pLAoKICAgICJndCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHsKICAgICAgdmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50OwogICAgICBmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7CiAgICAgICAgbWF0Y2hJbmRleGVzLnB1c2goIGkgKTsKICAgICAgfQogICAgICByZXR1cm4gbWF0Y2hJbmRleGVzOwogICAgfSkKICB9Cn07CgpFeHByLnBzZXVkb3NbIm50aCJdID0gRXhwci5wc2V1ZG9zWyJlcSJdOwoKLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3MKZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7CiAgRXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApOwp9CmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7CiAgRXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTsKfQoKLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzCmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fQpzZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvczsKRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTsKCmZ1bmN0aW9uIHRva2VuaXplKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkgewogIHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLAogICAgc29GYXIsIGdyb3VwcywgcHJlRmlsdGVycywKICAgIGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgIiAiIF07CgogIGlmICggY2FjaGVkICkgewogICAgcmV0dXJuIHBhcnNlT25seSA\/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTsKICB9CgogIHNvRmFyID0gc2VsZWN0b3I7CiAgZ3JvdXBzID0gW107CiAgcHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyOwoKICB3aGlsZSAoIHNvRmFyICkgewoKICAgIC8vIENvbW1hIGFuZCBmaXJzdCBydW4KICAgIGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkgewogICAgICBpZiAoIG1hdGNoICkgewogICAgICAgIC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkCiAgICAgICAgc29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7CiAgICAgIH0KICAgICAgZ3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTsKICAgIH0KCiAgICBtYXRjaGVkID0gZmFsc2U7CgogICAgLy8gQ29tYmluYXRvcnMKICAgIGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkgewogICAgICBtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTsKICAgICAgdG9rZW5zLnB1c2goewogICAgICAgIHZhbHVlOiBtYXRjaGVkLAogICAgICAgIC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZQogICAgICAgIHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCAiICIgKQogICAgICB9KTsKICAgICAgc29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTsKICAgIH0KCiAgICAvLyBGaWx0ZXJzCiAgICBmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkgewogICAgICBpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8CiAgICAgICAgKG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7CiAgICAgICAgbWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7CiAgICAgICAgdG9rZW5zLnB1c2goewogICAgICAgICAgdmFsdWU6IG1hdGNoZWQsCiAgICAgICAgICB0eXBlOiB0eXBlLAogICAgICAgICAgbWF0Y2hlczogbWF0Y2gKICAgICAgICB9KTsKICAgICAgICBzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApOwogICAgICB9CiAgICB9CgogICAgaWYgKCAhbWF0Y2hlZCApIHsKICAgICAgYnJlYWs7CiAgICB9CiAgfQoKICAvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3MKICAvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmcKICAvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnMKICByZXR1cm4gcGFyc2VPbmx5ID8KICAgIHNvRmFyLmxlbmd0aCA6CiAgICBzb0ZhciA\/CiAgICAgIFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6CiAgICAgIC8vIENhY2hlIHRoZSB0b2tlbnMKICAgICAgdG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7Cn0KCmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHsKICB2YXIgaSA9IDAsCiAgICBsZW4gPSB0b2tlbnMubGVuZ3RoLAogICAgc2VsZWN0b3IgPSAiIjsKICBmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKICAgIHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTsKICB9CiAgcmV0dXJuIHNlbGVjdG9yOwp9CgpmdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkgewogIHZhciBkaXIgPSBjb21iaW5hdG9yLmRpciwKICAgIGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGRpciA9PT0gInBhcmVudE5vZGUiLAogICAgZG9uZU5hbWUgPSBkb25lKys7CgogIHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID8KICAgIC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudAogICAgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHsKICAgICAgd2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHsKICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHsKICAgICAgICAgIHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gOgoKICAgIC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50cwogICAgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHsKICAgICAgdmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLAogICAgICAgIG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdOwoKICAgICAgLy8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gZGlyIGNhY2hpbmcKICAgICAgaWYgKCB4bWwgKSB7CiAgICAgICAgd2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHsKICAgICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkgewogICAgICAgICAgICBpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7CiAgICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHsKICAgICAgICAgICAgb3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pOwogICAgICAgICAgICBpZiAoIChvbGRDYWNoZSA9IG91dGVyQ2FjaGVbIGRpciBdKSAmJgogICAgICAgICAgICAgIG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7CgogICAgICAgICAgICAgIC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzCiAgICAgICAgICAgICAgcmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50cwogICAgICAgICAgICAgIG91dGVyQ2FjaGVbIGRpciBdID0gbmV3Q2FjaGU7CgogICAgICAgICAgICAgIC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZwogICAgICAgICAgICAgIGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH07Cn0KCmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHsKICByZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA\/CiAgICBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkgewogICAgICB2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDsKICAgICAgd2hpbGUgKCBpLS0gKSB7CiAgICAgICAgaWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gOgogICAgbWF0Y2hlcnNbMF07Cn0KCmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7CiAgdmFyIGVsZW0sCiAgICBuZXdVbm1hdGNoZWQgPSBbXSwKICAgIGkgPSAwLAogICAgbGVuID0gdW5tYXRjaGVkLmxlbmd0aCwKICAgIG1hcHBlZCA9IG1hcCAhPSBudWxsOwoKICBmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKICAgIGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkgewogICAgICBpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHsKICAgICAgICBuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApOwogICAgICAgIGlmICggbWFwcGVkICkgewogICAgICAgICAgbWFwLnB1c2goIGkgKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBuZXdVbm1hdGNoZWQ7Cn0KCmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHsKICBpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHsKICAgIHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7CiAgfQogIGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkgewogICAgcG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApOwogIH0KICByZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7CiAgICB2YXIgdGVtcCwgaSwgZWxlbSwKICAgICAgcHJlTWFwID0gW10sCiAgICAgIHBvc3RNYXAgPSBbXSwKICAgICAgcHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCwKCiAgICAgIC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0CiAgICAgIGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCAiKiIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksCgogICAgICAvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb24KICAgICAgbWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA\/CiAgICAgICAgY29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOgogICAgICAgIGVsZW1zLAoKICAgICAgbWF0Y2hlck91dCA9IG1hdGNoZXIgPwogICAgICAgIC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsCiAgICAgICAgcG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgPwoKICAgICAgICAgIC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeQogICAgICAgICAgW10gOgoKICAgICAgICAgIC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseQogICAgICAgICAgcmVzdWx0cyA6CiAgICAgICAgbWF0Y2hlckluOwoKICAgIC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzCiAgICBpZiAoIG1hdGNoZXIgKSB7CiAgICAgIG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7CiAgICB9CgogICAgLy8gQXBwbHkgcG9zdEZpbHRlcgogICAgaWYgKCBwb3N0RmlsdGVyICkgewogICAgICB0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTsKICAgICAgcG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApOwoKICAgICAgLy8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJbgogICAgICBpID0gdGVtcC5sZW5ndGg7CiAgICAgIHdoaWxlICggaS0tICkgewogICAgICAgIGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHsKICAgICAgICAgIG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZiAoIHNlZWQgKSB7CiAgICAgIGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7CiAgICAgICAgaWYgKCBwb3N0RmluZGVyICkgewogICAgICAgICAgLy8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzCiAgICAgICAgICB0ZW1wID0gW107CiAgICAgICAgICBpID0gbWF0Y2hlck91dC5sZW5ndGg7CiAgICAgICAgICB3aGlsZSAoIGktLSApIHsKICAgICAgICAgICAgaWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkgewogICAgICAgICAgICAgIC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoCiAgICAgICAgICAgICAgdGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApOwogICAgICAgIH0KCiAgICAgICAgLy8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWQKICAgICAgICBpID0gbWF0Y2hlck91dC5sZW5ndGg7CiAgICAgICAgd2hpbGUgKCBpLS0gKSB7CiAgICAgICAgICBpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiYKICAgICAgICAgICAgKHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZi5jYWxsKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7CgogICAgICAgICAgICBzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgLy8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkCiAgICB9IGVsc2UgewogICAgICBtYXRjaGVyT3V0ID0gY29uZGVuc2UoCiAgICAgICAgbWF0Y2hlck91dCA9PT0gcmVzdWx0cyA\/CiAgICAgICAgICBtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOgogICAgICAgICAgbWF0Y2hlck91dAogICAgICApOwogICAgICBpZiAoIHBvc3RGaW5kZXIgKSB7CiAgICAgICAgcG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApOwogICAgICB9CiAgICB9CiAgfSk7Cn0KCmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7CiAgdmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaiwKICAgIGxlbiA9IHRva2Vucy5sZW5ndGgsCiAgICBsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLAogICAgaW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyIgIl0sCiAgICBpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsCgogICAgLy8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocykKICAgIG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkgewogICAgICByZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0OwogICAgfSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLAogICAgbWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIHJldHVybiBpbmRleE9mLmNhbGwoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7CiAgICB9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksCiAgICBtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHsKICAgICAgcmV0dXJuICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoCiAgICAgICAgKGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID8KICAgICAgICAgIG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOgogICAgICAgICAgbWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApOwogICAgfSBdOwoKICBmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKICAgIGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHsKICAgICAgbWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07CiAgICB9IGVsc2UgewogICAgICBtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7CgogICAgICAvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlcgogICAgICBpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHsKICAgICAgICAvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmcKICAgICAgICBqID0gKytpOwogICAgICAgIGZvciAoIDsgaiA8IGxlbjsgaisrICkgewogICAgICAgICAgaWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNldE1hdGNoZXIoCiAgICAgICAgICBpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwKICAgICAgICAgIGkgPiAxICYmIHRvU2VsZWN0b3IoCiAgICAgICAgICAgIC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgCiAgICAgICAgICAgIHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09ICIgIiA\/ICIqIiA6ICIiIH0pCiAgICAgICAgICApLnJlcGxhY2UoIHJ0cmltLCAiJDEiICksCiAgICAgICAgICBtYXRjaGVyLAogICAgICAgICAgaSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksCiAgICAgICAgICBqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksCiAgICAgICAgICBqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApCiAgICAgICAgKTsKICAgICAgfQogICAgICBtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7CiAgICB9CiAgfQoKICByZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7Cn0KCmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHsKICB2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLAogICAgYnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsCiAgICBzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7CiAgICAgIHZhciBlbGVtLCBqLCBtYXRjaGVyLAogICAgICAgIG1hdGNoZWRDb3VudCA9IDAsCiAgICAgICAgaSA9ICIwIiwKICAgICAgICB1bm1hdGNoZWQgPSBzZWVkICYmIFtdLAogICAgICAgIHNldE1hdGNoZWQgPSBbXSwKICAgICAgICBjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCwKICAgICAgICAvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0CiAgICAgICAgZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIlRBRyJdKCAiKiIsIG91dGVybW9zdCApLAogICAgICAgIC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyCiAgICAgICAgZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA\/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksCiAgICAgICAgbGVuID0gZWxlbXMubGVuZ3RoOwoKICAgICAgaWYgKCBvdXRlcm1vc3QgKSB7CiAgICAgICAgb3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgIT09IGRvY3VtZW50ICYmIGNvbnRleHQ7CiAgICAgIH0KCiAgICAgIC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzCiAgICAgIC8vIEtlZXAgYGlgIGEgc3RyaW5nIGlmIHRoZXJlIGFyZSBubyBlbGVtZW50cyBzbyBgbWF0Y2hlZENvdW50YCB3aWxsIGJlICIwMCIgYmVsb3cKICAgICAgLy8gU3VwcG9ydDogSUU8OSwgU2FmYXJpCiAgICAgIC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiAibGVuZ3RoIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWQKICAgICAgZm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkgewogICAgICAgIGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7CiAgICAgICAgICBqID0gMDsKICAgICAgICAgIHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7CiAgICAgICAgICAgIGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7CiAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKCBlbGVtICk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICggb3V0ZXJtb3N0ICkgewogICAgICAgICAgICBkaXJydW5zID0gZGlycnVuc1VuaXF1ZTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnMKICAgICAgICBpZiAoIGJ5U2V0ICkgewogICAgICAgICAgLy8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVycwogICAgICAgICAgaWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkgewogICAgICAgICAgICBtYXRjaGVkQ291bnQtLTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90CiAgICAgICAgICBpZiAoIHNlZWQgKSB7CiAgICAgICAgICAgIHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHMKICAgICAgbWF0Y2hlZENvdW50ICs9IGk7CiAgICAgIGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkgewogICAgICAgIGogPSAwOwogICAgICAgIHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHsKICAgICAgICAgIG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIHNlZWQgKSB7CiAgICAgICAgICAvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nCiAgICAgICAgICBpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7CiAgICAgICAgICAgIHdoaWxlICggaS0tICkgewogICAgICAgICAgICAgIGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7CiAgICAgICAgICAgICAgICBzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlcwogICAgICAgICAgc2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7CiAgICAgICAgfQoKICAgICAgICAvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzCiAgICAgICAgcHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApOwoKICAgICAgICAvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmcKICAgICAgICBpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiYKICAgICAgICAgICggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkgewoKICAgICAgICAgIFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnMKICAgICAgaWYgKCBvdXRlcm1vc3QgKSB7CiAgICAgICAgZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7CiAgICAgICAgb3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7CiAgICAgIH0KCiAgICAgIHJldHVybiB1bm1hdGNoZWQ7CiAgICB9OwoKICByZXR1cm4gYnlTZXQgPwogICAgbWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6CiAgICBzdXBlck1hdGNoZXI7Cn0KCmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgZ3JvdXAgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7CiAgdmFyIGksCiAgICBzZXRNYXRjaGVycyA9IFtdLAogICAgZWxlbWVudE1hdGNoZXJzID0gW10sCiAgICBjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArICIgIiBdOwoKICBpZiAoICFjYWNoZWQgKSB7CiAgICAvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnQKICAgIGlmICggIWdyb3VwICkgewogICAgICBncm91cCA9IHRva2VuaXplKCBzZWxlY3RvciApOwogICAgfQogICAgaSA9IGdyb3VwLmxlbmd0aDsKICAgIHdoaWxlICggaS0tICkgewogICAgICBjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggZ3JvdXBbaV0gKTsKICAgICAgaWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHsKICAgICAgICBzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24KICAgIGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApOwogIH0KICByZXR1cm4gY2FjaGVkOwp9OwoKZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkgewogIHZhciBpID0gMCwKICAgIGxlbiA9IGNvbnRleHRzLmxlbmd0aDsKICBmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKICAgIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7CiAgfQogIHJldHVybiByZXN1bHRzOwp9CgpmdW5jdGlvbiBzZWxlY3QoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkgewogIHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLAogICAgbWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTsKCiAgaWYgKCAhc2VlZCApIHsKICAgIC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIGdyb3VwCiAgICBpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHsKCiAgICAgIC8vIFRha2UgYSBzaG9ydGN1dCBhbmQgc2V0IHRoZSBjb250ZXh0IGlmIHRoZSByb290IHNlbGVjdG9yIGlzIGFuIElECiAgICAgIHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTsKICAgICAgaWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09ICJJRCIgJiYKICAgICAgICAgIHN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmCiAgICAgICAgICBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkgewoKICAgICAgICBjb250ZXh0ID0gKCBFeHByLmZpbmRbIklEIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdOwogICAgICAgIGlmICggIWNvbnRleHQgKSB7CiAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9CiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7CiAgICAgIH0KCiAgICAgIC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmcKICAgICAgaSA9IG1hdGNoRXhwclsibmVlZHNDb250ZXh0Il0udGVzdCggc2VsZWN0b3IgKSA\/IDAgOiB0b2tlbnMubGVuZ3RoOwogICAgICB3aGlsZSAoIGktLSApIHsKICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTsKCiAgICAgICAgLy8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvcgogICAgICAgIGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7CiAgICAgICAgICAvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnMKICAgICAgICAgIGlmICggKHNlZWQgPSBmaW5kKAogICAgICAgICAgICB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksCiAgICAgICAgICAgIHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHQKICAgICAgICAgICkpICkgewoKICAgICAgICAgICAgLy8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5CiAgICAgICAgICAgIHRva2Vucy5zcGxpY2UoIGksIDEgKTsKICAgICAgICAgICAgc2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTsKICAgICAgICAgICAgaWYgKCAhc2VsZWN0b3IgKSB7CiAgICAgICAgICAgICAgcHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApOwogICAgICAgICAgICAgIHJldHVybiByZXN1bHRzOwogICAgICAgICAgICB9CgogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24KICAvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlCiAgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkoCiAgICBzZWVkLAogICAgY29udGV4dCwKICAgICFkb2N1bWVudElzSFRNTCwKICAgIHJlc3VsdHMsCiAgICByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0CiAgKTsKICByZXR1cm4gcmVzdWx0czsKfQoKLy8gT25lLXRpbWUgYXNzaWdubWVudHMKCi8vIFNvcnQgc3RhYmlsaXR5CnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIiIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIiIpID09PSBleHBhbmRvOwoKLy8gU3VwcG9ydDogQ2hyb21lPDE0Ci8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb24Kc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7CgovLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnQKc2V0RG9jdW1lbnQoKTsKCi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpCi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKgpzdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZGl2MSApIHsKICAvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZykKICByZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikgKSAmIDE7Cn0pOwoKLy8gU3VwcG9ydDogSUU8OAovLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSAiaW50ZXJwb2xhdGlvbiIKLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweAppZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHsKICBkaXYuaW5uZXJIVE1MID0gIjxhIGhyZWY9JyMnPjwvYT4iOwogIHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoImhyZWYiKSA9PT0gIiMiIDsKfSkgKSB7CiAgYWRkSGFuZGxlKCAidHlwZXxocmVmfGhlaWdodHx3aWR0aCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHsKICAgIGlmICggIWlzWE1MICkgewogICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gInR5cGUiID8gMSA6IDIgKTsKICAgIH0KICB9KTsKfQoKLy8gU3VwcG9ydDogSUU8OQovLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZSgidmFsdWUiKQppZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkgewogIGRpdi5pbm5lckhUTUwgPSAiPGlucHV0Lz4iOwogIGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggInZhbHVlIiwgIiIgKTsKICByZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCAidmFsdWUiICkgPT09ICIiOwp9KSApIHsKICBhZGRIYW5kbGUoICJ2YWx1ZSIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHsKICAgIGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gImlucHV0IiApIHsKICAgICAgcmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlOwogICAgfQogIH0pOwp9CgovLyBTdXBwb3J0OiBJRTw5Ci8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXMKaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7CiAgcmV0dXJuIGRpdi5nZXRBdHRyaWJ1dGUoImRpc2FibGVkIikgPT0gbnVsbDsKfSkgKSB7CiAgYWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkgewogICAgdmFyIHZhbDsKICAgIGlmICggIWlzWE1MICkgewogICAgICByZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDoKICAgICAgICAgICh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA\/CiAgICAgICAgICB2YWwudmFsdWUgOgogICAgICAgIG51bGw7CiAgICB9CiAgfSk7Cn0KCnJldHVybiBTaXp6bGU7Cgp9KSggd2luZG93ICk7CgoKCmpRdWVyeS5maW5kID0gU2l6emxlOwpqUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7CmpRdWVyeS5leHByWyI6Il0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zOwpqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7CmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7CmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDsKalF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zOwoKCgp2YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDsKCnZhciByc2luZ2xlVGFnID0gKC9ePChcdyspXHMqXC8\/Pig\/OjxcL1wxPnwpJC8pOwoKCgp2YXIgcmlzU2ltcGxlID0gL14uW146I1xbXC4sXSokLzsKCi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90CmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkgewogIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkgewogICAgcmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7CiAgICAgIC8qIGpzaGludCAtVzAxOCAqLwogICAgICByZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7CiAgICB9KTsKCiAgfQoKICBpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHsKICAgIHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkgewogICAgICByZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90OwogICAgfSk7CgogIH0KCiAgaWYgKCB0eXBlb2YgcXVhbGlmaWVyID09PSAic3RyaW5nIiApIHsKICAgIGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkgewogICAgICByZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7CiAgICB9CgogICAgcXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApOwogIH0KCiAgcmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7CiAgICByZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID49IDAgKSAhPT0gbm90OwogIH0pOwp9CgpqUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7CiAgdmFyIGVsZW0gPSBlbGVtc1sgMCBdOwoKICBpZiAoIG5vdCApIHsKICAgIGV4cHIgPSAiOm5vdCgiICsgZXhwciArICIpIjsKICB9CgogIHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA\/CiAgICBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA\/IFsgZWxlbSBdIDogW10gOgogICAgalF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgcmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7CiAgICB9KSk7Cn07CgpqUXVlcnkuZm4uZXh0ZW5kKHsKICBmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICB2YXIgaSwKICAgICAgbGVuID0gdGhpcy5sZW5ndGgsCiAgICAgIHJldCA9IFtdLAogICAgICBzZWxmID0gdGhpczsKCiAgICBpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gInN0cmluZyIgKSB7CiAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlcihmdW5jdGlvbigpIHsKICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkgewogICAgICAgICAgaWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pICk7CiAgICB9CgogICAgZm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHsKICAgICAgalF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApOwogICAgfQoKICAgIC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKQogICAgcmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApOwogICAgcmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA\\/IGpRdWVyeS51bmlxdWUoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTsKICB9LAoKICAvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluCiAgLy8gdGhlIG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzCiAgaW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkgewoKICAgIC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50CiAgICBpZiAoICFlbGVtICkgewogICAgICByZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA\/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7CiAgICB9CgogICAgLy8gaW5kZXggaW4gc2VsZWN0b3IKICAgIGlmICggdHlwZW9mIGVsZW0gPT09ICJzdHJpbmciICkgewogICAgICByZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7CiAgICB9CgogICAgLy8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50CiAgICByZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLAoKICAgICAgLy8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkCiAgICAgIGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbQogICAgKTsKICB9LAoKICBhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHsKICAgIHJldHVybiB0aGlzLnB1c2hTdGFjaygKICAgICAgalF1ZXJ5LnVuaXF1ZSgKICAgICAgICBqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApCiAgICAgICkKICAgICk7CiAgfSwKCiAgYWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkgewogICAgcmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID8KICAgICAgdGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihzZWxlY3RvcikKICAgICk7CiAgfQp9KTsKCmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkgewogIHdoaWxlICggKGN1ciA9IGN1cltkaXJdKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fQogIHJldHVybiBjdXI7Cn0KCmpRdWVyeS5lYWNoKHsKICBwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgdmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTsKICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA\\/CiAgICAgIGRpc2FibGVkOiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gIWxpc3Q7CiAgICAgIH0sCiAgICAgIC8vIExvY2sgdGhlIGxpc3QgaW4gaXRzIGN1cnJlbnQgc3RhdGUKICAgICAgbG9jazogZnVuY3Rpb24oKSB7CiAgICAgICAgc3RhY2sgPSB1bmRlZmluZWQ7CiAgICAgICAgaWYgKCAhbWVtb3J5ICkgewogICAgICAgICAgc2VsZi5kaXNhYmxlKCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9LAogICAgICAvLyBJcyBpdCBsb2NrZWQ\/CiAgICAgIGxvY2tlZDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuICFzdGFjazsKICAgICAgfSwKICAgICAgLy8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50cwogICAgICBmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7CiAgICAgICAgaWYgKCBsaXN0ICYmICggIWZpcmVkIHx8IHN0YWNrICkgKSB7CiAgICAgICAgICBhcmdzID0gYXJncyB8fCBbXTsKICAgICAgICAgIGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07CiAgICAgICAgICBpZiAoIGZpcmluZyApIHsKICAgICAgICAgICAgc3RhY2sucHVzaCggYXJncyApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZmlyZSggYXJncyApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfSwKICAgICAgLy8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHMKICAgICAgZmlyZTogZnVuY3Rpb24oKSB7CiAgICAgICAgc2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0sCiAgICAgIC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZQogICAgICBmaXJlZDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuICEhZmlyZWQ7CiAgICAgIH0KICAgIH07CgogIHJldHVybiBzZWxmOwp9OwoKCmpRdWVyeS5leHRlbmQoewoKICBEZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7CiAgICB2YXIgdHVwbGVzID0gWwogICAgICAgIC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZQogICAgICAgIFsgInJlc29sdmUiLCAiZG9uZSIsIGpRdWVyeS5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksICJyZXNvbHZlZCIgXSwKICAgICAgICBbICJyZWplY3QiLCAiZmFpbCIsIGpRdWVyeS5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksICJyZWplY3RlZCIgXSwKICAgICAgICBbICJub3RpZnkiLCAicHJvZ3Jlc3MiLCBqUXVlcnkuQ2FsbGJhY2tzKCJtZW1vcnkiKSBdCiAgICAgIF0sCiAgICAgIHN0YXRlID0gInBlbmRpbmciLAogICAgICBwcm9taXNlID0gewogICAgICAgIHN0YXRlOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgICAgICB9LAogICAgICAgIGFsd2F5czogZnVuY3Rpb24oKSB7CiAgICAgICAgICBkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAgICAgdGhlbjogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkgewogICAgICAgICAgdmFyIGZucyA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24oIG5ld0RlZmVyICkgewogICAgICAgICAgICBqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7CiAgICAgICAgICAgICAgdmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07CiAgICAgICAgICAgICAgLy8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyCiAgICAgICAgICAgICAgZGVmZXJyZWRbIHR1cGxlWzFdIF0oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CiAgICAgICAgICAgICAgICBpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybmVkLnByb21pc2UoKQogICAgICAgICAgICAgICAgICAgIC5kb25lKCBuZXdEZWZlci5yZXNvbHZlICkKICAgICAgICAgICAgICAgICAgICAuZmFpbCggbmV3RGVmZXIucmVqZWN0ICkKICAgICAgICAgICAgICAgICAgICAucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgbmV3RGVmZXJbIHR1cGxlWyAwIF0gKyAiV2l0aCIgXSggdGhpcyA9PT0gcHJvbWlzZSA\/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsIGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmbnMgPSBudWxsOwogICAgICAgICAgfSkucHJvbWlzZSgpOwogICAgICAgIH0sCiAgICAgICAgLy8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZAogICAgICAgIC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3QKICAgICAgICBwcm9taXNlOiBmdW5jdGlvbiggb2JqICkgewogICAgICAgICAgcmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZGVmZXJyZWQgPSB7fTsKCiAgICAvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0CiAgICBwcm9taXNlLnBpcGUgPSBwcm9taXNlLnRoZW47CgogICAgLy8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kcwogICAgalF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkgewogICAgICB2YXIgbGlzdCA9IHR1cGxlWyAyIF0sCiAgICAgICAgc3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdOwoKICAgICAgLy8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGQKICAgICAgcHJvbWlzZVsgdHVwbGVbMV0gXSA9IGxpc3QuYWRkOwoKICAgICAgLy8gSGFuZGxlIHN0YXRlCiAgICAgIGlmICggc3RhdGVTdHJpbmcgKSB7CiAgICAgICAgbGlzdC5hZGQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAvLyBzdGF0ZSA9IFsgcmVzb2x2ZWQgfCByZWplY3RlZCBdCiAgICAgICAgICBzdGF0ZSA9IHN0YXRlU3RyaW5nOwoKICAgICAgICAvLyBbIHJlamVjdF9saXN0IHwgcmVzb2x2ZV9saXN0IF0uZGlzYWJsZTsgcHJvZ3Jlc3NfbGlzdC5sb2NrCiAgICAgICAgfSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7CiAgICAgIH0KCiAgICAgIC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF0KICAgICAgZGVmZXJyZWRbIHR1cGxlWzBdIF0gPSBmdW5jdGlvbigpIHsKICAgICAgICBkZWZlcnJlZFsgdHVwbGVbMF0gKyAiV2l0aCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyBwcm9taXNlIDogdGhpcywgYXJndW1lbnRzICk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH07CiAgICAgIGRlZmVycmVkWyB0dXBsZVswXSArICJXaXRoIiBdID0gbGlzdC5maXJlV2l0aDsKICAgIH0pOwoKICAgIC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZQogICAgcHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApOwoKICAgIC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnkKICAgIGlmICggZnVuYyApIHsKICAgICAgZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTsKICAgIH0KCiAgICAvLyBBbGwgZG9uZSEKICAgIHJldHVybiBkZWZlcnJlZDsKICB9LAoKICAvLyBEZWZlcnJlZCBoZWxwZXIKICB3aGVuOiBmdW5jdGlvbiggc3Vib3JkaW5hdGUgLyogLCAuLi4sIHN1Ym9yZGluYXRlTiAqLyApIHsKICAgIHZhciBpID0gMCwKICAgICAgcmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLAogICAgICBsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCwKCiAgICAgIC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXMKICAgICAgcmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8ICggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCwKCiAgICAgIC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LgogICAgICBkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA\\/Olx7W1x3XFddKlx9fFxbW1x3XFddKlxdKSQvLAogIHJtdWx0aURhc2ggPSAvKFtBLVpdKS9nOwoKZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHsKICB2YXIgbmFtZTsKCiAgLy8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueQogIC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZQogIGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7CiAgICBuYW1lID0gImRhdGEtIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCAiLSQxIiApLnRvTG93ZXJDYXNlKCk7CiAgICBkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTsKCiAgICBpZiAoIHR5cGVvZiBkYXRhID09PSAic3RyaW5nIiApIHsKICAgICAgdHJ5IHsKICAgICAgICBkYXRhID0gZGF0YSA9PT0gInRydWUiID8gdHJ1ZSA6CiAgICAgICAgICBkYXRhID09PSAiZmFsc2UiID8gZmFsc2UgOgogICAgICAgICAgZGF0YSA9PT0gIm51bGwiID8gbnVsbCA6CiAgICAgICAgICAvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZwogICAgICAgICAgK2RhdGEgKyAiIiA9PT0gZGF0YSA\/ICtkYXRhIDoKICAgICAgICAgIHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOgogICAgICAgICAgZGF0YTsKICAgICAgfSBjYXRjaCggZSApIHt9CgogICAgICAvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXIKICAgICAgZGF0YV91c2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7CiAgICB9IGVsc2UgewogICAgICBkYXRhID0gdW5kZWZpbmVkOwogICAgfQogIH0KICByZXR1cm4gZGF0YTsKfQoKalF1ZXJ5LmV4dGVuZCh7CiAgaGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICByZXR1cm4gZGF0YV91c2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhX3ByaXYuaGFzRGF0YSggZWxlbSApOwogIH0sCgogIGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkgewogICAgcmV0dXJuIGRhdGFfdXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTsKICB9LAoKICByZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHsKICAgIGRhdGFfdXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTsKICB9LAoKICAvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZAogIC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFfcHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC4KICBfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7CiAgICByZXR1cm4gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApOwogIH0sCgogIF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHsKICAgIGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTsKICB9Cn0pOwoKalF1ZXJ5LmZuLmV4dGVuZCh7CiAgZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CiAgICB2YXIgaSwgbmFtZSwgZGF0YSwKICAgICAgZWxlbSA9IHRoaXNbIDAgXSwKICAgICAgYXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlczsKCiAgICAvLyBHZXRzIGFsbCB2YWx1ZXMKICAgIGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7CiAgICAgIGlmICggdGhpcy5sZW5ndGggKSB7CiAgICAgICAgZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0gKTsKCiAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhX3ByaXYuZ2V0KCBlbGVtLCAiaGFzRGF0YUF0dHJzIiApICkgewogICAgICAgICAgaSA9IGF0dHJzLmxlbmd0aDsKICAgICAgICAgIHdoaWxlICggaS0tICkgewogICAgICAgICAgICBuYW1lID0gYXR0cnNbIGkgXS5uYW1lOwoKICAgICAgICAgICAgaWYgKCBuYW1lLmluZGV4T2YoICJkYXRhLSIgKSA9PT0gMCApIHsKICAgICAgICAgICAgICBuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSg1KSApOwogICAgICAgICAgICAgIGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZGF0YV9wcml2LnNldCggZWxlbSwgImhhc0RhdGFBdHRycyIsIHRydWUgKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBkYXRhOwogICAgfQoKICAgIC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzCiAgICBpZiAoIHR5cGVvZiBrZXkgPT09ICJvYmplY3QiICkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgIGRhdGFfdXNlci5zZXQoIHRoaXMsIGtleSApOwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7CiAgICAgIHZhciBkYXRhLAogICAgICAgIGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7CgogICAgICAvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eQogICAgICAvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZQogICAgICAvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdAogICAgICAvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsCiAgICAgIC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuCiAgICAgIGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewogICAgICAgIC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGUKICAgICAgICAvLyB3aXRoIHRoZSBrZXkgYXMtaXMKICAgICAgICBkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSwga2V5ICk7CiAgICAgICAgaWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICB9CgogICAgICAgIC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGUKICAgICAgICAvLyB3aXRoIHRoZSBrZXkgY2FtZWxpemVkCiAgICAgICAgZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0sIGNhbWVsS2V5ICk7CiAgICAgICAgaWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICB9CgogICAgICAgIC8vIEF0dGVtcHQgdG8gImRpc2NvdmVyIiB0aGUgZGF0YSBpbgogICAgICAgIC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnMKICAgICAgICBkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGNhbWVsS2V5LCB1bmRlZmluZWQgKTsKICAgICAgICBpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgIH0KCiAgICAgICAgLy8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LgogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgLy8gU2V0IHRoZSBkYXRhLi4uCiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAvLyBGaXJzdCwgYXR0ZW1wdCB0byBzdG9yZSBhIGNvcHkgb3IgcmVmZXJlbmNlIG9mIGFueQogICAgICAgIC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS4KICAgICAgICB2YXIgZGF0YSA9IGRhdGFfdXNlci5nZXQoIHRoaXMsIGNhbWVsS2V5ICk7CgogICAgICAgIC8vIEZvciBIVE1MNSBkYXRhLSogYXR0cmlidXRlIGludGVyb3AsIHdlIGhhdmUgdG8KICAgICAgICAvLyBzdG9yZSBwcm9wZXJ0eSBuYW1lcyB3aXRoIGRhc2hlcyBpbiBhIGNhbWVsQ2FzZSBmb3JtLgogICAgICAgIC8vIFRoaXMgbWlnaHQgbm90IGFwcGx5IHRvIGFsbCBwcm9wZXJ0aWVzLi4uKgogICAgICAgIGRhdGFfdXNlci5zZXQoIHRoaXMsIGNhbWVsS2V5LCB2YWx1ZSApOwoKICAgICAgICAvLyAqLi4uIEluIHRoZSBjYXNlIG9mIHByb3BlcnRpZXMgdGhhdCBtaWdodCBfYWN0dWFsbHlfCiAgICAgICAgLy8gaGF2ZSBkYXNoZXMsIHdlIG5lZWQgdG8gYWxzbyBzdG9yZSBhIGNvcHkgb2YgdGhhdAogICAgICAgIC8vIHVuY2hhbmdlZCBwcm9wZXJ0eS4KICAgICAgICBpZiAoIGtleS5pbmRleE9mKCItIikgIT09IC0xICYmIGRhdGEgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgIGRhdGFfdXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7CiAgfSwKCiAgcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHsKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgIGRhdGFfdXNlci5yZW1vdmUoIHRoaXMsIGtleSApOwogICAgfSk7CiAgfQp9KTsKCgpqUXVlcnkuZXh0ZW5kKHsKICBxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7CiAgICB2YXIgcXVldWU7CgogICAgaWYgKCBlbGVtICkgewogICAgICB0eXBlID0gKCB0eXBlIHx8ICJmeCIgKSArICJxdWV1ZSI7CiAgICAgIHF1ZXVlID0gZGF0YV9wcml2LmdldCggZWxlbSwgdHlwZSApOwoKICAgICAgLy8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cAogICAgICBpZiAoIGRhdGEgKSB7CiAgICAgICAgaWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHsKICAgICAgICAgIHF1ZXVlID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheShkYXRhKSApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBxdWV1ZS5wdXNoKCBkYXRhICk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBxdWV1ZSB8fCBbXTsKICAgIH0KICB9LAoKICBkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHsKICAgIHR5cGUgPSB0eXBlIHx8ICJmeCI7CgogICAgdmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksCiAgICAgIHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLAogICAgICBmbiA9IHF1ZXVlLnNoaWZ0KCksCiAgICAgIGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksCiAgICAgIG5leHQgPSBmdW5jdGlvbigpIHsKICAgICAgICBqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApOwogICAgICB9OwoKICAgIC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWwKICAgIGlmICggZm4gPT09ICJpbnByb2dyZXNzIiApIHsKICAgICAgZm4gPSBxdWV1ZS5zaGlmdCgpOwogICAgICBzdGFydExlbmd0aC0tOwogICAgfQoKICAgIGlmICggZm4gKSB7CgogICAgICAvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nCiAgICAgIC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWQKICAgICAgaWYgKCB0eXBlID09PSAiZngiICkgewogICAgICAgIHF1ZXVlLnVuc2hpZnQoICJpbnByb2dyZXNzIiApOwogICAgICB9CgogICAgICAvLyBjbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uCiAgICAgIGRlbGV0ZSBob29rcy5zdG9wOwogICAgICBmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApOwogICAgfQoKICAgIGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkgewogICAgICBob29rcy5lbXB0eS5maXJlKCk7CiAgICB9CiAgfSwKCiAgLy8gbm90IGludGVuZGVkIGZvciBwdWJsaWMgY29uc3VtcHRpb24gLSBnZW5lcmF0ZXMgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJucyB0aGUgY3VycmVudCBvbmUKICBfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7CiAgICB2YXIga2V5ID0gdHlwZSArICJxdWV1ZUhvb2tzIjsKICAgIHJldHVybiBkYXRhX3ByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHsKICAgICAgZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IikuYWRkKGZ1bmN0aW9uKCkgewogICAgICAgIGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArICJxdWV1ZSIsIGtleSBdICk7CiAgICAgIH0pCiAgICB9KTsKICB9Cn0pOwoKalF1ZXJ5LmZuLmV4dGVuZCh7CiAgcXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkgewogICAgdmFyIHNldHRlciA9IDI7CgogICAgaWYgKCB0eXBlb2YgdHlwZSAhPT0gInN0cmluZyIgKSB7CiAgICAgIGRhdGEgPSB0eXBlOwogICAgICB0eXBlID0gImZ4IjsKICAgICAgc2V0dGVyLS07CiAgICB9CgogICAgaWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkgewogICAgICByZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWzBdLCB0eXBlICk7CiAgICB9CgogICAgcmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA\/CiAgICAgIHRoaXMgOgogICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7CgogICAgICAgIC8vIGVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlCiAgICAgICAgalF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7CgogICAgICAgIGlmICggdHlwZSA9PT0gImZ4IiAmJiBxdWV1ZVswXSAhPT0gImlucHJvZ3Jlc3MiICkgewogICAgICAgICAgalF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTsKICAgICAgICB9CiAgICAgIH0pOwogIH0sCiAgZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7CiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICBqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApOwogICAgfSk7CiAgfSwKICBjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHsKICAgIHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8ICJmeCIsIFtdICk7CiAgfSwKICAvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlCiAgLy8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpCiAgcHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHsKICAgIHZhciB0bXAsCiAgICAgIGNvdW50ID0gMSwKICAgICAgZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSwKICAgICAgZWxlbWVudHMgPSB0aGlzLAogICAgICBpID0gdGhpcy5sZW5ndGgsCiAgICAgIHJlc29sdmUgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoICEoIC0tY291bnQgKSApIHsKICAgICAgICAgIGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7CiAgICAgICAgfQogICAgICB9OwoKICAgIGlmICggdHlwZW9mIHR5cGUgIT09ICJzdHJpbmciICkgewogICAgICBvYmogPSB0eXBlOwogICAgICB0eXBlID0gdW5kZWZpbmVkOwogICAgfQogICAgdHlwZSA9IHR5cGUgfHwgImZ4IjsKCiAgICB3aGlsZSAoIGktLSApIHsKICAgICAgdG1wID0gZGF0YV9wcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArICJxdWV1ZUhvb2tzIiApOwogICAgICBpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7CiAgICAgICAgY291bnQrKzsKICAgICAgICB0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7CiAgICAgIH0KICAgIH0KICAgIHJlc29sdmUoKTsKICAgIHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTsKICB9Cn0pOwp2YXIgcG51bSA9ICgvWystXT8oPzpcZCpcLnwpXGQrKD86W2VFXVsrLV0\/XGQrfCkvKS5zb3VyY2U7Cgp2YXIgY3NzRXhwYW5kID0gWyAiVG9wIiwgIlJpZ2h0IiwgIkJvdHRvbSIsICJMZWZ0IiBdOwoKdmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkgewogICAgLy8gaXNIaWRkZW4gbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjsKICAgIC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudAogICAgZWxlbSA9IGVsIHx8IGVsZW07CiAgICByZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgImRpc3BsYXkiICkgPT09ICJub25lIiB8fCAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTsKICB9OwoKdmFyIHJjaGVja2FibGVUeXBlID0gKC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pKTsKCgoKKGZ1bmN0aW9uKCkgewogIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwKICAgIGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApICk7CgogIC8vICMxMTIxNyAtIFdlYktpdCBsb3NlcyBjaGVjayB3aGVuIHRoZSBuYW1lIGlzIGFmdGVyIHRoZSBjaGVja2VkIGF0dHJpYnV0ZQogIGRpdi5pbm5lckhUTUwgPSAiPGlucHV0IHR5cGU9J3JhZGlvJyBjaGVja2VkPSdjaGVja2VkJyBuYW1lPSd0Jy8+IjsKCiAgLy8gU3VwcG9ydDogU2FmYXJpIDUuMSwgaU9TIDUuMSwgQW5kcm9pZCA0LngsIEFuZHJvaWQgMi4zCiAgLy8gb2xkIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50cwogIHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDsKCiAgLy8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWQKICAvLyBTdXBwb3J0OiBJRTktSUUxMSsKICBkaXYuaW5uZXJIVE1MID0gIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT4iOwogIHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlOwp9KSgpOwp2YXIgc3RydW5kZWZpbmVkID0gdHlwZW9mIHVuZGVmaW5lZDsKCgoKc3VwcG9ydC5mb2N1c2luQnViYmxlcyA9ICJvbmZvY3VzaW4iIGluIHdpbmRvdzsKCgp2YXIKICBya2V5RXZlbnQgPSAvXmtleS8sCiAgcm1vdXNlRXZlbnQgPSAvXig\/Om1vdXNlfGNvbnRleHRtZW51KXxjbGljay8sCiAgcmZvY3VzTW9ycGggPSAvXig\/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sCiAgcnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcLiguKyl8KSQvOwoKZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHsKICByZXR1cm4gdHJ1ZTsKfQoKZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7CiAgcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHsKICB0cnkgewogICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7CiAgfSBjYXRjaCAoIGVyciApIHsgfQp9CgovKgogKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuCiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuCiAqLwpqUXVlcnkuZXZlbnQgPSB7CgogIGdsb2JhbDoge30sCgogIGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHsKCiAgICB2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsCiAgICAgIGV2ZW50cywgdCwgaGFuZGxlT2JqLAogICAgICBzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsCiAgICAgIGVsZW1EYXRhID0gZGF0YV9wcml2LmdldCggZWxlbSApOwoKICAgIC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpCiAgICBpZiAoICFlbGVtRGF0YSApIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlcgogICAgaWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7CiAgICAgIGhhbmRsZU9iakluID0gaGFuZGxlcjsKICAgICAgaGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7CiAgICAgIHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7CiAgICB9CgogICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyCiAgICBpZiAoICFoYW5kbGVyLmd1aWQgKSB7CiAgICAgIGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7CiAgICB9CgogICAgLy8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdAogICAgaWYgKCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7CiAgICAgIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9OwogICAgfQogICAgaWYgKCAhKGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlKSApIHsKICAgICAgZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHsKICAgICAgICAvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZAogICAgICAgIC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWQKICAgICAgICByZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gc3RydW5kZWZpbmVkICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA\/CiAgICAgICAgICBqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkOwogICAgICB9OwogICAgfQoKICAgIC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2UKICAgIHR5cGVzID0gKCB0eXBlcyB8fCAiIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbICIiIF07CiAgICB0ID0gdHlwZXMubGVuZ3RoOwogICAgd2hpbGUgKCB0LS0gKSB7CiAgICAgIHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107CiAgICAgIHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTsKICAgICAgbmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8ICIiICkuc3BsaXQoICIuIiApLnNvcnQoKTsKCiAgICAgIC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVycwogICAgICBpZiAoICF0eXBlICkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICAvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGUKICAgICAgc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307CgogICAgICAvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGUKICAgICAgdHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlOwoKICAgICAgLy8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZQogICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTsKCiAgICAgIC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzCiAgICAgIGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoewogICAgICAgIHR5cGU6IHR5cGUsCiAgICAgICAgb3JpZ1R5cGU6IG9yaWdUeXBlLAogICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgaGFuZGxlcjogaGFuZGxlciwKICAgICAgICBndWlkOiBoYW5kbGVyLmd1aWQsCiAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yLAogICAgICAgIG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksCiAgICAgICAgbmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIi4iKQogICAgICB9LCBoYW5kbGVPYmpJbiApOwoKICAgICAgLy8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3QKICAgICAgaWYgKCAhKGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0pICkgewogICAgICAgIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTsKICAgICAgICBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDsKCiAgICAgICAgLy8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlCiAgICAgICAgaWYgKCAhc3BlY2lhbC5zZXR1cCB8fCBzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkgewogICAgICAgICAgaWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7CiAgICAgICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUsIGZhbHNlICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoIHNwZWNpYWwuYWRkICkgewogICAgICAgIHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApOwoKICAgICAgICBpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkgewogICAgICAgICAgaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250CiAgICAgIGlmICggc2VsZWN0b3IgKSB7CiAgICAgICAgaGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApOwogICAgICB9IGVsc2UgewogICAgICAgIGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApOwogICAgICB9CgogICAgICAvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uCiAgICAgIGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7CiAgICB9CgogIH0sCgogIC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudAogIHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7CgogICAgdmFyIGosIG9yaWdDb3VudCwgdG1wLAogICAgICBldmVudHMsIHQsIGhhbmRsZU9iaiwKICAgICAgc3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLAogICAgICBlbGVtRGF0YSA9IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YV9wcml2LmdldCggZWxlbSApOwoKICAgIGlmICggIWVsZW1EYXRhIHx8ICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWQKICAgIHR5cGVzID0gKCB0eXBlcyB8fCAiIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbICIiIF07CiAgICB0ID0gdHlwZXMubGVuZ3RoOwogICAgd2hpbGUgKCB0LS0gKSB7CiAgICAgIHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107CiAgICAgIHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTsKICAgICAgbmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8ICIiICkuc3BsaXQoICIuIiApLnNvcnQoKTsKCiAgICAgIC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudAogICAgICBpZiAoICF0eXBlICkgewogICAgICAgIGZvciAoIHR5cGUgaW4gZXZlbnRzICkgewogICAgICAgICAgalF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7CiAgICAgICAgfQogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTsKICAgICAgdHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlOwogICAgICBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdOwogICAgICB0bXAgPSB0bXBbMl0gJiYgbmV3IFJlZ0V4cCggIihefFxcLikiICsgbmFtZXNwYWNlcy5qb2luKCJcXC4oPzouKlxcLnwpIikgKyAiKFxcLnwkKSIgKTsKCiAgICAgIC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHMKICAgICAgb3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDsKICAgICAgd2hpbGUgKCBqLS0gKSB7CiAgICAgICAgaGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTsKCiAgICAgICAgaWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJgogICAgICAgICAgKCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiYKICAgICAgICAgICggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiYKICAgICAgICAgICggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICIqKiIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7CiAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoIGosIDEgKTsKCiAgICAgICAgICBpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHsKICAgICAgICAgICAgaGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCBzcGVjaWFsLnJlbW92ZSApIHsKICAgICAgICAgICAgc3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0CiAgICAgIC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKQogICAgICBpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkgewogICAgICAgIGlmICggIXNwZWNpYWwudGVhcmRvd24gfHwgc3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICBqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApOwogICAgICAgIH0KCiAgICAgICAgZGVsZXRlIGV2ZW50c1sgdHlwZSBdOwogICAgICB9CiAgICB9CgogICAgLy8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWQKICAgIGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkgewogICAgICBkZWxldGUgZWxlbURhdGEuaGFuZGxlOwogICAgICBkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCAiZXZlbnRzIiApOwogICAgfQogIH0sCgogIHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkgewoKICAgIHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsCiAgICAgIGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLAogICAgICB0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCAidHlwZSIgKSA\/IGV2ZW50LnR5cGUgOiBldmVudCwKICAgICAgbmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgIm5hbWVzcGFjZSIgKSA\/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCgiLiIpIDogW107CgogICAgY3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7CgogICAgLy8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXMKICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkgewogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93CiAgICBpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoIHR5cGUuaW5kZXhPZigiLiIpID49IDAgKSB7CiAgICAgIC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKCkKICAgICAgbmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIi4iKTsKICAgICAgdHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTsKICAgICAgbmFtZXNwYWNlcy5zb3J0KCk7CiAgICB9CiAgICBvbnR5cGUgPSB0eXBlLmluZGV4T2YoIjoiKSA8IDAgJiYgIm9uIiArIHR5cGU7CgogICAgLy8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nCiAgICBldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID8KICAgICAgZXZlbnQgOgogICAgICBuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09ICJvYmplY3QiICYmIGV2ZW50ICk7CgogICAgLy8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKQogICAgZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7CiAgICBldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIi4iKTsKICAgIGV2ZW50Lm5hbWVzcGFjZV9yZSA9IGV2ZW50Lm5hbWVzcGFjZSA\\/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7CiAgICAgIH0KCiAgICAgIHJldHVybiBldmVudDsKICAgIH0KICB9LAoKICBmaXg6IGZ1bmN0aW9uKCBldmVudCApIHsKICAgIGlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7CiAgICAgIHJldHVybiBldmVudDsKICAgIH0KCiAgICAvLyBDcmVhdGUgYSB3cml0YWJsZSBjb3B5IG9mIHRoZSBldmVudCBvYmplY3QgYW5kIG5vcm1hbGl6ZSBzb21lIHByb3BlcnRpZXMKICAgIHZhciBpLCBwcm9wLCBjb3B5LAogICAgICB0eXBlID0gZXZlbnQudHlwZSwKICAgICAgb3JpZ2luYWxFdmVudCA9IGV2ZW50LAogICAgICBmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdOwoKICAgIGlmICggIWZpeEhvb2sgKSB7CiAgICAgIHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPQogICAgICAgIHJtb3VzZUV2ZW50LnRlc3QoIHR5cGUgKSA\/IHRoaXMubW91c2VIb29rcyA6CiAgICAgICAgcmtleUV2ZW50LnRlc3QoIHR5cGUgKSA\\/XHcrOy8sCiAgcm5vSW5uZXJodG1sID0gLzwoPzpzY3JpcHR8c3R5bGV8bGluaykvaSwKICAvLyBjaGVja2VkPSJjaGVja2VkIiBvciBjaGVja2VkCiAgcmNoZWNrZWQgPSAvY2hlY2tlZFxzKig\/OltePV18PVxzKi5jaGVja2VkLikvaSwKICByc2NyaXB0VHlwZSA9IC9eJHxcLyg\/OmphdmF8ZWNtYSlzY3JpcHQvaSwKICByc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVwvKC4qKS8sCiAgcmNsZWFuU2NyaXB0ID0gL15ccyo8ISg\/OlxbQ0RBVEFcW3wtLSl8KD86XF1cXXwtLSk+XHMqJC9nLAoKICAvLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKQogIHdyYXBNYXAgPSB7CgogICAgLy8gU3VwcG9ydDogSUUgOQogICAgb3B0aW9uOiBbIDEsICI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+IiwgIjwvc2VsZWN0PiIgXSwKCiAgICB0aGVhZDogWyAxLCAiPHRhYmxlPiIsICI8L3RhYmxlPiIgXSwKICAgIGNvbDogWyAyLCAiPHRhYmxlPjxjb2xncm91cD4iLCAiPC9jb2xncm91cD48L3RhYmxlPiIgXSwKICAgIHRyOiBbIDIsICI8dGFibGU+PHRib2R5PiIsICI8L3Rib2R5PjwvdGFibGU+IiBdLAogICAgdGQ6IFsgMywgIjx0YWJsZT48dGJvZHk+PHRyPiIsICI8L3RyPjwvdGJvZHk+PC90YWJsZT4iIF0sCgogICAgX2RlZmF1bHQ6IFsgMCwgIiIsICIiIF0KICB9OwoKLy8gU3VwcG9ydDogSUUgOQp3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247Cgp3cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkOwp3cmFwTWFwLnRoID0gd3JhcE1hcC50ZDsKCi8vIFN1cHBvcnQ6IDEueCBjb21wYXRpYmlsaXR5Ci8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keQpmdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7CiAgcmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgInRhYmxlIiApICYmCiAgICBqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgInRyIiApID8KCiAgICBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJ0Ym9keSIpWzBdIHx8CiAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0Ym9keSIpICkgOgogICAgZWxlbTsKfQoKLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvbgpmdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkgewogIGVsZW0udHlwZSA9IChlbGVtLmdldEF0dHJpYnV0ZSgidHlwZSIpICE9PSBudWxsKSArICIvIiArIGVsZW0udHlwZTsKICByZXR1cm4gZWxlbTsKfQpmdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkgewogIHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApOwoKICBpZiAoIG1hdGNoICkgewogICAgZWxlbS50eXBlID0gbWF0Y2hbIDEgXTsKICB9IGVsc2UgewogICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoInR5cGUiKTsKICB9CgogIHJldHVybiBlbGVtOwp9CgovLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWQKZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkgewogIHZhciBpID0gMCwKICAgIGwgPSBlbGVtcy5sZW5ndGg7CgogIGZvciAoIDsgaSA8IGw7IGkrKyApIHsKICAgIGRhdGFfcHJpdi5zZXQoCiAgICAgIGVsZW1zWyBpIF0sICJnbG9iYWxFdmFsIiwgIXJlZkVsZW1lbnRzIHx8IGRhdGFfcHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sICJnbG9iYWxFdmFsIiApCiAgICApOwogIH0KfQoKZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHsKICB2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50czsKCiAgaWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkgewogICAgcmV0dXJuOwogIH0KCiAgLy8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy4KICBpZiAoIGRhdGFfcHJpdi5oYXNEYXRhKCBzcmMgKSApIHsKICAgIHBkYXRhT2xkID0gZGF0YV9wcml2LmFjY2Vzcyggc3JjICk7CiAgICBwZGF0YUN1ciA9IGRhdGFfcHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7CiAgICBldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7CgogICAgaWYgKCBldmVudHMgKSB7CiAgICAgIGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7CiAgICAgIHBkYXRhQ3VyLmV2ZW50cyA9IHt9OwoKICAgICAgZm9yICggdHlwZSBpbiBldmVudHMgKSB7CiAgICAgICAgZm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgICBqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICAvLyAyLiBDb3B5IHVzZXIgZGF0YQogIGlmICggZGF0YV91c2VyLmhhc0RhdGEoIHNyYyApICkgewogICAgdWRhdGFPbGQgPSBkYXRhX3VzZXIuYWNjZXNzKCBzcmMgKTsKICAgIHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7CgogICAgZGF0YV91c2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTsKICB9Cn0KCmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkgewogIHZhciByZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lID8gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8ICIqIiApIDoKICAgICAgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsID8gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgIioiICkgOgogICAgICBbXTsKCiAgcmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID8KICAgIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApIDoKICAgIHJldDsKfQoKLy8gU3VwcG9ydDogSUUgPj0gOQpmdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkgewogIHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCiAgLy8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uCiAgaWYgKCBub2RlTmFtZSA9PT0gImlucHV0IiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkgewogICAgZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7CgogIC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zCiAgfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJpbnB1dCIgfHwgbm9kZU5hbWUgPT09ICJ0ZXh0YXJlYSIgKSB7CiAgICBkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7CiAgfQp9CgpqUXVlcnkuZXh0ZW5kKHsKICBjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkgewogICAgdmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsCiAgICAgIGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSwKICAgICAgaW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTsKCiAgICAvLyBTdXBwb3J0OiBJRSA+PSA5CiAgICAvLyBGaXggQ2xvbmluZyBpc3N1ZXMKICAgIGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiYKICAgICAgICAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7CgogICAgICAvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMgogICAgICBkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7CiAgICAgIHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7CgogICAgICBmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKICAgICAgICBmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTsKICAgICAgfQogICAgfQoKICAgIC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmUKICAgIGlmICggZGF0YUFuZEV2ZW50cyApIHsKICAgICAgaWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHsKICAgICAgICBzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApOwogICAgICAgIGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7CgogICAgICAgIGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkgewogICAgICAgICAgY2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApOwogICAgICB9CiAgICB9CgogICAgLy8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeQogICAgZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgInNjcmlwdCIgKTsKICAgIGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7CiAgICAgIHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sICJzY3JpcHQiICkgKTsKICAgIH0KCiAgICAvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXQKICAgIHJldHVybiBjbG9uZTsKICB9LAoKICBidWlsZEZyYWdtZW50OiBmdW5jdGlvbiggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiApIHsKICAgIHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosCiAgICAgIGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksCiAgICAgIG5vZGVzID0gW10sCiAgICAgIGkgPSAwLAogICAgICBsID0gZWxlbXMubGVuZ3RoOwoKICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHsKICAgICAgZWxlbSA9IGVsZW1zWyBpIF07CgogICAgICBpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHsKCiAgICAgICAgLy8gQWRkIG5vZGVzIGRpcmVjdGx5CiAgICAgICAgaWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSAib2JqZWN0IiApIHsKICAgICAgICAgIC8vIFN1cHBvcnQ6IFF0V2ViS2l0CiAgICAgICAgICAvLyBqUXVlcnkubWVyZ2UgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzCiAgICAgICAgICBqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7CgogICAgICAgIC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZQogICAgICAgIH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7CiAgICAgICAgICBub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTsKCiAgICAgICAgLy8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCJkaXYiKSApOwoKICAgICAgICAgIC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb24KICAgICAgICAgIHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgIiIsICIiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICB3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDsKICAgICAgICAgIHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBlbGVtLnJlcGxhY2UoIHJ4aHRtbFRhZywgIjwkMT48LyQyPiIgKSArIHdyYXBbIDIgXTsKCiAgICAgICAgICAvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnQKICAgICAgICAgIGogPSB3cmFwWyAwIF07CiAgICAgICAgICB3aGlsZSAoIGotLSApIHsKICAgICAgICAgICAgdG1wID0gdG1wLmxhc3RDaGlsZDsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBTdXBwb3J0OiBRdFdlYktpdAogICAgICAgICAgLy8galF1ZXJ5Lm1lcmdlIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cwogICAgICAgICAgalF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTsKCiAgICAgICAgICAvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcgogICAgICAgICAgdG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDsKCiAgICAgICAgICAvLyBGaXhlcyAjMTIzNDYKICAgICAgICAgIC8vIFN1cHBvcnQ6IFdlYmtpdCwgSUUKICAgICAgICAgIHRtcC50ZXh0Q29udGVudCA9ICIiOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnQKICAgIGZyYWdtZW50LnRleHRDb250ZW50ID0gIiI7CgogICAgaSA9IDA7CiAgICB3aGlsZSAoIChlbGVtID0gbm9kZXNbIGkrKyBdKSApIHsKCiAgICAgIC8vICM0MDg3IC0gSWYgb3JpZ2luIGFuZCBkZXN0aW5hdGlvbiBlbGVtZW50cyBhcmUgdGhlIHNhbWUsIGFuZCB0aGlzIGlzCiAgICAgIC8vIHRoYXQgZWxlbWVudCwgZG8gbm90IGRvIGFueXRoaW5nCiAgICAgIGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSAhPT0gLTEgKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTsKCiAgICAgIC8vIEFwcGVuZCB0byBmcmFnbWVudAogICAgICB0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksICJzY3JpcHQiICk7CgogICAgICAvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5CiAgICAgIGlmICggY29udGFpbnMgKSB7CiAgICAgICAgc2V0R2xvYmFsRXZhbCggdG1wICk7CiAgICAgIH0KCiAgICAgIC8vIENhcHR1cmUgZXhlY3V0YWJsZXMKICAgICAgaWYgKCBzY3JpcHRzICkgewogICAgICAgIGogPSAwOwogICAgICAgIHdoaWxlICggKGVsZW0gPSB0bXBbIGorKyBdKSApIHsKICAgICAgICAgIGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8ICIiICkgKSB7CiAgICAgICAgICAgIHNjcmlwdHMucHVzaCggZWxlbSApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiBmcmFnbWVudDsKICB9LAoKICBjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHsKICAgIHZhciBkYXRhLCBlbGVtLCBldmVudHMsIHR5cGUsIGtleSwgaiwKICAgICAgc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLAogICAgICBpID0gMDsKCiAgICBmb3IgKCA7IChlbGVtID0gZWxlbXNbIGkgXSkgIT09IHVuZGVmaW5lZDsgaSsrICkgewogICAgICBpZiAoIGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7CiAgICAgICAga2V5ID0gZWxlbVsgZGF0YV9wcml2LmV4cGFuZG8gXTsKCiAgICAgICAgaWYgKCBrZXkgJiYgKGRhdGEgPSBkYXRhX3ByaXYuY2FjaGVbIGtleSBdKSApIHsKICAgICAgICAgIGV2ZW50cyA9IE9iamVjdC5rZXlzKCBkYXRhLmV2ZW50cyB8fCB7fSApOwogICAgICAgICAgaWYgKCBldmVudHMubGVuZ3RoICkgewogICAgICAgICAgICBmb3IgKCBqID0gMDsgKHR5cGUgPSBldmVudHNbal0pICE9PSB1bmRlZmluZWQ7IGorKyApIHsKICAgICAgICAgICAgICBpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHsKICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTsKCiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZAogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIGRhdGFfcHJpdi5jYWNoZVsga2V5IF0gKSB7CiAgICAgICAgICAgIC8vIERpc2NhcmQgYW55IHJlbWFpbmluZyBgcHJpdmF0ZWAgZGF0YQogICAgICAgICAgICBkZWxldGUgZGF0YV9wcml2LmNhY2hlWyBrZXkgXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgLy8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGB1c2VyYCBkYXRhCiAgICAgIGRlbGV0ZSBkYXRhX3VzZXIuY2FjaGVbIGVsZW1bIGRhdGFfdXNlci5leHBhbmRvIF0gXTsKICAgIH0KICB9Cn0pOwoKalF1ZXJ5LmZuLmV4dGVuZCh7CiAgdGV4dDogZnVuY3Rpb24oIHZhbHVlICkgewogICAgcmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkgewogICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA\/CiAgICAgICAgalF1ZXJ5LnRleHQoIHRoaXMgKSA6CiAgICAgICAgdGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHsKICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTsKICB9LAoKICBhcHBlbmQ6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkgewogICAgICAgIHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTsKICAgICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTsKICAgICAgfQogICAgfSk7CiAgfSwKCiAgcHJlcGVuZDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgaWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7CiAgICAgICAgdmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApOwogICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7CiAgICAgIH0KICAgIH0pOwogIH0sCgogIGJlZm9yZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgaWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7CiAgICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApOwogICAgICB9CiAgICB9KTsKICB9LAoKICBhZnRlcjogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgaWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7CiAgICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApOwogICAgICB9CiAgICB9KTsKICB9LAoKICByZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3Rvciwga2VlcERhdGEgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7CiAgICB2YXIgZWxlbSwKICAgICAgZWxlbXMgPSBzZWxlY3RvciA\/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCB0aGlzICkgOiB0aGlzLAogICAgICBpID0gMDsKCiAgICBmb3IgKCA7IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHsKICAgICAgaWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHsKICAgICAgICBqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0gKSApOwogICAgICB9CgogICAgICBpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHsKICAgICAgICBpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7CiAgICAgICAgICBzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIGVsZW0sICJzY3JpcHQiICkgKTsKICAgICAgICB9CiAgICAgICAgZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbGVtICk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9LAoKICBlbXB0eTogZnVuY3Rpb24oKSB7CiAgICB2YXIgZWxlbSwKICAgICAgaSA9IDA7CgogICAgZm9yICggOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKyApIHsKICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewoKICAgICAgICAvLyBQcmV2ZW50IG1lbW9yeSBsZWFrcwogICAgICAgIGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApOwoKICAgICAgICAvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2RlcwogICAgICAgIGVsZW0udGV4dENvbnRlbnQgPSAiIjsKICAgICAgfQogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0sCgogIGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7CiAgICBkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzOwogICAgZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzOwoKICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTsKICAgIH0pOwogIH0sCgogIGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKICAgIHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHsKICAgICAgdmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sCiAgICAgICAgaSA9IDAsCiAgICAgICAgbCA9IHRoaXMubGVuZ3RoOwoKICAgICAgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7CiAgICAgICAgcmV0dXJuIGVsZW0uaW5uZXJIVE1MOwogICAgICB9CgogICAgICAvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MCiAgICAgIGlmICggdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiYKICAgICAgICAhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgIiIsICIiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHsKCiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCByeGh0bWxUYWcsICI8JDE+PC8kMj4iICk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKCA7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgICAgIGVsZW0gPSB0aGlzWyBpIF0gfHwge307CgogICAgICAgICAgICAvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3MKICAgICAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICAgIGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApOwogICAgICAgICAgICAgIGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBlbGVtID0gMDsKCiAgICAgICAgLy8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kCiAgICAgICAgfSBjYXRjaCggZSApIHt9CiAgICAgIH0KCiAgICAgIGlmICggZWxlbSApIHsKICAgICAgICB0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApOwogICAgICB9CiAgICB9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApOwogIH0sCgogIHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHsKICAgIHZhciBhcmcgPSBhcmd1bWVudHNbIDAgXTsKCiAgICAvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnQKICAgIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgIGFyZyA9IHRoaXMucGFyZW50Tm9kZTsKCiAgICAgIGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7CgogICAgICBpZiAoIGFyZyApIHsKICAgICAgICBhcmcucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7CiAgICAgIH0KICAgIH0pOwoKICAgIC8vIEZvcmNlIHJlbW92YWwgaWYgdGhlcmUgd2FzIG5vIG5ldyBjb250ZW50IChlLmcuLCBmcm9tIGVtcHR5IGFyZ3VtZW50cykKICAgIHJldHVybiBhcmcgJiYgKGFyZy5sZW5ndGggfHwgYXJnLm5vZGVUeXBlKSA\/IHRoaXMgOiB0aGlzLnJlbW92ZSgpOwogIH0sCgogIGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkgewogICAgcmV0dXJuIHRoaXMucmVtb3ZlKCBzZWxlY3RvciwgdHJ1ZSApOwogIH0sCgogIGRvbU1hbmlwOiBmdW5jdGlvbiggYXJncywgY2FsbGJhY2sgKSB7CgogICAgLy8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5cwogICAgYXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTsKCiAgICB2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsCiAgICAgIGkgPSAwLAogICAgICBsID0gdGhpcy5sZW5ndGgsCiAgICAgIHNldCA9IHRoaXMsCiAgICAgIGlOb0Nsb25lID0gbCAtIDEsCiAgICAgIHZhbHVlID0gYXJnc1sgMCBdLAogICAgICBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7CgogICAgLy8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0CiAgICBpZiAoIGlzRnVuY3Rpb24gfHwKICAgICAgICAoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIgJiYKICAgICAgICAgICFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpbmRleCApIHsKICAgICAgICB2YXIgc2VsZiA9IHNldC5lcSggaW5kZXggKTsKICAgICAgICBpZiAoIGlzRnVuY3Rpb24gKSB7CiAgICAgICAgICBhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTsKICAgICAgICB9CiAgICAgICAgc2VsZi5kb21NYW5pcCggYXJncywgY2FsbGJhY2sgKTsKICAgICAgfSk7CiAgICB9CgogICAgaWYgKCBsICkgewogICAgICBmcmFnbWVudCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIHRoaXMgKTsKICAgICAgZmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkOwoKICAgICAgaWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHsKICAgICAgICBmcmFnbWVudCA9IGZpcnN0OwogICAgICB9CgogICAgICBpZiAoIGZpcnN0ICkgewogICAgICAgIHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCAic2NyaXB0IiApLCBkaXNhYmxlU2NyaXB0ICk7CiAgICAgICAgaGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoOwoKICAgICAgICAvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cAogICAgICAgIC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuCiAgICAgICAgZm9yICggOyBpIDwgbDsgaSsrICkgewogICAgICAgICAgbm9kZSA9IGZyYWdtZW50OwoKICAgICAgICAgIGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7CiAgICAgICAgICAgIG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTsKCiAgICAgICAgICAgIC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb24KICAgICAgICAgICAgaWYgKCBoYXNTY3JpcHRzICkgewogICAgICAgICAgICAgIC8vIFN1cHBvcnQ6IFF0V2ViS2l0CiAgICAgICAgICAgICAgLy8galF1ZXJ5Lm1lcmdlIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cwogICAgICAgICAgICAgIGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCAic2NyaXB0IiApICk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBjYWxsYmFjay5jYWxsKCB0aGlzWyBpIF0sIG5vZGUsIGkgKTsKICAgICAgICB9CgogICAgICAgIGlmICggaGFzU2NyaXB0cyApIHsKICAgICAgICAgIGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7CgogICAgICAgICAgLy8gUmVlbmFibGUgc2NyaXB0cwogICAgICAgICAgalF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApOwoKICAgICAgICAgIC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb24KICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkgewogICAgICAgICAgICBub2RlID0gc2NyaXB0c1sgaSBdOwogICAgICAgICAgICBpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCAiIiApICYmCiAgICAgICAgICAgICAgIWRhdGFfcHJpdi5hY2Nlc3MoIG5vZGUsICJnbG9iYWxFdmFsIiApICYmIGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7CgogICAgICAgICAgICAgIGlmICggbm9kZS5zcmMgKSB7CiAgICAgICAgICAgICAgICAvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudAogICAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7CiAgICAgICAgICAgICAgICAgIGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgalF1ZXJ5Lmdsb2JhbEV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCAiIiApICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfQp9KTsKCmpRdWVyeS5lYWNoKHsKICBhcHBlbmRUbzogImFwcGVuZCIsCiAgcHJlcGVuZFRvOiAicHJlcGVuZCIsCiAgaW5zZXJ0QmVmb3JlOiAiYmVmb3JlIiwKICBpbnNlcnRBZnRlcjogImFmdGVyIiwKICByZXBsYWNlQWxsOiAicmVwbGFjZVdpdGgiCn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHsKICBqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKICAgIHZhciBlbGVtcywKICAgICAgcmV0ID0gW10sCiAgICAgIGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSwKICAgICAgbGFzdCA9IGluc2VydC5sZW5ndGggLSAxLAogICAgICBpID0gMDsKCiAgICBmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkgewogICAgICBlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApOwogICAgICBqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7CgogICAgICAvLyBTdXBwb3J0OiBRdFdlYktpdAogICAgICAvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzCiAgICAgIHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApOwogIH07Cn0pOwoKCnZhciBpZnJhbWUsCiAgZWxlbWRpc3BsYXkgPSB7fTsKCi8qKgogKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50CiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50CiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgRG9jdW1lbnQgb2JqZWN0CiAqLwovLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheQpmdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7CiAgdmFyIGVsZW0gPSBqUXVlcnkoIGRvYy5jcmVhdGVFbGVtZW50KCBuYW1lICkgKS5hcHBlbmRUbyggZG9jLmJvZHkgKSwKCiAgICAvLyBnZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSBtaWdodCBiZSByZWxpYWJseSB1c2VkIG9ubHkgb24gYXR0YWNoZWQgZWxlbWVudAogICAgZGlzcGxheSA9IHdpbmRvdy5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSA\/CgogICAgICAvLyBVc2Ugb2YgdGhpcyBtZXRob2QgaXMgYSB0ZW1wb3JhcnkgZml4IChtb3JlIGxpa2Ugb3B0bWl6YXRpb24pIHVudGlsIHNvbWV0aGluZyBiZXR0ZXIgY29tZXMgYWxvbmcsCiAgICAgIC8vIHNpbmNlIGl0IHdhcyByZW1vdmVkIGZyb20gc3BlY2lmaWNhdGlvbiBhbmQgc3VwcG9ydGVkIG9ubHkgaW4gRkYKICAgICAgd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlKCBlbGVtWyAwIF0gKS5kaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbVsgMCBdLCAiZGlzcGxheSIgKTsKCiAgLy8gV2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YSBzdG9yZWQgb24gdGhlIGVsZW1lbnQsCiAgLy8gc28gdXNlICJkZXRhY2giIG1ldGhvZCBhcyBmYXN0IHdheSB0byBnZXQgcmlkIG9mIHRoZSBlbGVtZW50CiAgZWxlbS5kZXRhY2goKTsKCiAgcmV0dXJuIGRpc3BsYXk7Cn0KCi8qKgogKiBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudAogKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWUKICovCmZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KCBub2RlTmFtZSApIHsKICB2YXIgZG9jID0gZG9jdW1lbnQsCiAgICBkaXNwbGF5ID0gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07CgogIGlmICggIWRpc3BsYXkgKSB7CiAgICBkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApOwoKICAgIC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZQogICAgaWYgKCBkaXNwbGF5ID09PSAibm9uZSIgfHwgIWRpc3BsYXkgKSB7CgogICAgICAvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGUKICAgICAgaWZyYW1lID0gKGlmcmFtZSB8fCBqUXVlcnkoICI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+IiApKS5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApOwoKICAgICAgLy8gQWx3YXlzIHdyaXRlIGEgbmV3IEhUTUwgc2tlbGV0b24gc28gV2Via2l0IGFuZCBGaXJlZm94IGRvbid0IGNob2tlIG9uIHJldXNlCiAgICAgIGRvYyA9IGlmcmFtZVsgMCBdLmNvbnRlbnREb2N1bWVudDsKCiAgICAgIC8vIFN1cHBvcnQ6IElFCiAgICAgIGRvYy53cml0ZSgpOwogICAgICBkb2MuY2xvc2UoKTsKCiAgICAgIGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7CiAgICAgIGlmcmFtZS5kZXRhY2goKTsKICAgIH0KCiAgICAvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXkKICAgIGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTsKICB9CgogIHJldHVybiBkaXNwbGF5Owp9CnZhciBybWFyZ2luID0gKC9ebWFyZ2luLyk7Cgp2YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggIl4oIiArIHBudW0gKyAiKSg\/IXB4KVthLXolXSskIiwgImkiICk7Cgp2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7CiAgICByZXR1cm4gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTsKICB9OwoKCgpmdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkgewogIHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsCiAgICBzdHlsZSA9IGVsZW0uc3R5bGU7CgogIGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7CgogIC8vIFN1cHBvcnQ6IElFOQogIC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpIGluIElFOSwgc2VlICMxMjUzNwogIGlmICggY29tcHV0ZWQgKSB7CiAgICByZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTsKICB9CgogIGlmICggY29tcHV0ZWQgKSB7CgogICAgaWYgKCByZXQgPT09ICIiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkgewogICAgICByZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTsKICAgIH0KCiAgICAvLyBTdXBwb3J0OiBpT1MgPCA2CiAgICAvLyBBIHRyaWJ1dGUgdG8gdGhlICJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzIgogICAgLy8gaU9TIDwgNiAoYXQgbGVhc3QpIHJldHVybnMgcGVyY2VudGFnZSBmb3IgYSBsYXJnZXIgc2V0IG9mIHZhbHVlcywgYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscwogICAgLy8gdGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOiBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzCiAgICBpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHsKCiAgICAgIC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXMKICAgICAgd2lkdGggPSBzdHlsZS53aWR0aDsKICAgICAgbWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDsKICAgICAgbWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDsKCiAgICAgIC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXQKICAgICAgc3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0OwogICAgICByZXQgPSBjb21wdXRlZC53aWR0aDsKCiAgICAgIC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXMKICAgICAgc3R5bGUud2lkdGggPSB3aWR0aDsKICAgICAgc3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDsKICAgICAgc3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDsKICAgIH0KICB9CgogIHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA\\/aWQ9NjQ5Mjg1CiAgLy8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k\/aWQ9NDkxNjY4CiAgaWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHsKICAgIC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeQogICAgdmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTsKICAgIGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHsKICAgICAgdmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdOwogICAgfQoKICAgIC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uCiAgICBpZiAoIHJudW1ub25weC50ZXN0KHZhbCkgKSB7CiAgICAgIHJldHVybiB2YWw7CiAgICB9CgogICAgLy8gd2UgbmVlZCB0aGUgY2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXMKICAgIC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGUKICAgIHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJgogICAgICAoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApOwoKICAgIC8vIE5vcm1hbGl6ZSAiIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhCiAgICB2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwOwogIH0KCiAgLy8gdXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXMKICByZXR1cm4gKCB2YWwgKwogICAgYXVnbWVudFdpZHRoT3JIZWlnaHQoCiAgICAgIGVsZW0sCiAgICAgIG5hbWUsCiAgICAgIGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyAiYm9yZGVyIiA6ICJjb250ZW50IiApLAogICAgICB2YWx1ZUlzQm9yZGVyQm94LAogICAgICBzdHlsZXMKICAgICkKICApICsgInB4IjsKfQoKZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkgewogIHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sCiAgICB2YWx1ZXMgPSBbXSwKICAgIGluZGV4ID0gMCwKICAgIGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDsKCiAgZm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHsKICAgIGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTsKICAgIGlmICggIWVsZW0uc3R5bGUgKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sICJvbGRkaXNwbGF5IiApOwogICAgZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTsKICAgIGlmICggc2hvdyApIHsKICAgICAgLy8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHRoaXMgZWxlbWVudCB0byBsZWFybiBpZiBpdCBpcwogICAgICAvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90CiAgICAgIGlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSAibm9uZSIgKSB7CiAgICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gIiI7CiAgICAgIH0KCiAgICAgIC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmUKICAgICAgLy8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXMKICAgICAgLy8gZm9yIHN1Y2ggYW4gZWxlbWVudAogICAgICBpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gIiIgJiYgaXNIaWRkZW4oIGVsZW0gKSApIHsKICAgICAgICB2YWx1ZXNbIGluZGV4IF0gPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCAib2xkZGlzcGxheSIsIGRlZmF1bHREaXNwbGF5KGVsZW0ubm9kZU5hbWUpICk7CiAgICAgIH0KICAgIH0gZWxzZSB7CgogICAgICBpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7CiAgICAgICAgaGlkZGVuID0gaXNIaWRkZW4oIGVsZW0gKTsKCiAgICAgICAgaWYgKCBkaXNwbGF5ICYmIGRpc3BsYXkgIT09ICJub25lIiB8fCAhaGlkZGVuICkgewogICAgICAgICAgZGF0YV9wcml2LnNldCggZWxlbSwgIm9sZGRpc3BsYXkiLCBoaWRkZW4gPyBkaXNwbGF5IDogalF1ZXJ5LmNzcyhlbGVtLCAiZGlzcGxheSIpICk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICAvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcAogIC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3cKICBmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkgewogICAgZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdOwogICAgaWYgKCAhZWxlbS5zdHlsZSApIHsKICAgICAgY29udGludWU7CiAgICB9CiAgICBpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gIm5vbmUiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gIiIgKSB7CiAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgIiIgOiAibm9uZSI7CiAgICB9CiAgfQoKICByZXR1cm4gZWxlbWVudHM7Cn0KCmpRdWVyeS5leHRlbmQoewogIC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdAogIC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eQogIGNzc0hvb2tzOiB7CiAgICBvcGFjaXR5OiB7CiAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkgewogICAgICAgIGlmICggY29tcHV0ZWQgKSB7CiAgICAgICAgICAvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eQogICAgICAgICAgdmFyIHJldCA9IGN1ckNTUyggZWxlbSwgIm9wYWNpdHkiICk7CiAgICAgICAgICByZXR1cm4gcmV0ID09PSAiIiA\/ICIxIiA6IHJldDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAoKICAvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCAicHgiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXMKICBjc3NOdW1iZXI6IHsKICAgICJjb2x1bW5Db3VudCI6IHRydWUsCiAgICAiZmlsbE9wYWNpdHkiOiB0cnVlLAogICAgImZvbnRXZWlnaHQiOiB0cnVlLAogICAgImxpbmVIZWlnaHQiOiB0cnVlLAogICAgIm9wYWNpdHkiOiB0cnVlLAogICAgIm9yZGVyIjogdHJ1ZSwKICAgICJvcnBoYW5zIjogdHJ1ZSwKICAgICJ3aWRvd3MiOiB0cnVlLAogICAgInpJbmRleCI6IHRydWUsCiAgICAiem9vbSI6IHRydWUKICB9LAoKICAvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlCiAgLy8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZQogIGNzc1Byb3BzOiB7CiAgICAvLyBub3JtYWxpemUgZmxvYXQgY3NzIHByb3BlcnR5CiAgICAiZmxvYXQiOiAiY3NzRmxvYXQiCiAgfSwKCiAgLy8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGUKICBzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHsKICAgIC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2RlcwogICAgaWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUKICAgIHZhciByZXQsIHR5cGUsIGhvb2tzLAogICAgICBvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSwKICAgICAgc3R5bGUgPSBlbGVtLnN0eWxlOwoKICAgIG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG9yaWdOYW1lICkgKTsKCiAgICAvLyBnZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uCiAgICAvLyBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCB2ZXJzaW9uCiAgICBob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTsKCiAgICAvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWUKICAgIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKICAgICAgdHlwZSA9IHR5cGVvZiB2YWx1ZTsKCiAgICAgIC8vIGNvbnZlcnQgcmVsYXRpdmUgbnVtYmVyIHN0cmluZ3MgKCs9IG9yIC09KSB0byByZWxhdGl2ZSBudW1iZXJzLiAjNzM0NQogICAgICBpZiAoIHR5cGUgPT09ICJzdHJpbmciICYmIChyZXQgPSBycmVsTnVtLmV4ZWMoIHZhbHVlICkpICkgewogICAgICAgIHZhbHVlID0gKCByZXRbMV0gKyAxICkgKiByZXRbMl0gKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTsKICAgICAgICAvLyBGaXhlcyBidWcgIzkyMzcKICAgICAgICB0eXBlID0gIm51bWJlciI7CiAgICAgIH0KCiAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldC4gU2VlOiAjNzExNgogICAgICBpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgLy8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkICdweCcgdG8gdGhlIChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpCiAgICAgIGlmICggdHlwZSA9PT0gIm51bWJlciIgJiYgIWpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gKSB7CiAgICAgICAgdmFsdWUgKz0gInB4IjsKICAgICAgfQoKICAgICAgLy8gRml4ZXMgIzg5MDgsIGl0IGNhbiBiZSBkb25lIG1vcmUgY29ycmVjdGx5IGJ5IHNwZWNpZnlpbmcgc2V0dGVycyBpbiBjc3NIb29rcywKICAgICAgLy8gYnV0IGl0IHdvdWxkIG1lYW4gdG8gZGVmaW5lIGVpZ2h0IChmb3IgZXZlcnkgcHJvYmxlbWF0aWMgcHJvcGVydHkpIGlkZW50aWNhbCBmdW5jdGlvbnMKICAgICAgaWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09ICIiICYmIG5hbWUuaW5kZXhPZiggImJhY2tncm91bmQiICkgPT09IDAgKSB7CiAgICAgICAgc3R5bGVbIG5hbWUgXSA9ICJpbmhlcml0IjsKICAgICAgfQoKICAgICAgLy8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlCiAgICAgIGlmICggIWhvb2tzIHx8ICEoInNldCIgaW4gaG9va3MpIHx8ICh2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgLy8gU3VwcG9ydDogQ2hyb21lLCBTYWZhcmkKICAgICAgICAvLyBTZXR0aW5nIHN0eWxlIHRvIGJsYW5rIHN0cmluZyByZXF1aXJlZCB0byBkZWxldGUgInN0eWxlOiB4ICFpbXBvcnRhbnQ7IgogICAgICAgIHN0eWxlWyBuYW1lIF0gPSAiIjsKICAgICAgICBzdHlsZVsgbmFtZSBdID0gdmFsdWU7CiAgICAgIH0KCiAgICB9IGVsc2UgewogICAgICAvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmUKICAgICAgaWYgKCBob29rcyAmJiAiZ2V0IiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICByZXR1cm4gcmV0OwogICAgICB9CgogICAgICAvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdAogICAgICByZXR1cm4gc3R5bGVbIG5hbWUgXTsKICAgIH0KICB9LAoKICBjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkgewogICAgdmFyIHZhbCwgbnVtLCBob29rcywKICAgICAgb3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7CgogICAgLy8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lCiAgICBuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIGVsZW0uc3R5bGUsIG9yaWdOYW1lICkgKTsKCiAgICAvLyBnZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uCiAgICAvLyBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCB2ZXJzaW9uCiAgICBob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTsKCiAgICAvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZQogICAgaWYgKCBob29rcyAmJiAiZ2V0IiBpbiBob29rcyApIHsKICAgICAgdmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApOwogICAgfQoKICAgIC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0CiAgICBpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkgewogICAgICB2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApOwogICAgfQoKICAgIC8vY29udmVydCAibm9ybWFsIiB0byBjb21wdXRlZCB2YWx1ZQogICAgaWYgKCB2YWwgPT09ICJub3JtYWwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkgewogICAgICB2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTsKICAgIH0KCiAgICAvLyBSZXR1cm4sIGNvbnZlcnRpbmcgdG8gbnVtYmVyIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljCiAgICBpZiAoIGV4dHJhID09PSAiIiB8fCBleHRyYSApIHsKICAgICAgbnVtID0gcGFyc2VGbG9hdCggdmFsICk7CiAgICAgIHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBqUXVlcnkuaXNOdW1lcmljKCBudW0gKSA\/IG51bSB8fCAwIDogdmFsOwogICAgfQogICAgcmV0dXJuIHZhbDsKICB9Cn0pOwoKalF1ZXJ5LmVhY2goWyAiaGVpZ2h0IiwgIndpZHRoIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKICBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHsKICAgIGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHsKICAgICAgaWYgKCBjb21wdXRlZCApIHsKICAgICAgICAvLyBjZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW0KICAgICAgICAvLyBob3dldmVyLCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0IGZyb20gdGhpcwogICAgICAgIHJldHVybiBlbGVtLm9mZnNldFdpZHRoID09PSAwICYmIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCAiZGlzcGxheSIgKSApID8KICAgICAgICAgIGpRdWVyeS5zd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7CiAgICAgICAgICB9KSA6CiAgICAgICAgICBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApOwogICAgICB9CiAgICB9LAoKICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHsKICAgICAgdmFyIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApOwogICAgICByZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBleHRyYSA\/CiAgICAgICAgYXVnbWVudFdpZHRoT3JIZWlnaHQoCiAgICAgICAgICBlbGVtLAogICAgICAgICAgbmFtZSwKICAgICAgICAgIGV4dHJhLAogICAgICAgICAgalF1ZXJ5LmNzcyggZWxlbSwgImJveFNpemluZyIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gImJvcmRlci1ib3giLAogICAgICAgICAgc3R5bGVzCiAgICAgICAgKSA6IDAKICAgICAgKTsKICAgIH0KICB9Owp9KTsKCi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zCmpRdWVyeS5jc3NIb29rcy5tYXJnaW5SaWdodCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpblJpZ2h0LAogIGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHsKICAgIGlmICggY29tcHV0ZWQgKSB7CiAgICAgIC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodAogICAgICAvLyBXb3JrIGFyb3VuZCBieSB0ZW1wb3JhcmlseSBzZXR0aW5nIGVsZW1lbnQgZGlzcGxheSB0byBpbmxpbmUtYmxvY2sKICAgICAgcmV0dXJuIGpRdWVyeS5zd2FwKCBlbGVtLCB7ICJkaXNwbGF5IjogImlubGluZS1ibG9jayIgfSwKICAgICAgICBjdXJDU1MsIFsgZWxlbSwgIm1hcmdpblJpZ2h0IiBdICk7CiAgICB9CiAgfQopOwoKLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllcwpqUXVlcnkuZWFjaCh7CiAgbWFyZ2luOiAiIiwKICBwYWRkaW5nOiAiIiwKICBib3JkZXI6ICJXaWR0aCIKfSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkgewogIGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7CiAgICBleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKICAgICAgdmFyIGkgPSAwLAogICAgICAgIGV4cGFuZGVkID0ge30sCgogICAgICAgIC8vIGFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZwogICAgICAgIHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIiA\/IHZhbHVlLnNwbGl0KCIgIikgOiBbIHZhbHVlIF07CgogICAgICBmb3IgKCA7IGkgPCA0OyBpKysgKSB7CiAgICAgICAgZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPQogICAgICAgICAgcGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdOwogICAgICB9CgogICAgICByZXR1cm4gZXhwYW5kZWQ7CiAgICB9CiAgfTsKCiAgaWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHsKICAgIGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7CiAgfQp9KTsKCmpRdWVyeS5mbi5leHRlbmQoewogIGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkgewogICAgcmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkgewogICAgICB2YXIgc3R5bGVzLCBsZW4sCiAgICAgICAgbWFwID0ge30sCiAgICAgICAgaSA9IDA7CgogICAgICBpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7CiAgICAgICAgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7CiAgICAgICAgbGVuID0gbmFtZS5sZW5ndGg7CgogICAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkgewogICAgICAgICAgbWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG1hcDsKICAgICAgfQoKICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPwogICAgICAgIGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6CiAgICAgICAgalF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApOwogICAgfSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7CiAgfSwKICBzaG93OiBmdW5jdGlvbigpIHsKICAgIHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApOwogIH0sCiAgaGlkZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTsKICB9LAogIHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkgewogICAgaWYgKCB0eXBlb2Ygc3RhdGUgPT09ICJib29sZWFuIiApIHsKICAgICAgcmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICBpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7CiAgICAgICAgalF1ZXJ5KCB0aGlzICkuc2hvdygpOwogICAgICB9IGVsc2UgewogICAgICAgIGpRdWVyeSggdGhpcyApLmhpZGUoKTsKICAgICAgfQogICAgfSk7CiAgfQp9KTsKCgpmdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7CiAgcmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTsKfQpqUXVlcnkuVHdlZW4gPSBUd2VlbjsKClR3ZWVuLnByb3RvdHlwZSA9IHsKICBjb25zdHJ1Y3RvcjogVHdlZW4sCiAgaW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkgewogICAgdGhpcy5lbGVtID0gZWxlbTsKICAgIHRoaXMucHJvcCA9IHByb3A7CiAgICB0aGlzLmVhc2luZyA9IGVhc2luZyB8fCAic3dpbmciOwogICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKICAgIHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7CiAgICB0aGlzLmVuZCA9IGVuZDsKICAgIHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyAiIiA6ICJweCIgKTsKICB9LAogIGN1cjogZnVuY3Rpb24oKSB7CiAgICB2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdOwoKICAgIHJldHVybiBob29rcyAmJiBob29rcy5nZXQgPwogICAgICBob29rcy5nZXQoIHRoaXMgKSA6CiAgICAgIFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTsKICB9LAogIHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7CiAgICB2YXIgZWFzZWQsCiAgICAgIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTsKCiAgICBpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHsKICAgICAgdGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oCiAgICAgICAgcGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uCiAgICAgICk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDsKICAgIH0KICAgIHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDsKCiAgICBpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkgewogICAgICB0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7CiAgICB9CgogICAgaWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7CiAgICAgIGhvb2tzLnNldCggdGhpcyApOwogICAgfSBlbHNlIHsKICAgICAgVHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApOwogICAgfQogICAgcmV0dXJuIHRoaXM7CiAgfQp9OwoKVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlOwoKVHdlZW4ucHJvcEhvb2tzID0gewogIF9kZWZhdWx0OiB7CiAgICBnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHsKICAgICAgdmFyIHJlc3VsdDsKCiAgICAgIGlmICggdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYKICAgICAgICAoIXR3ZWVuLmVsZW0uc3R5bGUgfHwgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwpICkgewogICAgICAgIHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07CiAgICAgIH0KCiAgICAgIC8vIHBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseQogICAgICAvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzCiAgICAgIC8vIHNvLCBzaW1wbGUgdmFsdWVzIHN1Y2ggYXMgIjEwcHgiIGFyZSBwYXJzZWQgdG8gRmxvYXQuCiAgICAgIC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgInJvdGF0ZSgxcmFkKSIgYXJlIHJldHVybmVkIGFzIGlzLgogICAgICByZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCAiIiApOwogICAgICAvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kICJhdXRvIiBhcmUgY29udmVydGVkIHRvIDAuCiAgICAgIHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gImF1dG8iID8gMCA6IHJlc3VsdDsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHsKICAgICAgLy8gdXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQgLSB1c2UgY3NzSG9vayBpZiBpdHMgdGhlcmUgLSB1c2UgLnN0eWxlIGlmIGl0cwogICAgICAvLyBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZQogICAgICBpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7CiAgICAgICAgalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTsKICAgICAgfSBlbHNlIGlmICggdHdlZW4uZWxlbS5zdHlsZSAmJiAoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fCBqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkgewogICAgICAgIGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApOwogICAgICB9IGVsc2UgewogICAgICAgIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdzsKICAgICAgfQogICAgfQogIH0KfTsKCi8vIFN1cHBvcnQ6IElFOQovLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXMKClR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHsKICBzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHsKICAgIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7CiAgICAgIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdzsKICAgIH0KICB9Cn07CgpqUXVlcnkuZWFzaW5nID0gewogIGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7CiAgICByZXR1cm4gcDsKICB9LAogIHN3aW5nOiBmdW5jdGlvbiggcCApIHsKICAgIHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7CiAgfQp9OwoKalF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7CgovLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludApqUXVlcnkuZnguc3RlcCA9IHt9OwoKCgoKdmFyCiAgZnhOb3csIHRpbWVySWQsCiAgcmZ4dHlwZXMgPSAvXig\/OnRvZ2dsZXxzaG93fGhpZGUpJC8sCiAgcmZ4bnVtID0gbmV3IFJlZ0V4cCggIl4oPzooWystXSk9fCkoIiArIHBudW0gKyAiKShbYS16JV0qKSQiLCAiaSIgKSwKICBycnVuID0gL3F1ZXVlSG9va3MkLywKICBhbmltYXRpb25QcmVmaWx0ZXJzID0gWyBkZWZhdWx0UHJlZmlsdGVyIF0sCiAgdHdlZW5lcnMgPSB7CiAgICAiKiI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkgewogICAgICB2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApLAogICAgICAgIHRhcmdldCA9IHR3ZWVuLmN1cigpLAogICAgICAgIHBhcnRzID0gcmZ4bnVtLmV4ZWMoIHZhbHVlICksCiAgICAgICAgdW5pdCA9IHBhcnRzICYmIHBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyAiIiA6ICJweCIgKSwKCiAgICAgICAgLy8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXMKICAgICAgICBzdGFydCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09ICJweCIgJiYgK3RhcmdldCApICYmCiAgICAgICAgICByZnhudW0uZXhlYyggalF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgcHJvcCApICksCiAgICAgICAgc2NhbGUgPSAxLAogICAgICAgIG1heEl0ZXJhdGlvbnMgPSAyMDsKCiAgICAgIGlmICggc3RhcnQgJiYgc3RhcnRbIDMgXSAhPT0gdW5pdCApIHsKICAgICAgICAvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzCiAgICAgICAgdW5pdCA9IHVuaXQgfHwgc3RhcnRbIDMgXTsKCiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvbgogICAgICAgIHBhcnRzID0gcGFydHMgfHwgW107CgogICAgICAgIC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50CiAgICAgICAgc3RhcnQgPSArdGFyZ2V0IHx8IDE7CgogICAgICAgIGRvIHsKICAgICAgICAgIC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqCiAgICAgICAgICAvLyBVc2UgYSBzdHJpbmcgZm9yIGRvdWJsaW5nIGZhY3RvciBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvdwogICAgICAgICAgc2NhbGUgPSBzY2FsZSB8fCAiLjUiOwoKICAgICAgICAgIC8vIEFkanVzdCBhbmQgYXBwbHkKICAgICAgICAgIHN0YXJ0ID0gc3RhcnQgLyBzY2FsZTsKICAgICAgICAgIGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7CgogICAgICAgIC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpCiAgICAgICAgLy8gQW5kIGJyZWFraW5nIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2gKICAgICAgICB9IHdoaWxlICggc2NhbGUgIT09IChzY2FsZSA9IHR3ZWVuLmN1cigpIC8gdGFyZ2V0KSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnMgKTsKICAgICAgfQoKICAgICAgLy8gVXBkYXRlIHR3ZWVuIHByb3BlcnRpZXMKICAgICAgaWYgKCBwYXJ0cyApIHsKICAgICAgICBzdGFydCA9IHR3ZWVuLnN0YXJ0ID0gK3N0YXJ0IHx8ICt0YXJnZXQgfHwgMDsKICAgICAgICB0d2Vlbi51bml0ID0gdW5pdDsKICAgICAgICAvLyBJZiBhICs9Ly09IHRva2VuIHdhcyBwcm92aWRlZCwgd2UncmUgZG9pbmcgYSByZWxhdGl2ZSBhbmltYXRpb24KICAgICAgICB0d2Vlbi5lbmQgPSBwYXJ0c1sgMSBdID8KICAgICAgICAgIHN0YXJ0ICsgKCBwYXJ0c1sgMSBdICsgMSApICogcGFydHNbIDIgXSA6CiAgICAgICAgICArcGFydHNbIDIgXTsKICAgICAgfQoKICAgICAgcmV0dXJuIHR3ZWVuOwogICAgfSBdCiAgfTsKCi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHkKZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7CiAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgIGZ4Tm93ID0gdW5kZWZpbmVkOwogIH0pOwogIHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7Cn0KCi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uCmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7CiAgdmFyIHdoaWNoLAogICAgaSA9IDAsCiAgICBhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07CgogIC8vIGlmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcywKICAvLyBpZiB3ZSBkb24ndCBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0CiAgaW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7CiAgZm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHsKICAgIHdoaWNoID0gY3NzRXhwYW5kWyBpIF07CiAgICBhdHRyc1sgIm1hcmdpbiIgKyB3aGljaCBdID0gYXR0cnNbICJwYWRkaW5nIiArIHdoaWNoIF0gPSB0eXBlOwogIH0KCiAgaWYgKCBpbmNsdWRlV2lkdGggKSB7CiAgICBhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlOwogIH0KCiAgcmV0dXJuIGF0dHJzOwp9CgpmdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHsKICB2YXIgdHdlZW4sCiAgICBjb2xsZWN0aW9uID0gKCB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCB0d2VlbmVyc1sgIioiIF0gKSwKICAgIGluZGV4ID0gMCwKICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoOwogIGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7CiAgICBpZiAoICh0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApKSApIHsKCiAgICAgIC8vIHdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5CiAgICAgIHJldHVybiB0d2VlbjsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkgewogIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi8KICB2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LAogICAgYW5pbSA9IHRoaXMsCiAgICBvcmlnID0ge30sCiAgICBzdHlsZSA9IGVsZW0uc3R5bGUsCiAgICBoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksCiAgICBkYXRhU2hvdyA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sICJmeHNob3ciICk7CgogIC8vIGhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXMKICBpZiAoICFvcHRzLnF1ZXVlICkgewogICAgaG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sICJmeCIgKTsKICAgIGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHsKICAgICAgaG9va3MudW5xdWV1ZWQgPSAwOwogICAgICBvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTsKICAgICAgaG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICggIWhvb2tzLnVucXVldWVkICkgewogICAgICAgICAgb2xkZmlyZSgpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KICAgIGhvb2tzLnVucXVldWVkKys7CgogICAgYW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7CiAgICAgIC8vIGRvaW5nIHRoaXMgbWFrZXMgc3VyZSB0aGF0IHRoZSBjb21wbGV0ZSBoYW5kbGVyIHdpbGwgYmUgY2FsbGVkCiAgICAgIC8vIGJlZm9yZSB0aGlzIGNvbXBsZXRlcwogICAgICBhbmltLmFsd2F5cyhmdW5jdGlvbigpIHsKICAgICAgICBob29rcy51bnF1ZXVlZC0tOwogICAgICAgIGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgImZ4IiApLmxlbmd0aCApIHsKICAgICAgICAgIGhvb2tzLmVtcHR5LmZpcmUoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CiAgfQoKICAvLyBoZWlnaHQvd2lkdGggb3ZlcmZsb3cgcGFzcwogIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoICJoZWlnaHQiIGluIHByb3BzIHx8ICJ3aWR0aCIgaW4gcHJvcHMgKSApIHsKICAgIC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dAogICAgLy8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRTktMTAgZG8gbm90CiAgICAvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmQKICAgIC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlCiAgICBvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTsKCiAgICAvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aAogICAgLy8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZAogICAgZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApOwogICAgLy8gR2V0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSAibm9uZSIKICAgIGlmICggZGlzcGxheSA9PT0gIm5vbmUiICkgewogICAgICBkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKTsKICAgIH0KICAgIGlmICggZGlzcGxheSA9PT0gImlubGluZSIgJiYKICAgICAgICBqUXVlcnkuY3NzKCBlbGVtLCAiZmxvYXQiICkgPT09ICJub25lIiApIHsKCiAgICAgIHN0eWxlLmRpc3BsYXkgPSAiaW5saW5lLWJsb2NrIjsKICAgIH0KICB9CgogIGlmICggb3B0cy5vdmVyZmxvdyApIHsKICAgIHN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICBhbmltLmFsd2F5cyhmdW5jdGlvbigpIHsKICAgICAgc3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07CiAgICAgIHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTsKICAgICAgc3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdOwogICAgfSk7CiAgfQoKICAvLyBzaG93L2hpZGUgcGFzcwogIGZvciAoIHByb3AgaW4gcHJvcHMgKSB7CiAgICB2YWx1ZSA9IHByb3BzWyBwcm9wIF07CiAgICBpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7CiAgICAgIGRlbGV0ZSBwcm9wc1sgcHJvcCBdOwogICAgICB0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09ICJ0b2dnbGUiOwogICAgICBpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA\\\/CiAgICAgICAgcmV0IDoKICAgICAgICBlbGVtWyBuYW1lIF07CiAgICB9CiAgfSwKCiAgcHJvcEhvb2tzOiB7CiAgICB0YWJJbmRleDogewogICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgIHJldHVybiBlbGVtLmhhc0F0dHJpYnV0ZSggInRhYmluZGV4IiApIHx8IHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8IGVsZW0uaHJlZiA\/CiAgICAgICAgICBlbGVtLnRhYkluZGV4IDoKICAgICAgICAgIC0xOwogICAgICB9CiAgICB9CiAgfQp9KTsKCi8vIFN1cHBvcnQ6IElFOSsKLy8gU2VsZWN0ZWRuZXNzIGZvciBhbiBvcHRpb24gaW4gYW4gb3B0Z3JvdXAgY2FuIGJlIGluYWNjdXJhdGUKaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHsKICBqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0gewogICAgZ2V0OiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgdmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTsKICAgICAgaWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7CiAgICAgICAgcGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDsKICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9Owp9CgpqUXVlcnkuZWFjaChbCiAgInRhYkluZGV4IiwKICAicmVhZE9ubHkiLAogICJtYXhMZW5ndGgiLAogICJjZWxsU3BhY2luZyIsCiAgImNlbGxQYWRkaW5nIiwKICAicm93U3BhbiIsCiAgImNvbFNwYW4iLAogICJ1c2VNYXAiLAogICJmcmFtZUJvcmRlciIsCiAgImNvbnRlbnRFZGl0YWJsZSIKXSwgZnVuY3Rpb24oKSB7CiAgalF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpczsKfSk7CgoKCgp2YXIgcmNsYXNzID0gL1tcdFxyXG5cZl0vZzsKCmpRdWVyeS5mbi5leHRlbmQoewogIGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7CiAgICB2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSwKICAgICAgcHJvY2VlZCA9IHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIgJiYgdmFsdWUsCiAgICAgIGkgPSAwLAogICAgICBsZW4gPSB0aGlzLmxlbmd0aDsKCiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkgewogICAgICAgIGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7CiAgICAgIH0pOwogICAgfQoKICAgIGlmICggcHJvY2VlZCApIHsKICAgICAgLy8gVGhlIGRpc2p1bmN0aW9uIGhlcmUgaXMgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSByZW1vdmVDbGFzcykKICAgICAgY2xhc3NlcyA9ICggdmFsdWUgfHwgIiIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107CgogICAgICBmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKICAgICAgICBlbGVtID0gdGhpc1sgaSBdOwogICAgICAgIGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBlbGVtLmNsYXNzTmFtZSA\/CiAgICAgICAgICAoICIgIiArIGVsZW0uY2xhc3NOYW1lICsgIiAiICkucmVwbGFjZSggcmNsYXNzLCAiICIgKSA6CiAgICAgICAgICAiICIKICAgICAgICApOwoKICAgICAgICBpZiAoIGN1ciApIHsKICAgICAgICAgIGogPSAwOwogICAgICAgICAgd2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkgewogICAgICAgICAgICBpZiAoIGN1ci5pbmRleE9mKCAiICIgKyBjbGF6eiArICIgIiApIDwgMCApIHsKICAgICAgICAgICAgICBjdXIgKz0gY2xhenogKyAiICI7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBvbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLgogICAgICAgICAgZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTsKICAgICAgICAgIGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7CiAgICAgICAgICAgIGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9LAoKICByZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkgewogICAgdmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsCiAgICAgIHByb2NlZWQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIgJiYgdmFsdWUsCiAgICAgIGkgPSAwLAogICAgICBsZW4gPSB0aGlzLmxlbmd0aDsKCiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkgewogICAgICAgIGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7CiAgICAgIH0pOwogICAgfQogICAgaWYgKCBwcm9jZWVkICkgewogICAgICBjbGFzc2VzID0gKCB2YWx1ZSB8fCAiIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTsKCiAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkgewogICAgICAgIGVsZW0gPSB0aGlzWyBpIF07CiAgICAgICAgLy8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcykKICAgICAgICBjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgPwogICAgICAgICAgKCAiICIgKyBlbGVtLmNsYXNzTmFtZSArICIgIiApLnJlcGxhY2UoIHJjbGFzcywgIiAiICkgOgogICAgICAgICAgIiIKICAgICAgICApOwoKICAgICAgICBpZiAoIGN1ciApIHsKICAgICAgICAgIGogPSAwOwogICAgICAgICAgd2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkgewogICAgICAgICAgICAvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzCiAgICAgICAgICAgIHdoaWxlICggY3VyLmluZGV4T2YoICIgIiArIGNsYXp6ICsgIiAiICkgPj0gMCApIHsKICAgICAgICAgICAgICBjdXIgPSBjdXIucmVwbGFjZSggIiAiICsgY2xhenogKyAiICIsICIgIiApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gb25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy4KICAgICAgICAgIGZpbmFsVmFsdWUgPSB2YWx1ZSA\/IGpRdWVyeS50cmltKCBjdXIgKSA6ICIiOwogICAgICAgICAgaWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHsKICAgICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0sCgogIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkgewogICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7CgogICAgaWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09ICJib29sZWFuIiAmJiB0eXBlID09PSAic3RyaW5nIiApIHsKICAgICAgcmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7CiAgICB9CgogICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHsKICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHsKICAgICAgICBqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBpLCB0aGlzLmNsYXNzTmFtZSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCApOwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICBpZiAoIHR5cGUgPT09ICJzdHJpbmciICkgewogICAgICAgIC8vIHRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzCiAgICAgICAgdmFyIGNsYXNzTmFtZSwKICAgICAgICAgIGkgPSAwLAogICAgICAgICAgc2VsZiA9IGpRdWVyeSggdGhpcyApLAogICAgICAgICAgY2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTsKCiAgICAgICAgd2hpbGUgKCAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0pICkgewogICAgICAgICAgLy8gY2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0CiAgICAgICAgICBpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkgewogICAgICAgICAgICBzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgIC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lCiAgICAgIH0gZWxzZSBpZiAoIHR5cGUgPT09IHN0cnVuZGVmaW5lZCB8fCB0eXBlID09PSAiYm9vbGVhbiIgKSB7CiAgICAgICAgaWYgKCB0aGlzLmNsYXNzTmFtZSApIHsKICAgICAgICAgIC8vIHN0b3JlIGNsYXNzTmFtZSBpZiBzZXQKICAgICAgICAgIGRhdGFfcHJpdi5zZXQoIHRoaXMsICJfX2NsYXNzTmFtZV9fIiwgdGhpcy5jbGFzc05hbWUgKTsKICAgICAgICB9CgogICAgICAgIC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkICJmYWxzZSIsCiAgICAgICAgLy8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS4KICAgICAgICAvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLAogICAgICAgIC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC4KICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA\/ICIiIDogZGF0YV9wcml2LmdldCggdGhpcywgIl9fY2xhc3NOYW1lX18iICkgfHwgIiI7CiAgICAgIH0KICAgIH0pOwogIH0sCgogIGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICB2YXIgY2xhc3NOYW1lID0gIiAiICsgc2VsZWN0b3IgKyAiICIsCiAgICAgIGkgPSAwLAogICAgICBsID0gdGhpcy5sZW5ndGg7CiAgICBmb3IgKCA7IGkgPCBsOyBpKysgKSB7CiAgICAgIGlmICggdGhpc1tpXS5ub2RlVHlwZSA9PT0gMSAmJiAoIiAiICsgdGhpc1tpXS5jbGFzc05hbWUgKyAiICIpLnJlcGxhY2UocmNsYXNzLCAiICIpLmluZGV4T2YoIGNsYXNzTmFtZSApID49IDAgKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gZmFsc2U7CiAgfQp9KTsKCgoKCnZhciBycmV0dXJuID0gL1xyL2c7CgpqUXVlcnkuZm4uZXh0ZW5kKHsKICB2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKICAgIHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLAogICAgICBlbGVtID0gdGhpc1swXTsKCiAgICBpZiAoICFhcmd1bWVudHMubGVuZ3RoICkgewogICAgICBpZiAoIGVsZW0gKSB7CiAgICAgICAgaG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07CgogICAgICAgIGlmICggaG9va3MgJiYgImdldCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgInZhbHVlIiApKSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9CgogICAgICAgIHJldCA9IGVsZW0udmFsdWU7CgogICAgICAgIHJldHVybiB0eXBlb2YgcmV0ID09PSAic3RyaW5nIiA\/CiAgICAgICAgICAvLyBoYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzCiAgICAgICAgICByZXQucmVwbGFjZShycmV0dXJuLCAiIikgOgogICAgICAgICAgLy8gaGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyCiAgICAgICAgICByZXQgPT0gbnVsbCA\/ICIiIDogcmV0OwogICAgICB9CgogICAgICByZXR1cm47CiAgICB9CgogICAgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApOwoKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7CiAgICAgIHZhciB2YWw7CgogICAgICBpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoIGlzRnVuY3Rpb24gKSB7CiAgICAgICAgdmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YWwgPSB2YWx1ZTsKICAgICAgfQoKICAgICAgLy8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgIiI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmcKICAgICAgaWYgKCB2YWwgPT0gbnVsbCApIHsKICAgICAgICB2YWwgPSAiIjsKCiAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09ICJudW1iZXIiICkgewogICAgICAgIHZhbCArPSAiIjsKCiAgICAgIH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHsKICAgICAgICB2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHsKICAgICAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gIiIgOiB2YWx1ZSArICIiOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTsKCiAgICAgIC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nCiAgICAgIGlmICggIWhvb2tzIHx8ICEoInNldCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCAidmFsdWUiICkgPT09IHVuZGVmaW5lZCApIHsKICAgICAgICB0aGlzLnZhbHVlID0gdmFsOwogICAgICB9CiAgICB9KTsKICB9Cn0pOwoKalF1ZXJ5LmV4dGVuZCh7CiAgdmFsSG9va3M6IHsKICAgIHNlbGVjdDogewogICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgIHZhciB2YWx1ZSwgb3B0aW9uLAogICAgICAgICAgb3B0aW9ucyA9IGVsZW0ub3B0aW9ucywKICAgICAgICAgIGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LAogICAgICAgICAgb25lID0gZWxlbS50eXBlID09PSAic2VsZWN0LW9uZSIgfHwgaW5kZXggPCAwLAogICAgICAgICAgdmFsdWVzID0gb25lID8gbnVsbCA6IFtdLAogICAgICAgICAgbWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsCiAgICAgICAgICBpID0gaW5kZXggPCAwID8KICAgICAgICAgICAgbWF4IDoKICAgICAgICAgICAgb25lID8gaW5kZXggOiAwOwoKICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zCiAgICAgICAgZm9yICggOyBpIDwgbWF4OyBpKysgKSB7CiAgICAgICAgICBvcHRpb24gPSBvcHRpb25zWyBpIF07CgogICAgICAgICAgLy8gSUU2LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpCiAgICAgICAgICBpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiYKICAgICAgICAgICAgICAvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwCiAgICAgICAgICAgICAgKCBzdXBwb3J0Lm9wdERpc2FibGVkID8gIW9wdGlvbi5kaXNhYmxlZCA6IG9wdGlvbi5nZXRBdHRyaWJ1dGUoICJkaXNhYmxlZCIgKSA9PT0gbnVsbCApICYmCiAgICAgICAgICAgICAgKCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHwgIWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsICJvcHRncm91cCIgKSApICkgewoKICAgICAgICAgICAgLy8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvbgogICAgICAgICAgICB2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7CgogICAgICAgICAgICAvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0cwogICAgICAgICAgICBpZiAoIG9uZSApIHsKICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5CiAgICAgICAgICAgIHZhbHVlcy5wdXNoKCB2YWx1ZSApOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHZhbHVlczsKICAgICAgfSwKCiAgICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewogICAgICAgIHZhciBvcHRpb25TZXQsIG9wdGlvbiwKICAgICAgICAgIG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsCiAgICAgICAgICB2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLAogICAgICAgICAgaSA9IG9wdGlvbnMubGVuZ3RoOwoKICAgICAgICB3aGlsZSAoIGktLSApIHsKICAgICAgICAgIG9wdGlvbiA9IG9wdGlvbnNbIGkgXTsKICAgICAgICAgIGlmICggKG9wdGlvbi5zZWxlY3RlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkob3B0aW9uKS52YWwoKSwgdmFsdWVzICkgPj0gMCkgKSB7CiAgICAgICAgICAgIG9wdGlvblNldCA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBmb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldAogICAgICAgIGlmICggIW9wdGlvblNldCApIHsKICAgICAgICAgIGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWVzOwogICAgICB9CiAgICB9CiAgfQp9KTsKCi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyCmpRdWVyeS5lYWNoKFsgInJhZGlvIiwgImNoZWNrYm94IiBdLCBmdW5jdGlvbigpIHsKICBqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHsKICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewogICAgICBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkgewogICAgICAgIHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlICkgPj0gMCApOwogICAgICB9CiAgICB9CiAgfTsKICBpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7CiAgICBqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgLy8gU3VwcG9ydDogV2Via2l0CiAgICAgIC8vICIiIGlzIHJldHVybmVkIGluc3RlYWQgb2YgIm9uIiBpZiBhIHZhbHVlIGlzbid0IHNwZWNpZmllZAogICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoInZhbHVlIikgPT09IG51bGwgPyAib24iIDogZWxlbS52YWx1ZTsKICAgIH07CiAgfQp9KTsKCgoKCi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb24KCgpqUXVlcnkuZWFjaCggKCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayAiICsKICAibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgIiArCiAgImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnUiKS5zcGxpdCgiICIpLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKCiAgLy8gSGFuZGxlIGV2ZW50IGJpbmRpbmcKICBqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHsKICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA\/CiAgICAgIHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOgogICAgICB0aGlzLnRyaWdnZXIoIG5hbWUgKTsKICB9Owp9KTsKCmpRdWVyeS5mbi5leHRlbmQoewogIGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHsKICAgIHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApOwogIH0sCgogIGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7CiAgICByZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7CiAgfSwKICB1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7CiAgICByZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApOwogIH0sCgogIGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHsKICAgIHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7CiAgfSwKICB1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHsKICAgIC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dICkKICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gdGhpcy5vZmYoIHNlbGVjdG9yLCAiKioiICkgOiB0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8ICIqKiIsIGZuICk7CiAgfQp9KTsKCgp2YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7Cgp2YXIgcnF1ZXJ5ID0gKC9cPy8pOwoKCgovLyBTdXBwb3J0OiBBbmRyb2lkIDIuMwovLyBXb3JrYXJvdW5kIGZhaWx1cmUgdG8gc3RyaW5nLWNhc3QgbnVsbCBpbnB1dApqUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7CiAgcmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKyAiIiApOwp9OwoKCi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmcKalF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7CiAgdmFyIHhtbCwgdG1wOwogIGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09ICJzdHJpbmciICkgewogICAgcmV0dXJuIG51bGw7CiAgfQoKICAvLyBTdXBwb3J0OiBJRTkKICB0cnkgewogICAgdG1wID0gbmV3IERPTVBhcnNlcigpOwogICAgeG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgInRleHQveG1sIiApOwogIH0gY2F0Y2ggKCBlICkgewogICAgeG1sID0gdW5kZWZpbmVkOwogIH0KCiAgaWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggInBhcnNlcmVycm9yIiApLmxlbmd0aCApIHsKICAgIGpRdWVyeS5lcnJvciggIkludmFsaWQgWE1MOiAiICsgZGF0YSApOwogIH0KICByZXR1cm4geG1sOwp9OwoKCnZhcgogIC8vIERvY3VtZW50IGxvY2F0aW9uCiAgYWpheExvY1BhcnRzLAogIGFqYXhMb2NhdGlvbiwKCiAgcmhhc2ggPSAvIy4qJC8sCiAgcnRzID0gLyhbPyZdKV89W14mXSovLAogIHJoZWFkZXJzID0gL14oLio\/KTpbIFx0XSooW15cclxuXSopJC9tZywKICAvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb24KICBybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLAogIHJub0NvbnRlbnQgPSAvXig\/OkdFVHxIRUFEKSQvLAogIHJwcm90b2NvbCA9IC9eXC9cLy8sCiAgcnVybCA9IC9eKFtcdy4rLV0rOikoPzpcL1wvKD86W15cLz8jXSpAfCkoW15cLz8jOl0qKSg\/OjooXGQrKXwpfCkvLAoKICAvKiBQcmVmaWx0ZXJzCiAgICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSkKICAgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOgogICAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnQKICAgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpCiAgICogMykga2V5IGlzIHRoZSBkYXRhVHlwZQogICAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgIioiIGNhbiBiZSB1c2VkCiAgICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byAiKiIgaWYgbmVlZGVkCiAgICovCiAgcHJlZmlsdGVycyA9IHt9LAoKICAvKiBUcmFuc3BvcnRzIGJpbmRpbmdzCiAgICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZQogICAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgIioiIGNhbiBiZSB1c2VkCiAgICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gIioiIGlmIG5lZWRlZAogICAqLwogIHRyYW5zcG9ydHMgPSB7fSwKCiAgLy8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uCiAgYWxsVHlwZXMgPSAiKi8iLmNvbmNhdCgiKiIpOwoKLy8gIzgxMzgsIElFIG1heSB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiBhY2Nlc3NpbmcKLy8gYSBmaWVsZCBmcm9tIHdpbmRvdy5sb2NhdGlvbiBpZiBkb2N1bWVudC5kb21haW4gaGFzIGJlZW4gc2V0CnRyeSB7CiAgYWpheExvY2F0aW9uID0gbG9jYXRpb24uaHJlZjsKfSBjYXRjaCggZSApIHsKICAvLyBVc2UgdGhlIGhyZWYgYXR0cmlidXRlIG9mIGFuIEEgZWxlbWVudAogIC8vIHNpbmNlIElFIHdpbGwgbW9kaWZ5IGl0IGdpdmVuIGRvY3VtZW50LmxvY2F0aW9uCiAgYWpheExvY2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImEiICk7CiAgYWpheExvY2F0aW9uLmhyZWYgPSAiIjsKICBhamF4TG9jYXRpb24gPSBhamF4TG9jYXRpb24uaHJlZjsKfQoKLy8gU2VnbWVudCBsb2NhdGlvbiBpbnRvIHBhcnRzCmFqYXhMb2NQYXJ0cyA9IHJ1cmwuZXhlYyggYWpheExvY2F0aW9uLnRvTG93ZXJDYXNlKCkgKSB8fCBbXTsKCi8vIEJhc2UgImNvbnN0cnVjdG9yIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0CmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkgewoKICAvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvICIqIgogIHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkgewoKICAgIGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gInN0cmluZyIgKSB7CiAgICAgIGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247CiAgICAgIGRhdGFUeXBlRXhwcmVzc2lvbiA9ICIqIjsKICAgIH0KCiAgICB2YXIgZGF0YVR5cGUsCiAgICAgIGkgPSAwLAogICAgICBkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107CgogICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkgewogICAgICAvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uCiAgICAgIHdoaWxlICggKGRhdGFUeXBlID0gZGF0YVR5cGVzW2krK10pICkgewogICAgICAgIC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkCiAgICAgICAgaWYgKCBkYXRhVHlwZVswXSA9PT0gIisiICkgewogICAgICAgICAgZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8ICIqIjsKICAgICAgICAgIChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnVuc2hpZnQoIGZ1bmMgKTsKCiAgICAgICAgLy8gT3RoZXJ3aXNlIGFwcGVuZAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS5wdXNoKCBmdW5jICk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKfQoKLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzCmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7CgogIHZhciBpbnNwZWN0ZWQgPSB7fSwKICAgIHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApOwoKICBmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHsKICAgIHZhciBzZWxlY3RlZDsKICAgIGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7CiAgICBqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkgewogICAgICB2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApOwogICAgICBpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSAic3RyaW5nIiAmJiAhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7CiAgICAgICAgb3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApOwogICAgICAgIGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7CiAgICAgICAgcmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBzZWxlY3RlZDsKICB9CgogIHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgIioiIF0gJiYgaW5zcGVjdCggIioiICk7Cn0KCi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9ucwovLyB0aGF0IHRha2VzICJmbGF0IiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZCkKLy8gRml4ZXMgIzk4ODcKZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7CiAgdmFyIGtleSwgZGVlcCwKICAgIGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTsKCiAgZm9yICgga2V5IGluIHNyYyApIHsKICAgIGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkgewogICAgICAoIGZsYXRPcHRpb25zWyBrZXkgXSA\\/IG51bGwgOiBtYXRjaDsKICAgICAgICB9LAoKICAgICAgICAvLyBSYXcgc3RyaW5nCiAgICAgICAgZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBzdGF0ZSA9PT0gMiA\/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgLy8gQ2FjaGVzIHRoZSBoZWFkZXIKICAgICAgICBzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7CiAgICAgICAgICB2YXIgbG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICBpZiAoICFzdGF0ZSApIHsKICAgICAgICAgICAgbmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7CiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyCiAgICAgICAgb3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7CiAgICAgICAgICBpZiAoICFzdGF0ZSApIHsKICAgICAgICAgICAgcy5taW1lVHlwZSA9IHR5cGU7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICAvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrcwogICAgICAgIHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7CiAgICAgICAgICB2YXIgY29kZTsKICAgICAgICAgIGlmICggbWFwICkgewogICAgICAgICAgICBpZiAoIHN0YXRlIDwgMiApIHsKICAgICAgICAgICAgICBmb3IgKCBjb2RlIGluIG1hcCApIHsKICAgICAgICAgICAgICAgIC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXMKICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3MKICAgICAgICAgICAgICBqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgLy8gQ2FuY2VsIHRoZSByZXF1ZXN0CiAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkgewogICAgICAgICAgdmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7CiAgICAgICAgICBpZiAoIHRyYW5zcG9ydCApIHsKICAgICAgICAgICAgdHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTsKICAgICAgICAgIH0KICAgICAgICAgIGRvbmUoIDAsIGZpbmFsVGV4dCApOwogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQogICAgICB9OwoKICAgIC8vIEF0dGFjaCBkZWZlcnJlZHMKICAgIGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDsKICAgIGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lOwogICAganFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsOwoKICAgIC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKQogICAgLy8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpCiAgICAvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKQogICAgLy8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlCiAgICBzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgYWpheExvY2F0aW9uICkgKyAiIiApLnJlcGxhY2UoIHJoYXNoLCAiIiApCiAgICAgIC5yZXBsYWNlKCBycHJvdG9jb2wsIGFqYXhMb2NQYXJ0c1sgMSBdICsgIi8vIiApOwoKICAgIC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNAogICAgcy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTsKCiAgICAvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0CiAgICBzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8ICIqIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgIiIgXTsKCiAgICAvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gd2UgaGF2ZSBhIHByb3RvY29sOmhvc3Q6cG9ydCBtaXNtYXRjaAogICAgaWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7CiAgICAgIHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7CiAgICAgIHMuY3Jvc3NEb21haW4gPSAhISggcGFydHMgJiYKICAgICAgICAoIHBhcnRzWyAxIF0gIT09IGFqYXhMb2NQYXJ0c1sgMSBdIHx8IHBhcnRzWyAyIF0gIT09IGFqYXhMb2NQYXJ0c1sgMiBdIHx8CiAgICAgICAgICAoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSAiaHR0cDoiID8gIjgwIiA6ICI0NDMiICkgKSAhPT0KICAgICAgICAgICAgKCBhamF4TG9jUGFydHNbIDMgXSB8fCAoIGFqYXhMb2NQYXJ0c1sgMSBdID09PSAiaHR0cDoiID8gIjgwIiA6ICI0NDMiICkgKSApCiAgICAgICk7CiAgICB9CgogICAgLy8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nCiAgICBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09ICJzdHJpbmciICkgewogICAgICBzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApOwogICAgfQoKICAgIC8vIEFwcGx5IHByZWZpbHRlcnMKICAgIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApOwoKICAgIC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlCiAgICBpZiAoIHN0YXRlID09PSAyICkgewogICAgICByZXR1cm4ganFYSFI7CiAgICB9CgogICAgLy8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG8KICAgIGZpcmVHbG9iYWxzID0gcy5nbG9iYWw7CgogICAgLy8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0cwogICAgaWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7CiAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKCJhamF4U3RhcnQiKTsKICAgIH0KCiAgICAvLyBVcHBlcmNhc2UgdGhlIHR5cGUKICAgIHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpOwoKICAgIC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50CiAgICBzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTsKCiAgICAvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2UKICAgIC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvbgogICAgY2FjaGVVUkwgPSBzLnVybDsKCiAgICAvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudAogICAgaWYgKCAhcy5oYXNDb250ZW50ICkgewoKICAgICAgLy8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybAogICAgICBpZiAoIHMuZGF0YSApIHsKICAgICAgICBjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA\/ICImIiA6ICI\/IiApICsgcy5kYXRhICk7CiAgICAgICAgLy8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeQogICAgICAgIGRlbGV0ZSBzLmRhdGE7CiAgICAgIH0KCiAgICAgIC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWQKICAgICAgaWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHsKICAgICAgICBzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID8KCiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgJ18nIHBhcmFtZXRlciwgc2V0IGl0cyB2YWx1ZQogICAgICAgICAgY2FjaGVVUkwucmVwbGFjZSggcnRzLCAiJDFfPSIgKyBub25jZSsrICkgOgoKICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmQKICAgICAgICAgIGNhY2hlVVJMICsgKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA\/ICImIiA6ICI\/IiApICsgIl89IiArIG5vbmNlKys7CiAgICAgIH0KICAgIH0KCiAgICAvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLgogICAgaWYgKCBzLmlmTW9kaWZpZWQgKSB7CiAgICAgIGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHsKICAgICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCAiSWYtTW9kaWZpZWQtU2luY2UiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7CiAgICAgIH0KICAgICAgaWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHsKICAgICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCAiSWYtTm9uZS1NYXRjaCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnQKICAgIGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkgewogICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCAiQ29udGVudC1UeXBlIiwgcy5jb250ZW50VHlwZSApOwogICAgfQoKICAgIC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGUKICAgIGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoCiAgICAgICJBY2NlcHQiLAogICAgICBzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSA\/CiAgICAgICAgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdICsgKCBzLmRhdGFUeXBlc1sgMCBdICE9PSAiKiIgPyAiLCAiICsgYWxsVHlwZXMgKyAiOyBxPTAuMDEiIDogIiIgKSA6CiAgICAgICAgcy5hY2NlcHRzWyAiKiIgXQogICAgKTsKCiAgICAvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb24KICAgIGZvciAoIGkgaW4gcy5oZWFkZXJzICkgewogICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApOwogICAgfQoKICAgIC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnQKICAgIGlmICggcy5iZWZvcmVTZW5kICYmICggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHsKICAgICAgLy8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuCiAgICAgIHJldHVybiBqcVhIUi5hYm9ydCgpOwogICAgfQoKICAgIC8vIGFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvbgogICAgc3RyQWJvcnQgPSAiYWJvcnQiOwoKICAgIC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkcwogICAgZm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkgewogICAgICBqcVhIUlsgaSBdKCBzWyBpIF0gKTsKICAgIH0KCiAgICAvLyBHZXQgdHJhbnNwb3J0CiAgICB0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTsKCiAgICAvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnQKICAgIGlmICggIXRyYW5zcG9ydCApIHsKICAgICAgZG9uZSggLTEsICJObyBUcmFuc3BvcnQiICk7CiAgICB9IGVsc2UgewogICAgICBqcVhIUi5yZWFkeVN0YXRlID0gMTsKCiAgICAgIC8vIFNlbmQgZ2xvYmFsIGV2ZW50CiAgICAgIGlmICggZmlyZUdsb2JhbHMgKSB7CiAgICAgICAgZ2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoICJhamF4U2VuZCIsIFsganFYSFIsIHMgXSApOwogICAgICB9CiAgICAgIC8vIFRpbWVvdXQKICAgICAgaWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7CiAgICAgICAgdGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgIGpxWEhSLmFib3J0KCJ0aW1lb3V0Iik7CiAgICAgICAgfSwgcy50aW1lb3V0ICk7CiAgICAgIH0KCiAgICAgIHRyeSB7CiAgICAgICAgc3RhdGUgPSAxOwogICAgICAgIHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApOwogICAgICB9IGNhdGNoICggZSApIHsKICAgICAgICAvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lCiAgICAgICAgaWYgKCBzdGF0ZSA8IDIgKSB7CiAgICAgICAgICBkb25lKCAtMSwgZSApOwogICAgICAgIC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aHJvdyBlOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZQogICAgZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7CiAgICAgIHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsCiAgICAgICAgc3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7CgogICAgICAvLyBDYWxsZWQgb25jZQogICAgICBpZiAoIHN0YXRlID09PSAyICkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgLy8gU3RhdGUgaXMgImRvbmUiIG5vdwogICAgICBzdGF0ZSA9IDI7CgogICAgICAvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0cwogICAgICBpZiAoIHRpbWVvdXRUaW1lciApIHsKICAgICAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApOwogICAgICB9CgogICAgICAvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvbgogICAgICAvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKQogICAgICB0cmFuc3BvcnQgPSB1bmRlZmluZWQ7CgogICAgICAvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzCiAgICAgIHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgIiI7CgogICAgICAvLyBTZXQgcmVhZHlTdGF0ZQogICAgICBqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA\/IDQgOiAwOwoKICAgICAgLy8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWwKICAgICAgaXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7CgogICAgICAvLyBHZXQgcmVzcG9uc2UgZGF0YQogICAgICBpZiAoIHJlc3BvbnNlcyApIHsKICAgICAgICByZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTsKICAgICAgfQoKICAgICAgLy8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KQogICAgICByZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApOwoKICAgICAgLy8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmcKICAgICAgaWYgKCBpc1N1Y2Nlc3MgKSB7CgogICAgICAgIC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuCiAgICAgICAgaWYgKCBzLmlmTW9kaWZpZWQgKSB7CiAgICAgICAgICBtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCJMYXN0LU1vZGlmaWVkIik7CiAgICAgICAgICBpZiAoIG1vZGlmaWVkICkgewogICAgICAgICAgICBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7CiAgICAgICAgICB9CiAgICAgICAgICBtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCJldGFnIik7CiAgICAgICAgICBpZiAoIG1vZGlmaWVkICkgewogICAgICAgICAgICBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gaWYgbm8gY29udGVudAogICAgICAgIGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSAiSEVBRCIgKSB7CiAgICAgICAgICBzdGF0dXNUZXh0ID0gIm5vY29udGVudCI7CgogICAgICAgIC8vIGlmIG5vdCBtb2RpZmllZAogICAgICAgIH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkgewogICAgICAgICAgc3RhdHVzVGV4dCA9ICJub3Rtb2RpZmllZCI7CgogICAgICAgIC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7CiAgICAgICAgICBzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgIGVycm9yID0gcmVzcG9uc2UuZXJyb3I7CiAgICAgICAgICBpc1N1Y2Nlc3MgPSAhZXJyb3I7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIC8vIFdlIGV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0CiAgICAgICAgLy8gdGhlbiBub3JtYWxpemUgc3RhdHVzVGV4dCBhbmQgc3RhdHVzIGZvciBub24tYWJvcnRzCiAgICAgICAgZXJyb3IgPSBzdGF0dXNUZXh0OwogICAgICAgIGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkgewogICAgICAgICAgc3RhdHVzVGV4dCA9ICJlcnJvciI7CiAgICAgICAgICBpZiAoIHN0YXR1cyA8IDAgKSB7CiAgICAgICAgICAgIHN0YXR1cyA9IDA7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdAogICAgICBqcVhIUi5zdGF0dXMgPSBzdGF0dXM7CiAgICAgIGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgIiI7CgogICAgICAvLyBTdWNjZXNzL0Vycm9yCiAgICAgIGlmICggaXNTdWNjZXNzICkgewogICAgICAgIGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApOwogICAgICB9IGVsc2UgewogICAgICAgIGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApOwogICAgICB9CgogICAgICAvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrcwogICAgICBqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7CiAgICAgIHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7CgogICAgICBpZiAoIGZpcmVHbG9iYWxzICkgewogICAgICAgIGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyAiYWpheFN1Y2Nlc3MiIDogImFqYXhFcnJvciIsCiAgICAgICAgICBbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApOwogICAgICB9CgogICAgICAvLyBDb21wbGV0ZQogICAgICBjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApOwoKICAgICAgaWYgKCBmaXJlR2xvYmFscyApIHsKICAgICAgICBnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggImFqYXhDb21wbGV0ZSIsIFsganFYSFIsIHMgXSApOwogICAgICAgIC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlcgogICAgICAgIGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7CiAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlcigiYWpheFN0b3AiKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4ganFYSFI7CiAgfSwKCiAgZ2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7CiAgICByZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgImpzb24iICk7CiAgfSwKCiAgZ2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHsKICAgIHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssICJzY3JpcHQiICk7CiAgfQp9KTsKCmpRdWVyeS5lYWNoKCBbICJnZXQiLCAicG9zdCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHsKICBqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7CiAgICAvLyBzaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZAogICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkgewogICAgICB0eXBlID0gdHlwZSB8fCBjYWxsYmFjazsKICAgICAgY2FsbGJhY2sgPSBkYXRhOwogICAgICBkYXRhID0gdW5kZWZpbmVkOwogICAgfQoKICAgIHJldHVybiBqUXVlcnkuYWpheCh7CiAgICAgIHVybDogdXJsLAogICAgICB0eXBlOiBtZXRob2QsCiAgICAgIGRhdGFUeXBlOiB0eXBlLAogICAgICBkYXRhOiBkYXRhLAogICAgICBzdWNjZXNzOiBjYWxsYmFjawogICAgfSk7CiAgfTsKfSk7CgovLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50cwpqUXVlcnkuZWFjaCggWyAiYWpheFN0YXJ0IiwgImFqYXhTdG9wIiwgImFqYXhDb21wbGV0ZSIsICJhamF4RXJyb3IiLCAiYWpheFN1Y2Nlc3MiLCAiYWpheFNlbmQiIF0sIGZ1bmN0aW9uKCBpLCB0eXBlICkgewogIGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkgewogICAgcmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7CiAgfTsKfSk7CgoKalF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHsKICByZXR1cm4galF1ZXJ5LmFqYXgoewogICAgdXJsOiB1cmwsCiAgICB0eXBlOiAiR0VUIiwKICAgIGRhdGFUeXBlOiAic2NyaXB0IiwKICAgIGFzeW5jOiBmYWxzZSwKICAgIGdsb2JhbDogZmFsc2UsCiAgICAidGhyb3dzIjogdHJ1ZQogIH0pOwp9OwoKCmpRdWVyeS5mbi5leHRlbmQoewogIHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkgewogICAgdmFyIHdyYXA7CgogICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkgewogICAgICAgIGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWwuY2FsbCh0aGlzLCBpKSApOwogICAgICB9KTsKICAgIH0KCiAgICBpZiAoIHRoaXNbIDAgXSApIHsKCiAgICAgIC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kCiAgICAgIHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApOwoKICAgICAgaWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHsKICAgICAgICB3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7CiAgICAgIH0KCiAgICAgIHdyYXAubWFwKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBlbGVtID0gdGhpczsKCiAgICAgICAgd2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkgewogICAgICAgICAgZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZWxlbTsKICAgICAgfSkuYXBwZW5kKCB0aGlzICk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgd3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHsKICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHsKICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHsKICAgICAgICBqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCh0aGlzLCBpKSApOwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICB2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLAogICAgICAgIGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpOwoKICAgICAgaWYgKCBjb250ZW50cy5sZW5ndGggKSB7CiAgICAgICAgY29udGVudHMud3JhcEFsbCggaHRtbCApOwoKICAgICAgfSBlbHNlIHsKICAgICAgICBzZWxmLmFwcGVuZCggaHRtbCApOwogICAgICB9CiAgICB9KTsKICB9LAoKICB3cmFwOiBmdW5jdGlvbiggaHRtbCApIHsKICAgIHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTsKCiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkgewogICAgICBqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKHRoaXMsIGkpIDogaHRtbCApOwogICAgfSk7CiAgfSwKCiAgdW53cmFwOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgIGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgImJvZHkiICkgKSB7CiAgICAgICAgalF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApOwogICAgICB9CiAgICB9KS5lbmQoKTsKICB9Cn0pOwoKCmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7CiAgLy8gU3VwcG9ydDogT3BlcmEgPD0gMTIuMTIKICAvLyBPcGVyYSByZXBvcnRzIG9mZnNldFdpZHRocyBhbmQgb2Zmc2V0SGVpZ2h0cyBsZXNzIHRoYW4gemVybyBvbiBzb21lIGVsZW1lbnRzCiAgcmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtLm9mZnNldEhlaWdodCA8PSAwOwp9OwpqUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHsKICByZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuKCBlbGVtICk7Cn07CgoKCgp2YXIgcjIwID0gLyUyMC9nLAogIHJicmFja2V0ID0gL1xbXF0kLywKICByQ1JMRiA9IC9ccj9cbi9nLAogIHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSwKICByc3VibWl0dGFibGUgPSAvXig\/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7CgpmdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7CiAgdmFyIG5hbWU7CgogIGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkgewogICAgLy8gU2VyaWFsaXplIGFycmF5IGl0ZW0uCiAgICBqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHsKICAgICAgaWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHsKICAgICAgICAvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuCiAgICAgICAgYWRkKCBwcmVmaXgsIHYgKTsKCiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguCiAgICAgICAgYnVpbGRQYXJhbXMoIHByZWZpeCArICJbIiArICggdHlwZW9mIHYgPT09ICJvYmplY3QiID8gaSA6ICIiICkgKyAiXSIsIHYsIHRyYWRpdGlvbmFsLCBhZGQgKTsKICAgICAgfQogICAgfSk7CgogIH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09ICJvYmplY3QiICkgewogICAgLy8gU2VyaWFsaXplIG9iamVjdCBpdGVtLgogICAgZm9yICggbmFtZSBpbiBvYmogKSB7CiAgICAgIGJ1aWxkUGFyYW1zKCBwcmVmaXggKyAiWyIgKyBuYW1lICsgIl0iLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApOwogICAgfQoKICB9IGVsc2UgewogICAgLy8gU2VyaWFsaXplIHNjYWxhciBpdGVtLgogICAgYWRkKCBwcmVmaXgsIG9iaiApOwogIH0KfQoKLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2YKLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nCmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHsKICB2YXIgcHJlZml4LAogICAgcyA9IFtdLAogICAgYWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CiAgICAgIC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZQogICAgICB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA\/ICIiIDogdmFsdWUgKTsKICAgICAgc1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7CiAgICB9OwoKICAvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLgogIGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHsKICAgIHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsOwogIH0KCiAgLy8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy4KICBpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkgewogICAgLy8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzCiAgICBqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7CiAgICAgIGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7CiAgICB9KTsKCiAgfSBlbHNlIHsKICAgIC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlICJvbGQiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlcgogICAgLy8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuCiAgICBmb3IgKCBwcmVmaXggaW4gYSApIHsKICAgICAgYnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTsKICAgIH0KICB9CgogIC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb24KICByZXR1cm4gcy5qb2luKCAiJiIgKS5yZXBsYWNlKCByMjAsICIrIiApOwp9OwoKalF1ZXJ5LmZuLmV4dGVuZCh7CiAgc2VyaWFsaXplOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApOwogIH0sCiAgc2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkgewogICAgICAvLyBDYW4gYWRkIHByb3BIb29rIGZvciAiZWxlbWVudHMiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50cwogICAgICB2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgImVsZW1lbnRzIiApOwogICAgICByZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpczsKICAgIH0pCiAgICAuZmlsdGVyKGZ1bmN0aW9uKCkgewogICAgICB2YXIgdHlwZSA9IHRoaXMudHlwZTsKCiAgICAgIC8vIFVzZSAuaXMoICI6ZGlzYWJsZWQiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3MKICAgICAgcmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoICI6ZGlzYWJsZWQiICkgJiYKICAgICAgICByc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmCiAgICAgICAgKCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApOwogICAgfSkKICAgIC5tYXAoZnVuY3Rpb24oIGksIGVsZW0gKSB7CiAgICAgIHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTsKCiAgICAgIHJldHVybiB2YWwgPT0gbnVsbCA\/CiAgICAgICAgbnVsbCA6CiAgICAgICAgalF1ZXJ5LmlzQXJyYXkoIHZhbCApID8KICAgICAgICAgIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHsKICAgICAgICAgICAgcmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCAiXHJcbiIgKSB9OwogICAgICAgICAgfSkgOgogICAgICAgICAgeyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsICJcclxuIiApIH07CiAgICB9KS5nZXQoKTsKICB9Cn0pOwoKCmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7CiAgdHJ5IHsKICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICB9IGNhdGNoKCBlICkge30KfTsKCnZhciB4aHJJZCA9IDAsCiAgeGhyQ2FsbGJhY2tzID0ge30sCiAgeGhyU3VjY2Vzc1N0YXR1cyA9IHsKICAgIC8vIGZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwCiAgICAwOiAyMDAsCiAgICAvLyBTdXBwb3J0OiBJRTkKICAgIC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNAogICAgMTIyMzogMjA0CiAgfSwKICB4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpOwoKLy8gU3VwcG9ydDogSUU5Ci8vIE9wZW4gcmVxdWVzdHMgbXVzdCBiZSBtYW51YWxseSBhYm9ydGVkIG9uIHVubG9hZCAoIzUyODApCmlmICggd2luZG93LkFjdGl2ZVhPYmplY3QgKSB7CiAgalF1ZXJ5KCB3aW5kb3cgKS5vbiggInVubG9hZCIsIGZ1bmN0aW9uKCkgewogICAgZm9yICggdmFyIGtleSBpbiB4aHJDYWxsYmFja3MgKSB7CiAgICAgIHhockNhbGxiYWNrc1sga2V5IF0oKTsKICAgIH0KICB9KTsKfQoKc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCAid2l0aENyZWRlbnRpYWxzIiBpbiB4aHJTdXBwb3J0ZWQgKTsKc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7CgpqUXVlcnkuYWpheFRyYW5zcG9ydChmdW5jdGlvbiggb3B0aW9ucyApIHsKICB2YXIgY2FsbGJhY2s7CgogIC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3QKICBpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7CiAgICByZXR1cm4gewogICAgICBzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7CiAgICAgICAgdmFyIGksCiAgICAgICAgICB4aHIgPSBvcHRpb25zLnhocigpLAogICAgICAgICAgaWQgPSArK3hocklkOwoKICAgICAgICB4aHIub3Blbiggb3B0aW9ucy50eXBlLCBvcHRpb25zLnVybCwgb3B0aW9ucy5hc3luYywgb3B0aW9ucy51c2VybmFtZSwgb3B0aW9ucy5wYXNzd29yZCApOwoKICAgICAgICAvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkCiAgICAgICAgaWYgKCBvcHRpb25zLnhockZpZWxkcyApIHsKICAgICAgICAgIGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7CiAgICAgICAgICAgIHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWQKICAgICAgICBpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7CiAgICAgICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApOwogICAgICAgIH0KCiAgICAgICAgLy8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXIKICAgICAgICAvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlCiAgICAgICAgLy8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS4KICAgICAgICAvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cCkKICAgICAgICAvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC4KICAgICAgICBpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyJYLVJlcXVlc3RlZC1XaXRoIl0gKSB7CiAgICAgICAgICBoZWFkZXJzWyJYLVJlcXVlc3RlZC1XaXRoIl0gPSAiWE1MSHR0cFJlcXVlc3QiOwogICAgICAgIH0KCiAgICAgICAgLy8gU2V0IGhlYWRlcnMKICAgICAgICBmb3IgKCBpIGluIGhlYWRlcnMgKSB7CiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7CiAgICAgICAgfQoKICAgICAgICAvLyBDYWxsYmFjawogICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICggY2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgZGVsZXRlIHhockNhbGxiYWNrc1sgaWQgXTsKICAgICAgICAgICAgICBjYWxsYmFjayA9IHhoci5vbmxvYWQgPSB4aHIub25lcnJvciA9IG51bGw7CgogICAgICAgICAgICAgIGlmICggdHlwZSA9PT0gImFib3J0IiApIHsKICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGUgPT09ICJlcnJvciIgKSB7CiAgICAgICAgICAgICAgICBjb21wbGV0ZSgKICAgICAgICAgICAgICAgICAgLy8gZmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDcKICAgICAgICAgICAgICAgICAgeGhyLnN0YXR1cywKICAgICAgICAgICAgICAgICAgeGhyLnN0YXR1c1RleHQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbXBsZXRlKAogICAgICAgICAgICAgICAgICB4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cywKICAgICAgICAgICAgICAgICAgeGhyLnN0YXR1c1RleHQsCiAgICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQ6IElFOQogICAgICAgICAgICAgICAgICAvLyBBY2Nlc3NpbmcgYmluYXJ5LWRhdGEgcmVzcG9uc2VUZXh0IHRocm93cyBhbiBleGNlcHRpb24KICAgICAgICAgICAgICAgICAgLy8gKCMxMTQyNikKICAgICAgICAgICAgICAgICAgdHlwZW9mIHhoci5yZXNwb25zZVRleHQgPT09ICJzdHJpbmciID8gewogICAgICAgICAgICAgICAgICAgIHRleHQ6IHhoci5yZXNwb25zZVRleHQKICAgICAgICAgICAgICAgICAgfSA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICB9OwoKICAgICAgICAvLyBMaXN0ZW4gdG8gZXZlbnRzCiAgICAgICAgeGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7CiAgICAgICAgeGhyLm9uZXJyb3IgPSBjYWxsYmFjaygiZXJyb3IiKTsKCiAgICAgICAgLy8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFjawogICAgICAgIGNhbGxiYWNrID0geGhyQ2FsbGJhY2tzWyBpZCBdID0gY2FsbGJhY2soImFib3J0Iik7CgogICAgICAgIC8vIERvIHNlbmQgdGhlIHJlcXVlc3QKICAgICAgICAvLyBUaGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24gd2hpY2ggaXMgYWN0dWFsbHkKICAgICAgICAvLyBoYW5kbGVkIGluIGpRdWVyeS5hamF4IChzbyBubyB0cnkvY2F0Y2ggaGVyZSkKICAgICAgICB4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7CiAgICAgIH0sCgogICAgICBhYm9ydDogZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCBjYWxsYmFjayApIHsKICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogIH0KfSk7CgoKCgovLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZQpqUXVlcnkuYWpheFNldHVwKHsKICBhY2NlcHRzOiB7CiAgICBzY3JpcHQ6ICJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdCIKICB9LAogIGNvbnRlbnRzOiB7CiAgICBzY3JpcHQ6IC8oPzpqYXZhfGVjbWEpc2NyaXB0LwogIH0sCiAgY29udmVydGVyczogewogICAgInRleHQgc2NyaXB0IjogZnVuY3Rpb24oIHRleHQgKSB7CiAgICAgIGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7CiAgICAgIHJldHVybiB0ZXh0OwogICAgfQogIH0KfSk7CgovLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluCmpRdWVyeS5hamF4UHJlZmlsdGVyKCAic2NyaXB0IiwgZnVuY3Rpb24oIHMgKSB7CiAgaWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7CiAgICBzLmNhY2hlID0gZmFsc2U7CiAgfQogIGlmICggcy5jcm9zc0RvbWFpbiApIHsKICAgIHMudHlwZSA9ICJHRVQiOwogIH0KfSk7CgovLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnQKalF1ZXJ5LmFqYXhUcmFuc3BvcnQoICJzY3JpcHQiLCBmdW5jdGlvbiggcyApIHsKICAvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzCiAgaWYgKCBzLmNyb3NzRG9tYWluICkgewogICAgdmFyIHNjcmlwdCwgY2FsbGJhY2s7CiAgICByZXR1cm4gewogICAgICBzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7CiAgICAgICAgc2NyaXB0ID0galF1ZXJ5KCI8c2NyaXB0PiIpLnByb3AoewogICAgICAgICAgYXN5bmM6IHRydWUsCiAgICAgICAgICBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsCiAgICAgICAgICBzcmM6IHMudXJsCiAgICAgICAgfSkub24oCiAgICAgICAgICAibG9hZCBlcnJvciIsCiAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7CiAgICAgICAgICAgIHNjcmlwdC5yZW1vdmUoKTsKICAgICAgICAgICAgY2FsbGJhY2sgPSBudWxsOwogICAgICAgICAgICBpZiAoIGV2dCApIHsKICAgICAgICAgICAgICBjb21wbGV0ZSggZXZ0LnR5cGUgPT09ICJlcnJvciIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICApOwogICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7CiAgICAgIH0sCiAgICAgIGFib3J0OiBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoIGNhbGxiYWNrICkgewogICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgfQp9KTsKCgoKCnZhciBvbGRDYWxsYmFja3MgPSBbXSwKICByanNvbnAgPSAvKD0pXD8oPz0mfCQpfFw\\/CiAgICAgICAgdGhpcyA6CiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkgewogICAgICAgICAgalF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTsKICAgICAgICB9KTsKICAgIH0KCiAgICB2YXIgZG9jRWxlbSwgd2luLAogICAgICBlbGVtID0gdGhpc1sgMCBdLAogICAgICBib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LAogICAgICBkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDsKCiAgICBpZiAoICFkb2MgKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDsKCiAgICAvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGUKICAgIGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkgewogICAgICByZXR1cm4gYm94OwogICAgfQoKICAgIC8vIElmIHdlIGRvbid0IGhhdmUgZ0JDUiwganVzdCB1c2UgMCwwIHJhdGhlciB0aGFuIGVycm9yCiAgICAvLyBCbGFja0JlcnJ5IDUsIGlPUyAzIChvcmlnaW5hbCBpUGhvbmUpCiAgICBpZiAoIHR5cGVvZiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gc3RydW5kZWZpbmVkICkgewogICAgICBib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgfQogICAgd2luID0gZ2V0V2luZG93KCBkb2MgKTsKICAgIHJldHVybiB7CiAgICAgIHRvcDogYm94LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLAogICAgICBsZWZ0OiBib3gubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdAogICAgfTsKICB9LAoKICBwb3NpdGlvbjogZnVuY3Rpb24oKSB7CiAgICBpZiAoICF0aGlzWyAwIF0gKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsCiAgICAgIGVsZW0gPSB0aGlzWyAwIF0sCiAgICAgIHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07CgogICAgLy8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSwgYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50CiAgICBpZiAoIGpRdWVyeS5jc3MoIGVsZW0sICJwb3NpdGlvbiIgKSA9PT0gImZpeGVkIiApIHsKICAgICAgLy8gV2UgYXNzdW1lIHRoYXQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIGF2YWlsYWJsZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkCiAgICAgIG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CgogICAgfSBlbHNlIHsKICAgICAgLy8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnQKICAgICAgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTsKCiAgICAgIC8vIEdldCBjb3JyZWN0IG9mZnNldHMKICAgICAgb2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTsKICAgICAgaWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgImh0bWwiICkgKSB7CiAgICAgICAgcGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpOwogICAgICB9CgogICAgICAvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnMKICAgICAgcGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgImJvcmRlclRvcFdpZHRoIiwgdHJ1ZSApOwogICAgICBwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgImJvcmRlckxlZnRXaWR0aCIsIHRydWUgKTsKICAgIH0KCiAgICAvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zCiAgICByZXR1cm4gewogICAgICB0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgIm1hcmdpblRvcCIsIHRydWUgKSwKICAgICAgbGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sICJtYXJnaW5MZWZ0IiwgdHJ1ZSApCiAgICB9OwogIH0sCgogIG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7CiAgICAgIHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBkb2NFbGVtOwoKICAgICAgd2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnQsICJodG1sIiApICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgInBvc2l0aW9uIiApID09PSAic3RhdGljIiApICkgewogICAgICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7CiAgICAgIH0KCiAgICAgIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTsKICAgIH0pOwogIH0KfSk7CgovLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHMKalF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogInBhZ2VYT2Zmc2V0Iiwgc2Nyb2xsVG9wOiAicGFnZVlPZmZzZXQiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7CiAgdmFyIHRvcCA9ICJwYWdlWU9mZnNldCIgPT09IHByb3A7CgogIGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkgewogICAgcmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkgewogICAgICB2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7CgogICAgICBpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkgewogICAgICAgIHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdOwogICAgICB9CgogICAgICBpZiAoIHdpbiApIHsKICAgICAgICB3aW4uc2Nyb2xsVG8oCiAgICAgICAgICAhdG9wID8gdmFsIDogd2luZG93LnBhZ2VYT2Zmc2V0LAogICAgICAgICAgdG9wID8gdmFsIDogd2luZG93LnBhZ2VZT2Zmc2V0CiAgICAgICAgKTsKCiAgICAgIH0gZWxzZSB7CiAgICAgICAgZWxlbVsgbWV0aG9kIF0gPSB2YWw7CiAgICAgIH0KICAgIH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoLCBudWxsICk7CiAgfTsKfSk7CgovLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvbgovLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k\/aWQ9MjkwODQKLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodAovLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwgd2UganVzdCBjaGVjayBmb3IgaXQgaGVyZQpqUXVlcnkuZWFjaCggWyAidG9wIiwgImxlZnQiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkgewogIGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sCiAgICBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7CiAgICAgIGlmICggY29tcHV0ZWQgKSB7CiAgICAgICAgY29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTsKICAgICAgICAvLyBpZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXQKICAgICAgICByZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgPwogICAgICAgICAgalF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgInB4IiA6CiAgICAgICAgICBjb21wdXRlZDsKICAgICAgfQogICAgfQogICk7Cn0pOwoKCi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kcwpqUXVlcnkuZWFjaCggeyBIZWlnaHQ6ICJoZWlnaHQiLCBXaWR0aDogIndpZHRoIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHsKICBqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiAiaW5uZXIiICsgbmFtZSwgY29udGVudDogdHlwZSwgIiI6ICJvdXRlciIgKyBuYW1lIH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkgewogICAgLy8gbWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoCiAgICBqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHsKICAgICAgdmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gImJvb2xlYW4iICksCiAgICAgICAgZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyAibWFyZ2luIiA6ICJib3JkZXIiICk7CgogICAgICByZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7CiAgICAgICAgdmFyIGRvYzsKCiAgICAgICAgaWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHsKICAgICAgICAgIC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlCiAgICAgICAgICAvLyBpc24ndCBhIHdob2xlIGxvdCB3ZSBjYW4gZG8uIFNlZSBwdWxsIHJlcXVlc3QgYXQgdGhpcyBVUkwgZm9yIGRpc2N1c3Npb246CiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NAogICAgICAgICAgcmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyAiY2xpZW50IiArIG5hbWUgXTsKICAgICAgICB9CgogICAgICAgIC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHQKICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7CiAgICAgICAgICBkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDsKCiAgICAgICAgICAvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sCiAgICAgICAgICAvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3QKICAgICAgICAgIHJldHVybiBNYXRoLm1heCgKICAgICAgICAgICAgZWxlbS5ib2R5WyAic2Nyb2xsIiArIG5hbWUgXSwgZG9jWyAic2Nyb2xsIiArIG5hbWUgXSwKICAgICAgICAgICAgZWxlbS5ib2R5WyAib2Zmc2V0IiArIG5hbWUgXSwgZG9jWyAib2Zmc2V0IiArIG5hbWUgXSwKICAgICAgICAgICAgZG9jWyAiY2xpZW50IiArIG5hbWUgXQogICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8KICAgICAgICAgIC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXQKICAgICAgICAgIGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOgoKICAgICAgICAgIC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQKICAgICAgICAgIGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7CiAgICAgIH0sIHR5cGUsIGNoYWluYWJsZSA\/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7CiAgICB9OwogIH0pOwp9KTsKCgovLyBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGNvbnRhaW5lZCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldApqUXVlcnkuZm4uc2l6ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB0aGlzLmxlbmd0aDsKfTsKCmpRdWVyeS5mbi5hbmRTZWxmID0galF1ZXJ5LmZuLmFkZEJhY2s7CgoKCgovLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXIKLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdAovLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3QKLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZQovLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2UKLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzCi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay4KaWYgKCB0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQgKSB7CiAgZGVmaW5lKCAianF1ZXJ5IiwgW10sIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGpRdWVyeTsKICB9KTsKfQoKCgoKdmFyCiAgLy8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlCiAgX2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksCgogIC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlCiAgXyQgPSB3aW5kb3cuJDsKCmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7CiAgaWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkgewogICAgd2luZG93LiQgPSBfJDsKICB9CgogIGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7CiAgICB3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTsKICB9CgogIHJldHVybiBqUXVlcnk7Cn07CgovLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluCi8vIEFNRCAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpCi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NikKaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IHN0cnVuZGVmaW5lZCApIHsKICB3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7Cn0KCgoKCnJldHVybiBqUXVlcnk7Cgp9KSk7Cg==",
    "size": "264619"
}