{
    "namaFile": "js\/jscalendar-1.0\/release-notes.html",
    "lastUpdate": "2015-09-12+15:26:49.77",
    "contentFile": "\/ZnVuYz1kZXRhaWwmYWlkPTcwMzIzOCZncm91cF9pZD03NTU2OSZhdGlkPTU0NDI4NSIgdGFyZ2V0PSJfYmxhbmsiDQogICAgICAgICAgICB0aXRsZT0iR28gdG8gYnVnIGRlc2NyaXB0aW9uIGF0IHNvdXJjZWZvcmdlIj48dHQ+IzcwMywyMzg8L3R0PjwvYT4gJm1kYXNoOyBmaXhlZDwvbGk+DQogICAgICA8bGk+PGEgaHJlZj0iaHR0cDovL3NvdXJjZWZvcmdlLm5ldC90cmFja2VyL2luZGV4LnBocD9mdW5jPWRldGFpbCZhaWQ9NzAzODE0Jmdyb3VwX2lkPTc1NTY5JmF0aWQ9NTQ0Mjg1IiB0YXJnZXQ9Il9ibGFuayINCiAgICAgICAgICAgIHRpdGxlPSJHbyB0byBidWcgZGVzY3JpcHRpb24gYXQgc291cmNlZm9yZ2UiPjx0dD4jNzAzLDgxNDwvdHQ+PC9hPiAmbWRhc2g7IGZpeGVkPC9saT4NCiAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vc291cmNlZm9yZ2UubmV0L3RyYWNrZXIvaW5kZXgucGhwP2Z1bmM9ZGV0YWlsJmFpZD03MTY3NzcmZ3JvdXBfaWQ9NzU1NjkmYXRpZD01NDQyODUiIHRhcmdldD0iX2JsYW5rIg0KICAgICAgICAgICAgdGl0bGU9IkdvIHRvIGJ1ZyBkZXNjcmlwdGlvbiBhdCBzb3VyY2Vmb3JnZSI+PHR0PiM3MTYsNzc3PC90dD48L2E+ICZtZGFzaDsgY2xvc2VkICh3YXMgZml4ZWQgYWxyZWFkeSBpbiAwLjkuMi0xKTwvbGk+DQogICAgICA8bGk+PGEgaHJlZj0iaHR0cDovL3NvdXJjZWZvcmdlLm5ldC90cmFja2VyL2luZGV4LnBocD9mdW5jPWRldGFpbCZhaWQ9NzIzMzM1Jmdyb3VwX2lkPTc1NTY5JmF0aWQ9NTQ0Mjg1IiB0YXJnZXQ9Il9ibGFuayINCiAgICAgICAgICAgIHRpdGxlPSJHbyB0byBidWcgZGVzY3JpcHRpb24gYXQgc291cmNlZm9yZ2UiPjx0dD4jNzIzLDMzNTwvdHQ+PC9hPiAmbWRhc2g7IGZpeGVkPC9saT4NCiAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vc291cmNlZm9yZ2UubmV0L3RyYWNrZXIvaW5kZXgucGhwP2Z1bmM9ZGV0YWlsJmFpZD03MTUxMjImZ3JvdXBfaWQ9NzU1NjkmYXRpZD01NDQyODUiIHRhcmdldD0iX2JsYW5rIg0KICAgICAgICAgICAgdGl0bGU9IkdvIHRvIGJ1ZyBkZXNjcmlwdGlvbiBhdCBzb3VyY2Vmb3JnZSI+PHR0PiM3MTUsMTIyPC90dD48L2E+ICZtZGFzaDsgZmVhdHVyZSByZXF1ZXN0OyBpbXBsZW1lbnRlZC48L2xpPg0KICAgICAgPGxpPjxhIGhyZWY9Imh0dHA6Ly9zb3VyY2Vmb3JnZS5uZXQvdHJhY2tlci9pbmRleC5waHA\/ZnVuYz1kZXRhaWwmYWlkPTcyMTIwNiZncm91cF9pZD03NTU2OSZhdGlkPTU0NDI4NSIgdGFyZ2V0PSJfYmxhbmsiDQogICAgICAgICAgICB0aXRsZT0iR28gdG8gYnVnIGRlc2NyaXB0aW9uIGF0IHNvdXJjZWZvcmdlIj48dHQ+IzcyMSwyMDY8L3R0PjwvYT4gJm1kYXNoOyBmaXhlZCAoYWRkZWQgInJlZnJlc2goKSIgZnVuY3Rpb24pPC9saT4NCiAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vc291cmNlZm9yZ2UubmV0L3RyYWNrZXIvaW5kZXgucGhwP2Z1bmM9ZGV0YWlsJmFpZD03MjE4MzMmZ3JvdXBfaWQ9NzU1NjkmYXRpZD01NDQyODUiIHRhcmdldD0iX2JsYW5rIg0KICAgICAgICAgICAgdGl0bGU9IkdvIHRvIGJ1ZyBkZXNjcmlwdGlvbiBhdCBzb3VyY2Vmb3JnZSI+PHR0PiM3MjEsODMzPC90dD48L2E+ICZtZGFzaDsgZml4ZWQgKGJ1ZyBjb25jZXJuaW5nIHRoZSAieXkiIGZvcm1hdA0KICAgICAgICBwYXJzaW5nKTwvbGk+DQogICAgICA8bGk+PGEgaHJlZj0iaHR0cDovL3NvdXJjZWZvcmdlLm5ldC90cmFja2VyL2luZGV4LnBocD9mdW5jPWRldGFpbCZhaWQ9NzIxODMzJmdyb3VwX2lkPTc1NTY5JmF0aWQ9NTQ0Mjg1IiB0YXJnZXQ9Il9ibGFuayINCiAgICAgICAgICAgIHRpdGxlPSJHbyB0byBidWcgZGVzY3JpcHRpb24gYXQgc291cmNlZm9yZ2UiPjx0dD4jNzIxLDgzMzwvdHQ+PC9hPiAmbWRhc2g7IHdvbid0IGZpeCAod2Ugd29uJ3Qgc2V0IHRoZSB0aW1lIHRvDQogICAgICAgIG1pZG5pZ2h0OyB0aW1lIG1pZ2h0IGFjdHVhbGx5IGJlIHVzZWZ1bCB3aGVuIHdlIGltcGxlbWVudCBzdXBwb3J0DQogICAgICAgIGZvciB0aW1lIHNlbGVjdGlvbikuDQoNCiAgICA8L29sPg0KDQogICAgPGhyIC8+DQogICAgPGFkZHJlc3M+PGEgaHJlZj0iaHR0cDovL2R5bmFyY2guY29tL21pc2hvby8iPk1paGFpIEJhem9uPC9hPjwvYWRkcmVzcz4NCjwhLS0gQ3JlYXRlZDogVHVlIEp1bCAgOCAxNzoyOTozNyBFRVNUIDIwMDMgLS0+DQo8IS0tIGhobXRzIHN0YXJ0IC0tPg0KTGFzdCBtb2RpZmllZCBvbiBXZWQgT2N0IDI5IDAyOjM3OjA3IDIwMDMNCjwhLS0gaGhtdHMgZW5kIC0tPg0KPCEtLSBkb2MtbGFuZzogRW5nbGlzaCAtLT4NCiAgPC9ib2R5Pg0KPC9odG1sPg0KDQoNCg==",
    "size": "18871"
}