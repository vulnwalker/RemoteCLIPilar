{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Style.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKgogKiBQSFBFeGNlbF9TdHlsZQogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQogKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgogKgogKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAgMDIxMTAtMTMwMSAgVVNBCiAqCiAqIEBjYXRlZ29yeSAgIFBIUEV4Y2VsCiAqIEBwYWNrYWdlICAgIFBIUEV4Y2VsX1N0eWxlCiAqIEBjb3B5cmlnaHQgIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwgKGh0dHA6Ly93d3cuY29kZXBsZXguY29tL1BIUEV4Y2VsKQogKiBAbGljZW5zZSAgICBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2xncGwtMi4xLnR4dCAgICBMR1BMCiAqIEB2ZXJzaW9uICAgICMjVkVSU0lPTiMjLCAjI0RBVEUjIwogKi8KY2xhc3MgUEhQRXhjZWxfU3R5bGUgZXh0ZW5kcyBQSFBFeGNlbF9TdHlsZV9TdXBlcnZpc29yIGltcGxlbWVudHMgUEhQRXhjZWxfSUNvbXBhcmFibGUKewogICAgLyoqCiAgICAgKiBGb250CiAgICAgKgogICAgICogQHZhciBQSFBFeGNlbF9TdHlsZV9Gb250CiAgICAgKi8KICAgIHByb3RlY3RlZCAkZm9udDsKCiAgICAvKioKICAgICAqIEZpbGwKICAgICAqCiAgICAgKiBAdmFyIFBIUEV4Y2VsX1N0eWxlX0ZpbGwKICAgICAqLwogICAgcHJvdGVjdGVkICRmaWxsOwoKICAgIC8qKgogICAgICogQm9yZGVycwogICAgICoKICAgICAqIEB2YXIgUEhQRXhjZWxfU3R5bGVfQm9yZGVycwogICAgICovCiAgICBwcm90ZWN0ZWQgJGJvcmRlcnM7CgogICAgLyoqCiAgICAgKiBBbGlnbm1lbnQKICAgICAqCiAgICAgKiBAdmFyIFBIUEV4Y2VsX1N0eWxlX0FsaWdubWVudAogICAgICovCiAgICBwcm90ZWN0ZWQgJGFsaWdubWVudDsKCiAgICAvKioKICAgICAqIE51bWJlciBGb3JtYXQKICAgICAqCiAgICAgKiBAdmFyIFBIUEV4Y2VsX1N0eWxlX051bWJlckZvcm1hdAogICAgICovCiAgICBwcm90ZWN0ZWQgJG51bWJlckZvcm1hdDsKCiAgICAvKioKICAgICAqIENvbmRpdGlvbmFsIHN0eWxlcwogICAgICoKICAgICAqIEB2YXIgUEhQRXhjZWxfU3R5bGVfQ29uZGl0aW9uYWxbXQogICAgICovCiAgICBwcm90ZWN0ZWQgJGNvbmRpdGlvbmFsU3R5bGVzOwoKICAgIC8qKgogICAgICogUHJvdGVjdGlvbgogICAgICoKICAgICAqIEB2YXIgUEhQRXhjZWxfU3R5bGVfUHJvdGVjdGlvbgogICAgICovCiAgICBwcm90ZWN0ZWQgJHByb3RlY3Rpb247CgogICAgLyoqCiAgICAgKiBJbmRleCBvZiBzdHlsZSBpbiBjb2xsZWN0aW9uLiBPbmx5IHVzZWQgZm9yIHJlYWwgc3R5bGUuCiAgICAgKgogICAgICogQHZhciBpbnQKICAgICAqLwogICAgcHJvdGVjdGVkICRpbmRleDsKCiAgICAvKioKICAgICAqIFVzZSBRdW90ZSBQcmVmaXggd2hlbiBkaXNwbGF5aW5nIGluIGNlbGwgZWRpdG9yLiBPbmx5IHVzZWQgZm9yIHJlYWwgc3R5bGUuCiAgICAgKgogICAgICogQHZhciBib29sZWFuCiAgICAgKi8KICAgIHByb3RlY3RlZCAkcXVvdGVQcmVmaXggPSBmYWxzZTsKCiAgICAvKioKICAgICAqIENyZWF0ZSBhIG5ldyBQSFBFeGNlbF9TdHlsZQogICAgICoKICAgICAqIEBwYXJhbSBib29sZWFuICRpc1N1cGVydmlzb3IgRmxhZyBpbmRpY2F0aW5nIGlmIHRoaXMgaXMgYSBzdXBlcnZpc29yIG9yIG5vdAogICAgICogICAgICAgICBMZWF2ZSB0aGlzIHZhbHVlIGF0IGRlZmF1bHQgdW5sZXNzIHlvdSB1bmRlcnN0YW5kIGV4YWN0bHkgd2hhdAogICAgICogICAgaXRzIHJhbWlmaWNhdGlvbnMgYXJlCiAgICAgKiBAcGFyYW0gYm9vbGVhbiAkaXNDb25kaXRpb25hbCBGbGFnIGluZGljYXRpbmcgaWYgdGhpcyBpcyBhIGNvbmRpdGlvbmFsIHN0eWxlIG9yIG5vdAogICAgICogICAgICAgTGVhdmUgdGhpcyB2YWx1ZSBhdCBkZWZhdWx0IHVubGVzcyB5b3UgdW5kZXJzdGFuZCBleGFjdGx5IHdoYXQKICAgICAqICAgIGl0cyByYW1pZmljYXRpb25zIGFyZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGlzU3VwZXJ2aXNvciA9IGZhbHNlLCAkaXNDb25kaXRpb25hbCA9IGZhbHNlKQogICAgewogICAgICAgIC8vIFN1cGVydmlzb3I\/CiAgICAgICAgJHRoaXMtPmlzU3VwZXJ2aXNvciA9ICRpc1N1cGVydmlzb3I7CgogICAgICAgIC8vIEluaXRpYWxpc2UgdmFsdWVzCiAgICAgICAgJHRoaXMtPmNvbmRpdGlvbmFsU3R5bGVzID0gYXJyYXkoKTsKICAgICAgICAkdGhpcy0+Zm9udCAgICAgICAgID0gbmV3IFBIUEV4Y2VsX1N0eWxlX0ZvbnQoJGlzU3VwZXJ2aXNvciwgJGlzQ29uZGl0aW9uYWwpOwogICAgICAgICR0aGlzLT5maWxsICAgICAgICAgPSBuZXcgUEhQRXhjZWxfU3R5bGVfRmlsbCgkaXNTdXBlcnZpc29yLCAkaXNDb25kaXRpb25hbCk7CiAgICAgICAgJHRoaXMtPmJvcmRlcnMgICAgICA9IG5ldyBQSFBFeGNlbF9TdHlsZV9Cb3JkZXJzKCRpc1N1cGVydmlzb3IsICRpc0NvbmRpdGlvbmFsKTsKICAgICAgICAkdGhpcy0+YWxpZ25tZW50ICAgID0gbmV3IFBIUEV4Y2VsX1N0eWxlX0FsaWdubWVudCgkaXNTdXBlcnZpc29yLCAkaXNDb25kaXRpb25hbCk7CiAgICAgICAgJHRoaXMtPm51bWJlckZvcm1hdCA9IG5ldyBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQoJGlzU3VwZXJ2aXNvciwgJGlzQ29uZGl0aW9uYWwpOwogICAgICAgICR0aGlzLT5wcm90ZWN0aW9uICAgPSBuZXcgUEhQRXhjZWxfU3R5bGVfUHJvdGVjdGlvbigkaXNTdXBlcnZpc29yLCAkaXNDb25kaXRpb25hbCk7CgogICAgICAgIC8vIGJpbmQgcGFyZW50IGlmIHdlIGFyZSBhIHN1cGVydmlzb3IKICAgICAgICBpZiAoJGlzU3VwZXJ2aXNvcikgewogICAgICAgICAgICAkdGhpcy0+Zm9udC0+YmluZFBhcmVudCgkdGhpcyk7CiAgICAgICAgICAgICR0aGlzLT5maWxsLT5iaW5kUGFyZW50KCR0aGlzKTsKICAgICAgICAgICAgJHRoaXMtPmJvcmRlcnMtPmJpbmRQYXJlbnQoJHRoaXMpOwogICAgICAgICAgICAkdGhpcy0+YWxpZ25tZW50LT5iaW5kUGFyZW50KCR0aGlzKTsKICAgICAgICAgICAgJHRoaXMtPm51bWJlckZvcm1hdC0+YmluZFBhcmVudCgkdGhpcyk7CiAgICAgICAgICAgICR0aGlzLT5wcm90ZWN0aW9uLT5iaW5kUGFyZW50KCR0aGlzKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgdGhlIHNoYXJlZCBzdHlsZSBjb21wb25lbnQgZm9yIHRoZSBjdXJyZW50bHkgYWN0aXZlIGNlbGwgaW4gY3VycmVudGx5IGFjdGl2ZSBzaGVldC4KICAgICAqIE9ubHkgdXNlZCBmb3Igc3R5bGUgc3VwZXJ2aXNvcgogICAgICoKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfU3R5bGUKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldFNoYXJlZENvbXBvbmVudCgpCiAgICB7CiAgICAgICAgJGFjdGl2ZVNoZWV0ID0gJHRoaXMtPmdldEFjdGl2ZVNoZWV0KCk7CiAgICAgICAgJHNlbGVjdGVkQ2VsbCA9ICR0aGlzLT5nZXRBY3RpdmVDZWxsKCk7IC8vIGUuZy4gJ0ExJwoKICAgICAgICBpZiAoJGFjdGl2ZVNoZWV0LT5jZWxsRXhpc3RzKCRzZWxlY3RlZENlbGwpKSB7CiAgICAgICAgICAgICR4ZkluZGV4ID0gJGFjdGl2ZVNoZWV0LT5nZXRDZWxsKCRzZWxlY3RlZENlbGwpLT5nZXRYZkluZGV4KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHhmSW5kZXggPSAwOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICR0aGlzLT5wYXJlbnQtPmdldENlbGxYZkJ5SW5kZXgoJHhmSW5kZXgpOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHBhcmVudC4gT25seSB1c2VkIGZvciBzdHlsZSBzdXBlcnZpc29yCiAgICAgKgogICAgICogQHJldHVybiBQSFBFeGNlbAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0UGFyZW50KCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPnBhcmVudDsKICAgIH0KCiAgICAvKioKICAgICAqIEJ1aWxkIHN0eWxlIGFycmF5IGZyb20gc3ViY29tcG9uZW50cwogICAgICoKICAgICAqIEBwYXJhbSBhcnJheSAkYXJyYXkKICAgICAqIEByZXR1cm4gYXJyYXkKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldFN0eWxlQXJyYXkoJGFycmF5KQogICAgewogICAgICAgIHJldHVybiBhcnJheSgncXVvdGVQcmVmaXgnID0+ICRhcnJheSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBBcHBseSBzdHlsZXMgZnJvbSBhcnJheQogICAgICoKICAgICAqIDxjb2RlPgogICAgICogJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRTdHlsZSgnQjInKS0+YXBwbHlGcm9tQXJyYXkoCiAgICAgKiAgICAgICAgIGFycmF5KAogICAgICogICAgICAgICAgICAgJ2ZvbnQnICAgID0+IGFycmF5KAogICAgICogICAgICAgICAgICAgICAgICduYW1lJyAgICAgID0+ICdBcmlhbCcsCiAgICAgKiAgICAgICAgICAgICAgICAgJ2JvbGQnICAgICAgPT4gdHJ1ZSwKICAgICAqICAgICAgICAgICAgICAgICAnaXRhbGljJyAgICA9PiBmYWxzZSwKICAgICAqICAgICAgICAgICAgICAgICAndW5kZXJsaW5lJyA9PiBQSFBFeGNlbF9TdHlsZV9Gb250OjpVTkRFUkxJTkVfRE9VQkxFLAogICAgICogICAgICAgICAgICAgICAgICdzdHJpa2UnICAgID0+IGZhbHNlLAogICAgICogICAgICAgICAgICAgICAgICdjb2xvcicgICAgID0+IGFycmF5KAogICAgICogICAgICAgICAgICAgICAgICAgICAncmdiJyA9PiAnODA4MDgwJwogICAgICogICAgICAgICAgICAgICAgICkKICAgICAqICAgICAgICAgICAgICksCiAgICAgKiAgICAgICAgICAgICAnYm9yZGVycycgPT4gYXJyYXkoCiAgICAgKiAgICAgICAgICAgICAgICAgJ2JvdHRvbScgICAgID0+IGFycmF5KAogICAgICogICAgICAgICAgICAgICAgICAgICAnc3R5bGUnID0+IFBIUEV4Y2VsX1N0eWxlX0JvcmRlcjo6Qk9SREVSX0RBU0hET1QsCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICdjb2xvcicgPT4gYXJyYXkoCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAncmdiJyA9PiAnODA4MDgwJwogICAgICogICAgICAgICAgICAgICAgICAgICApCiAgICAgKiAgICAgICAgICAgICAgICAgKSwKICAgICAqICAgICAgICAgICAgICAgICAndG9wJyAgICAgPT4gYXJyYXkoCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICdzdHlsZScgPT4gUEhQRXhjZWxfU3R5bGVfQm9yZGVyOjpCT1JERVJfREFTSERPVCwKICAgICAqICAgICAgICAgICAgICAgICAgICAgJ2NvbG9yJyA9PiBhcnJheSgKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICdyZ2InID0+ICc4MDgwODAnCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICkKICAgICAqICAgICAgICAgICAgICAgICApCiAgICAgKiAgICAgICAgICAgICApLAogICAgICogICAgICAgICAgICAgJ3F1b3RlUHJlZml4JyAgICA9PiB0cnVlCiAgICAgKiAgICAgICAgICkKICAgICAqICk7CiAgICAgKiA8L2NvZGU+CiAgICAgKgogICAgICogQHBhcmFtICAgIGFycmF5ICAgICRwU3R5bGVzICAgIEFycmF5IGNvbnRhaW5pbmcgc3R5bGUgaW5mb3JtYXRpb24KICAgICAqIEBwYXJhbSAgICAgYm9vbGVhbiAgICAgICAgJHBBZHZhbmNlZCAgICBBZHZhbmNlZCBtb2RlIGZvciBzZXR0aW5nIGJvcmRlcnMuCiAgICAgKiBAdGhyb3dzICAgIFBIUEV4Y2VsX0V4Y2VwdGlvbgogICAgICogQHJldHVybiBQSFBFeGNlbF9TdHlsZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gYXBwbHlGcm9tQXJyYXkoJHBTdHlsZXMgPSBudWxsLCAkcEFkdmFuY2VkID0gdHJ1ZSkKICAgIHsKICAgICAgICBpZiAoaXNfYXJyYXkoJHBTdHlsZXMpKSB7CiAgICAgICAgICAgIGlmICgkdGhpcy0+aXNTdXBlcnZpc29yKSB7CiAgICAgICAgICAgICAgICAkcFJhbmdlID0gJHRoaXMtPmdldFNlbGVjdGVkQ2VsbHMoKTsKCiAgICAgICAgICAgICAgICAvLyBVcHBlcmNhc2UgY29vcmRpbmF0ZQogICAgICAgICAgICAgICAgJHBSYW5nZSA9IHN0cnRvdXBwZXIoJHBSYW5nZSk7CgogICAgICAgICAgICAgICAgLy8gSXMgaXQgYSBjZWxsIHJhbmdlIG9yIGEgc2luZ2xlIGNlbGw\/CiAgICAgICAgICAgICAgICBpZiAoc3RycG9zKCRwUmFuZ2UsICc6JykgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgJHJhbmdlQSA9ICRwUmFuZ2U7CiAgICAgICAgICAgICAgICAgICAgJHJhbmdlQiA9ICRwUmFuZ2U7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGxpc3QoJHJhbmdlQSwgJHJhbmdlQikgPSBleHBsb2RlKCc6JywgJHBSYW5nZSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHJhbmdlIG91dGVyIGJvcmRlcnMKICAgICAgICAgICAgICAgICRyYW5nZVN0YXJ0ID0gUEhQRXhjZWxfQ2VsbDo6Y29vcmRpbmF0ZUZyb21TdHJpbmcoJHJhbmdlQSk7CiAgICAgICAgICAgICAgICAkcmFuZ2VFbmQgICA9IFBIUEV4Y2VsX0NlbGw6OmNvb3JkaW5hdGVGcm9tU3RyaW5nKCRyYW5nZUIpOwoKICAgICAgICAgICAgICAgIC8vIFRyYW5zbGF0ZSBjb2x1bW4gaW50byBpbmRleAogICAgICAgICAgICAgICAgJHJhbmdlU3RhcnRbMF0gICAgPSBQSFBFeGNlbF9DZWxsOjpjb2x1bW5JbmRleEZyb21TdHJpbmcoJHJhbmdlU3RhcnRbMF0pIC0gMTsKICAgICAgICAgICAgICAgICRyYW5nZUVuZFswXSAgICA9IFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkcmFuZ2VFbmRbMF0pIC0gMTsKCiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgY2FuIGxvb3AgdXB3YXJkcyBvbiByb3dzIGFuZCBjb2x1bW5zCiAgICAgICAgICAgICAgICBpZiAoJHJhbmdlU3RhcnRbMF0gPiAkcmFuZ2VFbmRbMF0gJiYgJHJhbmdlU3RhcnRbMV0gPiAkcmFuZ2VFbmRbMV0pIHsKICAgICAgICAgICAgICAgICAgICAkdG1wID0gJHJhbmdlU3RhcnQ7CiAgICAgICAgICAgICAgICAgICAgJHJhbmdlU3RhcnQgPSAkcmFuZ2VFbmQ7CiAgICAgICAgICAgICAgICAgICAgJHJhbmdlRW5kID0gJHRtcDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBBRFZBTkNFRCBNT0RFOgogICAgICAgICAgICAgICAgaWYgKCRwQWR2YW5jZWQgJiYgaXNzZXQoJHBTdHlsZXNbJ2JvcmRlcnMnXSkpIHsKICAgICAgICAgICAgICAgICAgICAvLyAnYWxsYm9yZGVycycgaXMgYSBzaG9ydGhhbmQgcHJvcGVydHkgZm9yICdvdXRsaW5lJyBhbmQgJ2luc2lkZScgYW5kCiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIGl0IGFwcGxpZXMgdG8gY29tcG9uZW50cyB0aGF0IGhhdmUgbm90IGJlZW4gc2V0IGV4cGxpY2l0bHkKICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHBTdHlsZXNbJ2JvcmRlcnMnXVsnYWxsYm9yZGVycyddKSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoIChhcnJheSgnb3V0bGluZScsICdpbnNpZGUnKSBhcyAkY29tcG9uZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCRwU3R5bGVzWydib3JkZXJzJ11bJGNvbXBvbmVudF0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBTdHlsZXNbJ2JvcmRlcnMnXVskY29tcG9uZW50XSA9ICRwU3R5bGVzWydib3JkZXJzJ11bJ2FsbGJvcmRlcnMnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB1bnNldCgkcFN0eWxlc1snYm9yZGVycyddWydhbGxib3JkZXJzJ10pOyAvLyBub3QgbmVlZGVkIGFueSBtb3JlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vICdvdXRsaW5lJyBpcyBhIHNob3J0aGFuZCBwcm9wZXJ0eSBmb3IgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCcKICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgaXQgYXBwbGllcyB0byBjb21wb25lbnRzIHRoYXQgaGF2ZSBub3QgYmVlbiBzZXQgZXhwbGljaXRseQogICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkcFN0eWxlc1snYm9yZGVycyddWydvdXRsaW5lJ10pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKGFycmF5KCd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnKSBhcyAkY29tcG9uZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCRwU3R5bGVzWydib3JkZXJzJ11bJGNvbXBvbmVudF0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBTdHlsZXNbJ2JvcmRlcnMnXVskY29tcG9uZW50XSA9ICRwU3R5bGVzWydib3JkZXJzJ11bJ291dGxpbmUnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB1bnNldCgkcFN0eWxlc1snYm9yZGVycyddWydvdXRsaW5lJ10pOyAvLyBub3QgbmVlZGVkIGFueSBtb3JlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vICdpbnNpZGUnIGlzIGEgc2hvcnRoYW5kIHByb3BlcnR5IGZvciAndmVydGljYWwnIGFuZCAnaG9yaXpvbnRhbCcKICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgaXQgYXBwbGllcyB0byBjb21wb25lbnRzIHRoYXQgaGF2ZSBub3QgYmVlbiBzZXQgZXhwbGljaXRseQogICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkcFN0eWxlc1snYm9yZGVycyddWydpbnNpZGUnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoYXJyYXkoJ3ZlcnRpY2FsJywgJ2hvcml6b250YWwnKSBhcyAkY29tcG9uZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCRwU3R5bGVzWydib3JkZXJzJ11bJGNvbXBvbmVudF0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBTdHlsZXNbJ2JvcmRlcnMnXVskY29tcG9uZW50XSA9ICRwU3R5bGVzWydib3JkZXJzJ11bJ2luc2lkZSddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHVuc2V0KCRwU3R5bGVzWydib3JkZXJzJ11bJ2luc2lkZSddKTsgLy8gbm90IG5lZWRlZCBhbnkgbW9yZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvLyB3aWR0aCBhbmQgaGVpZ2h0IGNoYXJhY3RlcmlzdGljcyBvZiBzZWxlY3Rpb24sIDEsIDIsIG9yIDMgKGZvciAzIG9yIG1vcmUpCiAgICAgICAgICAgICAgICAgICAgJHhNYXggPSBtaW4oJHJhbmdlRW5kWzBdIC0gJHJhbmdlU3RhcnRbMF0gKyAxLCAzKTsKICAgICAgICAgICAgICAgICAgICAkeU1heCA9IG1pbigkcmFuZ2VFbmRbMV0gLSAkcmFuZ2VTdGFydFsxXSArIDEsIDMpOwoKICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdXAgdG8gMyB4IDMgPSA5IHJlZ2lvbnMKICAgICAgICAgICAgICAgICAgICBmb3IgKCR4ID0gMTsgJHggPD0gJHhNYXg7ICsrJHgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RhcnQgY29sdW1uIGluZGV4IGZvciByZWdpb24KICAgICAgICAgICAgICAgICAgICAgICAgJGNvbFN0YXJ0ID0gKCR4ID09IDMpID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBIUEV4Y2VsX0NlbGw6OnN0cmluZ0Zyb21Db2x1bW5JbmRleCgkcmFuZ2VFbmRbMF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJHJhbmdlU3RhcnRbMF0gKyAkeCAtIDEpOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBlbmQgY29sdW1uIGluZGV4IGZvciByZWdpb24KICAgICAgICAgICAgICAgICAgICAgICAgJGNvbEVuZCA9ICgkeCA9PSAxKSA\/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJHJhbmdlU3RhcnRbMF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJHJhbmdlRW5kWzBdIC0gJHhNYXggKyAkeCk7CgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCR5ID0gMTsgJHkgPD0gJHlNYXg7ICsrJHkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIGVkZ2VzIGFyZSB0b3VjaGluZyB0aGUgcmVnaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZWRnZXMgPSBhcnJheSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR4ID09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhcmUgd2UgYXQgbGVmdCBlZGdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVkZ2VzW10gPSAnbGVmdCc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHggPT0gJHhNYXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhcmUgd2UgYXQgcmlnaHQgZWRnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlZGdlc1tdID0gJ3JpZ2h0JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkeSA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJlIHdlIGF0IHRvcCBlZGdlPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlZGdlc1tdID0gJ3RvcCc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHkgPT0gJHlNYXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhcmUgd2UgYXQgYm90dG9tIGVkZ2U\",
    "size": "23993"
}