{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Reader\/OOCalc.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\\/ICRyb3dEYXRhVGFibGVBdHRyaWJ1dGVzWydudW1iZXItcm93cy1yZXBlYXRlZCddIDogMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb2x1bW5JRCA9ICdBJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyb3dEYXRhIGFzICRrZXkgPT4gJGNlbGxEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLT5nZXRSZWFkRmlsdGVyKCkgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkdGhpcy0+Z2V0UmVhZEZpbHRlcigpLT5yZWFkQ2VsbCgkY29sdW1uSUQsICRyb3dJRCwgJHdvcmtzaGVldE5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8Yj4nLiRjb2x1bW5JRC4kcm93SUQuJzwvYj48YnIgLz4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZWxsRGF0YVRleHQgPSAoaXNzZXQoJG5hbWVzcGFjZXNDb250ZW50Wyd0ZXh0J10pKSA\\/ICRjZWxsRGF0YVRhYmxlQXR0cmlidXRlc1snbnVtYmVyLWNvbHVtbnMtcmVwZWF0ZWQnXSA6IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0eXBlICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoJGkgPSAwOyAkaSA8ICRjb2xSZXBlYXRzOyArKyRpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGkgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyskY29sdW1uSUQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHR5cGUgIT09IFBIUEV4Y2VsX0NlbGxfRGF0YVR5cGU6OlRZUEVfTlVMTCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoJHJvd0FkanVzdCA9IDA7ICRyb3dBZGp1c3QgPCAkcm93UmVwZWF0czsgKyskcm93QWRqdXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRySUQgPSAkcm93SUQgKyAkcm93QWRqdXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqUEhQRXhjZWwtPmdldEFjdGl2ZVNoZWV0KCktPmdldENlbGwoJGNvbHVtbklELiRySUQpLT5zZXRWYWx1ZUV4cGxpY2l0KCgoJGhhc0NhbGN1bGF0ZWRWYWx1ZSkgPyAkY2VsbERhdGFGb3JtdWxhIDogJGRhdGFWYWx1ZSksICR0eXBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRoYXNDYWxjdWxhdGVkVmFsdWUpIHsKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnRm9ydW1sYSByZXN1bHQgaXMgJy4kZGF0YVZhbHVlLic8YnIgLz4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRDZWxsKCRjb2x1bW5JRC4kcklEKS0+c2V0Q2FsY3VsYXRlZFZhbHVlKCRkYXRhVmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZm9ybWF0dGluZyAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRTdHlsZSgkY29sdW1uSUQuJHJJRCktPmdldE51bWJlckZvcm1hdCgpLT5zZXRGb3JtYXRDb2RlKCRmb3JtYXR0aW5nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvYmpQSFBFeGNlbC0+Z2V0QWN0aXZlU2hlZXQoKS0+Z2V0U3R5bGUoJGNvbHVtbklELiRySUQpLT5nZXROdW1iZXJGb3JtYXQoKS0+c2V0Rm9ybWF0Q29kZShQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9HRU5FUkFMKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGh5cGVybGluayAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRDZWxsKCRjb2x1bW5JRC4kcklEKS0+Z2V0SHlwZXJsaW5rKCktPnNldFVybCgkaHlwZXJsaW5rKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgTWVyZ2VkIGNlbGxzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpc3NldCgkY2VsbERhdGFUYWJsZUF0dHJpYnV0ZXNbJ251bWJlci1jb2x1bW5zLXNwYW5uZWQnXSkpIHx8IChpc3NldCgkY2VsbERhdGFUYWJsZUF0dHJpYnV0ZXNbJ251bWJlci1yb3dzLXNwYW5uZWQnXSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJHR5cGUgIT09IFBIUEV4Y2VsX0NlbGxfRGF0YVR5cGU6OlRZUEVfTlVMTCkgfHwgKCEkdGhpcy0+cmVhZERhdGFPbmx5KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbHVtblRvID0gJGNvbHVtbklEOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRjZWxsRGF0YVRhYmxlQXR0cmlidXRlc1snbnVtYmVyLWNvbHVtbnMtc3Bhbm5lZCddKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb2x1bW5UbyA9IFBIUEV4Y2VsX0NlbGw6OnN0cmluZ0Zyb21Db2x1bW5JbmRleChQSFBFeGNlbF9DZWxsOjpjb2x1bW5JbmRleEZyb21TdHJpbmcoJGNvbHVtbklEKSArICRjZWxsRGF0YVRhYmxlQXR0cmlidXRlc1snbnVtYmVyLWNvbHVtbnMtc3Bhbm5lZCddIC0yKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3dUbyA9ICRyb3dJRDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkY2VsbERhdGFUYWJsZUF0dHJpYnV0ZXNbJ251bWJlci1yb3dzLXNwYW5uZWQnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm93VG8gPSAkcm93VG8gKyAkY2VsbERhdGFUYWJsZUF0dHJpYnV0ZXNbJ251bWJlci1yb3dzLXNwYW5uZWQnXSAtIDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2VsbFJhbmdlID0gJGNvbHVtbklELiRyb3dJRC4nOicuJGNvbHVtblRvLiRyb3dUbzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvYmpQSFBFeGNlbC0+Z2V0QWN0aXZlU2hlZXQoKS0+bWVyZ2VDZWxscygkY2VsbFJhbmdlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyskY29sdW1uSUQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm93SUQgKz0gJHJvd1JlcGVhdHM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICArKyR3b3Jrc2hlZXRJRDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gUmV0dXJuCiAgICAgICAgcmV0dXJuICRvYmpQSFBFeGNlbDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIHBhcnNlUmljaFRleHQoJGlzID0gJycpCiAgICB7CiAgICAgICAgJHZhbHVlID0gbmV3IFBIUEV4Y2VsX1JpY2hUZXh0KCk7CgogICAgICAgICR2YWx1ZS0+Y3JlYXRlVGV4dCgkaXMpOwoKICAgICAgICByZXR1cm4gJHZhbHVlOwogICAgfQp9Cg==",
    "size": "37096"
}