{
    "namaFile": "js\/ref_images\/ref_images.js",
    "lastUpdate": "2017-10-25+17:12:12.03",
    "contentFile": "DQoNCnZhciByZWZfaW1hZ2VzID0gbmV3IERhZnRhck9iajIoew0KICBwcmVmaXggOiAncmVmX2ltYWdlcycsDQogIHVybCA6ICdwYWdlcy5waHA\",
    "size": "14443"
}