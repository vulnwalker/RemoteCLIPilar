{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/bootstrap-tagsinput\/bootstrap-tagsinput.js",
    "lastUpdate": "2018-03-22+14:19:15.94",
    "contentFile": "KGZ1bmN0aW9uICgkKSB7CiAgInVzZSBzdHJpY3QiOwoKICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7CiAgICB0YWdDbGFzczogZnVuY3Rpb24oaXRlbSkgewogICAgICByZXR1cm4gJ2xhYmVsIGxhYmVsLWluZm8nOwogICAgfSwKICAgIGl0ZW1WYWx1ZTogZnVuY3Rpb24oaXRlbSkgewogICAgICByZXR1cm4gaXRlbSA\",
    "size": "19924"
}