{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Writer\/Excel2007\/Workbook.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/IDEgOiAwKTsKICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnZnVsbENhbGNPbkxvYWQnLCAoJHJlY2FsY1JlcXVpcmVkKSA\",
    "size": "17787"
}