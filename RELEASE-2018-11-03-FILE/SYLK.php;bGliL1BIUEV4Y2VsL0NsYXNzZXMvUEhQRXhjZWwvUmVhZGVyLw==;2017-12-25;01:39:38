{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Reader\/SYLK.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/LT9cZCpcXT8pKS8nLCAkdmFsdWUsICRjZWxsUmVmZXJlbmNlcywgUFJFR19TRVRfT1JERVIrUFJFR19PRkZTRVRfQ0FQVFVSRSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIFJldmVyc2UgdGhlIG1hdGNoZXMgYXJyYXksIG90aGVyd2lzZSBhbGwgb3VyIG9mZnNldHMgd2lsbCBiZWNvbWUgaW5jb3JyZWN0IGlmIHdlIG1vZGlmeSBvdXIgd2F5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICB0aHJvdWdoIHRoZSBmb3JtdWxhIGZyb20gbGVmdCB0byByaWdodC4gUmV2ZXJzaW5nIG1lYW5zIHRoYXQgd2Ugd29yayByaWdodCB0byBsZWZ0LnRocm91Z2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIHRoZSBmb3JtdWxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZWxsUmVmZXJlbmNlcyA9IGFycmF5X3JldmVyc2UoJGNlbGxSZWZlcmVuY2VzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgTG9vcCB0aHJvdWdoIGVhY2ggUjFDMSBzdHlsZSByZWZlcmVuY2UgaW4gdHVybiwgY29udmVydGluZyBpdCB0byBpdHMgQTEgc3R5bGUgZXF1aXZhbGVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIHRoZW4gbW9kaWZ5IHRoZSBmb3JtdWxhIHRvIHVzZSB0aGF0IG5ldyByZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGNlbGxSZWZlcmVuY2VzIGFzICRjZWxsUmVmZXJlbmNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm93UmVmZXJlbmNlID0gJGNlbGxSZWZlcmVuY2VbMl1bMF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBFbXB0eSBSIHJlZmVyZW5jZSBpcyB0aGUgY3VycmVudCByb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcm93UmVmZXJlbmNlID09ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvd1JlZmVyZW5jZSA9ICRyb3c7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBCcmFja2V0ZWQgUiByZWZlcmVuY2VzIGFyZSByZWxhdGl2ZSB0byB0aGUgY3VycmVudCByb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcm93UmVmZXJlbmNlezB9ID09ICdbJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3dSZWZlcmVuY2UgPSAkcm93ICsgdHJpbSgkcm93UmVmZXJlbmNlLCAnW10nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb2x1bW5SZWZlcmVuY2UgPSAkY2VsbFJlZmVyZW5jZVs0XVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIEVtcHR5IEMgcmVmZXJlbmNlIGlzIHRoZSBjdXJyZW50IGNvbHVtbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRjb2x1bW5SZWZlcmVuY2UgPT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29sdW1uUmVmZXJlbmNlID0gJGNvbHVtbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIEJyYWNrZXRlZCBDIHJlZmVyZW5jZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IGNvbHVtbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRjb2x1bW5SZWZlcmVuY2V7MH0gPT0gJ1snKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbHVtblJlZmVyZW5jZSA9ICRjb2x1bW4gKyB0cmltKCRjb2x1bW5SZWZlcmVuY2UsICdbXScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEExQ2VsbFJlZmVyZW5jZSA9IFBIUEV4Y2VsX0NlbGw6OnN0cmluZ0Zyb21Db2x1bW5JbmRleCgkY29sdW1uUmVmZXJlbmNlLTEpLiRyb3dSZWZlcmVuY2U7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZhbHVlID0gc3Vic3RyX3JlcGxhY2UoJHZhbHVlLCAkQTFDZWxsUmVmZXJlbmNlLCAkY2VsbFJlZmVyZW5jZVswXVsxXSwgc3RybGVuKCRjZWxsUmVmZXJlbmNlWzBdWzBdKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNldCgkdmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgVGhlbiByZWJ1aWxkIHRoZSBmb3JtdWxhIHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxEYXRhRm9ybXVsYSA9IGltcGxvZGUoJyInLCAkdGVtcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaGFzQ2FsY3VsYXRlZFZhbHVlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRjb2x1bW5MZXR0ZXIgPSBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJGNvbHVtbi0xKTsKICAgICAgICAgICAgICAgICRjZWxsRGF0YSA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uOjp1bndyYXBSZXN1bHQoJGNlbGxEYXRhKTsKCiAgICAgICAgICAgICAgICAvLyBTZXQgY2VsbCB2YWx1ZQogICAgICAgICAgICAgICAgJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRDZWxsKCRjb2x1bW5MZXR0ZXIuJHJvdyktPnNldFZhbHVlKCgkaGFzQ2FsY3VsYXRlZFZhbHVlKSA\/ICRjZWxsRGF0YUZvcm11bGEgOiAkY2VsbERhdGEpOwogICAgICAgICAgICAgICAgaWYgKCRoYXNDYWxjdWxhdGVkVmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAkY2VsbERhdGEgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbjo6dW53cmFwUmVzdWx0KCRjZWxsRGF0YSk7CiAgICAgICAgICAgICAgICAgICAgJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRDZWxsKCRjb2x1bW5MZXR0ZXIuJHJvdyktPnNldENhbGN1bGF0ZWRWYWx1ZSgkY2VsbERhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAvLyAgICBSZWFkIGNlbGwgZm9ybWF0dGluZwogICAgICAgICAgICB9IGVsc2VpZiAoJGRhdGFUeXBlID09ICdGJykgewogICAgICAgICAgICAgICAgJGZvcm1hdFN0eWxlID0gJGNvbHVtbldpZHRoID0gJHN0eWxlU2V0dGluZ3MgPSAnJzsKICAgICAgICAgICAgICAgICRzdHlsZURhdGEgPSBhcnJheSgpOwogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHJvd0RhdGEgYXMgJHJvd0RhdHVtKSB7CiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgkcm93RGF0dW17MH0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQyc6CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1gnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbHVtbiA9IHN1YnN0cigkcm93RGF0dW0sIDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1InOgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdZJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3cgPSBzdWJzdHIoJHJvd0RhdHVtLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdQJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmb3JtYXRTdHlsZSA9ICRyb3dEYXR1bTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdXJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QoJHN0YXJ0Q29sLCAkZW5kQ29sLCAkY29sdW1uV2lkdGgpID0gZXhwbG9kZSgnICcsIHN1YnN0cigkcm93RGF0dW0sIDEpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdTJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZVNldHRpbmdzID0gc3Vic3RyKCRyb3dEYXR1bSwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCRpPTA7ICRpPHN0cmxlbigkc3R5bGVTZXR0aW5ncyk7ICsrJGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCRzdHlsZVNldHRpbmdzeyRpfSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdJJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZURhdGFbJ2ZvbnQnXVsnaXRhbGljJ10gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0QnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlRGF0YVsnZm9udCddWydib2xkJ10gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1QnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlRGF0YVsnYm9yZGVycyddWyd0b3AnXVsnc3R5bGUnXSA9IFBIUEV4Y2VsX1N0eWxlX0JvcmRlcjo6Qk9SREVSX1RISU47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQic6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVEYXRhWydib3JkZXJzJ11bJ2JvdHRvbSddWydzdHlsZSddID0gUEhQRXhjZWxfU3R5bGVfQm9yZGVyOjpCT1JERVJfVEhJTjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdMJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZURhdGFbJ2JvcmRlcnMnXVsnbGVmdCddWydzdHlsZSddID0gUEhQRXhjZWxfU3R5bGVfQm9yZGVyOjpCT1JERVJfVEhJTjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdSJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZURhdGFbJ2JvcmRlcnMnXVsncmlnaHQnXVsnc3R5bGUnXSA9IFBIUEV4Y2VsX1N0eWxlX0JvcmRlcjo6Qk9SREVSX1RISU47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoKCRmb3JtYXRTdHlsZSA+ICcnKSAmJiAoJGNvbHVtbiA+ICcnKSAmJiAoJHJvdyA+ICcnKSkgewogICAgICAgICAgICAgICAgICAgICRjb2x1bW5MZXR0ZXIgPSBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJGNvbHVtbi0xKTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPmZvcm1hdHNbJGZvcm1hdFN0eWxlXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRTdHlsZSgkY29sdW1uTGV0dGVyLiRyb3cpLT5hcHBseUZyb21BcnJheSgkdGhpcy0+Zm9ybWF0c1skZm9ybWF0U3R5bGVdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoKCFlbXB0eSgkc3R5bGVEYXRhKSkgJiYgKCRjb2x1bW4gPiAnJykgJiYgKCRyb3cgPiAnJykpIHsKICAgICAgICAgICAgICAgICAgICAkY29sdW1uTGV0dGVyID0gUEhQRXhjZWxfQ2VsbDo6c3RyaW5nRnJvbUNvbHVtbkluZGV4KCRjb2x1bW4tMSk7CiAgICAgICAgICAgICAgICAgICAgJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRTdHlsZSgkY29sdW1uTGV0dGVyLiRyb3cpLT5hcHBseUZyb21BcnJheSgkc3R5bGVEYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkY29sdW1uV2lkdGggPiAnJykgewogICAgICAgICAgICAgICAgICAgIGlmICgkc3RhcnRDb2wgPT0gJGVuZENvbCkgewogICAgICAgICAgICAgICAgICAgICAgICAkc3RhcnRDb2wgPSBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJHN0YXJ0Q29sLTEpOwogICAgICAgICAgICAgICAgICAgICAgICAkb2JqUEhQRXhjZWwtPmdldEFjdGl2ZVNoZWV0KCktPmdldENvbHVtbkRpbWVuc2lvbigkc3RhcnRDb2wpLT5zZXRXaWR0aCgkY29sdW1uV2lkdGgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzdGFydENvbCA9IFBIUEV4Y2VsX0NlbGw6OnN0cmluZ0Zyb21Db2x1bW5JbmRleCgkc3RhcnRDb2wtMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICRlbmRDb2wgPSBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJGVuZENvbC0xKTsKICAgICAgICAgICAgICAgICAgICAgICAgJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRDb2x1bW5EaW1lbnNpb24oJHN0YXJ0Q29sKS0+c2V0V2lkdGgoJGNvbHVtbldpZHRoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRDb2x1bW5EaW1lbnNpb24oKyskc3RhcnRDb2wpLT5zZXRXaWR0aCgkY29sdW1uV2lkdGgpOwogICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgkc3RhcnRDb2wgIT0gJGVuZENvbCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHJvd0RhdGEgYXMgJHJvd0RhdHVtKSB7CiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgkcm93RGF0dW17MH0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQyc6CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1gnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbHVtbiA9IHN1YnN0cigkcm93RGF0dW0sIDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1InOgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdZJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3cgPSBzdWJzdHIoJHJvd0RhdHVtLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gQ2xvc2UgZmlsZQogICAgICAgIGZjbG9zZSgkZmlsZUhhbmRsZSk7CgogICAgICAgIC8vIFJldHVybgogICAgICAgIHJldHVybiAkb2JqUEhQRXhjZWw7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgc2hlZXQgaW5kZXgKICAgICAqCiAgICAgKiBAcmV0dXJuIGludAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0U2hlZXRJbmRleCgpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5zaGVldEluZGV4OwogICAgfQoKICAgIC8qKgogICAgICogU2V0IHNoZWV0IGluZGV4CiAgICAgKgogICAgICogQHBhcmFtICAgIGludCAgICAgICAgJHBWYWx1ZSAgICAgICAgU2hlZXQgaW5kZXgKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfUmVhZGVyX1NZTEsKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNldFNoZWV0SW5kZXgoJHBWYWx1ZSA9IDApCiAgICB7CiAgICAgICAgJHRoaXMtPnNoZWV0SW5kZXggPSAkcFZhbHVlOwogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KfQo=",
    "size": "19628"
}