{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/nestable\/jquery.nestable.js",
    "lastUpdate": "2018-03-22+14:23:44.83",
    "contentFile": "LyohCiAqIE5lc3RhYmxlIGpRdWVyeSBQbHVnaW4gLSBDb3B5cmlnaHQgKGMpIDIwMTIgRGF2aWQgQnVzaGVsbCAtIGh0dHA6Ly9kYnVzaGVsbC5jb20vCiAqIER1YWwtbGljZW5zZWQgdW5kZXIgdGhlIEJTRCBvciBNSVQgbGljZW5zZXMKICovCjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKQp7CiAgICB2YXIgaGFzVG91Y2ggPSAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudDsKCiAgICAvKioKICAgICAqIERldGVjdCBDU1MgcG9pbnRlci1ldmVudHMgcHJvcGVydHkKICAgICAqIGV2ZW50cyBhcmUgbm9ybWFsbHkgZGlzYWJsZWQgb24gdGhlIGRyYWdnaW5nIGVsZW1lbnQgdG8gYXZvaWQgY29uZmxpY3RzCiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vYXVzaS9GZWF0dXJlLWRldGVjdGlvbi10ZWNobmlxdWUtZm9yLXBvaW50ZXItZXZlbnRzL2Jsb2IvbWFzdGVyL21vZGVybml6ci1wb2ludGVyZXZlbnRzLmpzCiAgICAgKi8KICAgIHZhciBoYXNQb2ludGVyRXZlbnRzID0gKGZ1bmN0aW9uKCkKICAgIHsKICAgICAgICB2YXIgZWwgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwKICAgICAgICAgICAgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CiAgICAgICAgaWYgKCEoJ3BvaW50ZXJFdmVudHMnIGluIGVsLnN0eWxlKSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYXV0byc7CiAgICAgICAgZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9ICd4JzsKICAgICAgICBkb2NFbC5hcHBlbmRDaGlsZChlbCk7CiAgICAgICAgdmFyIHN1cHBvcnRzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsICcnKS5wb2ludGVyRXZlbnRzID09PSAnYXV0byc7CiAgICAgICAgZG9jRWwucmVtb3ZlQ2hpbGQoZWwpOwogICAgICAgIHJldHVybiAhIXN1cHBvcnRzOwogICAgfSkoKTsKCiAgICB2YXIgZGVmYXVsdHMgPSB7CiAgICAgICAgICAgIGxpc3ROb2RlTmFtZSAgICA6ICdvbCcsCiAgICAgICAgICAgIGl0ZW1Ob2RlTmFtZSAgICA6ICdsaScsCiAgICAgICAgICAgIHJvb3RDbGFzcyAgICAgICA6ICdkZCcsCiAgICAgICAgICAgIGxpc3RDbGFzcyAgICAgICA6ICdkZC1saXN0JywKICAgICAgICAgICAgaXRlbUNsYXNzICAgICAgIDogJ2RkLWl0ZW0nLAogICAgICAgICAgICBkcmFnQ2xhc3MgICAgICAgOiAnZGQtZHJhZ2VsJywKICAgICAgICAgICAgaGFuZGxlQ2xhc3MgICAgIDogJ2RkLWhhbmRsZScsCiAgICAgICAgICAgIGNvbGxhcHNlZENsYXNzICA6ICdkZC1jb2xsYXBzZWQnLAogICAgICAgICAgICBwbGFjZUNsYXNzICAgICAgOiAnZGQtcGxhY2Vob2xkZXInLAogICAgICAgICAgICBub0RyYWdDbGFzcyAgICAgOiAnZGQtbm9kcmFnJywKICAgICAgICAgICAgZW1wdHlDbGFzcyAgICAgIDogJ2RkLWVtcHR5JywKICAgICAgICAgICAgZXhwYW5kQnRuSFRNTCAgIDogJzxidXR0b24gZGF0YS1hY3Rpb249ImV4cGFuZCIgdHlwZT0iYnV0dG9uIj5FeHBhbmQ8L2J1dHRvbj4nLAogICAgICAgICAgICBjb2xsYXBzZUJ0bkhUTUwgOiAnPGJ1dHRvbiBkYXRhLWFjdGlvbj0iY29sbGFwc2UiIHR5cGU9ImJ1dHRvbiI+Q29sbGFwc2U8L2J1dHRvbj4nLAogICAgICAgICAgICBncm91cCAgICAgICAgICAgOiAwLAogICAgICAgICAgICBtYXhEZXB0aCAgICAgICAgOiA1LAogICAgICAgICAgICB0aHJlc2hvbGQgICAgICAgOiAyMAogICAgICAgIH07CgogICAgZnVuY3Rpb24gUGx1Z2luKGVsZW1lbnQsIG9wdGlvbnMpCiAgICB7CiAgICAgICAgdGhpcy53ICA9ICQoZG9jdW1lbnQpOwogICAgICAgIHRoaXMuZWwgPSAkKGVsZW1lbnQpOwogICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7CiAgICAgICAgdGhpcy5pbml0KCk7CiAgICB9CgogICAgUGx1Z2luLnByb3RvdHlwZSA9IHsKCiAgICAgICAgaW5pdDogZnVuY3Rpb24oKQogICAgICAgIHsKICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzOwoKICAgICAgICAgICAgbGlzdC5yZXNldCgpOwoKICAgICAgICAgICAgbGlzdC5lbC5kYXRhKCduZXN0YWJsZS1ncm91cCcsIHRoaXMub3B0aW9ucy5ncm91cCk7CgogICAgICAgICAgICBsaXN0LnBsYWNlRWwgPSAkKCc8ZGl2IGNsYXNzPSInICsgbGlzdC5vcHRpb25zLnBsYWNlQ2xhc3MgKyAnIi8+Jyk7CgogICAgICAgICAgICAkLmVhY2godGhpcy5lbC5maW5kKGxpc3Qub3B0aW9ucy5pdGVtTm9kZU5hbWUpLCBmdW5jdGlvbihrLCBlbCkgewogICAgICAgICAgICAgICAgbGlzdC5zZXRQYXJlbnQoJChlbCkpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGxpc3QuZWwub24oJ2NsaWNrJywgJ2J1dHRvbicsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIGlmIChsaXN0LmRyYWdFbCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCksCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gdGFyZ2V0LmRhdGEoJ2FjdGlvbicpLAogICAgICAgICAgICAgICAgICAgIGl0ZW0gICA9IHRhcmdldC5wYXJlbnQobGlzdC5vcHRpb25zLml0ZW1Ob2RlTmFtZSk7CiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAnY29sbGFwc2UnKSB7CiAgICAgICAgICAgICAgICAgICAgbGlzdC5jb2xsYXBzZUl0ZW0oaXRlbSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAnZXhwYW5kJykgewogICAgICAgICAgICAgICAgICAgIGxpc3QuZXhwYW5kSXRlbShpdGVtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB2YXIgb25TdGFydEV2ZW50ID0gZnVuY3Rpb24oZSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdmFyIGhhbmRsZSA9ICQoZS50YXJnZXQpOwogICAgICAgICAgICAgICAgaWYgKCFoYW5kbGUuaGFzQ2xhc3MobGlzdC5vcHRpb25zLmhhbmRsZUNsYXNzKSkgewogICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGUuY2xvc2VzdCgnLicgKyBsaXN0Lm9wdGlvbnMubm9EcmFnQ2xhc3MpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhbmRsZSA9IGhhbmRsZS5jbG9zZXN0KCcuJyArIGxpc3Qub3B0aW9ucy5oYW5kbGVDbGFzcyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCFoYW5kbGUubGVuZ3RoIHx8IGxpc3QuZHJhZ0VsKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGxpc3QuaXNUb3VjaCA9IC9edG91Y2gvLnRlc3QoZS50eXBlKTsKICAgICAgICAgICAgICAgIGlmIChsaXN0LmlzVG91Y2ggJiYgZS50b3VjaGVzLmxlbmd0aCAhPT0gMSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICBsaXN0LmRyYWdTdGFydChlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHZhciBvbk1vdmVFdmVudCA9IGZ1bmN0aW9uKGUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmIChsaXN0LmRyYWdFbCkgewogICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICBsaXN0LmRyYWdNb3ZlKGUudG91Y2hlcyA\/IGUudG91Y2hlc1swXSA6IGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIG9uRW5kRXZlbnQgPSBmdW5jdGlvbihlKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAobGlzdC5kcmFnRWwpIHsKICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgbGlzdC5kcmFnU3RvcChlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGlmIChoYXNUb3VjaCkgewogICAgICAgICAgICAgICAgbGlzdC5lbFswXS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25TdGFydEV2ZW50LCBmYWxzZSk7CiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Nb3ZlRXZlbnQsIGZhbHNlKTsKICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uRW5kRXZlbnQsIGZhbHNlKTsKICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIG9uRW5kRXZlbnQsIGZhbHNlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbGlzdC5lbC5vbignbW91c2Vkb3duJywgb25TdGFydEV2ZW50KTsKICAgICAgICAgICAgbGlzdC53Lm9uKCdtb3VzZW1vdmUnLCBvbk1vdmVFdmVudCk7CiAgICAgICAgICAgIGxpc3Qudy5vbignbW91c2V1cCcsIG9uRW5kRXZlbnQpOwoKICAgICAgICB9LAoKICAgICAgICBzZXJpYWxpemU6IGZ1bmN0aW9uKCkKICAgICAgICB7CiAgICAgICAgICAgIHZhciBkYXRhLAogICAgICAgICAgICAgICAgZGVwdGggPSAwLAogICAgICAgICAgICAgICAgbGlzdCAgPSB0aGlzOwogICAgICAgICAgICAgICAgc3RlcCAgPSBmdW5jdGlvbihsZXZlbCwgZGVwdGgpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gWyBdLAogICAgICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IGxldmVsLmNoaWxkcmVuKGxpc3Qub3B0aW9ucy5pdGVtTm9kZU5hbWUpOwogICAgICAgICAgICAgICAgICAgIGl0ZW1zLmVhY2goZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpICAgPSAkKHRoaXMpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9ICQuZXh0ZW5kKHt9LCBsaS5kYXRhKCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViICA9IGxpLmNoaWxkcmVuKGxpc3Qub3B0aW9ucy5saXN0Tm9kZU5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ViLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jaGlsZHJlbiA9IHN0ZXAoc3ViLCBkZXB0aCArIDEpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2goaXRlbSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgZGF0YSA9IHN0ZXAobGlzdC5lbC5maW5kKGxpc3Qub3B0aW9ucy5saXN0Tm9kZU5hbWUpLmZpcnN0KCksIGRlcHRoKTsKICAgICAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgICAgfSwKCiAgICAgICAgc2VyaWFsaXNlOiBmdW5jdGlvbigpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemUoKTsKICAgICAgICB9LAoKICAgICAgICByZXNldDogZnVuY3Rpb24oKQogICAgICAgIHsKICAgICAgICAgICAgdGhpcy5tb3VzZSA9IHsKICAgICAgICAgICAgICAgIG9mZnNldFggICA6IDAsCiAgICAgICAgICAgICAgICBvZmZzZXRZICAgOiAwLAogICAgICAgICAgICAgICAgc3RhcnRYICAgIDogMCwKICAgICAgICAgICAgICAgIHN0YXJ0WSAgICA6IDAsCiAgICAgICAgICAgICAgICBsYXN0WCAgICAgOiAwLAogICAgICAgICAgICAgICAgbGFzdFkgICAgIDogMCwKICAgICAgICAgICAgICAgIG5vd1ggICAgICA6IDAsCiAgICAgICAgICAgICAgICBub3dZICAgICAgOiAwLAogICAgICAgICAgICAgICAgZGlzdFggICAgIDogMCwKICAgICAgICAgICAgICAgIGRpc3RZICAgICA6IDAsCiAgICAgICAgICAgICAgICBkaXJBeCAgICAgOiAwLAogICAgICAgICAgICAgICAgZGlyWCAgICAgIDogMCwKICAgICAgICAgICAgICAgIGRpclkgICAgICA6IDAsCiAgICAgICAgICAgICAgICBsYXN0RGlyWCAgOiAwLAogICAgICAgICAgICAgICAgbGFzdERpclkgIDogMCwKICAgICAgICAgICAgICAgIGRpc3RBeFggICA6IDAsCiAgICAgICAgICAgICAgICBkaXN0QXhZICAgOiAwCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuaXNUb3VjaCAgICA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLm1vdmluZyAgICAgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5kcmFnRWwgICAgID0gbnVsbDsKICAgICAgICAgICAgdGhpcy5kcmFnUm9vdEVsID0gbnVsbDsKICAgICAgICAgICAgdGhpcy5kcmFnRGVwdGggID0gMDsKICAgICAgICAgICAgdGhpcy5oYXNOZXdSb290ID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMucG9pbnRFbCAgICA9IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgZXhwYW5kSXRlbTogZnVuY3Rpb24obGkpCiAgICAgICAgewogICAgICAgICAgICBsaS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuY29sbGFwc2VkQ2xhc3MpOwogICAgICAgICAgICBsaS5jaGlsZHJlbignW2RhdGEtYWN0aW9uPSJleHBhbmQiXScpLmhpZGUoKTsKICAgICAgICAgICAgbGkuY2hpbGRyZW4oJ1tkYXRhLWFjdGlvbj0iY29sbGFwc2UiXScpLnNob3coKTsKICAgICAgICAgICAgbGkuY2hpbGRyZW4odGhpcy5vcHRpb25zLmxpc3ROb2RlTmFtZSkuc2hvdygpOwogICAgICAgIH0sCgogICAgICAgIGNvbGxhcHNlSXRlbTogZnVuY3Rpb24obGkpCiAgICAgICAgewogICAgICAgICAgICB2YXIgbGlzdHMgPSBsaS5jaGlsZHJlbih0aGlzLm9wdGlvbnMubGlzdE5vZGVOYW1lKTsKICAgICAgICAgICAgaWYgKGxpc3RzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgbGkuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmNvbGxhcHNlZENsYXNzKTsKICAgICAgICAgICAgICAgIGxpLmNoaWxkcmVuKCdbZGF0YS1hY3Rpb249ImNvbGxhcHNlIl0nKS5oaWRlKCk7CiAgICAgICAgICAgICAgICBsaS5jaGlsZHJlbignW2RhdGEtYWN0aW9uPSJleHBhbmQiXScpLnNob3coKTsKICAgICAgICAgICAgICAgIGxpLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5saXN0Tm9kZU5hbWUpLmhpZGUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGV4cGFuZEFsbDogZnVuY3Rpb24oKQogICAgICAgIHsKICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzOwogICAgICAgICAgICBsaXN0LmVsLmZpbmQobGlzdC5vcHRpb25zLml0ZW1Ob2RlTmFtZSkuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGxpc3QuZXhwYW5kSXRlbSgkKHRoaXMpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgY29sbGFwc2VBbGw6IGZ1bmN0aW9uKCkKICAgICAgICB7CiAgICAgICAgICAgIHZhciBsaXN0ID0gdGhpczsKICAgICAgICAgICAgbGlzdC5lbC5maW5kKGxpc3Qub3B0aW9ucy5pdGVtTm9kZU5hbWUpLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBsaXN0LmNvbGxhcHNlSXRlbSgkKHRoaXMpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgc2V0UGFyZW50OiBmdW5jdGlvbihsaSkKICAgICAgICB7CiAgICAgICAgICAgIGlmIChsaS5jaGlsZHJlbih0aGlzLm9wdGlvbnMubGlzdE5vZGVOYW1lKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGxpLnByZXBlbmQoJCh0aGlzLm9wdGlvbnMuZXhwYW5kQnRuSFRNTCkpOwogICAgICAgICAgICAgICAgbGkucHJlcGVuZCgkKHRoaXMub3B0aW9ucy5jb2xsYXBzZUJ0bkhUTUwpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBsaS5jaGlsZHJlbignW2RhdGEtYWN0aW9uPSJleHBhbmQiXScpLmhpZGUoKTsKICAgICAgICB9LAoKICAgICAgICB1bnNldFBhcmVudDogZnVuY3Rpb24obGkpCiAgICAgICAgewogICAgICAgICAgICBsaS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuY29sbGFwc2VkQ2xhc3MpOwogICAgICAgICAgICBsaS5jaGlsZHJlbignW2RhdGEtYWN0aW9uXScpLnJlbW92ZSgpOwogICAgICAgICAgICBsaS5jaGlsZHJlbih0aGlzLm9wdGlvbnMubGlzdE5vZGVOYW1lKS5yZW1vdmUoKTsKICAgICAgICB9LAoKICAgICAgICBkcmFnU3RhcnQ6IGZ1bmN0aW9uKGUpCiAgICAgICAgewogICAgICAgICAgICB2YXIgbW91c2UgICAgPSB0aGlzLm1vdXNlLAogICAgICAgICAgICAgICAgdGFyZ2V0ICAgPSAkKGUudGFyZ2V0KSwKICAgICAgICAgICAgICAgIGRyYWdJdGVtID0gdGFyZ2V0LmNsb3Nlc3QodGhpcy5vcHRpb25zLml0ZW1Ob2RlTmFtZSk7CgogICAgICAgICAgICB0aGlzLnBsYWNlRWwuY3NzKCdoZWlnaHQnLCBkcmFnSXRlbS5oZWlnaHQoKSk7CgogICAgICAgICAgICBtb3VzZS5vZmZzZXRYID0gZS5vZmZzZXRYICE9PSB1bmRlZmluZWQgPyBlLm9mZnNldFggOiBlLnBhZ2VYIC0gdGFyZ2V0Lm9mZnNldCgpLmxlZnQ7CiAgICAgICAgICAgIG1vdXNlLm9mZnNldFkgPSBlLm9mZnNldFkgIT09IHVuZGVmaW5lZCA\/IGUub2Zmc2V0WSA6IGUucGFnZVkgLSB0YXJnZXQub2Zmc2V0KCkudG9wOwogICAgICAgICAgICBtb3VzZS5zdGFydFggPSBtb3VzZS5sYXN0WCA9IGUucGFnZVg7CiAgICAgICAgICAgIG1vdXNlLnN0YXJ0WSA9IG1vdXNlLmxhc3RZID0gZS5wYWdlWTsKCiAgICAgICAgICAgIHRoaXMuZHJhZ1Jvb3RFbCA9IHRoaXMuZWw7CgogICAgICAgICAgICB0aGlzLmRyYWdFbCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLm9wdGlvbnMubGlzdE5vZGVOYW1lKSkuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxpc3RDbGFzcyArICcgJyArIHRoaXMub3B0aW9ucy5kcmFnQ2xhc3MpOwogICAgICAgICAgICB0aGlzLmRyYWdFbC5jc3MoJ3dpZHRoJywgZHJhZ0l0ZW0ud2lkdGgoKSk7CgogICAgICAgICAgICBkcmFnSXRlbS5hZnRlcih0aGlzLnBsYWNlRWwpOwogICAgICAgICAgICBkcmFnSXRlbVswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRyYWdJdGVtWzBdKTsKICAgICAgICAgICAgZHJhZ0l0ZW0uYXBwZW5kVG8odGhpcy5kcmFnRWwpOwoKICAgICAgICAgICAgJChkb2N1bWVudC5ib2R5KS5hcHBlbmQodGhpcy5kcmFnRWwpOwogICAgICAgICAgICB0aGlzLmRyYWdFbC5jc3MoewogICAgICAgICAgICAgICAgJ2xlZnQnIDogZS5wYWdlWCAtIG1vdXNlLm9mZnNldFgsCiAgICAgICAgICAgICAgICAndG9wJyAgOiBlLnBhZ2VZIC0gbW91c2Uub2Zmc2V0WQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgLy8gdG90YWwgZGVwdGggb2YgZHJhZ2dpbmcgaXRlbQogICAgICAgICAgICB2YXIgaSwgZGVwdGgsCiAgICAgICAgICAgICAgICBpdGVtcyA9IHRoaXMuZHJhZ0VsLmZpbmQodGhpcy5vcHRpb25zLml0ZW1Ob2RlTmFtZSk7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgZGVwdGggPSAkKGl0ZW1zW2ldKS5wYXJlbnRzKHRoaXMub3B0aW9ucy5saXN0Tm9kZU5hbWUpLmxlbmd0aDsKICAgICAgICAgICAgICAgIGlmIChkZXB0aCA+IHRoaXMuZHJhZ0RlcHRoKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnRGVwdGggPSBkZXB0aDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGRyYWdTdG9wOiBmdW5jdGlvbihlKQogICAgICAgIHsKICAgICAgICAgICAgdmFyIGVsID0gdGhpcy5kcmFnRWwuY2hpbGRyZW4odGhpcy5vcHRpb25zLml0ZW1Ob2RlTmFtZSkuZmlyc3QoKTsKICAgICAgICAgICAgZWxbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbFswXSk7CiAgICAgICAgICAgIHRoaXMucGxhY2VFbC5yZXBsYWNlV2l0aChlbCk7CgogICAgICAgICAgICB0aGlzLmRyYWdFbC5yZW1vdmUoKTsKICAgICAgICAgICAgdGhpcy5lbC50cmlnZ2VyKCdjaGFuZ2UnKTsKICAgICAgICAgICAgaWYgKHRoaXMuaGFzTmV3Um9vdCkgewogICAgICAgICAgICAgICAgdGhpcy5kcmFnUm9vdEVsLnRyaWdnZXIoJ2NoYW5nZScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICB9LAoKICAgICAgICBkcmFnTW92ZTogZnVuY3Rpb24oZSkKICAgICAgICB7CiAgICAgICAgICAgIHZhciBsaXN0LCBwYXJlbnQsIHByZXYsIG5leHQsIGRlcHRoLAogICAgICAgICAgICAgICAgb3B0ICAgPSB0aGlzLm9wdGlvbnMsCiAgICAgICAgICAgICAgICBtb3VzZSA9IHRoaXMubW91c2U7CgogICAgICAgICAgICB0aGlzLmRyYWdFbC5jc3MoewogICAgICAgICAgICAgICAgJ2xlZnQnIDogZS5wYWdlWCAtIG1vdXNlLm9mZnNldFgsCiAgICAgICAgICAgICAgICAndG9wJyAgOiBlLnBhZ2VZIC0gbW91c2Uub2Zmc2V0WQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIG1vdXNlIHBvc2l0aW9uIGxhc3QgZXZlbnRzCiAgICAgICAgICAgIG1vdXNlLmxhc3RYID0gbW91c2Uubm93WDsKICAgICAgICAgICAgbW91c2UubGFzdFkgPSBtb3VzZS5ub3dZOwogICAgICAgICAgICAvLyBtb3VzZSBwb3NpdGlvbiB0aGlzIGV2ZW50cwogICAgICAgICAgICBtb3VzZS5ub3dYICA9IGUucGFnZVg7CiAgICAgICAgICAgIG1vdXNlLm5vd1kgID0gZS5wYWdlWTsKICAgICAgICAgICAgLy8gZGlzdGFuY2UgbW91c2UgbW92ZWQgYmV0d2VlbiBldmVudHMKICAgICAgICAgICAgbW91c2UuZGlzdFggPSBtb3VzZS5ub3dYIC0gbW91c2UubGFzdFg7CiAgICAgICAgICAgIG1vdXNlLmRpc3RZID0gbW91c2Uubm93WSAtIG1vdXNlLmxhc3RZOwogICAgICAgICAgICAvLyBkaXJlY3Rpb24gbW91c2Ugd2FzIG1vdmluZwogICAgICAgICAgICBtb3VzZS5sYXN0RGlyWCA9IG1vdXNlLmRpclg7CiAgICAgICAgICAgIG1vdXNlLmxhc3REaXJZID0gbW91c2UuZGlyWTsKICAgICAgICAgICAgLy8gZGlyZWN0aW9uIG1vdXNlIGlzIG5vdyBtb3ZpbmcgKG9uIGJvdGggYXhpcykKICAgICAgICAgICAgbW91c2UuZGlyWCA9IG1vdXNlLmRpc3RYID09PSAwID8gMCA6IG1vdXNlLmRpc3RYID4gMCA\/IDEgOiAtMTsKICAgICAgICAgICAgbW91c2UuZGlyWSA9IG1vdXNlLmRpc3RZID09PSAwID8gMCA6IG1vdXNlLmRpc3RZID4gMCA\",
    "size": "17599"
}