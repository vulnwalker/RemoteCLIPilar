{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Reader\/Excel2003XML.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKiBQSFBFeGNlbCByb290IGRpcmVjdG9yeSAqLwppZiAoIWRlZmluZWQoJ1BIUEVYQ0VMX1JPT1QnKSkgewogICAgLyoqCiAgICAgKiBAaWdub3JlCiAgICAgKi8KICAgIGRlZmluZSgnUEhQRVhDRUxfUk9PVCcsIGRpcm5hbWUoX19GSUxFX18pIC4gJy8uLi8uLi8nKTsKICAgIHJlcXVpcmUoUEhQRVhDRUxfUk9PVCAuICdQSFBFeGNlbC9BdXRvbG9hZGVyLnBocCcpOwp9CgovKioKICogUEhQRXhjZWxfUmVhZGVyX0V4Y2VsMjAwM1hNTAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQogKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgogKgogKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAgMDIxMTAtMTMwMSAgVVNBCiAqCiAqIEBjYXRlZ29yeSAgIFBIUEV4Y2VsCiAqIEBwYWNrYWdlICAgIFBIUEV4Y2VsX1JlYWRlcgogKiBAY29weXJpZ2h0ICBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsIChodHRwOi8vd3d3LmNvZGVwbGV4LmNvbS9QSFBFeGNlbCkKICogQGxpY2Vuc2UgICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9sZ3BsLTIuMS50eHQgICAgTEdQTAogKiBAdmVyc2lvbiAgICAjI1ZFUlNJT04jIywgIyNEQVRFIyMKICovCmNsYXNzIFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDIwMDNYTUwgZXh0ZW5kcyBQSFBFeGNlbF9SZWFkZXJfQWJzdHJhY3QgaW1wbGVtZW50cyBQSFBFeGNlbF9SZWFkZXJfSVJlYWRlcgp7CiAgICAvKioKICAgICAqIEZvcm1hdHMKICAgICAqCiAgICAgKiBAdmFyIGFycmF5CiAgICAgKi8KICAgIHByb3RlY3RlZCAkc3R5bGVzID0gYXJyYXkoKTsKCiAgICAvKioKICAgICAqIENoYXJhY3RlciBzZXQgdXNlZCBpbiB0aGUgZmlsZQogICAgICoKICAgICAqIEB2YXIgc3RyaW5nCiAgICAgKi8KICAgIHByb3RlY3RlZCAkY2hhclNldCA9ICdVVEYtOCc7CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYSBuZXcgUEhQRXhjZWxfUmVhZGVyX0V4Y2VsMjAwM1hNTAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQogICAgewogICAgICAgICR0aGlzLT5yZWFkRmlsdGVyID0gbmV3IFBIUEV4Y2VsX1JlYWRlcl9EZWZhdWx0UmVhZEZpbHRlcigpOwogICAgfQoKCiAgICAvKioKICAgICAqIENhbiB0aGUgY3VycmVudCBQSFBFeGNlbF9SZWFkZXJfSVJlYWRlciByZWFkIHRoZSBmaWxlPwogICAgICoKICAgICAqIEBwYXJhbSAgICAgc3RyaW5nICAgICAgICAgJHBGaWxlbmFtZQogICAgICogQHJldHVybiAgICAgYm9vbGVhbgogICAgICogQHRocm93cyBQSFBFeGNlbF9SZWFkZXJfRXhjZXB0aW9uCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBjYW5SZWFkKCRwRmlsZW5hbWUpCiAgICB7CgogICAgICAgIC8vICAgIE9mZmljZSAgICAgICAgICAgICAgICAgICAgeG1sbnM6bz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlIgogICAgICAgIC8vICAgIEV4Y2VsICAgICAgICAgICAgICAgICAgICB4bWxuczp4PSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpleGNlbCIKICAgICAgICAvLyAgICBYTUwgU3ByZWFkc2hlZXQgICAgICAgICAgICB4bWxuczpzcz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6c3ByZWFkc2hlZXQiCiAgICAgICAgLy8gICAgU3ByZWFkc2hlZXQgY29tcG9uZW50ICAgIHhtbG5zOmM9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOmNvbXBvbmVudDpzcHJlYWRzaGVldCIKICAgICAgICAvLyAgICBYTUwgc2NoZW1hICAgICAgICAgICAgICAgICB4bWxuczpzPSJ1dWlkOkJEQzZFM0YwLTZEQTMtMTFkMS1BMkEzLTAwQUEwMEMxNDg4MiIKICAgICAgICAvLyAgICBYTUwgZGF0YSB0eXBlICAgICAgICAgICAgeG1sbnM6ZHQ9InV1aWQ6QzJGNDEwMTAtNjVCMy0xMWQxLUEyOUYtMDBBQTAwQzE0ODgyIgogICAgICAgIC8vICAgIE1TLXBlcnNpc3QgcmVjb3Jkc2V0ICAgIHhtbG5zOnJzPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnJvd3NldCIKICAgICAgICAvLyAgICBSb3dzZXQgICAgICAgICAgICAgICAgICAgIHhtbG5zOno9IiNSb3dzZXRTY2hlbWEiCiAgICAgICAgLy8KCiAgICAgICAgJHNpZ25hdHVyZSA9IGFycmF5KAogICAgICAgICAgICAgICAgJzw\/eG1sIHZlcnNpb249IjEuMCInLAogICAgICAgICAgICAgICAgJzw\/bXNvLWFwcGxpY2F0aW9uIHByb2dpZD0iRXhjZWwuU2hlZXQiPz4nCiAgICAgICAgICAgICk7CgogICAgICAgIC8vIE9wZW4gZmlsZQogICAgICAgICR0aGlzLT5vcGVuRmlsZSgkcEZpbGVuYW1lKTsKICAgICAgICAkZmlsZUhhbmRsZSA9ICR0aGlzLT5maWxlSGFuZGxlOwogICAgICAgIAogICAgICAgIC8vIFJlYWQgc2FtcGxlIGRhdGEgKGZpcnN0IDIgS0Igd2lsbCBkbykKICAgICAgICAkZGF0YSA9IGZyZWFkKCRmaWxlSGFuZGxlLCAyMDQ4KTsKICAgICAgICBmY2xvc2UoJGZpbGVIYW5kbGUpOwoKICAgICAgICAkdmFsaWQgPSB0cnVlOwogICAgICAgIGZvcmVhY2ggKCRzaWduYXR1cmUgYXMgJG1hdGNoKSB7CiAgICAgICAgICAgIC8vIGV2ZXJ5IHBhcnQgb2YgdGhlIHNpZ25hdHVyZSBtdXN0IGJlIHByZXNlbnQKICAgICAgICAgICAgaWYgKHN0cnBvcygkZGF0YSwgJG1hdGNoKSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICR2YWxpZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vICAgIFJldHJpZXZlIGNoYXJzZXQgZW5jb2RpbmcKICAgICAgICBpZiAocHJlZ19tYXRjaCgnLzw\\/LT9cZCpcXT8pKShDKFxbPy0\/XGQqXF0\/KSkvJywgJHZhbHVlLCAkY2VsbFJlZmVyZW5jZXMsIFBSRUdfU0VUX09SREVSICsgUFJFR19PRkZTRVRfQ0FQVFVSRSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgUmV2ZXJzZSB0aGUgbWF0Y2hlcyBhcnJheSwgb3RoZXJ3aXNlIGFsbCBvdXIgb2Zmc2V0cyB3aWxsIGJlY29tZSBpbmNvcnJlY3QgaWYgd2UgbW9kaWZ5IG91ciB3YXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgdGhyb3VnaCB0aGUgZm9ybXVsYSBmcm9tIGxlZnQgdG8gcmlnaHQuIFJldmVyc2luZyBtZWFucyB0aGF0IHdlIHdvcmsgcmlnaHQgdG8gbGVmdC50aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIHRoZSBmb3JtdWxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxSZWZlcmVuY2VzID0gYXJyYXlfcmV2ZXJzZSgkY2VsbFJlZmVyZW5jZXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIExvb3AgdGhyb3VnaCBlYWNoIFIxQzEgc3R5bGUgcmVmZXJlbmNlIGluIHR1cm4sIGNvbnZlcnRpbmcgaXQgdG8gaXRzIEExIHN0eWxlIGVxdWl2YWxlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIHRoZW4gbW9kaWZ5IHRoZSBmb3JtdWxhIHRvIHVzZSB0aGF0IG5ldyByZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkY2VsbFJlZmVyZW5jZXMgYXMgJGNlbGxSZWZlcmVuY2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvd1JlZmVyZW5jZSA9ICRjZWxsUmVmZXJlbmNlWzJdWzBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBFbXB0eSBSIHJlZmVyZW5jZSBpcyB0aGUgY3VycmVudCByb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRyb3dSZWZlcmVuY2UgPT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3dSZWZlcmVuY2UgPSAkcm93SUQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgQnJhY2tldGVkIFIgcmVmZXJlbmNlcyBhcmUgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcm93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcm93UmVmZXJlbmNlezB9ID09ICdbJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvd1JlZmVyZW5jZSA9ICRyb3dJRCArIHRyaW0oJHJvd1JlZmVyZW5jZSwgJ1tdJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbHVtblJlZmVyZW5jZSA9ICRjZWxsUmVmZXJlbmNlWzRdWzBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBFbXB0eSBDIHJlZmVyZW5jZSBpcyB0aGUgY3VycmVudCBjb2x1bW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRjb2x1bW5SZWZlcmVuY2UgPT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb2x1bW5SZWZlcmVuY2UgPSAkY29sdW1uTnVtYmVyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIEJyYWNrZXRlZCBDIHJlZmVyZW5jZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IGNvbHVtbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGNvbHVtblJlZmVyZW5jZXswfSA9PSAnWycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb2x1bW5SZWZlcmVuY2UgPSAkY29sdW1uTnVtYmVyICsgdHJpbSgkY29sdW1uUmVmZXJlbmNlLCAnW10nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQTFDZWxsUmVmZXJlbmNlID0gUEhQRXhjZWxfQ2VsbDo6c3RyaW5nRnJvbUNvbHVtbkluZGV4KCRjb2x1bW5SZWZlcmVuY2UtMSkuJHJvd1JlZmVyZW5jZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZhbHVlID0gc3Vic3RyX3JlcGxhY2UoJHZhbHVlLCAkQTFDZWxsUmVmZXJlbmNlLCAkY2VsbFJlZmVyZW5jZVswXVsxXSwgc3RybGVuKCRjZWxsUmVmZXJlbmNlWzBdWzBdKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2V0KCR2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgVGhlbiByZWJ1aWxkIHRoZSBmb3JtdWxhIHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZWxsRGF0YUZvcm11bGEgPSBpbXBsb2RlKCciJywgJHRlbXApOwovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnQWZ0ZXI6ICcsICRjZWxsRGF0YUZvcm11bGEsJzxiciAvPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICdDZWxsICcuJGNvbHVtbklELiRyb3dJRC4nIGlzIGEgJy4kdHlwZS4nIHdpdGggYSB2YWx1ZSBvZiAnLigoJGhhc0NhbGN1bGF0ZWRWYWx1ZSkgPyAkY2VsbERhdGFGb3JtdWxhIDogJGNlbGxWYWx1ZSkuJzxiciAvPic7Ci8vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqUEhQRXhjZWwtPmdldEFjdGl2ZVNoZWV0KCktPmdldENlbGwoJGNvbHVtbklELiRyb3dJRCktPnNldFZhbHVlRXhwbGljaXQoKCgkaGFzQ2FsY3VsYXRlZFZhbHVlKSA\/ICRjZWxsRGF0YUZvcm11bGEgOiAkY2VsbFZhbHVlKSwgJHR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRoYXNDYWxjdWxhdGVkVmFsdWUpIHsKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJ0Zvcm11bGEgcmVzdWx0IGlzICcuJGNlbGxWYWx1ZS4nPGJyIC8+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqUEhQRXhjZWwtPmdldEFjdGl2ZVNoZWV0KCktPmdldENlbGwoJGNvbHVtbklELiRyb3dJRCktPnNldENhbGN1bGF0ZWRWYWx1ZSgkY2VsbFZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZWxsSXNTZXQgPSAkcm93SGFzRGF0YSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkY2VsbC0+Q29tbWVudCkpIHsKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGI+Y29tbWVudCBmb3VuZDwvYj48YnIgLz4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbW1lbnRBdHRyaWJ1dGVzID0gJGNlbGwtPkNvbW1lbnQtPmF0dHJpYnV0ZXMoJG5hbWVzcGFjZXNbJ3NzJ10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhvciA9ICd1bmtub3duJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkY29tbWVudEF0dHJpYnV0ZXMtPkF1dGhvcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aG9yID0gKHN0cmluZykkY29tbWVudEF0dHJpYnV0ZXMtPkF1dGhvcjsKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJ0F1dGhvcjogJywgJGF1dGhvciwnPGJyIC8+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRub2RlID0gJGNlbGwtPkNvbW1lbnQtPkRhdGEtPmFzWE1MKCk7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhbm5vdGF0aW9uID0gc3RyX3JlcGxhY2UoJ2h0bWw6JywnJyxzdWJzdHIoJG5vZGUsNDksLTEwKSk7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJGFubm90YXRpb24sJzxiciAvPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYW5ub3RhdGlvbiA9IHN0cmlwX3RhZ3MoJG5vZGUpOwovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICdBbm5vdGF0aW9uOiAnLCAkYW5ub3RhdGlvbiwnPGJyIC8+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvYmpQSFBFeGNlbC0+Z2V0QWN0aXZlU2hlZXQoKS0+Z2V0Q29tbWVudCgkY29sdW1uSUQuJHJvd0lEKS0+c2V0QXV0aG9yKHNlbGY6OmNvbnZlcnRTdHJpbmdFbmNvZGluZygkYXV0aG9yLCAkdGhpcy0+Y2hhclNldCkpLT5zZXRUZXh0KCR0aGlzLT5wYXJzZVJpY2hUZXh0KCRhbm5vdGF0aW9uKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJGNlbGxJc1NldCkgJiYgKGlzc2V0KCRjZWxsX3NzWydTdHlsZUlEJ10pKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlID0gKHN0cmluZykgJGNlbGxfc3NbJ1N0eWxlSUQnXTsKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnQ2VsbCBzdHlsZSBmb3IgJy4kY29sdW1uSUQuJHJvd0lELicgaXMgJy4kc3R5bGUuJzxiciAvPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlzc2V0KCR0aGlzLT5zdHlsZXNbJHN0eWxlXSkpICYmICghZW1wdHkoJHRoaXMtPnN0eWxlc1skc3R5bGVdKSkpIHsKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJ0NlbGwgJy4kY29sdW1uSUQuJHJvd0lELic8YnIgLz4nOwovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnRfcigkdGhpcy0+c3R5bGVzWyRzdHlsZV0pOwovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGJyIC8+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISRvYmpQSFBFeGNlbC0+Z2V0QWN0aXZlU2hlZXQoKS0+Y2VsbEV4aXN0cygkY29sdW1uSUQuJHJvd0lEKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqUEhQRXhjZWwtPmdldEFjdGl2ZVNoZWV0KCktPmdldENlbGwoJGNvbHVtbklELiRyb3dJRCktPnNldFZhbHVlKG51bGwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqUEhQRXhjZWwtPmdldEFjdGl2ZVNoZWV0KCktPmdldFN0eWxlKCRjZWxsUmFuZ2UpLT5hcHBseUZyb21BcnJheSgkdGhpcy0+c3R5bGVzWyRzdHlsZV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICsrJGNvbHVtbklEOwogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoJGFkZGl0aW9uYWxNZXJnZWRDZWxscyA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrJGNvbHVtbklEOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFkZGl0aW9uYWxNZXJnZWRDZWxscy0tOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoJHJvd0hhc0RhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRyb3dfc3NbJ1N0eWxlSUQnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3dTdHlsZSA9ICRyb3dfc3NbJ1N0eWxlSUQnXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHJvd19zc1snSGVpZ2h0J10pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm93SGVpZ2h0ID0gJHJvd19zc1snSGVpZ2h0J107Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxiPlNldHRpbmcgcm93IGhlaWdodCB0byAnLiRyb3dIZWlnaHQuJzwvYj48YnIgLz4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9ialBIUEV4Y2VsLT5nZXRBY3RpdmVTaGVldCgpLT5nZXRSb3dEaW1lbnNpb24oJHJvd0lEKS0+c2V0Um93SGVpZ2h0KCRyb3dIZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICArKyRyb3dJRDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICArKyR3b3Jrc2hlZXRJRDsKICAgICAgICB9CgogICAgICAgIC8vIFJldHVybgogICAgICAgIHJldHVybiAkb2JqUEhQRXhjZWw7CiAgICB9CgoKICAgIHByb3RlY3RlZCBzdGF0aWMgZnVuY3Rpb24gY29udmVydFN0cmluZ0VuY29kaW5nKCRzdHJpbmcsICRjaGFyc2V0KQogICAgewogICAgICAgIGlmICgkY2hhcnNldCAhPSAnVVRGLTgnKSB7CiAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9TaGFyZWRfU3RyaW5nOjpDb252ZXJ0RW5jb2RpbmcoJHN0cmluZywgJ1VURi04JywgJGNoYXJzZXQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJHN0cmluZzsKICAgIH0KCgogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIHBhcnNlUmljaFRleHQoJGlzID0gJycpCiAgICB7CiAgICAgICAgJHZhbHVlID0gbmV3IFBIUEV4Y2VsX1JpY2hUZXh0KCk7CgogICAgICAgICR2YWx1ZS0+Y3JlYXRlVGV4dChzZWxmOjpjb252ZXJ0U3RyaW5nRW5jb2RpbmcoJGlzLCAkdGhpcy0+Y2hhclNldCkpOwoKICAgICAgICByZXR1cm4gJHZhbHVlOwogICAgfQp9Cg==",
    "size": "38896"
}