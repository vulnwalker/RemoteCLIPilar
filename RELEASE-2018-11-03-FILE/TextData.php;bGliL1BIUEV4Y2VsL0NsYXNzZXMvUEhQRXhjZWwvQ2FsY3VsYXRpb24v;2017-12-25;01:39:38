{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Calculation\/TextData.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKiBQSFBFeGNlbCByb290IGRpcmVjdG9yeSAqLwppZiAoIWRlZmluZWQoJ1BIUEVYQ0VMX1JPT1QnKSkgewogICAgLyoqCiAgICAgKiBAaWdub3JlCiAgICAgKi8KICAgIGRlZmluZSgnUEhQRVhDRUxfUk9PVCcsIGRpcm5hbWUoX19GSUxFX18pIC4gJy8uLi8uLi8nKTsKICAgIHJlcXVpcmUoUEhQRVhDRUxfUk9PVCAuICdQSFBFeGNlbC9BdXRvbG9hZGVyLnBocCcpOwp9CgovKioKICogUEhQRXhjZWxfQ2FsY3VsYXRpb25fVGV4dERhdGEKICoKICogQ29weXJpZ2h0IChjKSAyMDA2IC0gMjAxNSBQSFBFeGNlbAogKgogKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yCiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyCiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgogKgogKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVQogKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgogKgogKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQQogKgogKiBAY2F0ZWdvcnkgICAgUEhQRXhjZWwKICogQHBhY2thZ2UgICAgICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uCiAqIEBjb3B5cmlnaHQgICAgQ29weXJpZ2h0IChjKSAyMDA2IC0gMjAxNSBQSFBFeGNlbCAoaHR0cDovL3d3dy5jb2RlcGxleC5jb20vUEhQRXhjZWwpCiAqIEBsaWNlbnNlICAgICAgICBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2xncGwtMi4xLnR4dCAgICBMR1BMCiAqIEB2ZXJzaW9uICAgICAgICAjI1ZFUlNJT04jIywgIyNEQVRFIyMKICovCmNsYXNzIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX1RleHREYXRhCnsKICAgIHByaXZhdGUgc3RhdGljICRpbnZhbGlkQ2hhcnM7CgogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gdW5pY29kZVRvT3JkKCRjKQogICAgewogICAgICAgIGlmIChvcmQoJGN7MH0pID49MCAmJiBvcmQoJGN7MH0pIDw9IDEyNykgewogICAgICAgICAgICByZXR1cm4gb3JkKCRjezB9KTsKICAgICAgICB9IGVsc2VpZiAob3JkKCRjezB9KSA+PSAxOTIgJiYgb3JkKCRjezB9KSA8PSAyMjMpIHsKICAgICAgICAgICAgcmV0dXJuIChvcmQoJGN7MH0pLTE5MikqNjQgKyAob3JkKCRjezF9KS0xMjgpOwogICAgICAgIH0gZWxzZWlmIChvcmQoJGN7MH0pID49IDIyNCAmJiBvcmQoJGN7MH0pIDw9IDIzOSkgewogICAgICAgICAgICByZXR1cm4gKG9yZCgkY3swfSktMjI0KSo0MDk2ICsgKG9yZCgkY3sxfSktMTI4KSo2NCArIChvcmQoJGN7Mn0pLTEyOCk7CiAgICAgICAgfSBlbHNlaWYgKG9yZCgkY3swfSkgPj0gMjQwICYmIG9yZCgkY3swfSkgPD0gMjQ3KSB7CiAgICAgICAgICAgIHJldHVybiAob3JkKCRjezB9KS0yNDApKjI2MjE0NCArIChvcmQoJGN7MX0pLTEyOCkqNDA5NiArIChvcmQoJGN7Mn0pLTEyOCkqNjQgKyAob3JkKCRjezN9KS0xMjgpOwogICAgICAgIH0gZWxzZWlmIChvcmQoJGN7MH0pID49IDI0OCAmJiBvcmQoJGN7MH0pIDw9IDI1MSkgewogICAgICAgICAgICByZXR1cm4gKG9yZCgkY3swfSktMjQ4KSoxNjc3NzIxNiArIChvcmQoJGN7MX0pLTEyOCkqMjYyMTQ0ICsgKG9yZCgkY3syfSktMTI4KSo0MDk2ICsgKG9yZCgkY3szfSktMTI4KSo2NCArIChvcmQoJGN7NH0pLTEyOCk7CiAgICAgICAgfSBlbHNlaWYgKG9yZCgkY3swfSkgPj0gMjUyICYmIG9yZCgkY3swfSkgPD0gMjUzKSB7CiAgICAgICAgICAgIHJldHVybiAob3JkKCRjezB9KS0yNTIpKjEwNzM3NDE4MjQgKyAob3JkKCRjezF9KS0xMjgpKjE2Nzc3MjE2ICsgKG9yZCgkY3syfSktMTI4KSoyNjIxNDQgKyAob3JkKCRjezN9KS0xMjgpKjQwOTYgKyAob3JkKCRjezR9KS0xMjgpKjY0ICsgKG9yZCgkY3s1fSktMTI4KTsKICAgICAgICB9IGVsc2VpZiAob3JkKCRjezB9KSA+PSAyNTQgJiYgb3JkKCRjezB9KSA8PSAyNTUpIHsKICAgICAgICAgICAgLy8gZXJyb3IKICAgICAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6VkFMVUUoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgLyoqCiAgICAgKiBDSEFSQUNURVIKICAgICAqCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICRjaGFyYWN0ZXIgICAgVmFsdWUKICAgICAqIEByZXR1cm4gICAgaW50CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gQ0hBUkFDVEVSKCRjaGFyYWN0ZXIpCiAgICB7CiAgICAgICAgJGNoYXJhY3RlciA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCRjaGFyYWN0ZXIpOwoKICAgICAgICBpZiAoKCFpc19udW1lcmljKCRjaGFyYWN0ZXIpKSB8fCAoJGNoYXJhY3RlciA8IDApKSB7CiAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OlZBTFVFKCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdtYl9jb252ZXJ0X2VuY29kaW5nJykpIHsKICAgICAgICAgICAgcmV0dXJuIG1iX2NvbnZlcnRfZW5jb2RpbmcoJyYjJy5pbnR2YWwoJGNoYXJhY3RlcikuJzsnLCAnVVRGLTgnLCAnSFRNTC1FTlRJVElFUycpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBjaHIoaW50dmFsKCRjaGFyYWN0ZXIpKTsKICAgICAgICB9CiAgICB9CgoKICAgIC8qKgogICAgICogVFJJTU5PTlBSSU5UQUJMRQogICAgICoKICAgICAqIEBwYXJhbSAgICBtaXhlZCAgICAkc3RyaW5nVmFsdWUgICAgVmFsdWUgdG8gY2hlY2sKICAgICAqIEByZXR1cm4gICAgc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gVFJJTU5PTlBSSU5UQUJMRSgkc3RyaW5nVmFsdWUgPSAnJykKICAgIHsKICAgICAgICAkc3RyaW5nVmFsdWUgICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkc3RyaW5nVmFsdWUpOwoKICAgICAgICBpZiAoaXNfYm9vbCgkc3RyaW5nVmFsdWUpKSB7CiAgICAgICAgICAgIHJldHVybiAoJHN0cmluZ1ZhbHVlKSA\/IFBIUEV4Y2VsX0NhbGN1bGF0aW9uOjpnZXRUUlVFKCkgOiBQSFBFeGNlbF9DYWxjdWxhdGlvbjo6Z2V0RkFMU0UoKTsKICAgICAgICB9CgogICAgICAgIGlmIChzZWxmOjokaW52YWxpZENoYXJzID09IG51bGwpIHsKICAgICAgICAgICAgc2VsZjo6JGludmFsaWRDaGFycyA9IHJhbmdlKGNocigwKSwgY2hyKDMxKSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoaXNfc3RyaW5nKCRzdHJpbmdWYWx1ZSkgfHwgaXNfbnVtZXJpYygkc3RyaW5nVmFsdWUpKSB7CiAgICAgICAgICAgIHJldHVybiBzdHJfcmVwbGFjZShzZWxmOjokaW52YWxpZENoYXJzLCAnJywgdHJpbSgkc3RyaW5nVmFsdWUsICJceDAwLi5ceDFGIikpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBUUklNU1BBQ0VTCiAgICAgKgogICAgICogQHBhcmFtICAgIG1peGVkICAgICRzdHJpbmdWYWx1ZSAgICBWYWx1ZSB0byBjaGVjawogICAgICogQHJldHVybiAgICBzdHJpbmcKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBUUklNU1BBQ0VTKCRzdHJpbmdWYWx1ZSA9ICcnKQogICAgewogICAgICAgICRzdHJpbmdWYWx1ZSA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCRzdHJpbmdWYWx1ZSk7CiAgICAgICAgaWYgKGlzX2Jvb2woJHN0cmluZ1ZhbHVlKSkgewogICAgICAgICAgICByZXR1cm4gKCRzdHJpbmdWYWx1ZSkgPyBQSFBFeGNlbF9DYWxjdWxhdGlvbjo6Z2V0VFJVRSgpIDogUEhQRXhjZWxfQ2FsY3VsYXRpb246OmdldEZBTFNFKCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoaXNfc3RyaW5nKCRzdHJpbmdWYWx1ZSkgfHwgaXNfbnVtZXJpYygkc3RyaW5nVmFsdWUpKSB7CiAgICAgICAgICAgIHJldHVybiB0cmltKHByZWdfcmVwbGFjZSgnLyArLycsICcgJywgdHJpbSgkc3RyaW5nVmFsdWUsICcgJykpLCAnICcpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBBU0NJSUNPREUKICAgICAqCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICRjaGFyYWN0ZXJzICAgICAgICBWYWx1ZQogICAgICogQHJldHVybiAgICBpbnQKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBBU0NJSUNPREUoJGNoYXJhY3RlcnMpCiAgICB7CiAgICAgICAgaWYgKCgkY2hhcmFjdGVycyA9PT0gbnVsbCkgfHwgKCRjaGFyYWN0ZXJzID09PSAnJykpIHsKICAgICAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6VkFMVUUoKTsKICAgICAgICB9CiAgICAgICAgJGNoYXJhY3RlcnMgICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkY2hhcmFjdGVycyk7CiAgICAgICAgaWYgKGlzX2Jvb2woJGNoYXJhY3RlcnMpKSB7CiAgICAgICAgICAgIGlmIChQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmdldENvbXBhdGliaWxpdHlNb2RlKCkgPT0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpDT01QQVRJQklMSVRZX09QRU5PRkZJQ0UpIHsKICAgICAgICAgICAgICAgICRjaGFyYWN0ZXJzID0gKGludCkgJGNoYXJhY3RlcnM7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkY2hhcmFjdGVycyA9ICgkY2hhcmFjdGVycykgPyBQSFBFeGNlbF9DYWxjdWxhdGlvbjo6Z2V0VFJVRSgpIDogUEhQRXhjZWxfQ2FsY3VsYXRpb246OmdldEZBTFNFKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRjaGFyYWN0ZXIgPSAkY2hhcmFjdGVyczsKICAgICAgICBpZiAoKGZ1bmN0aW9uX2V4aXN0cygnbWJfc3RybGVuJykpICYmIChmdW5jdGlvbl9leGlzdHMoJ21iX3N1YnN0cicpKSkgewogICAgICAgICAgICBpZiAobWJfc3RybGVuKCRjaGFyYWN0ZXJzLCAnVVRGLTgnKSA+IDEpIHsKICAgICAgICAgICAgICAgICRjaGFyYWN0ZXIgPSBtYl9zdWJzdHIoJGNoYXJhY3RlcnMsIDAsIDEsICdVVEYtOCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmOjp1bmljb2RlVG9PcmQoJGNoYXJhY3Rlcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHN0cmxlbigkY2hhcmFjdGVycykgPiAwKSB7CiAgICAgICAgICAgICAgICAkY2hhcmFjdGVyID0gc3Vic3RyKCRjaGFyYWN0ZXJzLCAwLCAxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gb3JkKCRjaGFyYWN0ZXIpOwogICAgICAgIH0KICAgIH0KCgogICAgLyoqCiAgICAgKiBDT05DQVRFTkFURQogICAgICoKICAgICAqIEByZXR1cm4gICAgc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gQ09OQ0FURU5BVEUoKQogICAgewogICAgICAgICRyZXR1cm5WYWx1ZSA9ICcnOwoKICAgICAgICAvLyBMb29wIHRocm91Z2ggYXJndW1lbnRzCiAgICAgICAgJGFBcmdzID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuQXJyYXkoZnVuY19nZXRfYXJncygpKTsKICAgICAgICBmb3JlYWNoICgkYUFyZ3MgYXMgJGFyZykgewogICAgICAgICAgICBpZiAoaXNfYm9vbCgkYXJnKSkgewogICAgICAgICAgICAgICAgaWYgKFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6Z2V0Q29tcGF0aWJpbGl0eU1vZGUoKSA9PSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OkNPTVBBVElCSUxJVFlfT1BFTk9GRklDRSkgewogICAgICAgICAgICAgICAgICAgICRhcmcgPSAoaW50KSAkYXJnOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkYXJnID0gKCRhcmcpID8gUEhQRXhjZWxfQ2FsY3VsYXRpb246OmdldFRSVUUoKSA6IFBIUEV4Y2VsX0NhbGN1bGF0aW9uOjpnZXRGQUxTRSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRyZXR1cm5WYWx1ZSAuPSAkYXJnOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRyZXR1cm5WYWx1ZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBET0xMQVIKICAgICAqCiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNvbnZlcnRzIGEgbnVtYmVyIHRvIHRleHQgdXNpbmcgY3VycmVuY3kgZm9ybWF0LCB3aXRoIHRoZSBkZWNpbWFscyByb3VuZGVkIHRvIHRoZSBzcGVjaWZpZWQgcGxhY2UuCiAgICAgKiBUaGUgZm9ybWF0IHVzZWQgaXMgJCMsIyMwLjAwXyk7KCQjLCMjMC4wMCkuLgogICAgICoKICAgICAqIEBwYXJhbSAgICBmbG9hdCAgICAkdmFsdWUgICAgICAgICAgICBUaGUgdmFsdWUgdG8gZm9ybWF0CiAgICAgKiBAcGFyYW0gICAgaW50ICAgICAgICAkZGVjaW1hbHMgICAgICAgIFRoZSBudW1iZXIgb2YgZGlnaXRzIHRvIGRpc3BsYXkgdG8gdGhlIHJpZ2h0IG9mIHRoZSBkZWNpbWFsIHBvaW50LgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBkZWNpbWFscyBpcyBuZWdhdGl2ZSwgbnVtYmVyIGlzIHJvdW5kZWQgdG8gdGhlIGxlZnQgb2YgdGhlIGRlY2ltYWwgcG9pbnQuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHlvdSBvbWl0IGRlY2ltYWxzLCBpdCBpcyBhc3N1bWVkIHRvIGJlIDIKICAgICAqIEByZXR1cm4gICAgc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gRE9MTEFSKCR2YWx1ZSA9IDAsICRkZWNpbWFscyA9IDIpCiAgICB7CiAgICAgICAgJHZhbHVlICAgICAgICA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCR2YWx1ZSk7CiAgICAgICAgJGRlY2ltYWxzICAgID0gaXNfbnVsbCgkZGVjaW1hbHMpID8gMCA6IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCRkZWNpbWFscyk7CgogICAgICAgIC8vIFZhbGlkYXRlIHBhcmFtZXRlcnMKICAgICAgICBpZiAoIWlzX251bWVyaWMoJHZhbHVlKSB8fCAhaXNfbnVtZXJpYygkZGVjaW1hbHMpKSB7CiAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6Ok5hTigpOwogICAgICAgIH0KICAgICAgICAkZGVjaW1hbHMgPSBmbG9vcigkZGVjaW1hbHMpOwoKICAgICAgICAkbWFzayA9ICckIywjIzAnOwogICAgICAgIGlmICgkZGVjaW1hbHMgPiAwKSB7CiAgICAgICAgICAgICRtYXNrIC49ICcuJyAuIHN0cl9yZXBlYXQoJzAnLCAkZGVjaW1hbHMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRyb3VuZCA9IHBvdygxMCwgYWJzKCRkZWNpbWFscykpOwogICAgICAgICAgICBpZiAoJHZhbHVlIDwgMCkgewogICAgICAgICAgICAgICAgJHJvdW5kID0gMC0kcm91bmQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJHZhbHVlID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fTWF0aFRyaWc6Ok1ST1VORCgkdmFsdWUsICRyb3VuZCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0Ojp0b0Zvcm1hdHRlZFN0cmluZygkdmFsdWUsICRtYXNrKTsKCiAgICB9CgoKICAgIC8qKgogICAgICogU0VBUkNIU0VOU0lUSVZFCiAgICAgKgogICAgICogQHBhcmFtICAgIHN0cmluZyAgICAkbmVlZGxlICAgICAgICBUaGUgc3RyaW5nIHRvIGxvb2sgZm9yCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICRoYXlzdGFjayAgICBUaGUgc3RyaW5nIGluIHdoaWNoIHRvIGxvb2sKICAgICAqIEBwYXJhbSAgICBpbnQgICAgICAgICRvZmZzZXQgICAgICAgIE9mZnNldCB3aXRoaW4gJGhheXN0YWNrCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZwogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFNFQVJDSFNFTlNJVElWRSgkbmVlZGxlLCAkaGF5c3RhY2ssICRvZmZzZXQgPSAxKQogICAgewogICAgICAgICRuZWVkbGUgICA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCRuZWVkbGUpOwogICAgICAgICRoYXlzdGFjayA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCRoYXlzdGFjayk7CiAgICAgICAgJG9mZnNldCAgID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJG9mZnNldCk7CgogICAgICAgIGlmICghaXNfYm9vbCgkbmVlZGxlKSkgewogICAgICAgICAgICBpZiAoaXNfYm9vbCgkaGF5c3RhY2spKSB7CiAgICAgICAgICAgICAgICAkaGF5c3RhY2sgPSAoJGhheXN0YWNrKSA\\/IFBIUEV4Y2VsX0NhbGN1bGF0aW9uOjpnZXRUUlVFKCkgOiBQSFBFeGNlbF9DYWxjdWxhdGlvbjo6Z2V0RkFMU0UoKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBQSFBFeGNlbF9TaGFyZWRfU3RyaW5nOjpTdHJUb1VwcGVyKCRtaXhlZENhc2VTdHJpbmcpOwogICAgfQoKCiAgICAvKioKICAgICAqIFBST1BFUkNBU0UKICAgICAqCiAgICAgKiBDb252ZXJ0cyBhIHN0cmluZyB2YWx1ZSB0byB1cHBlciBjYXNlLgogICAgICoKICAgICAqIEBwYXJhbSAgICBzdHJpbmcgICAgICAgICRtaXhlZENhc2VTdHJpbmcKICAgICAqIEByZXR1cm4gICAgc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gUFJPUEVSQ0FTRSgkbWl4ZWRDYXNlU3RyaW5nKQogICAgewogICAgICAgICRtaXhlZENhc2VTdHJpbmcgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkbWl4ZWRDYXNlU3RyaW5nKTsKCiAgICAgICAgaWYgKGlzX2Jvb2woJG1peGVkQ2FzZVN0cmluZykpIHsKICAgICAgICAgICAgJG1peGVkQ2FzZVN0cmluZyA9ICgkbWl4ZWRDYXNlU3RyaW5nKSA\/IFBIUEV4Y2VsX0NhbGN1bGF0aW9uOjpnZXRUUlVFKCkgOiBQSFBFeGNlbF9DYWxjdWxhdGlvbjo6Z2V0RkFMU0UoKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBQSFBFeGNlbF9TaGFyZWRfU3RyaW5nOjpTdHJUb1RpdGxlKCRtaXhlZENhc2VTdHJpbmcpOwogICAgfQoKCiAgICAvKioKICAgICAqIFJFUExBQ0UKICAgICAqCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICRvbGRUZXh0ICAgIFN0cmluZyB0byBtb2RpZnkKICAgICAqIEBwYXJhbSAgICBpbnQgICAgICAgICRzdGFydCAgICAgICAgU3RhcnQgY2hhcmFjdGVyCiAgICAgKiBAcGFyYW0gICAgaW50ICAgICAgICAkY2hhcnMgICAgICAgIE51bWJlciBvZiBjaGFyYWN0ZXJzCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICRuZXdUZXh0ICAgIFN0cmluZyB0byByZXBsYWNlIGluIGRlZmluZWQgcG9zaXRpb24KICAgICAqIEByZXR1cm4gICAgc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gUkVQTEFDRSgkb2xkVGV4dCA9ICcnLCAkc3RhcnQgPSAxLCAkY2hhcnMgPSBudWxsLCAkbmV3VGV4dCkKICAgIHsKICAgICAgICAkb2xkVGV4dCA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCRvbGRUZXh0KTsKICAgICAgICAkc3RhcnQgICA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCRzdGFydCk7CiAgICAgICAgJGNoYXJzICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkY2hhcnMpOwogICAgICAgICRuZXdUZXh0ID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJG5ld1RleHQpOwoKICAgICAgICAkbGVmdCA9IHNlbGY6OkxFRlQoJG9sZFRleHQsICRzdGFydC0xKTsKICAgICAgICAkcmlnaHQgPSBzZWxmOjpSSUdIVCgkb2xkVGV4dCwgc2VsZjo6U1RSSU5HTEVOR1RIKCRvbGRUZXh0KS0oJHN0YXJ0KyRjaGFycykrMSk7CgogICAgICAgIHJldHVybiAkbGVmdC4kbmV3VGV4dC4kcmlnaHQ7CiAgICB9CgoKICAgIC8qKgogICAgICogU1VCU1RJVFVURQogICAgICoKICAgICAqIEBwYXJhbSAgICBzdHJpbmcgICAgJHRleHQgICAgICAgIFZhbHVlCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICRmcm9tVGV4dCAgICBGcm9tIFZhbHVlCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICR0b1RleHQgICAgICAgIFRvIFZhbHVlCiAgICAgKiBAcGFyYW0gICAgaW50ZWdlciAgICAkaW5zdGFuY2UgICAgSW5zdGFuY2UgTnVtYmVyCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZwogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFNVQlNUSVRVVEUoJHRleHQgPSAnJywgJGZyb21UZXh0ID0gJycsICR0b1RleHQgPSAnJywgJGluc3RhbmNlID0gMCkKICAgIHsKICAgICAgICAkdGV4dCAgICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkdGV4dCk7CiAgICAgICAgJGZyb21UZXh0ID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJGZyb21UZXh0KTsKICAgICAgICAkdG9UZXh0ICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkdG9UZXh0KTsKICAgICAgICAkaW5zdGFuY2UgPSBmbG9vcihQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkaW5zdGFuY2UpKTsKCiAgICAgICAgaWYgKCRpbnN0YW5jZSA9PSAwKSB7CiAgICAgICAgICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ21iX3N0cl9yZXBsYWNlJykpIHsKICAgICAgICAgICAgICAgIHJldHVybiBtYl9zdHJfcmVwbGFjZSgkZnJvbVRleHQsICR0b1RleHQsICR0ZXh0KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBzdHJfcmVwbGFjZSgkZnJvbVRleHQsICR0b1RleHQsICR0ZXh0KTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRwb3MgPSAtMTsKICAgICAgICAgICAgd2hpbGUgKCRpbnN0YW5jZSA+IDApIHsKICAgICAgICAgICAgICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ21iX3N0cnBvcycpKSB7CiAgICAgICAgICAgICAgICAgICAgJHBvcyA9IG1iX3N0cnBvcygkdGV4dCwgJGZyb21UZXh0LCAkcG9zKzEsICdVVEYtOCcpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkcG9zID0gc3RycG9zKCR0ZXh0LCAkZnJvbVRleHQsICRwb3MrMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJHBvcyA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC0tJGluc3RhbmNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkcG9zICE9PSBmYWxzZSkgewogICAgICAgICAgICAgICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnbWJfc3RybGVuJykpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZjo6UkVQTEFDRSgkdGV4dCwgKyskcG9zLCBtYl9zdHJsZW4oJGZyb21UZXh0LCAnVVRGLTgnKSwgJHRvVGV4dCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmOjpSRVBMQUNFKCR0ZXh0LCArKyRwb3MsIHN0cmxlbigkZnJvbVRleHQpLCAkdG9UZXh0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICR0ZXh0OwogICAgfQoKCiAgICAvKioKICAgICAqIFJFVFVSTlNUUklORwogICAgICoKICAgICAqIEBwYXJhbSAgICBtaXhlZCAgICAkdGVzdFZhbHVlICAgIFZhbHVlIHRvIGNoZWNrCiAgICAgKiBAcmV0dXJuICAgIGJvb2xlYW4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBSRVRVUk5TVFJJTkcoJHRlc3RWYWx1ZSA9ICcnKQogICAgewogICAgICAgICR0ZXN0VmFsdWUgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkdGVzdFZhbHVlKTsKCiAgICAgICAgaWYgKGlzX3N0cmluZygkdGVzdFZhbHVlKSkgewogICAgICAgICAgICByZXR1cm4gJHRlc3RWYWx1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgoKICAgIC8qKgogICAgICogVEVYVEZPUk1BVAogICAgICoKICAgICAqIEBwYXJhbSAgICBtaXhlZCAgICAkdmFsdWUgICAgVmFsdWUgdG8gY2hlY2sKICAgICAqIEBwYXJhbSAgICBzdHJpbmcgICAgJGZvcm1hdCAgICBGb3JtYXQgbWFzayB0byB1c2UKICAgICAqIEByZXR1cm4gICAgYm9vbGVhbgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFRFWFRGT1JNQVQoJHZhbHVlLCAkZm9ybWF0KQogICAgewogICAgICAgICR2YWx1ZSAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkdmFsdWUpOwogICAgICAgICRmb3JtYXQgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkZm9ybWF0KTsKCiAgICAgICAgaWYgKChpc19zdHJpbmcoJHZhbHVlKSkgJiYgKCFpc19udW1lcmljKCR2YWx1ZSkpICYmIFBIUEV4Y2VsX1NoYXJlZF9EYXRlOjppc0RhdGVUaW1lRm9ybWF0Q29kZSgkZm9ybWF0KSkgewogICAgICAgICAgICAkdmFsdWUgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9EYXRlVGltZTo6REFURVZBTFVFKCR2YWx1ZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKHN0cmluZykgUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0Ojp0b0Zvcm1hdHRlZFN0cmluZygkdmFsdWUsICRmb3JtYXQpOwogICAgfQoKICAgIC8qKgogICAgICogVkFMVUUKICAgICAqCiAgICAgKiBAcGFyYW0gICAgbWl4ZWQgICAgJHZhbHVlICAgIFZhbHVlIHRvIGNoZWNrCiAgICAgKiBAcmV0dXJuICAgIGJvb2xlYW4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBWQUxVRSgkdmFsdWUgPSAnJykKICAgIHsKICAgICAgICAkdmFsdWUgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkdmFsdWUpOwoKICAgICAgICBpZiAoIWlzX251bWVyaWMoJHZhbHVlKSkgewogICAgICAgICAgICAkbnVtYmVyVmFsdWUgPSBzdHJfcmVwbGFjZSgKICAgICAgICAgICAgICAgIFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OmdldFRob3VzYW5kc1NlcGFyYXRvcigpLAogICAgICAgICAgICAgICAgJycsCiAgICAgICAgICAgICAgICB0cmltKCR2YWx1ZSwgIiBcdFxuXHJcMFx4MEIiIC4gUEhQRXhjZWxfU2hhcmVkX1N0cmluZzo6Z2V0Q3VycmVuY3lDb2RlKCkpCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmIChpc19udW1lcmljKCRudW1iZXJWYWx1ZSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiAoZmxvYXQpICRudW1iZXJWYWx1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGRhdGVTZXR0aW5nID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpnZXRSZXR1cm5EYXRlVHlwZSgpOwogICAgICAgICAgICBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OnNldFJldHVybkRhdGVUeXBlKFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6UkVUVVJOREFURV9FWENFTCk7CgogICAgICAgICAgICBpZiAoc3RycG9zKCR2YWx1ZSwgJzonKSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICR0aW1lVmFsdWUgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9EYXRlVGltZTo6VElNRVZBTFVFKCR2YWx1ZSk7CiAgICAgICAgICAgICAgICBpZiAoJHRpbWVWYWx1ZSAhPT0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpWQUxVRSgpKSB7CiAgICAgICAgICAgICAgICAgICAgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpzZXRSZXR1cm5EYXRlVHlwZSgkZGF0ZVNldHRpbmcpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAkdGltZVZhbHVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRkYXRlVmFsdWUgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9EYXRlVGltZTo6REFURVZBTFVFKCR2YWx1ZSk7CiAgICAgICAgICAgIGlmICgkZGF0ZVZhbHVlICE9PSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OlZBTFVFKCkpIHsKICAgICAgICAgICAgICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6c2V0UmV0dXJuRGF0ZVR5cGUoJGRhdGVTZXR0aW5nKTsKICAgICAgICAgICAgICAgIHJldHVybiAkZGF0ZVZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6c2V0UmV0dXJuRGF0ZVR5cGUoJGRhdGVTZXR0aW5nKTsKCiAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OlZBTFVFKCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAoZmxvYXQpICR2YWx1ZTsKICAgIH0KfQo=",
    "size": "22259"
}