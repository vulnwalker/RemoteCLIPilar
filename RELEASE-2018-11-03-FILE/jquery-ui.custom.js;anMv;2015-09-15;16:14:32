{
    "namaFile": "js\/jquery-ui.custom.js",
    "lastUpdate": "2015-09-15+16:14:32.62",
    "contentFile": "LyohIGpRdWVyeSBVSSAtIHYxLjEwLjMgLSAyMDEzLTEwLTIwCiogaHR0cDovL2pxdWVyeXVpLmNvbQoqIEluY2x1ZGVzOiBqcXVlcnkudWkuY29yZS5qcywganF1ZXJ5LnVpLndpZGdldC5qcywganF1ZXJ5LnVpLm1vdXNlLmpzLCBqcXVlcnkudWkucG9zaXRpb24uanMsIGpxdWVyeS51aS5kcmFnZ2FibGUuanMsIGpxdWVyeS51aS5kcm9wcGFibGUuanMsIGpxdWVyeS51aS5yZXNpemFibGUuanMsIGpxdWVyeS51aS5zZWxlY3RhYmxlLmpzLCBqcXVlcnkudWkuc29ydGFibGUuanMsIGpxdWVyeS51aS5hY2NvcmRpb24uanMsIGpxdWVyeS51aS5hdXRvY29tcGxldGUuanMsIGpxdWVyeS51aS5idXR0b24uanMsIGpxdWVyeS51aS5kYXRlcGlja2VyLmpzLCBqcXVlcnkudWkuZGlhbG9nLmpzLCBqcXVlcnkudWkubWVudS5qcywganF1ZXJ5LnVpLnByb2dyZXNzYmFyLmpzLCBqcXVlcnkudWkuc2xpZGVyLmpzLCBqcXVlcnkudWkuc3Bpbm5lci5qcywganF1ZXJ5LnVpLnRhYnMuanMsIGpxdWVyeS51aS50b29sdGlwLmpzLCBqcXVlcnkudWkuZWZmZWN0LmpzLCBqcXVlcnkudWkuZWZmZWN0LWJsaW5kLmpzLCBqcXVlcnkudWkuZWZmZWN0LWJvdW5jZS5qcywganF1ZXJ5LnVpLmVmZmVjdC1jbGlwLmpzLCBqcXVlcnkudWkuZWZmZWN0LWRyb3AuanMsIGpxdWVyeS51aS5lZmZlY3QtZXhwbG9kZS5qcywganF1ZXJ5LnVpLmVmZmVjdC1mYWRlLmpzLCBqcXVlcnkudWkuZWZmZWN0LWZvbGQuanMsIGpxdWVyeS51aS5lZmZlY3QtaGlnaGxpZ2h0LmpzLCBqcXVlcnkudWkuZWZmZWN0LXB1bHNhdGUuanMsIGpxdWVyeS51aS5lZmZlY3Qtc2NhbGUuanMsIGpxdWVyeS51aS5lZmZlY3Qtc2hha2UuanMsIGpxdWVyeS51aS5lZmZlY3Qtc2xpZGUuanMsIGpxdWVyeS51aS5lZmZlY3QtdHJhbnNmZXIuanMKKiBDb3B5cmlnaHQgMjAxMyBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzOyBMaWNlbnNlZCBNSVQgKi8KCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIHV1aWQgPSAwLAoJcnVuaXF1ZUlkID0gL151aS1pZC1cZCskLzsKCi8vICQudWkgbWlnaHQgZXhpc3QgZnJvbSBjb21wb25lbnRzIHdpdGggbm8gZGVwZW5kZW5jaWVzLCBlLmcuLCAkLnVpLnBvc2l0aW9uCiQudWkgPSAkLnVpIHx8IHt9OwoKJC5leHRlbmQoICQudWksIHsKCXZlcnNpb246ICIxLjEwLjMiLAoKCWtleUNvZGU6IHsKCQlCQUNLU1BBQ0U6IDgsCgkJQ09NTUE6IDE4OCwKCQlERUxFVEU6IDQ2LAoJCURPV046IDQwLAoJCUVORDogMzUsCgkJRU5URVI6IDEzLAoJCUVTQ0FQRTogMjcsCgkJSE9NRTogMzYsCgkJTEVGVDogMzcsCgkJTlVNUEFEX0FERDogMTA3LAoJCU5VTVBBRF9ERUNJTUFMOiAxMTAsCgkJTlVNUEFEX0RJVklERTogMTExLAoJCU5VTVBBRF9FTlRFUjogMTA4LAoJCU5VTVBBRF9NVUxUSVBMWTogMTA2LAoJCU5VTVBBRF9TVUJUUkFDVDogMTA5LAoJCVBBR0VfRE9XTjogMzQsCgkJUEFHRV9VUDogMzMsCgkJUEVSSU9EOiAxOTAsCgkJUklHSFQ6IDM5LAoJCVNQQUNFOiAzMiwKCQlUQUI6IDksCgkJVVA6IDM4Cgl9Cn0pOwoKLy8gcGx1Z2lucwokLmZuLmV4dGVuZCh7Cglmb2N1czogKGZ1bmN0aW9uKCBvcmlnICkgewoJCXJldHVybiBmdW5jdGlvbiggZGVsYXksIGZuICkgewoJCQlyZXR1cm4gdHlwZW9mIGRlbGF5ID09PSAibnVtYmVyIiA\/CgkJCQl0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQkJdmFyIGVsZW0gPSB0aGlzOwoJCQkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCQkJCSQoIGVsZW0gKS5mb2N1cygpOwoJCQkJCQlpZiAoIGZuICkgewoJCQkJCQkJZm4uY2FsbCggZWxlbSApOwoJCQkJCQl9CgkJCQkJfSwgZGVsYXkgKTsKCQkJCX0pIDoKCQkJCW9yaWcuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCX07Cgl9KSggJC5mbi5mb2N1cyApLAoKCXNjcm9sbFBhcmVudDogZnVuY3Rpb24oKSB7CgkJdmFyIHNjcm9sbFBhcmVudDsKCQlpZiAoKCQudWkuaWUgJiYgKC8oc3RhdGljfHJlbGF0aXZlKS8pLnRlc3QodGhpcy5jc3MoInBvc2l0aW9uIikpKSB8fCAoL2Fic29sdXRlLykudGVzdCh0aGlzLmNzcygicG9zaXRpb24iKSkpIHsKCQkJc2Nyb2xsUGFyZW50ID0gdGhpcy5wYXJlbnRzKCkuZmlsdGVyKGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICgvKHJlbGF0aXZlfGFic29sdXRlfGZpeGVkKS8pLnRlc3QoJC5jc3ModGhpcywicG9zaXRpb24iKSkgJiYgKC8oYXV0b3xzY3JvbGwpLykudGVzdCgkLmNzcyh0aGlzLCJvdmVyZmxvdyIpKyQuY3NzKHRoaXMsIm92ZXJmbG93LXkiKSskLmNzcyh0aGlzLCJvdmVyZmxvdy14IikpOwoJCQl9KS5lcSgwKTsKCQl9IGVsc2UgewoJCQlzY3JvbGxQYXJlbnQgPSB0aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gKC8oYXV0b3xzY3JvbGwpLykudGVzdCgkLmNzcyh0aGlzLCJvdmVyZmxvdyIpKyQuY3NzKHRoaXMsIm92ZXJmbG93LXkiKSskLmNzcyh0aGlzLCJvdmVyZmxvdy14IikpOwoJCQl9KS5lcSgwKTsKCQl9CgoJCXJldHVybiAoL2ZpeGVkLykudGVzdCh0aGlzLmNzcygicG9zaXRpb24iKSkgfHwgIXNjcm9sbFBhcmVudC5sZW5ndGggPyAkKGRvY3VtZW50KSA6IHNjcm9sbFBhcmVudDsKCX0sCgoJekluZGV4OiBmdW5jdGlvbiggekluZGV4ICkgewoJCWlmICggekluZGV4ICE9PSB1bmRlZmluZWQgKSB7CgkJCXJldHVybiB0aGlzLmNzcyggInpJbmRleCIsIHpJbmRleCApOwoJCX0KCgkJaWYgKCB0aGlzLmxlbmd0aCApIHsKCQkJdmFyIGVsZW0gPSAkKCB0aGlzWyAwIF0gKSwgcG9zaXRpb24sIHZhbHVlOwoJCQl3aGlsZSAoIGVsZW0ubGVuZ3RoICYmIGVsZW1bIDAgXSAhPT0gZG9jdW1lbnQgKSB7CgkJCQkvLyBJZ25vcmUgei1pbmRleCBpZiBwb3NpdGlvbiBpcyBzZXQgdG8gYSB2YWx1ZSB3aGVyZSB6LWluZGV4IGlzIGlnbm9yZWQgYnkgdGhlIGJyb3dzZXIKCQkJCS8vIFRoaXMgbWFrZXMgYmVoYXZpb3Igb2YgdGhpcyBmdW5jdGlvbiBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycwoJCQkJLy8gV2ViS2l0IGFsd2F5cyByZXR1cm5zIGF1dG8gaWYgdGhlIGVsZW1lbnQgaXMgcG9zaXRpb25lZAoJCQkJcG9zaXRpb24gPSBlbGVtLmNzcyggInBvc2l0aW9uIiApOwoJCQkJaWYgKCBwb3NpdGlvbiA9PT0gImFic29sdXRlIiB8fCBwb3NpdGlvbiA9PT0gInJlbGF0aXZlIiB8fCBwb3NpdGlvbiA9PT0gImZpeGVkIiApIHsKCQkJCQkvLyBJRSByZXR1cm5zIDAgd2hlbiB6SW5kZXggaXMgbm90IHNwZWNpZmllZAoJCQkJCS8vIG90aGVyIGJyb3dzZXJzIHJldHVybiBhIHN0cmluZwoJCQkJCS8vIHdlIGlnbm9yZSB0aGUgY2FzZSBvZiBuZXN0ZWQgZWxlbWVudHMgd2l0aCBhbiBleHBsaWNpdCB2YWx1ZSBvZiAwCgkJCQkJLy8gPGRpdiBzdHlsZT0iei1pbmRleDogLTEwOyI+PGRpdiBzdHlsZT0iei1pbmRleDogMDsiPjwvZGl2PjwvZGl2PgoJCQkJCXZhbHVlID0gcGFyc2VJbnQoIGVsZW0uY3NzKCAiekluZGV4IiApLCAxMCApOwoJCQkJCWlmICggIWlzTmFOKCB2YWx1ZSApICYmIHZhbHVlICE9PSAwICkgewoJCQkJCQlyZXR1cm4gdmFsdWU7CgkJCQkJfQoJCQkJfQoJCQkJZWxlbSA9IGVsZW0ucGFyZW50KCk7CgkJCX0KCQl9CgoJCXJldHVybiAwOwoJfSwKCgl1bmlxdWVJZDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJaWYgKCAhdGhpcy5pZCApIHsKCQkJCXRoaXMuaWQgPSAidWktaWQtIiArICgrK3V1aWQpOwoJCQl9CgkJfSk7Cgl9LAoKCXJlbW92ZVVuaXF1ZUlkOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQlpZiAoIHJ1bmlxdWVJZC50ZXN0KCB0aGlzLmlkICkgKSB7CgkJCQkkKCB0aGlzICkucmVtb3ZlQXR0ciggImlkIiApOwoJCQl9CgkJfSk7Cgl9Cn0pOwoKLy8gc2VsZWN0b3JzCmZ1bmN0aW9uIGZvY3VzYWJsZSggZWxlbWVudCwgaXNUYWJJbmRleE5vdE5hTiApIHsKCXZhciBtYXAsIG1hcE5hbWUsIGltZywKCQlub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCWlmICggImFyZWEiID09PSBub2RlTmFtZSApIHsKCQltYXAgPSBlbGVtZW50LnBhcmVudE5vZGU7CgkJbWFwTmFtZSA9IG1hcC5uYW1lOwoJCWlmICggIWVsZW1lbnQuaHJlZiB8fCAhbWFwTmFtZSB8fCBtYXAubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gIm1hcCIgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJaW1nID0gJCggImltZ1t1c2VtYXA9IyIgKyBtYXBOYW1lICsgIl0iIClbMF07CgkJcmV0dXJuICEhaW1nICYmIHZpc2libGUoIGltZyApOwoJfQoJcmV0dXJuICggL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KCBub2RlTmFtZSApID8KCQkhZWxlbWVudC5kaXNhYmxlZCA6CgkJImEiID09PSBub2RlTmFtZSA\\/CgkJCQkJCXJldHVyblZhbHVlLnB1c2hTdGFjayggbWV0aG9kVmFsdWUuZ2V0KCkgKSA6CgkJCQkJCW1ldGhvZFZhbHVlOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfSk7CgkJfSBlbHNlIHsKCQkJdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyIGluc3RhbmNlID0gJC5kYXRhKCB0aGlzLCBmdWxsTmFtZSApOwoJCQkJaWYgKCBpbnN0YW5jZSApIHsKCQkJCQlpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgfHwge30gKS5faW5pdCgpOwoJCQkJfSBlbHNlIHsKCQkJCQkkLmRhdGEoIHRoaXMsIGZ1bGxOYW1lLCBuZXcgb2JqZWN0KCBvcHRpb25zLCB0aGlzICkgKTsKCQkJCX0KCQkJfSk7CgkJfQoKCQlyZXR1cm4gcmV0dXJuVmFsdWU7Cgl9Owp9OwoKJC5XaWRnZXQgPSBmdW5jdGlvbiggLyogb3B0aW9ucywgZWxlbWVudCAqLyApIHt9OwokLldpZGdldC5fY2hpbGRDb25zdHJ1Y3RvcnMgPSBbXTsKCiQuV2lkZ2V0LnByb3RvdHlwZSA9IHsKCXdpZGdldE5hbWU6ICJ3aWRnZXQiLAoJd2lkZ2V0RXZlbnRQcmVmaXg6ICIiLAoJZGVmYXVsdEVsZW1lbnQ6ICI8ZGl2PiIsCglvcHRpb25zOiB7CgkJZGlzYWJsZWQ6IGZhbHNlLAoKCQkvLyBjYWxsYmFja3MKCQljcmVhdGU6IG51bGwKCX0sCglfY3JlYXRlV2lkZ2V0OiBmdW5jdGlvbiggb3B0aW9ucywgZWxlbWVudCApIHsKCQllbGVtZW50ID0gJCggZWxlbWVudCB8fCB0aGlzLmRlZmF1bHRFbGVtZW50IHx8IHRoaXMgKVsgMCBdOwoJCXRoaXMuZWxlbWVudCA9ICQoIGVsZW1lbnQgKTsKCQl0aGlzLnV1aWQgPSB1dWlkKys7CgkJdGhpcy5ldmVudE5hbWVzcGFjZSA9ICIuIiArIHRoaXMud2lkZ2V0TmFtZSArIHRoaXMudXVpZDsKCQl0aGlzLm9wdGlvbnMgPSAkLndpZGdldC5leHRlbmQoIHt9LAoJCQl0aGlzLm9wdGlvbnMsCgkJCXRoaXMuX2dldENyZWF0ZU9wdGlvbnMoKSwKCQkJb3B0aW9ucyApOwoKCQl0aGlzLmJpbmRpbmdzID0gJCgpOwoJCXRoaXMuaG92ZXJhYmxlID0gJCgpOwoJCXRoaXMuZm9jdXNhYmxlID0gJCgpOwoKCQlpZiAoIGVsZW1lbnQgIT09IHRoaXMgKSB7CgkJCSQuZGF0YSggZWxlbWVudCwgdGhpcy53aWRnZXRGdWxsTmFtZSwgdGhpcyApOwoJCQl0aGlzLl9vbiggdHJ1ZSwgdGhpcy5lbGVtZW50LCB7CgkJCQlyZW1vdmU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQlpZiAoIGV2ZW50LnRhcmdldCA9PT0gZWxlbWVudCApIHsKCQkJCQkJdGhpcy5kZXN0cm95KCk7CgkJCQkJfQoJCQkJfQoJCQl9KTsKCQkJdGhpcy5kb2N1bWVudCA9ICQoIGVsZW1lbnQuc3R5bGUgPwoJCQkJLy8gZWxlbWVudCB3aXRoaW4gdGhlIGRvY3VtZW50CgkJCQllbGVtZW50Lm93bmVyRG9jdW1lbnQgOgoJCQkJLy8gZWxlbWVudCBpcyB3aW5kb3cgb3IgZG9jdW1lbnQKCQkJCWVsZW1lbnQuZG9jdW1lbnQgfHwgZWxlbWVudCApOwoJCQl0aGlzLndpbmRvdyA9ICQoIHRoaXMuZG9jdW1lbnRbMF0uZGVmYXVsdFZpZXcgfHwgdGhpcy5kb2N1bWVudFswXS5wYXJlbnRXaW5kb3cgKTsKCQl9CgoJCXRoaXMuX2NyZWF0ZSgpOwoJCXRoaXMuX3RyaWdnZXIoICJjcmVhdGUiLCBudWxsLCB0aGlzLl9nZXRDcmVhdGVFdmVudERhdGEoKSApOwoJCXRoaXMuX2luaXQoKTsKCX0sCglfZ2V0Q3JlYXRlT3B0aW9uczogJC5ub29wLAoJX2dldENyZWF0ZUV2ZW50RGF0YTogJC5ub29wLAoJX2NyZWF0ZTogJC5ub29wLAoJX2luaXQ6ICQubm9vcCwKCglkZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLl9kZXN0cm95KCk7CgkJLy8gd2UgY2FuIHByb2JhYmx5IHJlbW92ZSB0aGUgdW5iaW5kIGNhbGxzIGluIDIuMAoJCS8vIGFsbCBldmVudCBiaW5kaW5ncyBzaG91bGQgZ28gdGhyb3VnaCB0aGlzLl9vbigpCgkJdGhpcy5lbGVtZW50CgkJCS51bmJpbmQoIHRoaXMuZXZlbnROYW1lc3BhY2UgKQoJCQkvLyAxLjkgQkMgZm9yICM3ODEwCgkJCS8vIFRPRE8gcmVtb3ZlIGR1YWwgc3RvcmFnZQoJCQkucmVtb3ZlRGF0YSggdGhpcy53aWRnZXROYW1lICkKCQkJLnJlbW92ZURhdGEoIHRoaXMud2lkZ2V0RnVsbE5hbWUgKQoJCQkvLyBzdXBwb3J0OiBqcXVlcnkgPDEuNi4zCgkJCS8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0Lzk0MTMKCQkJLnJlbW92ZURhdGEoICQuY2FtZWxDYXNlKCB0aGlzLndpZGdldEZ1bGxOYW1lICkgKTsKCQl0aGlzLndpZGdldCgpCgkJCS51bmJpbmQoIHRoaXMuZXZlbnROYW1lc3BhY2UgKQoJCQkucmVtb3ZlQXR0ciggImFyaWEtZGlzYWJsZWQiICkKCQkJLnJlbW92ZUNsYXNzKAoJCQkJdGhpcy53aWRnZXRGdWxsTmFtZSArICItZGlzYWJsZWQgIiArCgkJCQkidWktc3RhdGUtZGlzYWJsZWQiICk7CgoJCS8vIGNsZWFuIHVwIGV2ZW50cyBhbmQgc3RhdGVzCgkJdGhpcy5iaW5kaW5ncy51bmJpbmQoIHRoaXMuZXZlbnROYW1lc3BhY2UgKTsKCQl0aGlzLmhvdmVyYWJsZS5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWhvdmVyIiApOwoJCXRoaXMuZm9jdXNhYmxlLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtZm9jdXMiICk7Cgl9LAoJX2Rlc3Ryb3k6ICQubm9vcCwKCgl3aWRnZXQ6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmVsZW1lbnQ7Cgl9LAoKCW9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJdmFyIG9wdGlvbnMgPSBrZXksCgkJCXBhcnRzLAoJCQljdXJPcHRpb24sCgkJCWk7CgoJCWlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMCApIHsKCQkJLy8gZG9uJ3QgcmV0dXJuIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBoYXNoCgkJCXJldHVybiAkLndpZGdldC5leHRlbmQoIHt9LCB0aGlzLm9wdGlvbnMgKTsKCQl9CgoJCWlmICggdHlwZW9mIGtleSA9PT0gInN0cmluZyIgKSB7CgkJCS8vIGhhbmRsZSBuZXN0ZWQga2V5cywgZS5nLiwgImZvby5iYXIiID0+IHsgZm9vOiB7IGJhcjogX19fIH0gfQoJCQlvcHRpb25zID0ge307CgkJCXBhcnRzID0ga2V5LnNwbGl0KCAiLiIgKTsKCQkJa2V5ID0gcGFydHMuc2hpZnQoKTsKCQkJaWYgKCBwYXJ0cy5sZW5ndGggKSB7CgkJCQljdXJPcHRpb24gPSBvcHRpb25zWyBrZXkgXSA9ICQud2lkZ2V0LmV4dGVuZCgge30sIHRoaXMub3B0aW9uc1sga2V5IF0gKTsKCQkJCWZvciAoIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoIC0gMTsgaSsrICkgewoJCQkJCWN1ck9wdGlvblsgcGFydHNbIGkgXSBdID0gY3VyT3B0aW9uWyBwYXJ0c1sgaSBdIF0gfHwge307CgkJCQkJY3VyT3B0aW9uID0gY3VyT3B0aW9uWyBwYXJ0c1sgaSBdIF07CgkJCQl9CgkJCQlrZXkgPSBwYXJ0cy5wb3AoKTsKCQkJCWlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCQkJCQlyZXR1cm4gY3VyT3B0aW9uWyBrZXkgXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGN1ck9wdGlvblsga2V5IF07CgkJCQl9CgkJCQljdXJPcHRpb25bIGtleSBdID0gdmFsdWU7CgkJCX0gZWxzZSB7CgkJCQlpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7CgkJCQkJcmV0dXJuIHRoaXMub3B0aW9uc1sga2V5IF0gPT09IHVuZGVmaW5lZCA\/IG51bGwgOiB0aGlzLm9wdGlvbnNbIGtleSBdOwoJCQkJfQoJCQkJb3B0aW9uc1sga2V5IF0gPSB2YWx1ZTsKCQkJfQoJCX0KCgkJdGhpcy5fc2V0T3B0aW9ucyggb3B0aW9ucyApOwoKCQlyZXR1cm4gdGhpczsKCX0sCglfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJdmFyIGtleTsKCgkJZm9yICgga2V5IGluIG9wdGlvbnMgKSB7CgkJCXRoaXMuX3NldE9wdGlvbigga2V5LCBvcHRpb25zWyBrZXkgXSApOwoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9LAoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJdGhpcy5vcHRpb25zWyBrZXkgXSA9IHZhbHVlOwoKCQlpZiAoIGtleSA9PT0gImRpc2FibGVkIiApIHsKCQkJdGhpcy53aWRnZXQoKQoJCQkJLnRvZ2dsZUNsYXNzKCB0aGlzLndpZGdldEZ1bGxOYW1lICsgIi1kaXNhYmxlZCB1aS1zdGF0ZS1kaXNhYmxlZCIsICEhdmFsdWUgKQoJCQkJLmF0dHIoICJhcmlhLWRpc2FibGVkIiwgdmFsdWUgKTsKCQkJdGhpcy5ob3ZlcmFibGUucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQkJdGhpcy5mb2N1c2FibGUucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCQl9CgoJCXJldHVybiB0aGlzOwoJfSwKCgllbmFibGU6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIGZhbHNlICk7Cgl9LAoJZGlzYWJsZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuX3NldE9wdGlvbiggImRpc2FibGVkIiwgdHJ1ZSApOwoJfSwKCglfb246IGZ1bmN0aW9uKCBzdXBwcmVzc0Rpc2FibGVkQ2hlY2ssIGVsZW1lbnQsIGhhbmRsZXJzICkgewoJCXZhciBkZWxlZ2F0ZUVsZW1lbnQsCgkJCWluc3RhbmNlID0gdGhpczsKCgkJLy8gbm8gc3VwcHJlc3NEaXNhYmxlZENoZWNrIGZsYWcsIHNodWZmbGUgYXJndW1lbnRzCgkJaWYgKCB0eXBlb2Ygc3VwcHJlc3NEaXNhYmxlZENoZWNrICE9PSAiYm9vbGVhbiIgKSB7CgkJCWhhbmRsZXJzID0gZWxlbWVudDsKCQkJZWxlbWVudCA9IHN1cHByZXNzRGlzYWJsZWRDaGVjazsKCQkJc3VwcHJlc3NEaXNhYmxlZENoZWNrID0gZmFsc2U7CgkJfQoKCQkvLyBubyBlbGVtZW50IGFyZ3VtZW50LCBzaHVmZmxlIGFuZCB1c2UgdGhpcy5lbGVtZW50CgkJaWYgKCAhaGFuZGxlcnMgKSB7CgkJCWhhbmRsZXJzID0gZWxlbWVudDsKCQkJZWxlbWVudCA9IHRoaXMuZWxlbWVudDsKCQkJZGVsZWdhdGVFbGVtZW50ID0gdGhpcy53aWRnZXQoKTsKCQl9IGVsc2UgewoJCQkvLyBhY2NlcHQgc2VsZWN0b3JzLCBET00gZWxlbWVudHMKCQkJZWxlbWVudCA9IGRlbGVnYXRlRWxlbWVudCA9ICQoIGVsZW1lbnQgKTsKCQkJdGhpcy5iaW5kaW5ncyA9IHRoaXMuYmluZGluZ3MuYWRkKCBlbGVtZW50ICk7CgkJfQoKCQkkLmVhY2goIGhhbmRsZXJzLCBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXIgKSB7CgkJCWZ1bmN0aW9uIGhhbmRsZXJQcm94eSgpIHsKCQkJCS8vIGFsbG93IHdpZGdldHMgdG8gY3VzdG9taXplIHRoZSBkaXNhYmxlZCBoYW5kbGluZwoJCQkJLy8gLSBkaXNhYmxlZCBhcyBhbiBhcnJheSBpbnN0ZWFkIG9mIGJvb2xlYW4KCQkJCS8vIC0gZGlzYWJsZWQgY2xhc3MgYXMgbWV0aG9kIGZvciBkaXNhYmxpbmcgaW5kaXZpZHVhbCBwYXJ0cwoJCQkJaWYgKCAhc3VwcHJlc3NEaXNhYmxlZENoZWNrICYmCgkJCQkJCSggaW5zdGFuY2Uub3B0aW9ucy5kaXNhYmxlZCA9PT0gdHJ1ZSB8fAoJCQkJCQkJJCggdGhpcyApLmhhc0NsYXNzKCAidWktc3RhdGUtZGlzYWJsZWQiICkgKSApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgkJCQlyZXR1cm4gKCB0eXBlb2YgaGFuZGxlciA9PT0gInN0cmluZyIgPyBpbnN0YW5jZVsgaGFuZGxlciBdIDogaGFuZGxlciApCgkJCQkJLmFwcGx5KCBpbnN0YW5jZSwgYXJndW1lbnRzICk7CgkJCX0KCgkJCS8vIGNvcHkgdGhlIGd1aWQgc28gZGlyZWN0IHVuYmluZGluZyB3b3JrcwoJCQlpZiAoIHR5cGVvZiBoYW5kbGVyICE9PSAic3RyaW5nIiApIHsKCQkJCWhhbmRsZXJQcm94eS5ndWlkID0gaGFuZGxlci5ndWlkID0KCQkJCQloYW5kbGVyLmd1aWQgfHwgaGFuZGxlclByb3h5Lmd1aWQgfHwgJC5ndWlkKys7CgkJCX0KCgkJCXZhciBtYXRjaCA9IGV2ZW50Lm1hdGNoKCAvXihcdyspXHMqKC4qKSQvICksCgkJCQlldmVudE5hbWUgPSBtYXRjaFsxXSArIGluc3RhbmNlLmV2ZW50TmFtZXNwYWNlLAoJCQkJc2VsZWN0b3IgPSBtYXRjaFsyXTsKCQkJaWYgKCBzZWxlY3RvciApIHsKCQkJCWRlbGVnYXRlRWxlbWVudC5kZWxlZ2F0ZSggc2VsZWN0b3IsIGV2ZW50TmFtZSwgaGFuZGxlclByb3h5ICk7CgkJCX0gZWxzZSB7CgkJCQllbGVtZW50LmJpbmQoIGV2ZW50TmFtZSwgaGFuZGxlclByb3h5ICk7CgkJCX0KCQl9KTsKCX0sCgoJX29mZjogZnVuY3Rpb24oIGVsZW1lbnQsIGV2ZW50TmFtZSApIHsKCQlldmVudE5hbWUgPSAoZXZlbnROYW1lIHx8ICIiKS5zcGxpdCggIiAiICkuam9pbiggdGhpcy5ldmVudE5hbWVzcGFjZSArICIgIiApICsgdGhpcy5ldmVudE5hbWVzcGFjZTsKCQllbGVtZW50LnVuYmluZCggZXZlbnROYW1lICkudW5kZWxlZ2F0ZSggZXZlbnROYW1lICk7Cgl9LAoKCV9kZWxheTogZnVuY3Rpb24oIGhhbmRsZXIsIGRlbGF5ICkgewoJCWZ1bmN0aW9uIGhhbmRsZXJQcm94eSgpIHsKCQkJcmV0dXJuICggdHlwZW9mIGhhbmRsZXIgPT09ICJzdHJpbmciID8gaW5zdGFuY2VbIGhhbmRsZXIgXSA6IGhhbmRsZXIgKQoJCQkJLmFwcGx5KCBpbnN0YW5jZSwgYXJndW1lbnRzICk7CgkJfQoJCXZhciBpbnN0YW5jZSA9IHRoaXM7CgkJcmV0dXJuIHNldFRpbWVvdXQoIGhhbmRsZXJQcm94eSwgZGVsYXkgfHwgMCApOwoJfSwKCglfaG92ZXJhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl0aGlzLmhvdmVyYWJsZSA9IHRoaXMuaG92ZXJhYmxlLmFkZCggZWxlbWVudCApOwoJCXRoaXMuX29uKCBlbGVtZW50LCB7CgkJCW1vdXNlZW50ZXI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCSQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKS5hZGRDbGFzcyggInVpLXN0YXRlLWhvdmVyIiApOwoJCQl9LAoJCQltb3VzZWxlYXZlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQkJfQoJCX0pOwoJfSwKCglfZm9jdXNhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl0aGlzLmZvY3VzYWJsZSA9IHRoaXMuZm9jdXNhYmxlLmFkZCggZWxlbWVudCApOwoJCXRoaXMuX29uKCBlbGVtZW50LCB7CgkJCWZvY3VzaW46IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCSQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKS5hZGRDbGFzcyggInVpLXN0YXRlLWZvY3VzIiApOwoJCQl9LAoJCQlmb2N1c291dDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJJCggZXZlbnQuY3VycmVudFRhcmdldCApLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtZm9jdXMiICk7CgkJCX0KCQl9KTsKCX0sCgoJX3RyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgZGF0YSApIHsKCQl2YXIgcHJvcCwgb3JpZywKCQkJY2FsbGJhY2sgPSB0aGlzLm9wdGlvbnNbIHR5cGUgXTsKCgkJZGF0YSA9IGRhdGEgfHwge307CgkJZXZlbnQgPSAkLkV2ZW50KCBldmVudCApOwoJCWV2ZW50LnR5cGUgPSAoIHR5cGUgPT09IHRoaXMud2lkZ2V0RXZlbnRQcmVmaXggPwoJCQl0eXBlIDoKCQkJdGhpcy53aWRnZXRFdmVudFByZWZpeCArIHR5cGUgKS50b0xvd2VyQ2FzZSgpOwoJCS8vIHRoZSBvcmlnaW5hbCBldmVudCBtYXkgY29tZSBmcm9tIGFueSBlbGVtZW50CgkJLy8gc28gd2UgbmVlZCB0byByZXNldCB0aGUgdGFyZ2V0IG9uIHRoZSBuZXcgZXZlbnQKCQlldmVudC50YXJnZXQgPSB0aGlzLmVsZW1lbnRbIDAgXTsKCgkJLy8gY29weSBvcmlnaW5hbCBldmVudCBwcm9wZXJ0aWVzIG92ZXIgdG8gdGhlIG5ldyBldmVudAoJCW9yaWcgPSBldmVudC5vcmlnaW5hbEV2ZW50OwoJCWlmICggb3JpZyApIHsKCQkJZm9yICggcHJvcCBpbiBvcmlnICkgewoJCQkJaWYgKCAhKCBwcm9wIGluIGV2ZW50ICkgKSB7CgkJCQkJZXZlbnRbIHByb3AgXSA9IG9yaWdbIHByb3AgXTsKCQkJCX0KCQkJfQoJCX0KCgkJdGhpcy5lbGVtZW50LnRyaWdnZXIoIGV2ZW50LCBkYXRhICk7CgkJcmV0dXJuICEoICQuaXNGdW5jdGlvbiggY2FsbGJhY2sgKSAmJgoJCQljYWxsYmFjay5hcHBseSggdGhpcy5lbGVtZW50WzBdLCBbIGV2ZW50IF0uY29uY2F0KCBkYXRhICkgKSA9PT0gZmFsc2UgfHwKCQkJZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKTsKCX0KfTsKCiQuZWFjaCggeyBzaG93OiAiZmFkZUluIiwgaGlkZTogImZhZGVPdXQiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIGRlZmF1bHRFZmZlY3QgKSB7CgkkLldpZGdldC5wcm90b3R5cGVbICJfIiArIG1ldGhvZCBdID0gZnVuY3Rpb24oIGVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrICkgewoJCWlmICggdHlwZW9mIG9wdGlvbnMgPT09ICJzdHJpbmciICkgewoJCQlvcHRpb25zID0geyBlZmZlY3Q6IG9wdGlvbnMgfTsKCQl9CgkJdmFyIGhhc09wdGlvbnMsCgkJCWVmZmVjdE5hbWUgPSAhb3B0aW9ucyA\/CgkJCQltZXRob2QgOgoJCQkJb3B0aW9ucyA9PT0gdHJ1ZSB8fCB0eXBlb2Ygb3B0aW9ucyA9PT0gIm51bWJlciIgPwoJCQkJCWRlZmF1bHRFZmZlY3QgOgoJCQkJCW9wdGlvbnMuZWZmZWN0IHx8IGRlZmF1bHRFZmZlY3Q7CgkJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgkJaWYgKCB0eXBlb2Ygb3B0aW9ucyA9PT0gIm51bWJlciIgKSB7CgkJCW9wdGlvbnMgPSB7IGR1cmF0aW9uOiBvcHRpb25zIH07CgkJfQoJCWhhc09wdGlvbnMgPSAhJC5pc0VtcHR5T2JqZWN0KCBvcHRpb25zICk7CgkJb3B0aW9ucy5jb21wbGV0ZSA9IGNhbGxiYWNrOwoJCWlmICggb3B0aW9ucy5kZWxheSApIHsKCQkJZWxlbWVudC5kZWxheSggb3B0aW9ucy5kZWxheSApOwoJCX0KCQlpZiAoIGhhc09wdGlvbnMgJiYgJC5lZmZlY3RzICYmICQuZWZmZWN0cy5lZmZlY3RbIGVmZmVjdE5hbWUgXSApIHsKCQkJZWxlbWVudFsgbWV0aG9kIF0oIG9wdGlvbnMgKTsKCQl9IGVsc2UgaWYgKCBlZmZlY3ROYW1lICE9PSBtZXRob2QgJiYgZWxlbWVudFsgZWZmZWN0TmFtZSBdICkgewoJCQllbGVtZW50WyBlZmZlY3ROYW1lIF0oIG9wdGlvbnMuZHVyYXRpb24sIG9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayApOwoJCX0gZWxzZSB7CgkJCWVsZW1lbnQucXVldWUoZnVuY3Rpb24oIG5leHQgKSB7CgkJCQkkKCB0aGlzIClbIG1ldGhvZCBdKCk7CgkJCQlpZiAoIGNhbGxiYWNrICkgewoJCQkJCWNhbGxiYWNrLmNhbGwoIGVsZW1lbnRbIDAgXSApOwoJCQkJfQoJCQkJbmV4dCgpOwoJCQl9KTsKCQl9Cgl9Owp9KTsKCn0pKCBqUXVlcnkgKTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgp2YXIgbW91c2VIYW5kbGVkID0gZmFsc2U7CiQoIGRvY3VtZW50ICkubW91c2V1cCggZnVuY3Rpb24oKSB7Cgltb3VzZUhhbmRsZWQgPSBmYWxzZTsKfSk7CgokLndpZGdldCgidWkubW91c2UiLCB7Cgl2ZXJzaW9uOiAiMS4xMC4zIiwKCW9wdGlvbnM6IHsKCQljYW5jZWw6ICJpbnB1dCx0ZXh0YXJlYSxidXR0b24sc2VsZWN0LG9wdGlvbiIsCgkJZGlzdGFuY2U6IDEsCgkJZGVsYXk6IDAKCX0sCglfbW91c2VJbml0OiBmdW5jdGlvbigpIHsKCQl2YXIgdGhhdCA9IHRoaXM7CgoJCXRoaXMuZWxlbWVudAoJCQkuYmluZCgibW91c2Vkb3duLiIrdGhpcy53aWRnZXROYW1lLCBmdW5jdGlvbihldmVudCkgewoJCQkJcmV0dXJuIHRoYXQuX21vdXNlRG93bihldmVudCk7CgkJCX0pCgkJCS5iaW5kKCJjbGljay4iK3RoaXMud2lkZ2V0TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHsKCQkJCWlmICh0cnVlID09PSAkLmRhdGEoZXZlbnQudGFyZ2V0LCB0aGF0LndpZGdldE5hbWUgKyAiLnByZXZlbnRDbGlja0V2ZW50IikpIHsKCQkJCQkkLnJlbW92ZURhdGEoZXZlbnQudGFyZ2V0LCB0aGF0LndpZGdldE5hbWUgKyAiLnByZXZlbnRDbGlja0V2ZW50Iik7CgkJCQkJZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQl9KTsKCgkJdGhpcy5zdGFydGVkID0gZmFsc2U7Cgl9LAoKCS8vIFRPRE86IG1ha2Ugc3VyZSBkZXN0cm95aW5nIG9uZSBpbnN0YW5jZSBvZiBtb3VzZSBkb2Vzbid0IG1lc3Mgd2l0aAoJLy8gb3RoZXIgaW5zdGFuY2VzIG9mIG1vdXNlCglfbW91c2VEZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQudW5iaW5kKCIuIit0aGlzLndpZGdldE5hbWUpOwoJCWlmICggdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUgKSB7CgkJCSQoZG9jdW1lbnQpCgkJCQkudW5iaW5kKCJtb3VzZW1vdmUuIit0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKQoJCQkJLnVuYmluZCgibW91c2V1cC4iK3RoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VVcERlbGVnYXRlKTsKCQl9Cgl9LAoKCV9tb3VzZURvd246IGZ1bmN0aW9uKGV2ZW50KSB7CgkJLy8gZG9uJ3QgbGV0IG1vcmUgdGhhbiBvbmUgd2lkZ2V0IGhhbmRsZSBtb3VzZVN0YXJ0CgkJaWYoIG1vdXNlSGFuZGxlZCApIHsgcmV0dXJuOyB9CgoJCS8vIHdlIG1heSBoYXZlIG1pc3NlZCBtb3VzZXVwIChvdXQgb2Ygd2luZG93KQoJCSh0aGlzLl9tb3VzZVN0YXJ0ZWQgJiYgdGhpcy5fbW91c2VVcChldmVudCkpOwoKCQl0aGlzLl9tb3VzZURvd25FdmVudCA9IGV2ZW50OwoKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCWJ0bklzTGVmdCA9IChldmVudC53aGljaCA9PT0gMSksCgkJCS8vIGV2ZW50LnRhcmdldC5ub2RlTmFtZSB3b3JrcyBhcm91bmQgYSBidWcgaW4gSUUgOCB3aXRoCgkJCS8vIGRpc2FibGVkIGlucHV0cyAoIzc2MjApCgkJCWVsSXNDYW5jZWwgPSAodHlwZW9mIHRoaXMub3B0aW9ucy5jYW5jZWwgPT09ICJzdHJpbmciICYmIGV2ZW50LnRhcmdldC5ub2RlTmFtZSA\/ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KHRoaXMub3B0aW9ucy5jYW5jZWwpLmxlbmd0aCA6IGZhbHNlKTsKCQlpZiAoIWJ0bklzTGVmdCB8fCBlbElzQ2FuY2VsIHx8ICF0aGlzLl9tb3VzZUNhcHR1cmUoZXZlbnQpKSB7CgkJCXJldHVybiB0cnVlOwoJCX0KCgkJdGhpcy5tb3VzZURlbGF5TWV0ID0gIXRoaXMub3B0aW9ucy5kZWxheTsKCQlpZiAoIXRoaXMubW91c2VEZWxheU1ldCkgewoJCQl0aGlzLl9tb3VzZURlbGF5VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQkJdGhhdC5tb3VzZURlbGF5TWV0ID0gdHJ1ZTsKCQkJfSwgdGhpcy5vcHRpb25zLmRlbGF5KTsKCQl9CgoJCWlmICh0aGlzLl9tb3VzZURpc3RhbmNlTWV0KGV2ZW50KSAmJiB0aGlzLl9tb3VzZURlbGF5TWV0KGV2ZW50KSkgewoJCQl0aGlzLl9tb3VzZVN0YXJ0ZWQgPSAodGhpcy5fbW91c2VTdGFydChldmVudCkgIT09IGZhbHNlKTsKCQkJaWYgKCF0aGlzLl9tb3VzZVN0YXJ0ZWQpIHsKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCgkJLy8gQ2xpY2sgZXZlbnQgbWF5IG5ldmVyIGhhdmUgZmlyZWQgKEdlY2tvICYgT3BlcmEpCgkJaWYgKHRydWUgPT09ICQuZGF0YShldmVudC50YXJnZXQsIHRoaXMud2lkZ2V0TmFtZSArICIucHJldmVudENsaWNrRXZlbnQiKSkgewoJCQkkLnJlbW92ZURhdGEoZXZlbnQudGFyZ2V0LCB0aGlzLndpZGdldE5hbWUgKyAiLnByZXZlbnRDbGlja0V2ZW50Iik7CgkJfQoKCQkvLyB0aGVzZSBkZWxlZ2F0ZXMgYXJlIHJlcXVpcmVkIHRvIGtlZXAgY29udGV4dAoJCXRoaXMuX21vdXNlTW92ZURlbGVnYXRlID0gZnVuY3Rpb24oZXZlbnQpIHsKCQkJcmV0dXJuIHRoYXQuX21vdXNlTW92ZShldmVudCk7CgkJfTsKCQl0aGlzLl9tb3VzZVVwRGVsZWdhdGUgPSBmdW5jdGlvbihldmVudCkgewoJCQlyZXR1cm4gdGhhdC5fbW91c2VVcChldmVudCk7CgkJfTsKCQkkKGRvY3VtZW50KQoJCQkuYmluZCgibW91c2Vtb3ZlLiIrdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSkKCQkJLmJpbmQoIm1vdXNldXAuIit0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSk7CgoJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgoJCW1vdXNlSGFuZGxlZCA9IHRydWU7CgkJcmV0dXJuIHRydWU7Cgl9LAoKCV9tb3VzZU1vdmU6IGZ1bmN0aW9uKGV2ZW50KSB7CgkJLy8gSUUgbW91c2V1cCBjaGVjayAtIG1vdXNldXAgaGFwcGVuZWQgd2hlbiBtb3VzZSB3YXMgb3V0IG9mIHdpbmRvdwoJCWlmICgkLnVpLmllICYmICggIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPCA5ICkgJiYgIWV2ZW50LmJ1dHRvbikgewoJCQlyZXR1cm4gdGhpcy5fbW91c2VVcChldmVudCk7CgkJfQoKCQlpZiAodGhpcy5fbW91c2VTdGFydGVkKSB7CgkJCXRoaXMuX21vdXNlRHJhZyhldmVudCk7CgkJCXJldHVybiBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCX0KCgkJaWYgKHRoaXMuX21vdXNlRGlzdGFuY2VNZXQoZXZlbnQpICYmIHRoaXMuX21vdXNlRGVsYXlNZXQoZXZlbnQpKSB7CgkJCXRoaXMuX21vdXNlU3RhcnRlZCA9CgkJCQkodGhpcy5fbW91c2VTdGFydCh0aGlzLl9tb3VzZURvd25FdmVudCwgZXZlbnQpICE9PSBmYWxzZSk7CgkJCSh0aGlzLl9tb3VzZVN0YXJ0ZWQgPyB0aGlzLl9tb3VzZURyYWcoZXZlbnQpIDogdGhpcy5fbW91c2VVcChldmVudCkpOwoJCX0KCgkJcmV0dXJuICF0aGlzLl9tb3VzZVN0YXJ0ZWQ7Cgl9LAoKCV9tb3VzZVVwOiBmdW5jdGlvbihldmVudCkgewoJCSQoZG9jdW1lbnQpCgkJCS51bmJpbmQoIm1vdXNlbW92ZS4iK3RoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUpCgkJCS51bmJpbmQoIm1vdXNldXAuIit0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSk7CgoJCWlmICh0aGlzLl9tb3VzZVN0YXJ0ZWQpIHsKCQkJdGhpcy5fbW91c2VTdGFydGVkID0gZmFsc2U7CgoJCQlpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzLl9tb3VzZURvd25FdmVudC50YXJnZXQpIHsKCQkJCSQuZGF0YShldmVudC50YXJnZXQsIHRoaXMud2lkZ2V0TmFtZSArICIucHJldmVudENsaWNrRXZlbnQiLCB0cnVlKTsKCQkJfQoKCQkJdGhpcy5fbW91c2VTdG9wKGV2ZW50KTsKCQl9CgoJCXJldHVybiBmYWxzZTsKCX0sCgoJX21vdXNlRGlzdGFuY2VNZXQ6IGZ1bmN0aW9uKGV2ZW50KSB7CgkJcmV0dXJuIChNYXRoLm1heCgKCQkJCU1hdGguYWJzKHRoaXMuX21vdXNlRG93bkV2ZW50LnBhZ2VYIC0gZXZlbnQucGFnZVgpLAoJCQkJTWF0aC5hYnModGhpcy5fbW91c2VEb3duRXZlbnQucGFnZVkgLSBldmVudC5wYWdlWSkKCQkJKSA+PSB0aGlzLm9wdGlvbnMuZGlzdGFuY2UKCQkpOwoJfSwKCglfbW91c2VEZWxheU1ldDogZnVuY3Rpb24oLyogZXZlbnQgKi8pIHsKCQlyZXR1cm4gdGhpcy5tb3VzZURlbGF5TWV0OwoJfSwKCgkvLyBUaGVzZSBhcmUgcGxhY2Vob2xkZXIgbWV0aG9kcywgdG8gYmUgb3ZlcnJpZGVuIGJ5IGV4dGVuZGluZyBwbHVnaW4KCV9tb3VzZVN0YXJ0OiBmdW5jdGlvbigvKiBldmVudCAqLykge30sCglfbW91c2VEcmFnOiBmdW5jdGlvbigvKiBldmVudCAqLykge30sCglfbW91c2VTdG9wOiBmdW5jdGlvbigvKiBldmVudCAqLykge30sCglfbW91c2VDYXB0dXJlOiBmdW5jdGlvbigvKiBldmVudCAqLykgeyByZXR1cm4gdHJ1ZTsgfQp9KTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC51aSA9ICQudWkgfHwge307Cgp2YXIgY2FjaGVkU2Nyb2xsYmFyV2lkdGgsCgltYXggPSBNYXRoLm1heCwKCWFicyA9IE1hdGguYWJzLAoJcm91bmQgPSBNYXRoLnJvdW5kLAoJcmhvcml6b250YWwgPSAvbGVmdHxjZW50ZXJ8cmlnaHQvLAoJcnZlcnRpY2FsID0gL3RvcHxjZW50ZXJ8Ym90dG9tLywKCXJvZmZzZXQgPSAvW1wrXC1dXGQrKFwuW1xkXSspPyU\/LywKCXJwb3NpdGlvbiA9IC9eXHcrLywKCXJwZXJjZW50ID0gLyUkLywKCV9wb3NpdGlvbiA9ICQuZm4ucG9zaXRpb247CgpmdW5jdGlvbiBnZXRPZmZzZXRzKCBvZmZzZXRzLCB3aWR0aCwgaGVpZ2h0ICkgewoJcmV0dXJuIFsKCQlwYXJzZUZsb2F0KCBvZmZzZXRzWyAwIF0gKSAqICggcnBlcmNlbnQudGVzdCggb2Zmc2V0c1sgMCBdICkgPyB3aWR0aCAvIDEwMCA6IDEgKSwKCQlwYXJzZUZsb2F0KCBvZmZzZXRzWyAxIF0gKSAqICggcnBlcmNlbnQudGVzdCggb2Zmc2V0c1sgMSBdICkgPyBoZWlnaHQgLyAxMDAgOiAxICkKCV07Cn0KCmZ1bmN0aW9uIHBhcnNlQ3NzKCBlbGVtZW50LCBwcm9wZXJ0eSApIHsKCXJldHVybiBwYXJzZUludCggJC5jc3MoIGVsZW1lbnQsIHByb3BlcnR5ICksIDEwICkgfHwgMDsKfQoKZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyggZWxlbSApIHsKCXZhciByYXcgPSBlbGVtWzBdOwoJaWYgKCByYXcubm9kZVR5cGUgPT09IDkgKSB7CgkJcmV0dXJuIHsKCQkJd2lkdGg6IGVsZW0ud2lkdGgoKSwKCQkJaGVpZ2h0OiBlbGVtLmhlaWdodCgpLAoJCQlvZmZzZXQ6IHsgdG9wOiAwLCBsZWZ0OiAwIH0KCQl9OwoJfQoJaWYgKCAkLmlzV2luZG93KCByYXcgKSApIHsKCQlyZXR1cm4gewoJCQl3aWR0aDogZWxlbS53aWR0aCgpLAoJCQloZWlnaHQ6IGVsZW0uaGVpZ2h0KCksCgkJCW9mZnNldDogeyB0b3A6IGVsZW0uc2Nyb2xsVG9wKCksIGxlZnQ6IGVsZW0uc2Nyb2xsTGVmdCgpIH0KCQl9OwoJfQoJaWYgKCByYXcucHJldmVudERlZmF1bHQgKSB7CgkJcmV0dXJuIHsKCQkJd2lkdGg6IDAsCgkJCWhlaWdodDogMCwKCQkJb2Zmc2V0OiB7IHRvcDogcmF3LnBhZ2VZLCBsZWZ0OiByYXcucGFnZVggfQoJCX07Cgl9CglyZXR1cm4gewoJCXdpZHRoOiBlbGVtLm91dGVyV2lkdGgoKSwKCQloZWlnaHQ6IGVsZW0ub3V0ZXJIZWlnaHQoKSwKCQlvZmZzZXQ6IGVsZW0ub2Zmc2V0KCkKCX07Cn0KCiQucG9zaXRpb24gPSB7CglzY3JvbGxiYXJXaWR0aDogZnVuY3Rpb24oKSB7CgkJaWYgKCBjYWNoZWRTY3JvbGxiYXJXaWR0aCAhPT0gdW5kZWZpbmVkICkgewoJCQlyZXR1cm4gY2FjaGVkU2Nyb2xsYmFyV2lkdGg7CgkJfQoJCXZhciB3MSwgdzIsCgkJCWRpdiA9ICQoICI8ZGl2IHN0eWxlPSdkaXNwbGF5OmJsb2NrO3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7b3ZlcmZsb3c6aGlkZGVuOyc+PGRpdiBzdHlsZT0naGVpZ2h0OjEwMHB4O3dpZHRoOmF1dG87Jz48L2Rpdj48L2Rpdj4iICksCgkJCWlubmVyRGl2ID0gZGl2LmNoaWxkcmVuKClbMF07CgoJCSQoICJib2R5IiApLmFwcGVuZCggZGl2ICk7CgkJdzEgPSBpbm5lckRpdi5vZmZzZXRXaWR0aDsKCQlkaXYuY3NzKCAib3ZlcmZsb3ciLCAic2Nyb2xsIiApOwoKCQl3MiA9IGlubmVyRGl2Lm9mZnNldFdpZHRoOwoKCQlpZiAoIHcxID09PSB3MiApIHsKCQkJdzIgPSBkaXZbMF0uY2xpZW50V2lkdGg7CgkJfQoKCQlkaXYucmVtb3ZlKCk7CgoJCXJldHVybiAoY2FjaGVkU2Nyb2xsYmFyV2lkdGggPSB3MSAtIHcyKTsKCX0sCglnZXRTY3JvbGxJbmZvOiBmdW5jdGlvbiggd2l0aGluICkgewoJCXZhciBvdmVyZmxvd1ggPSB3aXRoaW4uaXNXaW5kb3cgPyAiIiA6IHdpdGhpbi5lbGVtZW50LmNzcyggIm92ZXJmbG93LXgiICksCgkJCW92ZXJmbG93WSA9IHdpdGhpbi5pc1dpbmRvdyA\/ICIiIDogd2l0aGluLmVsZW1lbnQuY3NzKCAib3ZlcmZsb3cteSIgKSwKCQkJaGFzT3ZlcmZsb3dYID0gb3ZlcmZsb3dYID09PSAic2Nyb2xsIiB8fAoJCQkJKCBvdmVyZmxvd1ggPT09ICJhdXRvIiAmJiB3aXRoaW4ud2lkdGggPCB3aXRoaW4uZWxlbWVudFswXS5zY3JvbGxXaWR0aCApLAoJCQloYXNPdmVyZmxvd1kgPSBvdmVyZmxvd1kgPT09ICJzY3JvbGwiIHx8CgkJCQkoIG92ZXJmbG93WSA9PT0gImF1dG8iICYmIHdpdGhpbi5oZWlnaHQgPCB3aXRoaW4uZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgKTsKCQlyZXR1cm4gewoJCQl3aWR0aDogaGFzT3ZlcmZsb3dZID8gJC5wb3NpdGlvbi5zY3JvbGxiYXJXaWR0aCgpIDogMCwKCQkJaGVpZ2h0OiBoYXNPdmVyZmxvd1ggPyAkLnBvc2l0aW9uLnNjcm9sbGJhcldpZHRoKCkgOiAwCgkJfTsKCX0sCglnZXRXaXRoaW5JbmZvOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl2YXIgd2l0aGluRWxlbWVudCA9ICQoIGVsZW1lbnQgfHwgd2luZG93ICksCgkJCWlzV2luZG93ID0gJC5pc1dpbmRvdyggd2l0aGluRWxlbWVudFswXSApOwoJCXJldHVybiB7CgkJCWVsZW1lbnQ6IHdpdGhpbkVsZW1lbnQsCgkJCWlzV2luZG93OiBpc1dpbmRvdywKCQkJb2Zmc2V0OiB3aXRoaW5FbGVtZW50Lm9mZnNldCgpIHx8IHsgbGVmdDogMCwgdG9wOiAwIH0sCgkJCXNjcm9sbExlZnQ6IHdpdGhpbkVsZW1lbnQuc2Nyb2xsTGVmdCgpLAoJCQlzY3JvbGxUb3A6IHdpdGhpbkVsZW1lbnQuc2Nyb2xsVG9wKCksCgkJCXdpZHRoOiBpc1dpbmRvdyA\\/CgkJCQkJCWRhdGEuZWxlbVdpZHRoIDoKCQkJCQkJMCwKCQkJCWF0T2Zmc2V0ID0gZGF0YS5hdFsgMCBdID09PSAibGVmdCIgPwoJCQkJCWRhdGEudGFyZ2V0V2lkdGggOgoJCQkJCWRhdGEuYXRbIDAgXSA9PT0gInJpZ2h0IiA\/CgkJCQkJCS1kYXRhLnRhcmdldFdpZHRoIDoKCQkJCQkJMCwKCQkJCW9mZnNldCA9IC0yICogZGF0YS5vZmZzZXRbIDAgXSwKCQkJCW5ld092ZXJSaWdodCwKCQkJCW5ld092ZXJMZWZ0OwoKCQkJaWYgKCBvdmVyTGVmdCA8IDAgKSB7CgkJCQluZXdPdmVyUmlnaHQgPSBwb3NpdGlvbi5sZWZ0ICsgbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldCArIGRhdGEuY29sbGlzaW9uV2lkdGggLSBvdXRlcldpZHRoIC0gd2l0aGluT2Zmc2V0OwoJCQkJaWYgKCBuZXdPdmVyUmlnaHQgPCAwIHx8IG5ld092ZXJSaWdodCA8IGFicyggb3ZlckxlZnQgKSApIHsKCQkJCQlwb3NpdGlvbi5sZWZ0ICs9IG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQ7CgkJCQl9CgkJCX0KCQkJZWxzZSBpZiAoIG92ZXJSaWdodCA+IDAgKSB7CgkJCQluZXdPdmVyTGVmdCA9IHBvc2l0aW9uLmxlZnQgLSBkYXRhLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpbkxlZnQgKyBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0IC0gb2Zmc2V0TGVmdDsKCQkJCWlmICggbmV3T3ZlckxlZnQgPiAwIHx8IGFicyggbmV3T3ZlckxlZnQgKSA8IG92ZXJSaWdodCApIHsKCQkJCQlwb3NpdGlvbi5sZWZ0ICs9IG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQ7CgkJCQl9CgkJCX0KCQl9LAoJCXRvcDogZnVuY3Rpb24oIHBvc2l0aW9uLCBkYXRhICkgewoJCQl2YXIgd2l0aGluID0gZGF0YS53aXRoaW4sCgkJCQl3aXRoaW5PZmZzZXQgPSB3aXRoaW4ub2Zmc2V0LnRvcCArIHdpdGhpbi5zY3JvbGxUb3AsCgkJCQlvdXRlckhlaWdodCA9IHdpdGhpbi5oZWlnaHQsCgkJCQlvZmZzZXRUb3AgPSB3aXRoaW4uaXNXaW5kb3cgPyB3aXRoaW4uc2Nyb2xsVG9wIDogd2l0aGluLm9mZnNldC50b3AsCgkJCQljb2xsaXNpb25Qb3NUb3AgPSBwb3NpdGlvbi50b3AgLSBkYXRhLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpblRvcCwKCQkJCW92ZXJUb3AgPSBjb2xsaXNpb25Qb3NUb3AgLSBvZmZzZXRUb3AsCgkJCQlvdmVyQm90dG9tID0gY29sbGlzaW9uUG9zVG9wICsgZGF0YS5jb2xsaXNpb25IZWlnaHQgLSBvdXRlckhlaWdodCAtIG9mZnNldFRvcCwKCQkJCXRvcCA9IGRhdGEubXlbIDEgXSA9PT0gInRvcCIsCgkJCQlteU9mZnNldCA9IHRvcCA\/CgkJCQkJLWRhdGEuZWxlbUhlaWdodCA6CgkJCQkJZGF0YS5teVsgMSBdID09PSAiYm90dG9tIiA\\/IE1hdGgubWF4KCBjZS5zY3JvbGxXaWR0aCwgY2Uub2Zmc2V0V2lkdGggKSA6IGNlLm9mZnNldFdpZHRoICkgLSAoIHBhcnNlSW50KCBjLmNzcyggImJvcmRlclJpZ2h0V2lkdGgiICksIDEwICkgfHwgMCApIC0gKCBwYXJzZUludCggYy5jc3MoICJwYWRkaW5nUmlnaHQiICksIDEwICkgfHwgMCApIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0IC0gdGhpcy5tYXJnaW5zLnJpZ2h0LAoJCQkoIG92ZXIgPyBNYXRoLm1heCggY2Uuc2Nyb2xsSGVpZ2h0LCBjZS5vZmZzZXRIZWlnaHQgKSA6IGNlLm9mZnNldEhlaWdodCApIC0gKCBwYXJzZUludCggYy5jc3MoICJib3JkZXJCb3R0b21XaWR0aCIgKSwgMTAgKSB8fCAwICkgLSAoIHBhcnNlSW50KCBjLmNzcyggInBhZGRpbmdCb3R0b20iICksIDEwICkgfHwgMCApIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLSB0aGlzLm1hcmdpbnMudG9wICAtIHRoaXMubWFyZ2lucy5ib3R0b20KCQldOwoJCXRoaXMucmVsYXRpdmVfY29udGFpbmVyID0gYzsKCX0sCgoJX2NvbnZlcnRQb3NpdGlvblRvOiBmdW5jdGlvbihkLCBwb3MpIHsKCgkJaWYoIXBvcykgewoJCQlwb3MgPSB0aGlzLnBvc2l0aW9uOwoJCX0KCgkJdmFyIG1vZCA9IGQgPT09ICJhYnNvbHV0ZSIgPyAxIDogLTEsCgkJCXNjcm9sbCA9IHRoaXMuY3NzUG9zaXRpb24gPT09ICJhYnNvbHV0ZSIgJiYgISggdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSAhPT0gZG9jdW1lbnQgJiYgJC5jb250YWlucyggdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSwgdGhpcy5vZmZzZXRQYXJlbnRbIDAgXSApICkgPyB0aGlzLm9mZnNldFBhcmVudCA6IHRoaXMuc2Nyb2xsUGFyZW50OwoKCQkvL0NhY2hlIHRoZSBzY3JvbGwKCQlpZiAoIXRoaXMub2Zmc2V0LnNjcm9sbCkgewoJCQl0aGlzLm9mZnNldC5zY3JvbGwgPSB7dG9wIDogc2Nyb2xsLnNjcm9sbFRvcCgpLCBsZWZ0IDogc2Nyb2xsLnNjcm9sbExlZnQoKX07CgkJfQoKCQlyZXR1cm4gewoJCQl0b3A6ICgKCQkJCXBvcy50b3AJKwkJCQkJCQkJCQkJCQkJCQkvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb24KCQkJCXRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAqIG1vZCArCQkJCQkJCQkJCS8vIE9ubHkgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgbm9kZXM6IFJlbGF0aXZlIG9mZnNldCBmcm9tIGVsZW1lbnQgdG8gb2Zmc2V0IHBhcmVudAoJCQkJdGhpcy5vZmZzZXQucGFyZW50LnRvcCAqIG1vZCAtCQkJCQkJCQkJCS8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpCgkJCQkoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gImZpeGVkIiA\/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSA6IHRoaXMub2Zmc2V0LnNjcm9sbC50b3AgKSAqIG1vZCApCgkJCSksCgkJCWxlZnQ6ICgKCQkJCXBvcy5sZWZ0ICsJCQkJCQkJCQkJCQkJCQkJLy8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uCgkJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0ICogbW9kICsJCQkJCQkJCQkJLy8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50CgkJCQl0aGlzLm9mZnNldC5wYXJlbnQubGVmdCAqIG1vZAktCQkJCQkJCQkJCS8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpCgkJCQkoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gImZpeGVkIiA\/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgOiB0aGlzLm9mZnNldC5zY3JvbGwubGVmdCApICogbW9kICkKCQkJKQoJCX07CgoJfSwKCglfZ2VuZXJhdGVQb3NpdGlvbjogZnVuY3Rpb24oZXZlbnQpIHsKCgkJdmFyIGNvbnRhaW5tZW50LCBjbywgdG9wLCBsZWZ0LAoJCQlvID0gdGhpcy5vcHRpb25zLAoJCQlzY3JvbGwgPSB0aGlzLmNzc1Bvc2l0aW9uID09PSAiYWJzb2x1dGUiICYmICEoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gIT09IGRvY3VtZW50ICYmICQuY29udGFpbnMoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0sIHRoaXMub2Zmc2V0UGFyZW50WyAwIF0gKSApID8gdGhpcy5vZmZzZXRQYXJlbnQgOiB0aGlzLnNjcm9sbFBhcmVudCwKCQkJcGFnZVggPSBldmVudC5wYWdlWCwKCQkJcGFnZVkgPSBldmVudC5wYWdlWTsKCgkJLy9DYWNoZSB0aGUgc2Nyb2xsCgkJaWYgKCF0aGlzLm9mZnNldC5zY3JvbGwpIHsKCQkJdGhpcy5vZmZzZXQuc2Nyb2xsID0ge3RvcCA6IHNjcm9sbC5zY3JvbGxUb3AoKSwgbGVmdCA6IHNjcm9sbC5zY3JvbGxMZWZ0KCl9OwoJCX0KCgkJLyoKCQkgKiAtIFBvc2l0aW9uIGNvbnN0cmFpbmluZyAtCgkJICogQ29uc3RyYWluIHRoZSBwb3NpdGlvbiB0byBhIG1peCBvZiBncmlkLCBjb250YWlubWVudC4KCQkgKi8KCgkJLy8gSWYgd2UgYXJlIG5vdCBkcmFnZ2luZyB5ZXQsIHdlIHdvbid0IGNoZWNrIGZvciBvcHRpb25zCgkJaWYgKCB0aGlzLm9yaWdpbmFsUG9zaXRpb24gKSB7CgkJCWlmICggdGhpcy5jb250YWlubWVudCApIHsKCQkJCWlmICggdGhpcy5yZWxhdGl2ZV9jb250YWluZXIgKXsKCQkJCQljbyA9IHRoaXMucmVsYXRpdmVfY29udGFpbmVyLm9mZnNldCgpOwoJCQkJCWNvbnRhaW5tZW50ID0gWwoJCQkJCQl0aGlzLmNvbnRhaW5tZW50WyAwIF0gKyBjby5sZWZ0LAoJCQkJCQl0aGlzLmNvbnRhaW5tZW50WyAxIF0gKyBjby50b3AsCgkJCQkJCXRoaXMuY29udGFpbm1lbnRbIDIgXSArIGNvLmxlZnQsCgkJCQkJCXRoaXMuY29udGFpbm1lbnRbIDMgXSArIGNvLnRvcAoJCQkJCV07CgkJCQl9CgkJCQllbHNlIHsKCQkJCQljb250YWlubWVudCA9IHRoaXMuY29udGFpbm1lbnQ7CgkJCQl9CgoJCQkJaWYoZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0IDwgY29udGFpbm1lbnRbMF0pIHsKCQkJCQlwYWdlWCA9IGNvbnRhaW5tZW50WzBdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdDsKCQkJCX0KCQkJCWlmKGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDwgY29udGFpbm1lbnRbMV0pIHsKCQkJCQlwYWdlWSA9IGNvbnRhaW5tZW50WzFdICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wOwoJCQkJfQoJCQkJaWYoZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID4gY29udGFpbm1lbnRbMl0pIHsKCQkJCQlwYWdlWCA9IGNvbnRhaW5tZW50WzJdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdDsKCQkJCX0KCQkJCWlmKGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID4gY29udGFpbm1lbnRbM10pIHsKCQkJCQlwYWdlWSA9IGNvbnRhaW5tZW50WzNdICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wOwoJCQkJfQoJCQl9CgoJCQlpZihvLmdyaWQpIHsKCQkJCS8vQ2hlY2sgZm9yIGdyaWQgZWxlbWVudHMgc2V0IHRvIDAgdG8gcHJldmVudCBkaXZpZGUgYnkgMCBlcnJvciBjYXVzaW5nIGludmFsaWQgYXJndW1lbnQgZXJyb3JzIGluIElFIChzZWUgdGlja2V0ICM2OTUwKQoJCQkJdG9wID0gby5ncmlkWzFdID8gdGhpcy5vcmlnaW5hbFBhZ2VZICsgTWF0aC5yb3VuZCgocGFnZVkgLSB0aGlzLm9yaWdpbmFsUGFnZVkpIC8gby5ncmlkWzFdKSAqIG8uZ3JpZFsxXSA6IHRoaXMub3JpZ2luYWxQYWdlWTsKCQkJCXBhZ2VZID0gY29udGFpbm1lbnQgPyAoKHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+PSBjb250YWlubWVudFsxXSB8fCB0b3AgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiBjb250YWlubWVudFszXSkgPyB0b3AgOiAoKHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+PSBjb250YWlubWVudFsxXSkgPyB0b3AgLSBvLmdyaWRbMV0gOiB0b3AgKyBvLmdyaWRbMV0pKSA6IHRvcDsKCgkJCQlsZWZ0ID0gby5ncmlkWzBdID8gdGhpcy5vcmlnaW5hbFBhZ2VYICsgTWF0aC5yb3VuZCgocGFnZVggLSB0aGlzLm9yaWdpbmFsUGFnZVgpIC8gby5ncmlkWzBdKSAqIG8uZ3JpZFswXSA6IHRoaXMub3JpZ2luYWxQYWdlWDsKCQkJCXBhZ2VYID0gY29udGFpbm1lbnQgPyAoKGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID49IGNvbnRhaW5tZW50WzBdIHx8IGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID4gY29udGFpbm1lbnRbMl0pID8gbGVmdCA6ICgobGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPj0gY29udGFpbm1lbnRbMF0pID8gbGVmdCAtIG8uZ3JpZFswXSA6IGxlZnQgKyBvLmdyaWRbMF0pKSA6IGxlZnQ7CgkJCX0KCgkJfQoKCQlyZXR1cm4gewoJCQl0b3A6ICgKCQkJCXBhZ2VZIC0JCQkJCQkJCQkJCQkJCQkJCS8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvbgoJCQkJdGhpcy5vZmZzZXQuY2xpY2sudG9wCS0JCQkJCQkJCQkJCQkvLyBDbGljayBvZmZzZXQgKHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50KQoJCQkJdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC0JCQkJCQkJCQkJCQkvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnQKCQkJCXRoaXMub2Zmc2V0LnBhcmVudC50b3AgKwkJCQkJCQkJCQkJCS8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpCgkJCQkoIHRoaXMuY3NzUG9zaXRpb24gPT09ICJmaXhlZCIgPyAtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCkgOiB0aGlzLm9mZnNldC5zY3JvbGwudG9wICkKCQkJKSwKCQkJbGVmdDogKAoJCQkJcGFnZVggLQkJCQkJCQkJCQkJCQkJCQkJLy8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uCgkJCQl0aGlzLm9mZnNldC5jbGljay5sZWZ0IC0JCQkJCQkJCQkJCQkvLyBDbGljayBvZmZzZXQgKHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50KQoJCQkJdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAtCQkJCQkJCQkJCQkJLy8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50CgkJCQl0aGlzLm9mZnNldC5wYXJlbnQubGVmdCArCQkJCQkJCQkJCQkJLy8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcikKCQkJCSggdGhpcy5jc3NQb3NpdGlvbiA9PT0gImZpeGVkIiA\\/ICggby5zbmFwLml0ZW1zIHx8ICI6ZGF0YSh1aS1kcmFnZ2FibGUpIiApIDogby5zbmFwKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgJHQgPSAkKHRoaXMpLAoJCQkJJG8gPSAkdC5vZmZzZXQoKTsKCQkJaWYodGhpcyAhPT0gaS5lbGVtZW50WzBdKSB7CgkJCQlpLnNuYXBFbGVtZW50cy5wdXNoKHsKCQkJCQlpdGVtOiB0aGlzLAoJCQkJCXdpZHRoOiAkdC5vdXRlcldpZHRoKCksIGhlaWdodDogJHQub3V0ZXJIZWlnaHQoKSwKCQkJCQl0b3A6ICRvLnRvcCwgbGVmdDogJG8ubGVmdAoJCQkJfSk7CgkJCX0KCQl9KTsKCgl9LAoJZHJhZzogZnVuY3Rpb24oZXZlbnQsIHVpKSB7CgoJCXZhciB0cywgYnMsIGxzLCBycywgbCwgciwgdCwgYiwgaSwgZmlyc3QsCgkJCWluc3QgPSAkKHRoaXMpLmRhdGEoInVpLWRyYWdnYWJsZSIpLAoJCQlvID0gaW5zdC5vcHRpb25zLAoJCQlkID0gby5zbmFwVG9sZXJhbmNlLAoJCQl4MSA9IHVpLm9mZnNldC5sZWZ0LCB4MiA9IHgxICsgaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCwKCQkJeTEgPSB1aS5vZmZzZXQudG9wLCB5MiA9IHkxICsgaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQ7CgoJCWZvciAoaSA9IGluc3Quc25hcEVsZW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXsKCgkJCWwgPSBpbnN0LnNuYXBFbGVtZW50c1tpXS5sZWZ0OwoJCQlyID0gbCArIGluc3Quc25hcEVsZW1lbnRzW2ldLndpZHRoOwoJCQl0ID0gaW5zdC5zbmFwRWxlbWVudHNbaV0udG9wOwoJCQliID0gdCArIGluc3Quc25hcEVsZW1lbnRzW2ldLmhlaWdodDsKCgkJCWlmICggeDIgPCBsIC0gZCB8fCB4MSA+IHIgKyBkIHx8IHkyIDwgdCAtIGQgfHwgeTEgPiBiICsgZCB8fCAhJC5jb250YWlucyggaW5zdC5zbmFwRWxlbWVudHNbIGkgXS5pdGVtLm93bmVyRG9jdW1lbnQsIGluc3Quc25hcEVsZW1lbnRzWyBpIF0uaXRlbSApICkgewoJCQkJaWYoaW5zdC5zbmFwRWxlbWVudHNbaV0uc25hcHBpbmcpIHsKCQkJCQkoaW5zdC5vcHRpb25zLnNuYXAucmVsZWFzZSAmJiBpbnN0Lm9wdGlvbnMuc25hcC5yZWxlYXNlLmNhbGwoaW5zdC5lbGVtZW50LCBldmVudCwgJC5leHRlbmQoaW5zdC5fdWlIYXNoKCksIHsgc25hcEl0ZW06IGluc3Quc25hcEVsZW1lbnRzW2ldLml0ZW0gfSkpKTsKCQkJCX0KCQkJCWluc3Quc25hcEVsZW1lbnRzW2ldLnNuYXBwaW5nID0gZmFsc2U7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJaWYoby5zbmFwTW9kZSAhPT0gImlubmVyIikgewoJCQkJdHMgPSBNYXRoLmFicyh0IC0geTIpIDw9IGQ7CgkJCQlicyA9IE1hdGguYWJzKGIgLSB5MSkgPD0gZDsKCQkJCWxzID0gTWF0aC5hYnMobCAtIHgyKSA8PSBkOwoJCQkJcnMgPSBNYXRoLmFicyhyIC0geDEpIDw9IGQ7CgkJCQlpZih0cykgewoJCQkJCXVpLnBvc2l0aW9uLnRvcCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIsIHsgdG9wOiB0IC0gaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsIGxlZnQ6IDAgfSkudG9wIC0gaW5zdC5tYXJnaW5zLnRvcDsKCQkJCX0KCQkJCWlmKGJzKSB7CgkJCQkJdWkucG9zaXRpb24udG9wID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oInJlbGF0aXZlIiwgeyB0b3A6IGIsIGxlZnQ6IDAgfSkudG9wIC0gaW5zdC5tYXJnaW5zLnRvcDsKCQkJCX0KCQkJCWlmKGxzKSB7CgkJCQkJdWkucG9zaXRpb24ubGVmdCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIsIHsgdG9wOiAwLCBsZWZ0OiBsIC0gaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCB9KS5sZWZ0IC0gaW5zdC5tYXJnaW5zLmxlZnQ7CgkJCQl9CgkJCQlpZihycykgewoJCQkJCXVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbygicmVsYXRpdmUiLCB7IHRvcDogMCwgbGVmdDogciB9KS5sZWZ0IC0gaW5zdC5tYXJnaW5zLmxlZnQ7CgkJCQl9CgkJCX0KCgkJCWZpcnN0ID0gKHRzIHx8IGJzIHx8IGxzIHx8IHJzKTsKCgkJCWlmKG8uc25hcE1vZGUgIT09ICJvdXRlciIpIHsKCQkJCXRzID0gTWF0aC5hYnModCAtIHkxKSA8PSBkOwoJCQkJYnMgPSBNYXRoLmFicyhiIC0geTIpIDw9IGQ7CgkJCQlscyA9IE1hdGguYWJzKGwgLSB4MSkgPD0gZDsKCQkJCXJzID0gTWF0aC5hYnMociAtIHgyKSA8PSBkOwoJCQkJaWYodHMpIHsKCQkJCQl1aS5wb3NpdGlvbi50b3AgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbygicmVsYXRpdmUiLCB7IHRvcDogdCwgbGVmdDogMCB9KS50b3AgLSBpbnN0Lm1hcmdpbnMudG9wOwoJCQkJfQoJCQkJaWYoYnMpIHsKCQkJCQl1aS5wb3NpdGlvbi50b3AgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbygicmVsYXRpdmUiLCB7IHRvcDogYiAtIGluc3QuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LCBsZWZ0OiAwIH0pLnRvcCAtIGluc3QubWFyZ2lucy50b3A7CgkJCQl9CgkJCQlpZihscykgewoJCQkJCXVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbygicmVsYXRpdmUiLCB7IHRvcDogMCwgbGVmdDogbCB9KS5sZWZ0IC0gaW5zdC5tYXJnaW5zLmxlZnQ7CgkJCQl9CgkJCQlpZihycykgewoJCQkJCXVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbygicmVsYXRpdmUiLCB7IHRvcDogMCwgbGVmdDogciAtIGluc3QuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggfSkubGVmdCAtIGluc3QubWFyZ2lucy5sZWZ0OwoJCQkJfQoJCQl9CgoJCQlpZighaW5zdC5zbmFwRWxlbWVudHNbaV0uc25hcHBpbmcgJiYgKHRzIHx8IGJzIHx8IGxzIHx8IHJzIHx8IGZpcnN0KSkgewoJCQkJKGluc3Qub3B0aW9ucy5zbmFwLnNuYXAgJiYgaW5zdC5vcHRpb25zLnNuYXAuc25hcC5jYWxsKGluc3QuZWxlbWVudCwgZXZlbnQsICQuZXh0ZW5kKGluc3QuX3VpSGFzaCgpLCB7IHNuYXBJdGVtOiBpbnN0LnNuYXBFbGVtZW50c1tpXS5pdGVtIH0pKSk7CgkJCX0KCQkJaW5zdC5zbmFwRWxlbWVudHNbaV0uc25hcHBpbmcgPSAodHMgfHwgYnMgfHwgbHMgfHwgcnMgfHwgZmlyc3QpOwoKCQl9CgoJfQp9KTsKCiQudWkucGx1Z2luLmFkZCgiZHJhZ2dhYmxlIiwgInN0YWNrIiwgewoJc3RhcnQ6IGZ1bmN0aW9uKCkgewoJCXZhciBtaW4sCgkJCW8gPSB0aGlzLmRhdGEoInVpLWRyYWdnYWJsZSIpLm9wdGlvbnMsCgkJCWdyb3VwID0gJC5tYWtlQXJyYXkoJChvLnN0YWNrKSkuc29ydChmdW5jdGlvbihhLGIpIHsKCQkJCXJldHVybiAocGFyc2VJbnQoJChhKS5jc3MoInpJbmRleCIpLDEwKSB8fCAwKSAtIChwYXJzZUludCgkKGIpLmNzcygiekluZGV4IiksMTApIHx8IDApOwoJCQl9KTsKCgkJaWYgKCFncm91cC5sZW5ndGgpIHsgcmV0dXJuOyB9CgoJCW1pbiA9IHBhcnNlSW50KCQoZ3JvdXBbMF0pLmNzcygiekluZGV4IiksIDEwKSB8fCAwOwoJCSQoZ3JvdXApLmVhY2goZnVuY3Rpb24oaSkgewoJCQkkKHRoaXMpLmNzcygiekluZGV4IiwgbWluICsgaSk7CgkJfSk7CgkJdGhpcy5jc3MoInpJbmRleCIsIChtaW4gKyBncm91cC5sZW5ndGgpKTsKCX0KfSk7CgokLnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsICJ6SW5kZXgiLCB7CglzdGFydDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7CgkJdmFyIHQgPSAkKHVpLmhlbHBlciksIG8gPSAkKHRoaXMpLmRhdGEoInVpLWRyYWdnYWJsZSIpLm9wdGlvbnM7CgkJaWYodC5jc3MoInpJbmRleCIpKSB7CgkJCW8uX3pJbmRleCA9IHQuY3NzKCJ6SW5kZXgiKTsKCQl9CgkJdC5jc3MoInpJbmRleCIsIG8uekluZGV4KTsKCX0sCglzdG9wOiBmdW5jdGlvbihldmVudCwgdWkpIHsKCQl2YXIgbyA9ICQodGhpcykuZGF0YSgidWktZHJhZ2dhYmxlIikub3B0aW9uczsKCQlpZihvLl96SW5kZXgpIHsKCQkJJCh1aS5oZWxwZXIpLmNzcygiekluZGV4Iiwgby5fekluZGV4KTsKCQl9Cgl9Cn0pOwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgpmdW5jdGlvbiBpc092ZXJBeGlzKCB4LCByZWZlcmVuY2UsIHNpemUgKSB7CglyZXR1cm4gKCB4ID4gcmVmZXJlbmNlICkgJiYgKCB4IDwgKCByZWZlcmVuY2UgKyBzaXplICkgKTsKfQoKJC53aWRnZXQoInVpLmRyb3BwYWJsZSIsIHsKCXZlcnNpb246ICIxLjEwLjMiLAoJd2lkZ2V0RXZlbnRQcmVmaXg6ICJkcm9wIiwKCW9wdGlvbnM6IHsKCQlhY2NlcHQ6ICIqIiwKCQlhY3RpdmVDbGFzczogZmFsc2UsCgkJYWRkQ2xhc3NlczogdHJ1ZSwKCQlncmVlZHk6IGZhbHNlLAoJCWhvdmVyQ2xhc3M6IGZhbHNlLAoJCXNjb3BlOiAiZGVmYXVsdCIsCgkJdG9sZXJhbmNlOiAiaW50ZXJzZWN0IiwKCgkJLy8gY2FsbGJhY2tzCgkJYWN0aXZhdGU6IG51bGwsCgkJZGVhY3RpdmF0ZTogbnVsbCwKCQlkcm9wOiBudWxsLAoJCW91dDogbnVsbCwKCQlvdmVyOiBudWxsCgl9LAoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCXZhciBvID0gdGhpcy5vcHRpb25zLAoJCQlhY2NlcHQgPSBvLmFjY2VwdDsKCgkJdGhpcy5pc292ZXIgPSBmYWxzZTsKCQl0aGlzLmlzb3V0ID0gdHJ1ZTsKCgkJdGhpcy5hY2NlcHQgPSAkLmlzRnVuY3Rpb24oYWNjZXB0KSA\/IGFjY2VwdCA6IGZ1bmN0aW9uKGQpIHsKCQkJcmV0dXJuIGQuaXMoYWNjZXB0KTsKCQl9OwoKCQkvL1N0b3JlIHRoZSBkcm9wcGFibGUncyBwcm9wb3J0aW9ucwoJCXRoaXMucHJvcG9ydGlvbnMgPSB7IHdpZHRoOiB0aGlzLmVsZW1lbnRbMF0ub2Zmc2V0V2lkdGgsIGhlaWdodDogdGhpcy5lbGVtZW50WzBdLm9mZnNldEhlaWdodCB9OwoKCQkvLyBBZGQgdGhlIHJlZmVyZW5jZSBhbmQgcG9zaXRpb25zIHRvIHRoZSBtYW5hZ2VyCgkJJC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tvLnNjb3BlXSA9ICQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbby5zY29wZV0gfHwgW107CgkJJC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tvLnNjb3BlXS5wdXNoKHRoaXMpOwoKCQkoby5hZGRDbGFzc2VzICYmIHRoaXMuZWxlbWVudC5hZGRDbGFzcygidWktZHJvcHBhYmxlIikpOwoKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCXZhciBpID0gMCwKCQkJZHJvcCA9ICQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbdGhpcy5vcHRpb25zLnNjb3BlXTsKCgkJZm9yICggOyBpIDwgZHJvcC5sZW5ndGg7IGkrKyApIHsKCQkJaWYgKCBkcm9wW2ldID09PSB0aGlzICkgewoJCQkJZHJvcC5zcGxpY2UoaSwgMSk7CgkJCX0KCQl9CgoJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcygidWktZHJvcHBhYmxlIHVpLWRyb3BwYWJsZS1kaXNhYmxlZCIpOwoJfSwKCglfc2V0T3B0aW9uOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7CgoJCWlmKGtleSA9PT0gImFjY2VwdCIpIHsKCQkJdGhpcy5hY2NlcHQgPSAkLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUgOiBmdW5jdGlvbihkKSB7CgkJCQlyZXR1cm4gZC5pcyh2YWx1ZSk7CgkJCX07CgkJfQoJCSQuV2lkZ2V0LnByb3RvdHlwZS5fc2V0T3B0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cgl9LAoKCV9hY3RpdmF0ZTogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgZHJhZ2dhYmxlID0gJC51aS5kZG1hbmFnZXIuY3VycmVudDsKCQlpZih0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpIHsKCQkJdGhpcy5lbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7CgkJfQoJCWlmKGRyYWdnYWJsZSl7CgkJCXRoaXMuX3RyaWdnZXIoImFjdGl2YXRlIiwgZXZlbnQsIHRoaXMudWkoZHJhZ2dhYmxlKSk7CgkJfQoJfSwKCglfZGVhY3RpdmF0ZTogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgZHJhZ2dhYmxlID0gJC51aS5kZG1hbmFnZXIuY3VycmVudDsKCQlpZih0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpIHsKCQkJdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7CgkJfQoJCWlmKGRyYWdnYWJsZSl7CgkJCXRoaXMuX3RyaWdnZXIoImRlYWN0aXZhdGUiLCBldmVudCwgdGhpcy51aShkcmFnZ2FibGUpKTsKCQl9Cgl9LAoKCV9vdmVyOiBmdW5jdGlvbihldmVudCkgewoKCQl2YXIgZHJhZ2dhYmxlID0gJC51aS5kZG1hbmFnZXIuY3VycmVudDsKCgkJLy8gQmFpbCBpZiBkcmFnZ2FibGUgYW5kIGRyb3BwYWJsZSBhcmUgc2FtZSBlbGVtZW50CgkJaWYgKCFkcmFnZ2FibGUgfHwgKGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudClbMF0gPT09IHRoaXMuZWxlbWVudFswXSkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAodGhpcy5hY2NlcHQuY2FsbCh0aGlzLmVsZW1lbnRbMF0sKGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudCkpKSB7CgkJCWlmKHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzKSB7CgkJCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MpOwoJCQl9CgkJCXRoaXMuX3RyaWdnZXIoIm92ZXIiLCBldmVudCwgdGhpcy51aShkcmFnZ2FibGUpKTsKCQl9CgoJfSwKCglfb3V0OiBmdW5jdGlvbihldmVudCkgewoKCQl2YXIgZHJhZ2dhYmxlID0gJC51aS5kZG1hbmFnZXIuY3VycmVudDsKCgkJLy8gQmFpbCBpZiBkcmFnZ2FibGUgYW5kIGRyb3BwYWJsZSBhcmUgc2FtZSBlbGVtZW50CgkJaWYgKCFkcmFnZ2FibGUgfHwgKGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudClbMF0gPT09IHRoaXMuZWxlbWVudFswXSkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAodGhpcy5hY2NlcHQuY2FsbCh0aGlzLmVsZW1lbnRbMF0sKGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudCkpKSB7CgkJCWlmKHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzKSB7CgkJCQl0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MpOwoJCQl9CgkJCXRoaXMuX3RyaWdnZXIoIm91dCIsIGV2ZW50LCB0aGlzLnVpKGRyYWdnYWJsZSkpOwoJCX0KCgl9LAoKCV9kcm9wOiBmdW5jdGlvbihldmVudCxjdXN0b20pIHsKCgkJdmFyIGRyYWdnYWJsZSA9IGN1c3RvbSB8fCAkLnVpLmRkbWFuYWdlci5jdXJyZW50LAoJCQljaGlsZHJlbkludGVyc2VjdGlvbiA9IGZhbHNlOwoKCQkvLyBCYWlsIGlmIGRyYWdnYWJsZSBhbmQgZHJvcHBhYmxlIGFyZSBzYW1lIGVsZW1lbnQKCQlpZiAoIWRyYWdnYWJsZSB8fCAoZHJhZ2dhYmxlLmN1cnJlbnRJdGVtIHx8IGRyYWdnYWJsZS5lbGVtZW50KVswXSA9PT0gdGhpcy5lbGVtZW50WzBdKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCXRoaXMuZWxlbWVudC5maW5kKCI6ZGF0YSh1aS1kcm9wcGFibGUpIikubm90KCIudWktZHJhZ2dhYmxlLWRyYWdnaW5nIikuZWFjaChmdW5jdGlvbigpIHsKCQkJdmFyIGluc3QgPSAkLmRhdGEodGhpcywgInVpLWRyb3BwYWJsZSIpOwoJCQlpZigKCQkJCWluc3Qub3B0aW9ucy5ncmVlZHkgJiYKCQkJCSFpbnN0Lm9wdGlvbnMuZGlzYWJsZWQgJiYKCQkJCWluc3Qub3B0aW9ucy5zY29wZSA9PT0gZHJhZ2dhYmxlLm9wdGlvbnMuc2NvcGUgJiYKCQkJCWluc3QuYWNjZXB0LmNhbGwoaW5zdC5lbGVtZW50WzBdLCAoZHJhZ2dhYmxlLmN1cnJlbnRJdGVtIHx8IGRyYWdnYWJsZS5lbGVtZW50KSkgJiYKCQkJCSQudWkuaW50ZXJzZWN0KGRyYWdnYWJsZSwgJC5leHRlbmQoaW5zdCwgeyBvZmZzZXQ6IGluc3QuZWxlbWVudC5vZmZzZXQoKSB9KSwgaW5zdC5vcHRpb25zLnRvbGVyYW5jZSkKCQkJKSB7IGNoaWxkcmVuSW50ZXJzZWN0aW9uID0gdHJ1ZTsgcmV0dXJuIGZhbHNlOyB9CgkJfSk7CgkJaWYoY2hpbGRyZW5JbnRlcnNlY3Rpb24pIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJaWYodGhpcy5hY2NlcHQuY2FsbCh0aGlzLmVsZW1lbnRbMF0sKGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudCkpKSB7CgkJCWlmKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcykgewoJCQkJdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7CgkJCX0KCQkJaWYodGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MpIHsKCQkJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyk7CgkJCX0KCQkJdGhpcy5fdHJpZ2dlcigiZHJvcCIsIGV2ZW50LCB0aGlzLnVpKGRyYWdnYWJsZSkpOwoJCQlyZXR1cm4gdGhpcy5lbGVtZW50OwoJCX0KCgkJcmV0dXJuIGZhbHNlOwoKCX0sCgoJdWk6IGZ1bmN0aW9uKGMpIHsKCQlyZXR1cm4gewoJCQlkcmFnZ2FibGU6IChjLmN1cnJlbnRJdGVtIHx8IGMuZWxlbWVudCksCgkJCWhlbHBlcjogYy5oZWxwZXIsCgkJCXBvc2l0aW9uOiBjLnBvc2l0aW9uLAoJCQlvZmZzZXQ6IGMucG9zaXRpb25BYnMKCQl9OwoJfQoKfSk7CgokLnVpLmludGVyc2VjdCA9IGZ1bmN0aW9uKGRyYWdnYWJsZSwgZHJvcHBhYmxlLCB0b2xlcmFuY2VNb2RlKSB7CgoJaWYgKCFkcm9wcGFibGUub2Zmc2V0KSB7CgkJcmV0dXJuIGZhbHNlOwoJfQoKCXZhciBkcmFnZ2FibGVMZWZ0LCBkcmFnZ2FibGVUb3AsCgkJeDEgPSAoZHJhZ2dhYmxlLnBvc2l0aW9uQWJzIHx8IGRyYWdnYWJsZS5wb3NpdGlvbi5hYnNvbHV0ZSkubGVmdCwgeDIgPSB4MSArIGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCwKCQl5MSA9IChkcmFnZ2FibGUucG9zaXRpb25BYnMgfHwgZHJhZ2dhYmxlLnBvc2l0aW9uLmFic29sdXRlKS50b3AsIHkyID0geTEgKyBkcmFnZ2FibGUuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LAoJCWwgPSBkcm9wcGFibGUub2Zmc2V0LmxlZnQsIHIgPSBsICsgZHJvcHBhYmxlLnByb3BvcnRpb25zLndpZHRoLAoJCXQgPSBkcm9wcGFibGUub2Zmc2V0LnRvcCwgYiA9IHQgKyBkcm9wcGFibGUucHJvcG9ydGlvbnMuaGVpZ2h0OwoKCXN3aXRjaCAodG9sZXJhbmNlTW9kZSkgewoJCWNhc2UgImZpdCI6CgkJCXJldHVybiAobCA8PSB4MSAmJiB4MiA8PSByICYmIHQgPD0geTEgJiYgeTIgPD0gYik7CgkJY2FzZSAiaW50ZXJzZWN0IjoKCQkJcmV0dXJuIChsIDwgeDEgKyAoZHJhZ2dhYmxlLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMikgJiYgLy8gUmlnaHQgSGFsZgoJCQkJeDIgLSAoZHJhZ2dhYmxlLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMikgPCByICYmIC8vIExlZnQgSGFsZgoJCQkJdCA8IHkxICsgKGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLyAyKSAmJiAvLyBCb3R0b20gSGFsZgoJCQkJeTIgLSAoZHJhZ2dhYmxlLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAvIDIpIDwgYiApOyAvLyBUb3AgSGFsZgoJCWNhc2UgInBvaW50ZXIiOgoJCQlkcmFnZ2FibGVMZWZ0ID0gKChkcmFnZ2FibGUucG9zaXRpb25BYnMgfHwgZHJhZ2dhYmxlLnBvc2l0aW9uLmFic29sdXRlKS5sZWZ0ICsgKGRyYWdnYWJsZS5jbGlja09mZnNldCB8fCBkcmFnZ2FibGUub2Zmc2V0LmNsaWNrKS5sZWZ0KTsKCQkJZHJhZ2dhYmxlVG9wID0gKChkcmFnZ2FibGUucG9zaXRpb25BYnMgfHwgZHJhZ2dhYmxlLnBvc2l0aW9uLmFic29sdXRlKS50b3AgKyAoZHJhZ2dhYmxlLmNsaWNrT2Zmc2V0IHx8IGRyYWdnYWJsZS5vZmZzZXQuY2xpY2spLnRvcCk7CgkJCXJldHVybiBpc092ZXJBeGlzKCBkcmFnZ2FibGVUb3AsIHQsIGRyb3BwYWJsZS5wcm9wb3J0aW9ucy5oZWlnaHQgKSAmJiBpc092ZXJBeGlzKCBkcmFnZ2FibGVMZWZ0LCBsLCBkcm9wcGFibGUucHJvcG9ydGlvbnMud2lkdGggKTsKCQljYXNlICJ0b3VjaCI6CgkJCXJldHVybiAoCgkJCQkoeTEgPj0gdCAmJiB5MSA8PSBiKSB8fAkvLyBUb3AgZWRnZSB0b3VjaGluZwoJCQkJKHkyID49IHQgJiYgeTIgPD0gYikgfHwJLy8gQm90dG9tIGVkZ2UgdG91Y2hpbmcKCQkJCSh5MSA8IHQgJiYgeTIgPiBiKQkJLy8gU3Vycm91bmRlZCB2ZXJ0aWNhbGx5CgkJCSkgJiYgKAoJCQkJKHgxID49IGwgJiYgeDEgPD0gcikgfHwJLy8gTGVmdCBlZGdlIHRvdWNoaW5nCgkJCQkoeDIgPj0gbCAmJiB4MiA8PSByKSB8fAkvLyBSaWdodCBlZGdlIHRvdWNoaW5nCgkJCQkoeDEgPCBsICYmIHgyID4gcikJCS8vIFN1cnJvdW5kZWQgaG9yaXpvbnRhbGx5CgkJCSk7CgkJZGVmYXVsdDoKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCn07CgovKgoJVGhpcyBtYW5hZ2VyIHRyYWNrcyBvZmZzZXRzIG9mIGRyYWdnYWJsZXMgYW5kIGRyb3BwYWJsZXMKKi8KJC51aS5kZG1hbmFnZXIgPSB7CgljdXJyZW50OiBudWxsLAoJZHJvcHBhYmxlczogeyAiZGVmYXVsdCI6IFtdIH0sCglwcmVwYXJlT2Zmc2V0czogZnVuY3Rpb24odCwgZXZlbnQpIHsKCgkJdmFyIGksIGosCgkJCW0gPSAkLnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW3Qub3B0aW9ucy5zY29wZV0gfHwgW10sCgkJCXR5cGUgPSBldmVudCA\\/IGF4aXMub3V0ZXJIZWlnaHQoKSA6IGF4aXMub3V0ZXJXaWR0aCgpOwoKCQkJCQkvL1RoZSBwYWRkaW5nIHR5cGUgaSBoYXZlIHRvIGFwcGx5Li4uCgkJCQkJcGFkUG9zID0gWyAicGFkZGluZyIsCgkJCQkJCS9uZXxud3xuLy50ZXN0KGkpID8gIlRvcCIgOgoJCQkJCQkvc2V8c3d8cy8udGVzdChpKSA\/ICJCb3R0b20iIDoKCQkJCQkJL15lJC8udGVzdChpKSA\/ICJSaWdodCIgOiAiTGVmdCIgXS5qb2luKCIiKTsKCgkJCQkJdGFyZ2V0LmNzcyhwYWRQb3MsIHBhZFdyYXBwZXIpOwoKCQkJCQl0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpOwoKCQkJCX0KCgkJCQkvL1RPRE86IFdoYXQncyB0aGF0IGdvb2QgZm9yPyBUaGVyZSdzIG5vdCBhbnl0aGluZyB0byBiZSBleGVjdXRlZCBsZWZ0CgkJCQlpZighJCh0aGlzLmhhbmRsZXNbaV0pLmxlbmd0aCkgewoJCQkJCWNvbnRpbnVlOwoJCQkJfQoJCQl9CgkJfTsKCgkJLy9UT0RPOiBtYWtlIHJlbmRlckF4aXMgYSBwcm90b3R5cGUgZnVuY3Rpb24KCQl0aGlzLl9yZW5kZXJBeGlzKHRoaXMuZWxlbWVudCk7CgoJCXRoaXMuX2hhbmRsZXMgPSAkKCIudWktcmVzaXphYmxlLWhhbmRsZSIsIHRoaXMuZWxlbWVudCkKCQkJLmRpc2FibGVTZWxlY3Rpb24oKTsKCgkJLy9NYXRjaGluZyBheGlzIG5hbWUKCQl0aGlzLl9oYW5kbGVzLm1vdXNlb3ZlcihmdW5jdGlvbigpIHsKCQkJaWYgKCF0aGF0LnJlc2l6aW5nKSB7CgkJCQlpZiAodGhpcy5jbGFzc05hbWUpIHsKCQkJCQlheGlzID0gdGhpcy5jbGFzc05hbWUubWF0Y2goL3VpLXJlc2l6YWJsZS0oc2V8c3d8bmV8bnd8bnxlfHN8dykvaSk7CgkJCQl9CgkJCQkvL0F4aXMsIGRlZmF1bHQgPSBzZQoJCQkJdGhhdC5heGlzID0gYXhpcyAmJiBheGlzWzFdID8gYXhpc1sxXSA6ICJzZSI7CgkJCX0KCQl9KTsKCgkJLy9JZiB3ZSB3YW50IHRvIGF1dG8gaGlkZSB0aGUgZWxlbWVudHMKCQlpZiAoby5hdXRvSGlkZSkgewoJCQl0aGlzLl9oYW5kbGVzLmhpZGUoKTsKCQkJJCh0aGlzLmVsZW1lbnQpCgkJCQkuYWRkQ2xhc3MoInVpLXJlc2l6YWJsZS1hdXRvaGlkZSIpCgkJCQkubW91c2VlbnRlcihmdW5jdGlvbigpIHsKCQkJCQlpZiAoby5kaXNhYmxlZCkgewoJCQkJCQlyZXR1cm47CgkJCQkJfQoJCQkJCSQodGhpcykucmVtb3ZlQ2xhc3MoInVpLXJlc2l6YWJsZS1hdXRvaGlkZSIpOwoJCQkJCXRoYXQuX2hhbmRsZXMuc2hvdygpOwoJCQkJfSkKCQkJCS5tb3VzZWxlYXZlKGZ1bmN0aW9uKCl7CgkJCQkJaWYgKG8uZGlzYWJsZWQpIHsKCQkJCQkJcmV0dXJuOwoJCQkJCX0KCQkJCQlpZiAoIXRoYXQucmVzaXppbmcpIHsKCQkJCQkJJCh0aGlzKS5hZGRDbGFzcygidWktcmVzaXphYmxlLWF1dG9oaWRlIik7CgkJCQkJCXRoYXQuX2hhbmRsZXMuaGlkZSgpOwoJCQkJCX0KCQkJCX0pOwoJCX0KCgkJLy9Jbml0aWFsaXplIHRoZSBtb3VzZSBpbnRlcmFjdGlvbgoJCXRoaXMuX21vdXNlSW5pdCgpOwoKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoKCQl0aGlzLl9tb3VzZURlc3Ryb3koKTsKCgkJdmFyIHdyYXBwZXIsCgkJCV9kZXN0cm95ID0gZnVuY3Rpb24oZXhwKSB7CgkJCQkkKGV4cCkucmVtb3ZlQ2xhc3MoInVpLXJlc2l6YWJsZSB1aS1yZXNpemFibGUtZGlzYWJsZWQgdWktcmVzaXphYmxlLXJlc2l6aW5nIikKCQkJCQkucmVtb3ZlRGF0YSgicmVzaXphYmxlIikucmVtb3ZlRGF0YSgidWktcmVzaXphYmxlIikudW5iaW5kKCIucmVzaXphYmxlIikuZmluZCgiLnVpLXJlc2l6YWJsZS1oYW5kbGUiKS5yZW1vdmUoKTsKCQkJfTsKCgkJLy9UT0RPOiBVbndyYXAgYXQgc2FtZSBET00gcG9zaXRpb24KCQlpZiAodGhpcy5lbGVtZW50SXNXcmFwcGVyKSB7CgkJCV9kZXN0cm95KHRoaXMuZWxlbWVudCk7CgkJCXdyYXBwZXIgPSB0aGlzLmVsZW1lbnQ7CgkJCXRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyh7CgkJCQlwb3NpdGlvbjogd3JhcHBlci5jc3MoInBvc2l0aW9uIiksCgkJCQl3aWR0aDogd3JhcHBlci5vdXRlcldpZHRoKCksCgkJCQloZWlnaHQ6IHdyYXBwZXIub3V0ZXJIZWlnaHQoKSwKCQkJCXRvcDogd3JhcHBlci5jc3MoInRvcCIpLAoJCQkJbGVmdDogd3JhcHBlci5jc3MoImxlZnQiKQoJCQl9KS5pbnNlcnRBZnRlciggd3JhcHBlciApOwoJCQl3cmFwcGVyLnJlbW92ZSgpOwoJCX0KCgkJdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCJyZXNpemUiLCB0aGlzLm9yaWdpbmFsUmVzaXplU3R5bGUpOwoJCV9kZXN0cm95KHRoaXMub3JpZ2luYWxFbGVtZW50KTsKCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCV9tb3VzZUNhcHR1cmU6IGZ1bmN0aW9uKGV2ZW50KSB7CgkJdmFyIGksIGhhbmRsZSwKCQkJY2FwdHVyZSA9IGZhbHNlOwoKCQlmb3IgKGkgaW4gdGhpcy5oYW5kbGVzKSB7CgkJCWhhbmRsZSA9ICQodGhpcy5oYW5kbGVzW2ldKVswXTsKCQkJaWYgKGhhbmRsZSA9PT0gZXZlbnQudGFyZ2V0IHx8ICQuY29udGFpbnMoaGFuZGxlLCBldmVudC50YXJnZXQpKSB7CgkJCQljYXB0dXJlID0gdHJ1ZTsKCQkJfQoJCX0KCgkJcmV0dXJuICF0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgY2FwdHVyZTsKCX0sCgoJX21vdXNlU3RhcnQ6IGZ1bmN0aW9uKGV2ZW50KSB7CgoJCXZhciBjdXJsZWZ0LCBjdXJ0b3AsIGN1cnNvciwKCQkJbyA9IHRoaXMub3B0aW9ucywKCQkJaW5pUG9zID0gdGhpcy5lbGVtZW50LnBvc2l0aW9uKCksCgkJCWVsID0gdGhpcy5lbGVtZW50OwoKCQl0aGlzLnJlc2l6aW5nID0gdHJ1ZTsKCgkJLy8gYnVnZml4IGZvciBodHRwOi8vZGV2LmpxdWVyeS5jb20vdGlja2V0LzE3NDkKCQlpZiAoICgvYWJzb2x1dGUvKS50ZXN0KCBlbC5jc3MoInBvc2l0aW9uIikgKSApIHsKCQkJZWwuY3NzKHsgcG9zaXRpb246ICJhYnNvbHV0ZSIsIHRvcDogZWwuY3NzKCJ0b3AiKSwgbGVmdDogZWwuY3NzKCJsZWZ0IikgfSk7CgkJfSBlbHNlIGlmIChlbC5pcygiLnVpLWRyYWdnYWJsZSIpKSB7CgkJCWVsLmNzcyh7IHBvc2l0aW9uOiAiYWJzb2x1dGUiLCB0b3A6IGluaVBvcy50b3AsIGxlZnQ6IGluaVBvcy5sZWZ0IH0pOwoJCX0KCgkJdGhpcy5fcmVuZGVyUHJveHkoKTsKCgkJY3VybGVmdCA9IG51bSh0aGlzLmhlbHBlci5jc3MoImxlZnQiKSk7CgkJY3VydG9wID0gbnVtKHRoaXMuaGVscGVyLmNzcygidG9wIikpOwoKCQlpZiAoby5jb250YWlubWVudCkgewoJCQljdXJsZWZ0ICs9ICQoby5jb250YWlubWVudCkuc2Nyb2xsTGVmdCgpIHx8IDA7CgkJCWN1cnRvcCArPSAkKG8uY29udGFpbm1lbnQpLnNjcm9sbFRvcCgpIHx8IDA7CgkJfQoKCQkvL1N0b3JlIG5lZWRlZCB2YXJpYWJsZXMKCQl0aGlzLm9mZnNldCA9IHRoaXMuaGVscGVyLm9mZnNldCgpOwoJCXRoaXMucG9zaXRpb24gPSB7IGxlZnQ6IGN1cmxlZnQsIHRvcDogY3VydG9wIH07CgkJdGhpcy5zaXplID0gdGhpcy5faGVscGVyID8geyB3aWR0aDogZWwub3V0ZXJXaWR0aCgpLCBoZWlnaHQ6IGVsLm91dGVySGVpZ2h0KCkgfSA6IHsgd2lkdGg6IGVsLndpZHRoKCksIGhlaWdodDogZWwuaGVpZ2h0KCkgfTsKCQl0aGlzLm9yaWdpbmFsU2l6ZSA9IHRoaXMuX2hlbHBlciA\/IHsgd2lkdGg6IGVsLm91dGVyV2lkdGgoKSwgaGVpZ2h0OiBlbC5vdXRlckhlaWdodCgpIH0gOiB7IHdpZHRoOiBlbC53aWR0aCgpLCBoZWlnaHQ6IGVsLmhlaWdodCgpIH07CgkJdGhpcy5vcmlnaW5hbFBvc2l0aW9uID0geyBsZWZ0OiBjdXJsZWZ0LCB0b3A6IGN1cnRvcCB9OwoJCXRoaXMuc2l6ZURpZmYgPSB7IHdpZHRoOiBlbC5vdXRlcldpZHRoKCkgLSBlbC53aWR0aCgpLCBoZWlnaHQ6IGVsLm91dGVySGVpZ2h0KCkgLSBlbC5oZWlnaHQoKSB9OwoJCXRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uID0geyBsZWZ0OiBldmVudC5wYWdlWCwgdG9wOiBldmVudC5wYWdlWSB9OwoKCQkvL0FzcGVjdCBSYXRpbwoJCXRoaXMuYXNwZWN0UmF0aW8gPSAodHlwZW9mIG8uYXNwZWN0UmF0aW8gPT09ICJudW1iZXIiKSA\/IG8uYXNwZWN0UmF0aW8gOiAoKHRoaXMub3JpZ2luYWxTaXplLndpZHRoIC8gdGhpcy5vcmlnaW5hbFNpemUuaGVpZ2h0KSB8fCAxKTsKCgkJY3Vyc29yID0gJCgiLnVpLXJlc2l6YWJsZS0iICsgdGhpcy5heGlzKS5jc3MoImN1cnNvciIpOwoJCSQoImJvZHkiKS5jc3MoImN1cnNvciIsIGN1cnNvciA9PT0gImF1dG8iID8gdGhpcy5heGlzICsgIi1yZXNpemUiIDogY3Vyc29yKTsKCgkJZWwuYWRkQ2xhc3MoInVpLXJlc2l6YWJsZS1yZXNpemluZyIpOwoJCXRoaXMuX3Byb3BhZ2F0ZSgic3RhcnQiLCBldmVudCk7CgkJcmV0dXJuIHRydWU7Cgl9LAoKCV9tb3VzZURyYWc6IGZ1bmN0aW9uKGV2ZW50KSB7CgoJCS8vSW5jcmVhc2UgcGVyZm9ybWFuY2UsIGF2b2lkIHJlZ2V4CgkJdmFyIGRhdGEsCgkJCWVsID0gdGhpcy5oZWxwZXIsIHByb3BzID0ge30sCgkJCXNtcCA9IHRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uLAoJCQlhID0gdGhpcy5heGlzLAoJCQlwcmV2VG9wID0gdGhpcy5wb3NpdGlvbi50b3AsCgkJCXByZXZMZWZ0ID0gdGhpcy5wb3NpdGlvbi5sZWZ0LAoJCQlwcmV2V2lkdGggPSB0aGlzLnNpemUud2lkdGgsCgkJCXByZXZIZWlnaHQgPSB0aGlzLnNpemUuaGVpZ2h0LAoJCQlkeCA9IChldmVudC5wYWdlWC1zbXAubGVmdCl8fDAsCgkJCWR5ID0gKGV2ZW50LnBhZ2VZLXNtcC50b3ApfHwwLAoJCQl0cmlnZ2VyID0gdGhpcy5fY2hhbmdlW2FdOwoKCQlpZiAoIXRyaWdnZXIpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJLy8gQ2FsY3VsYXRlIHRoZSBhdHRycyB0aGF0IHdpbGwgYmUgY2hhbmdlCgkJZGF0YSA9IHRyaWdnZXIuYXBwbHkodGhpcywgW2V2ZW50LCBkeCwgZHldKTsKCgkJLy8gUHV0IHRoaXMgaW4gdGhlIG1vdXNlRHJhZyBoYW5kbGVyIHNpbmNlIHRoZSB1c2VyIGNhbiBzdGFydCBwcmVzc2luZyBzaGlmdCB3aGlsZSByZXNpemluZwoJCXRoaXMuX3VwZGF0ZVZpcnR1YWxCb3VuZGFyaWVzKGV2ZW50LnNoaWZ0S2V5KTsKCQlpZiAodGhpcy5fYXNwZWN0UmF0aW8gfHwgZXZlbnQuc2hpZnRLZXkpIHsKCQkJZGF0YSA9IHRoaXMuX3VwZGF0ZVJhdGlvKGRhdGEsIGV2ZW50KTsKCQl9CgoJCWRhdGEgPSB0aGlzLl9yZXNwZWN0U2l6ZShkYXRhLCBldmVudCk7CgoJCXRoaXMuX3VwZGF0ZUNhY2hlKGRhdGEpOwoKCQkvLyBwbHVnaW5zIGNhbGxiYWNrcyBuZWVkIHRvIGJlIGNhbGxlZCBmaXJzdAoJCXRoaXMuX3Byb3BhZ2F0ZSgicmVzaXplIiwgZXZlbnQpOwoKCQlpZiAodGhpcy5wb3NpdGlvbi50b3AgIT09IHByZXZUb3ApIHsKCQkJcHJvcHMudG9wID0gdGhpcy5wb3NpdGlvbi50b3AgKyAicHgiOwoJCX0KCQlpZiAodGhpcy5wb3NpdGlvbi5sZWZ0ICE9PSBwcmV2TGVmdCkgewoJCQlwcm9wcy5sZWZ0ID0gdGhpcy5wb3NpdGlvbi5sZWZ0ICsgInB4IjsKCQl9CgkJaWYgKHRoaXMuc2l6ZS53aWR0aCAhPT0gcHJldldpZHRoKSB7CgkJCXByb3BzLndpZHRoID0gdGhpcy5zaXplLndpZHRoICsgInB4IjsKCQl9CgkJaWYgKHRoaXMuc2l6ZS5oZWlnaHQgIT09IHByZXZIZWlnaHQpIHsKCQkJcHJvcHMuaGVpZ2h0ID0gdGhpcy5zaXplLmhlaWdodCArICJweCI7CgkJfQoJCWVsLmNzcyhwcm9wcyk7CgoJCWlmICghdGhpcy5faGVscGVyICYmIHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoKSB7CgkJCXRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCk7CgkJfQoKCQkvLyBDYWxsIHRoZSB1c2VyIGNhbGxiYWNrIGlmIHRoZSBlbGVtZW50IHdhcyByZXNpemVkCgkJaWYgKCAhICQuaXNFbXB0eU9iamVjdChwcm9wcykgKSB7CgkJCXRoaXMuX3RyaWdnZXIoInJlc2l6ZSIsIGV2ZW50LCB0aGlzLnVpKCkpOwoJCX0KCgkJcmV0dXJuIGZhbHNlOwoJfSwKCglfbW91c2VTdG9wOiBmdW5jdGlvbihldmVudCkgewoKCQl0aGlzLnJlc2l6aW5nID0gZmFsc2U7CgkJdmFyIHByLCBpc3RhLCBzb2Zmc2V0aCwgc29mZnNldHcsIHMsIGxlZnQsIHRvcCwKCQkJbyA9IHRoaXMub3B0aW9ucywgdGhhdCA9IHRoaXM7CgoJCWlmKHRoaXMuX2hlbHBlcikgewoKCQkJcHIgPSB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzOwoJCQlpc3RhID0gcHIubGVuZ3RoICYmICgvdGV4dGFyZWEvaSkudGVzdChwclswXS5ub2RlTmFtZSk7CgkJCXNvZmZzZXRoID0gaXN0YSAmJiAkLnVpLmhhc1Njcm9sbChwclswXSwgImxlZnQiKSAvKiBUT0RPIC0ganVtcCBoZWlnaHQgKi8gPyAwIDogdGhhdC5zaXplRGlmZi5oZWlnaHQ7CgkJCXNvZmZzZXR3ID0gaXN0YSA\/IDAgOiB0aGF0LnNpemVEaWZmLndpZHRoOwoKCQkJcyA9IHsgd2lkdGg6ICh0aGF0LmhlbHBlci53aWR0aCgpICAtIHNvZmZzZXR3KSwgaGVpZ2h0OiAodGhhdC5oZWxwZXIuaGVpZ2h0KCkgLSBzb2Zmc2V0aCkgfTsKCQkJbGVmdCA9IChwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKCJsZWZ0IiksIDEwKSArICh0aGF0LnBvc2l0aW9uLmxlZnQgLSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24ubGVmdCkpIHx8IG51bGw7CgkJCXRvcCA9IChwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKCJ0b3AiKSwgMTApICsgKHRoYXQucG9zaXRpb24udG9wIC0gdGhhdC5vcmlnaW5hbFBvc2l0aW9uLnRvcCkpIHx8IG51bGw7CgoJCQlpZiAoIW8uYW5pbWF0ZSkgewoJCQkJdGhpcy5lbGVtZW50LmNzcygkLmV4dGVuZChzLCB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0IH0pKTsKCQkJfQoKCQkJdGhhdC5oZWxwZXIuaGVpZ2h0KHRoYXQuc2l6ZS5oZWlnaHQpOwoJCQl0aGF0LmhlbHBlci53aWR0aCh0aGF0LnNpemUud2lkdGgpOwoKCQkJaWYgKHRoaXMuX2hlbHBlciAmJiAhby5hbmltYXRlKSB7CgkJCQl0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpOwoJCQl9CgkJfQoKCQkkKCJib2R5IikuY3NzKCJjdXJzb3IiLCAiYXV0byIpOwoKCQl0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoInVpLXJlc2l6YWJsZS1yZXNpemluZyIpOwoKCQl0aGlzLl9wcm9wYWdhdGUoInN0b3AiLCBldmVudCk7CgoJCWlmICh0aGlzLl9oZWxwZXIpIHsKCQkJdGhpcy5oZWxwZXIucmVtb3ZlKCk7CgkJfQoKCQlyZXR1cm4gZmFsc2U7CgoJfSwKCglfdXBkYXRlVmlydHVhbEJvdW5kYXJpZXM6IGZ1bmN0aW9uKGZvcmNlQXNwZWN0UmF0aW8pIHsKCQl2YXIgcE1pbldpZHRoLCBwTWF4V2lkdGgsIHBNaW5IZWlnaHQsIHBNYXhIZWlnaHQsIGIsCgkJCW8gPSB0aGlzLm9wdGlvbnM7CgoJCWIgPSB7CgkJCW1pbldpZHRoOiBpc051bWJlcihvLm1pbldpZHRoKSA\/IG8ubWluV2lkdGggOiAwLAoJCQltYXhXaWR0aDogaXNOdW1iZXIoby5tYXhXaWR0aCkgPyBvLm1heFdpZHRoIDogSW5maW5pdHksCgkJCW1pbkhlaWdodDogaXNOdW1iZXIoby5taW5IZWlnaHQpID8gby5taW5IZWlnaHQgOiAwLAoJCQltYXhIZWlnaHQ6IGlzTnVtYmVyKG8ubWF4SGVpZ2h0KSA\\/IDAgOiB0aGF0LnNpemVEaWZmLmhlaWdodCwKCQkJc29mZnNldHcgPSBpc3RhID8gMCA6IHRoYXQuc2l6ZURpZmYud2lkdGgsCgkJCXN0eWxlID0geyB3aWR0aDogKHRoYXQuc2l6ZS53aWR0aCAtIHNvZmZzZXR3KSwgaGVpZ2h0OiAodGhhdC5zaXplLmhlaWdodCAtIHNvZmZzZXRoKSB9LAoJCQlsZWZ0ID0gKHBhcnNlSW50KHRoYXQuZWxlbWVudC5jc3MoImxlZnQiKSwgMTApICsgKHRoYXQucG9zaXRpb24ubGVmdCAtIHRoYXQub3JpZ2luYWxQb3NpdGlvbi5sZWZ0KSkgfHwgbnVsbCwKCQkJdG9wID0gKHBhcnNlSW50KHRoYXQuZWxlbWVudC5jc3MoInRvcCIpLCAxMCkgKyAodGhhdC5wb3NpdGlvbi50b3AgLSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24udG9wKSkgfHwgbnVsbDsKCgkJdGhhdC5lbGVtZW50LmFuaW1hdGUoCgkJCSQuZXh0ZW5kKHN0eWxlLCB0b3AgJiYgbGVmdCA\/IHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfSA6IHt9KSwgewoJCQkJZHVyYXRpb246IG8uYW5pbWF0ZUR1cmF0aW9uLAoJCQkJZWFzaW5nOiBvLmFuaW1hdGVFYXNpbmcsCgkJCQlzdGVwOiBmdW5jdGlvbigpIHsKCgkJCQkJdmFyIGRhdGEgPSB7CgkJCQkJCXdpZHRoOiBwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKCJ3aWR0aCIpLCAxMCksCgkJCQkJCWhlaWdodDogcGFyc2VJbnQodGhhdC5lbGVtZW50LmNzcygiaGVpZ2h0IiksIDEwKSwKCQkJCQkJdG9wOiBwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKCJ0b3AiKSwgMTApLAoJCQkJCQlsZWZ0OiBwYXJzZUludCh0aGF0LmVsZW1lbnQuY3NzKCJsZWZ0IiksIDEwKQoJCQkJCX07CgoJCQkJCWlmIChwciAmJiBwci5sZW5ndGgpIHsKCQkJCQkJJChwclswXSkuY3NzKHsgd2lkdGg6IGRhdGEud2lkdGgsIGhlaWdodDogZGF0YS5oZWlnaHQgfSk7CgkJCQkJfQoKCQkJCQkvLyBwcm9wYWdhdGluZyByZXNpemUsIGFuZCB1cGRhdGluZyB2YWx1ZXMgZm9yIGVhY2ggYW5pbWF0aW9uIHN0ZXAKCQkJCQl0aGF0Ll91cGRhdGVDYWNoZShkYXRhKTsKCQkJCQl0aGF0Ll9wcm9wYWdhdGUoInJlc2l6ZSIsIGV2ZW50KTsKCgkJCQl9CgkJCX0KCQkpOwoJfQoKfSk7CgokLnVpLnBsdWdpbi5hZGQoInJlc2l6YWJsZSIsICJjb250YWlubWVudCIsIHsKCglzdGFydDogZnVuY3Rpb24oKSB7CgkJdmFyIGVsZW1lbnQsIHAsIGNvLCBjaCwgY3csIHdpZHRoLCBoZWlnaHQsCgkJCXRoYXQgPSAkKHRoaXMpLmRhdGEoInVpLXJlc2l6YWJsZSIpLAoJCQlvID0gdGhhdC5vcHRpb25zLAoJCQllbCA9IHRoYXQuZWxlbWVudCwKCQkJb2MgPSBvLmNvbnRhaW5tZW50LAoJCQljZSA9IChvYyBpbnN0YW5jZW9mICQpID8gb2MuZ2V0KDApIDogKC9wYXJlbnQvLnRlc3Qob2MpKSA\/IGVsLnBhcmVudCgpLmdldCgwKSA6IG9jOwoKCQlpZiAoIWNlKSB7CgkJCXJldHVybjsKCQl9CgoJCXRoYXQuY29udGFpbmVyRWxlbWVudCA9ICQoY2UpOwoKCQlpZiAoL2RvY3VtZW50Ly50ZXN0KG9jKSB8fCBvYyA9PT0gZG9jdW1lbnQpIHsKCQkJdGhhdC5jb250YWluZXJPZmZzZXQgPSB7IGxlZnQ6IDAsIHRvcDogMCB9OwoJCQl0aGF0LmNvbnRhaW5lclBvc2l0aW9uID0geyBsZWZ0OiAwLCB0b3A6IDAgfTsKCgkJCXRoYXQucGFyZW50RGF0YSA9IHsKCQkJCWVsZW1lbnQ6ICQoZG9jdW1lbnQpLCBsZWZ0OiAwLCB0b3A6IDAsCgkJCQl3aWR0aDogJChkb2N1bWVudCkud2lkdGgoKSwgaGVpZ2h0OiAkKGRvY3VtZW50KS5oZWlnaHQoKSB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0CgkJCX07CgkJfQoKCQkvLyBpJ20gYSBub2RlLCBzbyBjb21wdXRlIHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbQoJCWVsc2UgewoJCQllbGVtZW50ID0gJChjZSk7CgkJCXAgPSBbXTsKCQkJJChbICJUb3AiLCAiUmlnaHQiLCAiTGVmdCIsICJCb3R0b20iIF0pLmVhY2goZnVuY3Rpb24oaSwgbmFtZSkgeyBwW2ldID0gbnVtKGVsZW1lbnQuY3NzKCJwYWRkaW5nIiArIG5hbWUpKTsgfSk7CgoJCQl0aGF0LmNvbnRhaW5lck9mZnNldCA9IGVsZW1lbnQub2Zmc2V0KCk7CgkJCXRoYXQuY29udGFpbmVyUG9zaXRpb24gPSBlbGVtZW50LnBvc2l0aW9uKCk7CgkJCXRoYXQuY29udGFpbmVyU2l6ZSA9IHsgaGVpZ2h0OiAoZWxlbWVudC5pbm5lckhlaWdodCgpIC0gcFszXSksIHdpZHRoOiAoZWxlbWVudC5pbm5lcldpZHRoKCkgLSBwWzFdKSB9OwoKCQkJY28gPSB0aGF0LmNvbnRhaW5lck9mZnNldDsKCQkJY2ggPSB0aGF0LmNvbnRhaW5lclNpemUuaGVpZ2h0OwoJCQljdyA9IHRoYXQuY29udGFpbmVyU2l6ZS53aWR0aDsKCQkJd2lkdGggPSAoJC51aS5oYXNTY3JvbGwoY2UsICJsZWZ0IikgPyBjZS5zY3JvbGxXaWR0aCA6IGN3ICk7CgkJCWhlaWdodCA9ICgkLnVpLmhhc1Njcm9sbChjZSkgPyBjZS5zY3JvbGxIZWlnaHQgOiBjaCk7CgoJCQl0aGF0LnBhcmVudERhdGEgPSB7CgkJCQllbGVtZW50OiBjZSwgbGVmdDogY28ubGVmdCwgdG9wOiBjby50b3AsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQKCQkJfTsKCQl9Cgl9LAoKCXJlc2l6ZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciB3b3NldCwgaG9zZXQsIGlzUGFyZW50LCBpc09mZnNldFJlbGF0aXZlLAoJCQl0aGF0ID0gJCh0aGlzKS5kYXRhKCJ1aS1yZXNpemFibGUiKSwKCQkJbyA9IHRoYXQub3B0aW9ucywKCQkJY28gPSB0aGF0LmNvbnRhaW5lck9mZnNldCwgY3AgPSB0aGF0LnBvc2l0aW9uLAoJCQlwUmF0aW8gPSB0aGF0Ll9hc3BlY3RSYXRpbyB8fCBldmVudC5zaGlmdEtleSwKCQkJY29wID0geyB0b3A6MCwgbGVmdDowIH0sIGNlID0gdGhhdC5jb250YWluZXJFbGVtZW50OwoKCQlpZiAoY2VbMF0gIT09IGRvY3VtZW50ICYmICgvc3RhdGljLykudGVzdChjZS5jc3MoInBvc2l0aW9uIikpKSB7CgkJCWNvcCA9IGNvOwoJCX0KCgkJaWYgKGNwLmxlZnQgPCAodGhhdC5faGVscGVyID8gY28ubGVmdCA6IDApKSB7CgkJCXRoYXQuc2l6ZS53aWR0aCA9IHRoYXQuc2l6ZS53aWR0aCArICh0aGF0Ll9oZWxwZXIgPyAodGhhdC5wb3NpdGlvbi5sZWZ0IC0gY28ubGVmdCkgOiAodGhhdC5wb3NpdGlvbi5sZWZ0IC0gY29wLmxlZnQpKTsKCQkJaWYgKHBSYXRpbykgewoJCQkJdGhhdC5zaXplLmhlaWdodCA9IHRoYXQuc2l6ZS53aWR0aCAvIHRoYXQuYXNwZWN0UmF0aW87CgkJCX0KCQkJdGhhdC5wb3NpdGlvbi5sZWZ0ID0gby5oZWxwZXIgPyBjby5sZWZ0IDogMDsKCQl9CgoJCWlmIChjcC50b3AgPCAodGhhdC5faGVscGVyID8gY28udG9wIDogMCkpIHsKCQkJdGhhdC5zaXplLmhlaWdodCA9IHRoYXQuc2l6ZS5oZWlnaHQgKyAodGhhdC5faGVscGVyID8gKHRoYXQucG9zaXRpb24udG9wIC0gY28udG9wKSA6IHRoYXQucG9zaXRpb24udG9wKTsKCQkJaWYgKHBSYXRpbykgewoJCQkJdGhhdC5zaXplLndpZHRoID0gdGhhdC5zaXplLmhlaWdodCAqIHRoYXQuYXNwZWN0UmF0aW87CgkJCX0KCQkJdGhhdC5wb3NpdGlvbi50b3AgPSB0aGF0Ll9oZWxwZXIgPyBjby50b3AgOiAwOwoJCX0KCgkJdGhhdC5vZmZzZXQubGVmdCA9IHRoYXQucGFyZW50RGF0YS5sZWZ0K3RoYXQucG9zaXRpb24ubGVmdDsKCQl0aGF0Lm9mZnNldC50b3AgPSB0aGF0LnBhcmVudERhdGEudG9wK3RoYXQucG9zaXRpb24udG9wOwoKCQl3b3NldCA9IE1hdGguYWJzKCAodGhhdC5faGVscGVyID8gdGhhdC5vZmZzZXQubGVmdCAtIGNvcC5sZWZ0IDogKHRoYXQub2Zmc2V0LmxlZnQgLSBjb3AubGVmdCkpICsgdGhhdC5zaXplRGlmZi53aWR0aCApOwoJCWhvc2V0ID0gTWF0aC5hYnMoICh0aGF0Ll9oZWxwZXIgPyB0aGF0Lm9mZnNldC50b3AgLSBjb3AudG9wIDogKHRoYXQub2Zmc2V0LnRvcCAtIGNvLnRvcCkpICsgdGhhdC5zaXplRGlmZi5oZWlnaHQgKTsKCgkJaXNQYXJlbnQgPSB0aGF0LmNvbnRhaW5lckVsZW1lbnQuZ2V0KDApID09PSB0aGF0LmVsZW1lbnQucGFyZW50KCkuZ2V0KDApOwoJCWlzT2Zmc2V0UmVsYXRpdmUgPSAvcmVsYXRpdmV8YWJzb2x1dGUvLnRlc3QodGhhdC5jb250YWluZXJFbGVtZW50LmNzcygicG9zaXRpb24iKSk7CgoJCWlmKGlzUGFyZW50ICYmIGlzT2Zmc2V0UmVsYXRpdmUpIHsKCQkJd29zZXQgLT0gdGhhdC5wYXJlbnREYXRhLmxlZnQ7CgkJfQoKCQlpZiAod29zZXQgKyB0aGF0LnNpemUud2lkdGggPj0gdGhhdC5wYXJlbnREYXRhLndpZHRoKSB7CgkJCXRoYXQuc2l6ZS53aWR0aCA9IHRoYXQucGFyZW50RGF0YS53aWR0aCAtIHdvc2V0OwoJCQlpZiAocFJhdGlvKSB7CgkJCQl0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5zaXplLndpZHRoIC8gdGhhdC5hc3BlY3RSYXRpbzsKCQkJfQoJCX0KCgkJaWYgKGhvc2V0ICsgdGhhdC5zaXplLmhlaWdodCA+PSB0aGF0LnBhcmVudERhdGEuaGVpZ2h0KSB7CgkJCXRoYXQuc2l6ZS5oZWlnaHQgPSB0aGF0LnBhcmVudERhdGEuaGVpZ2h0IC0gaG9zZXQ7CgkJCWlmIChwUmF0aW8pIHsKCQkJCXRoYXQuc2l6ZS53aWR0aCA9IHRoYXQuc2l6ZS5oZWlnaHQgKiB0aGF0LmFzcGVjdFJhdGlvOwoJCQl9CgkJfQoJfSwKCglzdG9wOiBmdW5jdGlvbigpewoJCXZhciB0aGF0ID0gJCh0aGlzKS5kYXRhKCJ1aS1yZXNpemFibGUiKSwKCQkJbyA9IHRoYXQub3B0aW9ucywKCQkJY28gPSB0aGF0LmNvbnRhaW5lck9mZnNldCwKCQkJY29wID0gdGhhdC5jb250YWluZXJQb3NpdGlvbiwKCQkJY2UgPSB0aGF0LmNvbnRhaW5lckVsZW1lbnQsCgkJCWhlbHBlciA9ICQodGhhdC5oZWxwZXIpLAoJCQlobyA9IGhlbHBlci5vZmZzZXQoKSwKCQkJdyA9IGhlbHBlci5vdXRlcldpZHRoKCkgLSB0aGF0LnNpemVEaWZmLndpZHRoLAoJCQloID0gaGVscGVyLm91dGVySGVpZ2h0KCkgLSB0aGF0LnNpemVEaWZmLmhlaWdodDsKCgkJaWYgKHRoYXQuX2hlbHBlciAmJiAhby5hbmltYXRlICYmICgvcmVsYXRpdmUvKS50ZXN0KGNlLmNzcygicG9zaXRpb24iKSkpIHsKCQkJJCh0aGlzKS5jc3MoeyBsZWZ0OiBoby5sZWZ0IC0gY29wLmxlZnQgLSBjby5sZWZ0LCB3aWR0aDogdywgaGVpZ2h0OiBoIH0pOwoJCX0KCgkJaWYgKHRoYXQuX2hlbHBlciAmJiAhby5hbmltYXRlICYmICgvc3RhdGljLykudGVzdChjZS5jc3MoInBvc2l0aW9uIikpKSB7CgkJCSQodGhpcykuY3NzKHsgbGVmdDogaG8ubGVmdCAtIGNvcC5sZWZ0IC0gY28ubGVmdCwgd2lkdGg6IHcsIGhlaWdodDogaCB9KTsKCQl9CgoJfQp9KTsKCiQudWkucGx1Z2luLmFkZCgicmVzaXphYmxlIiwgImFsc29SZXNpemUiLCB7CgoJc3RhcnQ6IGZ1bmN0aW9uICgpIHsKCQl2YXIgdGhhdCA9ICQodGhpcykuZGF0YSgidWktcmVzaXphYmxlIiksCgkJCW8gPSB0aGF0Lm9wdGlvbnMsCgkJCV9zdG9yZSA9IGZ1bmN0aW9uIChleHApIHsKCQkJCSQoZXhwKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJCXZhciBlbCA9ICQodGhpcyk7CgkJCQkJZWwuZGF0YSgidWktcmVzaXphYmxlLWFsc29yZXNpemUiLCB7CgkJCQkJCXdpZHRoOiBwYXJzZUludChlbC53aWR0aCgpLCAxMCksIGhlaWdodDogcGFyc2VJbnQoZWwuaGVpZ2h0KCksIDEwKSwKCQkJCQkJbGVmdDogcGFyc2VJbnQoZWwuY3NzKCJsZWZ0IiksIDEwKSwgdG9wOiBwYXJzZUludChlbC5jc3MoInRvcCIpLCAxMCkKCQkJCQl9KTsKCQkJCX0pOwoJCQl9OwoKCQlpZiAodHlwZW9mKG8uYWxzb1Jlc2l6ZSkgPT09ICJvYmplY3QiICYmICFvLmFsc29SZXNpemUucGFyZW50Tm9kZSkgewoJCQlpZiAoby5hbHNvUmVzaXplLmxlbmd0aCkgeyBvLmFsc29SZXNpemUgPSBvLmFsc29SZXNpemVbMF07IF9zdG9yZShvLmFsc29SZXNpemUpOyB9CgkJCWVsc2UgeyAkLmVhY2goby5hbHNvUmVzaXplLCBmdW5jdGlvbiAoZXhwKSB7IF9zdG9yZShleHApOyB9KTsgfQoJCX1lbHNlewoJCQlfc3RvcmUoby5hbHNvUmVzaXplKTsKCQl9Cgl9LAoKCXJlc2l6ZTogZnVuY3Rpb24gKGV2ZW50LCB1aSkgewoJCXZhciB0aGF0ID0gJCh0aGlzKS5kYXRhKCJ1aS1yZXNpemFibGUiKSwKCQkJbyA9IHRoYXQub3B0aW9ucywKCQkJb3MgPSB0aGF0Lm9yaWdpbmFsU2l6ZSwKCQkJb3AgPSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24sCgkJCWRlbHRhID0gewoJCQkJaGVpZ2h0OiAodGhhdC5zaXplLmhlaWdodCAtIG9zLmhlaWdodCkgfHwgMCwgd2lkdGg6ICh0aGF0LnNpemUud2lkdGggLSBvcy53aWR0aCkgfHwgMCwKCQkJCXRvcDogKHRoYXQucG9zaXRpb24udG9wIC0gb3AudG9wKSB8fCAwLCBsZWZ0OiAodGhhdC5wb3NpdGlvbi5sZWZ0IC0gb3AubGVmdCkgfHwgMAoJCQl9LAoKCQkJX2Fsc29SZXNpemUgPSBmdW5jdGlvbiAoZXhwLCBjKSB7CgkJCQkkKGV4cCkuZWFjaChmdW5jdGlvbigpIHsKCQkJCQl2YXIgZWwgPSAkKHRoaXMpLCBzdGFydCA9ICQodGhpcykuZGF0YSgidWktcmVzaXphYmxlLWFsc29yZXNpemUiKSwgc3R5bGUgPSB7fSwKCQkJCQkJY3NzID0gYyAmJiBjLmxlbmd0aCA\/IGMgOiBlbC5wYXJlbnRzKHVpLm9yaWdpbmFsRWxlbWVudFswXSkubGVuZ3RoID8gWyJ3aWR0aCIsICJoZWlnaHQiXSA6IFsid2lkdGgiLCAiaGVpZ2h0IiwgInRvcCIsICJsZWZ0Il07CgoJCQkJCSQuZWFjaChjc3MsIGZ1bmN0aW9uIChpLCBwcm9wKSB7CgkJCQkJCXZhciBzdW0gPSAoc3RhcnRbcHJvcF18fDApICsgKGRlbHRhW3Byb3BdfHwwKTsKCQkJCQkJaWYgKHN1bSAmJiBzdW0gPj0gMCkgewoJCQkJCQkJc3R5bGVbcHJvcF0gPSBzdW0gfHwgbnVsbDsKCQkJCQkJfQoJCQkJCX0pOwoKCQkJCQllbC5jc3Moc3R5bGUpOwoJCQkJfSk7CgkJCX07CgoJCWlmICh0eXBlb2Yoby5hbHNvUmVzaXplKSA9PT0gIm9iamVjdCIgJiYgIW8uYWxzb1Jlc2l6ZS5ub2RlVHlwZSkgewoJCQkkLmVhY2goby5hbHNvUmVzaXplLCBmdW5jdGlvbiAoZXhwLCBjKSB7IF9hbHNvUmVzaXplKGV4cCwgYyk7IH0pOwoJCX1lbHNlewoJCQlfYWxzb1Jlc2l6ZShvLmFsc29SZXNpemUpOwoJCX0KCX0sCgoJc3RvcDogZnVuY3Rpb24gKCkgewoJCSQodGhpcykucmVtb3ZlRGF0YSgicmVzaXphYmxlLWFsc29yZXNpemUiKTsKCX0KfSk7CgokLnVpLnBsdWdpbi5hZGQoInJlc2l6YWJsZSIsICJnaG9zdCIsIHsKCglzdGFydDogZnVuY3Rpb24oKSB7CgoJCXZhciB0aGF0ID0gJCh0aGlzKS5kYXRhKCJ1aS1yZXNpemFibGUiKSwgbyA9IHRoYXQub3B0aW9ucywgY3MgPSB0aGF0LnNpemU7CgoJCXRoYXQuZ2hvc3QgPSB0aGF0Lm9yaWdpbmFsRWxlbWVudC5jbG9uZSgpOwoJCXRoYXQuZ2hvc3QKCQkJLmNzcyh7IG9wYWNpdHk6IDAuMjUsIGRpc3BsYXk6ICJibG9jayIsIHBvc2l0aW9uOiAicmVsYXRpdmUiLCBoZWlnaHQ6IGNzLmhlaWdodCwgd2lkdGg6IGNzLndpZHRoLCBtYXJnaW46IDAsIGxlZnQ6IDAsIHRvcDogMCB9KQoJCQkuYWRkQ2xhc3MoInVpLXJlc2l6YWJsZS1naG9zdCIpCgkJCS5hZGRDbGFzcyh0eXBlb2Ygby5naG9zdCA9PT0gInN0cmluZyIgPyBvLmdob3N0IDogIiIpOwoKCQl0aGF0Lmdob3N0LmFwcGVuZFRvKHRoYXQuaGVscGVyKTsKCgl9LAoKCXJlc2l6ZTogZnVuY3Rpb24oKXsKCQl2YXIgdGhhdCA9ICQodGhpcykuZGF0YSgidWktcmVzaXphYmxlIik7CgkJaWYgKHRoYXQuZ2hvc3QpIHsKCQkJdGhhdC5naG9zdC5jc3MoeyBwb3NpdGlvbjogInJlbGF0aXZlIiwgaGVpZ2h0OiB0aGF0LnNpemUuaGVpZ2h0LCB3aWR0aDogdGhhdC5zaXplLndpZHRoIH0pOwoJCX0KCX0sCgoJc3RvcDogZnVuY3Rpb24oKSB7CgkJdmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoInVpLXJlc2l6YWJsZSIpOwoJCWlmICh0aGF0Lmdob3N0ICYmIHRoYXQuaGVscGVyKSB7CgkJCXRoYXQuaGVscGVyLmdldCgwKS5yZW1vdmVDaGlsZCh0aGF0Lmdob3N0LmdldCgwKSk7CgkJfQoJfQoKfSk7CgokLnVpLnBsdWdpbi5hZGQoInJlc2l6YWJsZSIsICJncmlkIiwgewoKCXJlc2l6ZTogZnVuY3Rpb24oKSB7CgkJdmFyIHRoYXQgPSAkKHRoaXMpLmRhdGEoInVpLXJlc2l6YWJsZSIpLAoJCQlvID0gdGhhdC5vcHRpb25zLAoJCQljcyA9IHRoYXQuc2l6ZSwKCQkJb3MgPSB0aGF0Lm9yaWdpbmFsU2l6ZSwKCQkJb3AgPSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24sCgkJCWEgPSB0aGF0LmF4aXMsCgkJCWdyaWQgPSB0eXBlb2Ygby5ncmlkID09PSAibnVtYmVyIiA\/IFtvLmdyaWQsIG8uZ3JpZF0gOiBvLmdyaWQsCgkJCWdyaWRYID0gKGdyaWRbMF18fDEpLAoJCQlncmlkWSA9IChncmlkWzFdfHwxKSwKCQkJb3ggPSBNYXRoLnJvdW5kKChjcy53aWR0aCAtIG9zLndpZHRoKSAvIGdyaWRYKSAqIGdyaWRYLAoJCQlveSA9IE1hdGgucm91bmQoKGNzLmhlaWdodCAtIG9zLmhlaWdodCkgLyBncmlkWSkgKiBncmlkWSwKCQkJbmV3V2lkdGggPSBvcy53aWR0aCArIG94LAoJCQluZXdIZWlnaHQgPSBvcy5oZWlnaHQgKyBveSwKCQkJaXNNYXhXaWR0aCA9IG8ubWF4V2lkdGggJiYgKG8ubWF4V2lkdGggPCBuZXdXaWR0aCksCgkJCWlzTWF4SGVpZ2h0ID0gby5tYXhIZWlnaHQgJiYgKG8ubWF4SGVpZ2h0IDwgbmV3SGVpZ2h0KSwKCQkJaXNNaW5XaWR0aCA9IG8ubWluV2lkdGggJiYgKG8ubWluV2lkdGggPiBuZXdXaWR0aCksCgkJCWlzTWluSGVpZ2h0ID0gby5taW5IZWlnaHQgJiYgKG8ubWluSGVpZ2h0ID4gbmV3SGVpZ2h0KTsKCgkJby5ncmlkID0gZ3JpZDsKCgkJaWYgKGlzTWluV2lkdGgpIHsKCQkJbmV3V2lkdGggPSBuZXdXaWR0aCArIGdyaWRYOwoJCX0KCQlpZiAoaXNNaW5IZWlnaHQpIHsKCQkJbmV3SGVpZ2h0ID0gbmV3SGVpZ2h0ICsgZ3JpZFk7CgkJfQoJCWlmIChpc01heFdpZHRoKSB7CgkJCW5ld1dpZHRoID0gbmV3V2lkdGggLSBncmlkWDsKCQl9CgkJaWYgKGlzTWF4SGVpZ2h0KSB7CgkJCW5ld0hlaWdodCA9IG5ld0hlaWdodCAtIGdyaWRZOwoJCX0KCgkJaWYgKC9eKHNlfHN8ZSkkLy50ZXN0KGEpKSB7CgkJCXRoYXQuc2l6ZS53aWR0aCA9IG5ld1dpZHRoOwoJCQl0aGF0LnNpemUuaGVpZ2h0ID0gbmV3SGVpZ2h0OwoJCX0gZWxzZSBpZiAoL14obmUpJC8udGVzdChhKSkgewoJCQl0aGF0LnNpemUud2lkdGggPSBuZXdXaWR0aDsKCQkJdGhhdC5zaXplLmhlaWdodCA9IG5ld0hlaWdodDsKCQkJdGhhdC5wb3NpdGlvbi50b3AgPSBvcC50b3AgLSBveTsKCQl9IGVsc2UgaWYgKC9eKHN3KSQvLnRlc3QoYSkpIHsKCQkJdGhhdC5zaXplLndpZHRoID0gbmV3V2lkdGg7CgkJCXRoYXQuc2l6ZS5oZWlnaHQgPSBuZXdIZWlnaHQ7CgkJCXRoYXQucG9zaXRpb24ubGVmdCA9IG9wLmxlZnQgLSBveDsKCQl9IGVsc2UgewoJCQl0aGF0LnNpemUud2lkdGggPSBuZXdXaWR0aDsKCQkJdGhhdC5zaXplLmhlaWdodCA9IG5ld0hlaWdodDsKCQkJdGhhdC5wb3NpdGlvbi50b3AgPSBvcC50b3AgLSBveTsKCQkJdGhhdC5wb3NpdGlvbi5sZWZ0ID0gb3AubGVmdCAtIG94OwoJCX0KCX0KCn0pOwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCgidWkuc2VsZWN0YWJsZSIsICQudWkubW91c2UsIHsKCXZlcnNpb246ICIxLjEwLjMiLAoJb3B0aW9uczogewoJCWFwcGVuZFRvOiAiYm9keSIsCgkJYXV0b1JlZnJlc2g6IHRydWUsCgkJZGlzdGFuY2U6IDAsCgkJZmlsdGVyOiAiKiIsCgkJdG9sZXJhbmNlOiAidG91Y2giLAoKCQkvLyBjYWxsYmFja3MKCQlzZWxlY3RlZDogbnVsbCwKCQlzZWxlY3Rpbmc6IG51bGwsCgkJc3RhcnQ6IG51bGwsCgkJc3RvcDogbnVsbCwKCQl1bnNlbGVjdGVkOiBudWxsLAoJCXVuc2VsZWN0aW5nOiBudWxsCgl9LAoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdmFyIHNlbGVjdGVlcywKCQkJdGhhdCA9IHRoaXM7CgoJCXRoaXMuZWxlbWVudC5hZGRDbGFzcygidWktc2VsZWN0YWJsZSIpOwoKCQl0aGlzLmRyYWdnZWQgPSBmYWxzZTsKCgkJLy8gY2FjaGUgc2VsZWN0ZWUgY2hpbGRyZW4gYmFzZWQgb24gZmlsdGVyCgkJdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24oKSB7CgkJCXNlbGVjdGVlcyA9ICQodGhhdC5vcHRpb25zLmZpbHRlciwgdGhhdC5lbGVtZW50WzBdKTsKCQkJc2VsZWN0ZWVzLmFkZENsYXNzKCJ1aS1zZWxlY3RlZSIpOwoJCQlzZWxlY3RlZXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciAkdGhpcyA9ICQodGhpcyksCgkJCQkJcG9zID0gJHRoaXMub2Zmc2V0KCk7CgkJCQkkLmRhdGEodGhpcywgInNlbGVjdGFibGUtaXRlbSIsIHsKCQkJCQllbGVtZW50OiB0aGlzLAoJCQkJCSRlbGVtZW50OiAkdGhpcywKCQkJCQlsZWZ0OiBwb3MubGVmdCwKCQkJCQl0b3A6IHBvcy50b3AsCgkJCQkJcmlnaHQ6IHBvcy5sZWZ0ICsgJHRoaXMub3V0ZXJXaWR0aCgpLAoJCQkJCWJvdHRvbTogcG9zLnRvcCArICR0aGlzLm91dGVySGVpZ2h0KCksCgkJCQkJc3RhcnRzZWxlY3RlZDogZmFsc2UsCgkJCQkJc2VsZWN0ZWQ6ICR0aGlzLmhhc0NsYXNzKCJ1aS1zZWxlY3RlZCIpLAoJCQkJCXNlbGVjdGluZzogJHRoaXMuaGFzQ2xhc3MoInVpLXNlbGVjdGluZyIpLAoJCQkJCXVuc2VsZWN0aW5nOiAkdGhpcy5oYXNDbGFzcygidWktdW5zZWxlY3RpbmciKQoJCQkJfSk7CgkJCX0pOwoJCX07CgkJdGhpcy5yZWZyZXNoKCk7CgoJCXRoaXMuc2VsZWN0ZWVzID0gc2VsZWN0ZWVzLmFkZENsYXNzKCJ1aS1zZWxlY3RlZSIpOwoKCQl0aGlzLl9tb3VzZUluaXQoKTsKCgkJdGhpcy5oZWxwZXIgPSAkKCI8ZGl2IGNsYXNzPSd1aS1zZWxlY3RhYmxlLWhlbHBlcic+PC9kaXY+Iik7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLnNlbGVjdGVlcwoJCQkucmVtb3ZlQ2xhc3MoInVpLXNlbGVjdGVlIikKCQkJLnJlbW92ZURhdGEoInNlbGVjdGFibGUtaXRlbSIpOwoJCXRoaXMuZWxlbWVudAoJCQkucmVtb3ZlQ2xhc3MoInVpLXNlbGVjdGFibGUgdWktc2VsZWN0YWJsZS1kaXNhYmxlZCIpOwoJCXRoaXMuX21vdXNlRGVzdHJveSgpOwoJfSwKCglfbW91c2VTdGFydDogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgoJCXRoaXMub3BvcyA9IFtldmVudC5wYWdlWCwgZXZlbnQucGFnZVldOwoKCQlpZiAodGhpcy5vcHRpb25zLmRpc2FibGVkKSB7CgkJCXJldHVybjsKCQl9CgoJCXRoaXMuc2VsZWN0ZWVzID0gJChvcHRpb25zLmZpbHRlciwgdGhpcy5lbGVtZW50WzBdKTsKCgkJdGhpcy5fdHJpZ2dlcigic3RhcnQiLCBldmVudCk7CgoJCSQob3B0aW9ucy5hcHBlbmRUbykuYXBwZW5kKHRoaXMuaGVscGVyKTsKCQkvLyBwb3NpdGlvbiBoZWxwZXIgKGxhc3NvKQoJCXRoaXMuaGVscGVyLmNzcyh7CgkJCSJsZWZ0IjogZXZlbnQucGFnZVgsCgkJCSJ0b3AiOiBldmVudC5wYWdlWSwKCQkJIndpZHRoIjogMCwKCQkJImhlaWdodCI6IDAKCQl9KTsKCgkJaWYgKG9wdGlvbnMuYXV0b1JlZnJlc2gpIHsKCQkJdGhpcy5yZWZyZXNoKCk7CgkJfQoKCQl0aGlzLnNlbGVjdGVlcy5maWx0ZXIoIi51aS1zZWxlY3RlZCIpLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciBzZWxlY3RlZSA9ICQuZGF0YSh0aGlzLCAic2VsZWN0YWJsZS1pdGVtIik7CgkJCXNlbGVjdGVlLnN0YXJ0c2VsZWN0ZWQgPSB0cnVlOwoJCQlpZiAoIWV2ZW50Lm1ldGFLZXkgJiYgIWV2ZW50LmN0cmxLZXkpIHsKCQkJCXNlbGVjdGVlLiRlbGVtZW50LnJlbW92ZUNsYXNzKCJ1aS1zZWxlY3RlZCIpOwoJCQkJc2VsZWN0ZWUuc2VsZWN0ZWQgPSBmYWxzZTsKCQkJCXNlbGVjdGVlLiRlbGVtZW50LmFkZENsYXNzKCJ1aS11bnNlbGVjdGluZyIpOwoJCQkJc2VsZWN0ZWUudW5zZWxlY3RpbmcgPSB0cnVlOwoJCQkJLy8gc2VsZWN0YWJsZSBVTlNFTEVDVElORyBjYWxsYmFjawoJCQkJdGhhdC5fdHJpZ2dlcigidW5zZWxlY3RpbmciLCBldmVudCwgewoJCQkJCXVuc2VsZWN0aW5nOiBzZWxlY3RlZS5lbGVtZW50CgkJCQl9KTsKCQkJfQoJCX0pOwoKCQkkKGV2ZW50LnRhcmdldCkucGFyZW50cygpLmFkZEJhY2soKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgZG9TZWxlY3QsCgkJCQlzZWxlY3RlZSA9ICQuZGF0YSh0aGlzLCAic2VsZWN0YWJsZS1pdGVtIik7CgkJCWlmIChzZWxlY3RlZSkgewoJCQkJZG9TZWxlY3QgPSAoIWV2ZW50Lm1ldGFLZXkgJiYgIWV2ZW50LmN0cmxLZXkpIHx8ICFzZWxlY3RlZS4kZWxlbWVudC5oYXNDbGFzcygidWktc2VsZWN0ZWQiKTsKCQkJCXNlbGVjdGVlLiRlbGVtZW50CgkJCQkJLnJlbW92ZUNsYXNzKGRvU2VsZWN0ID8gInVpLXVuc2VsZWN0aW5nIiA6ICJ1aS1zZWxlY3RlZCIpCgkJCQkJLmFkZENsYXNzKGRvU2VsZWN0ID8gInVpLXNlbGVjdGluZyIgOiAidWktdW5zZWxlY3RpbmciKTsKCQkJCXNlbGVjdGVlLnVuc2VsZWN0aW5nID0gIWRvU2VsZWN0OwoJCQkJc2VsZWN0ZWUuc2VsZWN0aW5nID0gZG9TZWxlY3Q7CgkJCQlzZWxlY3RlZS5zZWxlY3RlZCA9IGRvU2VsZWN0OwoJCQkJLy8gc2VsZWN0YWJsZSAoVU4pU0VMRUNUSU5HIGNhbGxiYWNrCgkJCQlpZiAoZG9TZWxlY3QpIHsKCQkJCQl0aGF0Ll90cmlnZ2VyKCJzZWxlY3RpbmciLCBldmVudCwgewoJCQkJCQlzZWxlY3Rpbmc6IHNlbGVjdGVlLmVsZW1lbnQKCQkJCQl9KTsKCQkJCX0gZWxzZSB7CgkJCQkJdGhhdC5fdHJpZ2dlcigidW5zZWxlY3RpbmciLCBldmVudCwgewoJCQkJCQl1bnNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudAoJCQkJCX0pOwoJCQkJfQoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfSk7CgoJfSwKCglfbW91c2VEcmFnOiBmdW5jdGlvbihldmVudCkgewoKCQl0aGlzLmRyYWdnZWQgPSB0cnVlOwoKCQlpZiAodGhpcy5vcHRpb25zLmRpc2FibGVkKSB7CgkJCXJldHVybjsKCQl9CgoJCXZhciB0bXAsCgkJCXRoYXQgPSB0aGlzLAoJCQlvcHRpb25zID0gdGhpcy5vcHRpb25zLAoJCQl4MSA9IHRoaXMub3Bvc1swXSwKCQkJeTEgPSB0aGlzLm9wb3NbMV0sCgkJCXgyID0gZXZlbnQucGFnZVgsCgkJCXkyID0gZXZlbnQucGFnZVk7CgoJCWlmICh4MSA+IHgyKSB7IHRtcCA9IHgyOyB4MiA9IHgxOyB4MSA9IHRtcDsgfQoJCWlmICh5MSA+IHkyKSB7IHRtcCA9IHkyOyB5MiA9IHkxOyB5MSA9IHRtcDsgfQoJCXRoaXMuaGVscGVyLmNzcyh7bGVmdDogeDEsIHRvcDogeTEsIHdpZHRoOiB4Mi14MSwgaGVpZ2h0OiB5Mi15MX0pOwoKCQl0aGlzLnNlbGVjdGVlcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgc2VsZWN0ZWUgPSAkLmRhdGEodGhpcywgInNlbGVjdGFibGUtaXRlbSIpLAoJCQkJaGl0ID0gZmFsc2U7CgoJCQkvL3ByZXZlbnQgaGVscGVyIGZyb20gYmVpbmcgc2VsZWN0ZWQgaWYgYXBwZW5kVG86IHNlbGVjdGFibGUKCQkJaWYgKCFzZWxlY3RlZSB8fCBzZWxlY3RlZS5lbGVtZW50ID09PSB0aGF0LmVsZW1lbnRbMF0pIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJaWYgKG9wdGlvbnMudG9sZXJhbmNlID09PSAidG91Y2giKSB7CgkJCQloaXQgPSAoICEoc2VsZWN0ZWUubGVmdCA+IHgyIHx8IHNlbGVjdGVlLnJpZ2h0IDwgeDEgfHwgc2VsZWN0ZWUudG9wID4geTIgfHwgc2VsZWN0ZWUuYm90dG9tIDwgeTEpICk7CgkJCX0gZWxzZSBpZiAob3B0aW9ucy50b2xlcmFuY2UgPT09ICJmaXQiKSB7CgkJCQloaXQgPSAoc2VsZWN0ZWUubGVmdCA+IHgxICYmIHNlbGVjdGVlLnJpZ2h0IDwgeDIgJiYgc2VsZWN0ZWUudG9wID4geTEgJiYgc2VsZWN0ZWUuYm90dG9tIDwgeTIpOwoJCQl9CgoJCQlpZiAoaGl0KSB7CgkJCQkvLyBTRUxFQ1QKCQkJCWlmIChzZWxlY3RlZS5zZWxlY3RlZCkgewoJCQkJCXNlbGVjdGVlLiRlbGVtZW50LnJlbW92ZUNsYXNzKCJ1aS1zZWxlY3RlZCIpOwoJCQkJCXNlbGVjdGVlLnNlbGVjdGVkID0gZmFsc2U7CgkJCQl9CgkJCQlpZiAoc2VsZWN0ZWUudW5zZWxlY3RpbmcpIHsKCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcygidWktdW5zZWxlY3RpbmciKTsKCQkJCQlzZWxlY3RlZS51bnNlbGVjdGluZyA9IGZhbHNlOwoJCQkJfQoJCQkJaWYgKCFzZWxlY3RlZS5zZWxlY3RpbmcpIHsKCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5hZGRDbGFzcygidWktc2VsZWN0aW5nIik7CgkJCQkJc2VsZWN0ZWUuc2VsZWN0aW5nID0gdHJ1ZTsKCQkJCQkvLyBzZWxlY3RhYmxlIFNFTEVDVElORyBjYWxsYmFjawoJCQkJCXRoYXQuX3RyaWdnZXIoInNlbGVjdGluZyIsIGV2ZW50LCB7CgkJCQkJCXNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudAoJCQkJCX0pOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJLy8gVU5TRUxFQ1QKCQkJCWlmIChzZWxlY3RlZS5zZWxlY3RpbmcpIHsKCQkJCQlpZiAoKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSkgJiYgc2VsZWN0ZWUuc3RhcnRzZWxlY3RlZCkgewoJCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcygidWktc2VsZWN0aW5nIik7CgkJCQkJCXNlbGVjdGVlLnNlbGVjdGluZyA9IGZhbHNlOwoJCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5hZGRDbGFzcygidWktc2VsZWN0ZWQiKTsKCQkJCQkJc2VsZWN0ZWUuc2VsZWN0ZWQgPSB0cnVlOwoJCQkJCX0gZWxzZSB7CgkJCQkJCXNlbGVjdGVlLiRlbGVtZW50LnJlbW92ZUNsYXNzKCJ1aS1zZWxlY3RpbmciKTsKCQkJCQkJc2VsZWN0ZWUuc2VsZWN0aW5nID0gZmFsc2U7CgkJCQkJCWlmIChzZWxlY3RlZS5zdGFydHNlbGVjdGVkKSB7CgkJCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5hZGRDbGFzcygidWktdW5zZWxlY3RpbmciKTsKCQkJCQkJCXNlbGVjdGVlLnVuc2VsZWN0aW5nID0gdHJ1ZTsKCQkJCQkJfQoJCQkJCQkvLyBzZWxlY3RhYmxlIFVOU0VMRUNUSU5HIGNhbGxiYWNrCgkJCQkJCXRoYXQuX3RyaWdnZXIoInVuc2VsZWN0aW5nIiwgZXZlbnQsIHsKCQkJCQkJCXVuc2VsZWN0aW5nOiBzZWxlY3RlZS5lbGVtZW50CgkJCQkJCX0pOwoJCQkJCX0KCQkJCX0KCQkJCWlmIChzZWxlY3RlZS5zZWxlY3RlZCkgewoJCQkJCWlmICghZXZlbnQubWV0YUtleSAmJiAhZXZlbnQuY3RybEtleSAmJiAhc2VsZWN0ZWUuc3RhcnRzZWxlY3RlZCkgewoJCQkJCQlzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcygidWktc2VsZWN0ZWQiKTsKCQkJCQkJc2VsZWN0ZWUuc2VsZWN0ZWQgPSBmYWxzZTsKCgkJCQkJCXNlbGVjdGVlLiRlbGVtZW50LmFkZENsYXNzKCJ1aS11bnNlbGVjdGluZyIpOwoJCQkJCQlzZWxlY3RlZS51bnNlbGVjdGluZyA9IHRydWU7CgkJCQkJCS8vIHNlbGVjdGFibGUgVU5TRUxFQ1RJTkcgY2FsbGJhY2sKCQkJCQkJdGhhdC5fdHJpZ2dlcigidW5zZWxlY3RpbmciLCBldmVudCwgewoJCQkJCQkJdW5zZWxlY3Rpbmc6IHNlbGVjdGVlLmVsZW1lbnQKCQkJCQkJfSk7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfSk7CgoJCXJldHVybiBmYWxzZTsKCX0sCgoJX21vdXNlU3RvcDogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgdGhhdCA9IHRoaXM7CgoJCXRoaXMuZHJhZ2dlZCA9IGZhbHNlOwoKCQkkKCIudWktdW5zZWxlY3RpbmciLCB0aGlzLmVsZW1lbnRbMF0pLmVhY2goZnVuY3Rpb24oKSB7CgkJCXZhciBzZWxlY3RlZSA9ICQuZGF0YSh0aGlzLCAic2VsZWN0YWJsZS1pdGVtIik7CgkJCXNlbGVjdGVlLiRlbGVtZW50LnJlbW92ZUNsYXNzKCJ1aS11bnNlbGVjdGluZyIpOwoJCQlzZWxlY3RlZS51bnNlbGVjdGluZyA9IGZhbHNlOwoJCQlzZWxlY3RlZS5zdGFydHNlbGVjdGVkID0gZmFsc2U7CgkJCXRoYXQuX3RyaWdnZXIoInVuc2VsZWN0ZWQiLCBldmVudCwgewoJCQkJdW5zZWxlY3RlZDogc2VsZWN0ZWUuZWxlbWVudAoJCQl9KTsKCQl9KTsKCQkkKCIudWktc2VsZWN0aW5nIiwgdGhpcy5lbGVtZW50WzBdKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgc2VsZWN0ZWUgPSAkLmRhdGEodGhpcywgInNlbGVjdGFibGUtaXRlbSIpOwoJCQlzZWxlY3RlZS4kZWxlbWVudC5yZW1vdmVDbGFzcygidWktc2VsZWN0aW5nIikuYWRkQ2xhc3MoInVpLXNlbGVjdGVkIik7CgkJCXNlbGVjdGVlLnNlbGVjdGluZyA9IGZhbHNlOwoJCQlzZWxlY3RlZS5zZWxlY3RlZCA9IHRydWU7CgkJCXNlbGVjdGVlLnN0YXJ0c2VsZWN0ZWQgPSB0cnVlOwoJCQl0aGF0Ll90cmlnZ2VyKCJzZWxlY3RlZCIsIGV2ZW50LCB7CgkJCQlzZWxlY3RlZDogc2VsZWN0ZWUuZWxlbWVudAoJCQl9KTsKCQl9KTsKCQl0aGlzLl90cmlnZ2VyKCJzdG9wIiwgZXZlbnQpOwoKCQl0aGlzLmhlbHBlci5yZW1vdmUoKTsKCgkJcmV0dXJuIGZhbHNlOwoJfQoKfSk7Cgp9KShqUXVlcnkpOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCi8qanNoaW50IGxvb3BmdW5jOiB0cnVlICovCgpmdW5jdGlvbiBpc092ZXJBeGlzKCB4LCByZWZlcmVuY2UsIHNpemUgKSB7CglyZXR1cm4gKCB4ID4gcmVmZXJlbmNlICkgJiYgKCB4IDwgKCByZWZlcmVuY2UgKyBzaXplICkgKTsKfQoKZnVuY3Rpb24gaXNGbG9hdGluZyhpdGVtKSB7CglyZXR1cm4gKC9sZWZ0fHJpZ2h0LykudGVzdChpdGVtLmNzcygiZmxvYXQiKSkgfHwgKC9pbmxpbmV8dGFibGUtY2VsbC8pLnRlc3QoaXRlbS5jc3MoImRpc3BsYXkiKSk7Cn0KCiQud2lkZ2V0KCJ1aS5zb3J0YWJsZSIsICQudWkubW91c2UsIHsKCXZlcnNpb246ICIxLjEwLjMiLAoJd2lkZ2V0RXZlbnRQcmVmaXg6ICJzb3J0IiwKCXJlYWR5OiBmYWxzZSwKCW9wdGlvbnM6IHsKCQlhcHBlbmRUbzogInBhcmVudCIsCgkJYXhpczogZmFsc2UsCgkJY29ubmVjdFdpdGg6IGZhbHNlLAoJCWNvbnRhaW5tZW50OiBmYWxzZSwKCQljdXJzb3I6ICJhdXRvIiwKCQljdXJzb3JBdDogZmFsc2UsCgkJZHJvcE9uRW1wdHk6IHRydWUsCgkJZm9yY2VQbGFjZWhvbGRlclNpemU6IGZhbHNlLAoJCWZvcmNlSGVscGVyU2l6ZTogZmFsc2UsCgkJZ3JpZDogZmFsc2UsCgkJaGFuZGxlOiBmYWxzZSwKCQloZWxwZXI6ICJvcmlnaW5hbCIsCgkJaXRlbXM6ICI+ICoiLAoJCW9wYWNpdHk6IGZhbHNlLAoJCXBsYWNlaG9sZGVyOiBmYWxzZSwKCQlyZXZlcnQ6IGZhbHNlLAoJCXNjcm9sbDogdHJ1ZSwKCQlzY3JvbGxTZW5zaXRpdml0eTogMjAsCgkJc2Nyb2xsU3BlZWQ6IDIwLAoJCXNjb3BlOiAiZGVmYXVsdCIsCgkJdG9sZXJhbmNlOiAiaW50ZXJzZWN0IiwKCQl6SW5kZXg6IDEwMDAsCgoJCS8vIGNhbGxiYWNrcwoJCWFjdGl2YXRlOiBudWxsLAoJCWJlZm9yZVN0b3A6IG51bGwsCgkJY2hhbmdlOiBudWxsLAoJCWRlYWN0aXZhdGU6IG51bGwsCgkJb3V0OiBudWxsLAoJCW92ZXI6IG51bGwsCgkJcmVjZWl2ZTogbnVsbCwKCQlyZW1vdmU6IG51bGwsCgkJc29ydDogbnVsbCwKCQlzdGFydDogbnVsbCwKCQlzdG9wOiBudWxsLAoJCXVwZGF0ZTogbnVsbAoJfSwKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoKCQl2YXIgbyA9IHRoaXMub3B0aW9uczsKCQl0aGlzLmNvbnRhaW5lckNhY2hlID0ge307CgkJdGhpcy5lbGVtZW50LmFkZENsYXNzKCJ1aS1zb3J0YWJsZSIpOwoKCQkvL0dldCB0aGUgaXRlbXMKCQl0aGlzLnJlZnJlc2goKTsKCgkJLy9MZXQncyBkZXRlcm1pbmUgaWYgdGhlIGl0ZW1zIGFyZSBiZWluZyBkaXNwbGF5ZWQgaG9yaXpvbnRhbGx5CgkJdGhpcy5mbG9hdGluZyA9IHRoaXMuaXRlbXMubGVuZ3RoID8gby5heGlzID09PSAieCIgfHwgaXNGbG9hdGluZyh0aGlzLml0ZW1zWzBdLml0ZW0pIDogZmFsc2U7CgoJCS8vTGV0J3MgZGV0ZXJtaW5lIHRoZSBwYXJlbnQncyBvZmZzZXQKCQl0aGlzLm9mZnNldCA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKTsKCgkJLy9Jbml0aWFsaXplIG1vdXNlIGV2ZW50cyBmb3IgaW50ZXJhY3Rpb24KCQl0aGlzLl9tb3VzZUluaXQoKTsKCgkJLy9XZSdyZSByZWFkeSB0byBnbwoJCXRoaXMucmVhZHkgPSB0cnVlOwoKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudAoJCQkucmVtb3ZlQ2xhc3MoInVpLXNvcnRhYmxlIHVpLXNvcnRhYmxlLWRpc2FibGVkIik7CgkJdGhpcy5fbW91c2VEZXN0cm95KCk7CgoJCWZvciAoIHZhciBpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHsKCQkJdGhpcy5pdGVtc1tpXS5pdGVtLnJlbW92ZURhdGEodGhpcy53aWRnZXROYW1lICsgIi1pdGVtIik7CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7CgkJaWYgKCBrZXkgPT09ICJkaXNhYmxlZCIgKSB7CgkJCXRoaXMub3B0aW9uc1sga2V5IF0gPSB2YWx1ZTsKCgkJCXRoaXMud2lkZ2V0KCkudG9nZ2xlQ2xhc3MoICJ1aS1zb3J0YWJsZS1kaXNhYmxlZCIsICEhdmFsdWUgKTsKCQl9IGVsc2UgewoJCQkvLyBEb24ndCBjYWxsIHdpZGdldCBiYXNlIF9zZXRPcHRpb24gZm9yIGRpc2FibGUgYXMgaXQgYWRkcyB1aS1zdGF0ZS1kaXNhYmxlZCBjbGFzcwoJCQkkLldpZGdldC5wcm90b3R5cGUuX3NldE9wdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCX0KCX0sCgoJX21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oZXZlbnQsIG92ZXJyaWRlSGFuZGxlKSB7CgkJdmFyIGN1cnJlbnRJdGVtID0gbnVsbCwKCQkJdmFsaWRIYW5kbGUgPSBmYWxzZSwKCQkJdGhhdCA9IHRoaXM7CgoJCWlmICh0aGlzLnJldmVydGluZykgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlpZih0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5vcHRpb25zLnR5cGUgPT09ICJzdGF0aWMiKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCS8vV2UgaGF2ZSB0byByZWZyZXNoIHRoZSBpdGVtcyBkYXRhIG9uY2UgZmlyc3QKCQl0aGlzLl9yZWZyZXNoSXRlbXMoZXZlbnQpOwoKCQkvL0ZpbmQgb3V0IGlmIHRoZSBjbGlja2VkIG5vZGUgKG9yIG9uZSBvZiBpdHMgcGFyZW50cykgaXMgYSBhY3R1YWwgaXRlbSBpbiB0aGlzLml0ZW1zCgkJJChldmVudC50YXJnZXQpLnBhcmVudHMoKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQlpZigkLmRhdGEodGhpcywgdGhhdC53aWRnZXROYW1lICsgIi1pdGVtIikgPT09IHRoYXQpIHsKCQkJCWN1cnJlbnRJdGVtID0gJCh0aGlzKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0pOwoJCWlmKCQuZGF0YShldmVudC50YXJnZXQsIHRoYXQud2lkZ2V0TmFtZSArICItaXRlbSIpID09PSB0aGF0KSB7CgkJCWN1cnJlbnRJdGVtID0gJChldmVudC50YXJnZXQpOwoJCX0KCgkJaWYoIWN1cnJlbnRJdGVtKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJaWYodGhpcy5vcHRpb25zLmhhbmRsZSAmJiAhb3ZlcnJpZGVIYW5kbGUpIHsKCQkJJCh0aGlzLm9wdGlvbnMuaGFuZGxlLCBjdXJyZW50SXRlbSkuZmluZCgiKiIpLmFkZEJhY2soKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJaWYodGhpcyA9PT0gZXZlbnQudGFyZ2V0KSB7CgkJCQkJdmFsaWRIYW5kbGUgPSB0cnVlOwoJCQkJfQoJCQl9KTsKCQkJaWYoIXZhbGlkSGFuZGxlKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQl9CgoJCXRoaXMuY3VycmVudEl0ZW0gPSBjdXJyZW50SXRlbTsKCQl0aGlzLl9yZW1vdmVDdXJyZW50c0Zyb21JdGVtcygpOwoJCXJldHVybiB0cnVlOwoKCX0sCgoJX21vdXNlU3RhcnQ6IGZ1bmN0aW9uKGV2ZW50LCBvdmVycmlkZUhhbmRsZSwgbm9BY3RpdmF0aW9uKSB7CgoJCXZhciBpLCBib2R5LAoJCQlvID0gdGhpcy5vcHRpb25zOwoKCQl0aGlzLmN1cnJlbnRDb250YWluZXIgPSB0aGlzOwoKCQkvL1dlIG9ubHkgbmVlZCB0byBjYWxsIHJlZnJlc2hQb3NpdGlvbnMsIGJlY2F1c2UgdGhlIHJlZnJlc2hJdGVtcyBjYWxsIGhhcyBiZWVuIG1vdmVkIHRvIG1vdXNlQ2FwdHVyZQoJCXRoaXMucmVmcmVzaFBvc2l0aW9ucygpOwoKCQkvL0NyZWF0ZSBhbmQgYXBwZW5kIHRoZSB2aXNpYmxlIGhlbHBlcgoJCXRoaXMuaGVscGVyID0gdGhpcy5fY3JlYXRlSGVscGVyKGV2ZW50KTsKCgkJLy9DYWNoZSB0aGUgaGVscGVyIHNpemUKCQl0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCk7CgoJCS8qCgkJICogLSBQb3NpdGlvbiBnZW5lcmF0aW9uIC0KCQkgKiBUaGlzIGJsb2NrIGdlbmVyYXRlcyBldmVyeXRoaW5nIHBvc2l0aW9uIHJlbGF0ZWQgLSBpdCdzIHRoZSBjb3JlIG9mIGRyYWdnYWJsZXMuCgkJICovCgoJCS8vQ2FjaGUgdGhlIG1hcmdpbnMgb2YgdGhlIG9yaWdpbmFsIGVsZW1lbnQKCQl0aGlzLl9jYWNoZU1hcmdpbnMoKTsKCgkJLy9HZXQgdGhlIG5leHQgc2Nyb2xsaW5nIHBhcmVudAoJCXRoaXMuc2Nyb2xsUGFyZW50ID0gdGhpcy5oZWxwZXIuc2Nyb2xsUGFyZW50KCk7CgoJCS8vVGhlIGVsZW1lbnQncyBhYnNvbHV0ZSBwb3NpdGlvbiBvbiB0aGUgcGFnZSBtaW51cyBtYXJnaW5zCgkJdGhpcy5vZmZzZXQgPSB0aGlzLmN1cnJlbnRJdGVtLm9mZnNldCgpOwoJCXRoaXMub2Zmc2V0ID0gewoJCQl0b3A6IHRoaXMub2Zmc2V0LnRvcCAtIHRoaXMubWFyZ2lucy50b3AsCgkJCWxlZnQ6IHRoaXMub2Zmc2V0LmxlZnQgLSB0aGlzLm1hcmdpbnMubGVmdAoJCX07CgoJCSQuZXh0ZW5kKHRoaXMub2Zmc2V0LCB7CgkJCWNsaWNrOiB7IC8vV2hlcmUgdGhlIGNsaWNrIGhhcHBlbmVkLCByZWxhdGl2ZSB0byB0aGUgZWxlbWVudAoJCQkJbGVmdDogZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5sZWZ0LAoJCQkJdG9wOiBldmVudC5wYWdlWSAtIHRoaXMub2Zmc2V0LnRvcAoJCQl9LAoJCQlwYXJlbnQ6IHRoaXMuX2dldFBhcmVudE9mZnNldCgpLAoJCQlyZWxhdGl2ZTogdGhpcy5fZ2V0UmVsYXRpdmVPZmZzZXQoKSAvL1RoaXMgaXMgYSByZWxhdGl2ZSB0byBhYnNvbHV0ZSBwb3NpdGlvbiBtaW51cyB0aGUgYWN0dWFsIHBvc2l0aW9uIGNhbGN1bGF0aW9uIC0gb25seSB1c2VkIGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIGhlbHBlcgoJCX0pOwoKCQkvLyBPbmx5IGFmdGVyIHdlIGdvdCB0aGUgb2Zmc2V0LCB3ZSBjYW4gY2hhbmdlIHRoZSBoZWxwZXIncyBwb3NpdGlvbiB0byBhYnNvbHV0ZQoJCS8vIFRPRE86IFN0aWxsIG5lZWQgdG8gZmlndXJlIG91dCBhIHdheSB0byBtYWtlIHJlbGF0aXZlIHNvcnRpbmcgcG9zc2libGUKCQl0aGlzLmhlbHBlci5jc3MoInBvc2l0aW9uIiwgImFic29sdXRlIik7CgkJdGhpcy5jc3NQb3NpdGlvbiA9IHRoaXMuaGVscGVyLmNzcygicG9zaXRpb24iKTsKCgkJLy9HZW5lcmF0ZSB0aGUgb3JpZ2luYWwgcG9zaXRpb24KCQl0aGlzLm9yaWdpbmFsUG9zaXRpb24gPSB0aGlzLl9nZW5lcmF0ZVBvc2l0aW9uKGV2ZW50KTsKCQl0aGlzLm9yaWdpbmFsUGFnZVggPSBldmVudC5wYWdlWDsKCQl0aGlzLm9yaWdpbmFsUGFnZVkgPSBldmVudC5wYWdlWTsKCgkJLy9BZGp1c3QgdGhlIG1vdXNlIG9mZnNldCByZWxhdGl2ZSB0byB0aGUgaGVscGVyIGlmICJjdXJzb3JBdCIgaXMgc3VwcGxpZWQKCQkoby5jdXJzb3JBdCAmJiB0aGlzLl9hZGp1c3RPZmZzZXRGcm9tSGVscGVyKG8uY3Vyc29yQXQpKTsKCgkJLy9DYWNoZSB0aGUgZm9ybWVyIERPTSBwb3NpdGlvbgoJCXRoaXMuZG9tUG9zaXRpb24gPSB7IHByZXY6IHRoaXMuY3VycmVudEl0ZW0ucHJldigpWzBdLCBwYXJlbnQ6IHRoaXMuY3VycmVudEl0ZW0ucGFyZW50KClbMF0gfTsKCgkJLy9JZiB0aGUgaGVscGVyIGlzIG5vdCB0aGUgb3JpZ2luYWwsIGhpZGUgdGhlIG9yaWdpbmFsIHNvIGl0J3Mgbm90IHBsYXlpbmcgYW55IHJvbGUgZHVyaW5nIHRoZSBkcmFnLCB3b24ndCBjYXVzZSBhbnl0aGluZyBiYWQgdGhpcyB3YXkKCQlpZih0aGlzLmhlbHBlclswXSAhPT0gdGhpcy5jdXJyZW50SXRlbVswXSkgewoJCQl0aGlzLmN1cnJlbnRJdGVtLmhpZGUoKTsKCQl9CgoJCS8vQ3JlYXRlIHRoZSBwbGFjZWhvbGRlcgoJCXRoaXMuX2NyZWF0ZVBsYWNlaG9sZGVyKCk7CgoJCS8vU2V0IGEgY29udGFpbm1lbnQgaWYgZ2l2ZW4gaW4gdGhlIG9wdGlvbnMKCQlpZihvLmNvbnRhaW5tZW50KSB7CgkJCXRoaXMuX3NldENvbnRhaW5tZW50KCk7CgkJfQoKCQlpZiggby5jdXJzb3IgJiYgby5jdXJzb3IgIT09ICJhdXRvIiApIHsgLy8gY3Vyc29yIG9wdGlvbgoJCQlib2R5ID0gdGhpcy5kb2N1bWVudC5maW5kKCAiYm9keSIgKTsKCgkJCS8vIHN1cHBvcnQ6IElFCgkJCXRoaXMuc3RvcmVkQ3Vyc29yID0gYm9keS5jc3MoICJjdXJzb3IiICk7CgkJCWJvZHkuY3NzKCAiY3Vyc29yIiwgby5jdXJzb3IgKTsKCgkJCXRoaXMuc3RvcmVkU3R5bGVzaGVldCA9ICQoICI8c3R5bGU+KnsgY3Vyc29yOiAiK28uY3Vyc29yKyIgIWltcG9ydGFudDsgfTwvc3R5bGU+IiApLmFwcGVuZFRvKCBib2R5ICk7CgkJfQoKCQlpZihvLm9wYWNpdHkpIHsgLy8gb3BhY2l0eSBvcHRpb24KCQkJaWYgKHRoaXMuaGVscGVyLmNzcygib3BhY2l0eSIpKSB7CgkJCQl0aGlzLl9zdG9yZWRPcGFjaXR5ID0gdGhpcy5oZWxwZXIuY3NzKCJvcGFjaXR5Iik7CgkJCX0KCQkJdGhpcy5oZWxwZXIuY3NzKCJvcGFjaXR5Iiwgby5vcGFjaXR5KTsKCQl9CgoJCWlmKG8uekluZGV4KSB7IC8vIHpJbmRleCBvcHRpb24KCQkJaWYgKHRoaXMuaGVscGVyLmNzcygiekluZGV4IikpIHsKCQkJCXRoaXMuX3N0b3JlZFpJbmRleCA9IHRoaXMuaGVscGVyLmNzcygiekluZGV4Iik7CgkJCX0KCQkJdGhpcy5oZWxwZXIuY3NzKCJ6SW5kZXgiLCBvLnpJbmRleCk7CgkJfQoKCQkvL1ByZXBhcmUgc2Nyb2xsaW5nCgkJaWYodGhpcy5zY3JvbGxQYXJlbnRbMF0gIT09IGRvY3VtZW50ICYmIHRoaXMuc2Nyb2xsUGFyZW50WzBdLnRhZ05hbWUgIT09ICJIVE1MIikgewoJCQl0aGlzLm92ZXJmbG93T2Zmc2V0ID0gdGhpcy5zY3JvbGxQYXJlbnQub2Zmc2V0KCk7CgkJfQoKCQkvL0NhbGwgY2FsbGJhY2tzCgkJdGhpcy5fdHJpZ2dlcigic3RhcnQiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpOwoKCQkvL1JlY2FjaGUgdGhlIGhlbHBlciBzaXplCgkJaWYoIXRoaXMuX3ByZXNlcnZlSGVscGVyUHJvcG9ydGlvbnMpIHsKCQkJdGhpcy5fY2FjaGVIZWxwZXJQcm9wb3J0aW9ucygpOwoJCX0KCgoJCS8vUG9zdCAiYWN0aXZhdGUiIGV2ZW50cyB0byBwb3NzaWJsZSBjb250YWluZXJzCgkJaWYoICFub0FjdGl2YXRpb24gKSB7CgkJCWZvciAoIGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7CgkJCQl0aGlzLmNvbnRhaW5lcnNbIGkgXS5fdHJpZ2dlciggImFjdGl2YXRlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggdGhpcyApICk7CgkJCX0KCQl9CgoJCS8vUHJlcGFyZSBwb3NzaWJsZSBkcm9wcGFibGVzCgkJaWYoJC51aS5kZG1hbmFnZXIpIHsKCQkJJC51aS5kZG1hbmFnZXIuY3VycmVudCA9IHRoaXM7CgkJfQoKCQlpZiAoJC51aS5kZG1hbmFnZXIgJiYgIW8uZHJvcEJlaGF2aW91cikgewoJCQkkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyh0aGlzLCBldmVudCk7CgkJfQoKCQl0aGlzLmRyYWdnaW5nID0gdHJ1ZTsKCgkJdGhpcy5oZWxwZXIuYWRkQ2xhc3MoInVpLXNvcnRhYmxlLWhlbHBlciIpOwoJCXRoaXMuX21vdXNlRHJhZyhldmVudCk7IC8vRXhlY3V0ZSB0aGUgZHJhZyBvbmNlIC0gdGhpcyBjYXVzZXMgdGhlIGhlbHBlciBub3QgdG8gYmUgdmlzaWJsZSBiZWZvcmUgZ2V0dGluZyBpdHMgY29ycmVjdCBwb3NpdGlvbgoJCXJldHVybiB0cnVlOwoKCX0sCgoJX21vdXNlRHJhZzogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgaSwgaXRlbSwgaXRlbUVsZW1lbnQsIGludGVyc2VjdGlvbiwKCQkJbyA9IHRoaXMub3B0aW9ucywKCQkJc2Nyb2xsZWQgPSBmYWxzZTsKCgkJLy9Db21wdXRlIHRoZSBoZWxwZXJzIHBvc2l0aW9uCgkJdGhpcy5wb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZXZlbnQpOwoJCXRoaXMucG9zaXRpb25BYnMgPSB0aGlzLl9jb252ZXJ0UG9zaXRpb25UbygiYWJzb2x1dGUiKTsKCgkJaWYgKCF0aGlzLmxhc3RQb3NpdGlvbkFicykgewoJCQl0aGlzLmxhc3RQb3NpdGlvbkFicyA9IHRoaXMucG9zaXRpb25BYnM7CgkJfQoKCQkvL0RvIHNjcm9sbGluZwoJCWlmKHRoaXMub3B0aW9ucy5zY3JvbGwpIHsKCQkJaWYodGhpcy5zY3JvbGxQYXJlbnRbMF0gIT09IGRvY3VtZW50ICYmIHRoaXMuc2Nyb2xsUGFyZW50WzBdLnRhZ05hbWUgIT09ICJIVE1MIikgewoKCQkJCWlmKCh0aGlzLm92ZXJmbG93T2Zmc2V0LnRvcCArIHRoaXMuc2Nyb2xsUGFyZW50WzBdLm9mZnNldEhlaWdodCkgLSBldmVudC5wYWdlWSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpIHsKCQkJCQl0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgPSBzY3JvbGxlZCA9IHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCArIG8uc2Nyb2xsU3BlZWQ7CgkJCQl9IGVsc2UgaWYoZXZlbnQucGFnZVkgLSB0aGlzLm92ZXJmbG93T2Zmc2V0LnRvcCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpIHsKCQkJCQl0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgPSBzY3JvbGxlZCA9IHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCAtIG8uc2Nyb2xsU3BlZWQ7CgkJCQl9CgoJCQkJaWYoKHRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdCArIHRoaXMuc2Nyb2xsUGFyZW50WzBdLm9mZnNldFdpZHRoKSAtIGV2ZW50LnBhZ2VYIDwgby5zY3JvbGxTZW5zaXRpdml0eSkgewoJCQkJCXRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgPSBzY3JvbGxlZCA9IHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgKyBvLnNjcm9sbFNwZWVkOwoJCQkJfSBlbHNlIGlmKGV2ZW50LnBhZ2VYIC0gdGhpcy5vdmVyZmxvd09mZnNldC5sZWZ0IDwgby5zY3JvbGxTZW5zaXRpdml0eSkgewoJCQkJCXRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgPSBzY3JvbGxlZCA9IHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgLSBvLnNjcm9sbFNwZWVkOwoJCQkJfQoKCQkJfSBlbHNlIHsKCgkJCQlpZihldmVudC5wYWdlWSAtICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpIDwgby5zY3JvbGxTZW5zaXRpdml0eSkgewoJCQkJCXNjcm9sbGVkID0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpIC0gby5zY3JvbGxTcGVlZCk7CgkJCQl9IGVsc2UgaWYoJCh3aW5kb3cpLmhlaWdodCgpIC0gKGV2ZW50LnBhZ2VZIC0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkpIDwgby5zY3JvbGxTZW5zaXRpdml0eSkgewoJCQkJCXNjcm9sbGVkID0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpICsgby5zY3JvbGxTcGVlZCk7CgkJCQl9CgoJCQkJaWYoZXZlbnQucGFnZVggLSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5KSB7CgkJCQkJc2Nyb2xsZWQgPSAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSAtIG8uc2Nyb2xsU3BlZWQpOwoJCQkJfSBlbHNlIGlmKCQod2luZG93KS53aWR0aCgpIC0gKGV2ZW50LnBhZ2VYIC0gJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgpKSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkpIHsKCQkJCQlzY3JvbGxlZCA9ICQoZG9jdW1lbnQpLnNjcm9sbExlZnQoJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgpICsgby5zY3JvbGxTcGVlZCk7CgkJCQl9CgoJCQl9CgoJCQlpZihzY3JvbGxlZCAhPT0gZmFsc2UgJiYgJC51aS5kZG1hbmFnZXIgJiYgIW8uZHJvcEJlaGF2aW91cikgewoJCQkJJC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcywgZXZlbnQpOwoJCQl9CgkJfQoKCQkvL1JlZ2VuZXJhdGUgdGhlIGFic29sdXRlIHBvc2l0aW9uIHVzZWQgZm9yIHBvc2l0aW9uIGNoZWNrcwoJCXRoaXMucG9zaXRpb25BYnMgPSB0aGlzLl9jb252ZXJ0UG9zaXRpb25UbygiYWJzb2x1dGUiKTsKCgkJLy9TZXQgdGhlIGhlbHBlciBwb3NpdGlvbgoJCWlmKCF0aGlzLm9wdGlvbnMuYXhpcyB8fCB0aGlzLm9wdGlvbnMuYXhpcyAhPT0gInkiKSB7CgkJCXRoaXMuaGVscGVyWzBdLnN0eWxlLmxlZnQgPSB0aGlzLnBvc2l0aW9uLmxlZnQrInB4IjsKCQl9CgkJaWYoIXRoaXMub3B0aW9ucy5heGlzIHx8IHRoaXMub3B0aW9ucy5heGlzICE9PSAieCIpIHsKCQkJdGhpcy5oZWxwZXJbMF0uc3R5bGUudG9wID0gdGhpcy5wb3NpdGlvbi50b3ArInB4IjsKCQl9CgoJCS8vUmVhcnJhbmdlCgkJZm9yIChpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewoKCQkJLy9DYWNoZSB2YXJpYWJsZXMgYW5kIGludGVyc2VjdGlvbiwgY29udGludWUgaWYgbm8gaW50ZXJzZWN0aW9uCgkJCWl0ZW0gPSB0aGlzLml0ZW1zW2ldOwoJCQlpdGVtRWxlbWVudCA9IGl0ZW0uaXRlbVswXTsKCQkJaW50ZXJzZWN0aW9uID0gdGhpcy5faW50ZXJzZWN0c1dpdGhQb2ludGVyKGl0ZW0pOwoJCQlpZiAoIWludGVyc2VjdGlvbikgewoJCQkJY29udGludWU7CgkJCX0KCgkJCS8vIE9ubHkgcHV0IHRoZSBwbGFjZWhvbGRlciBpbnNpZGUgdGhlIGN1cnJlbnQgQ29udGFpbmVyLCBza2lwIGFsbAoJCQkvLyBpdGVtcyBmb3JtIG90aGVyIGNvbnRhaW5lcnMuIFRoaXMgd29ya3MgYmVjYXVzZSB3aGVuIG1vdmluZwoJCQkvLyBhbiBpdGVtIGZyb20gb25lIGNvbnRhaW5lciB0byBhbm90aGVyIHRoZQoJCQkvLyBjdXJyZW50Q29udGFpbmVyIGlzIHN3aXRjaGVkIGJlZm9yZSB0aGUgcGxhY2Vob2xkZXIgaXMgbW92ZWQuCgkJCS8vCgkJCS8vIFdpdGhvdXQgdGhpcyBtb3ZpbmcgaXRlbXMgaW4gInN1Yi1zb3J0YWJsZXMiIGNhbiBjYXVzZSB0aGUgcGxhY2Vob2xkZXIgdG8gaml0dGVyCgkJCS8vIGJlZXR3ZWVuIHRoZSBvdXRlciBhbmQgaW5uZXIgY29udGFpbmVyLgoJCQlpZiAoaXRlbS5pbnN0YW5jZSAhPT0gdGhpcy5jdXJyZW50Q29udGFpbmVyKSB7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJLy8gY2Fubm90IGludGVyc2VjdCB3aXRoIGl0c2VsZgoJCQkvLyBubyB1c2VsZXNzIGFjdGlvbnMgdGhhdCBoYXZlIGJlZW4gZG9uZSBiZWZvcmUKCQkJLy8gbm8gYWN0aW9uIGlmIHRoZSBpdGVtIG1vdmVkIGlzIHRoZSBwYXJlbnQgb2YgdGhlIGl0ZW0gY2hlY2tlZAoJCQlpZiAoaXRlbUVsZW1lbnQgIT09IHRoaXMuY3VycmVudEl0ZW1bMF0gJiYKCQkJCXRoaXMucGxhY2Vob2xkZXJbaW50ZXJzZWN0aW9uID09PSAxID8gIm5leHQiIDogInByZXYiXSgpWzBdICE9PSBpdGVtRWxlbWVudCAmJgoJCQkJISQuY29udGFpbnModGhpcy5wbGFjZWhvbGRlclswXSwgaXRlbUVsZW1lbnQpICYmCgkJCQkodGhpcy5vcHRpb25zLnR5cGUgPT09ICJzZW1pLWR5bmFtaWMiID8gISQuY29udGFpbnModGhpcy5lbGVtZW50WzBdLCBpdGVtRWxlbWVudCkgOiB0cnVlKQoJCQkpIHsKCgkJCQl0aGlzLmRpcmVjdGlvbiA9IGludGVyc2VjdGlvbiA9PT0gMSA\/ICJkb3duIiA6ICJ1cCI7CgoJCQkJaWYgKHRoaXMub3B0aW9ucy50b2xlcmFuY2UgPT09ICJwb2ludGVyIiB8fCB0aGlzLl9pbnRlcnNlY3RzV2l0aFNpZGVzKGl0ZW0pKSB7CgkJCQkJdGhpcy5fcmVhcnJhbmdlKGV2ZW50LCBpdGVtKTsKCQkJCX0gZWxzZSB7CgkJCQkJYnJlYWs7CgkJCQl9CgoJCQkJdGhpcy5fdHJpZ2dlcigiY2hhbmdlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTsKCQkJCWJyZWFrOwoJCQl9CgkJfQoKCQkvL1Bvc3QgZXZlbnRzIHRvIGNvbnRhaW5lcnMKCQl0aGlzLl9jb250YWN0Q29udGFpbmVycyhldmVudCk7CgoJCS8vSW50ZXJjb25uZWN0IHdpdGggZHJvcHBhYmxlcwoJCWlmKCQudWkuZGRtYW5hZ2VyKSB7CgkJCSQudWkuZGRtYW5hZ2VyLmRyYWcodGhpcywgZXZlbnQpOwoJCX0KCgkJLy9DYWxsIGNhbGxiYWNrcwoJCXRoaXMuX3RyaWdnZXIoInNvcnQiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpOwoKCQl0aGlzLmxhc3RQb3NpdGlvbkFicyA9IHRoaXMucG9zaXRpb25BYnM7CgkJcmV0dXJuIGZhbHNlOwoKCX0sCgoJX21vdXNlU3RvcDogZnVuY3Rpb24oZXZlbnQsIG5vUHJvcGFnYXRpb24pIHsKCgkJaWYoIWV2ZW50KSB7CgkJCXJldHVybjsKCQl9CgoJCS8vSWYgd2UgYXJlIHVzaW5nIGRyb3BwYWJsZXMsIGluZm9ybSB0aGUgbWFuYWdlciBhYm91dCB0aGUgZHJvcAoJCWlmICgkLnVpLmRkbWFuYWdlciAmJiAhdGhpcy5vcHRpb25zLmRyb3BCZWhhdmlvdXIpIHsKCQkJJC51aS5kZG1hbmFnZXIuZHJvcCh0aGlzLCBldmVudCk7CgkJfQoKCQlpZih0aGlzLm9wdGlvbnMucmV2ZXJ0KSB7CgkJCXZhciB0aGF0ID0gdGhpcywKCQkJCWN1ciA9IHRoaXMucGxhY2Vob2xkZXIub2Zmc2V0KCksCgkJCQlheGlzID0gdGhpcy5vcHRpb25zLmF4aXMsCgkJCQlhbmltYXRpb24gPSB7fTsKCgkJCWlmICggIWF4aXMgfHwgYXhpcyA9PT0gIngiICkgewoJCQkJYW5pbWF0aW9uLmxlZnQgPSBjdXIubGVmdCAtIHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0IC0gdGhpcy5tYXJnaW5zLmxlZnQgKyAodGhpcy5vZmZzZXRQYXJlbnRbMF0gPT09IGRvY3VtZW50LmJvZHkgPyAwIDogdGhpcy5vZmZzZXRQYXJlbnRbMF0uc2Nyb2xsTGVmdCk7CgkJCX0KCQkJaWYgKCAhYXhpcyB8fCBheGlzID09PSAieSIgKSB7CgkJCQlhbmltYXRpb24udG9wID0gY3VyLnRvcCAtIHRoaXMub2Zmc2V0LnBhcmVudC50b3AgLSB0aGlzLm1hcmdpbnMudG9wICsgKHRoaXMub2Zmc2V0UGFyZW50WzBdID09PSBkb2N1bWVudC5ib2R5ID8gMCA6IHRoaXMub2Zmc2V0UGFyZW50WzBdLnNjcm9sbFRvcCk7CgkJCX0KCQkJdGhpcy5yZXZlcnRpbmcgPSB0cnVlOwoJCQkkKHRoaXMuaGVscGVyKS5hbmltYXRlKCBhbmltYXRpb24sIHBhcnNlSW50KHRoaXMub3B0aW9ucy5yZXZlcnQsIDEwKSB8fCA1MDAsIGZ1bmN0aW9uKCkgewoJCQkJdGhhdC5fY2xlYXIoZXZlbnQpOwoJCQl9KTsKCQl9IGVsc2UgewoJCQl0aGlzLl9jbGVhcihldmVudCwgbm9Qcm9wYWdhdGlvbik7CgkJfQoKCQlyZXR1cm4gZmFsc2U7CgoJfSwKCgljYW5jZWw6IGZ1bmN0aW9uKCkgewoKCQlpZih0aGlzLmRyYWdnaW5nKSB7CgoJCQl0aGlzLl9tb3VzZVVwKHsgdGFyZ2V0OiBudWxsIH0pOwoKCQkJaWYodGhpcy5vcHRpb25zLmhlbHBlciA9PT0gIm9yaWdpbmFsIikgewoJCQkJdGhpcy5jdXJyZW50SXRlbS5jc3ModGhpcy5fc3RvcmVkQ1NTKS5yZW1vdmVDbGFzcygidWktc29ydGFibGUtaGVscGVyIik7CgkJCX0gZWxzZSB7CgkJCQl0aGlzLmN1cnJlbnRJdGVtLnNob3coKTsKCQkJfQoKCQkJLy9Qb3N0IGRlYWN0aXZhdGluZyBldmVudHMgdG8gY29udGFpbmVycwoJCQlmb3IgKHZhciBpID0gdGhpcy5jb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXsKCQkJCXRoaXMuY29udGFpbmVyc1tpXS5fdHJpZ2dlcigiZGVhY3RpdmF0ZSIsIG51bGwsIHRoaXMuX3VpSGFzaCh0aGlzKSk7CgkJCQlpZih0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUub3ZlcikgewoJCQkJCXRoaXMuY29udGFpbmVyc1tpXS5fdHJpZ2dlcigib3V0IiwgbnVsbCwgdGhpcy5fdWlIYXNoKHRoaXMpKTsKCQkJCQl0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUub3ZlciA9IDA7CgkJCQl9CgkJCX0KCgkJfQoKCQlpZiAodGhpcy5wbGFjZWhvbGRlcikgewoJCQkvLyQodGhpcy5wbGFjZWhvbGRlclswXSkucmVtb3ZlKCk7IHdvdWxkIGhhdmUgYmVlbiB0aGUgalF1ZXJ5IHdheSAtIHVuZm9ydHVuYXRlbHksIGl0IHVuYmluZHMgQUxMIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCBub2RlIQoJCQlpZih0aGlzLnBsYWNlaG9sZGVyWzBdLnBhcmVudE5vZGUpIHsKCQkJCXRoaXMucGxhY2Vob2xkZXJbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBsYWNlaG9sZGVyWzBdKTsKCQkJfQoJCQlpZih0aGlzLm9wdGlvbnMuaGVscGVyICE9PSAib3JpZ2luYWwiICYmIHRoaXMuaGVscGVyICYmIHRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGUpIHsKCQkJCXRoaXMuaGVscGVyLnJlbW92ZSgpOwoJCQl9CgoJCQkkLmV4dGVuZCh0aGlzLCB7CgkJCQloZWxwZXI6IG51bGwsCgkJCQlkcmFnZ2luZzogZmFsc2UsCgkJCQlyZXZlcnRpbmc6IGZhbHNlLAoJCQkJX25vRmluYWxTb3J0OiBudWxsCgkJCX0pOwoKCQkJaWYodGhpcy5kb21Qb3NpdGlvbi5wcmV2KSB7CgkJCQkkKHRoaXMuZG9tUG9zaXRpb24ucHJldikuYWZ0ZXIodGhpcy5jdXJyZW50SXRlbSk7CgkJCX0gZWxzZSB7CgkJCQkkKHRoaXMuZG9tUG9zaXRpb24ucGFyZW50KS5wcmVwZW5kKHRoaXMuY3VycmVudEl0ZW0pOwoJCQl9CgkJfQoKCQlyZXR1cm4gdGhpczsKCgl9LAoKCXNlcmlhbGl6ZTogZnVuY3Rpb24obykgewoKCQl2YXIgaXRlbXMgPSB0aGlzLl9nZXRJdGVtc0FzalF1ZXJ5KG8gJiYgby5jb25uZWN0ZWQpLAoJCQlzdHIgPSBbXTsKCQlvID0gbyB8fCB7fTsKCgkJJChpdGVtcykuZWFjaChmdW5jdGlvbigpIHsKCQkJdmFyIHJlcyA9ICgkKG8uaXRlbSB8fCB0aGlzKS5hdHRyKG8uYXR0cmlidXRlIHx8ICJpZCIpIHx8ICIiKS5tYXRjaChvLmV4cHJlc3Npb24gfHwgKC8oLispW1wtPV9dKC4rKS8pKTsKCQkJaWYgKHJlcykgewoJCQkJc3RyLnB1c2goKG8ua2V5IHx8IHJlc1sxXSsiW10iKSsiPSIrKG8ua2V5ICYmIG8uZXhwcmVzc2lvbiA\/IHJlc1sxXSA6IHJlc1syXSkpOwoJCQl9CgkJfSk7CgoJCWlmKCFzdHIubGVuZ3RoICYmIG8ua2V5KSB7CgkJCXN0ci5wdXNoKG8ua2V5ICsgIj0iKTsKCQl9CgoJCXJldHVybiBzdHIuam9pbigiJiIpOwoKCX0sCgoJdG9BcnJheTogZnVuY3Rpb24obykgewoKCQl2YXIgaXRlbXMgPSB0aGlzLl9nZXRJdGVtc0FzalF1ZXJ5KG8gJiYgby5jb25uZWN0ZWQpLAoJCQlyZXQgPSBbXTsKCgkJbyA9IG8gfHwge307CgoJCWl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7IHJldC5wdXNoKCQoby5pdGVtIHx8IHRoaXMpLmF0dHIoby5hdHRyaWJ1dGUgfHwgImlkIikgfHwgIiIpOyB9KTsKCQlyZXR1cm4gcmV0OwoKCX0sCgoJLyogQmUgY2FyZWZ1bCB3aXRoIHRoZSBmb2xsb3dpbmcgY29yZSBmdW5jdGlvbnMgKi8KCV9pbnRlcnNlY3RzV2l0aDogZnVuY3Rpb24oaXRlbSkgewoKCQl2YXIgeDEgPSB0aGlzLnBvc2l0aW9uQWJzLmxlZnQsCgkJCXgyID0geDEgKyB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLAoJCQl5MSA9IHRoaXMucG9zaXRpb25BYnMudG9wLAoJCQl5MiA9IHkxICsgdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsCgkJCWwgPSBpdGVtLmxlZnQsCgkJCXIgPSBsICsgaXRlbS53aWR0aCwKCQkJdCA9IGl0ZW0udG9wLAoJCQliID0gdCArIGl0ZW0uaGVpZ2h0LAoJCQlkeUNsaWNrID0gdGhpcy5vZmZzZXQuY2xpY2sudG9wLAoJCQlkeENsaWNrID0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCwKCQkJaXNPdmVyRWxlbWVudEhlaWdodCA9ICggdGhpcy5vcHRpb25zLmF4aXMgPT09ICJ4IiApIHx8ICggKCB5MSArIGR5Q2xpY2sgKSA+IHQgJiYgKCB5MSArIGR5Q2xpY2sgKSA8IGIgKSwKCQkJaXNPdmVyRWxlbWVudFdpZHRoID0gKCB0aGlzLm9wdGlvbnMuYXhpcyA9PT0gInkiICkgfHwgKCAoIHgxICsgZHhDbGljayApID4gbCAmJiAoIHgxICsgZHhDbGljayApIDwgciApLAoJCQlpc092ZXJFbGVtZW50ID0gaXNPdmVyRWxlbWVudEhlaWdodCAmJiBpc092ZXJFbGVtZW50V2lkdGg7CgoJCWlmICggdGhpcy5vcHRpb25zLnRvbGVyYW5jZSA9PT0gInBvaW50ZXIiIHx8CgkJCXRoaXMub3B0aW9ucy5mb3JjZVBvaW50ZXJGb3JDb250YWluZXJzIHx8CgkJCSh0aGlzLm9wdGlvbnMudG9sZXJhbmNlICE9PSAicG9pbnRlciIgJiYgdGhpcy5oZWxwZXJQcm9wb3J0aW9uc1t0aGlzLmZsb2F0aW5nID8gIndpZHRoIiA6ICJoZWlnaHQiXSA+IGl0ZW1bdGhpcy5mbG9hdGluZyA\/ICJ3aWR0aCIgOiAiaGVpZ2h0Il0pCgkJKSB7CgkJCXJldHVybiBpc092ZXJFbGVtZW50OwoJCX0gZWxzZSB7CgoJCQlyZXR1cm4gKGwgPCB4MSArICh0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMikgJiYgLy8gUmlnaHQgSGFsZgoJCQkJeDIgLSAodGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAvIDIpIDwgciAmJiAvLyBMZWZ0IEhhbGYKCQkJCXQgPCB5MSArICh0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAvIDIpICYmIC8vIEJvdHRvbSBIYWxmCgkJCQl5MiAtICh0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAvIDIpIDwgYiApOyAvLyBUb3AgSGFsZgoKCQl9Cgl9LAoKCV9pbnRlcnNlY3RzV2l0aFBvaW50ZXI6IGZ1bmN0aW9uKGl0ZW0pIHsKCgkJdmFyIGlzT3ZlckVsZW1lbnRIZWlnaHQgPSAodGhpcy5vcHRpb25zLmF4aXMgPT09ICJ4IikgfHwgaXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLnRvcCArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCwgaXRlbS50b3AsIGl0ZW0uaGVpZ2h0KSwKCQkJaXNPdmVyRWxlbWVudFdpZHRoID0gKHRoaXMub3B0aW9ucy5heGlzID09PSAieSIpIHx8IGlzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy5sZWZ0ICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdCwgaXRlbS5sZWZ0LCBpdGVtLndpZHRoKSwKCQkJaXNPdmVyRWxlbWVudCA9IGlzT3ZlckVsZW1lbnRIZWlnaHQgJiYgaXNPdmVyRWxlbWVudFdpZHRoLAoJCQl2ZXJ0aWNhbERpcmVjdGlvbiA9IHRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLAoJCQlob3Jpem9udGFsRGlyZWN0aW9uID0gdGhpcy5fZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb24oKTsKCgkJaWYgKCFpc092ZXJFbGVtZW50KSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCXJldHVybiB0aGlzLmZsb2F0aW5nID8KCQkJKCAoKGhvcml6b250YWxEaXJlY3Rpb24gJiYgaG9yaXpvbnRhbERpcmVjdGlvbiA9PT0gInJpZ2h0IikgfHwgdmVydGljYWxEaXJlY3Rpb24gPT09ICJkb3duIikgPyAyIDogMSApCgkJCTogKCB2ZXJ0aWNhbERpcmVjdGlvbiAmJiAodmVydGljYWxEaXJlY3Rpb24gPT09ICJkb3duIiA\/IDIgOiAxKSApOwoKCX0sCgoJX2ludGVyc2VjdHNXaXRoU2lkZXM6IGZ1bmN0aW9uKGl0ZW0pIHsKCgkJdmFyIGlzT3ZlckJvdHRvbUhhbGYgPSBpc092ZXJBeGlzKHRoaXMucG9zaXRpb25BYnMudG9wICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wLCBpdGVtLnRvcCArIChpdGVtLmhlaWdodC8yKSwgaXRlbS5oZWlnaHQpLAoJCQlpc092ZXJSaWdodEhhbGYgPSBpc092ZXJBeGlzKHRoaXMucG9zaXRpb25BYnMubGVmdCArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQsIGl0ZW0ubGVmdCArIChpdGVtLndpZHRoLzIpLCBpdGVtLndpZHRoKSwKCQkJdmVydGljYWxEaXJlY3Rpb24gPSB0aGlzLl9nZXREcmFnVmVydGljYWxEaXJlY3Rpb24oKSwKCQkJaG9yaXpvbnRhbERpcmVjdGlvbiA9IHRoaXMuX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uKCk7CgoJCWlmICh0aGlzLmZsb2F0aW5nICYmIGhvcml6b250YWxEaXJlY3Rpb24pIHsKCQkJcmV0dXJuICgoaG9yaXpvbnRhbERpcmVjdGlvbiA9PT0gInJpZ2h0IiAmJiBpc092ZXJSaWdodEhhbGYpIHx8IChob3Jpem9udGFsRGlyZWN0aW9uID09PSAibGVmdCIgJiYgIWlzT3ZlclJpZ2h0SGFsZikpOwoJCX0gZWxzZSB7CgkJCXJldHVybiB2ZXJ0aWNhbERpcmVjdGlvbiAmJiAoKHZlcnRpY2FsRGlyZWN0aW9uID09PSAiZG93biIgJiYgaXNPdmVyQm90dG9tSGFsZikgfHwgKHZlcnRpY2FsRGlyZWN0aW9uID09PSAidXAiICYmICFpc092ZXJCb3R0b21IYWxmKSk7CgkJfQoKCX0sCgoJX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbjogZnVuY3Rpb24oKSB7CgkJdmFyIGRlbHRhID0gdGhpcy5wb3NpdGlvbkFicy50b3AgLSB0aGlzLmxhc3RQb3NpdGlvbkFicy50b3A7CgkJcmV0dXJuIGRlbHRhICE9PSAwICYmIChkZWx0YSA+IDAgPyAiZG93biIgOiAidXAiKTsKCX0sCgoJX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uOiBmdW5jdGlvbigpIHsKCQl2YXIgZGVsdGEgPSB0aGlzLnBvc2l0aW9uQWJzLmxlZnQgLSB0aGlzLmxhc3RQb3NpdGlvbkFicy5sZWZ0OwoJCXJldHVybiBkZWx0YSAhPT0gMCAmJiAoZGVsdGEgPiAwID8gInJpZ2h0IiA6ICJsZWZ0Iik7Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKGV2ZW50KSB7CgkJdGhpcy5fcmVmcmVzaEl0ZW1zKGV2ZW50KTsKCQl0aGlzLnJlZnJlc2hQb3NpdGlvbnMoKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJX2Nvbm5lY3RXaXRoOiBmdW5jdGlvbigpIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCQlyZXR1cm4gb3B0aW9ucy5jb25uZWN0V2l0aC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nID8gW29wdGlvbnMuY29ubmVjdFdpdGhdIDogb3B0aW9ucy5jb25uZWN0V2l0aDsKCX0sCgoJX2dldEl0ZW1zQXNqUXVlcnk6IGZ1bmN0aW9uKGNvbm5lY3RlZCkgewoKCQl2YXIgaSwgaiwgY3VyLCBpbnN0LAoJCQlpdGVtcyA9IFtdLAoJCQlxdWVyaWVzID0gW10sCgkJCWNvbm5lY3RXaXRoID0gdGhpcy5fY29ubmVjdFdpdGgoKTsKCgkJaWYoY29ubmVjdFdpdGggJiYgY29ubmVjdGVkKSB7CgkJCWZvciAoaSA9IGNvbm5lY3RXaXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXsKCQkJCWN1ciA9ICQoY29ubmVjdFdpdGhbaV0pOwoJCQkJZm9yICggaiA9IGN1ci5sZW5ndGggLSAxOyBqID49IDA7IGotLSl7CgkJCQkJaW5zdCA9ICQuZGF0YShjdXJbal0sIHRoaXMud2lkZ2V0RnVsbE5hbWUpOwoJCQkJCWlmKGluc3QgJiYgaW5zdCAhPT0gdGhpcyAmJiAhaW5zdC5vcHRpb25zLmRpc2FibGVkKSB7CgkJCQkJCXF1ZXJpZXMucHVzaChbJC5pc0Z1bmN0aW9uKGluc3Qub3B0aW9ucy5pdGVtcykgPyBpbnN0Lm9wdGlvbnMuaXRlbXMuY2FsbChpbnN0LmVsZW1lbnQpIDogJChpbnN0Lm9wdGlvbnMuaXRlbXMsIGluc3QuZWxlbWVudCkubm90KCIudWktc29ydGFibGUtaGVscGVyIikubm90KCIudWktc29ydGFibGUtcGxhY2Vob2xkZXIiKSwgaW5zdF0pOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJcXVlcmllcy5wdXNoKFskLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLml0ZW1zKSA\\/IHRoaXMuX3JlYXJyYW5nZShldmVudCwgaXRlbVdpdGhMZWFzdERpc3RhbmNlLCBudWxsLCB0cnVlKSA6IHRoaXMuX3JlYXJyYW5nZShldmVudCwgbnVsbCwgdGhpcy5jb250YWluZXJzW2lubmVybW9zdEluZGV4XS5lbGVtZW50LCB0cnVlKTsKCQkJdGhpcy5fdHJpZ2dlcigiY2hhbmdlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTsKCQkJdGhpcy5jb250YWluZXJzW2lubmVybW9zdEluZGV4XS5fdHJpZ2dlcigiY2hhbmdlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCh0aGlzKSk7CgkJCXRoaXMuY3VycmVudENvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyc1tpbm5lcm1vc3RJbmRleF07CgoJCQkvL1VwZGF0ZSB0aGUgcGxhY2Vob2xkZXIKCQkJdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyLnVwZGF0ZSh0aGlzLmN1cnJlbnRDb250YWluZXIsIHRoaXMucGxhY2Vob2xkZXIpOwoKCQkJdGhpcy5jb250YWluZXJzW2lubmVybW9zdEluZGV4XS5fdHJpZ2dlcigib3ZlciIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcykpOwoJCQl0aGlzLmNvbnRhaW5lcnNbaW5uZXJtb3N0SW5kZXhdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAxOwoJCX0KCgoJfSwKCglfY3JlYXRlSGVscGVyOiBmdW5jdGlvbihldmVudCkgewoKCQl2YXIgbyA9IHRoaXMub3B0aW9ucywKCQkJaGVscGVyID0gJC5pc0Z1bmN0aW9uKG8uaGVscGVyKSA\/ICQoby5oZWxwZXIuYXBwbHkodGhpcy5lbGVtZW50WzBdLCBbZXZlbnQsIHRoaXMuY3VycmVudEl0ZW1dKSkgOiAoby5oZWxwZXIgPT09ICJjbG9uZSIgPyB0aGlzLmN1cnJlbnRJdGVtLmNsb25lKCkgOiB0aGlzLmN1cnJlbnRJdGVtKTsKCgkJLy9BZGQgdGhlIGhlbHBlciB0byB0aGUgRE9NIGlmIHRoYXQgZGlkbid0IGhhcHBlbiBhbHJlYWR5CgkJaWYoIWhlbHBlci5wYXJlbnRzKCJib2R5IikubGVuZ3RoKSB7CgkJCSQoby5hcHBlbmRUbyAhPT0gInBhcmVudCIgPyBvLmFwcGVuZFRvIDogdGhpcy5jdXJyZW50SXRlbVswXS5wYXJlbnROb2RlKVswXS5hcHBlbmRDaGlsZChoZWxwZXJbMF0pOwoJCX0KCgkJaWYoaGVscGVyWzBdID09PSB0aGlzLmN1cnJlbnRJdGVtWzBdKSB7CgkJCXRoaXMuX3N0b3JlZENTUyA9IHsgd2lkdGg6IHRoaXMuY3VycmVudEl0ZW1bMF0uc3R5bGUud2lkdGgsIGhlaWdodDogdGhpcy5jdXJyZW50SXRlbVswXS5zdHlsZS5oZWlnaHQsIHBvc2l0aW9uOiB0aGlzLmN1cnJlbnRJdGVtLmNzcygicG9zaXRpb24iKSwgdG9wOiB0aGlzLmN1cnJlbnRJdGVtLmNzcygidG9wIiksIGxlZnQ6IHRoaXMuY3VycmVudEl0ZW0uY3NzKCJsZWZ0IikgfTsKCQl9CgoJCWlmKCFoZWxwZXJbMF0uc3R5bGUud2lkdGggfHwgby5mb3JjZUhlbHBlclNpemUpIHsKCQkJaGVscGVyLndpZHRoKHRoaXMuY3VycmVudEl0ZW0ud2lkdGgoKSk7CgkJfQoJCWlmKCFoZWxwZXJbMF0uc3R5bGUuaGVpZ2h0IHx8IG8uZm9yY2VIZWxwZXJTaXplKSB7CgkJCWhlbHBlci5oZWlnaHQodGhpcy5jdXJyZW50SXRlbS5oZWlnaHQoKSk7CgkJfQoKCQlyZXR1cm4gaGVscGVyOwoKCX0sCgoJX2FkanVzdE9mZnNldEZyb21IZWxwZXI6IGZ1bmN0aW9uKG9iaikgewoJCWlmICh0eXBlb2Ygb2JqID09PSAic3RyaW5nIikgewoJCQlvYmogPSBvYmouc3BsaXQoIiAiKTsKCQl9CgkJaWYgKCQuaXNBcnJheShvYmopKSB7CgkJCW9iaiA9IHtsZWZ0OiArb2JqWzBdLCB0b3A6ICtvYmpbMV0gfHwgMH07CgkJfQoJCWlmICgibGVmdCIgaW4gb2JqKSB7CgkJCXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSBvYmoubGVmdCArIHRoaXMubWFyZ2lucy5sZWZ0OwoJCX0KCQlpZiAoInJpZ2h0IiBpbiBvYmopIHsKCQkJdGhpcy5vZmZzZXQuY2xpY2subGVmdCA9IHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSBvYmoucmlnaHQgKyB0aGlzLm1hcmdpbnMubGVmdDsKCQl9CgkJaWYgKCJ0b3AiIGluIG9iaikgewoJCQl0aGlzLm9mZnNldC5jbGljay50b3AgPSBvYmoudG9wICsgdGhpcy5tYXJnaW5zLnRvcDsKCQl9CgkJaWYgKCJib3R0b20iIGluIG9iaikgewoJCQl0aGlzLm9mZnNldC5jbGljay50b3AgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIG9iai5ib3R0b20gKyB0aGlzLm1hcmdpbnMudG9wOwoJCX0KCX0sCgoJX2dldFBhcmVudE9mZnNldDogZnVuY3Rpb24oKSB7CgoKCQkvL0dldCB0aGUgb2Zmc2V0UGFyZW50IGFuZCBjYWNoZSBpdHMgcG9zaXRpb24KCQl0aGlzLm9mZnNldFBhcmVudCA9IHRoaXMuaGVscGVyLm9mZnNldFBhcmVudCgpOwoJCXZhciBwbyA9IHRoaXMub2Zmc2V0UGFyZW50Lm9mZnNldCgpOwoKCQkvLyBUaGlzIGlzIGEgc3BlY2lhbCBjYXNlIHdoZXJlIHdlIG5lZWQgdG8gbW9kaWZ5IGEgb2Zmc2V0IGNhbGN1bGF0ZWQgb24gc3RhcnQsIHNpbmNlIHRoZSBmb2xsb3dpbmcgaGFwcGVuZWQ6CgkJLy8gMS4gVGhlIHBvc2l0aW9uIG9mIHRoZSBoZWxwZXIgaXMgYWJzb2x1dGUsIHNvIGl0J3MgcG9zaXRpb24gaXMgY2FsY3VsYXRlZCBiYXNlZCBvbiB0aGUgbmV4dCBwb3NpdGlvbmVkIHBhcmVudAoJCS8vIDIuIFRoZSBhY3R1YWwgb2Zmc2V0IHBhcmVudCBpcyBhIGNoaWxkIG9mIHRoZSBzY3JvbGwgcGFyZW50LCBhbmQgdGhlIHNjcm9sbCBwYXJlbnQgaXNuJ3QgdGhlIGRvY3VtZW50LCB3aGljaCBtZWFucyB0aGF0CgkJLy8gICAgdGhlIHNjcm9sbCBpcyBpbmNsdWRlZCBpbiB0aGUgaW5pdGlhbCBjYWxjdWxhdGlvbiBvZiB0aGUgb2Zmc2V0IG9mIHRoZSBwYXJlbnQsIGFuZCBuZXZlciByZWNhbGN1bGF0ZWQgdXBvbiBkcmFnCgkJaWYodGhpcy5jc3NQb3NpdGlvbiA9PT0gImFic29sdXRlIiAmJiB0aGlzLnNjcm9sbFBhcmVudFswXSAhPT0gZG9jdW1lbnQgJiYgJC5jb250YWlucyh0aGlzLnNjcm9sbFBhcmVudFswXSwgdGhpcy5vZmZzZXRQYXJlbnRbMF0pKSB7CgkJCXBvLmxlZnQgKz0gdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpOwoJCQlwby50b3AgKz0gdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCk7CgkJfQoKCQkvLyBUaGlzIG5lZWRzIHRvIGJlIGFjdHVhbGx5IGRvbmUgZm9yIGFsbCBicm93c2Vycywgc2luY2UgcGFnZVgvcGFnZVkgaW5jbHVkZXMgdGhpcyBpbmZvcm1hdGlvbgoJCS8vIHdpdGggYW4gdWdseSBJRSBmaXgKCQlpZiggdGhpcy5vZmZzZXRQYXJlbnRbMF0gPT09IGRvY3VtZW50LmJvZHkgfHwgKHRoaXMub2Zmc2V0UGFyZW50WzBdLnRhZ05hbWUgJiYgdGhpcy5vZmZzZXRQYXJlbnRbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAiaHRtbCIgJiYgJC51aS5pZSkpIHsKCQkJcG8gPSB7IHRvcDogMCwgbGVmdDogMCB9OwoJCX0KCgkJcmV0dXJuIHsKCQkJdG9wOiBwby50b3AgKyAocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKCJib3JkZXJUb3BXaWR0aCIpLDEwKSB8fCAwKSwKCQkJbGVmdDogcG8ubGVmdCArIChwYXJzZUludCh0aGlzLm9mZnNldFBhcmVudC5jc3MoImJvcmRlckxlZnRXaWR0aCIpLDEwKSB8fCAwKQoJCX07CgoJfSwKCglfZ2V0UmVsYXRpdmVPZmZzZXQ6IGZ1bmN0aW9uKCkgewoKCQlpZih0aGlzLmNzc1Bvc2l0aW9uID09PSAicmVsYXRpdmUiKSB7CgkJCXZhciBwID0gdGhpcy5jdXJyZW50SXRlbS5wb3NpdGlvbigpOwoJCQlyZXR1cm4gewoJCQkJdG9wOiBwLnRvcCAtIChwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoInRvcCIpLDEwKSB8fCAwKSArIHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpLAoJCQkJbGVmdDogcC5sZWZ0IC0gKHBhcnNlSW50KHRoaXMuaGVscGVyLmNzcygibGVmdCIpLDEwKSB8fCAwKSArIHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKQoJCQl9OwoJCX0gZWxzZSB7CgkJCXJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9OwoJCX0KCgl9LAoKCV9jYWNoZU1hcmdpbnM6IGZ1bmN0aW9uKCkgewoJCXRoaXMubWFyZ2lucyA9IHsKCQkJbGVmdDogKHBhcnNlSW50KHRoaXMuY3VycmVudEl0ZW0uY3NzKCJtYXJnaW5MZWZ0IiksMTApIHx8IDApLAoJCQl0b3A6IChwYXJzZUludCh0aGlzLmN1cnJlbnRJdGVtLmNzcygibWFyZ2luVG9wIiksMTApIHx8IDApCgkJfTsKCX0sCgoJX2NhY2hlSGVscGVyUHJvcG9ydGlvbnM6IGZ1bmN0aW9uKCkgewoJCXRoaXMuaGVscGVyUHJvcG9ydGlvbnMgPSB7CgkJCXdpZHRoOiB0aGlzLmhlbHBlci5vdXRlcldpZHRoKCksCgkJCWhlaWdodDogdGhpcy5oZWxwZXIub3V0ZXJIZWlnaHQoKQoJCX07Cgl9LAoKCV9zZXRDb250YWlubWVudDogZnVuY3Rpb24oKSB7CgoJCXZhciBjZSwgY28sIG92ZXIsCgkJCW8gPSB0aGlzLm9wdGlvbnM7CgkJaWYoby5jb250YWlubWVudCA9PT0gInBhcmVudCIpIHsKCQkJby5jb250YWlubWVudCA9IHRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGU7CgkJfQoJCWlmKG8uY29udGFpbm1lbnQgPT09ICJkb2N1bWVudCIgfHwgby5jb250YWlubWVudCA9PT0gIndpbmRvdyIpIHsKCQkJdGhpcy5jb250YWlubWVudCA9IFsKCQkJCTAgLSB0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0IC0gdGhpcy5vZmZzZXQucGFyZW50LmxlZnQsCgkJCQkwIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC0gdGhpcy5vZmZzZXQucGFyZW50LnRvcCwKCQkJCSQoby5jb250YWlubWVudCA9PT0gImRvY3VtZW50IiA\/IGRvY3VtZW50IDogd2luZG93KS53aWR0aCgpIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LAoJCQkJKCQoby5jb250YWlubWVudCA9PT0gImRvY3VtZW50IiA\/IGRvY3VtZW50IDogd2luZG93KS5oZWlnaHQoKSB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0KSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcAoJCQldOwoJCX0KCgkJaWYoISgvXihkb2N1bWVudHx3aW5kb3d8cGFyZW50KSQvKS50ZXN0KG8uY29udGFpbm1lbnQpKSB7CgkJCWNlID0gJChvLmNvbnRhaW5tZW50KVswXTsKCQkJY28gPSAkKG8uY29udGFpbm1lbnQpLm9mZnNldCgpOwoJCQlvdmVyID0gKCQoY2UpLmNzcygib3ZlcmZsb3ciKSAhPT0gImhpZGRlbiIpOwoKCQkJdGhpcy5jb250YWlubWVudCA9IFsKCQkJCWNvLmxlZnQgKyAocGFyc2VJbnQoJChjZSkuY3NzKCJib3JkZXJMZWZ0V2lkdGgiKSwxMCkgfHwgMCkgKyAocGFyc2VJbnQoJChjZSkuY3NzKCJwYWRkaW5nTGVmdCIpLDEwKSB8fCAwKSAtIHRoaXMubWFyZ2lucy5sZWZ0LAoJCQkJY28udG9wICsgKHBhcnNlSW50KCQoY2UpLmNzcygiYm9yZGVyVG9wV2lkdGgiKSwxMCkgfHwgMCkgKyAocGFyc2VJbnQoJChjZSkuY3NzKCJwYWRkaW5nVG9wIiksMTApIHx8IDApIC0gdGhpcy5tYXJnaW5zLnRvcCwKCQkJCWNvLmxlZnQrKG92ZXIgPyBNYXRoLm1heChjZS5zY3JvbGxXaWR0aCxjZS5vZmZzZXRXaWR0aCkgOiBjZS5vZmZzZXRXaWR0aCkgLSAocGFyc2VJbnQoJChjZSkuY3NzKCJib3JkZXJMZWZ0V2lkdGgiKSwxMCkgfHwgMCkgLSAocGFyc2VJbnQoJChjZSkuY3NzKCJwYWRkaW5nUmlnaHQiKSwxMCkgfHwgMCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gdGhpcy5tYXJnaW5zLmxlZnQsCgkJCQljby50b3ArKG92ZXIgPyBNYXRoLm1heChjZS5zY3JvbGxIZWlnaHQsY2Uub2Zmc2V0SGVpZ2h0KSA6IGNlLm9mZnNldEhlaWdodCkgLSAocGFyc2VJbnQoJChjZSkuY3NzKCJib3JkZXJUb3BXaWR0aCIpLDEwKSB8fCAwKSAtIChwYXJzZUludCgkKGNlKS5jc3MoInBhZGRpbmdCb3R0b20iKSwxMCkgfHwgMCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIHRoaXMubWFyZ2lucy50b3AKCQkJXTsKCQl9CgoJfSwKCglfY29udmVydFBvc2l0aW9uVG86IGZ1bmN0aW9uKGQsIHBvcykgewoKCQlpZighcG9zKSB7CgkJCXBvcyA9IHRoaXMucG9zaXRpb247CgkJfQoJCXZhciBtb2QgPSBkID09PSAiYWJzb2x1dGUiID8gMSA6IC0xLAoJCQlzY3JvbGwgPSB0aGlzLmNzc1Bvc2l0aW9uID09PSAiYWJzb2x1dGUiICYmICEodGhpcy5zY3JvbGxQYXJlbnRbMF0gIT09IGRvY3VtZW50ICYmICQuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sIHRoaXMub2Zmc2V0UGFyZW50WzBdKSkgPyB0aGlzLm9mZnNldFBhcmVudCA6IHRoaXMuc2Nyb2xsUGFyZW50LAoJCQlzY3JvbGxJc1Jvb3ROb2RlID0gKC8oaHRtbHxib2R5KS9pKS50ZXN0KHNjcm9sbFswXS50YWdOYW1lKTsKCgkJcmV0dXJuIHsKCQkJdG9wOiAoCgkJCQlwb3MudG9wCSsJCQkJCQkJCQkJCQkJCQkJLy8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uCgkJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AgKiBtb2QgKwkJCQkJCQkJCQkvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnQKCQkJCXRoaXMub2Zmc2V0LnBhcmVudC50b3AgKiBtb2QgLQkJCQkJCQkJCQkJLy8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcikKCQkJCSggKCB0aGlzLmNzc1Bvc2l0aW9uID09PSAiZml4ZWQiID8gLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDogKCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxUb3AoKSApICkgKiBtb2QpCgkJCSksCgkJCWxlZnQ6ICgKCQkJCXBvcy5sZWZ0ICsJCQkJCQkJCQkJCQkJCQkJLy8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uCgkJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0ICogbW9kICsJCQkJCQkJCQkJLy8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50CgkJCQl0aGlzLm9mZnNldC5wYXJlbnQubGVmdCAqIG1vZAktCQkJCQkJCQkJCS8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpCgkJCQkoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gImZpeGVkIiA\/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgOiBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxMZWZ0KCkgKSAqIG1vZCkKCQkJKQoJCX07CgoJfSwKCglfZ2VuZXJhdGVQb3NpdGlvbjogZnVuY3Rpb24oZXZlbnQpIHsKCgkJdmFyIHRvcCwgbGVmdCwKCQkJbyA9IHRoaXMub3B0aW9ucywKCQkJcGFnZVggPSBldmVudC5wYWdlWCwKCQkJcGFnZVkgPSBldmVudC5wYWdlWSwKCQkJc2Nyb2xsID0gdGhpcy5jc3NQb3NpdGlvbiA9PT0gImFic29sdXRlIiAmJiAhKHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9PSBkb2N1bWVudCAmJiAkLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkpID8gdGhpcy5vZmZzZXRQYXJlbnQgOiB0aGlzLnNjcm9sbFBhcmVudCwgc2Nyb2xsSXNSb290Tm9kZSA9ICgvKGh0bWx8Ym9keSkvaSkudGVzdChzY3JvbGxbMF0udGFnTmFtZSk7CgoJCS8vIFRoaXMgaXMgYW5vdGhlciB2ZXJ5IHdlaXJkIHNwZWNpYWwgY2FzZSB0aGF0IG9ubHkgaGFwcGVucyBmb3IgcmVsYXRpdmUgZWxlbWVudHM6CgkJLy8gMS4gSWYgdGhlIGNzcyBwb3NpdGlvbiBpcyByZWxhdGl2ZQoJCS8vIDIuIGFuZCB0aGUgc2Nyb2xsIHBhcmVudCBpcyB0aGUgZG9jdW1lbnQgb3Igc2ltaWxhciB0byB0aGUgb2Zmc2V0IHBhcmVudAoJCS8vIHdlIGhhdmUgdG8gcmVmcmVzaCB0aGUgcmVsYXRpdmUgb2Zmc2V0IGR1cmluZyB0aGUgc2Nyb2xsIHNvIHRoZXJlIGFyZSBubyBqdW1wcwoJCWlmKHRoaXMuY3NzUG9zaXRpb24gPT09ICJyZWxhdGl2ZSIgJiYgISh0aGlzLnNjcm9sbFBhcmVudFswXSAhPT0gZG9jdW1lbnQgJiYgdGhpcy5zY3JvbGxQYXJlbnRbMF0gIT09IHRoaXMub2Zmc2V0UGFyZW50WzBdKSkgewoJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZSA9IHRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KCk7CgkJfQoKCQkvKgoJCSAqIC0gUG9zaXRpb24gY29uc3RyYWluaW5nIC0KCQkgKiBDb25zdHJhaW4gdGhlIHBvc2l0aW9uIHRvIGEgbWl4IG9mIGdyaWQsIGNvbnRhaW5tZW50LgoJCSAqLwoKCQlpZih0aGlzLm9yaWdpbmFsUG9zaXRpb24pIHsgLy9JZiB3ZSBhcmUgbm90IGRyYWdnaW5nIHlldCwgd2Ugd29uJ3QgY2hlY2sgZm9yIG9wdGlvbnMKCgkJCWlmKHRoaXMuY29udGFpbm1lbnQpIHsKCQkJCWlmKGV2ZW50LnBhZ2VYIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8IHRoaXMuY29udGFpbm1lbnRbMF0pIHsKCQkJCQlwYWdlWCA9IHRoaXMuY29udGFpbm1lbnRbMF0gKyB0aGlzLm9mZnNldC5jbGljay5sZWZ0OwoJCQkJfQoJCQkJaWYoZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPCB0aGlzLmNvbnRhaW5tZW50WzFdKSB7CgkJCQkJcGFnZVkgPSB0aGlzLmNvbnRhaW5tZW50WzFdICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wOwoJCQkJfQoJCQkJaWYoZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID4gdGhpcy5jb250YWlubWVudFsyXSkgewoJCQkJCXBhZ2VYID0gdGhpcy5jb250YWlubWVudFsyXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ7CgkJCQl9CgkJCQlpZihldmVudC5wYWdlWSAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+IHRoaXMuY29udGFpbm1lbnRbM10pIHsKCQkJCQlwYWdlWSA9IHRoaXMuY29udGFpbm1lbnRbM10gKyB0aGlzLm9mZnNldC5jbGljay50b3A7CgkJCQl9CgkJCX0KCgkJCWlmKG8uZ3JpZCkgewoJCQkJdG9wID0gdGhpcy5vcmlnaW5hbFBhZ2VZICsgTWF0aC5yb3VuZCgocGFnZVkgLSB0aGlzLm9yaWdpbmFsUGFnZVkpIC8gby5ncmlkWzFdKSAqIG8uZ3JpZFsxXTsKCQkJCXBhZ2VZID0gdGhpcy5jb250YWlubWVudCA\/ICggKHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+PSB0aGlzLmNvbnRhaW5tZW50WzFdICYmIHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA8PSB0aGlzLmNvbnRhaW5tZW50WzNdKSA\/IHRvcCA6ICgodG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID49IHRoaXMuY29udGFpbm1lbnRbMV0pID8gdG9wIC0gby5ncmlkWzFdIDogdG9wICsgby5ncmlkWzFdKSkgOiB0b3A7CgoJCQkJbGVmdCA9IHRoaXMub3JpZ2luYWxQYWdlWCArIE1hdGgucm91bmQoKHBhZ2VYIC0gdGhpcy5vcmlnaW5hbFBhZ2VYKSAvIG8uZ3JpZFswXSkgKiBvLmdyaWRbMF07CgkJCQlwYWdlWCA9IHRoaXMuY29udGFpbm1lbnQgPyAoIChsZWZ0IC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA+PSB0aGlzLmNvbnRhaW5tZW50WzBdICYmIGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0IDw9IHRoaXMuY29udGFpbm1lbnRbMl0pID8gbGVmdCA6ICgobGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPj0gdGhpcy5jb250YWlubWVudFswXSkgPyBsZWZ0IC0gby5ncmlkWzBdIDogbGVmdCArIG8uZ3JpZFswXSkpIDogbGVmdDsKCQkJfQoKCQl9CgoJCXJldHVybiB7CgkJCXRvcDogKAoJCQkJcGFnZVkgLQkJCQkJCQkJCQkJCQkJCQkvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb24KCQkJCXRoaXMub2Zmc2V0LmNsaWNrLnRvcCAtCQkJCQkJCQkJCQkJCS8vIENsaWNrIG9mZnNldCAocmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQpCgkJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AJLQkJCQkJCQkJCQkJLy8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50CgkJCQl0aGlzLm9mZnNldC5wYXJlbnQudG9wICsJCQkJCQkJCQkJCQkvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKQoJCQkJKCAoIHRoaXMuY3NzUG9zaXRpb24gPT09ICJmaXhlZCIgPyAtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCkgOiAoIHNjcm9sbElzUm9vdE5vZGUgPyAwIDogc2Nyb2xsLnNjcm9sbFRvcCgpICkgKSkKCQkJKSwKCQkJbGVmdDogKAoJCQkJcGFnZVggLQkJCQkJCQkJCQkJCQkJCQkvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb24KCQkJCXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgLQkJCQkJCQkJCQkJCS8vIENsaWNrIG9mZnNldCAocmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQpCgkJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0CS0JCQkJCQkJCQkJCS8vIE9ubHkgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgbm9kZXM6IFJlbGF0aXZlIG9mZnNldCBmcm9tIGVsZW1lbnQgdG8gb2Zmc2V0IHBhcmVudAoJCQkJdGhpcy5vZmZzZXQucGFyZW50LmxlZnQgKwkJCQkJCQkJCQkJCS8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpCgkJCQkoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gImZpeGVkIiA\/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgOiBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxMZWZ0KCkgKSkKCQkJKQoJCX07CgoJfSwKCglfcmVhcnJhbmdlOiBmdW5jdGlvbihldmVudCwgaSwgYSwgaGFyZFJlZnJlc2gpIHsKCgkJYSA\/IGFbMF0uYXBwZW5kQ2hpbGQodGhpcy5wbGFjZWhvbGRlclswXSkgOiBpLml0ZW1bMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlclswXSwgKHRoaXMuZGlyZWN0aW9uID09PSAiZG93biIgPyBpLml0ZW1bMF0gOiBpLml0ZW1bMF0ubmV4dFNpYmxpbmcpKTsKCgkJLy9WYXJpb3VzIHRoaW5ncyBkb25lIGhlcmUgdG8gaW1wcm92ZSB0aGUgcGVyZm9ybWFuY2U6CgkJLy8gMS4gd2UgY3JlYXRlIGEgc2V0VGltZW91dCwgdGhhdCBjYWxscyByZWZyZXNoUG9zaXRpb25zCgkJLy8gMi4gb24gdGhlIGluc3RhbmNlLCB3ZSBoYXZlIGEgY291bnRlciB2YXJpYWJsZSwgdGhhdCBnZXQncyBoaWdoZXIgYWZ0ZXIgZXZlcnkgYXBwZW5kCgkJLy8gMy4gb24gdGhlIGxvY2FsIHNjb3BlLCB3ZSBjb3B5IHRoZSBjb3VudGVyIHZhcmlhYmxlLCBhbmQgY2hlY2sgaW4gdGhlIHRpbWVvdXQsIGlmIGl0J3Mgc3RpbGwgdGhlIHNhbWUKCQkvLyA0LiB0aGlzIGxldHMgb25seSB0aGUgbGFzdCBhZGRpdGlvbiB0byB0aGUgdGltZW91dCBzdGFjayB0aHJvdWdoCgkJdGhpcy5jb3VudGVyID0gdGhpcy5jb3VudGVyID8gKyt0aGlzLmNvdW50ZXIgOiAxOwoJCXZhciBjb3VudGVyID0gdGhpcy5jb3VudGVyOwoKCQl0aGlzLl9kZWxheShmdW5jdGlvbigpIHsKCQkJaWYoY291bnRlciA9PT0gdGhpcy5jb3VudGVyKSB7CgkJCQl0aGlzLnJlZnJlc2hQb3NpdGlvbnMoIWhhcmRSZWZyZXNoKTsgLy9QcmVjb21wdXRlIGFmdGVyIGVhY2ggRE9NIGluc2VydGlvbiwgTk9UIG9uIG1vdXNlbW92ZQoJCQl9CgkJfSk7CgoJfSwKCglfY2xlYXI6IGZ1bmN0aW9uKGV2ZW50LCBub1Byb3BhZ2F0aW9uKSB7CgoJCXRoaXMucmV2ZXJ0aW5nID0gZmFsc2U7CgkJLy8gV2UgZGVsYXkgYWxsIGV2ZW50cyB0aGF0IGhhdmUgdG8gYmUgdHJpZ2dlcmVkIHRvIGFmdGVyIHRoZSBwb2ludCB3aGVyZSB0aGUgcGxhY2Vob2xkZXIgaGFzIGJlZW4gcmVtb3ZlZCBhbmQKCQkvLyBldmVyeXRoaW5nIGVsc2Ugbm9ybWFsaXplZCBhZ2FpbgoJCXZhciBpLAoJCQlkZWxheWVkVHJpZ2dlcnMgPSBbXTsKCgkJLy8gV2UgZmlyc3QgaGF2ZSB0byB1cGRhdGUgdGhlIGRvbSBwb3NpdGlvbiBvZiB0aGUgYWN0dWFsIGN1cnJlbnRJdGVtCgkJLy8gTm90ZTogZG9uJ3QgZG8gaXQgaWYgdGhlIGN1cnJlbnQgaXRlbSBpcyBhbHJlYWR5IHJlbW92ZWQgKGJ5IGEgdXNlciksIG9yIGl0IGdldHMgcmVhcHBlbmRlZCAoc2VlICM0MDg4KQoJCWlmKCF0aGlzLl9ub0ZpbmFsU29ydCAmJiB0aGlzLmN1cnJlbnRJdGVtLnBhcmVudCgpLmxlbmd0aCkgewoJCQl0aGlzLnBsYWNlaG9sZGVyLmJlZm9yZSh0aGlzLmN1cnJlbnRJdGVtKTsKCQl9CgkJdGhpcy5fbm9GaW5hbFNvcnQgPSBudWxsOwoKCQlpZih0aGlzLmhlbHBlclswXSA9PT0gdGhpcy5jdXJyZW50SXRlbVswXSkgewoJCQlmb3IoaSBpbiB0aGlzLl9zdG9yZWRDU1MpIHsKCQkJCWlmKHRoaXMuX3N0b3JlZENTU1tpXSA9PT0gImF1dG8iIHx8IHRoaXMuX3N0b3JlZENTU1tpXSA9PT0gInN0YXRpYyIpIHsKCQkJCQl0aGlzLl9zdG9yZWRDU1NbaV0gPSAiIjsKCQkJCX0KCQkJfQoJCQl0aGlzLmN1cnJlbnRJdGVtLmNzcyh0aGlzLl9zdG9yZWRDU1MpLnJlbW92ZUNsYXNzKCJ1aS1zb3J0YWJsZS1oZWxwZXIiKTsKCQl9IGVsc2UgewoJCQl0aGlzLmN1cnJlbnRJdGVtLnNob3coKTsKCQl9CgoJCWlmKHRoaXMuZnJvbU91dHNpZGUgJiYgIW5vUHJvcGFnYXRpb24pIHsKCQkJZGVsYXllZFRyaWdnZXJzLnB1c2goZnVuY3Rpb24oZXZlbnQpIHsgdGhpcy5fdHJpZ2dlcigicmVjZWl2ZSIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcy5mcm9tT3V0c2lkZSkpOyB9KTsKCQl9CgkJaWYoKHRoaXMuZnJvbU91dHNpZGUgfHwgdGhpcy5kb21Qb3NpdGlvbi5wcmV2ICE9PSB0aGlzLmN1cnJlbnRJdGVtLnByZXYoKS5ub3QoIi51aS1zb3J0YWJsZS1oZWxwZXIiKVswXSB8fCB0aGlzLmRvbVBvc2l0aW9uLnBhcmVudCAhPT0gdGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKVswXSkgJiYgIW5vUHJvcGFnYXRpb24pIHsKCQkJZGVsYXllZFRyaWdnZXJzLnB1c2goZnVuY3Rpb24oZXZlbnQpIHsgdGhpcy5fdHJpZ2dlcigidXBkYXRlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTsgfSk7IC8vVHJpZ2dlciB1cGRhdGUgY2FsbGJhY2sgaWYgdGhlIERPTSBwb3NpdGlvbiBoYXMgY2hhbmdlZAoJCX0KCgkJLy8gQ2hlY2sgaWYgdGhlIGl0ZW1zIENvbnRhaW5lciBoYXMgQ2hhbmdlZCBhbmQgdHJpZ2dlciBhcHByb3ByaWF0ZQoJCS8vIGV2ZW50cy4KCQlpZiAodGhpcyAhPT0gdGhpcy5jdXJyZW50Q29udGFpbmVyKSB7CgkJCWlmKCFub1Byb3BhZ2F0aW9uKSB7CgkJCQlkZWxheWVkVHJpZ2dlcnMucHVzaChmdW5jdGlvbihldmVudCkgeyB0aGlzLl90cmlnZ2VyKCJyZW1vdmUiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkpOyB9KTsKCQkJCWRlbGF5ZWRUcmlnZ2Vycy5wdXNoKChmdW5jdGlvbihjKSB7IHJldHVybiBmdW5jdGlvbihldmVudCkgeyBjLl90cmlnZ2VyKCJyZWNlaXZlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCh0aGlzKSk7IH07ICB9KS5jYWxsKHRoaXMsIHRoaXMuY3VycmVudENvbnRhaW5lcikpOwoJCQkJZGVsYXllZFRyaWdnZXJzLnB1c2goKGZ1bmN0aW9uKGMpIHsgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7IGMuX3RyaWdnZXIoInVwZGF0ZSIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcykpOyAgfTsgfSkuY2FsbCh0aGlzLCB0aGlzLmN1cnJlbnRDb250YWluZXIpKTsKCQkJfQoJCX0KCgoJCS8vUG9zdCBldmVudHMgdG8gY29udGFpbmVycwoJCWZvciAoaSA9IHRoaXMuY29udGFpbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7CgkJCWlmKCFub1Byb3BhZ2F0aW9uKSB7CgkJCQlkZWxheWVkVHJpZ2dlcnMucHVzaCgoZnVuY3Rpb24oYykgeyByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHsgYy5fdHJpZ2dlcigiZGVhY3RpdmF0ZSIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcykpOyB9OyAgfSkuY2FsbCh0aGlzLCB0aGlzLmNvbnRhaW5lcnNbaV0pKTsKCQkJfQoJCQlpZih0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUub3ZlcikgewoJCQkJZGVsYXllZFRyaWdnZXJzLnB1c2goKGZ1bmN0aW9uKGMpIHsgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7IGMuX3RyaWdnZXIoIm91dCIsIGV2ZW50LCB0aGlzLl91aUhhc2godGhpcykpOyB9OyAgfSkuY2FsbCh0aGlzLCB0aGlzLmNvbnRhaW5lcnNbaV0pKTsKCQkJCXRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyID0gMDsKCQkJfQoJCX0KCgkJLy9EbyB3aGF0IHdhcyBvcmlnaW5hbGx5IGluIHBsdWdpbnMKCQlpZiAoIHRoaXMuc3RvcmVkQ3Vyc29yICkgewoJCQl0aGlzLmRvY3VtZW50LmZpbmQoICJib2R5IiApLmNzcyggImN1cnNvciIsIHRoaXMuc3RvcmVkQ3Vyc29yICk7CgkJCXRoaXMuc3RvcmVkU3R5bGVzaGVldC5yZW1vdmUoKTsKCQl9CgkJaWYodGhpcy5fc3RvcmVkT3BhY2l0eSkgewoJCQl0aGlzLmhlbHBlci5jc3MoIm9wYWNpdHkiLCB0aGlzLl9zdG9yZWRPcGFjaXR5KTsKCQl9CgkJaWYodGhpcy5fc3RvcmVkWkluZGV4KSB7CgkJCXRoaXMuaGVscGVyLmNzcygiekluZGV4IiwgdGhpcy5fc3RvcmVkWkluZGV4ID09PSAiYXV0byIgPyAiIiA6IHRoaXMuX3N0b3JlZFpJbmRleCk7CgkJfQoKCQl0aGlzLmRyYWdnaW5nID0gZmFsc2U7CgkJaWYodGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsKSB7CgkJCWlmKCFub1Byb3BhZ2F0aW9uKSB7CgkJCQl0aGlzLl90cmlnZ2VyKCJiZWZvcmVTdG9wIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTsKCQkJCWZvciAoaT0wOyBpIDwgZGVsYXllZFRyaWdnZXJzLmxlbmd0aDsgaSsrKSB7CgkJCQkJZGVsYXllZFRyaWdnZXJzW2ldLmNhbGwodGhpcywgZXZlbnQpOwoJCQkJfSAvL1RyaWdnZXIgYWxsIGRlbGF5ZWQgZXZlbnRzCgkJCQl0aGlzLl90cmlnZ2VyKCJzdG9wIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTsKCQkJfQoKCQkJdGhpcy5mcm9tT3V0c2lkZSA9IGZhbHNlOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlpZighbm9Qcm9wYWdhdGlvbikgewoJCQl0aGlzLl90cmlnZ2VyKCJiZWZvcmVTdG9wIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpKTsKCQl9CgoJCS8vJCh0aGlzLnBsYWNlaG9sZGVyWzBdKS5yZW1vdmUoKTsgd291bGQgaGF2ZSBiZWVuIHRoZSBqUXVlcnkgd2F5IC0gdW5mb3J0dW5hdGVseSwgaXQgdW5iaW5kcyBBTEwgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUhCgkJdGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pOwoKCQlpZih0aGlzLmhlbHBlclswXSAhPT0gdGhpcy5jdXJyZW50SXRlbVswXSkgewoJCQl0aGlzLmhlbHBlci5yZW1vdmUoKTsKCQl9CgkJdGhpcy5oZWxwZXIgPSBudWxsOwoKCQlpZighbm9Qcm9wYWdhdGlvbikgewoJCQlmb3IgKGk9MDsgaSA8IGRlbGF5ZWRUcmlnZ2Vycy5sZW5ndGg7IGkrKykgewoJCQkJZGVsYXllZFRyaWdnZXJzW2ldLmNhbGwodGhpcywgZXZlbnQpOwoJCQl9IC8vVHJpZ2dlciBhbGwgZGVsYXllZCBldmVudHMKCQkJdGhpcy5fdHJpZ2dlcigic3RvcCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSk7CgkJfQoKCQl0aGlzLmZyb21PdXRzaWRlID0gZmFsc2U7CgkJcmV0dXJuIHRydWU7CgoJfSwKCglfdHJpZ2dlcjogZnVuY3Rpb24oKSB7CgkJaWYgKCQuV2lkZ2V0LnByb3RvdHlwZS5fdHJpZ2dlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpID09PSBmYWxzZSkgewoJCQl0aGlzLmNhbmNlbCgpOwoJCX0KCX0sCgoJX3VpSGFzaDogZnVuY3Rpb24oX2luc3QpIHsKCQl2YXIgaW5zdCA9IF9pbnN0IHx8IHRoaXM7CgkJcmV0dXJuIHsKCQkJaGVscGVyOiBpbnN0LmhlbHBlciwKCQkJcGxhY2Vob2xkZXI6IGluc3QucGxhY2Vob2xkZXIgfHwgJChbXSksCgkJCXBvc2l0aW9uOiBpbnN0LnBvc2l0aW9uLAoJCQlvcmlnaW5hbFBvc2l0aW9uOiBpbnN0Lm9yaWdpbmFsUG9zaXRpb24sCgkJCW9mZnNldDogaW5zdC5wb3NpdGlvbkFicywKCQkJaXRlbTogaW5zdC5jdXJyZW50SXRlbSwKCQkJc2VuZGVyOiBfaW5zdCA\\/ICQoKSA6IGNsaWNrZWQubmV4dCgpLAoJCQl0b0hpZGUgPSBhY3RpdmUubmV4dCgpLAoJCQlldmVudERhdGEgPSB7CgkJCQlvbGRIZWFkZXI6IGFjdGl2ZSwKCQkJCW9sZFBhbmVsOiB0b0hpZGUsCgkJCQluZXdIZWFkZXI6IGNvbGxhcHNpbmcgPyAkKCkgOiBjbGlja2VkLAoJCQkJbmV3UGFuZWw6IHRvU2hvdwoJCQl9OwoKCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKCQlpZiAoCgkJCQkvLyBjbGljayBvbiBhY3RpdmUgaGVhZGVyLCBidXQgbm90IGNvbGxhcHNpYmxlCgkJCQkoIGNsaWNrZWRJc0FjdGl2ZSAmJiAhb3B0aW9ucy5jb2xsYXBzaWJsZSApIHx8CgkJCQkvLyBhbGxvdyBjYW5jZWxpbmcgYWN0aXZhdGlvbgoJCQkJKCB0aGlzLl90cmlnZ2VyKCAiYmVmb3JlQWN0aXZhdGUiLCBldmVudCwgZXZlbnREYXRhICkgPT09IGZhbHNlICkgKSB7CgkJCXJldHVybjsKCQl9CgoJCW9wdGlvbnMuYWN0aXZlID0gY29sbGFwc2luZyA\/IGZhbHNlIDogdGhpcy5oZWFkZXJzLmluZGV4KCBjbGlja2VkICk7CgoJCS8vIHdoZW4gdGhlIGNhbGwgdG8gLl90b2dnbGUoKSBjb21lcyBhZnRlciB0aGUgY2xhc3MgY2hhbmdlcwoJCS8vIGl0IGNhdXNlcyBhIHZlcnkgb2RkIGJ1ZyBpbiBJRSA4IChzZWUgIzY3MjApCgkJdGhpcy5hY3RpdmUgPSBjbGlja2VkSXNBY3RpdmUgPyAkKCkgOiBjbGlja2VkOwoJCXRoaXMuX3RvZ2dsZSggZXZlbnREYXRhICk7CgoJCS8vIHN3aXRjaCBjbGFzc2VzCgkJLy8gY29ybmVyIGNsYXNzZXMgb24gdGhlIHByZXZpb3VzbHkgYWN0aXZlIGhlYWRlciBzdGF5IGFmdGVyIHRoZSBhbmltYXRpb24KCQlhY3RpdmUucmVtb3ZlQ2xhc3MoICJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmUiICk7CgkJaWYgKCBvcHRpb25zLmljb25zICkgewoJCQlhY3RpdmUuY2hpbGRyZW4oICIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uIiApCgkJCQkucmVtb3ZlQ2xhc3MoIG9wdGlvbnMuaWNvbnMuYWN0aXZlSGVhZGVyICkKCQkJCS5hZGRDbGFzcyggb3B0aW9ucy5pY29ucy5oZWFkZXIgKTsKCQl9CgoJCWlmICggIWNsaWNrZWRJc0FjdGl2ZSApIHsKCQkJY2xpY2tlZAoJCQkJLnJlbW92ZUNsYXNzKCAidWktY29ybmVyLWFsbCIgKQoJCQkJLmFkZENsYXNzKCAidWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmUgdWktc3RhdGUtYWN0aXZlIHVpLWNvcm5lci10b3AiICk7CgkJCWlmICggb3B0aW9ucy5pY29ucyApIHsKCQkJCWNsaWNrZWQuY2hpbGRyZW4oICIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uIiApCgkJCQkJLnJlbW92ZUNsYXNzKCBvcHRpb25zLmljb25zLmhlYWRlciApCgkJCQkJLmFkZENsYXNzKCBvcHRpb25zLmljb25zLmFjdGl2ZUhlYWRlciApOwoJCQl9CgoJCQljbGlja2VkCgkJCQkubmV4dCgpCgkJCQkuYWRkQ2xhc3MoICJ1aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmUiICk7CgkJfQoJfSwKCglfdG9nZ2xlOiBmdW5jdGlvbiggZGF0YSApIHsKCQl2YXIgdG9TaG93ID0gZGF0YS5uZXdQYW5lbCwKCQkJdG9IaWRlID0gdGhpcy5wcmV2U2hvdy5sZW5ndGggPyB0aGlzLnByZXZTaG93IDogZGF0YS5vbGRQYW5lbDsKCgkJLy8gaGFuZGxlIGFjdGl2YXRpbmcgYSBwYW5lbCBkdXJpbmcgdGhlIGFuaW1hdGlvbiBmb3IgYW5vdGhlciBhY3RpdmF0aW9uCgkJdGhpcy5wcmV2U2hvdy5hZGQoIHRoaXMucHJldkhpZGUgKS5zdG9wKCB0cnVlLCB0cnVlICk7CgkJdGhpcy5wcmV2U2hvdyA9IHRvU2hvdzsKCQl0aGlzLnByZXZIaWRlID0gdG9IaWRlOwoKCQlpZiAoIHRoaXMub3B0aW9ucy5hbmltYXRlICkgewoJCQl0aGlzLl9hbmltYXRlKCB0b1Nob3csIHRvSGlkZSwgZGF0YSApOwoJCX0gZWxzZSB7CgkJCXRvSGlkZS5oaWRlKCk7CgkJCXRvU2hvdy5zaG93KCk7CgkJCXRoaXMuX3RvZ2dsZUNvbXBsZXRlKCBkYXRhICk7CgkJfQoKCQl0b0hpZGUuYXR0cih7CgkJCSJhcmlhLWV4cGFuZGVkIjogImZhbHNlIiwKCQkJImFyaWEtaGlkZGVuIjogInRydWUiCgkJfSk7CgkJdG9IaWRlLnByZXYoKS5hdHRyKCAiYXJpYS1zZWxlY3RlZCIsICJmYWxzZSIgKTsKCQkvLyBpZiB3ZSdyZSBzd2l0Y2hpbmcgcGFuZWxzLCByZW1vdmUgdGhlIG9sZCBoZWFkZXIgZnJvbSB0aGUgdGFiIG9yZGVyCgkJLy8gaWYgd2UncmUgb3BlbmluZyBmcm9tIGNvbGxhcHNlZCBzdGF0ZSwgcmVtb3ZlIHRoZSBwcmV2aW91cyBoZWFkZXIgZnJvbSB0aGUgdGFiIG9yZGVyCgkJLy8gaWYgd2UncmUgY29sbGFwc2luZywgdGhlbiBrZWVwIHRoZSBjb2xsYXBzaW5nIGhlYWRlciBpbiB0aGUgdGFiIG9yZGVyCgkJaWYgKCB0b1Nob3cubGVuZ3RoICYmIHRvSGlkZS5sZW5ndGggKSB7CgkJCXRvSGlkZS5wcmV2KCkuYXR0ciggInRhYkluZGV4IiwgLTEgKTsKCQl9IGVsc2UgaWYgKCB0b1Nob3cubGVuZ3RoICkgewoJCQl0aGlzLmhlYWRlcnMuZmlsdGVyKGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICQoIHRoaXMgKS5hdHRyKCAidGFiSW5kZXgiICkgPT09IDA7CgkJCX0pCgkJCS5hdHRyKCAidGFiSW5kZXgiLCAtMSApOwoJCX0KCgkJdG9TaG93CgkJCS5hdHRyKHsKCQkJCSJhcmlhLWV4cGFuZGVkIjogInRydWUiLAoJCQkJImFyaWEtaGlkZGVuIjogImZhbHNlIgoJCQl9KQoJCQkucHJldigpCgkJCQkuYXR0cih7CgkJCQkJImFyaWEtc2VsZWN0ZWQiOiAidHJ1ZSIsCgkJCQkJdGFiSW5kZXg6IDAKCQkJCX0pOwoJfSwKCglfYW5pbWF0ZTogZnVuY3Rpb24oIHRvU2hvdywgdG9IaWRlLCBkYXRhICkgewoJCXZhciB0b3RhbCwgZWFzaW5nLCBkdXJhdGlvbiwKCQkJdGhhdCA9IHRoaXMsCgkJCWFkanVzdCA9IDAsCgkJCWRvd24gPSB0b1Nob3cubGVuZ3RoICYmCgkJCQkoICF0b0hpZGUubGVuZ3RoIHx8ICggdG9TaG93LmluZGV4KCkgPCB0b0hpZGUuaW5kZXgoKSApICksCgkJCWFuaW1hdGUgPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZSB8fCB7fSwKCQkJb3B0aW9ucyA9IGRvd24gJiYgYW5pbWF0ZS5kb3duIHx8IGFuaW1hdGUsCgkJCWNvbXBsZXRlID0gZnVuY3Rpb24oKSB7CgkJCQl0aGF0Ll90b2dnbGVDb21wbGV0ZSggZGF0YSApOwoJCQl9OwoKCQlpZiAoIHR5cGVvZiBvcHRpb25zID09PSAibnVtYmVyIiApIHsKCQkJZHVyYXRpb24gPSBvcHRpb25zOwoJCX0KCQlpZiAoIHR5cGVvZiBvcHRpb25zID09PSAic3RyaW5nIiApIHsKCQkJZWFzaW5nID0gb3B0aW9uczsKCQl9CgkJLy8gZmFsbCBiYWNrIGZyb20gb3B0aW9ucyB0byBhbmltYXRpb24gaW4gY2FzZSBvZiBwYXJ0aWFsIGRvd24gc2V0dGluZ3MKCQllYXNpbmcgPSBlYXNpbmcgfHwgb3B0aW9ucy5lYXNpbmcgfHwgYW5pbWF0ZS5lYXNpbmc7CgkJZHVyYXRpb24gPSBkdXJhdGlvbiB8fCBvcHRpb25zLmR1cmF0aW9uIHx8IGFuaW1hdGUuZHVyYXRpb247CgoJCWlmICggIXRvSGlkZS5sZW5ndGggKSB7CgkJCXJldHVybiB0b1Nob3cuYW5pbWF0ZSggc2hvd1Byb3BzLCBkdXJhdGlvbiwgZWFzaW5nLCBjb21wbGV0ZSApOwoJCX0KCQlpZiAoICF0b1Nob3cubGVuZ3RoICkgewoJCQlyZXR1cm4gdG9IaWRlLmFuaW1hdGUoIGhpZGVQcm9wcywgZHVyYXRpb24sIGVhc2luZywgY29tcGxldGUgKTsKCQl9CgoJCXRvdGFsID0gdG9TaG93LnNob3coKS5vdXRlckhlaWdodCgpOwoJCXRvSGlkZS5hbmltYXRlKCBoaWRlUHJvcHMsIHsKCQkJZHVyYXRpb246IGR1cmF0aW9uLAoJCQllYXNpbmc6IGVhc2luZywKCQkJc3RlcDogZnVuY3Rpb24oIG5vdywgZnggKSB7CgkJCQlmeC5ub3cgPSBNYXRoLnJvdW5kKCBub3cgKTsKCQkJfQoJCX0pOwoJCXRvU2hvdwoJCQkuaGlkZSgpCgkJCS5hbmltYXRlKCBzaG93UHJvcHMsIHsKCQkJCWR1cmF0aW9uOiBkdXJhdGlvbiwKCQkJCWVhc2luZzogZWFzaW5nLAoJCQkJY29tcGxldGU6IGNvbXBsZXRlLAoJCQkJc3RlcDogZnVuY3Rpb24oIG5vdywgZnggKSB7CgkJCQkJZngubm93ID0gTWF0aC5yb3VuZCggbm93ICk7CgkJCQkJaWYgKCBmeC5wcm9wICE9PSAiaGVpZ2h0IiApIHsKCQkJCQkJYWRqdXN0ICs9IGZ4Lm5vdzsKCQkJCQl9IGVsc2UgaWYgKCB0aGF0Lm9wdGlvbnMuaGVpZ2h0U3R5bGUgIT09ICJjb250ZW50IiApIHsKCQkJCQkJZngubm93ID0gTWF0aC5yb3VuZCggdG90YWwgLSB0b0hpZGUub3V0ZXJIZWlnaHQoKSAtIGFkanVzdCApOwoJCQkJCQlhZGp1c3QgPSAwOwoJCQkJCX0KCQkJCX0KCQkJfSk7Cgl9LAoKCV90b2dnbGVDb21wbGV0ZTogZnVuY3Rpb24oIGRhdGEgKSB7CgkJdmFyIHRvSGlkZSA9IGRhdGEub2xkUGFuZWw7CgoJCXRvSGlkZQoJCQkucmVtb3ZlQ2xhc3MoICJ1aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmUiICkKCQkJLnByZXYoKQoJCQkJLnJlbW92ZUNsYXNzKCAidWktY29ybmVyLXRvcCIgKQoJCQkJLmFkZENsYXNzKCAidWktY29ybmVyLWFsbCIgKTsKCgkJLy8gV29yayBhcm91bmQgZm9yIHJlbmRlcmluZyBidWcgaW4gSUUgKCM1NDIxKQoJCWlmICggdG9IaWRlLmxlbmd0aCApIHsKCQkJdG9IaWRlLnBhcmVudCgpWzBdLmNsYXNzTmFtZSA9IHRvSGlkZS5wYXJlbnQoKVswXS5jbGFzc05hbWU7CgkJfQoKCQl0aGlzLl90cmlnZ2VyKCAiYWN0aXZhdGUiLCBudWxsLCBkYXRhICk7Cgl9Cn0pOwoKfSkoIGpRdWVyeSApOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCi8vIHVzZWQgdG8gcHJldmVudCByYWNlIGNvbmRpdGlvbnMgd2l0aCByZW1vdGUgZGF0YSBzb3VyY2VzCnZhciByZXF1ZXN0SW5kZXggPSAwOwoKJC53aWRnZXQoICJ1aS5hdXRvY29tcGxldGUiLCB7Cgl2ZXJzaW9uOiAiMS4xMC4zIiwKCWRlZmF1bHRFbGVtZW50OiAiPGlucHV0PiIsCglvcHRpb25zOiB7CgkJYXBwZW5kVG86IG51bGwsCgkJYXV0b0ZvY3VzOiBmYWxzZSwKCQlkZWxheTogMzAwLAoJCW1pbkxlbmd0aDogMSwKCQlwb3NpdGlvbjogewoJCQlteTogImxlZnQgdG9wIiwKCQkJYXQ6ICJsZWZ0IGJvdHRvbSIsCgkJCWNvbGxpc2lvbjogIm5vbmUiCgkJfSwKCQlzb3VyY2U6IG51bGwsCgoJCS8vIGNhbGxiYWNrcwoJCWNoYW5nZTogbnVsbCwKCQljbG9zZTogbnVsbCwKCQlmb2N1czogbnVsbCwKCQlvcGVuOiBudWxsLAoJCXJlc3BvbnNlOiBudWxsLAoJCXNlYXJjaDogbnVsbCwKCQlzZWxlY3Q6IG51bGwKCX0sCgoJcGVuZGluZzogMCwKCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQkvLyBTb21lIGJyb3dzZXJzIG9ubHkgcmVwZWF0IGtleWRvd24gZXZlbnRzLCBub3Qga2V5cHJlc3MgZXZlbnRzLAoJCS8vIHNvIHdlIHVzZSB0aGUgc3VwcHJlc3NLZXlQcmVzcyBmbGFnIHRvIGRldGVybWluZSBpZiB3ZSd2ZSBhbHJlYWR5CgkJLy8gaGFuZGxlZCB0aGUga2V5ZG93biBldmVudC4gIzcyNjkKCQkvLyBVbmZvcnR1bmF0ZWx5IHRoZSBjb2RlIGZvciAmIGluIGtleXByZXNzIGlzIHRoZSBzYW1lIGFzIHRoZSB1cCBhcnJvdywKCQkvLyBzbyB3ZSB1c2UgdGhlIHN1cHByZXNzS2V5UHJlc3NSZXBlYXQgZmxhZyB0byBhdm9pZCBoYW5kbGluZyBrZXlwcmVzcwoJCS8vIGV2ZW50cyB3aGVuIHdlIGtub3cgdGhlIGtleWRvd24gZXZlbnQgd2FzIHVzZWQgdG8gbW9kaWZ5IHRoZQoJCS8vIHNlYXJjaCB0ZXJtLiAjNzc5OQoJCXZhciBzdXBwcmVzc0tleVByZXNzLCBzdXBwcmVzc0tleVByZXNzUmVwZWF0LCBzdXBwcmVzc0lucHV0LAoJCQlub2RlTmFtZSA9IHRoaXMuZWxlbWVudFswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLAoJCQlpc1RleHRhcmVhID0gbm9kZU5hbWUgPT09ICJ0ZXh0YXJlYSIsCgkJCWlzSW5wdXQgPSBub2RlTmFtZSA9PT0gImlucHV0IjsKCgkJdGhpcy5pc011bHRpTGluZSA9CgkJCS8vIFRleHRhcmVhcyBhcmUgYWx3YXlzIG11bHRpLWxpbmUKCQkJaXNUZXh0YXJlYSA\/IHRydWUgOgoJCQkvLyBJbnB1dHMgYXJlIGFsd2F5cyBzaW5nbGUtbGluZSwgZXZlbiBpZiBpbnNpZGUgYSBjb250ZW50RWRpdGFibGUgZWxlbWVudAoJCQkvLyBJRSBhbHNvIHRyZWF0cyBpbnB1dHMgYXMgY29udGVudEVkaXRhYmxlCgkJCWlzSW5wdXQgPyBmYWxzZSA6CgkJCS8vIEFsbCBvdGhlciBlbGVtZW50IHR5cGVzIGFyZSBkZXRlcm1pbmVkIGJ5IHdoZXRoZXIgb3Igbm90IHRoZXkncmUgY29udGVudEVkaXRhYmxlCgkJCXRoaXMuZWxlbWVudC5wcm9wKCAiaXNDb250ZW50RWRpdGFibGUiICk7CgoJCXRoaXMudmFsdWVNZXRob2QgPSB0aGlzLmVsZW1lbnRbIGlzVGV4dGFyZWEgfHwgaXNJbnB1dCA\\/ICIgcmVzdWx0cyBhcmUiIDogIiByZXN1bHQgaXMiICkgKwoJCQkJCSIgYXZhaWxhYmxlLCB1c2UgdXAgYW5kIGRvd24gYXJyb3cga2V5cyB0byBuYXZpZ2F0ZS4iOwoJCQl9CgkJfQoJfSwKCglfX3Jlc3BvbnNlOiBmdW5jdGlvbiggY29udGVudCApIHsKCQl2YXIgbWVzc2FnZTsKCQl0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTsKCQlpZiAoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCB8fCB0aGlzLmNhbmNlbFNlYXJjaCApIHsKCQkJcmV0dXJuOwoJCX0KCQlpZiAoIGNvbnRlbnQgJiYgY29udGVudC5sZW5ndGggKSB7CgkJCW1lc3NhZ2UgPSB0aGlzLm9wdGlvbnMubWVzc2FnZXMucmVzdWx0cyggY29udGVudC5sZW5ndGggKTsKCQl9IGVsc2UgewoJCQltZXNzYWdlID0gdGhpcy5vcHRpb25zLm1lc3NhZ2VzLm5vUmVzdWx0czsKCQl9CgkJdGhpcy5saXZlUmVnaW9uLnRleHQoIG1lc3NhZ2UgKTsKCX0KfSk7Cgp9KCBqUXVlcnkgKSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIGxhc3RBY3RpdmUsIHN0YXJ0WFBvcywgc3RhcnRZUG9zLCBjbGlja0RyYWdnZWQsCgliYXNlQ2xhc3NlcyA9ICJ1aS1idXR0b24gdWktd2lkZ2V0IHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWFsbCIsCglzdGF0ZUNsYXNzZXMgPSAidWktc3RhdGUtaG92ZXIgdWktc3RhdGUtYWN0aXZlICIsCgl0eXBlQ2xhc3NlcyA9ICJ1aS1idXR0b24taWNvbnMtb25seSB1aS1idXR0b24taWNvbi1vbmx5IHVpLWJ1dHRvbi10ZXh0LWljb25zIHVpLWJ1dHRvbi10ZXh0LWljb24tcHJpbWFyeSB1aS1idXR0b24tdGV4dC1pY29uLXNlY29uZGFyeSB1aS1idXR0b24tdGV4dC1vbmx5IiwKCWZvcm1SZXNldEhhbmRsZXIgPSBmdW5jdGlvbigpIHsKCQl2YXIgZm9ybSA9ICQoIHRoaXMgKTsKCQlzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQlmb3JtLmZpbmQoICI6dWktYnV0dG9uIiApLmJ1dHRvbiggInJlZnJlc2giICk7CgkJfSwgMSApOwoJfSwKCXJhZGlvR3JvdXAgPSBmdW5jdGlvbiggcmFkaW8gKSB7CgkJdmFyIG5hbWUgPSByYWRpby5uYW1lLAoJCQlmb3JtID0gcmFkaW8uZm9ybSwKCQkJcmFkaW9zID0gJCggW10gKTsKCQlpZiAoIG5hbWUgKSB7CgkJCW5hbWUgPSBuYW1lLnJlcGxhY2UoIC8nL2csICJcXCciICk7CgkJCWlmICggZm9ybSApIHsKCQkJCXJhZGlvcyA9ICQoIGZvcm0gKS5maW5kKCAiW25hbWU9JyIgKyBuYW1lICsgIiddIiApOwoJCQl9IGVsc2UgewoJCQkJcmFkaW9zID0gJCggIltuYW1lPSciICsgbmFtZSArICInXSIsIHJhZGlvLm93bmVyRG9jdW1lbnQgKQoJCQkJCS5maWx0ZXIoZnVuY3Rpb24oKSB7CgkJCQkJCXJldHVybiAhdGhpcy5mb3JtOwoJCQkJCX0pOwoJCQl9CgkJfQoJCXJldHVybiByYWRpb3M7Cgl9OwoKJC53aWRnZXQoICJ1aS5idXR0b24iLCB7Cgl2ZXJzaW9uOiAiMS4xMC4zIiwKCWRlZmF1bHRFbGVtZW50OiAiPGJ1dHRvbj4iLAoJb3B0aW9uczogewoJCWRpc2FibGVkOiBudWxsLAoJCXRleHQ6IHRydWUsCgkJbGFiZWw6IG51bGwsCgkJaWNvbnM6IHsKCQkJcHJpbWFyeTogbnVsbCwKCQkJc2Vjb25kYXJ5OiBudWxsCgkJfQoJfSwKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC5jbG9zZXN0KCAiZm9ybSIgKQoJCQkudW5iaW5kKCAicmVzZXQiICsgdGhpcy5ldmVudE5hbWVzcGFjZSApCgkJCS5iaW5kKCAicmVzZXQiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZm9ybVJlc2V0SGFuZGxlciApOwoKCQlpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgIT09ICJib29sZWFuIiApIHsKCQkJdGhpcy5vcHRpb25zLmRpc2FibGVkID0gISF0aGlzLmVsZW1lbnQucHJvcCggImRpc2FibGVkIiApOwoJCX0gZWxzZSB7CgkJCXRoaXMuZWxlbWVudC5wcm9wKCAiZGlzYWJsZWQiLCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKTsKCQl9CgoJCXRoaXMuX2RldGVybWluZUJ1dHRvblR5cGUoKTsKCQl0aGlzLmhhc1RpdGxlID0gISF0aGlzLmJ1dHRvbkVsZW1lbnQuYXR0ciggInRpdGxlIiApOwoKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgkJCXRvZ2dsZUJ1dHRvbiA9IHRoaXMudHlwZSA9PT0gImNoZWNrYm94IiB8fCB0aGlzLnR5cGUgPT09ICJyYWRpbyIsCgkJCWFjdGl2ZUNsYXNzID0gIXRvZ2dsZUJ1dHRvbiA\\/ICJzIiA6ICggaWNvbnMucHJpbWFyeSA\/ICItcHJpbWFyeSIgOiAiLXNlY29uZGFyeSIgKSApICk7CgkJCX0KCgkJCWlmICggaWNvbnMucHJpbWFyeSApIHsKCQkJCWJ1dHRvbkVsZW1lbnQucHJlcGVuZCggIjxzcGFuIGNsYXNzPSd1aS1idXR0b24taWNvbi1wcmltYXJ5IHVpLWljb24gIiArIGljb25zLnByaW1hcnkgKyAiJz48L3NwYW4+IiApOwoJCQl9CgoJCQlpZiAoIGljb25zLnNlY29uZGFyeSApIHsKCQkJCWJ1dHRvbkVsZW1lbnQuYXBwZW5kKCAiPHNwYW4gY2xhc3M9J3VpLWJ1dHRvbi1pY29uLXNlY29uZGFyeSB1aS1pY29uICIgKyBpY29ucy5zZWNvbmRhcnkgKyAiJz48L3NwYW4+IiApOwoJCQl9CgoJCQlpZiAoICF0aGlzLm9wdGlvbnMudGV4dCApIHsKCQkJCWJ1dHRvbkNsYXNzZXMucHVzaCggbXVsdGlwbGVJY29ucyA\/ICJ1aS1idXR0b24taWNvbnMtb25seSIgOiAidWktYnV0dG9uLWljb24tb25seSIgKTsKCgkJCQlpZiAoICF0aGlzLmhhc1RpdGxlICkgewoJCQkJCWJ1dHRvbkVsZW1lbnQuYXR0ciggInRpdGxlIiwgJC50cmltKCBidXR0b25UZXh0ICkgKTsKCQkJCX0KCQkJfQoJCX0gZWxzZSB7CgkJCWJ1dHRvbkNsYXNzZXMucHVzaCggInVpLWJ1dHRvbi10ZXh0LW9ubHkiICk7CgkJfQoJCWJ1dHRvbkVsZW1lbnQuYWRkQ2xhc3MoIGJ1dHRvbkNsYXNzZXMuam9pbiggIiAiICkgKTsKCX0KfSk7CgokLndpZGdldCggInVpLmJ1dHRvbnNldCIsIHsKCXZlcnNpb246ICIxLjEwLjMiLAoJb3B0aW9uczogewoJCWl0ZW1zOiAiYnV0dG9uLCBpbnB1dFt0eXBlPWJ1dHRvbl0sIGlucHV0W3R5cGU9c3VibWl0XSwgaW5wdXRbdHlwZT1yZXNldF0sIGlucHV0W3R5cGU9Y2hlY2tib3hdLCBpbnB1dFt0eXBlPXJhZGlvXSwgYSwgOmRhdGEodWktYnV0dG9uKSIKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5lbGVtZW50LmFkZENsYXNzKCAidWktYnV0dG9uc2V0IiApOwoJfSwKCglfaW5pdDogZnVuY3Rpb24oKSB7CgkJdGhpcy5yZWZyZXNoKCk7Cgl9LAoKCV9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCWlmICgga2V5ID09PSAiZGlzYWJsZWQiICkgewoJCQl0aGlzLmJ1dHRvbnMuYnV0dG9uKCAib3B0aW9uIiwga2V5LCB2YWx1ZSApOwoJCX0KCgkJdGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTsKCX0sCgoJcmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJdmFyIHJ0bCA9IHRoaXMuZWxlbWVudC5jc3MoICJkaXJlY3Rpb24iICkgPT09ICJydGwiOwoKCQl0aGlzLmJ1dHRvbnMgPSB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zICkKCQkJLmZpbHRlciggIjp1aS1idXR0b24iICkKCQkJCS5idXR0b24oICJyZWZyZXNoIiApCgkJCS5lbmQoKQoJCQkubm90KCAiOnVpLWJ1dHRvbiIgKQoJCQkJLmJ1dHRvbigpCgkJCS5lbmQoKQoJCQkubWFwKGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICQoIHRoaXMgKS5idXR0b24oICJ3aWRnZXQiIClbIDAgXTsKCQkJfSkKCQkJCS5yZW1vdmVDbGFzcyggInVpLWNvcm5lci1hbGwgdWktY29ybmVyLWxlZnQgdWktY29ybmVyLXJpZ2h0IiApCgkJCQkuZmlsdGVyKCAiOmZpcnN0IiApCgkJCQkJLmFkZENsYXNzKCBydGwgPyAidWktY29ybmVyLXJpZ2h0IiA6ICJ1aS1jb3JuZXItbGVmdCIgKQoJCQkJLmVuZCgpCgkJCQkuZmlsdGVyKCAiOmxhc3QiICkKCQkJCQkuYWRkQ2xhc3MoIHJ0bCA\\/CgkJCQkJImRheU5hbWVzIiA6ICJkYXlOYW1lc1Nob3J0IikpKSArIDIwIC0gZGF0ZS5nZXREYXkoKSk7CgkJCX0KCQkJaW5zdC5pbnB1dC5hdHRyKCJzaXplIiwgdGhpcy5fZm9ybWF0RGF0ZShpbnN0LCBkYXRlKS5sZW5ndGgpOwoJCX0KCX0sCgoJLyogQXR0YWNoIGFuIGlubGluZSBkYXRlIHBpY2tlciB0byBhIGRpdi4gKi8KCV9pbmxpbmVEYXRlcGlja2VyOiBmdW5jdGlvbih0YXJnZXQsIGluc3QpIHsKCQl2YXIgZGl2U3BhbiA9ICQodGFyZ2V0KTsKCQlpZiAoZGl2U3Bhbi5oYXNDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkpIHsKCQkJcmV0dXJuOwoJCX0KCQlkaXZTcGFuLmFkZENsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKS5hcHBlbmQoaW5zdC5kcERpdik7CgkJJC5kYXRhKHRhcmdldCwgUFJPUF9OQU1FLCBpbnN0KTsKCQl0aGlzLl9zZXREYXRlKGluc3QsIHRoaXMuX2dldERlZmF1bHREYXRlKGluc3QpLCB0cnVlKTsKCQl0aGlzLl91cGRhdGVEYXRlcGlja2VyKGluc3QpOwoJCXRoaXMuX3VwZGF0ZUFsdGVybmF0ZShpbnN0KTsKCQkvL0lmIGRpc2FibGVkIG9wdGlvbiBpcyB0cnVlLCBkaXNhYmxlIHRoZSBkYXRlcGlja2VyIGJlZm9yZSBzaG93aW5nIGl0IChzZWUgdGlja2V0ICM1NjY1KQoJCWlmKCBpbnN0LnNldHRpbmdzLmRpc2FibGVkICkgewoJCQl0aGlzLl9kaXNhYmxlRGF0ZXBpY2tlciggdGFyZ2V0ICk7CgkJfQoJCS8vIFNldCBkaXNwbGF5OmJsb2NrIGluIHBsYWNlIG9mIGluc3QuZHBEaXYuc2hvdygpIHdoaWNoIHdvbid0IHdvcmsgb24gZGlzY29ubmVjdGVkIGVsZW1lbnRzCgkJLy8gaHR0cDovL2J1Z3MuanF1ZXJ5dWkuY29tL3RpY2tldC83NTUyIC0gQSBEYXRlcGlja2VyIGNyZWF0ZWQgb24gYSBkZXRhY2hlZCBkaXYgaGFzIHplcm8gaGVpZ2h0CgkJaW5zdC5kcERpdi5jc3MoICJkaXNwbGF5IiwgImJsb2NrIiApOwoJfSwKCgkvKiBQb3AtdXAgdGhlIGRhdGUgcGlja2VyIGluIGEgImRpYWxvZyIgYm94LgoJICogQHBhcmFtICBpbnB1dCBlbGVtZW50IC0gaWdub3JlZAoJICogQHBhcmFtICBkYXRlCXN0cmluZyBvciBEYXRlIC0gdGhlIGluaXRpYWwgZGF0ZSB0byBkaXNwbGF5CgkgKiBAcGFyYW0gIG9uU2VsZWN0ICBmdW5jdGlvbiAtIHRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYSBkYXRlIGlzIHNlbGVjdGVkCgkgKiBAcGFyYW0gIHNldHRpbmdzICBvYmplY3QgLSB1cGRhdGUgdGhlIGRpYWxvZyBkYXRlIHBpY2tlciBpbnN0YW5jZSdzIHNldHRpbmdzIChhbm9ueW1vdXMgb2JqZWN0KQoJICogQHBhcmFtICBwb3MgaW50WzJdIC0gY29vcmRpbmF0ZXMgZm9yIHRoZSBkaWFsb2cncyBwb3NpdGlvbiB3aXRoaW4gdGhlIHNjcmVlbiBvcgoJICoJCQkJCWV2ZW50IC0gd2l0aCB4L3kgY29vcmRpbmF0ZXMgb3IKCSAqCQkJCQlsZWF2ZSBlbXB0eSBmb3IgZGVmYXVsdCAoc2NyZWVuIGNlbnRyZSkKCSAqIEByZXR1cm4gdGhlIG1hbmFnZXIgb2JqZWN0CgkgKi8KCV9kaWFsb2dEYXRlcGlja2VyOiBmdW5jdGlvbihpbnB1dCwgZGF0ZSwgb25TZWxlY3QsIHNldHRpbmdzLCBwb3MpIHsKCQl2YXIgaWQsIGJyb3dzZXJXaWR0aCwgYnJvd3NlckhlaWdodCwgc2Nyb2xsWCwgc2Nyb2xsWSwKCQkJaW5zdCA9IHRoaXMuX2RpYWxvZ0luc3Q7IC8vIGludGVybmFsIGluc3RhbmNlCgoJCWlmICghaW5zdCkgewoJCQl0aGlzLnV1aWQgKz0gMTsKCQkJaWQgPSAiZHAiICsgdGhpcy51dWlkOwoJCQl0aGlzLl9kaWFsb2dJbnB1dCA9ICQoIjxpbnB1dCB0eXBlPSd0ZXh0JyBpZD0nIiArIGlkICsKCQkJCSInIHN0eWxlPSdwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTEwMHB4OyB3aWR0aDogMHB4OycvPiIpOwoJCQl0aGlzLl9kaWFsb2dJbnB1dC5rZXlkb3duKHRoaXMuX2RvS2V5RG93bik7CgkJCSQoImJvZHkiKS5hcHBlbmQodGhpcy5fZGlhbG9nSW5wdXQpOwoJCQlpbnN0ID0gdGhpcy5fZGlhbG9nSW5zdCA9IHRoaXMuX25ld0luc3QodGhpcy5fZGlhbG9nSW5wdXQsIGZhbHNlKTsKCQkJaW5zdC5zZXR0aW5ncyA9IHt9OwoJCQkkLmRhdGEodGhpcy5fZGlhbG9nSW5wdXRbMF0sIFBST1BfTkFNRSwgaW5zdCk7CgkJfQoJCWV4dGVuZFJlbW92ZShpbnN0LnNldHRpbmdzLCBzZXR0aW5ncyB8fCB7fSk7CgkJZGF0ZSA9IChkYXRlICYmIGRhdGUuY29uc3RydWN0b3IgPT09IERhdGUgPyB0aGlzLl9mb3JtYXREYXRlKGluc3QsIGRhdGUpIDogZGF0ZSk7CgkJdGhpcy5fZGlhbG9nSW5wdXQudmFsKGRhdGUpOwoKCQl0aGlzLl9wb3MgPSAocG9zID8gKHBvcy5sZW5ndGggPyBwb3MgOiBbcG9zLnBhZ2VYLCBwb3MucGFnZVldKSA6IG51bGwpOwoJCWlmICghdGhpcy5fcG9zKSB7CgkJCWJyb3dzZXJXaWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDsKCQkJYnJvd3NlckhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7CgkJCXNjcm9sbFggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQ7CgkJCXNjcm9sbFkgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wOwoJCQl0aGlzLl9wb3MgPSAvLyBzaG91bGQgdXNlIGFjdHVhbCB3aWR0aC9oZWlnaHQgYmVsb3cKCQkJCVsoYnJvd3NlcldpZHRoIC8gMikgLSAxMDAgKyBzY3JvbGxYLCAoYnJvd3NlckhlaWdodCAvIDIpIC0gMTUwICsgc2Nyb2xsWV07CgkJfQoKCQkvLyBtb3ZlIGlucHV0IG9uIHNjcmVlbiBmb3IgZm9jdXMsIGJ1dCBoaWRkZW4gYmVoaW5kIGRpYWxvZwoJCXRoaXMuX2RpYWxvZ0lucHV0LmNzcygibGVmdCIsICh0aGlzLl9wb3NbMF0gKyAyMCkgKyAicHgiKS5jc3MoInRvcCIsIHRoaXMuX3Bvc1sxXSArICJweCIpOwoJCWluc3Quc2V0dGluZ3Mub25TZWxlY3QgPSBvblNlbGVjdDsKCQl0aGlzLl9pbkRpYWxvZyA9IHRydWU7CgkJdGhpcy5kcERpdi5hZGRDbGFzcyh0aGlzLl9kaWFsb2dDbGFzcyk7CgkJdGhpcy5fc2hvd0RhdGVwaWNrZXIodGhpcy5fZGlhbG9nSW5wdXRbMF0pOwoJCWlmICgkLmJsb2NrVUkpIHsKCQkJJC5ibG9ja1VJKHRoaXMuZHBEaXYpOwoJCX0KCQkkLmRhdGEodGhpcy5fZGlhbG9nSW5wdXRbMF0sIFBST1BfTkFNRSwgaW5zdCk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCS8qIERldGFjaCBhIGRhdGVwaWNrZXIgZnJvbSBpdHMgY29udHJvbC4KCSAqIEBwYXJhbSAgdGFyZ2V0CWVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAqLwoJX2Rlc3Ryb3lEYXRlcGlja2VyOiBmdW5jdGlvbih0YXJnZXQpIHsKCQl2YXIgbm9kZU5hbWUsCgkJCSR0YXJnZXQgPSAkKHRhcmdldCksCgkJCWluc3QgPSAkLmRhdGEodGFyZ2V0LCBQUk9QX05BTUUpOwoKCQlpZiAoISR0YXJnZXQuaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpKSB7CgkJCXJldHVybjsKCQl9CgoJCW5vZGVOYW1lID0gdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CgkJJC5yZW1vdmVEYXRhKHRhcmdldCwgUFJPUF9OQU1FKTsKCQlpZiAobm9kZU5hbWUgPT09ICJpbnB1dCIpIHsKCQkJaW5zdC5hcHBlbmQucmVtb3ZlKCk7CgkJCWluc3QudHJpZ2dlci5yZW1vdmUoKTsKCQkJJHRhcmdldC5yZW1vdmVDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkuCgkJCQl1bmJpbmQoImZvY3VzIiwgdGhpcy5fc2hvd0RhdGVwaWNrZXIpLgoJCQkJdW5iaW5kKCJrZXlkb3duIiwgdGhpcy5fZG9LZXlEb3duKS4KCQkJCXVuYmluZCgia2V5cHJlc3MiLCB0aGlzLl9kb0tleVByZXNzKS4KCQkJCXVuYmluZCgia2V5dXAiLCB0aGlzLl9kb0tleVVwKTsKCQl9IGVsc2UgaWYgKG5vZGVOYW1lID09PSAiZGl2IiB8fCBub2RlTmFtZSA9PT0gInNwYW4iKSB7CgkJCSR0YXJnZXQucmVtb3ZlQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpLmVtcHR5KCk7CgkJfQoJfSwKCgkvKiBFbmFibGUgdGhlIGRhdGUgcGlja2VyIHRvIGEgalF1ZXJ5IHNlbGVjdGlvbi4KCSAqIEBwYXJhbSAgdGFyZ2V0CWVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAqLwoJX2VuYWJsZURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCkgewoJCXZhciBub2RlTmFtZSwgaW5saW5lLAoJCQkkdGFyZ2V0ID0gJCh0YXJnZXQpLAoJCQlpbnN0ID0gJC5kYXRhKHRhcmdldCwgUFJPUF9OQU1FKTsKCgkJaWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKSkgewoJCQlyZXR1cm47CgkJfQoKCQlub2RlTmFtZSA9IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwoJCWlmIChub2RlTmFtZSA9PT0gImlucHV0IikgewoJCQl0YXJnZXQuZGlzYWJsZWQgPSBmYWxzZTsKCQkJaW5zdC50cmlnZ2VyLmZpbHRlcigiYnV0dG9uIikuCgkJCQllYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLmRpc2FibGVkID0gZmFsc2U7IH0pLmVuZCgpLgoJCQkJZmlsdGVyKCJpbWciKS5jc3Moe29wYWNpdHk6ICIxLjAiLCBjdXJzb3I6ICIifSk7CgkJfSBlbHNlIGlmIChub2RlTmFtZSA9PT0gImRpdiIgfHwgbm9kZU5hbWUgPT09ICJzcGFuIikgewoJCQlpbmxpbmUgPSAkdGFyZ2V0LmNoaWxkcmVuKCIuIiArIHRoaXMuX2lubGluZUNsYXNzKTsKCQkJaW5saW5lLmNoaWxkcmVuKCkucmVtb3ZlQ2xhc3MoInVpLXN0YXRlLWRpc2FibGVkIik7CgkJCWlubGluZS5maW5kKCJzZWxlY3QudWktZGF0ZXBpY2tlci1tb250aCwgc2VsZWN0LnVpLWRhdGVwaWNrZXIteWVhciIpLgoJCQkJcHJvcCgiZGlzYWJsZWQiLCBmYWxzZSk7CgkJfQoJCXRoaXMuX2Rpc2FibGVkSW5wdXRzID0gJC5tYXAodGhpcy5fZGlzYWJsZWRJbnB1dHMsCgkJCWZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiAodmFsdWUgPT09IHRhcmdldCA\/IG51bGwgOiB2YWx1ZSk7IH0pOyAvLyBkZWxldGUgZW50cnkKCX0sCgoJLyogRGlzYWJsZSB0aGUgZGF0ZSBwaWNrZXIgdG8gYSBqUXVlcnkgc2VsZWN0aW9uLgoJICogQHBhcmFtICB0YXJnZXQJZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhbgoJICovCglfZGlzYWJsZURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCkgewoJCXZhciBub2RlTmFtZSwgaW5saW5lLAoJCQkkdGFyZ2V0ID0gJCh0YXJnZXQpLAoJCQlpbnN0ID0gJC5kYXRhKHRhcmdldCwgUFJPUF9OQU1FKTsKCgkJaWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKSkgewoJCQlyZXR1cm47CgkJfQoKCQlub2RlTmFtZSA9IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwoJCWlmIChub2RlTmFtZSA9PT0gImlucHV0IikgewoJCQl0YXJnZXQuZGlzYWJsZWQgPSB0cnVlOwoJCQlpbnN0LnRyaWdnZXIuZmlsdGVyKCJidXR0b24iKS4KCQkJCWVhY2goZnVuY3Rpb24oKSB7IHRoaXMuZGlzYWJsZWQgPSB0cnVlOyB9KS5lbmQoKS4KCQkJCWZpbHRlcigiaW1nIikuY3NzKHtvcGFjaXR5OiAiMC41IiwgY3Vyc29yOiAiZGVmYXVsdCJ9KTsKCQl9IGVsc2UgaWYgKG5vZGVOYW1lID09PSAiZGl2IiB8fCBub2RlTmFtZSA9PT0gInNwYW4iKSB7CgkJCWlubGluZSA9ICR0YXJnZXQuY2hpbGRyZW4oIi4iICsgdGhpcy5faW5saW5lQ2xhc3MpOwoJCQlpbmxpbmUuY2hpbGRyZW4oKS5hZGRDbGFzcygidWktc3RhdGUtZGlzYWJsZWQiKTsKCQkJaW5saW5lLmZpbmQoInNlbGVjdC51aS1kYXRlcGlja2VyLW1vbnRoLCBzZWxlY3QudWktZGF0ZXBpY2tlci15ZWFyIikuCgkJCQlwcm9wKCJkaXNhYmxlZCIsIHRydWUpOwoJCX0KCQl0aGlzLl9kaXNhYmxlZElucHV0cyA9ICQubWFwKHRoaXMuX2Rpc2FibGVkSW5wdXRzLAoJCQlmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gKHZhbHVlID09PSB0YXJnZXQgPyBudWxsIDogdmFsdWUpOyB9KTsgLy8gZGVsZXRlIGVudHJ5CgkJdGhpcy5fZGlzYWJsZWRJbnB1dHNbdGhpcy5fZGlzYWJsZWRJbnB1dHMubGVuZ3RoXSA9IHRhcmdldDsKCX0sCgoJLyogSXMgdGhlIGZpcnN0IGZpZWxkIGluIGEgalF1ZXJ5IGNvbGxlY3Rpb24gZGlzYWJsZWQgYXMgYSBkYXRlcGlja2VyPwoJICogQHBhcmFtICB0YXJnZXQJZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhbgoJICogQHJldHVybiBib29sZWFuIC0gdHJ1ZSBpZiBkaXNhYmxlZCwgZmFsc2UgaWYgZW5hYmxlZAoJICovCglfaXNEaXNhYmxlZERhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCkgewoJCWlmICghdGFyZ2V0KSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9kaXNhYmxlZElucHV0cy5sZW5ndGg7IGkrKykgewoJCQlpZiAodGhpcy5fZGlzYWJsZWRJbnB1dHNbaV0gPT09IHRhcmdldCkgewoJCQkJcmV0dXJuIHRydWU7CgkJCX0KCQl9CgkJcmV0dXJuIGZhbHNlOwoJfSwKCgkvKiBSZXRyaWV2ZSB0aGUgaW5zdGFuY2UgZGF0YSBmb3IgdGhlIHRhcmdldCBjb250cm9sLgoJICogQHBhcmFtICB0YXJnZXQgIGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAqIEByZXR1cm4gIG9iamVjdCAtIHRoZSBhc3NvY2lhdGVkIGluc3RhbmNlIGRhdGEKCSAqIEB0aHJvd3MgIGVycm9yIGlmIGEgalF1ZXJ5IHByb2JsZW0gZ2V0dGluZyBkYXRhCgkgKi8KCV9nZXRJbnN0OiBmdW5jdGlvbih0YXJnZXQpIHsKCQl0cnkgewoJCQlyZXR1cm4gJC5kYXRhKHRhcmdldCwgUFJPUF9OQU1FKTsKCQl9CgkJY2F0Y2ggKGVycikgewoJCQl0aHJvdyAiTWlzc2luZyBpbnN0YW5jZSBkYXRhIGZvciB0aGlzIGRhdGVwaWNrZXIiOwoJCX0KCX0sCgoJLyogVXBkYXRlIG9yIHJldHJpZXZlIHRoZSBzZXR0aW5ncyBmb3IgYSBkYXRlIHBpY2tlciBhdHRhY2hlZCB0byBhbiBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbi4KCSAqIEBwYXJhbSAgdGFyZ2V0ICBlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuCgkgKiBAcGFyYW0gIG5hbWUJb2JqZWN0IC0gdGhlIG5ldyBzZXR0aW5ncyB0byB1cGRhdGUgb3IKCSAqCQkJCXN0cmluZyAtIHRoZSBuYW1lIG9mIHRoZSBzZXR0aW5nIHRvIGNoYW5nZSBvciByZXRyaWV2ZSwKCSAqCQkJCXdoZW4gcmV0cmlldmluZyBhbHNvICJhbGwiIGZvciBhbGwgaW5zdGFuY2Ugc2V0dGluZ3Mgb3IKCSAqCQkJCSJkZWZhdWx0cyIgZm9yIGFsbCBnbG9iYWwgZGVmYXVsdHMKCSAqIEBwYXJhbSAgdmFsdWUgICBhbnkgLSB0aGUgbmV3IHZhbHVlIGZvciB0aGUgc2V0dGluZwoJICoJCQkJKG9taXQgaWYgYWJvdmUgaXMgYW4gb2JqZWN0IG9yIHRvIHJldHJpZXZlIGEgdmFsdWUpCgkgKi8KCV9vcHRpb25EYXRlcGlja2VyOiBmdW5jdGlvbih0YXJnZXQsIG5hbWUsIHZhbHVlKSB7CgkJdmFyIHNldHRpbmdzLCBkYXRlLCBtaW5EYXRlLCBtYXhEYXRlLAoJCQlpbnN0ID0gdGhpcy5fZ2V0SW5zdCh0YXJnZXQpOwoKCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgbmFtZSA9PT0gInN0cmluZyIpIHsKCQkJcmV0dXJuIChuYW1lID09PSAiZGVmYXVsdHMiID8gJC5leHRlbmQoe30sICQuZGF0ZXBpY2tlci5fZGVmYXVsdHMpIDoKCQkJCShpbnN0ID8gKG5hbWUgPT09ICJhbGwiID8gJC5leHRlbmQoe30sIGluc3Quc2V0dGluZ3MpIDoKCQkJCXRoaXMuX2dldChpbnN0LCBuYW1lKSkgOiBudWxsKSk7CgkJfQoKCQlzZXR0aW5ncyA9IG5hbWUgfHwge307CgkJaWYgKHR5cGVvZiBuYW1lID09PSAic3RyaW5nIikgewoJCQlzZXR0aW5ncyA9IHt9OwoJCQlzZXR0aW5nc1tuYW1lXSA9IHZhbHVlOwoJCX0KCgkJaWYgKGluc3QpIHsKCQkJaWYgKHRoaXMuX2N1ckluc3QgPT09IGluc3QpIHsKCQkJCXRoaXMuX2hpZGVEYXRlcGlja2VyKCk7CgkJCX0KCgkJCWRhdGUgPSB0aGlzLl9nZXREYXRlRGF0ZXBpY2tlcih0YXJnZXQsIHRydWUpOwoJCQltaW5EYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZShpbnN0LCAibWluIik7CgkJCW1heERhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGluc3QsICJtYXgiKTsKCQkJZXh0ZW5kUmVtb3ZlKGluc3Quc2V0dGluZ3MsIHNldHRpbmdzKTsKCQkJLy8gcmVmb3JtYXQgdGhlIG9sZCBtaW5EYXRlL21heERhdGUgdmFsdWVzIGlmIGRhdGVGb3JtYXQgY2hhbmdlcyBhbmQgYSBuZXcgbWluRGF0ZS9tYXhEYXRlIGlzbid0IHByb3ZpZGVkCgkJCWlmIChtaW5EYXRlICE9PSBudWxsICYmIHNldHRpbmdzLmRhdGVGb3JtYXQgIT09IHVuZGVmaW5lZCAmJiBzZXR0aW5ncy5taW5EYXRlID09PSB1bmRlZmluZWQpIHsKCQkJCWluc3Quc2V0dGluZ3MubWluRGF0ZSA9IHRoaXMuX2Zvcm1hdERhdGUoaW5zdCwgbWluRGF0ZSk7CgkJCX0KCQkJaWYgKG1heERhdGUgIT09IG51bGwgJiYgc2V0dGluZ3MuZGF0ZUZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIHNldHRpbmdzLm1heERhdGUgPT09IHVuZGVmaW5lZCkgewoJCQkJaW5zdC5zZXR0aW5ncy5tYXhEYXRlID0gdGhpcy5fZm9ybWF0RGF0ZShpbnN0LCBtYXhEYXRlKTsKCQkJfQoJCQlpZiAoICJkaXNhYmxlZCIgaW4gc2V0dGluZ3MgKSB7CgkJCQlpZiAoIHNldHRpbmdzLmRpc2FibGVkICkgewoJCQkJCXRoaXMuX2Rpc2FibGVEYXRlcGlja2VyKHRhcmdldCk7CgkJCQl9IGVsc2UgewoJCQkJCXRoaXMuX2VuYWJsZURhdGVwaWNrZXIodGFyZ2V0KTsKCQkJCX0KCQkJfQoJCQl0aGlzLl9hdHRhY2htZW50cygkKHRhcmdldCksIGluc3QpOwoJCQl0aGlzLl9hdXRvU2l6ZShpbnN0KTsKCQkJdGhpcy5fc2V0RGF0ZShpbnN0LCBkYXRlKTsKCQkJdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKGluc3QpOwoJCQl0aGlzLl91cGRhdGVEYXRlcGlja2VyKGluc3QpOwoJCX0KCX0sCgoJLy8gY2hhbmdlIG1ldGhvZCBkZXByZWNhdGVkCglfY2hhbmdlRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCB2YWx1ZSkgewoJCXRoaXMuX29wdGlvbkRhdGVwaWNrZXIodGFyZ2V0LCBuYW1lLCB2YWx1ZSk7Cgl9LAoKCS8qIFJlZHJhdyB0aGUgZGF0ZSBwaWNrZXIgYXR0YWNoZWQgdG8gYW4gaW5wdXQgZmllbGQgb3IgZGl2aXNpb24uCgkgKiBAcGFyYW0gIHRhcmdldCAgZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhbgoJICovCglfcmVmcmVzaERhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCkgewoJCXZhciBpbnN0ID0gdGhpcy5fZ2V0SW5zdCh0YXJnZXQpOwoJCWlmIChpbnN0KSB7CgkJCXRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoaW5zdCk7CgkJfQoJfSwKCgkvKiBTZXQgdGhlIGRhdGVzIGZvciBhIGpRdWVyeSBzZWxlY3Rpb24uCgkgKiBAcGFyYW0gIHRhcmdldCBlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuCgkgKiBAcGFyYW0gIGRhdGUJRGF0ZSAtIHRoZSBuZXcgZGF0ZQoJICovCglfc2V0RGF0ZURhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCwgZGF0ZSkgewoJCXZhciBpbnN0ID0gdGhpcy5fZ2V0SW5zdCh0YXJnZXQpOwoJCWlmIChpbnN0KSB7CgkJCXRoaXMuX3NldERhdGUoaW5zdCwgZGF0ZSk7CgkJCXRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoaW5zdCk7CgkJCXRoaXMuX3VwZGF0ZUFsdGVybmF0ZShpbnN0KTsKCQl9Cgl9LAoKCS8qIEdldCB0aGUgZGF0ZShzKSBmb3IgdGhlIGZpcnN0IGVudHJ5IGluIGEgalF1ZXJ5IHNlbGVjdGlvbi4KCSAqIEBwYXJhbSAgdGFyZ2V0IGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAqIEBwYXJhbSAgbm9EZWZhdWx0IGJvb2xlYW4gLSB0cnVlIGlmIG5vIGRlZmF1bHQgZGF0ZSBpcyB0byBiZSB1c2VkCgkgKiBAcmV0dXJuIERhdGUgLSB0aGUgY3VycmVudCBkYXRlCgkgKi8KCV9nZXREYXRlRGF0ZXBpY2tlcjogZnVuY3Rpb24odGFyZ2V0LCBub0RlZmF1bHQpIHsKCQl2YXIgaW5zdCA9IHRoaXMuX2dldEluc3QodGFyZ2V0KTsKCQlpZiAoaW5zdCAmJiAhaW5zdC5pbmxpbmUpIHsKCQkJdGhpcy5fc2V0RGF0ZUZyb21GaWVsZChpbnN0LCBub0RlZmF1bHQpOwoJCX0KCQlyZXR1cm4gKGluc3QgPyB0aGlzLl9nZXREYXRlKGluc3QpIDogbnVsbCk7Cgl9LAoKCS8qIEhhbmRsZSBrZXlzdHJva2VzLiAqLwoJX2RvS2V5RG93bjogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgb25TZWxlY3QsIGRhdGVTdHIsIHNlbCwKCQkJaW5zdCA9ICQuZGF0ZXBpY2tlci5fZ2V0SW5zdChldmVudC50YXJnZXQpLAoJCQloYW5kbGVkID0gdHJ1ZSwKCQkJaXNSVEwgPSBpbnN0LmRwRGl2LmlzKCIudWktZGF0ZXBpY2tlci1ydGwiKTsKCgkJaW5zdC5fa2V5RXZlbnQgPSB0cnVlOwoJCWlmICgkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nKSB7CgkJCXN3aXRjaCAoZXZlbnQua2V5Q29kZSkgewoJCQkJY2FzZSA5OiAkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7CgkJCQkJCWhhbmRsZWQgPSBmYWxzZTsKCQkJCQkJYnJlYWs7IC8vIGhpZGUgb24gdGFiIG91dAoJCQkJY2FzZSAxMzogc2VsID0gJCgidGQuIiArICQuZGF0ZXBpY2tlci5fZGF5T3ZlckNsYXNzICsgIjpub3QoLiIgKwoJCQkJCQkJCQkkLmRhdGVwaWNrZXIuX2N1cnJlbnRDbGFzcyArICIpIiwgaW5zdC5kcERpdik7CgkJCQkJCWlmIChzZWxbMF0pIHsKCQkJCQkJCSQuZGF0ZXBpY2tlci5fc2VsZWN0RGF5KGV2ZW50LnRhcmdldCwgaW5zdC5zZWxlY3RlZE1vbnRoLCBpbnN0LnNlbGVjdGVkWWVhciwgc2VsWzBdKTsKCQkJCQkJfQoKCQkJCQkJb25TZWxlY3QgPSAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAib25TZWxlY3QiKTsKCQkJCQkJaWYgKG9uU2VsZWN0KSB7CgkJCQkJCQlkYXRlU3RyID0gJC5kYXRlcGlja2VyLl9mb3JtYXREYXRlKGluc3QpOwoKCQkJCQkJCS8vIHRyaWdnZXIgY3VzdG9tIGNhbGxiYWNrCgkJCQkJCQlvblNlbGVjdC5hcHBseSgoaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXRbMF0gOiBudWxsKSwgW2RhdGVTdHIsIGluc3RdKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCSQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTsKCQkJCQkJfQoKCQkJCQkJcmV0dXJuIGZhbHNlOyAvLyBkb24ndCBzdWJtaXQgdGhlIGZvcm0KCQkJCWNhc2UgMjc6ICQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTsKCQkJCQkJYnJlYWs7IC8vIGhpZGUgb24gZXNjYXBlCgkJCQljYXNlIDMzOiAkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZXZlbnQudGFyZ2V0LCAoZXZlbnQuY3RybEtleSA\/CgkJCQkJCQktJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgInN0ZXBCaWdNb250aHMiKSA6CgkJCQkJCQktJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgInN0ZXBNb250aHMiKSksICJNIik7CgkJCQkJCWJyZWFrOyAvLyBwcmV2aW91cyBtb250aC95ZWFyIG9uIHBhZ2UgdXAvKyBjdHJsCgkJCQljYXNlIDM0OiAkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZXZlbnQudGFyZ2V0LCAoZXZlbnQuY3RybEtleSA\/CgkJCQkJCQkrJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgInN0ZXBCaWdNb250aHMiKSA6CgkJCQkJCQkrJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgInN0ZXBNb250aHMiKSksICJNIik7CgkJCQkJCWJyZWFrOyAvLyBuZXh0IG1vbnRoL3llYXIgb24gcGFnZSBkb3duLysgY3RybAoJCQkJY2FzZSAzNTogaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgewoJCQkJCQkJJC5kYXRlcGlja2VyLl9jbGVhckRhdGUoZXZlbnQudGFyZ2V0KTsKCQkJCQkJfQoJCQkJCQloYW5kbGVkID0gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5OwoJCQkJCQlicmVhazsgLy8gY2xlYXIgb24gY3RybCBvciBjb21tYW5kICtlbmQKCQkJCWNhc2UgMzY6IGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpIHsKCQkJCQkJCSQuZGF0ZXBpY2tlci5fZ290b1RvZGF5KGV2ZW50LnRhcmdldCk7CgkJCQkJCX0KCQkJCQkJaGFuZGxlZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTsKCQkJCQkJYnJlYWs7IC8vIGN1cnJlbnQgb24gY3RybCBvciBjb21tYW5kICtob21lCgkJCQljYXNlIDM3OiBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSB7CgkJCQkJCQkkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZXZlbnQudGFyZ2V0LCAoaXNSVEwgPyArMSA6IC0xKSwgIkQiKTsKCQkJCQkJfQoJCQkJCQloYW5kbGVkID0gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5OwoJCQkJCQkvLyAtMSBkYXkgb24gY3RybCBvciBjb21tYW5kICtsZWZ0CgkJCQkJCWlmIChldmVudC5vcmlnaW5hbEV2ZW50LmFsdEtleSkgewoJCQkJCQkJJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgKGV2ZW50LmN0cmxLZXkgPwoJCQkJCQkJCS0kLmRhdGVwaWNrZXIuX2dldChpbnN0LCAic3RlcEJpZ01vbnRocyIpIDoKCQkJCQkJCQktJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgInN0ZXBNb250aHMiKSksICJNIik7CgkJCQkJCX0KCQkJCQkJLy8gbmV4dCBtb250aC95ZWFyIG9uIGFsdCArbGVmdCBvbiBNYWMKCQkJCQkJYnJlYWs7CgkJCQljYXNlIDM4OiBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSB7CgkJCQkJCQkkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZXZlbnQudGFyZ2V0LCAtNywgIkQiKTsKCQkJCQkJfQoJCQkJCQloYW5kbGVkID0gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5OwoJCQkJCQlicmVhazsgLy8gLTEgd2VlayBvbiBjdHJsIG9yIGNvbW1hbmQgK3VwCgkJCQljYXNlIDM5OiBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSB7CgkJCQkJCQkkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZXZlbnQudGFyZ2V0LCAoaXNSVEwgPyAtMSA6ICsxKSwgIkQiKTsKCQkJCQkJfQoJCQkJCQloYW5kbGVkID0gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5OwoJCQkJCQkvLyArMSBkYXkgb24gY3RybCBvciBjb21tYW5kICtyaWdodAoJCQkJCQlpZiAoZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkpIHsKCQkJCQkJCSQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShldmVudC50YXJnZXQsIChldmVudC5jdHJsS2V5ID8KCQkJCQkJCQkrJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgInN0ZXBCaWdNb250aHMiKSA6CgkJCQkJCQkJKyQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICJzdGVwTW9udGhzIikpLCAiTSIpOwoJCQkJCQl9CgkJCQkJCS8vIG5leHQgbW9udGgveWVhciBvbiBhbHQgK3JpZ2h0CgkJCQkJCWJyZWFrOwoJCQkJY2FzZSA0MDogaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgewoJCQkJCQkJJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGV2ZW50LnRhcmdldCwgKzcsICJEIik7CgkJCQkJCX0KCQkJCQkJaGFuZGxlZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTsKCQkJCQkJYnJlYWs7IC8vICsxIHdlZWsgb24gY3RybCBvciBjb21tYW5kICtkb3duCgkJCQlkZWZhdWx0OiBoYW5kbGVkID0gZmFsc2U7CgkJCX0KCQl9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM2ICYmIGV2ZW50LmN0cmxLZXkpIHsgLy8gZGlzcGxheSB0aGUgZGF0ZSBwaWNrZXIgb24gY3RybCtob21lCgkJCSQuZGF0ZXBpY2tlci5fc2hvd0RhdGVwaWNrZXIodGhpcyk7CgkJfSBlbHNlIHsKCQkJaGFuZGxlZCA9IGZhbHNlOwoJCX0KCgkJaWYgKGhhbmRsZWQpIHsKCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CgkJfQoJfSwKCgkvKiBGaWx0ZXIgZW50ZXJlZCBjaGFyYWN0ZXJzIC0gYmFzZWQgb24gZGF0ZSBmb3JtYXQuICovCglfZG9LZXlQcmVzczogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgY2hhcnMsIGNociwKCQkJaW5zdCA9ICQuZGF0ZXBpY2tlci5fZ2V0SW5zdChldmVudC50YXJnZXQpOwoKCQlpZiAoJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgImNvbnN0cmFpbklucHV0IikpIHsKCQkJY2hhcnMgPSAkLmRhdGVwaWNrZXIuX3Bvc3NpYmxlQ2hhcnMoJC5kYXRlcGlja2VyLl9nZXQoaW5zdCwgImRhdGVGb3JtYXQiKSk7CgkJCWNociA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZXZlbnQuY2hhckNvZGUgPT0gbnVsbCA\/IGV2ZW50LmtleUNvZGUgOiBldmVudC5jaGFyQ29kZSk7CgkJCXJldHVybiBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgKGNociA8ICIgIiB8fCAhY2hhcnMgfHwgY2hhcnMuaW5kZXhPZihjaHIpID4gLTEpOwoJCX0KCX0sCgoJLyogU3luY2hyb25pc2UgbWFudWFsIGVudHJ5IGFuZCBmaWVsZC9hbHRlcm5hdGUgZmllbGQuICovCglfZG9LZXlVcDogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgZGF0ZSwKCQkJaW5zdCA9ICQuZGF0ZXBpY2tlci5fZ2V0SW5zdChldmVudC50YXJnZXQpOwoKCQlpZiAoaW5zdC5pbnB1dC52YWwoKSAhPT0gaW5zdC5sYXN0VmFsKSB7CgkJCXRyeSB7CgkJCQlkYXRlID0gJC5kYXRlcGlja2VyLnBhcnNlRGF0ZSgkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAiZGF0ZUZvcm1hdCIpLAoJCQkJCShpbnN0LmlucHV0ID8gaW5zdC5pbnB1dC52YWwoKSA6IG51bGwpLAoJCQkJCSQuZGF0ZXBpY2tlci5fZ2V0Rm9ybWF0Q29uZmlnKGluc3QpKTsKCgkJCQlpZiAoZGF0ZSkgeyAvLyBvbmx5IGlmIHZhbGlkCgkJCQkJJC5kYXRlcGlja2VyLl9zZXREYXRlRnJvbUZpZWxkKGluc3QpOwoJCQkJCSQuZGF0ZXBpY2tlci5fdXBkYXRlQWx0ZXJuYXRlKGluc3QpOwoJCQkJCSQuZGF0ZXBpY2tlci5fdXBkYXRlRGF0ZXBpY2tlcihpbnN0KTsKCQkJCX0KCQkJfQoJCQljYXRjaCAoZXJyKSB7CgkJCX0KCQl9CgkJcmV0dXJuIHRydWU7Cgl9LAoKCS8qIFBvcC11cCB0aGUgZGF0ZSBwaWNrZXIgZm9yIGEgZ2l2ZW4gaW5wdXQgZmllbGQuCgkgKiBJZiBmYWxzZSByZXR1cm5lZCBmcm9tIGJlZm9yZVNob3cgZXZlbnQgaGFuZGxlciBkbyBub3Qgc2hvdy4KCSAqIEBwYXJhbSAgaW5wdXQgIGVsZW1lbnQgLSB0aGUgaW5wdXQgZmllbGQgYXR0YWNoZWQgdG8gdGhlIGRhdGUgcGlja2VyIG9yCgkgKgkJCQkJZXZlbnQgLSBpZiB0cmlnZ2VyZWQgYnkgZm9jdXMKCSAqLwoJX3Nob3dEYXRlcGlja2VyOiBmdW5jdGlvbihpbnB1dCkgewoJCWlucHV0ID0gaW5wdXQudGFyZ2V0IHx8IGlucHV0OwoJCWlmIChpbnB1dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAiaW5wdXQiKSB7IC8vIGZpbmQgZnJvbSBidXR0b24vaW1hZ2UgdHJpZ2dlcgoJCQlpbnB1dCA9ICQoImlucHV0IiwgaW5wdXQucGFyZW50Tm9kZSlbMF07CgkJfQoKCQlpZiAoJC5kYXRlcGlja2VyLl9pc0Rpc2FibGVkRGF0ZXBpY2tlcihpbnB1dCkgfHwgJC5kYXRlcGlja2VyLl9sYXN0SW5wdXQgPT09IGlucHV0KSB7IC8vIGFscmVhZHkgaGVyZQoJCQlyZXR1cm47CgkJfQoKCQl2YXIgaW5zdCwgYmVmb3JlU2hvdywgYmVmb3JlU2hvd1NldHRpbmdzLCBpc0ZpeGVkLAoJCQlvZmZzZXQsIHNob3dBbmltLCBkdXJhdGlvbjsKCgkJaW5zdCA9ICQuZGF0ZXBpY2tlci5fZ2V0SW5zdChpbnB1dCk7CgkJaWYgKCQuZGF0ZXBpY2tlci5fY3VySW5zdCAmJiAkLmRhdGVwaWNrZXIuX2N1ckluc3QgIT09IGluc3QpIHsKCQkJJC5kYXRlcGlja2VyLl9jdXJJbnN0LmRwRGl2LnN0b3AodHJ1ZSwgdHJ1ZSk7CgkJCWlmICggaW5zdCAmJiAkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICkgewoJCQkJJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlciggJC5kYXRlcGlja2VyLl9jdXJJbnN0LmlucHV0WzBdICk7CgkJCX0KCQl9CgoJCWJlZm9yZVNob3cgPSAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAiYmVmb3JlU2hvdyIpOwoJCWJlZm9yZVNob3dTZXR0aW5ncyA9IGJlZm9yZVNob3cgPyBiZWZvcmVTaG93LmFwcGx5KGlucHV0LCBbaW5wdXQsIGluc3RdKSA6IHt9OwoJCWlmKGJlZm9yZVNob3dTZXR0aW5ncyA9PT0gZmFsc2UpewoJCQlyZXR1cm47CgkJfQoJCWV4dGVuZFJlbW92ZShpbnN0LnNldHRpbmdzLCBiZWZvcmVTaG93U2V0dGluZ3MpOwoKCQlpbnN0Lmxhc3RWYWwgPSBudWxsOwoJCSQuZGF0ZXBpY2tlci5fbGFzdElucHV0ID0gaW5wdXQ7CgkJJC5kYXRlcGlja2VyLl9zZXREYXRlRnJvbUZpZWxkKGluc3QpOwoKCQlpZiAoJC5kYXRlcGlja2VyLl9pbkRpYWxvZykgeyAvLyBoaWRlIGN1cnNvcgoJCQlpbnB1dC52YWx1ZSA9ICIiOwoJCX0KCQlpZiAoISQuZGF0ZXBpY2tlci5fcG9zKSB7IC8vIHBvc2l0aW9uIGJlbG93IGlucHV0CgkJCSQuZGF0ZXBpY2tlci5fcG9zID0gJC5kYXRlcGlja2VyLl9maW5kUG9zKGlucHV0KTsKCQkJJC5kYXRlcGlja2VyLl9wb3NbMV0gKz0gaW5wdXQub2Zmc2V0SGVpZ2h0OyAvLyBhZGQgdGhlIGhlaWdodAoJCX0KCgkJaXNGaXhlZCA9IGZhbHNlOwoJCSQoaW5wdXQpLnBhcmVudHMoKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQlpc0ZpeGVkIHw9ICQodGhpcykuY3NzKCJwb3NpdGlvbiIpID09PSAiZml4ZWQiOwoJCQlyZXR1cm4gIWlzRml4ZWQ7CgkJfSk7CgoJCW9mZnNldCA9IHtsZWZ0OiAkLmRhdGVwaWNrZXIuX3Bvc1swXSwgdG9wOiAkLmRhdGVwaWNrZXIuX3Bvc1sxXX07CgkJJC5kYXRlcGlja2VyLl9wb3MgPSBudWxsOwoJCS8vdG8gYXZvaWQgZmxhc2hlcyBvbiBGaXJlZm94CgkJaW5zdC5kcERpdi5lbXB0eSgpOwoJCS8vIGRldGVybWluZSBzaXppbmcgb2Zmc2NyZWVuCgkJaW5zdC5kcERpdi5jc3Moe3Bvc2l0aW9uOiAiYWJzb2x1dGUiLCBkaXNwbGF5OiAiYmxvY2siLCB0b3A6ICItMTAwMHB4In0pOwoJCSQuZGF0ZXBpY2tlci5fdXBkYXRlRGF0ZXBpY2tlcihpbnN0KTsKCQkvLyBmaXggd2lkdGggZm9yIGR5bmFtaWMgbnVtYmVyIG9mIGRhdGUgcGlja2VycwoJCS8vIGFuZCBhZGp1c3QgcG9zaXRpb24gYmVmb3JlIHNob3dpbmcKCQlvZmZzZXQgPSAkLmRhdGVwaWNrZXIuX2NoZWNrT2Zmc2V0KGluc3QsIG9mZnNldCwgaXNGaXhlZCk7CgkJaW5zdC5kcERpdi5jc3Moe3Bvc2l0aW9uOiAoJC5kYXRlcGlja2VyLl9pbkRpYWxvZyAmJiAkLmJsb2NrVUkgPwoJCQkic3RhdGljIiA6IChpc0ZpeGVkID8gImZpeGVkIiA6ICJhYnNvbHV0ZSIpKSwgZGlzcGxheTogIm5vbmUiLAoJCQlsZWZ0OiBvZmZzZXQubGVmdCArICJweCIsIHRvcDogb2Zmc2V0LnRvcCArICJweCJ9KTsKCgkJaWYgKCFpbnN0LmlubGluZSkgewoJCQlzaG93QW5pbSA9ICQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICJzaG93QW5pbSIpOwoJCQlkdXJhdGlvbiA9ICQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICJkdXJhdGlvbiIpOwoJCQlpbnN0LmRwRGl2LnpJbmRleCgkKGlucHV0KS56SW5kZXgoKSsxKTsKCQkJJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyA9IHRydWU7CgoJCQlpZiAoICQuZWZmZWN0cyAmJiAkLmVmZmVjdHMuZWZmZWN0WyBzaG93QW5pbSBdICkgewoJCQkJaW5zdC5kcERpdi5zaG93KHNob3dBbmltLCAkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAic2hvd09wdGlvbnMiKSwgZHVyYXRpb24pOwoJCQl9IGVsc2UgewoJCQkJaW5zdC5kcERpdltzaG93QW5pbSB8fCAic2hvdyJdKHNob3dBbmltID8gZHVyYXRpb24gOiBudWxsKTsKCQkJfQoKCQkJaWYgKCAkLmRhdGVwaWNrZXIuX3Nob3VsZEZvY3VzSW5wdXQoIGluc3QgKSApIHsKCQkJCWluc3QuaW5wdXQuZm9jdXMoKTsKCQkJfQoKCQkJJC5kYXRlcGlja2VyLl9jdXJJbnN0ID0gaW5zdDsKCQl9Cgl9LAoKCS8qIEdlbmVyYXRlIHRoZSBkYXRlIHBpY2tlciBjb250ZW50LiAqLwoJX3VwZGF0ZURhdGVwaWNrZXI6IGZ1bmN0aW9uKGluc3QpIHsKCQl0aGlzLm1heFJvd3MgPSA0OyAvL1Jlc2V0IHRoZSBtYXggbnVtYmVyIG9mIHJvd3MgYmVpbmcgZGlzcGxheWVkIChzZWUgIzcwNDMpCgkJaW5zdEFjdGl2ZSA9IGluc3Q7IC8vIGZvciBkZWxlZ2F0ZSBob3ZlciBldmVudHMKCQlpbnN0LmRwRGl2LmVtcHR5KCkuYXBwZW5kKHRoaXMuX2dlbmVyYXRlSFRNTChpbnN0KSk7CgkJdGhpcy5fYXR0YWNoSGFuZGxlcnMoaW5zdCk7CgkJaW5zdC5kcERpdi5maW5kKCIuIiArIHRoaXMuX2RheU92ZXJDbGFzcyArICIgYSIpLm1vdXNlb3ZlcigpOwoKCQl2YXIgb3JpZ3llYXJzaHRtbCwKCQkJbnVtTW9udGhzID0gdGhpcy5fZ2V0TnVtYmVyT2ZNb250aHMoaW5zdCksCgkJCWNvbHMgPSBudW1Nb250aHNbMV0sCgkJCXdpZHRoID0gMTc7CgoJCWluc3QuZHBEaXYucmVtb3ZlQ2xhc3MoInVpLWRhdGVwaWNrZXItbXVsdGktMiB1aS1kYXRlcGlja2VyLW11bHRpLTMgdWktZGF0ZXBpY2tlci1tdWx0aS00Iikud2lkdGgoIiIpOwoJCWlmIChjb2xzID4gMSkgewoJCQlpbnN0LmRwRGl2LmFkZENsYXNzKCJ1aS1kYXRlcGlja2VyLW11bHRpLSIgKyBjb2xzKS5jc3MoIndpZHRoIiwgKHdpZHRoICogY29scykgKyAiZW0iKTsKCQl9CgkJaW5zdC5kcERpdlsobnVtTW9udGhzWzBdICE9PSAxIHx8IG51bU1vbnRoc1sxXSAhPT0gMSA\/ICJhZGQiIDogInJlbW92ZSIpICsKCQkJIkNsYXNzIl0oInVpLWRhdGVwaWNrZXItbXVsdGkiKTsKCQlpbnN0LmRwRGl2Wyh0aGlzLl9nZXQoaW5zdCwgImlzUlRMIikgPyAiYWRkIiA6ICJyZW1vdmUiKSArCgkJCSJDbGFzcyJdKCJ1aS1kYXRlcGlja2VyLXJ0bCIpOwoKCQlpZiAoaW5zdCA9PT0gJC5kYXRlcGlja2VyLl9jdXJJbnN0ICYmICQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgJiYgJC5kYXRlcGlja2VyLl9zaG91bGRGb2N1c0lucHV0KCBpbnN0ICkgKSB7CgkJCWluc3QuaW5wdXQuZm9jdXMoKTsKCQl9CgoJCS8vIGRlZmZlcmVkIHJlbmRlciBvZiB0aGUgeWVhcnMgc2VsZWN0ICh0byBhdm9pZCBmbGFzaGVzIG9uIEZpcmVmb3gpCgkJaWYoIGluc3QueWVhcnNodG1sICl7CgkJCW9yaWd5ZWFyc2h0bWwgPSBpbnN0LnllYXJzaHRtbDsKCQkJc2V0VGltZW91dChmdW5jdGlvbigpewoJCQkJLy9hc3N1cmUgdGhhdCBpbnN0LnllYXJzaHRtbCBkaWRuJ3QgY2hhbmdlLgoJCQkJaWYoIG9yaWd5ZWFyc2h0bWwgPT09IGluc3QueWVhcnNodG1sICYmIGluc3QueWVhcnNodG1sICl7CgkJCQkJaW5zdC5kcERpdi5maW5kKCJzZWxlY3QudWktZGF0ZXBpY2tlci15ZWFyOmZpcnN0IikucmVwbGFjZVdpdGgoaW5zdC55ZWFyc2h0bWwpOwoJCQkJfQoJCQkJb3JpZ3llYXJzaHRtbCA9IGluc3QueWVhcnNodG1sID0gbnVsbDsKCQkJfSwgMCk7CgkJfQoJfSwKCgkvLyAjNjY5NCAtIGRvbid0IGZvY3VzIHRoZSBpbnB1dCBpZiBpdCdzIGFscmVhZHkgZm9jdXNlZAoJLy8gdGhpcyBicmVha3MgdGhlIGNoYW5nZSBldmVudCBpbiBJRQoJLy8gU3VwcG9ydDogSUUgYW5kIGpRdWVyeSA8MS45Cglfc2hvdWxkRm9jdXNJbnB1dDogZnVuY3Rpb24oIGluc3QgKSB7CgkJcmV0dXJuIGluc3QuaW5wdXQgJiYgaW5zdC5pbnB1dC5pcyggIjp2aXNpYmxlIiApICYmICFpbnN0LmlucHV0LmlzKCAiOmRpc2FibGVkIiApICYmICFpbnN0LmlucHV0LmlzKCAiOmZvY3VzIiApOwoJfSwKCgkvKiBDaGVjayBwb3NpdGlvbmluZyB0byByZW1haW4gb24gc2NyZWVuLiAqLwoJX2NoZWNrT2Zmc2V0OiBmdW5jdGlvbihpbnN0LCBvZmZzZXQsIGlzRml4ZWQpIHsKCQl2YXIgZHBXaWR0aCA9IGluc3QuZHBEaXYub3V0ZXJXaWR0aCgpLAoJCQlkcEhlaWdodCA9IGluc3QuZHBEaXYub3V0ZXJIZWlnaHQoKSwKCQkJaW5wdXRXaWR0aCA9IGluc3QuaW5wdXQgPyBpbnN0LmlucHV0Lm91dGVyV2lkdGgoKSA6IDAsCgkJCWlucHV0SGVpZ2h0ID0gaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXQub3V0ZXJIZWlnaHQoKSA6IDAsCgkJCXZpZXdXaWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCArIChpc0ZpeGVkID8gMCA6ICQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSksCgkJCXZpZXdIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgKGlzRml4ZWQgPyAwIDogJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkpOwoKCQlvZmZzZXQubGVmdCAtPSAodGhpcy5fZ2V0KGluc3QsICJpc1JUTCIpID8gKGRwV2lkdGggLSBpbnB1dFdpZHRoKSA6IDApOwoJCW9mZnNldC5sZWZ0IC09IChpc0ZpeGVkICYmIG9mZnNldC5sZWZ0ID09PSBpbnN0LmlucHV0Lm9mZnNldCgpLmxlZnQpID8gJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgpIDogMDsKCQlvZmZzZXQudG9wIC09IChpc0ZpeGVkICYmIG9mZnNldC50b3AgPT09IChpbnN0LmlucHV0Lm9mZnNldCgpLnRvcCArIGlucHV0SGVpZ2h0KSkgPyAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKSA6IDA7CgoJCS8vIG5vdyBjaGVjayBpZiBkYXRlcGlja2VyIGlzIHNob3dpbmcgb3V0c2lkZSB3aW5kb3cgdmlld3BvcnQgLSBtb3ZlIHRvIGEgYmV0dGVyIHBsYWNlIGlmIHNvLgoJCW9mZnNldC5sZWZ0IC09IE1hdGgubWluKG9mZnNldC5sZWZ0LCAob2Zmc2V0LmxlZnQgKyBkcFdpZHRoID4gdmlld1dpZHRoICYmIHZpZXdXaWR0aCA+IGRwV2lkdGgpID8KCQkJTWF0aC5hYnMob2Zmc2V0LmxlZnQgKyBkcFdpZHRoIC0gdmlld1dpZHRoKSA6IDApOwoJCW9mZnNldC50b3AgLT0gTWF0aC5taW4ob2Zmc2V0LnRvcCwgKG9mZnNldC50b3AgKyBkcEhlaWdodCA+IHZpZXdIZWlnaHQgJiYgdmlld0hlaWdodCA+IGRwSGVpZ2h0KSA\/CgkJCU1hdGguYWJzKGRwSGVpZ2h0ICsgaW5wdXRIZWlnaHQpIDogMCk7CgoJCXJldHVybiBvZmZzZXQ7Cgl9LAoKCS8qIEZpbmQgYW4gb2JqZWN0J3MgcG9zaXRpb24gb24gdGhlIHNjcmVlbi4gKi8KCV9maW5kUG9zOiBmdW5jdGlvbihvYmopIHsKCQl2YXIgcG9zaXRpb24sCgkJCWluc3QgPSB0aGlzLl9nZXRJbnN0KG9iaiksCgkJCWlzUlRMID0gdGhpcy5fZ2V0KGluc3QsICJpc1JUTCIpOwoKCQl3aGlsZSAob2JqICYmIChvYmoudHlwZSA9PT0gImhpZGRlbiIgfHwgb2JqLm5vZGVUeXBlICE9PSAxIHx8ICQuZXhwci5maWx0ZXJzLmhpZGRlbihvYmopKSkgewoJCQlvYmogPSBvYmpbaXNSVEwgPyAicHJldmlvdXNTaWJsaW5nIiA6ICJuZXh0U2libGluZyJdOwoJCX0KCgkJcG9zaXRpb24gPSAkKG9iaikub2Zmc2V0KCk7CgkJcmV0dXJuIFtwb3NpdGlvbi5sZWZ0LCBwb3NpdGlvbi50b3BdOwoJfSwKCgkvKiBIaWRlIHRoZSBkYXRlIHBpY2tlciBmcm9tIHZpZXcuCgkgKiBAcGFyYW0gIGlucHV0ICBlbGVtZW50IC0gdGhlIGlucHV0IGZpZWxkIGF0dGFjaGVkIHRvIHRoZSBkYXRlIHBpY2tlcgoJICovCglfaGlkZURhdGVwaWNrZXI6IGZ1bmN0aW9uKGlucHV0KSB7CgkJdmFyIHNob3dBbmltLCBkdXJhdGlvbiwgcG9zdFByb2Nlc3MsIG9uQ2xvc2UsCgkJCWluc3QgPSB0aGlzLl9jdXJJbnN0OwoKCQlpZiAoIWluc3QgfHwgKGlucHV0ICYmIGluc3QgIT09ICQuZGF0YShpbnB1dCwgUFJPUF9OQU1FKSkpIHsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKHRoaXMuX2RhdGVwaWNrZXJTaG93aW5nKSB7CgkJCXNob3dBbmltID0gdGhpcy5fZ2V0KGluc3QsICJzaG93QW5pbSIpOwoJCQlkdXJhdGlvbiA9IHRoaXMuX2dldChpbnN0LCAiZHVyYXRpb24iKTsKCQkJcG9zdFByb2Nlc3MgPSBmdW5jdGlvbigpIHsKCQkJCSQuZGF0ZXBpY2tlci5fdGlkeURpYWxvZyhpbnN0KTsKCQkJfTsKCgkJCS8vIERFUFJFQ0FURUQ6IGFmdGVyIEJDIGZvciAxLjgueCAkLmVmZmVjdHNbIHNob3dBbmltIF0gaXMgbm90IG5lZWRlZAoJCQlpZiAoICQuZWZmZWN0cyAmJiAoICQuZWZmZWN0cy5lZmZlY3RbIHNob3dBbmltIF0gfHwgJC5lZmZlY3RzWyBzaG93QW5pbSBdICkgKSB7CgkJCQlpbnN0LmRwRGl2LmhpZGUoc2hvd0FuaW0sICQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICJzaG93T3B0aW9ucyIpLCBkdXJhdGlvbiwgcG9zdFByb2Nlc3MpOwoJCQl9IGVsc2UgewoJCQkJaW5zdC5kcERpdlsoc2hvd0FuaW0gPT09ICJzbGlkZURvd24iID8gInNsaWRlVXAiIDoKCQkJCQkoc2hvd0FuaW0gPT09ICJmYWRlSW4iID8gImZhZGVPdXQiIDogImhpZGUiKSldKChzaG93QW5pbSA\/IGR1cmF0aW9uIDogbnVsbCksIHBvc3RQcm9jZXNzKTsKCQkJfQoKCQkJaWYgKCFzaG93QW5pbSkgewoJCQkJcG9zdFByb2Nlc3MoKTsKCQkJfQoJCQl0aGlzLl9kYXRlcGlja2VyU2hvd2luZyA9IGZhbHNlOwoKCQkJb25DbG9zZSA9IHRoaXMuX2dldChpbnN0LCAib25DbG9zZSIpOwoJCQlpZiAob25DbG9zZSkgewoJCQkJb25DbG9zZS5hcHBseSgoaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXRbMF0gOiBudWxsKSwgWyhpbnN0LmlucHV0ID8gaW5zdC5pbnB1dC52YWwoKSA6ICIiKSwgaW5zdF0pOwoJCQl9CgoJCQl0aGlzLl9sYXN0SW5wdXQgPSBudWxsOwoJCQlpZiAodGhpcy5faW5EaWFsb2cpIHsKCQkJCXRoaXMuX2RpYWxvZ0lucHV0LmNzcyh7IHBvc2l0aW9uOiAiYWJzb2x1dGUiLCBsZWZ0OiAiMCIsIHRvcDogIi0xMDBweCIgfSk7CgkJCQlpZiAoJC5ibG9ja1VJKSB7CgkJCQkJJC51bmJsb2NrVUkoKTsKCQkJCQkkKCJib2R5IikuYXBwZW5kKHRoaXMuZHBEaXYpOwoJCQkJfQoJCQl9CgkJCXRoaXMuX2luRGlhbG9nID0gZmFsc2U7CgkJfQoJfSwKCgkvKiBUaWR5IHVwIGFmdGVyIGEgZGlhbG9nIGRpc3BsYXkuICovCglfdGlkeURpYWxvZzogZnVuY3Rpb24oaW5zdCkgewoJCWluc3QuZHBEaXYucmVtb3ZlQ2xhc3ModGhpcy5fZGlhbG9nQ2xhc3MpLnVuYmluZCgiLnVpLWRhdGVwaWNrZXItY2FsZW5kYXIiKTsKCX0sCgoJLyogQ2xvc2UgZGF0ZSBwaWNrZXIgaWYgY2xpY2tlZCBlbHNld2hlcmUuICovCglfY2hlY2tFeHRlcm5hbENsaWNrOiBmdW5jdGlvbihldmVudCkgewoJCWlmICghJC5kYXRlcGlja2VyLl9jdXJJbnN0KSB7CgkJCXJldHVybjsKCQl9CgoJCXZhciAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpLAoJCQlpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KCR0YXJnZXRbMF0pOwoKCQlpZiAoICggKCAkdGFyZ2V0WzBdLmlkICE9PSAkLmRhdGVwaWNrZXIuX21haW5EaXZJZCAmJgoJCQkJJHRhcmdldC5wYXJlbnRzKCIjIiArICQuZGF0ZXBpY2tlci5fbWFpbkRpdklkKS5sZW5ndGggPT09IDAgJiYKCQkJCSEkdGFyZ2V0Lmhhc0NsYXNzKCQuZGF0ZXBpY2tlci5tYXJrZXJDbGFzc05hbWUpICYmCgkJCQkhJHRhcmdldC5jbG9zZXN0KCIuIiArICQuZGF0ZXBpY2tlci5fdHJpZ2dlckNsYXNzKS5sZW5ndGggJiYKCQkJCSQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgJiYgISgkLmRhdGVwaWNrZXIuX2luRGlhbG9nICYmICQuYmxvY2tVSSkgKSApIHx8CgkJCSggJHRhcmdldC5oYXNDbGFzcygkLmRhdGVwaWNrZXIubWFya2VyQ2xhc3NOYW1lKSAmJiAkLmRhdGVwaWNrZXIuX2N1ckluc3QgIT09IGluc3QgKSApIHsKCQkJCSQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTsKCQl9Cgl9LAoKCS8qIEFkanVzdCBvbmUgb2YgdGhlIGRhdGUgc3ViLWZpZWxkcy4gKi8KCV9hZGp1c3REYXRlOiBmdW5jdGlvbihpZCwgb2Zmc2V0LCBwZXJpb2QpIHsKCQl2YXIgdGFyZ2V0ID0gJChpZCksCgkJCWluc3QgPSB0aGlzLl9nZXRJbnN0KHRhcmdldFswXSk7CgoJCWlmICh0aGlzLl9pc0Rpc2FibGVkRGF0ZXBpY2tlcih0YXJnZXRbMF0pKSB7CgkJCXJldHVybjsKCQl9CgkJdGhpcy5fYWRqdXN0SW5zdERhdGUoaW5zdCwgb2Zmc2V0ICsKCQkJKHBlcmlvZCA9PT0gIk0iID8gdGhpcy5fZ2V0KGluc3QsICJzaG93Q3VycmVudEF0UG9zIikgOiAwKSwgLy8gdW5kbyBwb3NpdGlvbmluZwoJCQlwZXJpb2QpOwoJCXRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoaW5zdCk7Cgl9LAoKCS8qIEFjdGlvbiBmb3IgY3VycmVudCBsaW5rLiAqLwoJX2dvdG9Ub2RheTogZnVuY3Rpb24oaWQpIHsKCQl2YXIgZGF0ZSwKCQkJdGFyZ2V0ID0gJChpZCksCgkJCWluc3QgPSB0aGlzLl9nZXRJbnN0KHRhcmdldFswXSk7CgoJCWlmICh0aGlzLl9nZXQoaW5zdCwgImdvdG9DdXJyZW50IikgJiYgaW5zdC5jdXJyZW50RGF5KSB7CgkJCWluc3Quc2VsZWN0ZWREYXkgPSBpbnN0LmN1cnJlbnREYXk7CgkJCWluc3QuZHJhd01vbnRoID0gaW5zdC5zZWxlY3RlZE1vbnRoID0gaW5zdC5jdXJyZW50TW9udGg7CgkJCWluc3QuZHJhd1llYXIgPSBpbnN0LnNlbGVjdGVkWWVhciA9IGluc3QuY3VycmVudFllYXI7CgkJfSBlbHNlIHsKCQkJZGF0ZSA9IG5ldyBEYXRlKCk7CgkJCWluc3Quc2VsZWN0ZWREYXkgPSBkYXRlLmdldERhdGUoKTsKCQkJaW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBkYXRlLmdldE1vbnRoKCk7CgkJCWluc3QuZHJhd1llYXIgPSBpbnN0LnNlbGVjdGVkWWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTsKCQl9CgkJdGhpcy5fbm90aWZ5Q2hhbmdlKGluc3QpOwoJCXRoaXMuX2FkanVzdERhdGUodGFyZ2V0KTsKCX0sCgoJLyogQWN0aW9uIGZvciBzZWxlY3RpbmcgYSBuZXcgbW9udGgveWVhci4gKi8KCV9zZWxlY3RNb250aFllYXI6IGZ1bmN0aW9uKGlkLCBzZWxlY3QsIHBlcmlvZCkgewoJCXZhciB0YXJnZXQgPSAkKGlkKSwKCQkJaW5zdCA9IHRoaXMuX2dldEluc3QodGFyZ2V0WzBdKTsKCgkJaW5zdFsic2VsZWN0ZWQiICsgKHBlcmlvZCA9PT0gIk0iID8gIk1vbnRoIiA6ICJZZWFyIildID0KCQlpbnN0WyJkcmF3IiArIChwZXJpb2QgPT09ICJNIiA\/ICJNb250aCIgOiAiWWVhciIpXSA9CgkJCXBhcnNlSW50KHNlbGVjdC5vcHRpb25zW3NlbGVjdC5zZWxlY3RlZEluZGV4XS52YWx1ZSwxMCk7CgoJCXRoaXMuX25vdGlmeUNoYW5nZShpbnN0KTsKCQl0aGlzLl9hZGp1c3REYXRlKHRhcmdldCk7Cgl9LAoKCS8qIEFjdGlvbiBmb3Igc2VsZWN0aW5nIGEgZGF5LiAqLwoJX3NlbGVjdERheTogZnVuY3Rpb24oaWQsIG1vbnRoLCB5ZWFyLCB0ZCkgewoJCXZhciBpbnN0LAoJCQl0YXJnZXQgPSAkKGlkKTsKCgkJaWYgKCQodGQpLmhhc0NsYXNzKHRoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzKSB8fCB0aGlzLl9pc0Rpc2FibGVkRGF0ZXBpY2tlcih0YXJnZXRbMF0pKSB7CgkJCXJldHVybjsKCQl9CgoJCWluc3QgPSB0aGlzLl9nZXRJbnN0KHRhcmdldFswXSk7CgkJaW5zdC5zZWxlY3RlZERheSA9IGluc3QuY3VycmVudERheSA9ICQoImEiLCB0ZCkuaHRtbCgpOwoJCWluc3Quc2VsZWN0ZWRNb250aCA9IGluc3QuY3VycmVudE1vbnRoID0gbW9udGg7CgkJaW5zdC5zZWxlY3RlZFllYXIgPSBpbnN0LmN1cnJlbnRZZWFyID0geWVhcjsKCQl0aGlzLl9zZWxlY3REYXRlKGlkLCB0aGlzLl9mb3JtYXREYXRlKGluc3QsCgkJCWluc3QuY3VycmVudERheSwgaW5zdC5jdXJyZW50TW9udGgsIGluc3QuY3VycmVudFllYXIpKTsKCX0sCgoJLyogRXJhc2UgdGhlIGlucHV0IGZpZWxkIGFuZCBoaWRlIHRoZSBkYXRlIHBpY2tlci4gKi8KCV9jbGVhckRhdGU6IGZ1bmN0aW9uKGlkKSB7CgkJdmFyIHRhcmdldCA9ICQoaWQpOwoJCXRoaXMuX3NlbGVjdERhdGUodGFyZ2V0LCAiIik7Cgl9LAoKCS8qIFVwZGF0ZSB0aGUgaW5wdXQgZmllbGQgd2l0aCB0aGUgc2VsZWN0ZWQgZGF0ZS4gKi8KCV9zZWxlY3REYXRlOiBmdW5jdGlvbihpZCwgZGF0ZVN0cikgewoJCXZhciBvblNlbGVjdCwKCQkJdGFyZ2V0ID0gJChpZCksCgkJCWluc3QgPSB0aGlzLl9nZXRJbnN0KHRhcmdldFswXSk7CgoJCWRhdGVTdHIgPSAoZGF0ZVN0ciAhPSBudWxsID8gZGF0ZVN0ciA6IHRoaXMuX2Zvcm1hdERhdGUoaW5zdCkpOwoJCWlmIChpbnN0LmlucHV0KSB7CgkJCWluc3QuaW5wdXQudmFsKGRhdGVTdHIpOwoJCX0KCQl0aGlzLl91cGRhdGVBbHRlcm5hdGUoaW5zdCk7CgoJCW9uU2VsZWN0ID0gdGhpcy5fZ2V0KGluc3QsICJvblNlbGVjdCIpOwoJCWlmIChvblNlbGVjdCkgewoJCQlvblNlbGVjdC5hcHBseSgoaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXRbMF0gOiBudWxsKSwgW2RhdGVTdHIsIGluc3RdKTsgIC8vIHRyaWdnZXIgY3VzdG9tIGNhbGxiYWNrCgkJfSBlbHNlIGlmIChpbnN0LmlucHV0KSB7CgkJCWluc3QuaW5wdXQudHJpZ2dlcigiY2hhbmdlIik7IC8vIGZpcmUgdGhlIGNoYW5nZSBldmVudAoJCX0KCgkJaWYgKGluc3QuaW5saW5lKXsKCQkJdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihpbnN0KTsKCQl9IGVsc2UgewoJCQl0aGlzLl9oaWRlRGF0ZXBpY2tlcigpOwoJCQl0aGlzLl9sYXN0SW5wdXQgPSBpbnN0LmlucHV0WzBdOwoJCQlpZiAodHlwZW9mKGluc3QuaW5wdXRbMF0pICE9PSAib2JqZWN0IikgewoJCQkJaW5zdC5pbnB1dC5mb2N1cygpOyAvLyByZXN0b3JlIGZvY3VzCgkJCX0KCQkJdGhpcy5fbGFzdElucHV0ID0gbnVsbDsKCQl9Cgl9LAoKCS8qIFVwZGF0ZSBhbnkgYWx0ZXJuYXRlIGZpZWxkIHRvIHN5bmNocm9uaXNlIHdpdGggdGhlIG1haW4gZmllbGQuICovCglfdXBkYXRlQWx0ZXJuYXRlOiBmdW5jdGlvbihpbnN0KSB7CgkJdmFyIGFsdEZvcm1hdCwgZGF0ZSwgZGF0ZVN0ciwKCQkJYWx0RmllbGQgPSB0aGlzLl9nZXQoaW5zdCwgImFsdEZpZWxkIik7CgoJCWlmIChhbHRGaWVsZCkgeyAvLyB1cGRhdGUgYWx0ZXJuYXRlIGZpZWxkIHRvbwoJCQlhbHRGb3JtYXQgPSB0aGlzLl9nZXQoaW5zdCwgImFsdEZvcm1hdCIpIHx8IHRoaXMuX2dldChpbnN0LCAiZGF0ZUZvcm1hdCIpOwoJCQlkYXRlID0gdGhpcy5fZ2V0RGF0ZShpbnN0KTsKCQkJZGF0ZVN0ciA9IHRoaXMuZm9ybWF0RGF0ZShhbHRGb3JtYXQsIGRhdGUsIHRoaXMuX2dldEZvcm1hdENvbmZpZyhpbnN0KSk7CgkJCSQoYWx0RmllbGQpLmVhY2goZnVuY3Rpb24oKSB7ICQodGhpcykudmFsKGRhdGVTdHIpOyB9KTsKCQl9Cgl9LAoKCS8qIFNldCBhcyBiZWZvcmVTaG93RGF5IGZ1bmN0aW9uIHRvIHByZXZlbnQgc2VsZWN0aW9uIG9mIHdlZWtlbmRzLgoJICogQHBhcmFtICBkYXRlICBEYXRlIC0gdGhlIGRhdGUgdG8gY3VzdG9taXNlCgkgKiBAcmV0dXJuIFtib29sZWFuLCBzdHJpbmddIC0gaXMgdGhpcyBkYXRlIHNlbGVjdGFibGU\/LCB3aGF0IGlzIGl0cyBDU1MgY2xhc3M\/CgkgKi8KCW5vV2Vla2VuZHM6IGZ1bmN0aW9uKGRhdGUpIHsKCQl2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKTsKCQlyZXR1cm4gWyhkYXkgPiAwICYmIGRheSA8IDYpLCAiIl07Cgl9LAoKCS8qIFNldCBhcyBjYWxjdWxhdGVXZWVrIHRvIGRldGVybWluZSB0aGUgd2VlayBvZiB0aGUgeWVhciBiYXNlZCBvbiB0aGUgSVNPIDg2MDEgZGVmaW5pdGlvbi4KCSAqIEBwYXJhbSAgZGF0ZSAgRGF0ZSAtIHRoZSBkYXRlIHRvIGdldCB0aGUgd2VlayBmb3IKCSAqIEByZXR1cm4gIG51bWJlciAtIHRoZSBudW1iZXIgb2YgdGhlIHdlZWsgd2l0aGluIHRoZSB5ZWFyIHRoYXQgY29udGFpbnMgdGhpcyBkYXRlCgkgKi8KCWlzbzg2MDFXZWVrOiBmdW5jdGlvbihkYXRlKSB7CgkJdmFyIHRpbWUsCgkJCWNoZWNrRGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTsKCgkJLy8gRmluZCBUaHVyc2RheSBvZiB0aGlzIHdlZWsgc3RhcnRpbmcgb24gTW9uZGF5CgkJY2hlY2tEYXRlLnNldERhdGUoY2hlY2tEYXRlLmdldERhdGUoKSArIDQgLSAoY2hlY2tEYXRlLmdldERheSgpIHx8IDcpKTsKCgkJdGltZSA9IGNoZWNrRGF0ZS5nZXRUaW1lKCk7CgkJY2hlY2tEYXRlLnNldE1vbnRoKDApOyAvLyBDb21wYXJlIHdpdGggSmFuIDEKCQljaGVja0RhdGUuc2V0RGF0ZSgxKTsKCQlyZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJvdW5kKCh0aW1lIC0gY2hlY2tEYXRlKSAvIDg2NDAwMDAwKSAvIDcpICsgMTsKCX0sCgoJLyogUGFyc2UgYSBzdHJpbmcgdmFsdWUgaW50byBhIGRhdGUgb2JqZWN0LgoJICogU2VlIGZvcm1hdERhdGUgYmVsb3cgZm9yIHRoZSBwb3NzaWJsZSBmb3JtYXRzLgoJICoKCSAqIEBwYXJhbSAgZm9ybWF0IHN0cmluZyAtIHRoZSBleHBlY3RlZCBmb3JtYXQgb2YgdGhlIGRhdGUKCSAqIEBwYXJhbSAgdmFsdWUgc3RyaW5nIC0gdGhlIGRhdGUgaW4gdGhlIGFib3ZlIGZvcm1hdAoJICogQHBhcmFtICBzZXR0aW5ncyBPYmplY3QgLSBhdHRyaWJ1dGVzIGluY2x1ZGU6CgkgKgkJCQkJc2hvcnRZZWFyQ3V0b2ZmICBudW1iZXIgLSB0aGUgY3V0b2ZmIHllYXIgZm9yIGRldGVybWluaW5nIHRoZSBjZW50dXJ5IChvcHRpb25hbCkKCSAqCQkJCQlkYXlOYW1lc1Nob3J0CXN0cmluZ1s3XSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBkYXlzIGZyb20gU3VuZGF5IChvcHRpb25hbCkKCSAqCQkJCQlkYXlOYW1lcwkJc3RyaW5nWzddIC0gbmFtZXMgb2YgdGhlIGRheXMgZnJvbSBTdW5kYXkgKG9wdGlvbmFsKQoJICoJCQkJCW1vbnRoTmFtZXNTaG9ydCBzdHJpbmdbMTJdIC0gYWJicmV2aWF0ZWQgbmFtZXMgb2YgdGhlIG1vbnRocyAob3B0aW9uYWwpCgkgKgkJCQkJbW9udGhOYW1lcwkJc3RyaW5nWzEyXSAtIG5hbWVzIG9mIHRoZSBtb250aHMgKG9wdGlvbmFsKQoJICogQHJldHVybiAgRGF0ZSAtIHRoZSBleHRyYWN0ZWQgZGF0ZSB2YWx1ZSBvciBudWxsIGlmIHZhbHVlIGlzIGJsYW5rCgkgKi8KCXBhcnNlRGF0ZTogZnVuY3Rpb24gKGZvcm1hdCwgdmFsdWUsIHNldHRpbmdzKSB7CgkJaWYgKGZvcm1hdCA9PSBudWxsIHx8IHZhbHVlID09IG51bGwpIHsKCQkJdGhyb3cgIkludmFsaWQgYXJndW1lbnRzIjsKCQl9CgoJCXZhbHVlID0gKHR5cGVvZiB2YWx1ZSA9PT0gIm9iamVjdCIgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWUgKyAiIik7CgkJaWYgKHZhbHVlID09PSAiIikgewoJCQlyZXR1cm4gbnVsbDsKCQl9CgoJCXZhciBpRm9ybWF0LCBkaW0sIGV4dHJhLAoJCQlpVmFsdWUgPSAwLAoJCQlzaG9ydFllYXJDdXRvZmZUZW1wID0gKHNldHRpbmdzID8gc2V0dGluZ3Muc2hvcnRZZWFyQ3V0b2ZmIDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMuc2hvcnRZZWFyQ3V0b2ZmLAoJCQlzaG9ydFllYXJDdXRvZmYgPSAodHlwZW9mIHNob3J0WWVhckN1dG9mZlRlbXAgIT09ICJzdHJpbmciID8gc2hvcnRZZWFyQ3V0b2ZmVGVtcCA6CgkJCQluZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgJSAxMDAgKyBwYXJzZUludChzaG9ydFllYXJDdXRvZmZUZW1wLCAxMCkpLAoJCQlkYXlOYW1lc1Nob3J0ID0gKHNldHRpbmdzID8gc2V0dGluZ3MuZGF5TmFtZXNTaG9ydCA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzU2hvcnQsCgkJCWRheU5hbWVzID0gKHNldHRpbmdzID8gc2V0dGluZ3MuZGF5TmFtZXMgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5kYXlOYW1lcywKCQkJbW9udGhOYW1lc1Nob3J0ID0gKHNldHRpbmdzID8gc2V0dGluZ3MubW9udGhOYW1lc1Nob3J0IDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMubW9udGhOYW1lc1Nob3J0LAoJCQltb250aE5hbWVzID0gKHNldHRpbmdzID8gc2V0dGluZ3MubW9udGhOYW1lcyA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXMsCgkJCXllYXIgPSAtMSwKCQkJbW9udGggPSAtMSwKCQkJZGF5ID0gLTEsCgkJCWRveSA9IC0xLAoJCQlsaXRlcmFsID0gZmFsc2UsCgkJCWRhdGUsCgkJCS8vIENoZWNrIHdoZXRoZXIgYSBmb3JtYXQgY2hhcmFjdGVyIGlzIGRvdWJsZWQKCQkJbG9va0FoZWFkID0gZnVuY3Rpb24obWF0Y2gpIHsKCQkJCXZhciBtYXRjaGVzID0gKGlGb3JtYXQgKyAxIDwgZm9ybWF0Lmxlbmd0aCAmJiBmb3JtYXQuY2hhckF0KGlGb3JtYXQgKyAxKSA9PT0gbWF0Y2gpOwoJCQkJaWYgKG1hdGNoZXMpIHsKCQkJCQlpRm9ybWF0Kys7CgkJCQl9CgkJCQlyZXR1cm4gbWF0Y2hlczsKCQkJfSwKCQkJLy8gRXh0cmFjdCBhIG51bWJlciBmcm9tIHRoZSBzdHJpbmcgdmFsdWUKCQkJZ2V0TnVtYmVyID0gZnVuY3Rpb24obWF0Y2gpIHsKCQkJCXZhciBpc0RvdWJsZWQgPSBsb29rQWhlYWQobWF0Y2gpLAoJCQkJCXNpemUgPSAobWF0Y2ggPT09ICJAIiA\/IDE0IDogKG1hdGNoID09PSAiISIgPyAyMCA6CgkJCQkJKG1hdGNoID09PSAieSIgJiYgaXNEb3VibGVkID8gNCA6IChtYXRjaCA9PT0gIm8iID8gMyA6IDIpKSkpLAoJCQkJCWRpZ2l0cyA9IG5ldyBSZWdFeHAoIl5cXGR7MSwiICsgc2l6ZSArICJ9IiksCgkJCQkJbnVtID0gdmFsdWUuc3Vic3RyaW5nKGlWYWx1ZSkubWF0Y2goZGlnaXRzKTsKCQkJCWlmICghbnVtKSB7CgkJCQkJdGhyb3cgIk1pc3NpbmcgbnVtYmVyIGF0IHBvc2l0aW9uICIgKyBpVmFsdWU7CgkJCQl9CgkJCQlpVmFsdWUgKz0gbnVtWzBdLmxlbmd0aDsKCQkJCXJldHVybiBwYXJzZUludChudW1bMF0sIDEwKTsKCQkJfSwKCQkJLy8gRXh0cmFjdCBhIG5hbWUgZnJvbSB0aGUgc3RyaW5nIHZhbHVlIGFuZCBjb252ZXJ0IHRvIGFuIGluZGV4CgkJCWdldE5hbWUgPSBmdW5jdGlvbihtYXRjaCwgc2hvcnROYW1lcywgbG9uZ05hbWVzKSB7CgkJCQl2YXIgaW5kZXggPSAtMSwKCQkJCQluYW1lcyA9ICQubWFwKGxvb2tBaGVhZChtYXRjaCkgPyBsb25nTmFtZXMgOiBzaG9ydE5hbWVzLCBmdW5jdGlvbiAodiwgaykgewoJCQkJCQlyZXR1cm4gWyBbaywgdl0gXTsKCQkJCQl9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CgkJCQkJCXJldHVybiAtKGFbMV0ubGVuZ3RoIC0gYlsxXS5sZW5ndGgpOwoJCQkJCX0pOwoKCQkJCSQuZWFjaChuYW1lcywgZnVuY3Rpb24gKGksIHBhaXIpIHsKCQkJCQl2YXIgbmFtZSA9IHBhaXJbMV07CgkJCQkJaWYgKHZhbHVlLnN1YnN0cihpVmFsdWUsIG5hbWUubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCkpIHsKCQkJCQkJaW5kZXggPSBwYWlyWzBdOwoJCQkJCQlpVmFsdWUgKz0gbmFtZS5sZW5ndGg7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQl9KTsKCQkJCWlmIChpbmRleCAhPT0gLTEpIHsKCQkJCQlyZXR1cm4gaW5kZXggKyAxOwoJCQkJfSBlbHNlIHsKCQkJCQl0aHJvdyAiVW5rbm93biBuYW1lIGF0IHBvc2l0aW9uICIgKyBpVmFsdWU7CgkJCQl9CgkJCX0sCgkJCS8vIENvbmZpcm0gdGhhdCBhIGxpdGVyYWwgY2hhcmFjdGVyIG1hdGNoZXMgdGhlIHN0cmluZyB2YWx1ZQoJCQljaGVja0xpdGVyYWwgPSBmdW5jdGlvbigpIHsKCQkJCWlmICh2YWx1ZS5jaGFyQXQoaVZhbHVlKSAhPT0gZm9ybWF0LmNoYXJBdChpRm9ybWF0KSkgewoJCQkJCXRocm93ICJVbmV4cGVjdGVkIGxpdGVyYWwgYXQgcG9zaXRpb24gIiArIGlWYWx1ZTsKCQkJCX0KCQkJCWlWYWx1ZSsrOwoJCQl9OwoKCQlmb3IgKGlGb3JtYXQgPSAwOyBpRm9ybWF0IDwgZm9ybWF0Lmxlbmd0aDsgaUZvcm1hdCsrKSB7CgkJCWlmIChsaXRlcmFsKSB7CgkJCQlpZiAoZm9ybWF0LmNoYXJBdChpRm9ybWF0KSA9PT0gIiciICYmICFsb29rQWhlYWQoIiciKSkgewoJCQkJCWxpdGVyYWwgPSBmYWxzZTsKCQkJCX0gZWxzZSB7CgkJCQkJY2hlY2tMaXRlcmFsKCk7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQlzd2l0Y2ggKGZvcm1hdC5jaGFyQXQoaUZvcm1hdCkpIHsKCQkJCQljYXNlICJkIjoKCQkJCQkJZGF5ID0gZ2V0TnVtYmVyKCJkIik7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgIkQiOgoJCQkJCQlnZXROYW1lKCJEIiwgZGF5TmFtZXNTaG9ydCwgZGF5TmFtZXMpOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICJvIjoKCQkJCQkJZG95ID0gZ2V0TnVtYmVyKCJvIik7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgIm0iOgoJCQkJCQltb250aCA9IGdldE51bWJlcigibSIpOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICJNIjoKCQkJCQkJbW9udGggPSBnZXROYW1lKCJNIiwgbW9udGhOYW1lc1Nob3J0LCBtb250aE5hbWVzKTsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAieSI6CgkJCQkJCXllYXIgPSBnZXROdW1iZXIoInkiKTsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAiQCI6CgkJCQkJCWRhdGUgPSBuZXcgRGF0ZShnZXROdW1iZXIoIkAiKSk7CgkJCQkJCXllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7CgkJCQkJCW1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTsKCQkJCQkJZGF5ID0gZGF0ZS5nZXREYXRlKCk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgIiEiOgoJCQkJCQlkYXRlID0gbmV3IERhdGUoKGdldE51bWJlcigiISIpIC0gdGhpcy5fdGlja3NUbzE5NzApIC8gMTAwMDApOwoJCQkJCQl5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpOwoJCQkJCQltb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDE7CgkJCQkJCWRheSA9IGRhdGUuZ2V0RGF0ZSgpOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICInIjoKCQkJCQkJaWYgKGxvb2tBaGVhZCgiJyIpKXsKCQkJCQkJCWNoZWNrTGl0ZXJhbCgpOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJbGl0ZXJhbCA9IHRydWU7CgkJCQkJCX0KCQkJCQkJYnJlYWs7CgkJCQkJZGVmYXVsdDoKCQkJCQkJY2hlY2tMaXRlcmFsKCk7CgkJCQl9CgkJCX0KCQl9CgoJCWlmIChpVmFsdWUgPCB2YWx1ZS5sZW5ndGgpewoJCQlleHRyYSA9IHZhbHVlLnN1YnN0cihpVmFsdWUpOwoJCQlpZiAoIS9eXHMrLy50ZXN0KGV4dHJhKSkgewoJCQkJdGhyb3cgIkV4dHJhL3VucGFyc2VkIGNoYXJhY3RlcnMgZm91bmQgaW4gZGF0ZTogIiArIGV4dHJhOwoJCQl9CgkJfQoKCQlpZiAoeWVhciA9PT0gLTEpIHsKCQkJeWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTsKCQl9IGVsc2UgaWYgKHllYXIgPCAxMDApIHsKCQkJeWVhciArPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgLSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgJSAxMDAgKwoJCQkJKHllYXIgPD0gc2hvcnRZZWFyQ3V0b2ZmID8gMCA6IC0xMDApOwoJCX0KCgkJaWYgKGRveSA+IC0xKSB7CgkJCW1vbnRoID0gMTsKCQkJZGF5ID0gZG95OwoJCQlkbyB7CgkJCQlkaW0gPSB0aGlzLl9nZXREYXlzSW5Nb250aCh5ZWFyLCBtb250aCAtIDEpOwoJCQkJaWYgKGRheSA8PSBkaW0pIHsKCQkJCQlicmVhazsKCQkJCX0KCQkJCW1vbnRoKys7CgkJCQlkYXkgLT0gZGltOwoJCQl9IHdoaWxlICh0cnVlKTsKCQl9CgoJCWRhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSkpOwoJCWlmIChkYXRlLmdldEZ1bGxZZWFyKCkgIT09IHllYXIgfHwgZGF0ZS5nZXRNb250aCgpICsgMSAhPT0gbW9udGggfHwgZGF0ZS5nZXREYXRlKCkgIT09IGRheSkgewoJCQl0aHJvdyAiSW52YWxpZCBkYXRlIjsgLy8gRS5nLiAzMS8wMi8wMAoJCX0KCQlyZXR1cm4gZGF0ZTsKCX0sCgoJLyogU3RhbmRhcmQgZGF0ZSBmb3JtYXRzLiAqLwoJQVRPTTogInl5LW1tLWRkIiwgLy8gUkZDIDMzMzkgKElTTyA4NjAxKQoJQ09PS0lFOiAiRCwgZGQgTSB5eSIsCglJU09fODYwMTogInl5LW1tLWRkIiwKCVJGQ184MjI6ICJELCBkIE0geSIsCglSRkNfODUwOiAiREQsIGRkLU0teSIsCglSRkNfMTAzNjogIkQsIGQgTSB5IiwKCVJGQ18xMTIzOiAiRCwgZCBNIHl5IiwKCVJGQ18yODIyOiAiRCwgZCBNIHl5IiwKCVJTUzogIkQsIGQgTSB5IiwgLy8gUkZDIDgyMgoJVElDS1M6ICIhIiwKCVRJTUVTVEFNUDogIkAiLAoJVzNDOiAieXktbW0tZGQiLCAvLyBJU08gODYwMQoKCV90aWNrc1RvMTk3MDogKCgoMTk3MCAtIDEpICogMzY1ICsgTWF0aC5mbG9vcigxOTcwIC8gNCkgLSBNYXRoLmZsb29yKDE5NzAgLyAxMDApICsKCQlNYXRoLmZsb29yKDE5NzAgLyA0MDApKSAqIDI0ICogNjAgKiA2MCAqIDEwMDAwMDAwKSwKCgkvKiBGb3JtYXQgYSBkYXRlIG9iamVjdCBpbnRvIGEgc3RyaW5nIHZhbHVlLgoJICogVGhlIGZvcm1hdCBjYW4gYmUgY29tYmluYXRpb25zIG9mIHRoZSBmb2xsb3dpbmc6CgkgKiBkICAtIGRheSBvZiBtb250aCAobm8gbGVhZGluZyB6ZXJvKQoJICogZGQgLSBkYXkgb2YgbW9udGggKHR3byBkaWdpdCkKCSAqIG8gIC0gZGF5IG9mIHllYXIgKG5vIGxlYWRpbmcgemVyb3MpCgkgKiBvbyAtIGRheSBvZiB5ZWFyICh0aHJlZSBkaWdpdCkKCSAqIEQgIC0gZGF5IG5hbWUgc2hvcnQKCSAqIEREIC0gZGF5IG5hbWUgbG9uZwoJICogbSAgLSBtb250aCBvZiB5ZWFyIChubyBsZWFkaW5nIHplcm8pCgkgKiBtbSAtIG1vbnRoIG9mIHllYXIgKHR3byBkaWdpdCkKCSAqIE0gIC0gbW9udGggbmFtZSBzaG9ydAoJICogTU0gLSBtb250aCBuYW1lIGxvbmcKCSAqIHkgIC0geWVhciAodHdvIGRpZ2l0KQoJICogeXkgLSB5ZWFyIChmb3VyIGRpZ2l0KQoJICogQCAtIFVuaXggdGltZXN0YW1wIChtcyBzaW5jZSAwMS8wMS8xOTcwKQoJICogISAtIFdpbmRvd3MgdGlja3MgKDEwMG5zIHNpbmNlIDAxLzAxLzAwMDEpCgkgKiAiLi4uIiAtIGxpdGVyYWwgdGV4dAoJICogJycgLSBzaW5nbGUgcXVvdGUKCSAqCgkgKiBAcGFyYW0gIGZvcm1hdCBzdHJpbmcgLSB0aGUgZGVzaXJlZCBmb3JtYXQgb2YgdGhlIGRhdGUKCSAqIEBwYXJhbSAgZGF0ZSBEYXRlIC0gdGhlIGRhdGUgdmFsdWUgdG8gZm9ybWF0CgkgKiBAcGFyYW0gIHNldHRpbmdzIE9iamVjdCAtIGF0dHJpYnV0ZXMgaW5jbHVkZToKCSAqCQkJCQlkYXlOYW1lc1Nob3J0CXN0cmluZ1s3XSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBkYXlzIGZyb20gU3VuZGF5IChvcHRpb25hbCkKCSAqCQkJCQlkYXlOYW1lcwkJc3RyaW5nWzddIC0gbmFtZXMgb2YgdGhlIGRheXMgZnJvbSBTdW5kYXkgKG9wdGlvbmFsKQoJICoJCQkJCW1vbnRoTmFtZXNTaG9ydCBzdHJpbmdbMTJdIC0gYWJicmV2aWF0ZWQgbmFtZXMgb2YgdGhlIG1vbnRocyAob3B0aW9uYWwpCgkgKgkJCQkJbW9udGhOYW1lcwkJc3RyaW5nWzEyXSAtIG5hbWVzIG9mIHRoZSBtb250aHMgKG9wdGlvbmFsKQoJICogQHJldHVybiAgc3RyaW5nIC0gdGhlIGRhdGUgaW4gdGhlIGFib3ZlIGZvcm1hdAoJICovCglmb3JtYXREYXRlOiBmdW5jdGlvbiAoZm9ybWF0LCBkYXRlLCBzZXR0aW5ncykgewoJCWlmICghZGF0ZSkgewoJCQlyZXR1cm4gIiI7CgkJfQoKCQl2YXIgaUZvcm1hdCwKCQkJZGF5TmFtZXNTaG9ydCA9IChzZXR0aW5ncyA\/IHNldHRpbmdzLmRheU5hbWVzU2hvcnQgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5kYXlOYW1lc1Nob3J0LAoJCQlkYXlOYW1lcyA9IChzZXR0aW5ncyA\/IHNldHRpbmdzLmRheU5hbWVzIDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMuZGF5TmFtZXMsCgkJCW1vbnRoTmFtZXNTaG9ydCA9IChzZXR0aW5ncyA\/IHNldHRpbmdzLm1vbnRoTmFtZXNTaG9ydCA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXNTaG9ydCwKCQkJbW9udGhOYW1lcyA9IChzZXR0aW5ncyA\/IHNldHRpbmdzLm1vbnRoTmFtZXMgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzLAoJCQkvLyBDaGVjayB3aGV0aGVyIGEgZm9ybWF0IGNoYXJhY3RlciBpcyBkb3VibGVkCgkJCWxvb2tBaGVhZCA9IGZ1bmN0aW9uKG1hdGNoKSB7CgkJCQl2YXIgbWF0Y2hlcyA9IChpRm9ybWF0ICsgMSA8IGZvcm1hdC5sZW5ndGggJiYgZm9ybWF0LmNoYXJBdChpRm9ybWF0ICsgMSkgPT09IG1hdGNoKTsKCQkJCWlmIChtYXRjaGVzKSB7CgkJCQkJaUZvcm1hdCsrOwoJCQkJfQoJCQkJcmV0dXJuIG1hdGNoZXM7CgkJCX0sCgkJCS8vIEZvcm1hdCBhIG51bWJlciwgd2l0aCBsZWFkaW5nIHplcm8gaWYgbmVjZXNzYXJ5CgkJCWZvcm1hdE51bWJlciA9IGZ1bmN0aW9uKG1hdGNoLCB2YWx1ZSwgbGVuKSB7CgkJCQl2YXIgbnVtID0gIiIgKyB2YWx1ZTsKCQkJCWlmIChsb29rQWhlYWQobWF0Y2gpKSB7CgkJCQkJd2hpbGUgKG51bS5sZW5ndGggPCBsZW4pIHsKCQkJCQkJbnVtID0gIjAiICsgbnVtOwoJCQkJCX0KCQkJCX0KCQkJCXJldHVybiBudW07CgkJCX0sCgkJCS8vIEZvcm1hdCBhIG5hbWUsIHNob3J0IG9yIGxvbmcgYXMgcmVxdWVzdGVkCgkJCWZvcm1hdE5hbWUgPSBmdW5jdGlvbihtYXRjaCwgdmFsdWUsIHNob3J0TmFtZXMsIGxvbmdOYW1lcykgewoJCQkJcmV0dXJuIChsb29rQWhlYWQobWF0Y2gpID8gbG9uZ05hbWVzW3ZhbHVlXSA6IHNob3J0TmFtZXNbdmFsdWVdKTsKCQkJfSwKCQkJb3V0cHV0ID0gIiIsCgkJCWxpdGVyYWwgPSBmYWxzZTsKCgkJaWYgKGRhdGUpIHsKCQkJZm9yIChpRm9ybWF0ID0gMDsgaUZvcm1hdCA8IGZvcm1hdC5sZW5ndGg7IGlGb3JtYXQrKykgewoJCQkJaWYgKGxpdGVyYWwpIHsKCQkJCQlpZiAoZm9ybWF0LmNoYXJBdChpRm9ybWF0KSA9PT0gIiciICYmICFsb29rQWhlYWQoIiciKSkgewoJCQkJCQlsaXRlcmFsID0gZmFsc2U7CgkJCQkJfSBlbHNlIHsKCQkJCQkJb3V0cHV0ICs9IGZvcm1hdC5jaGFyQXQoaUZvcm1hdCk7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlzd2l0Y2ggKGZvcm1hdC5jaGFyQXQoaUZvcm1hdCkpIHsKCQkJCQkJY2FzZSAiZCI6CgkJCQkJCQlvdXRwdXQgKz0gZm9ybWF0TnVtYmVyKCJkIiwgZGF0ZS5nZXREYXRlKCksIDIpOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgIkQiOgoJCQkJCQkJb3V0cHV0ICs9IGZvcm1hdE5hbWUoIkQiLCBkYXRlLmdldERheSgpLCBkYXlOYW1lc1Nob3J0LCBkYXlOYW1lcyk7CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAibyI6CgkJCQkJCQlvdXRwdXQgKz0gZm9ybWF0TnVtYmVyKCJvIiwKCQkJCQkJCQlNYXRoLnJvdW5kKChuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMCkuZ2V0VGltZSgpKSAvIDg2NDAwMDAwKSwgMyk7CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAibSI6CgkJCQkJCQlvdXRwdXQgKz0gZm9ybWF0TnVtYmVyKCJtIiwgZGF0ZS5nZXRNb250aCgpICsgMSwgMik7CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAiTSI6CgkJCQkJCQlvdXRwdXQgKz0gZm9ybWF0TmFtZSgiTSIsIGRhdGUuZ2V0TW9udGgoKSwgbW9udGhOYW1lc1Nob3J0LCBtb250aE5hbWVzKTsKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICJ5IjoKCQkJCQkJCW91dHB1dCArPSAobG9va0FoZWFkKCJ5IikgPyBkYXRlLmdldEZ1bGxZZWFyKCkgOgoJCQkJCQkJCShkYXRlLmdldFllYXIoKSAlIDEwMCA8IDEwID8gIjAiIDogIiIpICsgZGF0ZS5nZXRZZWFyKCkgJSAxMDApOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgIkAiOgoJCQkJCQkJb3V0cHV0ICs9IGRhdGUuZ2V0VGltZSgpOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgIiEiOgoJCQkJCQkJb3V0cHV0ICs9IGRhdGUuZ2V0VGltZSgpICogMTAwMDAgKyB0aGlzLl90aWNrc1RvMTk3MDsKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICInIjoKCQkJCQkJCWlmIChsb29rQWhlYWQoIiciKSkgewoJCQkJCQkJCW91dHB1dCArPSAiJyI7CgkJCQkJCQl9IGVsc2UgewoJCQkJCQkJCWxpdGVyYWwgPSB0cnVlOwoJCQkJCQkJfQoJCQkJCQkJYnJlYWs7CgkJCQkJCWRlZmF1bHQ6CgkJCQkJCQlvdXRwdXQgKz0gZm9ybWF0LmNoYXJBdChpRm9ybWF0KTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuIG91dHB1dDsKCX0sCgoJLyogRXh0cmFjdCBhbGwgcG9zc2libGUgY2hhcmFjdGVycyBmcm9tIHRoZSBkYXRlIGZvcm1hdC4gKi8KCV9wb3NzaWJsZUNoYXJzOiBmdW5jdGlvbiAoZm9ybWF0KSB7CgkJdmFyIGlGb3JtYXQsCgkJCWNoYXJzID0gIiIsCgkJCWxpdGVyYWwgPSBmYWxzZSwKCQkJLy8gQ2hlY2sgd2hldGhlciBhIGZvcm1hdCBjaGFyYWN0ZXIgaXMgZG91YmxlZAoJCQlsb29rQWhlYWQgPSBmdW5jdGlvbihtYXRjaCkgewoJCQkJdmFyIG1hdGNoZXMgPSAoaUZvcm1hdCArIDEgPCBmb3JtYXQubGVuZ3RoICYmIGZvcm1hdC5jaGFyQXQoaUZvcm1hdCArIDEpID09PSBtYXRjaCk7CgkJCQlpZiAobWF0Y2hlcykgewoJCQkJCWlGb3JtYXQrKzsKCQkJCX0KCQkJCXJldHVybiBtYXRjaGVzOwoJCQl9OwoKCQlmb3IgKGlGb3JtYXQgPSAwOyBpRm9ybWF0IDwgZm9ybWF0Lmxlbmd0aDsgaUZvcm1hdCsrKSB7CgkJCWlmIChsaXRlcmFsKSB7CgkJCQlpZiAoZm9ybWF0LmNoYXJBdChpRm9ybWF0KSA9PT0gIiciICYmICFsb29rQWhlYWQoIiciKSkgewoJCQkJCWxpdGVyYWwgPSBmYWxzZTsKCQkJCX0gZWxzZSB7CgkJCQkJY2hhcnMgKz0gZm9ybWF0LmNoYXJBdChpRm9ybWF0KTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXN3aXRjaCAoZm9ybWF0LmNoYXJBdChpRm9ybWF0KSkgewoJCQkJCWNhc2UgImQiOiBjYXNlICJtIjogY2FzZSAieSI6IGNhc2UgIkAiOgoJCQkJCQljaGFycyArPSAiMDEyMzQ1Njc4OSI7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgIkQiOiBjYXNlICJNIjoKCQkJCQkJcmV0dXJuIG51bGw7IC8vIEFjY2VwdCBhbnl0aGluZwoJCQkJCWNhc2UgIiciOgoJCQkJCQlpZiAobG9va0FoZWFkKCInIikpIHsKCQkJCQkJCWNoYXJzICs9ICInIjsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCWxpdGVyYWwgPSB0cnVlOwoJCQkJCQl9CgkJCQkJCWJyZWFrOwoJCQkJCWRlZmF1bHQ6CgkJCQkJCWNoYXJzICs9IGZvcm1hdC5jaGFyQXQoaUZvcm1hdCk7CgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuIGNoYXJzOwoJfSwKCgkvKiBHZXQgYSBzZXR0aW5nIHZhbHVlLCBkZWZhdWx0aW5nIGlmIG5lY2Vzc2FyeS4gKi8KCV9nZXQ6IGZ1bmN0aW9uKGluc3QsIG5hbWUpIHsKCQlyZXR1cm4gaW5zdC5zZXR0aW5nc1tuYW1lXSAhPT0gdW5kZWZpbmVkID8KCQkJaW5zdC5zZXR0aW5nc1tuYW1lXSA6IHRoaXMuX2RlZmF1bHRzW25hbWVdOwoJfSwKCgkvKiBQYXJzZSBleGlzdGluZyBkYXRlIGFuZCBpbml0aWFsaXNlIGRhdGUgcGlja2VyLiAqLwoJX3NldERhdGVGcm9tRmllbGQ6IGZ1bmN0aW9uKGluc3QsIG5vRGVmYXVsdCkgewoJCWlmIChpbnN0LmlucHV0LnZhbCgpID09PSBpbnN0Lmxhc3RWYWwpIHsKCQkJcmV0dXJuOwoJCX0KCgkJdmFyIGRhdGVGb3JtYXQgPSB0aGlzLl9nZXQoaW5zdCwgImRhdGVGb3JtYXQiKSwKCQkJZGF0ZXMgPSBpbnN0Lmxhc3RWYWwgPSBpbnN0LmlucHV0ID8gaW5zdC5pbnB1dC52YWwoKSA6IG51bGwsCgkJCWRlZmF1bHREYXRlID0gdGhpcy5fZ2V0RGVmYXVsdERhdGUoaW5zdCksCgkJCWRhdGUgPSBkZWZhdWx0RGF0ZSwKCQkJc2V0dGluZ3MgPSB0aGlzLl9nZXRGb3JtYXRDb25maWcoaW5zdCk7CgoJCXRyeSB7CgkJCWRhdGUgPSB0aGlzLnBhcnNlRGF0ZShkYXRlRm9ybWF0LCBkYXRlcywgc2V0dGluZ3MpIHx8IGRlZmF1bHREYXRlOwoJCX0gY2F0Y2ggKGV2ZW50KSB7CgkJCWRhdGVzID0gKG5vRGVmYXVsdCA\/ICIiIDogZGF0ZXMpOwoJCX0KCQlpbnN0LnNlbGVjdGVkRGF5ID0gZGF0ZS5nZXREYXRlKCk7CgkJaW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBkYXRlLmdldE1vbnRoKCk7CgkJaW5zdC5kcmF3WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpOwoJCWluc3QuY3VycmVudERheSA9IChkYXRlcyA\/IGRhdGUuZ2V0RGF0ZSgpIDogMCk7CgkJaW5zdC5jdXJyZW50TW9udGggPSAoZGF0ZXMgPyBkYXRlLmdldE1vbnRoKCkgOiAwKTsKCQlpbnN0LmN1cnJlbnRZZWFyID0gKGRhdGVzID8gZGF0ZS5nZXRGdWxsWWVhcigpIDogMCk7CgkJdGhpcy5fYWRqdXN0SW5zdERhdGUoaW5zdCk7Cgl9LAoKCS8qIFJldHJpZXZlIHRoZSBkZWZhdWx0IGRhdGUgc2hvd24gb24gb3BlbmluZy4gKi8KCV9nZXREZWZhdWx0RGF0ZTogZnVuY3Rpb24oaW5zdCkgewoJCXJldHVybiB0aGlzLl9yZXN0cmljdE1pbk1heChpbnN0LAoJCQl0aGlzLl9kZXRlcm1pbmVEYXRlKGluc3QsIHRoaXMuX2dldChpbnN0LCAiZGVmYXVsdERhdGUiKSwgbmV3IERhdGUoKSkpOwoJfSwKCgkvKiBBIGRhdGUgbWF5IGJlIHNwZWNpZmllZCBhcyBhbiBleGFjdCB2YWx1ZSBvciBhIHJlbGF0aXZlIG9uZS4gKi8KCV9kZXRlcm1pbmVEYXRlOiBmdW5jdGlvbihpbnN0LCBkYXRlLCBkZWZhdWx0RGF0ZSkgewoJCXZhciBvZmZzZXROdW1lcmljID0gZnVuY3Rpb24ob2Zmc2V0KSB7CgkJCQl2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7CgkJCQlkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBvZmZzZXQpOwoJCQkJcmV0dXJuIGRhdGU7CgkJCX0sCgkJCW9mZnNldFN0cmluZyA9IGZ1bmN0aW9uKG9mZnNldCkgewoJCQkJdHJ5IHsKCQkJCQlyZXR1cm4gJC5kYXRlcGlja2VyLnBhcnNlRGF0ZSgkLmRhdGVwaWNrZXIuX2dldChpbnN0LCAiZGF0ZUZvcm1hdCIpLAoJCQkJCQlvZmZzZXQsICQuZGF0ZXBpY2tlci5fZ2V0Rm9ybWF0Q29uZmlnKGluc3QpKTsKCQkJCX0KCQkJCWNhdGNoIChlKSB7CgkJCQkJLy8gSWdub3JlCgkJCQl9CgoJCQkJdmFyIGRhdGUgPSAob2Zmc2V0LnRvTG93ZXJDYXNlKCkubWF0Y2goL15jLykgPwoJCQkJCSQuZGF0ZXBpY2tlci5fZ2V0RGF0ZShpbnN0KSA6IG51bGwpIHx8IG5ldyBEYXRlKCksCgkJCQkJeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKSwKCQkJCQltb250aCA9IGRhdGUuZ2V0TW9udGgoKSwKCQkJCQlkYXkgPSBkYXRlLmdldERhdGUoKSwKCQkJCQlwYXR0ZXJuID0gLyhbK1wtXT9bMC05XSspXHMqKGR8RHx3fFd8bXxNfHl8WSk\/L2csCgkJCQkJbWF0Y2hlcyA9IHBhdHRlcm4uZXhlYyhvZmZzZXQpOwoKCQkJCXdoaWxlIChtYXRjaGVzKSB7CgkJCQkJc3dpdGNoIChtYXRjaGVzWzJdIHx8ICJkIikgewoJCQkJCQljYXNlICJkIiA6IGNhc2UgIkQiIDoKCQkJCQkJCWRheSArPSBwYXJzZUludChtYXRjaGVzWzFdLDEwKTsgYnJlYWs7CgkJCQkJCWNhc2UgInciIDogY2FzZSAiVyIgOgoJCQkJCQkJZGF5ICs9IHBhcnNlSW50KG1hdGNoZXNbMV0sMTApICogNzsgYnJlYWs7CgkJCQkJCWNhc2UgIm0iIDogY2FzZSAiTSIgOgoJCQkJCQkJbW9udGggKz0gcGFyc2VJbnQobWF0Y2hlc1sxXSwxMCk7CgkJCQkJCQlkYXkgPSBNYXRoLm1pbihkYXksICQuZGF0ZXBpY2tlci5fZ2V0RGF5c0luTW9udGgoeWVhciwgbW9udGgpKTsKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICJ5IjogY2FzZSAiWSIgOgoJCQkJCQkJeWVhciArPSBwYXJzZUludChtYXRjaGVzWzFdLDEwKTsKCQkJCQkJCWRheSA9IE1hdGgubWluKGRheSwgJC5kYXRlcGlja2VyLl9nZXREYXlzSW5Nb250aCh5ZWFyLCBtb250aCkpOwoJCQkJCQkJYnJlYWs7CgkJCQkJfQoJCQkJCW1hdGNoZXMgPSBwYXR0ZXJuLmV4ZWMob2Zmc2V0KTsKCQkJCX0KCQkJCXJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5KTsKCQkJfSwKCQkJbmV3RGF0ZSA9IChkYXRlID09IG51bGwgfHwgZGF0ZSA9PT0gIiIgPyBkZWZhdWx0RGF0ZSA6ICh0eXBlb2YgZGF0ZSA9PT0gInN0cmluZyIgPyBvZmZzZXRTdHJpbmcoZGF0ZSkgOgoJCQkJKHR5cGVvZiBkYXRlID09PSAibnVtYmVyIiA\/IChpc05hTihkYXRlKSA\/IGRlZmF1bHREYXRlIDogb2Zmc2V0TnVtZXJpYyhkYXRlKSkgOiBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSkpKSk7CgoJCW5ld0RhdGUgPSAobmV3RGF0ZSAmJiBuZXdEYXRlLnRvU3RyaW5nKCkgPT09ICJJbnZhbGlkIERhdGUiID8gZGVmYXVsdERhdGUgOiBuZXdEYXRlKTsKCQlpZiAobmV3RGF0ZSkgewoJCQluZXdEYXRlLnNldEhvdXJzKDApOwoJCQluZXdEYXRlLnNldE1pbnV0ZXMoMCk7CgkJCW5ld0RhdGUuc2V0U2Vjb25kcygwKTsKCQkJbmV3RGF0ZS5zZXRNaWxsaXNlY29uZHMoMCk7CgkJfQoJCXJldHVybiB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXdEYXRlKTsKCX0sCgoJLyogSGFuZGxlIHN3aXRjaCB0by9mcm9tIGRheWxpZ2h0IHNhdmluZy4KCSAqIEhvdXJzIG1heSBiZSBub24temVybyBvbiBkYXlsaWdodCBzYXZpbmcgY3V0LW92ZXI6CgkgKiA+IDEyIHdoZW4gbWlkbmlnaHQgY2hhbmdlb3ZlciwgYnV0IHRoZW4gY2Fubm90IGdlbmVyYXRlCgkgKiBtaWRuaWdodCBkYXRldGltZSwgc28ganVtcCB0byAxQU0sIG90aGVyd2lzZSByZXNldC4KCSAqIEBwYXJhbSAgZGF0ZSAgKERhdGUpIHRoZSBkYXRlIHRvIGNoZWNrCgkgKiBAcmV0dXJuICAoRGF0ZSkgdGhlIGNvcnJlY3RlZCBkYXRlCgkgKi8KCV9kYXlsaWdodFNhdmluZ0FkanVzdDogZnVuY3Rpb24oZGF0ZSkgewoJCWlmICghZGF0ZSkgewoJCQlyZXR1cm4gbnVsbDsKCQl9CgkJZGF0ZS5zZXRIb3VycyhkYXRlLmdldEhvdXJzKCkgPiAxMiA\/IGRhdGUuZ2V0SG91cnMoKSArIDIgOiAwKTsKCQlyZXR1cm4gZGF0ZTsKCX0sCgoJLyogU2V0IHRoZSBkYXRlKHMpIGRpcmVjdGx5LiAqLwoJX3NldERhdGU6IGZ1bmN0aW9uKGluc3QsIGRhdGUsIG5vQ2hhbmdlKSB7CgkJdmFyIGNsZWFyID0gIWRhdGUsCgkJCW9yaWdNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCwKCQkJb3JpZ1llYXIgPSBpbnN0LnNlbGVjdGVkWWVhciwKCQkJbmV3RGF0ZSA9IHRoaXMuX3Jlc3RyaWN0TWluTWF4KGluc3QsIHRoaXMuX2RldGVybWluZURhdGUoaW5zdCwgZGF0ZSwgbmV3IERhdGUoKSkpOwoKCQlpbnN0LnNlbGVjdGVkRGF5ID0gaW5zdC5jdXJyZW50RGF5ID0gbmV3RGF0ZS5nZXREYXRlKCk7CgkJaW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBpbnN0LmN1cnJlbnRNb250aCA9IG5ld0RhdGUuZ2V0TW9udGgoKTsKCQlpbnN0LmRyYXdZZWFyID0gaW5zdC5zZWxlY3RlZFllYXIgPSBpbnN0LmN1cnJlbnRZZWFyID0gbmV3RGF0ZS5nZXRGdWxsWWVhcigpOwoJCWlmICgob3JpZ01vbnRoICE9PSBpbnN0LnNlbGVjdGVkTW9udGggfHwgb3JpZ1llYXIgIT09IGluc3Quc2VsZWN0ZWRZZWFyKSAmJiAhbm9DaGFuZ2UpIHsKCQkJdGhpcy5fbm90aWZ5Q2hhbmdlKGluc3QpOwoJCX0KCQl0aGlzLl9hZGp1c3RJbnN0RGF0ZShpbnN0KTsKCQlpZiAoaW5zdC5pbnB1dCkgewoJCQlpbnN0LmlucHV0LnZhbChjbGVhciA\/ICIiIDogdGhpcy5fZm9ybWF0RGF0ZShpbnN0KSk7CgkJfQoJfSwKCgkvKiBSZXRyaWV2ZSB0aGUgZGF0ZShzKSBkaXJlY3RseS4gKi8KCV9nZXREYXRlOiBmdW5jdGlvbihpbnN0KSB7CgkJdmFyIHN0YXJ0RGF0ZSA9ICghaW5zdC5jdXJyZW50WWVhciB8fCAoaW5zdC5pbnB1dCAmJiBpbnN0LmlucHV0LnZhbCgpID09PSAiIikgPyBudWxsIDoKCQkJdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoCgkJCWluc3QuY3VycmVudFllYXIsIGluc3QuY3VycmVudE1vbnRoLCBpbnN0LmN1cnJlbnREYXkpKSk7CgkJCXJldHVybiBzdGFydERhdGU7Cgl9LAoKCS8qIEF0dGFjaCB0aGUgb254eHggaGFuZGxlcnMuICBUaGVzZSBhcmUgZGVjbGFyZWQgc3RhdGljYWxseSBzbwoJICogdGhleSB3b3JrIHdpdGggc3RhdGljIGNvZGUgdHJhbnNmb3JtZXJzIGxpa2UgQ2FqYS4KCSAqLwoJX2F0dGFjaEhhbmRsZXJzOiBmdW5jdGlvbihpbnN0KSB7CgkJdmFyIHN0ZXBNb250aHMgPSB0aGlzLl9nZXQoaW5zdCwgInN0ZXBNb250aHMiKSwKCQkJaWQgPSAiIyIgKyBpbnN0LmlkLnJlcGxhY2UoIC9cXFxcL2csICJcXCIgKTsKCQlpbnN0LmRwRGl2LmZpbmQoIltkYXRhLWhhbmRsZXJdIikubWFwKGZ1bmN0aW9uICgpIHsKCQkJdmFyIGhhbmRsZXIgPSB7CgkJCQlwcmV2OiBmdW5jdGlvbiAoKSB7CgkJCQkJJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGlkLCAtc3RlcE1vbnRocywgIk0iKTsKCQkJCX0sCgkJCQluZXh0OiBmdW5jdGlvbiAoKSB7CgkJCQkJJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGlkLCArc3RlcE1vbnRocywgIk0iKTsKCQkJCX0sCgkJCQloaWRlOiBmdW5jdGlvbiAoKSB7CgkJCQkJJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpOwoJCQkJfSwKCQkJCXRvZGF5OiBmdW5jdGlvbiAoKSB7CgkJCQkJJC5kYXRlcGlja2VyLl9nb3RvVG9kYXkoaWQpOwoJCQkJfSwKCQkJCXNlbGVjdERheTogZnVuY3Rpb24gKCkgewoJCQkJCSQuZGF0ZXBpY2tlci5fc2VsZWN0RGF5KGlkLCArdGhpcy5nZXRBdHRyaWJ1dGUoImRhdGEtbW9udGgiKSwgK3RoaXMuZ2V0QXR0cmlidXRlKCJkYXRhLXllYXIiKSwgdGhpcyk7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfSwKCQkJCXNlbGVjdE1vbnRoOiBmdW5jdGlvbiAoKSB7CgkJCQkJJC5kYXRlcGlja2VyLl9zZWxlY3RNb250aFllYXIoaWQsIHRoaXMsICJNIik7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfSwKCQkJCXNlbGVjdFllYXI6IGZ1bmN0aW9uICgpIHsKCQkJCQkkLmRhdGVwaWNrZXIuX3NlbGVjdE1vbnRoWWVhcihpZCwgdGhpcywgIlkiKTsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX07CgkJCSQodGhpcykuYmluZCh0aGlzLmdldEF0dHJpYnV0ZSgiZGF0YS1ldmVudCIpLCBoYW5kbGVyW3RoaXMuZ2V0QXR0cmlidXRlKCJkYXRhLWhhbmRsZXIiKV0pOwoJCX0pOwoJfSwKCgkvKiBHZW5lcmF0ZSB0aGUgSFRNTCBmb3IgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGRhdGUgcGlja2VyLiAqLwoJX2dlbmVyYXRlSFRNTDogZnVuY3Rpb24oaW5zdCkgewoJCXZhciBtYXhEcmF3LCBwcmV2VGV4dCwgcHJldiwgbmV4dFRleHQsIG5leHQsIGN1cnJlbnRUZXh0LCBnb3RvRGF0ZSwKCQkJY29udHJvbHMsIGJ1dHRvblBhbmVsLCBmaXJzdERheSwgc2hvd1dlZWssIGRheU5hbWVzLCBkYXlOYW1lc01pbiwKCQkJbW9udGhOYW1lcywgbW9udGhOYW1lc1Nob3J0LCBiZWZvcmVTaG93RGF5LCBzaG93T3RoZXJNb250aHMsCgkJCXNlbGVjdE90aGVyTW9udGhzLCBkZWZhdWx0RGF0ZSwgaHRtbCwgZG93LCByb3csIGdyb3VwLCBjb2wsIHNlbGVjdGVkRGF0ZSwKCQkJY29ybmVyQ2xhc3MsIGNhbGVuZGVyLCB0aGVhZCwgZGF5LCBkYXlzSW5Nb250aCwgbGVhZERheXMsIGN1clJvd3MsIG51bVJvd3MsCgkJCXByaW50RGF0ZSwgZFJvdywgdGJvZHksIGRheVNldHRpbmdzLCBvdGhlck1vbnRoLCB1bnNlbGVjdGFibGUsCgkJCXRlbXBEYXRlID0gbmV3IERhdGUoKSwKCQkJdG9kYXkgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCgKCQkJCW5ldyBEYXRlKHRlbXBEYXRlLmdldEZ1bGxZZWFyKCksIHRlbXBEYXRlLmdldE1vbnRoKCksIHRlbXBEYXRlLmdldERhdGUoKSkpLCAvLyBjbGVhciB0aW1lCgkJCWlzUlRMID0gdGhpcy5fZ2V0KGluc3QsICJpc1JUTCIpLAoJCQlzaG93QnV0dG9uUGFuZWwgPSB0aGlzLl9nZXQoaW5zdCwgInNob3dCdXR0b25QYW5lbCIpLAoJCQloaWRlSWZOb1ByZXZOZXh0ID0gdGhpcy5fZ2V0KGluc3QsICJoaWRlSWZOb1ByZXZOZXh0IiksCgkJCW5hdmlnYXRpb25Bc0RhdGVGb3JtYXQgPSB0aGlzLl9nZXQoaW5zdCwgIm5hdmlnYXRpb25Bc0RhdGVGb3JtYXQiKSwKCQkJbnVtTW9udGhzID0gdGhpcy5fZ2V0TnVtYmVyT2ZNb250aHMoaW5zdCksCgkJCXNob3dDdXJyZW50QXRQb3MgPSB0aGlzLl9nZXQoaW5zdCwgInNob3dDdXJyZW50QXRQb3MiKSwKCQkJc3RlcE1vbnRocyA9IHRoaXMuX2dldChpbnN0LCAic3RlcE1vbnRocyIpLAoJCQlpc011bHRpTW9udGggPSAobnVtTW9udGhzWzBdICE9PSAxIHx8IG51bU1vbnRoc1sxXSAhPT0gMSksCgkJCWN1cnJlbnREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoKCFpbnN0LmN1cnJlbnREYXkgPyBuZXcgRGF0ZSg5OTk5LCA5LCA5KSA6CgkJCQluZXcgRGF0ZShpbnN0LmN1cnJlbnRZZWFyLCBpbnN0LmN1cnJlbnRNb250aCwgaW5zdC5jdXJyZW50RGF5KSkpLAoJCQltaW5EYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZShpbnN0LCAibWluIiksCgkJCW1heERhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGluc3QsICJtYXgiKSwKCQkJZHJhd01vbnRoID0gaW5zdC5kcmF3TW9udGggLSBzaG93Q3VycmVudEF0UG9zLAoJCQlkcmF3WWVhciA9IGluc3QuZHJhd1llYXI7CgoJCWlmIChkcmF3TW9udGggPCAwKSB7CgkJCWRyYXdNb250aCArPSAxMjsKCQkJZHJhd1llYXItLTsKCQl9CgkJaWYgKG1heERhdGUpIHsKCQkJbWF4RHJhdyA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKG1heERhdGUuZ2V0RnVsbFllYXIoKSwKCQkJCW1heERhdGUuZ2V0TW9udGgoKSAtIChudW1Nb250aHNbMF0gKiBudW1Nb250aHNbMV0pICsgMSwgbWF4RGF0ZS5nZXREYXRlKCkpKTsKCQkJbWF4RHJhdyA9IChtaW5EYXRlICYmIG1heERyYXcgPCBtaW5EYXRlID8gbWluRGF0ZSA6IG1heERyYXcpOwoJCQl3aGlsZSAodGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoZHJhd1llYXIsIGRyYXdNb250aCwgMSkpID4gbWF4RHJhdykgewoJCQkJZHJhd01vbnRoLS07CgkJCQlpZiAoZHJhd01vbnRoIDwgMCkgewoJCQkJCWRyYXdNb250aCA9IDExOwoJCQkJCWRyYXdZZWFyLS07CgkJCQl9CgkJCX0KCQl9CgkJaW5zdC5kcmF3TW9udGggPSBkcmF3TW9udGg7CgkJaW5zdC5kcmF3WWVhciA9IGRyYXdZZWFyOwoKCQlwcmV2VGV4dCA9IHRoaXMuX2dldChpbnN0LCAicHJldlRleHQiKTsKCQlwcmV2VGV4dCA9ICghbmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCA\/IHByZXZUZXh0IDogdGhpcy5mb3JtYXREYXRlKHByZXZUZXh0LAoJCQl0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShkcmF3WWVhciwgZHJhd01vbnRoIC0gc3RlcE1vbnRocywgMSkpLAoJCQl0aGlzLl9nZXRGb3JtYXRDb25maWcoaW5zdCkpKTsKCgkJcHJldiA9ICh0aGlzLl9jYW5BZGp1c3RNb250aChpbnN0LCAtMSwgZHJhd1llYXIsIGRyYXdNb250aCkgPwoJCQkiPGEgY2xhc3M9J3VpLWRhdGVwaWNrZXItcHJldiB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J3ByZXYnIGRhdGEtZXZlbnQ9J2NsaWNrJyIgKwoJCQkiIHRpdGxlPSciICsgcHJldlRleHQgKyAiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS0iICsgKCBpc1JUTCA\/ICJlIiA6ICJ3IikgKyAiJz4iICsgcHJldlRleHQgKyAiPC9zcGFuPjwvYT4iIDoKCQkJKGhpZGVJZk5vUHJldk5leHQgPyAiIiA6ICI8YSBjbGFzcz0ndWktZGF0ZXBpY2tlci1wcmV2IHVpLWNvcm5lci1hbGwgdWktc3RhdGUtZGlzYWJsZWQnIHRpdGxlPSciKyBwcmV2VGV4dCArIic+PHNwYW4gY2xhc3M9J3VpLWljb24gdWktaWNvbi1jaXJjbGUtdHJpYW5nbGUtIiArICggaXNSVEwgPyAiZSIgOiAidyIpICsgIic+IiArIHByZXZUZXh0ICsgIjwvc3Bhbj48L2E+IikpOwoKCQluZXh0VGV4dCA9IHRoaXMuX2dldChpbnN0LCAibmV4dFRleHQiKTsKCQluZXh0VGV4dCA9ICghbmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCA\/IG5leHRUZXh0IDogdGhpcy5mb3JtYXREYXRlKG5leHRUZXh0LAoJCQl0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShkcmF3WWVhciwgZHJhd01vbnRoICsgc3RlcE1vbnRocywgMSkpLAoJCQl0aGlzLl9nZXRGb3JtYXRDb25maWcoaW5zdCkpKTsKCgkJbmV4dCA9ICh0aGlzLl9jYW5BZGp1c3RNb250aChpbnN0LCArMSwgZHJhd1llYXIsIGRyYXdNb250aCkgPwoJCQkiPGEgY2xhc3M9J3VpLWRhdGVwaWNrZXItbmV4dCB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J25leHQnIGRhdGEtZXZlbnQ9J2NsaWNrJyIgKwoJCQkiIHRpdGxlPSciICsgbmV4dFRleHQgKyAiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS0iICsgKCBpc1JUTCA\/ICJ3IiA6ICJlIikgKyAiJz4iICsgbmV4dFRleHQgKyAiPC9zcGFuPjwvYT4iIDoKCQkJKGhpZGVJZk5vUHJldk5leHQgPyAiIiA6ICI8YSBjbGFzcz0ndWktZGF0ZXBpY2tlci1uZXh0IHVpLWNvcm5lci1hbGwgdWktc3RhdGUtZGlzYWJsZWQnIHRpdGxlPSciKyBuZXh0VGV4dCArICInPjxzcGFuIGNsYXNzPSd1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLSIgKyAoIGlzUlRMID8gInciIDogImUiKSArICInPiIgKyBuZXh0VGV4dCArICI8L3NwYW4+PC9hPiIpKTsKCgkJY3VycmVudFRleHQgPSB0aGlzLl9nZXQoaW5zdCwgImN1cnJlbnRUZXh0Iik7CgkJZ290b0RhdGUgPSAodGhpcy5fZ2V0KGluc3QsICJnb3RvQ3VycmVudCIpICYmIGluc3QuY3VycmVudERheSA\/IGN1cnJlbnREYXRlIDogdG9kYXkpOwoJCWN1cnJlbnRUZXh0ID0gKCFuYXZpZ2F0aW9uQXNEYXRlRm9ybWF0ID8gY3VycmVudFRleHQgOgoJCQl0aGlzLmZvcm1hdERhdGUoY3VycmVudFRleHQsIGdvdG9EYXRlLCB0aGlzLl9nZXRGb3JtYXRDb25maWcoaW5zdCkpKTsKCgkJY29udHJvbHMgPSAoIWluc3QuaW5saW5lID8gIjxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0ndWktZGF0ZXBpY2tlci1jbG9zZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLXByaW9yaXR5LXByaW1hcnkgdWktY29ybmVyLWFsbCcgZGF0YS1oYW5kbGVyPSdoaWRlJyBkYXRhLWV2ZW50PSdjbGljayc+IiArCgkJCXRoaXMuX2dldChpbnN0LCAiY2xvc2VUZXh0IikgKyAiPC9idXR0b24+IiA6ICIiKTsKCgkJYnV0dG9uUGFuZWwgPSAoc2hvd0J1dHRvblBhbmVsKSA\/ICI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLWJ1dHRvbnBhbmUgdWktd2lkZ2V0LWNvbnRlbnQnPiIgKyAoaXNSVEwgPyBjb250cm9scyA6ICIiKSArCgkJCSh0aGlzLl9pc0luUmFuZ2UoaW5zdCwgZ290b0RhdGUpID8gIjxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0ndWktZGF0ZXBpY2tlci1jdXJyZW50IHVpLXN0YXRlLWRlZmF1bHQgdWktcHJpb3JpdHktc2Vjb25kYXJ5IHVpLWNvcm5lci1hbGwnIGRhdGEtaGFuZGxlcj0ndG9kYXknIGRhdGEtZXZlbnQ9J2NsaWNrJyIgKwoJCQkiPiIgKyBjdXJyZW50VGV4dCArICI8L2J1dHRvbj4iIDogIiIpICsgKGlzUlRMID8gIiIgOiBjb250cm9scykgKyAiPC9kaXY+IiA6ICIiOwoKCQlmaXJzdERheSA9IHBhcnNlSW50KHRoaXMuX2dldChpbnN0LCAiZmlyc3REYXkiKSwxMCk7CgkJZmlyc3REYXkgPSAoaXNOYU4oZmlyc3REYXkpID8gMCA6IGZpcnN0RGF5KTsKCgkJc2hvd1dlZWsgPSB0aGlzLl9nZXQoaW5zdCwgInNob3dXZWVrIik7CgkJZGF5TmFtZXMgPSB0aGlzLl9nZXQoaW5zdCwgImRheU5hbWVzIik7CgkJZGF5TmFtZXNNaW4gPSB0aGlzLl9nZXQoaW5zdCwgImRheU5hbWVzTWluIik7CgkJbW9udGhOYW1lcyA9IHRoaXMuX2dldChpbnN0LCAibW9udGhOYW1lcyIpOwoJCW1vbnRoTmFtZXNTaG9ydCA9IHRoaXMuX2dldChpbnN0LCAibW9udGhOYW1lc1Nob3J0Iik7CgkJYmVmb3JlU2hvd0RheSA9IHRoaXMuX2dldChpbnN0LCAiYmVmb3JlU2hvd0RheSIpOwoJCXNob3dPdGhlck1vbnRocyA9IHRoaXMuX2dldChpbnN0LCAic2hvd090aGVyTW9udGhzIik7CgkJc2VsZWN0T3RoZXJNb250aHMgPSB0aGlzLl9nZXQoaW5zdCwgInNlbGVjdE90aGVyTW9udGhzIik7CgkJZGVmYXVsdERhdGUgPSB0aGlzLl9nZXREZWZhdWx0RGF0ZShpbnN0KTsKCQlodG1sID0gIiI7CgkJZG93OwoJCWZvciAocm93ID0gMDsgcm93IDwgbnVtTW9udGhzWzBdOyByb3crKykgewoJCQlncm91cCA9ICIiOwoJCQl0aGlzLm1heFJvd3MgPSA0OwoJCQlmb3IgKGNvbCA9IDA7IGNvbCA8IG51bU1vbnRoc1sxXTsgY29sKyspIHsKCQkJCXNlbGVjdGVkRGF0ZSA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKGRyYXdZZWFyLCBkcmF3TW9udGgsIGluc3Quc2VsZWN0ZWREYXkpKTsKCQkJCWNvcm5lckNsYXNzID0gIiB1aS1jb3JuZXItYWxsIjsKCQkJCWNhbGVuZGVyID0gIiI7CgkJCQlpZiAoaXNNdWx0aU1vbnRoKSB7CgkJCQkJY2FsZW5kZXIgKz0gIjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItZ3JvdXAiOwoJCQkJCWlmIChudW1Nb250aHNbMV0gPiAxKSB7CgkJCQkJCXN3aXRjaCAoY29sKSB7CgkJCQkJCQljYXNlIDA6IGNhbGVuZGVyICs9ICIgdWktZGF0ZXBpY2tlci1ncm91cC1maXJzdCI7CgkJCQkJCQkJY29ybmVyQ2xhc3MgPSAiIHVpLWNvcm5lci0iICsgKGlzUlRMID8gInJpZ2h0IiA6ICJsZWZ0Iik7IGJyZWFrOwoJCQkJCQkJY2FzZSBudW1Nb250aHNbMV0tMTogY2FsZW5kZXIgKz0gIiB1aS1kYXRlcGlja2VyLWdyb3VwLWxhc3QiOwoJCQkJCQkJCWNvcm5lckNsYXNzID0gIiB1aS1jb3JuZXItIiArIChpc1JUTCA\/ICJsZWZ0IiA6ICJyaWdodCIpOyBicmVhazsKCQkJCQkJCWRlZmF1bHQ6IGNhbGVuZGVyICs9ICIgdWktZGF0ZXBpY2tlci1ncm91cC1taWRkbGUiOyBjb3JuZXJDbGFzcyA9ICIiOyBicmVhazsKCQkJCQkJfQoJCQkJCX0KCQkJCQljYWxlbmRlciArPSAiJz4iOwoJCQkJfQoJCQkJY2FsZW5kZXIgKz0gIjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItaGVhZGVyIHVpLXdpZGdldC1oZWFkZXIgdWktaGVscGVyLWNsZWFyZml4IiArIGNvcm5lckNsYXNzICsgIic+IiArCgkJCQkJKC9hbGx8bGVmdC8udGVzdChjb3JuZXJDbGFzcykgJiYgcm93ID09PSAwID8gKGlzUlRMID8gbmV4dCA6IHByZXYpIDogIiIpICsKCQkJCQkoL2FsbHxyaWdodC8udGVzdChjb3JuZXJDbGFzcykgJiYgcm93ID09PSAwID8gKGlzUlRMID8gcHJldiA6IG5leHQpIDogIiIpICsKCQkJCQl0aGlzLl9nZW5lcmF0ZU1vbnRoWWVhckhlYWRlcihpbnN0LCBkcmF3TW9udGgsIGRyYXdZZWFyLCBtaW5EYXRlLCBtYXhEYXRlLAoJCQkJCXJvdyA+IDAgfHwgY29sID4gMCwgbW9udGhOYW1lcywgbW9udGhOYW1lc1Nob3J0KSArIC8vIGRyYXcgbW9udGggaGVhZGVycwoJCQkJCSI8L2Rpdj48dGFibGUgY2xhc3M9J3VpLWRhdGVwaWNrZXItY2FsZW5kYXInPjx0aGVhZD4iICsKCQkJCQkiPHRyPiI7CgkJCQl0aGVhZCA9IChzaG93V2VlayA\/ICI8dGggY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1jb2wnPiIgKyB0aGlzLl9nZXQoaW5zdCwgIndlZWtIZWFkZXIiKSArICI8L3RoPiIgOiAiIik7CgkJCQlmb3IgKGRvdyA9IDA7IGRvdyA8IDc7IGRvdysrKSB7IC8vIGRheXMgb2YgdGhlIHdlZWsKCQkJCQlkYXkgPSAoZG93ICsgZmlyc3REYXkpICUgNzsKCQkJCQl0aGVhZCArPSAiPHRoIiArICgoZG93ICsgZmlyc3REYXkgKyA2KSAlIDcgPj0gNSA\/ICIgY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1lbmQnIiA6ICIiKSArICI+IiArCgkJCQkJCSI8c3BhbiB0aXRsZT0nIiArIGRheU5hbWVzW2RheV0gKyAiJz4iICsgZGF5TmFtZXNNaW5bZGF5XSArICI8L3NwYW4+PC90aD4iOwoJCQkJfQoJCQkJY2FsZW5kZXIgKz0gdGhlYWQgKyAiPC90cj48L3RoZWFkPjx0Ym9keT4iOwoJCQkJZGF5c0luTW9udGggPSB0aGlzLl9nZXREYXlzSW5Nb250aChkcmF3WWVhciwgZHJhd01vbnRoKTsKCQkJCWlmIChkcmF3WWVhciA9PT0gaW5zdC5zZWxlY3RlZFllYXIgJiYgZHJhd01vbnRoID09PSBpbnN0LnNlbGVjdGVkTW9udGgpIHsKCQkJCQlpbnN0LnNlbGVjdGVkRGF5ID0gTWF0aC5taW4oaW5zdC5zZWxlY3RlZERheSwgZGF5c0luTW9udGgpOwoJCQkJfQoJCQkJbGVhZERheXMgPSAodGhpcy5fZ2V0Rmlyc3REYXlPZk1vbnRoKGRyYXdZZWFyLCBkcmF3TW9udGgpIC0gZmlyc3REYXkgKyA3KSAlIDc7CgkJCQljdXJSb3dzID0gTWF0aC5jZWlsKChsZWFkRGF5cyArIGRheXNJbk1vbnRoKSAvIDcpOyAvLyBjYWxjdWxhdGUgdGhlIG51bWJlciBvZiByb3dzIHRvIGdlbmVyYXRlCgkJCQludW1Sb3dzID0gKGlzTXVsdGlNb250aCA\/IHRoaXMubWF4Um93cyA+IGN1clJvd3MgPyB0aGlzLm1heFJvd3MgOiBjdXJSb3dzIDogY3VyUm93cyk7IC8vSWYgbXVsdGlwbGUgbW9udGhzLCB1c2UgdGhlIGhpZ2hlciBudW1iZXIgb2Ygcm93cyAoc2VlICM3MDQzKQoJCQkJdGhpcy5tYXhSb3dzID0gbnVtUm93czsKCQkJCXByaW50RGF0ZSA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKGRyYXdZZWFyLCBkcmF3TW9udGgsIDEgLSBsZWFkRGF5cykpOwoJCQkJZm9yIChkUm93ID0gMDsgZFJvdyA8IG51bVJvd3M7IGRSb3crKykgeyAvLyBjcmVhdGUgZGF0ZSBwaWNrZXIgcm93cwoJCQkJCWNhbGVuZGVyICs9ICI8dHI+IjsKCQkJCQl0Ym9keSA9ICghc2hvd1dlZWsgPyAiIiA6ICI8dGQgY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1jb2wnPiIgKwoJCQkJCQl0aGlzLl9nZXQoaW5zdCwgImNhbGN1bGF0ZVdlZWsiKShwcmludERhdGUpICsgIjwvdGQ+Iik7CgkJCQkJZm9yIChkb3cgPSAwOyBkb3cgPCA3OyBkb3crKykgeyAvLyBjcmVhdGUgZGF0ZSBwaWNrZXIgZGF5cwoJCQkJCQlkYXlTZXR0aW5ncyA9IChiZWZvcmVTaG93RGF5ID8KCQkJCQkJCWJlZm9yZVNob3dEYXkuYXBwbHkoKGluc3QuaW5wdXQgPyBpbnN0LmlucHV0WzBdIDogbnVsbCksIFtwcmludERhdGVdKSA6IFt0cnVlLCAiIl0pOwoJCQkJCQlvdGhlck1vbnRoID0gKHByaW50RGF0ZS5nZXRNb250aCgpICE9PSBkcmF3TW9udGgpOwoJCQkJCQl1bnNlbGVjdGFibGUgPSAob3RoZXJNb250aCAmJiAhc2VsZWN0T3RoZXJNb250aHMpIHx8ICFkYXlTZXR0aW5nc1swXSB8fAoJCQkJCQkJKG1pbkRhdGUgJiYgcHJpbnREYXRlIDwgbWluRGF0ZSkgfHwgKG1heERhdGUgJiYgcHJpbnREYXRlID4gbWF4RGF0ZSk7CgkJCQkJCXRib2R5ICs9ICI8dGQgY2xhc3M9JyIgKwoJCQkJCQkJKChkb3cgKyBmaXJzdERheSArIDYpICUgNyA+PSA1ID8gIiB1aS1kYXRlcGlja2VyLXdlZWstZW5kIiA6ICIiKSArIC8vIGhpZ2hsaWdodCB3ZWVrZW5kcwoJCQkJCQkJKG90aGVyTW9udGggPyAiIHVpLWRhdGVwaWNrZXItb3RoZXItbW9udGgiIDogIiIpICsgLy8gaGlnaGxpZ2h0IGRheXMgZnJvbSBvdGhlciBtb250aHMKCQkJCQkJCSgocHJpbnREYXRlLmdldFRpbWUoKSA9PT0gc2VsZWN0ZWREYXRlLmdldFRpbWUoKSAmJiBkcmF3TW9udGggPT09IGluc3Quc2VsZWN0ZWRNb250aCAmJiBpbnN0Ll9rZXlFdmVudCkgfHwgLy8gdXNlciBwcmVzc2VkIGtleQoJCQkJCQkJKGRlZmF1bHREYXRlLmdldFRpbWUoKSA9PT0gcHJpbnREYXRlLmdldFRpbWUoKSAmJiBkZWZhdWx0RGF0ZS5nZXRUaW1lKCkgPT09IHNlbGVjdGVkRGF0ZS5nZXRUaW1lKCkpID8KCQkJCQkJCS8vIG9yIGRlZmF1bHREYXRlIGlzIGN1cnJlbnQgcHJpbnRlZERhdGUgYW5kIGRlZmF1bHREYXRlIGlzIHNlbGVjdGVkRGF0ZQoJCQkJCQkJIiAiICsgdGhpcy5fZGF5T3ZlckNsYXNzIDogIiIpICsgLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGRheQoJCQkJCQkJKHVuc2VsZWN0YWJsZSA\/ICIgIiArIHRoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzICsgIiB1aS1zdGF0ZS1kaXNhYmxlZCI6ICIiKSArICAvLyBoaWdobGlnaHQgdW5zZWxlY3RhYmxlIGRheXMKCQkJCQkJCShvdGhlck1vbnRoICYmICFzaG93T3RoZXJNb250aHMgPyAiIiA6ICIgIiArIGRheVNldHRpbmdzWzFdICsgLy8gaGlnaGxpZ2h0IGN1c3RvbSBkYXRlcwoJCQkJCQkJKHByaW50RGF0ZS5nZXRUaW1lKCkgPT09IGN1cnJlbnREYXRlLmdldFRpbWUoKSA\/ICIgIiArIHRoaXMuX2N1cnJlbnRDbGFzcyA6ICIiKSArIC8vIGhpZ2hsaWdodCBzZWxlY3RlZCBkYXkKCQkJCQkJCShwcmludERhdGUuZ2V0VGltZSgpID09PSB0b2RheS5nZXRUaW1lKCkgPyAiIHVpLWRhdGVwaWNrZXItdG9kYXkiIDogIiIpKSArICInIiArIC8vIGhpZ2hsaWdodCB0b2RheSAoaWYgZGlmZmVyZW50KQoJCQkJCQkJKCghb3RoZXJNb250aCB8fCBzaG93T3RoZXJNb250aHMpICYmIGRheVNldHRpbmdzWzJdID8gIiB0aXRsZT0nIiArIGRheVNldHRpbmdzWzJdLnJlcGxhY2UoLycvZywgIiYjMzk7IikgKyAiJyIgOiAiIikgKyAvLyBjZWxsIHRpdGxlCgkJCQkJCQkodW5zZWxlY3RhYmxlID8gIiIgOiAiIGRhdGEtaGFuZGxlcj0nc2VsZWN0RGF5JyBkYXRhLWV2ZW50PSdjbGljaycgZGF0YS1tb250aD0nIiArIHByaW50RGF0ZS5nZXRNb250aCgpICsgIicgZGF0YS15ZWFyPSciICsgcHJpbnREYXRlLmdldEZ1bGxZZWFyKCkgKyAiJyIpICsgIj4iICsgLy8gYWN0aW9ucwoJCQkJCQkJKG90aGVyTW9udGggJiYgIXNob3dPdGhlck1vbnRocyA\/ICImI3hhMDsiIDogLy8gZGlzcGxheSBmb3Igb3RoZXIgbW9udGhzCgkJCQkJCQkodW5zZWxlY3RhYmxlID8gIjxzcGFuIGNsYXNzPSd1aS1zdGF0ZS1kZWZhdWx0Jz4iICsgcHJpbnREYXRlLmdldERhdGUoKSArICI8L3NwYW4+IiA6ICI8YSBjbGFzcz0ndWktc3RhdGUtZGVmYXVsdCIgKwoJCQkJCQkJKHByaW50RGF0ZS5nZXRUaW1lKCkgPT09IHRvZGF5LmdldFRpbWUoKSA\/ICIgdWktc3RhdGUtaGlnaGxpZ2h0IiA6ICIiKSArCgkJCQkJCQkocHJpbnREYXRlLmdldFRpbWUoKSA9PT0gY3VycmVudERhdGUuZ2V0VGltZSgpID8gIiB1aS1zdGF0ZS1hY3RpdmUiIDogIiIpICsgLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGRheQoJCQkJCQkJKG90aGVyTW9udGggPyAiIHVpLXByaW9yaXR5LXNlY29uZGFyeSIgOiAiIikgKyAvLyBkaXN0aW5ndWlzaCBkYXRlcyBmcm9tIG90aGVyIG1vbnRocwoJCQkJCQkJIicgaHJlZj0nIyc+IiArIHByaW50RGF0ZS5nZXREYXRlKCkgKyAiPC9hPiIpKSArICI8L3RkPiI7IC8vIGRpc3BsYXkgc2VsZWN0YWJsZSBkYXRlCgkJCQkJCXByaW50RGF0ZS5zZXREYXRlKHByaW50RGF0ZS5nZXREYXRlKCkgKyAxKTsKCQkJCQkJcHJpbnREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QocHJpbnREYXRlKTsKCQkJCQl9CgkJCQkJY2FsZW5kZXIgKz0gdGJvZHkgKyAiPC90cj4iOwoJCQkJfQoJCQkJZHJhd01vbnRoKys7CgkJCQlpZiAoZHJhd01vbnRoID4gMTEpIHsKCQkJCQlkcmF3TW9udGggPSAwOwoJCQkJCWRyYXdZZWFyKys7CgkJCQl9CgkJCQljYWxlbmRlciArPSAiPC90Ym9keT48L3RhYmxlPiIgKyAoaXNNdWx0aU1vbnRoID8gIjwvZGl2PiIgKwoJCQkJCQkJKChudW1Nb250aHNbMF0gPiAwICYmIGNvbCA9PT0gbnVtTW9udGhzWzFdLTEpID8gIjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItcm93LWJyZWFrJz48L2Rpdj4iIDogIiIpIDogIiIpOwoJCQkJZ3JvdXAgKz0gY2FsZW5kZXI7CgkJCX0KCQkJaHRtbCArPSBncm91cDsKCQl9CgkJaHRtbCArPSBidXR0b25QYW5lbDsKCQlpbnN0Ll9rZXlFdmVudCA9IGZhbHNlOwoJCXJldHVybiBodG1sOwoJfSwKCgkvKiBHZW5lcmF0ZSB0aGUgbW9udGggYW5kIHllYXIgaGVhZGVyLiAqLwoJX2dlbmVyYXRlTW9udGhZZWFySGVhZGVyOiBmdW5jdGlvbihpbnN0LCBkcmF3TW9udGgsIGRyYXdZZWFyLCBtaW5EYXRlLCBtYXhEYXRlLAoJCQlzZWNvbmRhcnksIG1vbnRoTmFtZXMsIG1vbnRoTmFtZXNTaG9ydCkgewoKCQl2YXIgaW5NaW5ZZWFyLCBpbk1heFllYXIsIG1vbnRoLCB5ZWFycywgdGhpc1llYXIsIGRldGVybWluZVllYXIsIHllYXIsIGVuZFllYXIsCgkJCWNoYW5nZU1vbnRoID0gdGhpcy5fZ2V0KGluc3QsICJjaGFuZ2VNb250aCIpLAoJCQljaGFuZ2VZZWFyID0gdGhpcy5fZ2V0KGluc3QsICJjaGFuZ2VZZWFyIiksCgkJCXNob3dNb250aEFmdGVyWWVhciA9IHRoaXMuX2dldChpbnN0LCAic2hvd01vbnRoQWZ0ZXJZZWFyIiksCgkJCWh0bWwgPSAiPGRpdiBjbGFzcz0ndWktZGF0ZXBpY2tlci10aXRsZSc+IiwKCQkJbW9udGhIdG1sID0gIiI7CgoJCS8vIG1vbnRoIHNlbGVjdGlvbgoJCWlmIChzZWNvbmRhcnkgfHwgIWNoYW5nZU1vbnRoKSB7CgkJCW1vbnRoSHRtbCArPSAiPHNwYW4gY2xhc3M9J3VpLWRhdGVwaWNrZXItbW9udGgnPiIgKyBtb250aE5hbWVzW2RyYXdNb250aF0gKyAiPC9zcGFuPiI7CgkJfSBlbHNlIHsKCQkJaW5NaW5ZZWFyID0gKG1pbkRhdGUgJiYgbWluRGF0ZS5nZXRGdWxsWWVhcigpID09PSBkcmF3WWVhcik7CgkJCWluTWF4WWVhciA9IChtYXhEYXRlICYmIG1heERhdGUuZ2V0RnVsbFllYXIoKSA9PT0gZHJhd1llYXIpOwoJCQltb250aEh0bWwgKz0gIjxzZWxlY3QgY2xhc3M9J3VpLWRhdGVwaWNrZXItbW9udGgnIGRhdGEtaGFuZGxlcj0nc2VsZWN0TW9udGgnIGRhdGEtZXZlbnQ9J2NoYW5nZSc+IjsKCQkJZm9yICggbW9udGggPSAwOyBtb250aCA8IDEyOyBtb250aCsrKSB7CgkJCQlpZiAoKCFpbk1pblllYXIgfHwgbW9udGggPj0gbWluRGF0ZS5nZXRNb250aCgpKSAmJiAoIWluTWF4WWVhciB8fCBtb250aCA8PSBtYXhEYXRlLmdldE1vbnRoKCkpKSB7CgkJCQkJbW9udGhIdG1sICs9ICI8b3B0aW9uIHZhbHVlPSciICsgbW9udGggKyAiJyIgKwoJCQkJCQkobW9udGggPT09IGRyYXdNb250aCA\/ICIgc2VsZWN0ZWQ9J3NlbGVjdGVkJyIgOiAiIikgKwoJCQkJCQkiPiIgKyBtb250aE5hbWVzU2hvcnRbbW9udGhdICsgIjwvb3B0aW9uPiI7CgkJCQl9CgkJCX0KCQkJbW9udGhIdG1sICs9ICI8L3NlbGVjdD4iOwoJCX0KCgkJaWYgKCFzaG93TW9udGhBZnRlclllYXIpIHsKCQkJaHRtbCArPSBtb250aEh0bWwgKyAoc2Vjb25kYXJ5IHx8ICEoY2hhbmdlTW9udGggJiYgY2hhbmdlWWVhcikgPyAiJiN4YTA7IiA6ICIiKTsKCQl9CgoJCS8vIHllYXIgc2VsZWN0aW9uCgkJaWYgKCAhaW5zdC55ZWFyc2h0bWwgKSB7CgkJCWluc3QueWVhcnNodG1sID0gIiI7CgkJCWlmIChzZWNvbmRhcnkgfHwgIWNoYW5nZVllYXIpIHsKCQkJCWh0bWwgKz0gIjxzcGFuIGNsYXNzPSd1aS1kYXRlcGlja2VyLXllYXInPiIgKyBkcmF3WWVhciArICI8L3NwYW4+IjsKCQkJfSBlbHNlIHsKCQkJCS8vIGRldGVybWluZSByYW5nZSBvZiB5ZWFycyB0byBkaXNwbGF5CgkJCQl5ZWFycyA9IHRoaXMuX2dldChpbnN0LCAieWVhclJhbmdlIikuc3BsaXQoIjoiKTsKCQkJCXRoaXNZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpOwoJCQkJZGV0ZXJtaW5lWWVhciA9IGZ1bmN0aW9uKHZhbHVlKSB7CgkJCQkJdmFyIHllYXIgPSAodmFsdWUubWF0Y2goL2NbK1wtXS4qLykgPyBkcmF3WWVhciArIHBhcnNlSW50KHZhbHVlLnN1YnN0cmluZygxKSwgMTApIDoKCQkJCQkJKHZhbHVlLm1hdGNoKC9bK1wtXS4qLykgPyB0aGlzWWVhciArIHBhcnNlSW50KHZhbHVlLCAxMCkgOgoJCQkJCQlwYXJzZUludCh2YWx1ZSwgMTApKSk7CgkJCQkJcmV0dXJuIChpc05hTih5ZWFyKSA\/IHRoaXNZZWFyIDogeWVhcik7CgkJCQl9OwoJCQkJeWVhciA9IGRldGVybWluZVllYXIoeWVhcnNbMF0pOwoJCQkJZW5kWWVhciA9IE1hdGgubWF4KHllYXIsIGRldGVybWluZVllYXIoeWVhcnNbMV0gfHwgIiIpKTsKCQkJCXllYXIgPSAobWluRGF0ZSA\/IE1hdGgubWF4KHllYXIsIG1pbkRhdGUuZ2V0RnVsbFllYXIoKSkgOiB5ZWFyKTsKCQkJCWVuZFllYXIgPSAobWF4RGF0ZSA\/IE1hdGgubWluKGVuZFllYXIsIG1heERhdGUuZ2V0RnVsbFllYXIoKSkgOiBlbmRZZWFyKTsKCQkJCWluc3QueWVhcnNodG1sICs9ICI8c2VsZWN0IGNsYXNzPSd1aS1kYXRlcGlja2VyLXllYXInIGRhdGEtaGFuZGxlcj0nc2VsZWN0WWVhcicgZGF0YS1ldmVudD0nY2hhbmdlJz4iOwoJCQkJZm9yICg7IHllYXIgPD0gZW5kWWVhcjsgeWVhcisrKSB7CgkJCQkJaW5zdC55ZWFyc2h0bWwgKz0gIjxvcHRpb24gdmFsdWU9JyIgKyB5ZWFyICsgIiciICsKCQkJCQkJKHllYXIgPT09IGRyYXdZZWFyID8gIiBzZWxlY3RlZD0nc2VsZWN0ZWQnIiA6ICIiKSArCgkJCQkJCSI+IiArIHllYXIgKyAiPC9vcHRpb24+IjsKCQkJCX0KCQkJCWluc3QueWVhcnNodG1sICs9ICI8L3NlbGVjdD4iOwoKCQkJCWh0bWwgKz0gaW5zdC55ZWFyc2h0bWw7CgkJCQlpbnN0LnllYXJzaHRtbCA9IG51bGw7CgkJCX0KCQl9CgoJCWh0bWwgKz0gdGhpcy5fZ2V0KGluc3QsICJ5ZWFyU3VmZml4Iik7CgkJaWYgKHNob3dNb250aEFmdGVyWWVhcikgewoJCQlodG1sICs9IChzZWNvbmRhcnkgfHwgIShjaGFuZ2VNb250aCAmJiBjaGFuZ2VZZWFyKSA\/ICImI3hhMDsiIDogIiIpICsgbW9udGhIdG1sOwoJCX0KCQlodG1sICs9ICI8L2Rpdj4iOyAvLyBDbG9zZSBkYXRlcGlja2VyX2hlYWRlcgoJCXJldHVybiBodG1sOwoJfSwKCgkvKiBBZGp1c3Qgb25lIG9mIHRoZSBkYXRlIHN1Yi1maWVsZHMuICovCglfYWRqdXN0SW5zdERhdGU6IGZ1bmN0aW9uKGluc3QsIG9mZnNldCwgcGVyaW9kKSB7CgkJdmFyIHllYXIgPSBpbnN0LmRyYXdZZWFyICsgKHBlcmlvZCA9PT0gIlkiID8gb2Zmc2V0IDogMCksCgkJCW1vbnRoID0gaW5zdC5kcmF3TW9udGggKyAocGVyaW9kID09PSAiTSIgPyBvZmZzZXQgOiAwKSwKCQkJZGF5ID0gTWF0aC5taW4oaW5zdC5zZWxlY3RlZERheSwgdGhpcy5fZ2V0RGF5c0luTW9udGgoeWVhciwgbW9udGgpKSArIChwZXJpb2QgPT09ICJEIiA\/IG9mZnNldCA6IDApLAoJCQlkYXRlID0gdGhpcy5fcmVzdHJpY3RNaW5NYXgoaW5zdCwgdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoeWVhciwgbW9udGgsIGRheSkpKTsKCgkJaW5zdC5zZWxlY3RlZERheSA9IGRhdGUuZ2V0RGF0ZSgpOwoJCWluc3QuZHJhd01vbnRoID0gaW5zdC5zZWxlY3RlZE1vbnRoID0gZGF0ZS5nZXRNb250aCgpOwoJCWluc3QuZHJhd1llYXIgPSBpbnN0LnNlbGVjdGVkWWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTsKCQlpZiAocGVyaW9kID09PSAiTSIgfHwgcGVyaW9kID09PSAiWSIpIHsKCQkJdGhpcy5fbm90aWZ5Q2hhbmdlKGluc3QpOwoJCX0KCX0sCgoJLyogRW5zdXJlIGEgZGF0ZSBpcyB3aXRoaW4gYW55IG1pbi9tYXggYm91bmRzLiAqLwoJX3Jlc3RyaWN0TWluTWF4OiBmdW5jdGlvbihpbnN0LCBkYXRlKSB7CgkJdmFyIG1pbkRhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGluc3QsICJtaW4iKSwKCQkJbWF4RGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoaW5zdCwgIm1heCIpLAoJCQluZXdEYXRlID0gKG1pbkRhdGUgJiYgZGF0ZSA8IG1pbkRhdGUgPyBtaW5EYXRlIDogZGF0ZSk7CgkJcmV0dXJuIChtYXhEYXRlICYmIG5ld0RhdGUgPiBtYXhEYXRlID8gbWF4RGF0ZSA6IG5ld0RhdGUpOwoJfSwKCgkvKiBOb3RpZnkgY2hhbmdlIG9mIG1vbnRoL3llYXIuICovCglfbm90aWZ5Q2hhbmdlOiBmdW5jdGlvbihpbnN0KSB7CgkJdmFyIG9uQ2hhbmdlID0gdGhpcy5fZ2V0KGluc3QsICJvbkNoYW5nZU1vbnRoWWVhciIpOwoJCWlmIChvbkNoYW5nZSkgewoJCQlvbkNoYW5nZS5hcHBseSgoaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXRbMF0gOiBudWxsKSwKCQkJCVtpbnN0LnNlbGVjdGVkWWVhciwgaW5zdC5zZWxlY3RlZE1vbnRoICsgMSwgaW5zdF0pOwoJCX0KCX0sCgoJLyogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgbW9udGhzIHRvIHNob3cuICovCglfZ2V0TnVtYmVyT2ZNb250aHM6IGZ1bmN0aW9uKGluc3QpIHsKCQl2YXIgbnVtTW9udGhzID0gdGhpcy5fZ2V0KGluc3QsICJudW1iZXJPZk1vbnRocyIpOwoJCXJldHVybiAobnVtTW9udGhzID09IG51bGwgPyBbMSwgMV0gOiAodHlwZW9mIG51bU1vbnRocyA9PT0gIm51bWJlciIgPyBbMSwgbnVtTW9udGhzXSA6IG51bU1vbnRocykpOwoJfSwKCgkvKiBEZXRlcm1pbmUgdGhlIGN1cnJlbnQgbWF4aW11bSBkYXRlIC0gZW5zdXJlIG5vIHRpbWUgY29tcG9uZW50cyBhcmUgc2V0LiAqLwoJX2dldE1pbk1heERhdGU6IGZ1bmN0aW9uKGluc3QsIG1pbk1heCkgewoJCXJldHVybiB0aGlzLl9kZXRlcm1pbmVEYXRlKGluc3QsIHRoaXMuX2dldChpbnN0LCBtaW5NYXggKyAiRGF0ZSIpLCBudWxsKTsKCX0sCgoJLyogRmluZCB0aGUgbnVtYmVyIG9mIGRheXMgaW4gYSBnaXZlbiBtb250aC4gKi8KCV9nZXREYXlzSW5Nb250aDogZnVuY3Rpb24oeWVhciwgbW9udGgpIHsKCQlyZXR1cm4gMzIgLSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMzIpKS5nZXREYXRlKCk7Cgl9LAoKCS8qIEZpbmQgdGhlIGRheSBvZiB0aGUgd2VlayBvZiB0aGUgZmlyc3Qgb2YgYSBtb250aC4gKi8KCV9nZXRGaXJzdERheU9mTW9udGg6IGZ1bmN0aW9uKHllYXIsIG1vbnRoKSB7CgkJcmV0dXJuIG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKS5nZXREYXkoKTsKCX0sCgoJLyogRGV0ZXJtaW5lcyBpZiB3ZSBzaG91bGQgYWxsb3cgYSAibmV4dC9wcmV2IiBtb250aCBkaXNwbGF5IGNoYW5nZS4gKi8KCV9jYW5BZGp1c3RNb250aDogZnVuY3Rpb24oaW5zdCwgb2Zmc2V0LCBjdXJZZWFyLCBjdXJNb250aCkgewoJCXZhciBudW1Nb250aHMgPSB0aGlzLl9nZXROdW1iZXJPZk1vbnRocyhpbnN0KSwKCQkJZGF0ZSA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKGN1clllYXIsCgkJCWN1ck1vbnRoICsgKG9mZnNldCA8IDAgPyBvZmZzZXQgOiBudW1Nb250aHNbMF0gKiBudW1Nb250aHNbMV0pLCAxKSk7CgoJCWlmIChvZmZzZXQgPCAwKSB7CgkJCWRhdGUuc2V0RGF0ZSh0aGlzLl9nZXREYXlzSW5Nb250aChkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSkpOwoJCX0KCQlyZXR1cm4gdGhpcy5faXNJblJhbmdlKGluc3QsIGRhdGUpOwoJfSwKCgkvKiBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgYWNjZXB0ZWQgcmFuZ2U\\/CgkJCQl7IGNsaWNrOiBwcm9wcywgdGV4dDogbmFtZSB9IDoKCQkJCXByb3BzOwoJCQkvLyBEZWZhdWx0IHRvIGEgbm9uLXN1Ym1pdHRpbmcgYnV0dG9uCgkJCXByb3BzID0gJC5leHRlbmQoIHsgdHlwZTogImJ1dHRvbiIgfSwgcHJvcHMgKTsKCQkJLy8gQ2hhbmdlIHRoZSBjb250ZXh0IGZvciB0aGUgY2xpY2sgY2FsbGJhY2sgdG8gYmUgdGhlIG1haW4gZWxlbWVudAoJCQljbGljayA9IHByb3BzLmNsaWNrOwoJCQlwcm9wcy5jbGljayA9IGZ1bmN0aW9uKCkgewoJCQkJY2xpY2suYXBwbHkoIHRoYXQuZWxlbWVudFswXSwgYXJndW1lbnRzICk7CgkJCX07CgkJCWJ1dHRvbk9wdGlvbnMgPSB7CgkJCQlpY29uczogcHJvcHMuaWNvbnMsCgkJCQl0ZXh0OiBwcm9wcy5zaG93VGV4dAoJCQl9OwoJCQlkZWxldGUgcHJvcHMuaWNvbnM7CgkJCWRlbGV0ZSBwcm9wcy5zaG93VGV4dDsKCQkJJCggIjxidXR0b24+PC9idXR0b24+IiwgcHJvcHMgKQoJCQkJLmJ1dHRvbiggYnV0dG9uT3B0aW9ucyApCgkJCQkuYXBwZW5kVG8oIHRoYXQudWlCdXR0b25TZXQgKTsKCQl9KTsKCQl0aGlzLnVpRGlhbG9nLmFkZENsYXNzKCJ1aS1kaWFsb2ctYnV0dG9ucyIpOwoJCXRoaXMudWlEaWFsb2dCdXR0b25QYW5lLmFwcGVuZFRvKCB0aGlzLnVpRGlhbG9nICk7Cgl9LAoKCV9tYWtlRHJhZ2dhYmxlOiBmdW5jdGlvbigpIHsKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgoJCWZ1bmN0aW9uIGZpbHRlcmVkVWkoIHVpICkgewoJCQlyZXR1cm4gewoJCQkJcG9zaXRpb246IHVpLnBvc2l0aW9uLAoJCQkJb2Zmc2V0OiB1aS5vZmZzZXQKCQkJfTsKCQl9CgoJCXRoaXMudWlEaWFsb2cuZHJhZ2dhYmxlKHsKCQkJY2FuY2VsOiAiLnVpLWRpYWxvZy1jb250ZW50LCAudWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlIiwKCQkJaGFuZGxlOiAiLnVpLWRpYWxvZy10aXRsZWJhciIsCgkJCWNvbnRhaW5tZW50OiAiZG9jdW1lbnQiLAoJCQlzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHsKCQkJCSQoIHRoaXMgKS5hZGRDbGFzcygidWktZGlhbG9nLWRyYWdnaW5nIik7CgkJCQl0aGF0Ll9ibG9ja0ZyYW1lcygpOwoJCQkJdGhhdC5fdHJpZ2dlciggImRyYWdTdGFydCIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7CgkJCX0sCgkJCWRyYWc6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7CgkJCQl0aGF0Ll90cmlnZ2VyKCAiZHJhZyIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7CgkJCX0sCgkJCXN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7CgkJCQlvcHRpb25zLnBvc2l0aW9uID0gWwoJCQkJCXVpLnBvc2l0aW9uLmxlZnQgLSB0aGF0LmRvY3VtZW50LnNjcm9sbExlZnQoKSwKCQkJCQl1aS5wb3NpdGlvbi50b3AgLSB0aGF0LmRvY3VtZW50LnNjcm9sbFRvcCgpCgkJCQldOwoJCQkJJCggdGhpcyApLnJlbW92ZUNsYXNzKCJ1aS1kaWFsb2ctZHJhZ2dpbmciKTsKCQkJCXRoYXQuX3VuYmxvY2tGcmFtZXMoKTsKCQkJCXRoYXQuX3RyaWdnZXIoICJkcmFnU3RvcCIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7CgkJCX0KCQl9KTsKCX0sCgoJX21ha2VSZXNpemFibGU6IGZ1bmN0aW9uKCkgewoJCXZhciB0aGF0ID0gdGhpcywKCQkJb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJaGFuZGxlcyA9IG9wdGlvbnMucmVzaXphYmxlLAoJCQkvLyAudWktcmVzaXphYmxlIGhhcyBwb3NpdGlvbjogcmVsYXRpdmUgZGVmaW5lZCBpbiB0aGUgc3R5bGVzaGVldAoJCQkvLyBidXQgZGlhbG9ncyBoYXZlIHRvIHVzZSBhYnNvbHV0ZSBvciBmaXhlZCBwb3NpdGlvbmluZwoJCQlwb3NpdGlvbiA9IHRoaXMudWlEaWFsb2cuY3NzKCJwb3NpdGlvbiIpLAoJCQlyZXNpemVIYW5kbGVzID0gdHlwZW9mIGhhbmRsZXMgPT09ICJzdHJpbmciID8KCQkJCWhhbmRsZXMJOgoJCQkJIm4sZSxzLHcsc2Usc3csbmUsbnciOwoKCQlmdW5jdGlvbiBmaWx0ZXJlZFVpKCB1aSApIHsKCQkJcmV0dXJuIHsKCQkJCW9yaWdpbmFsUG9zaXRpb246IHVpLm9yaWdpbmFsUG9zaXRpb24sCgkJCQlvcmlnaW5hbFNpemU6IHVpLm9yaWdpbmFsU2l6ZSwKCQkJCXBvc2l0aW9uOiB1aS5wb3NpdGlvbiwKCQkJCXNpemU6IHVpLnNpemUKCQkJfTsKCQl9CgoJCXRoaXMudWlEaWFsb2cucmVzaXphYmxlKHsKCQkJY2FuY2VsOiAiLnVpLWRpYWxvZy1jb250ZW50IiwKCQkJY29udGFpbm1lbnQ6ICJkb2N1bWVudCIsCgkJCWFsc29SZXNpemU6IHRoaXMuZWxlbWVudCwKCQkJbWF4V2lkdGg6IG9wdGlvbnMubWF4V2lkdGgsCgkJCW1heEhlaWdodDogb3B0aW9ucy5tYXhIZWlnaHQsCgkJCW1pbldpZHRoOiBvcHRpb25zLm1pbldpZHRoLAoJCQltaW5IZWlnaHQ6IHRoaXMuX21pbkhlaWdodCgpLAoJCQloYW5kbGVzOiByZXNpemVIYW5kbGVzLAoJCQlzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHsKCQkJCSQoIHRoaXMgKS5hZGRDbGFzcygidWktZGlhbG9nLXJlc2l6aW5nIik7CgkJCQl0aGF0Ll9ibG9ja0ZyYW1lcygpOwoJCQkJdGhhdC5fdHJpZ2dlciggInJlc2l6ZVN0YXJ0IiwgZXZlbnQsIGZpbHRlcmVkVWkoIHVpICkgKTsKCQkJfSwKCQkJcmVzaXplOiBmdW5jdGlvbiggZXZlbnQsIHVpICkgewoJCQkJdGhhdC5fdHJpZ2dlciggInJlc2l6ZSIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7CgkJCX0sCgkJCXN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7CgkJCQlvcHRpb25zLmhlaWdodCA9ICQoIHRoaXMgKS5oZWlnaHQoKTsKCQkJCW9wdGlvbnMud2lkdGggPSAkKCB0aGlzICkud2lkdGgoKTsKCQkJCSQoIHRoaXMgKS5yZW1vdmVDbGFzcygidWktZGlhbG9nLXJlc2l6aW5nIik7CgkJCQl0aGF0Ll91bmJsb2NrRnJhbWVzKCk7CgkJCQl0aGF0Ll90cmlnZ2VyKCAicmVzaXplU3RvcCIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7CgkJCX0KCQl9KQoJCS5jc3MoICJwb3NpdGlvbiIsIHBvc2l0aW9uICk7Cgl9LAoKCV9taW5IZWlnaHQ6IGZ1bmN0aW9uKCkgewoJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOwoKCQlyZXR1cm4gb3B0aW9ucy5oZWlnaHQgPT09ICJhdXRvIiA\/CgkJCW9wdGlvbnMubWluSGVpZ2h0IDoKCQkJTWF0aC5taW4oIG9wdGlvbnMubWluSGVpZ2h0LCBvcHRpb25zLmhlaWdodCApOwoJfSwKCglfcG9zaXRpb246IGZ1bmN0aW9uKCkgewoJCS8vIE5lZWQgdG8gc2hvdyB0aGUgZGlhbG9nIHRvIGdldCB0aGUgYWN0dWFsIG9mZnNldCBpbiB0aGUgcG9zaXRpb24gcGx1Z2luCgkJdmFyIGlzVmlzaWJsZSA9IHRoaXMudWlEaWFsb2cuaXMoIjp2aXNpYmxlIik7CgkJaWYgKCAhaXNWaXNpYmxlICkgewoJCQl0aGlzLnVpRGlhbG9nLnNob3coKTsKCQl9CgkJdGhpcy51aURpYWxvZy5wb3NpdGlvbiggdGhpcy5vcHRpb25zLnBvc2l0aW9uICk7CgkJaWYgKCAhaXNWaXNpYmxlICkgewoJCQl0aGlzLnVpRGlhbG9nLmhpZGUoKTsKCQl9Cgl9LAoKCV9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCXJlc2l6ZSA9IGZhbHNlLAoJCQlyZXNpemFibGVPcHRpb25zID0ge307CgoJCSQuZWFjaCggb3B0aW9ucywgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJCXRoYXQuX3NldE9wdGlvbigga2V5LCB2YWx1ZSApOwoKCQkJaWYgKCBrZXkgaW4gc2l6ZVJlbGF0ZWRPcHRpb25zICkgewoJCQkJcmVzaXplID0gdHJ1ZTsKCQkJfQoJCQlpZiAoIGtleSBpbiByZXNpemFibGVSZWxhdGVkT3B0aW9ucyApIHsKCQkJCXJlc2l6YWJsZU9wdGlvbnNbIGtleSBdID0gdmFsdWU7CgkJCX0KCQl9KTsKCgkJaWYgKCByZXNpemUgKSB7CgkJCXRoaXMuX3NpemUoKTsKCQkJdGhpcy5fcG9zaXRpb24oKTsKCQl9CgkJaWYgKCB0aGlzLnVpRGlhbG9nLmlzKCI6ZGF0YSh1aS1yZXNpemFibGUpIikgKSB7CgkJCXRoaXMudWlEaWFsb2cucmVzaXphYmxlKCAib3B0aW9uIiwgcmVzaXphYmxlT3B0aW9ucyApOwoJCX0KCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJLypqc2hpbnQgbWF4Y29tcGxleGl0eToxNSovCgkJdmFyIGlzRHJhZ2dhYmxlLCBpc1Jlc2l6YWJsZSwKCQkJdWlEaWFsb2cgPSB0aGlzLnVpRGlhbG9nOwoKCQlpZiAoIGtleSA9PT0gImRpYWxvZ0NsYXNzIiApIHsKCQkJdWlEaWFsb2cKCQkJCS5yZW1vdmVDbGFzcyggdGhpcy5vcHRpb25zLmRpYWxvZ0NsYXNzICkKCQkJCS5hZGRDbGFzcyggdmFsdWUgKTsKCQl9CgoJCWlmICgga2V5ID09PSAiZGlzYWJsZWQiICkgewoJCQlyZXR1cm47CgkJfQoKCQl0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApOwoKCQlpZiAoIGtleSA9PT0gImFwcGVuZFRvIiApIHsKCQkJdGhpcy51aURpYWxvZy5hcHBlbmRUbyggdGhpcy5fYXBwZW5kVG8oKSApOwoJCX0KCgkJaWYgKCBrZXkgPT09ICJidXR0b25zIiApIHsKCQkJdGhpcy5fY3JlYXRlQnV0dG9ucygpOwoJCX0KCgkJaWYgKCBrZXkgPT09ICJjbG9zZVRleHQiICkgewoJCQl0aGlzLnVpRGlhbG9nVGl0bGViYXJDbG9zZS5idXR0b24oewoJCQkJLy8gRW5zdXJlIHRoYXQgd2UgYWx3YXlzIHBhc3MgYSBzdHJpbmcKCQkJCWxhYmVsOiAiIiArIHZhbHVlCgkJCX0pOwoJCX0KCgkJaWYgKCBrZXkgPT09ICJkcmFnZ2FibGUiICkgewoJCQlpc0RyYWdnYWJsZSA9IHVpRGlhbG9nLmlzKCI6ZGF0YSh1aS1kcmFnZ2FibGUpIik7CgkJCWlmICggaXNEcmFnZ2FibGUgJiYgIXZhbHVlICkgewoJCQkJdWlEaWFsb2cuZHJhZ2dhYmxlKCJkZXN0cm95Iik7CgkJCX0KCgkJCWlmICggIWlzRHJhZ2dhYmxlICYmIHZhbHVlICkgewoJCQkJdGhpcy5fbWFrZURyYWdnYWJsZSgpOwoJCQl9CgkJfQoKCQlpZiAoIGtleSA9PT0gInBvc2l0aW9uIiApIHsKCQkJdGhpcy5fcG9zaXRpb24oKTsKCQl9CgoJCWlmICgga2V5ID09PSAicmVzaXphYmxlIiApIHsKCQkJLy8gY3VycmVudGx5IHJlc2l6YWJsZSwgYmVjb21pbmcgbm9uLXJlc2l6YWJsZQoJCQlpc1Jlc2l6YWJsZSA9IHVpRGlhbG9nLmlzKCI6ZGF0YSh1aS1yZXNpemFibGUpIik7CgkJCWlmICggaXNSZXNpemFibGUgJiYgIXZhbHVlICkgewoJCQkJdWlEaWFsb2cucmVzaXphYmxlKCJkZXN0cm95Iik7CgkJCX0KCgkJCS8vIGN1cnJlbnRseSByZXNpemFibGUsIGNoYW5naW5nIGhhbmRsZXMKCQkJaWYgKCBpc1Jlc2l6YWJsZSAmJiB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciICkgewoJCQkJdWlEaWFsb2cucmVzaXphYmxlKCAib3B0aW9uIiwgImhhbmRsZXMiLCB2YWx1ZSApOwoJCQl9CgoJCQkvLyBjdXJyZW50bHkgbm9uLXJlc2l6YWJsZSwgYmVjb21pbmcgcmVzaXphYmxlCgkJCWlmICggIWlzUmVzaXphYmxlICYmIHZhbHVlICE9PSBmYWxzZSApIHsKCQkJCXRoaXMuX21ha2VSZXNpemFibGUoKTsKCQkJfQoJCX0KCgkJaWYgKCBrZXkgPT09ICJ0aXRsZSIgKSB7CgkJCXRoaXMuX3RpdGxlKCB0aGlzLnVpRGlhbG9nVGl0bGViYXIuZmluZCgiLnVpLWRpYWxvZy10aXRsZSIpICk7CgkJfQoJfSwKCglfc2l6ZTogZnVuY3Rpb24oKSB7CgkJLy8gSWYgdGhlIHVzZXIgaGFzIHJlc2l6ZWQgdGhlIGRpYWxvZywgdGhlIC51aS1kaWFsb2cgYW5kIC51aS1kaWFsb2ctY29udGVudAoJCS8vIGRpdnMgd2lsbCBib3RoIGhhdmUgd2lkdGggYW5kIGhlaWdodCBzZXQsIHNvIHdlIG5lZWQgdG8gcmVzZXQgdGhlbQoJCXZhciBub25Db250ZW50SGVpZ2h0LCBtaW5Db250ZW50SGVpZ2h0LCBtYXhDb250ZW50SGVpZ2h0LAoJCQlvcHRpb25zID0gdGhpcy5vcHRpb25zOwoKCQkvLyBSZXNldCBjb250ZW50IHNpemluZwoJCXRoaXMuZWxlbWVudC5zaG93KCkuY3NzKHsKCQkJd2lkdGg6ICJhdXRvIiwKCQkJbWluSGVpZ2h0OiAwLAoJCQltYXhIZWlnaHQ6ICJub25lIiwKCQkJaGVpZ2h0OiAwCgkJfSk7CgoJCWlmICggb3B0aW9ucy5taW5XaWR0aCA+IG9wdGlvbnMud2lkdGggKSB7CgkJCW9wdGlvbnMud2lkdGggPSBvcHRpb25zLm1pbldpZHRoOwoJCX0KCgkJLy8gcmVzZXQgd3JhcHBlciBzaXppbmcKCQkvLyBkZXRlcm1pbmUgdGhlIGhlaWdodCBvZiBhbGwgdGhlIG5vbi1jb250ZW50IGVsZW1lbnRzCgkJbm9uQ29udGVudEhlaWdodCA9IHRoaXMudWlEaWFsb2cuY3NzKHsKCQkJCWhlaWdodDogImF1dG8iLAoJCQkJd2lkdGg6IG9wdGlvbnMud2lkdGgKCQkJfSkKCQkJLm91dGVySGVpZ2h0KCk7CgkJbWluQ29udGVudEhlaWdodCA9IE1hdGgubWF4KCAwLCBvcHRpb25zLm1pbkhlaWdodCAtIG5vbkNvbnRlbnRIZWlnaHQgKTsKCQltYXhDb250ZW50SGVpZ2h0ID0gdHlwZW9mIG9wdGlvbnMubWF4SGVpZ2h0ID09PSAibnVtYmVyIiA\\\/IHRoaXMuYWN0aXZlLnBhcmVudCgpIDogdGhpcy5lbGVtZW50OwoJCX0KCgkJc3RhcnRNZW51CgkJCS5maW5kKCAiLnVpLW1lbnUiICkKCQkJCS5oaWRlKCkKCQkJCS5hdHRyKCAiYXJpYS1oaWRkZW4iLCAidHJ1ZSIgKQoJCQkJLmF0dHIoICJhcmlhLWV4cGFuZGVkIiwgImZhbHNlIiApCgkJCS5lbmQoKQoJCQkuZmluZCggImEudWktc3RhdGUtYWN0aXZlIiApCgkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICk7Cgl9LAoKCWNvbGxhcHNlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIG5ld0l0ZW0gPSB0aGlzLmFjdGl2ZSAmJgoJCQl0aGlzLmFjdGl2ZS5wYXJlbnQoKS5jbG9zZXN0KCAiLnVpLW1lbnUtaXRlbSIsIHRoaXMuZWxlbWVudCApOwoJCWlmICggbmV3SXRlbSAmJiBuZXdJdGVtLmxlbmd0aCApIHsKCQkJdGhpcy5fY2xvc2UoKTsKCQkJdGhpcy5mb2N1cyggZXZlbnQsIG5ld0l0ZW0gKTsKCQl9Cgl9LAoKCWV4cGFuZDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBuZXdJdGVtID0gdGhpcy5hY3RpdmUgJiYKCQkJdGhpcy5hY3RpdmUKCQkJCS5jaGlsZHJlbiggIi51aS1tZW51ICIgKQoJCQkJLmNoaWxkcmVuKCAiLnVpLW1lbnUtaXRlbSIgKQoJCQkJLmZpcnN0KCk7CgoJCWlmICggbmV3SXRlbSAmJiBuZXdJdGVtLmxlbmd0aCApIHsKCQkJdGhpcy5fb3BlbiggbmV3SXRlbS5wYXJlbnQoKSApOwoKCQkJLy8gRGVsYXkgc28gRmlyZWZveCB3aWxsIG5vdCBoaWRlIGFjdGl2ZWRlc2NlbmRhbnQgY2hhbmdlIGluIGV4cGFuZGluZyBzdWJtZW51IGZyb20gQVQKCQkJdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7CgkJCQl0aGlzLmZvY3VzKCBldmVudCwgbmV3SXRlbSApOwoJCQl9KTsKCQl9Cgl9LAoKCW5leHQ6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl0aGlzLl9tb3ZlKCAibmV4dCIsICJmaXJzdCIsIGV2ZW50ICk7Cgl9LAoKCXByZXZpb3VzOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdGhpcy5fbW92ZSggInByZXYiLCAibGFzdCIsIGV2ZW50ICk7Cgl9LAoKCWlzRmlyc3RJdGVtOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5hY3RpdmUgJiYgIXRoaXMuYWN0aXZlLnByZXZBbGwoICIudWktbWVudS1pdGVtIiApLmxlbmd0aDsKCX0sCgoJaXNMYXN0SXRlbTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuYWN0aXZlICYmICF0aGlzLmFjdGl2ZS5uZXh0QWxsKCAiLnVpLW1lbnUtaXRlbSIgKS5sZW5ndGg7Cgl9LAoKCV9tb3ZlOiBmdW5jdGlvbiggZGlyZWN0aW9uLCBmaWx0ZXIsIGV2ZW50ICkgewoJCXZhciBuZXh0OwoJCWlmICggdGhpcy5hY3RpdmUgKSB7CgkJCWlmICggZGlyZWN0aW9uID09PSAiZmlyc3QiIHx8IGRpcmVjdGlvbiA9PT0gImxhc3QiICkgewoJCQkJbmV4dCA9IHRoaXMuYWN0aXZlCgkJCQkJWyBkaXJlY3Rpb24gPT09ICJmaXJzdCIgPyAicHJldkFsbCIgOiAibmV4dEFsbCIgXSggIi51aS1tZW51LWl0ZW0iICkKCQkJCQkuZXEoIC0xICk7CgkJCX0gZWxzZSB7CgkJCQluZXh0ID0gdGhpcy5hY3RpdmUKCQkJCQlbIGRpcmVjdGlvbiArICJBbGwiIF0oICIudWktbWVudS1pdGVtIiApCgkJCQkJLmVxKCAwICk7CgkJCX0KCQl9CgkJaWYgKCAhbmV4dCB8fCAhbmV4dC5sZW5ndGggfHwgIXRoaXMuYWN0aXZlICkgewoJCQluZXh0ID0gdGhpcy5hY3RpdmVNZW51LmNoaWxkcmVuKCAiLnVpLW1lbnUtaXRlbSIgKVsgZmlsdGVyIF0oKTsKCQl9CgoJCXRoaXMuZm9jdXMoIGV2ZW50LCBuZXh0ICk7Cgl9LAoKCW5leHRQYWdlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIGl0ZW0sIGJhc2UsIGhlaWdodDsKCgkJaWYgKCAhdGhpcy5hY3RpdmUgKSB7CgkJCXRoaXMubmV4dCggZXZlbnQgKTsKCQkJcmV0dXJuOwoJCX0KCQlpZiAoIHRoaXMuaXNMYXN0SXRlbSgpICkgewoJCQlyZXR1cm47CgkJfQoJCWlmICggdGhpcy5faGFzU2Nyb2xsKCkgKSB7CgkJCWJhc2UgPSB0aGlzLmFjdGl2ZS5vZmZzZXQoKS50b3A7CgkJCWhlaWdodCA9IHRoaXMuZWxlbWVudC5oZWlnaHQoKTsKCQkJdGhpcy5hY3RpdmUubmV4dEFsbCggIi51aS1tZW51LWl0ZW0iICkuZWFjaChmdW5jdGlvbigpIHsKCQkJCWl0ZW0gPSAkKCB0aGlzICk7CgkJCQlyZXR1cm4gaXRlbS5vZmZzZXQoKS50b3AgLSBiYXNlIC0gaGVpZ2h0IDwgMDsKCQkJfSk7CgoJCQl0aGlzLmZvY3VzKCBldmVudCwgaXRlbSApOwoJCX0gZWxzZSB7CgkJCXRoaXMuZm9jdXMoIGV2ZW50LCB0aGlzLmFjdGl2ZU1lbnUuY2hpbGRyZW4oICIudWktbWVudS1pdGVtIiApCgkJCQlbICF0aGlzLmFjdGl2ZSA\\/ICIgdWktc2xpZGVyLXJhbmdlLSIgKyBvcHRpb25zLnJhbmdlIDogIiIgKSApOwoJCX0gZWxzZSB7CgkJCXRoaXMucmFuZ2UgPSAkKFtdKTsKCQl9Cgl9LAoKCV9zZXR1cEV2ZW50czogZnVuY3Rpb24oKSB7CgkJdmFyIGVsZW1lbnRzID0gdGhpcy5oYW5kbGVzLmFkZCggdGhpcy5yYW5nZSApLmZpbHRlciggImEiICk7CgkJdGhpcy5fb2ZmKCBlbGVtZW50cyApOwoJCXRoaXMuX29uKCBlbGVtZW50cywgdGhpcy5faGFuZGxlRXZlbnRzICk7CgkJdGhpcy5faG92ZXJhYmxlKCBlbGVtZW50cyApOwoJCXRoaXMuX2ZvY3VzYWJsZSggZWxlbWVudHMgKTsKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCXRoaXMuaGFuZGxlcy5yZW1vdmUoKTsKCQl0aGlzLnJhbmdlLnJlbW92ZSgpOwoKCQl0aGlzLmVsZW1lbnQKCQkJLnJlbW92ZUNsYXNzKCAidWktc2xpZGVyIiArCgkJCQkiIHVpLXNsaWRlci1ob3Jpem9udGFsIiArCgkJCQkiIHVpLXNsaWRlci12ZXJ0aWNhbCIgKwoJCQkJIiB1aS13aWRnZXQiICsKCQkJCSIgdWktd2lkZ2V0LWNvbnRlbnQiICsKCQkJCSIgdWktY29ybmVyLWFsbCIgKTsKCgkJdGhpcy5fbW91c2VEZXN0cm95KCk7Cgl9LAoKCV9tb3VzZUNhcHR1cmU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgcG9zaXRpb24sIG5vcm1WYWx1ZSwgZGlzdGFuY2UsIGNsb3Nlc3RIYW5kbGUsIGluZGV4LCBhbGxvd2VkLCBvZmZzZXQsIG1vdXNlT3ZlckhhbmRsZSwKCQkJdGhhdCA9IHRoaXMsCgkJCW8gPSB0aGlzLm9wdGlvbnM7CgoJCWlmICggby5kaXNhYmxlZCApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJdGhpcy5lbGVtZW50U2l6ZSA9IHsKCQkJd2lkdGg6IHRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCksCgkJCWhlaWdodDogdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCkKCQl9OwoJCXRoaXMuZWxlbWVudE9mZnNldCA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKTsKCgkJcG9zaXRpb24gPSB7IHg6IGV2ZW50LnBhZ2VYLCB5OiBldmVudC5wYWdlWSB9OwoJCW5vcm1WYWx1ZSA9IHRoaXMuX25vcm1WYWx1ZUZyb21Nb3VzZSggcG9zaXRpb24gKTsKCQlkaXN0YW5jZSA9IHRoaXMuX3ZhbHVlTWF4KCkgLSB0aGlzLl92YWx1ZU1pbigpICsgMTsKCQl0aGlzLmhhbmRsZXMuZWFjaChmdW5jdGlvbiggaSApIHsKCQkJdmFyIHRoaXNEaXN0YW5jZSA9IE1hdGguYWJzKCBub3JtVmFsdWUgLSB0aGF0LnZhbHVlcyhpKSApOwoJCQlpZiAoKCBkaXN0YW5jZSA+IHRoaXNEaXN0YW5jZSApIHx8CgkJCQkoIGRpc3RhbmNlID09PSB0aGlzRGlzdGFuY2UgJiYKCQkJCQkoaSA9PT0gdGhhdC5fbGFzdENoYW5nZWRWYWx1ZSB8fCB0aGF0LnZhbHVlcyhpKSA9PT0gby5taW4gKSkpIHsKCQkJCWRpc3RhbmNlID0gdGhpc0Rpc3RhbmNlOwoJCQkJY2xvc2VzdEhhbmRsZSA9ICQoIHRoaXMgKTsKCQkJCWluZGV4ID0gaTsKCQkJfQoJCX0pOwoKCQlhbGxvd2VkID0gdGhpcy5fc3RhcnQoIGV2ZW50LCBpbmRleCApOwoJCWlmICggYWxsb3dlZCA9PT0gZmFsc2UgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJdGhpcy5fbW91c2VTbGlkaW5nID0gdHJ1ZTsKCgkJdGhpcy5faGFuZGxlSW5kZXggPSBpbmRleDsKCgkJY2xvc2VzdEhhbmRsZQoJCQkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICkKCQkJLmZvY3VzKCk7CgoJCW9mZnNldCA9IGNsb3Nlc3RIYW5kbGUub2Zmc2V0KCk7CgkJbW91c2VPdmVySGFuZGxlID0gISQoIGV2ZW50LnRhcmdldCApLnBhcmVudHMoKS5hZGRCYWNrKCkuaXMoICIudWktc2xpZGVyLWhhbmRsZSIgKTsKCQl0aGlzLl9jbGlja09mZnNldCA9IG1vdXNlT3ZlckhhbmRsZSA\/IHsgbGVmdDogMCwgdG9wOiAwIH0gOiB7CgkJCWxlZnQ6IGV2ZW50LnBhZ2VYIC0gb2Zmc2V0LmxlZnQgLSAoIGNsb3Nlc3RIYW5kbGUud2lkdGgoKSAvIDIgKSwKCQkJdG9wOiBldmVudC5wYWdlWSAtIG9mZnNldC50b3AgLQoJCQkJKCBjbG9zZXN0SGFuZGxlLmhlaWdodCgpIC8gMiApIC0KCQkJCSggcGFyc2VJbnQoIGNsb3Nlc3RIYW5kbGUuY3NzKCJib3JkZXJUb3BXaWR0aCIpLCAxMCApIHx8IDAgKSAtCgkJCQkoIHBhcnNlSW50KCBjbG9zZXN0SGFuZGxlLmNzcygiYm9yZGVyQm90dG9tV2lkdGgiKSwgMTAgKSB8fCAwKSArCgkJCQkoIHBhcnNlSW50KCBjbG9zZXN0SGFuZGxlLmNzcygibWFyZ2luVG9wIiksIDEwICkgfHwgMCkKCQl9OwoKCQlpZiAoICF0aGlzLmhhbmRsZXMuaGFzQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKSApIHsKCQkJdGhpcy5fc2xpZGUoIGV2ZW50LCBpbmRleCwgbm9ybVZhbHVlICk7CgkJfQoJCXRoaXMuX2FuaW1hdGVPZmYgPSB0cnVlOwoJCXJldHVybiB0cnVlOwoJfSwKCglfbW91c2VTdGFydDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRydWU7Cgl9LAoKCV9tb3VzZURyYWc6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgcG9zaXRpb24gPSB7IHg6IGV2ZW50LnBhZ2VYLCB5OiBldmVudC5wYWdlWSB9LAoJCQlub3JtVmFsdWUgPSB0aGlzLl9ub3JtVmFsdWVGcm9tTW91c2UoIHBvc2l0aW9uICk7CgoJCXRoaXMuX3NsaWRlKCBldmVudCwgdGhpcy5faGFuZGxlSW5kZXgsIG5vcm1WYWx1ZSApOwoKCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCV9tb3VzZVN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl0aGlzLmhhbmRsZXMucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICk7CgkJdGhpcy5fbW91c2VTbGlkaW5nID0gZmFsc2U7CgoJCXRoaXMuX3N0b3AoIGV2ZW50LCB0aGlzLl9oYW5kbGVJbmRleCApOwoJCXRoaXMuX2NoYW5nZSggZXZlbnQsIHRoaXMuX2hhbmRsZUluZGV4ICk7CgoJCXRoaXMuX2hhbmRsZUluZGV4ID0gbnVsbDsKCQl0aGlzLl9jbGlja09mZnNldCA9IG51bGw7CgkJdGhpcy5fYW5pbWF0ZU9mZiA9IGZhbHNlOwoKCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCV9kZXRlY3RPcmllbnRhdGlvbjogZnVuY3Rpb24oKSB7CgkJdGhpcy5vcmllbnRhdGlvbiA9ICggdGhpcy5vcHRpb25zLm9yaWVudGF0aW9uID09PSAidmVydGljYWwiICkgPyAidmVydGljYWwiIDogImhvcml6b250YWwiOwoJfSwKCglfbm9ybVZhbHVlRnJvbU1vdXNlOiBmdW5jdGlvbiggcG9zaXRpb24gKSB7CgkJdmFyIHBpeGVsVG90YWwsCgkJCXBpeGVsTW91c2UsCgkJCXBlcmNlbnRNb3VzZSwKCQkJdmFsdWVUb3RhbCwKCQkJdmFsdWVNb3VzZTsKCgkJaWYgKCB0aGlzLm9yaWVudGF0aW9uID09PSAiaG9yaXpvbnRhbCIgKSB7CgkJCXBpeGVsVG90YWwgPSB0aGlzLmVsZW1lbnRTaXplLndpZHRoOwoJCQlwaXhlbE1vdXNlID0gcG9zaXRpb24ueCAtIHRoaXMuZWxlbWVudE9mZnNldC5sZWZ0IC0gKCB0aGlzLl9jbGlja09mZnNldCA\\/ICJhbmltYXRlIiA6ICJjc3MiIF0oIHsgbGVmdDogdmFsUGVyY2VudCArICIlIiB9LCBvLmFuaW1hdGUgKTsKCQkJCQkJfQoJCQkJCQlpZiAoIGkgPT09IDEgKSB7CgkJCQkJCQl0aGF0LnJhbmdlWyBhbmltYXRlID8gImFuaW1hdGUiIDogImNzcyIgXSggeyB3aWR0aDogKCB2YWxQZXJjZW50IC0gbGFzdFZhbFBlcmNlbnQgKSArICIlIiB9LCB7IHF1ZXVlOiBmYWxzZSwgZHVyYXRpb246IG8uYW5pbWF0ZSB9ICk7CgkJCQkJCX0KCQkJCQl9IGVsc2UgewoJCQkJCQlpZiAoIGkgPT09IDAgKSB7CgkJCQkJCQl0aGF0LnJhbmdlLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA\\/IDEgOiAtMSwgZXZlbnQgKTsKCQl9LAoJCSJtb3VzZXVwIC51aS1zcGlubmVyLWJ1dHRvbiI6ICJfc3RvcCIsCgkJIm1vdXNlZW50ZXIgLnVpLXNwaW5uZXItYnV0dG9uIjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkvLyBidXR0b24gd2lsbCBhZGQgdWktc3RhdGUtYWN0aXZlIGlmIG1vdXNlIHdhcyBkb3duIHdoaWxlIG1vdXNlbGVhdmUgYW5kIGtlcHQgZG93bgoJCQlpZiAoICEkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuaGFzQ2xhc3MoICJ1aS1zdGF0ZS1hY3RpdmUiICkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCWlmICggdGhpcy5fc3RhcnQoIGV2ZW50ICkgPT09IGZhbHNlICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJCXRoaXMuX3JlcGVhdCggbnVsbCwgJCggZXZlbnQuY3VycmVudFRhcmdldCApLmhhc0NsYXNzKCAidWktc3Bpbm5lci11cCIgKSA\/IDEgOiAtMSwgZXZlbnQgKTsKCQl9LAoJCS8vIFRPRE86IGRvIHdlIHJlYWxseSB3YW50IHRvIGNvbnNpZGVyIHRoaXMgYSBzdG9wPwoJCS8vIHNob3VsZG4ndCB3ZSBqdXN0IHN0b3AgdGhlIHJlcGVhdGVyIGFuZCB3YWl0IHVudGlsIG1vdXNldXAgYmVmb3JlCgkJLy8gd2UgdHJpZ2dlciB0aGUgc3RvcCBldmVudD8KCQkibW91c2VsZWF2ZSAudWktc3Bpbm5lci1idXR0b24iOiAiX3N0b3AiCgl9LAoKCV9kcmF3OiBmdW5jdGlvbigpIHsKCQl2YXIgdWlTcGlubmVyID0gdGhpcy51aVNwaW5uZXIgPSB0aGlzLmVsZW1lbnQKCQkJLmFkZENsYXNzKCAidWktc3Bpbm5lci1pbnB1dCIgKQoJCQkuYXR0ciggImF1dG9jb21wbGV0ZSIsICJvZmYiICkKCQkJLndyYXAoIHRoaXMuX3VpU3Bpbm5lckh0bWwoKSApCgkJCS5wYXJlbnQoKQoJCQkJLy8gYWRkIGJ1dHRvbnMKCQkJCS5hcHBlbmQoIHRoaXMuX2J1dHRvbkh0bWwoKSApOwoKCQl0aGlzLmVsZW1lbnQuYXR0ciggInJvbGUiLCAic3BpbmJ1dHRvbiIgKTsKCgkJLy8gYnV0dG9uIGJpbmRpbmdzCgkJdGhpcy5idXR0b25zID0gdWlTcGlubmVyLmZpbmQoICIudWktc3Bpbm5lci1idXR0b24iICkKCQkJLmF0dHIoICJ0YWJJbmRleCIsIC0xICkKCQkJLmJ1dHRvbigpCgkJCS5yZW1vdmVDbGFzcyggInVpLWNvcm5lci1hbGwiICk7CgoJCS8vIElFIDYgZG9lc24ndCB1bmRlcnN0YW5kIGhlaWdodDogNTAlIGZvciB0aGUgYnV0dG9ucwoJCS8vIHVubGVzcyB0aGUgd3JhcHBlciBoYXMgYW4gZXhwbGljaXQgaGVpZ2h0CgkJaWYgKCB0aGlzLmJ1dHRvbnMuaGVpZ2h0KCkgPiBNYXRoLmNlaWwoIHVpU3Bpbm5lci5oZWlnaHQoKSAqIDAuNSApICYmCgkJCQl1aVNwaW5uZXIuaGVpZ2h0KCkgPiAwICkgewoJCQl1aVNwaW5uZXIuaGVpZ2h0KCB1aVNwaW5uZXIuaGVpZ2h0KCkgKTsKCQl9CgoJCS8vIGRpc2FibGUgc3Bpbm5lciBpZiBlbGVtZW50IHdhcyBhbHJlYWR5IGRpc2FibGVkCgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCXRoaXMuZGlzYWJsZSgpOwoJCX0KCX0sCgoJX2tleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJa2V5Q29kZSA9ICQudWkua2V5Q29kZTsKCgkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQljYXNlIGtleUNvZGUuVVA6CgkJCXRoaXMuX3JlcGVhdCggbnVsbCwgMSwgZXZlbnQgKTsKCQkJcmV0dXJuIHRydWU7CgkJY2FzZSBrZXlDb2RlLkRPV046CgkJCXRoaXMuX3JlcGVhdCggbnVsbCwgLTEsIGV2ZW50ICk7CgkJCXJldHVybiB0cnVlOwoJCWNhc2Uga2V5Q29kZS5QQUdFX1VQOgoJCQl0aGlzLl9yZXBlYXQoIG51bGwsIG9wdGlvbnMucGFnZSwgZXZlbnQgKTsKCQkJcmV0dXJuIHRydWU7CgkJY2FzZSBrZXlDb2RlLlBBR0VfRE9XTjoKCQkJdGhpcy5fcmVwZWF0KCBudWxsLCAtb3B0aW9ucy5wYWdlLCBldmVudCApOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgoJCXJldHVybiBmYWxzZTsKCX0sCgoJX3VpU3Bpbm5lckh0bWw6IGZ1bmN0aW9uKCkgewoJCXJldHVybiAiPHNwYW4gY2xhc3M9J3VpLXNwaW5uZXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwnPjwvc3Bhbj4iOwoJfSwKCglfYnV0dG9uSHRtbDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuICIiICsKCQkJIjxhIGNsYXNzPSd1aS1zcGlubmVyLWJ1dHRvbiB1aS1zcGlubmVyLXVwIHVpLWNvcm5lci10cic+IiArCgkJCQkiPHNwYW4gY2xhc3M9J3VpLWljb24gIiArIHRoaXMub3B0aW9ucy5pY29ucy51cCArICInPiYjOTY1MDs8L3NwYW4+IiArCgkJCSI8L2E+IiArCgkJCSI8YSBjbGFzcz0ndWktc3Bpbm5lci1idXR0b24gdWktc3Bpbm5lci1kb3duIHVpLWNvcm5lci1icic+IiArCgkJCQkiPHNwYW4gY2xhc3M9J3VpLWljb24gIiArIHRoaXMub3B0aW9ucy5pY29ucy5kb3duICsgIic+JiM5NjYwOzwvc3Bhbj4iICsKCQkJIjwvYT4iOwoJfSwKCglfc3RhcnQ6IGZ1bmN0aW9uKCBldmVudCApIHsKCQlpZiAoICF0aGlzLnNwaW5uaW5nICYmIHRoaXMuX3RyaWdnZXIoICJzdGFydCIsIGV2ZW50ICkgPT09IGZhbHNlICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlpZiAoICF0aGlzLmNvdW50ZXIgKSB7CgkJCXRoaXMuY291bnRlciA9IDE7CgkJfQoJCXRoaXMuc3Bpbm5pbmcgPSB0cnVlOwoJCXJldHVybiB0cnVlOwoJfSwKCglfcmVwZWF0OiBmdW5jdGlvbiggaSwgc3RlcHMsIGV2ZW50ICkgewoJCWkgPSBpIHx8IDUwMDsKCgkJY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7CgkJdGhpcy50aW1lciA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkgewoJCQl0aGlzLl9yZXBlYXQoIDQwLCBzdGVwcywgZXZlbnQgKTsKCQl9LCBpICk7CgoJCXRoaXMuX3NwaW4oIHN0ZXBzICogdGhpcy5vcHRpb25zLnN0ZXAsIGV2ZW50ICk7Cgl9LAoKCV9zcGluOiBmdW5jdGlvbiggc3RlcCwgZXZlbnQgKSB7CgkJdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpIHx8IDA7CgoJCWlmICggIXRoaXMuY291bnRlciApIHsKCQkJdGhpcy5jb3VudGVyID0gMTsKCQl9CgoJCXZhbHVlID0gdGhpcy5fYWRqdXN0VmFsdWUoIHZhbHVlICsgc3RlcCAqIHRoaXMuX2luY3JlbWVudCggdGhpcy5jb3VudGVyICkgKTsKCgkJaWYgKCAhdGhpcy5zcGlubmluZyB8fCB0aGlzLl90cmlnZ2VyKCAic3BpbiIsIGV2ZW50LCB7IHZhbHVlOiB2YWx1ZSB9ICkgIT09IGZhbHNlKSB7CgkJCXRoaXMuX3ZhbHVlKCB2YWx1ZSApOwoJCQl0aGlzLmNvdW50ZXIrKzsKCQl9Cgl9LAoKCV9pbmNyZW1lbnQ6IGZ1bmN0aW9uKCBpICkgewoJCXZhciBpbmNyZW1lbnRhbCA9IHRoaXMub3B0aW9ucy5pbmNyZW1lbnRhbDsKCgkJaWYgKCBpbmNyZW1lbnRhbCApIHsKCQkJcmV0dXJuICQuaXNGdW5jdGlvbiggaW5jcmVtZW50YWwgKSA\/CgkJCQlpbmNyZW1lbnRhbCggaSApIDoKCQkJCU1hdGguZmxvb3IoIGkqaSppLzUwMDAwIC0gaSppLzUwMCArIDE3KmkvMjAwICsgMSApOwoJCX0KCgkJcmV0dXJuIDE7Cgl9LAoKCV9wcmVjaXNpb246IGZ1bmN0aW9uKCkgewoJCXZhciBwcmVjaXNpb24gPSB0aGlzLl9wcmVjaXNpb25PZiggdGhpcy5vcHRpb25zLnN0ZXAgKTsKCQlpZiAoIHRoaXMub3B0aW9ucy5taW4gIT09IG51bGwgKSB7CgkJCXByZWNpc2lvbiA9IE1hdGgubWF4KCBwcmVjaXNpb24sIHRoaXMuX3ByZWNpc2lvbk9mKCB0aGlzLm9wdGlvbnMubWluICkgKTsKCQl9CgkJcmV0dXJuIHByZWNpc2lvbjsKCX0sCgoJX3ByZWNpc2lvbk9mOiBmdW5jdGlvbiggbnVtICkgewoJCXZhciBzdHIgPSBudW0udG9TdHJpbmcoKSwKCQkJZGVjaW1hbCA9IHN0ci5pbmRleE9mKCAiLiIgKTsKCQlyZXR1cm4gZGVjaW1hbCA9PT0gLTEgPyAwIDogc3RyLmxlbmd0aCAtIGRlY2ltYWwgLSAxOwoJfSwKCglfYWRqdXN0VmFsdWU6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl2YXIgYmFzZSwgYWJvdmVNaW4sCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgoJCS8vIG1ha2Ugc3VyZSB3ZSdyZSBhdCBhIHZhbGlkIHN0ZXAKCQkvLyAtIGZpbmQgb3V0IHdoZXJlIHdlIGFyZSByZWxhdGl2ZSB0byB0aGUgYmFzZSAobWluIG9yIDApCgkJYmFzZSA9IG9wdGlvbnMubWluICE9PSBudWxsID8gb3B0aW9ucy5taW4gOiAwOwoJCWFib3ZlTWluID0gdmFsdWUgLSBiYXNlOwoJCS8vIC0gcm91bmQgdG8gdGhlIG5lYXJlc3Qgc3RlcAoJCWFib3ZlTWluID0gTWF0aC5yb3VuZChhYm92ZU1pbiAvIG9wdGlvbnMuc3RlcCkgKiBvcHRpb25zLnN0ZXA7CgkJLy8gLSByb3VuZGluZyBpcyBiYXNlZCBvbiAwLCBzbyBhZGp1c3QgYmFjayB0byBvdXIgYmFzZQoJCXZhbHVlID0gYmFzZSArIGFib3ZlTWluOwoKCQkvLyBmaXggcHJlY2lzaW9uIGZyb20gYmFkIEpTIGZsb2F0aW5nIHBvaW50IG1hdGgKCQl2YWx1ZSA9IHBhcnNlRmxvYXQoIHZhbHVlLnRvRml4ZWQoIHRoaXMuX3ByZWNpc2lvbigpICkgKTsKCgkJLy8gY2xhbXAgdGhlIHZhbHVlCgkJaWYgKCBvcHRpb25zLm1heCAhPT0gbnVsbCAmJiB2YWx1ZSA+IG9wdGlvbnMubWF4KSB7CgkJCXJldHVybiBvcHRpb25zLm1heDsKCQl9CgkJaWYgKCBvcHRpb25zLm1pbiAhPT0gbnVsbCAmJiB2YWx1ZSA8IG9wdGlvbnMubWluICkgewoJCQlyZXR1cm4gb3B0aW9ucy5taW47CgkJfQoKCQlyZXR1cm4gdmFsdWU7Cgl9LAoKCV9zdG9wOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJaWYgKCAhdGhpcy5zcGlubmluZyApIHsKCQkJcmV0dXJuOwoJCX0KCgkJY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7CgkJY2xlYXJUaW1lb3V0KCB0aGlzLm1vdXNld2hlZWxUaW1lciApOwoJCXRoaXMuY291bnRlciA9IDA7CgkJdGhpcy5zcGlubmluZyA9IGZhbHNlOwoJCXRoaXMuX3RyaWdnZXIoICJzdG9wIiwgZXZlbnQgKTsKCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJaWYgKCBrZXkgPT09ICJjdWx0dXJlIiB8fCBrZXkgPT09ICJudW1iZXJGb3JtYXQiICkgewoJCQl2YXIgcHJldlZhbHVlID0gdGhpcy5fcGFyc2UoIHRoaXMuZWxlbWVudC52YWwoKSApOwoJCQl0aGlzLm9wdGlvbnNbIGtleSBdID0gdmFsdWU7CgkJCXRoaXMuZWxlbWVudC52YWwoIHRoaXMuX2Zvcm1hdCggcHJldlZhbHVlICkgKTsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCBrZXkgPT09ICJtYXgiIHx8IGtleSA9PT0gIm1pbiIgfHwga2V5ID09PSAic3RlcCIgKSB7CgkJCWlmICggdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIiApIHsKCQkJCXZhbHVlID0gdGhpcy5fcGFyc2UoIHZhbHVlICk7CgkJCX0KCQl9CgkJaWYgKCBrZXkgPT09ICJpY29ucyIgKSB7CgkJCXRoaXMuYnV0dG9ucy5maXJzdCgpLmZpbmQoICIudWktaWNvbiIgKQoJCQkJLnJlbW92ZUNsYXNzKCB0aGlzLm9wdGlvbnMuaWNvbnMudXAgKQoJCQkJLmFkZENsYXNzKCB2YWx1ZS51cCApOwoJCQl0aGlzLmJ1dHRvbnMubGFzdCgpLmZpbmQoICIudWktaWNvbiIgKQoJCQkJLnJlbW92ZUNsYXNzKCB0aGlzLm9wdGlvbnMuaWNvbnMuZG93biApCgkJCQkuYWRkQ2xhc3MoIHZhbHVlLmRvd24gKTsKCQl9CgoJCXRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7CgoJCWlmICgga2V5ID09PSAiZGlzYWJsZWQiICkgewoJCQlpZiAoIHZhbHVlICkgewoJCQkJdGhpcy5lbGVtZW50LnByb3AoICJkaXNhYmxlZCIsIHRydWUgKTsKCQkJCXRoaXMuYnV0dG9ucy5idXR0b24oICJkaXNhYmxlIiApOwoJCQl9IGVsc2UgewoJCQkJdGhpcy5lbGVtZW50LnByb3AoICJkaXNhYmxlZCIsIGZhbHNlICk7CgkJCQl0aGlzLmJ1dHRvbnMuYnV0dG9uKCAiZW5hYmxlIiApOwoJCQl9CgkJfQoJfSwKCglfc2V0T3B0aW9uczogbW9kaWZpZXIoZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJdGhpcy5fc3VwZXIoIG9wdGlvbnMgKTsKCQl0aGlzLl92YWx1ZSggdGhpcy5lbGVtZW50LnZhbCgpICk7Cgl9KSwKCglfcGFyc2U6IGZ1bmN0aW9uKCB2YWwgKSB7CgkJaWYgKCB0eXBlb2YgdmFsID09PSAic3RyaW5nIiAmJiB2YWwgIT09ICIiICkgewoJCQl2YWwgPSB3aW5kb3cuR2xvYmFsaXplICYmIHRoaXMub3B0aW9ucy5udW1iZXJGb3JtYXQgPwoJCQkJR2xvYmFsaXplLnBhcnNlRmxvYXQoIHZhbCwgMTAsIHRoaXMub3B0aW9ucy5jdWx0dXJlICkgOiArdmFsOwoJCX0KCQlyZXR1cm4gdmFsID09PSAiIiB8fCBpc05hTiggdmFsICkgPyBudWxsIDogdmFsOwoJfSwKCglfZm9ybWF0OiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJaWYgKCB2YWx1ZSA9PT0gIiIgKSB7CgkJCXJldHVybiAiIjsKCQl9CgkJcmV0dXJuIHdpbmRvdy5HbG9iYWxpemUgJiYgdGhpcy5vcHRpb25zLm51bWJlckZvcm1hdCA\/CgkJCUdsb2JhbGl6ZS5mb3JtYXQoIHZhbHVlLCB0aGlzLm9wdGlvbnMubnVtYmVyRm9ybWF0LCB0aGlzLm9wdGlvbnMuY3VsdHVyZSApIDoKCQkJdmFsdWU7Cgl9LAoKCV9yZWZyZXNoOiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQuYXR0cih7CgkJCSJhcmlhLXZhbHVlbWluIjogdGhpcy5vcHRpb25zLm1pbiwKCQkJImFyaWEtdmFsdWVtYXgiOiB0aGlzLm9wdGlvbnMubWF4LAoJCQkvLyBUT0RPOiB3aGF0IHNob3VsZCB3ZSBkbyB3aXRoIHZhbHVlcyB0aGF0IGNhbid0IGJlIHBhcnNlZD8KCQkJImFyaWEtdmFsdWVub3ciOiB0aGlzLl9wYXJzZSggdGhpcy5lbGVtZW50LnZhbCgpICkKCQl9KTsKCX0sCgoJLy8gdXBkYXRlIHRoZSB2YWx1ZSB3aXRob3V0IHRyaWdnZXJpbmcgY2hhbmdlCglfdmFsdWU6IGZ1bmN0aW9uKCB2YWx1ZSwgYWxsb3dBbnkgKSB7CgkJdmFyIHBhcnNlZDsKCQlpZiAoIHZhbHVlICE9PSAiIiApIHsKCQkJcGFyc2VkID0gdGhpcy5fcGFyc2UoIHZhbHVlICk7CgkJCWlmICggcGFyc2VkICE9PSBudWxsICkgewoJCQkJaWYgKCAhYWxsb3dBbnkgKSB7CgkJCQkJcGFyc2VkID0gdGhpcy5fYWRqdXN0VmFsdWUoIHBhcnNlZCApOwoJCQkJfQoJCQkJdmFsdWUgPSB0aGlzLl9mb3JtYXQoIHBhcnNlZCApOwoJCQl9CgkJfQoJCXRoaXMuZWxlbWVudC52YWwoIHZhbHVlICk7CgkJdGhpcy5fcmVmcmVzaCgpOwoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdGhpcy5lbGVtZW50CgkJCS5yZW1vdmVDbGFzcyggInVpLXNwaW5uZXItaW5wdXQiICkKCQkJLnByb3AoICJkaXNhYmxlZCIsIGZhbHNlICkKCQkJLnJlbW92ZUF0dHIoICJhdXRvY29tcGxldGUiICkKCQkJLnJlbW92ZUF0dHIoICJyb2xlIiApCgkJCS5yZW1vdmVBdHRyKCAiYXJpYS12YWx1ZW1pbiIgKQoJCQkucmVtb3ZlQXR0ciggImFyaWEtdmFsdWVtYXgiICkKCQkJLnJlbW92ZUF0dHIoICJhcmlhLXZhbHVlbm93IiApOwoJCXRoaXMudWlTcGlubmVyLnJlcGxhY2VXaXRoKCB0aGlzLmVsZW1lbnQgKTsKCX0sCgoJc3RlcFVwOiBtb2RpZmllcihmdW5jdGlvbiggc3RlcHMgKSB7CgkJdGhpcy5fc3RlcFVwKCBzdGVwcyApOwoJfSksCglfc3RlcFVwOiBmdW5jdGlvbiggc3RlcHMgKSB7CgkJaWYgKCB0aGlzLl9zdGFydCgpICkgewoJCQl0aGlzLl9zcGluKCAoc3RlcHMgfHwgMSkgKiB0aGlzLm9wdGlvbnMuc3RlcCApOwoJCQl0aGlzLl9zdG9wKCk7CgkJfQoJfSwKCglzdGVwRG93bjogbW9kaWZpZXIoZnVuY3Rpb24oIHN0ZXBzICkgewoJCXRoaXMuX3N0ZXBEb3duKCBzdGVwcyApOwoJfSksCglfc3RlcERvd246IGZ1bmN0aW9uKCBzdGVwcyApIHsKCQlpZiAoIHRoaXMuX3N0YXJ0KCkgKSB7CgkJCXRoaXMuX3NwaW4oIChzdGVwcyB8fCAxKSAqIC10aGlzLm9wdGlvbnMuc3RlcCApOwoJCQl0aGlzLl9zdG9wKCk7CgkJfQoJfSwKCglwYWdlVXA6IG1vZGlmaWVyKGZ1bmN0aW9uKCBwYWdlcyApIHsKCQl0aGlzLl9zdGVwVXAoIChwYWdlcyB8fCAxKSAqIHRoaXMub3B0aW9ucy5wYWdlICk7Cgl9KSwKCglwYWdlRG93bjogbW9kaWZpZXIoZnVuY3Rpb24oIHBhZ2VzICkgewoJCXRoaXMuX3N0ZXBEb3duKCAocGFnZXMgfHwgMSkgKiB0aGlzLm9wdGlvbnMucGFnZSApOwoJfSksCgoJdmFsdWU6IGZ1bmN0aW9uKCBuZXdWYWwgKSB7CgkJaWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHsKCQkJcmV0dXJuIHRoaXMuX3BhcnNlKCB0aGlzLmVsZW1lbnQudmFsKCkgKTsKCQl9CgkJbW9kaWZpZXIoIHRoaXMuX3ZhbHVlICkuY2FsbCggdGhpcywgbmV3VmFsICk7Cgl9LAoKCXdpZGdldDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMudWlTcGlubmVyOwoJfQp9KTsKCn0oIGpRdWVyeSApICk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIHRhYklkID0gMCwKCXJoYXNoID0gLyMuKiQvOwoKZnVuY3Rpb24gZ2V0TmV4dFRhYklkKCkgewoJcmV0dXJuICsrdGFiSWQ7Cn0KCmZ1bmN0aW9uIGlzTG9jYWwoIGFuY2hvciApIHsKCXJldHVybiBhbmNob3IuaGFzaC5sZW5ndGggPiAxICYmCgkJZGVjb2RlVVJJQ29tcG9uZW50KCBhbmNob3IuaHJlZi5yZXBsYWNlKCByaGFzaCwgIiIgKSApID09PQoJCQlkZWNvZGVVUklDb21wb25lbnQoIGxvY2F0aW9uLmhyZWYucmVwbGFjZSggcmhhc2gsICIiICkgKTsKfQoKJC53aWRnZXQoICJ1aS50YWJzIiwgewoJdmVyc2lvbjogIjEuMTAuMyIsCglkZWxheTogMzAwLAoJb3B0aW9uczogewoJCWFjdGl2ZTogbnVsbCwKCQljb2xsYXBzaWJsZTogZmFsc2UsCgkJZXZlbnQ6ICJjbGljayIsCgkJaGVpZ2h0U3R5bGU6ICJjb250ZW50IiwKCQloaWRlOiBudWxsLAoJCXNob3c6IG51bGwsCgoJCS8vIGNhbGxiYWNrcwoJCWFjdGl2YXRlOiBudWxsLAoJCWJlZm9yZUFjdGl2YXRlOiBudWxsLAoJCWJlZm9yZUxvYWQ6IG51bGwsCgkJbG9hZDogbnVsbAoJfSwKCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgoJCXRoaXMucnVubmluZyA9IGZhbHNlOwoKCQl0aGlzLmVsZW1lbnQKCQkJLmFkZENsYXNzKCAidWktdGFicyB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWFsbCIgKQoJCQkudG9nZ2xlQ2xhc3MoICJ1aS10YWJzLWNvbGxhcHNpYmxlIiwgb3B0aW9ucy5jb2xsYXBzaWJsZSApCgkJCS8vIFByZXZlbnQgdXNlcnMgZnJvbSBmb2N1c2luZyBkaXNhYmxlZCB0YWJzIHZpYSBjbGljawoJCQkuZGVsZWdhdGUoICIudWktdGFicy1uYXYgPiBsaSIsICJtb3VzZWRvd24iICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJaWYgKCAkKCB0aGlzICkuaXMoICIudWktc3RhdGUtZGlzYWJsZWQiICkgKSB7CgkJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCX0KCQkJfSkKCQkJLy8gc3VwcG9ydDogSUUgPDkKCQkJLy8gUHJldmVudGluZyB0aGUgZGVmYXVsdCBhY3Rpb24gaW4gbW91c2Vkb3duIGRvZXNuJ3QgcHJldmVudCBJRQoJCQkvLyBmcm9tIGZvY3VzaW5nIHRoZSBlbGVtZW50LCBzbyBpZiB0aGUgYW5jaG9yIGdldHMgZm9jdXNlZCwgYmx1ci4KCQkJLy8gV2UgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBmb2N1c2luZyB0aGUgcHJldmlvdXNseSBmb2N1c2VkCgkJCS8vIGVsZW1lbnQgc2luY2UgY2xpY2tpbmcgb24gYSBub24tZm9jdXNhYmxlIGVsZW1lbnQgc2hvdWxkIGZvY3VzCgkJCS8vIHRoZSBib2R5IGFueXdheS4KCQkJLmRlbGVnYXRlKCAiLnVpLXRhYnMtYW5jaG9yIiwgImZvY3VzIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCkgewoJCQkJaWYgKCAkKCB0aGlzICkuY2xvc2VzdCggImxpIiApLmlzKCAiLnVpLXN0YXRlLWRpc2FibGVkIiApICkgewoJCQkJCXRoaXMuYmx1cigpOwoJCQkJfQoJCQl9KTsKCgkJdGhpcy5fcHJvY2Vzc1RhYnMoKTsKCQlvcHRpb25zLmFjdGl2ZSA9IHRoaXMuX2luaXRpYWxBY3RpdmUoKTsKCgkJLy8gVGFrZSBkaXNhYmxpbmcgdGFicyB2aWEgY2xhc3MgYXR0cmlidXRlIGZyb20gSFRNTAoJCS8vIGludG8gYWNjb3VudCBhbmQgdXBkYXRlIG9wdGlvbiBwcm9wZXJseS4KCQlpZiAoICQuaXNBcnJheSggb3B0aW9ucy5kaXNhYmxlZCApICkgewoJCQlvcHRpb25zLmRpc2FibGVkID0gJC51bmlxdWUoIG9wdGlvbnMuZGlzYWJsZWQuY29uY2F0KAoJCQkJJC5tYXAoIHRoaXMudGFicy5maWx0ZXIoICIudWktc3RhdGUtZGlzYWJsZWQiICksIGZ1bmN0aW9uKCBsaSApIHsKCQkJCQlyZXR1cm4gdGhhdC50YWJzLmluZGV4KCBsaSApOwoJCQkJfSkKCQkJKSApLnNvcnQoKTsKCQl9CgoJCS8vIGNoZWNrIGZvciBsZW5ndGggYXZvaWRzIGVycm9yIHdoZW4gaW5pdGlhbGl6aW5nIGVtcHR5IGxpc3QKCQlpZiAoIHRoaXMub3B0aW9ucy5hY3RpdmUgIT09IGZhbHNlICYmIHRoaXMuYW5jaG9ycy5sZW5ndGggKSB7CgkJCXRoaXMuYWN0aXZlID0gdGhpcy5fZmluZEFjdGl2ZSggb3B0aW9ucy5hY3RpdmUgKTsKCQl9IGVsc2UgewoJCQl0aGlzLmFjdGl2ZSA9ICQoKTsKCQl9CgoJCXRoaXMuX3JlZnJlc2goKTsKCgkJaWYgKCB0aGlzLmFjdGl2ZS5sZW5ndGggKSB7CgkJCXRoaXMubG9hZCggb3B0aW9ucy5hY3RpdmUgKTsKCQl9Cgl9LAoKCV9pbml0aWFsQWN0aXZlOiBmdW5jdGlvbigpIHsKCQl2YXIgYWN0aXZlID0gdGhpcy5vcHRpb25zLmFjdGl2ZSwKCQkJY29sbGFwc2libGUgPSB0aGlzLm9wdGlvbnMuY29sbGFwc2libGUsCgkJCWxvY2F0aW9uSGFzaCA9IGxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKCAxICk7CgoJCWlmICggYWN0aXZlID09PSBudWxsICkgewoJCQkvLyBjaGVjayB0aGUgZnJhZ21lbnQgaWRlbnRpZmllciBpbiB0aGUgVVJMCgkJCWlmICggbG9jYXRpb25IYXNoICkgewoJCQkJdGhpcy50YWJzLmVhY2goZnVuY3Rpb24oIGksIHRhYiApIHsKCQkJCQlpZiAoICQoIHRhYiApLmF0dHIoICJhcmlhLWNvbnRyb2xzIiApID09PSBsb2NhdGlvbkhhc2ggKSB7CgkJCQkJCWFjdGl2ZSA9IGk7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQl9KTsKCQkJfQoKCQkJLy8gY2hlY2sgZm9yIGEgdGFiIG1hcmtlZCBhY3RpdmUgdmlhIGEgY2xhc3MKCQkJaWYgKCBhY3RpdmUgPT09IG51bGwgKSB7CgkJCQlhY3RpdmUgPSB0aGlzLnRhYnMuaW5kZXgoIHRoaXMudGFicy5maWx0ZXIoICIudWktdGFicy1hY3RpdmUiICkgKTsKCQkJfQoKCQkJLy8gbm8gYWN0aXZlIHRhYiwgc2V0IHRvIGZhbHNlCgkJCWlmICggYWN0aXZlID09PSBudWxsIHx8IGFjdGl2ZSA9PT0gLTEgKSB7CgkJCQlhY3RpdmUgPSB0aGlzLnRhYnMubGVuZ3RoID8gMCA6IGZhbHNlOwoJCQl9CgkJfQoKCQkvLyBoYW5kbGUgbnVtYmVyczogbmVnYXRpdmUsIG91dCBvZiByYW5nZQoJCWlmICggYWN0aXZlICE9PSBmYWxzZSApIHsKCQkJYWN0aXZlID0gdGhpcy50YWJzLmluZGV4KCB0aGlzLnRhYnMuZXEoIGFjdGl2ZSApICk7CgkJCWlmICggYWN0aXZlID09PSAtMSApIHsKCQkJCWFjdGl2ZSA9IGNvbGxhcHNpYmxlID8gZmFsc2UgOiAwOwoJCQl9CgkJfQoKCQkvLyBkb24ndCBhbGxvdyBjb2xsYXBzaWJsZTogZmFsc2UgYW5kIGFjdGl2ZTogZmFsc2UKCQlpZiAoICFjb2xsYXBzaWJsZSAmJiBhY3RpdmUgPT09IGZhbHNlICYmIHRoaXMuYW5jaG9ycy5sZW5ndGggKSB7CgkJCWFjdGl2ZSA9IDA7CgkJfQoKCQlyZXR1cm4gYWN0aXZlOwoJfSwKCglfZ2V0Q3JlYXRlRXZlbnREYXRhOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gewoJCQl0YWI6IHRoaXMuYWN0aXZlLAoJCQlwYW5lbDogIXRoaXMuYWN0aXZlLmxlbmd0aCA\\/ICQoKSA6IHRoaXMuX2dldFBhbmVsRm9yVGFiKCBhY3RpdmUgKSwKCQkJZXZlbnREYXRhID0gewoJCQkJb2xkVGFiOiBhY3RpdmUsCgkJCQlvbGRQYW5lbDogdG9IaWRlLAoJCQkJbmV3VGFiOiBjb2xsYXBzaW5nID8gJCgpIDogdGFiLAoJCQkJbmV3UGFuZWw6IHRvU2hvdwoJCQl9OwoKCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKCQlpZiAoIHRhYi5oYXNDbGFzcyggInVpLXN0YXRlLWRpc2FibGVkIiApIHx8CgkJCQkvLyB0YWIgaXMgYWxyZWFkeSBsb2FkaW5nCgkJCQl0YWIuaGFzQ2xhc3MoICJ1aS10YWJzLWxvYWRpbmciICkgfHwKCQkJCS8vIGNhbid0IHN3aXRjaCBkdXJuaW5nIGFuIGFuaW1hdGlvbgoJCQkJdGhpcy5ydW5uaW5nIHx8CgkJCQkvLyBjbGljayBvbiBhY3RpdmUgaGVhZGVyLCBidXQgbm90IGNvbGxhcHNpYmxlCgkJCQkoIGNsaWNrZWRJc0FjdGl2ZSAmJiAhb3B0aW9ucy5jb2xsYXBzaWJsZSApIHx8CgkJCQkvLyBhbGxvdyBjYW5jZWxpbmcgYWN0aXZhdGlvbgoJCQkJKCB0aGlzLl90cmlnZ2VyKCAiYmVmb3JlQWN0aXZhdGUiLCBldmVudCwgZXZlbnREYXRhICkgPT09IGZhbHNlICkgKSB7CgkJCXJldHVybjsKCQl9CgoJCW9wdGlvbnMuYWN0aXZlID0gY29sbGFwc2luZyA\\\/ICQoICIjIiArIGlkICkgOiAkKCk7Cgl9LAoKCV9yZW1vdmVUb29sdGlwOiBmdW5jdGlvbiggdG9vbHRpcCApIHsKCQl0b29sdGlwLnJlbW92ZSgpOwoJCWRlbGV0ZSB0aGlzLnRvb2x0aXBzWyB0b29sdGlwLmF0dHIoICJpZCIgKSBdOwoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdmFyIHRoYXQgPSB0aGlzOwoKCQkvLyBjbG9zZSBvcGVuIHRvb2x0aXBzCgkJJC5lYWNoKCB0aGlzLnRvb2x0aXBzLCBmdW5jdGlvbiggaWQsIGVsZW1lbnQgKSB7CgkJCS8vIERlbGVnYXRlIHRvIGNsb3NlIG1ldGhvZCB0byBoYW5kbGUgY29tbW9uIGNsZWFudXAKCQkJdmFyIGV2ZW50ID0gJC5FdmVudCggImJsdXIiICk7CgkJCWV2ZW50LnRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBlbGVtZW50WzBdOwoJCQl0aGF0LmNsb3NlKCBldmVudCwgdHJ1ZSApOwoKCQkJLy8gUmVtb3ZlIGltbWVkaWF0ZWx5OyBkZXN0cm95aW5nIGFuIG9wZW4gdG9vbHRpcCBkb2Vzbid0IHVzZSB0aGUKCQkJLy8gaGlkZSBhbmltYXRpb24KCQkJJCggIiMiICsgaWQgKS5yZW1vdmUoKTsKCgkJCS8vIFJlc3RvcmUgdGhlIHRpdGxlCgkJCWlmICggZWxlbWVudC5kYXRhKCAidWktdG9vbHRpcC10aXRsZSIgKSApIHsKCQkJCWVsZW1lbnQuYXR0ciggInRpdGxlIiwgZWxlbWVudC5kYXRhKCAidWktdG9vbHRpcC10aXRsZSIgKSApOwoJCQkJZWxlbWVudC5yZW1vdmVEYXRhKCAidWktdG9vbHRpcC10aXRsZSIgKTsKCQkJfQoJCX0pOwoJfQp9KTsKCn0oIGpRdWVyeSApICk7CihmdW5jdGlvbigkLCB1bmRlZmluZWQpIHsKCnZhciBkYXRhU3BhY2UgPSAidWktZWZmZWN0cy0iOwoKJC5lZmZlY3RzID0gewoJZWZmZWN0OiB7fQp9OwoKLyohCiAqIGpRdWVyeSBDb2xvciBBbmltYXRpb25zIHYyLjEuMgogKiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS1jb2xvcgogKgogKiBDb3B5cmlnaHQgMjAxMyBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzCiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBEYXRlOiBXZWQgSmFuIDE2IDA4OjQ3OjA5IDIwMTMgLTA2MDAKICovCihmdW5jdGlvbiggalF1ZXJ5LCB1bmRlZmluZWQgKSB7CgoJdmFyIHN0ZXBIb29rcyA9ICJiYWNrZ3JvdW5kQ29sb3IgYm9yZGVyQm90dG9tQ29sb3IgYm9yZGVyTGVmdENvbG9yIGJvcmRlclJpZ2h0Q29sb3IgYm9yZGVyVG9wQ29sb3IgY29sb3IgY29sdW1uUnVsZUNvbG9yIG91dGxpbmVDb2xvciB0ZXh0RGVjb3JhdGlvbkNvbG9yIHRleHRFbXBoYXNpc0NvbG9yIiwKCgkvLyBwbHVzZXF1YWxzIHRlc3QgZm9yICs9IDEwMCAtPSAxMDAKCXJwbHVzZXF1YWxzID0gL14oW1wtK10pPVxzKihcZCtcLj9cZCopLywKCS8vIGEgc2V0IG9mIFJFJ3MgdGhhdCBjYW4gbWF0Y2ggc3RyaW5ncyBhbmQgZ2VuZXJhdGUgY29sb3IgdHVwbGVzLgoJc3RyaW5nUGFyc2VycyA9IFt7CgkJCXJlOiAvcmdiYT9cKFxzKihcZHsxLDN9KVxzKixccyooXGR7MSwzfSlccyosXHMqKFxkezEsM30pXHMqKD86LFxzKihcZD8oPzpcLlxkKyk\/KVxzKik\/XCkvLAoJCQlwYXJzZTogZnVuY3Rpb24oIGV4ZWNSZXN1bHQgKSB7CgkJCQlyZXR1cm4gWwoJCQkJCWV4ZWNSZXN1bHRbIDEgXSwKCQkJCQlleGVjUmVzdWx0WyAyIF0sCgkJCQkJZXhlY1Jlc3VsdFsgMyBdLAoJCQkJCWV4ZWNSZXN1bHRbIDQgXQoJCQkJXTsKCQkJfQoJCX0sIHsKCQkJcmU6IC9yZ2JhP1woXHMqKFxkKyg\/OlwuXGQrKT8pXCVccyosXHMqKFxkKyg\/OlwuXGQrKT8pXCVccyosXHMqKFxkKyg\/OlwuXGQrKT8pXCVccyooPzosXHMqKFxkPyg\/OlwuXGQrKT8pXHMqKT9cKS8sCgkJCXBhcnNlOiBmdW5jdGlvbiggZXhlY1Jlc3VsdCApIHsKCQkJCXJldHVybiBbCgkJCQkJZXhlY1Jlc3VsdFsgMSBdICogMi41NSwKCQkJCQlleGVjUmVzdWx0WyAyIF0gKiAyLjU1LAoJCQkJCWV4ZWNSZXN1bHRbIDMgXSAqIDIuNTUsCgkJCQkJZXhlY1Jlc3VsdFsgNCBdCgkJCQldOwoJCQl9CgkJfSwgewoJCQkvLyB0aGlzIHJlZ2V4IGlnbm9yZXMgQS1GIGJlY2F1c2UgaXQncyBjb21wYXJlZCBhZ2FpbnN0IGFuIGFscmVhZHkgbG93ZXJjYXNlZCBzdHJpbmcKCQkJcmU6IC8jKFthLWYwLTldezJ9KShbYS1mMC05XXsyfSkoW2EtZjAtOV17Mn0pLywKCQkJcGFyc2U6IGZ1bmN0aW9uKCBleGVjUmVzdWx0ICkgewoJCQkJcmV0dXJuIFsKCQkJCQlwYXJzZUludCggZXhlY1Jlc3VsdFsgMSBdLCAxNiApLAoJCQkJCXBhcnNlSW50KCBleGVjUmVzdWx0WyAyIF0sIDE2ICksCgkJCQkJcGFyc2VJbnQoIGV4ZWNSZXN1bHRbIDMgXSwgMTYgKQoJCQkJXTsKCQkJfQoJCX0sIHsKCQkJLy8gdGhpcyByZWdleCBpZ25vcmVzIEEtRiBiZWNhdXNlIGl0J3MgY29tcGFyZWQgYWdhaW5zdCBhbiBhbHJlYWR5IGxvd2VyY2FzZWQgc3RyaW5nCgkJCXJlOiAvIyhbYS1mMC05XSkoW2EtZjAtOV0pKFthLWYwLTldKS8sCgkJCXBhcnNlOiBmdW5jdGlvbiggZXhlY1Jlc3VsdCApIHsKCQkJCXJldHVybiBbCgkJCQkJcGFyc2VJbnQoIGV4ZWNSZXN1bHRbIDEgXSArIGV4ZWNSZXN1bHRbIDEgXSwgMTYgKSwKCQkJCQlwYXJzZUludCggZXhlY1Jlc3VsdFsgMiBdICsgZXhlY1Jlc3VsdFsgMiBdLCAxNiApLAoJCQkJCXBhcnNlSW50KCBleGVjUmVzdWx0WyAzIF0gKyBleGVjUmVzdWx0WyAzIF0sIDE2ICkKCQkJCV07CgkJCX0KCQl9LCB7CgkJCXJlOiAvaHNsYT9cKFxzKihcZCsoPzpcLlxkKyk\/KVxzKixccyooXGQrKD86XC5cZCspPylcJVxzKixccyooXGQrKD86XC5cZCspPylcJVxzKig\/OixccyooXGQ\/KD86XC5cZCspPylccyopP1wpLywKCQkJc3BhY2U6ICJoc2xhIiwKCQkJcGFyc2U6IGZ1bmN0aW9uKCBleGVjUmVzdWx0ICkgewoJCQkJcmV0dXJuIFsKCQkJCQlleGVjUmVzdWx0WyAxIF0sCgkJCQkJZXhlY1Jlc3VsdFsgMiBdIC8gMTAwLAoJCQkJCWV4ZWNSZXN1bHRbIDMgXSAvIDEwMCwKCQkJCQlleGVjUmVzdWx0WyA0IF0KCQkJCV07CgkJCX0KCQl9XSwKCgkvLyBqUXVlcnkuQ29sb3IoICkKCWNvbG9yID0galF1ZXJ5LkNvbG9yID0gZnVuY3Rpb24oIGNvbG9yLCBncmVlbiwgYmx1ZSwgYWxwaGEgKSB7CgkJcmV0dXJuIG5ldyBqUXVlcnkuQ29sb3IuZm4ucGFyc2UoIGNvbG9yLCBncmVlbiwgYmx1ZSwgYWxwaGEgKTsKCX0sCglzcGFjZXMgPSB7CgkJcmdiYTogewoJCQlwcm9wczogewoJCQkJcmVkOiB7CgkJCQkJaWR4OiAwLAoJCQkJCXR5cGU6ICJieXRlIgoJCQkJfSwKCQkJCWdyZWVuOiB7CgkJCQkJaWR4OiAxLAoJCQkJCXR5cGU6ICJieXRlIgoJCQkJfSwKCQkJCWJsdWU6IHsKCQkJCQlpZHg6IDIsCgkJCQkJdHlwZTogImJ5dGUiCgkJCQl9CgkJCX0KCQl9LAoKCQloc2xhOiB7CgkJCXByb3BzOiB7CgkJCQlodWU6IHsKCQkJCQlpZHg6IDAsCgkJCQkJdHlwZTogImRlZ3JlZXMiCgkJCQl9LAoJCQkJc2F0dXJhdGlvbjogewoJCQkJCWlkeDogMSwKCQkJCQl0eXBlOiAicGVyY2VudCIKCQkJCX0sCgkJCQlsaWdodG5lc3M6IHsKCQkJCQlpZHg6IDIsCgkJCQkJdHlwZTogInBlcmNlbnQiCgkJCQl9CgkJCX0KCQl9Cgl9LAoJcHJvcFR5cGVzID0gewoJCSJieXRlIjogewoJCQlmbG9vcjogdHJ1ZSwKCQkJbWF4OiAyNTUKCQl9LAoJCSJwZXJjZW50IjogewoJCQltYXg6IDEKCQl9LAoJCSJkZWdyZWVzIjogewoJCQltb2Q6IDM2MCwKCQkJZmxvb3I6IHRydWUKCQl9Cgl9LAoJc3VwcG9ydCA9IGNvbG9yLnN1cHBvcnQgPSB7fSwKCgkvLyBlbGVtZW50IGZvciBzdXBwb3J0IHRlc3RzCglzdXBwb3J0RWxlbSA9IGpRdWVyeSggIjxwPiIgKVsgMCBdLAoKCS8vIGNvbG9ycyA9IGpRdWVyeS5Db2xvci5uYW1lcwoJY29sb3JzLAoKCS8vIGxvY2FsIGFsaWFzZXMgb2YgZnVuY3Rpb25zIGNhbGxlZCBvZnRlbgoJZWFjaCA9IGpRdWVyeS5lYWNoOwoKLy8gZGV0ZXJtaW5lIHJnYmEgc3VwcG9ydCBpbW1lZGlhdGVseQpzdXBwb3J0RWxlbS5zdHlsZS5jc3NUZXh0ID0gImJhY2tncm91bmQtY29sb3I6cmdiYSgxLDEsMSwuNSkiOwpzdXBwb3J0LnJnYmEgPSBzdXBwb3J0RWxlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IuaW5kZXhPZiggInJnYmEiICkgPiAtMTsKCi8vIGRlZmluZSBjYWNoZSBuYW1lIGFuZCBhbHBoYSBwcm9wZXJ0aWVzCi8vIGZvciByZ2JhIGFuZCBoc2xhIHNwYWNlcwplYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkgewoJc3BhY2UuY2FjaGUgPSAiXyIgKyBzcGFjZU5hbWU7CglzcGFjZS5wcm9wcy5hbHBoYSA9IHsKCQlpZHg6IDMsCgkJdHlwZTogInBlcmNlbnQiLAoJCWRlZjogMQoJfTsKfSk7CgpmdW5jdGlvbiBjbGFtcCggdmFsdWUsIHByb3AsIGFsbG93RW1wdHkgKSB7Cgl2YXIgdHlwZSA9IHByb3BUeXBlc1sgcHJvcC50eXBlIF0gfHwge307CgoJaWYgKCB2YWx1ZSA9PSBudWxsICkgewoJCXJldHVybiAoYWxsb3dFbXB0eSB8fCAhcHJvcC5kZWYpID8gbnVsbCA6IHByb3AuZGVmOwoJfQoKCS8vIH5+IGlzIGFuIHNob3J0IHdheSBvZiBkb2luZyBmbG9vciBmb3IgcG9zaXRpdmUgbnVtYmVycwoJdmFsdWUgPSB0eXBlLmZsb29yID8gfn52YWx1ZSA6IHBhcnNlRmxvYXQoIHZhbHVlICk7CgoJLy8gSUUgd2lsbCBwYXNzIGluIGVtcHR5IHN0cmluZ3MgYXMgdmFsdWUgZm9yIGFscGhhLAoJLy8gd2hpY2ggd2lsbCBoaXQgdGhpcyBjYXNlCglpZiAoIGlzTmFOKCB2YWx1ZSApICkgewoJCXJldHVybiBwcm9wLmRlZjsKCX0KCglpZiAoIHR5cGUubW9kICkgewoJCS8vIHdlIGFkZCBtb2QgYmVmb3JlIG1vZGRpbmcgdG8gbWFrZSBzdXJlIHRoYXQgbmVnYXRpdmVzIHZhbHVlcwoJCS8vIGdldCBjb252ZXJ0ZWQgcHJvcGVybHk6IC0xMCAtPiAzNTAKCQlyZXR1cm4gKHZhbHVlICsgdHlwZS5tb2QpICUgdHlwZS5tb2Q7Cgl9CgoJLy8gZm9yIG5vdyBhbGwgcHJvcGVydHkgdHlwZXMgd2l0aG91dCBtb2QgaGF2ZSBtaW4gYW5kIG1heAoJcmV0dXJuIDAgPiB2YWx1ZSA\/IDAgOiB0eXBlLm1heCA8IHZhbHVlID8gdHlwZS5tYXggOiB2YWx1ZTsKfQoKZnVuY3Rpb24gc3RyaW5nUGFyc2UoIHN0cmluZyApIHsKCXZhciBpbnN0ID0gY29sb3IoKSwKCQlyZ2JhID0gaW5zdC5fcmdiYSA9IFtdOwoKCXN0cmluZyA9IHN0cmluZy50b0xvd2VyQ2FzZSgpOwoKCWVhY2goIHN0cmluZ1BhcnNlcnMsIGZ1bmN0aW9uKCBpLCBwYXJzZXIgKSB7CgkJdmFyIHBhcnNlZCwKCQkJbWF0Y2ggPSBwYXJzZXIucmUuZXhlYyggc3RyaW5nICksCgkJCXZhbHVlcyA9IG1hdGNoICYmIHBhcnNlci5wYXJzZSggbWF0Y2ggKSwKCQkJc3BhY2VOYW1lID0gcGFyc2VyLnNwYWNlIHx8ICJyZ2JhIjsKCgkJaWYgKCB2YWx1ZXMgKSB7CgkJCXBhcnNlZCA9IGluc3RbIHNwYWNlTmFtZSBdKCB2YWx1ZXMgKTsKCgkJCS8vIGlmIHRoaXMgd2FzIGFuIHJnYmEgcGFyc2UgdGhlIGFzc2lnbm1lbnQgbWlnaHQgaGFwcGVuIHR3aWNlCgkJCS8vIG9oIHdlbGwuLi4uCgkJCWluc3RbIHNwYWNlc1sgc3BhY2VOYW1lIF0uY2FjaGUgXSA9IHBhcnNlZFsgc3BhY2VzWyBzcGFjZU5hbWUgXS5jYWNoZSBdOwoJCQlyZ2JhID0gaW5zdC5fcmdiYSA9IHBhcnNlZC5fcmdiYTsKCgkJCS8vIGV4aXQgZWFjaCggc3RyaW5nUGFyc2VycyApIGhlcmUgYmVjYXVzZSB3ZSBtYXRjaGVkCgkJCXJldHVybiBmYWxzZTsKCQl9Cgl9KTsKCgkvLyBGb3VuZCBhIHN0cmluZ1BhcnNlciB0aGF0IGhhbmRsZWQgaXQKCWlmICggcmdiYS5sZW5ndGggKSB7CgoJCS8vIGlmIHRoaXMgY2FtZSBmcm9tIGEgcGFyc2VkIHN0cmluZywgZm9yY2UgInRyYW5zcGFyZW50IiB3aGVuIGFscGhhIGlzIDAKCQkvLyBjaHJvbWUsIChhbmQgbWF5YmUgb3RoZXJzKSByZXR1cm4gInRyYW5zcGFyZW50IiBhcyByZ2JhKDAsMCwwLDApCgkJaWYgKCByZ2JhLmpvaW4oKSA9PT0gIjAsMCwwLDAiICkgewoJCQlqUXVlcnkuZXh0ZW5kKCByZ2JhLCBjb2xvcnMudHJhbnNwYXJlbnQgKTsKCQl9CgkJcmV0dXJuIGluc3Q7Cgl9CgoJLy8gbmFtZWQgY29sb3JzCglyZXR1cm4gY29sb3JzWyBzdHJpbmcgXTsKfQoKY29sb3IuZm4gPSBqUXVlcnkuZXh0ZW5kKCBjb2xvci5wcm90b3R5cGUsIHsKCXBhcnNlOiBmdW5jdGlvbiggcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEgKSB7CgkJaWYgKCByZWQgPT09IHVuZGVmaW5lZCApIHsKCQkJdGhpcy5fcmdiYSA9IFsgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCBdOwoJCQlyZXR1cm4gdGhpczsKCQl9CgkJaWYgKCByZWQuanF1ZXJ5IHx8IHJlZC5ub2RlVHlwZSApIHsKCQkJcmVkID0galF1ZXJ5KCByZWQgKS5jc3MoIGdyZWVuICk7CgkJCWdyZWVuID0gdW5kZWZpbmVkOwoJCX0KCgkJdmFyIGluc3QgPSB0aGlzLAoJCQl0eXBlID0galF1ZXJ5LnR5cGUoIHJlZCApLAoJCQlyZ2JhID0gdGhpcy5fcmdiYSA9IFtdOwoKCQkvLyBtb3JlIHRoYW4gMSBhcmd1bWVudCBzcGVjaWZpZWQgLSBhc3N1bWUgKCByZWQsIGdyZWVuLCBibHVlLCBhbHBoYSApCgkJaWYgKCBncmVlbiAhPT0gdW5kZWZpbmVkICkgewoJCQlyZWQgPSBbIHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhIF07CgkJCXR5cGUgPSAiYXJyYXkiOwoJCX0KCgkJaWYgKCB0eXBlID09PSAic3RyaW5nIiApIHsKCQkJcmV0dXJuIHRoaXMucGFyc2UoIHN0cmluZ1BhcnNlKCByZWQgKSB8fCBjb2xvcnMuX2RlZmF1bHQgKTsKCQl9CgoJCWlmICggdHlwZSA9PT0gImFycmF5IiApIHsKCQkJZWFjaCggc3BhY2VzLnJnYmEucHJvcHMsIGZ1bmN0aW9uKCBrZXksIHByb3AgKSB7CgkJCQlyZ2JhWyBwcm9wLmlkeCBdID0gY2xhbXAoIHJlZFsgcHJvcC5pZHggXSwgcHJvcCApOwoJCQl9KTsKCQkJcmV0dXJuIHRoaXM7CgkJfQoKCQlpZiAoIHR5cGUgPT09ICJvYmplY3QiICkgewoJCQlpZiAoIHJlZCBpbnN0YW5jZW9mIGNvbG9yICkgewoJCQkJZWFjaCggc3BhY2VzLCBmdW5jdGlvbiggc3BhY2VOYW1lLCBzcGFjZSApIHsKCQkJCQlpZiAoIHJlZFsgc3BhY2UuY2FjaGUgXSApIHsKCQkJCQkJaW5zdFsgc3BhY2UuY2FjaGUgXSA9IHJlZFsgc3BhY2UuY2FjaGUgXS5zbGljZSgpOwoJCQkJCX0KCQkJCX0pOwoJCQl9IGVsc2UgewoJCQkJZWFjaCggc3BhY2VzLCBmdW5jdGlvbiggc3BhY2VOYW1lLCBzcGFjZSApIHsKCQkJCQl2YXIgY2FjaGUgPSBzcGFjZS5jYWNoZTsKCQkJCQllYWNoKCBzcGFjZS5wcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHsKCgkJCQkJCS8vIGlmIHRoZSBjYWNoZSBkb2Vzbid0IGV4aXN0LCBhbmQgd2Uga25vdyBob3cgdG8gY29udmVydAoJCQkJCQlpZiAoICFpbnN0WyBjYWNoZSBdICYmIHNwYWNlLnRvICkgewoKCQkJCQkJCS8vIGlmIHRoZSB2YWx1ZSB3YXMgbnVsbCwgd2UgZG9uJ3QgbmVlZCB0byBjb3B5IGl0CgkJCQkJCQkvLyBpZiB0aGUga2V5IHdhcyBhbHBoYSwgd2UgZG9uJ3QgbmVlZCB0byBjb3B5IGl0IGVpdGhlcgoJCQkJCQkJaWYgKCBrZXkgPT09ICJhbHBoYSIgfHwgcmVkWyBrZXkgXSA9PSBudWxsICkgewoJCQkJCQkJCXJldHVybjsKCQkJCQkJCX0KCQkJCQkJCWluc3RbIGNhY2hlIF0gPSBzcGFjZS50byggaW5zdC5fcmdiYSApOwoJCQkJCQl9CgoJCQkJCQkvLyB0aGlzIGlzIHRoZSBvbmx5IGNhc2Ugd2hlcmUgd2UgYWxsb3cgbnVsbHMgZm9yIEFMTCBwcm9wZXJ0aWVzLgoJCQkJCQkvLyBjYWxsIGNsYW1wIHdpdGggYWx3YXlzQWxsb3dFbXB0eQoJCQkJCQlpbnN0WyBjYWNoZSBdWyBwcm9wLmlkeCBdID0gY2xhbXAoIHJlZFsga2V5IF0sIHByb3AsIHRydWUgKTsKCQkJCQl9KTsKCgkJCQkJLy8gZXZlcnl0aGluZyBkZWZpbmVkIGJ1dCBhbHBoYT8KCQkJCQlpZiAoIGluc3RbIGNhY2hlIF0gJiYgalF1ZXJ5LmluQXJyYXkoIG51bGwsIGluc3RbIGNhY2hlIF0uc2xpY2UoIDAsIDMgKSApIDwgMCApIHsKCQkJCQkJLy8gdXNlIHRoZSBkZWZhdWx0IG9mIDEKCQkJCQkJaW5zdFsgY2FjaGUgXVsgMyBdID0gMTsKCQkJCQkJaWYgKCBzcGFjZS5mcm9tICkgewoJCQkJCQkJaW5zdC5fcmdiYSA9IHNwYWNlLmZyb20oIGluc3RbIGNhY2hlIF0gKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0pOwoJCQl9CgkJCXJldHVybiB0aGlzOwoJCX0KCX0sCglpczogZnVuY3Rpb24oIGNvbXBhcmUgKSB7CgkJdmFyIGlzID0gY29sb3IoIGNvbXBhcmUgKSwKCQkJc2FtZSA9IHRydWUsCgkJCWluc3QgPSB0aGlzOwoKCQllYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBfLCBzcGFjZSApIHsKCQkJdmFyIGxvY2FsQ2FjaGUsCgkJCQlpc0NhY2hlID0gaXNbIHNwYWNlLmNhY2hlIF07CgkJCWlmIChpc0NhY2hlKSB7CgkJCQlsb2NhbENhY2hlID0gaW5zdFsgc3BhY2UuY2FjaGUgXSB8fCBzcGFjZS50byAmJiBzcGFjZS50byggaW5zdC5fcmdiYSApIHx8IFtdOwoJCQkJZWFjaCggc3BhY2UucHJvcHMsIGZ1bmN0aW9uKCBfLCBwcm9wICkgewoJCQkJCWlmICggaXNDYWNoZVsgcHJvcC5pZHggXSAhPSBudWxsICkgewoJCQkJCQlzYW1lID0gKCBpc0NhY2hlWyBwcm9wLmlkeCBdID09PSBsb2NhbENhY2hlWyBwcm9wLmlkeCBdICk7CgkJCQkJCXJldHVybiBzYW1lOwoJCQkJCX0KCQkJCX0pOwoJCQl9CgkJCXJldHVybiBzYW1lOwoJCX0pOwoJCXJldHVybiBzYW1lOwoJfSwKCV9zcGFjZTogZnVuY3Rpb24oKSB7CgkJdmFyIHVzZWQgPSBbXSwKCQkJaW5zdCA9IHRoaXM7CgkJZWFjaCggc3BhY2VzLCBmdW5jdGlvbiggc3BhY2VOYW1lLCBzcGFjZSApIHsKCQkJaWYgKCBpbnN0WyBzcGFjZS5jYWNoZSBdICkgewoJCQkJdXNlZC5wdXNoKCBzcGFjZU5hbWUgKTsKCQkJfQoJCX0pOwoJCXJldHVybiB1c2VkLnBvcCgpOwoJfSwKCXRyYW5zaXRpb246IGZ1bmN0aW9uKCBvdGhlciwgZGlzdGFuY2UgKSB7CgkJdmFyIGVuZCA9IGNvbG9yKCBvdGhlciApLAoJCQlzcGFjZU5hbWUgPSBlbmQuX3NwYWNlKCksCgkJCXNwYWNlID0gc3BhY2VzWyBzcGFjZU5hbWUgXSwKCQkJc3RhcnRDb2xvciA9IHRoaXMuYWxwaGEoKSA9PT0gMCA\/IGNvbG9yKCAidHJhbnNwYXJlbnQiICkgOiB0aGlzLAoJCQlzdGFydCA9IHN0YXJ0Q29sb3JbIHNwYWNlLmNhY2hlIF0gfHwgc3BhY2UudG8oIHN0YXJ0Q29sb3IuX3JnYmEgKSwKCQkJcmVzdWx0ID0gc3RhcnQuc2xpY2UoKTsKCgkJZW5kID0gZW5kWyBzcGFjZS5jYWNoZSBdOwoJCWVhY2goIHNwYWNlLnByb3BzLCBmdW5jdGlvbigga2V5LCBwcm9wICkgewoJCQl2YXIgaW5kZXggPSBwcm9wLmlkeCwKCQkJCXN0YXJ0VmFsdWUgPSBzdGFydFsgaW5kZXggXSwKCQkJCWVuZFZhbHVlID0gZW5kWyBpbmRleCBdLAoJCQkJdHlwZSA9IHByb3BUeXBlc1sgcHJvcC50eXBlIF0gfHwge307CgoJCQkvLyBpZiBudWxsLCBkb24ndCBvdmVycmlkZSBzdGFydCB2YWx1ZQoJCQlpZiAoIGVuZFZhbHVlID09PSBudWxsICkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCS8vIGlmIG51bGwgLSB1c2UgZW5kCgkJCWlmICggc3RhcnRWYWx1ZSA9PT0gbnVsbCApIHsKCQkJCXJlc3VsdFsgaW5kZXggXSA9IGVuZFZhbHVlOwoJCQl9IGVsc2UgewoJCQkJaWYgKCB0eXBlLm1vZCApIHsKCQkJCQlpZiAoIGVuZFZhbHVlIC0gc3RhcnRWYWx1ZSA+IHR5cGUubW9kIC8gMiApIHsKCQkJCQkJc3RhcnRWYWx1ZSArPSB0eXBlLm1vZDsKCQkJCQl9IGVsc2UgaWYgKCBzdGFydFZhbHVlIC0gZW5kVmFsdWUgPiB0eXBlLm1vZCAvIDIgKSB7CgkJCQkJCXN0YXJ0VmFsdWUgLT0gdHlwZS5tb2Q7CgkJCQkJfQoJCQkJfQoJCQkJcmVzdWx0WyBpbmRleCBdID0gY2xhbXAoICggZW5kVmFsdWUgLSBzdGFydFZhbHVlICkgKiBkaXN0YW5jZSArIHN0YXJ0VmFsdWUsIHByb3AgKTsKCQkJfQoJCX0pOwoJCXJldHVybiB0aGlzWyBzcGFjZU5hbWUgXSggcmVzdWx0ICk7Cgl9LAoJYmxlbmQ6IGZ1bmN0aW9uKCBvcGFxdWUgKSB7CgkJLy8gaWYgd2UgYXJlIGFscmVhZHkgb3BhcXVlIC0gcmV0dXJuIG91cnNlbGYKCQlpZiAoIHRoaXMuX3JnYmFbIDMgXSA9PT0gMSApIHsKCQkJcmV0dXJuIHRoaXM7CgkJfQoKCQl2YXIgcmdiID0gdGhpcy5fcmdiYS5zbGljZSgpLAoJCQlhID0gcmdiLnBvcCgpLAoJCQlibGVuZCA9IGNvbG9yKCBvcGFxdWUgKS5fcmdiYTsKCgkJcmV0dXJuIGNvbG9yKCBqUXVlcnkubWFwKCByZ2IsIGZ1bmN0aW9uKCB2LCBpICkgewoJCQlyZXR1cm4gKCAxIC0gYSApICogYmxlbmRbIGkgXSArIGEgKiB2OwoJCX0pKTsKCX0sCgl0b1JnYmFTdHJpbmc6IGZ1bmN0aW9uKCkgewoJCXZhciBwcmVmaXggPSAicmdiYSgiLAoJCQlyZ2JhID0galF1ZXJ5Lm1hcCggdGhpcy5fcmdiYSwgZnVuY3Rpb24oIHYsIGkgKSB7CgkJCQlyZXR1cm4gdiA9PSBudWxsID8gKCBpID4gMiA\/IDEgOiAwICkgOiB2OwoJCQl9KTsKCgkJaWYgKCByZ2JhWyAzIF0gPT09IDEgKSB7CgkJCXJnYmEucG9wKCk7CgkJCXByZWZpeCA9ICJyZ2IoIjsKCQl9CgoJCXJldHVybiBwcmVmaXggKyByZ2JhLmpvaW4oKSArICIpIjsKCX0sCgl0b0hzbGFTdHJpbmc6IGZ1bmN0aW9uKCkgewoJCXZhciBwcmVmaXggPSAiaHNsYSgiLAoJCQloc2xhID0galF1ZXJ5Lm1hcCggdGhpcy5oc2xhKCksIGZ1bmN0aW9uKCB2LCBpICkgewoJCQkJaWYgKCB2ID09IG51bGwgKSB7CgkJCQkJdiA9IGkgPiAyID8gMSA6IDA7CgkJCQl9CgoJCQkJLy8gY2F0Y2ggMSBhbmQgMgoJCQkJaWYgKCBpICYmIGkgPCAzICkgewoJCQkJCXYgPSBNYXRoLnJvdW5kKCB2ICogMTAwICkgKyAiJSI7CgkJCQl9CgkJCQlyZXR1cm4gdjsKCQkJfSk7CgoJCWlmICggaHNsYVsgMyBdID09PSAxICkgewoJCQloc2xhLnBvcCgpOwoJCQlwcmVmaXggPSAiaHNsKCI7CgkJfQoJCXJldHVybiBwcmVmaXggKyBoc2xhLmpvaW4oKSArICIpIjsKCX0sCgl0b0hleFN0cmluZzogZnVuY3Rpb24oIGluY2x1ZGVBbHBoYSApIHsKCQl2YXIgcmdiYSA9IHRoaXMuX3JnYmEuc2xpY2UoKSwKCQkJYWxwaGEgPSByZ2JhLnBvcCgpOwoKCQlpZiAoIGluY2x1ZGVBbHBoYSApIHsKCQkJcmdiYS5wdXNoKCB+figgYWxwaGEgKiAyNTUgKSApOwoJCX0KCgkJcmV0dXJuICIjIiArIGpRdWVyeS5tYXAoIHJnYmEsIGZ1bmN0aW9uKCB2ICkgewoKCQkJLy8gZGVmYXVsdCB0byAwIHdoZW4gbnVsbHMgZXhpc3QKCQkJdiA9ICggdiB8fCAwICkudG9TdHJpbmcoIDE2ICk7CgkJCXJldHVybiB2Lmxlbmd0aCA9PT0gMSA\/ICIwIiArIHYgOiB2OwoJCX0pLmpvaW4oIiIpOwoJfSwKCXRvU3RyaW5nOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5fcmdiYVsgMyBdID09PSAwID8gInRyYW5zcGFyZW50IiA6IHRoaXMudG9SZ2JhU3RyaW5nKCk7Cgl9Cn0pOwpjb2xvci5mbi5wYXJzZS5wcm90b3R5cGUgPSBjb2xvci5mbjsKCi8vIGhzbGEgY29udmVyc2lvbnMgYWRhcHRlZCBmcm9tOgovLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL21hYXNoYWFjay9zb3VyY2UvYnJvd3NlL3BhY2thZ2VzL2dyYXBoaWNzL3RydW5rL3NyYy9ncmFwaGljcy9jb2xvcnMvSFVFMlJHQi5hcz9yPTUwMjEKCmZ1bmN0aW9uIGh1ZTJyZ2IoIHAsIHEsIGggKSB7CgloID0gKCBoICsgMSApICUgMTsKCWlmICggaCAqIDYgPCAxICkgewoJCXJldHVybiBwICsgKHEgLSBwKSAqIGggKiA2OwoJfQoJaWYgKCBoICogMiA8IDEpIHsKCQlyZXR1cm4gcTsKCX0KCWlmICggaCAqIDMgPCAyICkgewoJCXJldHVybiBwICsgKHEgLSBwKSAqICgoMi8zKSAtIGgpICogNjsKCX0KCXJldHVybiBwOwp9CgpzcGFjZXMuaHNsYS50byA9IGZ1bmN0aW9uICggcmdiYSApIHsKCWlmICggcmdiYVsgMCBdID09IG51bGwgfHwgcmdiYVsgMSBdID09IG51bGwgfHwgcmdiYVsgMiBdID09IG51bGwgKSB7CgkJcmV0dXJuIFsgbnVsbCwgbnVsbCwgbnVsbCwgcmdiYVsgMyBdIF07Cgl9Cgl2YXIgciA9IHJnYmFbIDAgXSAvIDI1NSwKCQlnID0gcmdiYVsgMSBdIC8gMjU1LAoJCWIgPSByZ2JhWyAyIF0gLyAyNTUsCgkJYSA9IHJnYmFbIDMgXSwKCQltYXggPSBNYXRoLm1heCggciwgZywgYiApLAoJCW1pbiA9IE1hdGgubWluKCByLCBnLCBiICksCgkJZGlmZiA9IG1heCAtIG1pbiwKCQlhZGQgPSBtYXggKyBtaW4sCgkJbCA9IGFkZCAqIDAuNSwKCQloLCBzOwoKCWlmICggbWluID09PSBtYXggKSB7CgkJaCA9IDA7Cgl9IGVsc2UgaWYgKCByID09PSBtYXggKSB7CgkJaCA9ICggNjAgKiAoIGcgLSBiICkgLyBkaWZmICkgKyAzNjA7Cgl9IGVsc2UgaWYgKCBnID09PSBtYXggKSB7CgkJaCA9ICggNjAgKiAoIGIgLSByICkgLyBkaWZmICkgKyAxMjA7Cgl9IGVsc2UgewoJCWggPSAoIDYwICogKCByIC0gZyApIC8gZGlmZiApICsgMjQwOwoJfQoKCS8vIGNocm9tYSAoZGlmZikgPT0gMCBtZWFucyBncmV5c2NhbGUgd2hpY2gsIGJ5IGRlZmluaXRpb24sIHNhdHVyYXRpb24gPSAwJQoJLy8gb3RoZXJ3aXNlLCBzYXR1cmF0aW9uIGlzIGJhc2VkIG9uIHRoZSByYXRpbyBvZiBjaHJvbWEgKGRpZmYpIHRvIGxpZ2h0bmVzcyAoYWRkKQoJaWYgKCBkaWZmID09PSAwICkgewoJCXMgPSAwOwoJfSBlbHNlIGlmICggbCA8PSAwLjUgKSB7CgkJcyA9IGRpZmYgLyBhZGQ7Cgl9IGVsc2UgewoJCXMgPSBkaWZmIC8gKCAyIC0gYWRkICk7Cgl9CglyZXR1cm4gWyBNYXRoLnJvdW5kKGgpICUgMzYwLCBzLCBsLCBhID09IG51bGwgPyAxIDogYSBdOwp9OwoKc3BhY2VzLmhzbGEuZnJvbSA9IGZ1bmN0aW9uICggaHNsYSApIHsKCWlmICggaHNsYVsgMCBdID09IG51bGwgfHwgaHNsYVsgMSBdID09IG51bGwgfHwgaHNsYVsgMiBdID09IG51bGwgKSB7CgkJcmV0dXJuIFsgbnVsbCwgbnVsbCwgbnVsbCwgaHNsYVsgMyBdIF07Cgl9Cgl2YXIgaCA9IGhzbGFbIDAgXSAvIDM2MCwKCQlzID0gaHNsYVsgMSBdLAoJCWwgPSBoc2xhWyAyIF0sCgkJYSA9IGhzbGFbIDMgXSwKCQlxID0gbCA8PSAwLjUgPyBsICogKCAxICsgcyApIDogbCArIHMgLSBsICogcywKCQlwID0gMiAqIGwgLSBxOwoKCXJldHVybiBbCgkJTWF0aC5yb3VuZCggaHVlMnJnYiggcCwgcSwgaCArICggMSAvIDMgKSApICogMjU1ICksCgkJTWF0aC5yb3VuZCggaHVlMnJnYiggcCwgcSwgaCApICogMjU1ICksCgkJTWF0aC5yb3VuZCggaHVlMnJnYiggcCwgcSwgaCAtICggMSAvIDMgKSApICogMjU1ICksCgkJYQoJXTsKfTsKCgplYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkgewoJdmFyIHByb3BzID0gc3BhY2UucHJvcHMsCgkJY2FjaGUgPSBzcGFjZS5jYWNoZSwKCQl0byA9IHNwYWNlLnRvLAoJCWZyb20gPSBzcGFjZS5mcm9tOwoKCS8vIG1ha2VzIHJnYmEoKSBhbmQgaHNsYSgpCgljb2xvci5mblsgc3BhY2VOYW1lIF0gPSBmdW5jdGlvbiggdmFsdWUgKSB7CgoJCS8vIGdlbmVyYXRlIGEgY2FjaGUgZm9yIHRoaXMgc3BhY2UgaWYgaXQgZG9lc24ndCBleGlzdAoJCWlmICggdG8gJiYgIXRoaXNbIGNhY2hlIF0gKSB7CgkJCXRoaXNbIGNhY2hlIF0gPSB0byggdGhpcy5fcmdiYSApOwoJCX0KCQlpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7CgkJCXJldHVybiB0aGlzWyBjYWNoZSBdLnNsaWNlKCk7CgkJfQoKCQl2YXIgcmV0LAoJCQl0eXBlID0galF1ZXJ5LnR5cGUoIHZhbHVlICksCgkJCWFyciA9ICggdHlwZSA9PT0gImFycmF5IiB8fCB0eXBlID09PSAib2JqZWN0IiApID8gdmFsdWUgOiBhcmd1bWVudHMsCgkJCWxvY2FsID0gdGhpc1sgY2FjaGUgXS5zbGljZSgpOwoKCQllYWNoKCBwcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHsKCQkJdmFyIHZhbCA9IGFyclsgdHlwZSA9PT0gIm9iamVjdCIgPyBrZXkgOiBwcm9wLmlkeCBdOwoJCQlpZiAoIHZhbCA9PSBudWxsICkgewoJCQkJdmFsID0gbG9jYWxbIHByb3AuaWR4IF07CgkJCX0KCQkJbG9jYWxbIHByb3AuaWR4IF0gPSBjbGFtcCggdmFsLCBwcm9wICk7CgkJfSk7CgoJCWlmICggZnJvbSApIHsKCQkJcmV0ID0gY29sb3IoIGZyb20oIGxvY2FsICkgKTsKCQkJcmV0WyBjYWNoZSBdID0gbG9jYWw7CgkJCXJldHVybiByZXQ7CgkJfSBlbHNlIHsKCQkJcmV0dXJuIGNvbG9yKCBsb2NhbCApOwoJCX0KCX07CgoJLy8gbWFrZXMgcmVkKCkgZ3JlZW4oKSBibHVlKCkgYWxwaGEoKSBodWUoKSBzYXR1cmF0aW9uKCkgbGlnaHRuZXNzKCkKCWVhY2goIHByb3BzLCBmdW5jdGlvbigga2V5LCBwcm9wICkgewoJCS8vIGFscGhhIGlzIGluY2x1ZGVkIGluIG1vcmUgdGhhbiBvbmUgc3BhY2UKCQlpZiAoIGNvbG9yLmZuWyBrZXkgXSApIHsKCQkJcmV0dXJuOwoJCX0KCQljb2xvci5mblsga2V5IF0gPSBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCXZhciB2dHlwZSA9IGpRdWVyeS50eXBlKCB2YWx1ZSApLAoJCQkJZm4gPSAoIGtleSA9PT0gImFscGhhIiA\/ICggdGhpcy5faHNsYSA\\/IHsgYWRkOiBjbGFzc05hbWVzIH0gOiB7IHJlbW92ZTogY2xhc3NOYW1lcyB9KSwKCQkJCQkJc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCS8vIHdpdGhvdXQgZm9yY2UgcGFyYW1ldGVyCgkJCQlyZXR1cm4gJC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKCB0aGlzLAoJCQkJCXsgdG9nZ2xlOiBjbGFzc05hbWVzIH0sIGZvcmNlLCBzcGVlZCwgZWFzaW5nICk7CgkJCX0KCQl9OwoJfSkoICQuZm4udG9nZ2xlQ2xhc3MgKSwKCglzd2l0Y2hDbGFzczogZnVuY3Rpb24oIHJlbW92ZSwgYWRkLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjaykgewoJCXJldHVybiAkLmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwoIHRoaXMsIHsKCQkJYWRkOiBhZGQsCgkJCXJlbW92ZTogcmVtb3ZlCgkJfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTsKCX0KfSk7Cgp9KSgpOwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVGRkVDVFMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCihmdW5jdGlvbigpIHsKCiQuZXh0ZW5kKCAkLmVmZmVjdHMsIHsKCXZlcnNpb246ICIxLjEwLjMiLAoKCS8vIFNhdmVzIGEgc2V0IG9mIHByb3BlcnRpZXMgaW4gYSBkYXRhIHN0b3JhZ2UKCXNhdmU6IGZ1bmN0aW9uKCBlbGVtZW50LCBzZXQgKSB7CgkJZm9yKCB2YXIgaT0wOyBpIDwgc2V0Lmxlbmd0aDsgaSsrICkgewoJCQlpZiAoIHNldFsgaSBdICE9PSBudWxsICkgewoJCQkJZWxlbWVudC5kYXRhKCBkYXRhU3BhY2UgKyBzZXRbIGkgXSwgZWxlbWVudFsgMCBdLnN0eWxlWyBzZXRbIGkgXSBdICk7CgkJCX0KCQl9Cgl9LAoKCS8vIFJlc3RvcmVzIGEgc2V0IG9mIHByZXZpb3VzbHkgc2F2ZWQgcHJvcGVydGllcyBmcm9tIGEgZGF0YSBzdG9yYWdlCglyZXN0b3JlOiBmdW5jdGlvbiggZWxlbWVudCwgc2V0ICkgewoJCXZhciB2YWwsIGk7CgkJZm9yKCBpPTA7IGkgPCBzZXQubGVuZ3RoOyBpKysgKSB7CgkJCWlmICggc2V0WyBpIF0gIT09IG51bGwgKSB7CgkJCQl2YWwgPSBlbGVtZW50LmRhdGEoIGRhdGFTcGFjZSArIHNldFsgaSBdICk7CgkJCQkvLyBzdXBwb3J0OiBqUXVlcnkgMS42LjIKCQkJCS8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0Lzk5MTcKCQkJCS8vIGpRdWVyeSAxLjYuMiBpbmNvcnJlY3RseSByZXR1cm5zIHVuZGVmaW5lZCBmb3IgYW55IGZhbHN5IHZhbHVlLgoJCQkJLy8gV2UgY2FuJ3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuICIiIGFuZCAwIGhlcmUsIHNvIHdlIGp1c3QgYXNzdW1lCgkJCQkvLyBlbXB0eSBzdHJpbmcgc2luY2UgaXQncyBsaWtlbHkgdG8gYmUgYSBtb3JlIGNvbW1vbiB2YWx1ZS4uLgoJCQkJaWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHsKCQkJCQl2YWwgPSAiIjsKCQkJCX0KCQkJCWVsZW1lbnQuY3NzKCBzZXRbIGkgXSwgdmFsICk7CgkJCX0KCQl9Cgl9LAoKCXNldE1vZGU6IGZ1bmN0aW9uKCBlbCwgbW9kZSApIHsKCQlpZiAobW9kZSA9PT0gInRvZ2dsZSIpIHsKCQkJbW9kZSA9IGVsLmlzKCAiOmhpZGRlbiIgKSA\/ICJzaG93IiA6ICJoaWRlIjsKCQl9CgkJcmV0dXJuIG1vZGU7Cgl9LAoKCS8vIFRyYW5zbGF0ZXMgYSBbdG9wLGxlZnRdIGFycmF5IGludG8gYSBiYXNlbGluZSB2YWx1ZQoJLy8gdGhpcyBzaG91bGQgYmUgYSBsaXR0bGUgbW9yZSBmbGV4aWJsZSBpbiB0aGUgZnV0dXJlIHRvIGhhbmRsZSBhIHN0cmluZyAmIGhhc2gKCWdldEJhc2VsaW5lOiBmdW5jdGlvbiggb3JpZ2luLCBvcmlnaW5hbCApIHsKCQl2YXIgeSwgeDsKCQlzd2l0Y2ggKCBvcmlnaW5bIDAgXSApIHsKCQkJY2FzZSAidG9wIjogeSA9IDA7IGJyZWFrOwoJCQljYXNlICJtaWRkbGUiOiB5ID0gMC41OyBicmVhazsKCQkJY2FzZSAiYm90dG9tIjogeSA9IDE7IGJyZWFrOwoJCQlkZWZhdWx0OiB5ID0gb3JpZ2luWyAwIF0gLyBvcmlnaW5hbC5oZWlnaHQ7CgkJfQoJCXN3aXRjaCAoIG9yaWdpblsgMSBdICkgewoJCQljYXNlICJsZWZ0IjogeCA9IDA7IGJyZWFrOwoJCQljYXNlICJjZW50ZXIiOiB4ID0gMC41OyBicmVhazsKCQkJY2FzZSAicmlnaHQiOiB4ID0gMTsgYnJlYWs7CgkJCWRlZmF1bHQ6IHggPSBvcmlnaW5bIDEgXSAvIG9yaWdpbmFsLndpZHRoOwoJCX0KCQlyZXR1cm4gewoJCQl4OiB4LAoJCQl5OiB5CgkJfTsKCX0sCgoJLy8gV3JhcHMgdGhlIGVsZW1lbnQgYXJvdW5kIGEgd3JhcHBlciB0aGF0IGNvcGllcyBwb3NpdGlvbiBwcm9wZXJ0aWVzCgljcmVhdGVXcmFwcGVyOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCgkJLy8gaWYgdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSB3cmFwcGVkLCByZXR1cm4gaXQKCQlpZiAoIGVsZW1lbnQucGFyZW50KCkuaXMoICIudWktZWZmZWN0cy13cmFwcGVyIiApKSB7CgkJCXJldHVybiBlbGVtZW50LnBhcmVudCgpOwoJCX0KCgkJLy8gd3JhcCB0aGUgZWxlbWVudAoJCXZhciBwcm9wcyA9IHsKCQkJCXdpZHRoOiBlbGVtZW50Lm91dGVyV2lkdGgodHJ1ZSksCgkJCQloZWlnaHQ6IGVsZW1lbnQub3V0ZXJIZWlnaHQodHJ1ZSksCgkJCQkiZmxvYXQiOiBlbGVtZW50LmNzcyggImZsb2F0IiApCgkJCX0sCgkJCXdyYXBwZXIgPSAkKCAiPGRpdj48L2Rpdj4iICkKCQkJCS5hZGRDbGFzcyggInVpLWVmZmVjdHMtd3JhcHBlciIgKQoJCQkJLmNzcyh7CgkJCQkJZm9udFNpemU6ICIxMDAlIiwKCQkJCQliYWNrZ3JvdW5kOiAidHJhbnNwYXJlbnQiLAoJCQkJCWJvcmRlcjogIm5vbmUiLAoJCQkJCW1hcmdpbjogMCwKCQkJCQlwYWRkaW5nOiAwCgkJCQl9KSwKCQkJLy8gU3RvcmUgdGhlIHNpemUgaW4gY2FzZSB3aWR0aC9oZWlnaHQgYXJlIGRlZmluZWQgaW4gJSAtIEZpeGVzICM1MjQ1CgkJCXNpemUgPSB7CgkJCQl3aWR0aDogZWxlbWVudC53aWR0aCgpLAoJCQkJaGVpZ2h0OiBlbGVtZW50LmhlaWdodCgpCgkJCX0sCgkJCWFjdGl2ZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7CgoJCS8vIHN1cHBvcnQ6IEZpcmVmb3gKCQkvLyBGaXJlZm94IGluY29ycmVjdGx5IGV4cG9zZXMgYW5vbnltb3VzIGNvbnRlbnQKCQkvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NjE2NjQKCQl0cnkgewoJCQlhY3RpdmUuaWQ7CgkJfSBjYXRjaCggZSApIHsKCQkJYWN0aXZlID0gZG9jdW1lbnQuYm9keTsKCQl9CgoJCWVsZW1lbnQud3JhcCggd3JhcHBlciApOwoKCQkvLyBGaXhlcyAjNzU5NSAtIEVsZW1lbnRzIGxvc2UgZm9jdXMgd2hlbiB3cmFwcGVkLgoJCWlmICggZWxlbWVudFsgMCBdID09PSBhY3RpdmUgfHwgJC5jb250YWlucyggZWxlbWVudFsgMCBdLCBhY3RpdmUgKSApIHsKCQkJJCggYWN0aXZlICkuZm9jdXMoKTsKCQl9CgoJCXdyYXBwZXIgPSBlbGVtZW50LnBhcmVudCgpOyAvL0hvdGZpeCBmb3IgalF1ZXJ5IDEuNCBzaW5jZSBzb21lIGNoYW5nZSBpbiB3cmFwKCkgc2VlbXMgdG8gYWN0dWFsbHkgbG9zZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSB3cmFwcGVkIGVsZW1lbnQKCgkJLy8gdHJhbnNmZXIgcG9zaXRpb25pbmcgcHJvcGVydGllcyB0byB0aGUgd3JhcHBlcgoJCWlmICggZWxlbWVudC5jc3MoICJwb3NpdGlvbiIgKSA9PT0gInN0YXRpYyIgKSB7CgkJCXdyYXBwZXIuY3NzKHsgcG9zaXRpb246ICJyZWxhdGl2ZSIgfSk7CgkJCWVsZW1lbnQuY3NzKHsgcG9zaXRpb246ICJyZWxhdGl2ZSIgfSk7CgkJfSBlbHNlIHsKCQkJJC5leHRlbmQoIHByb3BzLCB7CgkJCQlwb3NpdGlvbjogZWxlbWVudC5jc3MoICJwb3NpdGlvbiIgKSwKCQkJCXpJbmRleDogZWxlbWVudC5jc3MoICJ6LWluZGV4IiApCgkJCX0pOwoJCQkkLmVhY2goWyAidG9wIiwgImxlZnQiLCAiYm90dG9tIiwgInJpZ2h0IiBdLCBmdW5jdGlvbihpLCBwb3MpIHsKCQkJCXByb3BzWyBwb3MgXSA9IGVsZW1lbnQuY3NzKCBwb3MgKTsKCQkJCWlmICggaXNOYU4oIHBhcnNlSW50KCBwcm9wc1sgcG9zIF0sIDEwICkgKSApIHsKCQkJCQlwcm9wc1sgcG9zIF0gPSAiYXV0byI7CgkJCQl9CgkJCX0pOwoJCQllbGVtZW50LmNzcyh7CgkJCQlwb3NpdGlvbjogInJlbGF0aXZlIiwKCQkJCXRvcDogMCwKCQkJCWxlZnQ6IDAsCgkJCQlyaWdodDogImF1dG8iLAoJCQkJYm90dG9tOiAiYXV0byIKCQkJfSk7CgkJfQoJCWVsZW1lbnQuY3NzKHNpemUpOwoKCQlyZXR1cm4gd3JhcHBlci5jc3MoIHByb3BzICkuc2hvdygpOwoJfSwKCglyZW1vdmVXcmFwcGVyOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl2YXIgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDsKCgkJaWYgKCBlbGVtZW50LnBhcmVudCgpLmlzKCAiLnVpLWVmZmVjdHMtd3JhcHBlciIgKSApIHsKCQkJZWxlbWVudC5wYXJlbnQoKS5yZXBsYWNlV2l0aCggZWxlbWVudCApOwoKCQkJLy8gRml4ZXMgIzc1OTUgLSBFbGVtZW50cyBsb3NlIGZvY3VzIHdoZW4gd3JhcHBlZC4KCQkJaWYgKCBlbGVtZW50WyAwIF0gPT09IGFjdGl2ZSB8fCAkLmNvbnRhaW5zKCBlbGVtZW50WyAwIF0sIGFjdGl2ZSApICkgewoJCQkJJCggYWN0aXZlICkuZm9jdXMoKTsKCQkJfQoJCX0KCgoJCXJldHVybiBlbGVtZW50OwoJfSwKCglzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiggZWxlbWVudCwgbGlzdCwgZmFjdG9yLCB2YWx1ZSApIHsKCQl2YWx1ZSA9IHZhbHVlIHx8IHt9OwoJCSQuZWFjaCggbGlzdCwgZnVuY3Rpb24oIGksIHggKSB7CgkJCXZhciB1bml0ID0gZWxlbWVudC5jc3NVbml0KCB4ICk7CgkJCWlmICggdW5pdFsgMCBdID4gMCApIHsKCQkJCXZhbHVlWyB4IF0gPSB1bml0WyAwIF0gKiBmYWN0b3IgKyB1bml0WyAxIF07CgkJCX0KCQl9KTsKCQlyZXR1cm4gdmFsdWU7Cgl9Cn0pOwoKLy8gcmV0dXJuIGFuIGVmZmVjdCBvcHRpb25zIG9iamVjdCBmb3IgdGhlIGdpdmVuIHBhcmFtZXRlcnM6CmZ1bmN0aW9uIF9ub3JtYWxpemVBcmd1bWVudHMoIGVmZmVjdCwgb3B0aW9ucywgc3BlZWQsIGNhbGxiYWNrICkgewoKCS8vIGFsbG93IHBhc3NpbmcgYWxsIG9wdGlvbnMgYXMgdGhlIGZpcnN0IHBhcmFtZXRlcgoJaWYgKCAkLmlzUGxhaW5PYmplY3QoIGVmZmVjdCApICkgewoJCW9wdGlvbnMgPSBlZmZlY3Q7CgkJZWZmZWN0ID0gZWZmZWN0LmVmZmVjdDsKCX0KCgkvLyBjb252ZXJ0IHRvIGFuIG9iamVjdAoJZWZmZWN0ID0geyBlZmZlY3Q6IGVmZmVjdCB9OwoKCS8vIGNhdGNoIChlZmZlY3QsIG51bGwsIC4uLikKCWlmICggb3B0aW9ucyA9PSBudWxsICkgewoJCW9wdGlvbnMgPSB7fTsKCX0KCgkvLyBjYXRjaCAoZWZmZWN0LCBjYWxsYmFjaykKCWlmICggJC5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7CgkJY2FsbGJhY2sgPSBvcHRpb25zOwoJCXNwZWVkID0gbnVsbDsKCQlvcHRpb25zID0ge307Cgl9CgoJLy8gY2F0Y2ggKGVmZmVjdCwgc3BlZWQsID8pCglpZiAoIHR5cGVvZiBvcHRpb25zID09PSAibnVtYmVyIiB8fCAkLmZ4LnNwZWVkc1sgb3B0aW9ucyBdICkgewoJCWNhbGxiYWNrID0gc3BlZWQ7CgkJc3BlZWQgPSBvcHRpb25zOwoJCW9wdGlvbnMgPSB7fTsKCX0KCgkvLyBjYXRjaCAoZWZmZWN0LCBvcHRpb25zLCBjYWxsYmFjaykKCWlmICggJC5pc0Z1bmN0aW9uKCBzcGVlZCApICkgewoJCWNhbGxiYWNrID0gc3BlZWQ7CgkJc3BlZWQgPSBudWxsOwoJfQoKCS8vIGFkZCBvcHRpb25zIHRvIGVmZmVjdAoJaWYgKCBvcHRpb25zICkgewoJCSQuZXh0ZW5kKCBlZmZlY3QsIG9wdGlvbnMgKTsKCX0KCglzcGVlZCA9IHNwZWVkIHx8IG9wdGlvbnMuZHVyYXRpb247CgllZmZlY3QuZHVyYXRpb24gPSAkLmZ4Lm9mZiA\/IDAgOgoJCXR5cGVvZiBzcGVlZCA9PT0gIm51bWJlciIgPyBzcGVlZCA6CgkJc3BlZWQgaW4gJC5meC5zcGVlZHMgPyAkLmZ4LnNwZWVkc1sgc3BlZWQgXSA6CgkJJC5meC5zcGVlZHMuX2RlZmF1bHQ7CgoJZWZmZWN0LmNvbXBsZXRlID0gY2FsbGJhY2sgfHwgb3B0aW9ucy5jb21wbGV0ZTsKCglyZXR1cm4gZWZmZWN0Owp9CgpmdW5jdGlvbiBzdGFuZGFyZEFuaW1hdGlvbk9wdGlvbiggb3B0aW9uICkgewoJLy8gVmFsaWQgc3RhbmRhcmQgc3BlZWRzIChub3RoaW5nLCBudW1iZXIsIG5hbWVkIHNwZWVkKQoJaWYgKCAhb3B0aW9uIHx8IHR5cGVvZiBvcHRpb24gPT09ICJudW1iZXIiIHx8ICQuZnguc3BlZWRzWyBvcHRpb24gXSApIHsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvLyBJbnZhbGlkIHN0cmluZ3MgLSB0cmVhdCBhcyAibm9ybWFsIiBzcGVlZAoJaWYgKCB0eXBlb2Ygb3B0aW9uID09PSAic3RyaW5nIiAmJiAhJC5lZmZlY3RzLmVmZmVjdFsgb3B0aW9uIF0gKSB7CgkJcmV0dXJuIHRydWU7Cgl9CgoJLy8gQ29tcGxldGUgY2FsbGJhY2sKCWlmICggJC5pc0Z1bmN0aW9uKCBvcHRpb24gKSApIHsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvLyBPcHRpb25zIGhhc2ggKGJ1dCBub3QgbmFtaW5nIGFuIGVmZmVjdCkKCWlmICggdHlwZW9mIG9wdGlvbiA9PT0gIm9iamVjdCIgJiYgIW9wdGlvbi5lZmZlY3QgKSB7CgkJcmV0dXJuIHRydWU7Cgl9CgoJLy8gRGlkbid0IG1hdGNoIGFueSBzdGFuZGFyZCBBUEkKCXJldHVybiBmYWxzZTsKfQoKJC5mbi5leHRlbmQoewoJZWZmZWN0OiBmdW5jdGlvbiggLyogZWZmZWN0LCBvcHRpb25zLCBzcGVlZCwgY2FsbGJhY2sgKi8gKSB7CgkJdmFyIGFyZ3MgPSBfbm9ybWFsaXplQXJndW1lbnRzLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSwKCQkJbW9kZSA9IGFyZ3MubW9kZSwKCQkJcXVldWUgPSBhcmdzLnF1ZXVlLAoJCQllZmZlY3RNZXRob2QgPSAkLmVmZmVjdHMuZWZmZWN0WyBhcmdzLmVmZmVjdCBdOwoKCQlpZiAoICQuZngub2ZmIHx8ICFlZmZlY3RNZXRob2QgKSB7CgkJCS8vIGRlbGVnYXRlIHRvIHRoZSBvcmlnaW5hbCBtZXRob2QgKGUuZy4sIC5zaG93KCkpIGlmIHBvc3NpYmxlCgkJCWlmICggbW9kZSApIHsKCQkJCXJldHVybiB0aGlzWyBtb2RlIF0oIGFyZ3MuZHVyYXRpb24sIGFyZ3MuY29tcGxldGUgKTsKCQkJfSBlbHNlIHsKCQkJCXJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkgewoJCQkJCWlmICggYXJncy5jb21wbGV0ZSApIHsKCQkJCQkJYXJncy5jb21wbGV0ZS5jYWxsKCB0aGlzICk7CgkJCQkJfQoJCQkJfSk7CgkJCX0KCQl9CgoJCWZ1bmN0aW9uIHJ1biggbmV4dCApIHsKCQkJdmFyIGVsZW0gPSAkKCB0aGlzICksCgkJCQljb21wbGV0ZSA9IGFyZ3MuY29tcGxldGUsCgkJCQltb2RlID0gYXJncy5tb2RlOwoKCQkJZnVuY3Rpb24gZG9uZSgpIHsKCQkJCWlmICggJC5pc0Z1bmN0aW9uKCBjb21wbGV0ZSApICkgewoJCQkJCWNvbXBsZXRlLmNhbGwoIGVsZW1bMF0gKTsKCQkJCX0KCQkJCWlmICggJC5pc0Z1bmN0aW9uKCBuZXh0ICkgKSB7CgkJCQkJbmV4dCgpOwoJCQkJfQoJCQl9CgoJCQkvLyBJZiB0aGUgZWxlbWVudCBhbHJlYWR5IGhhcyB0aGUgY29ycmVjdCBmaW5hbCBzdGF0ZSwgZGVsZWdhdGUgdG8KCQkJLy8gdGhlIGNvcmUgbWV0aG9kcyBzbyB0aGUgaW50ZXJuYWwgdHJhY2tpbmcgb2YgIm9sZGRpc3BsYXkiIHdvcmtzLgoJCQlpZiAoIGVsZW0uaXMoICI6aGlkZGVuIiApID8gbW9kZSA9PT0gImhpZGUiIDogbW9kZSA9PT0gInNob3ciICkgewoJCQkJZWxlbVsgbW9kZSBdKCk7CgkJCQlkb25lKCk7CgkJCX0gZWxzZSB7CgkJCQllZmZlY3RNZXRob2QuY2FsbCggZWxlbVswXSwgYXJncywgZG9uZSApOwoJCQl9CgkJfQoKCQlyZXR1cm4gcXVldWUgPT09IGZhbHNlID8gdGhpcy5lYWNoKCBydW4gKSA6IHRoaXMucXVldWUoIHF1ZXVlIHx8ICJmeCIsIHJ1biApOwoJfSwKCglzaG93OiAoZnVuY3Rpb24oIG9yaWcgKSB7CgkJcmV0dXJuIGZ1bmN0aW9uKCBvcHRpb24gKSB7CgkJCWlmICggc3RhbmRhcmRBbmltYXRpb25PcHRpb24oIG9wdGlvbiApICkgewoJCQkJcmV0dXJuIG9yaWcuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQl9IGVsc2UgewoJCQkJdmFyIGFyZ3MgPSBfbm9ybWFsaXplQXJndW1lbnRzLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJCWFyZ3MubW9kZSA9ICJzaG93IjsKCQkJCXJldHVybiB0aGlzLmVmZmVjdC5jYWxsKCB0aGlzLCBhcmdzICk7CgkJCX0KCQl9OwoJfSkoICQuZm4uc2hvdyApLAoKCWhpZGU6IChmdW5jdGlvbiggb3JpZyApIHsKCQlyZXR1cm4gZnVuY3Rpb24oIG9wdGlvbiApIHsKCQkJaWYgKCBzdGFuZGFyZEFuaW1hdGlvbk9wdGlvbiggb3B0aW9uICkgKSB7CgkJCQlyZXR1cm4gb3JpZy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCX0gZWxzZSB7CgkJCQl2YXIgYXJncyA9IF9ub3JtYWxpemVBcmd1bWVudHMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQkJYXJncy5tb2RlID0gImhpZGUiOwoJCQkJcmV0dXJuIHRoaXMuZWZmZWN0LmNhbGwoIHRoaXMsIGFyZ3MgKTsKCQkJfQoJCX07Cgl9KSggJC5mbi5oaWRlICksCgoJdG9nZ2xlOiAoZnVuY3Rpb24oIG9yaWcgKSB7CgkJcmV0dXJuIGZ1bmN0aW9uKCBvcHRpb24gKSB7CgkJCWlmICggc3RhbmRhcmRBbmltYXRpb25PcHRpb24oIG9wdGlvbiApIHx8IHR5cGVvZiBvcHRpb24gPT09ICJib29sZWFuIiApIHsKCQkJCXJldHVybiBvcmlnLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJfSBlbHNlIHsKCQkJCXZhciBhcmdzID0gX25vcm1hbGl6ZUFyZ3VtZW50cy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCQlhcmdzLm1vZGUgPSAidG9nZ2xlIjsKCQkJCXJldHVybiB0aGlzLmVmZmVjdC5jYWxsKCB0aGlzLCBhcmdzICk7CgkJCX0KCQl9OwoJfSkoICQuZm4udG9nZ2xlICksCgoJLy8gaGVscGVyIGZ1bmN0aW9ucwoJY3NzVW5pdDogZnVuY3Rpb24oa2V5KSB7CgkJdmFyIHN0eWxlID0gdGhpcy5jc3MoIGtleSApLAoJCQl2YWwgPSBbXTsKCgkJJC5lYWNoKCBbICJlbSIsICJweCIsICIlIiwgInB0IiBdLCBmdW5jdGlvbiggaSwgdW5pdCApIHsKCQkJaWYgKCBzdHlsZS5pbmRleE9mKCB1bml0ICkgPiAwICkgewoJCQkJdmFsID0gWyBwYXJzZUZsb2F0KCBzdHlsZSApLCB1bml0IF07CgkJCX0KCQl9KTsKCQlyZXR1cm4gdmFsOwoJfQp9KTsKCn0pKCk7CgovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRUFTSU5HICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKKGZ1bmN0aW9uKCkgewoKLy8gYmFzZWQgb24gZWFzaW5nIGVxdWF0aW9ucyBmcm9tIFJvYmVydCBQZW5uZXIgKGh0dHA6Ly93d3cucm9iZXJ0cGVubmVyLmNvbS9lYXNpbmcpCgp2YXIgYmFzZUVhc2luZ3MgPSB7fTsKCiQuZWFjaCggWyAiUXVhZCIsICJDdWJpYyIsICJRdWFydCIsICJRdWludCIsICJFeHBvIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKCWJhc2VFYXNpbmdzWyBuYW1lIF0gPSBmdW5jdGlvbiggcCApIHsKCQlyZXR1cm4gTWF0aC5wb3coIHAsIGkgKyAyICk7Cgl9Owp9KTsKCiQuZXh0ZW5kKCBiYXNlRWFzaW5ncywgewoJU2luZTogZnVuY3Rpb24gKCBwICkgewoJCXJldHVybiAxIC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJIC8gMiApOwoJfSwKCUNpcmM6IGZ1bmN0aW9uICggcCApIHsKCQlyZXR1cm4gMSAtIE1hdGguc3FydCggMSAtIHAgKiBwICk7Cgl9LAoJRWxhc3RpYzogZnVuY3Rpb24oIHAgKSB7CgkJcmV0dXJuIHAgPT09IDAgfHwgcCA9PT0gMSA\/IHAgOgoJCQktTWF0aC5wb3coIDIsIDggKiAocCAtIDEpICkgKiBNYXRoLnNpbiggKCAocCAtIDEpICogODAgLSA3LjUgKSAqIE1hdGguUEkgLyAxNSApOwoJfSwKCUJhY2s6IGZ1bmN0aW9uKCBwICkgewoJCXJldHVybiBwICogcCAqICggMyAqIHAgLSAyICk7Cgl9LAoJQm91bmNlOiBmdW5jdGlvbiAoIHAgKSB7CgkJdmFyIHBvdzIsCgkJCWJvdW5jZSA9IDQ7CgoJCXdoaWxlICggcCA8ICggKCBwb3cyID0gTWF0aC5wb3coIDIsIC0tYm91bmNlICkgKSAtIDEgKSAvIDExICkge30KCQlyZXR1cm4gMSAvIE1hdGgucG93KCA0LCAzIC0gYm91bmNlICkgLSA3LjU2MjUgKiBNYXRoLnBvdyggKCBwb3cyICogMyAtIDIgKSAvIDIyIC0gcCwgMiApOwoJfQp9KTsKCiQuZWFjaCggYmFzZUVhc2luZ3MsIGZ1bmN0aW9uKCBuYW1lLCBlYXNlSW4gKSB7CgkkLmVhc2luZ1sgImVhc2VJbiIgKyBuYW1lIF0gPSBlYXNlSW47CgkkLmVhc2luZ1sgImVhc2VPdXQiICsgbmFtZSBdID0gZnVuY3Rpb24oIHAgKSB7CgkJcmV0dXJuIDEgLSBlYXNlSW4oIDEgLSBwICk7Cgl9OwoJJC5lYXNpbmdbICJlYXNlSW5PdXQiICsgbmFtZSBdID0gZnVuY3Rpb24oIHAgKSB7CgkJcmV0dXJuIHAgPCAwLjUgPwoJCQllYXNlSW4oIHAgKiAyICkgLyAyIDoKCQkJMSAtIGVhc2VJbiggcCAqIC0yICsgMiApIC8gMjsKCX07Cn0pOwoKfSkoKTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIHJ2ZXJ0aWNhbCA9IC91cHxkb3dufHZlcnRpY2FsLywKCXJwb3NpdGl2ZW1vdGlvbiA9IC91cHxsZWZ0fHZlcnRpY2FsfGhvcml6b250YWwvOwoKJC5lZmZlY3RzLmVmZmVjdC5ibGluZCA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoJLy8gQ3JlYXRlIGVsZW1lbnQKCXZhciBlbCA9ICQoIHRoaXMgKSwKCQlwcm9wcyA9IFsgInBvc2l0aW9uIiwgInRvcCIsICJib3R0b20iLCAibGVmdCIsICJyaWdodCIsICJoZWlnaHQiLCAid2lkdGgiIF0sCgkJbW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8ICJoaWRlIiApLAoJCWRpcmVjdGlvbiA9IG8uZGlyZWN0aW9uIHx8ICJ1cCIsCgkJdmVydGljYWwgPSBydmVydGljYWwudGVzdCggZGlyZWN0aW9uICksCgkJcmVmID0gdmVydGljYWwgPyAiaGVpZ2h0IiA6ICJ3aWR0aCIsCgkJcmVmMiA9IHZlcnRpY2FsID8gInRvcCIgOiAibGVmdCIsCgkJbW90aW9uID0gcnBvc2l0aXZlbW90aW9uLnRlc3QoIGRpcmVjdGlvbiApLAoJCWFuaW1hdGlvbiA9IHt9LAoJCXNob3cgPSBtb2RlID09PSAic2hvdyIsCgkJd3JhcHBlciwgZGlzdGFuY2UsIG1hcmdpbjsKCgkvLyBpZiBhbHJlYWR5IHdyYXBwZWQsIHRoZSB3cmFwcGVyJ3MgcHJvcGVydGllcyBhcmUgbXkgcHJvcGVydHkuICM2MjQ1CglpZiAoIGVsLnBhcmVudCgpLmlzKCAiLnVpLWVmZmVjdHMtd3JhcHBlciIgKSApIHsKCQkkLmVmZmVjdHMuc2F2ZSggZWwucGFyZW50KCksIHByb3BzICk7Cgl9IGVsc2UgewoJCSQuZWZmZWN0cy5zYXZlKCBlbCwgcHJvcHMgKTsKCX0KCWVsLnNob3coKTsKCXdyYXBwZXIgPSAkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKS5jc3MoewoJCW92ZXJmbG93OiAiaGlkZGVuIgoJfSk7CgoJZGlzdGFuY2UgPSB3cmFwcGVyWyByZWYgXSgpOwoJbWFyZ2luID0gcGFyc2VGbG9hdCggd3JhcHBlci5jc3MoIHJlZjIgKSApIHx8IDA7CgoJYW5pbWF0aW9uWyByZWYgXSA9IHNob3cgPyBkaXN0YW5jZSA6IDA7CglpZiAoICFtb3Rpb24gKSB7CgkJZWwKCQkJLmNzcyggdmVydGljYWwgPyAiYm90dG9tIiA6ICJyaWdodCIsIDAgKQoJCQkuY3NzKCB2ZXJ0aWNhbCA\/ICJ0b3AiIDogImxlZnQiLCAiYXV0byIgKQoJCQkuY3NzKHsgcG9zaXRpb246ICJhYnNvbHV0ZSIgfSk7CgoJCWFuaW1hdGlvblsgcmVmMiBdID0gc2hvdyA\/IG1hcmdpbiA6IGRpc3RhbmNlICsgbWFyZ2luOwoJfQoKCS8vIHN0YXJ0IGF0IDAgaWYgd2UgYXJlIHNob3dpbmcKCWlmICggc2hvdyApIHsKCQl3cmFwcGVyLmNzcyggcmVmLCAwICk7CgkJaWYgKCAhIG1vdGlvbiApIHsKCQkJd3JhcHBlci5jc3MoIHJlZjIsIG1hcmdpbiArIGRpc3RhbmNlICk7CgkJfQoJfQoKCS8vIEFuaW1hdGUKCXdyYXBwZXIuYW5pbWF0ZSggYW5pbWF0aW9uLCB7CgkJZHVyYXRpb246IG8uZHVyYXRpb24sCgkJZWFzaW5nOiBvLmVhc2luZywKCQlxdWV1ZTogZmFsc2UsCgkJY29tcGxldGU6IGZ1bmN0aW9uKCkgewoJCQlpZiAoIG1vZGUgPT09ICJoaWRlIiApIHsKCQkJCWVsLmhpZGUoKTsKCQkJfQoJCQkkLmVmZmVjdHMucmVzdG9yZSggZWwsIHByb3BzICk7CgkJCSQuZWZmZWN0cy5yZW1vdmVXcmFwcGVyKCBlbCApOwoJCQlkb25lKCk7CgkJfQoJfSk7Cgp9OwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmVmZmVjdHMuZWZmZWN0LmJvdW5jZSA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoJdmFyIGVsID0gJCggdGhpcyApLAoJCXByb3BzID0gWyAicG9zaXRpb24iLCAidG9wIiwgImJvdHRvbSIsICJsZWZ0IiwgInJpZ2h0IiwgImhlaWdodCIsICJ3aWR0aCIgXSwKCgkJLy8gZGVmYXVsdHM6CgkJbW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8ICJlZmZlY3QiICksCgkJaGlkZSA9IG1vZGUgPT09ICJoaWRlIiwKCQlzaG93ID0gbW9kZSA9PT0gInNob3ciLAoJCWRpcmVjdGlvbiA9IG8uZGlyZWN0aW9uIHx8ICJ1cCIsCgkJZGlzdGFuY2UgPSBvLmRpc3RhbmNlLAoJCXRpbWVzID0gby50aW1lcyB8fCA1LAoKCQkvLyBudW1iZXIgb2YgaW50ZXJuYWwgYW5pbWF0aW9ucwoJCWFuaW1zID0gdGltZXMgKiAyICsgKCBzaG93IHx8IGhpZGUgPyAxIDogMCApLAoJCXNwZWVkID0gby5kdXJhdGlvbiAvIGFuaW1zLAoJCWVhc2luZyA9IG8uZWFzaW5nLAoKCQkvLyB1dGlsaXR5OgoJCXJlZiA9ICggZGlyZWN0aW9uID09PSAidXAiIHx8IGRpcmVjdGlvbiA9PT0gImRvd24iICkgPyAidG9wIiA6ICJsZWZ0IiwKCQltb3Rpb24gPSAoIGRpcmVjdGlvbiA9PT0gInVwIiB8fCBkaXJlY3Rpb24gPT09ICJsZWZ0IiApLAoJCWksCgkJdXBBbmltLAoJCWRvd25BbmltLAoKCQkvLyB3ZSB3aWxsIG5lZWQgdG8gcmUtYXNzZW1ibGUgdGhlIHF1ZXVlIHRvIHN0YWNrIG91ciBhbmltYXRpb25zIGluIHBsYWNlCgkJcXVldWUgPSBlbC5xdWV1ZSgpLAoJCXF1ZXVlbGVuID0gcXVldWUubGVuZ3RoOwoKCS8vIEF2b2lkIHRvdWNoaW5nIG9wYWNpdHkgdG8gcHJldmVudCBjbGVhclR5cGUgYW5kIFBORyBpc3N1ZXMgaW4gSUUKCWlmICggc2hvdyB8fCBoaWRlICkgewoJCXByb3BzLnB1c2goICJvcGFjaXR5IiApOwoJfQoKCSQuZWZmZWN0cy5zYXZlKCBlbCwgcHJvcHMgKTsKCWVsLnNob3coKTsKCSQuZWZmZWN0cy5jcmVhdGVXcmFwcGVyKCBlbCApOyAvLyBDcmVhdGUgV3JhcHBlcgoKCS8vIGRlZmF1bHQgZGlzdGFuY2UgZm9yIHRoZSBCSUdHRVNUIGJvdW5jZSBpcyB0aGUgb3V0ZXIgRGlzdGFuY2UgLyAzCglpZiAoICFkaXN0YW5jZSApIHsKCQlkaXN0YW5jZSA9IGVsWyByZWYgPT09ICJ0b3AiID8gIm91dGVySGVpZ2h0IiA6ICJvdXRlcldpZHRoIiBdKCkgLyAzOwoJfQoKCWlmICggc2hvdyApIHsKCQlkb3duQW5pbSA9IHsgb3BhY2l0eTogMSB9OwoJCWRvd25BbmltWyByZWYgXSA9IDA7CgoJCS8vIGlmIHdlIGFyZSBzaG93aW5nLCBmb3JjZSBvcGFjaXR5IDAgYW5kIHNldCB0aGUgaW5pdGlhbCBwb3NpdGlvbgoJCS8vIHRoZW4gZG8gdGhlICJmaXJzdCIgYW5pbWF0aW9uCgkJZWwuY3NzKCAib3BhY2l0eSIsIDAgKQoJCQkuY3NzKCByZWYsIG1vdGlvbiA\/IC1kaXN0YW5jZSAqIDIgOiBkaXN0YW5jZSAqIDIgKQoJCQkuYW5pbWF0ZSggZG93bkFuaW0sIHNwZWVkLCBlYXNpbmcgKTsKCX0KCgkvLyBzdGFydCBhdCB0aGUgc21hbGxlc3QgZGlzdGFuY2UgaWYgd2UgYXJlIGhpZGluZwoJaWYgKCBoaWRlICkgewoJCWRpc3RhbmNlID0gZGlzdGFuY2UgLyBNYXRoLnBvdyggMiwgdGltZXMgLSAxICk7Cgl9CgoJZG93bkFuaW0gPSB7fTsKCWRvd25BbmltWyByZWYgXSA9IDA7CgkvLyBCb3VuY2VzIHVwL2Rvd24vbGVmdC9yaWdodCB0aGVuIGJhY2sgdG8gMCAtLSB0aW1lcyAqIDIgYW5pbWF0aW9ucyBoYXBwZW4gaGVyZQoJZm9yICggaSA9IDA7IGkgPCB0aW1lczsgaSsrICkgewoJCXVwQW5pbSA9IHt9OwoJCXVwQW5pbVsgcmVmIF0gPSAoIG1vdGlvbiA\/ICItPSIgOiAiKz0iICkgKyBkaXN0YW5jZTsKCgkJZWwuYW5pbWF0ZSggdXBBbmltLCBzcGVlZCwgZWFzaW5nICkKCQkJLmFuaW1hdGUoIGRvd25BbmltLCBzcGVlZCwgZWFzaW5nICk7CgoJCWRpc3RhbmNlID0gaGlkZSA\/IGRpc3RhbmNlICogMiA6IGRpc3RhbmNlIC8gMjsKCX0KCgkvLyBMYXN0IEJvdW5jZSB3aGVuIEhpZGluZwoJaWYgKCBoaWRlICkgewoJCXVwQW5pbSA9IHsgb3BhY2l0eTogMCB9OwoJCXVwQW5pbVsgcmVmIF0gPSAoIG1vdGlvbiA\/ICItPSIgOiAiKz0iICkgKyBkaXN0YW5jZTsKCgkJZWwuYW5pbWF0ZSggdXBBbmltLCBzcGVlZCwgZWFzaW5nICk7Cgl9CgoJZWwucXVldWUoZnVuY3Rpb24oKSB7CgkJaWYgKCBoaWRlICkgewoJCQllbC5oaWRlKCk7CgkJfQoJCSQuZWZmZWN0cy5yZXN0b3JlKCBlbCwgcHJvcHMgKTsKCQkkLmVmZmVjdHMucmVtb3ZlV3JhcHBlciggZWwgKTsKCQlkb25lKCk7Cgl9KTsKCgkvLyBpbmplY3QgYWxsIHRoZSBhbmltYXRpb25zIHdlIGp1c3QgcXVldWVkIHRvIGJlIGZpcnN0IGluIGxpbmUgKGFmdGVyICJpbnByb2dyZXNzIikKCWlmICggcXVldWVsZW4gPiAxKSB7CgkJcXVldWUuc3BsaWNlLmFwcGx5KCBxdWV1ZSwKCQkJWyAxLCAwIF0uY29uY2F0KCBxdWV1ZS5zcGxpY2UoIHF1ZXVlbGVuLCBhbmltcyArIDEgKSApICk7Cgl9CgllbC5kZXF1ZXVlKCk7Cgp9OwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmVmZmVjdHMuZWZmZWN0LmNsaXAgPSBmdW5jdGlvbiggbywgZG9uZSApIHsKCS8vIENyZWF0ZSBlbGVtZW50Cgl2YXIgZWwgPSAkKCB0aGlzICksCgkJcHJvcHMgPSBbICJwb3NpdGlvbiIsICJ0b3AiLCAiYm90dG9tIiwgImxlZnQiLCAicmlnaHQiLCAiaGVpZ2h0IiwgIndpZHRoIiBdLAoJCW1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCAiaGlkZSIgKSwKCQlzaG93ID0gbW9kZSA9PT0gInNob3ciLAoJCWRpcmVjdGlvbiA9IG8uZGlyZWN0aW9uIHx8ICJ2ZXJ0aWNhbCIsCgkJdmVydCA9IGRpcmVjdGlvbiA9PT0gInZlcnRpY2FsIiwKCQlzaXplID0gdmVydCA\/ICJoZWlnaHQiIDogIndpZHRoIiwKCQlwb3NpdGlvbiA9IHZlcnQgPyAidG9wIiA6ICJsZWZ0IiwKCQlhbmltYXRpb24gPSB7fSwKCQl3cmFwcGVyLCBhbmltYXRlLCBkaXN0YW5jZTsKCgkvLyBTYXZlICYgU2hvdwoJJC5lZmZlY3RzLnNhdmUoIGVsLCBwcm9wcyApOwoJZWwuc2hvdygpOwoKCS8vIENyZWF0ZSBXcmFwcGVyCgl3cmFwcGVyID0gJC5lZmZlY3RzLmNyZWF0ZVdyYXBwZXIoIGVsICkuY3NzKHsKCQlvdmVyZmxvdzogImhpZGRlbiIKCX0pOwoJYW5pbWF0ZSA9ICggZWxbMF0udGFnTmFtZSA9PT0gIklNRyIgKSA\/IHdyYXBwZXIgOiBlbDsKCWRpc3RhbmNlID0gYW5pbWF0ZVsgc2l6ZSBdKCk7CgoJLy8gU2hpZnQKCWlmICggc2hvdyApIHsKCQlhbmltYXRlLmNzcyggc2l6ZSwgMCApOwoJCWFuaW1hdGUuY3NzKCBwb3NpdGlvbiwgZGlzdGFuY2UgLyAyICk7Cgl9CgoJLy8gQ3JlYXRlIEFuaW1hdGlvbiBPYmplY3Q6CglhbmltYXRpb25bIHNpemUgXSA9IHNob3cgPyBkaXN0YW5jZSA6IDA7CglhbmltYXRpb25bIHBvc2l0aW9uIF0gPSBzaG93ID8gMCA6IGRpc3RhbmNlIC8gMjsKCgkvLyBBbmltYXRlCglhbmltYXRlLmFuaW1hdGUoIGFuaW1hdGlvbiwgewoJCXF1ZXVlOiBmYWxzZSwKCQlkdXJhdGlvbjogby5kdXJhdGlvbiwKCQllYXNpbmc6IG8uZWFzaW5nLAoJCWNvbXBsZXRlOiBmdW5jdGlvbigpIHsKCQkJaWYgKCAhc2hvdyApIHsKCQkJCWVsLmhpZGUoKTsKCQkJfQoJCQkkLmVmZmVjdHMucmVzdG9yZSggZWwsIHByb3BzICk7CgkJCSQuZWZmZWN0cy5yZW1vdmVXcmFwcGVyKCBlbCApOwoJCQlkb25lKCk7CgkJfQoJfSk7Cgp9OwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmVmZmVjdHMuZWZmZWN0LmRyb3AgPSBmdW5jdGlvbiggbywgZG9uZSApIHsKCgl2YXIgZWwgPSAkKCB0aGlzICksCgkJcHJvcHMgPSBbICJwb3NpdGlvbiIsICJ0b3AiLCAiYm90dG9tIiwgImxlZnQiLCAicmlnaHQiLCAib3BhY2l0eSIsICJoZWlnaHQiLCAid2lkdGgiIF0sCgkJbW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbCwgby5tb2RlIHx8ICJoaWRlIiApLAoJCXNob3cgPSBtb2RlID09PSAic2hvdyIsCgkJZGlyZWN0aW9uID0gby5kaXJlY3Rpb24gfHwgImxlZnQiLAoJCXJlZiA9ICggZGlyZWN0aW9uID09PSAidXAiIHx8IGRpcmVjdGlvbiA9PT0gImRvd24iICkgPyAidG9wIiA6ICJsZWZ0IiwKCQltb3Rpb24gPSAoIGRpcmVjdGlvbiA9PT0gInVwIiB8fCBkaXJlY3Rpb24gPT09ICJsZWZ0IiApID8gInBvcyIgOiAibmVnIiwKCQlhbmltYXRpb24gPSB7CgkJCW9wYWNpdHk6IHNob3cgPyAxIDogMAoJCX0sCgkJZGlzdGFuY2U7CgoJLy8gQWRqdXN0CgkkLmVmZmVjdHMuc2F2ZSggZWwsIHByb3BzICk7CgllbC5zaG93KCk7CgkkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKTsKCglkaXN0YW5jZSA9IG8uZGlzdGFuY2UgfHwgZWxbIHJlZiA9PT0gInRvcCIgPyAib3V0ZXJIZWlnaHQiOiAib3V0ZXJXaWR0aCIgXSggdHJ1ZSApIC8gMjsKCglpZiAoIHNob3cgKSB7CgkJZWwKCQkJLmNzcyggIm9wYWNpdHkiLCAwICkKCQkJLmNzcyggcmVmLCBtb3Rpb24gPT09ICJwb3MiID8gLWRpc3RhbmNlIDogZGlzdGFuY2UgKTsKCX0KCgkvLyBBbmltYXRpb24KCWFuaW1hdGlvblsgcmVmIF0gPSAoIHNob3cgPwoJCSggbW90aW9uID09PSAicG9zIiA\/ICIrPSIgOiAiLT0iICkgOgoJCSggbW90aW9uID09PSAicG9zIiA\/ICItPSIgOiAiKz0iICkgKSArCgkJZGlzdGFuY2U7CgoJLy8gQW5pbWF0ZQoJZWwuYW5pbWF0ZSggYW5pbWF0aW9uLCB7CgkJcXVldWU6IGZhbHNlLAoJCWR1cmF0aW9uOiBvLmR1cmF0aW9uLAoJCWVhc2luZzogby5lYXNpbmcsCgkJY29tcGxldGU6IGZ1bmN0aW9uKCkgewoJCQlpZiAoIG1vZGUgPT09ICJoaWRlIiApIHsKCQkJCWVsLmhpZGUoKTsKCQkJfQoJCQkkLmVmZmVjdHMucmVzdG9yZSggZWwsIHByb3BzICk7CgkJCSQuZWZmZWN0cy5yZW1vdmVXcmFwcGVyKCBlbCApOwoJCQlkb25lKCk7CgkJfQoJfSk7Cn07Cgp9KShqUXVlcnkpOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZWZmZWN0cy5lZmZlY3QuZXhwbG9kZSA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoKCXZhciByb3dzID0gby5waWVjZXMgPyBNYXRoLnJvdW5kKCBNYXRoLnNxcnQoIG8ucGllY2VzICkgKSA6IDMsCgkJY2VsbHMgPSByb3dzLAoJCWVsID0gJCggdGhpcyApLAoJCW1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCAiaGlkZSIgKSwKCQlzaG93ID0gbW9kZSA9PT0gInNob3ciLAoKCQkvLyBzaG93IGFuZCB0aGVuIHZpc2liaWxpdHk6aGlkZGVuIHRoZSBlbGVtZW50IGJlZm9yZSBjYWxjdWxhdGluZyBvZmZzZXQKCQlvZmZzZXQgPSBlbC5zaG93KCkuY3NzKCAidmlzaWJpbGl0eSIsICJoaWRkZW4iICkub2Zmc2V0KCksCgoJCS8vIHdpZHRoIGFuZCBoZWlnaHQgb2YgYSBwaWVjZQoJCXdpZHRoID0gTWF0aC5jZWlsKCBlbC5vdXRlcldpZHRoKCkgLyBjZWxscyApLAoJCWhlaWdodCA9IE1hdGguY2VpbCggZWwub3V0ZXJIZWlnaHQoKSAvIHJvd3MgKSwKCQlwaWVjZXMgPSBbXSwKCgkJLy8gbG9vcAoJCWksIGosIGxlZnQsIHRvcCwgbXgsIG15OwoKCS8vIGNoaWxkcmVuIGFuaW1hdGUgY29tcGxldGU6CglmdW5jdGlvbiBjaGlsZENvbXBsZXRlKCkgewoJCXBpZWNlcy5wdXNoKCB0aGlzICk7CgkJaWYgKCBwaWVjZXMubGVuZ3RoID09PSByb3dzICogY2VsbHMgKSB7CgkJCWFuaW1Db21wbGV0ZSgpOwoJCX0KCX0KCgkvLyBjbG9uZSB0aGUgZWxlbWVudCBmb3IgZWFjaCByb3cgYW5kIGNlbGwuCglmb3IoIGkgPSAwOyBpIDwgcm93cyA7IGkrKyApIHsgLy8gPT09PgoJCXRvcCA9IG9mZnNldC50b3AgKyBpICogaGVpZ2h0OwoJCW15ID0gaSAtICggcm93cyAtIDEgKSAvIDIgOwoKCQlmb3IoIGogPSAwOyBqIDwgY2VsbHMgOyBqKysgKSB7IC8vIHx8fAoJCQlsZWZ0ID0gb2Zmc2V0LmxlZnQgKyBqICogd2lkdGg7CgkJCW14ID0gaiAtICggY2VsbHMgLSAxICkgLyAyIDsKCgkJCS8vIENyZWF0ZSBhIGNsb25lIG9mIHRoZSBub3cgaGlkZGVuIG1haW4gZWxlbWVudCB0aGF0IHdpbGwgYmUgYWJzb2x1dGUgcG9zaXRpb25lZAoJCQkvLyB3aXRoaW4gYSB3cmFwcGVyIGRpdiBvZmYgdGhlIC1sZWZ0IGFuZCAtdG9wIGVxdWFsIHRvIHNpemUgb2Ygb3VyIHBpZWNlcwoJCQllbAoJCQkJLmNsb25lKCkKCQkJCS5hcHBlbmRUbyggImJvZHkiICkKCQkJCS53cmFwKCAiPGRpdj48L2Rpdj4iICkKCQkJCS5jc3MoewoJCQkJCXBvc2l0aW9uOiAiYWJzb2x1dGUiLAoJCQkJCXZpc2liaWxpdHk6ICJ2aXNpYmxlIiwKCQkJCQlsZWZ0OiAtaiAqIHdpZHRoLAoJCQkJCXRvcDogLWkgKiBoZWlnaHQKCQkJCX0pCgoJCQkvLyBzZWxlY3QgdGhlIHdyYXBwZXIgLSBtYWtlIGl0IG92ZXJmbG93OiBoaWRkZW4gYW5kIGFic29sdXRlIHBvc2l0aW9uZWQgYmFzZWQgb24KCQkJLy8gd2hlcmUgdGhlIG9yaWdpbmFsIHdhcyBsb2NhdGVkICtsZWZ0IGFuZCArdG9wIGVxdWFsIHRvIHRoZSBzaXplIG9mIHBpZWNlcwoJCQkJLnBhcmVudCgpCgkJCQkuYWRkQ2xhc3MoICJ1aS1lZmZlY3RzLWV4cGxvZGUiICkKCQkJCS5jc3MoewoJCQkJCXBvc2l0aW9uOiAiYWJzb2x1dGUiLAoJCQkJCW92ZXJmbG93OiAiaGlkZGVuIiwKCQkJCQl3aWR0aDogd2lkdGgsCgkJCQkJaGVpZ2h0OiBoZWlnaHQsCgkJCQkJbGVmdDogbGVmdCArICggc2hvdyA\/IG14ICogd2lkdGggOiAwICksCgkJCQkJdG9wOiB0b3AgKyAoIHNob3cgPyBteSAqIGhlaWdodCA6IDAgKSwKCQkJCQlvcGFjaXR5OiBzaG93ID8gMCA6IDEKCQkJCX0pLmFuaW1hdGUoewoJCQkJCWxlZnQ6IGxlZnQgKyAoIHNob3cgPyAwIDogbXggKiB3aWR0aCApLAoJCQkJCXRvcDogdG9wICsgKCBzaG93ID8gMCA6IG15ICogaGVpZ2h0ICksCgkJCQkJb3BhY2l0eTogc2hvdyA\/IDEgOiAwCgkJCQl9LCBvLmR1cmF0aW9uIHx8IDUwMCwgby5lYXNpbmcsIGNoaWxkQ29tcGxldGUgKTsKCQl9Cgl9CgoJZnVuY3Rpb24gYW5pbUNvbXBsZXRlKCkgewoJCWVsLmNzcyh7CgkJCXZpc2liaWxpdHk6ICJ2aXNpYmxlIgoJCX0pOwoJCSQoIHBpZWNlcyApLnJlbW92ZSgpOwoJCWlmICggIXNob3cgKSB7CgkJCWVsLmhpZGUoKTsKCQl9CgkJZG9uZSgpOwoJfQp9OwoKfSkoalF1ZXJ5KTsKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmVmZmVjdHMuZWZmZWN0LmZhZGUgPSBmdW5jdGlvbiggbywgZG9uZSApIHsKCXZhciBlbCA9ICQoIHRoaXMgKSwKCQltb2RlID0gJC5lZmZlY3RzLnNldE1vZGUoIGVsLCBvLm1vZGUgfHwgInRvZ2dsZSIgKTsKCgllbC5hbmltYXRlKHsKCQlvcGFjaXR5OiBtb2RlCgl9LCB7CgkJcXVldWU6IGZhbHNlLAoJCWR1cmF0aW9uOiBvLmR1cmF0aW9uLAoJCWVhc2luZzogby5lYXNpbmcsCgkJY29tcGxldGU6IGRvbmUKCX0pOwp9OwoKfSkoIGpRdWVyeSApOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZWZmZWN0cy5lZmZlY3QuZm9sZCA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoKCS8vIENyZWF0ZSBlbGVtZW50Cgl2YXIgZWwgPSAkKCB0aGlzICksCgkJcHJvcHMgPSBbICJwb3NpdGlvbiIsICJ0b3AiLCAiYm90dG9tIiwgImxlZnQiLCAicmlnaHQiLCAiaGVpZ2h0IiwgIndpZHRoIiBdLAoJCW1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCAiaGlkZSIgKSwKCQlzaG93ID0gbW9kZSA9PT0gInNob3ciLAoJCWhpZGUgPSBtb2RlID09PSAiaGlkZSIsCgkJc2l6ZSA9IG8uc2l6ZSB8fCAxNSwKCQlwZXJjZW50ID0gLyhbMC05XSspJS8uZXhlYyggc2l6ZSApLAoJCWhvcml6Rmlyc3QgPSAhIW8uaG9yaXpGaXJzdCwKCQl3aWR0aEZpcnN0ID0gc2hvdyAhPT0gaG9yaXpGaXJzdCwKCQlyZWYgPSB3aWR0aEZpcnN0ID8gWyAid2lkdGgiLCAiaGVpZ2h0IiBdIDogWyAiaGVpZ2h0IiwgIndpZHRoIiBdLAoJCWR1cmF0aW9uID0gby5kdXJhdGlvbiAvIDIsCgkJd3JhcHBlciwgZGlzdGFuY2UsCgkJYW5pbWF0aW9uMSA9IHt9LAoJCWFuaW1hdGlvbjIgPSB7fTsKCgkkLmVmZmVjdHMuc2F2ZSggZWwsIHByb3BzICk7CgllbC5zaG93KCk7CgoJLy8gQ3JlYXRlIFdyYXBwZXIKCXdyYXBwZXIgPSAkLmVmZmVjdHMuY3JlYXRlV3JhcHBlciggZWwgKS5jc3MoewoJCW92ZXJmbG93OiAiaGlkZGVuIgoJfSk7CglkaXN0YW5jZSA9IHdpZHRoRmlyc3QgPwoJCVsgd3JhcHBlci53aWR0aCgpLCB3cmFwcGVyLmhlaWdodCgpIF0gOgoJCVsgd3JhcHBlci5oZWlnaHQoKSwgd3JhcHBlci53aWR0aCgpIF07CgoJaWYgKCBwZXJjZW50ICkgewoJCXNpemUgPSBwYXJzZUludCggcGVyY2VudFsgMSBdLCAxMCApIC8gMTAwICogZGlzdGFuY2VbIGhpZGUgPyAwIDogMSBdOwoJfQoJaWYgKCBzaG93ICkgewoJCXdyYXBwZXIuY3NzKCBob3JpekZpcnN0ID8gewoJCQloZWlnaHQ6IDAsCgkJCXdpZHRoOiBzaXplCgkJfSA6IHsKCQkJaGVpZ2h0OiBzaXplLAoJCQl3aWR0aDogMAoJCX0pOwoJfQoKCS8vIEFuaW1hdGlvbgoJYW5pbWF0aW9uMVsgcmVmWyAwIF0gXSA9IHNob3cgPyBkaXN0YW5jZVsgMCBdIDogc2l6ZTsKCWFuaW1hdGlvbjJbIHJlZlsgMSBdIF0gPSBzaG93ID8gZGlzdGFuY2VbIDEgXSA6IDA7CgoJLy8gQW5pbWF0ZQoJd3JhcHBlcgoJCS5hbmltYXRlKCBhbmltYXRpb24xLCBkdXJhdGlvbiwgby5lYXNpbmcgKQoJCS5hbmltYXRlKCBhbmltYXRpb24yLCBkdXJhdGlvbiwgby5lYXNpbmcsIGZ1bmN0aW9uKCkgewoJCQlpZiAoIGhpZGUgKSB7CgkJCQllbC5oaWRlKCk7CgkJCX0KCQkJJC5lZmZlY3RzLnJlc3RvcmUoIGVsLCBwcm9wcyApOwoJCQkkLmVmZmVjdHMucmVtb3ZlV3JhcHBlciggZWwgKTsKCQkJZG9uZSgpOwoJCX0pOwoKfTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5lZmZlY3RzLmVmZmVjdC5oaWdobGlnaHQgPSBmdW5jdGlvbiggbywgZG9uZSApIHsKCXZhciBlbGVtID0gJCggdGhpcyApLAoJCXByb3BzID0gWyAiYmFja2dyb3VuZEltYWdlIiwgImJhY2tncm91bmRDb2xvciIsICJvcGFjaXR5IiBdLAoJCW1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWxlbSwgby5tb2RlIHx8ICJzaG93IiApLAoJCWFuaW1hdGlvbiA9IHsKCQkJYmFja2dyb3VuZENvbG9yOiBlbGVtLmNzcyggImJhY2tncm91bmRDb2xvciIgKQoJCX07CgoJaWYgKG1vZGUgPT09ICJoaWRlIikgewoJCWFuaW1hdGlvbi5vcGFjaXR5ID0gMDsKCX0KCgkkLmVmZmVjdHMuc2F2ZSggZWxlbSwgcHJvcHMgKTsKCgllbGVtCgkJLnNob3coKQoJCS5jc3MoewoJCQliYWNrZ3JvdW5kSW1hZ2U6ICJub25lIiwKCQkJYmFja2dyb3VuZENvbG9yOiBvLmNvbG9yIHx8ICIjZmZmZjk5IgoJCX0pCgkJLmFuaW1hdGUoIGFuaW1hdGlvbiwgewoJCQlxdWV1ZTogZmFsc2UsCgkJCWR1cmF0aW9uOiBvLmR1cmF0aW9uLAoJCQllYXNpbmc6IG8uZWFzaW5nLAoJCQljb21wbGV0ZTogZnVuY3Rpb24oKSB7CgkJCQlpZiAoIG1vZGUgPT09ICJoaWRlIiApIHsKCQkJCQllbGVtLmhpZGUoKTsKCQkJCX0KCQkJCSQuZWZmZWN0cy5yZXN0b3JlKCBlbGVtLCBwcm9wcyApOwoJCQkJZG9uZSgpOwoJCQl9CgkJfSk7Cn07Cgp9KShqUXVlcnkpOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZWZmZWN0cy5lZmZlY3QucHVsc2F0ZSA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoJdmFyIGVsZW0gPSAkKCB0aGlzICksCgkJbW9kZSA9ICQuZWZmZWN0cy5zZXRNb2RlKCBlbGVtLCBvLm1vZGUgfHwgInNob3ciICksCgkJc2hvdyA9IG1vZGUgPT09ICJzaG93IiwKCQloaWRlID0gbW9kZSA9PT0gImhpZGUiLAoJCXNob3doaWRlID0gKCBzaG93IHx8IG1vZGUgPT09ICJoaWRlIiApLAoKCQkvLyBzaG93aW5nIG9yIGhpZGluZyBsZWF2ZXMgb2YgdGhlICJsYXN0IiBhbmltYXRpb24KCQlhbmltcyA9ICggKCBvLnRpbWVzIHx8IDUgKSAqIDIgKSArICggc2hvd2hpZGUgPyAxIDogMCApLAoJCWR1cmF0aW9uID0gby5kdXJhdGlvbiAvIGFuaW1zLAoJCWFuaW1hdGVUbyA9IDAsCgkJcXVldWUgPSBlbGVtLnF1ZXVlKCksCgkJcXVldWVsZW4gPSBxdWV1ZS5sZW5ndGgsCgkJaTsKCglpZiAoIHNob3cgfHwgIWVsZW0uaXMoIjp2aXNpYmxlIikpIHsKCQllbGVtLmNzcyggIm9wYWNpdHkiLCAwICkuc2hvdygpOwoJCWFuaW1hdGVUbyA9IDE7Cgl9CgoJLy8gYW5pbXMgLSAxIG9wYWNpdHkgInRvZ2dsZXMiCglmb3IgKCBpID0gMTsgaSA8IGFuaW1zOyBpKysgKSB7CgkJZWxlbS5hbmltYXRlKHsKCQkJb3BhY2l0eTogYW5pbWF0ZVRvCgkJfSwgZHVyYXRpb24sIG8uZWFzaW5nICk7CgkJYW5pbWF0ZVRvID0gMSAtIGFuaW1hdGVUbzsKCX0KCgllbGVtLmFuaW1hdGUoewoJCW9wYWNpdHk6IGFuaW1hdGVUbwoJfSwgZHVyYXRpb24sIG8uZWFzaW5nKTsKCgllbGVtLnF1ZXVlKGZ1bmN0aW9uKCkgewoJCWlmICggaGlkZSApIHsKCQkJZWxlbS5oaWRlKCk7CgkJfQoJCWRvbmUoKTsKCX0pOwoKCS8vIFdlIGp1c3QgcXVldWVkIHVwICJhbmltcyIgYW5pbWF0aW9ucywgd2UgbmVlZCB0byBwdXQgdGhlbSBuZXh0IGluIHRoZSBxdWV1ZQoJaWYgKCBxdWV1ZWxlbiA+IDEgKSB7CgkJcXVldWUuc3BsaWNlLmFwcGx5KCBxdWV1ZSwKCQkJWyAxLCAwIF0uY29uY2F0KCBxdWV1ZS5zcGxpY2UoIHF1ZXVlbGVuLCBhbmltcyArIDEgKSApICk7Cgl9CgllbGVtLmRlcXVldWUoKTsKfTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5lZmZlY3RzLmVmZmVjdC5wdWZmID0gZnVuY3Rpb24oIG8sIGRvbmUgKSB7Cgl2YXIgZWxlbSA9ICQoIHRoaXMgKSwKCQltb2RlID0gJC5lZmZlY3RzLnNldE1vZGUoIGVsZW0sIG8ubW9kZSB8fCAiaGlkZSIgKSwKCQloaWRlID0gbW9kZSA9PT0gImhpZGUiLAoJCXBlcmNlbnQgPSBwYXJzZUludCggby5wZXJjZW50LCAxMCApIHx8IDE1MCwKCQlmYWN0b3IgPSBwZXJjZW50IC8gMTAwLAoJCW9yaWdpbmFsID0gewoJCQloZWlnaHQ6IGVsZW0uaGVpZ2h0KCksCgkJCXdpZHRoOiBlbGVtLndpZHRoKCksCgkJCW91dGVySGVpZ2h0OiBlbGVtLm91dGVySGVpZ2h0KCksCgkJCW91dGVyV2lkdGg6IGVsZW0ub3V0ZXJXaWR0aCgpCgkJfTsKCgkkLmV4dGVuZCggbywgewoJCWVmZmVjdDogInNjYWxlIiwKCQlxdWV1ZTogZmFsc2UsCgkJZmFkZTogdHJ1ZSwKCQltb2RlOiBtb2RlLAoJCWNvbXBsZXRlOiBkb25lLAoJCXBlcmNlbnQ6IGhpZGUgPyBwZXJjZW50IDogMTAwLAoJCWZyb206IGhpZGUgPwoJCQlvcmlnaW5hbCA6CgkJCXsKCQkJCWhlaWdodDogb3JpZ2luYWwuaGVpZ2h0ICogZmFjdG9yLAoJCQkJd2lkdGg6IG9yaWdpbmFsLndpZHRoICogZmFjdG9yLAoJCQkJb3V0ZXJIZWlnaHQ6IG9yaWdpbmFsLm91dGVySGVpZ2h0ICogZmFjdG9yLAoJCQkJb3V0ZXJXaWR0aDogb3JpZ2luYWwub3V0ZXJXaWR0aCAqIGZhY3RvcgoJCQl9Cgl9KTsKCgllbGVtLmVmZmVjdCggbyApOwp9OwoKJC5lZmZlY3RzLmVmZmVjdC5zY2FsZSA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoKCS8vIENyZWF0ZSBlbGVtZW50Cgl2YXIgZWwgPSAkKCB0aGlzICksCgkJb3B0aW9ucyA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgbyApLAoJCW1vZGUgPSAkLmVmZmVjdHMuc2V0TW9kZSggZWwsIG8ubW9kZSB8fCAiZWZmZWN0IiApLAoJCXBlcmNlbnQgPSBwYXJzZUludCggby5wZXJjZW50LCAxMCApIHx8CgkJCSggcGFyc2VJbnQoIG8ucGVyY2VudCwgMTAgKSA9PT0gMCA\/IDAgOiAoIG1vZGUgPT09ICJoaWRlIiA\\/ICItPSIgOiAiKz0iICkgKyBkaXN0YW5jZTsKCWFuaW1hdGlvbjFbIHJlZiBdID0gKCBwb3NpdGl2ZU1vdGlvbiA\/ICIrPSIgOiAiLT0iICkgKyBkaXN0YW5jZSAqIDI7CglhbmltYXRpb24yWyByZWYgXSA9ICggcG9zaXRpdmVNb3Rpb24gPyAiLT0iIDogIis9IiApICsgZGlzdGFuY2UgKiAyOwoKCS8vIEFuaW1hdGUKCWVsLmFuaW1hdGUoIGFuaW1hdGlvbiwgc3BlZWQsIG8uZWFzaW5nICk7CgoJLy8gU2hha2VzCglmb3IgKCBpID0gMTsgaSA8IHRpbWVzOyBpKysgKSB7CgkJZWwuYW5pbWF0ZSggYW5pbWF0aW9uMSwgc3BlZWQsIG8uZWFzaW5nICkuYW5pbWF0ZSggYW5pbWF0aW9uMiwgc3BlZWQsIG8uZWFzaW5nICk7Cgl9CgllbAoJCS5hbmltYXRlKCBhbmltYXRpb24xLCBzcGVlZCwgby5lYXNpbmcgKQoJCS5hbmltYXRlKCBhbmltYXRpb24sIHNwZWVkIC8gMiwgby5lYXNpbmcgKQoJCS5xdWV1ZShmdW5jdGlvbigpIHsKCQkJaWYgKCBtb2RlID09PSAiaGlkZSIgKSB7CgkJCQllbC5oaWRlKCk7CgkJCX0KCQkJJC5lZmZlY3RzLnJlc3RvcmUoIGVsLCBwcm9wcyApOwoJCQkkLmVmZmVjdHMucmVtb3ZlV3JhcHBlciggZWwgKTsKCQkJZG9uZSgpOwoJCX0pOwoKCS8vIGluamVjdCBhbGwgdGhlIGFuaW1hdGlvbnMgd2UganVzdCBxdWV1ZWQgdG8gYmUgZmlyc3QgaW4gbGluZSAoYWZ0ZXIgImlucHJvZ3Jlc3MiKQoJaWYgKCBxdWV1ZWxlbiA+IDEpIHsKCQlxdWV1ZS5zcGxpY2UuYXBwbHkoIHF1ZXVlLAoJCQlbIDEsIDAgXS5jb25jYXQoIHF1ZXVlLnNwbGljZSggcXVldWVsZW4sIGFuaW1zICsgMSApICkgKTsKCX0KCWVsLmRlcXVldWUoKTsKCn07Cgp9KShqUXVlcnkpOwooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZWZmZWN0cy5lZmZlY3Quc2xpZGUgPSBmdW5jdGlvbiggbywgZG9uZSApIHsKCgkvLyBDcmVhdGUgZWxlbWVudAoJdmFyIGVsID0gJCggdGhpcyApLAoJCXByb3BzID0gWyAicG9zaXRpb24iLCAidG9wIiwgImJvdHRvbSIsICJsZWZ0IiwgInJpZ2h0IiwgIndpZHRoIiwgImhlaWdodCIgXSwKCQltb2RlID0gJC5lZmZlY3RzLnNldE1vZGUoIGVsLCBvLm1vZGUgfHwgInNob3ciICksCgkJc2hvdyA9IG1vZGUgPT09ICJzaG93IiwKCQlkaXJlY3Rpb24gPSBvLmRpcmVjdGlvbiB8fCAibGVmdCIsCgkJcmVmID0gKGRpcmVjdGlvbiA9PT0gInVwIiB8fCBkaXJlY3Rpb24gPT09ICJkb3duIikgPyAidG9wIiA6ICJsZWZ0IiwKCQlwb3NpdGl2ZU1vdGlvbiA9IChkaXJlY3Rpb24gPT09ICJ1cCIgfHwgZGlyZWN0aW9uID09PSAibGVmdCIpLAoJCWRpc3RhbmNlLAoJCWFuaW1hdGlvbiA9IHt9OwoKCS8vIEFkanVzdAoJJC5lZmZlY3RzLnNhdmUoIGVsLCBwcm9wcyApOwoJZWwuc2hvdygpOwoJZGlzdGFuY2UgPSBvLmRpc3RhbmNlIHx8IGVsWyByZWYgPT09ICJ0b3AiID8gIm91dGVySGVpZ2h0IiA6ICJvdXRlcldpZHRoIiBdKCB0cnVlICk7CgoJJC5lZmZlY3RzLmNyZWF0ZVdyYXBwZXIoIGVsICkuY3NzKHsKCQlvdmVyZmxvdzogImhpZGRlbiIKCX0pOwoKCWlmICggc2hvdyApIHsKCQllbC5jc3MoIHJlZiwgcG9zaXRpdmVNb3Rpb24gPyAoaXNOYU4oZGlzdGFuY2UpID8gIi0iICsgZGlzdGFuY2UgOiAtZGlzdGFuY2UpIDogZGlzdGFuY2UgKTsKCX0KCgkvLyBBbmltYXRpb24KCWFuaW1hdGlvblsgcmVmIF0gPSAoIHNob3cgPwoJCSggcG9zaXRpdmVNb3Rpb24gPyAiKz0iIDogIi09IikgOgoJCSggcG9zaXRpdmVNb3Rpb24gPyAiLT0iIDogIis9IikpICsKCQlkaXN0YW5jZTsKCgkvLyBBbmltYXRlCgllbC5hbmltYXRlKCBhbmltYXRpb24sIHsKCQlxdWV1ZTogZmFsc2UsCgkJZHVyYXRpb246IG8uZHVyYXRpb24sCgkJZWFzaW5nOiBvLmVhc2luZywKCQljb21wbGV0ZTogZnVuY3Rpb24oKSB7CgkJCWlmICggbW9kZSA9PT0gImhpZGUiICkgewoJCQkJZWwuaGlkZSgpOwoJCQl9CgkJCSQuZWZmZWN0cy5yZXN0b3JlKCBlbCwgcHJvcHMgKTsKCQkJJC5lZmZlY3RzLnJlbW92ZVdyYXBwZXIoIGVsICk7CgkJCWRvbmUoKTsKCQl9Cgl9KTsKfTsKCn0pKGpRdWVyeSk7CihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5lZmZlY3RzLmVmZmVjdC50cmFuc2ZlciA9IGZ1bmN0aW9uKCBvLCBkb25lICkgewoJdmFyIGVsZW0gPSAkKCB0aGlzICksCgkJdGFyZ2V0ID0gJCggby50byApLAoJCXRhcmdldEZpeGVkID0gdGFyZ2V0LmNzcyggInBvc2l0aW9uIiApID09PSAiZml4ZWQiLAoJCWJvZHkgPSAkKCJib2R5IiksCgkJZml4VG9wID0gdGFyZ2V0Rml4ZWQgPyBib2R5LnNjcm9sbFRvcCgpIDogMCwKCQlmaXhMZWZ0ID0gdGFyZ2V0Rml4ZWQgPyBib2R5LnNjcm9sbExlZnQoKSA6IDAsCgkJZW5kUG9zaXRpb24gPSB0YXJnZXQub2Zmc2V0KCksCgkJYW5pbWF0aW9uID0gewoJCQl0b3A6IGVuZFBvc2l0aW9uLnRvcCAtIGZpeFRvcCAsCgkJCWxlZnQ6IGVuZFBvc2l0aW9uLmxlZnQgLSBmaXhMZWZ0ICwKCQkJaGVpZ2h0OiB0YXJnZXQuaW5uZXJIZWlnaHQoKSwKCQkJd2lkdGg6IHRhcmdldC5pbm5lcldpZHRoKCkKCQl9LAoJCXN0YXJ0UG9zaXRpb24gPSBlbGVtLm9mZnNldCgpLAoJCXRyYW5zZmVyID0gJCggIjxkaXYgY2xhc3M9J3VpLWVmZmVjdHMtdHJhbnNmZXInPjwvZGl2PiIgKQoJCQkuYXBwZW5kVG8oIGRvY3VtZW50LmJvZHkgKQoJCQkuYWRkQ2xhc3MoIG8uY2xhc3NOYW1lICkKCQkJLmNzcyh7CgkJCQl0b3A6IHN0YXJ0UG9zaXRpb24udG9wIC0gZml4VG9wICwKCQkJCWxlZnQ6IHN0YXJ0UG9zaXRpb24ubGVmdCAtIGZpeExlZnQgLAoJCQkJaGVpZ2h0OiBlbGVtLmlubmVySGVpZ2h0KCksCgkJCQl3aWR0aDogZWxlbS5pbm5lcldpZHRoKCksCgkJCQlwb3NpdGlvbjogdGFyZ2V0Rml4ZWQgPyAiZml4ZWQiIDogImFic29sdXRlIgoJCQl9KQoJCQkuYW5pbWF0ZSggYW5pbWF0aW9uLCBvLmR1cmF0aW9uLCBvLmVhc2luZywgZnVuY3Rpb24oKSB7CgkJCQl0cmFuc2Zlci5yZW1vdmUoKTsKCQkJCWRvbmUoKTsKCQkJfSk7Cn07Cgp9KShqUXVlcnkpOwo=",
    "size": "435812"
}