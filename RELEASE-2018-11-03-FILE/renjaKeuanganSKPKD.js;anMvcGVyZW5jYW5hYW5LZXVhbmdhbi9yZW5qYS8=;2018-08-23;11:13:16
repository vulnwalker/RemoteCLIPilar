{
    "namaFile": "js\/perencanaanKeuangan\/renja\/renjaKeuanganSKPKD.js",
    "lastUpdate": "2018-08-23+11:13:16.84",
    "contentFile": "dmFyIHJlbmphS2V1YW5nYW5TS1BLREZpbHRlclNLUEQgPSBuZXcgU2twZENscyh7DQogIHByZWZpeDogInJlbmphS2V1YW5nYW5TS1BLRCIsDQogIGZvcm1OYW1lOiAicmVuamFLZXVhbmdhblNLUEtERm9ybSIsDQogIHBpbGloVXJ1c2FuZnRlcjogZnVuY3Rpb24oKSB7DQogICAgcmVuamFLZXVhbmdhblNLUEtELmZpbHRlclJlbmRlcigpOw0KICAgIC8vIHJlbmphS2V1YW5nYW5TS1BLRC5yZWZyZXNoTGlzdCh0cnVlKTsNCiAgfSwNCiAgcGlsaWhCaWRhbmdBZnRlcjogZnVuY3Rpb24oKSB7DQogICAgcmVuamFLZXVhbmdhblNLUEtELmZpbHRlclJlbmRlcigpOw0KICAgIC8vIHJlbmphS2V1YW5nYW5TS1BLRC5yZWZyZXNoTGlzdCh0cnVlKTsNCiAgfSwNCiAgcGlsaWhVbml0QWZ0ZXI6IGZ1bmN0aW9uKCkgew0KICAgIHJlbmphS2V1YW5nYW5TS1BLRC5maWx0ZXJSZW5kZXIoKTsNCiAgICAvLyByZW5qYUtldWFuZ2FuU0tQS0QucmVmcmVzaExpc3QodHJ1ZSk7DQogIH0sDQogIHBpbGloU3ViVW5pdEFmdGVyOiBmdW5jdGlvbigpIHsNCiAgICByZW5qYUtldWFuZ2FuU0tQS0QuZmlsdGVyUmVuZGVyKCk7DQogICAgLy8gcmVuamFLZXVhbmdhblNLUEtELnJlZnJlc2hMaXN0KHRydWUpOw0KICB9LA0KICBwaWxpaFNla3NpQWZ0ZXI6IGZ1bmN0aW9uKCkgew0KICAgIHJlbmphS2V1YW5nYW5TS1BLRC5maWx0ZXJSZW5kZXIoKTsNCiAgICAvLyByZW5qYUtldWFuZ2FuU0tQS0QucmVmcmVzaExpc3QodHJ1ZSk7DQogIH0NCn0pOw0KdmFyIHJlbmphS2V1YW5nYW5TS1BLRCA9IG5ldyBEYWZ0YXJPYmoyKHsNCglwcmVmaXggOiAncmVuamFLZXVhbmdhblNLUEtEJywNCgl1cmwgOiAncGdLZXUucGhwP1BnPXJlbmphS2V1YW5nYW5TS1BLRCcsDQoJZm9ybU5hbWUgOiAncmVuamFLZXVhbmdhblNLUEtERm9ybScsDQoJcmVuamFLZXVhbmdhblNLUEtEX2Zvcm0gOiAnMCcsDQoJbG9hZGluZzogZnVuY3Rpb24oKXsNCgkJdGhpcy50b3BCYXJSZW5kZXIoKTsNCgkJdGhpcy5maWx0ZXJSZW5kZXIoKTsNCgkJdGhpcy5kYWZ0YXJSZW5kZXIoKTsNCgkJdGhpcy5zdW1IYWxSZW5kZXIoKTsNCg0KCX0sDQogIC8vIGZpbHRlclJlbmRlckFmdGVyOiBmdW5jdGlvbigpIHsNCiAgLy8gICB0aGlzLmRhZnRhclJlbmRlcigpOw0KICAvLyB9LA0KCWRldGFpbDogZnVuY3Rpb24oKXsNCgkJLy9hbGVydCgnZGV0YWlsJyk7DQoJCXZhciBtZSA9IHRoaXM7DQoJCWVycm1zZyA9IHRoaXMuQ2VrQ2hlY2tib3goKTsNCgkJaWYoZXJybXNnID09Jycpew0KCQkJdmFyIGJveCA9IHRoaXMuR2V0Q2J4Q2hlY2tlZCgpOw0KCQkJLy9Vc2VyQWt0aXZpdGFzRGV0LmdlbkRldGFpbCgpOw0KDQoJCX1lbHNlew0KDQoJCQlhbGVydChlcnJtc2cpOw0KCQl9DQoNCgl9LA0KCUlucHV0QmFydTogZnVuY3Rpb24oKXsNCgl2YXIgbWUgPSB0aGlzOw0KDQoJCWVycm1zZyA9ICcnOw0KDQoJCWlmKCQoIiNmaWx0ZXJVcnVzYW4iKS52YWwoKSA9PSAnMDAnKXsNCgkJCWVycm1zZyA9ICJQaWxpaCBVcnVzYW4iOw0KCQl9ZWxzZSBpZigkKCIjZmlsdGVyQmlkYW5nIikudmFsKCkgPT0gJzAwJyl7DQoJCQllcnJtc2cgPSAiUGlsaWggQmlkYW5nIjsNCgkJfWVsc2UgaWYoJCgiI2ZpbHRlclNLUEQiKS52YWwoKSA9PSAnMDAnKXsNCgkJCWVycm1zZyA9ICJQaWxpaCBTS1BEIjsNCgkJfQ0KCQlpZihlcnJtc2cgPT0nJyl7DQogICAgICAkKCIjbmV3QmxhbmtQYWdlIikudmFsKCIxIik7DQoJCQl2YXIgbWUgPSB0aGlzOw0KCQkJdmFyIGFGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5mb3JtTmFtZSk7DQoJCQlhRm9ybS5hY3Rpb249ICdwZ0tldS5waHA\\/UGc9cmVuamFLZXVhbmdhblNLUEtEX2lucyI7DQogICAgICBhRm9ybS50YXJnZXQgPSAiX2JsYW5rIjsNCiAgICAgIGFGb3JtLnN1Ym1pdCgpOw0KICAgICAgYUZvcm0udGFyZ2V0ID0gIiI7DQogICAgfSBlbHNlIHsNCiAgICAgIGFsZXJ0KGVycm1zZyk7DQogICAgfQ0KICB9LA0KDQoJQ2FyaVByb2dyYW1LZWdpYXRhbiA6IGZ1bmN0aW9uKCl7DQoJCXBvcHVwUHJvZ3JhbS53aW5kb3dTYXZlQWZ0ZXI9IGZ1bmN0aW9uKCl7fTsNCgkJIGlmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiaycpLnZhbHVlID09ICcnKXsNCgkJIAlhbGVydCgiUElMSUggVVJVU0FOIFBST0dSQU0iKTsNCgkJIH1lbHNlIGlmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiaycpLnZhbHVlICE9ICcwJyAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2snKS52YWx1ZSA9PSAnJyApew0KCQkgCWFsZXJ0KCJQSUxJSCBCSURBTkcgUFJPR1JBTSIpOw0KCQkgfWVsc2V7DQoJCSAJIHBvcHVwUHJvZ3JhbS5maWx0ZXJBa3VuPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiaycpLnZhbHVlICsgIi4iICsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NrJykudmFsdWU7DQoJCSAJIHBvcHVwUHJvZ3JhbS53aW5kb3dTaG93KCk7DQoJCSB9DQoJfSwNCg0KCUNhcmlVcnVzYW5Qcm9ncmFtIDogZnVuY3Rpb24oKXsNCg0KCQkgcG9wdXBVcnVzYW4uZmlsdGVyQWt1bj0nMCc7DQoJCSBwb3B1cFVydXNhbi53aW5kb3dTaG93KCk7DQoJfSwNCg0KCUNhcmlCaWRhbmdQcm9ncmFtIDogZnVuY3Rpb24oKXsNCgkJIHBvcHVwVXJ1c2FuLndpbmRvd1NhdmVBZnRlcj0gZnVuY3Rpb24oKXt9Ow0KCQkgcG9wdXBVcnVzYW4uZmlsdGVyQWt1bj0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JrJykudmFsdWU7DQoJCSBpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmsnKS52YWx1ZSA9PSAnJyl7DQoJCSAJYWxlcnQoIlBJTElIIFVSVVNBTiBQUk9HUkFNIik7DQoJCSB9ZWxzZSBpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmsnKS52YWx1ZSA9PSAnMCcpew0KCQkgCWFsZXJ0KCJOT04gVVJVU0FOIFRJREFLIE1FTUlMSUtJIEJJREFORyIpOw0KCQkgfWVsc2V7DQoJCSAJIHBvcHVwVXJ1c2FuLndpbmRvd1Nob3coKTsNCgkJIH0NCg0KCX0sDQoNCglTaW1wYW46IGZ1bmN0aW9uKCl7DQoJCXZhciBtZT0gdGhpczsNCgkJdGhpcy5PbkVycm9yQ2xvc2UgPSBmYWxzZQ0KCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOw0KCQl2YXIgY292ZXIgPSB0aGlzLnByZWZpeCsnX2Zvcm1zaW1wYW4nOw0KCQlhZGRDb3ZlclBhZ2UyKGNvdmVyLDEsdHJ1ZSxmYWxzZSk7DQoJCXZhciB0YWh1bkphbWFrID0gKCAkKCIjdGFodW5KYW1hayIpLmlzKCc6Y2hlY2tlZCcpICkgPyAxIDogMDsNCgkJaWYoJCgiI3RhaHVuSmFtYWsiKS5jKXsNCg0KCQl9DQoJCSQuYWpheCh7DQoJCQl0eXBlOidQT1NUJywNCgkJCWRhdGE6JCgnIycrdGhpcy5wcmVmaXgrJ19mb3JtJykuc2VyaWFsaXplKCkrICImdGFodW5KYW1haz0iK3RhaHVuSmFtYWssDQoJCQl1cmw6IHRoaXMudXJsKycmdGlwZT1zaW1wYW4nLA0KCQkgIAlzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7DQoJCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOw0KCQkJCWRlbEVsZW0oY292ZXIpOw0KCQkJCS8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsNCgkJCQlpZihyZXNwLmVycj09Jycpew0KCQkJCQlpZihtZS5yZW5qYUtldWFuZ2FuU0tQS0RfZm9ybT09MCl7DQoJCQkJCQlpZiAoY29uZmlybSgnSW5wdXQgTGFnaSA\/JykpIHsNCgkgICAgCQkJCQkkLmFqYXgoew0KCQkJCQkJCQl0eXBlIDogJ1BPU1QnLA0KCQkJCQkJCQlkYXRhIDoge2MxIDogJCgnI2NtYlVydXNhbkZvcm0nKS52YWwoKSwNCgkJCQkJCQkJCQljICA6ICQoJyNjbWJCaWRhbmdGb3JtJykudmFsKCksDQoJCQkJCQkJCQkJZCAgOiAkKCcjY21iU0tQREZvcm0nKS52YWwoKQ0KCQkJCQkJCQkJCSB9LA0KCQkJCQkJCQl1cmwgIDogdGhpcy51cmwrJyZ0aXBlPWlucHV0TGFnaScsDQoJCQkJCQkJCXN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXsNCgkJCQkJCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsNCgkJCQkJCQkJCSQoJyNwbGFmb24nKS5hdHRyKCdyZWFkb25seScsIHRydWUpOw0KDQoJCQkJCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY21iVXJ1c2FuRm9ybSIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC51cnVzYW47DQoJCQkJCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY21iQmlkYW5nRm9ybSIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC5iaWRhbmc7DQoJCQkJCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY21iU0tQREZvcm0iKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQuc2twZDsNCg0KDQoNCgkJCQkJCQkJCSQoIiNzaXNhUGxhZm9uRGFyaURCIikudmFsKHJlc3AuY29udGVudC5zaXNhQnVhdEt1cmFuZyk7DQoJCQkJCQkJCQkkKCIjc2lzYVBsYWZvbiIpLnZhbCgkKCIjcGxhZm9uIikudmFsKCkgLSAkKCIjc2lzYVBsYWZvbkRhcmlEQiIpLnZhbCgpKTsNCgkJCQkJCQkJCSQoIiNjbWJVbml0Rm9ybSIpLnByb3AoJ3NlbGVjdGVkSW5kZXgnLCAwKTsNCgkJCQkJCQkJCSQoIiNjbWJTdWJVbml0Rm9ybSIpLnByb3AoJ3NlbGVjdGVkSW5kZXgnLCAwKTsNCgkJCQkJCQkJCSQoIiNsb2thc2lLZWdpYXRhbiIpLnZhbCgiIik7DQoJCQkJCQkJCQkkKCJzZWxlY3QjamVuaXNLZWdpYXRhbiIpLnByb3AoJ3NlbGVjdGVkSW5kZXgnLCAwKTsNCgkJCQkJCQkJCSQoIiN0YW5nZ2FsTXVsYWkiKS52YWwoIiIpOw0KCQkJCQkJCQkJJCgiI3RhbmdnYWxTZWxlc2FpIikudmFsKCIiKTsNCgkJCQkJCQkJCSQoIiN0YW5nZ2FsTXVsYWkiKS52YWwoIiIpOw0KCQkJCQkJCQkJJCgiI3RhaHVuSmFtYWsiKS5wcm9wKCdjaGVja2VkJyxmYWxzZSk7DQoJCQkJCQkJCQkkKCIjcGFndUluZGlrYXRpZiIpLnZhbCgiIik7DQoJCQkJCQkJCQkkKCIjcGx1cyIpLnZhbCgiIik7DQoJCQkJCQkJCQkkKCIjbWluIikudmFsKCIiKTsNCgkJCQkJCQkJCSQoIiNjbWJTdW1iZXJEYW5hIikucHJvcCgnc2VsZWN0ZWRJbmRleCcsIDApOw0KDQoJCQkJCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgia2V5UGFndSIpLnRleHRDb250ZW50ID0gIlJwLiI7DQoJCQkJCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgia2V5UFAiKS50ZXh0Q29udGVudCA9ICJScC4iOw0KCQkJCQkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImtleU1NIikudGV4dENvbnRlbnQgPSAiUnAuIjsNCg0KCQkJCQkJCQkJLypkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiQ1BUVSIpLnRleHRDb250ZW50ID0gIiI7DQoJCQkJCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiQ1BUSyIpLnRleHRDb250ZW50ID0gIiI7DQoJCQkJCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiSFRVIikudGV4dENvbnRlbnQgPSAiIjsNCgkJCQkJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJIVEsiKS50ZXh0Q29udGVudCA9ICIiOw0KCQkJCQkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIktUVSIpLnRleHRDb250ZW50ID0gIiI7DQoJCQkJCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiS1RLIikudGV4dENvbnRlbnQgPSAiIjsNCgkJCQkJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJNVFUiKS50ZXh0Q29udGVudCA9ICIiOw0KCQkJCQkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIk1USyIpLnRleHRDb250ZW50ID0gIiI7Ki8NCgkJCQkJCQkJCSQoJyNDUFRVJykudmFsKCIiKTsNCgkJCQkJCQkJCSQoJyNDUFRLJykudmFsKCIiKTsNCgkJCQkJCQkJCSQoJyNIVFUnKS52YWwoIiIpOw0KCQkJCQkJCQkJJCgnI0hUSycpLnZhbCgiIik7DQoJCQkJCQkJCQkkKCcjS1RVJykudmFsKCIiKTsNCgkJCQkJCQkJCSQoJyNLVEsnKS52YWwoIiIpOw0KCQkJCQkJCQkJJCgnI01UVScpLnZhbCgiIik7DQoJCQkJCQkJCQkkKCcjTVRLJykudmFsKCIiKTsNCgkJCQkJCQkJCS8vbGhvaCBrZWx1YXI6ICB0YXBpIGtvayBhbmVoIHRhZGkgcGVydGFtYSB3IGNvYmEga2VrIGdpbmkgZ2FrIGlsYW5nIGlrYWNhbmcga2FjYW5nDQoJCQkJCQkJCQkvL2FwYSA\/IHRhcjIgd2EgZCBwYW5nZ2lsDQoNCgkJCQkJCQkJCSQoIiNzYXNhcmFuS2VnaWF0YW4iKS52YWwoIiIpOw0KDQoNCgkJCQkJCQkJfQ0KCQkJCQkJCX0pOw0KCQkJCQkJfSBlbHNlIHsNCgkJCQkJCQltZS5DbG9zZSgpDQoJCQkJCQkJbWUucmVmcmVzaExpc3QodHJ1ZSk7DQoJCQkJCQl9DQoJCQkJCX1lbHNlew0KCQkJCQkJbWUuQ2xvc2UoKTsNCgkJCQkJCW1lLnJlZnJlc2hDb21ib3JlbmphS2V1YW5nYW5TS1BLRCgpOw0KCQkJCQl9DQoNCgkJCQl9ZWxzZXsNCgkJCQkJYWxlcnQocmVzcC5lcnIpOw0KCQkJCX0NCgkJICAJfQ0KCQl9KTsNCgl9LA0KICBMYXBvcmFuOiBmdW5jdGlvbigpew0KCQl2YXIgbWUgPSB0aGlzOw0KCQl2YXIgZXJyPScnOw0KCQl2YXIgY292ZXIgPSB0aGlzLnByZWZpeCsnX2Zvcm1jb3Zlcic7DQogICAgaWYoJCgiI2ZpbHRlclVydXNhbiIpLnZhbCgpID09ICcwMCcpew0KICAgICAgZXJyID0gIlBpbGloIFVydXNhbiI7DQogICAgfWVsc2UgaWYoJCgiI2ZpbHRlckJpZGFuZyIpLnZhbCgpID09ICcwMCcpew0KICAgICAgZXJyID0gIlBpbGloIEJpZGFuZyI7DQogICAgfWVsc2UgaWYoJCgiI2ZpbHRlclNLUEQiKS52YWwoKSA9PSAnMDAnKXsNCiAgICAgIGVyciA9ICJQaWxpaCBTS1BEIjsNCiAgICB9DQoJCWlmKGVycj09Jycpew0KCQkJZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz0naGlkZGVuJzsNCgkJCWFkZENvdmVyUGFnZTIoY292ZXIsMix0cnVlLGZhbHNlKTsNCgkJCSQuYWpheCh7DQoJCQkJdHlwZTonUE9TVCcsDQoJCQkJZGF0YTokKCcjJyt0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwNCgkJCSAgCXVybDogdGhpcy51cmwrJyZ0aXBlPUxhcG9yYW4nLA0KCQkJICAJc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgew0KCQkJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7DQoJCQkJCWlmIChyZXNwLmVyciA9PScnKXsNCgkJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7DQoJCQkJCQltZS5BZnRlckZvcm1CYXJ1KHJlc3ApOw0KICAgICAgICAgICAgJCgnI3RhbmdnYWxDZXRhaycpLmRhdGVwaWNrZXIoew0KCQkJCQkJCQkgIGRhdGVGb3JtYXQ6ICdkZC1tbS15eScsDQoJCQkJCQkJCQlzaG93QW5pbTogJ3NsaWRlRG93bicsDQoJCQkJCQkJCSAgaW5saW5lOiB0cnVlLA0KCQkJCQkJCQkJc2hvd09uOiAiYnV0dG9uIiwNCgkJICAgICAJCQkJCWJ1dHRvbkltYWdlOiAiaW1hZ2VzL2NhbGVuZGFyLmdpZiIsDQoJCSAgICAgIAkJCQlidXR0b25JbWFnZU9ubHk6IHRydWUsDQoJCQkJCQkJCQljaGFuZ2VNb250aDogdHJ1ZSwNCgkJCQkJCQkJCWNoYW5nZVllYXI6IGZhbHNlLA0KCQkJCQkJCQkJeWVhclJhbmdlOiByZXNwLmNvbnRlbnQueWVhclJhbmdlLA0KCQkJCQkJCQkJYnV0dG9uVGV4dCA6ICcnLA0KCQkJCQkJCQkJZGVmYXVsdERhdGU6ICswDQoJCQkJCQkJfSk7DQoJCQkJCX1lbHNlew0KCQkJCQkJYWxlcnQocmVzcC5lcnIpOw0KCQkJCQkJZGVsRWxlbShjb3Zlcik7DQoJCQkJCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdhdXRvJzsNCgkJCQkJfQ0KDQoJCQkgIAl9DQoJCQl9KTsNCgkJfWVsc2V7DQoJCQlhbGVydChlcnIpOw0KCQl9DQoJfSwNCiAgbmV3VGFuZGFUYW5nYW5nYW46IGZ1bmN0aW9uKCl7DQogICAgdmFyIG1lID0gdGhpczsNCiAgICB2YXIgZXJyPScnOw0KICAgIHZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybWNvdmVyVGFuZGFUYW5nYW4nOw0KDQogICAgaWYoZXJyPT0nJyl7DQogICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOw0KICAgICAgYWRkQ292ZXJQYWdlMihjb3Zlciw5OSx0cnVlLGZhbHNlKTsNCiAgICAgICQuYWpheCh7DQogICAgICAgIHR5cGU6J1BPU1QnLA0KICAgICAgICBkYXRhOiQoJyMnK3RoaXMucHJlZml4KyJfZm9ybSIpLnNlcmlhbGl6ZSgpLA0KICAgICAgICAgIHVybDogdGhpcy51cmwrJyZ0aXBlPW5ld1RhbmRhVGFuZ2FuZ2FuJywNCiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7DQogICAgICAgICAgdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOw0KICAgICAgICAgIGlmIChyZXNwLmVyciA9PScnKXsNCiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7DQogICAgICAgICAgICBtZS5BZnRlckZvcm1CYXJ1KHJlc3ApOw0KICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgYWxlcnQocmVzcC5lcnIpOw0KICAgICAgICAgICAgZGVsRWxlbShjb3Zlcik7DQogICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdhdXRvJzsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICB9DQogICAgICB9KTsNCiAgICB9ZWxzZXsNCiAgICAgIGFsZXJ0KGVycik7DQogICAgfQ0KICB9LA0KICBjbG9zZVRhbmRhVGFuZ2FuRm9ybTogZnVuY3Rpb24oKXsNCiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCsnX2Zvcm1jb3ZlclRhbmRhVGFuZ2FuJzsNCiAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb3ZlcikpIGRlbEVsZW0oY292ZXIpOw0KICAgIGlmKHRpcGU9PW51bGwpew0KICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz0nYXV0byc7DQogICAgfQ0KICB9LA0KICBwaWxpaFBhbmdrYXQgOiBmdW5jdGlvbigpew0KICB2YXIgbWUgPSB0aGlzOw0KICAgICQuYWpheCh7DQogICAgICB1cmw6IHRoaXMudXJsKycmdGlwZT1waWxpaFBhbmdrYXQnLA0KICAgICAgdHlwZSA6ICdQT1NUJywNCiAgICAgIGRhdGE6ew0KICAgICAgICBjMQk6ICQoIiNmaWx0ZXJVcnVzYW4iKS52YWwoKSwNCiAgICAgICAgYyAgIDogJCgiI2ZpbHRlckJpZGFuZyIpLnZhbCgpLA0KICAgICAgICBkICAgOiAkKCIjZmlsdGVyU0tQRCIpLnZhbCgpLA0KICAgICAgICBkYzEgOiAkKCIjZGMxIikudmFsKCksDQogICAgICAgIGRjICA6ICQoIiNkYyIpLnZhbCgpLA0KICAgICAgICBkZCAgOiAkKCIjZGQiKS52YWwoKSwNCiAgICAgICAga2F0ZWdvcmkgICAgICA6ICQoIiNrYXRlZ29yaSIpLnZhbCgpLA0KICAgICAgICBuYW1hcGVnYXdhaSAgIDogJCgiI25hbWFwZWdhd2FpIikudmFsKCksDQogICAgICAgIG5pcHBlZ2F3YWkgICAgOiAkKCIjbmlwcGVnYXdhaSIpLnZhbCgpLA0KICAgICAgICBwYW5na2F0YWtoaXIgIDogJCgiI3BhbmdrYXRha2hpciIpLnZhbCgpLA0KICAgICAgICBnb2xhbmdfYWtoaXIgIDogJCgiI2dvbGFuZ19ha2hpciIpLnZhbCgpLA0KICAgICAgICBqYWJhdGFuICAgICAgIDogJCgiI2phYmF0YW4iKS52YWwoKSwNCiAgICAgICAgZXNlbG9uX2FraGlyICA6ICQoIiNlc2Vsb25fYWtoaXIiKS52YWwoKSwNCiAgICAgIH0sDQogICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7DQogICAgICB2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7DQogICAgICBpZihyZXNwLmVyciA9PSAnJyl7DQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnb2xhbmdfYWtoaXInKS52YWx1ZSA9IHJlc3AuY29udGVudDsNCiAgICAgIH1lbHNlew0KICAgICAgICBhbGVydChyZXNwLmVycik7DQogICAgICB9DQogICAgfQ0KICAgIH0pOw0KICB9LA0KICBzYXZlTmV3VGFuZGFUYW5nYW46IGZ1bmN0aW9uKCl7DQogICAgdmFyIG1lPSB0aGlzOw0KICAgIHRoaXMuT25FcnJvckNsb3NlID0gZmFsc2UNCiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOw0KICAgIHZhciBjb3ZlciA9ICdyZW5qYUFzZXQnKydfZm9ybXNpbXBhbic7DQogICAgYWRkQ292ZXJQYWdlMihjb3ZlciwxLHRydWUsZmFsc2UpOw0KICAgICQuYWpheCh7DQogICAgICB0eXBlOidQT1NUJywNCiAgICAgIGRhdGE6ew0KICAgICAgICBjMQk6ICQoIiNjMSIpLnZhbCgpLA0KICAgICAgICAgIGMgICA6ICQoIiNjIikudmFsKCksDQogICAgICAgICAgZCAgIDogJCgiI2QiKS52YWwoKSwNCiAgICAgICAgICBkYzEgOiAkKCIjZGMxIikudmFsKCksDQogICAgICAgICAgZGMgIDogJCgiI2RjIikudmFsKCksDQogICAgICAgICAgZGQgIDogJCgiI2RkIikudmFsKCksDQogICAgICAgICAga2F0ZWdvcmkgICAgICA6ICQoIiNrYXRlZ29yaSIpLnZhbCgpLA0KICAgICAgICAgIG5hbWFwZWdhd2FpICAgOiAkKCIjbmFtYXBlZ2F3YWkiKS52YWwoKSwNCiAgICAgICAgICBuaXBwZWdhd2FpICAgIDogJCgiI25pcHBlZ2F3YWkiKS52YWwoKSwNCiAgICAgICAgICBwYW5na2F0YWtoaXIgIDogJCgiI3BhbmdrYXRha2hpciIpLnZhbCgpLA0KICAgICAgICAgIGdvbGFuZ19ha2hpciAgOiAkKCIjZ29sYW5nX2FraGlyIikudmFsKCksDQogICAgICAgICAgamFiYXRhbiAgICAgICA6ICQoIiNqYWJhdGFuIikudmFsKCksDQogICAgICAgICAgZXNlbG9uX2FraGlyICA6ICQoIiNlc2Vsb25fYWtoaXIiKS52YWwoKSwNCiAgICAgIH0sDQogICAgICB1cmw6IHRoaXMudXJsKycmdGlwZT1zYXZlTmV3VGFuZGFUYW5nYW4nLA0KICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7DQogICAgICAgIHZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsNCiAgICAgICAgZGVsRWxlbShjb3Zlcik7DQogICAgICAgIC8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsNCiAgICAgICAgaWYocmVzcC5lcnI9PScnKXsNCiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWRQZW5hbmRhVGFuZ2FuJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LmNvbWJvdHRkOw0KICAgICAgICAgIG1lLmNsb3NlVGFuZGFUYW5nYW5Gb3JtKCk7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsNCiAgICAgICAgfQ0KICAgICAgICB9DQogICAgfSk7DQogIH0sDQogIHZpZXdMYXBvcmFuOiBmdW5jdGlvbigpIHsNCiAgICB2YXIgbWUgPSB0aGlzOw0KICAgIGVycm1zZyA9ICIiOw0KICAgIGlmIChlcnJtc2cgPT0gIiIpIHsNCiAgICAgIHZhciBtZSA9IHRoaXM7DQogICAgICB2YXIgYUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnByZWZpeCsiX2Zvcm0iKTsNCiAgICAgIGFGb3JtLmFjdGlvbiA9ICJwZ0tldS5waHA\/UGc9cmVuamFLZXVhbmdhblNLUEtEJnRpcGU9dmlld0xhcG9yYW4iOw0KICAgICAgYUZvcm0udGFyZ2V0ID0gIl9ibGFuayI7DQogICAgICBhRm9ybS5zdWJtaXQoKTsNCiAgICAgIGFGb3JtLnRhcmdldCA9ICIiOw0KICAgIH0gZWxzZSB7DQogICAgICBhbGVydChlcnJtc2cpOw0KICAgIH0NCiAgfSwNCn0pOw0K",
    "size": "22374"
}