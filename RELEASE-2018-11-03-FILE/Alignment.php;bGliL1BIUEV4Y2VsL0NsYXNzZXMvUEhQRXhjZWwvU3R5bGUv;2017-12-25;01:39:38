{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Style\/Alignment.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/ICd0JyA6ICdmJykgLgogICAgICAgICAgICAoJHRoaXMtPnNocmlua1RvRml0ID8gJ3QnIDogJ2YnKSAuCiAgICAgICAgICAgICR0aGlzLT5pbmRlbnQgLgogICAgICAgICAgICAkdGhpcy0+cmVhZG9yZGVyIC4KICAgICAgICAgICAgX19DTEFTU19fCiAgICAgICAgKTsKICAgIH0KfQo=",
    "size": "13217"
}