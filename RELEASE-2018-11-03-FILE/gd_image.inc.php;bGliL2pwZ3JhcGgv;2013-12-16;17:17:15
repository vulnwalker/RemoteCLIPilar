{
    "namaFile": "lib\/jpgraph\/gd_image.inc.php",
    "lastUpdate": "2013-12-16+17:17:15.00",
    "contentFile": "\\/Iik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkYUltYWdlLT5TdHJlYW0oJGFTdHJva2VGaWxlTmFtZSk7CiAgICAgICAgICAgICAgICAkbG9jayA9IGZsb2NrKCRmZCwgTE9DS19VTik7CiAgICAgICAgICAgICAgICBmY2xvc2UoJGZkKTsKCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkYUltYWdlLT5TdHJlYW0oJGFTdHJva2VGaWxlTmFtZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmKCAkYUNhY2hlRmlsZU5hbWUgIT0gJycgJiYgVVNFX0NBQ0hFKSB7CgogICAgICAgICAgICAkYUNhY2hlRmlsZU5hbWUgPSAkdGhpcy0+Y2FjaGVfZGlyIC4gJGFDYWNoZUZpbGVOYW1lOwogICAgICAgICAgICBpZiggZmlsZV9leGlzdHMoJGFDYWNoZUZpbGVOYW1lKSApIHsKICAgICAgICAgICAgICAgIGlmKCAhJGFJbmxpbmUgKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgYXJlIGdlbmVyYXRpbmcgaW1hZ2Ugb2ZmLWxpbmUgKGp1c3Qgd3JpdGluZyB0byB0aGUgY2FjaGUpCiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHRoZSBmaWxlIGV4aXN0cyBhbmQgaXMgc3RpbGwgdmFsaWQgKG5vIHRpbWVvdXQpCiAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiBkbyBub3RoaW5nLCBqdXN0IHJldHVybi4KICAgICAgICAgICAgICAgICAgICAkZGlmZj10aW1lKCktZmlsZW10aW1lKCRhQ2FjaGVGaWxlTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgaWYoICRkaWZmIDwgMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgSnBHcmFwaEVycm9yOjpSYWlzZUwoMjUxMTIsJGFDYWNoZUZpbGVOYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8oIiBDYWNoZWQgaW1hZ2VmaWxlICgkYUNhY2hlRmlsZU5hbWUpIGhhcyBmaWxlIGRhdGUgaW4gdGhlIGZ1dHVyZSEhIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKCAkdGhpcy0+dGltZW91dD4wICYmICgkZGlmZiA8PSAkdGhpcy0+dGltZW91dCo2MCkgKSByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgbG9jayAodG8gbWFrZSBzdXJlIG5vIHJlYWRlcnMgYXJlIHRyeWluZyB0byBhY2Nlc3MgdGhlIGltYWdlKQogICAgICAgICAgICAgICAgJGZkID0gZm9wZW4oJGFDYWNoZUZpbGVOYW1lLCd3Jyk7CiAgICAgICAgICAgICAgICAkbG9jayA9IGZsb2NrKCRmZCwgTE9DS19FWCk7CgogICAgICAgICAgICAgICAgaWYoICFAdW5saW5rKCRhQ2FjaGVGaWxlTmFtZSkgKSB7CiAgICAgICAgICAgICAgICAgICAgJGxvY2sgPSBmbG9jaygkZmQsIExPQ0tfVU4pOwogICAgICAgICAgICAgICAgICAgIEpwR3JhcGhFcnJvcjo6UmFpc2VMKDI1MTEzLCRhU3Ryb2tlRmlsZU5hbWUpOwogICAgICAgICAgICAgICAgICAgIC8vKCIgQ2FuJ3QgZGVsZXRlIGNhY2hlZCBpbWFnZSAkYVN0cm9rZUZpbGVOYW1lLiBQZXJtaXNzaW9uIHByb2JsZW0\/Iik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkYUltYWdlLT5TdHJlYW0oJGFDYWNoZUZpbGVOYW1lKTsKICAgICAgICAgICAgICAgICRsb2NrID0gZmxvY2soJGZkLCBMT0NLX1VOKTsKICAgICAgICAgICAgICAgIGZjbG9zZSgkZmQpOwoKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICR0aGlzLT5NYWtlRGlycyhkaXJuYW1lKCRhQ2FjaGVGaWxlTmFtZSkpOwogICAgICAgICAgICAgICAgaWYoICFpc193cml0ZWFibGUoZGlybmFtZSgkYUNhY2hlRmlsZU5hbWUpKSApIHsKICAgICAgICAgICAgICAgICAgICBKcEdyYXBoRXJyb3I6OlJhaXNlTCgyNTExNCwkYUNhY2hlRmlsZU5hbWUpOwogICAgICAgICAgICAgICAgICAgIC8vKCdQSFAgaGFzIG5vdCBlbm91Z2ggcGVybWlzc2lvbnMgdG8gd3JpdGUgdG8gdGhlIGNhY2hlIGZpbGUgJy4kYUNhY2hlRmlsZU5hbWUuJy4gUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IHRoZSB1c2VyIHJ1bm5pbmcgUEhQIGhhcyB3cml0ZSBwZXJtaXNzaW9uIGZvciB0aGlzIGZpbGUgaWYgeW91IHdhbiB0byB1c2UgdGhlIGNhY2hlIHN5c3RlbSB3aXRoIEpwR3JhcGguJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkYUltYWdlLT5TdHJlYW0oJGFDYWNoZUZpbGVOYW1lKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHJlcz10cnVlOwogICAgICAgICAgICAvLyBTZXQgZ3JvdXAgdG8gc3BlY2lmaWVkCiAgICAgICAgICAgIGlmKCBDQUNIRV9GSUxFX0dST1VQICE9ICcnICkgewogICAgICAgICAgICAgICAgJHJlcyA9IEBjaGdycCgkYUNhY2hlRmlsZU5hbWUsQ0FDSEVfRklMRV9HUk9VUCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoIENBQ0hFX0ZJTEVfTU9EICE9ICcnICkgewogICAgICAgICAgICAgICAgJHJlcyA9IEBjaG1vZCgkYUNhY2hlRmlsZU5hbWUsQ0FDSEVfRklMRV9NT0QpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCAhJHJlcyApIHsKICAgICAgICAgICAgICAgIEpwR3JhcGhFcnJvcjo6UmFpc2VMKDI1MTE1LCRhU3Ryb2tlRmlsZU5hbWUpOwogICAgICAgICAgICAgICAgLy8oIiBDYW4ndCBzZXQgcGVybWlzc2lvbiBmb3IgY2FjaGVkIGltYWdlICRhU3Ryb2tlRmlsZU5hbWUuIFBlcm1pc3Npb24gcHJvYmxlbT8iKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGFJbWFnZS0+RGVzdHJveSgpOwogICAgICAgICAgICBpZiggJGFJbmxpbmUgKSB7CiAgICAgICAgICAgICAgICBpZiAoJGZoID0gQGZvcGVuKCRhQ2FjaGVGaWxlTmFtZSwgInJiIikgKSB7CiAgICAgICAgICAgICAgICAgICAgJGFJbWFnZS0+SGVhZGVycygpOwogICAgICAgICAgICAgICAgICAgIGZwYXNzdGhydSgkZmgpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIEpwR3JhcGhFcnJvcjo6UmFpc2VMKDI1MTE2LCRhRmlsZSk7Ly8oIiBDYW50IG9wZW4gZmlsZSBmcm9tIGNhY2hlIFskYUZpbGVdIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZWlmKCAkYUlubGluZSApIHsKICAgICAgICAgICAgJGFJbWFnZS0+SGVhZGVycygpOwogICAgICAgICAgICAkYUltYWdlLT5TdHJlYW0oKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBJc1ZhbGlkKCRhQ2FjaGVGaWxlTmFtZSkgewogICAgICAgICRhQ2FjaGVGaWxlTmFtZSA9ICR0aGlzLT5jYWNoZV9kaXIuJGFDYWNoZUZpbGVOYW1lOwogICAgICAgIGlmICggVVNFX0NBQ0hFICYmIGZpbGVfZXhpc3RzKCRhQ2FjaGVGaWxlTmFtZSkgKSB7CiAgICAgICAgICAgICRkaWZmPXRpbWUoKS1maWxlbXRpbWUoJGFDYWNoZUZpbGVOYW1lKTsKICAgICAgICAgICAgaWYoICR0aGlzLT50aW1lb3V0PjAgJiYgKCRkaWZmID4gJHRoaXMtPnRpbWVvdXQqNjApICkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gU3RyZWFtSW1nRmlsZSgkYUltYWdlLCRhQ2FjaGVGaWxlTmFtZSkgewogICAgICAgICRhQ2FjaGVGaWxlTmFtZSA9ICR0aGlzLT5jYWNoZV9kaXIuJGFDYWNoZUZpbGVOYW1lOwogICAgICAgIGlmICggJGZoID0gQGZvcGVuKCRhQ2FjaGVGaWxlTmFtZSwgJ3JiJykgKSB7CiAgICAgICAgICAgICRsb2NrID0gZmxvY2soJGZoLCBMT0NLX1NIKTsKICAgICAgICAgICAgJGFJbWFnZS0+SGVhZGVycygpOwogICAgICAgICAgICBmcGFzc3RocnUoJGZoKTsKICAgICAgICAgICAgJGxvY2sgPSBmbG9jaygkZmgsIExPQ0tfVU4pOwogICAgICAgICAgICBmY2xvc2UoJGZoKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBKcEdyYXBoRXJyb3I6OlJhaXNlTCgyNTExNywkYUNhY2hlRmlsZU5hbWUpOy8vKCIgQ2FuJ3Qgb3BlbiBjYWNoZWQgaW1hZ2UgXCIkYUNhY2hlRmlsZU5hbWVcIiBmb3IgcmVhZGluZy4iKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gQ2hlY2sgaWYgYSBnaXZlbiBpbWFnZSBpcyBpbiBjYWNoZSBhbmQgaW4gdGhhdCBjYXNlCiAgICAvLyBwYXNzIGl0IGRpcmVjdGx5IG9uIHRvIHdlYiBicm93c2VyLiBSZXR1cm4gZmFsc2UgaWYgdGhlCiAgICAvLyBpbWFnZSBmaWxlIGRvZXNuJ3QgZXhpc3Qgb3IgZXhpc3RzIGJ1dCBpcyB0byBvbGQKICAgIGZ1bmN0aW9uIEdldEFuZFN0cmVhbSgkYUltYWdlLCRhQ2FjaGVGaWxlTmFtZSkgewogICAgICAgIGlmKCAkdGhpcy0+SXN2YWxpZCgkYUNhY2hlRmlsZU5hbWUpICkgewogICAgICAgICAgICAkdGhpcy0+U3RyZWFtSW1nRmlsZSgkYUltYWdlLCRhQ2FjaGVGaWxlTmFtZSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIC8vLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBQUklWQVRFIE1FVEhPRFMKICAgIC8vIENyZWF0ZSBhbGwgbmVjZXNzYXJ5IGRpcmVjdG9yaWVzIGluIGEgcGF0aAogICAgZnVuY3Rpb24gTWFrZURpcnMoJGFGaWxlKSB7CiAgICAgICAgJGRpcnMgPSBhcnJheSgpOwogICAgICAgIC8vIEluIG9yZGVyIHRvIGJldHRlciB3b3JrIHdoZW4gb3Blbl9iYXNlZGlyIGlzIGVuYWJsZWQKICAgICAgICAvLyB3ZSBkbyBub3QgY3JlYXRlIGRpcmVjdG9yaWVzIGluIHRoZSByb290IHBhdGgKICAgICAgICB3aGlsZSAoICRhRmlsZSAhPSAnLycgJiYgIShmaWxlX2V4aXN0cygkYUZpbGUpKSApIHsKICAgICAgICAgICAgJGRpcnNbXSA9ICRhRmlsZS4nLyc7CiAgICAgICAgICAgICRhRmlsZSA9IGRpcm5hbWUoJGFGaWxlKTsKICAgICAgICB9CiAgICAgICAgZm9yICgkaSA9IHNpemVvZigkZGlycyktMTsgJGk+PTA7ICRpLS0pIHsKICAgICAgICAgICAgaWYoISBAbWtkaXIoJGRpcnNbJGldLDA3NzcpICkgewogICAgICAgICAgICAgICAgSnBHcmFwaEVycm9yOjpSYWlzZUwoMjUxMTgsJGFGaWxlKTsvLygiIENhbid0IGNyZWF0ZSBkaXJlY3RvcnkgJGFGaWxlLiBNYWtlIHN1cmUgUEhQIGhhcyB3cml0ZSBwZXJtaXNzaW9uIHRvIHRoaXMgZGlyZWN0b3J5LiIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIFdlIGFsc28gc3BlY2lmeSBtb2RlIGhlcmUgYWZ0ZXIgd2UgaGF2ZSBjaGFuZ2VkIGdyb3VwLgogICAgICAgICAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBpZiBBcGFjaGUgdXNlciBkb2Vzbid0IGJlbG9uZyB0aGUKICAgICAgICAgICAgLy8gZGVmYXVsdCBncm91cCBhbmQgaGVuY2UgY2FuJ3Qgc3BlY2lmeSBncm91cCBwZXJtaXNzaW9uCiAgICAgICAgICAgIC8vIGluIHRoZSBwcmV2aW91cyBta2RpcigpIGNhbGwKICAgICAgICAgICAgaWYoIENBQ0hFX0ZJTEVfR1JPVVAgIT0gIiIgKSB7CiAgICAgICAgICAgICAgICAkcmVzPXRydWU7CiAgICAgICAgICAgICAgICAkcmVzID1AY2hncnAoJGRpcnNbJGldLENBQ0hFX0ZJTEVfR1JPVVApOwogICAgICAgICAgICAgICAgJHJlcyA9IEBjaG1vZCgkZGlyc1skaV0sMDc3Nyk7CiAgICAgICAgICAgICAgICBpZiggISRyZXMgKSB7CiAgICAgICAgICAgICAgICAgICAgSnBHcmFwaEVycm9yOjpSYWlzZUwoMjUxMTksJGFGaWxlKTsvLygiIENhbid0IHNldCBwZXJtaXNzaW9ucyBmb3IgJGFGaWxlLiBQZXJtaXNzaW9uIHByb2JsZW1zPyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9IC8vIENMQVNTIENhY2hlCgo\/Pgo=",
    "size": "84881"
}