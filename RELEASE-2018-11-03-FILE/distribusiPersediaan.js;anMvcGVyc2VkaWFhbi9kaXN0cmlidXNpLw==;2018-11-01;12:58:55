{
    "namaFile": "js\/persediaan\/distribusi\/distribusiPersediaan.js",
    "lastUpdate": "2018-11-01+12:58:55.42",
    "contentFile": "\\\/UGc9ZGlzdHJpYnVzaVBlcnNlZGlhYW4mdGlwZT12aWV3TGFwb3JhbiI7CiAgICAgIGFGb3JtLnRhcmdldCA9ICJfYmxhbmsiOwogICAgICBhRm9ybS5zdWJtaXQoKTsKICAgICAgYUZvcm0udGFyZ2V0ID0gIiI7CiAgICB9IGVsc2UgewogICAgICBhbGVydChlcnJtc2cpOwogICAgfQogIH0sCiAgY2xvc2VUYW5kYVRhbmdhbkZvcm06IGZ1bmN0aW9uKCkgewogICAgdmFyIGNvdmVyID0gdGhpcy5wcmVmaXggKyAiX2Zvcm1jb3ZlclRhbmRhVGFuZ2FuIjsKICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb3ZlcikpIGRlbEVsZW0oY292ZXIpOwogICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICJhdXRvIjsKICB9LAogIHNhdmVOZXdUYW5kYVRhbmdhbjogZnVuY3Rpb24oKXsKCQl2YXIgbWU9IHRoaXM7CgkJdGhpcy5PbkVycm9yQ2xvc2UgPSBmYWxzZQoJCWRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3c9J2hpZGRlbic7CgkJdmFyIGNvdmVyID0gJ3JlbmphQXNldCcrJ19mb3Jtc2ltcGFuJzsKCQlhZGRDb3ZlclBhZ2UyKGNvdmVyLDEsdHJ1ZSxmYWxzZSk7CgkJJC5hamF4KHsKCQkJdHlwZTonUE9TVCcsCgkJCWRhdGE6ewoJCQkJYzEJOiAkKCIjYzEiKS52YWwoKSwKCQkJCQljICAgOiAkKCIjYyIpLnZhbCgpLAoJCQkJCWQgICA6ICQoIiNkIikudmFsKCksCgkJCQkJZSAgIDogJCgiI2UiKS52YWwoKSwKCQkJCQllMSAgIDogJCgiI2UxIikudmFsKCksCgkJCQkJa2F0ZWdvcmkgICAgICA6ICQoIiNrYXRlZ29yaSIpLnZhbCgpLAoJCQkJCW5hbWFwZWdhd2FpICAgOiAkKCIjbmFtYXBlZ2F3YWkiKS52YWwoKSwKCQkJCQluaXBwZWdhd2FpICAgIDogJCgiI25pcHBlZ2F3YWkiKS52YWwoKSwKCQkJCQlwYW5na2F0YWtoaXIgIDogJCgiI3BhbmdrYXRha2hpciIpLnZhbCgpLAoJCQkJCWdvbGFuZ19ha2hpciAgOiAkKCIjZ29sYW5nX2FraGlyIikudmFsKCksCgkJCQkJamFiYXRhbiAgICAgICA6ICQoIiNqYWJhdGFuIikudmFsKCksCgkJCQkJZXNlbG9uX2FraGlyICA6ICQoIiNlc2Vsb25fYWtoaXIiKS52YWwoKSwKCQkJfSwKCQkJdXJsOiB0aGlzLnVybCsnJnRpcGU9c2F2ZU5ld1RhbmRhVGFuZ2FuJywKCQkJCXN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsKCQkJCWRlbEVsZW0oY292ZXIpOwoJCQkJLy9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb3ZlcikuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50OwoJCQkJaWYocmVzcC5lcnI9PScnKXsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWRQZW5hbmRhVGFuZ2FuJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LmNvbWJvdHRkOwoJCQkJCW1lLmNsb3NlVGFuZGFUYW5nYW5Gb3JtKCk7CgkJCQl9ZWxzZXsKCQkJCQlhbGVydChyZXNwLmVycik7CgkJCQl9CgkJCQl9CgkJfSk7Cgl9LAp9KTsK",
    "size": "24294"
}