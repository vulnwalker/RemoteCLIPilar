{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Reader\/Excel2007.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKiBQSFBFeGNlbCByb290IGRpcmVjdG9yeSAqLwppZiAoIWRlZmluZWQoJ1BIUEVYQ0VMX1JPT1QnKSkgewogICAgLyoqCiAgICAgKiBAaWdub3JlCiAgICAgKi8KICAgIGRlZmluZSgnUEhQRVhDRUxfUk9PVCcsIGRpcm5hbWUoX19GSUxFX18pIC4gJy8uLi8uLi8nKTsKICAgIHJlcXVpcmUoUEhQRVhDRUxfUk9PVCAuICdQSFBFeGNlbC9BdXRvbG9hZGVyLnBocCcpOwp9CgovKioKICogUEhQRXhjZWxfUmVhZGVyX0V4Y2VsMjAwNwogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQogKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgogKgogKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAgMDIxMTAtMTMwMSAgVVNBCiAqCiAqIEBjYXRlZ29yeSAgIFBIUEV4Y2VsCiAqIEBwYWNrYWdlICAgIFBIUEV4Y2VsX1JlYWRlcgogKiBAY29weXJpZ2h0ICBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsIChodHRwOi8vd3d3LmNvZGVwbGV4LmNvbS9QSFBFeGNlbCkKICogQGxpY2Vuc2UgICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9sZ3BsLTIuMS50eHQgICAgTEdQTAogKiBAdmVyc2lvbiAgICAjI1ZFUlNJT04jIywgIyNEQVRFIyMKICovCmNsYXNzIFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDIwMDcgZXh0ZW5kcyBQSFBFeGNlbF9SZWFkZXJfQWJzdHJhY3QgaW1wbGVtZW50cyBQSFBFeGNlbF9SZWFkZXJfSVJlYWRlcgp7CiAgICAvKioKICAgICAqIFBIUEV4Y2VsX1JlZmVyZW5jZUhlbHBlciBpbnN0YW5jZQogICAgICoKICAgICAqIEB2YXIgUEhQRXhjZWxfUmVmZXJlbmNlSGVscGVyCiAgICAgKi8KICAgIHByaXZhdGUgJHJlZmVyZW5jZUhlbHBlciA9IG51bGw7CgogICAgLyoqCiAgICAgKiBQSFBFeGNlbF9SZWFkZXJfRXhjZWwyMDA3X1RoZW1lIGluc3RhbmNlCiAgICAgKgogICAgICogQHZhciBQSFBFeGNlbF9SZWFkZXJfRXhjZWwyMDA3X1RoZW1lCiAgICAgKi8KICAgIHByaXZhdGUgc3RhdGljICR0aGVtZSA9IG51bGw7CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYSBuZXcgUEhQRXhjZWxfUmVhZGVyX0V4Y2VsMjAwNyBpbnN0YW5jZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQogICAgewogICAgICAgICR0aGlzLT5yZWFkRmlsdGVyID0gbmV3IFBIUEV4Y2VsX1JlYWRlcl9EZWZhdWx0UmVhZEZpbHRlcigpOwogICAgICAgICR0aGlzLT5yZWZlcmVuY2VIZWxwZXIgPSBQSFBFeGNlbF9SZWZlcmVuY2VIZWxwZXI6OmdldEluc3RhbmNlKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDYW4gdGhlIGN1cnJlbnQgUEhQRXhjZWxfUmVhZGVyX0lSZWFkZXIgcmVhZCB0aGUgZmlsZT8KICAgICAqCiAgICAgKiBAcGFyYW0gICAgIHN0cmluZyAgICAgICAgICRwRmlsZW5hbWUKICAgICAqIEByZXR1cm4gICAgIGJvb2xlYW4KICAgICAqIEB0aHJvd3MgUEhQRXhjZWxfUmVhZGVyX0V4Y2VwdGlvbgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gY2FuUmVhZCgkcEZpbGVuYW1lKQogICAgewogICAgICAgIC8vIENoZWNrIGlmIGZpbGUgZXhpc3RzCiAgICAgICAgaWYgKCFmaWxlX2V4aXN0cygkcEZpbGVuYW1lKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfUmVhZGVyX0V4Y2VwdGlvbigiQ291bGQgbm90IG9wZW4gIiAuICRwRmlsZW5hbWUgLiAiIGZvciByZWFkaW5nISBGaWxlIGRvZXMgbm90IGV4aXN0LiIpOwogICAgICAgIH0KCiAgICAgICAgJHppcENsYXNzID0gUEhQRXhjZWxfU2V0dGluZ3M6OmdldFppcENsYXNzKCk7CgogICAgICAgIC8vIENoZWNrIGlmIHppcCBjbGFzcyBleGlzdHMKLy8gICAgICAgIGlmICghY2xhc3NfZXhpc3RzKCR6aXBDbGFzcywgZmFsc2UpKSB7Ci8vICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX1JlYWRlcl9FeGNlcHRpb24oJHppcENsYXNzIC4gIiBsaWJyYXJ5IGlzIG5vdCBlbmFibGVkIik7Ci8vICAgICAgICB9CgogICAgICAgICR4bCA9IGZhbHNlOwogICAgICAgIC8vIExvYWQgZmlsZQogICAgICAgICR6aXAgPSBuZXcgJHppcENsYXNzOwogICAgICAgIGlmICgkemlwLT5vcGVuKCRwRmlsZW5hbWUpID09PSB0cnVlKSB7CiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGl0IGlzIGFuIE9PWE1MIGFyY2hpdmUKICAgICAgICAgICAgJHJlbHMgPSBzaW1wbGV4bWxfbG9hZF9zdHJpbmcoJHRoaXMtPnNlY3VyaXR5U2NhbigkdGhpcy0+Z2V0RnJvbVppcEFyY2hpdmUoJHppcCwgIl9yZWxzLy5yZWxzIikpLCAnU2ltcGxlWE1MRWxlbWVudCcsIFBIUEV4Y2VsX1NldHRpbmdzOjpnZXRMaWJYbWxMb2FkZXJPcHRpb25zKCkpOwogICAgICAgICAgICBpZiAoJHJlbHMgIT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmVscy0+UmVsYXRpb25zaGlwIGFzICRyZWwpIHsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCRyZWxbIlR5cGUiXSkgewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL29mZmljZURvY3VtZW50IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYXNlbmFtZSgkcmVsWyJUYXJnZXQiXSkgPT0gJ3dvcmtib29rLnhtbCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkeGwgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkemlwLT5jbG9zZSgpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICR4bDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBSZWFkcyBuYW1lcyBvZiB0aGUgd29ya3NoZWV0cyBmcm9tIGEgZmlsZSwgd2l0aG91dCBwYXJzaW5nIHRoZSB3aG9sZSBmaWxlIHRvIGEgUEhQRXhjZWwgb2JqZWN0CiAgICAgKgogICAgICogQHBhcmFtICAgICBzdHJpbmcgICAgICAgICAkcEZpbGVuYW1lCiAgICAgKiBAdGhyb3dzICAgICBQSFBFeGNlbF9SZWFkZXJfRXhjZXB0aW9uCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBsaXN0V29ya3NoZWV0TmFtZXMoJHBGaWxlbmFtZSkKICAgIHsKICAgICAgICAvLyBDaGVjayBpZiBmaWxlIGV4aXN0cwogICAgICAgIGlmICghZmlsZV9leGlzdHMoJHBGaWxlbmFtZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX1JlYWRlcl9FeGNlcHRpb24oIkNvdWxkIG5vdCBvcGVuICIgLiAkcEZpbGVuYW1lIC4gIiBmb3IgcmVhZGluZyEgRmlsZSBkb2VzIG5vdCBleGlzdC4iKTsKICAgICAgICB9CgogICAgICAgICR3b3Jrc2hlZXROYW1lcyA9IGFycmF5KCk7CgogICAgICAgICR6aXBDbGFzcyA9IFBIUEV4Y2VsX1NldHRpbmdzOjpnZXRaaXBDbGFzcygpOwoKICAgICAgICAkemlwID0gbmV3ICR6aXBDbGFzczsKICAgICAgICAkemlwLT5vcGVuKCRwRmlsZW5hbWUpOwoKICAgICAgICAvLyAgICBUaGUgZmlsZXMgd2UncmUgbG9va2luZyBhdCBoZXJlIGFyZSBzbWFsbCBlbm91Z2ggdGhhdCBzaW1wbGVYTUwgaXMgbW9yZSBlZmZpY2llbnQgdGhhbiBYTUxSZWFkZXIKICAgICAgICAkcmVscyA9IHNpbXBsZXhtbF9sb2FkX3N0cmluZygKICAgICAgICAgICAgJHRoaXMtPnNlY3VyaXR5U2NhbigkdGhpcy0+Z2V0RnJvbVppcEFyY2hpdmUoJHppcCwgIl9yZWxzLy5yZWxzIiksICdTaW1wbGVYTUxFbGVtZW50JywgUEhQRXhjZWxfU2V0dGluZ3M6OmdldExpYlhtbExvYWRlck9wdGlvbnMoKSkKICAgICAgICApOyAvL34gaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3BhY2thZ2UvMjAwNi9yZWxhdGlvbnNoaXBzIik7CiAgICAgICAgZm9yZWFjaCAoJHJlbHMtPlJlbGF0aW9uc2hpcCBhcyAkcmVsKSB7CiAgICAgICAgICAgIHN3aXRjaCAoJHJlbFsiVHlwZSJdKSB7CiAgICAgICAgICAgICAgICBjYXNlICJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL29mZmljZURvY3VtZW50IjoKICAgICAgICAgICAgICAgICAgICAkeG1sV29ya2Jvb2sgPSBzaW1wbGV4bWxfbG9hZF9zdHJpbmcoCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5zZWN1cml0eVNjYW4oJHRoaXMtPmdldEZyb21aaXBBcmNoaXZlKCR6aXAsICJ7JHJlbFsnVGFyZ2V0J119IiksICdTaW1wbGVYTUxFbGVtZW50JywgUEhQRXhjZWxfU2V0dGluZ3M6OmdldExpYlhtbExvYWRlck9wdGlvbnMoKSkKICAgICAgICAgICAgICAgICAgICApOyAgLy9+IGh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9zcHJlYWRzaGVldG1sLzIwMDYvbWFpbiIpOwoKICAgICAgICAgICAgICAgICAgICBpZiAoJHhtbFdvcmtib29rLT5zaGVldHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJHhtbFdvcmtib29rLT5zaGVldHMtPnNoZWV0IGFzICRlbGVTaGVldCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgc2hlZXQgc2hvdWxkIGJlIHNraXBwZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3b3Jrc2hlZXROYW1lc1tdID0gKHN0cmluZykgJGVsZVNoZWV0WyJuYW1lIl07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICR6aXAtPmNsb3NlKCk7CgogICAgICAgIHJldHVybiAkd29ya3NoZWV0TmFtZXM7CiAgICB9CgoKICAgIC8qKgogICAgICogUmV0dXJuIHdvcmtzaGVldCBpbmZvIChOYW1lLCBMYXN0IENvbHVtbiBMZXR0ZXIsIExhc3QgQ29sdW1uIEluZGV4LCBUb3RhbCBSb3dzLCBUb3RhbCBDb2x1bW5zKQogICAgICoKICAgICAqIEBwYXJhbSAgIHN0cmluZyAgICAgJHBGaWxlbmFtZQogICAgICogQHRocm93cyAgIFBIUEV4Y2VsX1JlYWRlcl9FeGNlcHRpb24KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGxpc3RXb3Jrc2hlZXRJbmZvKCRwRmlsZW5hbWUpCiAgICB7CiAgICAgICAgLy8gQ2hlY2sgaWYgZmlsZSBleGlzdHMKICAgICAgICBpZiAoIWZpbGVfZXhpc3RzKCRwRmlsZW5hbWUpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9SZWFkZXJfRXhjZXB0aW9uKCJDb3VsZCBub3Qgb3BlbiAiIC4gJHBGaWxlbmFtZSAuICIgZm9yIHJlYWRpbmchIEZpbGUgZG9lcyBub3QgZXhpc3QuIik7CiAgICAgICAgfQoKICAgICAgICAkd29ya3NoZWV0SW5mbyA9IGFycmF5KCk7CgogICAgICAgICR6aXBDbGFzcyA9IFBIUEV4Y2VsX1NldHRpbmdzOjpnZXRaaXBDbGFzcygpOwoKICAgICAgICAkemlwID0gbmV3ICR6aXBDbGFzczsKICAgICAgICAkemlwLT5vcGVuKCRwRmlsZW5hbWUpOwoKICAgICAgICAkcmVscyA9IHNpbXBsZXhtbF9sb2FkX3N0cmluZygkdGhpcy0+c2VjdXJpdHlTY2FuKCR0aGlzLT5nZXRGcm9tWmlwQXJjaGl2ZSgkemlwLCAiX3JlbHMvLnJlbHMiKSksICdTaW1wbGVYTUxFbGVtZW50JywgUEhQRXhjZWxfU2V0dGluZ3M6OmdldExpYlhtbExvYWRlck9wdGlvbnMoKSk7IC8vfiBodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHMiKTsKICAgICAgICBmb3JlYWNoICgkcmVscy0+UmVsYXRpb25zaGlwIGFzICRyZWwpIHsKICAgICAgICAgICAgaWYgKCRyZWxbIlR5cGUiXSA9PSAiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9vZmZpY2VEb2N1bWVudCIpIHsKICAgICAgICAgICAgICAgICRkaXIgPSBkaXJuYW1lKCRyZWxbIlRhcmdldCJdKTsKICAgICAgICAgICAgICAgICRyZWxzV29ya2Jvb2sgPSBzaW1wbGV4bWxfbG9hZF9zdHJpbmcoJHRoaXMtPnNlY3VyaXR5U2NhbigkdGhpcy0+Z2V0RnJvbVppcEFyY2hpdmUoJHppcCwgIiRkaXIvX3JlbHMvIiAuIGJhc2VuYW1lKCRyZWxbIlRhcmdldCJdKSAuICIucmVscyIpKSwgJ1NpbXBsZVhNTEVsZW1lbnQnLCBQSFBFeGNlbF9TZXR0aW5nczo6Z2V0TGliWG1sTG9hZGVyT3B0aW9ucygpKTsgIC8vfiBodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHMiKTsKICAgICAgICAgICAgICAgICRyZWxzV29ya2Jvb2stPnJlZ2lzdGVyWFBhdGhOYW1lc3BhY2UoInJlbCIsICJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHMiKTsKCiAgICAgICAgICAgICAgICAkd29ya3NoZWV0cyA9IGFycmF5KCk7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmVsc1dvcmtib29rLT5SZWxhdGlvbnNoaXAgYXMgJGVsZSkgewogICAgICAgICAgICAgICAgICAgIGlmICgkZWxlWyJUeXBlIl0gPT0gImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvd29ya3NoZWV0IikgewogICAgICAgICAgICAgICAgICAgICAgICAkd29ya3NoZWV0c1soc3RyaW5nKSAkZWxlWyJJZCJdXSA9ICRlbGVbIlRhcmdldCJdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkeG1sV29ya2Jvb2sgPSBzaW1wbGV4bWxfbG9hZF9zdHJpbmcoJHRoaXMtPnNlY3VyaXR5U2NhbigkdGhpcy0+Z2V0RnJvbVppcEFyY2hpdmUoJHppcCwgInskcmVsWydUYXJnZXQnXX0iKSksICdTaW1wbGVYTUxFbGVtZW50JywgUEhQRXhjZWxfU2V0dGluZ3M6OmdldExpYlhtbExvYWRlck9wdGlvbnMoKSk7ICAvL34gaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3NwcmVhZHNoZWV0bWwvMjAwNi9tYWluIik7CiAgICAgICAgICAgICAgICBpZiAoJHhtbFdvcmtib29rLT5zaGVldHMpIHsKICAgICAgICAgICAgICAgICAgICAkZGlyID0gZGlybmFtZSgkcmVsWyJUYXJnZXQiXSk7CiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJHhtbFdvcmtib29rLT5zaGVldHMtPnNoZWV0IGFzICRlbGVTaGVldCkgewogICAgICAgICAgICAgICAgICAgICAgICAkdG1wSW5mbyA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dvcmtzaGVldE5hbWUnID0+IChzdHJpbmcpICRlbGVTaGVldFsibmFtZSJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhc3RDb2x1bW5MZXR0ZXInID0+ICdBJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYXN0Q29sdW1uSW5kZXgnID0+IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndG90YWxSb3dzJyA9PiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvdGFsQ29sdW1ucycgPT4gMCwKICAgICAgICAgICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICRmaWxlV29ya3NoZWV0ID0gJHdvcmtzaGVldHNbKHN0cmluZykgc2VsZjo6Z2V0QXJyYXlJdGVtKCRlbGVTaGVldC0+YXR0cmlidXRlcygiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcyIpLCAiaWQiKV07CgogICAgICAgICAgICAgICAgICAgICAgICAkeG1sID0gbmV3IFhNTFJlYWRlcigpOwogICAgICAgICAgICAgICAgICAgICAgICAkcmVzID0gJHhtbC0+eG1sKCR0aGlzLT5zZWN1cml0eVNjYW5GaWxlKCd6aXA6Ly8nLlBIUEV4Y2VsX1NoYXJlZF9GaWxlOjpyZWFscGF0aCgkcEZpbGVuYW1lKS4nIycuIiRkaXIvJGZpbGVXb3Jrc2hlZXQiKSwgbnVsbCwgUEhQRXhjZWxfU2V0dGluZ3M6OmdldExpYlhtbExvYWRlck9wdGlvbnMoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICR4bWwtPnNldFBhcnNlclByb3BlcnR5KDIsIHRydWUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgJGN1cnJDZWxscyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgkeG1sLT5yZWFkKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkeG1sLT5uYW1lID09ICdyb3cnICYmICR4bWwtPm5vZGVUeXBlID09IFhNTFJlYWRlcjo6RUxFTUVOVCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3cgPSAkeG1sLT5nZXRBdHRyaWJ1dGUoJ3InKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdG1wSW5mb1sndG90YWxSb3dzJ10gPSAkcm93OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0bXBJbmZvWyd0b3RhbENvbHVtbnMnXSA9IG1heCgkdG1wSW5mb1sndG90YWxDb2x1bW5zJ10sICRjdXJyQ2VsbHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyQ2VsbHMgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlaWYgKCR4bWwtPm5hbWUgPT0gJ2MnICYmICR4bWwtPm5vZGVUeXBlID09IFhNTFJlYWRlcjo6RUxFTUVOVCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyQ2VsbHMrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkdG1wSW5mb1sndG90YWxDb2x1bW5zJ10gPSBtYXgoJHRtcEluZm9bJ3RvdGFsQ29sdW1ucyddLCAkY3VyckNlbGxzKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHhtbC0+Y2xvc2UoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICR0bXBJbmZvWydsYXN0Q29sdW1uSW5kZXgnXSA9ICR0bXBJbmZvWyd0b3RhbENvbHVtbnMnXSAtIDE7CiAgICAgICAgICAgICAgICAgICAgICAgICR0bXBJbmZvWydsYXN0Q29sdW1uTGV0dGVyJ10gPSBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJHRtcEluZm9bJ2xhc3RDb2x1bW5JbmRleCddKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICR3b3Jrc2hlZXRJbmZvW10gPSAkdG1wSW5mbzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICR6aXAtPmNsb3NlKCk7CgogICAgICAgIHJldHVybiAkd29ya3NoZWV0SW5mbzsKICAgIH0KCiAgICBwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBjYXN0VG9Cb29sZWFuKCRjKQogICAgewovLyAgICAgICAgZWNobyAnSW5pdGlhbCBDYXN0IHRvIEJvb2xlYW4nLCBQSFBfRU9MOwogICAgICAgICR2YWx1ZSA9IGlzc2V0KCRjLT52KSA\/IChzdHJpbmcpICRjLT52IDogbnVsbDsKICAgICAgICBpZiAoJHZhbHVlID09ICcwJykgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlaWYgKCR2YWx1ZSA9PSAnMScpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIChib29sKSRjLT52OwogICAgICAgIH0KICAgICAgICByZXR1cm4gJHZhbHVlOwogICAgfQoKICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGNhc3RUb0Vycm9yKCRjKQogICAgewovLyAgICAgICAgZWNobyAnSW5pdGlhbCBDYXN0IHRvIEVycm9yJywgUEhQX0VPTDsKICAgICAgICByZXR1cm4gaXNzZXQoJGMtPnYpID8gKHN0cmluZykgJGMtPnYgOiBudWxsOwogICAgfQoKICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGNhc3RUb1N0cmluZygkYykKICAgIHsKLy8gICAgICAgIGVjaG8gJ0luaXRpYWwgQ2FzdCB0byBTdHJpbmcsIFBIUF9FT0w7CiAgICAgICAgcmV0dXJuIGlzc2V0KCRjLT52KSA\/IChzdHJpbmcpICRjLT52IDogbnVsbDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGNhc3RUb0Zvcm11bGEoJGMsICRyLCAmJGNlbGxEYXRhVHlwZSwgJiR2YWx1ZSwgJiRjYWxjdWxhdGVkVmFsdWUsICYkc2hhcmVkRm9ybXVsYXMsICRjYXN0QmFzZVR5cGUpCiAgICB7Ci8vICAgICAgICBlY2hvICdGb3JtdWxhJywgUEhQX0VPTDsKLy8gICAgICAgIGVjaG8gJyRjLT5mIGlzICcsICRjLT5mLCBQSFBfRU9MOwogICAgICAgICRjZWxsRGF0YVR5cGUgICAgICAgPSAnZic7CiAgICAgICAgJHZhbHVlICAgICAgICAgICAgICA9ICI9eyRjLT5mfSI7CiAgICAgICAgJGNhbGN1bGF0ZWRWYWx1ZSAgICA9IHNlbGY6OiRjYXN0QmFzZVR5cGUoJGMpOwoKICAgICAgICAvLyBTaGFyZWQgZm9ybXVsYT8KICAgICAgICBpZiAoaXNzZXQoJGMtPmZbJ3QnXSkgJiYgc3RydG9sb3dlcigoc3RyaW5nKSRjLT5mWyd0J10pID09ICdzaGFyZWQnKSB7Ci8vICAgICAgICAgICAgZWNobyAnU0hBUkVEIEZPUk1VTEEnLCBQSFBfRU9MOwogICAgICAgICAgICAkaW5zdGFuY2UgPSAoc3RyaW5nKSRjLT5mWydzaSddOwoKLy8gICAgICAgICAgICBlY2hvICdJbnN0YW5jZSBJRCA9ICcsICRpbnN0YW5jZSwgUEhQX0VPTDsKLy8KLy8gICAgICAgICAgICBlY2hvICdTaGFyZWQgRm9ybXVsYSBBcnJheTonLCBQSFBfRU9MOwovLyAgICAgICAgICAgIHByaW50X3IoJHNoYXJlZEZvcm11bGFzKTsKICAgICAgICAgICAgaWYgKCFpc3NldCgkc2hhcmVkRm9ybXVsYXNbKHN0cmluZykkYy0+Zlsnc2knXV0pKSB7Ci8vICAgICAgICAgICAgICAgIGVjaG8gJ1NFVFRJTkcgTkVXIFNIQVJFRCBGT1JNVUxBJywgUEhQX0VPTDsKLy8gICAgICAgICAgICAgICAgZWNobyAnTWFzdGVyIGlzICcsICRyLCBQSFBfRU9MOwovLyAgICAgICAgICAgICAgICBlY2hvICdGb3JtdWxhIGlzICcsICR2YWx1ZSwgUEhQX0VPTDsKICAgICAgICAgICAgICAgICRzaGFyZWRGb3JtdWxhc1skaW5zdGFuY2VdID0gYXJyYXkoJ21hc3RlcicgPT4gJHIsICdmb3JtdWxhJyA9PiAkdmFsdWUpOwovLyAgICAgICAgICAgICAgICBlY2hvICdOZXcgU2hhcmVkIEZvcm11bGEgQXJyYXk6JywgUEhQX0VPTDsKLy8gICAgICAgICAgICAgICAgcHJpbnRfcigkc2hhcmVkRm9ybXVsYXMpOwogICAgICAgICAgICB9IGVsc2UgewovLyAgICAgICAgICAgICAgICBlY2hvICdHRVRUSU5HIFNIQVJFRCBGT1JNVUxBJywgUEhQX0VPTDsKLy8gICAgICAgICAgICAgICAgZWNobyAnTWFzdGVyIGlzICcsICRzaGFyZWRGb3JtdWxhc1skaW5zdGFuY2VdWydtYXN0ZXInXSwgUEhQX0VPTDsKLy8gICAgICAgICAgICAgICAgZWNobyAnRm9ybXVsYSBpcyAnLCAkc2hhcmVkRm9ybXVsYXNbJGluc3RhbmNlXVsnZm9ybXVsYSddLCBQSFBfRU9MOwogICAgICAgICAgICAgICAgJG1hc3RlciA9IFBIUEV4Y2VsX0NlbGw6OmNvb3JkaW5hdGVGcm9tU3RyaW5nKCRzaGFyZWRGb3JtdWxhc1skaW5zdGFuY2VdWydtYXN0ZXInXSk7CiAgICAgICAgICAgICAgICAkY3VycmVudCA9IFBIUEV4Y2VsX0NlbGw6OmNvb3JkaW5hdGVGcm9tU3RyaW5nKCRyKTsKCiAgICAgICAgICAgICAgICAkZGlmZmVyZW5jZSA9IGFycmF5KDAsIDApOwogICAgICAgICAgICAgICAgJGRpZmZlcmVuY2VbMF0gPSBQSFBFeGNlbF9DZWxsOjpjb2x1bW5JbmRleEZyb21TdHJpbmcoJGN1cnJlbnRbMF0pIC0gUEhQRXhjZWxfQ2VsbDo6Y29sdW1uSW5kZXhGcm9tU3RyaW5nKCRtYXN0ZXJbMF0pOwogICAgICAgICAgICAgICAgJGRpZmZlcmVuY2VbMV0gPSAkY3VycmVudFsxXSAtICRtYXN0ZXJbMV07CgogICAgICAgICAgICAgICAgJHZhbHVlID0gJHRoaXMtPnJlZmVyZW5jZUhlbHBlci0+dXBkYXRlRm9ybXVsYVJlZmVyZW5jZXMoJHNoYXJlZEZvcm11bGFzWyRpbnN0YW5jZV1bJ2Zvcm11bGEnXSwgJ0ExJywgJGRpZmZlcmVuY2VbMF0sICRkaWZmZXJlbmNlWzFdKTsKLy8gICAgICAgICAgICAgICAgZWNobyAnQWRqdXN0ZWQgRm9ybXVsYSBpcyAnLCAkdmFsdWUsIFBIUF9FT0w7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgoKICAgIHByaXZhdGUgZnVuY3Rpb24gZ2V0RnJvbVppcEFyY2hpdmUoJGFyY2hpdmUsICRmaWxlTmFtZSA9ICcnKQogICAgewogICAgICAgIC8vIFJvb3QtcmVsYXRpdmUgcGF0aHMKICAgICAgICBpZiAoc3RycG9zKCRmaWxlTmFtZSwgJy8vJykgIT09IGZhbHNlKSB7CiAgICAgICAgICAgICRmaWxlTmFtZSA9IHN1YnN0cigkZmlsZU5hbWUsIHN0cnBvcygkZmlsZU5hbWUsICcvLycpICsgMSk7CiAgICAgICAgfQogICAgICAgICRmaWxlTmFtZSA9IFBIUEV4Y2VsX1NoYXJlZF9GaWxlOjpyZWFscGF0aCgkZmlsZU5hbWUpOwoKICAgICAgICAvLyBTYWRseSwgc29tZSAzcmQgcGFydHkgeGxzeCBnZW5lcmF0b3JzIGRvbid0IHVzZSBjb25zaXN0ZW50IGNhc2UgZm9yIGZpbGVuYW1pbmcKICAgICAgICAvLyAgICBzbyB3ZSBuZWVkIHRvIGxvYWQgY2FzZS1pbnNlbnNpdGl2ZWx5IGZyb20gdGhlIHppcCBmaWxlCiAgICAgICAgCiAgICAgICAgLy8gQXBhY2hlIFBPSSBmaXhlcwogICAgICAgICRjb250ZW50cyA9ICRhcmNoaXZlLT5nZXRGcm9tSW5kZXgoCiAgICAgICAgICAgICRhcmNoaXZlLT5sb2NhdGVOYW1lKCRmaWxlTmFtZSwgWklQQVJDSElWRTo6RkxfTk9DQVNFKQogICAgICAgICk7CiAgICAgICAgaWYgKCRjb250ZW50cyA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgJGNvbnRlbnRzID0gJGFyY2hpdmUtPmdldEZyb21JbmRleCgKICAgICAgICAgICAgICAgICRhcmNoaXZlLT5sb2NhdGVOYW1lKHN1YnN0cigkZmlsZU5hbWUsIDEpLCBaSVBBUkNISVZFOjpGTF9OT0NBU0UpCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJGNvbnRlbnRzOwogICAgfQoKCiAgICAvKioKICAgICAqIExvYWRzIFBIUEV4Y2VsIGZyb20gZmlsZQogICAgICoKICAgICAqIEBwYXJhbSAgICAgc3RyaW5nICAgICAgICAgJHBGaWxlbmFtZQogICAgICogQHJldHVybiAgUEhQRXhjZWwKICAgICAqIEB0aHJvd3MgICAgIFBIUEV4Y2VsX1JlYWRlcl9FeGNlcHRpb24KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGxvYWQoJHBGaWxlbmFtZSkKICAgIHsKICAgICAgICAvLyBDaGVjayBpZiBmaWxlIGV4aXN0cwogICAgICAgIGlmICghZmlsZV9leGlzdHMoJHBGaWxlbmFtZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX1JlYWRlcl9FeGNlcHRpb24oIkNvdWxkIG5vdCBvcGVuICIgLiAkcEZpbGVuYW1lIC4gIiBmb3IgcmVhZGluZyEgRmlsZSBkb2VzIG5vdCBleGlzdC4iKTsKICAgICAgICB9CgogICAgICAgIC8vIEluaXRpYWxpc2F0aW9ucwogICAgICAgICRleGNlbCA9IG5ldyBQSFBFeGNlbDsKICAgICAgICAkZXhjZWwtPnJlbW92ZVNoZWV0QnlJbmRleCgwKTsKICAgICAgICBpZiAoISR0aGlzLT5yZWFkRGF0YU9ubHkpIHsKICAgICAgICAgICAgJGV4Y2VsLT5yZW1vdmVDZWxsU3R5bGVYZkJ5SW5kZXgoMCk7IC8vIHJlbW92ZSB0aGUgZGVmYXVsdCBzdHlsZQogICAgICAgICAgICAkZXhjZWwtPnJlbW92ZUNlbGxYZkJ5SW5kZXgoMCk7IC8vIHJlbW92ZSB0aGUgZGVmYXVsdCBzdHlsZQogICAgICAgIH0KCiAgICAgICAgJHppcENsYXNzID0gUEhQRXhjZWxfU2V0dGluZ3M6OmdldFppcENsYXNzKCk7CgogICAgICAgICR6aXAgPSBuZXcgJHppcENsYXNzOwogICAgICAgICR6aXAtPm9wZW4oJHBGaWxlbmFtZSk7CgogICAgICAgIC8vICAgIFJlYWQgdGhlIHRoZW1lIGZpcnN0LCBiZWNhdXNlIHdlIG5lZWQgdGhlIGNvbG91ciBzY2hlbWUgd2hlbiByZWFkaW5nIHRoZSBzdHlsZXMKICAgICAgICAkd2JSZWxzID0gc2ltcGxleG1sX2xvYWRfc3RyaW5nKCR0aGlzLT5zZWN1cml0eVNjYW4oJHRoaXMtPmdldEZyb21aaXBBcmNoaXZlKCR6aXAsICJ4bC9fcmVscy93b3JrYm9vay54bWwucmVscyIpKSwgJ1NpbXBsZVhNTEVsZW1lbnQnLCBQSFBFeGNlbF9TZXR0aW5nczo6Z2V0TGliWG1sTG9hZGVyT3B0aW9ucygpKTsgLy9+IGh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwcyIpOwogICAgICAgIGZvcmVhY2ggKCR3YlJlbHMtPlJlbGF0aW9uc2hpcCBhcyAkcmVsKSB7CiAgICAgICAgICAgIHN3aXRjaCAoJHJlbFsiVHlwZSJdKSB7CiAgICAgICAgICAgICAgICBjYXNlICJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL3RoZW1lIjoKICAgICAgICAgICAgICAgICAgICAkdGhlbWVPcmRlckFycmF5ID0gYXJyYXkoJ2x0MScsICdkazEnLCAnbHQyJywgJ2RrMicpOwogICAgICAgICAgICAgICAgICAgICR0aGVtZU9yZGVyQWRkaXRpb25hbCA9IGNvdW50KCR0aGVtZU9yZGVyQXJyYXkpOwoKICAgICAgICAgICAgICAgICAgICAkeG1sVGhlbWUgPSBzaW1wbGV4bWxfbG9hZF9zdHJpbmcoJHRoaXMtPnNlY3VyaXR5U2NhbigkdGhpcy0+Z2V0RnJvbVppcEFyY2hpdmUoJHppcCwgInhsL3skcmVsWydUYXJnZXQnXX0iKSksICdTaW1wbGVYTUxFbGVtZW50JywgUEhQRXhjZWxfU2V0dGluZ3M6OmdldExpYlhtbExvYWRlck9wdGlvbnMoKSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX29iamVjdCgkeG1sVGhlbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICR4bWxUaGVtZU5hbWUgPSAkeG1sVGhlbWUtPmF0dHJpYnV0ZXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHhtbFRoZW1lID0gJHhtbFRoZW1lLT5jaGlsZHJlbigiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L21haW4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHRoZW1lTmFtZSA9IChzdHJpbmcpJHhtbFRoZW1lTmFtZVsnbmFtZSddOwoKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbG91clNjaGVtZSA9ICR4bWxUaGVtZS0+dGhlbWVFbGVtZW50cy0+Y2xyU2NoZW1lLT5hdHRyaWJ1dGVzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICRjb2xvdXJTY2hlbWVOYW1lID0gKHN0cmluZykkY29sb3VyU2NoZW1lWyduYW1lJ107CiAgICAgICAgICAgICAgICAgICAgICAgICRjb2xvdXJTY2hlbWUgPSAkeG1sVGhlbWUtPnRoZW1lRWxlbWVudHMtPmNsclNjaGVtZS0+Y2hpbGRyZW4oImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi9tYWluIik7CgogICAgICAgICAgICAgICAgICAgICAgICAkdGhlbWVDb2xvdXJzID0gYXJyYXkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGNvbG91clNjaGVtZSBhcyAkayA9PiAkeG1sQ29sb3VyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhlbWVQb3MgPSBhcnJheV9zZWFyY2goJGssICR0aGVtZU9yZGVyQXJyYXkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGVtZVBvcyA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhlbWVQb3MgPSAkdGhlbWVPcmRlckFkZGl0aW9uYWwrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkeG1sQ29sb3VyLT5zeXNDbHIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHhtbENvbG91ckRhdGEgPSAkeG1sQ29sb3VyLT5zeXNDbHItPmF0dHJpYnV0ZXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhlbWVDb2xvdXJzWyR0aGVtZVBvc10gPSAkeG1sQ29sb3VyRGF0YVsnbGFzdENsciddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlaWYgKGlzc2V0KCR4bWxDb2xvdXItPnNyZ2JDbHIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHhtbENvbG91ckRhdGEgPSAkeG1sQ29sb3VyLT5zcmdiQ2xyLT5hdHRyaWJ1dGVzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoZW1lQ29sb3Vyc1skdGhlbWVQb3NdID0gJHhtbENvbG91ckRhdGFbJ3ZhbCddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGY6OiR0aGVtZSA9IG5ldyBQSFBFeGNlbF9SZWFkZXJfRXhjZWwyMDA3X1RoZW1lKCR0aGVtZU5hbWUsICRjb2xvdXJTY2hlbWVOYW1lLCAkdGhlbWVDb2xvdXJzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRyZWxzID0gc2ltcGxleG1sX2xvYWRfc3RyaW5nKCR0aGlzLT5zZWN1cml0eVNjYW4oJHRoaXMtPmdldEZyb21aaXBBcmNoaXZlKCR6aXAsICJfcmVscy8ucmVscyIpKSwgJ1NpbXBsZVhNTEVsZW1lbnQnLCBQSFBFeGNlbF9TZXR0aW5nczo6Z2V0TGliWG1sTG9hZGVyT3B0aW9ucygpKTsgLy9+IGh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwcyIpOwogICAgICAgIGZvcmVhY2ggKCRyZWxzLT5SZWxhdGlvbnNoaXAgYXMgJHJlbCkgewogICAgICAgICAgICBzd2l0Y2ggKCRyZWxbIlR5cGUiXSkgewogICAgICAgICAgICAgICAgY2FzZSAiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3BhY2thZ2UvMjAwNi9yZWxhdGlvbnNoaXBzL21ldGFkYXRhL2NvcmUtcHJvcGVydGllcyI6CiAgICAgICAgICAgICAgICAgICAgJHhtbENvcmUgPSBzaW1wbGV4bWxfbG9hZF9zdHJpbmcoJHRoaXMtPnNlY3VyaXR5U2NhbigkdGhpcy0+Z2V0RnJvbVppcEFyY2hpdmUoJHppcCwgInskcmVsWydUYXJnZXQnXX0iKSksICdTaW1wbGVYTUxFbGVtZW50JywgUEhQRXhjZWxfU2V0dGluZ3M6OmdldExpYlhtbExvYWRlck9wdGlvbnMoKSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX29iamVjdCgkeG1sQ29yZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHhtbENvcmUtPnJlZ2lzdGVyWFBhdGhOYW1lc3BhY2UoImRjIiwgImh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIik7CiAgICAgICAgICAgICAgICAgICAgICAgICR4bWxDb3JlLT5yZWdpc3RlclhQYXRoTmFtZXNwYWNlKCJkY3Rlcm1zIiwgImh0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy8iKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHhtbENvcmUtPnJlZ2lzdGVyWFBhdGhOYW1lc3BhY2UoImNwIiwgImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvbWV0YWRhdGEvY29yZS1wcm9wZXJ0aWVzIik7CiAgICAgICAgICAgICAgICAgICAgICAgICRkb2NQcm9wcyA9ICRleGNlbC0+Z2V0UHJvcGVydGllcygpOwogICAgICAgICAgICAgICAgICAgICAgICAkZG9jUHJvcHMtPnNldENyZWF0b3IoKHN0cmluZykgc2VsZjo6Z2V0QXJyYXlJdGVtKCR4bWxDb3JlLT54cGF0aCgiZGM6Y3JlYXRvciIpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICRkb2NQcm9wcy0+c2V0TGFzdE1vZGlmaWVkQnkoKHN0cmluZykgc2VsZjo6Z2V0QXJyYXlJdGVtKCR4bWxDb3JlLT54cGF0aCgiY3A6bGFzdE1vZGlmaWVkQnkiKSkpOwogICAgICAgICAgICAgICAgICAgICAgICAkZG9jUHJvcHMtPnNldENyZWF0ZWQoc3RydG90aW1lKHNlbGY6OmdldEFycmF5SXRlbSgkeG1sQ29yZS0+eHBhdGgoImRjdGVybXM6Y3JlYXRlZCIpKSkpOyAvLyEgcmVzcGVjdCB4c2k6dHlwZQogICAgICAgICAgICAgICAgICAgICAgICAkZG9jUHJvcHMtPnNldE1vZGlmaWVkKHN0cnRvdGltZShzZWxmOjpnZXRBcnJheUl0ZW0oJHhtbENvcmUtPnhwYXRoKCJkY3Rlcm1zOm1vZGlmaWVkIikpKSk7IC8vISByZXNwZWN0IHhzaTp0eXBlCiAgICAgICAgICAgICAgICAgICAgICAgICRkb2NQcm9wcy0+c2V0VGl0bGUoKHN0cmluZykgc2VsZjo6Z2V0QXJyYXlJdGVtKCR4bWxDb3JlLT54cGF0aCgiZGM6dGl0bGUiKSkpOwogICAgICAgICAgICAgICAgICAgICAgICAkZG9jUHJvcHMtPnNldERlc2NyaXB0aW9uKChzdHJpbmcpIHNlbGY6OmdldEFycmF5SXRlbSgkeG1sQ29yZS0+eHBhdGgoImRjOmRlc2NyaXB0aW9uIikpKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGRvY1Byb3BzLT5zZXRTdWJqZWN0KChzdHJpbmcpIHNlbGY6OmdldEFycmF5SXRlbSgkeG1sQ29yZS0+eHBhdGgoImRjOnN1YmplY3QiKSkpOwogICAgICAgICAgICAgICAgICAgICAgICAkZG9jUHJvcHMtPnNldEtleXdvcmRzKChzdHJpbmcpIHNlbGY6OmdldEFycmF5SXRlbSgkeG1sQ29yZS0+eHBhdGgoImNwOmtleXdvcmRzIikpKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGRvY1Byb3BzLT5zZXRDYXRlZ29yeSgoc3RyaW5nKSBzZWxmOjpnZXRBcnJheUl0ZW0oJHhtbENvcmUtPnhwYXRoKCJjcDpjYXRlZ29yeSIpKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9leHRlbmRlZC1wcm9wZXJ0aWVzIjoKICAgICAgICAgICAgICAgICAgICAkeG1sQ29yZSA9IHNpbXBsZXhtbF9sb2FkX3N0cmluZygkdGhpcy0+c2VjdXJpdHlTY2FuKCR0aGlzLT5nZXRGcm9tWmlwQXJjaGl2ZSgkemlwLCAieyRyZWxbJ1RhcmdldCddfSIpKSwgJ1NpbXBsZVhNTEVsZW1lbnQnLCBQSFBFeGNlbF9TZXR0aW5nczo6Z2V0TGliWG1sTG9hZGVyT3B0aW9ucygpKTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXNfb2JqZWN0KCR4bWxDb3JlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkZG9jUHJvcHMgPSAkZXhjZWwtPmdldFByb3BlcnRpZXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCR4bWxDb3JlLT5Db21wYW55KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRvY1Byb3BzLT5zZXRDb21wYW55KChzdHJpbmcpICR4bWxDb3JlLT5Db21wYW55KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHhtbENvcmUtPk1hbmFnZXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZG9jUHJvcHMtPnNldE1hbmFnZXIoKHN0cmluZykgJHhtbENvcmUtPk1hbmFnZXIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9jdXN0b20tcHJvcGVydGllcyI6CiAgICAgICAgICAgICAgICAgICAgJHhtbENvcmUgPSBzaW1wbGV4bWxfbG9hZF9zdHJpbmcoJHRoaXMtPnNlY3VyaXR5U2NhbigkdGhpcy0+Z2V0RnJvbVppcEFyY2hpdmUoJHppcCwgInskcmVsWydUYXJnZXQnXX0iKSksICdTaW1wbGVYTUxFbGVtZW50JywgUEhQRXhjZWxfU2V0dGluZ3M6OmdldExpYlhtbExvYWRlck9wdGlvbnMoKSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX29iamVjdCgkeG1sQ29yZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGRvY1Byb3BzID0gJGV4Y2VsLT5nZXRQcm9wZXJ0aWVzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR4bWxDb3JlIGFzICR4bWxQcm9wZXJ0eSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxEYXRhT2ZmaWNlQXR0cmlidXRlcyA9ICR4bWxQcm9wZXJ0eS0+YXR0cmlidXRlcygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRjZWxsRGF0YU9mZmljZUF0dHJpYnV0ZXNbJ25hbWUnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcHJvcGVydHlOYW1lID0gKHN0cmluZykgJGNlbGxEYXRhT2ZmaWNlQXR0cmlidXRlc1snbmFtZSddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZWxsRGF0YU9mZmljZUNoaWxkcmVuID0gJHhtbFByb3BlcnR5LT5jaGlsZHJlbignaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvZG9jUHJvcHNWVHlwZXMnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXR0cmlidXRlVHlwZSA9ICRjZWxsRGF0YU9mZmljZUNoaWxkcmVuLT5nZXROYW1lKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF0dHJpYnV0ZVZhbHVlID0gKHN0cmluZykgJGNlbGxEYXRhT2ZmaWNlQ2hpbGRyZW4tPnskYXR0cmlidXRlVHlwZX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF0dHJpYnV0ZVZhbHVlID0gUEhQRXhjZWxfRG9jdW1lbnRQcm9wZXJ0aWVzOjpjb252ZXJ0UHJvcGVydHkoJGF0dHJpYnV0ZVZhbHVlLCAkYXR0cmlidXRlVHlwZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF0dHJpYnV0ZVR5cGUgPSBQSFBFeGNlbF9Eb2N1bWVudFByb3BlcnRpZXM6OmNvbnZlcnRQcm9wZXJ0eVR5cGUoJGF0dHJpYnV0ZVR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkb2NQcm9wcy0+c2V0Q3VzdG9tUHJvcGVydHkoJHByb3BlcnR5TmFtZSwgJGF0dHJpYnV0ZVZhbHVlLCAkYXR0cmlidXRlVHlwZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAvL1JpYmJvbgogICAgICAgICAgICAgICAgY2FzZSAiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvMjAwNi9yZWxhdGlvbnNoaXBzL3VpL2V4dGVuc2liaWxpdHkiOgogICAgICAgICAgICAgICAgICAgICRjdXN0b21VSSA9ICRyZWxbJ1RhcmdldCddOwogICAgICAgICAgICAgICAgICAgIGlmICghaXNfbnVsbCgkY3VzdG9tVUkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5yZWFkUmliYm9uKCRleGNlbCwgJGN1c3RvbVVJLCAkemlwKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL29mZmljZURvY3VtZW50IjoKICAgICAgICAgICAgICAgICAgICAkZGlyID0gZGlybmFtZSgkcmVsWyJUYXJnZXQiXSk7CiAgICAgICAgICAgICAgICAgICAgJHJlbHNXb3JrYm9vayA9IHNpbXBsZXhtbF9sb2FkX3N0cmluZygkdGhpcy0+c2VjdXJpdHlTY2FuKCR0aGlzLT5nZXRGcm9tWmlwQXJjaGl2ZSgkemlwLCAiJGRpci9fcmVscy8iIC4gYmFzZW5hbWUoJHJlbFsiVGFyZ2V0Il0pIC4gIi5yZWxzIikpLCAnU2ltcGxlWE1MRWxlbWVudCcsIFBIUEV4Y2VsX1NldHRpbmdzOjpnZXRMaWJYbWxMb2FkZXJPcHRpb25zKCkpOyAgLy9+IGh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwcyIpOwogICAgICAgICAgICAgICAgICAgICRyZWxzV29ya2Jvb2stPnJlZ2lzdGVyWFBhdGhOYW1lc3BhY2UoInJlbCIsICJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHMiKTsKCiAgICAgICAgICAgICAgICAgICAgJHNoYXJlZFN0cmluZ3MgPSBhcnJheSgpOwogICAgICAgICAgICAgICAgICAgICR4cGF0aCA9IHNlbGY6OmdldEFycmF5SXRlbSgkcmVsc1dvcmtib29rLT54cGF0aCgicmVsOlJlbGF0aW9uc2hpcFtAVHlwZT0naHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9zaGFyZWRTdHJpbmdzJ10iKSk7CiAgICAgICAgICAgICAgICAgICAgJHhtbFN0cmluZ3MgPSBzaW1wbGV4bWxfbG9hZF9zdHJpbmcoJHRoaXMtPnNlY3VyaXR5U2NhbigkdGhpcy0+Z2V0RnJvbVppcEFyY2hpdmUoJHppcCwgIiRkaXIvJHhwYXRoW1RhcmdldF0iKSksICdTaW1wbGVYTUxFbGVtZW50JywgUEhQRXhjZWxfU2V0dGluZ3M6OmdldExpYlhtbExvYWRlck9wdGlvbnMoKSk7ICAvL34gaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3NwcmVhZHNoZWV0bWwvMjAwNi9tYWluIik7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCR4bWxTdHJpbmdzKSAmJiBpc3NldCgkeG1sU3RyaW5ncy0+c2kpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR4bWxTdHJpbmdzLT5zaSBhcyAkdmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHZhbC0+dCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2hhcmVkU3RyaW5nc1tdID0gUEhQRXhjZWxfU2hhcmVkX1N0cmluZzo6Q29udHJvbENoYXJhY3Rlck9PWE1MMlBIUCgoc3RyaW5nKSAkdmFsLT50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZWlmIChpc3NldCgkdmFsLT5yKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzaGFyZWRTdHJpbmdzW10gPSAkdGhpcy0+cGFyc2VSaWNoVGV4dCgkdmFsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJHdvcmtzaGVldHMgPSBhcnJheSgpOwogICAgICAgICAgICAgICAgICAgICRtYWNyb3MgPSAkY3VzdG9tVUkgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRyZWxzV29ya2Jvb2stPlJlbGF0aW9uc2hpcCBhcyAkZWxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoJGVsZVsnVHlwZSddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL3dvcmtzaGVldCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdvcmtzaGVldHNbKHN0cmluZykgJGVsZVsiSWQiXV0gPSAkZWxlWyJUYXJnZXQiXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgdmJhUHJvamVjdCA\\/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGNbInMiXSAmJiAhJHRoaXMtPnJlYWREYXRhT25seSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIHN0eWxlIGluZGV4IG1lYW5zIDAsIGl0IHNlZW1zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGwtPnNldFhmSW5kZXgoaXNzZXQoJHN0eWxlc1tpbnR2YWwoJGNbInMiXSldKSA\\/KFxkKylcOihcZCspJC8nLCAkcmFuZ2UsICRtYXRjaGVzKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciByZXBlYXRpbmcgcm93cywgZS5nLiAnMToxJyBvciAnMTo1JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkb2NTaGVldC0+Z2V0UGFnZVNldHVwKCktPnNldFJvd3NUb1JlcGVhdEF0VG9wKGFycmF5KCRtYXRjaGVzWzFdLCAkbWF0Y2hlc1syXSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ194bG5tLlByaW50X0FyZWEnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmFuZ2VTZXRzID0gZXhwbG9kZSgnLCcsICRleHRyYWN0ZWRSYW5nZSk7ICAgICAgICAvLyBGSVhNRTogd2hhdCBpZiBzaGVldG5hbWUgY29udGFpbnMgY29tbWE\/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRuZXdSYW5nZVNldHMgPSBhcnJheSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmFuZ2VTZXRzIGFzICRyYW5nZVNldCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJhbmdlID0gZXhwbG9kZSgnIScsICRyYW5nZVNldCk7ICAgIC8vIEZJWE1FOiB3aGF0IGlmIHNoZWV0bmFtZSBjb250YWlucyBleGNsYW1hdGlvbiBtYXJrPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJhbmdlU2V0ID0gaXNzZXQoJHJhbmdlWzFdKSA\\/IGludHZhbCgoc3RyaW5nKSRzdHlsZS0+YWxpZ25tZW50WyJpbmRlbnQiXSkgOiAwKTsKICAgICAgICAgICAgJGRvY1N0eWxlLT5nZXRBbGlnbm1lbnQoKS0+c2V0UmVhZG9yZGVyKGludHZhbCgoc3RyaW5nKSRzdHlsZS0+YWxpZ25tZW50WyJyZWFkaW5nT3JkZXIiXSkgPiAwID8gaW50dmFsKChzdHJpbmcpJHN0eWxlLT5hbGlnbm1lbnRbInJlYWRpbmdPcmRlciJdKSA6IDApOwogICAgICAgIH0KCiAgICAgICAgLy8gcHJvdGVjdGlvbgogICAgICAgIGlmIChpc3NldCgkc3R5bGUtPnByb3RlY3Rpb24pKSB7CiAgICAgICAgICAgIGlmIChpc3NldCgkc3R5bGUtPnByb3RlY3Rpb25bJ2xvY2tlZCddKSkgewogICAgICAgICAgICAgICAgaWYgKHNlbGY6OmJvb2xlYW4oKHN0cmluZykgJHN0eWxlLT5wcm90ZWN0aW9uWydsb2NrZWQnXSkpIHsKICAgICAgICAgICAgICAgICAgICAkZG9jU3R5bGUtPmdldFByb3RlY3Rpb24oKS0+c2V0TG9ja2VkKFBIUEV4Y2VsX1N0eWxlX1Byb3RlY3Rpb246OlBST1RFQ1RJT05fUFJPVEVDVEVEKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJGRvY1N0eWxlLT5nZXRQcm90ZWN0aW9uKCktPnNldExvY2tlZChQSFBFeGNlbF9TdHlsZV9Qcm90ZWN0aW9uOjpQUk9URUNUSU9OX1VOUFJPVEVDVEVEKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGlzc2V0KCRzdHlsZS0+cHJvdGVjdGlvblsnaGlkZGVuJ10pKSB7CiAgICAgICAgICAgICAgICBpZiAoc2VsZjo6Ym9vbGVhbigoc3RyaW5nKSAkc3R5bGUtPnByb3RlY3Rpb25bJ2hpZGRlbiddKSkgewogICAgICAgICAgICAgICAgICAgICRkb2NTdHlsZS0+Z2V0UHJvdGVjdGlvbigpLT5zZXRIaWRkZW4oUEhQRXhjZWxfU3R5bGVfUHJvdGVjdGlvbjo6UFJPVEVDVElPTl9QUk9URUNURUQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkZG9jU3R5bGUtPmdldFByb3RlY3Rpb24oKS0+c2V0SGlkZGVuKFBIUEV4Y2VsX1N0eWxlX1Byb3RlY3Rpb246OlBST1RFQ1RJT05fVU5QUk9URUNURUQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyB0b3AtbGV2ZWwgc3R5bGUgc2V0dGluZ3MKICAgICAgICBpZiAoaXNzZXQoJHN0eWxlLT5xdW90ZVByZWZpeCkpIHsKICAgICAgICAgICAgJGRvY1N0eWxlLT5zZXRRdW90ZVByZWZpeCgkc3R5bGUtPnF1b3RlUHJlZml4KTsKICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gcmVhZEJvcmRlcigkZG9jQm9yZGVyLCAkZWxlQm9yZGVyKQogICAgewogICAgICAgIGlmIChpc3NldCgkZWxlQm9yZGVyWyJzdHlsZSJdKSkgewogICAgICAgICAgICAkZG9jQm9yZGVyLT5zZXRCb3JkZXJTdHlsZSgoc3RyaW5nKSAkZWxlQm9yZGVyWyJzdHlsZSJdKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzc2V0KCRlbGVCb3JkZXItPmNvbG9yKSkgewogICAgICAgICAgICAkZG9jQm9yZGVyLT5nZXRDb2xvcigpLT5zZXRBUkdCKHNlbGY6OnJlYWRDb2xvcigkZWxlQm9yZGVyLT5jb2xvcikpOwogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIHBhcnNlUmljaFRleHQoJGlzID0gbnVsbCkKICAgIHsKICAgICAgICAkdmFsdWUgPSBuZXcgUEhQRXhjZWxfUmljaFRleHQoKTsKCiAgICAgICAgaWYgKGlzc2V0KCRpcy0+dCkpIHsKICAgICAgICAgICAgJHZhbHVlLT5jcmVhdGVUZXh0KFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OkNvbnRyb2xDaGFyYWN0ZXJPT1hNTDJQSFAoKHN0cmluZykgJGlzLT50KSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGlzX29iamVjdCgkaXMtPnIpKSB7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkaXMtPnIgYXMgJHJ1bikgewogICAgICAgICAgICAgICAgICAgIGlmICghaXNzZXQoJHJ1bi0+clByKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkb2JqVGV4dCA9ICR2YWx1ZS0+Y3JlYXRlVGV4dChQSFBFeGNlbF9TaGFyZWRfU3RyaW5nOjpDb250cm9sQ2hhcmFjdGVyT09YTUwyUEhQKChzdHJpbmcpICRydW4tPnQpKTsKCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJG9ialRleHQgPSAkdmFsdWUtPmNyZWF0ZVRleHRSdW4oUEhQRXhjZWxfU2hhcmVkX1N0cmluZzo6Q29udHJvbENoYXJhY3Rlck9PWE1MMlBIUCgoc3RyaW5nKSAkcnVuLT50KSk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHJ1bi0+clByLT5yRm9udFsidmFsIl0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqVGV4dC0+Z2V0Rm9udCgpLT5zZXROYW1lKChzdHJpbmcpICRydW4tPnJQci0+ckZvbnRbInZhbCJdKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHJ1bi0+clByLT5zelsidmFsIl0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqVGV4dC0+Z2V0Rm9udCgpLT5zZXRTaXplKChzdHJpbmcpICRydW4tPnJQci0+c3pbInZhbCJdKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHJ1bi0+clByLT5jb2xvcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvYmpUZXh0LT5nZXRGb250KCktPnNldENvbG9yKG5ldyBQSFBFeGNlbF9TdHlsZV9Db2xvcihzZWxmOjpyZWFkQ29sb3IoJHJ1bi0+clByLT5jb2xvcikpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlzc2V0KCRydW4tPnJQci0+YlsidmFsIl0pICYmIHNlbGY6OmJvb2xlYW4oKHN0cmluZykgJHJ1bi0+clByLT5iWyJ2YWwiXSkpIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaXNzZXQoJHJ1bi0+clByLT5iKSAmJiAhaXNzZXQoJHJ1bi0+clByLT5iWyJ2YWwiXSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqVGV4dC0+Z2V0Rm9udCgpLT5zZXRCb2xkKHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaXNzZXQoJHJ1bi0+clByLT5pWyJ2YWwiXSkgJiYgc2VsZjo6Ym9vbGVhbigoc3RyaW5nKSAkcnVuLT5yUHItPmlbInZhbCJdKSkgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpc3NldCgkcnVuLT5yUHItPmkpICYmICFpc3NldCgkcnVuLT5yUHItPmlbInZhbCJdKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvYmpUZXh0LT5nZXRGb250KCktPnNldEl0YWxpYyh0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHJ1bi0+clByLT52ZXJ0QWxpZ24pICYmIGlzc2V0KCRydW4tPnJQci0+dmVydEFsaWduWyJ2YWwiXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2ZXJ0QWxpZ24gPSBzdHJ0b2xvd2VyKChzdHJpbmcpJHJ1bi0+clByLT52ZXJ0QWxpZ25bInZhbCJdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdmVydEFsaWduID09ICdzdXBlcnNjcmlwdCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqVGV4dC0+Z2V0Rm9udCgpLT5zZXRTdXBlclNjcmlwdCh0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdmVydEFsaWduID09ICdzdWJzY3JpcHQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9ialRleHQtPmdldEZvbnQoKS0+c2V0U3ViU2NyaXB0KHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkcnVuLT5yUHItPnUpICYmICFpc3NldCgkcnVuLT5yUHItPnVbInZhbCJdKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9ialRleHQtPmdldEZvbnQoKS0+c2V0VW5kZXJsaW5lKFBIUEV4Y2VsX1N0eWxlX0ZvbnQ6OlVOREVSTElORV9TSU5HTEUpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAoaXNzZXQoJHJ1bi0+clByLT51KSAmJiBpc3NldCgkcnVuLT5yUHItPnVbInZhbCJdKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9ialRleHQtPmdldEZvbnQoKS0+c2V0VW5kZXJsaW5lKChzdHJpbmcpJHJ1bi0+clByLT51WyJ2YWwiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpc3NldCgkcnVuLT5yUHItPnN0cmlrZVsidmFsIl0pICYmIHNlbGY6OmJvb2xlYW4oKHN0cmluZykgJHJ1bi0+clByLT5zdHJpa2VbInZhbCJdKSkgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpc3NldCgkcnVuLT5yUHItPnN0cmlrZSkgJiYgIWlzc2V0KCRydW4tPnJQci0+c3RyaWtlWyJ2YWwiXSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqVGV4dC0+Z2V0Rm9udCgpLT5zZXRTdHJpa2V0aHJvdWdoKHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJHZhbHVlOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gcmVhZFJpYmJvbigkZXhjZWwsICRjdXN0b21VSVRhcmdldCwgJHppcCkKICAgIHsKICAgICAgICAkYmFzZURpciA9IGRpcm5hbWUoJGN1c3RvbVVJVGFyZ2V0KTsKICAgICAgICAkbmFtZUN1c3RvbVVJID0gYmFzZW5hbWUoJGN1c3RvbVVJVGFyZ2V0KTsKICAgICAgICAvLyBnZXQgdGhlIHhtbCBmaWxlIChyaWJib24pCiAgICAgICAgJGxvY2FsUmliYm9uID0gJHRoaXMtPmdldEZyb21aaXBBcmNoaXZlKCR6aXAsICRjdXN0b21VSVRhcmdldCk7CiAgICAgICAgJGN1c3RvbVVJSW1hZ2VzTmFtZXMgPSBhcnJheSgpOwogICAgICAgICRjdXN0b21VSUltYWdlc0JpbmFyaWVzID0gYXJyYXkoKTsKICAgICAgICAvLyBzb21ldGhpbmcgbGlrZSBjdXN0b21VSS9fcmVscy9jdXN0b21VSS54bWwucmVscwogICAgICAgICRwYXRoUmVscyA9ICRiYXNlRGlyIC4gJy9fcmVscy8nIC4gJG5hbWVDdXN0b21VSSAuICcucmVscyc7CiAgICAgICAgJGRhdGFSZWxzID0gJHRoaXMtPmdldEZyb21aaXBBcmNoaXZlKCR6aXAsICRwYXRoUmVscyk7CiAgICAgICAgaWYgKCRkYXRhUmVscykgewogICAgICAgICAgICAvLyBleGlzdHMgYW5kIG5vdCBlbXB0eSBpZiB0aGUgcmliYm9uIGhhdmUgc29tZSBwaWN0dXJlcyAob3RoZXIgdGhhbiBpbnRlcm5hbCBNU08pCiAgICAgICAgICAgICRVSVJlbHMgPSBzaW1wbGV4bWxfbG9hZF9zdHJpbmcoJHRoaXMtPnNlY3VyaXR5U2NhbigkZGF0YVJlbHMpLCAnU2ltcGxlWE1MRWxlbWVudCcsIFBIUEV4Y2VsX1NldHRpbmdzOjpnZXRMaWJYbWxMb2FkZXJPcHRpb25zKCkpOwogICAgICAgICAgICBpZiAoJFVJUmVscykgewogICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBzYXZlIGlkIGFuZCB0YXJnZXQgdG8gYXZvaWQgcGFyc2luZyBjdXN0b21VSS54bWwgYW5kICJndWVzcyIgaWYgaXQncyBhIHBzZXVkbyBjYWxsYmFjayB3aG8gbG9hZCB0aGUgaW1hZ2UKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRVSVJlbHMtPlJlbGF0aW9uc2hpcCBhcyAkZWxlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRlbGVbIlR5cGUiXSA9PSAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9pbWFnZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW4gaW1hZ2UgPwogICAgICAgICAgICAgICAgICAgICAgICAkY3VzdG9tVUlJbWFnZXNOYW1lc1soc3RyaW5nKSAkZWxlWydJZCddXSA9IChzdHJpbmcpJGVsZVsnVGFyZ2V0J107CiAgICAgICAgICAgICAgICAgICAgICAgICRjdXN0b21VSUltYWdlc0JpbmFyaWVzWyhzdHJpbmcpJGVsZVsnVGFyZ2V0J11dID0gJHRoaXMtPmdldEZyb21aaXBBcmNoaXZlKCR6aXAsICRiYXNlRGlyIC4gJy8nIC4gKHN0cmluZykgJGVsZVsnVGFyZ2V0J10pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoJGxvY2FsUmliYm9uKSB7CiAgICAgICAgICAgICRleGNlbC0+c2V0UmliYm9uWE1MRGF0YSgkY3VzdG9tVUlUYXJnZXQsICRsb2NhbFJpYmJvbik7CiAgICAgICAgICAgIGlmIChjb3VudCgkY3VzdG9tVUlJbWFnZXNOYW1lcykgPiAwICYmIGNvdW50KCRjdXN0b21VSUltYWdlc0JpbmFyaWVzKSA+IDApIHsKICAgICAgICAgICAgICAgICRleGNlbC0+c2V0UmliYm9uQmluT2JqZWN0cygkY3VzdG9tVUlJbWFnZXNOYW1lcywgJGN1c3RvbVVJSW1hZ2VzQmluYXJpZXMpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJGV4Y2VsLT5zZXRSaWJib25CaW5PYmplY3RzKG51bGwpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJGV4Y2VsLT5zZXRSaWJib25YTUxEYXRhKG51bGwpOwogICAgICAgICAgICAkZXhjZWwtPnNldFJpYmJvbkJpbk9iamVjdHMobnVsbCk7CiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGdldEFycmF5SXRlbSgkYXJyYXksICRrZXkgPSAwKQogICAgewogICAgICAgIHJldHVybiAoaXNzZXQoJGFycmF5WyRrZXldKSA\/ICRhcnJheVska2V5XSA6IG51bGwpOwogICAgfQoKICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGRpckFkZCgkYmFzZSwgJGFkZCkKICAgIHsKICAgICAgICByZXR1cm4gcHJlZ19yZXBsYWNlKCd+W14vXSsvXC5cLi9+JywgJycsIGRpcm5hbWUoJGJhc2UpIC4gIi8kYWRkIik7CiAgICB9CgogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gdG9DU1NBcnJheSgkc3R5bGUpCiAgICB7CiAgICAgICAgJHN0eWxlID0gc3RyX3JlcGxhY2UoYXJyYXkoIlxyIiwiXG4iKSwgIiIsICRzdHlsZSk7CgogICAgICAgICR0ZW1wID0gZXhwbG9kZSgnOycsICRzdHlsZSk7CiAgICAgICAgJHN0eWxlID0gYXJyYXkoKTsKICAgICAgICBmb3JlYWNoICgkdGVtcCBhcyAkaXRlbSkgewogICAgICAgICAgICAkaXRlbSA9IGV4cGxvZGUoJzonLCAkaXRlbSk7CgogICAgICAgICAgICBpZiAoc3RycG9zKCRpdGVtWzFdLCAncHgnKSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICRpdGVtWzFdID0gc3RyX3JlcGxhY2UoJ3B4JywgJycsICRpdGVtWzFdKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc3RycG9zKCRpdGVtWzFdLCAncHQnKSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICRpdGVtWzFdID0gc3RyX3JlcGxhY2UoJ3B0JywgJycsICRpdGVtWzFdKTsKICAgICAgICAgICAgICAgICRpdGVtWzFdID0gUEhQRXhjZWxfU2hhcmVkX0ZvbnQ6OmZvbnRTaXplVG9QaXhlbHMoJGl0ZW1bMV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzdHJwb3MoJGl0ZW1bMV0sICdpbicpICE9PSBmYWxzZSkgewogICAgICAgICAgICAgICAgJGl0ZW1bMV0gPSBzdHJfcmVwbGFjZSgnaW4nLCAnJywgJGl0ZW1bMV0pOwogICAgICAgICAgICAgICAgJGl0ZW1bMV0gPSBQSFBFeGNlbF9TaGFyZWRfRm9udDo6aW5jaFNpemVUb1BpeGVscygkaXRlbVsxXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHN0cnBvcygkaXRlbVsxXSwgJ2NtJykgIT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAkaXRlbVsxXSA9IHN0cl9yZXBsYWNlKCdjbScsICcnLCAkaXRlbVsxXSk7CiAgICAgICAgICAgICAgICAkaXRlbVsxXSA9IFBIUEV4Y2VsX1NoYXJlZF9Gb250OjpjZW50aW1ldGVyU2l6ZVRvUGl4ZWxzKCRpdGVtWzFdKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHN0eWxlWyRpdGVtWzBdXSA9ICRpdGVtWzFdOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRzdHlsZTsKICAgIH0KCiAgICBwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBib29sZWFuKCR2YWx1ZSA9IG51bGwpCiAgICB7CiAgICAgICAgaWYgKGlzX29iamVjdCgkdmFsdWUpKSB7CiAgICAgICAgICAgICR2YWx1ZSA9IChzdHJpbmcpICR2YWx1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzX251bWVyaWMoJHZhbHVlKSkgewogICAgICAgICAgICByZXR1cm4gKGJvb2wpICR2YWx1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICgkdmFsdWUgPT09ICd0cnVlJyB8fCAkdmFsdWUgPT09ICdUUlVFJyk7CiAgICB9Cn0K",
    "size": "134706"
}