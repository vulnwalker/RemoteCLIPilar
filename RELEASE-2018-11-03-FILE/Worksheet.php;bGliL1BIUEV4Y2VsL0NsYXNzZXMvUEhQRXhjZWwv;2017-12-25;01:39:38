{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Worksheet.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKgogKiBQSFBFeGNlbF9Xb3Jrc2hlZXQKICoKICogQ29weXJpZ2h0IChjKSAyMDA2IC0gMjAxNSBQSFBFeGNlbAogKgogKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yCiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyCiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgogKgogKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSBHTlUKICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEgIFVTQQogKgogKiBAY2F0ZWdvcnkgICBQSFBFeGNlbAogKiBAcGFja2FnZSAgICBQSFBFeGNlbF9Xb3Jrc2hlZXQKICogQGNvcHlyaWdodCAgQ29weXJpZ2h0IChjKSAyMDA2IC0gMjAxNSBQSFBFeGNlbCAoaHR0cDovL3d3dy5jb2RlcGxleC5jb20vUEhQRXhjZWwpCiAqIEBsaWNlbnNlICAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvbGdwbC0yLjEudHh0ICAgIExHUEwKICogQHZlcnNpb24gICAgIyNWRVJTSU9OIyMsICMjREFURSMjCiAqLwpjbGFzcyBQSFBFeGNlbF9Xb3Jrc2hlZXQgaW1wbGVtZW50cyBQSFBFeGNlbF9JQ29tcGFyYWJsZQp7CiAgICAvKiBCcmVhayB0eXBlcyAqLwogICAgY29uc3QgQlJFQUtfTk9ORSAgID0gMDsKICAgIGNvbnN0IEJSRUFLX1JPVyAgICA9IDE7CiAgICBjb25zdCBCUkVBS19DT0xVTU4gPSAyOwoKICAgIC8qIFNoZWV0IHN0YXRlICovCiAgICBjb25zdCBTSEVFVFNUQVRFX1ZJU0lCTEUgICAgPSAndmlzaWJsZSc7CiAgICBjb25zdCBTSEVFVFNUQVRFX0hJRERFTiAgICAgPSAnaGlkZGVuJzsKICAgIGNvbnN0IFNIRUVUU1RBVEVfVkVSWUhJRERFTiA9ICd2ZXJ5SGlkZGVuJzsKCiAgICAvKioKICAgICAqIEludmFsaWQgY2hhcmFjdGVycyBpbiBzaGVldCB0aXRsZQogICAgICoKICAgICAqIEB2YXIgYXJyYXkKICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgJGludmFsaWRDaGFyYWN0ZXJzID0gYXJyYXkoJyonLCAnOicsICcvJywgJ1xcJywgJz8nLCAnWycsICddJyk7CgogICAgLyoqCiAgICAgKiBQYXJlbnQgc3ByZWFkc2hlZXQKICAgICAqCiAgICAgKiBAdmFyIFBIUEV4Y2VsCiAgICAgKi8KICAgIHByaXZhdGUgJHBhcmVudDsKCiAgICAvKioKICAgICAqIENhY2hlYWJsZSBjb2xsZWN0aW9uIG9mIGNlbGxzCiAgICAgKgogICAgICogQHZhciBQSFBFeGNlbF9DYWNoZWRPYmplY3RTdG9yYWdlX3h4eAogICAgICovCiAgICBwcml2YXRlICRjZWxsQ29sbGVjdGlvbjsKCiAgICAvKioKICAgICAqIENvbGxlY3Rpb24gb2Ygcm93IGRpbWVuc2lvbnMKICAgICAqCiAgICAgKiBAdmFyIFBIUEV4Y2VsX1dvcmtzaGVldF9Sb3dEaW1lbnNpb25bXQogICAgICovCiAgICBwcml2YXRlICRyb3dEaW1lbnNpb25zID0gYXJyYXkoKTsKCiAgICAvKioKICAgICAqIERlZmF1bHQgcm93IGRpbWVuc2lvbgogICAgICoKICAgICAqIEB2YXIgUEhQRXhjZWxfV29ya3NoZWV0X1Jvd0RpbWVuc2lvbgogICAgICovCiAgICBwcml2YXRlICRkZWZhdWx0Um93RGltZW5zaW9uOwoKICAgIC8qKgogICAgICogQ29sbGVjdGlvbiBvZiBjb2x1bW4gZGltZW5zaW9ucwogICAgICoKICAgICAqIEB2YXIgUEhQRXhjZWxfV29ya3NoZWV0X0NvbHVtbkRpbWVuc2lvbltdCiAgICAgKi8KICAgIHByaXZhdGUgJGNvbHVtbkRpbWVuc2lvbnMgPSBhcnJheSgpOwoKICAgIC8qKgogICAgICogRGVmYXVsdCBjb2x1bW4gZGltZW5zaW9uCiAgICAgKgogICAgICogQHZhciBQSFBFeGNlbF9Xb3Jrc2hlZXRfQ29sdW1uRGltZW5zaW9uCiAgICAgKi8KICAgIHByaXZhdGUgJGRlZmF1bHRDb2x1bW5EaW1lbnNpb24gPSBudWxsOwoKICAgIC8qKgogICAgICogQ29sbGVjdGlvbiBvZiBkcmF3aW5ncwogICAgICoKICAgICAqIEB2YXIgUEhQRXhjZWxfV29ya3NoZWV0X0Jhc2VEcmF3aW5nW10KICAgICAqLwogICAgcHJpdmF0ZSAkZHJhd2luZ0NvbGxlY3Rpb24gPSBudWxsOwoKICAgIC8qKgogICAgICogQ29sbGVjdGlvbiBvZiBDaGFydCBvYmplY3RzCiAgICAgKgogICAgICogQHZhciBQSFBFeGNlbF9DaGFydFtdCiAgICAgKi8KICAgIHByaXZhdGUgJGNoYXJ0Q29sbGVjdGlvbiA9IGFycmF5KCk7CgogICAgLyoqCiAgICAgKiBXb3Jrc2hlZXQgdGl0bGUKICAgICAqCiAgICAgKiBAdmFyIHN0cmluZwogICAgICovCiAgICBwcml2YXRlICR0aXRsZTsKCiAgICAvKioKICAgICAqIFNoZWV0IHN0YXRlCiAgICAgKgogICAgICogQHZhciBzdHJpbmcKICAgICAqLwogICAgcHJpdmF0ZSAkc2hlZXRTdGF0ZTsKCiAgICAvKioKICAgICAqIFBhZ2Ugc2V0dXAKICAgICAqCiAgICAgKiBAdmFyIFBIUEV4Y2VsX1dvcmtzaGVldF9QYWdlU2V0dXAKICAgICAqLwogICAgcHJpdmF0ZSAkcGFnZVNldHVwOwoKICAgIC8qKgogICAgICogUGFnZSBtYXJnaW5zCiAgICAgKgogICAgICogQHZhciBQSFBFeGNlbF9Xb3Jrc2hlZXRfUGFnZU1hcmdpbnMKICAgICAqLwogICAgcHJpdmF0ZSAkcGFnZU1hcmdpbnM7CgogICAgLyoqCiAgICAgKiBQYWdlIGhlYWRlci9mb290ZXIKICAgICAqCiAgICAgKiBAdmFyIFBIUEV4Y2VsX1dvcmtzaGVldF9IZWFkZXJGb290ZXIKICAgICAqLwogICAgcHJpdmF0ZSAkaGVhZGVyRm9vdGVyOwoKICAgIC8qKgogICAgICogU2hlZXQgdmlldwogICAgICoKICAgICAqIEB2YXIgUEhQRXhjZWxfV29ya3NoZWV0X1NoZWV0VmlldwogICAgICovCiAgICBwcml2YXRlICRzaGVldFZpZXc7CgogICAgLyoqCiAgICAgKiBQcm90ZWN0aW9uCiAgICAgKgogICAgICogQHZhciBQSFBFeGNlbF9Xb3Jrc2hlZXRfUHJvdGVjdGlvbgogICAgICovCiAgICBwcml2YXRlICRwcm90ZWN0aW9uOwoKICAgIC8qKgogICAgICogQ29sbGVjdGlvbiBvZiBzdHlsZXMKICAgICAqCiAgICAgKiBAdmFyIFBIUEV4Y2VsX1N0eWxlW10KICAgICAqLwogICAgcHJpdmF0ZSAkc3R5bGVzID0gYXJyYXkoKTsKCiAgICAvKioKICAgICAqIENvbmRpdGlvbmFsIHN0eWxlcy4gSW5kZXhlZCBieSBjZWxsIGNvb3JkaW5hdGUsIGUuZy4gJ0ExJwogICAgICoKICAgICAqIEB2YXIgYXJyYXkKICAgICAqLwogICAgcHJpdmF0ZSAkY29uZGl0aW9uYWxTdHlsZXNDb2xsZWN0aW9uID0gYXJyYXkoKTsKCiAgICAvKioKICAgICAqIElzIHRoZSBjdXJyZW50IGNlbGwgY29sbGVjdGlvbiBzb3J0ZWQgYWxyZWFkeT8KICAgICAqCiAgICAgKiBAdmFyIGJvb2xlYW4KICAgICAqLwogICAgcHJpdmF0ZSAkY2VsbENvbGxlY3Rpb25Jc1NvcnRlZCA9IGZhbHNlOwoKICAgIC8qKgogICAgICogQ29sbGVjdGlvbiBvZiBicmVha3MKICAgICAqCiAgICAgKiBAdmFyIGFycmF5CiAgICAgKi8KICAgIHByaXZhdGUgJGJyZWFrcyA9IGFycmF5KCk7CgogICAgLyoqCiAgICAgKiBDb2xsZWN0aW9uIG9mIG1lcmdlZCBjZWxsIHJhbmdlcwogICAgICoKICAgICAqIEB2YXIgYXJyYXkKICAgICAqLwogICAgcHJpdmF0ZSAkbWVyZ2VDZWxscyA9IGFycmF5KCk7CgogICAgLyoqCiAgICAgKiBDb2xsZWN0aW9uIG9mIHByb3RlY3RlZCBjZWxsIHJhbmdlcwogICAgICoKICAgICAqIEB2YXIgYXJyYXkKICAgICAqLwogICAgcHJpdmF0ZSAkcHJvdGVjdGVkQ2VsbHMgPSBhcnJheSgpOwoKICAgIC8qKgogICAgICogQXV0b2ZpbHRlciBSYW5nZSBhbmQgc2VsZWN0aW9uCiAgICAgKgogICAgICogQHZhciBQSFBFeGNlbF9Xb3Jrc2hlZXRfQXV0b0ZpbHRlcgogICAgICovCiAgICBwcml2YXRlICRhdXRvRmlsdGVyOwoKICAgIC8qKgogICAgICogRnJlZXplIHBhbmUKICAgICAqCiAgICAgKiBAdmFyIHN0cmluZwogICAgICovCiAgICBwcml2YXRlICRmcmVlemVQYW5lID0gJyc7CgogICAgLyoqCiAgICAgKiBTaG93IGdyaWRsaW5lcz8KICAgICAqCiAgICAgKiBAdmFyIGJvb2xlYW4KICAgICAqLwogICAgcHJpdmF0ZSAkc2hvd0dyaWRsaW5lcyA9IHRydWU7CgogICAgLyoqCiAgICAqIFByaW50IGdyaWRsaW5lcz8KICAgICoKICAgICogQHZhciBib29sZWFuCiAgICAqLwogICAgcHJpdmF0ZSAkcHJpbnRHcmlkbGluZXMgPSBmYWxzZTsKCiAgICAvKioKICAgICogU2hvdyByb3cgYW5kIGNvbHVtbiBoZWFkZXJzPwogICAgKgogICAgKiBAdmFyIGJvb2xlYW4KICAgICovCiAgICBwcml2YXRlICRzaG93Um93Q29sSGVhZGVycyA9IHRydWU7CgogICAgLyoqCiAgICAgKiBTaG93IHN1bW1hcnkgYmVsb3c\/IChSb3cvQ29sdW1uIG91dGxpbmUpCiAgICAgKgogICAgICogQHZhciBib29sZWFuCiAgICAgKi8KICAgIHByaXZhdGUgJHNob3dTdW1tYXJ5QmVsb3cgPSB0cnVlOwoKICAgIC8qKgogICAgICogU2hvdyBzdW1tYXJ5IHJpZ2h0PyAoUm93L0NvbHVtbiBvdXRsaW5lKQogICAgICoKICAgICAqIEB2YXIgYm9vbGVhbgogICAgICovCiAgICBwcml2YXRlICRzaG93U3VtbWFyeVJpZ2h0ID0gdHJ1ZTsKCiAgICAvKioKICAgICAqIENvbGxlY3Rpb24gb2YgY29tbWVudHMKICAgICAqCiAgICAgKiBAdmFyIFBIUEV4Y2VsX0NvbW1lbnRbXQogICAgICovCiAgICBwcml2YXRlICRjb21tZW50cyA9IGFycmF5KCk7CgogICAgLyoqCiAgICAgKiBBY3RpdmUgY2VsbC4gKE9ubHkgb25lISkKICAgICAqCiAgICAgKiBAdmFyIHN0cmluZwogICAgICovCiAgICBwcml2YXRlICRhY3RpdmVDZWxsID0gJ0ExJzsKCiAgICAvKioKICAgICAqIFNlbGVjdGVkIGNlbGxzCiAgICAgKgogICAgICogQHZhciBzdHJpbmcKICAgICAqLwogICAgcHJpdmF0ZSAkc2VsZWN0ZWRDZWxscyA9ICdBMSc7CgogICAgLyoqCiAgICAgKiBDYWNoZWQgaGlnaGVzdCBjb2x1bW4KICAgICAqCiAgICAgKiBAdmFyIHN0cmluZwogICAgICovCiAgICBwcml2YXRlICRjYWNoZWRIaWdoZXN0Q29sdW1uID0gJ0EnOwoKICAgIC8qKgogICAgICogQ2FjaGVkIGhpZ2hlc3Qgcm93CiAgICAgKgogICAgICogQHZhciBpbnQKICAgICAqLwogICAgcHJpdmF0ZSAkY2FjaGVkSGlnaGVzdFJvdyA9IDE7CgogICAgLyoqCiAgICAgKiBSaWdodC10by1sZWZ0PwogICAgICoKICAgICAqIEB2YXIgYm9vbGVhbgogICAgICovCiAgICBwcml2YXRlICRyaWdodFRvTGVmdCA9IGZhbHNlOwoKICAgIC8qKgogICAgICogSHlwZXJsaW5rcy4gSW5kZXhlZCBieSBjZWxsIGNvb3JkaW5hdGUsIGUuZy4gJ0ExJwogICAgICoKICAgICAqIEB2YXIgYXJyYXkKICAgICAqLwogICAgcHJpdmF0ZSAkaHlwZXJsaW5rQ29sbGVjdGlvbiA9IGFycmF5KCk7CgogICAgLyoqCiAgICAgKiBEYXRhIHZhbGlkYXRpb24gb2JqZWN0cy4gSW5kZXhlZCBieSBjZWxsIGNvb3JkaW5hdGUsIGUuZy4gJ0ExJwogICAgICoKICAgICAqIEB2YXIgYXJyYXkKICAgICAqLwogICAgcHJpdmF0ZSAkZGF0YVZhbGlkYXRpb25Db2xsZWN0aW9uID0gYXJyYXkoKTsKCiAgICAvKioKICAgICAqIFRhYiBjb2xvcgogICAgICoKICAgICAqIEB2YXIgUEhQRXhjZWxfU3R5bGVfQ29sb3IKICAgICAqLwogICAgcHJpdmF0ZSAkdGFiQ29sb3I7CgogICAgLyoqCiAgICAgKiBEaXJ0eSBmbGFnCiAgICAgKgogICAgICogQHZhciBib29sZWFuCiAgICAgKi8KICAgIHByaXZhdGUgJGRpcnR5ID0gdHJ1ZTsKCiAgICAvKioKICAgICAqIEhhc2gKICAgICAqCiAgICAgKiBAdmFyIHN0cmluZwogICAgICovCiAgICBwcml2YXRlICRoYXNoOwoKICAgIC8qKgogICAgKiBDb2RlTmFtZQogICAgKgogICAgKiBAdmFyIHN0cmluZwogICAgKi8KICAgIHByaXZhdGUgJGNvZGVOYW1lID0gbnVsbDsKCiAgICAvKioKICAgICAqIENyZWF0ZSBhIG5ldyB3b3Jrc2hlZXQKICAgICAqCiAgICAgKiBAcGFyYW0gUEhQRXhjZWwgICAgICAgICRwUGFyZW50CiAgICAgKiBAcGFyYW0gc3RyaW5nICAgICAgICAkcFRpdGxlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdChQSFBFeGNlbCAkcFBhcmVudCA9IG51bGwsICRwVGl0bGUgPSAnV29ya3NoZWV0JykKICAgIHsKICAgICAgICAvLyBTZXQgcGFyZW50IGFuZCB0aXRsZQogICAgICAgICR0aGlzLT5wYXJlbnQgPSAkcFBhcmVudDsKICAgICAgICAkdGhpcy0+c2V0VGl0bGUoJHBUaXRsZSwgZmFsc2UpOwogICAgICAgIC8vIHNldFRpdGxlIGNhbiBjaGFuZ2UgJHBUaXRsZQogICAgICAgICR0aGlzLT5zZXRDb2RlTmFtZSgkdGhpcy0+Z2V0VGl0bGUoKSk7CiAgICAgICAgJHRoaXMtPnNldFNoZWV0U3RhdGUoUEhQRXhjZWxfV29ya3NoZWV0OjpTSEVFVFNUQVRFX1ZJU0lCTEUpOwoKICAgICAgICAkdGhpcy0+Y2VsbENvbGxlY3Rpb24gICAgICAgICA9IFBIUEV4Y2VsX0NhY2hlZE9iamVjdFN0b3JhZ2VGYWN0b3J5OjpnZXRJbnN0YW5jZSgkdGhpcyk7CiAgICAgICAgLy8gU2V0IHBhZ2Ugc2V0dXAKICAgICAgICAkdGhpcy0+cGFnZVNldHVwICAgICAgICAgICAgICA9IG5ldyBQSFBFeGNlbF9Xb3Jrc2hlZXRfUGFnZVNldHVwKCk7CiAgICAgICAgLy8gU2V0IHBhZ2UgbWFyZ2lucwogICAgICAgICR0aGlzLT5wYWdlTWFyZ2lucyAgICAgICAgICAgID0gbmV3IFBIUEV4Y2VsX1dvcmtzaGVldF9QYWdlTWFyZ2lucygpOwogICAgICAgIC8vIFNldCBwYWdlIGhlYWRlci9mb290ZXIKICAgICAgICAkdGhpcy0+aGVhZGVyRm9vdGVyICAgICAgICAgICA9IG5ldyBQSFBFeGNlbF9Xb3Jrc2hlZXRfSGVhZGVyRm9vdGVyKCk7CiAgICAgICAgLy8gU2V0IHNoZWV0IHZpZXcKICAgICAgICAkdGhpcy0+c2hlZXRWaWV3ICAgICAgICAgICAgICA9IG5ldyBQSFBFeGNlbF9Xb3Jrc2hlZXRfU2hlZXRWaWV3KCk7CiAgICAgICAgLy8gRHJhd2luZyBjb2xsZWN0aW9uCiAgICAgICAgJHRoaXMtPmRyYXdpbmdDb2xsZWN0aW9uICAgICAgPSBuZXcgQXJyYXlPYmplY3QoKTsKICAgICAgICAvLyBDaGFydCBjb2xsZWN0aW9uCiAgICAgICAgJHRoaXMtPmNoYXJ0Q29sbGVjdGlvbiAgICAgICAgPSBuZXcgQXJyYXlPYmplY3QoKTsKICAgICAgICAvLyBQcm90ZWN0aW9uCiAgICAgICAgJHRoaXMtPnByb3RlY3Rpb24gICAgICAgICAgICAgPSBuZXcgUEhQRXhjZWxfV29ya3NoZWV0X1Byb3RlY3Rpb24oKTsKICAgICAgICAvLyBEZWZhdWx0IHJvdyBkaW1lbnNpb24KICAgICAgICAkdGhpcy0+ZGVmYXVsdFJvd0RpbWVuc2lvbiAgICA9IG5ldyBQSFBFeGNlbF9Xb3Jrc2hlZXRfUm93RGltZW5zaW9uKG51bGwpOwogICAgICAgIC8vIERlZmF1bHQgY29sdW1uIGRpbWVuc2lvbgogICAgICAgICR0aGlzLT5kZWZhdWx0Q29sdW1uRGltZW5zaW9uID0gbmV3IFBIUEV4Y2VsX1dvcmtzaGVldF9Db2x1bW5EaW1lbnNpb24obnVsbCk7CiAgICAgICAgJHRoaXMtPmF1dG9GaWx0ZXIgICAgICAgICAgICAgPSBuZXcgUEhQRXhjZWxfV29ya3NoZWV0X0F1dG9GaWx0ZXIobnVsbCwgJHRoaXMpOwogICAgfQoKCiAgICAvKioKICAgICAqIERpc2Nvbm5lY3QgYWxsIGNlbGxzIGZyb20gdGhpcyBQSFBFeGNlbF9Xb3Jrc2hlZXQgb2JqZWN0LAogICAgICogICAgdHlwaWNhbGx5IHNvIHRoYXQgdGhlIHdvcmtzaGVldCBvYmplY3QgY2FuIGJlIHVuc2V0CiAgICAgKgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZGlzY29ubmVjdENlbGxzKCkKICAgIHsKICAgICAgICBpZiAoJHRoaXMtPmNlbGxDb2xsZWN0aW9uICE9PSBudWxsKSB7CiAgICAgICAgICAgICR0aGlzLT5jZWxsQ29sbGVjdGlvbi0+dW5zZXRXb3Jrc2hlZXRDZWxscygpOwogICAgICAgICAgICAkdGhpcy0+Y2VsbENvbGxlY3Rpb24gPSBudWxsOwogICAgICAgIH0KICAgICAgICAvLyAgICBkZXRhY2ggb3Vyc2VsZiBmcm9tIHRoZSB3b3JrYm9vaywgc28gdGhhdCBpdCBjYW4gdGhlbiBkZWxldGUgdGhpcyB3b3Jrc2hlZXQgc3VjY2Vzc2Z1bGx5CiAgICAgICAgJHRoaXMtPnBhcmVudCA9IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb2RlIHRvIGV4ZWN1dGUgd2hlbiB0aGlzIHdvcmtzaGVldCBpcyB1bnNldCgpCiAgICAgKgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19kZXN0cnVjdCgpCiAgICB7CiAgICAgICAgUEhQRXhjZWxfQ2FsY3VsYXRpb246OmdldEluc3RhbmNlKCR0aGlzLT5wYXJlbnQpLT5jbGVhckNhbGN1bGF0aW9uQ2FjaGVGb3JXb3Jrc2hlZXQoJHRoaXMtPnRpdGxlKTsKCiAgICAgICAgJHRoaXMtPmRpc2Nvbm5lY3RDZWxscygpOwogICAgfQoKICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIGNhY2hlIGNvbnRyb2xsZXIgZm9yIHRoZSBjZWxsIGNvbGxlY3Rpb24KICAgICAqCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX0NhY2hlZE9iamVjdFN0b3JhZ2VfeHh4CiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRDZWxsQ2FjaGVDb250cm9sbGVyKCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmNlbGxDb2xsZWN0aW9uOwogICAgfQoKCiAgICAvKioKICAgICAqIEdldCBhcnJheSBvZiBpbnZhbGlkIGNoYXJhY3RlcnMgZm9yIHNoZWV0IHRpdGxlCiAgICAgKgogICAgICogQHJldHVybiBhcnJheQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldEludmFsaWRDaGFyYWN0ZXJzKCkKICAgIHsKICAgICAgICByZXR1cm4gc2VsZjo6JGludmFsaWRDaGFyYWN0ZXJzOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2sgc2hlZXQgY29kZSBuYW1lIGZvciB2YWxpZCBFeGNlbCBzeW50YXgKICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRwVmFsdWUgVGhlIHN0cmluZyB0byBjaGVjawogICAgICogQHJldHVybiBzdHJpbmcgVGhlIHZhbGlkIHN0cmluZwogICAgICogQHRocm93cyBFeGNlcHRpb24KICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gY2hlY2tTaGVldENvZGVOYW1lKCRwVmFsdWUpCiAgICB7CiAgICAgICAgJENoYXJDb3VudCA9IFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OkNvdW50Q2hhcmFjdGVycygkcFZhbHVlKTsKICAgICAgICBpZiAoJENoYXJDb3VudCA9PSAwKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oJ1NoZWV0IGNvZGUgbmFtZSBjYW5ub3QgYmUgZW1wdHkuJyk7CiAgICAgICAgfQogICAgICAgIC8vIFNvbWUgb2YgdGhlIHByaW50YWJsZSBBU0NJSSBjaGFyYWN0ZXJzIGFyZSBpbnZhbGlkOiAgKiA6IC8gXCA\\/ICRjZWxsIDogJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgY2VsbCBhdCBhIHNwZWNpZmljIGNvb3JkaW5hdGUKICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRwQ29vcmRpbmF0ZSAgICBDb29yZGluYXRlIG9mIHRoZSBjZWxsCiAgICAgKiBAcGFyYW0gYm9vbGVhbiAkY3JlYXRlSWZOb3RFeGlzdHMgIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIGEgbmV3IGNlbGwgc2hvdWxkIGJlIGNyZWF0ZWQgaWYgaXQgZG9lc24ndAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IGV4aXN0LCBvciBhIG51bGwgc2hvdWxkIGJlIHJldHVybmVkIGluc3RlYWQKICAgICAqIEB0aHJvd3MgUEhQRXhjZWxfRXhjZXB0aW9uCiAgICAgKiBAcmV0dXJuIG51bGx8UEhQRXhjZWxfQ2VsbCBDZWxsIHRoYXQgd2FzIGZvdW5kL2NyZWF0ZWQgb3IgbnVsbAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Q2VsbCgkcENvb3JkaW5hdGUgPSAnQTEnLCAkY3JlYXRlSWZOb3RFeGlzdHMgPSB0cnVlKQogICAgewogICAgICAgIC8vIENoZWNrIGNlbGwgY29sbGVjdGlvbgogICAgICAgIGlmICgkdGhpcy0+Y2VsbENvbGxlY3Rpb24tPmlzRGF0YVNldChzdHJ0b3VwcGVyKCRwQ29vcmRpbmF0ZSkpKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+Y2VsbENvbGxlY3Rpb24tPmdldENhY2hlRGF0YSgkcENvb3JkaW5hdGUpOwogICAgICAgIH0KCiAgICAgICAgLy8gV29ya3NoZWV0IHJlZmVyZW5jZT8KICAgICAgICBpZiAoc3RycG9zKCRwQ29vcmRpbmF0ZSwgJyEnKSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgJHdvcmtzaGVldFJlZmVyZW5jZSA9IFBIUEV4Y2VsX1dvcmtzaGVldDo6ZXh0cmFjdFNoZWV0VGl0bGUoJHBDb29yZGluYXRlLCB0cnVlKTsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5wYXJlbnQtPmdldFNoZWV0QnlOYW1lKCR3b3Jrc2hlZXRSZWZlcmVuY2VbMF0pLT5nZXRDZWxsKHN0cnRvdXBwZXIoJHdvcmtzaGVldFJlZmVyZW5jZVsxXSksICRjcmVhdGVJZk5vdEV4aXN0cyk7CiAgICAgICAgfQoKICAgICAgICAvLyBOYW1lZCByYW5nZT8KICAgICAgICBpZiAoKCFwcmVnX21hdGNoKCcvXicuUEhQRXhjZWxfQ2FsY3VsYXRpb246OkNBTENVTEFUSU9OX1JFR0VYUF9DRUxMUkVGLickL2knLCAkcENvb3JkaW5hdGUsICRtYXRjaGVzKSkgJiYKICAgICAgICAgICAgKHByZWdfbWF0Y2goJy9eJy5QSFBFeGNlbF9DYWxjdWxhdGlvbjo6Q0FMQ1VMQVRJT05fUkVHRVhQX05BTUVEUkFOR0UuJyQvaScsICRwQ29vcmRpbmF0ZSwgJG1hdGNoZXMpKSkgewogICAgICAgICAgICAkbmFtZWRSYW5nZSA9IFBIUEV4Y2VsX05hbWVkUmFuZ2U6OnJlc29sdmVSYW5nZSgkcENvb3JkaW5hdGUsICR0aGlzKTsKICAgICAgICAgICAgaWYgKCRuYW1lZFJhbmdlICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAkcENvb3JkaW5hdGUgPSAkbmFtZWRSYW5nZS0+Z2V0UmFuZ2UoKTsKICAgICAgICAgICAgICAgIHJldHVybiAkbmFtZWRSYW5nZS0+Z2V0V29ya3NoZWV0KCktPmdldENlbGwoJHBDb29yZGluYXRlLCAkY3JlYXRlSWZOb3RFeGlzdHMpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBVcHBlcmNhc2UgY29vcmRpbmF0ZQogICAgICAgICRwQ29vcmRpbmF0ZSA9IHN0cnRvdXBwZXIoJHBDb29yZGluYXRlKTsKCiAgICAgICAgaWYgKHN0cnBvcygkcENvb3JkaW5hdGUsICc6JykgIT09IGZhbHNlIHx8IHN0cnBvcygkcENvb3JkaW5hdGUsICcsJykgIT09IGZhbHNlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oJ0NlbGwgY29vcmRpbmF0ZSBjYW4gbm90IGJlIGEgcmFuZ2Ugb2YgY2VsbHMuJyk7CiAgICAgICAgfSBlbHNlaWYgKHN0cnBvcygkcENvb3JkaW5hdGUsICckJykgIT09IGZhbHNlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oJ0NlbGwgY29vcmRpbmF0ZSBtdXN0IG5vdCBiZSBhYnNvbHV0ZS4nKTsKICAgICAgICB9CgogICAgICAgIC8vIENyZWF0ZSBuZXcgY2VsbCBvYmplY3QsIGlmIHJlcXVpcmVkCiAgICAgICAgcmV0dXJuICRjcmVhdGVJZk5vdEV4aXN0cyA\\\/CiAgICAqCiAgICAqIEByZXR1cm4gYm9vbGVhbgogICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRQcmludEdyaWRsaW5lcygpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5wcmludEdyaWRsaW5lczsKICAgIH0KCiAgICAvKioKICAgICogU2V0IHByaW50IGdyaWRsaW5lcwogICAgKgogICAgKiBAcGFyYW0gYm9vbGVhbiAkcFZhbHVlIFByaW50IGdyaWRsaW5lcyAodHJ1ZS9mYWxzZSkKICAgICogQHJldHVybiBQSFBFeGNlbF9Xb3Jrc2hlZXQKICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0UHJpbnRHcmlkbGluZXMoJHBWYWx1ZSA9IGZhbHNlKQogICAgewogICAgICAgICR0aGlzLT5wcmludEdyaWRsaW5lcyA9ICRwVmFsdWU7CiAgICAgICAgcmV0dXJuICR0aGlzOwogICAgfQoKICAgIC8qKgogICAgKiBTaG93IHJvdyBhbmQgY29sdW1uIGhlYWRlcnM\\/CiAgICAgKiBAcGFyYW0gYm9vbGVhbiAkcmV0dXJuQ2VsbFJlZiBGYWxzZSAtIFJldHVybiBhIHNpbXBsZSBhcnJheSBvZiByb3dzIGFuZCBjb2x1bW5zIGluZGV4ZWQgYnkgbnVtYmVyIGNvdW50aW5nIGZyb20gemVybwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHJ1ZSAtIFJldHVybiByb3dzIGFuZCBjb2x1bW5zIGluZGV4ZWQgYnkgdGhlaXIgYWN0dWFsIHJvdyBhbmQgY29sdW1uIElEcwogICAgICogQHJldHVybiBhcnJheQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gcmFuZ2VUb0FycmF5KCRwUmFuZ2UgPSAnQTEnLCAkbnVsbFZhbHVlID0gbnVsbCwgJGNhbGN1bGF0ZUZvcm11bGFzID0gdHJ1ZSwgJGZvcm1hdERhdGEgPSB0cnVlLCAkcmV0dXJuQ2VsbFJlZiA9IGZhbHNlKQogICAgewogICAgICAgIC8vIFJldHVybnZhbHVlCiAgICAgICAgJHJldHVyblZhbHVlID0gYXJyYXkoKTsKICAgICAgICAvLyAgICBJZGVudGlmeSB0aGUgcmFuZ2UgdGhhdCB3ZSBuZWVkIHRvIGV4dHJhY3QgZnJvbSB0aGUgd29ya3NoZWV0CiAgICAgICAgbGlzdCgkcmFuZ2VTdGFydCwgJHJhbmdlRW5kKSA9IFBIUEV4Y2VsX0NlbGw6OnJhbmdlQm91bmRhcmllcygkcFJhbmdlKTsKICAgICAgICAkbWluQ29sID0gUEhQRXhjZWxfQ2VsbDo6c3RyaW5nRnJvbUNvbHVtbkluZGV4KCRyYW5nZVN0YXJ0WzBdIC0xKTsKICAgICAgICAkbWluUm93ID0gJHJhbmdlU3RhcnRbMV07CiAgICAgICAgJG1heENvbCA9IFBIUEV4Y2VsX0NlbGw6OnN0cmluZ0Zyb21Db2x1bW5JbmRleCgkcmFuZ2VFbmRbMF0gLTEpOwogICAgICAgICRtYXhSb3cgPSAkcmFuZ2VFbmRbMV07CgogICAgICAgICRtYXhDb2wrKzsKICAgICAgICAvLyBMb29wIHRocm91Z2ggcm93cwogICAgICAgICRyID0gLTE7CiAgICAgICAgZm9yICgkcm93ID0gJG1pblJvdzsgJHJvdyA8PSAkbWF4Um93OyArKyRyb3cpIHsKICAgICAgICAgICAgJHJSZWYgPSAoJHJldHVybkNlbGxSZWYpID8gJHJvdyA6ICsrJHI7CiAgICAgICAgICAgICRjID0gLTE7CiAgICAgICAgICAgIC8vIExvb3AgdGhyb3VnaCBjb2x1bW5zIGluIHRoZSBjdXJyZW50IHJvdwogICAgICAgICAgICBmb3IgKCRjb2wgPSAkbWluQ29sOyAkY29sICE9ICRtYXhDb2w7ICsrJGNvbCkgewogICAgICAgICAgICAgICAgJGNSZWYgPSAoJHJldHVybkNlbGxSZWYpID8gJGNvbCA6ICsrJGM7CiAgICAgICAgICAgICAgICAvLyAgICBVc2luZyBnZXRDZWxsKCkgd2lsbCBjcmVhdGUgYSBuZXcgY2VsbCBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3QuIFdlIGRvbid0IHdhbnQgdGhhdCB0byBoYXBwZW4KICAgICAgICAgICAgICAgIC8vICAgICAgICBzbyB3ZSB0ZXN0IGFuZCByZXRyaWV2ZSBkaXJlY3RseSBhZ2FpbnN0IGNlbGxDb2xsZWN0aW9uCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmNlbGxDb2xsZWN0aW9uLT5pc0RhdGFTZXQoJGNvbC4kcm93KSkgewogICAgICAgICAgICAgICAgICAgIC8vIENlbGwgZXhpc3RzCiAgICAgICAgICAgICAgICAgICAgJGNlbGwgPSAkdGhpcy0+Y2VsbENvbGxlY3Rpb24tPmdldENhY2hlRGF0YSgkY29sLiRyb3cpOwogICAgICAgICAgICAgICAgICAgIGlmICgkY2VsbC0+Z2V0VmFsdWUoKSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGNlbGwtPmdldFZhbHVlKCkgaW5zdGFuY2VvZiBQSFBFeGNlbF9SaWNoVGV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJldHVyblZhbHVlWyRyUmVmXVskY1JlZl0gPSAkY2VsbC0+Z2V0VmFsdWUoKS0+Z2V0UGxhaW5UZXh0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGNhbGN1bGF0ZUZvcm11bGFzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJldHVyblZhbHVlWyRyUmVmXVskY1JlZl0gPSAkY2VsbC0+Z2V0Q2FsY3VsYXRlZFZhbHVlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXR1cm5WYWx1ZVskclJlZl1bJGNSZWZdID0gJGNlbGwtPmdldFZhbHVlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZm9ybWF0RGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlID0gJHRoaXMtPnBhcmVudC0+Z2V0Q2VsbFhmQnlJbmRleCgkY2VsbC0+Z2V0WGZJbmRleCgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXR1cm5WYWx1ZVskclJlZl1bJGNSZWZdID0gUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0Ojp0b0Zvcm1hdHRlZFN0cmluZygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmV0dXJuVmFsdWVbJHJSZWZdWyRjUmVmXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJHN0eWxlICYmICRzdHlsZS0+Z2V0TnVtYmVyRm9ybWF0KCkpID8gJHN0eWxlLT5nZXROdW1iZXJGb3JtYXQoKS0+Z2V0Rm9ybWF0Q29kZSgpIDogUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0OjpGT1JNQVRfR0VORVJBTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENlbGwgaG9sZHMgYSBOVUxMCiAgICAgICAgICAgICAgICAgICAgICAgICRyZXR1cm5WYWx1ZVskclJlZl1bJGNSZWZdID0gJG51bGxWYWx1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIENlbGwgZG9lc24ndCBleGlzdAogICAgICAgICAgICAgICAgICAgICRyZXR1cm5WYWx1ZVskclJlZl1bJGNSZWZdID0gJG51bGxWYWx1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gUmV0dXJuCiAgICAgICAgcmV0dXJuICRyZXR1cm5WYWx1ZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBDcmVhdGUgYXJyYXkgZnJvbSBhIHJhbmdlIG9mIGNlbGxzCiAgICAgKgogICAgICogQHBhcmFtICBzdHJpbmcgJHBOYW1lZFJhbmdlIE5hbWUgb2YgdGhlIE5hbWVkIFJhbmdlCiAgICAgKiBAcGFyYW0gIG1peGVkICAkbnVsbFZhbHVlIFZhbHVlIHJldHVybmVkIGluIHRoZSBhcnJheSBlbnRyeSBpZiBhIGNlbGwgZG9lc24ndCBleGlzdAogICAgICogQHBhcmFtICBib29sZWFuICRjYWxjdWxhdGVGb3JtdWxhcyAgU2hvdWxkIGZvcm11bGFzIGJlIGNhbGN1bGF0ZWQ\/CiAgICAgKiBAcGFyYW0gIGJvb2xlYW4gJGZvcm1hdERhdGEgIFNob3VsZCBmb3JtYXR0aW5nIGJlIGFwcGxpZWQgdG8gY2VsbCB2YWx1ZXM\/CiAgICAgKiBAcGFyYW0gIGJvb2xlYW4gJHJldHVybkNlbGxSZWYgRmFsc2UgLSBSZXR1cm4gYSBzaW1wbGUgYXJyYXkgb2Ygcm93cyBhbmQgY29sdW1ucyBpbmRleGVkIGJ5IG51bWJlciBjb3VudGluZyBmcm9tIHplcm8KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcnVlIC0gUmV0dXJuIHJvd3MgYW5kIGNvbHVtbnMgaW5kZXhlZCBieSB0aGVpciBhY3R1YWwgcm93IGFuZCBjb2x1bW4gSURzCiAgICAgKiBAcmV0dXJuIGFycmF5CiAgICAgKiBAdGhyb3dzIFBIUEV4Y2VsX0V4Y2VwdGlvbgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gbmFtZWRSYW5nZVRvQXJyYXkoJHBOYW1lZFJhbmdlID0gJycsICRudWxsVmFsdWUgPSBudWxsLCAkY2FsY3VsYXRlRm9ybXVsYXMgPSB0cnVlLCAkZm9ybWF0RGF0YSA9IHRydWUsICRyZXR1cm5DZWxsUmVmID0gZmFsc2UpCiAgICB7CiAgICAgICAgJG5hbWVkUmFuZ2UgPSBQSFBFeGNlbF9OYW1lZFJhbmdlOjpyZXNvbHZlUmFuZ2UoJHBOYW1lZFJhbmdlLCAkdGhpcyk7CiAgICAgICAgaWYgKCRuYW1lZFJhbmdlICE9PSBudWxsKSB7CiAgICAgICAgICAgICRwV29ya1NoZWV0ID0gJG5hbWVkUmFuZ2UtPmdldFdvcmtzaGVldCgpOwogICAgICAgICAgICAkcENlbGxSYW5nZSA9ICRuYW1lZFJhbmdlLT5nZXRSYW5nZSgpOwoKICAgICAgICAgICAgcmV0dXJuICRwV29ya1NoZWV0LT5yYW5nZVRvQXJyYXkoJHBDZWxsUmFuZ2UsICRudWxsVmFsdWUsICRjYWxjdWxhdGVGb3JtdWxhcywgJGZvcm1hdERhdGEsICRyZXR1cm5DZWxsUmVmKTsKICAgICAgICB9CgogICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oJ05hbWVkIFJhbmdlICcuJHBOYW1lZFJhbmdlLicgZG9lcyBub3QgZXhpc3QuJyk7CiAgICB9CgoKICAgIC8qKgogICAgICogQ3JlYXRlIGFycmF5IGZyb20gd29ya3NoZWV0CiAgICAgKgogICAgICogQHBhcmFtIG1peGVkICRudWxsVmFsdWUgVmFsdWUgcmV0dXJuZWQgaW4gdGhlIGFycmF5IGVudHJ5IGlmIGEgY2VsbCBkb2Vzbid0IGV4aXN0CiAgICAgKiBAcGFyYW0gYm9vbGVhbiAkY2FsY3VsYXRlRm9ybXVsYXMgU2hvdWxkIGZvcm11bGFzIGJlIGNhbGN1bGF0ZWQ\/CiAgICAgKiBAcGFyYW0gYm9vbGVhbiAkZm9ybWF0RGF0YSAgU2hvdWxkIGZvcm1hdHRpbmcgYmUgYXBwbGllZCB0byBjZWxsIHZhbHVlcz8KICAgICAqIEBwYXJhbSBib29sZWFuICRyZXR1cm5DZWxsUmVmIEZhbHNlIC0gUmV0dXJuIGEgc2ltcGxlIGFycmF5IG9mIHJvd3MgYW5kIGNvbHVtbnMgaW5kZXhlZCBieSBudW1iZXIgY291bnRpbmcgZnJvbSB6ZXJvCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcnVlIC0gUmV0dXJuIHJvd3MgYW5kIGNvbHVtbnMgaW5kZXhlZCBieSB0aGVpciBhY3R1YWwgcm93IGFuZCBjb2x1bW4gSURzCiAgICAgKiBAcmV0dXJuIGFycmF5CiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiB0b0FycmF5KCRudWxsVmFsdWUgPSBudWxsLCAkY2FsY3VsYXRlRm9ybXVsYXMgPSB0cnVlLCAkZm9ybWF0RGF0YSA9IHRydWUsICRyZXR1cm5DZWxsUmVmID0gZmFsc2UpCiAgICB7CiAgICAgICAgLy8gR2FyYmFnZSBjb2xsZWN0Li4uCiAgICAgICAgJHRoaXMtPmdhcmJhZ2VDb2xsZWN0KCk7CgogICAgICAgIC8vICAgIElkZW50aWZ5IHRoZSByYW5nZSB0aGF0IHdlIG5lZWQgdG8gZXh0cmFjdCBmcm9tIHRoZSB3b3Jrc2hlZXQKICAgICAgICAkbWF4Q29sID0gJHRoaXMtPmdldEhpZ2hlc3RDb2x1bW4oKTsKICAgICAgICAkbWF4Um93ID0gJHRoaXMtPmdldEhpZ2hlc3RSb3coKTsKICAgICAgICAvLyBSZXR1cm4KICAgICAgICByZXR1cm4gJHRoaXMtPnJhbmdlVG9BcnJheSgnQTE6Jy4kbWF4Q29sLiRtYXhSb3csICRudWxsVmFsdWUsICRjYWxjdWxhdGVGb3JtdWxhcywgJGZvcm1hdERhdGEsICRyZXR1cm5DZWxsUmVmKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCByb3cgaXRlcmF0b3IKICAgICAqCiAgICAgKiBAcGFyYW0gICBpbnRlZ2VyICAgJHN0YXJ0Um93ICAgVGhlIHJvdyBudW1iZXIgYXQgd2hpY2ggdG8gc3RhcnQgaXRlcmF0aW5nCiAgICAgKiBAcGFyYW0gICBpbnRlZ2VyICAgJGVuZFJvdyAgICAgVGhlIHJvdyBudW1iZXIgYXQgd2hpY2ggdG8gc3RvcCBpdGVyYXRpbmcKICAgICAqCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1dvcmtzaGVldF9Sb3dJdGVyYXRvcgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Um93SXRlcmF0b3IoJHN0YXJ0Um93ID0gMSwgJGVuZFJvdyA9IG51bGwpCiAgICB7CiAgICAgICAgcmV0dXJuIG5ldyBQSFBFeGNlbF9Xb3Jrc2hlZXRfUm93SXRlcmF0b3IoJHRoaXMsICRzdGFydFJvdywgJGVuZFJvdyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgY29sdW1uIGl0ZXJhdG9yCiAgICAgKgogICAgICogQHBhcmFtICAgc3RyaW5nICAgJHN0YXJ0Q29sdW1uIFRoZSBjb2x1bW4gYWRkcmVzcyBhdCB3aGljaCB0byBzdGFydCBpdGVyYXRpbmcKICAgICAqIEBwYXJhbSAgIHN0cmluZyAgICRlbmRDb2x1bW4gICBUaGUgY29sdW1uIGFkZHJlc3MgYXQgd2hpY2ggdG8gc3RvcCBpdGVyYXRpbmcKICAgICAqCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1dvcmtzaGVldF9Db2x1bW5JdGVyYXRvcgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Q29sdW1uSXRlcmF0b3IoJHN0YXJ0Q29sdW1uID0gJ0EnLCAkZW5kQ29sdW1uID0gbnVsbCkKICAgIHsKICAgICAgICByZXR1cm4gbmV3IFBIUEV4Y2VsX1dvcmtzaGVldF9Db2x1bW5JdGVyYXRvcigkdGhpcywgJHN0YXJ0Q29sdW1uLCAkZW5kQ29sdW1uKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJ1biBQSFBFeGNlbCBnYXJhYmFnZSBjb2xsZWN0b3IuCiAgICAgKgogICAgICogQHJldHVybiBQSFBFeGNlbF9Xb3Jrc2hlZXQKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdhcmJhZ2VDb2xsZWN0KCkKICAgIHsKICAgICAgICAvLyBGbHVzaCBjYWNoZQogICAgICAgICR0aGlzLT5jZWxsQ29sbGVjdGlvbi0+Z2V0Q2FjaGVEYXRhKCdBMScpOwogICAgICAgIC8vIEJ1aWxkIGEgcmVmZXJlbmNlIHRhYmxlIGZyb20gaW1hZ2VzCi8vICAgICAgICAkaW1hZ2VDb29yZGluYXRlcyA9IGFycmF5KCk7Ci8vICAgICAgICAkaXRlcmF0b3IgPSAkdGhpcy0+Z2V0RHJhd2luZ0NvbGxlY3Rpb24oKS0+Z2V0SXRlcmF0b3IoKTsKLy8gICAgICAgIHdoaWxlICgkaXRlcmF0b3ItPnZhbGlkKCkpIHsKLy8gICAgICAgICAgICAkaW1hZ2VDb29yZGluYXRlc1skaXRlcmF0b3ItPmN1cnJlbnQoKS0+Z2V0Q29vcmRpbmF0ZXMoKV0gPSB0cnVlOwovLwovLyAgICAgICAgICAgICRpdGVyYXRvci0+bmV4dCgpOwovLyAgICAgICAgfQovLwogICAgICAgIC8vIExvb2t1cCBoaWdoZXN0IGNvbHVtbiBhbmQgaGlnaGVzdCByb3cgaWYgY2VsbHMgYXJlIGNsZWFuZWQKICAgICAgICAkY29sUm93ID0gJHRoaXMtPmNlbGxDb2xsZWN0aW9uLT5nZXRIaWdoZXN0Um93QW5kQ29sdW1uKCk7CiAgICAgICAgJGhpZ2hlc3RSb3cgPSAkY29sUm93Wydyb3cnXTsKICAgICAgICAkaGlnaGVzdENvbHVtbiA9IFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkY29sUm93Wydjb2x1bW4nXSk7CgogICAgICAgIC8vIExvb3AgdGhyb3VnaCBjb2x1bW4gZGltZW5zaW9ucwogICAgICAgIGZvcmVhY2ggKCR0aGlzLT5jb2x1bW5EaW1lbnNpb25zIGFzICRkaW1lbnNpb24pIHsKICAgICAgICAgICAgJGhpZ2hlc3RDb2x1bW4gPSBtYXgoJGhpZ2hlc3RDb2x1bW4sIFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkZGltZW5zaW9uLT5nZXRDb2x1bW5JbmRleCgpKSk7CiAgICAgICAgfQoKICAgICAgICAvLyBMb29wIHRocm91Z2ggcm93IGRpbWVuc2lvbnMKICAgICAgICBmb3JlYWNoICgkdGhpcy0+cm93RGltZW5zaW9ucyBhcyAkZGltZW5zaW9uKSB7CiAgICAgICAgICAgICRoaWdoZXN0Um93ID0gbWF4KCRoaWdoZXN0Um93LCAkZGltZW5zaW9uLT5nZXRSb3dJbmRleCgpKTsKICAgICAgICB9CgogICAgICAgIC8vIENhY2hlIHZhbHVlcwogICAgICAgIGlmICgkaGlnaGVzdENvbHVtbiA8IDApIHsKICAgICAgICAgICAgJHRoaXMtPmNhY2hlZEhpZ2hlc3RDb2x1bW4gPSAnQSc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHRoaXMtPmNhY2hlZEhpZ2hlc3RDb2x1bW4gPSBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoLS0kaGlnaGVzdENvbHVtbik7CiAgICAgICAgfQogICAgICAgICR0aGlzLT5jYWNoZWRIaWdoZXN0Um93ID0gJGhpZ2hlc3RSb3c7CgogICAgICAgIC8vIFJldHVybgogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBoYXNoIGNvZGUKICAgICAqCiAgICAgKiBAcmV0dXJuIHN0cmluZyAgICBIYXNoIGNvZGUKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldEhhc2hDb2RlKCkKICAgIHsKICAgICAgICBpZiAoJHRoaXMtPmRpcnR5KSB7CiAgICAgICAgICAgICR0aGlzLT5oYXNoID0gbWQ1KCR0aGlzLT50aXRsZSAuICR0aGlzLT5hdXRvRmlsdGVyIC4gKCR0aGlzLT5wcm90ZWN0aW9uLT5pc1Byb3RlY3Rpb25FbmFibGVkKCkgPyAndCcgOiAnZicpIC4gX19DTEFTU19fKTsKICAgICAgICAgICAgJHRoaXMtPmRpcnR5ID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiAkdGhpcy0+aGFzaDsKICAgIH0KCiAgICAvKioKICAgICAqIEV4dHJhY3Qgd29ya3NoZWV0IHRpdGxlIGZyb20gcmFuZ2UuCiAgICAgKgogICAgICogRXhhbXBsZTogZXh0cmFjdFNoZWV0VGl0bGUoInRlc3RTaGVldCFBMSIpID09PiAnQTEnCiAgICAgKiBFeGFtcGxlOiBleHRyYWN0U2hlZXRUaXRsZSgiJ3Rlc3RTaGVldCAxJyFBMSIsIHRydWUpID09PiBhcnJheSgndGVzdFNoZWV0IDEnLCAnQTEnKTsKICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRwUmFuZ2UgICAgUmFuZ2UgdG8gZXh0cmFjdCB0aXRsZSBmcm9tCiAgICAgKiBAcGFyYW0gYm9vbCAkcmV0dXJuUmFuZ2UgICAgUmV0dXJuIHJhbmdlPyAoc2VlIGV4YW1wbGUpCiAgICAgKiBAcmV0dXJuIG1peGVkCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZXh0cmFjdFNoZWV0VGl0bGUoJHBSYW5nZSwgJHJldHVyblJhbmdlID0gZmFsc2UpCiAgICB7CiAgICAgICAgLy8gU2hlZXQgdGl0bGUgaW5jbHVkZWQ\/CiAgICAgICAgaWYgKCgkc2VwID0gc3RycG9zKCRwUmFuZ2UsICchJykpID09PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgfQoKICAgICAgICBpZiAoJHJldHVyblJhbmdlKSB7CiAgICAgICAgICAgIHJldHVybiBhcnJheSh0cmltKHN1YnN0cigkcFJhbmdlLCAwLCAkc2VwKSwgIiciKSwgc3Vic3RyKCRwUmFuZ2UsICRzZXAgKyAxKSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3Vic3RyKCRwUmFuZ2UsICRzZXAgKyAxKTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBoeXBlcmxpbmsKICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRwQ2VsbENvb3JkaW5hdGUgICAgQ2VsbCBjb29yZGluYXRlIHRvIGdldCBoeXBlcmxpbmsgZm9yCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRIeXBlcmxpbmsoJHBDZWxsQ29vcmRpbmF0ZSA9ICdBMScpCiAgICB7CiAgICAgICAgLy8gcmV0dXJuIGh5cGVybGluayBpZiB3ZSBhbHJlYWR5IGhhdmUgb25lCiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5oeXBlcmxpbmtDb2xsZWN0aW9uWyRwQ2VsbENvb3JkaW5hdGVdKSkgewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmh5cGVybGlua0NvbGxlY3Rpb25bJHBDZWxsQ29vcmRpbmF0ZV07CiAgICAgICAgfQoKICAgICAgICAvLyBlbHNlIGNyZWF0ZSBoeXBlcmxpbmsKICAgICAgICAkdGhpcy0+aHlwZXJsaW5rQ29sbGVjdGlvblskcENlbGxDb29yZGluYXRlXSA9IG5ldyBQSFBFeGNlbF9DZWxsX0h5cGVybGluaygpOwogICAgICAgIHJldHVybiAkdGhpcy0+aHlwZXJsaW5rQ29sbGVjdGlvblskcENlbGxDb29yZGluYXRlXTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBoeXBlcmxuawogICAgICoKICAgICAqIEBwYXJhbSBzdHJpbmcgJHBDZWxsQ29vcmRpbmF0ZSAgICBDZWxsIGNvb3JkaW5hdGUgdG8gaW5zZXJ0IGh5cGVybGluawogICAgICogQHBhcmFtICAgIFBIUEV4Y2VsX0NlbGxfSHlwZXJsaW5rICAgICRwSHlwZXJsaW5rCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1dvcmtzaGVldAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0SHlwZXJsaW5rKCRwQ2VsbENvb3JkaW5hdGUgPSAnQTEnLCBQSFBFeGNlbF9DZWxsX0h5cGVybGluayAkcEh5cGVybGluayA9IG51bGwpCiAgICB7CiAgICAgICAgaWYgKCRwSHlwZXJsaW5rID09PSBudWxsKSB7CiAgICAgICAgICAgIHVuc2V0KCR0aGlzLT5oeXBlcmxpbmtDb2xsZWN0aW9uWyRwQ2VsbENvb3JkaW5hdGVdKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkdGhpcy0+aHlwZXJsaW5rQ29sbGVjdGlvblskcENlbGxDb29yZGluYXRlXSA9ICRwSHlwZXJsaW5rOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBIeXBlcmxpbmsgYXQgYSBzcGVjaWZpYyBjb29yZGluYXRlIGV4aXN0cz8KICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRwQ29vcmRpbmF0ZQogICAgICogQHJldHVybiBib29sZWFuCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBoeXBlcmxpbmtFeGlzdHMoJHBDb29yZGluYXRlID0gJ0ExJykKICAgIHsKICAgICAgICByZXR1cm4gaXNzZXQoJHRoaXMtPmh5cGVybGlua0NvbGxlY3Rpb25bJHBDb29yZGluYXRlXSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgY29sbGVjdGlvbiBvZiBoeXBlcmxpbmtzCiAgICAgKgogICAgICogQHJldHVybiBQSFBFeGNlbF9DZWxsX0h5cGVybGlua1tdCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRIeXBlcmxpbmtDb2xsZWN0aW9uKCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmh5cGVybGlua0NvbGxlY3Rpb247CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgZGF0YSB2YWxpZGF0aW9uCiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkcENlbGxDb29yZGluYXRlIENlbGwgY29vcmRpbmF0ZSB0byBnZXQgZGF0YSB2YWxpZGF0aW9uIGZvcgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0RGF0YVZhbGlkYXRpb24oJHBDZWxsQ29vcmRpbmF0ZSA9ICdBMScpCiAgICB7CiAgICAgICAgLy8gcmV0dXJuIGRhdGEgdmFsaWRhdGlvbiBpZiB3ZSBhbHJlYWR5IGhhdmUgb25lCiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5kYXRhVmFsaWRhdGlvbkNvbGxlY3Rpb25bJHBDZWxsQ29vcmRpbmF0ZV0pKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+ZGF0YVZhbGlkYXRpb25Db2xsZWN0aW9uWyRwQ2VsbENvb3JkaW5hdGVdOwogICAgICAgIH0KCiAgICAgICAgLy8gZWxzZSBjcmVhdGUgZGF0YSB2YWxpZGF0aW9uCiAgICAgICAgJHRoaXMtPmRhdGFWYWxpZGF0aW9uQ29sbGVjdGlvblskcENlbGxDb29yZGluYXRlXSA9IG5ldyBQSFBFeGNlbF9DZWxsX0RhdGFWYWxpZGF0aW9uKCk7CiAgICAgICAgcmV0dXJuICR0aGlzLT5kYXRhVmFsaWRhdGlvbkNvbGxlY3Rpb25bJHBDZWxsQ29vcmRpbmF0ZV07CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgZGF0YSB2YWxpZGF0aW9uCiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkcENlbGxDb29yZGluYXRlICAgIENlbGwgY29vcmRpbmF0ZSB0byBpbnNlcnQgZGF0YSB2YWxpZGF0aW9uCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfQ2VsbF9EYXRhVmFsaWRhdGlvbiAgICAkcERhdGFWYWxpZGF0aW9uCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1dvcmtzaGVldAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0RGF0YVZhbGlkYXRpb24oJHBDZWxsQ29vcmRpbmF0ZSA9ICdBMScsIFBIUEV4Y2VsX0NlbGxfRGF0YVZhbGlkYXRpb24gJHBEYXRhVmFsaWRhdGlvbiA9IG51bGwpCiAgICB7CiAgICAgICAgaWYgKCRwRGF0YVZhbGlkYXRpb24gPT09IG51bGwpIHsKICAgICAgICAgICAgdW5zZXQoJHRoaXMtPmRhdGFWYWxpZGF0aW9uQ29sbGVjdGlvblskcENlbGxDb29yZGluYXRlXSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHRoaXMtPmRhdGFWYWxpZGF0aW9uQ29sbGVjdGlvblskcENlbGxDb29yZGluYXRlXSA9ICRwRGF0YVZhbGlkYXRpb247CiAgICAgICAgfQogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIERhdGEgdmFsaWRhdGlvbiBhdCBhIHNwZWNpZmljIGNvb3JkaW5hdGUgZXhpc3RzPwogICAgICoKICAgICAqIEBwYXJhbSBzdHJpbmcgJHBDb29yZGluYXRlCiAgICAgKiBAcmV0dXJuIGJvb2xlYW4KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGRhdGFWYWxpZGF0aW9uRXhpc3RzKCRwQ29vcmRpbmF0ZSA9ICdBMScpCiAgICB7CiAgICAgICAgcmV0dXJuIGlzc2V0KCR0aGlzLT5kYXRhVmFsaWRhdGlvbkNvbGxlY3Rpb25bJHBDb29yZGluYXRlXSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgY29sbGVjdGlvbiBvZiBkYXRhIHZhbGlkYXRpb25zCiAgICAgKgogICAgICogQHJldHVybiBQSFBFeGNlbF9DZWxsX0RhdGFWYWxpZGF0aW9uW10KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldERhdGFWYWxpZGF0aW9uQ29sbGVjdGlvbigpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5kYXRhVmFsaWRhdGlvbkNvbGxlY3Rpb247CiAgICB9CgogICAgLyoqCiAgICAgKiBBY2NlcHRzIGEgcmFuZ2UsIHJldHVybmluZyBpdCBhcyBhIHJhbmdlIHRoYXQgZmFsbHMgd2l0aGluIHRoZSBjdXJyZW50IGhpZ2hlc3Qgcm93IGFuZCBjb2x1bW4gb2YgdGhlIHdvcmtzaGVldAogICAgICoKICAgICAqIEBwYXJhbSBzdHJpbmcgJHJhbmdlCiAgICAgKiBAcmV0dXJuIHN0cmluZyBBZGp1c3RlZCByYW5nZSB2YWx1ZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2hyaW5rUmFuZ2VUb0ZpdCgkcmFuZ2UpCiAgICB7CiAgICAgICAgJG1heENvbCA9ICR0aGlzLT5nZXRIaWdoZXN0Q29sdW1uKCk7CiAgICAgICAgJG1heFJvdyA9ICR0aGlzLT5nZXRIaWdoZXN0Um93KCk7CiAgICAgICAgJG1heENvbCA9IFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkbWF4Q29sKTsKCiAgICAgICAgJHJhbmdlQmxvY2tzID0gZXhwbG9kZSgnICcsICRyYW5nZSk7CiAgICAgICAgZm9yZWFjaCAoJHJhbmdlQmxvY2tzIGFzICYkcmFuZ2VTZXQpIHsKICAgICAgICAgICAgJHJhbmdlQm91bmRhcmllcyA9IFBIUEV4Y2VsX0NlbGw6OmdldFJhbmdlQm91bmRhcmllcygkcmFuZ2VTZXQpOwoKICAgICAgICAgICAgaWYgKFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkcmFuZ2VCb3VuZGFyaWVzWzBdWzBdKSA+ICRtYXhDb2wpIHsKICAgICAgICAgICAgICAgICRyYW5nZUJvdW5kYXJpZXNbMF1bMF0gPSBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJG1heENvbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRyYW5nZUJvdW5kYXJpZXNbMF1bMV0gPiAkbWF4Um93KSB7CiAgICAgICAgICAgICAgICAkcmFuZ2VCb3VuZGFyaWVzWzBdWzFdID0gJG1heFJvdzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoUEhQRXhjZWxfQ2VsbDo6Y29sdW1uSW5kZXhGcm9tU3RyaW5nKCRyYW5nZUJvdW5kYXJpZXNbMV1bMF0pID4gJG1heENvbCkgewogICAgICAgICAgICAgICAgJHJhbmdlQm91bmRhcmllc1sxXVswXSA9IFBIUEV4Y2VsX0NlbGw6OnN0cmluZ0Zyb21Db2x1bW5JbmRleCgkbWF4Q29sKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJHJhbmdlQm91bmRhcmllc1sxXVsxXSA+ICRtYXhSb3cpIHsKICAgICAgICAgICAgICAgICRyYW5nZUJvdW5kYXJpZXNbMV1bMV0gPSAkbWF4Um93OwogICAgICAgICAgICB9CiAgICAgICAgICAgICRyYW5nZVNldCA9ICRyYW5nZUJvdW5kYXJpZXNbMF1bMF0uJHJhbmdlQm91bmRhcmllc1swXVsxXS4nOicuJHJhbmdlQm91bmRhcmllc1sxXVswXS4kcmFuZ2VCb3VuZGFyaWVzWzFdWzFdOwogICAgICAgIH0KICAgICAgICB1bnNldCgkcmFuZ2VTZXQpOwogICAgICAgICRzdFJhbmdlID0gaW1wbG9kZSgnICcsICRyYW5nZUJsb2Nrcyk7CgogICAgICAgIHJldHVybiAkc3RSYW5nZTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCB0YWIgY29sb3IKICAgICAqCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1N0eWxlX0NvbG9yCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRUYWJDb2xvcigpCiAgICB7CiAgICAgICAgaWYgKCR0aGlzLT50YWJDb2xvciA9PT0gbnVsbCkgewogICAgICAgICAgICAkdGhpcy0+dGFiQ29sb3IgPSBuZXcgUEhQRXhjZWxfU3R5bGVfQ29sb3IoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICR0aGlzLT50YWJDb2xvcjsKICAgIH0KCiAgICAvKioKICAgICAqIFJlc2V0IHRhYiBjb2xvcgogICAgICoKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfV29ya3NoZWV0CiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiByZXNldFRhYkNvbG9yKCkKICAgIHsKICAgICAgICAkdGhpcy0+dGFiQ29sb3IgPSBudWxsOwogICAgICAgIHVuc2V0KCR0aGlzLT50YWJDb2xvcik7CgogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIFRhYiBjb2xvciBzZXQ\/CiAgICAgKgogICAgICogQHJldHVybiBib29sZWFuCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBpc1RhYkNvbG9yU2V0KCkKICAgIHsKICAgICAgICByZXR1cm4gKCR0aGlzLT50YWJDb2xvciAhPT0gbnVsbCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb3B5IHdvcmtzaGVldCAoIT0gY2xvbmUhKQogICAgICoKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfV29ya3NoZWV0CiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBjb3B5KCkKICAgIHsKICAgICAgICAkY29waWVkID0gY2xvbmUgJHRoaXM7CgogICAgICAgIHJldHVybiAkY29waWVkOwogICAgfQoKICAgIC8qKgogICAgICogSW1wbGVtZW50IFBIUCBfX2Nsb25lIHRvIGNyZWF0ZSBhIGRlZXAgY2xvbmUsIG5vdCBqdXN0IGEgc2hhbGxvdyBjb3B5LgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jbG9uZSgpCiAgICB7CiAgICAgICAgZm9yZWFjaCAoJHRoaXMgYXMgJGtleSA9PiAkdmFsKSB7CiAgICAgICAgICAgIGlmICgka2V5ID09ICdwYXJlbnQnKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGlzX29iamVjdCgkdmFsKSB8fCAoaXNfYXJyYXkoJHZhbCkpKSB7CiAgICAgICAgICAgICAgICBpZiAoJGtleSA9PSAnY2VsbENvbGxlY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgJG5ld0NvbGxlY3Rpb24gPSBjbG9uZSAkdGhpcy0+Y2VsbENvbGxlY3Rpb247CiAgICAgICAgICAgICAgICAgICAgJG5ld0NvbGxlY3Rpb24tPmNvcHlDZWxsQ29sbGVjdGlvbigkdGhpcyk7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNlbGxDb2xsZWN0aW9uID0gJG5ld0NvbGxlY3Rpb247CiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoJGtleSA9PSAnZHJhd2luZ0NvbGxlY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgJG5ld0NvbGxlY3Rpb24gPSBjbG9uZSAkdGhpcy0+ZHJhd2luZ0NvbGxlY3Rpb247CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmRyYXdpbmdDb2xsZWN0aW9uID0gJG5ld0NvbGxlY3Rpb247CiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoKCRrZXkgPT0gJ2F1dG9GaWx0ZXInKSAmJiAoJHRoaXMtPmF1dG9GaWx0ZXIgaW5zdGFuY2VvZiBQSFBFeGNlbF9Xb3Jrc2hlZXRfQXV0b0ZpbHRlcikpIHsKICAgICAgICAgICAgICAgICAgICAkbmV3QXV0b0ZpbHRlciA9IGNsb25lICR0aGlzLT5hdXRvRmlsdGVyOwogICAgICAgICAgICAgICAgICAgICR0aGlzLT5hdXRvRmlsdGVyID0gJG5ld0F1dG9GaWx0ZXI7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmF1dG9GaWx0ZXItPnNldFBhcmVudCgkdGhpcyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICR0aGlzLT57JGtleX0gPSB1bnNlcmlhbGl6ZShzZXJpYWxpemUoJHZhbCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQovKioKICAgICAqIERlZmluZSB0aGUgY29kZSBuYW1lIG9mIHRoZSBzaGVldAogICAgICoKICAgICAqIEBwYXJhbSBudWxsfHN0cmluZyBTYW1lIHJ1bGUgYXMgVGl0bGUgbWludXMgc3BhY2Ugbm90IGFsbG93ZWQgKGJ1dCwgbGlrZSBFeGNlbCwgY2hhbmdlIHNpbGVudGx5IHNwYWNlIHRvIHVuZGVyc2NvcmUpCiAgICAgKiBAcmV0dXJuIG9ialdvcmtzaGVldAogICAgICogQHRocm93cyBQSFBFeGNlbF9FeGNlcHRpb24KICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0Q29kZU5hbWUoJHBWYWx1ZSA9IG51bGwpCiAgICB7CiAgICAgICAgLy8gSXMgdGhpcyBhICdyZW5hbWUnIG9yIG5vdD8KICAgICAgICBpZiAoJHRoaXMtPmdldENvZGVOYW1lKCkgPT0gJHBWYWx1ZSkgewogICAgICAgICAgICByZXR1cm4gJHRoaXM7CiAgICAgICAgfQogICAgICAgICRwVmFsdWUgPSBzdHJfcmVwbGFjZSgnICcsICdfJywgJHBWYWx1ZSk7Ly9FeGNlbCBkb2VzIHRoaXMgYXV0b21hdGljYWxseSB3aXRob3V0IGZsaW5jaGluZywgd2UgYXJlIGRvaW5nIHRoZSBzYW1lCiAgICAgICAgLy8gU3ludGF4IGNoZWNrCiAgICAgICAgLy8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIG5vdCB2YWxpZAogICAgICAgIHNlbGY6OmNoZWNrU2hlZXRDb2RlTmFtZSgkcFZhbHVlKTsKCiAgICAgICAgLy8gV2UgdXNlIHRoZSBzYW1lIGNvZGUgdGhhdCBzZXRUaXRsZSB0byBmaW5kIGEgdmFsaWQgY29kZU5hbWUgZWxzZSBub3QgdXNpbmcgYSBzcGFjZSAoRXhjZWwgZG9uJ3QgbGlrZSkgYnV0IGEgJ18nCgogICAgICAgIGlmICgkdGhpcy0+Z2V0UGFyZW50KCkpIHsKICAgICAgICAgICAgLy8gSXMgdGhlcmUgYWxyZWFkeSBzdWNoIHNoZWV0IG5hbWU\/CiAgICAgICAgICAgIGlmICgkdGhpcy0+Z2V0UGFyZW50KCktPnNoZWV0Q29kZU5hbWVFeGlzdHMoJHBWYWx1ZSkpIHsKICAgICAgICAgICAgICAgIC8vIFVzZSBuYW1lLCBidXQgYXBwZW5kIHdpdGggbG93ZXN0IHBvc3NpYmxlIGludGVnZXIKCiAgICAgICAgICAgICAgICBpZiAoUEhQRXhjZWxfU2hhcmVkX1N0cmluZzo6Q291bnRDaGFyYWN0ZXJzKCRwVmFsdWUpID4gMjkpIHsKICAgICAgICAgICAgICAgICAgICAkcFZhbHVlID0gUEhQRXhjZWxfU2hhcmVkX1N0cmluZzo6U3Vic3RyaW5nKCRwVmFsdWUsIDAsIDI5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRpID0gMTsKICAgICAgICAgICAgICAgIHdoaWxlICgkdGhpcy0+Z2V0UGFyZW50KCktPnNoZWV0Q29kZU5hbWVFeGlzdHMoJHBWYWx1ZSAuICdfJyAuICRpKSkgewogICAgICAgICAgICAgICAgICAgICsrJGk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRpID09IDEwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQSFBFeGNlbF9TaGFyZWRfU3RyaW5nOjpDb3VudENoYXJhY3RlcnMoJHBWYWx1ZSkgPiAyOCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBWYWx1ZSA9IFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OlN1YnN0cmluZygkcFZhbHVlLCAwLCAyOCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAoJGkgPT0gMTAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQSFBFeGNlbF9TaGFyZWRfU3RyaW5nOjpDb3VudENoYXJhY3RlcnMoJHBWYWx1ZSkgPiAyNykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBWYWx1ZSA9IFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OlN1YnN0cmluZygkcFZhbHVlLCAwLCAyNyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJHBWYWx1ZSA9ICRwVmFsdWUgLiAnXycgLiAkaTsvLyBvaywgd2UgaGF2ZSBhIHZhbGlkIG5hbWUKICAgICAgICAgICAgICAgIC8vY29kZU5hbWUgaXMnbnQgdXNlZCBpbiBmb3JtdWxhIDogbm8gbmVlZCB0byBjYWxsIGZvciBhbiB1cGRhdGUKICAgICAgICAgICAgICAgIC8vcmV0dXJuICR0aGlzLT5zZXRUaXRsZSgkYWx0VGl0bGUsICR1cGRhdGVGb3JtdWxhQ2VsbFJlZmVyZW5jZXMpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkdGhpcy0+Y29kZU5hbWU9JHBWYWx1ZTsKICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CiAgICAvKioKICAgICAqIFJldHVybiB0aGUgY29kZSBuYW1lIG9mIHRoZSBzaGVldAogICAgICoKICAgICAqIEByZXR1cm4gbnVsbHxzdHJpbmcKICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Q29kZU5hbWUoKQogICAgewogICAgICAgIHJldHVybiAkdGhpcy0+Y29kZU5hbWU7CiAgICB9CiAgICAvKioKICAgICAqIFNoZWV0IGhhcyBhIGNvZGUgbmFtZSA\/CiAgICAgKiBAcmV0dXJuIGJvb2xlYW4KICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gaGFzQ29kZU5hbWUoKQogICAgewogICAgICAgIHJldHVybiAhKGlzX251bGwoJHRoaXMtPmNvZGVOYW1lKSk7CiAgICB9Cn0K",
    "size": "94317"
}