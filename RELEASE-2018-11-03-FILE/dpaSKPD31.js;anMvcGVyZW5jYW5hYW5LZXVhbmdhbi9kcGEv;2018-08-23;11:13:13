{
    "namaFile": "js\/perencanaanKeuangan\/dpa\/dpaSKPD31.js",
    "lastUpdate": "2018-08-23+11:13:13.98",
    "contentFile": "dmFyIGRwYVNLUEQzMUZpbHRlclNLUEQgPSBuZXcgU2twZENscyh7CiAgcHJlZml4OiAiZHBhU0tQRDMxIiwKICBmb3JtTmFtZTogImRwYVNLUEQzMUZvcm0iLAoKICBwaWxpaFVydXNhbmZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgLy8gZHBhU0tQRDMxLnJlZnJlc2hMaXN0KHRydWUpOwogICAgZHBhU0tQRDMxLmZpbHRlclJlbmRlcigpOwogIH0sCiAgcGlsaWhCaWRhbmdBZnRlcjogZnVuY3Rpb24oKSB7CiAgICAvLyBkcGFTS1BEMzEucmVmcmVzaExpc3QodHJ1ZSk7CiAgICBkcGFTS1BEMzEuZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwaWxpaFVuaXRBZnRlcjogZnVuY3Rpb24oKSB7CiAgICAvLyBkcGFTS1BEMzEucmVmcmVzaExpc3QodHJ1ZSk7CiAgICBkcGFTS1BEMzEuZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwaWxpaFN1YlVuaXRBZnRlcjogZnVuY3Rpb24oKSB7CiAgICAvLyBkcGFTS1BEMzEucmVmcmVzaExpc3QodHJ1ZSk7CiAgICBkcGFTS1BEMzEuZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwaWxpaFNla3NpQWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgLy8gZHBhU0tQRDMxLnJlZnJlc2hMaXN0KHRydWUpOwogICAgZHBhU0tQRDMxLmZpbHRlclJlbmRlcigpOwogIH0KfSk7CnZhciBkcGFTS1BEMzEgPSBuZXcgRGFmdGFyT2JqMih7CiAgcHJlZml4OiAiZHBhU0tQRDMxIiwKICB1cmw6ICJwZ0tldS5waHA\",
    "size": "26055"
}