{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/select2\/select2.js",
    "lastUpdate": "2018-03-22+14:23:54.04",
    "contentFile": "LyoKQ29weXJpZ2h0IDIwMTIgSWdvciBWYXluYmVyZwoKVmVyc2lvbjogMy41LjIgVGltZXN0YW1wOiBTYXQgTm92ICAxIDE0OjQzOjM2IEVEVCAyMDE0CgpUaGlzIHNvZnR3YXJlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiQXBhY2hlIExpY2Vuc2UiKSBvciB0aGUgR05VCkdlbmVyYWwgUHVibGljIExpY2Vuc2UgdmVyc2lvbiAyICh0aGUgIkdQTCBMaWNlbnNlIikuIFlvdSBtYXkgY2hvb3NlIGVpdGhlciBsaWNlbnNlIHRvIGdvdmVybiB5b3VyCnVzZSBvZiB0aGlzIHNvZnR3YXJlIG9ubHkgdXBvbiB0aGUgY29uZGl0aW9uIHRoYXQgeW91IGFjY2VwdCBhbGwgb2YgdGhlIHRlcm1zIG9mIGVpdGhlciB0aGUgQXBhY2hlCkxpY2Vuc2Ugb3IgdGhlIEdQTCBMaWNlbnNlLgoKWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBBcGFjaGUgTGljZW5zZSBhbmQgdGhlIEdQTCBMaWNlbnNlIGF0OgoKICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0yLjAuaHRtbAoKVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUKQXBhY2hlIExpY2Vuc2Ugb3IgdGhlIEdQTCBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUgpDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIEFwYWNoZSBMaWNlbnNlIGFuZCB0aGUgR1BMIExpY2Vuc2UgZm9yCnRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSBhbmQgdGhlIEdQTCBMaWNlbnNlLgoqLwooZnVuY3Rpb24gKCQpIHsKICAgIGlmKHR5cGVvZiAkLmZuLmVhY2gyID09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgJC5leHRlbmQoJC5mbiwgewogICAgICAgICAgICAvKgogICAgICAgICAgICAqIDQtMTAgdGltZXMgZmFzdGVyIC5lYWNoIHJlcGxhY2VtZW50CiAgICAgICAgICAgICogdXNlIGl0IGNhcmVmdWxseSwgYXMgaXQgb3ZlcnJpZGVzIGpRdWVyeSBjb250ZXh0IG9mIGVsZW1lbnQgb24gZWFjaCBpdGVyYXRpb24KICAgICAgICAgICAgKi8KICAgICAgICAgICAgZWFjaDIgOiBmdW5jdGlvbiAoYykgewogICAgICAgICAgICAgICAgdmFyIGogPSAkKFswXSksIGkgPSAtMSwgbCA9IHRoaXMubGVuZ3RoOwogICAgICAgICAgICAgICAgd2hpbGUgKAogICAgICAgICAgICAgICAgICAgICsraSA8IGwKICAgICAgICAgICAgICAgICAgICAmJiAoai5jb250ZXh0ID0galswXSA9IHRoaXNbaV0pCiAgICAgICAgICAgICAgICAgICAgJiYgYy5jYWxsKGpbMF0sIGksIGopICE9PSBmYWxzZSAvLyJ0aGlzIj1ET00sIGk9aW5kZXgsIGo9alF1ZXJ5IG9iamVjdAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9Cn0pKGpRdWVyeSk7CgooZnVuY3Rpb24gKCQsIHVuZGVmaW5lZCkgewogICAgInVzZSBzdHJpY3QiOwogICAgLypnbG9iYWwgZG9jdW1lbnQsIHdpbmRvdywgalF1ZXJ5LCBjb25zb2xlICovCgogICAgaWYgKHdpbmRvdy5TZWxlY3QyICE9PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIEFic3RyYWN0U2VsZWN0MiwgU2luZ2xlU2VsZWN0MiwgTXVsdGlTZWxlY3QyLCBuZXh0VWlkLCBzaXplciwKICAgICAgICBsYXN0TW91c2VQb3NpdGlvbj17eDowLHk6MH0sICRkb2N1bWVudCwgc2Nyb2xsQmFyRGltZW5zaW9ucywKCiAgICBLRVkgPSB7CiAgICAgICAgVEFCOiA5LAogICAgICAgIEVOVEVSOiAxMywKICAgICAgICBFU0M6IDI3LAogICAgICAgIFNQQUNFOiAzMiwKICAgICAgICBMRUZUOiAzNywKICAgICAgICBVUDogMzgsCiAgICAgICAgUklHSFQ6IDM5LAogICAgICAgIERPV046IDQwLAogICAgICAgIFNISUZUOiAxNiwKICAgICAgICBDVFJMOiAxNywKICAgICAgICBBTFQ6IDE4LAogICAgICAgIFBBR0VfVVA6IDMzLAogICAgICAgIFBBR0VfRE9XTjogMzQsCiAgICAgICAgSE9NRTogMzYsCiAgICAgICAgRU5EOiAzNSwKICAgICAgICBCQUNLU1BBQ0U6IDgsCiAgICAgICAgREVMRVRFOiA0NiwKICAgICAgICBpc0Fycm93OiBmdW5jdGlvbiAoaykgewogICAgICAgICAgICBrID0gay53aGljaCA\\/IHVybC5jYWxsKHNlbGYsIHF1ZXJ5LnRlcm0sIHF1ZXJ5LnBhZ2UsIHF1ZXJ5LmNvbnRleHQpIDogdXJsOwoKICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyICYmIHR5cGVvZiBoYW5kbGVyLmFib3J0ID09PSAiZnVuY3Rpb24iKSB7IGhhbmRsZXIuYWJvcnQoKTsgfQoKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnBhcmFtcykgewogICAgICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0aW9ucy5wYXJhbXMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKHBhcmFtcywgb3B0aW9ucy5wYXJhbXMuY2FsbChzZWxmKSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQocGFyYW1zLCBvcHRpb25zLnBhcmFtcyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICQuZXh0ZW5kKHBhcmFtcywgewogICAgICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBvcHRpb25zLmRhdGFUeXBlLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyAtIHJlcGxhY2UgcXVlcnkucGFnZSB3aXRoIHF1ZXJ5IHNvIHVzZXJzIGhhdmUgYWNjZXNzIHRvIHRlcm0sIHBhZ2UsIGV0Yy4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkZWQgcXVlcnkgYXMgdGhpcmQgcGFyYW10ZXIgdG8ga2VlcCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IG9wdGlvbnMucmVzdWx0cyhkYXRhLCBxdWVyeS5wYWdlLCBxdWVyeSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmNhbGxiYWNrKHJlc3VsdHMpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bil7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3I6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcVhIUjoganFYSFIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0U3RhdHVzOiB0ZXh0U3RhdHVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JUaHJvd246IGVycm9yVGhyb3duCiAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5jYWxsYmFjayhyZXN1bHRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB0cmFuc3BvcnQuY2FsbChzZWxmLCBwYXJhbXMpOwogICAgICAgICAgICB9LCBxdWlldE1pbGxpcyk7CiAgICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIFByb2R1Y2VzIGEgcXVlcnkgZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIGEgbG9jYWwgYXJyYXkKICAgICAqCiAgICAgKiBAcGFyYW0gb3B0aW9ucyBvYmplY3QgY29udGFpbmluZyBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMuIFRoZSBvcHRpb25zIHBhcmFtZXRlciBjYW4gZWl0aGVyIGJlIGFuIGFycmF5IG9yIGFuCiAgICAgKiBvYmplY3QuCiAgICAgKgogICAgICogSWYgdGhlIGFycmF5IGZvcm0gaXMgdXNlZCBpdCBpcyBhc3N1bWVkIHRoYXQgaXQgY29udGFpbnMgb2JqZWN0cyB3aXRoICdpZCcgYW5kICd0ZXh0JyBrZXlzLgogICAgICoKICAgICAqIElmIHRoZSBvYmplY3QgZm9ybSBpcyB1c2VkIGl0IGlzIGFzc3VtZWQgdGhhdCBpdCBjb250YWlucyAnZGF0YScgYW5kICd0ZXh0JyBrZXlzLiBUaGUgJ2RhdGEnIGtleSBzaG91bGQgY29udGFpbgogICAgICogYW4gYXJyYXkgb2Ygb2JqZWN0cyB0aGF0IHdpbGwgYmUgdXNlZCBhcyBjaG9pY2VzLiBUaGVzZSBvYmplY3RzIG11c3QgY29udGFpbiBhdCBsZWFzdCBhbiAnaWQnIGtleS4gVGhlICd0ZXh0JwogICAgICoga2V5IGNhbiBlaXRoZXIgYmUgYSBTdHJpbmcgaW4gd2hpY2ggY2FzZSBpdCBpcyBleHBlY3RlZCB0aGF0IGVhY2ggZWxlbWVudCBpbiB0aGUgJ2RhdGEnIGFycmF5IGhhcyBhIGtleSB3aXRoIHRoZQogICAgICogdmFsdWUgb2YgJ3RleHQnIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBtYXRjaCBjaG9pY2VzLiBBbHRlcm5hdGl2ZWx5LCB0ZXh0IGNhbiBiZSBhIGZ1bmN0aW9uKGl0ZW0pIHRoYXQgY2FuIGV4dHJhY3QKICAgICAqIHRoZSB0ZXh0LgogICAgICovCiAgICBmdW5jdGlvbiBsb2NhbChvcHRpb25zKSB7CiAgICAgICAgdmFyIGRhdGEgPSBvcHRpb25zLCAvLyBkYXRhIGVsZW1lbnRzCiAgICAgICAgICAgIGRhdGFUZXh0LAogICAgICAgICAgICB0bXAsCiAgICAgICAgICAgIHRleHQgPSBmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gIiIraXRlbS50ZXh0OyB9OyAvLyBmdW5jdGlvbiB1c2VkIHRvIHJldHJpZXZlIHRoZSB0ZXh0IHBvcnRpb24gb2YgYSBkYXRhIGl0ZW0gdGhhdCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIHNlYXJjaAoKICAgICAgICAgaWYgKCQuaXNBcnJheShkYXRhKSkgewogICAgICAgICAgICB0bXAgPSBkYXRhOwogICAgICAgICAgICBkYXRhID0geyByZXN1bHRzOiB0bXAgfTsKICAgICAgICB9CgogICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGRhdGEpID09PSBmYWxzZSkgewogICAgICAgICAgICB0bXAgPSBkYXRhOwogICAgICAgICAgICBkYXRhID0gZnVuY3Rpb24oKSB7IHJldHVybiB0bXA7IH07CiAgICAgICAgfQoKICAgICAgICB2YXIgZGF0YUl0ZW0gPSBkYXRhKCk7CiAgICAgICAgaWYgKGRhdGFJdGVtLnRleHQpIHsKICAgICAgICAgICAgdGV4dCA9IGRhdGFJdGVtLnRleHQ7CiAgICAgICAgICAgIC8vIGlmIHRleHQgaXMgbm90IGEgZnVuY3Rpb24gd2UgYXNzdW1lIGl0IHRvIGJlIGEga2V5IG5hbWUKICAgICAgICAgICAgaWYgKCEkLmlzRnVuY3Rpb24odGV4dCkpIHsKICAgICAgICAgICAgICAgIGRhdGFUZXh0ID0gZGF0YUl0ZW0udGV4dDsgLy8gd2UgbmVlZCB0byBzdG9yZSB0aGlzIGluIGEgc2VwYXJhdGUgdmFyaWFibGUgYmVjYXVzZSBpbiB0aGUgbmV4dCBzdGVwIGRhdGEgZ2V0cyByZXNldCBhbmQgZGF0YS50ZXh0IGlzIG5vIGxvbmdlciBhdmFpbGFibGUKICAgICAgICAgICAgICAgIHRleHQgPSBmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbVtkYXRhVGV4dF07IH07CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAocXVlcnkpIHsKICAgICAgICAgICAgdmFyIHQgPSBxdWVyeS50ZXJtLCBmaWx0ZXJlZCA9IHsgcmVzdWx0czogW10gfSwgcHJvY2VzczsKICAgICAgICAgICAgaWYgKHQgPT09ICIiKSB7CiAgICAgICAgICAgICAgICBxdWVyeS5jYWxsYmFjayhkYXRhKCkpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBwcm9jZXNzID0gZnVuY3Rpb24oZGF0dW0sIGNvbGxlY3Rpb24pIHsKICAgICAgICAgICAgICAgIHZhciBncm91cCwgYXR0cjsKICAgICAgICAgICAgICAgIGRhdHVtID0gZGF0dW1bMF07CiAgICAgICAgICAgICAgICBpZiAoZGF0dW0uY2hpbGRyZW4pIHsKICAgICAgICAgICAgICAgICAgICBncm91cCA9IHt9OwogICAgICAgICAgICAgICAgICAgIGZvciAoYXR0ciBpbiBkYXR1bSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0dW0uaGFzT3duUHJvcGVydHkoYXR0cikpIGdyb3VwW2F0dHJdPWRhdHVtW2F0dHJdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBncm91cC5jaGlsZHJlbj1bXTsKICAgICAgICAgICAgICAgICAgICAkKGRhdHVtLmNoaWxkcmVuKS5lYWNoMihmdW5jdGlvbihpLCBjaGlsZERhdHVtKSB7IHByb2Nlc3MoY2hpbGREYXR1bSwgZ3JvdXAuY2hpbGRyZW4pOyB9KTsKICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoIHx8IHF1ZXJ5Lm1hdGNoZXIodCwgdGV4dChncm91cCksIGRhdHVtKSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goZ3JvdXApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5Lm1hdGNoZXIodCwgdGV4dChkYXR1bSksIGRhdHVtKSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goZGF0dW0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICQoZGF0YSgpLnJlc3VsdHMpLmVhY2gyKGZ1bmN0aW9uKGksIGRhdHVtKSB7IHByb2Nlc3MoZGF0dW0sIGZpbHRlcmVkLnJlc3VsdHMpOyB9KTsKICAgICAgICAgICAgcXVlcnkuY2FsbGJhY2soZmlsdGVyZWQpOwogICAgICAgIH07CiAgICB9CgogICAgLy8gVE9ETyBqYXZhZG9jCiAgICBmdW5jdGlvbiB0YWdzKGRhdGEpIHsKICAgICAgICB2YXIgaXNGdW5jID0gJC5pc0Z1bmN0aW9uKGRhdGEpOwogICAgICAgIHJldHVybiBmdW5jdGlvbiAocXVlcnkpIHsKICAgICAgICAgICAgdmFyIHQgPSBxdWVyeS50ZXJtLCBmaWx0ZXJlZCA9IHtyZXN1bHRzOiBbXX07CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBpc0Z1bmMgPyBkYXRhKHF1ZXJ5KSA6IGRhdGE7CiAgICAgICAgICAgIGlmICgkLmlzQXJyYXkocmVzdWx0KSkgewogICAgICAgICAgICAgICAgJChyZXN1bHQpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBpc09iamVjdCA9IHRoaXMudGV4dCAhPT0gdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gaXNPYmplY3QgPyB0aGlzLnRleHQgOiB0aGlzOwogICAgICAgICAgICAgICAgICAgIGlmICh0ID09PSAiIiB8fCBxdWVyeS5tYXRjaGVyKHQsIHRleHQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkLnJlc3VsdHMucHVzaChpc09iamVjdCA\/IHRoaXMgOiB7aWQ6IHRoaXMsIHRleHQ6IHRoaXN9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHF1ZXJ5LmNhbGxiYWNrKGZpbHRlcmVkKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgdGhlIGZvcm1hdHRlciBmdW5jdGlvbiBzaG91bGQgYmUgdXNlZC4KICAgICAqCiAgICAgKiBUaHJvd3MgYW4gZXJyb3IgaWYgaXQgaXMgbm90IGEgZnVuY3Rpb24uIFJldHVybnMgdHJ1ZSBpZiBpdCBzaG91bGQgYmUgdXNlZCwKICAgICAqIGZhbHNlIGlmIG5vIGZvcm1hdHRpbmcgc2hvdWxkIGJlIHBlcmZvcm1lZC4KICAgICAqCiAgICAgKiBAcGFyYW0gZm9ybWF0dGVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNoZWNrRm9ybWF0dGVyKGZvcm1hdHRlciwgZm9ybWF0dGVyTmFtZSkgewogICAgICAgIGlmICgkLmlzRnVuY3Rpb24oZm9ybWF0dGVyKSkgcmV0dXJuIHRydWU7CiAgICAgICAgaWYgKCFmb3JtYXR0ZXIpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAodHlwZW9mKGZvcm1hdHRlcikgPT09ICdzdHJpbmcnKSByZXR1cm4gdHJ1ZTsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0dGVyTmFtZSArIiBtdXN0IGJlIGEgc3RyaW5nLCBmdW5jdGlvbiwgb3IgZmFsc3kgdmFsdWUiKTsKICAgIH0KCiAgLyoqCiAgICogUmV0dXJucyBhIGdpdmVuIHZhbHVlCiAgICogSWYgZ2l2ZW4gYSBmdW5jdGlvbiwgcmV0dXJucyBpdHMgb3V0cHV0CiAgICoKICAgKiBAcGFyYW0gdmFsIHN0cmluZ3xmdW5jdGlvbgogICAqIEBwYXJhbSBjb250ZXh0IHZhbHVlIG9mICJ0aGlzIiB0byBiZSBwYXNzZWQgdG8gZnVuY3Rpb24KICAgKiBAcmV0dXJucyB7Kn0KICAgKi8KICAgIGZ1bmN0aW9uIGV2YWx1YXRlKHZhbCwgY29udGV4dCkgewogICAgICAgIGlmICgkLmlzRnVuY3Rpb24odmFsKSkgewogICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7CiAgICAgICAgICAgIHJldHVybiB2YWwuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB2YWw7CiAgICB9CgogICAgZnVuY3Rpb24gY291bnRSZXN1bHRzKHJlc3VsdHMpIHsKICAgICAgICB2YXIgY291bnQgPSAwOwogICAgICAgICQuZWFjaChyZXN1bHRzLCBmdW5jdGlvbihpLCBpdGVtKSB7CiAgICAgICAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7CiAgICAgICAgICAgICAgICBjb3VudCArPSBjb3VudFJlc3VsdHMoaXRlbS5jaGlsZHJlbik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb3VudCsrOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGNvdW50OwogICAgfQoKICAgIC8qKgogICAgICogRGVmYXVsdCB0b2tlbml6ZXIuIFRoaXMgZnVuY3Rpb24gdXNlcyBicmVha3MgdGhlIGlucHV0IG9uIHN1YnN0cmluZyBtYXRjaCBvZiBhbnkgc3RyaW5nIGZyb20gdGhlCiAgICAgKiBvcHRzLnRva2VuU2VwYXJhdG9ycyBhcnJheSBhbmQgdXNlcyBvcHRzLmNyZWF0ZVNlYXJjaENob2ljZSB0byBjcmVhdGUgdGhlIGNob2ljZSBvYmplY3QuIEJvdGggb2YgdGhvc2UKICAgICAqIHR3byBvcHRpb25zIGhhdmUgdG8gYmUgZGVmaW5lZCBpbiBvcmRlciBmb3IgdGhlIHRva2VuaXplciB0byB3b3JrLgogICAgICoKICAgICAqIEBwYXJhbSBpbnB1dCB0ZXh0IHVzZXIgaGFzIHR5cGVkIHNvIGZhciBvciBwYXN0ZWQgaW50byB0aGUgc2VhcmNoIGZpZWxkCiAgICAgKiBAcGFyYW0gc2VsZWN0aW9uIGN1cnJlbnRseSBzZWxlY3RlZCBjaG9pY2VzCiAgICAgKiBAcGFyYW0gc2VsZWN0Q2FsbGJhY2sgZnVuY3Rpb24oY2hvaWNlKSBjYWxsYmFjayB0aG8gYWRkIHRoZSBjaG9pY2UgdG8gc2VsZWN0aW9uCiAgICAgKiBAcGFyYW0gb3B0cyBzZWxlY3QyJ3Mgb3B0cwogICAgICogQHJldHVybiB1bmRlZmluZWQvbnVsbCB0byBsZWF2ZSB0aGUgY3VycmVudCBpbnB1dCB1bmNoYW5nZWQsIG9yIGEgc3RyaW5nIHRvIGNoYW5nZSB0aGUgaW5wdXQgdG8gdGhlIHJldHVybmVkIHZhbHVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRlZmF1bHRUb2tlbml6ZXIoaW5wdXQsIHNlbGVjdGlvbiwgc2VsZWN0Q2FsbGJhY2ssIG9wdHMpIHsKICAgICAgICB2YXIgb3JpZ2luYWwgPSBpbnB1dCwgLy8gc3RvcmUgdGhlIG9yaWdpbmFsIHNvIHdlIGNhbiBjb21wYXJlIGFuZCBrbm93IGlmIHdlIG5lZWQgdG8gdGVsbCB0aGUgc2VhcmNoIHRvIHVwZGF0ZSBpdHMgdGV4dAogICAgICAgICAgICBkdXBlID0gZmFsc2UsIC8vIGNoZWNrIGZvciB3aGV0aGVyIGEgdG9rZW4gd2UgZXh0cmFjdGVkIHJlcHJlc2VudHMgYSBkdXBsaWNhdGUgc2VsZWN0ZWQgY2hvaWNlCiAgICAgICAgICAgIHRva2VuLCAvLyB0b2tlbgogICAgICAgICAgICBpbmRleCwgLy8gcG9zaXRpb24gYXQgd2hpY2ggdGhlIHNlcGFyYXRvciB3YXMgZm91bmQKICAgICAgICAgICAgaSwgbCwgLy8gbG9vcGluZyB2YXJpYWJsZXMKICAgICAgICAgICAgc2VwYXJhdG9yOyAvLyB0aGUgbWF0Y2hlZCBzZXBhcmF0b3IKCiAgICAgICAgaWYgKCFvcHRzLmNyZWF0ZVNlYXJjaENob2ljZSB8fCAhb3B0cy50b2tlblNlcGFyYXRvcnMgfHwgb3B0cy50b2tlblNlcGFyYXRvcnMubGVuZ3RoIDwgMSkgcmV0dXJuIHVuZGVmaW5lZDsKCiAgICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICAgICAgaW5kZXggPSAtMTsKCiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBvcHRzLnRva2VuU2VwYXJhdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgIHNlcGFyYXRvciA9IG9wdHMudG9rZW5TZXBhcmF0b3JzW2ldOwogICAgICAgICAgICAgICAgaW5kZXggPSBpbnB1dC5pbmRleE9mKHNlcGFyYXRvcik7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChpbmRleCA8IDApIGJyZWFrOyAvLyBkaWQgbm90IGZpbmQgYW55IHRva2VuIHNlcGFyYXRvciBpbiB0aGUgaW5wdXQgc3RyaW5nLCBiYWlsCgogICAgICAgICAgICB0b2tlbiA9IGlucHV0LnN1YnN0cmluZygwLCBpbmRleCk7CiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyaW5nKGluZGV4ICsgc2VwYXJhdG9yLmxlbmd0aCk7CgogICAgICAgICAgICBpZiAodG9rZW4ubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgdG9rZW4gPSBvcHRzLmNyZWF0ZVNlYXJjaENob2ljZS5jYWxsKHRoaXMsIHRva2VuLCBzZWxlY3Rpb24pOwogICAgICAgICAgICAgICAgaWYgKHRva2VuICE9PSB1bmRlZmluZWQgJiYgdG9rZW4gIT09IG51bGwgJiYgb3B0cy5pZCh0b2tlbikgIT09IHVuZGVmaW5lZCAmJiBvcHRzLmlkKHRva2VuKSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIGR1cGUgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gc2VsZWN0aW9uLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXF1YWwob3B0cy5pZCh0b2tlbiksIG9wdHMuaWQoc2VsZWN0aW9uW2ldKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cGUgPSB0cnVlOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCFkdXBlKSBzZWxlY3RDYWxsYmFjayh0b2tlbik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChvcmlnaW5hbCE9PWlucHV0KSByZXR1cm4gaW5wdXQ7CiAgICB9CgogICAgZnVuY3Rpb24gY2xlYW51cEpRdWVyeUVsZW1lbnRzKCkgewogICAgICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAgICAgJC5lYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24gKGksIGVsZW1lbnQpIHsKICAgICAgICAgICAgc2VsZltlbGVtZW50XS5yZW1vdmUoKTsKICAgICAgICAgICAgc2VsZltlbGVtZW50XSA9IG51bGw7CiAgICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgbmV3IGNsYXNzCiAgICAgKgogICAgICogQHBhcmFtIHN1cGVyQ2xhc3MKICAgICAqIEBwYXJhbSBtZXRob2RzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNsYXp6KFN1cGVyQ2xhc3MsIG1ldGhvZHMpIHsKICAgICAgICB2YXIgY29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBuZXcgU3VwZXJDbGFzczsKICAgICAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjsKICAgICAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUucGFyZW50ID0gU3VwZXJDbGFzcy5wcm90b3R5cGU7CiAgICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlID0gJC5leHRlbmQoY29uc3RydWN0b3IucHJvdG90eXBlLCBtZXRob2RzKTsKICAgICAgICByZXR1cm4gY29uc3RydWN0b3I7CiAgICB9CgogICAgQWJzdHJhY3RTZWxlY3QyID0gY2xhenooT2JqZWN0LCB7CgogICAgICAgIC8vIGFic3RyYWN0CiAgICAgICAgYmluZDogZnVuY3Rpb24gKGZ1bmMpIHsKICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgZnVuYy5hcHBseShzZWxmLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9OwogICAgICAgIH0sCgogICAgICAgIC8vIGFic3RyYWN0CiAgICAgICAgaW5pdDogZnVuY3Rpb24gKG9wdHMpIHsKICAgICAgICAgICAgdmFyIHJlc3VsdHMsIHNlYXJjaCwgcmVzdWx0c1NlbGVjdG9yID0gIi5zZWxlY3QyLXJlc3VsdHMiOwoKICAgICAgICAgICAgLy8gcHJlcGFyZSBvcHRpb25zCiAgICAgICAgICAgIHRoaXMub3B0cyA9IG9wdHMgPSB0aGlzLnByZXBhcmVPcHRzKG9wdHMpOwoKICAgICAgICAgICAgdGhpcy5pZD1vcHRzLmlkOwoKICAgICAgICAgICAgLy8gZGVzdHJveSBpZiBjYWxsZWQgb24gYW4gZXhpc3RpbmcgY29tcG9uZW50CiAgICAgICAgICAgIGlmIChvcHRzLmVsZW1lbnQuZGF0YSgic2VsZWN0MiIpICE9PSB1bmRlZmluZWQgJiYKICAgICAgICAgICAgICAgIG9wdHMuZWxlbWVudC5kYXRhKCJzZWxlY3QyIikgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIG9wdHMuZWxlbWVudC5kYXRhKCJzZWxlY3QyIikuZGVzdHJveSgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuY3JlYXRlQ29udGFpbmVyKCk7CgogICAgICAgICAgICB0aGlzLmxpdmVSZWdpb24gPSAkKCcuc2VsZWN0Mi1oaWRkZW4tYWNjZXNzaWJsZScpOwogICAgICAgICAgICBpZiAodGhpcy5saXZlUmVnaW9uLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgICAgICB0aGlzLmxpdmVSZWdpb24gPSAkKCI8c3Bhbj4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICJzdGF0dXMiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1saXZlIjogInBvbGl0ZSIKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygic2VsZWN0Mi1oaWRkZW4tYWNjZXNzaWJsZSIpCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLmNvbnRhaW5lcklkPSJzMmlkXyIrKG9wdHMuZWxlbWVudC5hdHRyKCJpZCIpIHx8ICJhdXRvZ2VuIituZXh0VWlkKCkpOwogICAgICAgICAgICB0aGlzLmNvbnRhaW5lckV2ZW50TmFtZT0gdGhpcy5jb250YWluZXJJZAogICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhbLl0pL2csICdfJykKICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oWzsmLFwtXC5cK1wqXH4nOiJcIVxeIyQlQFxbXF1cKFwpPT5cfF0pL2csICdcXCQxJyk7CiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmF0dHIoImlkIiwgdGhpcy5jb250YWluZXJJZCk7CgogICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hdHRyKCJ0aXRsZSIsIG9wdHMuZWxlbWVudC5hdHRyKCJ0aXRsZSIpKTsKCiAgICAgICAgICAgIHRoaXMuYm9keSA9ICQoZG9jdW1lbnQuYm9keSk7CgogICAgICAgICAgICBzeW5jQ3NzQ2xhc3Nlcyh0aGlzLmNvbnRhaW5lciwgdGhpcy5vcHRzLmVsZW1lbnQsIHRoaXMub3B0cy5hZGFwdENvbnRhaW5lckNzc0NsYXNzKTsKCiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmF0dHIoInN0eWxlIiwgb3B0cy5lbGVtZW50LmF0dHIoInN0eWxlIikpOwogICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jc3MoZXZhbHVhdGUob3B0cy5jb250YWluZXJDc3MsIHRoaXMub3B0cy5lbGVtZW50KSk7CiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKGV2YWx1YXRlKG9wdHMuY29udGFpbmVyQ3NzQ2xhc3MsIHRoaXMub3B0cy5lbGVtZW50KSk7CgogICAgICAgICAgICB0aGlzLmVsZW1lbnRUYWJJbmRleCA9IHRoaXMub3B0cy5lbGVtZW50LmF0dHIoInRhYmluZGV4Iik7CgogICAgICAgICAgICAvLyBzd2FwIGNvbnRhaW5lciBmb3IgdGhlIGVsZW1lbnQKICAgICAgICAgICAgdGhpcy5vcHRzLmVsZW1lbnQKICAgICAgICAgICAgICAgIC5kYXRhKCJzZWxlY3QyIiwgdGhpcykKICAgICAgICAgICAgICAgIC5hdHRyKCJ0YWJpbmRleCIsICItMSIpCiAgICAgICAgICAgICAgICAuYmVmb3JlKHRoaXMuY29udGFpbmVyKQogICAgICAgICAgICAgICAgLm9uKCJjbGljay5zZWxlY3QyIiwga2lsbEV2ZW50KTsgLy8gZG8gbm90IGxlYWsgY2xpY2sgZXZlbnRzCgogICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5kYXRhKCJzZWxlY3QyIiwgdGhpcyk7CgogICAgICAgICAgICB0aGlzLmRyb3Bkb3duID0gdGhpcy5jb250YWluZXIuZmluZCgiLnNlbGVjdDItZHJvcCIpOwoKICAgICAgICAgICAgc3luY0Nzc0NsYXNzZXModGhpcy5kcm9wZG93biwgdGhpcy5vcHRzLmVsZW1lbnQsIHRoaXMub3B0cy5hZGFwdERyb3Bkb3duQ3NzQ2xhc3MpOwoKICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5hZGRDbGFzcyhldmFsdWF0ZShvcHRzLmRyb3Bkb3duQ3NzQ2xhc3MsIHRoaXMub3B0cy5lbGVtZW50KSk7CiAgICAgICAgICAgIHRoaXMuZHJvcGRvd24uZGF0YSgic2VsZWN0MiIsIHRoaXMpOwogICAgICAgICAgICB0aGlzLmRyb3Bkb3duLm9uKCJjbGljayIsIGtpbGxFdmVudCk7CgogICAgICAgICAgICB0aGlzLnJlc3VsdHMgPSByZXN1bHRzID0gdGhpcy5jb250YWluZXIuZmluZChyZXN1bHRzU2VsZWN0b3IpOwogICAgICAgICAgICB0aGlzLnNlYXJjaCA9IHNlYXJjaCA9IHRoaXMuY29udGFpbmVyLmZpbmQoImlucHV0LnNlbGVjdDItaW5wdXQiKTsKCiAgICAgICAgICAgIHRoaXMucXVlcnlDb3VudCA9IDA7CiAgICAgICAgICAgIHRoaXMucmVzdWx0c1BhZ2UgPSAwOwogICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBudWxsOwoKICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSB0aGUgY29udGFpbmVyCiAgICAgICAgICAgIHRoaXMuaW5pdENvbnRhaW5lcigpOwoKICAgICAgICAgICAgdGhpcy5jb250YWluZXIub24oImNsaWNrIiwga2lsbEV2ZW50KTsKCiAgICAgICAgICAgIGluc3RhbGxGaWx0ZXJlZE1vdXNlTW92ZSh0aGlzLnJlc3VsdHMpOwoKICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5vbigibW91c2Vtb3ZlLWZpbHRlcmVkIiwgcmVzdWx0c1NlbGVjdG9yLCB0aGlzLmJpbmQodGhpcy5oaWdobGlnaHRVbmRlckV2ZW50KSk7CiAgICAgICAgICAgIHRoaXMuZHJvcGRvd24ub24oInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIiwgcmVzdWx0c1NlbGVjdG9yLCB0aGlzLmJpbmQoZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICB0aGlzLl90b3VjaEV2ZW50ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0VW5kZXJFdmVudChldmVudCk7CiAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5vbigidG91Y2htb3ZlIiwgcmVzdWx0c1NlbGVjdG9yLCB0aGlzLmJpbmQodGhpcy50b3VjaE1vdmVkKSk7CiAgICAgICAgICAgIHRoaXMuZHJvcGRvd24ub24oInRvdWNoc3RhcnQgdG91Y2hlbmQiLCByZXN1bHRzU2VsZWN0b3IsIHRoaXMuYmluZCh0aGlzLmNsZWFyVG91Y2hNb3ZlZCkpOwoKICAgICAgICAgICAgLy8gV2FpdGluZyBmb3IgYSBjbGljayBldmVudCBvbiB0b3VjaCBkZXZpY2VzIHRvIHNlbGVjdCBvcHRpb24gYW5kIGhpZGUgZHJvcGRvd24KICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGNsaWNrIHdpbGwgYmUgdHJpZ2dlcmVkIG9uIGFuIHVuZGVybHlpbmcgZWxlbWVudAogICAgICAgICAgICB0aGlzLmRyb3Bkb3duLm9uKCdjbGljaycsIHRoaXMuYmluZChmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLl90b3VjaEV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG91Y2hFdmVudCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0SGlnaGxpZ2h0ZWQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgaW5zdGFsbERlYm91bmNlZFNjcm9sbCg4MCwgdGhpcy5yZXN1bHRzKTsKICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5vbigic2Nyb2xsLWRlYm91bmNlZCIsIHJlc3VsdHNTZWxlY3RvciwgdGhpcy5iaW5kKHRoaXMubG9hZE1vcmVJZk5lZWRlZCkpOwoKICAgICAgICAgICAgLy8gZG8gbm90IHByb3BhZ2F0ZSBjaGFuZ2UgZXZlbnQgZnJvbSB0aGUgc2VhcmNoIGZpZWxkIG91dCBvZiB0aGUgY29tcG9uZW50CiAgICAgICAgICAgICQodGhpcy5jb250YWluZXIpLm9uKCJjaGFuZ2UiLCAiLnNlbGVjdDItaW5wdXQiLCBmdW5jdGlvbihlKSB7ZS5zdG9wUHJvcGFnYXRpb24oKTt9KTsKICAgICAgICAgICAgJCh0aGlzLmRyb3Bkb3duKS5vbigiY2hhbmdlIiwgIi5zZWxlY3QyLWlucHV0IiwgZnVuY3Rpb24oZSkge2Uuc3RvcFByb3BhZ2F0aW9uKCk7fSk7CgogICAgICAgICAgICAvLyBpZiBqcXVlcnkubW91c2V3aGVlbCBwbHVnaW4gaXMgaW5zdGFsbGVkIHdlIGNhbiBwcmV2ZW50IG91dC1vZi1ib3VuZHMgc2Nyb2xsaW5nIG9mIHJlc3VsdHMgdmlhIG1vdXNld2hlZWwKICAgICAgICAgICAgaWYgKCQuZm4ubW91c2V3aGVlbCkgewogICAgICAgICAgICAgICAgcmVzdWx0cy5tb3VzZXdoZWVsKGZ1bmN0aW9uIChlLCBkZWx0YSwgZGVsdGFYLCBkZWx0YVkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gcmVzdWx0cy5zY3JvbGxUb3AoKTsKICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGFZID4gMCAmJiB0b3AgLSBkZWx0YVkgPD0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnNjcm9sbFRvcCgwKTsKICAgICAgICAgICAgICAgICAgICAgICAga2lsbEV2ZW50KGUpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVsdGFZIDwgMCAmJiByZXN1bHRzLmdldCgwKS5zY3JvbGxIZWlnaHQgLSByZXN1bHRzLnNjcm9sbFRvcCgpICsgZGVsdGFZIDw9IHJlc3VsdHMuaGVpZ2h0KCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5zY3JvbGxUb3AocmVzdWx0cy5nZXQoMCkuc2Nyb2xsSGVpZ2h0IC0gcmVzdWx0cy5oZWlnaHQoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGtpbGxFdmVudChlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaW5zdGFsbEtleVVwQ2hhbmdlRXZlbnQoc2VhcmNoKTsKICAgICAgICAgICAgc2VhcmNoLm9uKCJrZXl1cC1jaGFuZ2UgaW5wdXQgcGFzdGUiLCB0aGlzLmJpbmQodGhpcy51cGRhdGVSZXN1bHRzKSk7CiAgICAgICAgICAgIHNlYXJjaC5vbigiZm9jdXMiLCBmdW5jdGlvbiAoKSB7IHNlYXJjaC5hZGRDbGFzcygic2VsZWN0Mi1mb2N1c2VkIik7IH0pOwogICAgICAgICAgICBzZWFyY2gub24oImJsdXIiLCBmdW5jdGlvbiAoKSB7IHNlYXJjaC5yZW1vdmVDbGFzcygic2VsZWN0Mi1mb2N1c2VkIik7fSk7CgogICAgICAgICAgICB0aGlzLmRyb3Bkb3duLm9uKCJtb3VzZXVwIiwgcmVzdWx0c1NlbGVjdG9yLCB0aGlzLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGlmICgkKGUudGFyZ2V0KS5jbG9zZXN0KCIuc2VsZWN0Mi1yZXN1bHQtc2VsZWN0YWJsZSIpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodFVuZGVyRXZlbnQoZSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RIaWdobGlnaHRlZChlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgLy8gdHJhcCBhbGwgbW91c2UgZXZlbnRzIGZyb20gbGVhdmluZyB0aGUgZHJvcGRvd24uIHNvbWV0aW1lcyB0aGVyZSBtYXkgYmUgYSBtb2RhbCB0aGF0IGlzIGxpc3RlbmluZwogICAgICAgICAgICAvLyBmb3IgbW91c2UgZXZlbnRzIG91dHNpZGUgb2YgaXRzZWxmIHNvIGl0IGNhbiBjbG9zZSBpdHNlbGYuIHNpbmNlIHRoZSBkcm9wZG93biBpcyBub3cgb3V0c2lkZSB0aGUgc2VsZWN0MidzCiAgICAgICAgICAgIC8vIGRvbSBpdCB3aWxsIHRyaWdnZXIgdGhlIHBvcHVwIGNsb3NlLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50CiAgICAgICAgICAgIC8vIGZvY3VzaW4gY2FuIGNhdXNlIGZvY3VzIHdhcnMgYmV0d2VlbiBtb2RhbHMgYW5kIHNlbGVjdDIgc2luY2UgdGhlIGRyb3Bkb3duIGlzIG91dHNpZGUgdGhlIG1vZGFsLgogICAgICAgICAgICB0aGlzLmRyb3Bkb3duLm9uKCJjbGljayBtb3VzZXVwIG1vdXNlZG93biB0b3VjaHN0YXJ0IHRvdWNoZW5kIGZvY3VzaW4iLCBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpOyB9KTsKCiAgICAgICAgICAgIHRoaXMubmV4dFNlYXJjaFRlcm0gPSB1bmRlZmluZWQ7CgogICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKHRoaXMub3B0cy5pbml0U2VsZWN0aW9uKSkgewogICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSBzZWxlY3Rpb24gYmFzZWQgb24gdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHNvdXJjZSBlbGVtZW50CiAgICAgICAgICAgICAgICB0aGlzLmluaXRTZWxlY3Rpb24oKTsKCiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdXNlciBoYXMgcHJvdmlkZWQgYSBmdW5jdGlvbiB0aGF0IGNhbiBzZXQgc2VsZWN0aW9uIGJhc2VkIG9uIHRoZSB2YWx1ZSBvZiB0aGUgc291cmNlIGVsZW1lbnQKICAgICAgICAgICAgICAgIC8vIHdlIG1vbml0b3IgdGhlIGNoYW5nZSBldmVudCBvbiB0aGUgZWxlbWVudCBhbmQgdHJpZ2dlciBpdCwgYWxsb3dpbmcgZm9yIHR3byB3YXkgc3luY2hyb25pemF0aW9uCiAgICAgICAgICAgICAgICB0aGlzLm1vbml0b3JTb3VyY2UoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG9wdHMubWF4aW11bUlucHV0TGVuZ3RoICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaC5hdHRyKCJtYXhsZW5ndGgiLCBvcHRzLm1heGltdW1JbnB1dExlbmd0aCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBkaXNhYmxlZCA9IG9wdHMuZWxlbWVudC5wcm9wKCJkaXNhYmxlZCIpOwogICAgICAgICAgICBpZiAoZGlzYWJsZWQgPT09IHVuZGVmaW5lZCkgZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5lbmFibGUoIWRpc2FibGVkKTsKCiAgICAgICAgICAgIHZhciByZWFkb25seSA9IG9wdHMuZWxlbWVudC5wcm9wKCJyZWFkb25seSIpOwogICAgICAgICAgICBpZiAocmVhZG9ubHkgPT09IHVuZGVmaW5lZCkgcmVhZG9ubHkgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5yZWFkb25seShyZWFkb25seSk7CgogICAgICAgICAgICAvLyBDYWxjdWxhdGUgc2l6ZSBvZiBzY3JvbGxiYXIKICAgICAgICAgICAgc2Nyb2xsQmFyRGltZW5zaW9ucyA9IHNjcm9sbEJhckRpbWVuc2lvbnMgfHwgbWVhc3VyZVNjcm9sbGJhcigpOwoKICAgICAgICAgICAgdGhpcy5hdXRvZm9jdXMgPSBvcHRzLmVsZW1lbnQucHJvcCgiYXV0b2ZvY3VzIik7CiAgICAgICAgICAgIG9wdHMuZWxlbWVudC5wcm9wKCJhdXRvZm9jdXMiLCBmYWxzZSk7CiAgICAgICAgICAgIGlmICh0aGlzLmF1dG9mb2N1cykgdGhpcy5mb2N1cygpOwoKICAgICAgICAgICAgdGhpcy5zZWFyY2guYXR0cigicGxhY2Vob2xkZXIiLCBvcHRzLnNlYXJjaElucHV0UGxhY2Vob2xkZXIpOwogICAgICAgIH0sCgogICAgICAgIC8vIGFic3RyYWN0CiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZWxlbWVudD10aGlzLm9wdHMuZWxlbWVudCwgc2VsZWN0MiA9IGVsZW1lbnQuZGF0YSgic2VsZWN0MiIpLCBzZWxmID0gdGhpczsKCiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTsKCiAgICAgICAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCAmJiBlbGVtZW50WzBdLmRldGFjaEV2ZW50ICYmIHNlbGYuX3N5bmMpIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuX3N5bmMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRhY2hFdmVudCgib25wcm9wZXJ0eWNoYW5nZSIsIHNlbGYuX3N5bmMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0aGlzLnByb3BlcnR5T2JzZXJ2ZXIpIHsKICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydHlPYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgICAgICAgICAgICAgICB0aGlzLnByb3BlcnR5T2JzZXJ2ZXIgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuX3N5bmMgPSBudWxsOwoKICAgICAgICAgICAgaWYgKHNlbGVjdDIgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgc2VsZWN0Mi5jb250YWluZXIucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICBzZWxlY3QyLmxpdmVSZWdpb24ucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICBzZWxlY3QyLmRyb3Bkb3duLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgZWxlbWVudAogICAgICAgICAgICAgICAgICAgIC5zaG93KCkKICAgICAgICAgICAgICAgICAgICAucmVtb3ZlRGF0YSgic2VsZWN0MiIpCiAgICAgICAgICAgICAgICAgICAgLm9mZigiLnNlbGVjdDIiKQogICAgICAgICAgICAgICAgICAgIC5wcm9wKCJhdXRvZm9jdXMiLCB0aGlzLmF1dG9mb2N1cyB8fCBmYWxzZSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50VGFiSW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmF0dHIoe3RhYmluZGV4OiB0aGlzLmVsZW1lbnRUYWJJbmRleH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHIoInRhYmluZGV4Iik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbGVtZW50LnNob3coKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2xlYW51cEpRdWVyeUVsZW1lbnRzLmNhbGwodGhpcywKICAgICAgICAgICAgICAgICJjb250YWluZXIiLAogICAgICAgICAgICAgICAgImxpdmVSZWdpb24iLAogICAgICAgICAgICAgICAgImRyb3Bkb3duIiwKICAgICAgICAgICAgICAgICJyZXN1bHRzIiwKICAgICAgICAgICAgICAgICJzZWFyY2giCiAgICAgICAgICAgICk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gYWJzdHJhY3QKICAgICAgICBvcHRpb25Ub0RhdGE6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgaWYgKGVsZW1lbnQuaXMoIm9wdGlvbiIpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIGlkOmVsZW1lbnQucHJvcCgidmFsdWUiKSwKICAgICAgICAgICAgICAgICAgICB0ZXh0OmVsZW1lbnQudGV4dCgpLAogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQuZ2V0KCksCiAgICAgICAgICAgICAgICAgICAgY3NzOiBlbGVtZW50LmF0dHIoImNsYXNzIiksCiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGVsZW1lbnQucHJvcCgiZGlzYWJsZWQiKSwKICAgICAgICAgICAgICAgICAgICBsb2NrZWQ6IGVxdWFsKGVsZW1lbnQuYXR0cigibG9ja2VkIiksICJsb2NrZWQiKSB8fCBlcXVhbChlbGVtZW50LmRhdGEoImxvY2tlZCIpLCB0cnVlKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmlzKCJvcHRncm91cCIpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHRleHQ6ZWxlbWVudC5hdHRyKCJsYWJlbCIpLAogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOltdLAogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQuZ2V0KCksCiAgICAgICAgICAgICAgICAgICAgY3NzOiBlbGVtZW50LmF0dHIoImNsYXNzIikKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBhYnN0cmFjdAogICAgICAgIHByZXBhcmVPcHRzOiBmdW5jdGlvbiAob3B0cykgewogICAgICAgICAgICB2YXIgZWxlbWVudCwgc2VsZWN0LCBpZEtleSwgYWpheFVybCwgc2VsZiA9IHRoaXM7CgogICAgICAgICAgICBlbGVtZW50ID0gb3B0cy5lbGVtZW50OwoKICAgICAgICAgICAgaWYgKGVsZW1lbnQuZ2V0KDApLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gInNlbGVjdCIpIHsKICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ID0gc2VsZWN0ID0gb3B0cy5lbGVtZW50OwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc2VsZWN0KSB7CiAgICAgICAgICAgICAgICAvLyB0aGVzZSBvcHRpb25zIGFyZSBub3QgYWxsb3dlZCB3aGVuIGF0dGFjaGVkIHRvIGEgc2VsZWN0IGJlY2F1c2UgdGhleSBhcmUgcGlja2VkIHVwIG9mZiB0aGUgZWxlbWVudCBpdHNlbGYKICAgICAgICAgICAgICAgICQuZWFjaChbImlkIiwgIm11bHRpcGxlIiwgImFqYXgiLCAicXVlcnkiLCAiY3JlYXRlU2VhcmNoQ2hvaWNlIiwgImluaXRTZWxlY3Rpb24iLCAiZGF0YSIsICJ0YWdzIl0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyBpbiBvcHRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiT3B0aW9uICciICsgdGhpcyArICInIGlzIG5vdCBhbGxvd2VkIGZvciBTZWxlY3QyIHdoZW4gYXR0YWNoZWQgdG8gYSA8c2VsZWN0PiBlbGVtZW50LiIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBvcHRzID0gJC5leHRlbmQoe30sIHsKICAgICAgICAgICAgICAgIHBvcHVsYXRlUmVzdWx0czogZnVuY3Rpb24oY29udGFpbmVyLCByZXN1bHRzLCBxdWVyeSkgewogICAgICAgICAgICAgICAgICAgIHZhciBwb3B1bGF0ZSwgaWQ9dGhpcy5vcHRzLmlkLCBsaXZlUmVnaW9uPXRoaXMubGl2ZVJlZ2lvbjsKCiAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGU9ZnVuY3Rpb24ocmVzdWx0cywgY29udGFpbmVyLCBkZXB0aCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGksIGwsIHJlc3VsdCwgc2VsZWN0YWJsZSwgZGlzYWJsZWQsIGNvbXBvdW5kLCBub2RlLCBsYWJlbCwgaW5uZXJDb250YWluZXIsIGZvcm1hdHRlZDsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBvcHRzLnNvcnRSZXN1bHRzKHJlc3VsdHMsIGNvbnRhaW5lciwgcXVlcnkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29sbGVjdCB0aGUgY3JlYXRlZCBub2RlcyBmb3IgYnVsayBhcHBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSByZXN1bHRzLmxlbmd0aDsgaSA8IGw7IGkgPSBpICsgMSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdD1yZXN1bHRzW2ldOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkID0gKHJlc3VsdC5kaXNhYmxlZCA9PT0gdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RhYmxlID0gKCFkaXNhYmxlZCkgJiYgKGlkKHJlc3VsdCkgIT09IHVuZGVmaW5lZCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG91bmQ9cmVzdWx0LmNoaWxkcmVuICYmIHJlc3VsdC5jaGlsZHJlbi5sZW5ndGggPiAwOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU9JCgiPGxpPjwvbGk+Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFkZENsYXNzKCJzZWxlY3QyLXJlc3VsdHMtZGVwdC0iK2RlcHRoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYWRkQ2xhc3MoInNlbGVjdDItcmVzdWx0Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFkZENsYXNzKHNlbGVjdGFibGUgPyAic2VsZWN0Mi1yZXN1bHQtc2VsZWN0YWJsZSIgOiAic2VsZWN0Mi1yZXN1bHQtdW5zZWxlY3RhYmxlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHsgbm9kZS5hZGRDbGFzcygic2VsZWN0Mi1kaXNhYmxlZCIpOyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcG91bmQpIHsgbm9kZS5hZGRDbGFzcygic2VsZWN0Mi1yZXN1bHQtd2l0aC1jaGlsZHJlbiIpOyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFkZENsYXNzKHNlbGYub3B0cy5mb3JtYXRSZXN1bHRDc3NDbGFzcyhyZXN1bHQpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0cigicm9sZSIsICJwcmVzZW50YXRpb24iKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0kKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLmFkZENsYXNzKCJzZWxlY3QyLXJlc3VsdC1sYWJlbCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuYXR0cigiaWQiLCAic2VsZWN0Mi1yZXN1bHQtbGFiZWwtIiArIG5leHRVaWQoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5hdHRyKCJyb2xlIiwgIm9wdGlvbiIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZD1vcHRzLmZvcm1hdFJlc3VsdChyZXN1bHQsIGxhYmVsLCBxdWVyeSwgc2VsZi5vcHRzLmVzY2FwZU1hcmt1cCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0dGVkIT09dW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuaHRtbChmb3JtYXR0ZWQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kKGxhYmVsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvdW5kKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyQ29udGFpbmVyPSQoIjx1bD48L3VsPiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyQ29udGFpbmVyLmFkZENsYXNzKCJzZWxlY3QyLXJlc3VsdC1zdWIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZShyZXN1bHQuY2hpbGRyZW4sIGlubmVyQ29udGFpbmVyLCBkZXB0aCsxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZChpbm5lckNvbnRhaW5lcik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhKCJzZWxlY3QyLWRhdGEiLCByZXN1bHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChub2RlWzBdKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnVsayBhcHBlbmQgdGhlIGNyZWF0ZWQgbm9kZXMKICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChub2Rlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpdmVSZWdpb24udGV4dChvcHRzLmZvcm1hdE1hdGNoZXMocmVzdWx0cy5sZW5ndGgpKTsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZShyZXN1bHRzLCBjb250YWluZXIsIDApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCAkLmZuLnNlbGVjdDIuZGVmYXVsdHMsIG9wdHMpOwoKICAgICAgICAgICAgaWYgKHR5cGVvZihvcHRzLmlkKSAhPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgaWRLZXkgPSBvcHRzLmlkOwogICAgICAgICAgICAgICAgb3B0cy5pZCA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlW2lkS2V5XTsgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCQuaXNBcnJheShvcHRzLmVsZW1lbnQuZGF0YSgic2VsZWN0MlRhZ3MiKSkpIHsKICAgICAgICAgICAgICAgIGlmICgidGFncyIgaW4gb3B0cykgewogICAgICAgICAgICAgICAgICAgIHRocm93ICJ0YWdzIHNwZWNpZmllZCBhcyBib3RoIGFuIGF0dHJpYnV0ZSAnZGF0YS1zZWxlY3QyLXRhZ3MnIGFuZCBpbiBvcHRpb25zIG9mIFNlbGVjdDIgIiArIG9wdHMuZWxlbWVudC5hdHRyKCJpZCIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgb3B0cy50YWdzPW9wdHMuZWxlbWVudC5kYXRhKCJzZWxlY3QyVGFncyIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc2VsZWN0KSB7CiAgICAgICAgICAgICAgICBvcHRzLnF1ZXJ5ID0gdGhpcy5iaW5kKGZ1bmN0aW9uIChxdWVyeSkgewogICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0geyByZXN1bHRzOiBbXSwgbW9yZTogZmFsc2UgfSwKICAgICAgICAgICAgICAgICAgICAgICAgdGVybSA9IHF1ZXJ5LnRlcm0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLCBwbGFjZWhvbGRlck9wdGlvbiwgcHJvY2VzczsKCiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcz1mdW5jdGlvbihlbGVtZW50LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaXMoIm9wdGlvbiIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVlcnkubWF0Y2hlcih0ZXJtLCBlbGVtZW50LnRleHQoKSwgZWxlbWVudCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goc2VsZi5vcHRpb25Ub0RhdGEoZWxlbWVudCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuaXMoIm9wdGdyb3VwIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwPXNlbGYub3B0aW9uVG9EYXRhKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbigpLmVhY2gyKGZ1bmN0aW9uKGksIGVsbSkgeyBwcm9jZXNzKGVsbSwgZ3JvdXAuY2hpbGRyZW4pOyB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncm91cC5jaGlsZHJlbi5sZW5ndGg+MCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24ucHVzaChncm91cCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbj1lbGVtZW50LmNoaWxkcmVuKCk7CgogICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSB0aGUgcGxhY2Vob2xkZXIgb3B0aW9uIGlmIHRoZXJlIGlzIG9uZQogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldFBsYWNlaG9sZGVyKCkgIT09IHVuZGVmaW5lZCAmJiBjaGlsZHJlbi5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyT3B0aW9uID0gdGhpcy5nZXRQbGFjZWhvbGRlck9wdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXJPcHRpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuPWNoaWxkcmVuLm5vdChwbGFjZWhvbGRlck9wdGlvbik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLmVhY2gyKGZ1bmN0aW9uKGksIGVsbSkgeyBwcm9jZXNzKGVsbSwgZGF0YS5yZXN1bHRzKTsgfSk7CgogICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmNhbGxiYWNrKGRhdGEpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIG5lZWRlZCBiZWNhdXNlIGluc2lkZSB2YWwoKSB3ZSBjb25zdHJ1Y3QgY2hvaWNlcyBmcm9tIG9wdGlvbnMgYW5kIHRoZWlyIGlkIGlzIGhhcmRjb2RlZAogICAgICAgICAgICAgICAgb3B0cy5pZD1mdW5jdGlvbihlKSB7IHJldHVybiBlLmlkOyB9OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCEoInF1ZXJ5IiBpbiBvcHRzKSkgewoKICAgICAgICAgICAgICAgICAgICBpZiAoImFqYXgiIGluIG9wdHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWpheFVybCA9IG9wdHMuZWxlbWVudC5kYXRhKCJhamF4LXVybCIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWpheFVybCAmJiBhamF4VXJsLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuYWpheC51cmwgPSBhamF4VXJsOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMucXVlcnkgPSBhamF4LmNhbGwob3B0cy5lbGVtZW50LCBvcHRzLmFqYXgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoImRhdGEiIGluIG9wdHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5xdWVyeSA9IGxvY2FsKG9wdHMuZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgidGFncyIgaW4gb3B0cykgewogICAgICAgICAgICAgICAgICAgICAgICBvcHRzLnF1ZXJ5ID0gdGFncyhvcHRzLnRhZ3MpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jcmVhdGVTZWFyY2hDaG9pY2UgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5jcmVhdGVTZWFyY2hDaG9pY2UgPSBmdW5jdGlvbiAodGVybSkgeyByZXR1cm4ge2lkOiAkLnRyaW0odGVybSksIHRleHQ6ICQudHJpbSh0ZXJtKX07IH07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuaW5pdFNlbGVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmluaXRTZWxlY3Rpb24gPSBmdW5jdGlvbiAoZWxlbWVudCwgY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoc3BsaXRWYWwoZWxlbWVudC52YWwoKSwgb3B0cy5zZXBhcmF0b3IsIG9wdHMudHJhbnNmb3JtVmFsKSkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSB7IGlkOiB0aGlzLCB0ZXh0OiB0aGlzIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdzID0gb3B0cy50YWdzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKHRhZ3MpKSB0YWdzPXRhZ3MoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0YWdzKS5lYWNoKGZ1bmN0aW9uKCkgeyBpZiAoZXF1YWwodGhpcy5pZCwgb2JqLmlkKSkgeyBvYmogPSB0aGlzOyByZXR1cm4gZmFsc2U7IH0gfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaChvYmopOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZihvcHRzLnF1ZXJ5KSAhPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgdGhyb3cgInF1ZXJ5IGZ1bmN0aW9uIG5vdCBkZWZpbmVkIGZvciBTZWxlY3QyICIgKyBvcHRzLmVsZW1lbnQuYXR0cigiaWQiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG9wdHMuY3JlYXRlU2VhcmNoQ2hvaWNlUG9zaXRpb24gPT09ICd0b3AnKSB7CiAgICAgICAgICAgICAgICBvcHRzLmNyZWF0ZVNlYXJjaENob2ljZVBvc2l0aW9uID0gZnVuY3Rpb24obGlzdCwgaXRlbSkgeyBsaXN0LnVuc2hpZnQoaXRlbSk7IH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAob3B0cy5jcmVhdGVTZWFyY2hDaG9pY2VQb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHsKICAgICAgICAgICAgICAgIG9wdHMuY3JlYXRlU2VhcmNoQ2hvaWNlUG9zaXRpb24gPSBmdW5jdGlvbihsaXN0LCBpdGVtKSB7IGxpc3QucHVzaChpdGVtKTsgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Yob3B0cy5jcmVhdGVTZWFyY2hDaG9pY2VQb3NpdGlvbikgIT09ICJmdW5jdGlvbiIpICB7CiAgICAgICAgICAgICAgICB0aHJvdyAiaW52YWxpZCBjcmVhdGVTZWFyY2hDaG9pY2VQb3NpdGlvbiBvcHRpb24gbXVzdCBiZSAndG9wJywgJ2JvdHRvbScgb3IgYSBjdXN0b20gZnVuY3Rpb24iOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gb3B0czsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBNb25pdG9yIHRoZSBvcmlnaW5hbCBlbGVtZW50IGZvciBjaGFuZ2VzIGFuZCB1cGRhdGUgc2VsZWN0MiBhY2NvcmRpbmdseQogICAgICAgICAqLwogICAgICAgIC8vIGFic3RyYWN0CiAgICAgICAgbW9uaXRvclNvdXJjZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZWwgPSB0aGlzLm9wdHMuZWxlbWVudCwgb2JzZXJ2ZXIsIHNlbGYgPSB0aGlzOwoKICAgICAgICAgICAgZWwub24oImNoYW5nZS5zZWxlY3QyIiwgdGhpcy5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLmVsZW1lbnQuZGF0YSgic2VsZWN0Mi1jaGFuZ2UtdHJpZ2dlcmVkIikgIT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRTZWxlY3Rpb24oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgdGhpcy5fc3luYyA9IHRoaXMuYmluZChmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgLy8gc3luYyBlbmFibGVkIHN0YXRlCiAgICAgICAgICAgICAgICB2YXIgZGlzYWJsZWQgPSBlbC5wcm9wKCJkaXNhYmxlZCIpOwogICAgICAgICAgICAgICAgaWYgKGRpc2FibGVkID09PSB1bmRlZmluZWQpIGRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSghZGlzYWJsZWQpOwoKICAgICAgICAgICAgICAgIHZhciByZWFkb25seSA9IGVsLnByb3AoInJlYWRvbmx5Iik7CiAgICAgICAgICAgICAgICBpZiAocmVhZG9ubHkgPT09IHVuZGVmaW5lZCkgcmVhZG9ubHkgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHRoaXMucmVhZG9ubHkocmVhZG9ubHkpOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5lcikgewogICAgICAgICAgICAgICAgICAgIHN5bmNDc3NDbGFzc2VzKHRoaXMuY29udGFpbmVyLCB0aGlzLm9wdHMuZWxlbWVudCwgdGhpcy5vcHRzLmFkYXB0Q29udGFpbmVyQ3NzQ2xhc3MpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKGV2YWx1YXRlKHRoaXMub3B0cy5jb250YWluZXJDc3NDbGFzcywgdGhpcy5vcHRzLmVsZW1lbnQpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodGhpcy5kcm9wZG93bikgewogICAgICAgICAgICAgICAgICAgIHN5bmNDc3NDbGFzc2VzKHRoaXMuZHJvcGRvd24sIHRoaXMub3B0cy5lbGVtZW50LCB0aGlzLm9wdHMuYWRhcHREcm9wZG93bkNzc0NsYXNzKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLmFkZENsYXNzKGV2YWx1YXRlKHRoaXMub3B0cy5kcm9wZG93bkNzc0NsYXNzLCB0aGlzLm9wdHMuZWxlbWVudCkpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBJRTgtMTAgKElFOS8xMCB3b24ndCBmaXJlIHByb3BlcnR5Q2hhbmdlIHZpYSBhdHRhY2hFdmVudExpc3RlbmVyKQogICAgICAgICAgICBpZiAoZWwubGVuZ3RoICYmIGVsWzBdLmF0dGFjaEV2ZW50KSB7CiAgICAgICAgICAgICAgICBlbC5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoRXZlbnQoIm9ucHJvcGVydHljaGFuZ2UiLCBzZWxmLl9zeW5jKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBzYWZhcmksIGNocm9tZSwgZmlyZWZveCwgSUUxMQogICAgICAgICAgICBvYnNlcnZlciA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyfHwgd2luZG93Lk1vek11dGF0aW9uT2JzZXJ2ZXI7CiAgICAgICAgICAgIGlmIChvYnNlcnZlciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wZXJ0eU9ic2VydmVyKSB7IGRlbGV0ZSB0aGlzLnByb3BlcnR5T2JzZXJ2ZXI7IHRoaXMucHJvcGVydHlPYnNlcnZlciA9IG51bGw7IH0KICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydHlPYnNlcnZlciA9IG5ldyBvYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG11dGF0aW9ucywgc2VsZi5fc3luYyk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydHlPYnNlcnZlci5vYnNlcnZlKGVsLmdldCgwKSwgeyBhdHRyaWJ1dGVzOnRydWUsIHN1YnRyZWU6ZmFsc2UgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBhYnN0cmFjdAogICAgICAgIHRyaWdnZXJTZWxlY3Q6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgdmFyIGV2dCA9ICQuRXZlbnQoInNlbGVjdDItc2VsZWN0aW5nIiwgeyB2YWw6IHRoaXMuaWQoZGF0YSksIG9iamVjdDogZGF0YSwgY2hvaWNlOiBkYXRhIH0pOwogICAgICAgICAgICB0aGlzLm9wdHMuZWxlbWVudC50cmlnZ2VyKGV2dCk7CiAgICAgICAgICAgIHJldHVybiAhZXZ0LmlzRGVmYXVsdFByZXZlbnRlZCgpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIFRyaWdnZXJzIHRoZSBjaGFuZ2UgZXZlbnQgb24gdGhlIHNvdXJjZSBlbGVtZW50CiAgICAgICAgICovCiAgICAgICAgLy8gYWJzdHJhY3QKICAgICAgICB0cmlnZ2VyQ2hhbmdlOiBmdW5jdGlvbiAoZGV0YWlscykgewoKICAgICAgICAgICAgZGV0YWlscyA9IGRldGFpbHMgfHwge307CiAgICAgICAgICAgIGRldGFpbHM9ICQuZXh0ZW5kKHt9LCBkZXRhaWxzLCB7IHR5cGU6ICJjaGFuZ2UiLCB2YWw6IHRoaXMudmFsKCkgfSk7CiAgICAgICAgICAgIC8vIHByZXZlbnRzIHJlY3Vyc2l2ZSB0cmlnZ2VyaW5nCiAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LmRhdGEoInNlbGVjdDItY2hhbmdlLXRyaWdnZXJlZCIsIHRydWUpOwogICAgICAgICAgICB0aGlzLm9wdHMuZWxlbWVudC50cmlnZ2VyKGRldGFpbHMpOwogICAgICAgICAgICB0aGlzLm9wdHMuZWxlbWVudC5kYXRhKCJzZWxlY3QyLWNoYW5nZS10cmlnZ2VyZWQiLCBmYWxzZSk7CgogICAgICAgICAgICAvLyBzb21lIHZhbGlkYXRpb24gZnJhbWV3b3JrcyBpZ25vcmUgdGhlIGNoYW5nZSBldmVudCBhbmQgbGlzdGVuIGluc3RlYWQgdG8ga2V5dXAsIGNsaWNrIGZvciBzZWxlY3RzCiAgICAgICAgICAgIC8vIHNvIGhlcmUgd2UgdHJpZ2dlciB0aGUgY2xpY2sgZXZlbnQgbWFudWFsbHkKICAgICAgICAgICAgdGhpcy5vcHRzLmVsZW1lbnQuY2xpY2soKTsKCiAgICAgICAgICAgIC8vIFZhbGlkYXRpb25FbmdpbmUgaWdub3JlcyB0aGUgY2hhbmdlIGV2ZW50IGFuZCBsaXN0ZW5zIGluc3RlYWQgdG8gYmx1cgogICAgICAgICAgICAvLyBzbyBoZXJlIHdlIHRyaWdnZXIgdGhlIGJsdXIgZXZlbnQgbWFudWFsbHkgaWYgc28gZGVzaXJlZAogICAgICAgICAgICBpZiAodGhpcy5vcHRzLmJsdXJPbkNoYW5nZSkKICAgICAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LmJsdXIoKTsKICAgICAgICB9LAoKICAgICAgICAvL2Fic3RyYWN0CiAgICAgICAgaXNJbnRlcmZhY2VFbmFibGVkOiBmdW5jdGlvbigpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVkSW50ZXJmYWNlID09PSB0cnVlOwogICAgICAgIH0sCgogICAgICAgIC8vIGFic3RyYWN0CiAgICAgICAgZW5hYmxlSW50ZXJmYWNlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGVuYWJsZWQgPSB0aGlzLl9lbmFibGVkICYmICF0aGlzLl9yZWFkb25seSwKICAgICAgICAgICAgICAgIGRpc2FibGVkID0gIWVuYWJsZWQ7CgogICAgICAgICAgICBpZiAoZW5hYmxlZCA9PT0gdGhpcy5lbmFibGVkSW50ZXJmYWNlKSByZXR1cm4gZmFsc2U7CgogICAgICAgICAgICB0aGlzLmNvbnRhaW5lci50b2dnbGVDbGFzcygic2VsZWN0Mi1jb250YWluZXItZGlzYWJsZWQiLCBkaXNhYmxlZCk7CiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTsKICAgICAgICAgICAgdGhpcy5lbmFibGVkSW50ZXJmYWNlID0gZW5hYmxlZDsKCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sCgogICAgICAgIC8vIGFic3RyYWN0CiAgICAgICAgZW5hYmxlOiBmdW5jdGlvbihlbmFibGVkKSB7CiAgICAgICAgICAgIGlmIChlbmFibGVkID09PSB1bmRlZmluZWQpIGVuYWJsZWQgPSB0cnVlOwogICAgICAgICAgICBpZiAodGhpcy5fZW5hYmxlZCA9PT0gZW5hYmxlZCkgcmV0dXJuOwogICAgICAgICAgICB0aGlzLl9lbmFibGVkID0gZW5hYmxlZDsKCiAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LnByb3AoImRpc2FibGVkIiwgIWVuYWJsZWQpOwogICAgICAgICAgICB0aGlzLmVuYWJsZUludGVyZmFjZSgpOwogICAgICAgIH0sCgogICAgICAgIC8vIGFic3RyYWN0CiAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuZW5hYmxlKGZhbHNlKTsKICAgICAgICB9LAoKICAgICAgICAvLyBhYnN0cmFjdAogICAgICAgIHJlYWRvbmx5OiBmdW5jdGlvbihlbmFibGVkKSB7CiAgICAgICAgICAgIGlmIChlbmFibGVkID09PSB1bmRlZmluZWQpIGVuYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgaWYgKHRoaXMuX3JlYWRvbmx5ID09PSBlbmFibGVkKSByZXR1cm47CiAgICAgICAgICAgIHRoaXMuX3JlYWRvbmx5ID0gZW5hYmxlZDsKCiAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LnByb3AoInJlYWRvbmx5IiwgZW5hYmxlZCk7CiAgICAgICAgICAgIHRoaXMuZW5hYmxlSW50ZXJmYWNlKCk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gYWJzdHJhY3QKICAgICAgICBvcGVuZWQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuICh0aGlzLmNvbnRhaW5lcikgPyB0aGlzLmNvbnRhaW5lci5oYXNDbGFzcygic2VsZWN0Mi1kcm9wZG93bi1vcGVuIikgOiBmYWxzZTsKICAgICAgICB9LAoKICAgICAgICAvLyBhYnN0cmFjdAogICAgICAgIHBvc2l0aW9uRHJvcGRvd246IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgJGRyb3Bkb3duID0gdGhpcy5kcm9wZG93biwKICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLAogICAgICAgICAgICAgICAgb2Zmc2V0ID0gY29udGFpbmVyLm9mZnNldCgpLAogICAgICAgICAgICAgICAgaGVpZ2h0ID0gY29udGFpbmVyLm91dGVySGVpZ2h0KGZhbHNlKSwKICAgICAgICAgICAgICAgIHdpZHRoID0gY29udGFpbmVyLm91dGVyV2lkdGgoZmFsc2UpLAogICAgICAgICAgICAgICAgZHJvcEhlaWdodCA9ICRkcm9wZG93bi5vdXRlckhlaWdodChmYWxzZSksCiAgICAgICAgICAgICAgICAkd2luZG93ID0gJCh3aW5kb3cpLAogICAgICAgICAgICAgICAgd2luZG93V2lkdGggPSAkd2luZG93LndpZHRoKCksCiAgICAgICAgICAgICAgICB3aW5kb3dIZWlnaHQgPSAkd2luZG93LmhlaWdodCgpLAogICAgICAgICAgICAgICAgdmlld1BvcnRSaWdodCA9ICR3aW5kb3cuc2Nyb2xsTGVmdCgpICsgd2luZG93V2lkdGgsCiAgICAgICAgICAgICAgICB2aWV3cG9ydEJvdHRvbSA9ICR3aW5kb3cuc2Nyb2xsVG9wKCkgKyB3aW5kb3dIZWlnaHQsCiAgICAgICAgICAgICAgICBkcm9wVG9wID0gb2Zmc2V0LnRvcCArIGhlaWdodCwKICAgICAgICAgICAgICAgIGRyb3BMZWZ0ID0gb2Zmc2V0LmxlZnQsCiAgICAgICAgICAgICAgICBlbm91Z2hSb29tQmVsb3cgPSBkcm9wVG9wICsgZHJvcEhlaWdodCA8PSB2aWV3cG9ydEJvdHRvbSwKICAgICAgICAgICAgICAgIGVub3VnaFJvb21BYm92ZSA9IChvZmZzZXQudG9wIC0gZHJvcEhlaWdodCkgPj0gJHdpbmRvdy5zY3JvbGxUb3AoKSwKICAgICAgICAgICAgICAgIGRyb3BXaWR0aCA9ICRkcm9wZG93bi5vdXRlcldpZHRoKGZhbHNlKSwKICAgICAgICAgICAgICAgIGVub3VnaFJvb21PblJpZ2h0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRyb3BMZWZ0ICsgZHJvcFdpZHRoIDw9IHZpZXdQb3J0UmlnaHQ7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZW5vdWdoUm9vbU9uTGVmdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBvZmZzZXQubGVmdCArIHZpZXdQb3J0UmlnaHQgKyBjb250YWluZXIub3V0ZXJXaWR0aChmYWxzZSkgID4gZHJvcFdpZHRoOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGFib3ZlTm93ID0gJGRyb3Bkb3duLmhhc0NsYXNzKCJzZWxlY3QyLWRyb3AtYWJvdmUiKSwKICAgICAgICAgICAgICAgIGJvZHlPZmZzZXQsCiAgICAgICAgICAgICAgICBhYm92ZSwKICAgICAgICAgICAgICAgIGNoYW5nZURpcmVjdGlvbiwKICAgICAgICAgICAgICAgIGNzcywKICAgICAgICAgICAgICAgIHJlc3VsdHNMaXN0Tm9kZTsKCiAgICAgICAgICAgIC8vIGFsd2F5cyBwcmVmZXIgdGhlIGN1cnJlbnQgYWJvdmUvYmVsb3cgYWxpZ25tZW50LCB1bmxlc3MgdGhlcmUgaXMgbm90IGVub3VnaCByb29tCiAgICAgICAgICAgIGlmIChhYm92ZU5vdykgewogICAgICAgICAgICAgICAgYWJvdmUgPSB0cnVlOwogICAgICAgICAgICAgICAgaWYgKCFlbm91Z2hSb29tQWJvdmUgJiYgZW5vdWdoUm9vbUJlbG93KSB7CiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRGlyZWN0aW9uID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBhYm92ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYWJvdmUgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmICghZW5vdWdoUm9vbUJlbG93ICYmIGVub3VnaFJvb21BYm92ZSkgewogICAgICAgICAgICAgICAgICAgIGNoYW5nZURpcmVjdGlvbiA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgYWJvdmUgPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvL2lmIHdlIGFyZSBjaGFuZ2luZyBkaXJlY3Rpb24gd2UgbmVlZCB0byBnZXQgcG9zaXRpb25zIHdoZW4gZHJvcGRvd24gaXMgaGlkZGVuOwogICAgICAgICAgICBpZiAoY2hhbmdlRGlyZWN0aW9uKSB7CiAgICAgICAgICAgICAgICAkZHJvcGRvd24uaGlkZSgpOwogICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5jb250YWluZXIub2Zmc2V0KCk7CiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5vdXRlckhlaWdodChmYWxzZSk7CiAgICAgICAgICAgICAgICB3aWR0aCA9IHRoaXMuY29udGFpbmVyLm91dGVyV2lkdGgoZmFsc2UpOwogICAgICAgICAgICAgICAgZHJvcEhlaWdodCA9ICRkcm9wZG93bi5vdXRlckhlaWdodChmYWxzZSk7CiAgICAgICAgICAgICAgICB2aWV3UG9ydFJpZ2h0ID0gJHdpbmRvdy5zY3JvbGxMZWZ0KCkgKyB3aW5kb3dXaWR0aDsKICAgICAgICAgICAgICAgIHZpZXdwb3J0Qm90dG9tID0gJHdpbmRvdy5zY3JvbGxUb3AoKSArIHdpbmRvd0hlaWdodDsKICAgICAgICAgICAgICAgIGRyb3BUb3AgPSBvZmZzZXQudG9wICsgaGVpZ2h0OwogICAgICAgICAgICAgICAgZHJvcExlZnQgPSBvZmZzZXQubGVmdDsKICAgICAgICAgICAgICAgIGRyb3BXaWR0aCA9ICRkcm9wZG93bi5vdXRlcldpZHRoKGZhbHNlKTsKICAgICAgICAgICAgICAgICRkcm9wZG93bi5zaG93KCk7CgogICAgICAgICAgICAgICAgLy8gZml4IHNvIHRoZSBjdXJzb3IgZG9lcyBub3QgbW92ZSB0byB0aGUgbGVmdCB3aXRoaW4gdGhlIHNlYXJjaC10ZXh0Ym94IGluIElFCiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzU2VhcmNoKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuZHJvcGRvd25BdXRvV2lkdGgpIHsKICAgICAgICAgICAgICAgIHJlc3VsdHNMaXN0Tm9kZSA9ICQoJy5zZWxlY3QyLXJlc3VsdHMnLCAkZHJvcGRvd24pWzBdOwogICAgICAgICAgICAgICAgJGRyb3Bkb3duLmFkZENsYXNzKCdzZWxlY3QyLWRyb3AtYXV0by13aWR0aCcpOwogICAgICAgICAgICAgICAgJGRyb3Bkb3duLmNzcygnd2lkdGgnLCAnJyk7CiAgICAgICAgICAgICAgICAvLyBBZGQgc2Nyb2xsYmFyIHdpZHRoIHRvIGRyb3Bkb3duIGlmIHZlcnRpY2FsIHNjcm9sbGJhciBpcyBwcmVzZW50CiAgICAgICAgICAgICAgICBkcm9wV2lkdGggPSAkZHJvcGRvd24ub3V0ZXJXaWR0aChmYWxzZSkgKyAocmVzdWx0c0xpc3ROb2RlLnNjcm9sbEhlaWdodCA9PT0gcmVzdWx0c0xpc3ROb2RlLmNsaWVudEhlaWdodCA\/IDAgOiBzY3JvbGxCYXJEaW1lbnNpb25zLndpZHRoKTsKICAgICAgICAgICAgICAgIGRyb3BXaWR0aCA+IHdpZHRoID8gd2lkdGggPSBkcm9wV2lkdGggOiBkcm9wV2lkdGggPSB3aWR0aDsKICAgICAgICAgICAgICAgIGRyb3BIZWlnaHQgPSAkZHJvcGRvd24ub3V0ZXJIZWlnaHQoZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItZHJvcC1hdXRvLXdpZHRoJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vY29uc29sZS5sb2coImJlbG93LyBkcm9wdG9wOiIsIGRyb3BUb3AsICJkcm9wSGVpZ2h0IiwgZHJvcEhlaWdodCwgInN1bSIsIChkcm9wVG9wK2Ryb3BIZWlnaHQpKyIgdmlld3BvcnQgYm90dG9tIiwgdmlld3BvcnRCb3R0b20sICJlbm91Z2g\\\/IC0xIDogMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGtpbGxFdmVudChlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIGNhc2UgS0VZLkVOVEVSOgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEhpZ2hsaWdodGVkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGtpbGxFdmVudChlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIGNhc2UgS0VZLlRBQjoKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RIaWdobGlnaHRlZCh7bm9Gb2N1czogdHJ1ZX0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgY2FzZSBLRVkuRVNDOgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbChlKTsKICAgICAgICAgICAgICAgICAgICAgICAga2lsbEV2ZW50KGUpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIHRoaXMuc2VhcmNoLm9uKCJibHVyIiwgdGhpcy5iaW5kKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIC8vIGEgd29ya2Fyb3VuZCBmb3IgY2hyb21lIHRvIGtlZXAgdGhlIHNlYXJjaCBmaWVsZCBmb2N1c3NlZCB3aGVuIHRoZSBzY3JvbGwgYmFyIGlzIHVzZWQgdG8gc2Nyb2xsIHRoZSBkcm9wZG93bi4KICAgICAgICAgICAgICAgIC8vIHdpdGhvdXQgdGhpcyB0aGUgc2VhcmNoIGZpZWxkIGxvc2VzIGZvY3VzIHdoaWNoIGlzIGFubm95aW5nCiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gdGhpcy5ib2R5LmdldCgwKSkgewogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuYmluZChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3BlbmVkKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwgMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIHRoaXMuZm9jdXNzZXIub24oImtleWRvd24iLCB0aGlzLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0ludGVyZmFjZUVuYWJsZWQoKSkgcmV0dXJuOwoKICAgICAgICAgICAgICAgIGlmIChlLndoaWNoID09PSBLRVkuVEFCIHx8IEtFWS5pc0NvbnRyb2woZSkgfHwgS0VZLmlzRnVuY3Rpb25LZXkoZSkgfHwgZS53aGljaCA9PT0gS0VZLkVTQykgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9wZW5PbkVudGVyID09PSBmYWxzZSAmJiBlLndoaWNoID09PSBLRVkuRU5URVIpIHsKICAgICAgICAgICAgICAgICAgICBraWxsRXZlbnQoZSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChlLndoaWNoID09IEtFWS5ET1dOIHx8IGUud2hpY2ggPT0gS0VZLlVQCiAgICAgICAgICAgICAgICAgICAgfHwgKGUud2hpY2ggPT0gS0VZLkVOVEVSICYmIHRoaXMub3B0cy5vcGVuT25FbnRlcikpIHsKCiAgICAgICAgICAgICAgICAgICAgaWYgKGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5IHx8IGUubWV0YUtleSkgcmV0dXJuOwoKICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW4oKTsKICAgICAgICAgICAgICAgICAgICBraWxsRXZlbnQoZSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChlLndoaWNoID09IEtFWS5ERUxFVEUgfHwgZS53aGljaCA9PSBLRVkuQkFDS1NQQUNFKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5hbGxvd0NsZWFyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAga2lsbEV2ZW50KGUpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpOwoKCiAgICAgICAgICAgIGluc3RhbGxLZXlVcENoYW5nZUV2ZW50KHRoaXMuZm9jdXNzZXIpOwogICAgICAgICAgICB0aGlzLmZvY3Vzc2VyLm9uKCJrZXl1cC1jaGFuZ2UgaW5wdXQiLCB0aGlzLmJpbmQoZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcGVuZWQoKSkgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIHRoaXMub3BlbigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBzZWxlY3Rpb24ub24oIm1vdXNlZG93biB0b3VjaHN0YXJ0IiwgImFiYnIiLCB0aGlzLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0ludGVyZmFjZUVuYWJsZWQoKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7CiAgICAgICAgICAgICAgICBraWxsRXZlbnRJbW1lZGlhdGVseShlKTsKICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTsKCiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb24pIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5mb2N1cygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBzZWxlY3Rpb24ub24oIm1vdXNlZG93biB0b3VjaHN0YXJ0IiwgdGhpcy5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IElFIGZyb20gZ2VuZXJhdGluZyBhIGNsaWNrIGV2ZW50IG9uIHRoZSBib2R5CiAgICAgICAgICAgICAgICByZWluc2VydEVsZW1lbnQoc2VsZWN0aW9uKTsKCiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyLmhhc0NsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIoJC5FdmVudCgic2VsZWN0Mi1mb2N1cyIpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcGVuZWQoKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0ludGVyZmFjZUVuYWJsZWQoKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMub3BlbigpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGtpbGxFdmVudChlKTsKICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgZHJvcGRvd24ub24oIm1vdXNlZG93biB0b3VjaHN0YXJ0IiwgdGhpcy5iaW5kKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5zaG91bGRGb2N1c0lucHV0KHRoaXMpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2guZm9jdXMoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgc2VsZWN0aW9uLm9uKCJmb2N1cyIsIHRoaXMuYmluZChmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICBraWxsRXZlbnQoZSk7CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIHRoaXMuZm9jdXNzZXIub24oImZvY3VzIiwgdGhpcy5iaW5kKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyLmhhc0NsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIoJC5FdmVudCgic2VsZWN0Mi1mb2N1cyIpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKTsKICAgICAgICAgICAgfSkpLm9uKCJibHVyIiwgdGhpcy5iaW5kKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wZW5lZCgpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoInNlbGVjdDItY29udGFpbmVyLWFjdGl2ZSIpOwogICAgICAgICAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIoJC5FdmVudCgic2VsZWN0Mi1ibHVyIikpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIHRoaXMuc2VhcmNoLm9uKCJmb2N1cyIsIHRoaXMuYmluZChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5lci5oYXNDbGFzcygic2VsZWN0Mi1jb250YWluZXItYWN0aXZlIikpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdHMuZWxlbWVudC50cmlnZ2VyKCQuRXZlbnQoInNlbGVjdDItZm9jdXMiKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDbGFzcygic2VsZWN0Mi1jb250YWluZXItYWN0aXZlIik7CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIHRoaXMuaW5pdENvbnRhaW5lcldpZHRoKCk7CiAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LmhpZGUoKTsKICAgICAgICAgICAgdGhpcy5zZXRQbGFjZWhvbGRlcigpOwoKICAgICAgICB9LAoKICAgICAgICAvLyBzaW5nbGUKICAgICAgICBjbGVhcjogZnVuY3Rpb24odHJpZ2dlckNoYW5nZSkgewogICAgICAgICAgICB2YXIgZGF0YT10aGlzLnNlbGVjdGlvbi5kYXRhKCJzZWxlY3QyLWRhdGEiKTsKICAgICAgICAgICAgaWYgKGRhdGEpIHsgLy8gZ3VhcmQgYWdhaW5zdCBxdWV1ZWQgcXVpY2sgY29uc2VjdXRpdmUgY2xpY2tzCiAgICAgICAgICAgICAgICB2YXIgZXZ0ID0gJC5FdmVudCgic2VsZWN0Mi1jbGVhcmluZyIpOwogICAgICAgICAgICAgICAgdGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcihldnQpOwogICAgICAgICAgICAgICAgaWYgKGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlck9wdGlvbiA9IHRoaXMuZ2V0UGxhY2Vob2xkZXJPcHRpb24oKTsKICAgICAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LnZhbChwbGFjZWhvbGRlck9wdGlvbiA\\/ICQubm9vcCA6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVvcmRlciBtYXRjaGVzIGJhc2VkIG9uIHRoZSBvcmRlciB0aGV5IGFwcGVhciBpbiB0aGUgaWRzIGFycmF5IGJlY2F1c2UgcmlnaHQgbm93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGV5IGFyZSBpbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcHBlYXIgaW4gZGF0YSBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yZGVyZWQgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gaWRzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWF0Y2hlcy5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBtYXRjaGVzW2pdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXF1YWwoaWQsIG9wdHMuaWQobWF0Y2gpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJlZC5wdXNoKG1hdGNoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMuc3BsaWNlKGosIDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhvcmRlcmVkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIG9wdHM7CiAgICAgICAgfSwKCiAgICAgICAgLy8gbXVsdGkKICAgICAgICBzZWxlY3RDaG9pY2U6IGZ1bmN0aW9uIChjaG9pY2UpIHsKCiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuY29udGFpbmVyLmZpbmQoIi5zZWxlY3QyLXNlYXJjaC1jaG9pY2UtZm9jdXMiKTsKICAgICAgICAgICAgaWYgKHNlbGVjdGVkLmxlbmd0aCAmJiBjaG9pY2UgJiYgY2hvaWNlWzBdID09IHNlbGVjdGVkWzBdKSB7CgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIoImNob2ljZS1kZXNlbGVjdGVkIiwgc2VsZWN0ZWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc2VsZWN0ZWQucmVtb3ZlQ2xhc3MoInNlbGVjdDItc2VhcmNoLWNob2ljZS1mb2N1cyIpOwogICAgICAgICAgICAgICAgaWYgKGNob2ljZSAmJiBjaG9pY2UubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgIGNob2ljZS5hZGRDbGFzcygic2VsZWN0Mi1zZWFyY2gtY2hvaWNlLWZvY3VzIik7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcigiY2hvaWNlLXNlbGVjdGVkIiwgY2hvaWNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8vIG11bHRpCiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICQoImxhYmVsW2Zvcj0nIiArIHRoaXMuc2VhcmNoLmF0dHIoJ2lkJykgKyAiJ10iKQogICAgICAgICAgICAgICAgLmF0dHIoJ2ZvcicsIHRoaXMub3B0cy5lbGVtZW50LmF0dHIoImlkIikpOwogICAgICAgICAgICB0aGlzLnBhcmVudC5kZXN0cm95LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgogICAgICAgICAgICBjbGVhbnVwSlF1ZXJ5RWxlbWVudHMuY2FsbCh0aGlzLAogICAgICAgICAgICAgICAgInNlYXJjaENvbnRhaW5lciIsCiAgICAgICAgICAgICAgICAic2VsZWN0aW9uIgogICAgICAgICAgICApOwogICAgICAgIH0sCgogICAgICAgIC8vIG11bHRpCiAgICAgICAgaW5pdENvbnRhaW5lcjogZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gIi5zZWxlY3QyLWNob2ljZXMiLCBzZWxlY3Rpb247CgogICAgICAgICAgICB0aGlzLnNlYXJjaENvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLmZpbmQoIi5zZWxlY3QyLXNlYXJjaC1maWVsZCIpOwogICAgICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IHRoaXMuY29udGFpbmVyLmZpbmQoc2VsZWN0b3IpOwoKICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24ub24oImNsaWNrIiwgIi5zZWxlY3QyLWNvbnRhaW5lcjpub3QoLnNlbGVjdDItY29udGFpbmVyLWRpc2FibGVkKSAuc2VsZWN0Mi1zZWFyY2gtY2hvaWNlOm5vdCguc2VsZWN0Mi1sb2NrZWQpIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIF90aGlzLnNlYXJjaFswXS5mb2N1cygpOwogICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0Q2hvaWNlKCQodGhpcykpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIHJld3JpdGUgbGFiZWxzIGZyb20gb3JpZ2luYWwgZWxlbWVudCB0byBmb2N1c3NlcgogICAgICAgICAgICB0aGlzLnNlYXJjaC5hdHRyKCJpZCIsICJzMmlkX2F1dG9nZW4iK25leHRVaWQoKSk7CgogICAgICAgICAgICB0aGlzLnNlYXJjaC5wcmV2KCkKICAgICAgICAgICAgICAgIC50ZXh0KCQoImxhYmVsW2Zvcj0nIiArIHRoaXMub3B0cy5lbGVtZW50LmF0dHIoImlkIikgKyAiJ10iKS50ZXh0KCkpCiAgICAgICAgICAgICAgICAuYXR0cignZm9yJywgdGhpcy5zZWFyY2guYXR0cignaWQnKSk7CiAgICAgICAgICAgIHRoaXMub3B0cy5lbGVtZW50LmZvY3VzKHRoaXMuYmluZChmdW5jdGlvbiAoKSB7IHRoaXMuZm9jdXMoKTsgfSkpOwoKICAgICAgICAgICAgdGhpcy5zZWFyY2gub24oImlucHV0IHBhc3RlIiwgdGhpcy5iaW5kKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VhcmNoLmF0dHIoJ3BsYWNlaG9sZGVyJykgJiYgdGhpcy5zZWFyY2gudmFsKCkubGVuZ3RoID09IDApIHJldHVybjsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0ludGVyZmFjZUVuYWJsZWQoKSkgcmV0dXJuOwogICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wZW5lZCgpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIHRoaXMuc2VhcmNoLmF0dHIoInRhYmluZGV4IiwgdGhpcy5lbGVtZW50VGFiSW5kZXgpOwoKICAgICAgICAgICAgdGhpcy5rZXlkb3ducyA9IDA7CiAgICAgICAgICAgIHRoaXMuc2VhcmNoLm9uKCJrZXlkb3duIiwgdGhpcy5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNJbnRlcmZhY2VFbmFibGVkKCkpIHJldHVybjsKCiAgICAgICAgICAgICAgICArK3RoaXMua2V5ZG93bnM7CiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSBzZWxlY3Rpb24uZmluZCgiLnNlbGVjdDItc2VhcmNoLWNob2ljZS1mb2N1cyIpOwogICAgICAgICAgICAgICAgdmFyIHByZXYgPSBzZWxlY3RlZC5wcmV2KCIuc2VsZWN0Mi1zZWFyY2gtY2hvaWNlOm5vdCguc2VsZWN0Mi1sb2NrZWQpIik7CiAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IHNlbGVjdGVkLm5leHQoIi5zZWxlY3QyLXNlYXJjaC1jaG9pY2U6bm90KC5zZWxlY3QyLWxvY2tlZCkiKTsKICAgICAgICAgICAgICAgIHZhciBwb3MgPSBnZXRDdXJzb3JJbmZvKHRoaXMuc2VhcmNoKTsKCiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoICYmCiAgICAgICAgICAgICAgICAgICAgKGUud2hpY2ggPT0gS0VZLkxFRlQgfHwgZS53aGljaCA9PSBLRVkuUklHSFQgfHwgZS53aGljaCA9PSBLRVkuQkFDS1NQQUNFIHx8IGUud2hpY2ggPT0gS0VZLkRFTEVURSB8fCBlLndoaWNoID09IEtFWS5FTlRFUikpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRDaG9pY2UgPSBzZWxlY3RlZDsKICAgICAgICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PSBLRVkuTEVGVCAmJiBwcmV2Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENob2ljZSA9IHByZXY7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGUud2hpY2ggPT0gS0VZLlJJR0hUKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2hvaWNlID0gbmV4dC5sZW5ndGggPyBuZXh0IDogbnVsbDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZS53aGljaCA9PT0gS0VZLkJBQ0tTUEFDRSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51bnNlbGVjdChzZWxlY3RlZC5maXJzdCgpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2gud2lkdGgoMTApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDaG9pY2UgPSBwcmV2Lmxlbmd0aCA\\/IHt9IDogJC5leHRlbmQoe30sIGFyZ3NbMF0pOwogICAgICAgICAgICAgICAgb3B0cy5lbGVtZW50ID0gJCh0aGlzKTsKCiAgICAgICAgICAgICAgICBpZiAob3B0cy5lbGVtZW50LmdldCgwKS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJzZWxlY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUgPSBvcHRzLmVsZW1lbnQucHJvcCgibXVsdGlwbGUiKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUgPSBvcHRzLm11bHRpcGxlIHx8IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGlmICgidGFncyIgaW4gb3B0cykge29wdHMubXVsdGlwbGUgPSBtdWx0aXBsZSA9IHRydWU7fQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNlbGVjdDIgPSBtdWx0aXBsZSA\/IG5ldyB3aW5kb3cuU2VsZWN0MlsiY2xhc3MiXS5tdWx0aSgpIDogbmV3IHdpbmRvdy5TZWxlY3QyWyJjbGFzcyJdLnNpbmdsZSgpOwogICAgICAgICAgICAgICAgc2VsZWN0Mi5pbml0KG9wdHMpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZihhcmdzWzBdKSA9PT0gInN0cmluZyIpIHsKCiAgICAgICAgICAgICAgICBpZiAoaW5kZXhPZihhcmdzWzBdLCBhbGxvd2VkTWV0aG9kcykgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgIlVua25vd24gbWV0aG9kOiAiICsgYXJnc1swXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHNlbGVjdDIgPSAkKHRoaXMpLmRhdGEoInNlbGVjdDIiKTsKICAgICAgICAgICAgICAgIGlmIChzZWxlY3QyID09PSB1bmRlZmluZWQpIHJldHVybjsKCiAgICAgICAgICAgICAgICBtZXRob2Q9YXJnc1swXTsKCiAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSAiY29udGFpbmVyIikgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gc2VsZWN0Mi5jb250YWluZXI7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gImRyb3Bkb3duIikgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gc2VsZWN0Mi5kcm9wZG93bjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZHNNYXBbbWV0aG9kXSkgbWV0aG9kID0gbWV0aG9kc01hcFttZXRob2RdOwoKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHNlbGVjdDJbbWV0aG9kXS5hcHBseShzZWxlY3QyLCBhcmdzLnNsaWNlKDEpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChpbmRleE9mKGFyZ3NbMF0sIHZhbHVlTWV0aG9kcykgPj0gMAogICAgICAgICAgICAgICAgICAgIHx8IChpbmRleE9mKGFyZ3NbMF0sIHByb3BlcnR5TWV0aG9kcykgPj0gMCAmJiBhcmdzLmxlbmd0aCA9PSAxKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gYWJvcnQgdGhlIGl0ZXJhdGlvbiwgcmVhZHkgdG8gcmV0dXJuIGZpcnN0IG1hdGNoZWQgdmFsdWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93ICJJbnZhbGlkIGFyZ3VtZW50cyB0byBzZWxlY3QyIHBsdWdpbjogIiArIGFyZ3M7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gKHZhbHVlID09PSB1bmRlZmluZWQpID8gdGhpcyA6IHZhbHVlOwogICAgfTsKCiAgICAvLyBwbHVnaW4gZGVmYXVsdHMsIGFjY2Vzc2libGUgdG8gdXNlcnMKICAgICQuZm4uc2VsZWN0Mi5kZWZhdWx0cyA9IHsKICAgICAgICB3aWR0aDogImNvcHkiLAogICAgICAgIGxvYWRNb3JlUGFkZGluZzogMCwKICAgICAgICBjbG9zZU9uU2VsZWN0OiB0cnVlLAogICAgICAgIG9wZW5PbkVudGVyOiB0cnVlLAogICAgICAgIGNvbnRhaW5lckNzczoge30sCiAgICAgICAgZHJvcGRvd25Dc3M6IHt9LAogICAgICAgIGNvbnRhaW5lckNzc0NsYXNzOiAiIiwKICAgICAgICBkcm9wZG93bkNzc0NsYXNzOiAiIiwKICAgICAgICBmb3JtYXRSZXN1bHQ6IGZ1bmN0aW9uKHJlc3VsdCwgY29udGFpbmVyLCBxdWVyeSwgZXNjYXBlTWFya3VwKSB7CiAgICAgICAgICAgIHZhciBtYXJrdXA9W107CiAgICAgICAgICAgIG1hcmtNYXRjaCh0aGlzLnRleHQocmVzdWx0KSwgcXVlcnkudGVybSwgbWFya3VwLCBlc2NhcGVNYXJrdXApOwogICAgICAgICAgICByZXR1cm4gbWFya3VwLmpvaW4oIiIpOwogICAgICAgIH0sCiAgICAgICAgdHJhbnNmb3JtVmFsOiBmdW5jdGlvbih2YWwpIHsKICAgICAgICAgICAgcmV0dXJuICQudHJpbSh2YWwpOwogICAgICAgIH0sCiAgICAgICAgZm9ybWF0U2VsZWN0aW9uOiBmdW5jdGlvbiAoZGF0YSwgY29udGFpbmVyLCBlc2NhcGVNYXJrdXApIHsKICAgICAgICAgICAgcmV0dXJuIGRhdGEgPyBlc2NhcGVNYXJrdXAodGhpcy50ZXh0KGRhdGEpKSA6IHVuZGVmaW5lZDsKICAgICAgICB9LAogICAgICAgIHNvcnRSZXN1bHRzOiBmdW5jdGlvbiAocmVzdWx0cywgY29udGFpbmVyLCBxdWVyeSkgewogICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9LAogICAgICAgIGZvcm1hdFJlc3VsdENzc0NsYXNzOiBmdW5jdGlvbihkYXRhKSB7cmV0dXJuIGRhdGEuY3NzO30sCiAgICAgICAgZm9ybWF0U2VsZWN0aW9uQ3NzQ2xhc3M6IGZ1bmN0aW9uKGRhdGEsIGNvbnRhaW5lcikge3JldHVybiB1bmRlZmluZWQ7fSwKICAgICAgICBtaW5pbXVtUmVzdWx0c0ZvclNlYXJjaDogMCwKICAgICAgICBtaW5pbXVtSW5wdXRMZW5ndGg6IDAsCiAgICAgICAgbWF4aW11bUlucHV0TGVuZ3RoOiBudWxsLAogICAgICAgIG1heGltdW1TZWxlY3Rpb25TaXplOiAwLAogICAgICAgIGlkOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA9PSB1bmRlZmluZWQgPyBudWxsIDogZS5pZDsgfSwKICAgICAgICB0ZXh0OiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgaWYgKGUgJiYgdGhpcy5kYXRhICYmIHRoaXMuZGF0YS50ZXh0KSB7CiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24odGhpcy5kYXRhLnRleHQpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS50ZXh0KGUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBlW3RoaXMuZGF0YS50ZXh0XTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGUudGV4dDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIG1hdGNoZXI6IGZ1bmN0aW9uKHRlcm0sIHRleHQpIHsKICAgICAgICAgICAgcmV0dXJuIHN0cmlwRGlhY3JpdGljcygnJyt0ZXh0KS50b1VwcGVyQ2FzZSgpLmluZGV4T2Yoc3RyaXBEaWFjcml0aWNzKCcnK3Rlcm0pLnRvVXBwZXJDYXNlKCkpID49IDA7CiAgICAgICAgfSwKICAgICAgICBzZXBhcmF0b3I6ICIsIiwKICAgICAgICB0b2tlblNlcGFyYXRvcnM6IFtdLAogICAgICAgIHRva2VuaXplcjogZGVmYXVsdFRva2VuaXplciwKICAgICAgICBlc2NhcGVNYXJrdXA6IGRlZmF1bHRFc2NhcGVNYXJrdXAsCiAgICAgICAgYmx1ck9uQ2hhbmdlOiBmYWxzZSwKICAgICAgICBzZWxlY3RPbkJsdXI6IGZhbHNlLAogICAgICAgIGFkYXB0Q29udGFpbmVyQ3NzQ2xhc3M6IGZ1bmN0aW9uKGMpIHsgcmV0dXJuIGM7IH0sCiAgICAgICAgYWRhcHREcm9wZG93bkNzc0NsYXNzOiBmdW5jdGlvbihjKSB7IHJldHVybiBudWxsOyB9LAogICAgICAgIG5leHRTZWFyY2hUZXJtOiBmdW5jdGlvbihzZWxlY3RlZE9iamVjdCwgY3VycmVudFNlYXJjaFRlcm0pIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSwKICAgICAgICBzZWFyY2hJbnB1dFBsYWNlaG9sZGVyOiAnJywKICAgICAgICBjcmVhdGVTZWFyY2hDaG9pY2VQb3NpdGlvbjogJ3RvcCcsCiAgICAgICAgc2hvdWxkRm9jdXNJbnB1dDogZnVuY3Rpb24gKGluc3RhbmNlKSB7CiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IHRvdWNoIGRldmljZXMKICAgICAgICAgICAgdmFyIHN1cHBvcnRzVG91Y2hFdmVudHMgPSAoKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCkpOwoKICAgICAgICAgICAgLy8gT25seSBkZXZpY2VzIHdoaWNoIHN1cHBvcnQgdG91Y2ggZXZlbnRzIHNob3VsZCBiZSBzcGVjaWFsIGNhc2VkCiAgICAgICAgICAgIGlmICghc3VwcG9ydHNUb3VjaEV2ZW50cykgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIE5ldmVyIGZvY3VzIHRoZSBpbnB1dCBpZiBzZWFyY2ggaXMgZGlzYWJsZWQKICAgICAgICAgICAgaWYgKGluc3RhbmNlLm9wdHMubWluaW11bVJlc3VsdHNGb3JTZWFyY2ggPCAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH07CgogICAgJC5mbi5zZWxlY3QyLmxvY2FsZXMgPSBbXTsKCiAgICAkLmZuLnNlbGVjdDIubG9jYWxlc1snZW4nXSA9IHsKICAgICAgICAgZm9ybWF0TWF0Y2hlczogZnVuY3Rpb24gKG1hdGNoZXMpIHsgaWYgKG1hdGNoZXMgPT09IDEpIHsgcmV0dXJuICJPbmUgcmVzdWx0IGlzIGF2YWlsYWJsZSwgcHJlc3MgZW50ZXIgdG8gc2VsZWN0IGl0LiI7IH0gcmV0dXJuIG1hdGNoZXMgKyAiIHJlc3VsdHMgYXJlIGF2YWlsYWJsZSwgdXNlIHVwIGFuZCBkb3duIGFycm93IGtleXMgdG8gbmF2aWdhdGUuIjsgfSwKICAgICAgICAgZm9ybWF0Tm9NYXRjaGVzOiBmdW5jdGlvbiAoKSB7IHJldHVybiAiTm8gbWF0Y2hlcyBmb3VuZCI7IH0sCiAgICAgICAgIGZvcm1hdEFqYXhFcnJvcjogZnVuY3Rpb24gKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikgeyByZXR1cm4gIkxvYWRpbmcgZmFpbGVkIjsgfSwKICAgICAgICAgZm9ybWF0SW5wdXRUb29TaG9ydDogZnVuY3Rpb24gKGlucHV0LCBtaW4pIHsgdmFyIG4gPSBtaW4gLSBpbnB1dC5sZW5ndGg7IHJldHVybiAiUGxlYXNlIGVudGVyICIgKyBuICsgIiBvciBtb3JlIGNoYXJhY3RlciIgKyAobiA9PSAxID8gIiIgOiAicyIpOyB9LAogICAgICAgICBmb3JtYXRJbnB1dFRvb0xvbmc6IGZ1bmN0aW9uIChpbnB1dCwgbWF4KSB7IHZhciBuID0gaW5wdXQubGVuZ3RoIC0gbWF4OyByZXR1cm4gIlBsZWFzZSBkZWxldGUgIiArIG4gKyAiIGNoYXJhY3RlciIgKyAobiA9PSAxID8gIiIgOiAicyIpOyB9LAogICAgICAgICBmb3JtYXRTZWxlY3Rpb25Ub29CaWc6IGZ1bmN0aW9uIChsaW1pdCkgeyByZXR1cm4gIllvdSBjYW4gb25seSBzZWxlY3QgIiArIGxpbWl0ICsgIiBpdGVtIiArIChsaW1pdCA9PSAxID8gIiIgOiAicyIpOyB9LAogICAgICAgICBmb3JtYXRMb2FkTW9yZTogZnVuY3Rpb24gKHBhZ2VOdW1iZXIpIHsgcmV0dXJuICJMb2FkaW5nIG1vcmUgcmVzdWx0c+KApiI7IH0sCiAgICAgICAgIGZvcm1hdFNlYXJjaGluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gIlNlYXJjaGluZ+KApiI7IH0KICAgIH07CgogICAgJC5leHRlbmQoJC5mbi5zZWxlY3QyLmRlZmF1bHRzLCAkLmZuLnNlbGVjdDIubG9jYWxlc1snZW4nXSk7CgogICAgJC5mbi5zZWxlY3QyLmFqYXhEZWZhdWx0cyA9IHsKICAgICAgICB0cmFuc3BvcnQ6ICQuYWpheCwKICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgIGNhY2hlOiBmYWxzZSwKICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIgogICAgICAgIH0KICAgIH07CgogICAgLy8gZXhwb3J0cwogICAgd2luZG93LlNlbGVjdDIgPSB7CiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgYWpheDogYWpheCwKICAgICAgICAgICAgbG9jYWw6IGxvY2FsLAogICAgICAgICAgICB0YWdzOiB0YWdzCiAgICAgICAgfSwgdXRpbDogewogICAgICAgICAgICBkZWJvdW5jZTogZGVib3VuY2UsCiAgICAgICAgICAgIG1hcmtNYXRjaDogbWFya01hdGNoLAogICAgICAgICAgICBlc2NhcGVNYXJrdXA6IGRlZmF1bHRFc2NhcGVNYXJrdXAsCiAgICAgICAgICAgIHN0cmlwRGlhY3JpdGljczogc3RyaXBEaWFjcml0aWNzCiAgICAgICAgfSwgImNsYXNzIjogewogICAgICAgICAgICAiYWJzdHJhY3QiOiBBYnN0cmFjdFNlbGVjdDIsCiAgICAgICAgICAgICJzaW5nbGUiOiBTaW5nbGVTZWxlY3QyLAogICAgICAgICAgICAibXVsdGkiOiBNdWx0aVNlbGVjdDIKICAgICAgICB9CiAgICB9OwoKfShqUXVlcnkpKTsK",
    "size": "148536"
}