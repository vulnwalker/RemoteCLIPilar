{
    "namaFile": "js\/perencanaanKeuangan\/rka\/rkaSKPD1DP.js",
    "lastUpdate": "2018-08-23+11:13:17.87",
    "contentFile": "dmFyIHJrYVNLUEQxRFBGaWx0ZXJTS1BEID0gbmV3IFNrcGRDbHMoewogIHByZWZpeDogInJrYVNLUEQxRFAiLAogIGZvcm1OYW1lOiAicmthU0tQRDFEUEZvcm0iLAoKICBwaWxpaFVydXNhbmZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgLy8gcmthU0tQRDFEUC5yZWZyZXNoTGlzdCh0cnVlKTsKICAgIHJrYVNLUEQxRFAuZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwaWxpaEJpZGFuZ0FmdGVyOiBmdW5jdGlvbigpIHsKICAgIC8vIHJrYVNLUEQxRFAucmVmcmVzaExpc3QodHJ1ZSk7CiAgICBya2FTS1BEMURQLmZpbHRlclJlbmRlcigpOwogIH0sCiAgcGlsaWhVbml0QWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgLy8gcmthU0tQRDFEUC5yZWZyZXNoTGlzdCh0cnVlKTsKICAgIHJrYVNLUEQxRFAuZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwaWxpaFN1YlVuaXRBZnRlcjogZnVuY3Rpb24oKSB7CiAgICAvLyBya2FTS1BEMURQLnJlZnJlc2hMaXN0KHRydWUpOwogICAgcmthU0tQRDFEUC5maWx0ZXJSZW5kZXIoKTsKICB9LAogIHBpbGloU2Vrc2lBZnRlcjogZnVuY3Rpb24oKSB7CiAgICAvLyBya2FTS1BEMURQLnJlZnJlc2hMaXN0KHRydWUpOwogICAgcmthU0tQRDFEUC5maWx0ZXJSZW5kZXIoKTsKICB9Cn0pOwp2YXIgcmthU0tQRDFEUCA9IG5ldyBEYWZ0YXJPYmoyKHsKICBwcmVmaXg6ICJya2FTS1BEMURQIiwKICB1cmw6ICJwZ0tldS5waHA\/UGc9cmthU0tQRDFEUCIsCiAgZm9ybU5hbWU6ICJya2FTS1BEMURQRm9ybSIsCiAgcmthU0tQRDFEUF9mb3JtOiAiMCIsIC8vZGVmYXVsdCBqcyBya2FTS1BEMURQCiAgbG9hZGluZzogZnVuY3Rpb24oKSB7CiAgICAvL2FsZXJ0KCdsb2FkaW5nJyk7CiAgICB0aGlzLnRvcEJhclJlbmRlcigpOwogICAgdGhpcy5maWx0ZXJSZW5kZXIoKTsKICAgIHRoaXMuZGFmdGFyUmVuZGVyKCk7CiAgICB0aGlzLnN1bUhhbFJlbmRlcigpOwogIH0sCiAgdG9wQmFyUmVuZGVyOiBmdW5jdGlvbigpewogICAgdmFyIG1lPXRoaXM7CiAgICAvL3JlbmRlciBzdWJ0aXRsZQogICAgJC5hamF4KHsKICAgICAgdXJsOiB0aGlzLnVybCsnJnRpcGU9c3VidGl0bGUnLAogICAgICB0eXBlOidQT1NUJywKICAgICAgZGF0YTokKCcjJyt0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICB2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1lLnByZWZpeCsnX2NvbnRfdGl0bGUnKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7CiAgICAgIG1lLnRvcEJhclJlbmRlckFmdGVyKCkKICAgICAgfQogICAgfSk7CiAgfSwKICAvLyBmaWx0ZXJSZW5kZXJBZnRlcjogZnVuY3Rpb24oKSB7CiAgLy8gICB0aGlzLmRhZnRhclJlbmRlcigpOwogIC8vIH0sCiAgZGV0YWlsOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICBlcnJtc2cgPSB0aGlzLkNla0NoZWNrYm94KCk7CiAgICBpZiAoZXJybXNnID09ICIiKSB7CiAgICAgIHZhciBib3ggPSB0aGlzLkdldENieENoZWNrZWQoKTsKICAgIH0gZWxzZSB7CiAgICAgIGFsZXJ0KGVycm1zZyk7CiAgICB9CiAgfSwKICBkYWZ0YXJSZW5kZXI6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsgLy9yZW5kZXIgZGFmdGFyCiAgICBhZGRDb3ZlclBhZ2UyKCJkYWZ0YXJfY292ZXIiLCAxLCB0cnVlLCB0cnVlLCB7CiAgICAgIHJlbmRlclRvOiB0aGlzLnByZWZpeCArICJfY29udF9kYWZ0YXIiLAogICAgICBpbWdzcmM6ICJpbWFnZXMvd2FpdC5naWYiLAogICAgICBzdHlsZTogeyBwb3NpdGlvbjogImFic29sdXRlIiwgdG9wOiAiNSIsIGxlZnQ6ICI1IiB9CiAgICB9KTsKICAgICQuYWpheCh7CiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9ZGFmdGFyIiwKICAgICAgdHlwZTogIlBPU1QiLAogICAgICBkYXRhOiAkKCIjIiArIHRoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1lLnByZWZpeCArICJfY29udF9kYWZ0YXIiKS5pbm5lckhUTUwgPQogICAgICAgICAgcmVzcC5jb250ZW50OwogICAgICAgIG1lLnN1bUhhbFJlbmRlcigpOwogICAgICB9CiAgICB9KTsKICB9LAogIEJhcnU6IGZ1bmN0aW9uKCl7CiAgICB2YXIgbWUgPSB0aGlzOwoKICAJCWVycm1zZyA9ICcnOwoKICAJCWlmKCQoIiNmaWx0ZXJVcnVzYW4iKS52YWwoKSA9PSAnMDAnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggVXJ1c2FuIjsKICAJCX1lbHNlIGlmKCQoIiNmaWx0ZXJTS1BEIikudmFsKCkgPT0gJzAwJyl7CiAgCQkJZXJybXNnID0gIlBpbGloIEJpZGFuZyI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyU0tQRCIpLnZhbCgpID09ICcwMCcpewogIAkJCWVycm1zZyA9ICJQaWxpaCBTS1BEIjsKICAJCX1lbHNlIGlmKCQoIiNmaWx0ZXJDb25jYXRQcm9ncmFtIikudmFsKCkgPT0gJycpewogIAkJCWVycm1zZyA9ICJQaWxpaCBQcm9ncmFtIjsKICAJCX1lbHNlIGlmKCQoIiNmaWx0ZXJRIikudmFsKCkgPT0gJycpewogIAkJCWVycm1zZyA9ICJQaWxpaCBLZWdpYXRhbiI7CiAgCQl9CiAgCQlpZihlcnJtc2cgPT0nJyl7CiAgCQkJdmFyIG1lID0gdGhpczsKICAJCQl2YXIgYUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmZvcm1OYW1lKTsKICAJCQkkLmFqYXgoewogIAkJCSAgdXJsOiB0aGlzLnVybCsnJnRpcGU9QmFydScsCiAgCQkJICB0eXBlIDogJ1BPU1QnLAogIAkJCSAgZGF0YTokKCcjJyt0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAJCQkgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAJCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsKICAJCQkJCWlmKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAgICAgJCgiI25ld0JsYW5rUGFnZSIpLnZhbCgiIik7CiAgCQkJCQkJYUZvcm0uYWN0aW9uPSAncGdLZXUucGhwP1BnPXJrYVNLUEQxRFBJbnMnOwogIAkJCQkJCWFGb3JtLnRhcmdldD0nX2JsYW5rJzsKICAJCQkJCQlhRm9ybS5zdWJtaXQoKTsKICAJCQkJCQlhRm9ybS50YXJnZXQ9Jyc7CiAgCQkJCQl9ZWxzZXsKICAJCQkJCQlhbGVydChyZXNwLmVycik7CiAgCQkJCQl9CiAgCQkJICB9CiAgCQkJfSk7CiAgCQl9ZWxzZXsKICAJCQkJYWxlcnQoZXJybXNnKTsKICAJCX0KCX0sCiAgbmV3QmxhbmtQYWdlOiBmdW5jdGlvbigpewogICAgdmFyIG1lID0gdGhpczsKCiAgCQllcnJtc2cgPSAnJzsKCiAgCQlpZigkKCIjZmlsdGVyVXJ1c2FuIikudmFsKCkgPT0gJzAwJyl7CiAgCQkJZXJybXNnID0gIlBpbGloIFVydXNhbiI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyU0tQRCIpLnZhbCgpID09ICcwMCcpewogIAkJCWVycm1zZyA9ICJQaWxpaCBCaWRhbmciOwogIAkJfWVsc2UgaWYoJCgiI2ZpbHRlclNLUEQiKS52YWwoKSA9PSAnMDAnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggU0tQRCI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyQ29uY2F0UHJvZ3JhbSIpLnZhbCgpID09ICcnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggUHJvZ3JhbSI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyUSIpLnZhbCgpID09ICcnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggS2VnaWF0YW4iOwogIAkJfQogIAkJaWYoZXJybXNnID09JycpewogIAkJCXZhciBtZSA9IHRoaXM7CiAgCQkJdmFyIGFGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5mb3JtTmFtZSk7CiAgCQkJJC5hamF4KHsKICAJCQkgIHVybDogdGhpcy51cmwrJyZ0aXBlPW5ld0JsYW5rUGFnZScsCiAgCQkJICB0eXBlIDogJ1BPU1QnLAogIAkJCSAgZGF0YTokKCcjJyt0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAJCQkgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAJCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsKICAJCQkJCWlmKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAgICAgJCgiI25ld0JsYW5rUGFnZSIpLnZhbCgiMSIpOwogIAkJCQkJCWFGb3JtLmFjdGlvbj0gJ3BnS2V1LnBocD9QZz1ya2FTS1BEMURQSW5zJzsKICAJCQkJCQlhRm9ybS50YXJnZXQ9J19ibGFuayc7CiAgCQkJCQkJYUZvcm0uc3VibWl0KCk7CiAgCQkJCQkJYUZvcm0udGFyZ2V0PScnOwogIAkJCQkJfWVsc2V7CiAgCQkJCQkJYWxlcnQocmVzcC5lcnIpOwogIAkJCQkJfQogIAkJCSAgfQogIAkJCX0pOwogIAkJfWVsc2V7CiAgCQkJCWFsZXJ0KGVycm1zZyk7CiAgCQl9Cgl9LAogIEluZm86IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgIHZhciBjb3ZlciA9IHRoaXMucHJlZml4ICsgIl9mb3JtY292ZXIiOwogICAgJC5hamF4KHsKICAgICAgdHlwZTogIlBPU1QiLAogICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPUluZm8iLAogICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICJoaWRkZW4iOwogICAgICAgICAgYWRkQ292ZXJQYWdlMihjb3ZlciwgOTk5LCB0cnVlLCBmYWxzZSk7CiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb3ZlcikuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9LAoKICBDYXJpOiBmdW5jdGlvbigpIHsKICAgIHBvcHVwQmFyYW5nLmtvZGVCYXJhbmcgPSAia29kZUJhcmFuZyI7CiAgICBwb3B1cEJhcmFuZy5uYW1hQmFyYW5nID0gIm5hbWFCYXJhbmciOwogICAgcG9wdXBCYXJhbmcuc2F0dWFuQmFyYW5nID0gInNhdHVhbiI7CiAgICBwb3B1cEJhcmFuZy53aW5kb3dTaG93KCk7CiAgfSwKICBFZGl0OiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICBlcnJtc2cgPSB0aGlzLkNla0NoZWNrYm94KCk7CiAgICBpZiAoZXJybXNnID09ICIiKSB7CiAgICAgIHZhciBib3ggPSB0aGlzLkdldENieENoZWNrZWQoKTsKICAgICAgdmFyIGFGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5mb3JtTmFtZSk7CiAgICAgICQuYWpheCh7CiAgICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1lZGl0VGFiIiwKICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgZGF0YTogJCgiIyIgKyB0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICAgdmFyIElEcmVuamEgPSBOdW1iZXIocmVzcC5jb250ZW50LmlkcmVuamEpOwogICAgICAgICAgICBhRm9ybS5hY3Rpb24gPQogICAgICAgICAgICAgICJwZ0tldS5waHA\",
    "size": "24910"
}