{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Style\/NumberFormat.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/Py8\\/OiR8IikvJywgYXJyYXkoJ3NlbGYnLCAnc2V0TG93ZXJjYXNlQ2FsbGJhY2snKSwgJGZvcm1hdCk7CgogICAgICAgIC8vIE9ubHkgcHJvY2VzcyB0aGUgbm9uLXF1b3RlZCBibG9ja3MgZm9yIGRhdGUgZm9ybWF0IGNoYXJhY3RlcnMKICAgICAgICAkYmxvY2tzID0gZXhwbG9kZSgnIicsICRmb3JtYXQpOwogICAgICAgIGZvcmVhY2goJGJsb2NrcyBhcyAka2V5ID0+ICYkYmxvY2spIHsKICAgICAgICAgICAgaWYgKCRrZXkgJSAyID09IDApIHsKICAgICAgICAgICAgICAgICRibG9jayA9IHN0cnRyKCRibG9jaywgc2VsZjo6JGRhdGVGb3JtYXRSZXBsYWNlbWVudHMpOwogICAgICAgICAgICAgICAgaWYgKCFzdHJwb3MoJGJsb2NrLCAnQScpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gMjQtaG91ciB0aW1lIGZvcm1hdAogICAgICAgICAgICAgICAgICAgICRibG9jayA9IHN0cnRyKCRibG9jaywgc2VsZjo6JGRhdGVGb3JtYXRSZXBsYWNlbWVudHMyNCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIDEyLWhvdXIgdGltZSBmb3JtYXQKICAgICAgICAgICAgICAgICAgICAkYmxvY2sgPSBzdHJ0cigkYmxvY2ssIHNlbGY6OiRkYXRlRm9ybWF0UmVwbGFjZW1lbnRzMTIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICRmb3JtYXQgPSBpbXBsb2RlKCciJywgJGJsb2Nrcyk7CgogICAgICAgIC8vIGVzY2FwZSBhbnkgcXVvdGVkIGNoYXJhY3RlcnMgc28gdGhhdCBEYXRlVGltZSBmb3JtYXQoKSB3aWxsIHJlbmRlciB0aGVtIGNvcnJlY3RseQogICAgICAgICRmb3JtYXQgPSBwcmVnX3JlcGxhY2VfY2FsbGJhY2soJy8iKC4qKSIvVScsIGFycmF5KCdzZWxmJywgJ2VzY2FwZVF1b3Rlc0NhbGxiYWNrJyksICRmb3JtYXQpOwoKICAgICAgICAkZGF0ZU9iaiA9IFBIUEV4Y2VsX1NoYXJlZF9EYXRlOjpFeGNlbFRvUEhQT2JqZWN0KCR2YWx1ZSk7CiAgICAgICAgJHZhbHVlID0gJGRhdGVPYmotPmZvcm1hdCgkZm9ybWF0KTsKICAgIH0KCiAgICBwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBmb3JtYXRBc1BlcmNlbnRhZ2UoJiR2YWx1ZSwgJiRmb3JtYXQpCiAgICB7CiAgICAgICAgaWYgKCRmb3JtYXQgPT09IHNlbGY6OkZPUk1BVF9QRVJDRU5UQUdFKSB7CiAgICAgICAgICAgICR2YWx1ZSA9IHJvdW5kKCgxMDAgKiAkdmFsdWUpLCAwKSAuICclJzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAocHJlZ19tYXRjaCgnL1wuWyMwXSsvaScsICRmb3JtYXQsICRtKSkgewogICAgICAgICAgICAgICAgJHMgPSBzdWJzdHIoJG1bMF0sIDAsIDEpIC4gKHN0cmxlbigkbVswXSkgLSAxKTsKICAgICAgICAgICAgICAgICRmb3JtYXQgPSBzdHJfcmVwbGFjZSgkbVswXSwgJHMsICRmb3JtYXQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwcmVnX21hdGNoKCcvXlsjMF0rLycsICRmb3JtYXQsICRtKSkgewogICAgICAgICAgICAgICAgJGZvcm1hdCA9IHN0cl9yZXBsYWNlKCRtWzBdLCBzdHJsZW4oJG1bMF0pLCAkZm9ybWF0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkZm9ybWF0ID0gJyUnIC4gc3RyX3JlcGxhY2UoJyUnLCAnZiUlJywgJGZvcm1hdCk7CgogICAgICAgICAgICAkdmFsdWUgPSBzcHJpbnRmKCRmb3JtYXQsIDEwMCAqICR2YWx1ZSk7CiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGZvcm1hdEFzRnJhY3Rpb24oJiR2YWx1ZSwgJiRmb3JtYXQpCiAgICB7CiAgICAgICAgJHNpZ24gPSAoJHZhbHVlIDwgMCkgPyAnLScgOiAnJzsKCiAgICAgICAgJGludGVnZXJQYXJ0ID0gZmxvb3IoYWJzKCR2YWx1ZSkpOwogICAgICAgICRkZWNpbWFsUGFydCA9IHRyaW0oZm1vZChhYnMoJHZhbHVlKSwgMSksICcwLicpOwogICAgICAgICRkZWNpbWFsTGVuZ3RoID0gc3RybGVuKCRkZWNpbWFsUGFydCk7CiAgICAgICAgJGRlY2ltYWxEaXZpc29yID0gcG93KDEwLCAkZGVjaW1hbExlbmd0aCk7CgogICAgICAgICRHQ0QgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9NYXRoVHJpZzo6R0NEKCRkZWNpbWFsUGFydCwgJGRlY2ltYWxEaXZpc29yKTsKCiAgICAgICAgJGFkanVzdGVkRGVjaW1hbFBhcnQgPSAkZGVjaW1hbFBhcnQvJEdDRDsKICAgICAgICAkYWRqdXN0ZWREZWNpbWFsRGl2aXNvciA9ICRkZWNpbWFsRGl2aXNvci8kR0NEOwoKICAgICAgICBpZiAoKHN0cnBvcygkZm9ybWF0LCAnMCcpICE9PSBmYWxzZSkgfHwgKHN0cnBvcygkZm9ybWF0LCAnIycpICE9PSBmYWxzZSkgfHwgKHN1YnN0cigkZm9ybWF0LCAwLCAzKSA9PSAnPyA\/JykpIHsKICAgICAgICAgICAgaWYgKCRpbnRlZ2VyUGFydCA9PSAwKSB7CiAgICAgICAgICAgICAgICAkaW50ZWdlclBhcnQgPSAnJzsKICAgICAgICAgICAgfQogICAgICAgICAgICAkdmFsdWUgPSAiJHNpZ24kaW50ZWdlclBhcnQgJGFkanVzdGVkRGVjaW1hbFBhcnQvJGFkanVzdGVkRGVjaW1hbERpdmlzb3IiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRhZGp1c3RlZERlY2ltYWxQYXJ0ICs9ICRpbnRlZ2VyUGFydCAqICRhZGp1c3RlZERlY2ltYWxEaXZpc29yOwogICAgICAgICAgICAkdmFsdWUgPSAiJHNpZ24kYWRqdXN0ZWREZWNpbWFsUGFydC8kYWRqdXN0ZWREZWNpbWFsRGl2aXNvciI7CiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGNvbXBsZXhOdW1iZXJGb3JtYXRNYXNrKCRudW1iZXIsICRtYXNrLCAkbGV2ZWwgPSAwKQogICAgewogICAgICAgICRzaWduID0gKCRudW1iZXIgPCAwLjApOwogICAgICAgICRudW1iZXIgPSBhYnMoJG51bWJlcik7CiAgICAgICAgaWYgKHN0cnBvcygkbWFzaywgJy4nKSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgJG51bWJlcnMgPSBleHBsb2RlKCcuJywgJG51bWJlciAuICcuMCcpOwogICAgICAgICAgICAkbWFza3MgPSBleHBsb2RlKCcuJywgJG1hc2sgLiAnLjAnKTsKICAgICAgICAgICAgJHJlc3VsdDEgPSBzZWxmOjpjb21wbGV4TnVtYmVyRm9ybWF0TWFzaygkbnVtYmVyc1swXSwgJG1hc2tzWzBdLCAxKTsKICAgICAgICAgICAgJHJlc3VsdDIgPSBzdHJyZXYoc2VsZjo6Y29tcGxleE51bWJlckZvcm1hdE1hc2soc3RycmV2KCRudW1iZXJzWzFdKSwgc3RycmV2KCRtYXNrc1sxXSksIDEpKTsKICAgICAgICAgICAgcmV0dXJuICgoJHNpZ24pID8gJy0nIDogJycpIC4gJHJlc3VsdDEgLiAnLicgLiAkcmVzdWx0MjsKICAgICAgICB9CgogICAgICAgICRyID0gcHJlZ19tYXRjaF9hbGwoJy8wKy8nLCAkbWFzaywgJHJlc3VsdCwgUFJFR19PRkZTRVRfQ0FQVFVSRSk7CiAgICAgICAgaWYgKCRyID4gMSkgewogICAgICAgICAgICAkcmVzdWx0ID0gYXJyYXlfcmV2ZXJzZSgkcmVzdWx0WzBdKTsKCiAgICAgICAgICAgIGZvcmVhY2ggKCRyZXN1bHQgYXMgJGJsb2NrKSB7CiAgICAgICAgICAgICAgICAkZGl2aXNvciA9IDEgLiAkYmxvY2tbMF07CiAgICAgICAgICAgICAgICAkc2l6ZSA9IHN0cmxlbigkYmxvY2tbMF0pOwogICAgICAgICAgICAgICAgJG9mZnNldCA9ICRibG9ja1sxXTsKCiAgICAgICAgICAgICAgICAkYmxvY2tWYWx1ZSA9IHNwcmludGYoCiAgICAgICAgICAgICAgICAgICAgJyUwJyAuICRzaXplIC4gJ2QnLAogICAgICAgICAgICAgICAgICAgIGZtb2QoJG51bWJlciwgJGRpdmlzb3IpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgJG51bWJlciA9IGZsb29yKCRudW1iZXIgLyAkZGl2aXNvcik7CiAgICAgICAgICAgICAgICAkbWFzayA9IHN1YnN0cl9yZXBsYWNlKCRtYXNrLCAkYmxvY2tWYWx1ZSwgJG9mZnNldCwgJHNpemUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkbnVtYmVyID4gMCkgewogICAgICAgICAgICAgICAgJG1hc2sgPSBzdWJzdHJfcmVwbGFjZSgkbWFzaywgJG51bWJlciwgJG9mZnNldCwgMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJHJlc3VsdCA9ICRtYXNrOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRyZXN1bHQgPSAkbnVtYmVyOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICgoJHNpZ24pID8gJy0nIDogJycpIC4gJHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIENvbnZlcnQgYSB2YWx1ZSBpbiBhIHByZS1kZWZpbmVkIGZvcm1hdCB0byBhIFBIUCBzdHJpbmcKICAgICAqCiAgICAgKiBAcGFyYW0gbWl4ZWQgICAgJHZhbHVlICAgICAgICBWYWx1ZSB0byBmb3JtYXQKICAgICAqIEBwYXJhbSBzdHJpbmcgICAgJGZvcm1hdCAgICAgICAgRm9ybWF0IGNvZGUKICAgICAqIEBwYXJhbSBhcnJheSAgICAgICAgJGNhbGxCYWNrICAgIENhbGxiYWNrIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGZvcm1hdHRpbmcgb2Ygc3RyaW5nCiAgICAgKiBAcmV0dXJuIHN0cmluZyAgICBGb3JtYXR0ZWQgc3RyaW5nCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gdG9Gb3JtYXR0ZWRTdHJpbmcoJHZhbHVlID0gJzAnLCAkZm9ybWF0ID0gUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0OjpGT1JNQVRfR0VORVJBTCwgJGNhbGxCYWNrID0gbnVsbCkKICAgIHsKICAgICAgICAvLyBGb3Igbm93IHdlIGRvIG5vdCB0cmVhdCBzdHJpbmdzIGFsdGhvdWdoIHNlY3Rpb24gNCBvZiBhIGZvcm1hdCBjb2RlIGFmZmVjdHMgc3RyaW5ncwogICAgICAgIGlmICghaXNfbnVtZXJpYygkdmFsdWUpKSB7CiAgICAgICAgICAgIHJldHVybiAkdmFsdWU7CiAgICAgICAgfQoKICAgICAgICAvLyBGb3IgJ0dlbmVyYWwnIGZvcm1hdCBjb2RlLCB3ZSBqdXN0IHBhc3MgdGhlIHZhbHVlIGFsdGhvdWdoIHRoaXMgaXMgbm90IGVudGlyZWx5IHRoZSB3YXkgRXhjZWwgZG9lcyBpdCwKICAgICAgICAvLyBpdCBzZWVtcyB0byByb3VuZCBudW1iZXJzIHRvIGEgdG90YWwgb2YgMTAgZGlnaXRzLgogICAgICAgIGlmICgoJGZvcm1hdCA9PT0gUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0OjpGT1JNQVRfR0VORVJBTCkgfHwgKCRmb3JtYXQgPT09IFBIUEV4Y2VsX1N0eWxlX051bWJlckZvcm1hdDo6Rk9STUFUX1RFWFQpKSB7CiAgICAgICAgICAgIHJldHVybiAkdmFsdWU7CiAgICAgICAgfQoKICAgICAgICAvLyBDb252ZXJ0IGFueSBvdGhlciBlc2NhcGVkIGNoYXJhY3RlcnMgdG8gcXVvdGVkIHN0cmluZ3MsIGUuZy4gKFxUIHRvICJUIikKICAgICAgICAkZm9ybWF0ID0gcHJlZ19yZXBsYWNlKCcvKFxcXCguKSkoPz0oPzpbXiJdfCJbXiJdKiIpKiQpL3UnLCAnIiR7Mn0iJywgJGZvcm1hdCk7CgogICAgICAgIC8vIEdldCB0aGUgc2VjdGlvbnMsIHRoZXJlIGNhbiBiZSB1cCB0byBmb3VyIHNlY3Rpb25zLCBzZXBhcmF0ZWQgd2l0aCBhIHNlbWktY29sb24gKGJ1dCBvbmx5IGlmIG5vdCBhIHF1b3RlZCBsaXRlcmFsKQogICAgICAgICRzZWN0aW9ucyA9IHByZWdfc3BsaXQoJy8oOykoPz0oPzpbXiJdfCJbXiJdKiIpKiQpL3UnLCAkZm9ybWF0KTsKCiAgICAgICAgLy8gRXh0cmFjdCB0aGUgcmVsZXZhbnQgc2VjdGlvbiBkZXBlbmRpbmcgb24gd2hldGhlciBudW1iZXIgaXMgcG9zaXRpdmUsIG5lZ2F0aXZlLCBvciB6ZXJvPwogICAgICAgIC8vIFRleHQgbm90IHN1cHBvcnRlZCB5ZXQuCiAgICAgICAgLy8gSGVyZSBpcyBob3cgdGhlIHNlY3Rpb25zIGFwcGx5IHRvIHZhcmlvdXMgdmFsdWVzIGluIEV4Y2VsOgogICAgICAgIC8vICAgMSBzZWN0aW9uOiAgIFtQT1NJVElWRS9ORUdBVElWRS9aRVJPL1RFWFRdCiAgICAgICAgLy8gICAyIHNlY3Rpb25zOiAgW1BPU0lUSVZFL1pFUk8vVEVYVF0gW05FR0FUSVZFXQogICAgICAgIC8vICAgMyBzZWN0aW9uczogIFtQT1NJVElWRS9URVhUXSBbTkVHQVRJVkVdIFtaRVJPXQogICAgICAgIC8vICAgNCBzZWN0aW9uczogIFtQT1NJVElWRV0gW05FR0FUSVZFXSBbWkVST10gW1RFWFRdCiAgICAgICAgc3dpdGNoIChjb3VudCgkc2VjdGlvbnMpKSB7CiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICRmb3JtYXQgPSAkc2VjdGlvbnNbMF07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgJGZvcm1hdCA9ICgkdmFsdWUgPj0gMCkgPyAkc2VjdGlvbnNbMF0gOiAkc2VjdGlvbnNbMV07CiAgICAgICAgICAgICAgICAkdmFsdWUgPSBhYnMoJHZhbHVlKTsgLy8gVXNlIHRoZSBhYnNvbHV0ZSB2YWx1ZQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICRmb3JtYXQgPSAoJHZhbHVlID4gMCkgPwogICAgICAgICAgICAgICAgICAgICRzZWN0aW9uc1swXSA6ICggKCR2YWx1ZSA8IDApID8KICAgICAgICAgICAgICAgICAgICAgICAgJHNlY3Rpb25zWzFdIDogJHNlY3Rpb25zWzJdKTsKICAgICAgICAgICAgICAgICR2YWx1ZSA9IGFicygkdmFsdWUpOyAvLyBVc2UgdGhlIGFic29sdXRlIHZhbHVlCiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgJGZvcm1hdCA9ICgkdmFsdWUgPiAwKSA\/CiAgICAgICAgICAgICAgICAgICAgJHNlY3Rpb25zWzBdIDogKCAoJHZhbHVlIDwgMCkgPwogICAgICAgICAgICAgICAgICAgICAgICAkc2VjdGlvbnNbMV0gOiAkc2VjdGlvbnNbMl0pOwogICAgICAgICAgICAgICAgJHZhbHVlID0gYWJzKCR2YWx1ZSk7IC8vIFVzZSB0aGUgYWJzb2x1dGUgdmFsdWUKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgLy8gc29tZXRoaW5nIGlzIHdyb25nLCBqdXN0IHVzZSBmaXJzdCBzZWN0aW9uCiAgICAgICAgICAgICAgICAkZm9ybWF0ID0gJHNlY3Rpb25zWzBdOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICAvLyBJbiBFeGNlbCBmb3JtYXRzLCAiXyIgaXMgdXNlZCB0byBhZGQgc3BhY2luZywKICAgICAgICAvLyAgICBUaGUgZm9sbG93aW5nIGNoYXJhY3RlciBpbmRpY2F0ZXMgdGhlIHNpemUgb2YgdGhlIHNwYWNpbmcsIHdoaWNoIHdlIGNhbid0IGRvIGluIEhUTUwsIHNvIHdlIGp1c3QgdXNlIGEgc3RhbmRhcmQgc3BhY2UKICAgICAgICAkZm9ybWF0ID0gcHJlZ19yZXBsYWNlKCcvXy4vJywgJyAnLCAkZm9ybWF0KTsKCiAgICAgICAgLy8gU2F2ZSBmb3JtYXQgd2l0aCBjb2xvciBpbmZvcm1hdGlvbiBmb3IgbGF0ZXIgdXNlIGJlbG93CiAgICAgICAgJGZvcm1hdENvbG9yID0gJGZvcm1hdDsKCiAgICAgICAgLy8gU3RyaXAgY29sb3IgaW5mb3JtYXRpb24KICAgICAgICAkY29sb3JfcmVnZXggPSAnL15cXFtbYS16QS1aXStcXF0vJzsKICAgICAgICAkZm9ybWF0ID0gcHJlZ19yZXBsYWNlKCRjb2xvcl9yZWdleCwgJycsICRmb3JtYXQpOwoKICAgICAgICAvLyBMZXQncyBiZWdpbiBpbnNwZWN0aW5nIHRoZSBmb3JtYXQgYW5kIGNvbnZlcnRpbmcgdGhlIHZhbHVlIHRvIGEgZm9ybWF0dGVkIHN0cmluZwoKICAgICAgICAvLyAgQ2hlY2sgZm9yIGRhdGUvdGltZSBjaGFyYWN0ZXJzIChub3QgaW5zaWRlIHF1b3RlcykKICAgICAgICBpZiAocHJlZ19tYXRjaCgnLyhcW1wkW0EtWl0qLVswLTlBLUZdKlxdKSpbaG1zZHldKD89KD86W14iXXwiW14iXSoiKSokKS9taXUnLCAkZm9ybWF0LCAkbWF0Y2hlcykpIHsKICAgICAgICAgICAgLy8gZGF0ZXRpbWUgZm9ybWF0CiAgICAgICAgICAgIHNlbGY6OmZvcm1hdEFzRGF0ZSgkdmFsdWUsICRmb3JtYXQpOwogICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCcvJSQvJywgJGZvcm1hdCkpIHsKICAgICAgICAgICAgLy8gJSBudW1iZXIgZm9ybWF0CiAgICAgICAgICAgIHNlbGY6OmZvcm1hdEFzUGVyY2VudGFnZSgkdmFsdWUsICRmb3JtYXQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICgkZm9ybWF0ID09PSBzZWxmOjpGT1JNQVRfQ1VSUkVOQ1lfRVVSX1NJTVBMRSkgewogICAgICAgICAgICAgICAgJHZhbHVlID0gJ0VVUiAnIC4gc3ByaW50ZignJTEuMmYnLCAkdmFsdWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gU29tZSBub24tbnVtYmVyIHN0cmluZ3MgYXJlIHF1b3RlZCwgc28gd2UnbGwgZ2V0IHJpZCBvZiB0aGUgcXVvdGVzLCBsaWtld2lzZSBhbnkgcG9zaXRpb25hbCAqIHN5bWJvbHMKICAgICAgICAgICAgICAgICRmb3JtYXQgPSBzdHJfcmVwbGFjZShhcnJheSgnIicsICcqJyksICcnLCAkZm9ybWF0KTsKCiAgICAgICAgICAgICAgICAvLyBGaW5kIG91dCBpZiB3ZSBuZWVkIHRob3VzYW5kcyBzZXBhcmF0b3IKICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgaW5kaWNhdGVkIGJ5IGEgY29tbWEgZW5jbG9zZWQgYnkgYSBkaWdpdCBwbGFjZWhvbGRlcjoKICAgICAgICAgICAgICAgIC8vICAgICAgICAjLCMgICBvciAgIDAsMAogICAgICAgICAgICAgICAgJHVzZVRob3VzYW5kcyA9IHByZWdfbWF0Y2goJy8oIywjfDAsMCkvJywgJGZvcm1hdCk7CiAgICAgICAgICAgICAgICBpZiAoJHVzZVRob3VzYW5kcykgewogICAgICAgICAgICAgICAgICAgICRmb3JtYXQgPSBwcmVnX3JlcGxhY2UoJy8wLDAvJywgJzAwJywgJGZvcm1hdCk7CiAgICAgICAgICAgICAgICAgICAgJGZvcm1hdCA9IHByZWdfcmVwbGFjZSgnLyMsIy8nLCAnIyMnLCAkZm9ybWF0KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBTY2FsZSB0aG91c2FuZHMsIG1pbGxpb25zLC4uLgogICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBpbmRpY2F0ZWQgYnkgYSBudW1iZXIgb2YgY29tbWFzIGFmdGVyIGEgZGlnaXQgcGxhY2Vob2xkZXI6CiAgICAgICAgICAgICAgICAvLyAgICAgICAgIywgICBvciAgICAwLjAsLAogICAgICAgICAgICAgICAgJHNjYWxlID0gMTsgLy8gc2FtZSBhcyBubyBzY2FsZQogICAgICAgICAgICAgICAgJG1hdGNoZXMgPSBhcnJheSgpOwogICAgICAgICAgICAgICAgaWYgKHByZWdfbWF0Y2goJy8oI3wwKSgsKykvJywgJGZvcm1hdCwgJG1hdGNoZXMpKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjYWxlID0gcG93KDEwMDAsIHN0cmxlbigkbWF0Y2hlc1syXSkpOwoKICAgICAgICAgICAgICAgICAgICAvLyBzdHJpcCB0aGUgY29tbWFzCiAgICAgICAgICAgICAgICAgICAgJGZvcm1hdCA9IHByZWdfcmVwbGFjZSgnLzAsKy8nLCAnMCcsICRmb3JtYXQpOwogICAgICAgICAgICAgICAgICAgICRmb3JtYXQgPSBwcmVnX3JlcGxhY2UoJy8jLCsvJywgJyMnLCAkZm9ybWF0KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAocHJlZ19tYXRjaCgnLyM\/LipcP1wvXD8vJywgJGZvcm1hdCwgJG0pKSB7CiAgICAgICAgICAgICAgICAgICAgLy9lY2hvICdGb3JtYXQgbWFzayBpcyBmcmFjdGlvbmFsICcuJGZvcm1hdC4nIDxiciAvPic7CiAgICAgICAgICAgICAgICAgICAgaWYgKCR2YWx1ZSAhPSAoaW50KSR2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICBzZWxmOjpmb3JtYXRBc0ZyYWN0aW9uKCR2YWx1ZSwgJGZvcm1hdCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBudW1iZXIgaXRzZWxmCgogICAgICAgICAgICAgICAgICAgIC8vIHNjYWxlIG51bWJlcgogICAgICAgICAgICAgICAgICAgICR2YWx1ZSA9ICR2YWx1ZSAvICRzY2FsZTsKCiAgICAgICAgICAgICAgICAgICAgLy8gU3RyaXAgIwogICAgICAgICAgICAgICAgICAgICRmb3JtYXQgPSBwcmVnX3JlcGxhY2UoJy9cXCMvJywgJzAnLCAkZm9ybWF0KTsKCiAgICAgICAgICAgICAgICAgICAgJG4gPSAiL1xbW15cXV0rXF0vIjsKICAgICAgICAgICAgICAgICAgICAkbSA9IHByZWdfcmVwbGFjZSgkbiwgJycsICRmb3JtYXQpOwogICAgICAgICAgICAgICAgICAgICRudW1iZXJfcmVnZXggPSAiLygwKykoXC4\/KSgwKikvIjsKICAgICAgICAgICAgICAgICAgICBpZiAocHJlZ19tYXRjaCgkbnVtYmVyX3JlZ2V4LCAkbSwgJG1hdGNoZXMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRsZWZ0ID0gJG1hdGNoZXNbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICRkZWMgPSAkbWF0Y2hlc1syXTsKICAgICAgICAgICAgICAgICAgICAgICAgJHJpZ2h0ID0gJG1hdGNoZXNbM107CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBtaW5pbXVuIHdpZHRoIG9mIGZvcm1hdHRlZCBudW1iZXIgKGluY2x1ZGluZyBkb3QpCiAgICAgICAgICAgICAgICAgICAgICAgICRtaW5XaWR0aCA9IHN0cmxlbigkbGVmdCkgKyBzdHJsZW4oJGRlYykgKyBzdHJsZW4oJHJpZ2h0KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR1c2VUaG91c2FuZHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2YWx1ZSA9IG51bWJlcl9mb3JtYXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmxlbigkcmlnaHQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OmdldERlY2ltYWxTZXBhcmF0b3IoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQSFBFeGNlbF9TaGFyZWRfU3RyaW5nOjpnZXRUaG91c2FuZHNTZXBhcmF0b3IoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2YWx1ZSA9IHByZWdfcmVwbGFjZSgkbnVtYmVyX3JlZ2V4LCAkdmFsdWUsICRmb3JtYXQpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZWdfbWF0Y2goJy9bMCNdRVsrLV0wL2knLCAkZm9ybWF0KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIFNjaWVudGlmaWMgZm9ybWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZhbHVlID0gc3ByaW50ZignJTUuMkUnLCAkdmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlaWYgKHByZWdfbWF0Y2goJy8wKFteXGRcLl0rKTAvJywgJGZvcm1hdCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdmFsdWUgPSBzZWxmOjpjb21wbGV4TnVtYmVyRm9ybWF0TWFzaygkdmFsdWUsICRmb3JtYXQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3ByaW50Zl9wYXR0ZXJuID0gIiUwJG1pbldpZHRoLiIgLiBzdHJsZW4oJHJpZ2h0KSAuICJmIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdmFsdWUgPSBzcHJpbnRmKCRzcHJpbnRmX3BhdHRlcm4sICR2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZhbHVlID0gcHJlZ19yZXBsYWNlKCRudW1iZXJfcmVnZXgsICR2YWx1ZSwgJGZvcm1hdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAocHJlZ19tYXRjaCgnL1xbXCQoLiopXF0vdScsICRmb3JtYXQsICRtKSkgewogICAgICAgICAgICAgICAgICAgIC8vICBDdXJyZW5jeSBvciBBY2NvdW50aW5nCiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbmN5Rm9ybWF0ID0gJG1bMF07CiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbmN5Q29kZSA9ICRtWzFdOwogICAgICAgICAgICAgICAgICAgIGxpc3QoJGN1cnJlbmN5Q29kZSkgPSBleHBsb2RlKCctJywgJGN1cnJlbmN5Q29kZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRjdXJyZW5jeUNvZGUgPT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGN1cnJlbmN5Q29kZSA9IFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OmdldEN1cnJlbmN5Q29kZSgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkdmFsdWUgPSBwcmVnX3JlcGxhY2UoJy9cW1wkKFteXF1dKilcXS91JywgJGN1cnJlbmN5Q29kZSwgJHZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gRXNjYXBlIGFueSBlc2NhcGVkIHNsYXNoZXMgdG8gYSBzaW5nbGUgc2xhc2gKICAgICAgICAkZm9ybWF0ID0gcHJlZ19yZXBsYWNlKCIvXFxcXC91IiwgJ1xcJywgJGZvcm1hdCk7CgogICAgICAgIC8vIEFkZGl0aW9uYWwgZm9ybWF0dGluZyBwcm92aWRlZCBieSBjYWxsYmFjayBmdW5jdGlvbgogICAgICAgIGlmICgkY2FsbEJhY2sgIT09IG51bGwpIHsKICAgICAgICAgICAgbGlzdCgkd3JpdGVySW5zdGFuY2UsICRmdW5jdGlvbikgPSAkY2FsbEJhY2s7CiAgICAgICAgICAgICR2YWx1ZSA9ICR3cml0ZXJJbnN0YW5jZS0+JGZ1bmN0aW9uKCR2YWx1ZSwgJGZvcm1hdENvbG9yKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkdmFsdWU7CiAgICB9Cn0K",
    "size": "28488"
}