{
    "namaFile": "lib\/PHPExcel\/Documentation\/markdown\/Overview\/10-Reading-and-Writing.md",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/PgoKPHN0eWxlPgo8IS0tCmh0bWwgewogICAgZm9udC1mYW1pbHk6IFRpbWVzIE5ldyBSb21hbjsKICAgIGZvbnQtc2l6ZTogOXB0OwogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7Cn0KCjw\/cGhwCmVjaG8gJG9ialdyaXRlci0+Z2VuZXJhdGVTdHlsZXMoZmFsc2UpOyAvLyBkbyBub3Qgd3JpdGUgPHN0eWxlPiBhbmQgPC9zdHlsZT4KPz4KCi0tPgo8L3N0eWxlPgoKPD9waHAKZWNobyAkb2JqV3JpdGVyLT5nZW5lcmF0ZVNoZWV0RGF0YSgpOwplY2hvICRvYmpXcml0ZXItPmdlbmVyYXRlSFRNTEZvb3RlcigpOwo\/PgpgYGAKCiMjIyMjIFdyaXRpbmcgVVRGLTggSFRNTCBmaWxlcwoKQSBIVE1MIGZpbGUgY2FuIGJlIG1hcmtlZCBhcyBVVEYtOCBieSB3cml0aW5nIGEgQk9NIGZpbGUgaGVhZGVyLiBUaGlzIGNhbiBiZSBlbmFibGVkIGJ5IHVzaW5nIHRoZSBmb2xsb3dpbmcgY29kZToKCmBgYHBocAokb2JqV3JpdGVyID0gbmV3IFBIUEV4Y2VsX1dyaXRlcl9IVE1MKCRvYmpQSFBFeGNlbCk7CiRvYmpXcml0ZXItPnNldFVzZUJPTSh0cnVlKTsKCiRvYmpXcml0ZXItPnNhdmUoIjA1ZmVhdHVyZWRlbW8uaHRtIik7CmBgYAoKIyMjIyMgRGVjaW1hbCBhbmQgdGhvdXNhbmRzIHNlcGFyYXRvcnMKClNlZSBzZWN0aW9uIFBIUEV4Y2VsX1dyaXRlcl9DU1YgaG93IHRvIGNvbnRyb2wgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlc2UuCgojIyMgUERGCgpQSFBFeGNlbCBhbGxvd3MgeW91IHRvIHdyaXRlIGEgc3ByZWFkc2hlZXQgaW50byBQREYgZm9ybWF0LCBmb3IgZmFzdCBkaXN0cmlidXRpb24gb2YgcmVwcmVzZW50ZWQgZGF0YS4KCl9fUERGIGxpbWl0YXRpb25zX18KUGxlYXNlIG5vdGUgdGhhdCBQREYgZmlsZSBmb3JtYXQgaGFzIHNvbWUgbGltaXRzIHJlZ2FyZGluZyB0byBzdHlsaW5nIGNlbGxzLCBudW1iZXIgZm9ybWF0dGluZywgLi4uCgojIyMjIFBIUEV4Y2VsX1dyaXRlcl9QREYKClBIUEV4Y2Vs4oCZcyBQREYgV3JpdGVyIGlzIGEgd3JhcHBlciBmb3IgYSAzcmQtUGFydHkgUERGIFJlbmRlcmluZyBsaWJyYXJ5IHN1Y2ggYXMgdGNQREYsIG1QREYgb3IgRG9tUERGLiBQcmlvciB0byB2ZXJzaW9uIDEuNy44IG9mIFBIUEV4Y2VsLCB0aGUgdGNQREYgbGlicmFyeSB3YXMgYnVuZGxlZCB3aXRoIFBIUEV4Y2VsOyBidXQgZnJvbSB2ZXJzaW9uIDEuNy44IHRoaXMgd2FzIHJlbW92ZWQuIEluc3RlYWQsIHlvdSBtdXN0IG5vdyBpbnN0YWxsIGEgUERGIFJlbmRlcmluZyBsaWJyYXJ5IHlvdXJzZWxmOyBidXQgUEhQRXhjZWwgd2lsbCB3b3JrIHdpdGggYSBudW1iZXIgb2YgZGlmZmVyZW50IGxpYnJhcmllcy4KCkN1cnJlbnRseSwgdGhlIGZvbGxvd2luZyBsaWJyYXJpZXMgYXJlIHN1cHBvcnRlZDoKCkxpYnJhcnkgfCBWZXJzaW9uIHVzZWQgZm9yIHRlc3RpbmcgfCBEb3dubG9hZGFibGUgZnJvbSAgICAgICAgICAgICAgICB8IFBIUEV4Y2VsIEludGVybmFsIENvbnN0YW50Ci0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQp0Y1BERiAgIHwgNS45ICAgICAgICAgICAgICAgICAgICAgIHwgaHR0cDovL3d3dy50Y3BkZi5vcmcvICAgICAgICAgICAgfCBQREZfUkVOREVSRVJfVENQREYKbVBERiAgICB8IDUuNCAgICAgICAgICAgICAgICAgICAgICB8IGh0dHA6Ly93d3cubXBkZjEuY29tL21wZGYvICAgICAgIHwgUERGX1JFTkRFUkVSX01QREYKZG9tUERGICB8IDAuNi4wIGJldGEgMyAgICAgICAgICAgICB8IGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9kb21wZGYvIHwgUERGX1JFTkRFUkVSX0RPTVBERgoKVGhlIGRpZmZlcmVudCBsaWJyYXJpZXMgaGF2ZSBkaWZmZXJlbnQgc3RyZW5ndGhzIGFuZCB3ZWFrbmVzc2VzLiBTb21lIGdlbmVyYXRlIGJldHRlciBmb3JtYXR0ZWQgb3V0cHV0IHRoYW4gb3RoZXJzLCBzb21lIGFyZSBmYXN0ZXIgb3IgdXNlIGxlc3MgbWVtb3J5IHRoYW4gb3RoZXJzLCB3aGlsZSBzb21lIGdlbmVyYXRlIHNtYWxsZXIgLnBkZiBmaWxlcy4gSXQgaXMgdGhlIGRldmVsb3BlcnMgY2hvaWNlIHdoaWNoIG9uZSB0aGV5IHdpc2ggdG8gdXNlLCBhcHByb3ByaWF0ZSB0byB0aGVpciBvd24gY2lyY3Vtc3RhbmNlcy4KCkJlZm9yZSBpbnN0YW50aWF0aW5nIGEgV3JpdGVyIHRvIGdlbmVyYXRlIFBERiBvdXRwdXQsIHlvdSB3aWxsIG5lZWQgdG8gaW5kaWNhdGUgd2hpY2ggUmVuZGVyaW5nIGxpYnJhcnkgeW91IGFyZSB1c2luZywgYW5kIHdoZXJlIGl0IGlzIGxvY2F0ZWQuCgpgYGBwaHAKJHJlbmRlcmVyTmFtZSA9IFBIUEV4Y2VsX1NldHRpbmdzOjpQREZfUkVOREVSRVJfTVBERjsKJHJlbmRlcmVyTGlicmFyeSA9ICdtUERGNS40JzsKJHJlbmRlcmVyTGlicmFyeVBhdGggPSBkaXJuYW1lKF9fRklMRV9fKS4nLy4uLy4uLy4uL2xpYnJhcmllcy9QREYvJyAuICRyZW5kZXJlckxpYnJhcnk7CgppZiAoIVBIUEV4Y2VsX1NldHRpbmdzOjpzZXRQZGZSZW5kZXJlcigKICAgICRyZW5kZXJlck5hbWUsCiAgICAkcmVuZGVyZXJMaWJyYXJ5UGF0aAogICAgKSkgewogICAgZGllKAogICAgICAgICdQbGVhc2Ugc2V0IHRoZSAkcmVuZGVyZXJOYW1lIGFuZCAkcmVuZGVyZXJMaWJyYXJ5UGF0aCB2YWx1ZXMnIC4KICAgICAgICBQSFBfRU9MIC4KICAgICAgICAnIGFzIGFwcHJvcHJpYXRlIGZvciB5b3VyIGRpcmVjdG9yeSBzdHJ1Y3R1cmUnCiAgICApOwp9CmBgYAoKIyMjIyMgV3JpdGluZyBhIHNwcmVhZHNoZWV0CgpPbmNlIHlvdSBoYXZlIGlkZW50aWZpZWQgdGhlIFJlbmRlcmVyIHRoYXQgeW91IHdpc2ggdG8gdXNlIGZvciBQREYgZ2VuZXJhdGlvbiwgeW91IGNhbiB3cml0ZSBhIC5wZGYgZmlsZSB1c2luZyB0aGUgZm9sbG93aW5nIGNvZGU6CgpgYGBwaHAKJG9ialdyaXRlciA9IG5ldyBQSFBFeGNlbF9Xcml0ZXJfUERGKCRvYmpQSFBFeGNlbCk7CiRvYmpXcml0ZXItPnNhdmUoIjA1ZmVhdHVyZWRlbW8ucGRmIik7CmBgYAoKUGxlYXNlIG5vdGUgdGhhdCBQSFBFeGNlbF9Xcml0ZXJfUERGIG9ubHkgb3V0cHV0cyB0aGUgZmlyc3Qgd29ya3NoZWV0IGJ5IGRlZmF1bHQuCgojIyMjIyBXcml0ZSBhbGwgd29ya3NoZWV0cwoKUERGIGZpbGVzIGNhbiBjb250YWluIG9uZSBvciBtb3JlIHdvcmtzaGVldHMuIElmIHlvdSB3YW50IHRvIHdyaXRlIGFsbCBzaGVldHMgaW50byBhIHNpbmdsZSBQREYgZmlsZSwgdXNlIHRoZSBmb2xsb3dpbmcgY29kZToKCmBgYHBocAokb2JqV3JpdGVyLT53cml0ZUFsbFNoZWV0cygpOwpgYGAKCiMjIyMjIFdyaXRlIGEgc3BlY2lmaWMgd29ya3NoZWV0CgpQREYgZmlsZXMgY2FuIGNvbnRhaW4gb25lIG9yIG1vcmUgd29ya3NoZWV0cy4gVGhlcmVmb3JlLCB5b3UgY2FuIHNwZWNpZnkgd2hpY2ggc2hlZXQgdG8gd3JpdGUgdG8gUERGOgoKYGBgcGhwCiRvYmpXcml0ZXItPnNldFNoZWV0SW5kZXgoMCk7CmBgYAoKIyMjIyMgRm9ybXVsYSBwcmUtY2FsY3VsYXRpb24KCkJ5IGRlZmF1bHQsIHRoaXMgd3JpdGVyIHByZS1jYWxjdWxhdGVzIGFsbCBmb3JtdWxhcyBpbiB0aGUgc3ByZWFkc2hlZXQuIFRoaXMgY2FuIGJlIHNsb3cgb24gbGFyZ2Ugc3ByZWFkc2hlZXRzLCBhbmQgbWF5YmUgZXZlbiB1bndhbnRlZC4gWW91IGNhbiBob3dldmVyIGRpc2FibGUgZm9ybXVsYSBwcmUtY2FsY3VsYXRpb246CgpgYGBwaHAKJG9ialdyaXRlciA9IG5ldyBQSFBFeGNlbF9Xcml0ZXJfUERGKCRvYmpQSFBFeGNlbCk7CiRvYmpXcml0ZXItPnNldFByZUNhbGN1bGF0ZUZvcm11bGFzKGZhbHNlKTsKCiRvYmpXcml0ZXItPnNhdmUoIjA1ZmVhdHVyZWRlbW8ucGRmIik7CmBgYAoKIyMjIyMgRGVjaW1hbCBhbmQgdGhvdXNhbmRzIHNlcGFyYXRvcnMKClNlZSBzZWN0aW9uIFBIUEV4Y2VsX1dyaXRlcl9DU1YgaG93IHRvIGNvbnRyb2wgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlc2UuCgojIyMgR2VuZXJhdGluZyBFeGNlbCBmaWxlcyBmcm9tIHRlbXBsYXRlcyAocmVhZCwgbW9kaWZ5LCB3cml0ZSkKClJlYWRlcnMgYW5kIHdyaXRlcnMgYXJlIHRoZSB0b29scyB0aGF0IGFsbG93IHlvdSB0byBnZW5lcmF0ZSBFeGNlbCBmaWxlcyBmcm9tIHRlbXBsYXRlcy4gVGhpcyByZXF1aXJlcyBsZXNzIGNvZGluZyBlZmZvcnQgdGhhbiBnZW5lcmF0aW5nIHRoZSBFeGNlbCBmaWxlIGZyb20gc2NyYXRjaCwgZXNwZWNpYWxseSBpZiB5b3VyIHRlbXBsYXRlIGhhcyBtYW55IHN0eWxlcywgcGFnZSBzZXR1cCBwcm9wZXJ0aWVzLCBoZWFkZXJzIGV0Yy4KCkhlcmUgaXMgYW4gZXhhbXBsZSBob3cgdG8gb3BlbiBhIHRlbXBsYXRlIGZpbGUsIGZpbGwgaW4gYSBjb3VwbGUgb2YgZmllbGRzIGFuZCBzYXZlIGl0IGFnYWluOgoKYGBgcGhwCiRvYmpQSFBleGNlbCA9IFBIUEV4Y2VsX0lPRmFjdG9yeTo6bG9hZCgndGVtcGxhdGUueGxzeCcpOwoKJG9ialdvcmtzaGVldCA9ICRvYmpQSFBleGNlbC0+Z2V0QWN0aXZlU2hlZXQoKTsKCiRvYmpXb3Jrc2hlZXQtPmdldENlbGwoJ0ExJyktPnNldFZhbHVlKCdKb2huJyk7CiRvYmpXb3Jrc2hlZXQtPmdldENlbGwoJ0EyJyktPnNldFZhbHVlKCdTbWl0aCcpOwoKJG9ialdyaXRlciA9IFBIUEV4Y2VsX0lPRmFjdG9yeTo6Y3JlYXRlV3JpdGVyKCRvYmpQSFBleGNlbCwgJ0V4Y2VsNScpOwokb2JqV3JpdGVyLT5zYXZlKCd3cml0ZS54bHMnKTsKYGBgCgpOb3RpY2UgdGhhdCBpdCBpcyBvayB0byBsb2FkIGFuIHhsc3ggZmlsZSBhbmQgZ2VuZXJhdGUgYW4geGxzIGZpbGUuCgogIFsyMV06IGh0dHA6Ly9wZWFyLnBocC5uZXQvcGFja2FnZS9TcHJlYWRzaGVldF9FeGNlbF9Xcml0ZXIKICBbMjJdOiBodHRwOi8vd3d3LmNvZGVwbGV4LmNvbS9QSFBFeGNlbC9XaWtpL1ZpZXcuYXNweD90aXRsZT1DcmVkaXRzJnJlZmVycmluZ1RpdGxlPUhvbWUK",
    "size": "24636"
}