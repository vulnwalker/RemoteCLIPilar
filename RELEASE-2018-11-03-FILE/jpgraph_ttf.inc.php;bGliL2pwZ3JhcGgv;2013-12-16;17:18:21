{
    "namaFile": "lib\/jpgraph\/jpgraph_ttf.inc.php",
    "lastUpdate": "2013-12-16+17:18:21.00",
    "contentFile": "PD9waHAKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLyBGaWxlOiAgICAgICAganBncmFwaF90dGYuaW5jLnBocAovLyBEZXNjcmlwdGlvbjogSGFuZGxpbmcgb2YgVFRGIGZvbnRzCi8vIENyZWF0ZWQ6ICAgICAyMDA2LTExLTE5Ci8vIFZlcjogICAgICAgICAkSWQ6IGpwZ3JhcGhfdHRmLmluYy5waHAgMTg1OCAyMDA5LTA5LTI4IDE0OjM5OjUxWiBsanAgJAovLwovLyBDb3B5cmlnaHQgKGMpIEFzaWFsIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKLy8gVFRGIEZvbnQgZmFtaWxpZXMKZGVmaW5lKCJGRl9DT1VSSUVSIiwxMCk7CmRlZmluZSgiRkZfVkVSREFOQSIsMTEpOwpkZWZpbmUoIkZGX1RJTUVTIiwxMik7CmRlZmluZSgiRkZfQ09NSUMiLDE0KTsKZGVmaW5lKCJGRl9BUklBTCIsMTUpOwpkZWZpbmUoIkZGX0dFT1JHSUEiLDE2KTsKZGVmaW5lKCJGRl9UUkVCVUNIRSIsMTcpOwoKLy8gR25vbWUgVmVyYSBmb250Ci8vIEF2YWlsYWJsZSBmcm9tIGh0dHA6Ly93d3cuZ25vbWUub3JnL2ZvbnRzLwpkZWZpbmUoIkZGX1ZFUkEiLDE4KTsKZGVmaW5lKCJGRl9WRVJBTU9OTyIsMTkpOwpkZWZpbmUoIkZGX1ZFUkFTRVJJRiIsMjApOwoKLy8gQ2hpbmVzZSBmb250CmRlZmluZSgiRkZfU0lNU1VOIiwzMCk7CmRlZmluZSgiRkZfQ0hJTkVTRSIsMzEpOwpkZWZpbmUoIkZGX0JJRzUiLDMyKTsKCi8vIEphcGFuZXNlIGZvbnQKZGVmaW5lKCJGRl9NSU5DSE8iLDQwKTsKZGVmaW5lKCJGRl9QTUlOQ0hPIiw0MSk7CmRlZmluZSgiRkZfR09USElDIiw0Mik7CmRlZmluZSgiRkZfUEdPVEhJQyIsNDMpOwoKLy8gSGVicmV3IGZvbnRzCmRlZmluZSgiRkZfREFWSUQiLDQ0KTsKZGVmaW5lKCJGRl9NSVJJQU0iLDQ1KTsKZGVmaW5lKCJGRl9BSFJPTiIsNDYpOwoKLy8gRGVqYXZ1LWZvbnRzIGh0dHA6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvZGVqYXZ1CmRlZmluZSgiRkZfRFZfU0FOU1NFUklGIiw0Nyk7CmRlZmluZSgiRkZfRFZfU0VSSUYiLDQ4KTsKZGVmaW5lKCJGRl9EVl9TQU5TU0VSSUZNT05PIiw0OSk7CmRlZmluZSgiRkZfRFZfU0VSSUZDT05EIiw1MCk7CmRlZmluZSgiRkZfRFZfU0FOU1NFUklGQ09ORCIsNTEpOwoKLy8gRXh0cmEgZm9udHMKLy8gRG93bmxvYWQgZm9udHMgZnJvbQovLyBodHRwOi8vd3d3LndlYmZvbnRsaXN0LmNvbQovLyBodHRwOi8vd3d3LndlYnBhZ2VwdWJsaWNpdHkuY29tL2ZyZWUtZm9udHMuaHRtbAovLyBodHRwOi8vd3d3LmZvbnRvbmljLmNvbS9mb250cy5hc3A\\",
    "size": "21240"
}