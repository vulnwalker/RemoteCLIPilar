{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Worksheet\/PageSetup.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/CiAgICAgICovCiAgICBwcml2YXRlICRmaXRUb0hlaWdodCAgICA9IDE7CgogICAgLyoqCiAgICAgICogRml0IFRvIFdpZHRoCiAgICAgICogTnVtYmVyIG9mIGhvcml6b250YWwgcGFnZXMgdG8gZml0IG9uCiAgICAgICoKICAgICAgKiBAdmFyIGludD8KICAgICAgKi8KICAgIHByaXZhdGUgJGZpdFRvV2lkdGggICAgPSAxOwoKICAgIC8qKgogICAgICogQ29sdW1ucyB0byByZXBlYXQgYXQgbGVmdAogICAgICoKICAgICAqIEB2YXIgYXJyYXkgQ29udGFpbmluZyBzdGFydCBjb2x1bW4gYW5kIGVuZCBjb2x1bW4sIGVtcHR5IGFycmF5IGlmIG9wdGlvbiB1bnNldAogICAgICovCiAgICBwcml2YXRlICRjb2x1bW5zVG9SZXBlYXRBdExlZnQgPSBhcnJheSgnJywgJycpOwoKICAgIC8qKgogICAgICogUm93cyB0byByZXBlYXQgYXQgdG9wCiAgICAgKgogICAgICogQHZhciBhcnJheSBDb250YWluaW5nIHN0YXJ0IHJvdyBudW1iZXIgYW5kIGVuZCByb3cgbnVtYmVyLCBlbXB0eSBhcnJheSBpZiBvcHRpb24gdW5zZXQKICAgICAqLwogICAgcHJpdmF0ZSAkcm93c1RvUmVwZWF0QXRUb3AgPSBhcnJheSgwLCAwKTsKCiAgICAvKioKICAgICAqIENlbnRlciBwYWdlIGhvcml6b250YWxseQogICAgICoKICAgICAqIEB2YXIgYm9vbGVhbgogICAgICovCiAgICBwcml2YXRlICRob3Jpem9udGFsQ2VudGVyZWQgPSBmYWxzZTsKCiAgICAvKioKICAgICAqIENlbnRlciBwYWdlIHZlcnRpY2FsbHkKICAgICAqCiAgICAgKiBAdmFyIGJvb2xlYW4KICAgICAqLwogICAgcHJpdmF0ZSAkdmVydGljYWxDZW50ZXJlZCA9IGZhbHNlOwoKICAgIC8qKgogICAgICogUHJpbnQgYXJlYQogICAgICoKICAgICAqIEB2YXIgc3RyaW5nCiAgICAgKi8KICAgIHByaXZhdGUgJHByaW50QXJlYSA9IG51bGw7CgogICAgLyoqCiAgICAgKiBGaXJzdCBwYWdlIG51bWJlcgogICAgICoKICAgICAqIEB2YXIgaW50CiAgICAgKi8KICAgIHByaXZhdGUgJGZpcnN0UGFnZU51bWJlciA9IG51bGw7CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYSBuZXcgUEhQRXhjZWxfV29ya3NoZWV0X1BhZ2VTZXR1cAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQogICAgewogICAgfQoKICAgIC8qKgogICAgICogR2V0IFBhcGVyIFNpemUKICAgICAqCiAgICAgKiBAcmV0dXJuIGludAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0UGFwZXJTaXplKCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPnBhcGVyU2l6ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBQYXBlciBTaXplCiAgICAgKgogICAgICogQHBhcmFtIGludCAkcFZhbHVlCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1dvcmtzaGVldF9QYWdlU2V0dXAKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNldFBhcGVyU2l6ZSgkcFZhbHVlID0gUEhQRXhjZWxfV29ya3NoZWV0X1BhZ2VTZXR1cDo6UEFQRVJTSVpFX0xFVFRFUikKICAgIHsKICAgICAgICAkdGhpcy0+cGFwZXJTaXplID0gJHBWYWx1ZTsKICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgT3JpZW50YXRpb24KICAgICAqCiAgICAgKiBAcmV0dXJuIHN0cmluZwogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0T3JpZW50YXRpb24oKQogICAgewogICAgICAgIHJldHVybiAkdGhpcy0+b3JpZW50YXRpb247CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgT3JpZW50YXRpb24KICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRwVmFsdWUKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfV29ya3NoZWV0X1BhZ2VTZXR1cAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0T3JpZW50YXRpb24oJHBWYWx1ZSA9IFBIUEV4Y2VsX1dvcmtzaGVldF9QYWdlU2V0dXA6Ok9SSUVOVEFUSU9OX0RFRkFVTFQpCiAgICB7CiAgICAgICAgJHRoaXMtPm9yaWVudGF0aW9uID0gJHBWYWx1ZTsKICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgU2NhbGUKICAgICAqCiAgICAgKiBAcmV0dXJuIGludD8KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldFNjYWxlKCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPnNjYWxlOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IFNjYWxlCiAgICAgKgogICAgICogUHJpbnQgc2NhbGluZy4gVmFsaWQgdmFsdWVzIHJhbmdlIGZyb20gMTAgdG8gNDAwCiAgICAgKiBUaGlzIHNldHRpbmcgaXMgb3ZlcnJpZGRlbiB3aGVuIGZpdFRvV2lkdGggYW5kL29yIGZpdFRvSGVpZ2h0IGFyZSBpbiB1c2UKICAgICAqCiAgICAgKiBAcGFyYW0gICAgIGludD8gICAgJHBWYWx1ZQogICAgICogQHBhcmFtIGJvb2xlYW4gICAgJHBVcGRhdGUgICAgVXBkYXRlIGZpdFRvUGFnZSBzbyBzY2FsaW5nIGFwcGxpZXMgcmF0aGVyIHRoYW4gZml0VG9IZWlnaHQgLyBmaXRUb1dpZHRoCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1dvcmtzaGVldF9QYWdlU2V0dXAKICAgICAqIEB0aHJvd3MgICAgIFBIUEV4Y2VsX0V4Y2VwdGlvbgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0U2NhbGUoJHBWYWx1ZSA9IDEwMCwgJHBVcGRhdGUgPSB0cnVlKQogICAgewogICAgICAgIC8vIE1pY3Jvc29mdCBPZmZpY2UgRXhjZWwgMjAwNyBvbmx5IGFsbG93cyBzZXR0aW5nIGEgc2NhbGUgYmV0d2VlbiAxMCBhbmQgNDAwIHZpYSB0aGUgdXNlciBpbnRlcmZhY2UsCiAgICAgICAgLy8gYnV0IGl0IGlzIGFwcGFyZW50bHkgc3RpbGwgYWJsZSB0byBoYW5kbGUgYW55IHNjYWxlID49IDAsIHdoZXJlIDAgcmVzdWx0cyBpbiAxMDAKICAgICAgICBpZiAoKCRwVmFsdWUgPj0gMCkgfHwgaXNfbnVsbCgkcFZhbHVlKSkgewogICAgICAgICAgICAkdGhpcy0+c2NhbGUgPSAkcFZhbHVlOwogICAgICAgICAgICBpZiAoJHBVcGRhdGUpIHsKICAgICAgICAgICAgICAgICR0aGlzLT5maXRUb1BhZ2UgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oIlNjYWxlIG11c3Qgbm90IGJlIG5lZ2F0aXZlIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBGaXQgVG8gUGFnZQogICAgICoKICAgICAqIEByZXR1cm4gYm9vbGVhbgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Rml0VG9QYWdlKCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmZpdFRvUGFnZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBGaXQgVG8gUGFnZQogICAgICoKICAgICAqIEBwYXJhbSBib29sZWFuICRwVmFsdWUKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfV29ya3NoZWV0X1BhZ2VTZXR1cAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0Rml0VG9QYWdlKCRwVmFsdWUgPSB0cnVlKQogICAgewogICAgICAgICR0aGlzLT5maXRUb1BhZ2UgPSAkcFZhbHVlOwogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBGaXQgVG8gSGVpZ2h0CiAgICAgKgogICAgICogQHJldHVybiBpbnQ\/CiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRGaXRUb0hlaWdodCgpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5maXRUb0hlaWdodDsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBGaXQgVG8gSGVpZ2h0CiAgICAgKgogICAgICogQHBhcmFtIGludD8gJHBWYWx1ZQogICAgICogQHBhcmFtIGJvb2xlYW4gJHBVcGRhdGUgVXBkYXRlIGZpdFRvUGFnZSBzbyBpdCBhcHBsaWVzIHJhdGhlciB0aGFuIHNjYWxpbmcKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfV29ya3NoZWV0X1BhZ2VTZXR1cAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0Rml0VG9IZWlnaHQoJHBWYWx1ZSA9IDEsICRwVXBkYXRlID0gdHJ1ZSkKICAgIHsKICAgICAgICAkdGhpcy0+Zml0VG9IZWlnaHQgPSAkcFZhbHVlOwogICAgICAgIGlmICgkcFVwZGF0ZSkgewogICAgICAgICAgICAkdGhpcy0+Zml0VG9QYWdlID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICR0aGlzOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IEZpdCBUbyBXaWR0aAogICAgICoKICAgICAqIEByZXR1cm4gaW50PwogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Rml0VG9XaWR0aCgpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5maXRUb1dpZHRoOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IEZpdCBUbyBXaWR0aAogICAgICoKICAgICAqIEBwYXJhbSBpbnQ\/ICRwVmFsdWUKICAgICAqIEBwYXJhbSBib29sZWFuICRwVXBkYXRlIFVwZGF0ZSBmaXRUb1BhZ2Ugc28gaXQgYXBwbGllcyByYXRoZXIgdGhhbiBzY2FsaW5nCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1dvcmtzaGVldF9QYWdlU2V0dXAKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNldEZpdFRvV2lkdGgoJHBWYWx1ZSA9IDEsICRwVXBkYXRlID0gdHJ1ZSkKICAgIHsKICAgICAgICAkdGhpcy0+Zml0VG9XaWR0aCA9ICRwVmFsdWU7CiAgICAgICAgaWYgKCRwVXBkYXRlKSB7CiAgICAgICAgICAgICR0aGlzLT5maXRUb1BhZ2UgPSB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBJcyBDb2x1bW5zIHRvIHJlcGVhdCBhdCBsZWZ0IHNldD8KICAgICAqCiAgICAgKiBAcmV0dXJuIGJvb2xlYW4KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGlzQ29sdW1uc1RvUmVwZWF0QXRMZWZ0U2V0KCkKICAgIHsKICAgICAgICBpZiAoaXNfYXJyYXkoJHRoaXMtPmNvbHVtbnNUb1JlcGVhdEF0TGVmdCkpIHsKICAgICAgICAgICAgaWYgKCR0aGlzLT5jb2x1bW5zVG9SZXBlYXRBdExlZnRbMF0gIT0gJycgJiYgJHRoaXMtPmNvbHVtbnNUb1JlcGVhdEF0TGVmdFsxXSAhPSAnJykgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBDb2x1bW5zIHRvIHJlcGVhdCBhdCBsZWZ0CiAgICAgKgogICAgICogQHJldHVybiBhcnJheSBDb250YWluaW5nIHN0YXJ0IGNvbHVtbiBhbmQgZW5kIGNvbHVtbiwgZW1wdHkgYXJyYXkgaWYgb3B0aW9uIHVuc2V0CiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRDb2x1bW5zVG9SZXBlYXRBdExlZnQoKQogICAgewogICAgICAgIHJldHVybiAkdGhpcy0+Y29sdW1uc1RvUmVwZWF0QXRMZWZ0OwogICAgfQoKICAgIC8qKgogICAgICogU2V0IENvbHVtbnMgdG8gcmVwZWF0IGF0IGxlZnQKICAgICAqCiAgICAgKiBAcGFyYW0gYXJyYXkgJHBWYWx1ZSBDb250YWluaW5nIHN0YXJ0IGNvbHVtbiBhbmQgZW5kIGNvbHVtbiwgZW1wdHkgYXJyYXkgaWYgb3B0aW9uIHVuc2V0CiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1dvcmtzaGVldF9QYWdlU2V0dXAKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNldENvbHVtbnNUb1JlcGVhdEF0TGVmdCgkcFZhbHVlID0gbnVsbCkKICAgIHsKICAgICAgICBpZiAoaXNfYXJyYXkoJHBWYWx1ZSkpIHsKICAgICAgICAgICAgJHRoaXMtPmNvbHVtbnNUb1JlcGVhdEF0TGVmdCA9ICRwVmFsdWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBDb2x1bW5zIHRvIHJlcGVhdCBhdCBsZWZ0IGJ5IHN0YXJ0IGFuZCBlbmQKICAgICAqCiAgICAgKiBAcGFyYW0gc3RyaW5nICRwU3RhcnQKICAgICAqIEBwYXJhbSBzdHJpbmcgJHBFbmQKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfV29ya3NoZWV0X1BhZ2VTZXR1cAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0Q29sdW1uc1RvUmVwZWF0QXRMZWZ0QnlTdGFydEFuZEVuZCgkcFN0YXJ0ID0gJ0EnLCAkcEVuZCA9ICdBJykKICAgIHsKICAgICAgICAkdGhpcy0+Y29sdW1uc1RvUmVwZWF0QXRMZWZ0ID0gYXJyYXkoJHBTdGFydCwgJHBFbmQpOwogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIElzIFJvd3MgdG8gcmVwZWF0IGF0IHRvcCBzZXQ\/CiAgICAgKgogICAgICogQHJldHVybiBib29sZWFuCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBpc1Jvd3NUb1JlcGVhdEF0VG9wU2V0KCkKICAgIHsKICAgICAgICBpZiAoaXNfYXJyYXkoJHRoaXMtPnJvd3NUb1JlcGVhdEF0VG9wKSkgewogICAgICAgICAgICBpZiAoJHRoaXMtPnJvd3NUb1JlcGVhdEF0VG9wWzBdICE9IDAgJiYgJHRoaXMtPnJvd3NUb1JlcGVhdEF0VG9wWzFdICE9IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXQgUm93cyB0byByZXBlYXQgYXQgdG9wCiAgICAgKgogICAgICogQHJldHVybiBhcnJheSBDb250YWluaW5nIHN0YXJ0IGNvbHVtbiBhbmQgZW5kIGNvbHVtbiwgZW1wdHkgYXJyYXkgaWYgb3B0aW9uIHVuc2V0CiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRSb3dzVG9SZXBlYXRBdFRvcCgpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5yb3dzVG9SZXBlYXRBdFRvcDsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBSb3dzIHRvIHJlcGVhdCBhdCB0b3AKICAgICAqCiAgICAgKiBAcGFyYW0gYXJyYXkgICAgJHBWYWx1ZSAgICBDb250YWluaW5nIHN0YXJ0IGNvbHVtbiBhbmQgZW5kIGNvbHVtbiwgZW1wdHkgYXJyYXkgaWYgb3B0aW9uIHVuc2V0CiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1dvcmtzaGVldF9QYWdlU2V0dXAKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNldFJvd3NUb1JlcGVhdEF0VG9wKCRwVmFsdWUgPSBudWxsKQogICAgewogICAgICAgIGlmIChpc19hcnJheSgkcFZhbHVlKSkgewogICAgICAgICAgICAkdGhpcy0+cm93c1RvUmVwZWF0QXRUb3AgPSAkcFZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJHRoaXM7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgUm93cyB0byByZXBlYXQgYXQgdG9wIGJ5IHN0YXJ0IGFuZCBlbmQKICAgICAqCiAgICAgKiBAcGFyYW0gaW50ICRwU3RhcnQKICAgICAqIEBwYXJhbSBpbnQgJHBFbmQKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfV29ya3NoZWV0X1BhZ2VTZXR1cAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0Um93c1RvUmVwZWF0QXRUb3BCeVN0YXJ0QW5kRW5kKCRwU3RhcnQgPSAxLCAkcEVuZCA9IDEpCiAgICB7CiAgICAgICAgJHRoaXMtPnJvd3NUb1JlcGVhdEF0VG9wID0gYXJyYXkoJHBTdGFydCwgJHBFbmQpOwogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBjZW50ZXIgcGFnZSBob3Jpem9udGFsbHkKICAgICAqCiAgICAgKiBAcmV0dXJuIGJvb2wKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldEhvcml6b250YWxDZW50ZXJlZCgpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5ob3Jpem9udGFsQ2VudGVyZWQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgY2VudGVyIHBhZ2UgaG9yaXpvbnRhbGx5CiAgICAgKgogICAgICogQHBhcmFtIGJvb2wgJHZhbHVlCiAgICAgKiBAcmV0dXJuIFBIUEV4Y2VsX1dvcmtzaGVldF9QYWdlU2V0dXAKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNldEhvcml6b250YWxDZW50ZXJlZCgkdmFsdWUgPSBmYWxzZSkKICAgIHsKICAgICAgICAkdGhpcy0+aG9yaXpvbnRhbENlbnRlcmVkID0gJHZhbHVlOwogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBjZW50ZXIgcGFnZSB2ZXJ0aWNhbGx5CiAgICAgKgogICAgICogQHJldHVybiBib29sCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRWZXJ0aWNhbENlbnRlcmVkKCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPnZlcnRpY2FsQ2VudGVyZWQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBTZXQgY2VudGVyIHBhZ2UgdmVydGljYWxseQogICAgICoKICAgICAqIEBwYXJhbSBib29sICR2YWx1ZQogICAgICogQHJldHVybiBQSFBFeGNlbF9Xb3Jrc2hlZXRfUGFnZVNldHVwCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRWZXJ0aWNhbENlbnRlcmVkKCR2YWx1ZSA9IGZhbHNlKQogICAgewogICAgICAgICR0aGlzLT52ZXJ0aWNhbENlbnRlcmVkID0gJHZhbHVlOwogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqICAgIEdldCBwcmludCBhcmVhCiAgICAgKgogICAgICogQHBhcmFtICAgIGludCAgICAgICAgJGluZGV4ICAgIElkZW50aWZpZXIgZm9yIGEgc3BlY2lmaWMgcHJpbnQgYXJlYSByYW5nZSBpZiBzZXZlcmFsIHJhbmdlcyBoYXZlIGJlZW4gc2V0CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGJlaGF2aW91ciwgb3IgYSBpbmRleCB2YWx1ZSBvZiAwLCB3aWxsIHJldHVybiBhbGwgcmFuZ2VzIGFzIGEgY29tbWEtc2VwYXJhdGVkIHN0cmluZwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgT3RoZXJ3aXNlLCB0aGUgc3BlY2lmaWMgcmFuZ2UgaWRlbnRpZmllZCBieSB0aGUgdmFsdWUgb2YgJGluZGV4IHdpbGwgYmUgcmV0dXJuZWQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByaW50IGFyZWFzIGFyZSBudW1iZXJlZCBmcm9tIDEKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfRXhjZXB0aW9uCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZwogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0UHJpbnRBcmVhKCRpbmRleCA9IDApCiAgICB7CiAgICAgICAgaWYgKCRpbmRleCA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cHJpbnRBcmVhOwogICAgICAgIH0KICAgICAgICAkcHJpbnRBcmVhcyA9IGV4cGxvZGUoJywnLCAkdGhpcy0+cHJpbnRBcmVhKTsKICAgICAgICBpZiAoaXNzZXQoJHByaW50QXJlYXNbJGluZGV4LTFdKSkgewogICAgICAgICAgICByZXR1cm4gJHByaW50QXJlYXNbJGluZGV4LTFdOwogICAgICAgIH0KICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfRXhjZXB0aW9uKCJSZXF1ZXN0ZWQgUHJpbnQgQXJlYSBkb2VzIG5vdCBleGlzdCIpOwogICAgfQoKICAgIC8qKgogICAgICogSXMgcHJpbnQgYXJlYSBzZXQ\/CiAgICAgKgogICAgICogQHBhcmFtICAgIGludCAgICAgICAgJGluZGV4ICAgIElkZW50aWZpZXIgZm9yIGEgc3BlY2lmaWMgcHJpbnQgYXJlYSByYW5nZSBpZiBzZXZlcmFsIHJhbmdlcyBoYXZlIGJlZW4gc2V0CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGJlaGF2aW91ciwgb3IgYW4gaW5kZXggdmFsdWUgb2YgMCwgd2lsbCBpZGVudGlmeSB3aGV0aGVyIGFueSBwcmludCByYW5nZSBpcyBzZXQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIE90aGVyd2lzZSwgZXhpc3RlbmNlIG9mIHRoZSByYW5nZSBpZGVudGlmaWVkIGJ5IHRoZSB2YWx1ZSBvZiAkaW5kZXggd2lsbCBiZSByZXR1cm5lZAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpbnQgYXJlYXMgYXJlIG51bWJlcmVkIGZyb20gMQogICAgICogQHJldHVybiAgICBib29sZWFuCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBpc1ByaW50QXJlYVNldCgkaW5kZXggPSAwKQogICAgewogICAgICAgIGlmICgkaW5kZXggPT0gMCkgewogICAgICAgICAgICByZXR1cm4gIWlzX251bGwoJHRoaXMtPnByaW50QXJlYSk7CiAgICAgICAgfQogICAgICAgICRwcmludEFyZWFzID0gZXhwbG9kZSgnLCcsICR0aGlzLT5wcmludEFyZWEpOwogICAgICAgIHJldHVybiBpc3NldCgkcHJpbnRBcmVhc1skaW5kZXgtMV0pOwogICAgfQoKICAgIC8qKgogICAgICogQ2xlYXIgYSBwcmludCBhcmVhCiAgICAgKgogICAgICogQHBhcmFtICAgIGludCAgICAgICAgJGluZGV4ICAgIElkZW50aWZpZXIgZm9yIGEgc3BlY2lmaWMgcHJpbnQgYXJlYSByYW5nZSBpZiBzZXZlcmFsIHJhbmdlcyBoYXZlIGJlZW4gc2V0CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGJlaGF2aW91ciwgb3IgYW4gaW5kZXggdmFsdWUgb2YgMCwgd2lsbCBjbGVhciBhbGwgcHJpbnQgcmFuZ2VzIHRoYXQgYXJlIHNldAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgT3RoZXJ3aXNlLCB0aGUgcmFuZ2UgaWRlbnRpZmllZCBieSB0aGUgdmFsdWUgb2YgJGluZGV4IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBzZXJpZXMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByaW50IGFyZWFzIGFyZSBudW1iZXJlZCBmcm9tIDEKICAgICAqIEByZXR1cm4gICAgUEhQRXhjZWxfV29ya3NoZWV0X1BhZ2VTZXR1cAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gY2xlYXJQcmludEFyZWEoJGluZGV4ID0gMCkKICAgIHsKICAgICAgICBpZiAoJGluZGV4ID09IDApIHsKICAgICAgICAgICAgJHRoaXMtPnByaW50QXJlYSA9IG51bGw7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHByaW50QXJlYXMgPSBleHBsb2RlKCcsJywgJHRoaXMtPnByaW50QXJlYSk7CiAgICAgICAgICAgIGlmIChpc3NldCgkcHJpbnRBcmVhc1skaW5kZXgtMV0pKSB7CiAgICAgICAgICAgICAgICB1bnNldCgkcHJpbnRBcmVhc1skaW5kZXgtMV0pOwogICAgICAgICAgICAgICAgJHRoaXMtPnByaW50QXJlYSA9IGltcGxvZGUoJywnLCAkcHJpbnRBcmVhcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiAkdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBwcmludCBhcmVhLiBlLmcuICdBMTpEMTAnIG9yICdBMTpEMTAsRzU6TTIwJwogICAgICoKICAgICAqIEBwYXJhbSAgICBzdHJpbmcgICAgJHZhbHVlCiAgICAgKiBAcGFyYW0gICAgaW50ICAgICAgICAkaW5kZXggICAgSWRlbnRpZmllciBmb3IgYSBzcGVjaWZpYyBwcmludCBhcmVhIHJhbmdlIGFsbG93aW5nIHNldmVyYWwgcmFuZ2VzIHRvIGJlIHNldAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hlbiB0aGUgbWV0aG9kIGlzICJPInZlcndyaXRlLCB0aGVuIGEgcG9zaXRpdmUgaW50ZWdlciBpbmRleCB3aWxsIG92ZXJ3cml0ZSB0aGF0IGluZGV4ZWQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeSBpbiB0aGUgcHJpbnQgYXJlYXMgbGlzdDsgYSBuZWdhdGl2ZSBpbmRleCB2YWx1ZSB3aWxsIGlkZW50aWZ5IHdoaWNoIGVudHJ5IHRvCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXRlIHdvcmtpbmcgYmFjd2FyZCB0aHJvdWdoIHRoZSBwcmludCBhcmVhIHRvIHRoZSBsaXN0LCB3aXRoIHRoZSBsYXN0IGVudHJ5IGFzIC0xLgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwZWNpZnlpbmcgYW4gaW5kZXggdmFsdWUgb2YgMCwgd2lsbCBvdmVyd3JpdGUgPGI+YWxsPC9iPiBleGlzdGluZyBwcmludCByYW5nZXMuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGVuIHRoZSBtZXRob2QgaXMgIkkibnNlcnQsIHRoZW4gYSBwb3NpdGl2ZSBpbmRleCB3aWxsIGluc2VydCBhZnRlciB0aGF0IGluZGV4ZWQgZW50cnkgaW4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcHJpbnQgYXJlYXMgbGlzdCwgd2hpbGUgYSBuZWdhdGl2ZSBpbmRleCB3aWxsIGluc2VydCBiZWZvcmUgdGhlIGluZGV4ZWQgZW50cnkuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3BlY2lmeWluZyBhbiBpbmRleCB2YWx1ZSBvZiAwLCB3aWxsIGFsd2F5cyBhcHBlbmQgdGhlIG5ldyBwcmludCByYW5nZSBhdCB0aGUgZW5kIG9mIHRoZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmludCBhcmVhcyBhcmUgbnVtYmVyZWQgZnJvbSAxCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICRtZXRob2QgICAgRGV0ZXJtaW5lcyB0aGUgbWV0aG9kIHVzZWQgd2hlbiBzZXR0aW5nIG11bHRpcGxlIHByaW50IGFyZWFzCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGJlaGF2aW91ciwgb3IgdGhlICJPIiBtZXRob2QsIG92ZXJ3cml0ZXMgZXhpc3RpbmcgcHJpbnQgYXJlYQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlICJJIiBtZXRob2QsIGluc2VydHMgdGhlIG5ldyBwcmludCBhcmVhIGJlZm9yZSBhbnkgc3BlY2lmaWVkIGluZGV4LCBvciBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0CiAgICAgKiBAcmV0dXJuICAgIFBIUEV4Y2VsX1dvcmtzaGVldF9QYWdlU2V0dXAKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfRXhjZXB0aW9uCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRQcmludEFyZWEoJHZhbHVlLCAkaW5kZXggPSAwLCAkbWV0aG9kID0gc2VsZjo6U0VUUFJJTlRSQU5HRV9PVkVSV1JJVEUpCiAgICB7CiAgICAgICAgaWYgKHN0cnBvcygkdmFsdWUsICchJykgIT09IGZhbHNlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oJ0NlbGwgY29vcmRpbmF0ZSBtdXN0IG5vdCBzcGVjaWZ5IGEgd29ya3NoZWV0LicpOwogICAgICAgIH0gZWxzZWlmIChzdHJwb3MoJHZhbHVlLCAnOicpID09PSBmYWxzZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfRXhjZXB0aW9uKCdDZWxsIGNvb3JkaW5hdGUgbXVzdCBiZSBhIHJhbmdlIG9mIGNlbGxzLicpOwogICAgICAgIH0gZWxzZWlmIChzdHJwb3MoJHZhbHVlLCAnJCcpICE9PSBmYWxzZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfRXhjZXB0aW9uKCdDZWxsIGNvb3JkaW5hdGUgbXVzdCBub3QgYmUgYWJzb2x1dGUuJyk7CiAgICAgICAgfQogICAgICAgICR2YWx1ZSA9IHN0cnRvdXBwZXIoJHZhbHVlKTsKCiAgICAgICAgaWYgKCRtZXRob2QgPT0gc2VsZjo6U0VUUFJJTlRSQU5HRV9PVkVSV1JJVEUpIHsKICAgICAgICAgICAgaWYgKCRpbmRleCA9PSAwKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+cHJpbnRBcmVhID0gJHZhbHVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJHByaW50QXJlYXMgPSBleHBsb2RlKCcsJywgJHRoaXMtPnByaW50QXJlYSk7CiAgICAgICAgICAgICAgICBpZiAoJGluZGV4IDwgMCkgewogICAgICAgICAgICAgICAgICAgICRpbmRleCA9IGNvdW50KCRwcmludEFyZWFzKSAtIGFicygkaW5kZXgpICsgMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgoJGluZGV4IDw9IDApIHx8ICgkaW5kZXggPiBjb3VudCgkcHJpbnRBcmVhcykpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX0V4Y2VwdGlvbignSW52YWxpZCBpbmRleCBmb3Igc2V0dGluZyBwcmludCByYW5nZS4nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRwcmludEFyZWFzWyRpbmRleC0xXSA9ICR2YWx1ZTsKICAgICAgICAgICAgICAgICR0aGlzLT5wcmludEFyZWEgPSBpbXBsb2RlKCcsJywgJHByaW50QXJlYXMpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlaWYgKCRtZXRob2QgPT0gc2VsZjo6U0VUUFJJTlRSQU5HRV9JTlNFUlQpIHsKICAgICAgICAgICAgaWYgKCRpbmRleCA9PSAwKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+cHJpbnRBcmVhIC49ICgkdGhpcy0+cHJpbnRBcmVhID09ICcnKSA\",
    "size": "29104"
}