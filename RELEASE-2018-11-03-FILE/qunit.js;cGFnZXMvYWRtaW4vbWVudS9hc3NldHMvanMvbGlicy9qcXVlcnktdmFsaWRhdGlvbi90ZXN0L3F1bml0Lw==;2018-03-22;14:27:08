{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/jquery-validation\/test\/qunit\/qunit.js",
    "lastUpdate": "2018-03-22+14:27:08.55",
    "contentFile": "\/ICJva2F5IiA6ICJmYWlsZWQiICk7CgkJbWVzc2FnZSA9ICI8c3BhbiBjbGFzcz0ndGVzdC1tZXNzYWdlJz4iICsgbWVzc2FnZSArICI8L3NwYW4+IjsKCQlvdXRwdXQgPSBtZXNzYWdlOwoKCQlpZiAoICFyZXN1bHQgKSB7CgkJCWV4cGVjdGVkID0gZXNjYXBlVGV4dCggUVVuaXQuanNEdW1wLnBhcnNlKGV4cGVjdGVkKSApOwoJCQlhY3R1YWwgPSBlc2NhcGVUZXh0KCBRVW5pdC5qc0R1bXAucGFyc2UoYWN0dWFsKSApOwoJCQlvdXRwdXQgKz0gIjx0YWJsZT48dHIgY2xhc3M9J3Rlc3QtZXhwZWN0ZWQnPjx0aD5FeHBlY3RlZDogPC90aD48dGQ+PHByZT4iICsgZXhwZWN0ZWQgKyAiPC9wcmU+PC90ZD48L3RyPiI7CgoJCQlpZiAoIGFjdHVhbCAhPT0gZXhwZWN0ZWQgKSB7CgkJCQlvdXRwdXQgKz0gIjx0ciBjbGFzcz0ndGVzdC1hY3R1YWwnPjx0aD5SZXN1bHQ6IDwvdGg+PHRkPjxwcmU+IiArIGFjdHVhbCArICI8L3ByZT48L3RkPjwvdHI+IjsKCQkJCW91dHB1dCArPSAiPHRyIGNsYXNzPSd0ZXN0LWRpZmYnPjx0aD5EaWZmOiA8L3RoPjx0ZD48cHJlPiIgKyBRVW5pdC5kaWZmKCBleHBlY3RlZCwgYWN0dWFsICkgKyAiPC9wcmU+PC90ZD48L3RyPiI7CgkJCX0KCgkJCXNvdXJjZSA9IHNvdXJjZUZyb21TdGFja3RyYWNlKCk7CgoJCQlpZiAoIHNvdXJjZSApIHsKCQkJCWRldGFpbHMuc291cmNlID0gc291cmNlOwoJCQkJb3V0cHV0ICs9ICI8dHIgY2xhc3M9J3Rlc3Qtc291cmNlJz48dGg+U291cmNlOiA8L3RoPjx0ZD48cHJlPiIgKyBlc2NhcGVUZXh0KCBzb3VyY2UgKSArICI8L3ByZT48L3RkPjwvdHI+IjsKCQkJfQoKCQkJb3V0cHV0ICs9ICI8L3RhYmxlPiI7CgkJfQoKCQlydW5Mb2dnaW5nQ2FsbGJhY2tzKCAibG9nIiwgUVVuaXQsIGRldGFpbHMgKTsKCgkJY29uZmlnLmN1cnJlbnQuYXNzZXJ0aW9ucy5wdXNoKHsKCQkJcmVzdWx0OiAhIXJlc3VsdCwKCQkJbWVzc2FnZTogb3V0cHV0CgkJfSk7Cgl9LAoKCXB1c2hGYWlsdXJlOiBmdW5jdGlvbiggbWVzc2FnZSwgc291cmNlLCBhY3R1YWwgKSB7CgkJaWYgKCAhY29uZmlnLmN1cnJlbnQgKSB7CgkJCXRocm93IG5ldyBFcnJvciggInB1c2hGYWlsdXJlKCkgYXNzZXJ0aW9uIG91dHNpZGUgdGVzdCBjb250ZXh0LCB3YXMgIiArIHNvdXJjZUZyb21TdGFja3RyYWNlKDIpICk7CgkJfQoKCQl2YXIgb3V0cHV0LAoJCQlkZXRhaWxzID0gewoJCQkJbW9kdWxlOiBjb25maWcuY3VycmVudC5tb2R1bGUsCgkJCQluYW1lOiBjb25maWcuY3VycmVudC50ZXN0TmFtZSwKCQkJCXJlc3VsdDogZmFsc2UsCgkJCQltZXNzYWdlOiBtZXNzYWdlCgkJCX07CgoJCW1lc3NhZ2UgPSBlc2NhcGVUZXh0KCBtZXNzYWdlICkgfHwgImVycm9yIjsKCQltZXNzYWdlID0gIjxzcGFuIGNsYXNzPSd0ZXN0LW1lc3NhZ2UnPiIgKyBtZXNzYWdlICsgIjwvc3Bhbj4iOwoJCW91dHB1dCA9IG1lc3NhZ2U7CgoJCW91dHB1dCArPSAiPHRhYmxlPiI7CgoJCWlmICggYWN0dWFsICkgewoJCQlvdXRwdXQgKz0gIjx0ciBjbGFzcz0ndGVzdC1hY3R1YWwnPjx0aD5SZXN1bHQ6IDwvdGg+PHRkPjxwcmU+IiArIGVzY2FwZVRleHQoIGFjdHVhbCApICsgIjwvcHJlPjwvdGQ+PC90cj4iOwoJCX0KCgkJaWYgKCBzb3VyY2UgKSB7CgkJCWRldGFpbHMuc291cmNlID0gc291cmNlOwoJCQlvdXRwdXQgKz0gIjx0ciBjbGFzcz0ndGVzdC1zb3VyY2UnPjx0aD5Tb3VyY2U6IDwvdGg+PHRkPjxwcmU+IiArIGVzY2FwZVRleHQoIHNvdXJjZSApICsgIjwvcHJlPjwvdGQ+PC90cj4iOwoJCX0KCgkJb3V0cHV0ICs9ICI8L3RhYmxlPiI7CgoJCXJ1bkxvZ2dpbmdDYWxsYmFja3MoICJsb2ciLCBRVW5pdCwgZGV0YWlscyApOwoKCQljb25maWcuY3VycmVudC5hc3NlcnRpb25zLnB1c2goewoJCQlyZXN1bHQ6IGZhbHNlLAoJCQltZXNzYWdlOiBvdXRwdXQKCQl9KTsKCX0sCgoJdXJsOiBmdW5jdGlvbiggcGFyYW1zICkgewoJCXBhcmFtcyA9IGV4dGVuZCggZXh0ZW5kKCB7fSwgUVVuaXQudXJsUGFyYW1zICksIHBhcmFtcyApOwoJCXZhciBrZXksCgkJCXF1ZXJ5c3RyaW5nID0gIj8iOwoKCQlmb3IgKCBrZXkgaW4gcGFyYW1zICkgewoJCQlpZiAoIGhhc093bi5jYWxsKCBwYXJhbXMsIGtleSApICkgewoJCQkJcXVlcnlzdHJpbmcgKz0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArICI9IiArCgkJCQkJZW5jb2RlVVJJQ29tcG9uZW50KCBwYXJhbXNbIGtleSBdICkgKyAiJiI7CgkJCX0KCQl9CgkJcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICIvLyIgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArCgkJCXdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHF1ZXJ5c3RyaW5nLnNsaWNlKCAwLCAtMSApOwoJfSwKCglleHRlbmQ6IGV4dGVuZCwKCWlkOiBpZCwKCWFkZEV2ZW50OiBhZGRFdmVudCwKCWFkZENsYXNzOiBhZGRDbGFzcywKCWhhc0NsYXNzOiBoYXNDbGFzcywKCXJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcwoJLy8gbG9hZCwgZXF1aXYsIGpzRHVtcCwgZGlmZjogQXR0YWNoZWQgbGF0ZXIKfSk7CgovKioKICogQGRlcHJlY2F0ZWQ6IENyZWF0ZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggdGVzdCBydW5uZXIgdGhhdCBzZXQgdGhlIGhvb2sgZnVuY3Rpb24KICogaW50byBRVW5pdC57aG9va30sIGluc3RlYWQgb2YgaW52b2tpbmcgaXQgYW5kIHBhc3NpbmcgdGhlIGhvb2sgZnVuY3Rpb24uCiAqIFFVbml0LmNvbnN0cnVjdG9yIGlzIHNldCB0byB0aGUgZW1wdHkgRigpIGFib3ZlIHNvIHRoYXQgd2UgY2FuIGFkZCB0byBpdCdzIHByb3RvdHlwZSBoZXJlLgogKiBEb2luZyB0aGlzIGFsbG93cyB1cyB0byB0ZWxsIGlmIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBoYXZlIGJlZW4gb3ZlcndyaXR0ZW4gb24gdGhlIGFjdHVhbAogKiBRVW5pdCBvYmplY3QuCiAqLwpleHRlbmQoIFFVbml0LmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgewoKCS8vIExvZ2dpbmcgY2FsbGJhY2tzOyBhbGwgcmVjZWl2ZSBhIHNpbmdsZSBhcmd1bWVudCB3aXRoIHRoZSBsaXN0ZWQgcHJvcGVydGllcwoJLy8gcnVuIHRlc3QvbG9ncy5odG1sIGZvciBhbnkgcmVsYXRlZCBjaGFuZ2VzCgliZWdpbjogcmVnaXN0ZXJMb2dnaW5nQ2FsbGJhY2soICJiZWdpbiIgKSwKCgkvLyBkb25lOiB7IGZhaWxlZCwgcGFzc2VkLCB0b3RhbCwgcnVudGltZSB9Cglkb25lOiByZWdpc3RlckxvZ2dpbmdDYWxsYmFjayggImRvbmUiICksCgoJLy8gbG9nOiB7IHJlc3VsdCwgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSB9Cglsb2c6IHJlZ2lzdGVyTG9nZ2luZ0NhbGxiYWNrKCAibG9nIiApLAoKCS8vIHRlc3RTdGFydDogeyBuYW1lIH0KCXRlc3RTdGFydDogcmVnaXN0ZXJMb2dnaW5nQ2FsbGJhY2soICJ0ZXN0U3RhcnQiICksCgoJLy8gdGVzdERvbmU6IHsgbmFtZSwgZmFpbGVkLCBwYXNzZWQsIHRvdGFsLCBydW50aW1lIH0KCXRlc3REb25lOiByZWdpc3RlckxvZ2dpbmdDYWxsYmFjayggInRlc3REb25lIiApLAoKCS8vIG1vZHVsZVN0YXJ0OiB7IG5hbWUgfQoJbW9kdWxlU3RhcnQ6IHJlZ2lzdGVyTG9nZ2luZ0NhbGxiYWNrKCAibW9kdWxlU3RhcnQiICksCgoJLy8gbW9kdWxlRG9uZTogeyBuYW1lLCBmYWlsZWQsIHBhc3NlZCwgdG90YWwgfQoJbW9kdWxlRG9uZTogcmVnaXN0ZXJMb2dnaW5nQ2FsbGJhY2soICJtb2R1bGVEb25lIiApCn0pOwoKaWYgKCAhZGVmaW5lZC5kb2N1bWVudCB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAiY29tcGxldGUiICkgewoJY29uZmlnLmF1dG9ydW4gPSB0cnVlOwp9CgpRVW5pdC5sb2FkID0gZnVuY3Rpb24oKSB7CglydW5Mb2dnaW5nQ2FsbGJhY2tzKCAiYmVnaW4iLCBRVW5pdCwge30gKTsKCgkvLyBJbml0aWFsaXplIHRoZSBjb25maWcsIHNhdmluZyB0aGUgZXhlY3V0aW9uIHF1ZXVlCgl2YXIgYmFubmVyLCBmaWx0ZXIsIGksIGosIGxhYmVsLCBsZW4sIG1haW4sIG9sLCB0b29sYmFyLCB2YWwsIHNlbGVjdGlvbiwKCQl1cmxDb25maWdDb250YWluZXIsIG1vZHVsZUZpbHRlciwgdXNlckFnZW50LAoJCW51bU1vZHVsZXMgPSAwLAoJCW1vZHVsZU5hbWVzID0gW10sCgkJbW9kdWxlRmlsdGVySHRtbCA9ICIiLAoJCXVybENvbmZpZ0h0bWwgPSAiIiwKCQlvbGRjb25maWcgPSBleHRlbmQoIHt9LCBjb25maWcgKTsKCglRVW5pdC5pbml0KCk7CglleHRlbmQoY29uZmlnLCBvbGRjb25maWcpOwoKCWNvbmZpZy5ibG9ja2luZyA9IGZhbHNlOwoKCWxlbiA9IGNvbmZpZy51cmxDb25maWcubGVuZ3RoOwoKCWZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7CgkJdmFsID0gY29uZmlnLnVybENvbmZpZ1tpXTsKCQlpZiAoIHR5cGVvZiB2YWwgPT09ICJzdHJpbmciICkgewoJCQl2YWwgPSB7CgkJCQlpZDogdmFsLAoJCQkJbGFiZWw6IHZhbAoJCQl9OwoJCX0KCQljb25maWdbIHZhbC5pZCBdID0gUVVuaXQudXJsUGFyYW1zWyB2YWwuaWQgXTsKCQlpZiAoICF2YWwudmFsdWUgfHwgdHlwZW9mIHZhbC52YWx1ZSA9PT0gInN0cmluZyIgKSB7CgkJCXVybENvbmZpZ0h0bWwgKz0gIjxpbnB1dCBpZD0ncXVuaXQtdXJsY29uZmlnLSIgKyBlc2NhcGVUZXh0KCB2YWwuaWQgKSArCgkJCQkiJyBuYW1lPSciICsgZXNjYXBlVGV4dCggdmFsLmlkICkgKwoJCQkJIicgdHlwZT0nY2hlY2tib3gnIiArCgkJCQkoIHZhbC52YWx1ZSA\/ICIgdmFsdWU9JyIgKyBlc2NhcGVUZXh0KCB2YWwudmFsdWUgKSArICInIiA6ICIiICkgKwoJCQkJKCBjb25maWdbIHZhbC5pZCBdID8gIiBjaGVja2VkPSdjaGVja2VkJyIgOiAiIiApICsKCQkJCSIgdGl0bGU9JyIgKyBlc2NhcGVUZXh0KCB2YWwudG9vbHRpcCApICsKCQkJCSInPjxsYWJlbCBmb3I9J3F1bml0LXVybGNvbmZpZy0iICsgZXNjYXBlVGV4dCggdmFsLmlkICkgKwoJCQkJIicgdGl0bGU9JyIgKyBlc2NhcGVUZXh0KCB2YWwudG9vbHRpcCApICsgIic+IiArIHZhbC5sYWJlbCArICI8L2xhYmVsPiI7CgkJfSBlbHNlIHsKCQkJdXJsQ29uZmlnSHRtbCArPSAiPGxhYmVsIGZvcj0ncXVuaXQtdXJsY29uZmlnLSIgKyBlc2NhcGVUZXh0KCB2YWwuaWQgKSArCgkJCQkiJyB0aXRsZT0nIiArIGVzY2FwZVRleHQoIHZhbC50b29sdGlwICkgKwoJCQkJIic+IiArIHZhbC5sYWJlbCArCgkJCQkiOiA8L2xhYmVsPjxzZWxlY3QgaWQ9J3F1bml0LXVybGNvbmZpZy0iICsgZXNjYXBlVGV4dCggdmFsLmlkICkgKwoJCQkJIicgbmFtZT0nIiArIGVzY2FwZVRleHQoIHZhbC5pZCApICsKCQkJCSInIHRpdGxlPSciICsgZXNjYXBlVGV4dCggdmFsLnRvb2x0aXAgKSArCgkJCQkiJz48b3B0aW9uPjwvb3B0aW9uPiI7CgkJCXNlbGVjdGlvbiA9IGZhbHNlOwoJCQlpZiAoIFFVbml0LmlzKCAiYXJyYXkiLCB2YWwudmFsdWUgKSApIHsKCQkJCWZvciAoIGogPSAwOyBqIDwgdmFsLnZhbHVlLmxlbmd0aDsgaisrICkgewoJCQkJCXVybENvbmZpZ0h0bWwgKz0gIjxvcHRpb24gdmFsdWU9JyIgKyBlc2NhcGVUZXh0KCB2YWwudmFsdWVbal0gKSArICInIiArCgkJCQkJCSggY29uZmlnWyB2YWwuaWQgXSA9PT0gdmFsLnZhbHVlW2pdID8KCQkJCQkJCShzZWxlY3Rpb24gPSB0cnVlKSAmJiAiIHNlbGVjdGVkPSdzZWxlY3RlZCciIDoKCQkJCQkJCSIiICkgKwoJCQkJCQkiPiIgKyBlc2NhcGVUZXh0KCB2YWwudmFsdWVbal0gKSArICI8L29wdGlvbj4iOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJZm9yICggaiBpbiB2YWwudmFsdWUgKSB7CgkJCQkJaWYgKCBoYXNPd24uY2FsbCggdmFsLnZhbHVlLCBqICkgKSB7CgkJCQkJCXVybENvbmZpZ0h0bWwgKz0gIjxvcHRpb24gdmFsdWU9JyIgKyBlc2NhcGVUZXh0KCBqICkgKyAiJyIgKwoJCQkJCQkJKCBjb25maWdbIHZhbC5pZCBdID09PSBqID8KCQkJCQkJCQkoc2VsZWN0aW9uID0gdHJ1ZSkgJiYgIiBzZWxlY3RlZD0nc2VsZWN0ZWQnIiA6CgkJCQkJCQkJIiIgKSArCgkJCQkJCQkiPiIgKyBlc2NhcGVUZXh0KCB2YWwudmFsdWVbal0gKSArICI8L29wdGlvbj4iOwoJCQkJCX0KCQkJCX0KCQkJfQoJCQlpZiAoIGNvbmZpZ1sgdmFsLmlkIF0gJiYgIXNlbGVjdGlvbiApIHsKCQkJCXVybENvbmZpZ0h0bWwgKz0gIjxvcHRpb24gdmFsdWU9JyIgKyBlc2NhcGVUZXh0KCBjb25maWdbIHZhbC5pZCBdICkgKwoJCQkJCSInIHNlbGVjdGVkPSdzZWxlY3RlZCcgZGlzYWJsZWQ9J2Rpc2FibGVkJz4iICsKCQkJCQllc2NhcGVUZXh0KCBjb25maWdbIHZhbC5pZCBdICkgKwoJCQkJCSI8L29wdGlvbj4iOwoJCQl9CgkJCXVybENvbmZpZ0h0bWwgKz0gIjwvc2VsZWN0PiI7CgkJfQoJfQoJZm9yICggaSBpbiBjb25maWcubW9kdWxlcyApIHsKCQlpZiAoIGNvbmZpZy5tb2R1bGVzLmhhc093blByb3BlcnR5KCBpICkgKSB7CgkJCW1vZHVsZU5hbWVzLnB1c2goaSk7CgkJfQoJfQoJbnVtTW9kdWxlcyA9IG1vZHVsZU5hbWVzLmxlbmd0aDsKCW1vZHVsZU5hbWVzLnNvcnQoIGZ1bmN0aW9uKCBhLCBiICkgewoJCXJldHVybiBhLmxvY2FsZUNvbXBhcmUoIGIgKTsKCX0pOwoJbW9kdWxlRmlsdGVySHRtbCArPSAiPGxhYmVsIGZvcj0ncXVuaXQtbW9kdWxlZmlsdGVyJz5Nb2R1bGU6IDwvbGFiZWw+PHNlbGVjdCBpZD0ncXVuaXQtbW9kdWxlZmlsdGVyJyBuYW1lPSdtb2R1bGVmaWx0ZXInPjxvcHRpb24gdmFsdWU9JycgIiArCgkJKCBjb25maWcubW9kdWxlID09PSB1bmRlZmluZWQgID8gInNlbGVjdGVkPSdzZWxlY3RlZCciIDogIiIgKSArCgkJIj48IEFsbCBNb2R1bGVzID48L29wdGlvbj4iOwoKCglmb3IgKCBpID0gMDsgaSA8IG51bU1vZHVsZXM7IGkrKykgewoJCQltb2R1bGVGaWx0ZXJIdG1sICs9ICI8b3B0aW9uIHZhbHVlPSciICsgZXNjYXBlVGV4dCggZW5jb2RlVVJJQ29tcG9uZW50KG1vZHVsZU5hbWVzW2ldKSApICsgIicgIiArCgkJCQkoIGNvbmZpZy5tb2R1bGUgPT09IG1vZHVsZU5hbWVzW2ldID8gInNlbGVjdGVkPSdzZWxlY3RlZCciIDogIiIgKSArCgkJCQkiPiIgKyBlc2NhcGVUZXh0KG1vZHVsZU5hbWVzW2ldKSArICI8L29wdGlvbj4iOwoJfQoJbW9kdWxlRmlsdGVySHRtbCArPSAiPC9zZWxlY3Q+IjsKCgkvLyBgdXNlckFnZW50YCBpbml0aWFsaXplZCBhdCB0b3Agb2Ygc2NvcGUKCXVzZXJBZ2VudCA9IGlkKCAicXVuaXQtdXNlckFnZW50IiApOwoJaWYgKCB1c2VyQWdlbnQgKSB7CgkJdXNlckFnZW50LmlubmVySFRNTCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7Cgl9CgoJLy8gYGJhbm5lcmAgaW5pdGlhbGl6ZWQgYXQgdG9wIG9mIHNjb3BlCgliYW5uZXIgPSBpZCggInF1bml0LWhlYWRlciIgKTsKCWlmICggYmFubmVyICkgewoJCWJhbm5lci5pbm5lckhUTUwgPSAiPGEgaHJlZj0nIiArIFFVbml0LnVybCh7IGZpbHRlcjogdW5kZWZpbmVkLCBtb2R1bGU6IHVuZGVmaW5lZCwgdGVzdE51bWJlcjogdW5kZWZpbmVkIH0pICsgIic+IiArIGJhbm5lci5pbm5lckhUTUwgKyAiPC9hPiAiOwoJfQoKCS8vIGB0b29sYmFyYCBpbml0aWFsaXplZCBhdCB0b3Agb2Ygc2NvcGUKCXRvb2xiYXIgPSBpZCggInF1bml0LXRlc3RydW5uZXItdG9vbGJhciIgKTsKCWlmICggdG9vbGJhciApIHsKCQkvLyBgZmlsdGVyYCBpbml0aWFsaXplZCBhdCB0b3Agb2Ygc2NvcGUKCQlmaWx0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiaW5wdXQiICk7CgkJZmlsdGVyLnR5cGUgPSAiY2hlY2tib3giOwoJCWZpbHRlci5pZCA9ICJxdW5pdC1maWx0ZXItcGFzcyI7CgoJCWFkZEV2ZW50KCBmaWx0ZXIsICJjbGljayIsIGZ1bmN0aW9uKCkgewoJCQl2YXIgdG1wLAoJCQkJb2wgPSBpZCggInF1bml0LXRlc3RzIiApOwoKCQkJaWYgKCBmaWx0ZXIuY2hlY2tlZCApIHsKCQkJCW9sLmNsYXNzTmFtZSA9IG9sLmNsYXNzTmFtZSArICIgaGlkZXBhc3MiOwoJCQl9IGVsc2UgewoJCQkJdG1wID0gIiAiICsgb2wuY2xhc3NOYW1lLnJlcGxhY2UoIC9bXG5cdFxyXS9nLCAiICIgKSArICIgIjsKCQkJCW9sLmNsYXNzTmFtZSA9IHRtcC5yZXBsYWNlKCAvIGhpZGVwYXNzIC8sICIgIiApOwoJCQl9CgkJCWlmICggZGVmaW5lZC5zZXNzaW9uU3RvcmFnZSApIHsKCQkJCWlmIChmaWx0ZXIuY2hlY2tlZCkgewoJCQkJCXNlc3Npb25TdG9yYWdlLnNldEl0ZW0oICJxdW5pdC1maWx0ZXItcGFzc2VkLXRlc3RzIiwgInRydWUiICk7CgkJCQl9IGVsc2UgewoJCQkJCXNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oICJxdW5pdC1maWx0ZXItcGFzc2VkLXRlc3RzIiApOwoJCQkJfQoJCQl9CgkJfSk7CgoJCWlmICggY29uZmlnLmhpZGVwYXNzZWQgfHwgZGVmaW5lZC5zZXNzaW9uU3RvcmFnZSAmJiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCAicXVuaXQtZmlsdGVyLXBhc3NlZC10ZXN0cyIgKSApIHsKCQkJZmlsdGVyLmNoZWNrZWQgPSB0cnVlOwoJCQkvLyBgb2xgIGluaXRpYWxpemVkIGF0IHRvcCBvZiBzY29wZQoJCQlvbCA9IGlkKCAicXVuaXQtdGVzdHMiICk7CgkJCW9sLmNsYXNzTmFtZSA9IG9sLmNsYXNzTmFtZSArICIgaGlkZXBhc3MiOwoJCX0KCQl0b29sYmFyLmFwcGVuZENoaWxkKCBmaWx0ZXIgKTsKCgkJLy8gYGxhYmVsYCBpbml0aWFsaXplZCBhdCB0b3Agb2Ygc2NvcGUKCQlsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJsYWJlbCIgKTsKCQlsYWJlbC5zZXRBdHRyaWJ1dGUoICJmb3IiLCAicXVuaXQtZmlsdGVyLXBhc3MiICk7CgkJbGFiZWwuc2V0QXR0cmlidXRlKCAidGl0bGUiLCAiT25seSBzaG93IHRlc3RzIGFuZCBhc3NlcnRpb25zIHRoYXQgZmFpbC4gU3RvcmVkIGluIHNlc3Npb25TdG9yYWdlLiIgKTsKCQlsYWJlbC5pbm5lckhUTUwgPSAiSGlkZSBwYXNzZWQgdGVzdHMiOwoJCXRvb2xiYXIuYXBwZW5kQ2hpbGQoIGxhYmVsICk7CgoJCXVybENvbmZpZ0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKCQl1cmxDb25maWdDb250YWluZXIuaW5uZXJIVE1MID0gdXJsQ29uZmlnSHRtbDsKCQkvLyBGb3Igb2xkSUUgc3VwcG9ydDoKCQkvLyAqIEFkZCBoYW5kbGVycyB0byB0aGUgaW5kaXZpZHVhbCBlbGVtZW50cyBpbnN0ZWFkIG9mIHRoZSBjb250YWluZXIKCQkvLyAqIFVzZSAiY2xpY2siIGluc3RlYWQgb2YgImNoYW5nZSIgZm9yIGNoZWNrYm94ZXMKCQkvLyAqIEZhbGxiYWNrIGZyb20gZXZlbnQudGFyZ2V0IHRvIGV2ZW50LnNyY0VsZW1lbnQKCQlhZGRFdmVudHMoIHVybENvbmZpZ0NvbnRhaW5lci5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaW5wdXQiKSwgImNsaWNrIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQl2YXIgcGFyYW1zID0ge30sCgkJCQl0YXJnZXQgPSBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudDsKCQkJcGFyYW1zWyB0YXJnZXQubmFtZSBdID0gdGFyZ2V0LmNoZWNrZWQgPwoJCQkJdGFyZ2V0LmRlZmF1bHRWYWx1ZSB8fCB0cnVlIDoKCQkJCXVuZGVmaW5lZDsKCQkJd2luZG93LmxvY2F0aW9uID0gUVVuaXQudXJsKCBwYXJhbXMgKTsKCQl9KTsKCQlhZGRFdmVudHMoIHVybENvbmZpZ0NvbnRhaW5lci5nZXRFbGVtZW50c0J5VGFnTmFtZSgic2VsZWN0IiksICJjaGFuZ2UiLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXZhciBwYXJhbXMgPSB7fSwKCQkJCXRhcmdldCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50OwoJCQlwYXJhbXNbIHRhcmdldC5uYW1lIF0gPSB0YXJnZXQub3B0aW9uc1sgdGFyZ2V0LnNlbGVjdGVkSW5kZXggXS52YWx1ZSB8fCB1bmRlZmluZWQ7CgkJCXdpbmRvdy5sb2NhdGlvbiA9IFFVbml0LnVybCggcGFyYW1zICk7CgkJfSk7CgkJdG9vbGJhci5hcHBlbmRDaGlsZCggdXJsQ29uZmlnQ29udGFpbmVyICk7CgoJCWlmIChudW1Nb2R1bGVzID4gMSkgewoJCQltb2R1bGVGaWx0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAic3BhbiIgKTsKCQkJbW9kdWxlRmlsdGVyLnNldEF0dHJpYnV0ZSggImlkIiwgInF1bml0LW1vZHVsZWZpbHRlci1jb250YWluZXIiICk7CgkJCW1vZHVsZUZpbHRlci5pbm5lckhUTUwgPSBtb2R1bGVGaWx0ZXJIdG1sOwoJCQlhZGRFdmVudCggbW9kdWxlRmlsdGVyLmxhc3RDaGlsZCwgImNoYW5nZSIsIGZ1bmN0aW9uKCkgewoJCQkJdmFyIHNlbGVjdEJveCA9IG1vZHVsZUZpbHRlci5nZXRFbGVtZW50c0J5VGFnTmFtZSgic2VsZWN0IilbMF0sCgkJCQkJc2VsZWN0ZWRNb2R1bGUgPSBkZWNvZGVVUklDb21wb25lbnQoc2VsZWN0Qm94Lm9wdGlvbnNbc2VsZWN0Qm94LnNlbGVjdGVkSW5kZXhdLnZhbHVlKTsKCgkJCQl3aW5kb3cubG9jYXRpb24gPSBRVW5pdC51cmwoewoJCQkJCW1vZHVsZTogKCBzZWxlY3RlZE1vZHVsZSA9PT0gIiIgKSA\/IHVuZGVmaW5lZCA6IHNlbGVjdGVkTW9kdWxlLAoJCQkJCS8vIFJlbW92ZSBhbnkgZXhpc3RpbmcgZmlsdGVycwoJCQkJCWZpbHRlcjogdW5kZWZpbmVkLAoJCQkJCXRlc3ROdW1iZXI6IHVuZGVmaW5lZAoJCQkJfSk7CgkJCX0pOwoJCQl0b29sYmFyLmFwcGVuZENoaWxkKG1vZHVsZUZpbHRlcik7CgkJfQoJfQoKCS8vIGBtYWluYCBpbml0aWFsaXplZCBhdCB0b3Agb2Ygc2NvcGUKCW1haW4gPSBpZCggInF1bml0LWZpeHR1cmUiICk7CglpZiAoIG1haW4gKSB7CgkJY29uZmlnLmZpeHR1cmUgPSBtYWluLmlubmVySFRNTDsKCX0KCglpZiAoIGNvbmZpZy5hdXRvc3RhcnQgKSB7CgkJUVVuaXQuc3RhcnQoKTsKCX0KfTsKCmlmICggZGVmaW5lZC5kb2N1bWVudCApIHsKCWFkZEV2ZW50KCB3aW5kb3csICJsb2FkIiwgUVVuaXQubG9hZCApOwp9CgovLyBgb25FcnJvckZuUHJldmAgaW5pdGlhbGl6ZWQgYXQgdG9wIG9mIHNjb3BlCi8vIFByZXNlcnZlIG90aGVyIGhhbmRsZXJzCm9uRXJyb3JGblByZXYgPSB3aW5kb3cub25lcnJvcjsKCi8vIENvdmVyIHVuY2F1Z2h0IGV4Y2VwdGlvbnMKLy8gUmV0dXJuaW5nIHRydWUgd2lsbCBzdXBwcmVzcyB0aGUgZGVmYXVsdCBicm93c2VyIGhhbmRsZXIsCi8vIHJldHVybmluZyBmYWxzZSB3aWxsIGxldCBpdCBydW4uCndpbmRvdy5vbmVycm9yID0gZnVuY3Rpb24gKCBlcnJvciwgZmlsZVBhdGgsIGxpbmVyTnIgKSB7Cgl2YXIgcmV0ID0gZmFsc2U7CglpZiAoIG9uRXJyb3JGblByZXYgKSB7CgkJcmV0ID0gb25FcnJvckZuUHJldiggZXJyb3IsIGZpbGVQYXRoLCBsaW5lck5yICk7Cgl9CgoJLy8gVHJlYXQgcmV0dXJuIHZhbHVlIGFzIHdpbmRvdy5vbmVycm9yIGl0c2VsZiBkb2VzLAoJLy8gT25seSBkbyBvdXIgaGFuZGxpbmcgaWYgbm90IHN1cHByZXNzZWQuCglpZiAoIHJldCAhPT0gdHJ1ZSApIHsKCQlpZiAoIFFVbml0LmNvbmZpZy5jdXJyZW50ICkgewoJCQlpZiAoIFFVbml0LmNvbmZpZy5jdXJyZW50Lmlnbm9yZUdsb2JhbEVycm9ycyApIHsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJCVFVbml0LnB1c2hGYWlsdXJlKCBlcnJvciwgZmlsZVBhdGggKyAiOiIgKyBsaW5lck5yICk7CgkJfSBlbHNlIHsKCQkJUVVuaXQudGVzdCggImdsb2JhbCBmYWlsdXJlIiwgZXh0ZW5kKCBmdW5jdGlvbigpIHsKCQkJCVFVbml0LnB1c2hGYWlsdXJlKCBlcnJvciwgZmlsZVBhdGggKyAiOiIgKyBsaW5lck5yICk7CgkJCX0sIHsgdmFsaWRUZXN0OiB2YWxpZFRlc3QgfSApICk7CgkJfQoJCXJldHVybiBmYWxzZTsKCX0KCglyZXR1cm4gcmV0Owp9OwoKZnVuY3Rpb24gZG9uZSgpIHsKCWNvbmZpZy5hdXRvcnVuID0gdHJ1ZTsKCgkvLyBMb2cgdGhlIGxhc3QgbW9kdWxlIHJlc3VsdHMKCWlmICggY29uZmlnLnByZXZpb3VzTW9kdWxlICkgewoJCXJ1bkxvZ2dpbmdDYWxsYmFja3MoICJtb2R1bGVEb25lIiwgUVVuaXQsIHsKCQkJbmFtZTogY29uZmlnLnByZXZpb3VzTW9kdWxlLAoJCQlmYWlsZWQ6IGNvbmZpZy5tb2R1bGVTdGF0cy5iYWQsCgkJCXBhc3NlZDogY29uZmlnLm1vZHVsZVN0YXRzLmFsbCAtIGNvbmZpZy5tb2R1bGVTdGF0cy5iYWQsCgkJCXRvdGFsOiBjb25maWcubW9kdWxlU3RhdHMuYWxsCgkJfSk7Cgl9CglkZWxldGUgY29uZmlnLnByZXZpb3VzTW9kdWxlOwoKCXZhciBpLCBrZXksCgkJYmFubmVyID0gaWQoICJxdW5pdC1iYW5uZXIiICksCgkJdGVzdHMgPSBpZCggInF1bml0LXRlc3RzIiApLAoJCXJ1bnRpbWUgPSArbmV3IERhdGUoKSAtIGNvbmZpZy5zdGFydGVkLAoJCXBhc3NlZCA9IGNvbmZpZy5zdGF0cy5hbGwgLSBjb25maWcuc3RhdHMuYmFkLAoJCWh0bWwgPSBbCgkJCSJUZXN0cyBjb21wbGV0ZWQgaW4gIiwKCQkJcnVudGltZSwKCQkJIiBtaWxsaXNlY29uZHMuPGJyLz4iLAoJCQkiPHNwYW4gY2xhc3M9J3Bhc3NlZCc+IiwKCQkJcGFzc2VkLAoJCQkiPC9zcGFuPiBhc3NlcnRpb25zIG9mIDxzcGFuIGNsYXNzPSd0b3RhbCc+IiwKCQkJY29uZmlnLnN0YXRzLmFsbCwKCQkJIjwvc3Bhbj4gcGFzc2VkLCA8c3BhbiBjbGFzcz0nZmFpbGVkJz4iLAoJCQljb25maWcuc3RhdHMuYmFkLAoJCQkiPC9zcGFuPiBmYWlsZWQuIgoJCV0uam9pbiggIiIgKTsKCglpZiAoIGJhbm5lciApIHsKCQliYW5uZXIuY2xhc3NOYW1lID0gKCBjb25maWcuc3RhdHMuYmFkID8gInF1bml0LWZhaWwiIDogInF1bml0LXBhc3MiICk7Cgl9CgoJaWYgKCB0ZXN0cyApIHsKCQlpZCggInF1bml0LXRlc3RyZXN1bHQiICkuaW5uZXJIVE1MID0gaHRtbDsKCX0KCglpZiAoIGNvbmZpZy5hbHRlcnRpdGxlICYmIGRlZmluZWQuZG9jdW1lbnQgJiYgZG9jdW1lbnQudGl0bGUgKSB7CgkJLy8gc2hvdyDinJYgZm9yIGdvb2QsIOKclCBmb3IgYmFkIHN1aXRlIHJlc3VsdCBpbiB0aXRsZQoJCS8vIHVzZSBlc2NhcGUgc2VxdWVuY2VzIGluIGNhc2UgZmlsZSBnZXRzIGxvYWRlZCB3aXRoIG5vbi11dGYtOC1jaGFyc2V0CgkJZG9jdW1lbnQudGl0bGUgPSBbCgkJCSggY29uZmlnLnN0YXRzLmJhZCA\\\/IGUudGFyZ2V0IDogd2luZG93LmV2ZW50LnNyY0VsZW1lbnQ7CgkJCQlpZiAoIHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAic3BhbiIgfHwgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJiIiApIHsKCQkJCQl0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTsKCQkJCX0KCQkJCWlmICggd2luZG93LmxvY2F0aW9uICYmIHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAic3Ryb25nIiApIHsKCQkJCQl3aW5kb3cubG9jYXRpb24gPSBRVW5pdC51cmwoeyB0ZXN0TnVtYmVyOiB0ZXN0LnRlc3ROdW1iZXIgfSk7CgkJCQl9CgkJCX0pOwoKCQkJLy8gYHRpbWVgIGluaXRpYWxpemVkIGF0IHRvcCBvZiBzY29wZQoJCQl0aW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggInNwYW4iICk7CgkJCXRpbWUuY2xhc3NOYW1lID0gInJ1bnRpbWUiOwoJCQl0aW1lLmlubmVySFRNTCA9IHRoaXMucnVudGltZSArICIgbXMiOwoKCQkJLy8gYGxpYCBpbml0aWFsaXplZCBhdCB0b3Agb2Ygc2NvcGUKCQkJbGkgPSBpZCggdGhpcy5pZCApOwoJCQlsaS5jbGFzc05hbWUgPSBiYWQgPyAiZmFpbCIgOiAicGFzcyI7CgkJCWxpLnJlbW92ZUNoaWxkKCBsaS5maXJzdENoaWxkICk7CgkJCWEgPSBsaS5maXJzdENoaWxkOwoJCQlsaS5hcHBlbmRDaGlsZCggYiApOwoJCQlsaS5hcHBlbmRDaGlsZCggYSApOwoJCQlsaS5hcHBlbmRDaGlsZCggdGltZSApOwoJCQlsaS5hcHBlbmRDaGlsZCggb2wgKTsKCgkJfSBlbHNlIHsKCQkJZm9yICggaSA9IDA7IGkgPCB0aGlzLmFzc2VydGlvbnMubGVuZ3RoOyBpKysgKSB7CgkJCQlpZiAoICF0aGlzLmFzc2VydGlvbnNbaV0ucmVzdWx0ICkgewoJCQkJCWJhZCsrOwoJCQkJCWNvbmZpZy5zdGF0cy5iYWQrKzsKCQkJCQljb25maWcubW9kdWxlU3RhdHMuYmFkKys7CgkJCQl9CgkJCX0KCQl9CgoJCXJ1bkxvZ2dpbmdDYWxsYmFja3MoICJ0ZXN0RG9uZSIsIFFVbml0LCB7CgkJCW5hbWU6IHRoaXMudGVzdE5hbWUsCgkJCW1vZHVsZTogdGhpcy5tb2R1bGUsCgkJCWZhaWxlZDogYmFkLAoJCQlwYXNzZWQ6IHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGggLSBiYWQsCgkJCXRvdGFsOiB0aGlzLmFzc2VydGlvbnMubGVuZ3RoLAoJCQlydW50aW1lOiB0aGlzLnJ1bnRpbWUsCgkJCS8vIERFUFJFQ0FURUQ6IHRoaXMgcHJvcGVydHkgd2lsbCBiZSByZW1vdmVkIGluIDIuMC4wLCB1c2UgcnVudGltZSBpbnN0ZWFkCgkJCWR1cmF0aW9uOiB0aGlzLnJ1bnRpbWUKCQl9KTsKCgkJUVVuaXQucmVzZXQoKTsKCgkJY29uZmlnLmN1cnJlbnQgPSB1bmRlZmluZWQ7Cgl9LAoKCXF1ZXVlOiBmdW5jdGlvbigpIHsKCQl2YXIgYmFkLAoJCQl0ZXN0ID0gdGhpczsKCgkJc3luY2hyb25pemUoZnVuY3Rpb24oKSB7CgkJCXRlc3QuaW5pdCgpOwoJCX0pOwoJCWZ1bmN0aW9uIHJ1bigpIHsKCQkJLy8gZWFjaCBvZiB0aGVzZSBjYW4gYnkgYXN5bmMKCQkJc3luY2hyb25pemUoZnVuY3Rpb24oKSB7CgkJCQl0ZXN0LnNldHVwKCk7CgkJCX0pOwoJCQlzeW5jaHJvbml6ZShmdW5jdGlvbigpIHsKCQkJCXRlc3QucnVuKCk7CgkJCX0pOwoJCQlzeW5jaHJvbml6ZShmdW5jdGlvbigpIHsKCQkJCXRlc3QudGVhcmRvd24oKTsKCQkJfSk7CgkJCXN5bmNocm9uaXplKGZ1bmN0aW9uKCkgewoJCQkJdGVzdC5maW5pc2goKTsKCQkJfSk7CgkJfQoKCQkvLyBgYmFkYCBpbml0aWFsaXplZCBhdCB0b3Agb2Ygc2NvcGUKCQkvLyBkZWZlciB3aGVuIHByZXZpb3VzIHRlc3QgcnVuIHBhc3NlZCwgaWYgc3RvcmFnZSBpcyBhdmFpbGFibGUKCQliYWQgPSBRVW5pdC5jb25maWcucmVvcmRlciAmJiBkZWZpbmVkLnNlc3Npb25TdG9yYWdlICYmCgkJCQkJCStzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCAicXVuaXQtdGVzdC0iICsgdGhpcy5tb2R1bGUgKyAiLSIgKyB0aGlzLnRlc3ROYW1lICk7CgoJCWlmICggYmFkICkgewoJCQlydW4oKTsKCQl9IGVsc2UgewoJCQlzeW5jaHJvbml6ZSggcnVuLCB0cnVlICk7CgkJfQoJfQp9OwoKLy8gYGFzc2VydGAgaW5pdGlhbGl6ZWQgYXQgdG9wIG9mIHNjb3BlCi8vIEFzc2VydCBoZWxwZXJzCi8vIEFsbCBvZiB0aGVzZSBtdXN0IGVpdGhlciBjYWxsIFFVbml0LnB1c2goKSBvciBtYW51YWxseSBkbzoKLy8gLSBydW5Mb2dnaW5nQ2FsbGJhY2tzKCAibG9nIiwgLi4gKTsKLy8gLSBjb25maWcuY3VycmVudC5hc3NlcnRpb25zLnB1c2goeyAuLiB9KTsKYXNzZXJ0ID0gUVVuaXQuYXNzZXJ0ID0gewoJLyoqCgkgKiBBc3NlcnRzIHJvdWdoIHRydWUtaXNoIHJlc3VsdC4KCSAqIEBuYW1lIG9rCgkgKiBAZnVuY3Rpb24KCSAqIEBleGFtcGxlIG9rKCAiYXNkZmFzZGYiLmxlbmd0aCA+IDUsICJUaGVyZSBtdXN0IGJlIGF0IGxlYXN0IDUgY2hhcnMiICk7CgkgKi8KCW9rOiBmdW5jdGlvbiggcmVzdWx0LCBtc2cgKSB7CgkJaWYgKCAhY29uZmlnLmN1cnJlbnQgKSB7CgkJCXRocm93IG5ldyBFcnJvciggIm9rKCkgYXNzZXJ0aW9uIG91dHNpZGUgdGVzdCBjb250ZXh0LCB3YXMgIiArIHNvdXJjZUZyb21TdGFja3RyYWNlKDIpICk7CgkJfQoJCXJlc3VsdCA9ICEhcmVzdWx0OwoJCW1zZyA9IG1zZyB8fCAoIHJlc3VsdCA\\/CXRoaXMuSFRNTCA\/ICI8YnIgLz4iIDogIlxuIiA6IHRoaXMuSFRNTCA\/ICImbmJzcDsiIDogIiAiOwoJCQl9LAoJCQkvLyBleHRyYSBjYW4gYmUgYSBudW1iZXIsIHNob3J0Y3V0IGZvciBpbmNyZWFzaW5nLWNhbGxpbmctZGVjcmVhc2luZwoJCQlpbmRlbnQ6IGZ1bmN0aW9uKCBleHRyYSApIHsKCQkJCWlmICggIXRoaXMubXVsdGlsaW5lICkgewoJCQkJCXJldHVybiAiIjsKCQkJCX0KCQkJCXZhciBjaHIgPSB0aGlzLmluZGVudENoYXI7CgkJCQlpZiAoIHRoaXMuSFRNTCApIHsKCQkJCQljaHIgPSBjaHIucmVwbGFjZSggL1x0L2csICIgICAiICkucmVwbGFjZSggLyAvZywgIiZuYnNwOyIgKTsKCQkJCX0KCQkJCXJldHVybiBuZXcgQXJyYXkoIHRoaXMuZGVwdGggKyAoIGV4dHJhIHx8IDAgKSApLmpvaW4oY2hyKTsKCQkJfSwKCQkJdXA6IGZ1bmN0aW9uKCBhICkgewoJCQkJdGhpcy5kZXB0aCArPSBhIHx8IDE7CgkJCX0sCgkJCWRvd246IGZ1bmN0aW9uKCBhICkgewoJCQkJdGhpcy5kZXB0aCAtPSBhIHx8IDE7CgkJCX0sCgkJCXNldFBhcnNlcjogZnVuY3Rpb24oIG5hbWUsIHBhcnNlciApIHsKCQkJCXRoaXMucGFyc2Vyc1tuYW1lXSA9IHBhcnNlcjsKCQkJfSwKCQkJLy8gVGhlIG5leHQgMyBhcmUgZXhwb3NlZCBzbyB5b3UgY2FuIHVzZSB0aGVtCgkJCXF1b3RlOiBxdW90ZSwKCQkJbGl0ZXJhbDogbGl0ZXJhbCwKCQkJam9pbjogam9pbiwKCQkJLy8KCQkJZGVwdGg6IDEsCgkJCS8vIFRoaXMgaXMgdGhlIGxpc3Qgb2YgcGFyc2VycywgdG8gbW9kaWZ5IHRoZW0sIHVzZSBqc0R1bXAuc2V0UGFyc2VyCgkJCXBhcnNlcnM6IHsKCQkJCXdpbmRvdzogIltXaW5kb3ddIiwKCQkJCWRvY3VtZW50OiAiW0RvY3VtZW50XSIsCgkJCQllcnJvcjogZnVuY3Rpb24oZXJyb3IpIHsKCQkJCQlyZXR1cm4gIkVycm9yKFwiIiArIGVycm9yLm1lc3NhZ2UgKyAiXCIpIjsKCQkJCX0sCgkJCQl1bmtub3duOiAiW1Vua25vd25dIiwKCQkJCSJudWxsIjogIm51bGwiLAoJCQkJInVuZGVmaW5lZCI6ICJ1bmRlZmluZWQiLAoJCQkJImZ1bmN0aW9uIjogZnVuY3Rpb24oIGZuICkgewoJCQkJCXZhciByZXQgPSAiZnVuY3Rpb24iLAoJCQkJCQkvLyBmdW5jdGlvbnMgbmV2ZXIgaGF2ZSBuYW1lIGluIElFCgkJCQkJCW5hbWUgPSAibmFtZSIgaW4gZm4gPyBmbi5uYW1lIDogKHJlTmFtZS5leGVjKGZuKSB8fCBbXSlbMV07CgoJCQkJCWlmICggbmFtZSApIHsKCQkJCQkJcmV0ICs9ICIgIiArIG5hbWU7CgkJCQkJfQoJCQkJCXJldCArPSAiKCAiOwoKCQkJCQlyZXQgPSBbIHJldCwgUVVuaXQuanNEdW1wLnBhcnNlKCBmbiwgImZ1bmN0aW9uQXJncyIgKSwgIil7IiBdLmpvaW4oICIiICk7CgkJCQkJcmV0dXJuIGpvaW4oIHJldCwgUVVuaXQuanNEdW1wLnBhcnNlKGZuLCJmdW5jdGlvbkNvZGUiICksICJ9IiApOwoJCQkJfSwKCQkJCWFycmF5OiBhcnJheSwKCQkJCW5vZGVsaXN0OiBhcnJheSwKCQkJCSJhcmd1bWVudHMiOiBhcnJheSwKCQkJCW9iamVjdDogZnVuY3Rpb24oIG1hcCwgc3RhY2sgKSB7CgkJCQkJLypqc2hpbnQgZm9yaW46ZmFsc2UgKi8KCQkJCQl2YXIgcmV0ID0gWyBdLCBrZXlzLCBrZXksIHZhbCwgaTsKCQkJCQlRVW5pdC5qc0R1bXAudXAoKTsKCQkJCQlrZXlzID0gW107CgkJCQkJZm9yICgga2V5IGluIG1hcCApIHsKCQkJCQkJa2V5cy5wdXNoKCBrZXkgKTsKCQkJCQl9CgkJCQkJa2V5cy5zb3J0KCk7CgkJCQkJZm9yICggaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrICkgewoJCQkJCQlrZXkgPSBrZXlzWyBpIF07CgkJCQkJCXZhbCA9IG1hcFsga2V5IF07CgkJCQkJCXJldC5wdXNoKCBRVW5pdC5qc0R1bXAucGFyc2UoIGtleSwgImtleSIgKSArICI6ICIgKyBRVW5pdC5qc0R1bXAucGFyc2UoIHZhbCwgdW5kZWZpbmVkLCBzdGFjayApICk7CgkJCQkJfQoJCQkJCVFVbml0LmpzRHVtcC5kb3duKCk7CgkJCQkJcmV0dXJuIGpvaW4oICJ7IiwgcmV0LCAifSIgKTsKCQkJCX0sCgkJCQlub2RlOiBmdW5jdGlvbiggbm9kZSApIHsKCQkJCQl2YXIgbGVuLCBpLCB2YWwsCgkJCQkJCW9wZW4gPSBRVW5pdC5qc0R1bXAuSFRNTCA\/ICImbHQ7IiA6ICI8IiwKCQkJCQkJY2xvc2UgPSBRVW5pdC5qc0R1bXAuSFRNTCA\/ICImZ3Q7IiA6ICI+IiwKCQkJCQkJdGFnID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLAoJCQkJCQlyZXQgPSBvcGVuICsgdGFnLAoJCQkJCQlhdHRycyA9IG5vZGUuYXR0cmlidXRlczsKCgkJCQkJaWYgKCBhdHRycyApIHsKCQkJCQkJZm9yICggaSA9IDAsIGxlbiA9IGF0dHJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkgewoJCQkJCQkJdmFsID0gYXR0cnNbaV0ubm9kZVZhbHVlOwoJCQkJCQkJLy8gSUU2IGluY2x1ZGVzIGFsbCBhdHRyaWJ1dGVzIGluIC5hdHRyaWJ1dGVzLCBldmVuIG9uZXMgbm90IGV4cGxpY2l0bHkgc2V0LgoJCQkJCQkJLy8gVGhvc2UgaGF2ZSB2YWx1ZXMgbGlrZSB1bmRlZmluZWQsIG51bGwsIDAsIGZhbHNlLCAiIiBvciAiaW5oZXJpdCIuCgkJCQkJCQlpZiAoIHZhbCAmJiB2YWwgIT09ICJpbmhlcml0IiApIHsKCQkJCQkJCQlyZXQgKz0gIiAiICsgYXR0cnNbaV0ubm9kZU5hbWUgKyAiPSIgKyBRVW5pdC5qc0R1bXAucGFyc2UoIHZhbCwgImF0dHJpYnV0ZSIgKTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCQlyZXQgKz0gY2xvc2U7CgoJCQkJCS8vIFNob3cgY29udGVudCBvZiBUZXh0Tm9kZSBvciBDREFUQVNlY3Rpb24KCQkJCQlpZiAoIG5vZGUubm9kZVR5cGUgPT09IDMgfHwgbm9kZS5ub2RlVHlwZSA9PT0gNCApIHsKCQkJCQkJcmV0ICs9IG5vZGUubm9kZVZhbHVlOwoJCQkJCX0KCgkJCQkJcmV0dXJuIHJldCArIG9wZW4gKyAiLyIgKyB0YWcgKyBjbG9zZTsKCQkJCX0sCgkJCQkvLyBmdW5jdGlvbiBjYWxscyBpdCBpbnRlcm5hbGx5LCBpdCdzIHRoZSBhcmd1bWVudHMgcGFydCBvZiB0aGUgZnVuY3Rpb24KCQkJCWZ1bmN0aW9uQXJnczogZnVuY3Rpb24oIGZuICkgewoJCQkJCXZhciBhcmdzLAoJCQkJCQlsID0gZm4ubGVuZ3RoOwoKCQkJCQlpZiAoICFsICkgewoJCQkJCQlyZXR1cm4gIiI7CgkJCQkJfQoKCQkJCQlhcmdzID0gbmV3IEFycmF5KGwpOwoJCQkJCXdoaWxlICggbC0tICkgewoJCQkJCQkvLyA5NyBpcyAnYScKCQkJCQkJYXJnc1tsXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoOTcrbCk7CgkJCQkJfQoJCQkJCXJldHVybiAiICIgKyBhcmdzLmpvaW4oICIsICIgKSArICIgIjsKCQkJCX0sCgkJCQkvLyBvYmplY3QgY2FsbHMgaXQgaW50ZXJuYWxseSwgdGhlIGtleSBwYXJ0IG9mIGFuIGl0ZW0gaW4gYSBtYXAKCQkJCWtleTogcXVvdGUsCgkJCQkvLyBmdW5jdGlvbiBjYWxscyBpdCBpbnRlcm5hbGx5LCBpdCdzIHRoZSBjb250ZW50IG9mIHRoZSBmdW5jdGlvbgoJCQkJZnVuY3Rpb25Db2RlOiAiW2NvZGVdIiwKCQkJCS8vIG5vZGUgY2FsbHMgaXQgaW50ZXJuYWxseSwgaXQncyBhbiBodG1sIGF0dHJpYnV0ZSB2YWx1ZQoJCQkJYXR0cmlidXRlOiBxdW90ZSwKCQkJCXN0cmluZzogcXVvdGUsCgkJCQlkYXRlOiBxdW90ZSwKCQkJCXJlZ2V4cDogbGl0ZXJhbCwKCQkJCW51bWJlcjogbGl0ZXJhbCwKCQkJCSJib29sZWFuIjogbGl0ZXJhbAoJCQl9LAoJCQkvLyBpZiB0cnVlLCBlbnRpdGllcyBhcmUgZXNjYXBlZCAoIDwsID4sIFx0LCBzcGFjZSBhbmQgXG4gKQoJCQlIVE1MOiBmYWxzZSwKCQkJLy8gaW5kZW50YXRpb24gdW5pdAoJCQlpbmRlbnRDaGFyOiAiICAiLAoJCQkvLyBpZiB0cnVlLCBpdGVtcyBpbiBhIGNvbGxlY3Rpb24sIGFyZSBzZXBhcmF0ZWQgYnkgYSBcbiwgZWxzZSBqdXN0IGEgc3BhY2UuCgkJCW11bHRpbGluZTogdHJ1ZQoJCX07CgoJcmV0dXJuIGpzRHVtcDsKfSgpKTsKCi8qCiAqIEphdmFzY3JpcHQgRGlmZiBBbGdvcml0aG0KICogIEJ5IEpvaG4gUmVzaWcgKGh0dHA6Ly9lam9obi5vcmcvKQogKiAgTW9kaWZpZWQgYnkgQ2h1IEFsYW4gInNwcml0ZSIKICoKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKgogKiBNb3JlIEluZm86CiAqICBodHRwOi8vZWpvaG4ub3JnL3Byb2plY3RzL2phdmFzY3JpcHQtZGlmZi1hbGdvcml0aG0vCiAqCiAqIFVzYWdlOiBRVW5pdC5kaWZmKGV4cGVjdGVkLCBhY3R1YWwpCiAqCiAqIFFVbml0LmRpZmYoICJ0aGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIiwgInRoZSBxdWljayBmb3gganVtcHMgb3ZlciIgKSA9PSAidGhlICBxdWljayA8ZGVsPmJyb3duIDwvZGVsPiBmb3ggPGRlbD5qdW1wZWQgPC9kZWw+PGlucz5qdW1wcyA8L2lucz4gb3ZlciIKICovClFVbml0LmRpZmYgPSAoZnVuY3Rpb24oKSB7CgkvKmpzaGludCBlcWVxZXE6ZmFsc2UsIGVxbnVsbDp0cnVlICovCglmdW5jdGlvbiBkaWZmKCBvLCBuICkgewoJCXZhciBpLAoJCQlucyA9IHt9LAoJCQlvcyA9IHt9OwoKCQlmb3IgKCBpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKysgKSB7CgkJCWlmICggIWhhc093bi5jYWxsKCBucywgbltpXSApICkgewoJCQkJbnNbIG5baV0gXSA9IHsKCQkJCQlyb3dzOiBbXSwKCQkJCQlvOiBudWxsCgkJCQl9OwoJCQl9CgkJCW5zWyBuW2ldIF0ucm93cy5wdXNoKCBpICk7CgkJfQoKCQlmb3IgKCBpID0gMDsgaSA8IG8ubGVuZ3RoOyBpKysgKSB7CgkJCWlmICggIWhhc093bi5jYWxsKCBvcywgb1tpXSApICkgewoJCQkJb3NbIG9baV0gXSA9IHsKCQkJCQlyb3dzOiBbXSwKCQkJCQluOiBudWxsCgkJCQl9OwoJCQl9CgkJCW9zWyBvW2ldIF0ucm93cy5wdXNoKCBpICk7CgkJfQoKCQlmb3IgKCBpIGluIG5zICkgewoJCQlpZiAoIGhhc093bi5jYWxsKCBucywgaSApICkgewoJCQkJaWYgKCBuc1tpXS5yb3dzLmxlbmd0aCA9PT0gMSAmJiBoYXNPd24uY2FsbCggb3MsIGkgKSAmJiBvc1tpXS5yb3dzLmxlbmd0aCA9PT0gMSApIHsKCQkJCQluWyBuc1tpXS5yb3dzWzBdIF0gPSB7CgkJCQkJCXRleHQ6IG5bIG5zW2ldLnJvd3NbMF0gXSwKCQkJCQkJcm93OiBvc1tpXS5yb3dzWzBdCgkJCQkJfTsKCQkJCQlvWyBvc1tpXS5yb3dzWzBdIF0gPSB7CgkJCQkJCXRleHQ6IG9bIG9zW2ldLnJvd3NbMF0gXSwKCQkJCQkJcm93OiBuc1tpXS5yb3dzWzBdCgkJCQkJfTsKCQkJCX0KCQkJfQoJCX0KCgkJZm9yICggaSA9IDA7IGkgPCBuLmxlbmd0aCAtIDE7IGkrKyApIHsKCQkJaWYgKCBuW2ldLnRleHQgIT0gbnVsbCAmJiBuWyBpICsgMSBdLnRleHQgPT0gbnVsbCAmJiBuW2ldLnJvdyArIDEgPCBvLmxlbmd0aCAmJiBvWyBuW2ldLnJvdyArIDEgXS50ZXh0ID09IG51bGwgJiYKCQkJCQkJblsgaSArIDEgXSA9PSBvWyBuW2ldLnJvdyArIDEgXSApIHsKCgkJCQluWyBpICsgMSBdID0gewoJCQkJCXRleHQ6IG5bIGkgKyAxIF0sCgkJCQkJcm93OiBuW2ldLnJvdyArIDEKCQkJCX07CgkJCQlvWyBuW2ldLnJvdyArIDEgXSA9IHsKCQkJCQl0ZXh0OiBvWyBuW2ldLnJvdyArIDEgXSwKCQkJCQlyb3c6IGkgKyAxCgkJCQl9OwoJCQl9CgkJfQoKCQlmb3IgKCBpID0gbi5sZW5ndGggLSAxOyBpID4gMDsgaS0tICkgewoJCQlpZiAoIG5baV0udGV4dCAhPSBudWxsICYmIG5bIGkgLSAxIF0udGV4dCA9PSBudWxsICYmIG5baV0ucm93ID4gMCAmJiBvWyBuW2ldLnJvdyAtIDEgXS50ZXh0ID09IG51bGwgJiYKCQkJCQkJblsgaSAtIDEgXSA9PSBvWyBuW2ldLnJvdyAtIDEgXSkgewoKCQkJCW5bIGkgLSAxIF0gPSB7CgkJCQkJdGV4dDogblsgaSAtIDEgXSwKCQkJCQlyb3c6IG5baV0ucm93IC0gMQoJCQkJfTsKCQkJCW9bIG5baV0ucm93IC0gMSBdID0gewoJCQkJCXRleHQ6IG9bIG5baV0ucm93IC0gMSBdLAoJCQkJCXJvdzogaSAtIDEKCQkJCX07CgkJCX0KCQl9CgoJCXJldHVybiB7CgkJCW86IG8sCgkJCW46IG4KCQl9OwoJfQoKCXJldHVybiBmdW5jdGlvbiggbywgbiApIHsKCQlvID0gby5yZXBsYWNlKCAvXHMrJC8sICIiICk7CgkJbiA9IG4ucmVwbGFjZSggL1xzKyQvLCAiIiApOwoKCQl2YXIgaSwgcHJlLAoJCQlzdHIgPSAiIiwKCQkJb3V0ID0gZGlmZiggbyA9PT0gIiIgPyBbXSA6IG8uc3BsaXQoL1xzKy8pLCBuID09PSAiIiA\/IFtdIDogbi5zcGxpdCgvXHMrLykgKSwKCQkJb1NwYWNlID0gby5tYXRjaCgvXHMrL2cpLAoJCQluU3BhY2UgPSBuLm1hdGNoKC9ccysvZyk7CgoJCWlmICggb1NwYWNlID09IG51bGwgKSB7CgkJCW9TcGFjZSA9IFsgIiAiIF07CgkJfQoJCWVsc2UgewoJCQlvU3BhY2UucHVzaCggIiAiICk7CgkJfQoKCQlpZiAoIG5TcGFjZSA9PSBudWxsICkgewoJCQluU3BhY2UgPSBbICIgIiBdOwoJCX0KCQllbHNlIHsKCQkJblNwYWNlLnB1c2goICIgIiApOwoJCX0KCgkJaWYgKCBvdXQubi5sZW5ndGggPT09IDAgKSB7CgkJCWZvciAoIGkgPSAwOyBpIDwgb3V0Lm8ubGVuZ3RoOyBpKysgKSB7CgkJCQlzdHIgKz0gIjxkZWw+IiArIG91dC5vW2ldICsgb1NwYWNlW2ldICsgIjwvZGVsPiI7CgkJCX0KCQl9CgkJZWxzZSB7CgkJCWlmICggb3V0Lm5bMF0udGV4dCA9PSBudWxsICkgewoJCQkJZm9yICggbiA9IDA7IG4gPCBvdXQuby5sZW5ndGggJiYgb3V0Lm9bbl0udGV4dCA9PSBudWxsOyBuKysgKSB7CgkJCQkJc3RyICs9ICI8ZGVsPiIgKyBvdXQub1tuXSArIG9TcGFjZVtuXSArICI8L2RlbD4iOwoJCQkJfQoJCQl9CgoJCQlmb3IgKCBpID0gMDsgaSA8IG91dC5uLmxlbmd0aDsgaSsrICkgewoJCQkJaWYgKG91dC5uW2ldLnRleHQgPT0gbnVsbCkgewoJCQkJCXN0ciArPSAiPGlucz4iICsgb3V0Lm5baV0gKyBuU3BhY2VbaV0gKyAiPC9pbnM+IjsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCS8vIGBwcmVgIGluaXRpYWxpemVkIGF0IHRvcCBvZiBzY29wZQoJCQkJCXByZSA9ICIiOwoKCQkJCQlmb3IgKCBuID0gb3V0Lm5baV0ucm93ICsgMTsgbiA8IG91dC5vLmxlbmd0aCAmJiBvdXQub1tuXS50ZXh0ID09IG51bGw7IG4rKyApIHsKCQkJCQkJcHJlICs9ICI8ZGVsPiIgKyBvdXQub1tuXSArIG9TcGFjZVtuXSArICI8L2RlbD4iOwoJCQkJCX0KCQkJCQlzdHIgKz0gIiAiICsgb3V0Lm5baV0udGV4dCArIG5TcGFjZVtpXSArIHByZTsKCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIHN0cjsKCX07Cn0oKSk7CgovLyBGb3IgYnJvd3NlciwgZXhwb3J0IG9ubHkgc2VsZWN0IGdsb2JhbHMKaWYgKCB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiApIHsKCWV4dGVuZCggd2luZG93LCBRVW5pdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgKTsKCXdpbmRvdy5RVW5pdCA9IFFVbml0Owp9CgovLyBGb3IgQ29tbW9uSlMgZW52aXJvbm1lbnRzLCBleHBvcnQgZXZlcnl0aGluZwppZiAoIHR5cGVvZiBtb2R1bGUgIT09ICJ1bmRlZmluZWQiICYmIG1vZHVsZS5leHBvcnRzICkgewoJbW9kdWxlLmV4cG9ydHMgPSBRVW5pdDsKfQoKCi8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCwgbGlrZSB3aW5kb3cgaW4gYnJvd3NlcnMKfSggKGZ1bmN0aW9uKCkgewoJcmV0dXJuIHRoaXM7Cn0pKCkgKSk7Cg==",
    "size": "61033"
}