{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/flot\/jquery.flot.pie.js",
    "lastUpdate": "2018-03-22+14:21:18.27",
    "contentFile": "\/IG9wdGlvbnMuc2VyaWVzLnBpZS5pbm5lclJhZGl1cyA6IG1heFJhZGl1cyAqIG9wdGlvbnMuc2VyaWVzLnBpZS5pbm5lclJhZGl1czsKCQkJCWxheWVyLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICJkZXN0aW5hdGlvbi1vdXQiOyAvLyB0aGlzIGRvZXMgbm90IHdvcmsgd2l0aCBleGNhbnZhcywgYnV0IGl0IHdpbGwgZmFsbCBiYWNrIHRvIHVzaW5nIHRoZSBzdHJva2UgY29sb3IKCQkJCWxheWVyLmJlZ2luUGF0aCgpOwoJCQkJbGF5ZXIuZmlsbFN0eWxlID0gb3B0aW9ucy5zZXJpZXMucGllLnN0cm9rZS5jb2xvcjsKCQkJCWxheWVyLmFyYygwLCAwLCBpbm5lclJhZGl1cywgMCwgTWF0aC5QSSAqIDIsIGZhbHNlKTsKCQkJCWxheWVyLmZpbGwoKTsKCQkJCWxheWVyLmNsb3NlUGF0aCgpOwoJCQkJbGF5ZXIucmVzdG9yZSgpOwoKCQkJCS8vIGFkZCBpbm5lciBzdHJva2UKCgkJCQlsYXllci5zYXZlKCk7CgkJCQlsYXllci5iZWdpblBhdGgoKTsKCQkJCWxheWVyLnN0cm9rZVN0eWxlID0gb3B0aW9ucy5zZXJpZXMucGllLnN0cm9rZS5jb2xvcjsKCQkJCWxheWVyLmFyYygwLCAwLCBpbm5lclJhZGl1cywgMCwgTWF0aC5QSSAqIDIsIGZhbHNlKTsKCQkJCWxheWVyLnN0cm9rZSgpOwoJCQkJbGF5ZXIuY2xvc2VQYXRoKCk7CgkJCQlsYXllci5yZXN0b3JlKCk7CgoJCQkJLy8gVE9ETzogYWRkIGV4dHJhIHNoYWRvdyBpbnNpZGUgaG9sZSAod2l0aCBhIG1hc2spIGlmIHRoZSBwaWUgaXMgdGlsdGVkLgoJCQl9CgkJfQoKCQkvLy0tIEFkZGl0aW9uYWwgSW50ZXJhY3RpdmUgcmVsYXRlZCBmdW5jdGlvbnMgLS0KCgkJZnVuY3Rpb24gaXNQb2ludEluUG9seShwb2x5LCBwdCkgewoJCQlmb3IodmFyIGMgPSBmYWxzZSwgaSA9IC0xLCBsID0gcG9seS5sZW5ndGgsIGogPSBsIC0gMTsgKytpIDwgbDsgaiA9IGkpCgkJCQkoKHBvbHlbaV1bMV0gPD0gcHRbMV0gJiYgcHRbMV0gPCBwb2x5W2pdWzFdKSB8fCAocG9seVtqXVsxXSA8PSBwdFsxXSAmJiBwdFsxXTwgcG9seVtpXVsxXSkpCgkJCQkmJiAocHRbMF0gPCAocG9seVtqXVswXSAtIHBvbHlbaV1bMF0pICogKHB0WzFdIC0gcG9seVtpXVsxXSkgLyAocG9seVtqXVsxXSAtIHBvbHlbaV1bMV0pICsgcG9seVtpXVswXSkKCQkJCSYmIChjID0gIWMpOwoJCQlyZXR1cm4gYzsKCQl9CgoJCWZ1bmN0aW9uIGZpbmROZWFyYnlTbGljZShtb3VzZVgsIG1vdXNlWSkgewoKCQkJdmFyIHNsaWNlcyA9IHBsb3QuZ2V0RGF0YSgpLAoJCQkJb3B0aW9ucyA9IHBsb3QuZ2V0T3B0aW9ucygpLAoJCQkJcmFkaXVzID0gb3B0aW9ucy5zZXJpZXMucGllLnJhZGl1cyA+IDEgPyBvcHRpb25zLnNlcmllcy5waWUucmFkaXVzIDogbWF4UmFkaXVzICogb3B0aW9ucy5zZXJpZXMucGllLnJhZGl1cywKCQkJCXgsIHk7CgoJCQlmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlcy5sZW5ndGg7ICsraSkgewoKCQkJCXZhciBzID0gc2xpY2VzW2ldOwoKCQkJCWlmIChzLnBpZS5zaG93KSB7CgoJCQkJCWN0eC5zYXZlKCk7CgkJCQkJY3R4LmJlZ2luUGF0aCgpOwoJCQkJCWN0eC5tb3ZlVG8oMCwgMCk7IC8vIENlbnRlciBvZiB0aGUgcGllCgkJCQkJLy9jdHguc2NhbGUoMSwgb3B0aW9ucy5zZXJpZXMucGllLnRpbHQpOwkvLyB0aGlzIGFjdHVhbGx5IHNlZW1zIHRvIGJyZWFrIGV2ZXJ5dGhpbmcgd2hlbiBoZXJlLgoJCQkJCWN0eC5hcmMoMCwgMCwgcmFkaXVzLCBzLnN0YXJ0QW5nbGUsIHMuc3RhcnRBbmdsZSArIHMuYW5nbGUgLyAyLCBmYWxzZSk7CgkJCQkJY3R4LmFyYygwLCAwLCByYWRpdXMsIHMuc3RhcnRBbmdsZSArIHMuYW5nbGUgLyAyLCBzLnN0YXJ0QW5nbGUgKyBzLmFuZ2xlLCBmYWxzZSk7CgkJCQkJY3R4LmNsb3NlUGF0aCgpOwoJCQkJCXggPSBtb3VzZVggLSBjZW50ZXJMZWZ0OwoJCQkJCXkgPSBtb3VzZVkgLSBjZW50ZXJUb3A7CgoJCQkJCWlmIChjdHguaXNQb2ludEluUGF0aCkgewoJCQkJCQlpZiAoY3R4LmlzUG9pbnRJblBhdGgobW91c2VYIC0gY2VudGVyTGVmdCwgbW91c2VZIC0gY2VudGVyVG9wKSkgewoJCQkJCQkJY3R4LnJlc3RvcmUoKTsKCQkJCQkJCXJldHVybiB7CgkJCQkJCQkJZGF0YXBvaW50OiBbcy5wZXJjZW50LCBzLmRhdGFdLAoJCQkJCQkJCWRhdGFJbmRleDogMCwKCQkJCQkJCQlzZXJpZXM6IHMsCgkJCQkJCQkJc2VyaWVzSW5kZXg6IGkKCQkJCQkJCX07CgkJCQkJCX0KCQkJCQl9IGVsc2UgewoKCQkJCQkJLy8gZXhjYW52YXMgZm9yIElFIGRvZXNuO3Qgc3VwcG9ydCBpc1BvaW50SW5QYXRoLCB0aGlzIGlzIGEgd29ya2Fyb3VuZC4KCgkJCQkJCXZhciBwMVggPSByYWRpdXMgKiBNYXRoLmNvcyhzLnN0YXJ0QW5nbGUpLAoJCQkJCQkJcDFZID0gcmFkaXVzICogTWF0aC5zaW4ocy5zdGFydEFuZ2xlKSwKCQkJCQkJCXAyWCA9IHJhZGl1cyAqIE1hdGguY29zKHMuc3RhcnRBbmdsZSArIHMuYW5nbGUgLyA0KSwKCQkJCQkJCXAyWSA9IHJhZGl1cyAqIE1hdGguc2luKHMuc3RhcnRBbmdsZSArIHMuYW5nbGUgLyA0KSwKCQkJCQkJCXAzWCA9IHJhZGl1cyAqIE1hdGguY29zKHMuc3RhcnRBbmdsZSArIHMuYW5nbGUgLyAyKSwKCQkJCQkJCXAzWSA9IHJhZGl1cyAqIE1hdGguc2luKHMuc3RhcnRBbmdsZSArIHMuYW5nbGUgLyAyKSwKCQkJCQkJCXA0WCA9IHJhZGl1cyAqIE1hdGguY29zKHMuc3RhcnRBbmdsZSArIHMuYW5nbGUgLyAxLjUpLAoJCQkJCQkJcDRZID0gcmFkaXVzICogTWF0aC5zaW4ocy5zdGFydEFuZ2xlICsgcy5hbmdsZSAvIDEuNSksCgkJCQkJCQlwNVggPSByYWRpdXMgKiBNYXRoLmNvcyhzLnN0YXJ0QW5nbGUgKyBzLmFuZ2xlKSwKCQkJCQkJCXA1WSA9IHJhZGl1cyAqIE1hdGguc2luKHMuc3RhcnRBbmdsZSArIHMuYW5nbGUpLAoJCQkJCQkJYXJyUG9seSA9IFtbMCwgMF0sIFtwMVgsIHAxWV0sIFtwMlgsIHAyWV0sIFtwM1gsIHAzWV0sIFtwNFgsIHA0WV0sIFtwNVgsIHA1WV1dLAoJCQkJCQkJYXJyUG9pbnQgPSBbeCwgeV07CgoJCQkJCQkvLyBUT0RPOiBwZXJoYXBzIGRvIHNvbWUgbWF0aG1hdGljYWwgdHJpY2tlcnkgaGVyZSB3aXRoIHRoZSBZLWNvb3JkaW5hdGUgdG8gY29tcGVuc2F0ZSBmb3IgcGllIHRpbHQ\/CgoJCQkJCQlpZiAoaXNQb2ludEluUG9seShhcnJQb2x5LCBhcnJQb2ludCkpIHsKCQkJCQkJCWN0eC5yZXN0b3JlKCk7CgkJCQkJCQlyZXR1cm4gewoJCQkJCQkJCWRhdGFwb2ludDogW3MucGVyY2VudCwgcy5kYXRhXSwKCQkJCQkJCQlkYXRhSW5kZXg6IDAsCgkJCQkJCQkJc2VyaWVzOiBzLAoJCQkJCQkJCXNlcmllc0luZGV4OiBpCgkJCQkJCQl9OwoJCQkJCQl9CgkJCQkJfQoKCQkJCQljdHgucmVzdG9yZSgpOwoJCQkJfQoJCQl9CgoJCQlyZXR1cm4gbnVsbDsKCQl9CgoJCWZ1bmN0aW9uIG9uTW91c2VNb3ZlKGUpIHsKCQkJdHJpZ2dlckNsaWNrSG92ZXJFdmVudCgicGxvdGhvdmVyIiwgZSk7CgkJfQoKCQlmdW5jdGlvbiBvbkNsaWNrKGUpIHsKCQkJdHJpZ2dlckNsaWNrSG92ZXJFdmVudCgicGxvdGNsaWNrIiwgZSk7CgkJfQoKCQkvLyB0cmlnZ2VyIGNsaWNrIG9yIGhvdmVyIGV2ZW50ICh0aGV5IHNlbmQgdGhlIHNhbWUgcGFyYW1ldGVycyBzbyB3ZSBzaGFyZSB0aGVpciBjb2RlKQoKCQlmdW5jdGlvbiB0cmlnZ2VyQ2xpY2tIb3ZlckV2ZW50KGV2ZW50bmFtZSwgZSkgewoKCQkJdmFyIG9mZnNldCA9IHBsb3Qub2Zmc2V0KCk7CgkJCXZhciBjYW52YXNYID0gcGFyc2VJbnQoZS5wYWdlWCAtIG9mZnNldC5sZWZ0KTsKCQkJdmFyIGNhbnZhc1kgPSAgcGFyc2VJbnQoZS5wYWdlWSAtIG9mZnNldC50b3ApOwoJCQl2YXIgaXRlbSA9IGZpbmROZWFyYnlTbGljZShjYW52YXNYLCBjYW52YXNZKTsKCgkJCWlmIChvcHRpb25zLmdyaWQuYXV0b0hpZ2hsaWdodCkgewoKCQkJCS8vIGNsZWFyIGF1dG8taGlnaGxpZ2h0cwoKCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgaGlnaGxpZ2h0cy5sZW5ndGg7ICsraSkgewoJCQkJCXZhciBoID0gaGlnaGxpZ2h0c1tpXTsKCQkJCQlpZiAoaC5hdXRvID09IGV2ZW50bmFtZSAmJiAhKGl0ZW0gJiYgaC5zZXJpZXMgPT0gaXRlbS5zZXJpZXMpKSB7CgkJCQkJCXVuaGlnaGxpZ2h0KGguc2VyaWVzKTsKCQkJCQl9CgkJCQl9CgkJCX0KCgkJCS8vIGhpZ2hsaWdodCB0aGUgc2xpY2UKCgkJCWlmIChpdGVtKSB7CgkJCQloaWdobGlnaHQoaXRlbS5zZXJpZXMsIGV2ZW50bmFtZSk7CgkJCX0KCgkJCS8vIHRyaWdnZXIgYW55IGhvdmVyIGJpbmQgZXZlbnRzCgoJCQl2YXIgcG9zID0geyBwYWdlWDogZS5wYWdlWCwgcGFnZVk6IGUucGFnZVkgfTsKCQkJdGFyZ2V0LnRyaWdnZXIoZXZlbnRuYW1lLCBbcG9zLCBpdGVtXSk7CgkJfQoKCQlmdW5jdGlvbiBoaWdobGlnaHQocywgYXV0bykgewoJCQkvL2lmICh0eXBlb2YgcyA9PSAibnVtYmVyIikgewoJCQkvLwlzID0gc2VyaWVzW3NdOwoJCQkvL30KCgkJCXZhciBpID0gaW5kZXhPZkhpZ2hsaWdodChzKTsKCgkJCWlmIChpID09IC0xKSB7CgkJCQloaWdobGlnaHRzLnB1c2goeyBzZXJpZXM6IHMsIGF1dG86IGF1dG8gfSk7CgkJCQlwbG90LnRyaWdnZXJSZWRyYXdPdmVybGF5KCk7CgkJCX0gZWxzZSBpZiAoIWF1dG8pIHsKCQkJCWhpZ2hsaWdodHNbaV0uYXV0byA9IGZhbHNlOwoJCQl9CgkJfQoKCQlmdW5jdGlvbiB1bmhpZ2hsaWdodChzKSB7CgkJCWlmIChzID09IG51bGwpIHsKCQkJCWhpZ2hsaWdodHMgPSBbXTsKCQkJCXBsb3QudHJpZ2dlclJlZHJhd092ZXJsYXkoKTsKCQkJfQoKCQkJLy9pZiAodHlwZW9mIHMgPT0gIm51bWJlciIpIHsKCQkJLy8JcyA9IHNlcmllc1tzXTsKCQkJLy99CgoJCQl2YXIgaSA9IGluZGV4T2ZIaWdobGlnaHQocyk7CgoJCQlpZiAoaSAhPSAtMSkgewoJCQkJaGlnaGxpZ2h0cy5zcGxpY2UoaSwgMSk7CgkJCQlwbG90LnRyaWdnZXJSZWRyYXdPdmVybGF5KCk7CgkJCX0KCQl9CgoJCWZ1bmN0aW9uIGluZGV4T2ZIaWdobGlnaHQocykgewoJCQlmb3IgKHZhciBpID0gMDsgaSA8IGhpZ2hsaWdodHMubGVuZ3RoOyArK2kpIHsKCQkJCXZhciBoID0gaGlnaGxpZ2h0c1tpXTsKCQkJCWlmIChoLnNlcmllcyA9PSBzKQoJCQkJCXJldHVybiBpOwoJCQl9CgkJCXJldHVybiAtMTsKCQl9CgoJCWZ1bmN0aW9uIGRyYXdPdmVybGF5KHBsb3QsIG9jdHgpIHsKCgkJCXZhciBvcHRpb25zID0gcGxvdC5nZXRPcHRpb25zKCk7CgoJCQl2YXIgcmFkaXVzID0gb3B0aW9ucy5zZXJpZXMucGllLnJhZGl1cyA+IDEgPyBvcHRpb25zLnNlcmllcy5waWUucmFkaXVzIDogbWF4UmFkaXVzICogb3B0aW9ucy5zZXJpZXMucGllLnJhZGl1czsKCgkJCW9jdHguc2F2ZSgpOwoJCQlvY3R4LnRyYW5zbGF0ZShjZW50ZXJMZWZ0LCBjZW50ZXJUb3ApOwoJCQlvY3R4LnNjYWxlKDEsIG9wdGlvbnMuc2VyaWVzLnBpZS50aWx0KTsKCgkJCWZvciAodmFyIGkgPSAwOyBpIDwgaGlnaGxpZ2h0cy5sZW5ndGg7ICsraSkgewoJCQkJZHJhd0hpZ2hsaWdodChoaWdobGlnaHRzW2ldLnNlcmllcyk7CgkJCX0KCgkJCWRyYXdEb251dEhvbGUob2N0eCk7CgoJCQlvY3R4LnJlc3RvcmUoKTsKCgkJCWZ1bmN0aW9uIGRyYXdIaWdobGlnaHQoc2VyaWVzKSB7CgoJCQkJaWYgKHNlcmllcy5hbmdsZSA8PSAwIHx8IGlzTmFOKHNlcmllcy5hbmdsZSkpIHsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJLy9vY3R4LmZpbGxTdHlsZSA9IHBhcnNlQ29sb3Iob3B0aW9ucy5zZXJpZXMucGllLmhpZ2hsaWdodC5jb2xvcikuc2NhbGUobnVsbCwgbnVsbCwgbnVsbCwgb3B0aW9ucy5zZXJpZXMucGllLmhpZ2hsaWdodC5vcGFjaXR5KS50b1N0cmluZygpOwoJCQkJb2N0eC5maWxsU3R5bGUgPSAicmdiYSgyNTUsIDI1NSwgMjU1LCAiICsgb3B0aW9ucy5zZXJpZXMucGllLmhpZ2hsaWdodC5vcGFjaXR5ICsgIikiOyAvLyB0aGlzIGlzIHRlbXBvcmFyeSB1bnRpbCB3ZSBoYXZlIGFjY2VzcyB0byBwYXJzZUNvbG9yCgkJCQlvY3R4LmJlZ2luUGF0aCgpOwoJCQkJaWYgKE1hdGguYWJzKHNlcmllcy5hbmdsZSAtIE1hdGguUEkgKiAyKSA+IDAuMDAwMDAwMDAxKSB7CgkJCQkJb2N0eC5tb3ZlVG8oMCwgMCk7IC8vIENlbnRlciBvZiB0aGUgcGllCgkJCQl9CgkJCQlvY3R4LmFyYygwLCAwLCByYWRpdXMsIHNlcmllcy5zdGFydEFuZ2xlLCBzZXJpZXMuc3RhcnRBbmdsZSArIHNlcmllcy5hbmdsZSAvIDIsIGZhbHNlKTsKCQkJCW9jdHguYXJjKDAsIDAsIHJhZGl1cywgc2VyaWVzLnN0YXJ0QW5nbGUgKyBzZXJpZXMuYW5nbGUgLyAyLCBzZXJpZXMuc3RhcnRBbmdsZSArIHNlcmllcy5hbmdsZSwgZmFsc2UpOwoJCQkJb2N0eC5jbG9zZVBhdGgoKTsKCQkJCW9jdHguZmlsbCgpOwoJCQl9CgkJfQoJfSAvLyBlbmQgaW5pdCAocGx1Z2luIGJvZHkpCgoJLy8gZGVmaW5lIHBpZSBzcGVjaWZpYyBvcHRpb25zIGFuZCB0aGVpciBkZWZhdWx0IHZhbHVlcwoKCXZhciBvcHRpb25zID0gewoJCXNlcmllczogewoJCQlwaWU6IHsKCQkJCXNob3c6IGZhbHNlLAoJCQkJcmFkaXVzOiAiYXV0byIsCS8vIGFjdHVhbCByYWRpdXMgb2YgdGhlIHZpc2libGUgcGllIChiYXNlZCBvbiBmdWxsIGNhbGN1bGF0ZWQgcmFkaXVzIGlmIDw9MSwgb3IgaGFyZCBwaXhlbCB2YWx1ZSkKCQkJCWlubmVyUmFkaXVzOiAwLCAvKiBmb3IgZG9udXQgKi8KCQkJCXN0YXJ0QW5nbGU6IDMvMiwKCQkJCXRpbHQ6IDEsCgkJCQlzaGFkb3c6IHsKCQkJCQlsZWZ0OiA1LAkvLyBzaGFkb3cgbGVmdCBvZmZzZXQKCQkJCQl0b3A6IDE1LAkvLyBzaGFkb3cgdG9wIG9mZnNldAoJCQkJCWFscGhhOiAwLjAyCS8vIHNoYWRvdyBhbHBoYQoJCQkJfSwKCQkJCW9mZnNldDogewoJCQkJCXRvcDogMCwKCQkJCQlsZWZ0OiAiYXV0byIKCQkJCX0sCgkJCQlzdHJva2U6IHsKCQkJCQljb2xvcjogIiNmZmYiLAoJCQkJCXdpZHRoOiAxCgkJCQl9LAoJCQkJbGFiZWw6IHsKCQkJCQlzaG93OiAiYXV0byIsCgkJCQkJZm9ybWF0dGVyOiBmdW5jdGlvbihsYWJlbCwgc2xpY2UpIHsKCQkJCQkJcmV0dXJuICI8ZGl2IHN0eWxlPSdmb250LXNpemU6eC1zbWFsbDt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOjJweDtjb2xvcjoiICsgc2xpY2UuY29sb3IgKyAiOyc+IiArIGxhYmVsICsgIjxici8+IiArIE1hdGgucm91bmQoc2xpY2UucGVyY2VudCkgKyAiJTwvZGl2PiI7CgkJCQkJfSwJLy8gZm9ybWF0dGVyIGZ1bmN0aW9uCgkJCQkJcmFkaXVzOiAxLAkvLyByYWRpdXMgYXQgd2hpY2ggdG8gcGxhY2UgdGhlIGxhYmVscyAoYmFzZWQgb24gZnVsbCBjYWxjdWxhdGVkIHJhZGl1cyBpZiA8PTEsIG9yIGhhcmQgcGl4ZWwgdmFsdWUpCgkJCQkJYmFja2dyb3VuZDogewoJCQkJCQljb2xvcjogbnVsbCwKCQkJCQkJb3BhY2l0eTogMAoJCQkJCX0sCgkJCQkJdGhyZXNob2xkOiAwCS8vIHBlcmNlbnRhZ2UgYXQgd2hpY2ggdG8gaGlkZSB0aGUgbGFiZWwgKGkuZS4gdGhlIHNsaWNlIGlzIHRvbyBuYXJyb3cpCgkJCQl9LAoJCQkJY29tYmluZTogewoJCQkJCXRocmVzaG9sZDogLTEsCS8vIHBlcmNlbnRhZ2UgYXQgd2hpY2ggdG8gY29tYmluZSBsaXR0bGUgc2xpY2VzIGludG8gb25lIGxhcmdlciBzbGljZQoJCQkJCWNvbG9yOiBudWxsLAkvLyBjb2xvciB0byBnaXZlIHRoZSBuZXcgc2xpY2UgKGF1dG8tZ2VuZXJhdGVkIGlmIG51bGwpCgkJCQkJbGFiZWw6ICJPdGhlciIJLy8gbGFiZWwgdG8gZ2l2ZSB0aGUgbmV3IHNsaWNlCgkJCQl9LAoJCQkJaGlnaGxpZ2h0OiB7CgkJCQkJLy9jb2xvcjogIiNmZmYiLAkJLy8gd2lsbCBhZGQgdGhpcyBmdW5jdGlvbmFsaXR5IG9uY2UgcGFyc2VDb2xvciBpcyBhdmFpbGFibGUKCQkJCQlvcGFjaXR5OiAwLjUKCQkJCX0KCQkJfQoJCX0KCX07CgoJJC5wbG90LnBsdWdpbnMucHVzaCh7CgkJaW5pdDogaW5pdCwKCQlvcHRpb25zOiBvcHRpb25zLAoJCW5hbWU6ICJwaWUiLAoJCXZlcnNpb246ICIxLjEiCgl9KTsKCn0pKGpRdWVyeSk7Cg==",
    "size": "23809"
}