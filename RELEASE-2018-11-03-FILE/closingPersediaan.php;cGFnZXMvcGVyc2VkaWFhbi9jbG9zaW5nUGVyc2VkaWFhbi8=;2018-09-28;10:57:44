{
    "namaFile": "pages\/persediaan\/closingPersediaan\/closingPersediaan.php",
    "lastUpdate": "2018-09-28+10:57:44.82",
    "contentFile": "\/UGc9ZGFmdGFyUGVyc2VkaWFhbkJhcmFuZ1wiIHRpdGxlPSdEQUZUQVIgUEVSU0VESUFBTicgPiBEQUZUQVIgUEVSU0VESUFBTiA8L2E+IHwKCQkgLy8gPEEgaHJlZj1cInBnUGVyc2VkaWFhbi5waHA\\/ICcnOicgV2hlcmUgJy4kS29uZGlzaSA7CiAgICAvL09yZGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICRmbU9SREVSMSA9IGNla1BPU1QoJ2ZtT1JERVIxJyk7CiAgICAkZm1ERVNDMSA9IGNla1BPU1QoJ2ZtREVTQzEnKTsKICAgICRBc2MxID0gJGZtREVTQzEgPT0nJz8gJyc6ICdkZXNjJzsKICAgICRhcnJPcmRlcnMgPSBhcnJheSgpOwogICAgJGFyck9yZGVyc1tdPSAiIGNvbmNhdChjMSwnLicsYywnLicsZCwnLicsZSwnLicsZTEpLHNlbWVzdGVyIjsKICAgICRPcmRlcj0gam9pbignLCcsJGFyck9yZGVycyk7CiAgICAkT3JkZXJEZWZhdWx0ID0gJyc7CiAgICAkT3JkZXIgPSAgJE9yZGVyID09Jyc\/ICRPcmRlckRlZmF1bHQgOiAnIE9yZGVyIEJ5ICcuJE9yZGVyOwoKICAgIGlmKGVtcHR5KCRqdW1sYWhEYXRhKSkkanVtbGFoRGF0YSA9NTA7CiAgICAkdGhpcy0+cGFnZVBlckhhbCA9ICRqdW1sYWhEYXRhOwogICAgJE1haW4tPlBhZ2VQZXJIYWwgPSAkanVtbGFoRGF0YTsKICAgICRwYWdlUGVySGFsID0gJHRoaXMtPnBhZ2VQZXJIYWwgPT0nJyA\/ICRNYWluLT5QYWdlUGVySGFsOiAkdGhpcy0+cGFnZVBlckhhbDsKICAgICRIYWxEZWZhdWx0PWNla1BPU1QoJHRoaXMtPlByZWZpeC4nX2hhbCcsMSk7CiAgICAvLyRMaW1pdCA9ICIgbGltaXQgIi4oKCRIYWxEZWZhdWx0ICAqMSkgLSAxKSAqICRNYWluLT5QYWdlUGVySGFsLiIsIi4kTWFpbi0+UGFnZVBlckhhbDsgLy8kTGltaXRIYWwgPSAnJzsKICAgICRMaW1pdCA9ICIgbGltaXQgIi4oKCRIYWxEZWZhdWx0ICAqMSkgLSAxKSAqICRwYWdlUGVySGFsLiIsIi4kcGFnZVBlckhhbDsgLy8kTGltaXRIYWwgPSAnJzsKICAgICRMaW1pdCA9ICRNb2RlID09IDMgPyAnJzogJExpbWl0OwogICAgLy9ub2F3YWwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAkTm9Bd2FsPSAkcGFnZVBlckhhbCAqICgoJEhhbERlZmF1bHQqMSkgLSAxKTsKICAgICROb0F3YWwgPSAkTW9kZSA9PSAzID8gMDogJE5vQXdhbDsKCiAgICByZXR1cm4gYXJyYXkoJ0tvbmRpc2knPT4kS29uZGlzaSwgJ09yZGVyJz0+JE9yZGVyICwnTGltaXQnPT4kTGltaXQsICdOb0F3YWwnPT4kTm9Bd2FsICk7CgogIH0KCgogIGZ1bmN0aW9uIHBhZ2VTaG93KCl7CiAgICBnbG9iYWwgJGFwcCwgJE1haW47CgogICAgJG5hdmF0YXNfID0gJHRoaXMtPnNldE5hdkF0YXMoKTsKICAgICRuYXZhdGFzID0gJG5hdmF0YXNfPT0nJz8gLy8gJzAnOiAnMjAnOwogICAgICAnJzoKICAgICAgIjx0cj48dGQgaGVpZ2h0PScyMCc+Ii4KICAgICAgICAgICRuYXZhdGFzXy4KICAgICAgIjwvdGQ+PC90cj4iOwogICAgJGZvcm0xID0gJHRoaXMtPndpdGhmb3JtPyAiPGZvcm0gbmFtZT0nJHRoaXMtPkZvcm1OYW1lJyBpZD0nJHRoaXMtPkZvcm1OYW1lJyBtZXRob2Q9J3Bvc3QnIGFjdGlvbj0nJz4iIDogJyc7CiAgICAkZm9ybTIgPSAkdGhpcy0+d2l0aGZvcm0\\\/IjsKIAkJfQogCQkkbmFtYVNlbWVzdGVyID0gIlNBVFUiOwogCX1lbHNlewogCQkkdGFuZ2dhbCA9ICIzMS0xMi0iLiR0aGlzLT50YWh1bkFuZ2dhcmFuOwogCQkvLyAkc3RhdHVzQ2xvc2luZyA9ICR0aGlzLT5nZXRTdGF0dXNDbG9zaW5nKCRrb2RlU0tQRCwkdGhpcy0+Z2VuZXJhdGVEYXRlKCR0YW5nZ2FsKSk7CiAJCWlmKCRzdGF0dXNDbG9zaW5nICE9IDApewogCQkJJGVyciA9ICJEYXRhIHNlbWVzdGVyIGR1YSBzdWRhaCBkaSBjbG9zaW5nLCBiYXRhbGthbiBjbG9zaW5nID8iOwogCQl9CiAJCSRuYW1hU2VtZXN0ZXIgPSAiRFVBIjsKIAl9CgogICAkZ2V0RGF0YUJhcmFuZyA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByZWZfYmFyYW5nIHdoZXJlIGY9JzA4JyBhbmQgajEhPScwMDAwJyAiKTsKICAgd2hpbGUgKCRkYXRhQmFyYW5nID0gJHRoaXMtPnNxbEFycmF5KCRnZXREYXRhQmFyYW5nKSkgewogICAgICRhcnJheUtvZGVCYXJhbmdbXSA9ICRkYXRhQmFyYW5nWydmJ10uIi4iLiRkYXRhQmFyYW5nWydnJ10uIi4iLiRkYXRhQmFyYW5nWydoJ10uIi4iLiRkYXRhQmFyYW5nWydpJ10uIi4iLiRkYXRhQmFyYW5nWydqJ10uIi4iLiRkYXRhQmFyYW5nWydqMSddOwogICB9CiAgICRhcnJheVNLUERDb3NpbmcgPSBleHBsb2RlKCI7IiwkbGlzdEtvZGVTS1BEKTsKICAgZm9yICgkaT0wOyAkaSA8IHNpemVvZigkYXJyYXlTS1BEQ29zaW5nKSA7ICRpKyspIHsKICAgICAkYXJyYXlTS1BEQ0xPU0lOR1tdID0gIiciLiRhcnJheVNLUERDb3NpbmdbJGldLiInIjsKICAgfQogICAka29uZGlzaUNMb3NpbmdTS1BEID0gIiBhbmQgY29uY2F0KGMxLCcuJyxjLCcuJyxkLCcuJyxlLCcuJyxlMSkgaW4oIi5pbXBsb2RlKCIsIiwkYXJyYXlTS1BEQ0xPU0lORykuIikgIjsKICAgJGdldERhdGFTS1BEID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIDE9MSAka29uZGlzaVNLUEQgYW5kIGUxIT0nMDAwJyAka29uZGlzaUNMb3NpbmdTS1BEICIpOwogICB3aGlsZSAoJGRhdGFTS1BEID0gJHRoaXMtPnNxbEFycmF5KCRnZXREYXRhU0tQRCkpIHsKICAgICAkYXJyYXlTS1BEW10gPSAkZGF0YVNLUERbJ2MxJ10uIi4iLiRkYXRhU0tQRFsnYyddLiIuIi4kZGF0YVNLUERbJ2QnXS4iLiIuJGRhdGFTS1BEWydlJ10uIi4iLiRkYXRhU0tQRFsnZTEnXSA7CiAgICAgZm9yICgkaT0wOyAkaSA8IHNpemVvZigkYXJyYXlLb2RlQmFyYW5nKTsgJGkrKykgewogICAgICAgJGFycmF5RGF0YVBvc3RbXSA9ICRkYXRhU0tQRFsnYzEnXS4iLiIuJGRhdGFTS1BEWydjJ10uIi4iLiRkYXRhU0tQRFsnZCddLiIuIi4kZGF0YVNLUERbJ2UnXS4iLiIuJGRhdGFTS1BEWydlMSddLiI7Ii4kYXJyYXlLb2RlQmFyYW5nWyRpXTsKICAgICB9CiAgIH0KICAgJGFycmF5U2VtZXN0ZXIgPSBhcnJheSgKICAgIGFycmF5KCcxJywnU0VNRVNURVIgMScpLAogICAgYXJyYXkoJzInLCdTRU1FU1RFUiAyJyksCiAgKTsKCiAgICR0aGlzLT5mb3JtX2ZpZWxkcyA9IGFycmF5KAogICAgICdzZW1lc3RlcicgPT4gYXJyYXkoCiAgICAgICAnbGFiZWwnPT4nU0VNRVNURVInLAogICAgICAgJ2xhYmVsV2lkdGgnPT4xNTAsCiAgICAgICAndmFsdWUnPT4gY21iQXJyYXkoInNkcyIsJGZpbHRlclNlbWVzdGVyLCRhcnJheVNlbWVzdGVyLCAiLS0gU0VNRVNURVIgLS0gIiwiIGRpc2FibGVkIiApLiI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nJGZpbHRlclNlbWVzdGVyJyBuYW1lPSdmaWx0ZXJQZXJpb2RlJyBpZD0nZmlsdGVyUGVyaW9kZScgPiIKICAgICApLAogCQkna2V0ZXJhbmdhbicgPT4gYXJyYXkoCiAJCQknbGFiZWwnPT4nS0VURVJBTkdBTicsCiAJCQknbGFiZWxXaWR0aCc9PjcwLAogCQkJJ3ZhbHVlJz0+ICI8dGV4dGFyZWEgaWQ9J2tldGVyYW5nYW4nIG5hbWU9J2tldGVyYW5nYW4nIHN0eWxlPSd3aWR0aDozMDBweDtoZWlnaHQ6NTBweDsnPiRrZXRlcmFuZ2FuPC90ZXh0YXJlYT4iCiAJCSksCgogICAgICdwcm9ncmVzcycgPT4gYXJyYXkoCiAgICAgICAnbGFiZWwnPT4nJywKICAgICAgICdsYWJlbFdpZHRoJz0+MSwKICAgICAgICdwZW1pc2FoJz0+JyAnLAogICAgICAgJ3R5cGUnPT4nbWVyZ2UnLAogICAgICAgJ3ZhbHVlJz0+CiAgICAgICAgICI8ZGl2IGlkPSdwcm9ncmVzc2JveCcgc3R5bGU9J2JhY2tncm91bmQ6I2ZmZmJmMDtib3JkZXItcmFkaXVzOjVweDtib3JkZXI6MXB4IHNvbGlkO2hlaWdodDoxMHB4Jz4KICAgICAgICAgICA8ZGl2IGlkPSdwcm9ncmVzc2Jhcic+PC9kaXYgPgogICAgICAgICAgIDxkaXYgaWQ9J3N0YXR1c3R4dCcgc3R5bGU9J3dpZHRoOjAlO2JhY2tncm91bmQ6Z3JlZW47aGVpZ2h0OjEwcHg7dGV4dC1hbGlnbjpyaWdodDtjb2xvcjp3aGl0ZTtmb250LXNpemU6OHB4Oyc+MCU8L2Rpdj4KICAgICAgICAgICA8ZGl2IGlkPSdvdXRwdXQnPjwvZGl2PgogICAgICAgICA8L2Rpdj4JIgogICAgICAgKSwKICAgICAncGVyaW5nYXRhbicgPT4gYXJyYXkoCiAgICAgICAgICAgJ2xhYmVsJz0+JycsCiAJCQkJCSd0eXBlJz0+J21lcmdlJywKICAgICAgICAgICAnbGFiZWxXaWR0aCc9PjEsCiAgICAgICAgICAgJ3BlbWlzYWgnPT4nICcsCiAgICAgICAgICAgJ3ZhbHVlJz0+IjxkaXYgaWQ9J3BlbWlzYWgnIHN0eWxlPSdjb2xvcjpyZWQ7Zm9udC1zaXplOjExcHg7Jz48L2Rpdj4iLAogICAgICAgKSwKICAgICAnbG9nJyA9PiBhcnJheSgKICAgICAgICAgICAnbGFiZWwnPT4nJywKIAkJCQkJJ3R5cGUnPT4nbWVyZ2UnLAogICAgICAgICAgICdsYWJlbFdpZHRoJz0+JzAnLAogICAgICAgICAgICdwZW1pc2FoJz0+JyAnLAogICAgICAgICAgICd2YWx1ZSc9PiIKCiAgICAgICAgICAgPHRleHRhcmVhIGlkPSdsb2dDbG9zaW5nJyBuYW1lPSdsb2dDbG9zaW5nJyByZWFkb25seSBzdHlsZT0nd2lkdGg6NzkwcHg7aGVpZ2h0OjIyMHB4Oyc+SnVtbGFoIFNLUEQgID0gIi5zaXplb2YoJGFycmF5U0tQRCkuIlxuSnVtbGFoIEtvZGUgQmFyYW5nICA9ICIuc2l6ZW9mKCRhcnJheUtvZGVCYXJhbmcpLiJcbjwvdGV4dGFyZWE+IiwKICAgICAgICksCiAgICAgKTsKICAgIC8vdG9tYm9sCgogICAgLy8gJGxlbmd0aFByb2NjZXNzID0gc2l6ZW9mKCRhcnJheVNLUEQpICogc2l6ZW9mKCRhcnJheUtvZGVCYXJhbmcpOwogICAgJGxlbmd0aFByb2NjZXNzID0gc2l6ZW9mKCRhcnJheURhdGFQb3N0KTsKICAgICR0aGlzLT5mb3JtX21lbnViYXdhaCA9CiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi5qc29uX2VuY29kZSgkYXJyYXlLb2RlQmFyYW5nKS4iJyAgaWQ9J2FycmF5S29kZUJhcmFuZycgbmFtZT0nYXJyYXlLb2RlQmFyYW5nJyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi5zaXplb2YoJGFycmF5S29kZUJhcmFuZykuIicgIGlkPSd0b3RhbEJhcmFuZycgbmFtZT0ndG90YWxCYXJhbmcnID4gIi4KICAgICAgIjxpbnB1dCB0eXBlPSdoaWRkZW4nIHZhbHVlPSciLmpzb25fZW5jb2RlKCRhcnJheVNLUEQpLiInICBpZD0nYXJyYXlLb2RlU0tQRCcgbmFtZT0nYXJyYXlLb2RlU0tQRCcgPiAiLgogICAgICAiPGlucHV0IHR5cGU9J2hpZGRlbicgdmFsdWU9JyIuanNvbl9lbmNvZGUoJGFycmF5RGF0YVBvc3QpLiInICBpZD0nYXJyYXlEYXRhUG9zdCcgbmFtZT0nYXJyYXlEYXRhUG9zdCcgPiAiLgogICAgICAiPGlucHV0IHR5cGU9J2hpZGRlbicgdmFsdWU9JyIuJGxlbmd0aFByb2NjZXNzLiInICBpZD0nbGVuZ3RoUHJvY2Nlc3MnICBuYW1lPSdsZW5ndGhQcm9jY2VzcycgPiAiLgogICAgICAiPGlucHV0IHR5cGU9J2hpZGRlbicgdmFsdWU9JyIuJGtvZGVTS1BELiInICBpZD0na29kZVNLUEQnIG5hbWU9J2tvZGVTS1BEJyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nJyAgaWQ9J2lkUGVuZ2VsdWFyYW5EaXN0cmlidXNpJyBuYW1lPSdpZFBlbmdlbHVhcmFuRGlzdHJpYnVzaScgPiAiLgogICAgICAiPGlucHV0IHR5cGU9J2J1dHRvbicgdmFsdWU9J0Nsb3NpbmcnIG9uY2xpY2sgPSciLiR0aGlzLT5QcmVmaXguIi5leGVjdXRlQ291bnRBbmRDbG9zZSgiLnNpemVvZigkYXJyYXlTS1BEKS4iLDEpJyB0aXRsZT0nQ2xvc2luZycgPiAmbmJzcCIuCiAgICAgICI8aW5wdXQgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nVHV0dXAnIG9uY2xpY2sgPSciLiR0aGlzLT5QcmVmaXguIi5DbG9zZSgpJyA+IjsKCiAgICAkZm9ybSA9ICR0aGlzLT5nZW5Gb3JtKCk7CiAgICAkY29udGVudCA9ICRmb3JtOy8vJGNvbnRlbnQgPSAnY29udGVudCc7CiAgICByZXR1cm4JYXJyYXkgKCdjZWsnPT4kY2VrLCAnZXJyJz0+JGVyciwgJ2NvbnRlbnQnPT4kY29udGVudCk7CiAgfQoKCiAgZnVuY3Rpb24gZ2V0U3RhdHVzSGl0dW5nKCRrb2RlU0tQRCwkc2VtZXN0ZXIpewoJCWlmKCFlbXB0eSgkc2VtZXN0ZXIpKXsKCQkJCWlmKCRzZW1lc3RlciA9PSAnMScpewoJCQkJCQkkbWF4RmlsdGVyID0gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIjA2IjsKCQkJCQkJJGNvbmRpdGlvblBlcmlvZGUgPSAiYW5kIHJlcGxhY2UobGVmdCh0YW5nZ2FsX2J1a3UsNyksJy0nLCcnKSA8PSAnJG1heEZpbHRlciciOwoJCQkJfWVsc2VpZigkc2VtZXN0ZXIgPT0gJzInKXsKCQkJCQkJJG1pbkZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIwNyI7CgkJCQkJCSRtYXhGaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMTIiOwoJCQkJCQkkY29uZGl0aW9uUGVyaW9kZSA9ICJhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpID49ICckbWluRmlsdGVyJyBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpIDw9ICckbWF4RmlsdGVyJyI7CgkJCQl9ZWxzZWlmKCRzZW1lc3RlciA9PSAnMycpewoJCQkJCQkkbWF4RmlsdGVyID0gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIjEyIjsKCQkJCX0KCQl9CgkJJHN0YXR1c0hpdHVuZyA9ICR0aGlzLT5zcWxOdW1Sb3coJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyB3aGVyZSAkdGhpcy0+c3RyaW5nQ29uY2F0U3ViVW5pdCA9ICcka29kZVNLUEQnIGFuZCB0YWh1biA9ICckdGhpcy0+dGFodW5BbmdnYXJhbicgYW5kIHNlbWVzdGVyID0gJyRzZW1lc3RlciciKSk7CgkJaWYoICRzdGF0dXNIaXR1bmcgICE9IDApewoJCQkkcmV0dXJuID0gMTsKCQl9ZWxzZXsKCQkJJHJldHVybiA9IDAgOwoJCX0KCQlyZXR1cm4gJHJldHVybjsKCX0KICBmdW5jdGlvbiBjb3VudEFuZENsb3NlU2VtZXN0ZXIxKCRrb2RlU0tQRCwka29kZUJhcmFuZyl7CiAgCQkgZm9yZWFjaCAoJF9SRVFVRVNUIGFzICRrZXkgPT4gJHZhbHVlKSB7CiAgCQkJCSQka2V5ID0gJHZhbHVlOwogIAkJIH0KICAgICAgJGRhdGFQZXJzZWRpYWFuID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB2aWV3X2RhZnRhcl9wZXJzZWRpYWFuIHdoZXJlIGNvbmNhdChjMSwnLicsYywnLicsZCwnLicsZSwnLicsZTEpID0gJyRrb2RlU0tQRCcgYW5kIGNvbmNhdChmLCcuJyxnLCcuJyxoLCcuJyxpLCcuJyxqLCcuJyxqMSkgPSAnJGtvZGVCYXJhbmcnIGFuZCB5ZWFyKHRhbmdnYWxfYnVrdSkgPSAnJHRoaXMtPnRhaHVuQW5nZ2FyYW4nIikpOwogICAgICAka29kZUJhcmFuZyA9ICRkYXRhUGVyc2VkaWFhblsnZiddLiIuIi4kZGF0YVBlcnNlZGlhYW5bJ2cnXS4iLiIuJGRhdGFQZXJzZWRpYWFuWydoJ10uIi4iLiRkYXRhUGVyc2VkaWFhblsnaSddLiIuIi4kZGF0YVBlcnNlZGlhYW5bJ2onXS4iLiIuJGRhdGFQZXJzZWRpYWFuWydqMSddOwogICAgICAkdGhpcy0+c3FsUXVlcnkoImRlbGV0ZSBmcm9tIHRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyB3aGVyZSBjb25jYXQoYzEsJy4nLGMsJy4nLGQsJy4nLGUsJy4nLGUxKSA9ICcka29kZVNLUEQnIGFuZCAkdGhpcy0+c3RyaW5nQ29uY2F0S29kZUJhcmFuZyA9ICcka29kZUJhcmFuZycgYW5kIHRhaHVuID0gJyR0aGlzLT50YWh1bkFuZ2dhcmFuJyIpOwogICAgICAkYXJyYXlTYWxkb0F3YWwgPSAkdGhpcy0+Z3JhYlRyYW5zYWtzaVNlbWVzdGVyMSgka29kZVNLUEQsJGtvZGVCYXJhbmcsJzEnKTsKICAgICAgJGdldERhdGFCYXJhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9iYXJhbmcgd2hlcmUgJHRoaXMtPnN0cmluZ0NvbmNhdEtvZGVCYXJhbmcgPSAnJGtvZGVCYXJhbmcnIikpOwogICAgICAkZGF0YVNhbGRvQXdhbCA9IGFycmF5KAogICAgICAgICdjMScgPT4gJGRhdGFQZXJzZWRpYWFuWydjMSddLAogICAgICAgICdjJyA9PiAkZGF0YVBlcnNlZGlhYW5bJ2MnXSwKICAgICAgICAnZCcgPT4gJGRhdGFQZXJzZWRpYWFuWydkJ10sCiAgICAgICAgJ2UnID0+ICRkYXRhUGVyc2VkaWFhblsnZSddLAogICAgICAgICdlMScgPT4gJGRhdGFQZXJzZWRpYWFuWydlMSddLAogICAgICAgICdmJyA9PiAkZGF0YVBlcnNlZGlhYW5bJ2YnXSwKICAgICAgICAnZycgPT4gJGRhdGFQZXJzZWRpYWFuWydnJ10sCiAgICAgICAgJ2gnID0+ICRkYXRhUGVyc2VkaWFhblsnaCddLAogICAgICAgICdpJyA9PiAkZGF0YVBlcnNlZGlhYW5bJ2knXSwKICAgICAgICAnaicgPT4gJGRhdGFQZXJzZWRpYWFuWydqJ10sCiAgICAgICAgJ2oxJyA9PiAkZGF0YVBlcnNlZGlhYW5bJ2oxJ10sCiAgICAgICAgJ3NhdHVhbicgPT4gJGdldERhdGFCYXJhbmdbJ3NhdHVhbiddLAogICAgICAgICd0YW5nZ2FsJyA9PiAkdGhpcy0+dGFodW5BbmdnYXJhbi4iLTA3LTAxIiwKICAgICAgICAnam5zJyA9PiAnMScsCiAgICAgICAgJ2plbmlzX3BlcnNlZGlhYW4nID0+ICcxJywKICAgICAgICAndGFodW5fYW5nZ2FyYW4nID0+ICR0aGlzLT50YWh1bkFuZ2dhcmFuLAogICAgICAgICdoYXJnYV9zYXR1YW4nID0+ICRhcnJheVNhbGRvQXdhbFsnanVtbGFoSGFyZ2EnXSAvICRhcnJheVNhbGRvQXdhbFsnc2FsZG8nXSAgLAogICAgICAgICdqdW1sYWgnID0+ICRhcnJheVNhbGRvQXdhbFsnc2FsZG8nXSAsCiAgICAgICAgJ3RvdGFsJyA9PiAkYXJyYXlTYWxkb0F3YWxbJ2p1bWxhaEhhcmdhJ10sCiAgICAgICk7CiAgICAgICRxdWVyeUluc2V0U2FsZG9Bd2FsID0gJHRoaXMtPnNxbEluc2VydCgic2FsZG9fYXdhbCIsJGRhdGFTYWxkb0F3YWwpOwogICAgICAkdGhpcy0+c3FsUXVlcnkoJHF1ZXJ5SW5zZXRTYWxkb0F3YWwpOwogICAgICAkZ2V0SWRUcmFuc2Frc2kgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgbWF4KGlkKSBmcm9tIHNhbGRvX2F3YWwgd2hlcmUgJHRoaXMtPnN0cmluZ0NvbmNhdFN1YlVuaXQgPSAnJGtvZGVTS1BEJyBhbmQgJHRoaXMtPnN0cmluZ0NvbmNhdEtvZGVCYXJhbmcgPSAnJGtvZGVCYXJhbmcnIGFuZCB0YW5nZ2FsPSciLiR0aGlzLT50YWh1bkFuZ2dhcmFuLiItMDctMDEiLiInIikpOwogICAgICAkZGF0YUthcnR1UGVyc2VkaWFhbiA9IGFycmF5KAogICAgICAgICdjMScgPT4gJGRhdGFQZXJzZWRpYWFuWydjMSddLAogICAgICAgICdjJyA9PiAkZGF0YVBlcnNlZGlhYW5bJ2MnXSwKICAgICAgICAnZCcgPT4gJGRhdGFQZXJzZWRpYWFuWydkJ10sCiAgICAgICAgJ2UnID0+ICRkYXRhUGVyc2VkaWFhblsnZSddLAogICAgICAgICdlMScgPT4gJGRhdGFQZXJzZWRpYWFuWydlMSddLAogICAgICAgICdmJyA9PiAkZGF0YVBlcnNlZGlhYW5bJ2YnXSwKICAgICAgICAnZycgPT4gJGRhdGFQZXJzZWRpYWFuWydnJ10sCiAgICAgICAgJ2gnID0+ICRkYXRhUGVyc2VkaWFhblsnaCddLAogICAgICAgICdpJyA9PiAkZGF0YVBlcnNlZGlhYW5bJ2knXSwKICAgICAgICAnaicgPT4gJGRhdGFQZXJzZWRpYWFuWydqJ10sCiAgICAgICAgJ2oxJyA9PiAkZGF0YVBlcnNlZGlhYW5bJ2oxJ10sCiAgICAgICAgJ3RhbmdnYWxfYnVrdScgPT4gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIi0wNy0wMSIsCiAgICAgICAgJ2pucycgPT4gJzEnLAogICAgICAgICdqZW5pc19wZXJzZWRpYWFuJyA9PiAnMScsCiAgICAgICAgJ2NhcmFfcGVyb2xlaGFuJyA9PiAnMScsCiAgICAgICAgJ2hhcmdhX3NhdHVhbicgPT4gJGFycmF5U2FsZG9Bd2FsWydqdW1sYWhIYXJnYSddIC8gJGFycmF5U2FsZG9Bd2FsWydzYWxkbyddLAogICAgICAgICdqdW1sYWgnID0+ICRhcnJheVNhbGRvQXdhbFsnc2FsZG8nXSAsCiAgICAgICAgJ3RvdGFsJyA9PiAkYXJyYXlTYWxkb0F3YWxbJ2p1bWxhaEhhcmdhJ10sCiAgICAgICAgJ3NhdHVhbicgPT4gJGdldERhdGFCYXJhbmdbJ3NhdHVhbiddLAogICAgICAgICdyZWZpZCcgPT4gJGdldElkVHJhbnNha3NpWydtYXgoaWQpJ10KICAgICAgKTsKICAgICAgJHF1ZXJ5S2FydHVQZXJzZWRpYWFuID0gJHRoaXMtPnNxbEluc2VydCgidF9rYXJ0dV9wZXJzZWRpYWFuIiwkZGF0YUthcnR1UGVyc2VkaWFhbik7CiAgICAgICR0aGlzLT5zcWxRdWVyeSgkcXVlcnlLYXJ0dVBlcnNlZGlhYW4pOwogICAgICByZXR1cm4gJGFycmF5U2FsZG9Bd2FsOwogIAl9CiAgICBmdW5jdGlvbiBjb3VudEFuZENsb3NlU2VtZXN0ZXIyKCRrb2RlU0tQRCwka29kZUJhcmFuZyl7CiAgICAgICR0aGlzLT5zcWxRdWVyeSgiZGVsZXRlIGZyb20gY291bnRfZGlzdHJpYnVzaV9wZXJzZWRpYWFuIHdoZXJlICR0aGlzLT5zdHJpbmdDb25jYXRTdWJVbml0ID0gJyRrb2RlU0tQRCcgYW5kICR0aGlzLT5zdHJpbmdDb25jYXRLb2RlQmFyYW5nPScka29kZUJhcmFuZycgYW5kIHNlbWVzdGVyID0gJzInIik7CgogICAgICAkZXJyID0gIiI7CiAgICAgICRjZWsgPSAiIjsKICAgICAgJGNvbnRlbnQgPSAiIjsKICAgICAgJGZpbHRlclBlcmlvZGUgPSAnMic7CiAgICAgICRrb25kaXNpVGFodW4gPSAiIGFuZCBsZWZ0KHRhbmdnYWxfYnVrdSw0KSA9ICciLiR0aGlzLT50YWh1bkFuZ2dhcmFuLiInICI7CiAgICAgIGlmKCFlbXB0eSgkZmlsdGVyUGVyaW9kZSkpewogICAgICAgICAgaWYoJGZpbHRlclBlcmlvZGUgPT0gJzEnKXsKICAgICAgICAgICAgICAkbWF4RmlsdGVyID0gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIjA2IjsKICAgICAgICAgICAgICAka29uZGlzaVBlcmlvZGUgID0gIiBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpIDw9ICckbWF4RmlsdGVyJyAiOwogICAgICAgICAgfWVsc2VpZigkZmlsdGVyUGVyaW9kZSA9PSAnMicpewogICAgICAgICAgICAgICRtaW5GaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMDciOwogICAgICAgICAgICAgICRtYXhGaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMTIiOwogICAgICAgICAgICAgICRrb25kaXNpUGVyaW9kZT0gIiBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpID49ICckbWluRmlsdGVyJyBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpIDw9ICckbWF4RmlsdGVyJyI7CiAgICAgICAgICAgICAgJGtvbmRpc2lTYWxkb0F3YWwgPSAiIGFuZCBpZCBub3QgaW4gKCBzZWxlY3QgaWQgZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgam5zID0gJzEnIGFuZCBqZW5pc19wZXJzZWRpYWFuID0gJzEnIGFuZCB0YW5nZ2FsX2J1a3UgPSAnIi4kdGhpcy0+dGFodW5BbmdnYXJhbi4iLSR0aGlzLT5idWxhblRhbmdnYWxTYWxkb0F3YWwnKSAiOwogICAgICAgICAgfWVsc2VpZigkZmlsdGVyUGVyaW9kZSA9PSAnMycpewogICAgICAgICAgICAgICRtYXhGaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMTIiOwogICAgICAgICAgICAgICRrb25kaXNpUGVyaW9kZSA9ICIgYW5kIHJlcGxhY2UobGVmdCh0YW5nZ2FsX2J1a3UsNyksJy0nLCcnKSA8PSAnJG1heEZpbHRlciciOwogICAgICAgICAgICAgICRrb25kaXNpU2FsZG9Bd2FsID0gIiBhbmQgaWQgbm90IGluICggc2VsZWN0IGlkIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGpucyA9ICcxJyBhbmQgamVuaXNfcGVyc2VkaWFhbiA9ICcxJyBhbmQgdGFuZ2dhbF9idWt1ID0gJyIuJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIi0wNy0wMScpICI7CiAgICAgICAgICB9CiAgICAgIH0KCiAgICAgICAgJGdldERhdGEgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHRfa2FydHVfcGVyc2VkaWFhbiB3aGVyZSAkdGhpcy0+c3RyaW5nQ29uY2F0U3ViVW5pdCA9ICcka29kZVNLUEQnIGFuZCAkdGhpcy0+c3RyaW5nQ29uY2F0S29kZUJhcmFuZz0nJGtvZGVCYXJhbmcnICIpKTsKICAgICAgICAkZGF0YUxvY2tCYXJhbmcgPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgJ2MxJyA9PiAkZ2V0RGF0YVsnYzEnXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2MnID0+ICRnZXREYXRhWydjJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdkJyA9PiAkZ2V0RGF0YVsnZCddLAogICAgICAgICAgICAgICAgICAgICAgICAnZScgPT4gJGdldERhdGFbJ2UnXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2UxJyA9PiAkZ2V0RGF0YVsnZTEnXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2YxJyA9PiAkZ2V0RGF0YVsnZjEnXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2YyJyA9PiAkZ2V0RGF0YVsnZjInXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2YnID0+ICRnZXREYXRhWydmJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdnJyA9PiAkZ2V0RGF0YVsnZyddLAogICAgICAgICAgICAgICAgICAgICAgICAnaCcgPT4gJGdldERhdGFbJ2gnXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2knID0+ICRnZXREYXRhWydpJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdqJyA9PiAkZ2V0RGF0YVsnaiddLAogICAgICAgICAgICAgICAgICAgICAgICAnajEnID0+ICRnZXREYXRhWydqMSddLAogICAgICAgICAgICAgICAgICAgICAgICAndGFodW4nID0+ICR0aGlzLT50YWh1bkFuZ2dhcmFuLAogICAgICAgICAgICAgICAgICAgICAgICAnc2VtZXN0ZXInID0+IDIsCiAgICAgICAgICAgICk7CiAgCQkJCQkkaW5zZXJ0TG9ja0JhcmFuZyA9ICR0aGlzLT5zcWxJbnNlcnQoInRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyIsJGRhdGFMb2NrQmFyYW5nKTsKICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCRpbnNlcnRMb2NrQmFyYW5nKTsKCiAgICAgICAgICAgICRpZExvY2sgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgbWF4KGlkKSBmcm9tIHRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyB3aGVyZSBjMT0nIi4kZ2V0RGF0YVsnYzEnXS4iJyBhbmQgYz0nIi4kZ2V0RGF0YVsnYyddLiInIGFuZCBkPSciLiRnZXREYXRhWydkJ10uIicgYW5kIGU9JyIuJGdldERhdGFbJ2UnXS4iJyBhbmQgZTE9JyIuJGdldERhdGFbJ2UxJ10uIicgIGFuZCBmPSciLiRnZXREYXRhWydmJ10uIicgYW5kIGc9JyIuJGdldERhdGFbJ2cnXS4iJyBhbmQgaD0nIi4kZ2V0RGF0YVsnaCddLiInIGFuZCBpPSciLiRnZXREYXRhWydpJ10uIicgYW5kIGo9JyIuJGdldERhdGFbJ2onXS4iJyBhbmQgajE9JyIuJGdldERhdGFbJ2oxJ10uIicgYW5kIHRhaHVuID0gJyIuJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIicgYW5kIHNlbWVzdGVyID0gJyIuJGZpbHRlclBlcmlvZGUuIicgIikpOwogICAgICAgICAgICAkaWRMb2NrID0gJGlkTG9ja1snbWF4KGlkKSddOwoKCiAgICAgICAgICAgICRnZXREYXRhVGFtYmFoID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHRfa2FydHVfcGVyc2VkaWFhbiB3aGVyZSBjMT0nIi4kZ2V0RGF0YVsnYzEnXS4iJyBhbmQgYz0nIi4kZ2V0RGF0YVsnYyddLiInIGFuZCBkPSciLiRnZXREYXRhWydkJ10uIicgYW5kIGU9JyIuJGdldERhdGFbJ2UnXS4iJyBhbmQgZTE9JyIuJGdldERhdGFbJ2UxJ10uIicgIGFuZCBmPSciLiRnZXREYXRhWydmJ10uIicgYW5kIGc9JyIuJGdldERhdGFbJ2cnXS4iJyBhbmQgaD0nIi4kZ2V0RGF0YVsnaCddLiInIGFuZCBpPSciLiRnZXREYXRhWydpJ10uIicgYW5kIGo9JyIuJGdldERhdGFbJ2onXS4iJyBhbmQgajE9JyIuJGdldERhdGFbJ2oxJ10uIicgYW5kIGplbmlzX3BlcnNlZGlhYW4gPSAnMScgJGtvbmRpc2lUYWh1biAka29uZGlzaVBlcmlvZGUgJGtvbmRpc2lTYWxkb0F3YWwgb3JkZXIgYnkgdGFuZ2dhbF9idWt1IGFzYyIpOwogICAgICAgICAgICB3aGlsZSAoJGRhdGFUYW1iYWggPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFUYW1iYWgpKSB7CiAgCQkJCQkJaWYoJGRhdGFUYW1iYWhbJ2pucyddID09ICczJyl7CiAgCQkJCQkJJGdldERhdGFEZXRhaWxEaXN0cmlidXNpID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBkZXRhaWxfcmluY2lhbl9kaXN0cmlidXNpIHdoZXJlICBpZCA9ICciLiRkYXRhVGFtYmFoWydyZWZpZCddLiInIikpOwogIAkJCQkJCSRnZXREYXRhUmluY2lhbkRpc3RyaWJ1c2kgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJpbmNpYW5fZGlzdHJpYnVzaSB3aGVyZSAgaWQgPSAnIi4kZ2V0RGF0YURldGFpbERpc3RyaWJ1c2lbJ2lkX3JpbmNpYW5fZGlzdHJpYnVzaSddLiInIikpOwogIAkJCQkJCSRkYXRhQ291bnREaXN0cmlidXNpID0gYXJyYXkoCiAgCQkJCQkJCQkJCQkJJ2lkX2xvY2tfYmFyYW5nJyA9PiAkaWRMb2NrLAogIAkJCQkJCQkJCQkJCSdjMScgPT4gJGdldERhdGFbJ2MxJ10sCiAgCQkJCQkJCQkJCQkJJ2MnID0+ICRnZXREYXRhWydjJ10sCiAgCQkJCQkJCQkJCQkJJ2QnID0+ICRnZXREYXRhWydkJ10sCiAgCQkJCQkJCQkJCQkJJ2UnID0+ICRnZXREYXRhWydlJ10sCiAgCQkJCQkJCQkJCQkJJ2UxJyA9PiAkZ2V0RGF0YVsnZTEnXSwKICAJCQkJCQkJCQkJCQknZicgPT4gJGdldERhdGFbJ2YnXSwKICAJCQkJCQkJCQkJCQknZycgPT4gJGdldERhdGFbJ2cnXSwKICAJCQkJCQkJCQkJCQknaCcgPT4gJGdldERhdGFbJ2gnXSwKICAJCQkJCQkJCQkJCQknaScgPT4gJGdldERhdGFbJ2knXSwKICAJCQkJCQkJCQkJCQknaicgPT4gJGdldERhdGFbJ2onXSwKICAJCQkJCQkJCQkJCQknajEnID0+ICRnZXREYXRhWydqMSddLAogIAkJCQkJCQkJCQkJCSdpZF9kaXN0cmlidXNpJyA9PiAkZ2V0RGF0YVJpbmNpYW5EaXN0cmlidXNpWydpZF9kaXN0cmlidXNpJ10sCiAgCQkJCQkJCQkJCQkJJ2lkX3JpbmNpYW5fZGlzdHJpYnVzaScgPT4gJGdldERhdGFEZXRhaWxEaXN0cmlidXNpWydpZF9yaW5jaWFuX2Rpc3RyaWJ1c2knXSwKICAJCQkJCQkJCQkJCQknc2VtZXN0ZXInID0+IDIsCiAgCQkJCQkJCQkJCQkJJ25vbW9yJyA9PiAkZGF0YVRhbWJhaFsnbm9tb3InXSwKICAJCQkJCQkJCQkJCQknaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJyA9PiAkZGF0YVRhbWJhaFsnaWQnXQoKICAJCQkJCQkpOwogIAkJCQkJCSR0aGlzLT5zcWxRdWVyeSgkdGhpcy0+c3FsSW5zZXJ0KCdjb3VudF9kaXN0cmlidXNpX3BlcnNlZGlhYW4nLCRkYXRhQ291bnREaXN0cmlidXNpKSk7CiAgCQkJCQkgfQogICAgICAgICAgICAgICAgJGRhdGFMb2NrVGFtYmFoID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFuZ2dhbCcgPT4gJGRhdGFUYW1iYWhbJ3RhbmdnYWxfYnVrdSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbicgPT4gJGRhdGFUYW1iYWhbJ2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnanVtbGFoJyA9PiAkZGF0YVRhbWJhaFsnanVtbGFoJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFyZ2EnID0+ICRkYXRhVGFtYmFoWydoYXJnYV9zYXR1YW4nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzaXNhJyA9PiAkZGF0YVRhbWJhaFsnanVtbGFoJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfbG9jaycgPT4gJGlkTG9jaywKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAkdGhpcy0+c3FsUXVlcnkoJHRoaXMtPnNxbEluc2VydCgnbG9ja19iYXJhbmdfdGFtYmFoJywkZGF0YUxvY2tUYW1iYWgpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGdldERhdGFLdXJhbmcgPSAkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGMxPSciLiRnZXREYXRhWydjMSddLiInIGFuZCBjPSciLiRnZXREYXRhWydjJ10uIicgYW5kIGU9JyIuJGdldERhdGFbJ2UnXS4iJyBhbmQgZTE9JyIuJGdldERhdGFbJ2UxJ10uIicgYW5kIGQ9JyIuJGdldERhdGFbJ2QnXS4iJyAgYW5kIGY9JyIuJGdldERhdGFbJ2YnXS4iJyBhbmQgZz0nIi4kZ2V0RGF0YVsnZyddLiInIGFuZCBoPSciLiRnZXREYXRhWydoJ10uIicgYW5kIGk9JyIuJGdldERhdGFbJ2knXS4iJyBhbmQgaj0nIi4kZ2V0RGF0YVsnaiddLiInIGFuZCBqMT0nIi4kZ2V0RGF0YVsnajEnXS4iJyBhbmQgamVuaXNfcGVyc2VkaWFhbiA9ICcyJyAka29uZGlzaVRhaHVuICRrb25kaXNpUGVyaW9kZSAka29uZGlzaVNhbGRvQXdhbCBvcmRlciBieSB0YW5nZ2FsX2J1a3UgYXNjIik7CiAgCQkJCQkkYXJyYXlQZXJvbGVoYW4gPSBhcnJheSgpOwogIAkJCQkJJGFycmF5SWRQZW5nZWx1YXJhbkRpc3RyaWJ1c2kgPSBhcnJheSgpOwogICAgICAgICAgICB3aGlsZSAoJGRhdGFLdXJhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFLdXJhbmcpKSB7CiAgICAgICAgICAgICAgICAkanVtbGFoQmFyYW5nS3VyYW5nID0gJGRhdGFLdXJhbmdbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgJGdldERhdGFQZW5lcmltYWFuID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGxvY2tfYmFyYW5nX3RhbWJhaCB3aGVyZSBpZF9sb2NrID0gJyIuJGlkTG9jay4iJyBhbmQgc2lzYSAhPScwJyIpOwogICAgICAgICAgICAgICAgd2hpbGUgKCRkYXRhUGVuZXJpbWFhbiA9ICR0aGlzLT5zcWxBcnJheSgkZ2V0RGF0YVBlbmVyaW1hYW4pKSB7CiAgICAgICAgICAgICAgICAgICAgaWYoJGp1bWxhaEJhcmFuZ0t1cmFuZyAhPSAwKXsKICAJCQkJCQkJCQkJJGdldEthcnR1UGVyc2VkaWFhbiA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGlkID0gJyIuJGRhdGFQZW5lcmltYWFuWydpZF90X2thcnR1X3BlcnNlZGlhYW4nXS4iJyIpKTsKICAJCQkJCQkJCQkJaWYoJGdldEthcnR1UGVyc2VkaWFhblsnam5zJ10gPT0gJzMnKXsKICAJCQkJCQkJCQkJCQlpZihpbnR2YWwoJGdldEthcnR1UGVyc2VkaWFhblsnaGFyZ2Ffc2F0dWFuJ10pID09IDApewogIAkJCQkJCQkJCQkJCQlpZigkdGhpcy0+c3FsTnVtUm93KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBjb3VudF9kaXN0cmlidXNpX3BlcnNlZGlhYW4gd2hlcmUgbm9tb3IgPSAnIi4kZ2V0S2FydHVQZXJzZWRpYWFuWydub21vciddLiInIGFuZCBzZW1lc3RlciA9ICcyJyBhbmQgdGFtYmFoYW5faGFyZ2EgIT0nJyIpKSAhPSAwKXsKICAJCQkJCQkJCQkJCQkJCSRnZXREYXRhQ291bnREaXN0cmlidXNpID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBjb3VudF9kaXN0cmlidXNpX3BlcnNlZGlhYW4gd2hlcmUgbm9tb3IgPSAnIi4kZ2V0S2FydHVQZXJzZWRpYWFuWydub21vciddLiInIGFuZCBzZW1lc3RlciA9ICcyJyBhbmQgdGFtYmFoYW5faGFyZ2EgIT0nJyIpKTsKICAJCQkJCQkJCQkJCQkJCSRoYXJnYVNhdHVhblBlbmVyaW1hYW4gPSAkZ2V0RGF0YUNvdW50RGlzdHJpYnVzaVsndGFtYmFoYW5faGFyZ2EnXSAvICRnZXRLYXJ0dVBlcnNlZGlhYW5bJ2p1bWxhaCddOwogIAkJCQkJCQkJCQkJCQkJJGRhdGFVcGRhdGVEaXN0cmlidXNpS2FydHUgPSBhcnJheSgKICAJCQkJCQkJCQkJCQkJCQknaGFyZ2Ffc2F0dWFuJyA9PiAkaGFyZ2FTYXR1YW5QZW5lcmltYWFuLAogIAkJCQkJCQkJCQkJCQkJCSd0b3RhbCcgPT4gJGdldERhdGFDb3VudERpc3RyaWJ1c2lbJ3RhbWJhaGFuX2hhcmdhJ10sCiAgCQkJCQkJCQkJCQkJCQkpOwogIAkJCQkJCQkJCQkJCQkJJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxVcGRhdGUoInRfa2FydHVfcGVyc2VkaWFhbiIsJGRhdGFVcGRhdGVEaXN0cmlidXNpS2FydHUsImlkID0gJyIuJGRhdGFQZW5lcmltYWFuWydpZF90X2thcnR1X3BlcnNlZGlhYW4nXS4iJyIpKTsKICAJCQkJCQkJCQkJCQkJCSR0aGlzLT5zcWxRdWVyeSgiZGVsZXRlIGZyb20gY291bnRfZGlzdHJpYnVzaV9wZXJzZWRpYWFuIHdoZXJlIG5vbW9yPSciLiRnZXRLYXJ0dVBlcnNlZGlhYW5bJ25vbW9yJ10uIiciKTsKICAJCQkJCQkJCQkJCQkJfQogIAkJCQkJCQkJCQkJCX0KICAJCQkJCQkJCQkJfWVsc2V7CiAgCQkJCQkJCQkJCQkkaGFyZ2FTYXR1YW5QZW5lcmltYWFuID0gJGRhdGFQZW5lcmltYWFuWydoYXJnYSddOwogIAkJCQkJCQkJCQl9CiAgICAgICAgICAgICAgICAgICAgICBpZigkanVtbGFoQmFyYW5nS3VyYW5nID4gJGRhdGFQZW5lcmltYWFuWydzaXNhJ10gKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+c3FsUXVlcnkoInVwZGF0ZSBsb2NrX2JhcmFuZ190YW1iYWggc2V0IHNpc2EgPSBzaXNhIC0gIi4kZGF0YVBlbmVyaW1hYW5bJ3Npc2EnXS4iIHdoZXJlIGlkID0gJyIuJGRhdGFQZW5lcmltYWFuWydpZCddLiInIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgJGFycmF5UGVyb2xlaGFuW10gPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZFBlbmVyaW1hYW4nID0+ICRkYXRhUGVuZXJpbWFhblsnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnanVtbGFoJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ3Npc2EnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoYXJnYScgPT4gJGhhcmdhU2F0dWFuUGVuZXJpbWFhbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3RhbCcgPT4gJGRhdGFQZW5lcmltYWFuWydzaXNhJ10gKiAkaGFyZ2FTYXR1YW5QZW5lcmltYWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgJGp1bWxhaEJhcmFuZ0t1cmFuZyAtPSAkZGF0YVBlbmVyaW1hYW5bJ3Npc2EnXTsKICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgidXBkYXRlIGxvY2tfYmFyYW5nX3RhbWJhaCBzZXQgc2lzYSA9IHNpc2EgLSAkanVtbGFoQmFyYW5nS3VyYW5nIHdoZXJlIGlkID0gJyIuJGRhdGFQZW5lcmltYWFuWydpZCddLiInIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgJGFycmF5UGVyb2xlaGFuW10gPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZFBlbmVyaW1hYW4nID0+ICRkYXRhUGVuZXJpbWFhblsnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnanVtbGFoJyA9PiAkanVtbGFoQmFyYW5nS3VyYW5nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhcmdhJyA9PiAkaGFyZ2FTYXR1YW5QZW5lcmltYWFuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvdGFsJyA9PiAkanVtbGFoQmFyYW5nS3VyYW5nICogJGhhcmdhU2F0dWFuUGVuZXJpbWFhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICRqdW1sYWhCYXJhbmdLdXJhbmcgPSAwOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRlbmNvZGluZyA9IGpzb25fZW5jb2RlKCRhcnJheVBlcm9sZWhhbik7CiAgICAgICAgICAgICAgICAkZGVjb2RpbmcgPSBqc29uX2RlY29kZSgkZW5jb2RpbmcpOwogICAgICAgICAgICAgICAgJGhhcmdhUGVyb2xlaGFuPSAwOwogICAgICAgICAgICAgICAgZm9yICgkaT0wOyAkaSA8IHNpemVvZigkZGVjb2RpbmcpIDsgJGkrKykgewogICAgICAgICAgICAgICAgICAgICRoYXJnYVBlcm9sZWhhbiArPSAkZGVjb2RpbmdbJGldLT50b3RhbDsKICAgICAgICAgICAgICAgIH0KICAJCQkJCQkJaWYoJGRhdGFLdXJhbmdbJ2pucyddID09ICI3Iil7CiAgCQkJCQkJCQkvL2h1YmxhCiAgCQkJCQkJCQkkYXJyYXlJZFBlbmdlbHVhcmFuRGlzdHJpYnVzaVtdID0gJGRhdGFLdXJhbmdbJ2lkJ107CiAgCQkJCQkJCQkkZ2V0RGF0YURldGFpbERpc3RyaWJ1c2kgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGRldGFpbF9yaW5jaWFuX2Rpc3RyaWJ1c2kgd2hlcmUgIGlkID0gJyIuJGRhdGFLdXJhbmdbJ3JlZmlkJ10uIiciKSk7CiAgCQkJCQkJCQkkZ2V0RGF0YVJpbmNpYW5EaXN0cmlidXNpID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByaW5jaWFuX2Rpc3RyaWJ1c2kgd2hlcmUgIGlkID0gJyIuJGdldERhdGFEZXRhaWxEaXN0cmlidXNpWydpZF9yaW5jaWFuX2Rpc3RyaWJ1c2knXS4iJyIpKTsKICAJCQkJCQkJCSRkYXRhQ291bnREaXN0cmlidXNpID0gYXJyYXkoCiAgCQkJCQkJCQkJCQkJCQknaWRfbG9ja19iYXJhbmcnID0+ICRpZExvY2ssCiAgCQkJCQkJCQkJCQkJCQknYzEnID0+ICRnZXREYXRhWydjMSddLAogIAkJCQkJCQkJCQkJCQkJJ2MnID0+ICRnZXREYXRhWydjJ10sCiAgCQkJCQkJCQkJCQkJCQknZCcgPT4gJGdldERhdGFbJ2QnXSwKICAJCQkJCQkJCQkJCQkJCSdlJyA9PiAkZ2V0RGF0YVsnZSddLAogIAkJCQkJCQkJCQkJCQkJJ2UxJyA9PiAkZ2V0RGF0YVsnZTEnXSwKICAJCQkJCQkJCQkJCQkJCSdmJyA9PiAkZ2V0RGF0YVsnZiddLAogIAkJCQkJCQkJCQkJCQkJJ2cnID0+ICRnZXREYXRhWydnJ10sCiAgCQkJCQkJCQkJCQkJCQknaCcgPT4gJGdldERhdGFbJ2gnXSwKICAJCQkJCQkJCQkJCQkJCSdpJyA9PiAkZ2V0RGF0YVsnaSddLAogIAkJCQkJCQkJCQkJCQkJJ2onID0+ICRnZXREYXRhWydqJ10sCiAgCQkJCQkJCQkJCQkJCQknajEnID0+ICRnZXREYXRhWydqMSddLAogIAkJCQkJCQkJCQkJCQkJJ2lkX2Rpc3RyaWJ1c2knID0+ICRnZXREYXRhUmluY2lhbkRpc3RyaWJ1c2lbJ2lkX2Rpc3RyaWJ1c2knXSwKICAJCQkJCQkJCQkJCQkJCSdpZF9yaW5jaWFuX2Rpc3RyaWJ1c2knID0+ICRnZXREYXRhRGV0YWlsRGlzdHJpYnVzaVsnaWRfcmluY2lhbl9kaXN0cmlidXNpJ10sCiAgCQkJCQkJCQkJCQkJCQknc2VtZXN0ZXInID0+IDIsCiAgCQkJCQkJCQkJCQkJCQknbm9tb3InID0+ICRkYXRhS3VyYW5nWydub21vciddLAogIAkJCQkJCQkJCQkJCQkJJ3RhbWJhaGFuX2hhcmdhJyA9PiAkaGFyZ2FQZXJvbGVoYW4sCiAgCQkJCQkJCQkJCQkJCQknanNvbl9hcnJheScgPT4gJGVuY29kaW5nCiAgCQkJCQkJCQkpOwogIAkJCQkJCQkJJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ2NvdW50X2Rpc3RyaWJ1c2lfcGVyc2VkaWFhbicsJGRhdGFDb3VudERpc3RyaWJ1c2kpKTsKICAJCQkJCQkJfQogIAkJCQkJCQkkc2V0YW4gPSAwIDsKICAJCQkJCQkJJGxvZ1NldGFuID0iIiA7CiAgCQkJCQkJCWZvciAoJHp4Yz0wOyAkenhjIDwgc2l6ZW9mKCRhcnJheVBlcm9sZWhhbik7ICR6eGMrKykgewogIAkJCQkJCQkJJHNldGFuICs9ICRhcnJheVBlcm9sZWhhblskenhjXVsndG90YWwnXTsKICAJCQkJCQkJCSRsb2dTZXRhbiAuPSIgIi4kYXJyYXlQZXJvbGVoYW5bJHp4Y11bJ3RvdGFsJ10uIiAiOwogIAkJCQkJCQl9CiAgCQkJCQkJCSRkYXRhTG9ja0t1cmFuZyA9IGFycmF5KAogIAkJCQkJCQkJCQkJCQkndGFuZ2dhbCcgPT4gJGRhdGFLdXJhbmdbJ3RhbmdnYWxfYnVrdSddLAogIAkJCQkJCQkJCQkJCQknaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJyA9PiAkZGF0YUt1cmFuZ1snaWQnXSwKICAJCQkJCQkJCQkJCQkJJ2p1bWxhaCcgPT4gJGRhdGFLdXJhbmdbJ2p1bWxhaCddLAogIAkJCQkJCQkJCQkJCQknaGFyZ2EnID0+ICRzZXRhbiwKICAJCQkJCQkJCQkJCQkJJ2lkX2xvY2snID0+ICRpZExvY2ssCiAgCQkJCQkJCQkJCQkJCSdwZXJvbGVoYW4nID0+IGpzb25fZW5jb2RlKCRhcnJheVBlcm9sZWhhbiksCiAgCQkJCQkJCQkJCQkJCS8vICdsb2cnID0+ICRsb2dTZXRhbi4iIGVuY29kZSAiLmpzb25fZW5jb2RlKCRhcnJheVBlcm9sZWhhbiksCgogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgkdGhpcy0+c3FsSW5zZXJ0KCdsb2NrX2JhcmFuZ19rdXJhbmcnLCRkYXRhTG9ja0t1cmFuZykpOwogIAkJCQkJCQkkYXJyYXlQZXJvbGVoYW4gPSBhcnJheSgpOwogICAgICAgICAgICB9CgoKICAgICAgICAgICAgJGdldERhdGFIaXN0b3JpID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHRfa2FydHVfcGVyc2VkaWFhbiB3aGVyZSBjMT0nIi4kZ2V0RGF0YVsnYzEnXS4iJyBhbmQgYz0nIi4kZ2V0RGF0YVsnYyddLiInIGFuZCBkPSciLiRnZXREYXRhWydkJ10uIicgYW5kIGU9JyIuJGdldERhdGFbJ2UnXS4iJyBhbmQgZTE9JyIuJGdldERhdGFbJ2UxJ10uIicgIGFuZCBmPSciLiRnZXREYXRhWydmJ10uIicgYW5kIGc9JyIuJGdldERhdGFbJ2cnXS4iJyBhbmQgaD0nIi4kZ2V0RGF0YVsnaCddLiInIGFuZCBpPSciLiRnZXREYXRhWydpJ10uIicgYW5kIGo9JyIuJGdldERhdGFbJ2onXS4iJyBhbmQgajE9JyIuJGdldERhdGFbJ2oxJ10uIicgICRrb25kaXNpVGFodW4gJGtvbmRpc2lQZXJpb2RlICRrb25kaXNpU2FsZG9Bd2FsIG9yZGVyIGJ5IHRhbmdnYWxfYnVrdSxqZW5pc19wZXJzZWRpYWFuIGFzYyIpOwogICAgICAgICAgICB3aGlsZSAoJGRhdGFIaXN0b3JpID0gJHRoaXMtPnNxbEFycmF5KCRnZXREYXRhSGlzdG9yaSkpIHsKICAgICAgICAgICAgICAgIGlmKCRkYXRhSGlzdG9yaVsnamVuaXNfcGVyc2VkaWFhbiddID09IDEpewogICAgICAgICAgICAgICAgICBpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICcxJyl7CiAgICAgICAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJTQUxETyBBV0FMIjsKICAgICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICcyJyl7CiAgICAgICAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgICAgICAgICBpZigkZGF0YUhpc3RvcmlbJ2NhcmFfcGVyb2xlaGFuJ10gPT0gJzInKXsKICAgICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkVSSU1BQU4gUEVNQkVMSUFOIjsKICAgICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnY2FyYV9wZXJvbGVoYW4nXSA9PSAnMycpewogICAgICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiUEVORVJJTUFBTiBISUJBSCI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzQnKXsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAwOwogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIkNFSyBGSVNJSyBUQU1CQUgiOwogICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzMnKXsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAwOwogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkVSSU1BQU4gRElTVFJJQlVTSSI7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgJGhhcmdhU2F0dWFuID0gJGRhdGFIaXN0b3JpWydoYXJnYV9zYXR1YW4nXTsKICAgICAgICAgICAgICAgICAgJHRvdGFsSGFyZ2EgPSAkaGFyZ2FTYXR1YW4gKiAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAkc2FsZG9CYXJhbmcgKz0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgJHRvdGFsU2FsZG8gKz0gJHRvdGFsSGFyZ2E7CgogICAgICAgICAgICAgICAgICAkZ2V0SWREZXRhaWwgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGxvY2tfYmFyYW5nX3RhbWJhaCB3aGVyZSBpZF9sb2NrID0gJyRpZExvY2snIGFuZCBpZF90X2thcnR1X3BlcnNlZGlhYW4gPSAnIi4kZGF0YUhpc3RvcmlbJ2lkJ10uIiciKSk7CiAgICAgICAgICAgICAgICAgICRpZERldGFpbCA9ICRnZXRJZERldGFpbFsnaWQnXTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzYnKXsKICAgICAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gMDsKICAgICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkdFTFVBUkFOIjsKICAgICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzUnKXsKICAgICAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gMDsKICAgICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIkNFSyBGSVNJSyBLVVJBTkciOwogICAgICAgICAgICAgICAgICAgIH1lbHNlaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnNycpewogICAgICAgICAgICAgICAgICAgICAgJGJhcmFuZ0tlbHVhciA9ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAwOwogICAgICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiUEVOR0VMVUFSQU4gRElTVFJJQlVTSSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRoYXJnYVNhdHVhbiA9ICIiOwogICAgICAgICAgICAgICAgICAkc2FsZG9CYXJhbmcgLT0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgJGdldFRvdGFsSGFyZ2EgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGxvY2tfYmFyYW5nX2t1cmFuZyB3aGVyZSBpZF9sb2NrID0gJyRpZExvY2snIGFuZCBpZF90X2thcnR1X3BlcnNlZGlhYW4gPSAnIi4kZGF0YUhpc3RvcmlbJ2lkJ10uIiciKSk7CiAgICAgICAgICAgICAgICAgICR0b3RhbEhhcmdhID0gJGdldFRvdGFsSGFyZ2FbJ2hhcmdhJ107CiAgICAgICAgICAgICAgICAgICR0b3RhbFNhbGRvIC09ICR0b3RhbEhhcmdhOwogICAgICAgICAgICAgICAgICAkaWREZXRhaWwgPSAkZ2V0VG90YWxIYXJnYVsnaWQnXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRkYXRhUmluY2lhbkxvY2sgPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZF9sb2NrJyA9PiAkaWRMb2NrLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhbmdnYWwnID0+ICRkYXRhSGlzdG9yaVsndGFuZ2dhbF9idWt1J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndXJhaWFuJyA9PiAkdXJhaWFuUGVyc2VkaWFhbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYXN1aycgPT4gJGJhcmFuZ01hc3VrLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2tlbHVhcicgPT4gJGJhcmFuZ0tlbHVhciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzYWxkb19iYXJhbmcnID0+ICRzYWxkb0JhcmFuZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3RhbCcgPT4gJHRvdGFsSGFyZ2EsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2FsZG8nID0+ICR0b3RhbFNhbGRvLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnID0+ICRkYXRhSGlzdG9yaVsnamVuaXNfcGVyc2VkaWFhbiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbicgPT4gJGRhdGFIaXN0b3JpWydpZCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX2RldGFpbCcgPT4gJGlkRGV0YWlsLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgkdGhpcy0+c3FsSW5zZXJ0KCdyaW5jaWFuX2xvY2tfYmFyYW5nJywkZGF0YVJpbmNpYW5Mb2NrKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCJ1cGRhdGUgdF9wZXJzZWRpYWFuX2xvY2tfYmFyYW5nIHNldCBoYXJnYSA9ICckdG90YWxTYWxkbycsIHNhbGRvX2JhcmFuZyA9ICckc2FsZG9CYXJhbmcnIHdoZXJlIGlkID0gJyRpZExvY2snIik7CiAgICAgICAgcmV0dXJuIGFycmF5KAogICAgICAgICAgJ2lkTG9jaycgPT4gJGlkTG9jaywKICAgICAgICAgICdqdW1sYWhIYXJnYScgPT4gJHRvdGFsU2FsZG8sCiAgICAgICAgICAnc2FsZG8nID0+ICRzYWxkb0JhcmFuZywKICAJCQkJJ2FycmF5SWRQZW5nZWx1YXJhbkRpc3RyaWJ1c2knID0+ICRhcnJheUlkUGVuZ2VsdWFyYW5EaXN0cmlidXNpCiAgICAgICAgKTsKICAgIH0KICAgIGZ1bmN0aW9uIHRhbWJhaEhhcmdhRGlzdHJpYnVzaSgka29kZVNLUEQsJGZpbHRlclBlcmlvZGUpewogIAkJJGdldERhdGFDb3VudCA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBjb3VudF9kaXN0cmlidXNpX3BlcnNlZGlhYW4gd2hlcmUgY29uY2F0KGMxLCcuJyxjLCcuJyxkLCcuJyxlLCcuJyxlMSkgPSAnJGtvZGVTS1BEJyBhbmQgc2VtZXN0ZXIgPSAnJGZpbHRlclBlcmlvZGUnIGFuZCB0YW1iYWhhbl9oYXJnYT0nJyIpOwogIAkJd2hpbGUgKCRkYXRhQ291bnQgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFDb3VudCkpIHsKICAJCQkkaWRMb2NrQmFyYW5nID0gJGRhdGFDb3VudFsnaWRfbG9ja19iYXJhbmcnXTsKICAJCQkkaWRLYXJ0dVBlcnNlZGlhYW4gPSAkZGF0YUNvdW50WydpZF90X2thcnR1X3BlcnNlZGlhYW4nXTsKICAJCQlpZigkdGhpcy0+c3FsTnVtUm93KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBjb3VudF9kaXN0cmlidXNpX3BlcnNlZGlhYW4gd2hlcmUgbm9tb3IgPSAnIi4kZGF0YUNvdW50Wydub21vciddLiInIikpID09IDIpewogIAkJCQkkZ2V0RGF0YUhhcmdhID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBjb3VudF9kaXN0cmlidXNpX3BlcnNlZGlhYW4gd2hlcmUgbm9tb3IgPSAnIi4kZGF0YUNvdW50Wydub21vciddLiInIGFuZCB0YW1iYWhhbl9oYXJnYSAhPScnIikpOwogIAkJCQkkZ2V0RGF0YUthcnR1UGVyc2VkaWFhbiA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGlkID0gJyIuJGlkS2FydHVQZXJzZWRpYWFuLiInIikpOwogIAkJCQkvLyBpZihpbnR2YWwoJGdldERhdGFLYXJ0dVBlcnNlZGlhYW5bJ2hhcmdhX3NhdHVhbiddKSA9PSAwKXsKICAJCQkJCSRoYXJnYVNhdHVhbiA9ICRnZXREYXRhSGFyZ2FbJ3RhbWJhaGFuX2hhcmdhJ10gLyAkZ2V0RGF0YUthcnR1UGVyc2VkaWFhblsnanVtbGFoJ10gOwogIAkJCQkJJGhhcmdhVGFtYmFoYW4gPSAgJGdldERhdGFIYXJnYVsndGFtYmFoYW5faGFyZ2EnXTsKICAJCQkJCSRkYXRhVXBkYXRlRGlzdHJpYnVzaUthcnR1ID0gYXJyYXkoCiAgCQkJCQkJJ2hhcmdhX3NhdHVhbicgPT4gJGhhcmdhU2F0dWFuLAogIAkJCQkJCSd0b3RhbCcgPT4gJGdldERhdGFIYXJnYVsndGFtYmFoYW5faGFyZ2EnXSwKICAJCQkJCSk7CiAgCQkJCQkkdGhpcy0+c3FsUXVlcnkoJHRoaXMtPnNxbFVwZGF0ZSgidF9rYXJ0dV9wZXJzZWRpYWFuIiwkZGF0YVVwZGF0ZURpc3RyaWJ1c2lLYXJ0dSwiaWQgPSAnIi4kaWRLYXJ0dVBlcnNlZGlhYW4uIiciKSk7CiAgCQkJCQkkdGhpcy0+c3FsUXVlcnkoIlVQREFURSBsb2NrX2JhcmFuZ190YW1iYWggc2V0IGhhcmdhID0gICRoYXJnYVRhbWJhaGFuIHdoZXJlIGlkX2xvY2sgPSAnJGlkTG9ja0JhcmFuZycgYW5kIGlkX3Rfa2FydHVfcGVyc2VkaWFhbiA9ICckaWRLYXJ0dVBlcnNlZGlhYW4nIik7CiAgCQkJCQkkdGhpcy0+c3FsUXVlcnkoIlVQREFURSByaW5jaWFuX2xvY2tfYmFyYW5nIHNldCB0b3RhbCA9ICAkaGFyZ2FUYW1iYWhhbiB3aGVyZSBpZF9sb2NrID0gJyRpZExvY2tCYXJhbmcnIGFuZCBpZF90X2thcnR1X3BlcnNlZGlhYW4gPSAnJGlkS2FydHVQZXJzZWRpYWFuJyBhbmQgdHlwZSA9ICcxJyIpOwogIAkJCQkJJGdldERhdGFLdXJhbmcgPSAkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gbG9ja19iYXJhbmdfa3VyYW5nIHdoZXJlIGlkX2xvY2sgPSAnIi4kZGF0YUNvdW50WydpZF9sb2NrX2JhcmFuZyddLiInIik7CiAgCQkJCQl3aGlsZSAoJGRhdGFLdXJhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFLdXJhbmcpKSB7CiAgICAgICAgICAgIAkkYXJyYXlQZXJvbGVoYW4gPSBqc29uX2RlY29kZSgkZGF0YUt1cmFuZ1sncGVyb2xlaGFuJ10pOwogIAkJCQkJCSRhcnJheUZpeFBlcm9sZWhhbiA9IGFycmF5KCk7CiAgCQkJCQkJJGhhcmdhVXBkYXRlS3VyYW5nID0gMDsKICAJCQkJCQlmb3IgKCRpPTA7ICRpIDwgc2l6ZW9mKCRhcnJheVBlcm9sZWhhbikgOyAkaSsrKSB7CiAgCQkJCQkJCWlmKCRpZEthcnR1UGVyc2VkaWFhbiA9PSAkYXJyYXlQZXJvbGVoYW5bJGldLT5pZFBlbmVyaW1hYW4pewogIAkJCQkJCQkJLy8gJGNlayAuPSAkYXJyYXlQZXJvbGVoYW5bJGldLT5pZFBlbmVyaW1hYW4uICIgOiAiLiRpZEthcnR1UGVyc2VkaWFhbjsKICAJCQkJCQkJCSRoYXJnYVRhbWJhaGFuIC09ICRkYXRhS3VyYW5nWydqdW1sYWgnXSAqICRoYXJnYVNhdHVhbjsKICAJCQkJCQkJCSRoYXJnYUt1cmFuZyA9ICRkYXRhS3VyYW5nWydqdW1sYWgnXSAqICRoYXJnYVNhdHVhbjsKICAJCQkJCQkJCSRhcnJheUZpeFBlcm9sZWhhbltdID0gYXJyYXkoCiAgCQkJCQkJCQkJImlkUGVuZXJpbWFhbiIgPT4gJGFycmF5UGVyb2xlaGFuWyRpXS0+aWRQZW5lcmltYWFuLAogIAkJCQkJCQkJCSJqdW1sYWgiID0+ICRhcnJheVBlcm9sZWhhblskaV0tPmp1bWxhaCwKICAJCQkJCQkJCQkiaGFyZ2EiID0+ICRoYXJnYVNhdHVhbiwKICAJCQkJCQkJCQkidG90YWwiID0+ICRhcnJheVBlcm9sZWhhblskaV0tPmp1bWxhaCAqICRoYXJnYVNhdHVhbiAsCiAgCQkJCQkJCQkpOwogIAkJCQkJCQkJJHRoaXMtPnNxbFF1ZXJ5KCJVUERBVEUgcmluY2lhbl9sb2NrX2JhcmFuZyBzZXQgdG90YWwgPSB0b3RhbCArICRoYXJnYUt1cmFuZywgc2FsZG8gPSBzYWxkbyAtICRoYXJnYUt1cmFuZyB3aGVyZSBpZF9kZXRhaWwgPSAnIi4kZGF0YUt1cmFuZ1snaWQnXS4iJyAiKTsKICAJCQkJCQkJCSRjZWsgLj0gIlVQREFURSByaW5jaWFuX2xvY2tfYmFyYW5nIHNldCB0b3RhbCA9IHRvdGFsICsgJGhhcmdhS3VyYW5nLCBzYWxkbyA9IHNhbGRvIC0gJGhhcmdhS3VyYW5nIHdoZXJlIGlkX2RldGFpbCA9ICciLiRkYXRhS3VyYW5nWydpZCddLiInICB8fCAiOwogIAkJCQkJCQkJJHRoaXMtPnNxbFF1ZXJ5KCJVUERBVEUgbG9ja19iYXJhbmdfa3VyYW5nIFNFVCBoYXJnYSA9IGhhcmdhICsgJGhhcmdhS3VyYW5nICB3aGVyZSBpZCA9ICciLiRkYXRhS3VyYW5nWydpZCddLiInIik7CiAgCQkJCQkJCQkkaGFyZ2FVcGRhdGVLdXJhbmcgKz0gJGFycmF5UGVyb2xlaGFuWyRpXS0+anVtbGFoICogJGhhcmdhU2F0dWFuOwogIAkJCQkJCQl9ZWxzZXsKICAJCQkJCQkJCSRhcnJheUZpeFBlcm9sZWhhbltdID0gYXJyYXkoCiAgCQkJCQkJCQkJImlkUGVuZXJpbWFhbiIgPT4gJGFycmF5UGVyb2xlaGFuWyRpXS0+aWRQZW5lcmltYWFuLAogIAkJCQkJCQkJCSJqdW1sYWgiID0+ICRhcnJheVBlcm9sZWhhblskaV0tPmp1bWxhaCwKICAJCQkJCQkJCQkiaGFyZ2EiID0+ICRhcnJheVBlcm9sZWhhblskaV0tPmhhcmdhLAogIAkJCQkJCQkJCSJ0b3RhbCIgPT4gJGFycmF5UGVyb2xlaGFuWyRpXS0+dG90YWwsCiAgCQkJCQkJCQkpOwogIAkJCQkJCQkJJGhhcmdhVXBkYXRlS3VyYW5nICs9ICRhcnJheVBlcm9sZWhhblskaV0tPnRvdGFsOwogIAkJCQkJCQl9CiAgCQkJCQkJfQogIAkJCQkJCSR0aGlzLT5zcWxRdWVyeSgiVVBEQVRFIGxvY2tfYmFyYW5nX2t1cmFuZyBTRVQgcGVyb2xlaGFuID0gJyIuanNvbl9lbmNvZGUoJGFycmF5Rml4UGVyb2xlaGFuKS4iJywgaGFyZ2E9JyRoYXJnYVVwZGF0ZUt1cmFuZycgIHdoZXJlIGlkID0gJyIuJGRhdGFLdXJhbmdbJ2lkJ10uIiciKTsKICAJCQkJCQkkdGhpcy0+c3FsUXVlcnkoIlVQREFURSByaW5jaWFuX2xvY2tfYmFyYW5nIFNFVCB0b3RhbCA9ICciLiRoYXJnYVVwZGF0ZUt1cmFuZy4iJyAgd2hlcmUgaWRfZGV0YWlsID0gJyIuJGRhdGFLdXJhbmdbJ2lkJ10uIicgIik7CiAgCQkJCQl9CiAgCQkJCQkvLyAkdGhpcy0+c3FsUXVlcnkoIlVQREFURSB0X3BlcnNlZGlhYW5fbG9ja19iYXJhbmcgU0VUIGhhcmdhID0gaGFyZ2EgKyAiLiRoYXJnYVRhbWJhaGFuLiIgd2hlcmUgaWQgPSAnIi4kZGF0YUNvdW50WydpZF9sb2NrX2JhcmFuZyddLiInIik7CiAgCQkJCQkkdGhpcy0+cmVDb3VudExvY2tCYXJhbmcoJGRhdGFDb3VudFsnaWRfbG9ja19iYXJhbmcnXSk7CiAgCQkJCQkkdGhpcy0+c3FsUXVlcnkoImRlbGV0ZSBmcm9tIGNvdW50X2Rpc3RyaWJ1c2lfcGVyc2VkaWFhbiB3aGVyZSBub21vcj0nIi4kZGF0YUNvdW50Wydub21vciddLiInIik7CgogIAkJCQkvLyB9CiAgCQkJfQogIAkJfQogIAkJcmV0dXJuICRjZWs7CiAgCX0KICAJZnVuY3Rpb24gcmVDb3VudExvY2tCYXJhbmcoJGlkTG9ja0JhcmFuZyl7CiAgCQkkZ2V0RGF0YVJpbmNpYW5Mb2NrID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJpbmNpYW5fbG9ja19iYXJhbmcgd2hlcmUgaWRfbG9jayA9ICckaWRMb2NrQmFyYW5nJyBvcmRlciBieSBpZCIpOwogIAkJd2hpbGUgKCRkYXRhUmluY2lhbkxvY2sgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFSaW5jaWFuTG9jaykpIHsKICAJCQlmb3JlYWNoICgkZGF0YVJpbmNpYW5Mb2NrIGFzICRrZXkgPT4gJHZhbHVlKSB7CiAgCSAJCSAgJCRrZXkgPSAkdmFsdWU7CiAgCSAJICB9CiAgCQkJaWYoJHR5cGUgPT0gMSl7CiAgCQkJCSR0aGlzLT50b3RhbFNhbGRvQmFyYW5nICs9ICRtYXN1azsKICAJCQkJJHRoaXMtPnRvdGFsU2FsZG9IYXJnYUJhcmFuZyArPSAkdG90YWw7CiAgCQkJCSR0b3RhbEhhcmdhTWFzdWsgPSAkdG90YWw7CiAgCQkJfWVsc2V7CiAgCQkJCSR0aGlzLT50b3RhbFNhbGRvQmFyYW5nIC09ICRrZWx1YXI7CiAgCQkJCSR0aGlzLT50b3RhbFNhbGRvSGFyZ2FCYXJhbmcgLT0gJHRvdGFsOwogIAkJCQkkdG90YWxIYXJnYUtlbHVhciA9ICR0b3RhbDsKICAJCQl9CiAgCQkJJHRoaXMtPnNxbFF1ZXJ5KCJ1cGRhdGUgcmluY2lhbl9sb2NrX2JhcmFuZyBzZXQgc2FsZG8gPSAnJHRoaXMtPnRvdGFsU2FsZG9IYXJnYUJhcmFuZycgd2hlcmUgaWQgPSAnJGlkJyIpOwoKICAJCX0KICAJCSR0aGlzLT5zcWxRdWVyeSgidXBkYXRlIHRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyBzZXQgaGFyZ2EgPSckdGhpcy0+dG90YWxTYWxkb0hhcmdhQmFyYW5nJyB3aGVyZSBpZCA9ICckaWRMb2NrQmFyYW5nJyIpOwogIAl9Cgp9CgokY2xvc2luZ1BlcnNlZGlhYW4gPSBuZXcgY2xvc2luZ1BlcnNlZGlhYW5PYmooKTsKJGNsb3NpbmdQZXJzZWRpYWFuLT51c2VybmFtZSA9ICRfQ09PS0lFWydjb0lEJ107CiRkYXRhUGVuZ2F0dXJhbiA9ICRjbG9zaW5nUGVyc2VkaWFhbi0+Z2V0U2V0dGluZ1BlcnNlZGlhYW4oKTsKJGNsb3NpbmdQZXJzZWRpYWFuLT50YWh1bkFuZ2dhcmFuID0gJGRhdGFQZW5nYXR1cmFuWyd0YWh1biddOwoKCj8+Cg==",
    "size": "208192"
}