{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/inputmask\/jquery.inputmask.bundle.js",
    "lastUpdate": "2018-03-22+14:22:38.04",
    "contentFile": "LyohCioganF1ZXJ5LmlucHV0bWFzay5idW5kbGUKKiBodHRwOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvanF1ZXJ5LmlucHV0bWFzawoqIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTUgUm9iaW4gSGVyYm90cwoqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApCiogVmVyc2lvbjogMy4xLjU4CiovCiFmdW5jdGlvbigkKSB7CiAgICBmdW5jdGlvbiBpc0lucHV0RXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lKSB7CiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKSwgZXZOYW1lID0gIm9uIiArIGV2ZW50TmFtZSwgaXNTdXBwb3J0ZWQgPSBldk5hbWUgaW4gZWw7CiAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkIHx8IChlbC5zZXRBdHRyaWJ1dGUoZXZOYW1lLCAicmV0dXJuOyIpLCBpc1N1cHBvcnRlZCA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIGVsW2V2TmFtZV0pLCAKICAgICAgICBlbCA9IG51bGwsIGlzU3VwcG9ydGVkOwogICAgfQogICAgZnVuY3Rpb24gaXNJbnB1dFR5cGVTdXBwb3J0ZWQoaW5wdXRUeXBlKSB7CiAgICAgICAgdmFyIGlzU3VwcG9ydGVkID0gInRleHQiID09IGlucHV0VHlwZSB8fCAidGVsIiA9PSBpbnB1dFR5cGU7CiAgICAgICAgaWYgKCFpc1N1cHBvcnRlZCkgewogICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoInR5cGUiLCBpbnB1dFR5cGUpLCBpc1N1cHBvcnRlZCA9ICJ0ZXh0IiA9PT0gZWwudHlwZSwgZWwgPSBudWxsOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7CiAgICB9CiAgICBmdW5jdGlvbiByZXNvbHZlQWxpYXMoYWxpYXNTdHIsIG9wdGlvbnMsIG9wdHMpIHsKICAgICAgICB2YXIgYWxpYXNEZWZpbml0aW9uID0gb3B0cy5hbGlhc2VzW2FsaWFzU3RyXTsKICAgICAgICByZXR1cm4gYWxpYXNEZWZpbml0aW9uID8gKGFsaWFzRGVmaW5pdGlvbi5hbGlhcyAmJiByZXNvbHZlQWxpYXMoYWxpYXNEZWZpbml0aW9uLmFsaWFzLCB2b2lkIDAsIG9wdHMpLCAKICAgICAgICAkLmV4dGVuZCghMCwgb3B0cywgYWxpYXNEZWZpbml0aW9uKSwgJC5leHRlbmQoITAsIG9wdHMsIG9wdGlvbnMpLCAhMCkgOiAhMTsKICAgIH0KICAgIGZ1bmN0aW9uIGdlbmVyYXRlTWFza1NldChvcHRzKSB7CiAgICAgICAgZnVuY3Rpb24gYW5hbHlzZU1hc2sobWFzaykgewogICAgICAgICAgICBmdW5jdGlvbiBtYXNrVG9rZW4oaXNHcm91cCwgaXNPcHRpb25hbCwgaXNRdWFudGlmaWVyLCBpc0FsdGVybmF0b3IpIHsKICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IFtdLCB0aGlzLmlzR3JvdXAgPSBpc0dyb3VwIHx8ICExLCB0aGlzLmlzT3B0aW9uYWwgPSBpc09wdGlvbmFsIHx8ICExLCAKICAgICAgICAgICAgICAgIHRoaXMuaXNRdWFudGlmaWVyID0gaXNRdWFudGlmaWVyIHx8ICExLCB0aGlzLmlzQWx0ZXJuYXRvciA9IGlzQWx0ZXJuYXRvciB8fCAhMSwgCiAgICAgICAgICAgICAgICB0aGlzLnF1YW50aWZpZXIgPSB7CiAgICAgICAgICAgICAgICAgICAgbWluOiAxLAogICAgICAgICAgICAgICAgICAgIG1heDogMQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBpbnNlcnRUZXN0RGVmaW5pdGlvbihtdG9rZW4sIGVsZW1lbnQsIHBvc2l0aW9uKSB7CiAgICAgICAgICAgICAgICB2YXIgbWFza2RlZiA9IG9wdHMuZGVmaW5pdGlvbnNbZWxlbWVudF0sIG5ld0Jsb2NrTWFya2VyID0gMCA9PSBtdG9rZW4ubWF0Y2hlcy5sZW5ndGg7CiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPSB2b2lkIDAgIT0gcG9zaXRpb24gPyBwb3NpdGlvbiA6IG10b2tlbi5tYXRjaGVzLmxlbmd0aCwgbWFza2RlZiAmJiAhZXNjYXBlZCkgewogICAgICAgICAgICAgICAgICAgIG1hc2tkZWYucGxhY2Vob2xkZXIgPSAkLmlzRnVuY3Rpb24obWFza2RlZi5wbGFjZWhvbGRlcikgPyBtYXNrZGVmLnBsYWNlaG9sZGVyLmNhbGwodGhpcywgb3B0cykgOiBtYXNrZGVmLnBsYWNlaG9sZGVyOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByZXZhbGlkYXRvcnMgPSBtYXNrZGVmLnByZXZhbGlkYXRvciwgcHJldmFsaWRhdG9yc0wgPSBwcmV2YWxpZGF0b3JzID8gcHJldmFsaWRhdG9ycy5sZW5ndGggOiAwLCBpID0gMTsgaSA8IG1hc2tkZWYuY2FyZGluYWxpdHk7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmFsaWRhdG9yID0gcHJldmFsaWRhdG9yc0wgPj0gaSA\/IHByZXZhbGlkYXRvcnNbaSAtIDFdIDogW10sIHZhbGlkYXRvciA9IHByZXZhbGlkYXRvci52YWxpZGF0b3IsIGNhcmRpbmFsaXR5ID0gcHJldmFsaWRhdG9yLmNhcmRpbmFsaXR5OwogICAgICAgICAgICAgICAgICAgICAgICBtdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywgMCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IHZhbGlkYXRvciA\/ICJzdHJpbmciID09IHR5cGVvZiB2YWxpZGF0b3IgPyBuZXcgUmVnRXhwKHZhbGlkYXRvcikgOiBuZXcgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXN0ID0gdmFsaWRhdG9yOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpIDogbmV3IFJlZ0V4cCgiLiIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IGNhcmRpbmFsaXR5ID8gY2FyZGluYWxpdHkgOiAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IG10b2tlbi5pc09wdGlvbmFsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IG5ld0Jsb2NrTWFya2VyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBtYXNrZGVmLmNhc2luZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogbWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWFza2RlZi5wbGFjZWhvbGRlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2s6IGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBtYXNrZGVmLnZhbGlkYXRvciA\/ICJzdHJpbmciID09IHR5cGVvZiBtYXNrZGVmLnZhbGlkYXRvciA\/IG5ldyBSZWdFeHAobWFza2RlZi52YWxpZGF0b3IpIDogbmV3IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXN0ID0gbWFza2RlZi52YWxpZGF0b3I7CiAgICAgICAgICAgICAgICAgICAgICAgIH0oKSA6IG5ldyBSZWdFeHAoIi4iKSwKICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IG1hc2tkZWYuY2FyZGluYWxpdHksCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBtdG9rZW4uaXNPcHRpb25hbCwKICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IG5ld0Jsb2NrTWFya2VyLAogICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG1hc2tkZWYuY2FzaW5nLAogICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWFza2RlZi5wbGFjZWhvbGRlciwKICAgICAgICAgICAgICAgICAgICAgICAgbWFzazogZWxlbWVudAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7CiAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsCiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDAsCiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IG10b2tlbi5pc09wdGlvbmFsLAogICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBuZXdCbG9ja01hcmtlciwKICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgZGVmOiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgbWFzazogZWxlbWVudAogICAgICAgICAgICAgICAgfSksIGVzY2FwZWQgPSAhMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHZhciBtYXRjaCwgbSwgb3BlbmluZ1Rva2VuLCBjdXJyZW50T3BlbmluZ1Rva2VuLCBhbHRlcm5hdG9yLCBsYXN0TWF0Y2gsIHRva2VuaXplciA9IC8oPzpbPyorXXxce1swLTlcK1wqXSsoPzosWzAtOVwrXCpdKik\/XH0pXD8\/fFteLj8qK14ke1tdKCl8XFxdK3wuL2csIGVzY2FwZWQgPSAhMSwgY3VycmVudFRva2VuID0gbmV3IG1hc2tUb2tlbigpLCBvcGVuZW5pbmdzID0gW10sIG1hc2tUb2tlbnMgPSBbXTsgbWF0Y2ggPSB0b2tlbml6ZXIuZXhlYyhtYXNrKTsgKSBzd2l0Y2ggKG0gPSBtYXRjaFswXSwgCiAgICAgICAgICAgIG0uY2hhckF0KDApKSB7CiAgICAgICAgICAgICAgY2FzZSBvcHRzLm9wdGlvbmFsbWFya2VyLmVuZDoKICAgICAgICAgICAgICBjYXNlIG9wdHMuZ3JvdXBtYXJrZXIuZW5kOgogICAgICAgICAgICAgICAgaWYgKG9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3MucG9wKCksIG9wZW5lbmluZ3MubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLCBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pLCAKICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLmlzQWx0ZXJuYXRvcikgewogICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gb3BlbmVuaW5ncy5wb3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbW5keCA9IDA7IG1uZHggPCBhbHRlcm5hdG9yLm1hdGNoZXMubGVuZ3RoOyBtbmR4KyspIGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MubGVuZ3RoID4gMCA\/IChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLCAKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcikpIDogY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2Ugb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydDoKICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChuZXcgbWFza1Rva2VuKCExLCAhMCkpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2Ugb3B0cy5ncm91cG1hcmtlci5zdGFydDoKICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChuZXcgbWFza1Rva2VuKCEwKSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBvcHRzLnF1YW50aWZpZXJtYXJrZXIuc3RhcnQ6CiAgICAgICAgICAgICAgICB2YXIgcXVhbnRpZmllciA9IG5ldyBtYXNrVG9rZW4oITEsICExLCAhMCk7CiAgICAgICAgICAgICAgICBtID0gbS5yZXBsYWNlKC9be31dL2csICIiKTsKICAgICAgICAgICAgICAgIHZhciBtcSA9IG0uc3BsaXQoIiwiKSwgbXEwID0gaXNOYU4obXFbMF0pID8gbXFbMF0gOiBwYXJzZUludChtcVswXSksIG1xMSA9IDEgPT0gbXEubGVuZ3RoID8gbXEwIDogaXNOYU4obXFbMV0pID8gbXFbMV0gOiBwYXJzZUludChtcVsxXSk7CiAgICAgICAgICAgICAgICBpZiAoKCIqIiA9PSBtcTEgfHwgIisiID09IG1xMSkgJiYgKG1xMCA9ICIqIiA9PSBtcTEgPyAwIDogMSksIHF1YW50aWZpZXIucXVhbnRpZmllciA9IHsKICAgICAgICAgICAgICAgICAgICBtaW46IG1xMCwKICAgICAgICAgICAgICAgICAgICBtYXg6IG1xMQogICAgICAgICAgICAgICAgfSwgb3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0ubWF0Y2hlczsKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSBtYXRjaGVzLnBvcCgpLCAhbWF0Y2guaXNHcm91cCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBUb2tlbiA9IG5ldyBtYXNrVG9rZW4oITApOwogICAgICAgICAgICAgICAgICAgICAgICBncm91cFRva2VuLm1hdGNoZXMucHVzaChtYXRjaCksIG1hdGNoID0gZ3JvdXBUb2tlbjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKG1hdGNoKSwgbWF0Y2hlcy5wdXNoKHF1YW50aWZpZXIpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wb3AoKSwgIW1hdGNoLmlzR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwVG9rZW4gPSBuZXcgbWFza1Rva2VuKCEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBUb2tlbi5tYXRjaGVzLnB1c2gobWF0Y2gpLCBtYXRjaCA9IGdyb3VwVG9rZW47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gobWF0Y2gpLCBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKHF1YW50aWZpZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2Ugb3B0cy5lc2NhcGVDaGFyOgogICAgICAgICAgICAgICAgZXNjYXBlZCA9ICEwOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2Ugb3B0cy5hbHRlcm5hdG9ybWFya2VyOgogICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5sZW5ndGggPiAwID8gKGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0sIAogICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnBvcCgpKSA6IGxhc3RNYXRjaCA9IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnBvcCgpLCAKICAgICAgICAgICAgICAgIGxhc3RNYXRjaC5pc0FsdGVybmF0b3IgPyBvcGVuZW5pbmdzLnB1c2gobGFzdE1hdGNoKSA6IChhbHRlcm5hdG9yID0gbmV3IG1hc2tUb2tlbighMSwgITEsICExLCAhMCksIAogICAgICAgICAgICAgICAgYWx0ZXJuYXRvci5tYXRjaGVzLnB1c2gobGFzdE1hdGNoKSwgb3BlbmVuaW5ncy5wdXNoKGFsdGVybmF0b3IpKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLCBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMubGVuZ3RoID4gMCAmJiAobGFzdE1hdGNoID0gY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzW2N1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5sZW5ndGggLSAxXSwgCiAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoLmlzR3JvdXAgJiYgKGxhc3RNYXRjaC5pc0dyb3VwID0gITEsIGluc2VydFRlc3REZWZpbml0aW9uKGxhc3RNYXRjaCwgb3B0cy5ncm91cG1hcmtlci5zdGFydCwgMCksIAogICAgICAgICAgICAgICAgICAgIGluc2VydFRlc3REZWZpbml0aW9uKGxhc3RNYXRjaCwgb3B0cy5ncm91cG1hcmtlci5lbmQpKSksIGluc2VydFRlc3REZWZpbml0aW9uKGN1cnJlbnRPcGVuaW5nVG9rZW4sIG0pLCAKICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLmlzQWx0ZXJuYXRvcikgewogICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gb3BlbmVuaW5ncy5wb3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbW5keCA9IDA7IG1uZHggPCBhbHRlcm5hdG9yLm1hdGNoZXMubGVuZ3RoOyBtbmR4KyspIGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MubGVuZ3RoID4gMCA\/IChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLCAKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcikpIDogY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoID4gMCAmJiAobGFzdE1hdGNoID0gY3VycmVudFRva2VuLm1hdGNoZXNbY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoIC0gMV0sIAogICAgICAgICAgICAgICAgbGFzdE1hdGNoLmlzR3JvdXAgJiYgKGxhc3RNYXRjaC5pc0dyb3VwID0gITEsIGluc2VydFRlc3REZWZpbml0aW9uKGxhc3RNYXRjaCwgb3B0cy5ncm91cG1hcmtlci5zdGFydCwgMCksIAogICAgICAgICAgICAgICAgaW5zZXJ0VGVzdERlZmluaXRpb24obGFzdE1hdGNoLCBvcHRzLmdyb3VwbWFya2VyLmVuZCkpKSwgaW5zZXJ0VGVzdERlZmluaXRpb24oY3VycmVudFRva2VuLCBtKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoID4gMCAmJiAobGFzdE1hdGNoID0gY3VycmVudFRva2VuLm1hdGNoZXNbY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoIC0gMV0sIAogICAgICAgICAgICBsYXN0TWF0Y2guaXNHcm91cCAmJiAobGFzdE1hdGNoLmlzR3JvdXAgPSAhMSwgaW5zZXJ0VGVzdERlZmluaXRpb24obGFzdE1hdGNoLCBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0LCAwKSwgCiAgICAgICAgICAgIGluc2VydFRlc3REZWZpbml0aW9uKGxhc3RNYXRjaCwgb3B0cy5ncm91cG1hcmtlci5lbmQpKSwgbWFza1Rva2Vucy5wdXNoKGN1cnJlbnRUb2tlbikpLCAKICAgICAgICAgICAgbWFza1Rva2VuczsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVNYXNrKG1hc2ssIG1ldGFkYXRhKSB7CiAgICAgICAgICAgIGlmICh2b2lkIDAgPT0gbWFzayB8fCAiIiA9PSBtYXNrKSByZXR1cm4gdm9pZCAwOwogICAgICAgICAgICBpZiAoMSA9PSBtYXNrLmxlbmd0aCAmJiAwID09IG9wdHMuZ3JlZWR5ICYmIDAgIT0gb3B0cy5yZXBlYXQgJiYgKG9wdHMucGxhY2Vob2xkZXIgPSAiIiksIAogICAgICAgICAgICBvcHRzLnJlcGVhdCA+IDAgfHwgIioiID09IG9wdHMucmVwZWF0IHx8ICIrIiA9PSBvcHRzLnJlcGVhdCkgewogICAgICAgICAgICAgICAgdmFyIHJlcGVhdFN0YXJ0ID0gIioiID09IG9wdHMucmVwZWF0ID8gMCA6ICIrIiA9PSBvcHRzLnJlcGVhdCA\/IDEgOiBvcHRzLnJlcGVhdDsKICAgICAgICAgICAgICAgIG1hc2sgPSBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0ICsgbWFzayArIG9wdHMuZ3JvdXBtYXJrZXIuZW5kICsgb3B0cy5xdWFudGlmaWVybWFya2VyLnN0YXJ0ICsgcmVwZWF0U3RhcnQgKyAiLCIgKyBvcHRzLnJlcGVhdCArIG9wdHMucXVhbnRpZmllcm1hcmtlci5lbmQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PSAkLmlucHV0bWFzay5tYXNrc0NhY2hlW21hc2tdICYmICgkLmlucHV0bWFzay5tYXNrc0NhY2hlW21hc2tdID0gewogICAgICAgICAgICAgICAgbWFzazogbWFzaywKICAgICAgICAgICAgICAgIG1hc2tUb2tlbjogYW5hbHlzZU1hc2sobWFzayksCiAgICAgICAgICAgICAgICB2YWxpZFBvc2l0aW9uczoge30sCiAgICAgICAgICAgICAgICBfYnVmZmVyOiB2b2lkIDAsCiAgICAgICAgICAgICAgICBidWZmZXI6IHZvaWQgMCwKICAgICAgICAgICAgICAgIHRlc3RzOiB7fSwKICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YQogICAgICAgICAgICB9KSwgJC5leHRlbmQoITAsIHt9LCAkLmlucHV0bWFzay5tYXNrc0NhY2hlW21hc2tdKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcHJlUHJvY2Vzc01hc2sobWFzaykgewogICAgICAgICAgICBpZiAobWFzayA9IG1hc2sudG9TdHJpbmcoKSwgb3B0cy5udW1lcmljSW5wdXQpIHsKICAgICAgICAgICAgICAgIG1hc2sgPSBtYXNrLnNwbGl0KCIiKS5yZXZlcnNlKCk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHggPSAwOyBuZHggPCBtYXNrLmxlbmd0aDsgbmR4KyspIG1hc2tbbmR4XSA9PSBvcHRzLm9wdGlvbmFsbWFya2VyLnN0YXJ0ID8gbWFza1tuZHhdID0gb3B0cy5vcHRpb25hbG1hcmtlci5lbmQgOiBtYXNrW25keF0gPT0gb3B0cy5vcHRpb25hbG1hcmtlci5lbmQgPyBtYXNrW25keF0gPSBvcHRzLm9wdGlvbmFsbWFya2VyLnN0YXJ0IDogbWFza1tuZHhdID09IG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQgPyBtYXNrW25keF0gPSBvcHRzLmdyb3VwbWFya2VyLmVuZCA6IG1hc2tbbmR4XSA9PSBvcHRzLmdyb3VwbWFya2VyLmVuZCAmJiAobWFza1tuZHhdID0gb3B0cy5ncm91cG1hcmtlci5zdGFydCk7CiAgICAgICAgICAgICAgICBtYXNrID0gbWFzay5qb2luKCIiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbWFzazsKICAgICAgICB9CiAgICAgICAgdmFyIG1zID0gdm9pZCAwOwogICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5tYXNrKSAmJiAob3B0cy5tYXNrID0gb3B0cy5tYXNrLmNhbGwodGhpcywgb3B0cykpLCAkLmlzQXJyYXkob3B0cy5tYXNrKSkgewogICAgICAgICAgICBpZiAob3B0cy5tYXNrLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgIG9wdHMua2VlcFN0YXRpYyA9IHZvaWQgMCA9PSBvcHRzLmtlZXBTdGF0aWMgPyAhMCA6IG9wdHMua2VlcFN0YXRpYzsKICAgICAgICAgICAgICAgIHZhciBhbHRNYXNrID0gIigiOwogICAgICAgICAgICAgICAgcmV0dXJuICQuZWFjaChvcHRzLm1hc2ssIGZ1bmN0aW9uKG5keCwgbXNrKSB7CiAgICAgICAgICAgICAgICAgICAgYWx0TWFzay5sZW5ndGggPiAxICYmIChhbHRNYXNrICs9ICIpfCgiKSwgYWx0TWFzayArPSBwcmVQcm9jZXNzTWFzayh2b2lkIDAgPT0gbXNrLm1hc2sgfHwgJC5pc0Z1bmN0aW9uKG1zay5tYXNrKSA\/IG1zayA6IG1zay5tYXNrKTsKICAgICAgICAgICAgICAgIH0pLCBhbHRNYXNrICs9ICIpIiwgZ2VuZXJhdGVNYXNrKGFsdE1hc2ssIG9wdHMubWFzayk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3B0cy5tYXNrID0gb3B0cy5tYXNrLnBvcCgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb3B0cy5tYXNrICYmIChtcyA9IHZvaWQgMCA9PSBvcHRzLm1hc2subWFzayB8fCAkLmlzRnVuY3Rpb24ob3B0cy5tYXNrLm1hc2spID8gZ2VuZXJhdGVNYXNrKHByZVByb2Nlc3NNYXNrKG9wdHMubWFzayksIG9wdHMubWFzaykgOiBnZW5lcmF0ZU1hc2socHJlUHJvY2Vzc01hc2sob3B0cy5tYXNrLm1hc2spLCBvcHRzLm1hc2spKSwgCiAgICAgICAgbXM7CiAgICB9CiAgICBmdW5jdGlvbiBtYXNrU2NvcGUoYWN0aW9uT2JqLCBtYXNrc2V0LCBvcHRzKSB7CiAgICAgICAgZnVuY3Rpb24gZ2V0TWFza1RlbXBsYXRlKGJhc2VPbklucHV0LCBtaW5pbWFsUG9zLCBpbmNsdWRlSW5wdXQpIHsKICAgICAgICAgICAgbWluaW1hbFBvcyA9IG1pbmltYWxQb3MgfHwgMDsKICAgICAgICAgICAgdmFyIG5keEludGx6ciwgdGVzdCwgdGVzdFBvcywgbWFza1RlbXBsYXRlID0gW10sIHBvcyA9IDA7CiAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIGlmIChiYXNlT25JbnB1dCA9PT0gITAgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXTsKICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gdmFsaWRQb3MubWF0Y2gsIG5keEludGx6ciA9IHZhbGlkUG9zLmxvY2F0b3Iuc2xpY2UoKSwgbWFza1RlbXBsYXRlLnB1c2goaW5jbHVkZUlucHV0ID09PSAhMCA\/IHZhbGlkUG9zLmlucHV0IDogZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgdGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSksIHRlc3QgPSB0ZXN0UG9zLm1hdGNoLCAKICAgICAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpLCBtYXNrVGVtcGxhdGUucHVzaChnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKTsKICAgICAgICAgICAgICAgIHBvcysrOwogICAgICAgICAgICB9IHdoaWxlICgodm9pZCAwID09IG1heExlbmd0aCB8fCBtYXhMZW5ndGggPiBwb3MgLSAxKSAmJiBudWxsICE9IHRlc3QuZm4gfHwgbnVsbCA9PSB0ZXN0LmZuICYmICIiICE9IHRlc3QuZGVmIHx8IG1pbmltYWxQb3MgPj0gcG9zKTsKICAgICAgICAgICAgcmV0dXJuIG1hc2tUZW1wbGF0ZS5wb3AoKSwgbWFza1RlbXBsYXRlOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRNYXNrU2V0KCkgewogICAgICAgICAgICByZXR1cm4gbWFza3NldDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcmVzZXRNYXNrU2V0KHNvZnQpIHsKICAgICAgICAgICAgdmFyIG1hc2tzZXQgPSBnZXRNYXNrU2V0KCk7CiAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyID0gdm9pZCAwLCBtYXNrc2V0LnRlc3RzID0ge30sIHNvZnQgIT09ICEwICYmIChtYXNrc2V0Ll9idWZmZXIgPSB2b2lkIDAsIAogICAgICAgICAgICBtYXNrc2V0LnZhbGlkUG9zaXRpb25zID0ge30sIG1hc2tzZXQucCA9IDApOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRMYXN0VmFsaWRQb3NpdGlvbihjbG9zZXN0VG8pIHsKICAgICAgICAgICAgdmFyIG1hc2tzZXQgPSBnZXRNYXNrU2V0KCksIGxhc3RWYWxpZFBvc2l0aW9uID0gLTEsIHZhbGlkcyA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnM7CiAgICAgICAgICAgIHZvaWQgMCA9PSBjbG9zZXN0VG8gJiYgKGNsb3Nlc3RUbyA9IC0xKTsKICAgICAgICAgICAgdmFyIGJlZm9yZSA9IGxhc3RWYWxpZFBvc2l0aW9uLCBhZnRlciA9IGxhc3RWYWxpZFBvc2l0aW9uOwogICAgICAgICAgICBmb3IgKHZhciBwb3NOZHggaW4gdmFsaWRzKSB7CiAgICAgICAgICAgICAgICB2YXIgcHNOZHggPSBwYXJzZUludChwb3NOZHgpOwogICAgICAgICAgICAgICAgKC0xID09IGNsb3Nlc3RUbyB8fCBudWxsICE9IHZhbGlkc1twc05keF0ubWF0Y2guZm4pICYmIChjbG9zZXN0VG8gPj0gcHNOZHggJiYgKGJlZm9yZSA9IHBzTmR4KSwgCiAgICAgICAgICAgICAgICBwc05keCA+PSBjbG9zZXN0VG8gJiYgKGFmdGVyID0gcHNOZHgpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbGFzdFZhbGlkUG9zaXRpb24gPSAtMSAhPSBiZWZvcmUgJiYgY2xvc2VzdFRvIC0gYmVmb3JlID4gMSB8fCBjbG9zZXN0VG8gPiBhZnRlciA\/IGJlZm9yZSA6IGFmdGVyOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBzZXRWYWxpZFBvc2l0aW9uKHBvcywgdmFsaWRUZXN0LCBmcm9tU2V0VmFsaWQpIHsKICAgICAgICAgICAgaWYgKG9wdHMuaW5zZXJ0TW9kZSAmJiB2b2lkIDAgIT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gJiYgdm9pZCAwID09IGZyb21TZXRWYWxpZCkgewogICAgICAgICAgICAgICAgdmFyIGksIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQoITAsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpOwogICAgICAgICAgICAgICAgZm9yIChpID0gcG9zOyBsdnAgPj0gaTsgaSsrKSBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldOwogICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gPSB2YWxpZFRlc3Q7CiAgICAgICAgICAgICAgICB2YXIgaiwgdmFsaWQgPSAhMDsKICAgICAgICAgICAgICAgIGZvciAoaSA9IHBvczsgbHZwID49IGk7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gcG9zaXRpb25zQ2xvbmVbaV07CiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPSB0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7CiAgICAgICAgICAgICAgICAgICAgICAgIGogPSAhb3B0cy5rZWVwU3RhdGljICYmIHZwc1tpXSAmJiAodm9pZCAwICE9IHZwc1tpICsgMV0gJiYgZ2V0VGVzdHMoaSArIDEsIHZwc1tpXS5sb2NhdG9yLnNsaWNlKCksIGkpLmxlbmd0aCA+IDEgfHwgdm9pZCAwICE9IHZwc1tpXS5hbHRlcm5hdGlvbikgPyBpICsgMSA6IHNlZWtOZXh0KGkpLCAKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbihqLCB0Lm1hdGNoLmRlZikgPyB2YWxpZCAmJiBpc1ZhbGlkKGosIHQuaW5wdXQsICEwLCAhMCkgIT09ICExIDogbnVsbCA9PSB0Lm1hdGNoLmZuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHBvc2l0aW9uc0Nsb25lKSwgCiAgICAgICAgICAgICAgICAhMTsKICAgICAgICAgICAgfSBlbHNlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID0gdmFsaWRUZXN0OwogICAgICAgICAgICByZXR1cm4gITA7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHN0cmlwVmFsaWRQb3NpdGlvbnMoc3RhcnQsIGVuZCwgbm9jaGVjaywgc3RyaWN0KSB7CiAgICAgICAgICAgIHZhciBpLCBzdGFydFBvcyA9IHN0YXJ0OwogICAgICAgICAgICBnZXRNYXNrU2V0KCkucCA9IHN0YXJ0LCB2b2lkIDAgIT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3N0YXJ0XSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc3RhcnRdLmlucHV0ID09IG9wdHMucmFkaXhQb2ludCAmJiAoZW5kKyssIAogICAgICAgICAgICBzdGFydFBvcysrKTsKICAgICAgICAgICAgZm9yIChpID0gc3RhcnRQb3M7IGVuZCA+IGk7IGkrKykgdm9pZCAwICE9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSAmJiAobm9jaGVjayA9PT0gITAgfHwgMCAhPSBvcHRzLmNhbkNsZWFyUG9zaXRpb24oZ2V0TWFza1NldCgpLCBpLCBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBzdHJpY3QsIG9wdHMpKSAmJiBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldOwogICAgICAgICAgICBmb3IgKHJlc2V0TWFza1NldCghMCksIGkgPSBzdGFydFBvcyArIDE7IGkgPD0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTsgKSB7CiAgICAgICAgICAgICAgICBmb3IgKDt2b2lkIDAgIT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3N0YXJ0UG9zXTsgKSBzdGFydFBvcysrOwogICAgICAgICAgICAgICAgdmFyIHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc3RhcnRQb3NdOwogICAgICAgICAgICAgICAgc3RhcnRQb3MgPiBpICYmIChpID0gc3RhcnRQb3MgKyAxKTsKICAgICAgICAgICAgICAgIHZhciB0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldOwogICAgICAgICAgICAgICAgdm9pZCAwICE9IHQgJiYgdm9pZCAwID09IHMgPyAocG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24oc3RhcnRQb3MsIHQubWF0Y2guZGVmKSAmJiBpc1ZhbGlkKHN0YXJ0UG9zLCB0LmlucHV0LCAhMCkgIT09ICExICYmIChkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldLCAKICAgICAgICAgICAgICAgIGkrKyksIHN0YXJ0UG9zKyspIDogaSsrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpOwogICAgICAgICAgICBsdnAgPj0gc3RhcnQgJiYgdm9pZCAwICE9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdLmlucHV0ID09IG9wdHMucmFkaXhQb2ludCAmJiBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sIAogICAgICAgICAgICByZXNldE1hc2tTZXQoITApOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHRzdFBzKSB7CiAgICAgICAgICAgIGZvciAodmFyIHRlc3RQb3MsIHRlc3RQb3NpdGlvbnMgPSBnZXRUZXN0cyhwb3MsIG5keEludGx6ciwgdHN0UHMpLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBsdlRlc3QgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXSB8fCBnZXRUZXN0cygwKVswXSwgbHZUZXN0QWx0QXJyID0gdm9pZCAwICE9IGx2VGVzdC5hbHRlcm5hdGlvbiA\/IGx2VGVzdC5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0uc3BsaXQoIiwiKSA6IFtdLCBuZHggPSAwOyBuZHggPCB0ZXN0UG9zaXRpb25zLmxlbmd0aCAmJiAodGVzdFBvcyA9IHRlc3RQb3NpdGlvbnNbbmR4XSwgCiAgICAgICAgICAgICEodGVzdFBvcy5tYXRjaCAmJiAob3B0cy5ncmVlZHkgJiYgdGVzdFBvcy5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgIT09ICEwIHx8ICh0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsaXR5ID09PSAhMSB8fCB0ZXN0UG9zLm1hdGNoLm5ld0Jsb2NrTWFya2VyID09PSAhMSkgJiYgdGVzdFBvcy5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgIT09ICEwKSAmJiAodm9pZCAwID09IGx2VGVzdC5hbHRlcm5hdGlvbiB8fCB2b2lkIDAgIT0gdGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gJiYgY2hlY2tBbHRlcm5hdGlvbk1hdGNoKHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoIiwiKSwgbHZUZXN0QWx0QXJyKSkpKTsgbmR4KyspIDsKICAgICAgICAgICAgcmV0dXJuIHRlc3RQb3M7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGdldFRlc3QocG9zKSB7CiAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSA\/IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoIDogZ2V0VGVzdHMocG9zKVswXS5tYXRjaDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24ocG9zLCBkZWYpIHsKICAgICAgICAgICAgZm9yICh2YXIgdmFsaWQgPSAhMSwgdGVzdHMgPSBnZXRUZXN0cyhwb3MpLCB0bmR4ID0gMDsgdG5keCA8IHRlc3RzLmxlbmd0aDsgdG5keCsrKSBpZiAodGVzdHNbdG5keF0ubWF0Y2ggJiYgdGVzdHNbdG5keF0ubWF0Y2guZGVmID09IGRlZikgewogICAgICAgICAgICAgICAgdmFsaWQgPSAhMDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2YWxpZDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdHMocG9zLCBuZHhJbnRsenIsIHRzdFBzKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIFJlc29sdmVUZXN0RnJvbVRva2VuKG1hc2tUb2tlbiwgbmR4SW5pdGlhbGl6ZXIsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVNYXRjaChtYXRjaCwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA+IDFlNCkgcmV0dXJuIGFsZXJ0KCJqcXVlcnkuaW5wdXRtYXNrOiBUaGVyZSBpcyBwcm9iYWJseSBhbiBlcnJvciBpbiB5b3VyIG1hc2sgZGVmaW5pdGlvbiBvciBpbiB0aGUgY29kZS4gQ3JlYXRlIGFuIGlzc3VlIG9uIGdpdGh1YiB3aXRoIGFuIGV4YW1wbGUgb2YgdGhlIG1hc2sgeW91IGFyZSB1c2luZy4gIiArIGdldE1hc2tTZXQoKS5tYXNrKSwgCiAgICAgICAgICAgICAgICAgICAgITA7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RQb3MgPT0gcG9zICYmIHZvaWQgMCA9PSBtYXRjaC5tYXRjaGVzKSByZXR1cm4gbWF0Y2hlcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IG1hdGNoLAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhdG9yOiBsb29wTmR4LnJldmVyc2UoKQogICAgICAgICAgICAgICAgICAgIH0pLCAhMDsKICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9IG1hdGNoLm1hdGNoZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoLmlzR3JvdXAgJiYgcXVhbnRpZmllclJlY3Vyc2UgIT09ICEwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSBoYW5kbGVNYXRjaChtYXNrVG9rZW4ubWF0Y2hlc1t0bmR4ICsgMV0sIGxvb3BOZHgpKSByZXR1cm4gITA7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNPcHRpb25hbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsVG9rZW4gPSBtYXRjaDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9IFJlc29sdmVUZXN0RnJvbVRva2VuKG1hdGNoLCBuZHhJbml0aWFsaXplciwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhdGVzdE1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLm1hdGNoLCBpc0ZpcnN0TWF0Y2ggPSAwID09ICQuaW5BcnJheShsYXRlc3RNYXRjaCwgb3B0aW9uYWxUb2tlbi5tYXRjaGVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZpcnN0TWF0Y2ggJiYgKGluc2VydFN0b3AgPSAhMCksIHRlc3RQb3MgPSBwb3M7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNBbHRlcm5hdG9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFsdE1hdGNoZXMsIGFsdGVybmF0ZVRva2VuID0gbWF0Y2gsIG1hbHRlcm5hdGVNYXRjaGVzID0gW10sIGN1cnJlbnRNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgpLCBsb29wTmR4Q250ID0gbG9vcE5keC5sZW5ndGgsIGFsdEluZGV4ID0gbmR4SW5pdGlhbGl6ZXIubGVuZ3RoID4gMCA\/IG5keEluaXRpYWxpemVyLnNoaWZ0KCkgOiAtMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtMSA9PSBhbHRJbmRleCB8fCAic3RyaW5nIiA9PSB0eXBlb2YgYWx0SW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0SW5kZXhBcnIsIGN1cnJlbnRQb3MgPSB0ZXN0UG9zLCBuZHhJbml0aWFsaXplckNsb25lID0gbmR4SW5pdGlhbGl6ZXIuc2xpY2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3RyaW5nIiA9PSB0eXBlb2YgYWx0SW5kZXggJiYgKGFsdEluZGV4QXJyID0gYWx0SW5kZXguc3BsaXQoIiwiKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYW1uZHggPSAwOyBhbW5keCA8IGFsdGVybmF0ZVRva2VuLm1hdGNoZXMubGVuZ3RoOyBhbW5keCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBbXSwgbWF0Y2ggPSBoYW5kbGVNYXRjaChhbHRlcm5hdGVUb2tlbi5tYXRjaGVzW2FtbmR4XSwgWyBhbW5keCBdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpIHx8IG1hdGNoLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCksIHRlc3RQb3MgPSBjdXJyZW50UG9zLCBtYXRjaGVzID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmR4SW5pdGlhbGl6ZXJDbG9uZS5sZW5ndGg7IGkrKykgbmR4SW5pdGlhbGl6ZXJbaV0gPSBuZHhJbml0aWFsaXplckNsb25lW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHgxID0gMDsgbmR4MSA8IG1hbHRNYXRjaGVzLmxlbmd0aDsgbmR4MSsrKSBmb3IgKHZhciBhbHRNYXRjaCA9IG1hbHRNYXRjaGVzW25keDFdLCBuZHgyID0gMDsgbmR4MiA8IG1hbHRlcm5hdGVNYXRjaGVzLmxlbmd0aDsgbmR4MisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0TWF0Y2gyID0gbWFsdGVybmF0ZU1hdGNoZXNbbmR4Ml07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0TWF0Y2gubWF0Y2gubWFzayA9PSBhbHRNYXRjaDIubWF0Y2gubWFzayAmJiAoInN0cmluZyIgIT0gdHlwZW9mIGFsdEluZGV4IHx8IC0xICE9ICQuaW5BcnJheShhbHRNYXRjaC5sb2NhdG9yW2xvb3BOZHhDbnRdLnRvU3RyaW5nKCksIGFsdEluZGV4QXJyKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWx0TWF0Y2hlcy5zcGxpY2UobmR4MSwgMSksIGFsdE1hdGNoMi5sb2NhdG9yW2xvb3BOZHhDbnRdID0gYWx0TWF0Y2gyLmxvY2F0b3JbbG9vcE5keENudF0gKyAiLCIgKyBhbHRNYXRjaC5sb2NhdG9yW2xvb3BOZHhDbnRdLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXRjaDIuYWx0ZXJuYXRpb24gPSBsb29wTmR4Q250OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRlcm5hdGVNYXRjaGVzID0gbWFsdGVybmF0ZU1hdGNoZXMuY29uY2F0KG1hbHRNYXRjaGVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cmluZyIgPT0gdHlwZW9mIGFsdEluZGV4ICYmIChtYWx0ZXJuYXRlTWF0Y2hlcyA9ICQubWFwKG1hbHRlcm5hdGVNYXRjaGVzLCBmdW5jdGlvbihsbW50LCBuZHgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRmluaXRlKG5keCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYW1hdGNoLCBhbHRMb2NBcnIgPSBsbW50LmxvY2F0b3JbbG9vcE5keENudF0udG9TdHJpbmcoKS5zcGxpdCgiLCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG1udC5sb2NhdG9yW2xvb3BOZHhDbnRdID0gdm9pZCAwLCBsbW50LmFsdGVybmF0aW9uID0gdm9pZCAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYWxuZHggPSAwOyBhbG5keCA8IGFsdExvY0Fyci5sZW5ndGg7IGFsbmR4KyspIG1hbWF0Y2ggPSAtMSAhPSAkLmluQXJyYXkoYWx0TG9jQXJyW2FsbmR4XSwgYWx0SW5kZXhBcnIpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbWF0Y2ggJiYgKHZvaWQgMCAhPSBsbW50LmxvY2F0b3JbbG9vcE5keENudF0gPyAobG1udC5sb2NhdG9yW2xvb3BOZHhDbnRdICs9ICIsIiwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbW50LmFsdGVybmF0aW9uID0gbG9vcE5keENudCwgbG1udC5sb2NhdG9yW2xvb3BOZHhDbnRdICs9IGFsdExvY0FyclthbG5keF0pIDogbG1udC5sb2NhdG9yW2xvb3BOZHhDbnRdID0gcGFyc2VJbnQoYWx0TG9jQXJyW2FsbmR4XSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPSBsbW50LmxvY2F0b3JbbG9vcE5keENudF0pIHJldHVybiBsbW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCBtYXRjaGVzID0gY3VycmVudE1hdGNoZXMuY29uY2F0KG1hbHRlcm5hdGVNYXRjaGVzKSwgaW5zZXJ0U3RvcCA9ICEwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG1hdGNoID0gaGFuZGxlTWF0Y2goYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlc1thbHRJbmRleF0sIFsgYWx0SW5kZXggXS5jb25jYXQobG9vcE5keCksIHF1YW50aWZpZXJSZWN1cnNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgcmV0dXJuICEwOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzUXVhbnRpZmllciAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gITApIGZvciAodmFyIHF0ID0gbWF0Y2gsIHFuZHggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwICYmIHF1YW50aWZpZXJSZWN1cnNlICE9PSAhMCA\/IG5keEluaXRpYWxpemVyLnNoaWZ0KCkgOiAwOyBxbmR4IDwgKGlzTmFOKHF0LnF1YW50aWZpZXIubWF4KSA\\/IHJzbHQucG9zIDogcG9zaXRpb24sIHZhbGlkYXRlZFBvcyAhPSBwb3NpdGlvbikgcmV0dXJuIHJzbHQgPSAkLmV4dGVuZChyc2x0LCBpc1ZhbGlkKHZhbGlkYXRlZFBvcywgZWxlbSwgITApKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyc2x0ICE9PSAhMCAmJiB2b2lkIDAgIT0gcnNsdC5wb3MgJiYgcnNsdC5wb3MgIT0gcG9zaXRpb24gJiYgKHZhbGlkYXRlZFBvcyA9IHJzbHQucG9zLCAKICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXIocG9zaXRpb24sIHZhbGlkYXRlZFBvcyksIHZhbGlkYXRlZFBvcyAhPSBwb3NpdGlvbikpIHJldHVybiByc2x0ID0gJC5leHRlbmQocnNsdCwgaXNWYWxpZCh2YWxpZGF0ZWRQb3MsIGVsZW0sICEwKSksIAogICAgICAgICAgICAgICAgICAgICAgICAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgIT0gcnNsdCAmJiB2b2lkIDAgPT0gcnNsdC5wb3MgJiYgdm9pZCAwID09IHJzbHQuYyA\\/IHRlc3RQb3MubG9jYXRvci5zbGljZSgpIDogdm9pZCAwOwogICAgICAgICAgICBmb3IgKHBvcyA9IGx2cCArIDE7IHZvaWQgMCA9PSB0ZXN0UG9zIHx8IG51bGwgIT0gdGVzdFBvcy5tYXRjaC5mbiB8fCBudWxsID09IHRlc3RQb3MubWF0Y2guZm4gJiYgIiIgIT0gdGVzdFBvcy5tYXRjaC5kZWY7IHBvcysrKSB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKSwgCiAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpOwogICAgICAgICAgICByZXR1cm4gbWFza0xlbmd0aCA9IHBvcywgdm9pZCAwID09IG1heExlbmd0aCB8fCBtYXhMZW5ndGggPiBtYXNrTGVuZ3RoID8gbWFza0xlbmd0aCA6IG1heExlbmd0aDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gc2Vla05leHQocG9zKSB7CiAgICAgICAgICAgIHZhciBtYXNrTCA9IGdldE1hc2tMZW5ndGgoKTsKICAgICAgICAgICAgaWYgKHBvcyA+PSBtYXNrTCkgcmV0dXJuIG1hc2tMOwogICAgICAgICAgICBmb3IgKHZhciBwb3NpdGlvbiA9IHBvczsgKytwb3NpdGlvbiA8IG1hc2tMICYmICFpc01hc2socG9zaXRpb24pICYmIChvcHRzLm5vanVtcHMgIT09ICEwIHx8IG9wdHMubm9qdW1wc1RocmVzaG9sZCA+IHBvc2l0aW9uKTsgKSA7CiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gc2Vla1ByZXZpb3VzKHBvcykgewogICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3M7CiAgICAgICAgICAgIGlmICgwID49IHBvc2l0aW9uKSByZXR1cm4gMDsKICAgICAgICAgICAgZm9yICg7LS1wb3NpdGlvbiA+IDAgJiYgIWlzTWFzayhwb3NpdGlvbik7ICkgOwogICAgICAgICAgICByZXR1cm4gcG9zaXRpb247CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGdldEJ1ZmZlckVsZW1lbnQocG9zaXRpb24pIHsKICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zaXRpb25dID8gZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24pIDogZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uXS5pbnB1dDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgY2FyZXRQb3MsIGV2ZW50LCB0cmlnZ2VySW5wdXRFdmVudCkgewogICAgICAgICAgICBpZiAoZXZlbnQgJiYgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkpIHsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvcHRzLm9uQmVmb3JlV3JpdGUuY2FsbChpbnB1dCwgZXZlbnQsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpOwogICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVmcmVzaEZyb21CdWZmZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSByZXN1bHQucmVmcmVzaEZyb21CdWZmZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKHJlZnJlc2ggPT09ICEwID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCByZXN1bHQuYnVmZmVyKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCksIGJ1ZmZlciA9IGdldEJ1ZmZlcigpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IHJlc3VsdC5jYXJldCB8fCBjYXJldFBvczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpbnB1dC5fdmFsdWVTZXQoYnVmZmVyLmpvaW4oIiIpKSwgdm9pZCAwICE9IGNhcmV0UG9zICYmIGNhcmV0KGlucHV0LCBjYXJldFBvcyksIAogICAgICAgICAgICB0cmlnZ2VySW5wdXRFdmVudCA9PT0gITAgJiYgKHNraXBJbnB1dEV2ZW50ID0gITAsICQoaW5wdXQpLnRyaWdnZXIoImlucHV0IikpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpIHsKICAgICAgICAgICAgcmV0dXJuIHRlc3QgPSB0ZXN0IHx8IGdldFRlc3QocG9zKSwgdm9pZCAwICE9IHRlc3QucGxhY2Vob2xkZXIgPyB0ZXN0LnBsYWNlaG9sZGVyIDogbnVsbCA9PSB0ZXN0LmZuID8gdGVzdC5kZWYgOiBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdChwb3MgJSBvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGNoZWNrVmFsKGlucHV0LCB3cml0ZU91dCwgc3RyaWN0LCBucHR2bCkgewogICAgICAgICAgICBmdW5jdGlvbiBpc1RlbXBsYXRlTWF0Y2goKSB7CiAgICAgICAgICAgICAgICB2YXIgaXNNYXRjaCA9ICExLCBjaGFyQ29kZU5keCA9IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoaW5pdGlhbE5keCwgc2Vla05leHQoaW5pdGlhbE5keCkpLmpvaW4oIiIpLmluZGV4T2YoY2hhckNvZGVzKTsKICAgICAgICAgICAgICAgIGlmICgtMSAhPSBjaGFyQ29kZU5keCAmJiAhaXNNYXNrKGluaXRpYWxOZHgpKSB7CiAgICAgICAgICAgICAgICAgICAgaXNNYXRjaCA9ICEwOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGJ1ZmZlclRlbXBsYXRlQXJyID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZShpbml0aWFsTmR4LCBpbml0aWFsTmR4ICsgY2hhckNvZGVOZHgpLCBpID0gMDsgaSA8IGJ1ZmZlclRlbXBsYXRlQXJyLmxlbmd0aDsgaSsrKSBpZiAoIiAiICE9IGJ1ZmZlclRlbXBsYXRlQXJyW2ldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlzTWF0Y2ggPSAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGlzTWF0Y2g7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGlucHV0VmFsdWUgPSB2b2lkIDAgIT0gbnB0dmwgPyBucHR2bC5zbGljZSgpIDogaW5wdXQuX3ZhbHVlR2V0KCkuc3BsaXQoIiIpOwogICAgICAgICAgICByZXNldE1hc2tTZXQoKSwgZ2V0TWFza1NldCgpLnAgPSBzZWVrTmV4dCgtMSksIHdyaXRlT3V0ICYmIGlucHV0Ll92YWx1ZVNldCgiIik7CiAgICAgICAgICAgIHZhciBzdGF0aWNJbnB1dCA9IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoMCwgc2Vla05leHQoLTEpKS5qb2luKCIiKSwgbWF0Y2hlcyA9IGlucHV0VmFsdWUuam9pbigiIikubWF0Y2gobmV3IFJlZ0V4cChlc2NhcGVSZWdleChzdGF0aWNJbnB1dCksICJnIikpOwogICAgICAgICAgICBtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCAmJiBpbnB1dFZhbHVlLnNwbGljZSgwLCBzdGF0aWNJbnB1dC5sZW5ndGggKiBtYXRjaGVzLmxlbmd0aCk7CiAgICAgICAgICAgIHZhciBjaGFyQ29kZXMgPSAiIiwgaW5pdGlhbE5keCA9IDA7CiAgICAgICAgICAgICQuZWFjaChpbnB1dFZhbHVlLCBmdW5jdGlvbihuZHgsIGNoYXJDb2RlKSB7CiAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSAkLkV2ZW50KCJrZXlwcmVzcyIpOwogICAgICAgICAgICAgICAga2V5cHJlc3Mud2hpY2ggPSBjaGFyQ29kZS5jaGFyQ29kZUF0KDApLCBjaGFyQ29kZXMgKz0gY2hhckNvZGU7CiAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgbHZUZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sIG5leHRUZXN0ID0gZ2V0VGVzdFRlbXBsYXRlKGx2cCArIDEsIGx2VGVzdCA\/IGx2VGVzdC5sb2NhdG9yLnNsaWNlKCkgOiB2b2lkIDAsIGx2cCk7CiAgICAgICAgICAgICAgICBpZiAoIWlzVGVtcGxhdGVNYXRjaCgpIHx8IHN0cmljdCkgewogICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBzdHJpY3QgPyBuZHggOiBudWxsID09IG5leHRUZXN0Lm1hdGNoLmZuICYmIG5leHRUZXN0Lm1hdGNoLm9wdGlvbmFsaXR5ICYmIGx2cCArIDEgPCBnZXRNYXNrU2V0KCkucCA\/IGx2cCArIDEgOiBnZXRNYXNrU2V0KCkucDsKICAgICAgICAgICAgICAgICAgICBrZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCAhMCwgITEsIHN0cmljdCwgcG9zKSwgaW5pdGlhbE5keCA9IHBvcyArIDEsIAogICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlcyA9ICIiOwogICAgICAgICAgICAgICAgfSBlbHNlIGtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMSwgITAsIGx2cCArIDEpOwogICAgICAgICAgICB9KSwgd3JpdGVPdXQgJiYgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCAkKGlucHV0KS5pcygiOmZvY3VzIikgPyBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigwKSkgOiB2b2lkIDAsICQuRXZlbnQoImNoZWNrdmFsIikpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBlc2NhcGVSZWdleChzdHIpIHsKICAgICAgICAgICAgcmV0dXJuICQuaW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc3RyKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gdW5tYXNrZWR2YWx1ZSgkaW5wdXQpIHsKICAgICAgICAgICAgaWYgKCRpbnB1dC5kYXRhKCJfaW5wdXRtYXNrIikgJiYgISRpbnB1dC5oYXNDbGFzcygiaGFzRGF0ZXBpY2tlciIpKSB7CiAgICAgICAgICAgICAgICB2YXIgdW1WYWx1ZSA9IFtdLCB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBwbmR4IGluIHZwcykgdnBzW3BuZHhdLm1hdGNoICYmIG51bGwgIT0gdnBzW3BuZHhdLm1hdGNoLmZuICYmIHVtVmFsdWUucHVzaCh2cHNbcG5keF0uaW5wdXQpOwogICAgICAgICAgICAgICAgdmFyIHVubWFza2VkVmFsdWUgPSAoaXNSVEwgPyB1bVZhbHVlLnJldmVyc2UoKSA6IHVtVmFsdWUpLmpvaW4oIiIpLCBidWZmZXJWYWx1ZSA9IChpc1JUTCA\/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyKCkpLmpvaW4oIiIpOwogICAgICAgICAgICAgICAgcmV0dXJuICQuaXNGdW5jdGlvbihvcHRzLm9uVW5NYXNrKSAmJiAodW5tYXNrZWRWYWx1ZSA9IG9wdHMub25Vbk1hc2suY2FsbCgkaW5wdXQsIGJ1ZmZlclZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKSB8fCB1bm1hc2tlZFZhbHVlKSwgCiAgICAgICAgICAgICAgICB1bm1hc2tlZFZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAkaW5wdXRbMF0uX3ZhbHVlR2V0KCk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIFRyYW5zbGF0ZVBvc2l0aW9uKHBvcykgewogICAgICAgICAgICBpZiAoaXNSVEwgJiYgIm51bWJlciIgPT0gdHlwZW9mIHBvcyAmJiAoIW9wdHMuZ3JlZWR5IHx8ICIiICE9IG9wdHMucGxhY2Vob2xkZXIpKSB7CiAgICAgICAgICAgICAgICB2YXIgYmZmckxnaHQgPSBnZXRCdWZmZXIoKS5sZW5ndGg7CiAgICAgICAgICAgICAgICBwb3MgPSBiZmZyTGdodCAtIHBvczsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcG9zOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBjYXJldChpbnB1dCwgYmVnaW4sIGVuZCkgewogICAgICAgICAgICB2YXIgcmFuZ2UsIG5wdCA9IGlucHV0LmpxdWVyeSAmJiBpbnB1dC5sZW5ndGggPiAwID8gaW5wdXRbMF0gOiBpbnB1dDsKICAgICAgICAgICAgaWYgKCJudW1iZXIiICE9IHR5cGVvZiBiZWdpbikgcmV0dXJuIG5wdC5zZXRTZWxlY3Rpb25SYW5nZSA\/IChiZWdpbiA9IG5wdC5zZWxlY3Rpb25TdGFydCwgCiAgICAgICAgICAgIGVuZCA9IG5wdC5zZWxlY3Rpb25FbmQpIDogZG9jdW1lbnQuc2VsZWN0aW9uICYmIGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSAmJiAocmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKSwgCiAgICAgICAgICAgIGJlZ2luID0gMCAtIHJhbmdlLmR1cGxpY2F0ZSgpLm1vdmVTdGFydCgiY2hhcmFjdGVyIiwgLTFlNSksIGVuZCA9IGJlZ2luICsgcmFuZ2UudGV4dC5sZW5ndGgpLCAKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYmVnaW46IFRyYW5zbGF0ZVBvc2l0aW9uKGJlZ2luKSwKICAgICAgICAgICAgICAgIGVuZDogVHJhbnNsYXRlUG9zaXRpb24oZW5kKQogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAoYmVnaW4gPSBUcmFuc2xhdGVQb3NpdGlvbihiZWdpbiksIGVuZCA9IFRyYW5zbGF0ZVBvc2l0aW9uKGVuZCksIGVuZCA9ICJudW1iZXIiID09IHR5cGVvZiBlbmQgPyBlbmQgOiBiZWdpbiwgCiAgICAgICAgICAgICQobnB0KS5pcygiOnZpc2libGUiKSkgewogICAgICAgICAgICAgICAgdmFyIHNjcm9sbENhbGMgPSAkKG5wdCkuY3NzKCJmb250LXNpemUiKS5yZXBsYWNlKCJweCIsICIiKSAqIGVuZDsKICAgICAgICAgICAgICAgIG5wdC5zY3JvbGxMZWZ0ID0gc2Nyb2xsQ2FsYyA+IG5wdC5zY3JvbGxXaWR0aCA\/IHNjcm9sbENhbGMgOiAwLCAwID09IG9wdHMuaW5zZXJ0TW9kZSAmJiBiZWdpbiA9PSBlbmQgJiYgZW5kKyssIAogICAgICAgICAgICAgICAgbnB0LnNldFNlbGVjdGlvblJhbmdlID8gKG5wdC5zZWxlY3Rpb25TdGFydCA9IGJlZ2luLCBucHQuc2VsZWN0aW9uRW5kID0gZW5kKSA6IG5wdC5jcmVhdGVUZXh0UmFuZ2UgJiYgKHJhbmdlID0gbnB0LmNyZWF0ZVRleHRSYW5nZSgpLCAKICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKCEwKSwgcmFuZ2UubW92ZUVuZCgiY2hhcmFjdGVyIiwgZW5kKSwgcmFuZ2UubW92ZVN0YXJ0KCJjaGFyYWN0ZXIiLCBiZWdpbiksIAogICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCkpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKHJldHVybkRlZmluaXRpb24pIHsKICAgICAgICAgICAgdmFyIHBvcywgdGVzdFBvcywgYnVmZmVyID0gZ2V0QnVmZmVyKCksIGJsID0gYnVmZmVyLmxlbmd0aCwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgcG9zaXRpb25zID0ge30sIGx2VGVzdCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdLCBuZHhJbnRsenIgPSB2b2lkIDAgIT0gbHZUZXN0ID8gbHZUZXN0LmxvY2F0b3Iuc2xpY2UoKSA6IHZvaWQgMDsKICAgICAgICAgICAgZm9yIChwb3MgPSBsdnAgKyAxOyBwb3MgPCBidWZmZXIubGVuZ3RoOyBwb3MrKykgdGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSksIAogICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKSwgcG9zaXRpb25zW3Bvc10gPSAkLmV4dGVuZCghMCwge30sIHRlc3RQb3MpOwogICAgICAgICAgICB2YXIgbHZUZXN0QWx0QXJyID0gbHZUZXN0ICYmIHZvaWQgMCAhPSBsdlRlc3QuYWx0ZXJuYXRpb24gPyBsdlRlc3QubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dLnNwbGl0KCIsIikgOiBbXTsKICAgICAgICAgICAgZm9yIChwb3MgPSBibCAtIDE7IHBvcyA+IGx2cCAmJiAodGVzdFBvcyA9IHBvc2l0aW9uc1twb3NdLm1hdGNoLCAodGVzdFBvcy5vcHRpb25hbGl0eSB8fCB0ZXN0UG9zLm9wdGlvbmFsUXVhbnRpZmllciB8fCBsdlRlc3QgJiYgdm9pZCAwICE9IGx2VGVzdC5hbHRlcm5hdGlvbiAmJiB2b2lkIDAgIT0gcG9zaXRpb25zW3Bvc10ubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dICYmIC0xICE9ICQuaW5BcnJheShwb3NpdGlvbnNbcG9zXS5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKSwgbHZUZXN0QWx0QXJyKSkgJiYgYnVmZmVyW3Bvc10gPT0gZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0UG9zKSk7IHBvcy0tKSBibC0tOwogICAgICAgICAgICByZXR1cm4gcmV0dXJuRGVmaW5pdGlvbiA\/IHsKICAgICAgICAgICAgICAgIGw6IGJsLAogICAgICAgICAgICAgICAgZGVmOiBwb3NpdGlvbnNbYmxdID8gcG9zaXRpb25zW2JsXS5tYXRjaCA6IHZvaWQgMAogICAgICAgICAgICB9IDogYmw7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcikgewogICAgICAgICAgICBmb3IgKHZhciBybCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKCksIGxtaWIgPSBidWZmZXIubGVuZ3RoIC0gMTsgbG1pYiA+IHJsICYmICFpc01hc2sobG1pYik7IGxtaWItLSkgOwogICAgICAgICAgICBidWZmZXIuc3BsaWNlKHJsLCBsbWliICsgMSAtIHJsKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaXNDb21wbGV0ZShidWZmZXIpIHsKICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLmlzQ29tcGxldGUpKSByZXR1cm4gb3B0cy5pc0NvbXBsZXRlLmNhbGwoJGVsLCBidWZmZXIsIG9wdHMpOwogICAgICAgICAgICBpZiAoIioiID09IG9wdHMucmVwZWF0KSByZXR1cm4gdm9pZCAwOwogICAgICAgICAgICB2YXIgY29tcGxldGUgPSAhMSwgbHJwID0gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24oITApLCBhbWwgPSBzZWVrUHJldmlvdXMobHJwLmwpLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpOwogICAgICAgICAgICBpZiAobHZwID09IGFtbCAmJiAodm9pZCAwID09IGxycC5kZWYgfHwgbHJwLmRlZi5uZXdCbG9ja01hcmtlciB8fCBscnAuZGVmLm9wdGlvbmFsUXVhbnRpZmllcikpIHsKICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gITA7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgYW1sID49IGk7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHZhciBtYXNrID0gaXNNYXNrKGkpOwogICAgICAgICAgICAgICAgICAgIGlmIChtYXNrICYmICh2b2lkIDAgPT0gYnVmZmVyW2ldIHx8IGJ1ZmZlcltpXSA9PSBnZXRQbGFjZWhvbGRlcihpKSkgfHwgIW1hc2sgJiYgYnVmZmVyW2ldICE9IGdldFBsYWNlaG9sZGVyKGkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY29tcGxldGU7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGlzU2VsZWN0aW9uKGJlZ2luLCBlbmQpIHsKICAgICAgICAgICAgcmV0dXJuIGlzUlRMID8gYmVnaW4gLSBlbmQgPiAxIHx8IGJlZ2luIC0gZW5kID09IDEgJiYgb3B0cy5pbnNlcnRNb2RlIDogZW5kIC0gYmVnaW4gPiAxIHx8IGVuZCAtIGJlZ2luID09IDEgJiYgb3B0cy5pbnNlcnRNb2RlOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBpbnN0YWxsRXZlbnRSdWxlcihucHQpIHsKICAgICAgICAgICAgdmFyIGV2ZW50cyA9ICQuX2RhdGEobnB0KS5ldmVudHM7CiAgICAgICAgICAgICQuZWFjaChldmVudHMsIGZ1bmN0aW9uKGV2ZW50VHlwZSwgZXZlbnRIYW5kbGVycykgewogICAgICAgICAgICAgICAgJC5lYWNoKGV2ZW50SGFuZGxlcnMsIGZ1bmN0aW9uKG5keCwgZXZlbnRIYW5kbGVyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCJpbnB1dG1hc2siID09IGV2ZW50SGFuZGxlci5uYW1lc3BhY2UgJiYgInNldHZhbHVlIiAhPSBldmVudEhhbmRsZXIudHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IGV2ZW50SGFuZGxlci5oYW5kbGVyOwogICAgICAgICAgICAgICAgICAgICAgICBldmVudEhhbmRsZXIuaGFuZGxlciA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCAmJiAoIXRoaXMucmVhZE9ubHkgfHwgImtleWRvd24iID09IGUudHlwZSAmJiBlLmN0cmxLZXkgJiYgNjcgPT0gZS5rZXlDb2RlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJpbnB1dCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lwSW5wdXRFdmVudCA9PT0gITApIHJldHVybiBza2lwSW5wdXRFdmVudCA9ICExLCBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImtleWRvd24iOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwS2V5UHJlc3NFdmVudCA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJrZXlwcmVzcyI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lwS2V5UHJlc3NFdmVudCA9PT0gITApIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBLZXlQcmVzc0V2ZW50ID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImNvbXBvc2l0aW9uc3RhcnQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJjb21wb3NpdGlvbnVwZGF0ZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBJbnB1dEV2ZW50ID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImNvbXBvc2l0aW9uZW5kIjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcGF0Y2hWYWx1ZVByb3BlcnR5KG5wdCkgewogICAgICAgICAgICBmdW5jdGlvbiBQYXRjaFZhbGhvb2sodHlwZSkgewogICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PSAkLnZhbEhvb2tzW3R5cGVdIHx8IDEgIT0gJC52YWxIb29rc1t0eXBlXS5pbnB1dG1hc2twYXRjaCkgewogICAgICAgICAgICAgICAgICAgIHZhciB2YWxob29rR2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLmdldCA\/ICQudmFsSG9va3NbdHlwZV0uZ2V0IDogZnVuY3Rpb24oZWxlbSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS52YWx1ZTsKICAgICAgICAgICAgICAgICAgICB9LCB2YWxob29rU2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLnNldCA\/ICQudmFsSG9va3NbdHlwZV0uc2V0IDogZnVuY3Rpb24oZWxlbSwgdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0udmFsdWUgPSB2YWx1ZSwgZWxlbTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICQudmFsSG9va3NbdHlwZV0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oZWxlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlbGVtID0gJChlbGVtKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZWxlbS5kYXRhKCJfaW5wdXRtYXNrIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGVsZW0uZGF0YSgiX2lucHV0bWFzayIpLm9wdHMuYXV0b1VubWFzaykgcmV0dXJuICRlbGVtLmlucHV0bWFzaygidW5tYXNrZWR2YWx1ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWxob29rR2V0KGVsZW0pLCBpbnB1dERhdGEgPSAkZWxlbS5kYXRhKCJfaW5wdXRtYXNrIiksIG1hc2tzZXQgPSBpbnB1dERhdGEubWFza3NldCwgYnVmZmVyVGVtcGxhdGUgPSBtYXNrc2V0Ll9idWZmZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlclRlbXBsYXRlID0gYnVmZmVyVGVtcGxhdGUgPyBidWZmZXJUZW1wbGF0ZS5qb2luKCIiKSA6ICIiLCByZXN1bHQgIT0gYnVmZmVyVGVtcGxhdGUgPyByZXN1bHQgOiAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxob29rR2V0KGVsZW0pOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGVsZW0sIHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0LCAkZWxlbSA9ICQoZWxlbSksIGlucHV0RGF0YSA9ICRlbGVtLmRhdGEoIl9pbnB1dG1hc2siKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dERhdGEgPyAocmVzdWx0ID0gdmFsaG9va1NldChlbGVtLCAkLmlzRnVuY3Rpb24oaW5wdXREYXRhLm9wdHMub25CZWZvcmVNYXNrKSA\/IGlucHV0RGF0YS5vcHRzLm9uQmVmb3JlTWFzay5jYWxsKGVsLCB2YWx1ZSwgaW5wdXREYXRhLm9wdHMpIHx8IHZhbHVlIDogdmFsdWUpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlbGVtLnRyaWdnZXJIYW5kbGVyKCJzZXR2YWx1ZS5pbnB1dG1hc2siKSkgOiByZXN1bHQgPSB2YWxob29rU2V0KGVsZW0sIHZhbHVlKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0bWFza3BhdGNoOiAhMAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0dGVyKCkgewogICAgICAgICAgICAgICAgdmFyICRzZWxmID0gJCh0aGlzKSwgaW5wdXREYXRhID0gJCh0aGlzKS5kYXRhKCJfaW5wdXRtYXNrIik7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXREYXRhID8gaW5wdXREYXRhLm9wdHMuYXV0b1VubWFzayA\/ICRzZWxmLmlucHV0bWFzaygidW5tYXNrZWR2YWx1ZSIpIDogdmFsdWVHZXQuY2FsbCh0aGlzKSAhPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oIiIpID8gdmFsdWVHZXQuY2FsbCh0aGlzKSA6ICIiIDogdmFsdWVHZXQuY2FsbCh0aGlzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBzZXR0ZXIodmFsdWUpIHsKICAgICAgICAgICAgICAgIHZhciBpbnB1dERhdGEgPSAkKHRoaXMpLmRhdGEoIl9pbnB1dG1hc2siKTsKICAgICAgICAgICAgICAgIGlucHV0RGF0YSA\/ICh2YWx1ZVNldC5jYWxsKHRoaXMsICQuaXNGdW5jdGlvbihpbnB1dERhdGEub3B0cy5vbkJlZm9yZU1hc2spID8gaW5wdXREYXRhLm9wdHMub25CZWZvcmVNYXNrLmNhbGwoZWwsIHZhbHVlLCBpbnB1dERhdGEub3B0cykgfHwgdmFsdWUgOiB2YWx1ZSksIAogICAgICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VySGFuZGxlcigic2V0dmFsdWUuaW5wdXRtYXNrIikpIDogdmFsdWVTZXQuY2FsbCh0aGlzLCB2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gSW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2sobnB0KSB7CiAgICAgICAgICAgICAgICAkKG5wdCkuYmluZCgibW91c2VlbnRlci5pbnB1dG1hc2siLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKSwgaW5wdXQgPSB0aGlzLCB2YWx1ZSA9IGlucHV0Ll92YWx1ZUdldCgpOwogICAgICAgICAgICAgICAgICAgICIiICE9IHZhbHVlICYmIHZhbHVlICE9IGdldEJ1ZmZlcigpLmpvaW4oIiIpICYmICh0aGlzLl92YWx1ZVNldCgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChlbCwgdmFsdWUsIG9wdHMpIHx8IHZhbHVlIDogdmFsdWUpLCAKICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlckhhbmRsZXIoInNldHZhbHVlLmlucHV0bWFzayIpKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgLy8hISB0aGUgYm91bmQgaGFuZGxlcnMgYXJlIGV4ZWN1dGVkIGluIHRoZSBvcmRlciB0aGV5IHdoZXJlIGJvdW5kCiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gJC5fZGF0YShucHQpLmV2ZW50cywgaGFuZGxlcnMgPSBldmVudHMubW91c2VvdmVyOwogICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgb3VySGFuZGxlciA9IGhhbmRsZXJzW2hhbmRsZXJzLmxlbmd0aCAtIDFdLCBpID0gaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkgaGFuZGxlcnNbaV0gPSBoYW5kbGVyc1tpIC0gMV07CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnNbMF0gPSBvdXJIYW5kbGVyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciB2YWx1ZUdldCwgdmFsdWVTZXQ7CiAgICAgICAgICAgIGlmICghbnB0Ll92YWx1ZUdldCkgewogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpIHsKICAgICAgICAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5wdCwgInZhbHVlIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIG5wdC5fX2xvb2t1cEdldHRlcl9fKCJ2YWx1ZSIpID8gKHZhbHVlR2V0ID0gbnB0Ll9fbG9va3VwR2V0dGVyX18oInZhbHVlIiksIAogICAgICAgICAgICAgICAgdmFsdWVTZXQgPSBucHQuX19sb29rdXBTZXR0ZXJfXygidmFsdWUiKSwgbnB0Ll9fZGVmaW5lR2V0dGVyX18oInZhbHVlIiwgZ2V0dGVyKSwgCiAgICAgICAgICAgICAgICBucHQuX19kZWZpbmVTZXR0ZXJfXygidmFsdWUiLCBzZXR0ZXIpKSA6ICh2YWx1ZUdldCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBucHQudmFsdWU7CiAgICAgICAgICAgICAgICB9LCB2YWx1ZVNldCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgbnB0LnZhbHVlID0gdmFsdWU7CiAgICAgICAgICAgICAgICB9LCBQYXRjaFZhbGhvb2sobnB0LnR5cGUpLCBJbnN0YWxsTmF0aXZlVmFsdWVTZXRGYWxsYmFjayhucHQpKSwgbnB0Ll92YWx1ZUdldCA9IGZ1bmN0aW9uKG92ZXJydWxlUlRMKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzUlRMICYmIG92ZXJydWxlUlRMICE9PSAhMCA\/IHZhbHVlR2V0LmNhbGwodGhpcykuc3BsaXQoIiIpLnJldmVyc2UoKS5qb2luKCIiKSA6IHZhbHVlR2V0LmNhbGwodGhpcyk7CiAgICAgICAgICAgICAgICB9LCBucHQuX3ZhbHVlU2V0ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldC5jYWxsKHRoaXMsIGlzUlRMID8gdmFsdWUuc3BsaXQoIiIpLnJldmVyc2UoKS5qb2luKCIiKSA6IHZhbHVlKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVtb3ZlKGlucHV0LCBrLCBwb3MsIHN0cmljdCkgewogICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmFsaXplKCkgewogICAgICAgICAgICAgICAgaWYgKG9wdHMua2VlcFN0YXRpYykgewogICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RBbHQsIHZhbGlkSW5wdXRzID0gW107CiAgICAgICAgICAgICAgICAgICAgZm9yIChsYXN0QWx0ID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTsgbGFzdEFsdCA+PSAwOyBsYXN0QWx0LS0pIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0uYWx0ZXJuYXRpb24pIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB2YWxpZElucHV0cy5wdXNoKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XS5pbnB1dCksIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChsYXN0QWx0ID4gMCkgZm9yICg7dmFsaWRJbnB1dHMubGVuZ3RoID4gMDsgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9ICQuRXZlbnQoImtleXByZXNzIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gdmFsaWRJbnB1dHMucG9wKCkuY2hhckNvZGVBdCgwKSwga2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgITAsICExLCAhMSwgZ2V0TWFza1NldCgpLnApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoKG9wdHMubnVtZXJpY0lucHV0IHx8IGlzUlRMKSAmJiAoayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSA\/IGsgPSAkLmlucHV0bWFzay5rZXlDb2RlLkRFTEVURSA6IGsgPT0gJC5pbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgJiYgKGsgPSAkLmlucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSksIAogICAgICAgICAgICBpc1JUTCkpIHsKICAgICAgICAgICAgICAgIHZhciBwZW5kID0gcG9zLmVuZDsKICAgICAgICAgICAgICAgIHBvcy5lbmQgPSBwb3MuYmVnaW4sIHBvcy5iZWdpbiA9IHBlbmQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGsgPT0gJC5pbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UgJiYgKHBvcy5lbmQgLSBwb3MuYmVnaW4gPCAxIHx8IDAgPT0gb3B0cy5pbnNlcnRNb2RlKSA\/IHBvcy5iZWdpbiA9IHNlZWtQcmV2aW91cyhwb3MuYmVnaW4pIDogayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLkRFTEVURSAmJiBwb3MuYmVnaW4gPT0gcG9zLmVuZCAmJiAocG9zLmVuZCA9IGlzTWFzayhwb3MuZW5kKSA\/IHBvcy5lbmQgKyAxIDogc2Vla05leHQocG9zLmVuZCkgKyAxKSwgCiAgICAgICAgICAgIHN0cmlwVmFsaWRQb3NpdGlvbnMocG9zLmJlZ2luLCBwb3MuZW5kLCAhMSwgc3RyaWN0KSwgc3RyaWN0ICE9PSAhMCkgewogICAgICAgICAgICAgICAgZ2VuZXJhbGl6ZSgpOwogICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHBvcy5iZWdpbik7CiAgICAgICAgICAgICAgICBsdnAgPCBwb3MuYmVnaW4gPyAoLTEgPT0gbHZwICYmIHJlc2V0TWFza1NldCgpLCBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGx2cCkpIDogZ2V0TWFza1NldCgpLnAgPSBwb3MuYmVnaW47CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24ga2V5ZG93bkV2ZW50KGUpIHsKICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLmtleUNvZGUsIHBvcyA9IGNhcmV0KGlucHV0KTsKICAgICAgICAgICAgayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSB8fCBrID09ICQuaW5wdXRtYXNrLmtleUNvZGUuREVMRVRFIHx8IGlwaG9uZSAmJiAxMjcgPT0gayB8fCBlLmN0cmxLZXkgJiYgODggPT0gayAmJiAhaXNJbnB1dEV2ZW50U3VwcG9ydGVkKCJjdXQiKSA\/IChlLnByZXZlbnREZWZhdWx0KCksIAogICAgICAgICAgICA4OCA9PSBrICYmICh1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKCIiKSksIGhhbmRsZVJlbW92ZShpbnB1dCwgaywgcG9zKSwgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBnZXRNYXNrU2V0KCkucCwgZSwgdW5kb1ZhbHVlICE9IGdldEJ1ZmZlcigpLmpvaW4oIiIpKSwgCiAgICAgICAgICAgIGlucHV0Ll92YWx1ZUdldCgpID09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbigiIikgPyAkaW5wdXQudHJpZ2dlcigiY2xlYXJlZCIpIDogaXNDb21wbGV0ZShnZXRCdWZmZXIoKSkgPT09ICEwICYmICRpbnB1dC50cmlnZ2VyKCJjb21wbGV0ZSIpLCAKICAgICAgICAgICAgb3B0cy5zaG93VG9vbHRpcCAmJiAkaW5wdXQucHJvcCgidGl0bGUiLCBnZXRNYXNrU2V0KCkubWFzaykpIDogayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLkVORCB8fCBrID09ICQuaW5wdXRtYXNrLmtleUNvZGUuUEFHRV9ET1dOID8gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpOwogICAgICAgICAgICAgICAgb3B0cy5pbnNlcnRNb2RlIHx8IGNhcmV0UG9zICE9IGdldE1hc2tMZW5ndGgoKSB8fCBlLnNoaWZ0S2V5IHx8IGNhcmV0UG9zLS0sIGNhcmV0KGlucHV0LCBlLnNoaWZ0S2V5ID8gcG9zLmJlZ2luIDogY2FyZXRQb3MsIGNhcmV0UG9zKTsKICAgICAgICAgICAgfSwgMCkgOiBrID09ICQuaW5wdXRtYXNrLmtleUNvZGUuSE9NRSAmJiAhZS5zaGlmdEtleSB8fCBrID09ICQuaW5wdXRtYXNrLmtleUNvZGUuUEFHRV9VUCA\/IGNhcmV0KGlucHV0LCAwLCBlLnNoaWZ0S2V5ID8gcG9zLmJlZ2luIDogMCkgOiAob3B0cy51bmRvT25Fc2NhcGUgJiYgayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLkVTQ0FQRSB8fCA5MCA9PSBrICYmIGUuY3RybEtleSkgJiYgZS5hbHRLZXkgIT09ICEwID8gKGNoZWNrVmFsKGlucHV0LCAhMCwgITEsIHVuZG9WYWx1ZS5zcGxpdCgiIikpLCAKICAgICAgICAgICAgJGlucHV0LmNsaWNrKCkpIDogayAhPSAkLmlucHV0bWFzay5rZXlDb2RlLklOU0VSVCB8fCBlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSA\/IDAgIT0gb3B0cy5pbnNlcnRNb2RlIHx8IGUuc2hpZnRLZXkgfHwgKGsgPT0gJC5pbnB1dG1hc2sua2V5Q29kZS5SSUdIVCA\/IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBjYXJldChpbnB1dCk7CiAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgY2FyZXRQb3MuYmVnaW4pOwogICAgICAgICAgICB9LCAwKSA6IGsgPT0gJC5pbnB1dG1hc2sua2V5Q29kZS5MRUZUICYmIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBjYXJldChpbnB1dCk7CiAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgaXNSVEwgPyBjYXJldFBvcy5iZWdpbiArIDEgOiBjYXJldFBvcy5iZWdpbiAtIDEpOwogICAgICAgICAgICB9LCAwKSkgOiAob3B0cy5pbnNlcnRNb2RlID0gIW9wdHMuaW5zZXJ0TW9kZSwgY2FyZXQoaW5wdXQsIG9wdHMuaW5zZXJ0TW9kZSB8fCBwb3MuYmVnaW4gIT0gZ2V0TWFza0xlbmd0aCgpID8gcG9zLmJlZ2luIDogcG9zLmJlZ2luIC0gMSkpLCAKICAgICAgICAgICAgaWdub3JhYmxlID0gLTEgIT0gJC5pbkFycmF5KGssIG9wdHMuaWdub3JhYmxlcyk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGtleXByZXNzRXZlbnQoZSwgY2hlY2t2YWwsIHdyaXRlT3V0LCBzdHJpY3QsIG5keCkgewogICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgayA9IGUud2hpY2ggfHwgZS5jaGFyQ29kZSB8fCBlLmtleUNvZGU7CiAgICAgICAgICAgIGlmICghKGNoZWNrdmFsID09PSAhMCB8fCBlLmN0cmxLZXkgJiYgZS5hbHRLZXkpICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGlnbm9yYWJsZSkpIHJldHVybiAhMDsKICAgICAgICAgICAgaWYgKGspIHsKICAgICAgICAgICAgICAgIDQ2ID09IGsgJiYgMCA9PSBlLnNoaWZ0S2V5ICYmICIsIiA9PSBvcHRzLnJhZGl4UG9pbnQgJiYgKGsgPSA0NCk7CiAgICAgICAgICAgICAgICB2YXIgZm9yd2FyZFBvc2l0aW9uLCBwb3MgPSBjaGVja3ZhbCA\/IHsKICAgICAgICAgICAgICAgICAgICBiZWdpbjogbmR4LAogICAgICAgICAgICAgICAgICAgIGVuZDogbmR4CiAgICAgICAgICAgICAgICB9IDogY2FyZXQoaW5wdXQpLCBjID0gU3RyaW5nLmZyb21DaGFyQ29kZShrKSwgaXNTbGN0biA9IGlzU2VsZWN0aW9uKHBvcy5iZWdpbiwgcG9zLmVuZCk7CiAgICAgICAgICAgICAgICBpc1NsY3RuICYmIChnZXRNYXNrU2V0KCkudW5kb1Bvc2l0aW9ucyA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSwgCiAgICAgICAgICAgICAgICBoYW5kbGVSZW1vdmUoaW5wdXQsICQuaW5wdXRtYXNrLmtleUNvZGUuREVMRVRFLCBwb3MsICEwKSwgcG9zLmJlZ2luID0gZ2V0TWFza1NldCgpLnAsIAogICAgICAgICAgICAgICAgb3B0cy5pbnNlcnRNb2RlIHx8IChvcHRzLmluc2VydE1vZGUgPSAhb3B0cy5pbnNlcnRNb2RlLCBzZXRWYWxpZFBvc2l0aW9uKHBvcy5iZWdpbiwgc3RyaWN0KSwgCiAgICAgICAgICAgICAgICBvcHRzLmluc2VydE1vZGUgPSAhb3B0cy5pbnNlcnRNb2RlKSwgaXNTbGN0biA9ICFvcHRzLm11bHRpKSwgZ2V0TWFza1NldCgpLndyaXRlT3V0QnVmZmVyID0gITA7CiAgICAgICAgICAgICAgICB2YXIgcCA9IGlzUlRMICYmICFpc1NsY3RuID8gcG9zLmVuZCA6IHBvcy5iZWdpbiwgdmFsUmVzdWx0ID0gaXNWYWxpZChwLCBjLCBzdHJpY3QpOwogICAgICAgICAgICAgICAgaWYgKHZhbFJlc3VsdCAhPT0gITEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodmFsUmVzdWx0ICE9PSAhMCAmJiAocCA9IHZvaWQgMCAhPSB2YWxSZXN1bHQucG9zID8gdmFsUmVzdWx0LnBvcyA6IHAsIGMgPSB2b2lkIDAgIT0gdmFsUmVzdWx0LmMgPyB2YWxSZXN1bHQuYyA6IGMpLCAKICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoITApLCB2b2lkIDAgIT0gdmFsUmVzdWx0LmNhcmV0KSBmb3J3YXJkUG9zaXRpb24gPSB2YWxSZXN1bHQuY2FyZXQ7IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdnBzID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zOwogICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkUG9zaXRpb24gPSAhb3B0cy5rZWVwU3RhdGljICYmICh2b2lkIDAgIT0gdnBzW3AgKyAxXSAmJiBnZXRUZXN0cyhwICsgMSwgdnBzW3BdLmxvY2F0b3Iuc2xpY2UoKSwgcCkubGVuZ3RoID4gMSB8fCB2b2lkIDAgIT0gdnBzW3BdLmFsdGVybmF0aW9uKSA\/IHAgKyAxIDogc2Vla05leHQocCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gZm9yd2FyZFBvc2l0aW9uOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHdyaXRlT3V0ICE9PSAhMSkgewogICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgICAgICBpZiAoc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5vbktleVZhbGlkYXRpb24uY2FsbChzZWxmLCB2YWxSZXN1bHQsIG9wdHMpOwogICAgICAgICAgICAgICAgICAgIH0sIDApLCBnZXRNYXNrU2V0KCkud3JpdGVPdXRCdWZmZXIgJiYgdmFsUmVzdWx0ICE9PSAhMSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBidWZmZXIsIGNoZWNrdmFsID8gdm9pZCAwIDogb3B0cy5udW1lcmljSW5wdXQgPyBzZWVrUHJldmlvdXMoZm9yd2FyZFBvc2l0aW9uKSA6IGZvcndhcmRQb3NpdGlvbiwgZSwgY2hlY2t2YWwgIT09ICEwKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrdmFsICE9PSAhMCAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDb21wbGV0ZShidWZmZXIpID09PSAhMCAmJiAkaW5wdXQudHJpZ2dlcigiY29tcGxldGUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlzU2xjdG4gJiYgKGdldE1hc2tTZXQoKS5idWZmZXIgPSB2b2lkIDAsIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9IGdldE1hc2tTZXQoKS51bmRvUG9zaXRpb25zKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpc1NsY3RuICYmIChnZXRNYXNrU2V0KCkuYnVmZmVyID0gdm9pZCAwLCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSBnZXRNYXNrU2V0KCkudW5kb1Bvc2l0aW9ucyk7CiAgICAgICAgICAgICAgICBpZiAob3B0cy5zaG93VG9vbHRpcCAmJiAkaW5wdXQucHJvcCgidGl0bGUiLCBnZXRNYXNrU2V0KCkubWFzayksIGNoZWNrdmFsICYmICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlV3JpdGUpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9wdHMub25CZWZvcmVXcml0ZS5jYWxsKHRoaXMsIGUsIGdldEJ1ZmZlcigpLCBmb3J3YXJkUG9zaXRpb24sIG9wdHMpOwogICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoID0gcmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyOwogICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcihyZWZyZXNoID09PSAhMCA\/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcmVzdWx0LmJ1ZmZlciksIAogICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoITApLCByZXN1bHQuY2FyZXQgJiYgKGdldE1hc2tTZXQoKS5wID0gcmVzdWx0LmNhcmV0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24ga2V5dXBFdmVudChlKSB7CiAgICAgICAgICAgIHZhciBidWZmZXIgPSAoJCh0aGlzKSwgZS5rZXlDb2RlLCBnZXRCdWZmZXIoKSk7CiAgICAgICAgICAgIG9wdHMub25LZXlVcC5jYWxsKHRoaXMsIGUsIGJ1ZmZlciwgb3B0cyk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHBhc3RlRXZlbnQoZSkgewogICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgaW5wdXRWYWx1ZSA9IGlucHV0Ll92YWx1ZUdldCghMCksIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpOwogICAgICAgICAgICBpZiAoInByb3BlcnR5Y2hhbmdlIiA9PSBlLnR5cGUgJiYgaW5wdXQuX3ZhbHVlR2V0KCkubGVuZ3RoIDw9IGdldE1hc2tMZW5ndGgoKSkgcmV0dXJuICEwOwogICAgICAgICAgICBpZiAoInBhc3RlIiA9PSBlLnR5cGUpIHsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZUJlZm9yZUNhcmV0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoMCwgY2FyZXRQb3MuYmVnaW4pLCB2YWx1ZUFmdGVyQ2FyZXQgPSBpbnB1dFZhbHVlLnN1YnN0cihjYXJldFBvcy5lbmQsIGlucHV0VmFsdWUubGVuZ3RoKTsKICAgICAgICAgICAgICAgIHZhbHVlQmVmb3JlQ2FyZXQgPT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgwLCBjYXJldFBvcy5iZWdpbikuam9pbigiIikgJiYgKHZhbHVlQmVmb3JlQ2FyZXQgPSAiIiksIAogICAgICAgICAgICAgICAgdmFsdWVBZnRlckNhcmV0ID09IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoY2FyZXRQb3MuZW5kKS5qb2luKCIiKSAmJiAodmFsdWVBZnRlckNhcmV0ID0gIiIpLCAKICAgICAgICAgICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhICYmIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEgPyBpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoIlRleHQiKSArIHZhbHVlQWZ0ZXJDYXJldCA6IGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YSAmJiBlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YS5nZXREYXRhICYmIChpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEoInRleHQvcGxhaW4iKSArIHZhbHVlQWZ0ZXJDYXJldCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHBhc3RlVmFsdWUgPSBpbnB1dFZhbHVlOwogICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVQYXN0ZSkpIHsKICAgICAgICAgICAgICAgIGlmIChwYXN0ZVZhbHVlID0gb3B0cy5vbkJlZm9yZVBhc3RlLmNhbGwoaW5wdXQsIGlucHV0VmFsdWUsIG9wdHMpLCBwYXN0ZVZhbHVlID09PSAhMSkgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKSwgCiAgICAgICAgICAgICAgICAhMTsKICAgICAgICAgICAgICAgIHBhc3RlVmFsdWUgfHwgKHBhc3RlVmFsdWUgPSBpbnB1dFZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY2hlY2tWYWwoaW5wdXQsICEwLCAhMSwgaXNSVEwgPyBwYXN0ZVZhbHVlLnNwbGl0KCIiKS5yZXZlcnNlKCkgOiBwYXN0ZVZhbHVlLnNwbGl0KCIiKSksIAogICAgICAgICAgICAkaW5wdXQuY2xpY2soKSwgaXNDb21wbGV0ZShnZXRCdWZmZXIoKSkgPT09ICEwICYmICRpbnB1dC50cmlnZ2VyKCJjb21wbGV0ZSIpLCAhMTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaW5wdXRGYWxsQmFja0V2ZW50KGUpIHsKICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpczsKICAgICAgICAgICAgY2hlY2tWYWwoaW5wdXQsICEwLCAhMSksIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpID09PSAhMCAmJiAkKGlucHV0KS50cmlnZ2VyKCJjb21wbGV0ZSIpLCAKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBjb21wb3NpdGlvblN0YXJ0RXZlbnQoZSkgewogICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzOwogICAgICAgICAgICB1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKCIiKSwgKCIiID09IGNvbXBvc2l0aW9uRGF0YSB8fCAwICE9IGUub3JpZ2luYWxFdmVudC5kYXRhLmluZGV4T2YoY29tcG9zaXRpb25EYXRhKSkgJiYgKGNvbXBvc2l0aW9uQ2FyZXRQb3MgPSBjYXJldChpbnB1dCkpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBjb21wb3NpdGlvblVwZGF0ZUV2ZW50KGUpIHsKICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgY2FyZXRQb3MgPSBjb21wb3NpdGlvbkNhcmV0UG9zIHx8IGNhcmV0KGlucHV0KTsKICAgICAgICAgICAgMCA9PSBlLm9yaWdpbmFsRXZlbnQuZGF0YS5pbmRleE9mKGNvbXBvc2l0aW9uRGF0YSkgJiYgKHJlc2V0TWFza1NldCgpLCBjYXJldFBvcyA9IHsKICAgICAgICAgICAgICAgIGJlZ2luOiAwLAogICAgICAgICAgICAgICAgZW5kOiAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgbmV3RGF0YSA9IGUub3JpZ2luYWxFdmVudC5kYXRhOwogICAgICAgICAgICBjYXJldChpbnB1dCwgY2FyZXRQb3MuYmVnaW4sIGNhcmV0UG9zLmVuZCk7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3RGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gJC5FdmVudCgia2V5cHJlc3MiKTsKICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gbmV3RGF0YS5jaGFyQ29kZUF0KGkpLCBza2lwS2V5UHJlc3NFdmVudCA9ICExLCBpZ25vcmFibGUgPSAhMSwgCiAgICAgICAgICAgICAgICBrZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGZvcndhcmRQb3NpdGlvbiA9IGdldE1hc2tTZXQoKS5wOwogICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBvcHRzLm51bWVyaWNJbnB1dCA\\/IG9wdHMub25CZWZvcmVNYXNrLmNhbGwoJGVsLCBhY3Rpb25PYmoudmFsdWUsIG9wdHMpIHx8IGFjdGlvbk9iai52YWx1ZSA6IGFjdGlvbk9iai52YWx1ZSkuc3BsaXQoIiIpOwogICAgICAgICAgICByZXR1cm4gY2hlY2tWYWwoJGVsLCAhMSwgITEsIGlzUlRMID8gdmFsdWVCdWZmZXIucmV2ZXJzZSgpIDogdmFsdWVCdWZmZXIpLCAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSAmJiBvcHRzLm9uQmVmb3JlV3JpdGUuY2FsbCh0aGlzLCB2b2lkIDAsIGdldEJ1ZmZlcigpLCAwLCBvcHRzKSwgCiAgICAgICAgICAgIGFjdGlvbk9iai5tZXRhZGF0YSA\/IHsKICAgICAgICAgICAgICAgIHZhbHVlOiBpc1JUTCA\/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oIiIpIDogZ2V0QnVmZmVyKCkuam9pbigiIiksCiAgICAgICAgICAgICAgICBtZXRhZGF0YTogJGVsLmlucHV0bWFzaygiZ2V0bWV0YWRhdGEiKQogICAgICAgICAgICB9IDogaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKCIiKSA6IGdldEJ1ZmZlcigpLmpvaW4oIiIpOwoKICAgICAgICAgIGNhc2UgImlzVmFsaWQiOgogICAgICAgICAgICAkZWwgPSAkKHt9KSwgJGVsLmRhdGEoIl9pbnB1dG1hc2siLCB7CiAgICAgICAgICAgICAgICBtYXNrc2V0OiBtYXNrc2V0LAogICAgICAgICAgICAgICAgb3B0czogb3B0cywKICAgICAgICAgICAgICAgIGlzUlRMOiBvcHRzLm51bWVyaWNJbnB1dAogICAgICAgICAgICB9KSwgb3B0cy5udW1lcmljSW5wdXQgJiYgKGlzUlRMID0gITApOwogICAgICAgICAgICB2YXIgdmFsdWVCdWZmZXIgPSBhY3Rpb25PYmoudmFsdWUuc3BsaXQoIiIpOwogICAgICAgICAgICBjaGVja1ZhbCgkZWwsICExLCAhMCwgaXNSVEwgPyB2YWx1ZUJ1ZmZlci5yZXZlcnNlKCkgOiB2YWx1ZUJ1ZmZlcik7CiAgICAgICAgICAgIGZvciAodmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLCBybCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKCksIGxtaWIgPSBidWZmZXIubGVuZ3RoIC0gMTsgbG1pYiA+IHJsICYmICFpc01hc2sobG1pYik7IGxtaWItLSkgOwogICAgICAgICAgICByZXR1cm4gYnVmZmVyLnNwbGljZShybCwgbG1pYiArIDEgLSBybCksIGlzQ29tcGxldGUoYnVmZmVyKSAmJiBhY3Rpb25PYmoudmFsdWUgPT0gYnVmZmVyLmpvaW4oIiIpOwoKICAgICAgICAgIGNhc2UgImdldGVtcHR5bWFzayI6CiAgICAgICAgICAgIHJldHVybiAkZWwgPSAkKGFjdGlvbk9iai5lbCksIG1hc2tzZXQgPSAkZWwuZGF0YSgiX2lucHV0bWFzayIpLm1hc2tzZXQsIG9wdHMgPSAkZWwuZGF0YSgiX2lucHV0bWFzayIpLm9wdHMsIAogICAgICAgICAgICBnZXRCdWZmZXJUZW1wbGF0ZSgpOwoKICAgICAgICAgIGNhc2UgInJlbW92ZSI6CiAgICAgICAgICAgIHZhciBlbCA9IGFjdGlvbk9iai5lbDsKICAgICAgICAgICAgJGVsID0gJChlbCksIG1hc2tzZXQgPSAkZWwuZGF0YSgiX2lucHV0bWFzayIpLm1hc2tzZXQsIG9wdHMgPSAkZWwuZGF0YSgiX2lucHV0bWFzayIpLm9wdHMsIAogICAgICAgICAgICBlbC5fdmFsdWVTZXQodW5tYXNrZWR2YWx1ZSgkZWwpKSwgJGVsLnVuYmluZCgiLmlucHV0bWFzayIpLCAkZWwucmVtb3ZlRGF0YSgiX2lucHV0bWFzayIpOwogICAgICAgICAgICB2YXIgdmFsdWVQcm9wZXJ0eTsKICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAodmFsdWVQcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZWwsICJ2YWx1ZSIpKSwgCiAgICAgICAgICAgIHZhbHVlUHJvcGVydHkgJiYgdmFsdWVQcm9wZXJ0eS5nZXQgPyBlbC5fdmFsdWVHZXQgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAidmFsdWUiLCB7CiAgICAgICAgICAgICAgICBnZXQ6IGVsLl92YWx1ZUdldCwKICAgICAgICAgICAgICAgIHNldDogZWwuX3ZhbHVlU2V0CiAgICAgICAgICAgIH0pIDogZG9jdW1lbnQuX19sb29rdXBHZXR0ZXJfXyAmJiBlbC5fX2xvb2t1cEdldHRlcl9fKCJ2YWx1ZSIpICYmIGVsLl92YWx1ZUdldCAmJiAoZWwuX19kZWZpbmVHZXR0ZXJfXygidmFsdWUiLCBlbC5fdmFsdWVHZXQpLCAKICAgICAgICAgICAgZWwuX19kZWZpbmVTZXR0ZXJfXygidmFsdWUiLCBlbC5fdmFsdWVTZXQpKTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGRlbGV0ZSBlbC5fdmFsdWVHZXQsIGRlbGV0ZSBlbC5fdmFsdWVTZXQ7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIGVsLl92YWx1ZUdldCA9IHZvaWQgMCwgZWwuX3ZhbHVlU2V0ID0gdm9pZCAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgImdldG1ldGFkYXRhIjoKICAgICAgICAgICAgaWYgKCRlbCA9ICQoYWN0aW9uT2JqLmVsKSwgbWFza3NldCA9ICRlbC5kYXRhKCJfaW5wdXRtYXNrIikubWFza3NldCwgb3B0cyA9ICRlbC5kYXRhKCJfaW5wdXRtYXNrIikub3B0cywgCiAgICAgICAgICAgICQuaXNBcnJheShtYXNrc2V0Lm1ldGFkYXRhKSkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgYWx0ZXJuYXRpb24sIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCksIGZpcnN0QWx0ID0gbHZwOyBmaXJzdEFsdCA+PSAwOyBmaXJzdEFsdC0tKSBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ZpcnN0QWx0XSAmJiB2b2lkIDAgIT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ZpcnN0QWx0XS5hbHRlcm5hdGlvbikgewogICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aW9uID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ZpcnN0QWx0XS5hbHRlcm5hdGlvbjsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT0gYWx0ZXJuYXRpb24gPyBtYXNrc2V0Lm1ldGFkYXRhW2dldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdLmxvY2F0b3JbYWx0ZXJuYXRpb25dXSA6IG1hc2tzZXQubWV0YWRhdGFbMF07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQubWV0YWRhdGE7CiAgICAgICAgfQogICAgfQogICAgaWYgKHZvaWQgMCA9PT0gJC5mbi5pbnB1dG1hc2spIHsKICAgICAgICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LCBpcGhvbmUgPSBudWxsICE9PSB1YS5tYXRjaChuZXcgUmVnRXhwKCJpcGhvbmUiLCAiaSIpKSwgYW5kcm9pZGZpcmVmb3ggPSAobnVsbCAhPT0gdWEubWF0Y2gobmV3IFJlZ0V4cCgiYW5kcm9pZC4qc2FmYXJpLioiLCAiaSIpKSwgCiAgICAgICAgbnVsbCAhPT0gdWEubWF0Y2gobmV3IFJlZ0V4cCgiYW5kcm9pZC4qY2hyb21lLioiLCAiaSIpKSwgbnVsbCAhPT0gdWEubWF0Y2gobmV3IFJlZ0V4cCgiYW5kcm9pZC4qZmlyZWZveC4qIiwgImkiKSkpLCBQYXN0ZUV2ZW50VHlwZSA9ICgvS2luZGxlL2kudGVzdCh1YSkgfHwgL1NpbGsvaS50ZXN0KHVhKSB8fCAvS0ZUVC9pLnRlc3QodWEpIHx8IC9LRk9UL2kudGVzdCh1YSkgfHwgL0tGSldBL2kudGVzdCh1YSkgfHwgL0tGSldJL2kudGVzdCh1YSkgfHwgL0tGU09XSS9pLnRlc3QodWEpIHx8IC9LRlRIV0EvaS50ZXN0KHVhKSB8fCAvS0ZUSFdJL2kudGVzdCh1YSkgfHwgL0tGQVBXQS9pLnRlc3QodWEpIHx8IC9LRkFQV0kvaS50ZXN0KHVhKSwgCiAgICAgICAgaXNJbnB1dEV2ZW50U3VwcG9ydGVkKCJwYXN0ZSIpID8gInBhc3RlIiA6IGlzSW5wdXRFdmVudFN1cHBvcnRlZCgiaW5wdXQiKSA\/ICJpbnB1dCIgOiAicHJvcGVydHljaGFuZ2UiKTsKICAgICAgICAkLmlucHV0bWFzayA9IHsKICAgICAgICAgICAgZGVmYXVsdHM6IHsKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiXyIsCiAgICAgICAgICAgICAgICBvcHRpb25hbG1hcmtlcjogewogICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAiWyIsCiAgICAgICAgICAgICAgICAgICAgZW5kOiAiXSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBxdWFudGlmaWVybWFya2VyOiB7CiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6ICJ7IiwKICAgICAgICAgICAgICAgICAgICBlbmQ6ICJ9IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGdyb3VwbWFya2VyOiB7CiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6ICIoIiwKICAgICAgICAgICAgICAgICAgICBlbmQ6ICIpIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGFsdGVybmF0b3JtYXJrZXI6ICJ8IiwKICAgICAgICAgICAgICAgIGVzY2FwZUNoYXI6ICJcXCIsCiAgICAgICAgICAgICAgICBtYXNrOiBudWxsLAogICAgICAgICAgICAgICAgb25jb21wbGV0ZTogJC5ub29wLAogICAgICAgICAgICAgICAgb25pbmNvbXBsZXRlOiAkLm5vb3AsCiAgICAgICAgICAgICAgICBvbmNsZWFyZWQ6ICQubm9vcCwKICAgICAgICAgICAgICAgIHJlcGVhdDogMCwKICAgICAgICAgICAgICAgIGdyZWVkeTogITAsCiAgICAgICAgICAgICAgICBhdXRvVW5tYXNrOiAhMSwKICAgICAgICAgICAgICAgIHJlbW92ZU1hc2tPblN1Ym1pdDogITEsCiAgICAgICAgICAgICAgICBjbGVhck1hc2tPbkxvc3RGb2N1czogITAsCiAgICAgICAgICAgICAgICBpbnNlcnRNb2RlOiAhMCwKICAgICAgICAgICAgICAgIGNsZWFySW5jb21wbGV0ZTogITEsCiAgICAgICAgICAgICAgICBhbGlhc2VzOiB7fSwKICAgICAgICAgICAgICAgIGFsaWFzOiBudWxsLAogICAgICAgICAgICAgICAgb25LZXlVcDogJC5ub29wLAogICAgICAgICAgICAgICAgb25CZWZvcmVNYXNrOiB2b2lkIDAsCiAgICAgICAgICAgICAgICBvbkJlZm9yZVBhc3RlOiB2b2lkIDAsCiAgICAgICAgICAgICAgICBvbkJlZm9yZVdyaXRlOiB2b2lkIDAsCiAgICAgICAgICAgICAgICBvblVuTWFzazogdm9pZCAwLAogICAgICAgICAgICAgICAgc2hvd01hc2tPbkZvY3VzOiAhMCwKICAgICAgICAgICAgICAgIHNob3dNYXNrT25Ib3ZlcjogITAsCiAgICAgICAgICAgICAgICBvbktleVZhbGlkYXRpb246ICQubm9vcCwKICAgICAgICAgICAgICAgIHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI6ICIgIiwKICAgICAgICAgICAgICAgIHNob3dUb29sdGlwOiAhMSwKICAgICAgICAgICAgICAgIG51bWVyaWNJbnB1dDogITEsCiAgICAgICAgICAgICAgICByaWdodEFsaWduOiAhMSwKICAgICAgICAgICAgICAgIHVuZG9PbkVzY2FwZTogITAsCiAgICAgICAgICAgICAgICByYWRpeFBvaW50OiAiIiwKICAgICAgICAgICAgICAgIHJhZGl4Rm9jdXM6ICExLAogICAgICAgICAgICAgICAgbm9qdW1wczogITEsCiAgICAgICAgICAgICAgICBub2p1bXBzVGhyZXNob2xkOiAwLAogICAgICAgICAgICAgICAga2VlcFN0YXRpYzogdm9pZCAwLAogICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHsKICAgICAgICAgICAgICAgICAgICAiOSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiAiWzAtOV0iLAogICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSwKICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogIioiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBhOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogIltBLVphLXpcdTA0MTAtXHUwNDRmXHUwNDAxXHUwNDUxXHhjMC1ceGZmXHhiNV0iLAogICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSwKICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogIioiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiKiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiAiWzAtOUEtWmEtelx1MDQxMC1cdTA0NGZcdTA0MDFcdTA0NTFceGMwLVx4ZmZceGI1XSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGlnbm9yYWJsZXM6IFsgOCwgOSwgMTMsIDE5LCAyNywgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0NSwgNDYsIDkzLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsIDExOSwgMTIwLCAxMjEsIDEyMiwgMTIzIF0sCiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlOiB2b2lkIDAsCiAgICAgICAgICAgICAgICBjYW5DbGVhclBvc2l0aW9uOiAkLm5vb3AsCiAgICAgICAgICAgICAgICBwb3N0VmFsaWRhdGlvbjogdm9pZCAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGtleUNvZGU6IHsKICAgICAgICAgICAgICAgIEFMVDogMTgsCiAgICAgICAgICAgICAgICBCQUNLU1BBQ0U6IDgsCiAgICAgICAgICAgICAgICBDQVBTX0xPQ0s6IDIwLAogICAgICAgICAgICAgICAgQ09NTUE6IDE4OCwKICAgICAgICAgICAgICAgIENPTU1BTkQ6IDkxLAogICAgICAgICAgICAgICAgQ09NTUFORF9MRUZUOiA5MSwKICAgICAgICAgICAgICAgIENPTU1BTkRfUklHSFQ6IDkzLAogICAgICAgICAgICAgICAgQ09OVFJPTDogMTcsCiAgICAgICAgICAgICAgICBERUxFVEU6IDQ2LAogICAgICAgICAgICAgICAgRE9XTjogNDAsCiAgICAgICAgICAgICAgICBFTkQ6IDM1LAogICAgICAgICAgICAgICAgRU5URVI6IDEzLAogICAgICAgICAgICAgICAgRVNDQVBFOiAyNywKICAgICAgICAgICAgICAgIEhPTUU6IDM2LAogICAgICAgICAgICAgICAgSU5TRVJUOiA0NSwKICAgICAgICAgICAgICAgIExFRlQ6IDM3LAogICAgICAgICAgICAgICAgTUVOVTogOTMsCiAgICAgICAgICAgICAgICBOVU1QQURfQUREOiAxMDcsCiAgICAgICAgICAgICAgICBOVU1QQURfREVDSU1BTDogMTEwLAogICAgICAgICAgICAgICAgTlVNUEFEX0RJVklERTogMTExLAogICAgICAgICAgICAgICAgTlVNUEFEX0VOVEVSOiAxMDgsCiAgICAgICAgICAgICAgICBOVU1QQURfTVVMVElQTFk6IDEwNiwKICAgICAgICAgICAgICAgIE5VTVBBRF9TVUJUUkFDVDogMTA5LAogICAgICAgICAgICAgICAgUEFHRV9ET1dOOiAzNCwKICAgICAgICAgICAgICAgIFBBR0VfVVA6IDMzLAogICAgICAgICAgICAgICAgUEVSSU9EOiAxOTAsCiAgICAgICAgICAgICAgICBSSUdIVDogMzksCiAgICAgICAgICAgICAgICBTSElGVDogMTYsCiAgICAgICAgICAgICAgICBTUEFDRTogMzIsCiAgICAgICAgICAgICAgICBUQUI6IDksCiAgICAgICAgICAgICAgICBVUDogMzgsCiAgICAgICAgICAgICAgICBXSU5ET1dTOiA5MQogICAgICAgICAgICB9LAogICAgICAgICAgICBtYXNrc0NhY2hlOiB7fSwKICAgICAgICAgICAgZXNjYXBlUmVnZXg6IGZ1bmN0aW9uKHN0cikgewogICAgICAgICAgICAgICAgdmFyIHNwZWNpYWxzID0gWyAiLyIsICIuIiwgIioiLCAiKyIsICI\/IiwgInwiLCAiKCIsICIpIiwgIlsiLCAiXSIsICJ7IiwgIn0iLCAiXFwiLCAiJCIsICJeIiBdOwogICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoIihcXCIgKyBzcGVjaWFscy5qb2luKCJ8XFwiKSArICIpIiwgImdpbSIpLCAiXFwkMSIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBmb3JtYXQ6IGZ1bmN0aW9uKHZhbHVlLCBvcHRpb25zLCBtZXRhZGF0YSkgewogICAgICAgICAgICAgICAgdmFyIG9wdHMgPSAkLmV4dGVuZCghMCwge30sICQuaW5wdXRtYXNrLmRlZmF1bHRzLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlQWxpYXMob3B0cy5hbGlhcywgb3B0aW9ucywgb3B0cyksIG1hc2tTY29wZSh7CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAiZm9ybWF0IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhCiAgICAgICAgICAgICAgICB9LCBnZW5lcmF0ZU1hc2tTZXQob3B0cyksIG9wdHMpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpc1ZhbGlkOiBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgdmFyIG9wdHMgPSAkLmV4dGVuZCghMCwge30sICQuaW5wdXRtYXNrLmRlZmF1bHRzLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlQWxpYXMob3B0cy5hbGlhcywgb3B0aW9ucywgb3B0cyksIG1hc2tTY29wZSh7CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAiaXNWYWxpZCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9LCBnZW5lcmF0ZU1hc2tTZXQob3B0cyksIG9wdHMpOwogICAgICAgICAgICB9CiAgICAgICAgfSwgJC5mbi5pbnB1dG1hc2sgPSBmdW5jdGlvbihmbiwgb3B0aW9ucykgewogICAgICAgICAgICBmdW5jdGlvbiBpbXBvcnRBdHRyaWJ1dGVPcHRpb25zKG5wdCwgb3B0cywgaW1wb3J0ZWRPcHRpb25zQ29udGFpbmVyKSB7CiAgICAgICAgICAgICAgICB2YXIgJG5wdCA9ICQobnB0KTsKICAgICAgICAgICAgICAgICRucHQuZGF0YSgiaW5wdXRtYXNrLWFsaWFzIikgJiYgcmVzb2x2ZUFsaWFzKCRucHQuZGF0YSgiaW5wdXRtYXNrLWFsaWFzIiksIHt9LCBvcHRzKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIG9wdGlvbiBpbiBvcHRzKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbkRhdGEgPSAkbnB0LmRhdGEoImlucHV0bWFzay0iICsgb3B0aW9uLnRvTG93ZXJDYXNlKCkpOwogICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPSBvcHRpb25EYXRhICYmICgibWFzayIgPT0gb3B0aW9uICYmIDAgPT0gb3B0aW9uRGF0YS5pbmRleE9mKCJbIikgPyAob3B0c1tvcHRpb25dID0gb3B0aW9uRGF0YS5yZXBsYWNlKC9bXHNbXF1dL2csICIiKS5zcGxpdCgiJywnIiksIAogICAgICAgICAgICAgICAgICAgIG9wdHNbb3B0aW9uXVswXSA9IG9wdHNbb3B0aW9uXVswXS5yZXBsYWNlKCInIiwgIiIpLCBvcHRzW29wdGlvbl1bb3B0c1tvcHRpb25dLmxlbmd0aCAtIDFdID0gb3B0c1tvcHRpb25dW29wdHNbb3B0aW9uXS5sZW5ndGggLSAxXS5yZXBsYWNlKCInIiwgIiIpKSA6IG9wdHNbb3B0aW9uXSA9ICJib29sZWFuIiA9PSB0eXBlb2Ygb3B0aW9uRGF0YSA\/IG9wdGlvbkRhdGEgOiBvcHRpb25EYXRhLnRvU3RyaW5nKCksIAogICAgICAgICAgICAgICAgICAgIGltcG9ydGVkT3B0aW9uc0NvbnRhaW5lciAmJiAoaW1wb3J0ZWRPcHRpb25zQ29udGFpbmVyW29wdGlvbl0gPSBvcHRzW29wdGlvbl0pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvcHRzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBtYXNrc2V0LCBvcHRzID0gJC5leHRlbmQoITAsIHt9LCAkLmlucHV0bWFzay5kZWZhdWx0cywgb3B0aW9ucyk7CiAgICAgICAgICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgZm4pIHN3aXRjaCAoZm4pIHsKICAgICAgICAgICAgICBjYXNlICJtYXNrIjoKICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlQWxpYXMob3B0cy5hbGlhcywgb3B0aW9ucywgb3B0cyksIG1hc2tzZXQgPSBnZW5lcmF0ZU1hc2tTZXQob3B0cyksIAogICAgICAgICAgICAgICAgdm9pZCAwID09IG1hc2tzZXQgPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIG1hc2tTY29wZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogIm1hc2siLAogICAgICAgICAgICAgICAgICAgICAgICBlbDogdGhpcwogICAgICAgICAgICAgICAgICAgIH0sICQuZXh0ZW5kKCEwLCB7fSwgbWFza3NldCksIGltcG9ydEF0dHJpYnV0ZU9wdGlvbnModGhpcywgb3B0cykpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgInVubWFza2VkdmFsdWUiOgogICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gJGlucHV0LmRhdGEoIl9pbnB1dG1hc2siKSA\/IG1hc2tTY29wZSh7CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAidW5tYXNrZWR2YWx1ZSIsCiAgICAgICAgICAgICAgICAgICAgJGlucHV0OiAkaW5wdXQKICAgICAgICAgICAgICAgIH0pIDogJGlucHV0LnZhbCgpOwoKICAgICAgICAgICAgICBjYXNlICJyZW1vdmUiOgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKTsKICAgICAgICAgICAgICAgICAgICAkaW5wdXQuZGF0YSgiX2lucHV0bWFzayIpICYmIG1hc2tTY29wZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogInJlbW92ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiB0aGlzCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAiZ2V0ZW1wdHltYXNrIjoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEoIl9pbnB1dG1hc2siKSA\/IG1hc2tTY29wZSh7CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAiZ2V0ZW1wdHltYXNrIiwKICAgICAgICAgICAgICAgICAgICBlbDogdGhpcwogICAgICAgICAgICAgICAgfSkgOiAiIjsKCiAgICAgICAgICAgICAgY2FzZSAiaGFzTWFza2VkVmFsdWUiOgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSgiX2lucHV0bWFzayIpID8gIXRoaXMuZGF0YSgiX2lucHV0bWFzayIpLm9wdHMuYXV0b1VubWFzayA6ICExOwoKICAgICAgICAgICAgICBjYXNlICJpc0NvbXBsZXRlIjoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEoIl9pbnB1dG1hc2siKSA\\/IChzdGFydCArPSBsZW5ndGgsIGxlbmd0aCA9IGRlZmluaXRpb24uY2FyZGluYWxpdHkpIDogbGVuZ3RoKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyLmpvaW4oIiIpLnN1YnN0cihzdGFydCwgbGVuZ3RoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHsKICAgICAgICAgICAgICAgICIxIjogewogICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnJlZ2V4LnZhbDEudGVzdChjaHJzKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmljdCB8fCBpc1ZhbGlkIHx8IGNocnMuY2hhckF0KDEpICE9IG9wdHMuc2VwYXJhdG9yICYmIC0xID09ICItLi8iLmluZGV4T2YoY2hycy5jaGFyQXQoMSkpIHx8ICEoaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMS50ZXN0KCIwIiArIGNocnMuY2hhckF0KDApKSkgPyBpc1ZhbGlkIDogKG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID0gIjAiLCAKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zIC0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHBvcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogY2hycy5jaGFyQXQoMCkKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMiwKICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IFsgewogICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05hTihtYXNrc2V0LmJ1ZmZlcltwb3MgKyAxXSkgfHwgKGNocnMgKz0gbWFza3NldC5idWZmZXJbcG9zICsgMV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSAxID09IGNocnMubGVuZ3RoID8gb3B0cy5yZWdleC52YWwxcHJlLnRlc3QoY2hycykgOiBvcHRzLnJlZ2V4LnZhbDEudGVzdChjaHJzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpY3QgfHwgaXNWYWxpZCB8fCAhKGlzVmFsaWQgPSBvcHRzLnJlZ2V4LnZhbDEudGVzdCgiMCIgKyBjaHJzKSkgPyBpc1ZhbGlkIDogKG1hc2tzZXQuYnVmZmVyW3Bvc10gPSAiMCIsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zKyssIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxCiAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIjIiOiB7CiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbnRWYWx1ZSA9IG9wdHMuZ2V0RnJvbnRWYWx1ZShtYXNrc2V0Lm1hc2ssIG1hc2tzZXQuYnVmZmVyLCBvcHRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgLTEgIT0gZnJvbnRWYWx1ZS5pbmRleE9mKG9wdHMucGxhY2Vob2xkZXJbMF0pICYmIChmcm9udFZhbHVlID0gIjAxIiArIG9wdHMuc2VwYXJhdG9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnJlZ2V4LnZhbDIob3B0cy5zZXBhcmF0b3IpLnRlc3QoZnJvbnRWYWx1ZSArIGNocnMpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhaXNWYWxpZCAmJiAoY2hycy5jaGFyQXQoMSkgPT0gb3B0cy5zZXBhcmF0b3IgfHwgLTEgIT0gIi0uLyIuaW5kZXhPZihjaHJzLmNoYXJBdCgxKSkpICYmIChpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwyKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGZyb250VmFsdWUgKyAiMCIgKyBjaHJzLmNoYXJBdCgwKSkpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zIC0gMV0gPSAiMCIsIAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcG9zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBjaHJzLmNoYXJBdCgwKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXNrLmluZGV4T2YoIjIiKSA9PSBvcHRzLm1hc2subGVuZ3RoIC0gMSAmJiBpc1ZhbGlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF5TW9udGhWYWx1ZSA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oIiIpLnN1YnN0cig0LCA0KSArIGNocnM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF5TW9udGhWYWx1ZSAhPSBvcHRzLmxlYXBkYXkpIHJldHVybiAhMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQobWFza3NldC5idWZmZXIuam9pbigiIikuc3Vic3RyKDAsIDQpLCAxMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geWVhciAlIDQgPT09IDAgPyB5ZWFyICUgMTAwID09PSAwID8geWVhciAlIDQwMCA9PT0gMCA\/ICEwIDogITEgOiAhMCA6ICExOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDIsCiAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOYU4obWFza3NldC5idWZmZXJbcG9zICsgMV0pIHx8IChjaHJzICs9IG1hc2tzZXQuYnVmZmVyW3BvcyArIDFdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcm9udFZhbHVlID0gb3B0cy5nZXRGcm9udFZhbHVlKG1hc2tzZXQubWFzaywgbWFza3NldC5idWZmZXIsIG9wdHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLTEgIT0gZnJvbnRWYWx1ZS5pbmRleE9mKG9wdHMucGxhY2Vob2xkZXJbMF0pICYmIChmcm9udFZhbHVlID0gIjAxIiArIG9wdHMuc2VwYXJhdG9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gMSA9PSBjaHJzLmxlbmd0aCA\/IG9wdHMucmVnZXgudmFsMnByZShvcHRzLnNlcGFyYXRvcikudGVzdChmcm9udFZhbHVlICsgY2hycykgOiBvcHRzLnJlZ2V4LnZhbDIob3B0cy5zZXBhcmF0b3IpLnRlc3QoZnJvbnRWYWx1ZSArIGNocnMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmljdCB8fCBpc1ZhbGlkIHx8ICEoaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMihvcHRzLnNlcGFyYXRvcikudGVzdChmcm9udFZhbHVlICsgIjAiICsgY2hycykpID8gaXNWYWxpZCA6IChtYXNrc2V0LmJ1ZmZlcltwb3NdID0gIjAiLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMQogICAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHk6IHsKICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXlNb250aFZhbHVlID0gbWFza3NldC5idWZmZXIuam9pbigiIikuc3Vic3RyKDAsIDYpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRheU1vbnRoVmFsdWUgIT0gb3B0cy5sZWFwZGF5KSByZXR1cm4gITA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KGNocnMsIDEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyICUgNCA9PT0gMCA\/IHllYXIgJSAxMDAgPT09IDAgPyB5ZWFyICUgNDAwID09PSAwID8gITAgOiAhMSA6ICEwIDogITE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDQsCiAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhaXNWYWxpZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyUHJlZml4ID0gb3B0cy5kZXRlcm1pbmViYXNleWVhcihvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyLCBjaHJzICsgIjAiKS50b1N0cmluZygpLnNsaWNlKDAsIDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkID0gb3B0cy5pc0luWWVhclJhbmdlKHllYXJQcmVmaXggKyBjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcysrXSA9IHllYXJQcmVmaXguY2hhckF0KDApLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVhclByZWZpeCA9IG9wdHMuZGV0ZXJtaW5lYmFzZXllYXIob3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhciwgY2hycyArICIwIikudG9TdHJpbmcoKS5zbGljZSgwLCAyKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IG9wdHMuaXNJblllYXJSYW5nZSh5ZWFyUHJlZml4ICsgY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcikpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3MrK10gPSB5ZWFyUHJlZml4LmNoYXJBdCgwKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbcG9zKytdID0geWVhclByZWZpeC5jaGFyQXQoMSksIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMuaXNJblllYXJSYW5nZShjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICFpc1ZhbGlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHllYXJQcmVmaXggPSBvcHRzLmRldGVybWluZWJhc2V5ZWFyKG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIsIGNocnMpLnRvU3RyaW5nKCkuc2xpY2UoMCwgMik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hyc1swXSArIHllYXJQcmVmaXhbMV0gKyBjaHJzWzFdLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcysrXSA9IHllYXJQcmVmaXguY2hhckF0KDEpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVhclByZWZpeCA9IG9wdHMuZGV0ZXJtaW5lYmFzZXllYXIob3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhciwgY2hycykudG9TdHJpbmcoKS5zbGljZSgwLCAyKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pc0luWWVhclJhbmdlKHllYXJQcmVmaXggKyBjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF5TW9udGhWYWx1ZSA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oIiIpLnN1YnN0cigwLCA2KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRheU1vbnRoVmFsdWUgIT0gb3B0cy5sZWFwZGF5KSBpc1ZhbGlkID0gITA7IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludChjaHJzLCAxMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0geWVhciAlIDQgPT09IDAgPyB5ZWFyICUgMTAwID09PSAwID8geWVhciAlIDQwMCA9PT0gMCA\\/IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDJdICsgY2hycyA6ICIwIiArIGNocnMpIDogY2hycyA9ICIwMCIgKyBjaHJzLCAKICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cCgiMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdWzAtOV1bMC05XSIpLnRlc3QoY2hycyk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBlbWFpbDogewogICAgICAgICAgICBtYXNrOiAiKnsxLDY0fVsuKnsxLDY0fV1bLip7MSw2NH1dWy4qezEsNjR9XUAqezEsNjR9Wy4qezIsNjR9XVsuKnsyLDZ9XVsuKnsxLDJ9XSIsCiAgICAgICAgICAgIGdyZWVkeTogITEsCiAgICAgICAgICAgIG9uQmVmb3JlUGFzdGU6IGZ1bmN0aW9uKHBhc3RlZFZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFzdGVkVmFsdWUgPSBwYXN0ZWRWYWx1ZS50b0xvd2VyQ2FzZSgpLCBwYXN0ZWRWYWx1ZS5yZXBsYWNlKCJtYWlsdG86IiwgIiIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWZpbml0aW9uczogewogICAgICAgICAgICAgICAgIioiOiB7CiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiAiWzAtOUEtWmEteiEjJCUmJyorLz0\/Xl9ge3x9fi1dIiwKICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSwKICAgICAgICAgICAgICAgICAgICBjYXNpbmc6ICJsb3dlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pLCAkLmZuLmlucHV0bWFzazsKfShqUXVlcnkpLCBmdW5jdGlvbigkKSB7CiAgICByZXR1cm4gJC5leHRlbmQoJC5pbnB1dG1hc2suZGVmYXVsdHMuYWxpYXNlcywgewogICAgICAgIG51bWVyaWM6IHsKICAgICAgICAgICAgbWFzazogZnVuY3Rpb24ob3B0cykgewogICAgICAgICAgICAgICAgZnVuY3Rpb24gYXV0b0VzY2FwZSh0eHQpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlc2NhcGVkVHh0ID0gIiIsIGkgPSAwOyBpIDwgdHh0Lmxlbmd0aDsgaSsrKSBlc2NhcGVkVHh0ICs9IG9wdHMuZGVmaW5pdGlvbnNbdHh0W2ldXSA\/ICJcXCIgKyB0eHRbaV0gOiB0eHRbaV07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVzY2FwZWRUeHQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoMCAhPT0gb3B0cy5yZXBlYXQgJiYgaXNOYU4ob3B0cy5pbnRlZ2VyRGlnaXRzKSAmJiAob3B0cy5pbnRlZ2VyRGlnaXRzID0gb3B0cy5yZXBlYXQpLCAKICAgICAgICAgICAgICAgIG9wdHMucmVwZWF0ID0gMCwgb3B0cy5ncm91cFNlcGFyYXRvciA9PSBvcHRzLnJhZGl4UG9pbnQgJiYgKG9wdHMuZ3JvdXBTZXBhcmF0b3IgPSAiLiIgPT0gb3B0cy5yYWRpeFBvaW50ID8gIiwiIDogIiwiID09IG9wdHMucmFkaXhQb2ludCA\/ICIuIiA6ICIiKSwgCiAgICAgICAgICAgICAgICAiICIgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgJiYgKG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciA9IHZvaWQgMCksIG9wdHMuYXV0b0dyb3VwID0gb3B0cy5hdXRvR3JvdXAgJiYgIiIgIT0gb3B0cy5ncm91cFNlcGFyYXRvciwgCiAgICAgICAgICAgICAgICBvcHRzLmF1dG9Hcm91cCAmJiAoInN0cmluZyIgPT0gdHlwZW9mIG9wdHMuZ3JvdXBTaXplICYmIGlzRmluaXRlKG9wdHMuZ3JvdXBTaXplKSAmJiAob3B0cy5ncm91cFNpemUgPSBwYXJzZUludChvcHRzLmdyb3VwU2l6ZSkpLCAKICAgICAgICAgICAgICAgIGlzRmluaXRlKG9wdHMuaW50ZWdlckRpZ2l0cykpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcHMgPSBNYXRoLmZsb29yKG9wdHMuaW50ZWdlckRpZ2l0cyAvIG9wdHMuZ3JvdXBTaXplKSwgbW9kID0gb3B0cy5pbnRlZ2VyRGlnaXRzICUgb3B0cy5ncm91cFNpemU7CiAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzID0gcGFyc2VJbnQob3B0cy5pbnRlZ2VyRGlnaXRzKSArICgwID09IG1vZCA\/IHNlcHMgLSAxIDogc2Vwcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBvcHRzLnJhZGl4Rm9jdXMgPSBvcHRzLnJhZGl4Rm9jdXMgJiYgIjAiID09IG9wdHMucGxhY2Vob2xkZXIsIG9wdHMuZGVmaW5pdGlvbnNbIjsiXSA9IG9wdHMuZGVmaW5pdGlvbnNbIn4iXTsKICAgICAgICAgICAgICAgIHZhciBtYXNrID0gYXV0b0VzY2FwZShvcHRzLnByZWZpeCk7CiAgICAgICAgICAgICAgICByZXR1cm4gbWFzayArPSAiWytdIiwgbWFzayArPSAifnsxLCIgKyBvcHRzLmludGVnZXJEaWdpdHMgKyAifSIsIHZvaWQgMCAhPSBvcHRzLmRpZ2l0cyAmJiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IHBhcnNlSW50KG9wdHMuZGlnaXRzKSA+IDApICYmIChtYXNrICs9IG9wdHMuZGlnaXRzT3B0aW9uYWwgPyAiWyIgKyAob3B0cy5kZWNpbWFsUHJvdGVjdCA\/ICI6IiA6IG9wdHMucmFkaXhQb2ludCkgKyAiO3siICsgb3B0cy5kaWdpdHMgKyAifV0iIDogKG9wdHMuZGVjaW1hbFByb3RlY3QgPyAiOiIgOiBvcHRzLnJhZGl4UG9pbnQpICsgIjt7IiArIG9wdHMuZGlnaXRzICsgIn0iKSwgCiAgICAgICAgICAgICAgICBtYXNrICs9IGF1dG9Fc2NhcGUob3B0cy5zdWZmaXgpLCBtYXNrICs9ICJbLV0iLCBvcHRzLmdyZWVkeSA9ICExLCBtYXNrOwogICAgICAgICAgICB9LAogICAgICAgICAgICBwbGFjZWhvbGRlcjogIiIsCiAgICAgICAgICAgIGdyZWVkeTogITEsCiAgICAgICAgICAgIGRpZ2l0czogIioiLAogICAgICAgICAgICBkaWdpdHNPcHRpb25hbDogITAsCiAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yOiAiIiwKICAgICAgICAgICAgcmFkaXhQb2ludDogIi4iLAogICAgICAgICAgICByYWRpeEZvY3VzOiAhMCwKICAgICAgICAgICAgZ3JvdXBTaXplOiAzLAogICAgICAgICAgICBhdXRvR3JvdXA6ICExLAogICAgICAgICAgICBhbGxvd1BsdXM6ICEwLAogICAgICAgICAgICBhbGxvd01pbnVzOiAhMCwKICAgICAgICAgICAgbmVnYXRpb25TeW1ib2w6IHsKICAgICAgICAgICAgICAgIGZyb250OiAiLSIsCiAgICAgICAgICAgICAgICBiYWNrOiAiIgogICAgICAgICAgICB9LAogICAgICAgICAgICBpbnRlZ2VyRGlnaXRzOiAiKyIsCiAgICAgICAgICAgIHByZWZpeDogIiIsCiAgICAgICAgICAgIHN1ZmZpeDogIiIsCiAgICAgICAgICAgIHJpZ2h0QWxpZ246ICEwLAogICAgICAgICAgICBkZWNpbWFsUHJvdGVjdDogITAsCiAgICAgICAgICAgIG1pbjogdm9pZCAwLAogICAgICAgICAgICBtYXg6IHZvaWQgMCwKICAgICAgICAgICAgcG9zdEZvcm1hdDogZnVuY3Rpb24oYnVmZmVyLCBwb3MsIHJlZm9ybWF0T25seSwgb3B0cykgewogICAgICAgICAgICAgICAgcG9zID0gcG9zID49IGJ1ZmZlci5sZW5ndGggPyBidWZmZXIubGVuZ3RoIC0gMSA6IHBvcyA8IG9wdHMucHJlZml4Lmxlbmd0aCA\/IG9wdHMucHJlZml4Lmxlbmd0aCA6IHBvczsKICAgICAgICAgICAgICAgIHZhciBuZWVkc1JlZnJlc2ggPSAhMSwgY2hhckF0UG9zID0gYnVmZmVyW3Bvc107CiAgICAgICAgICAgICAgICBpZiAoIiIgPT0gb3B0cy5ncm91cFNlcGFyYXRvciB8fCAtMSAhPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpICYmIHBvcyA+PSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpIHx8IG5ldyBSZWdFeHAoIlstK10iKS50ZXN0KGNoYXJBdFBvcykpIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgY2J1ZiA9IGJ1ZmZlci5zbGljZSgpOwogICAgICAgICAgICAgICAgY2hhckF0UG9zID09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgJiYgKGNidWYuc3BsaWNlKHBvcy0tLCAxKSwgY2hhckF0UG9zID0gY2J1Zltwb3NdKSwgCiAgICAgICAgICAgICAgICByZWZvcm1hdE9ubHkgPyBjYnVmW3Bvc10gPSAiPyIgOiBjYnVmLnNwbGljZShwb3MsIDAsICI\/Iik7CiAgICAgICAgICAgICAgICB2YXIgYnVmVmFsID0gY2J1Zi5qb2luKCIiKSwgYnVmVmFsT3JpZ2luID0gYnVmVmFsOwogICAgICAgICAgICAgICAgaWYgKGJ1ZlZhbC5sZW5ndGggPiAwICYmIG9wdHMuYXV0b0dyb3VwIHx8IHJlZm9ybWF0T25seSAmJiAtMSAhPSBidWZWYWwuaW5kZXhPZihvcHRzLmdyb3VwU2VwYXJhdG9yKSkgewogICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkR3JvdXBTZXBhcmF0b3IgPSAkLmlucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIG9wdHMuZ3JvdXBTZXBhcmF0b3IpOwogICAgICAgICAgICAgICAgICAgIG5lZWRzUmVmcmVzaCA9IDAgPT0gYnVmVmFsLmluZGV4T2Yob3B0cy5ncm91cFNlcGFyYXRvciksIGJ1ZlZhbCA9IGJ1ZlZhbC5yZXBsYWNlKG5ldyBSZWdFeHAoZXNjYXBlZEdyb3VwU2VwYXJhdG9yLCAiZyIpLCAiIik7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4U3BsaXQgPSBidWZWYWwuc3BsaXQob3B0cy5yYWRpeFBvaW50KTsKICAgICAgICAgICAgICAgICAgICBpZiAoYnVmVmFsID0gIiIgPT0gb3B0cy5yYWRpeFBvaW50ID8gYnVmVmFsIDogcmFkaXhTcGxpdFswXSwgYnVmVmFsICE9IG9wdHMucHJlZml4ICsgIj8wIiAmJiBidWZWYWwubGVuZ3RoID49IG9wdHMuZ3JvdXBTaXplICsgb3B0cy5wcmVmaXgubGVuZ3RoKSBmb3IgKHZhciByZWcgPSBuZXcgUmVnRXhwKCIoWy0rXT9bXFxkP10rKShbXFxkP117IiArIG9wdHMuZ3JvdXBTaXplICsgIn0pIik7IHJlZy50ZXN0KGJ1ZlZhbCk7ICkgYnVmVmFsID0gYnVmVmFsLnJlcGxhY2UocmVnLCAiJDEiICsgb3B0cy5ncm91cFNlcGFyYXRvciArICIkMiIpLCAKICAgICAgICAgICAgICAgICAgICBidWZWYWwgPSBidWZWYWwucmVwbGFjZShvcHRzLmdyb3VwU2VwYXJhdG9yICsgb3B0cy5ncm91cFNlcGFyYXRvciwgb3B0cy5ncm91cFNlcGFyYXRvcik7CiAgICAgICAgICAgICAgICAgICAgIiIgIT0gb3B0cy5yYWRpeFBvaW50ICYmIHJhZGl4U3BsaXQubGVuZ3RoID4gMSAmJiAoYnVmVmFsICs9IG9wdHMucmFkaXhQb2ludCArIHJhZGl4U3BsaXRbMV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbmVlZHNSZWZyZXNoID0gYnVmVmFsT3JpZ2luICE9IGJ1ZlZhbCwgYnVmZmVyLmxlbmd0aCA9IGJ1ZlZhbC5sZW5ndGg7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGJ1ZlZhbC5sZW5ndGg7IGwgPiBpOyBpKyspIGJ1ZmZlcltpXSA9IGJ1ZlZhbC5jaGFyQXQoaSk7CiAgICAgICAgICAgICAgICB2YXIgbmV3UG9zID0gJC5pbkFycmF5KCI\/IiwgYnVmZmVyKTsKICAgICAgICAgICAgICAgIHJldHVybiByZWZvcm1hdE9ubHkgPyBidWZmZXJbbmV3UG9zXSA9IGNoYXJBdFBvcyA6IGJ1ZmZlci5zcGxpY2UobmV3UG9zLCAxKSwgewogICAgICAgICAgICAgICAgICAgIHBvczogbmV3UG9zLAogICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiBuZWVkc1JlZnJlc2gsCiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBidWZmZXIKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uQmVmb3JlV3JpdGU6IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHsKICAgICAgICAgICAgICAgIGlmIChlICYmICJibHVyIiA9PSBlLnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbWFza2VkVmFsdWUgPSBidWZmZXIuam9pbigiIiksIHByb2Nlc3NWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2Uob3B0cy5wcmVmaXgsICIiKTsKICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uob3B0cy5zdWZmaXgsICIiKSwgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cCgkLmlucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCAiZyIpLCAiIiksIAogICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKCQuaW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgb3B0cy5yYWRpeFBvaW50KSwgIi4iKSwgCiAgICAgICAgICAgICAgICAgICAgaXNGaW5pdGUocHJvY2Vzc1ZhbHVlKSAmJiBpc0Zpbml0ZShvcHRzLm1pbikgJiYgcGFyc2VGbG9hdChwcm9jZXNzVmFsdWUpIDwgcGFyc2VGbG9hdChvcHRzLm1pbikpIHJldHVybiBvcHRzLnBvc3RGb3JtYXQoKG9wdHMucHJlZml4ICsgb3B0cy5taW4pLnNwbGl0KCIiKSwgMCwgITAsIG9wdHMpOwogICAgICAgICAgICAgICAgICAgIHZhciB0bXBCdWZTcGxpdCA9ICIiICE9IG9wdHMucmFkaXhQb2ludCA\/IGJ1ZmZlci5qb2luKCIiKS5zcGxpdChvcHRzLnJhZGl4UG9pbnQpIDogWyBidWZmZXIuam9pbigiIikgXSwgbWF0Y2hSc2x0ID0gdG1wQnVmU3BsaXRbMF0ubWF0Y2gob3B0cy5yZWdleC5pbnRlZ2VyUGFydChvcHRzKSksIG1hdGNoUnNsdERpZ2l0cyA9IDIgPT0gdG1wQnVmU3BsaXQubGVuZ3RoID8gdG1wQnVmU3BsaXRbMV0ubWF0Y2gob3B0cy5yZWdleC5pbnRlZ2VyTlBhcnQob3B0cykpIDogdm9pZCAwOwogICAgICAgICAgICAgICAgICAgIG1hdGNoUnNsdCAmJiAiLTAiID09IG1hdGNoUnNsdFswXSAmJiAodm9pZCAwID09IG1hdGNoUnNsdERpZ2l0cyB8fCBtYXRjaFJzbHREaWdpdHNbMF0ubWF0Y2goL14wKyQvKSkgJiYgYnVmZmVyLnNwbGljZShtYXRjaFJzbHQuaW5kZXgsIDEpOwogICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvc2l0aW9uID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgYnVmZmVyKTsKICAgICAgICAgICAgICAgICAgICBpZiAoLTEgIT0gcmFkaXhQb3NpdGlvbiAmJiBpc0Zpbml0ZShvcHRzLmRpZ2l0cykgJiYgIW9wdHMuZGlnaXRzT3B0aW9uYWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gb3B0cy5kaWdpdHM7IGkrKykgKHZvaWQgMCA9PSBidWZmZXJbcmFkaXhQb3NpdGlvbiArIGldIHx8IGJ1ZmZlcltyYWRpeFBvc2l0aW9uICsgaV0gPT0gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpICYmIChidWZmZXJbcmFkaXhQb3NpdGlvbiArIGldID0gIjAiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiAhMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG9wdHMuYXV0b0dyb3VwKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJzbHQgPSBvcHRzLnBvc3RGb3JtYXQoYnVmZmVyLCBjYXJldFBvcyAtIDEsICEwLCBvcHRzKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnNsdC5jYXJldCA9IGNhcmV0UG9zIDw9IG9wdHMucHJlZml4Lmxlbmd0aCA\/IHJzbHQucG9zIDogcnNsdC5wb3MgKyAxLCByc2x0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICByZWdleDogewogICAgICAgICAgICAgICAgaW50ZWdlclBhcnQ6IGZ1bmN0aW9uKG9wdHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgiWyIgKyBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250ICsgIitdP1xcZCsiKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBpbnRlZ2VyTlBhcnQ6IGZ1bmN0aW9uKG9wdHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgiW1xcZCIgKyAkLmlucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIG9wdHMuZ3JvdXBTZXBhcmF0b3IpICsgIl0rIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNpZ25IYW5kbGVyOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykgewogICAgICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgb3B0cy5hbGxvd01pbnVzICYmICItIiA9PT0gY2hycyB8fCBvcHRzLmFsbG93UGx1cyAmJiAiKyIgPT09IGNocnMpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hSc2x0ID0gbWFza3NldC5idWZmZXIuam9pbigiIikubWF0Y2gob3B0cy5yZWdleC5pbnRlZ2VyUGFydChvcHRzKSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoUnNsdCAmJiBtYXRjaFJzbHRbMF0ubGVuZ3RoID4gMCkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW21hdGNoUnNsdC5pbmRleF0gPT0gKCItIiA9PT0gY2hycyA\/ICIrIiA6IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpID8gewogICAgICAgICAgICAgICAgICAgICAgICBwb3M6IG1hdGNoUnNsdC5pbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgYzogIi0iID09PSBjaHJzID8gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCA6ICIrIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBtYXRjaFJzbHQuaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBwb3MKICAgICAgICAgICAgICAgICAgICB9IDogbWFza3NldC5idWZmZXJbbWF0Y2hSc2x0LmluZGV4XSA9PSAoIi0iID09PSBjaHJzID8gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCA6ICIrIikgPyB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZTogbWF0Y2hSc2x0LmluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zIC0gMQogICAgICAgICAgICAgICAgICAgIH0gOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWF0Y2hSc2x0LmluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICBjOiAiLSIgPT09IGNocnMgPyBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250IDogIisiLAogICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zICsgMQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gITE7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJhZGl4SGFuZGxlcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHsKICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmIGNocnMgPT09IG9wdHMucmFkaXhQb2ludCAmJiBvcHRzLmRpZ2l0cyA+IDApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBtYXNrc2V0LmJ1ZmZlciksIGludGVnZXJWYWx1ZSA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oIiIpLm1hdGNoKG9wdHMucmVnZXguaW50ZWdlclBhcnQob3B0cykpOwogICAgICAgICAgICAgICAgICAgIGlmICgtMSAhPSByYWRpeFBvcyAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3JhZGl4UG9zXSkgcmV0dXJuIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmFkaXhQb3MgLSAxXSA\/IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHJhZGl4UG9zICsgMQogICAgICAgICAgICAgICAgICAgIH0gOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogaW50ZWdlclZhbHVlLmluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICBjOiBpbnRlZ2VyVmFsdWVbMF0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiByYWRpeFBvcyArIDEKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGlmICghaW50ZWdlclZhbHVlIHx8ICIwIiA9PSBpbnRlZ2VyVmFsdWVbMF0gJiYgaW50ZWdlclZhbHVlLmluZGV4ICsgMSAhPSBwb3MpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltpbnRlZ2VyVmFsdWUgPyBpbnRlZ2VyVmFsdWUuaW5kZXggOiBwb3NdID0gIjAiLCAKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogKGludGVnZXJWYWx1ZSA\\/IChpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZSgvLC9nLCAiIiksIAogICAgICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5yZXBsYWNlKCIuIiwgb3B0cy5yYWRpeFBvaW50KSkgOiBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUuaW5kZXhPZigiLiIpIDwgaW5pdGlhbFZhbHVlLmluZGV4T2YoIiwiKSA\/IGluaXRpYWxWYWx1ZS5yZXBsYWNlKC9cLi9nLCAiIikgOiBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZSgvLC9nLCAiIikgOiBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKCQuaW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgb3B0cy5ncm91cFNlcGFyYXRvciksICJnIiksICIiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAwID09IG9wdHMuZGlnaXRzICYmICgtMSAhPSBpbml0aWFsVmFsdWUuaW5kZXhPZigiLiIpID8gaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnN1YnN0cmluZygwLCBpbml0aWFsVmFsdWUuaW5kZXhPZigiLiIpKSA6IC0xICE9IGluaXRpYWxWYWx1ZS5pbmRleE9mKCIsIikgJiYgKGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5zdWJzdHJpbmcoMCwgaW5pdGlhbFZhbHVlLmluZGV4T2YoIiwiKSkpKSwgCiAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNhbkNsZWFyUG9zaXRpb246IGZ1bmN0aW9uKG1hc2tzZXQsIHBvc2l0aW9uLCBsdnAsIHN0cmljdCwgb3B0cykgewogICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uSW5wdXQgPSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uXS5pbnB1dCwgY2FuQ2xlYXIgPSBwb3NpdGlvbklucHV0ICE9IG9wdHMucmFkaXhQb2ludCAmJiBpc0Zpbml0ZShwb3NpdGlvbklucHV0KSB8fCBwb3NpdGlvbiA9PSBsdnAgfHwgcG9zaXRpb25JbnB1dCA9PSBvcHRzLmdyb3VwU2VwYXJhdG9yIHx8IHBvc2l0aW9uSW5wdXQgPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCB8fCBwb3NpdGlvbklucHV0ID09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjazsKICAgICAgICAgICAgICAgIGlmIChjYW5DbGVhciAmJiBpc0Zpbml0ZShwb3NpdGlvbklucHV0KSkgewogICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaFJzbHQgPSBtYXNrc2V0LmJ1ZmZlci5qb2luKCIiKS5zdWJzdHIoMCwgcG9zaXRpb24pLm1hdGNoKG9wdHMucmVnZXguaW50ZWdlck5QYXJ0KG9wdHMpKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIXN0cmljdCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gcG9zaXRpb24gKyAxLCBpc051bGwgPSBudWxsID09IG1hdGNoUnNsdCB8fCAwID09IHBhcnNlSW50KG1hdGNoUnNsdFswXS5yZXBsYWNlKG5ldyBSZWdFeHAoJC5pbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBvcHRzLmdyb3VwU2VwYXJhdG9yKSwgImciKSwgIiIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTnVsbCkgZm9yICg7bWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdICYmIChtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10uaW5wdXQgPT0gb3B0cy5ncm91cFNlcGFyYXRvciB8fCAiMCIgPT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLmlucHV0KTsgKSBkZWxldGUgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLCAKICAgICAgICAgICAgICAgICAgICAgICAgcG9zKys7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBbXTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB2cCBpbiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zKSBidWZmZXIucHVzaChtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3ZwXS5pbnB1dCk7CiAgICAgICAgICAgICAgICAgICAgbWF0Y2hSc2x0ID0gYnVmZmVyLmpvaW4oIiIpLm1hdGNoKG9wdHMucmVnZXguaW50ZWdlck5QYXJ0KG9wdHMpKTsKICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3NpdGlvbiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIG1hc2tzZXQuYnVmZmVyKTsKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hSc2x0ICYmICgtMSA9PSByYWRpeFBvc2l0aW9uIHx8IHJhZGl4UG9zaXRpb24gPj0gcG9zaXRpb24pKSBpZiAoMCA9PSBtYXRjaFJzbHRbMF0uaW5kZXhPZigiMCIpKSBjYW5DbGVhciA9IG1hdGNoUnNsdC5pbmRleCAhPSBwb3NpdGlvbiB8fCAtMSA9PSByYWRpeFBvc2l0aW9uOyBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludFBhcnQgPSBwYXJzZUludChtYXRjaFJzbHRbMF0ucmVwbGFjZShuZXcgUmVnRXhwKCQuaW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgb3B0cy5ncm91cFNlcGFyYXRvciksICJnIiksICIiKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIC0xICE9IHJhZGl4UG9zaXRpb24gJiYgMTAgPiBpbnRQYXJ0ICYmICIwIiA9PSBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSAmJiAobWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NpdGlvbl0uaW5wdXQgPSAiMCIsIAogICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LnAgPSBvcHRzLnByZWZpeC5sZW5ndGggKyAxLCBjYW5DbGVhciA9ICExKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gY2FuQ2xlYXI7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGN1cnJlbmN5OiB7CiAgICAgICAgICAgIHByZWZpeDogIiQgIiwKICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6ICIsIiwKICAgICAgICAgICAgYWxpYXM6ICJudW1lcmljIiwKICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICIwIiwKICAgICAgICAgICAgYXV0b0dyb3VwOiAhMCwKICAgICAgICAgICAgZGlnaXRzOiAyLAogICAgICAgICAgICBkaWdpdHNPcHRpb25hbDogITEsCiAgICAgICAgICAgIGNsZWFyTWFza09uTG9zdEZvY3VzOiAhMQogICAgICAgIH0sCiAgICAgICAgZGVjaW1hbDogewogICAgICAgICAgICBhbGlhczogIm51bWVyaWMiCiAgICAgICAgfSwKICAgICAgICBpbnRlZ2VyOiB7CiAgICAgICAgICAgIGFsaWFzOiAibnVtZXJpYyIsCiAgICAgICAgICAgIGRpZ2l0czogIjAiLAogICAgICAgICAgICByYWRpeFBvaW50OiAiIgogICAgICAgIH0KICAgIH0pLCAkLmZuLmlucHV0bWFzazsKfShqUXVlcnkpLCBmdW5jdGlvbigkKSB7CiAgICByZXR1cm4gJC5leHRlbmQoJC5pbnB1dG1hc2suZGVmYXVsdHMuYWxpYXNlcywgewogICAgICAgIHBob25lOiB7CiAgICAgICAgICAgIHVybDogInBob25lLWNvZGVzL3Bob25lLWNvZGVzLmpzIiwKICAgICAgICAgICAgbWFza0luaXQ6ICIrcHAocHApcHBwcHBwcHAiLAogICAgICAgICAgICBjb3VudHJ5Y29kZTogIiIsCiAgICAgICAgICAgIG1hc2s6IGZ1bmN0aW9uKG9wdHMpIHsKICAgICAgICAgICAgICAgIG9wdHMuZGVmaW5pdGlvbnMgPSB7CiAgICAgICAgICAgICAgICAgICAgcDogewogICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIiMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogIlswLTldIiwKICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIG1hc2tMaXN0ID0gW107CiAgICAgICAgICAgICAgICByZXR1cm4gJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6IG9wdHMudXJsLAogICAgICAgICAgICAgICAgICAgIGFzeW5jOiAhMSwKICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMaXN0ID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBhamF4T3B0aW9ucywgdGhyb3duRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQodGhyb3duRXJyb3IgKyAiIC0gIiArIG9wdHMudXJsKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwgbWFza0xpc3QgPSBtYXNrTGlzdC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGEubWFzayB8fCBhKSA8IChiLm1hc2sgfHwgYikgPyAtMSA6IDE7CiAgICAgICAgICAgICAgICB9KSwgIiIgIT0gb3B0cy5jb3VudHJ5Y29kZSAmJiAob3B0cy5tYXNrSW5pdCA9ICIrIiArIG9wdHMuY291bnRyeWNvZGUgKyBvcHRzLm1hc2tJbml0LnN1YnN0cmluZygzKSksIAogICAgICAgICAgICAgICAgbWFza0xpc3Quc3BsaWNlKDAsIDAsIG9wdHMubWFza0luaXQpLCBtYXNrTGlzdDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbm9qdW1wczogITAsCiAgICAgICAgICAgIG5vanVtcHNUaHJlc2hvbGQ6IDEsCiAgICAgICAgICAgIG9uQmVmb3JlTWFzazogZnVuY3Rpb24odmFsdWUsIG9wdHMpIHsKICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14wL2csICIiKTsKICAgICAgICAgICAgICAgIHJldHVybiAocHJvY2Vzc2VkVmFsdWUuaW5kZXhPZihvcHRzLmNvdW50cnljb2RlKSA+IDEgfHwgLTEgPT0gcHJvY2Vzc2VkVmFsdWUuaW5kZXhPZihvcHRzLmNvdW50cnljb2RlKSkgJiYgKHByb2Nlc3NlZFZhbHVlID0gIisiICsgb3B0cy5jb3VudHJ5Y29kZSArIHByb2Nlc3NlZFZhbHVlKSwgCiAgICAgICAgICAgICAgICBwcm9jZXNzZWRWYWx1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgcGhvbmViZTogewogICAgICAgICAgICBhbGlhczogInBob25lIiwKICAgICAgICAgICAgdXJsOiAicGhvbmUtY29kZXMvcGhvbmUtYmUuanMiLAogICAgICAgICAgICBjb3VudHJ5Y29kZTogIjMyIiwKICAgICAgICAgICAgbm9qdW1wc1RocmVzaG9sZDogNAogICAgICAgIH0KICAgIH0pLCAkLmZuLmlucHV0bWFzazsKfShqUXVlcnkpLCBmdW5jdGlvbigkKSB7CiAgICByZXR1cm4gJC5leHRlbmQoJC5pbnB1dG1hc2suZGVmYXVsdHMuYWxpYXNlcywgewogICAgICAgIFJlZ2V4OiB7CiAgICAgICAgICAgIG1hc2s6ICJyIiwKICAgICAgICAgICAgZ3JlZWR5OiAhMSwKICAgICAgICAgICAgcmVwZWF0OiAiKiIsCiAgICAgICAgICAgIHJlZ2V4OiBudWxsLAogICAgICAgICAgICByZWdleFRva2VuczogbnVsbCwKICAgICAgICAgICAgdG9rZW5pemVyOiAvXFtcXj9dPyg\/OlteXFxcXV0rfFxcW1xTXHNdPykqXT98XFwoPzowKD86WzAtM11bMC03XXswLDJ9fFs0LTddWzAtN10\/KT98WzEtOV1bMC05XSp8eFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0fXxjW0EtWmEtel18W1xTXHNdPyl8XCgoPzpcP1s6PSFdPyk\/fCg\/Ols\/KitdfFx7WzAtOV0rKD86LFswLTldKik\/XH0pXD8\/fFteLj8qK14ke1soKXxcXF0rfC4vZywKICAgICAgICAgICAgcXVhbnRpZmllckZpbHRlcjogL1swLTldK1teLF0vLAogICAgICAgICAgICBpc0NvbXBsZXRlOiBmdW5jdGlvbihidWZmZXIsIG9wdHMpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG9wdHMucmVnZXgpLnRlc3QoYnVmZmVyLmpvaW4oIiIpKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHsKICAgICAgICAgICAgICAgIHI6IHsKICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlZ2V4VG9rZW4oaXNHcm91cCwgaXNRdWFudGlmaWVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBbXSwgdGhpcy5pc0dyb3VwID0gaXNHcm91cCB8fCAhMSwgdGhpcy5pc1F1YW50aWZpZXIgPSBpc1F1YW50aWZpZXIgfHwgITEsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWFudGlmaWVyID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXg6IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMucmVwZWF0ZXJQYXJ0ID0gdm9pZCAwOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFuYWx5c2VSZWdleCgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCwgbSwgY3VycmVudFRva2VuID0gbmV3IHJlZ2V4VG9rZW4oKSwgb3Blbmdyb3VwcyA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChvcHRzLnJlZ2V4VG9rZW5zID0gW107IG1hdGNoID0gb3B0cy50b2tlbml6ZXIuZXhlYyhvcHRzLnJlZ2V4KTsgKSBzd2l0Y2ggKG0gPSBtYXRjaFswXSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNoYXJBdCgwKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICIoIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZ3JvdXBzLnB1c2gobmV3IHJlZ2V4VG9rZW4oITApKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgIikiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cFRva2VuID0gb3Blbmdyb3Vwcy5wb3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZ3JvdXBzLmxlbmd0aCA+IDAgPyBvcGVuZ3JvdXBzW29wZW5ncm91cHMubGVuZ3RoIC0gMV0ubWF0Y2hlcy5wdXNoKGdyb3VwVG9rZW4pIDogY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChncm91cFRva2VuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgInsiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICIrIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiKiI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1YW50aWZpZXJUb2tlbiA9IG5ldyByZWdleFRva2VuKCExLCAhMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IG0ucmVwbGFjZSgvW3t9XS9nLCAiIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1xID0gbS5zcGxpdCgiLCIpLCBtcTAgPSBpc05hTihtcVswXSkgPyBtcVswXSA6IHBhcnNlSW50KG1xWzBdKSwgbXExID0gMSA9PSBtcS5sZW5ndGggPyBtcTAgOiBpc05hTihtcVsxXSkgPyBtcVsxXSA6IHBhcnNlSW50KG1xWzFdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVhbnRpZmllclRva2VuLnF1YW50aWZpZXIgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogbXEwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXg6IG1xMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wZW5ncm91cHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IG9wZW5ncm91cHNbb3Blbmdyb3Vwcy5sZW5ndGggLSAxXS5tYXRjaGVzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSBtYXRjaGVzLnBvcCgpLCAhbWF0Y2guaXNHcm91cCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwVG9rZW4gPSBuZXcgcmVnZXhUb2tlbighMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cFRva2VuLm1hdGNoZXMucHVzaChtYXRjaCksIG1hdGNoID0gZ3JvdXBUb2tlbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2gobWF0Y2gpLCBtYXRjaGVzLnB1c2gocXVhbnRpZmllclRva2VuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wb3AoKSwgIW1hdGNoLmlzR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cFRva2VuID0gbmV3IHJlZ2V4VG9rZW4oITApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBUb2tlbi5tYXRjaGVzLnB1c2gobWF0Y2gpLCBtYXRjaCA9IGdyb3VwVG9rZW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChtYXRjaCksIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gocXVhbnRpZmllclRva2VuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5ncm91cHMubGVuZ3RoID4gMCA\/IG9wZW5ncm91cHNbb3Blbmdyb3Vwcy5sZW5ndGggLSAxXS5tYXRjaGVzLnB1c2gobSkgOiBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoID4gMCAmJiBvcHRzLnJlZ2V4VG9rZW5zLnB1c2goY3VycmVudFRva2VuKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVJlZ2V4VG9rZW4odG9rZW4sIGZyb21Hcm91cCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzdmFsaWQgPSAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21Hcm91cCAmJiAocmVnZXhQYXJ0ICs9ICIoIiwgb3Blbkdyb3VwQ291bnQrKyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtbmR4ID0gMDsgbW5keCA8IHRva2VuLm1hdGNoZXMubGVuZ3RoOyBtbmR4KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hUb2tlbiA9IHRva2VuLm1hdGNoZXNbbW5keF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPT0gbWF0Y2hUb2tlbi5pc0dyb3VwKSBpc3ZhbGlkID0gdmFsaWRhdGVSZWdleFRva2VuKG1hdGNoVG9rZW4sICEwKTsgZWxzZSBpZiAoMSA9PSBtYXRjaFRva2VuLmlzUXVhbnRpZmllcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JybnRuZHggPSAkLmluQXJyYXkobWF0Y2hUb2tlbiwgdG9rZW4ubWF0Y2hlcyksIG1hdGNoR3JvdXAgPSB0b2tlbi5tYXRjaGVzW2Nycm50bmR4IC0gMV0sIHJlZ2V4UGFydEJhayA9IHJlZ2V4UGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG1hdGNoVG9rZW4ucXVhbnRpZmllci5tYXgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDttYXRjaFRva2VuLnJlcGVhdGVyUGFydCAmJiBtYXRjaFRva2VuLnJlcGVhdGVyUGFydCAhPSByZWdleFBhcnQgJiYgbWF0Y2hUb2tlbi5yZXBlYXRlclBhcnQubGVuZ3RoID4gcmVnZXhQYXJ0Lmxlbmd0aCAmJiAhKGlzdmFsaWQgPSB2YWxpZGF0ZVJlZ2V4VG9rZW4obWF0Y2hHcm91cCwgITApKTsgKSA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3ZhbGlkID0gaXN2YWxpZCB8fCB2YWxpZGF0ZVJlZ2V4VG9rZW4obWF0Y2hHcm91cCwgITApLCBpc3ZhbGlkICYmIChtYXRjaFRva2VuLnJlcGVhdGVyUGFydCA9IHJlZ2V4UGFydCksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhQYXJ0ID0gcmVnZXhQYXJ0QmFrICsgbWF0Y2hUb2tlbi5xdWFudGlmaWVyLm1heDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBxbSA9IG1hdGNoVG9rZW4ucXVhbnRpZmllci5tYXggLSAxOyBxbSA+IGkgJiYgIShpc3ZhbGlkID0gdmFsaWRhdGVSZWdleFRva2VuKG1hdGNoR3JvdXAsICEwKSk7IGkrKykgOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhQYXJ0ID0gcmVnZXhQYXJ0QmFrICsgInsiICsgbWF0Y2hUb2tlbi5xdWFudGlmaWVyLm1pbiArICIsIiArIG1hdGNoVG9rZW4ucXVhbnRpZmllci5tYXggKyAifSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZvaWQgMCAhPSBtYXRjaFRva2VuLm1hdGNoZXMpIGZvciAodmFyIGsgPSAwOyBrIDwgbWF0Y2hUb2tlbi5sZW5ndGggJiYgIShpc3ZhbGlkID0gdmFsaWRhdGVSZWdleFRva2VuKG1hdGNoVG9rZW5ba10sIGZyb21Hcm91cCkpOyBrKyspIDsgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0RXhwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIlsiID09IG1hdGNoVG9rZW4uY2hhckF0KDApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0RXhwID0gcmVnZXhQYXJ0LCB0ZXN0RXhwICs9IG1hdGNoVG9rZW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgb3Blbkdyb3VwQ291bnQgPiBqOyBqKyspIHRlc3RFeHAgKz0gIikiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cCA9IG5ldyBSZWdFeHAoIl4oIiArIHRlc3RFeHAgKyAiKSQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzdmFsaWQgPSBleHAudGVzdChidWZmZXJTdHIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZm9yICh2YXIgbCA9IDAsIHRsID0gbWF0Y2hUb2tlbi5sZW5ndGg7IHRsID4gbDsgbCsrKSBpZiAoIlxcIiAhPSBtYXRjaFRva2VuLmNoYXJBdChsKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdEV4cCA9IHJlZ2V4UGFydCwgdGVzdEV4cCArPSBtYXRjaFRva2VuLnN1YnN0cigwLCBsICsgMSksIHRlc3RFeHAgPSB0ZXN0RXhwLnJlcGxhY2UoL1x8JC8sICIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBvcGVuR3JvdXBDb3VudCA+IGo7IGorKykgdGVzdEV4cCArPSAiKSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwID0gbmV3IFJlZ0V4cCgiXigiICsgdGVzdEV4cCArICIpJCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzdmFsaWQgPSBleHAudGVzdChidWZmZXJTdHIpKSBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleFBhcnQgKz0gbWF0Y2hUb2tlbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzdmFsaWQpIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyb21Hcm91cCAmJiAocmVnZXhQYXJ0ICs9ICIpIiwgb3Blbkdyb3VwQ291bnQtLSksIGlzdmFsaWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA9PSBvcHRzLnJlZ2V4VG9rZW5zICYmIGFuYWx5c2VSZWdleCgpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2J1ZmZlciA9IG1hc2tzZXQuYnVmZmVyLnNsaWNlKCksIHJlZ2V4UGFydCA9ICIiLCBpc1ZhbGlkID0gITEsIG9wZW5Hcm91cENvdW50ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgY2J1ZmZlci5zcGxpY2UocG9zLCAwLCBjaHJzKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYnVmZmVyU3RyID0gY2J1ZmZlci5qb2luKCIiKSwgaSA9IDA7IGkgPCBvcHRzLnJlZ2V4VG9rZW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnZXhUb2tlbiA9IG9wdHMucmVnZXhUb2tlbnNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9IHZhbGlkYXRlUmVnZXhUb2tlbihyZWdleFRva2VuLCByZWdleFRva2VuLmlzR3JvdXApKSBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KSwgJC5mbi5pbnB1dG1hc2s7Cn0oalF1ZXJ5KTs=",
    "size": "137204"
}