{
    "namaFile": "js\/perencanaanAset\/rkbmdKuasaPengguna\/rkbmdPemeliharaanKuasaPengguna.js",
    "lastUpdate": "2018-10-22+10:04:17.05",
    "contentFile": "dmFyIHJrYm1kUGVtZWxpaGFyYWFuS3Vhc2FQZW5nZ3VuYUZpbHRlclNLUEQgPSBuZXcgU2twZENscyh7CiAgcHJlZml4OiAicmtibWRQZW1lbGloYXJhYW5LdWFzYVBlbmdndW5hIiwKICBmb3JtTmFtZTogInJrYm1kUGVtZWxpaGFyYWFuS3Vhc2FQZW5nZ3VuYUZvcm0iLAoKICBwaWxpaFVydXNhbmZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgcmtibWRQZW1lbGloYXJhYW5LdWFzYVBlbmdndW5hLmZpbHRlclJlbmRlcih0cnVlKTsKICB9LAogIHBpbGloQmlkYW5nQWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgcmtibWRQZW1lbGloYXJhYW5LdWFzYVBlbmdndW5hLmZpbHRlclJlbmRlcih0cnVlKTsKICB9LAogIHBpbGloVW5pdEFmdGVyOiBmdW5jdGlvbigpIHsKICAgIHJrYm1kUGVtZWxpaGFyYWFuS3Vhc2FQZW5nZ3VuYS5maWx0ZXJSZW5kZXIodHJ1ZSk7CiAgfSwKICBwaWxpaFN1YlVuaXRBZnRlcjogZnVuY3Rpb24oKSB7CiAgICBya2JtZFBlbWVsaWhhcmFhbkt1YXNhUGVuZ2d1bmEuZmlsdGVyUmVuZGVyKHRydWUpOwogIH0sCiAgcGlsaWhTZWtzaUFmdGVyOiBmdW5jdGlvbigpIHsKICAgIHJrYm1kUGVtZWxpaGFyYWFuS3Vhc2FQZW5nZ3VuYS5maWx0ZXJSZW5kZXIodHJ1ZSk7CiAgfQp9KTsKdmFyIHJrYm1kUGVtZWxpaGFyYWFuS3Vhc2FQZW5nZ3VuYSA9IG5ldyBEYWZ0YXJPYmoyKHsKICBwcmVmaXg6ICJya2JtZFBlbWVsaWhhcmFhbkt1YXNhUGVuZ2d1bmEiLAogIHVybDogInBhZ2VzLnBocD9QZz1ya2JtZFBlbWVsaWhhcmFhbkt1YXNhUGVuZ2d1bmEiLAogIGZvcm1OYW1lOiAicmtibWRQZW1lbGloYXJhYW5LdWFzYVBlbmdndW5hRm9ybSIsCgogIGxvYWRpbmc6IGZ1bmN0aW9uKCkgewogICAgdGhpcy50b3BCYXJSZW5kZXIoKTsKICAgIHRoaXMuZmlsdGVyUmVuZGVyKCk7CiAgICB0aGlzLmRhZnRhclJlbmRlcigpOwogICAgdGhpcy5zdW1IYWxSZW5kZXIoKTsKICB9LAogIGZpbHRlclJlbmRlckFmdGVyOiBmdW5jdGlvbigpIHsKICAgIC8vIHRoaXMuZGFmdGFyUmVuZGVyKCk7CiAgfSwKICBkYWZ0YXJSZW5kZXI6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsgLy9yZW5kZXIgZGFmdGFyCiAgICBhZGRDb3ZlclBhZ2UyKCJkYWZ0YXJfY292ZXIiLCAxLCB0cnVlLCB0cnVlLCB7CiAgICAgIHJlbmRlclRvOiB0aGlzLnByZWZpeCArICJfY29udF9kYWZ0YXIiLAogICAgICBpbWdzcmM6ICJpbWFnZXMvd2FpdC5naWYiLAogICAgICBzdHlsZTogeyBwb3NpdGlvbjogImFic29sdXRlIiwgdG9wOiAiNSIsIGxlZnQ6ICI1IiB9CiAgICB9KTsKICAgICQuYWpheCh7CiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9ZGFmdGFyIiwKICAgICAgdHlwZTogIlBPU1QiLAogICAgICBkYXRhOiAkKCIjIiArIHRoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1lLnByZWZpeCArICJfY29udF9kYWZ0YXIiKS5pbm5lckhUTUwgPQogICAgICAgICAgcmVzcC5jb250ZW50OwogICAgICAgIG1lLnN1bUhhbFJlbmRlcigpOwogICAgICB9CiAgICB9KTsKICB9LAogIEVkaXQ6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgIGVycm1zZyA9IHRoaXMuQ2VrQ2hlY2tib3goKTsKICAgIGlmIChlcnJtc2cgPT0gIiIpIHsKICAgICAgdmFyIGJveCA9IHRoaXMuR2V0Q2J4Q2hlY2tlZCgpOwogICAgICB2YXIgYUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmZvcm1OYW1lKTsKICAgICAgJC5hamF4KHsKICAgICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPUVkaXQiLAogICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICBkYXRhOiAkKCIjIiArIHRoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgICAkKCIjbmV3QmxhbmtQYWdlIikudmFsKCIiKTsKICAgICAgICAgICAgYUZvcm0uYWN0aW9uID0gInBhZ2VzLnBocD9QZz1ya2JtZFBlbWVsaWhhcmFhbkt1YXNhUGVuZ2d1bmFJbnMiOwogICAgICAgICAgICBhRm9ybS50YXJnZXQgPSAiX2JsYW5rIjsKICAgICAgICAgICAgYUZvcm0uc3VibWl0KCk7CiAgICAgICAgICAgIGFGb3JtLnRhcmdldCA9ICIiOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBhbGVydChlcnJtc2cpOwogICAgfQogIH0sCiAgSGFwdXM6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnByZWZpeCArICJfam1sY2VrIikpIHsKICAgICAgdmFyIGptbGNlayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMucHJlZml4ICsgIl9qbWxjZWsiKS52YWx1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBqbWxjZWsgPSAiIjsKICAgIH0KCiAgICBpZiAoam1sY2VrID09IDApIHsKICAgICAgYWxlcnQoIkRhdGEgQmVsdW0gRGlwaWxpaCEiKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChjb25maXJtKCJZYWtpbiBIYXB1cyAiICsgam1sY2VrICsgIiBEYXRhID8iKSkgewogICAgICAgIHZhciBjb3ZlciA9IHRoaXMucHJlZml4ICsgIl9oYXB1c2NvdmVyIjsKICAgICAgICBhZGRDb3ZlclBhZ2UyKGNvdmVyLCAxLCB0cnVlLCBmYWxzZSk7CiAgICAgICAgJC5hamF4KHsKICAgICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgICAgICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPXJlbW92ZSIsCiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICAgICAgZGVsRWxlbShjb3Zlcik7CiAgICAgICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgICAgIG1lLkFmdGVySGFwdXMoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBlcnJvcjogYWpheEVycm9yCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LAogIEJhcnU6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKCiAgICBlcnJtc2cgPSAiIjsKCiAgICBpZiAoJCgiI2ZpbHRlclVydXNhbiIpLnZhbCgpID09ICIwMCIpIHsKICAgICAgZXJybXNnID0gIlBpbGloIFVydXNhbiI7CiAgICB9IGVsc2UgaWYgKCQoIiNmaWx0ZXJTS1BEIikudmFsKCkgPT0gIjAwIikgewogICAgICBlcnJtc2cgPSAiUGlsaWggQmlkYW5nIjsKICAgIH0gZWxzZSBpZiAoJCgiI2ZpbHRlclNLUEQiKS52YWwoKSA9PSAiMDAiKSB7CiAgICAgIGVycm1zZyA9ICJQaWxpaCBTS1BEIjsKICAgIH0gZWxzZSBpZiAoJCgiI2ZpbHRlclVuaXQiKS52YWwoKSA9PSAiMDAiKSB7CiAgICAgIGVycm1zZyA9ICJQaWxpaCBVbml0IjsKICAgIH0gZWxzZSBpZiAoJCgiI2ZpbHRlclN1YlVuaXQiKS52YWwoKSA9PSAiMDAwIikgewogICAgICBlcnJtc2cgPSAiUGlsaWggU3ViIFVuaXQiOwogICAgfQogICAgaWYgKGVycm1zZyA9PSAiIikgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICB2YXIgYUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmZvcm1OYW1lKTsKICAgICAgJC5hamF4KHsKICAgICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPUJhcnUiLAogICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICBkYXRhOiAkKCIjIiArIHRoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgICAkKCIjbmV3QmxhbmtQYWdlIikudmFsKCIxIik7CiAgICAgICAgICAgIGFGb3JtLmFjdGlvbiA9ICJwYWdlcy5waHA\/UGc9cmtibWRQZW1lbGloYXJhYW5LdWFzYVBlbmdndW5hSW5zIjsKICAgICAgICAgICAgYUZvcm0udGFyZ2V0ID0gIl9ibGFuayI7CiAgICAgICAgICAgIGFGb3JtLnN1Ym1pdCgpOwogICAgICAgICAgICBhRm9ybS50YXJnZXQgPSAiIjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgYWxlcnQoZXJybXNnKTsKICAgIH0KICB9LAoKICBmb3JtYXRDdXJyZW5jeTogZnVuY3Rpb24obnVtKSB7CiAgICBudW0gPSBudW0udG9TdHJpbmcoKS5yZXBsYWNlKC9cJHxcLC9nLCAiIik7CiAgICBpZiAoaXNOYU4obnVtKSkgbnVtID0gIjAiOwogICAgc2lnbiA9IG51bSA9PSAobnVtID0gTWF0aC5hYnMobnVtKSk7CiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAqIDEwMCArIDAuNTAwMDAwMDAwMDEpOwogICAgY2VudHMgPSBudW0gJSAxMDA7CiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIDEwMCkudG9TdHJpbmcoKTsKICAgIGlmIChjZW50cyA8IDEwKSBjZW50cyA9ICIwIiArIGNlbnRzOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBNYXRoLmZsb29yKChudW0ubGVuZ3RoIC0gKDEgKyBpKSkgLyAzKTsgaSsrKQogICAgICBudW0gPQogICAgICAgIG51bS5zdWJzdHJpbmcoMCwgbnVtLmxlbmd0aCAtICg0ICogaSArIDMpKSArCiAgICAgICAgIi4iICsKICAgICAgICBudW0uc3Vic3RyaW5nKG51bS5sZW5ndGggLSAoNCAqIGkgKyAzKSk7CiAgICByZXR1cm4gKHNpZ24gPyAiIiA6ICItIikgKyAiIiArIG51bTsKICB9LAogIGJhbnR1OiBmdW5jdGlvbihpZCkgewogICAgdmFyIGlkQW5na2EgPSBpZC5yZXBsYWNlKCJKIiwgImoiKTsKICAgIHZhciBhbmdrYSA9ICQoIiMiICsgaWRBbmdrYSkudmFsKCk7CiAgICAkKCIjYmFudHUiICsgaWQpLnRleHQocmtibWRQZW1lbGloYXJhYW5LdWFzYVBlbmdndW5hLmZvcm1hdEN1cnJlbmN5KGFuZ2thKSk7CiAgfSwKICBMYXBvcmFuOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB2YXIgZXJyID0gIiI7CiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybWNvdmVyIjsKICAgIGlmICgkKCIjZmlsdGVyVXJ1c2FuIikudmFsKCkgPT0gIjAwIikgewogICAgICBlcnIgPSAiUGlsaWggVXJ1c2FuIjsKICAgIH0gZWxzZSBpZiAoJCgiI2ZpbHRlckJpZGFuZyIpLnZhbCgpID09ICIwMCIpIHsKICAgICAgZXJyID0gIlBpbGloIEJpZGFuZyI7CiAgICB9IGVsc2UgaWYgKCQoIiNmaWx0ZXJTS1BEIikudmFsKCkgPT0gIjAwIikgewogICAgICBlcnIgPSAiUGlsaWggU0tQRCI7CiAgICB9IGVsc2UgaWYgKCQoIiNmaWx0ZXJVbml0IikudmFsKCkgPT0gIjAwIikgewogICAgICBlcnIgPSAiUGlsaWggVW5pdCI7CiAgICB9IGVsc2UgaWYgKCQoIiNmaWx0ZXJTdWJVbml0IikudmFsKCkgPT0gIjAwMCIpIHsKICAgICAgZXJyID0gIlBpbGloIFN1YiBVbml0IjsKICAgIH0KICAgIGlmIChlcnIgPT0gIiIpIHsKICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICJoaWRkZW4iOwogICAgICBhZGRDb3ZlclBhZ2UyKGNvdmVyLCAyLCB0cnVlLCBmYWxzZSk7CiAgICAgICQuYWpheCh7CiAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1MYXBvcmFuIiwKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsKICAgICAgICAgICAgbWUuQWZ0ZXJGb3JtQmFydShyZXNwKTsKICAgICAgICAgICAgJCgiI3RhbmdnYWxDZXRhayIpLmRhdGVwaWNrZXIoewogICAgICAgICAgICAgIGRhdGVGb3JtYXQ6ICJkZC1tbS15eSIsCiAgICAgICAgICAgICAgc2hvd0FuaW06ICJzbGlkZURvd24iLAogICAgICAgICAgICAgIGlubGluZTogdHJ1ZSwKICAgICAgICAgICAgICBzaG93T246ICJidXR0b24iLAogICAgICAgICAgICAgIGJ1dHRvbkltYWdlOiAiaW1hZ2VzL2NhbGVuZGFyLmdpZiIsCiAgICAgICAgICAgICAgYnV0dG9uSW1hZ2VPbmx5OiB0cnVlLAogICAgICAgICAgICAgIGNoYW5nZU1vbnRoOiB0cnVlLAogICAgICAgICAgICAgIGNoYW5nZVllYXI6IGZhbHNlLAogICAgICAgICAgICAgIHllYXJSYW5nZTogcmVzcC5jb250ZW50LnllYXJSYW5nZSwKICAgICAgICAgICAgICBidXR0b25UZXh0OiAiIiwKICAgICAgICAgICAgICBkZWZhdWx0RGF0ZTogKzAKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImF1dG8iOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBhbGVydChlcnIpOwogICAgfQogIH0sCiAgbmV3VGFuZGFUYW5nYW5nYW46IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgIHZhciBlcnIgPSAiIjsKICAgIHZhciBjb3ZlciA9IHRoaXMucHJlZml4ICsgIl9mb3JtY292ZXJUYW5kYVRhbmdhbiI7CgogICAgaWYgKGVyciA9PSAiIikgewogICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICAgIGFkZENvdmVyUGFnZTIoY292ZXIsIDk5LCB0cnVlLCBmYWxzZSk7CiAgICAgICQuYWpheCh7CiAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5wcmVmaXggKyAiX2Zvcm0iKS5zZXJpYWxpemUoKSwKICAgICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPW5ld1RhbmRhVGFuZ2FuZ2FuIiwKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsKICAgICAgICAgICAgbWUuQWZ0ZXJGb3JtQmFydShyZXNwKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICAgICAgZGVsRWxlbShjb3Zlcik7CiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAiYXV0byI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGFsZXJ0KGVycik7CiAgICB9CiAgfSwKICBjbG9zZVRhbmRhVGFuZ2FuRm9ybTogZnVuY3Rpb24oKSB7CiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybWNvdmVyVGFuZGFUYW5nYW4iOwogICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKSkgZGVsRWxlbShjb3Zlcik7CiAgICBpZiAodGlwZSA9PSBudWxsKSB7CiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAiYXV0byI7CiAgICB9CiAgfSwKICBwaWxpaFBhbmdrYXQ6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgICQuYWpheCh7CiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9cGlsaWhQYW5na2F0IiwKICAgICAgdHlwZTogIlBPU1QiLAogICAgICBkYXRhOiB7CiAgICAgICAgYzE6ICQoIiNmaWx0ZXJVcnVzYW4iKS52YWwoKSwKICAgICAgICBjOiAkKCIjZmlsdGVyQmlkYW5nIikudmFsKCksCiAgICAgICAgZDogJCgiI2ZpbHRlclNLUEQiKS52YWwoKSwKICAgICAgICBlOiAkKCIjZmlsdGVyVW5pdCIpLnZhbCgpLAogICAgICAgIGUxOiAkKCIjZmlsdGVyU3ViVW5pdCIpLnZhbCgpLAogICAgICAgIGRjMTogJCgiI2RjMSIpLnZhbCgpLAogICAgICAgIGRjOiAkKCIjZGMiKS52YWwoKSwKICAgICAgICBkZDogJCgiI2RkIikudmFsKCksCiAgICAgICAga2F0ZWdvcmk6ICQoIiNrYXRlZ29yaSIpLnZhbCgpLAogICAgICAgIG5hbWFwZWdhd2FpOiAkKCIjbmFtYXBlZ2F3YWkiKS52YWwoKSwKICAgICAgICBuaXBwZWdhd2FpOiAkKCIjbmlwcGVnYXdhaSIpLnZhbCgpLAogICAgICAgIHBhbmdrYXRha2hpcjogJCgiI3BhbmdrYXRha2hpciIpLnZhbCgpLAogICAgICAgIGdvbGFuZ19ha2hpcjogJCgiI2dvbGFuZ19ha2hpciIpLnZhbCgpLAogICAgICAgIGphYmF0YW46ICQoIiNqYWJhdGFuIikudmFsKCksCiAgICAgICAgZXNlbG9uX2FraGlyOiAkKCIjZXNlbG9uX2FraGlyIikudmFsKCkKICAgICAgfSwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJnb2xhbmdfYWtoaXIiKS52YWx1ZSA9IHJlc3AuY29udGVudDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfSwKICBzYXZlTmV3VGFuZGFUYW5nYW46IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgIHRoaXMuT25FcnJvckNsb3NlID0gZmFsc2U7CiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICB2YXIgY292ZXIgPSAicmVuamFBc2V0IiArICJfZm9ybXNpbXBhbiI7CiAgICBhZGRDb3ZlclBhZ2UyKGNvdmVyLCAxLCB0cnVlLCBmYWxzZSk7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6IHsKICAgICAgICBjMTogJCgiI2MxIikudmFsKCksCiAgICAgICAgYzogJCgiI2MiKS52YWwoKSwKICAgICAgICBkOiAkKCIjZCIpLnZhbCgpLAogICAgICAgIGU6ICQoIiNlIikudmFsKCksCiAgICAgICAgZTE6ICQoIiNlMSIpLnZhbCgpLAogICAgICAgIGthdGVnb3JpOiAkKCIja2F0ZWdvcmkiKS52YWwoKSwKICAgICAgICBuYW1hcGVnYXdhaTogJCgiI25hbWFwZWdhd2FpIikudmFsKCksCiAgICAgICAgbmlwcGVnYXdhaTogJCgiI25pcHBlZ2F3YWkiKS52YWwoKSwKICAgICAgICBwYW5na2F0YWtoaXI6ICQoIiNwYW5na2F0YWtoaXIiKS52YWwoKSwKICAgICAgICBnb2xhbmdfYWtoaXI6ICQoIiNnb2xhbmdfYWtoaXIiKS52YWwoKSwKICAgICAgICBqYWJhdGFuOiAkKCIjamFiYXRhbiIpLnZhbCgpLAogICAgICAgIGVzZWxvbl9ha2hpcjogJCgiI2VzZWxvbl9ha2hpciIpLnZhbCgpCiAgICAgIH0sCiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9c2F2ZU5ld1RhbmRhVGFuZ2FuIiwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBkZWxFbGVtKGNvdmVyKTsKICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJpZFBlbmFuZGFUYW5nYW4iKS5pbm5lckhUTUwgPQogICAgICAgICAgICByZXNwLmNvbnRlbnQuY29tYm90dGQ7CiAgICAgICAgICBtZS5jbG9zZVRhbmRhVGFuZ2FuRm9ybSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9LAogIHZpZXdMYXBvcmFuOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICBlcnJtc2cgPSAiIjsKICAgIGlmIChlcnJtc2cgPT0gIiIpIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgdmFyIGFGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5wcmVmaXggKyAiX2Zvcm0iKTsKICAgICAgYUZvcm0uYWN0aW9uID0gbWUudXJsICsgIiZ0aXBlPXZpZXdMYXBvcmFuIjsKICAgICAgYUZvcm0udGFyZ2V0ID0gIl9ibGFuayI7CiAgICAgIGFGb3JtLnN1Ym1pdCgpOwogICAgICBhRm9ybS50YXJnZXQgPSAiIjsKICAgIH0gZWxzZSB7CiAgICAgIGFsZXJ0KGVycm1zZyk7CiAgICB9CiAgfSwKICBlZGl0QmFyYW5nOiBmdW5jdGlvbihpZEJhcmFuZykgewogICAgdmFyIG1lID0gdGhpczsKICAgIHZhciBlcnIgPSAiIjsKICAgIHZhciBjb3ZlciA9IHRoaXMucHJlZml4ICsgIl9mb3JtY292ZXIiOwogICAgaWYgKGVyciA9PSAiIikgewogICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICAgIGFkZENvdmVyUGFnZTIoY292ZXIsIDEsIHRydWUsIGZhbHNlKTsKICAgICAgJC5hamF4KHsKICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgZGF0YToKICAgICAgICAgICQoIiMiICsgdGhpcy5wcmVmaXggKyAiX2Zvcm0iKS5zZXJpYWxpemUoKSArICImaWRCYXJhbmc9IiArIGlkQmFyYW5nLAogICAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9ZWRpdEJhcmFuZyIsCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7CiAgICAgICAgICAgIG1lLkFmdGVyRm9ybUJhcnUocmVzcCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImF1dG8iOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBhbGVydChlcnIpOwogICAgfQogIH0sCiAgaGFwdXNCYXJhbmc6IGZ1bmN0aW9uKGlkQmFyYW5nKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgaWYgKGNvbmZpcm0oIllha2luIEhhcHVzIGJhcmFuZyB5YW5nIGRpIHBpbGloID8iKSkgewogICAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfaGFwdXNjb3ZlciI7CiAgICAgIGFkZENvdmVyUGFnZTIoY292ZXIsIDEsIHRydWUsIGZhbHNlKTsKICAgICAgJC5hamF4KHsKICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgZGF0YTogJCgiIyIgKyB0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSArICImaWRCYXJhbmc9IiArIGlkQmFyYW5nLAogICAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9aGFwdXNCYXJhbmciLAogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAgIG1lLnJlZnJlc2hMaXN0KHRydWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZXJyb3I6IGFqYXhFcnJvcgogICAgICB9KTsKICAgIH0KICB9LAogIGZpbmRSZWdpc3RlckJJOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybWNvdmVyUmVnaXN0ZXJCSSI7CiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICBhZGRDb3ZlclBhZ2UyKGNvdmVyLCA2OTk5LCB0cnVlLCBmYWxzZSk7CiAgICAkLmFqYXgoewogICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPWZpbmRSZWdpc3RlckJJIiwKICAgICAgdHlwZTogIlBPU1QiLAogICAgICBkYXRhOiB7CiAgICAgICAgaWRCYXJhbmc6ICQoIiNpZEJhcmFuZyIpLnZhbCgpLAogICAgICAgIGxpc3RJZEJ1a3VJbmR1azogJCgiI2xpc3RJZEJ1a3VJbmR1ayIpLnZhbCgpCiAgICAgIH0sCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb3ZlcikuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50OwogICAgICAgICAgdmFyIGV4cGxvZGVkQ2VrID0gcmVzcC5jZWsuc3BsaXQoIjsiKTsKICAgICAgICAgIHZhciBrb2RlU0tQRCA9IGV4cGxvZGVkQ2VrWzBdLnNwbGl0KCIuIik7CiAgICAgICAgICBmaW5kUmVnaXN0ZXJCdWt1SW5kdWsuYzEgPSBrb2RlU0tQRFswXTsKICAgICAgICAgIGZpbmRSZWdpc3RlckJ1a3VJbmR1ay5jID0ga29kZVNLUERbMV07CiAgICAgICAgICBmaW5kUmVnaXN0ZXJCdWt1SW5kdWsuZCA9IGtvZGVTS1BEWzJdOwogICAgICAgICAgZmluZFJlZ2lzdGVyQnVrdUluZHVrLmUgPSBrb2RlU0tQRFszXTsKICAgICAgICAgIGZpbmRSZWdpc3RlckJ1a3VJbmR1ay5lMSA9IGtvZGVTS1BEWzRdOwogICAgICAgICAgZmluZFJlZ2lzdGVyQnVrdUluZHVrLmtvZGVCYXJhbmcgPSBleHBsb2RlZENla1sxXTsKICAgICAgICAgIGZpbmRSZWdpc3RlckJ1a3VJbmR1ay5sb2FkaW5nKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0sCiAgc2F2ZVNlbGVjdGVkUmVnaXN0YXI6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgIHRoaXMuT25FcnJvckNsb3NlID0gZmFsc2U7CiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybVNlbGVjdGVkUmVnaXN0YXIiOwogICAgYWRkQ292ZXJQYWdlMihjb3ZlciwgOTk5LCB0cnVlLCBmYWxzZSk7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiNmaW5kUmVnaXN0ZXJCdWt1SW5kdWtGb3JtIikuc2VyaWFsaXplKCksCiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9c2F2ZVNlbGVjdGVkUmVnaXN0YXIiLAogICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgJCgiI3RlbXBKdW1sYWhCYXJhbmciKS52YWwocmVzcC5jb250ZW50Lmp1bWxhaEJhcmFuZyk7CiAgICAgICAgICAkKCIjdGVtcEp1bWxhaEJhcmFuZ1RleHQiKS52YWwocmVzcC5jb250ZW50Lmp1bWxhaEJhcmFuZyk7CiAgICAgICAgICAkKCIjbGlzdElkQnVrdUluZHVrIikudmFsKHJlc3AuY29udGVudC5saXN0SWRCdWt1SW5kdWspOwogICAgICAgICAgbWUuY2xvc2VMaXN0UmVnaXN0YXIoKTsKICAgICAgICAgIG1lLmp1bWxhaEthbGlLdWFudGl0aSgpOwogICAgICAgICAgLy8gbWUuQ2xvc2UoKTsKICAgICAgICAgIC8vIGRlbEVsZW0obWUucHJlZml4KyJfZm9ybWNvdmVyUmVnaXN0ZXJCSSIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9LAogIGNsb3NlTGlzdFJlZ2lzdGFyOiBmdW5jdGlvbigpIHsKICAgIHZhciBjb3ZlciA9ICJya2JtZFBlbWVsaWhhcmFhbkt1YXNhUGVuZ2d1bmFfZm9ybWNvdmVyUmVnaXN0ZXJCSSI7CiAgICBkZWxFbGVtKGNvdmVyKTsKICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAiYXV0byI7CiAgfSwKICBmaW5kUmVrZW5pbmdQZW1lbGloYXJhYW4gOiBmdW5jdGlvbigpewoJCXZhciBtZSA9IHRoaXM7CgkJdmFyIGZpbHRlclJlayA9ICJSS0EgMi4yLjEiOwoKCQlwb3B1cFJla2VuaW5nLmVsX2tvZGVfcmVrZW5pbmcgPSAna29kZVJla2VuaW5nUGVtZWxpaGFyYWFuJzsKCQlwb3B1cFJla2VuaW5nLmVsX25hbWFfcmVrZW5pbmcgPSAndGVtcEtldGVyYW5nYW4nOwoJCXBvcHVwUmVrZW5pbmcud2luZG93U2F2ZUFmdGVyPSBmdW5jdGlvbigpe307CgkJcG9wdXBSZWtlbmluZy5maWx0ZXJBa3VuPWZpbHRlclJlazsKCQlwb3B1cFJla2VuaW5nLndpbmRvd1Nob3coKTsKCgl9LAogIHNhdHVhbkNoYW5nZWQ6IGZ1bmN0aW9uKCl7CgkJJCgiI3RlbXBTYXR1YW4iKS52YWwoJCgiI3RlbXBTYXR1YW5TYXR1IikudmFsKCkgKyAiLyIgKyQoIiN0ZW1wU2F0dWFuRHVhIikudmFsKCkpOwoJfSwKICBqdW1sYWhLYWxpS3VhbnRpdGk6IGZ1bmN0aW9uKCl7CgkJCSQoIiN0ZW1wVm9sdW1lIikudmFsKCQoIiN0ZW1wSnVtbGFoQmFyYW5nIikudmFsKCkgKiAkKCIjdGVtcEt1YW50aXRhcyIpLnZhbCgpICk7Cgl9LAogIHNhdmVFZGl0QmFyYW5nOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB0aGlzLk9uRXJyb3JDbG9zZSA9IGZhbHNlOwogICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICJoaWRkZW4iOwogICAgdmFyIGNvdmVyID0gdGhpcy5wcmVmaXggKyAiX2Zvcm1zaW1wYW4iOwogICAgYWRkQ292ZXJQYWdlMihjb3ZlciwgOTk5OTk5LCB0cnVlLCBmYWxzZSk7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiK21lLnByZWZpeCArICJfZm9ybSIpLnNlcmlhbGl6ZSgpLAogICAgICB1cmw6IG1lLnVybCArICImdGlwZT1zYXZlRWRpdEJhcmFuZyIsCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgZGVsRWxlbShjb3Zlcik7CiAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICBhbGVydCgiRGF0YSB0ZXJzaW1wYW4iKTsKICAgICAgICAgIG1lLnJlZnJlc2hMaXN0KHRydWUpOwogICAgICAgICAgbWUuQ2xvc2UoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfQp9KTsK",
    "size": "15108"
}