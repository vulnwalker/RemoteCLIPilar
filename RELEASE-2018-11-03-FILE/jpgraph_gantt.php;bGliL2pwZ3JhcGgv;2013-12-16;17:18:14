{
    "namaFile": "lib\/jpgraph\/jpgraph_gantt.php",
    "lastUpdate": "2013-12-16+17:18:14.00",
    "contentFile": "\\/ICRodyA6ICRmdyA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcmVwZWF0IHRoaXMgY29kZSBibG9jayBoZXJlIGFzIHdlbGwuCiAgICAgICAgICAgIC8vIFRISVMgaVMgTk9UIEEgTUlTVEFLRSAhCiAgICAgICAgICAgIC8vIFdlIHJlYWxseSBuZWVkIGl0IHNpbmNlIHdlIG5lZWQgdG8gYWRqdXN0IGZvciBtaW51dGVzIGJvdGggaW4gdGhlIGNhc2UKICAgICAgICAgICAgLy8gd2hlcmUgaG91ciBzY2FsZSBpcyBzaG93biBhbmQgd2hlbiBpdCBpcyBub3Qgc2hvd24uCgogICAgICAgICAgICBpZiggJHRoaXMtPnNjYWxlLT5Jc0Rpc3BsYXlNaW51dGUoKSApIHsKICAgICAgICAgICAgICAgIC8vIERlcGVuZGluZyBvbiB3aGF0IGZvcm1hdCB0aGUgdXNlciBoYXMgY2hvb3NlIHdlIG5lZWQgZGlmZmVyZW50IGFtb3VudAogICAgICAgICAgICAgICAgLy8gb2Ygc3BhY2UuIFdlIHRoZXJlZm9yZSBjcmVhdGUgYSB0eXBpY2FsIHN0cmluZyBmb3IgdGhlIGNob29zZW4gZm9ybWF0CiAgICAgICAgICAgICAgICAvLyBhbmQgZGV0ZXJtaW5lIHRoZSBsZW5ndGggb2YgdGhhdCBzdHJpbmcuCiAgICAgICAgICAgICAgICBzd2l0Y2goICR0aGlzLT5zY2FsZS0+bWludXRlLT5pU3R5bGUgKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSBIT1VSU1RZTEVfQ1VTVE9NOgogICAgICAgICAgICAgICAgICAgICAgICAkdHh0ID0gZGF0ZSgkdGhpcy0+c2NhbGUtPm1pbnV0ZS0+aUxhYmVsRm9ybVN0cixzdHJ0b3RpbWUoJzIwMDUtMDUtMTUgMTg6NTUnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgTUlOVVRFU1RZTEVfTU06CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgJHR4dCA9ICcxNSc7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRtZncgPSAkdGhpcy0+c2NhbGUtPm1pbnV0ZS0+R2V0U3RyV2lkdGgoJHRoaXMtPmltZywkdHh0KSs2OwogICAgICAgICAgICAgICAgJG4gPSBjZWlsKDYwIC8gJHRoaXMtPnNjYWxlLT5UaW1lVG9NaW51dGVzKCR0aGlzLT5zY2FsZS0+bWludXRlLT5HZXRJbnRlcnZhbGwoKSkgKTsKICAgICAgICAgICAgICAgICRtdyA9ICRuICogJG1mdzsKICAgICAgICAgICAgICAgICRmdyA9ICRmdyA8ICRtdyA\/ICRtdyA6ICRmdyA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIElmIHdlIGRpc3BsYXkgd2VlayB3ZSBtdXN0IG1ha2Ugc3VyZSB0aGF0IDcqJGZ3IGlzIGVub3VnaAogICAgICAgICAgICAvLyB0byBmaXQgdXAgdG8gMTAgY2hhcmFjdGVycyBvZiB0aGUgd2VlayBmb250IChpZiB0aGUgd2VlayBpcyBlbmFibGVkKQogICAgICAgICAgICBpZiggJHRoaXMtPnNjYWxlLT5Jc0Rpc3BsYXlXZWVrKCkgKSB7CiAgICAgICAgICAgICAgICAvLyBEZXBlbmRpbmcgb24gd2hhdCBmb3JtYXQgdGhlIHVzZXIgaGFzIGNob29zZSB3ZSBuZWVkIGRpZmZlcmVudCBhbW91bnQKICAgICAgICAgICAgICAgIC8vIG9mIHNwYWNlCiAgICAgICAgICAgICAgICAkZnN3ID0gc3RybGVuKCR0aGlzLT5zY2FsZS0+d2Vlay0+aUxhYmVsRm9ybVN0cik7CiAgICAgICAgICAgICAgICBpZiggJHRoaXMtPnNjYWxlLT53ZWVrLT5pU3R5bGU9PVdFRUtTVFlMRV9GSVJTVERBWTJXTkJSICkgewogICAgICAgICAgICAgICAgICAgICRmc3cgKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2VpZiggJHRoaXMtPnNjYWxlLT53ZWVrLT5pU3R5bGU9PVdFRUtTVFlMRV9GSVJTVERBWVdOQlIgKSB7CiAgICAgICAgICAgICAgICAgICAgJGZzdyArPSA3OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJGZzdyArPSA0OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICR3dyA9ICRmc3cqJHRoaXMtPnNjYWxlLT53ZWVrLT5HZXRGb250V2lkdGgoJHRoaXMtPmltZyk7CiAgICAgICAgICAgICAgICBpZiggNyokZncgPCAkd3cgKSB7CiAgICAgICAgICAgICAgICAgICAgJGZ3ID0gY2VpbCgkd3cvNyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCAhJHRoaXMtPnNjYWxlLT5Jc0Rpc3BsYXlEYXkoKSAmJiAhJHRoaXMtPnNjYWxlLT5Jc0Rpc3BsYXlIb3VyKCkgJiYKICAgICAgICAgICAgCSEoICgkdGhpcy0+c2NhbGUtPndlZWstPmlTdHlsZT09V0VFS1NUWUxFX0ZJUlNUREFZV05CUiB8fAogICAgICAgICAgICAJCSR0aGlzLT5zY2FsZS0+d2Vlay0+aVN0eWxlPT1XRUVLU1RZTEVfRklSU1REQVkyV05CUikgJiYgJHRoaXMtPnNjYWxlLT5Jc0Rpc3BsYXlXZWVrKCkgKSApIHsKICAgICAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGRpc3BsYXkgdGhlIGluZGl2aWR1YWwgZGF5cyB3ZSBjYW4gc2hyaW5rIHRoZQogICAgICAgICAgICAgICAgLy8gc2NhbGUgYSBsaXR0bGUgYml0LiBUaGlzIGlzIGEgbGl0dGxlIGJpdCBwcmFnbWF0aWMgYXQgdGhlCiAgICAgICAgICAgICAgICAvLyBtb21lbnQgYW5kIHNob3VsZCBiZSByZS13cml0dGVuIHRvIHRha2UgaW50byBhY2NvdW50CiAgICAgICAgICAgICAgICAvLyBhKSBXaGF0IHNjYWxlcyBleGFjdGx5IGFyZSBzaG93biBhbmQKICAgICAgICAgICAgICAgIC8vIGIpIHdoYXQgZm9ybWF0IGRvIHRoZXkgdXNlIHNvIHdlIGtub3cgaG93IHdpZGUgd2UgbmVlZCB0bwogICAgICAgICAgICAgICAgLy8gbWFrZSBlYWNoIHNjYWxlIHRleHQgc3BhY2UgYXQgbWluaW11bS4KICAgICAgICAgICAgICAgICRmdyAvPSAyOwogICAgICAgICAgICAgICAgaWYoICEkdGhpcy0+c2NhbGUtPklzRGlzcGxheVdlZWsoKSApIHsKICAgICAgICAgICAgICAgICAgICAkZncgLz0gMS44OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkY3cgPSAkdGhpcy0+R2V0TWF4QWN0SW5mb0NvbFdpZHRoKCkgOwogICAgICAgICAgICAkdGhpcy0+c2NhbGUtPmFjdGluZm8tPlNldE1pbkNvbFdpZHRoKCRjdyk7CiAgICAgICAgICAgIGlmKCAkdGhpcy0+aW1nLT53aWR0aCA8PSAwICkgewogICAgICAgICAgICAgICAgLy8gTm93IGRldGVybWluZSB0aGUgd2lkdGggZm9yIHRoZSBhY3Rpdml0eSB0aXRsZXMgY29sdW1uCgogICAgICAgICAgICAgICAgLy8gRmlyZHN0IGZpbmQgb3V0IHRoZSBtYXhpbXVtIHdpZHRoIG9mIGVhY2ggb2JqZWN0IGNvbHVtbgogICAgICAgICAgICAgICAgJHRpdGxld2lkdGggPSBtYXgobWF4KCR0aGlzLT5HZXRNYXhMYWJlbFdpZHRoKCksCiAgICAgICAgICAgICAgICAkdGhpcy0+c2NhbGUtPnRhYmxlVGl0bGUtPkdldFdpZHRoKCR0aGlzLT5pbWcpKSwKICAgICAgICAgICAgICAgICR0aGlzLT5zY2FsZS0+YWN0aW5mby0+R2V0V2lkdGgoJHRoaXMtPmltZykpOwoKICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgd2lkdGggb2YgdGhlIHZlcnRpdmNhbCBkaXZpZGVyIGxpbmUKICAgICAgICAgICAgICAgICR0aXRsZXdpZHRoICs9ICR0aGlzLT5zY2FsZS0+ZGl2aWRlci0+aVdlaWdodCoyOwoKCQkJCS8vIEFkanVzdCB0aGUgd2lkdGggYnkgdGhlIHVzZXIgc3BlY2lmaWVkIHpvb20gZmFjdG9yCgkJCQkkZncgKj0gJHRoaXMtPmlab29tRmFjdG9yOwoKICAgICAgICAgICAgICAgIC8vIE5vdyBnZXQgdGhlIHRvdGFsIHdpZHRoIHRha2luZwogICAgICAgICAgICAgICAgLy8gdGl0bGV3aWR0aCwgbGVmdCBhbmQgcmlndCBtYXJnaW4sIGRheWZvbnQgc2l6ZQogICAgICAgICAgICAgICAgLy8gaW50byBhY2NvdW50CiAgICAgICAgICAgICAgICAkd2lkdGggPSAkdGl0bGV3aWR0aCArICRuZCokZncgKyAkbG0rJHJtOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJHdpZHRoID0gJHRoaXMtPmltZy0+d2lkdGg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICR3aWR0aCA9IHJvdW5kKCR3aWR0aCk7CiAgICAgICAgICAgICRoZWlnaHQgPSByb3VuZCgkaGVpZ2h0KTsKICAgICAgICAgICAgLy8gTWFrZSBhIHNhbml0eSBjaGVjayBvbiBpbWFnZSBzaXplCiAgICAgICAgICAgIGlmKCAkd2lkdGggPiBNQVhfR0FOVFRJTUdfU0laRV9XIHx8ICRoZWlnaHQgPiBNQVhfR0FOVFRJTUdfU0laRV9IICkgewogICAgICAgICAgICAgICAgSnBncmFwaEVycm9yOjpSYWlzZUwoNjAwNywkd2lkdGgsJGhlaWdodCk7CiAgICAgICAgICAgICAgICAvLygiU2FuaXR5IGNoZWNrIGZvciBhdXRvbWF0aWMgR2FudHQgY2hhcnQgc2l6ZSBmYWlsZWQuIEVpdGhlciB0aGUgd2lkdGggKD0kd2lkdGgpIG9yIGhlaWdodCAoPSRoZWlnaHQpIGlzIGxhcmdlciB0aGFuIE1BWF9HQU5UVElNR19TSVpFLiBUaGlzIGNvdWxkIHBvdGVudGlhbGx5IGJlIGNhdXNlZCBieSBhIHdyb25nIGRhdGUgaW4gb25lIG9mIHRoZSBhY3Rpdml0aWVzLiIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICR0aGlzLT5pbWctPkNyZWF0ZUltZ0NhbnZhcygkd2lkdGgsJGhlaWdodCk7CiAgICAgICAgICAgICR0aGlzLT5pbWctPlNldE1hcmdpbigkbG0sJHJtLCR0bSwkYm0pOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBSZXR1cm4gYW4gYXJyYXkgd2lkdGggdGhlIG1heGltdW0gd2lkdGggZm9yIGVhY2ggYWN0aXZpdHkKICAgIC8vIGNvbHVtbi4gVGhpcyBpcyB1c2VkIHdoZW4gd2UgYXV0b3NpemUgdGhlIGNvbHVtbnMgd2hlcmUgd2UgbmVlZAogICAgLy8gdG8gZmluZCBvdXQgdGhlIG1heGltdW0gd2lkdGggb2YgZWFjaCBjb2x1bW4uIEluIG9yZGVyIHRvIGRvIHRoYXQgd2UKICAgIC8vIG11c3Qgd2FsayB0aHJvdWdoIGFsbCB0aGUgb2JqZWN0cywgc2lnaC4uLgogICAgZnVuY3Rpb24gR2V0TWF4QWN0SW5mb0NvbFdpZHRoKCkgewogICAgICAgICRuID0gY291bnQoJHRoaXMtPmlPYmopOwogICAgICAgIGlmKCAkbiA9PSAwICkgcmV0dXJuOwogICAgICAgICR3ID0gYXJyYXkoKTsKICAgICAgICAkbSA9ICR0aGlzLT5zY2FsZS0+YWN0aW5mby0+aUxlZnRDb2xNYXJnaW4gKyAkdGhpcy0+c2NhbGUtPmFjdGluZm8tPmlSaWdodENvbE1hcmdpbjsKCiAgICAgICAgZm9yKCAkaT0wOyAkaSA8ICRuOyArKyRpICkgewogICAgICAgICAgICAkdG1wID0gJHRoaXMtPmlPYmpbJGldLT50aXRsZS0+R2V0Q29sV2lkdGgoJHRoaXMtPmltZywkbSk7CiAgICAgICAgICAgICRubiA9IGNvdW50KCR0bXApOwogICAgICAgICAgICBmb3IoICRqPTA7ICRqIDwgJG5uOyArKyRqICkgewogICAgICAgICAgICAgICAgaWYoIGVtcHR5KCR3WyRqXSkgKQogICAgICAgICAgICAgICAgJHdbJGpdID0gJHRtcFskal07CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAkd1skal0gPSBtYXgoJHdbJGpdLCR0bXBbJGpdKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gJHc7CiAgICB9CgogICAgLy8gU3Ryb2tlIHRoZSBnYW50dCBjaGFydAogICAgZnVuY3Rpb24gU3Ryb2tlKCRhU3Ryb2tlRmlsZU5hbWU9IiIpIHsKCiAgICAgICAgLy8gSWYgdGhlIGZpbGVuYW1lIGlzIHRoZSBwcmVkZWZpbmVkIHZhbHVlID0gJ19jc2ltX3NwZWNpYWxfJwogICAgICAgIC8vIHdlIGFzc3VtZSB0aGF0IHRoZSBjYWxsIHRvIHN0cm9rZSBvbmx5IG5lZWRzIHRvIGRvIGVub3VnaAogICAgICAgIC8vIHRvIGNvcnJlY3RseSBnZW5lcmF0ZSB0aGUgQ1NJTSBtYXBzLgogICAgICAgIC8vIFdlIHVzZSB0aGlzIHZhcmlhYmxlIHRvIHNraXAgdGhpbmdzIHdlIGRvbid0IHN0cmljdGx5IG5lZWQKICAgICAgICAvLyB0byBkbyB0byBnZW5lcmF0ZSB0aGUgaW1hZ2UgbWFwIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UKICAgICAgICAvLyBhIGJlc3Qgd2UgY2FuLiBUaGVyZWZvciB5b3Ugd2lsbCBzZWUgYSBsb3Qgb2YgdGVzdHMgISRfY3NpbSBpbiB0aGUKICAgICAgICAvLyBjb2RlIGJlbG93LgogICAgICAgICRfY3NpbSA9ICgkYVN0cm9rZUZpbGVOYW1lPT09X0NTSU1fU1BFQ0lBTEZJTEUpOwoKICAgICAgICAvLyBTaG91bGQgd2UgYXV0b3NjYWxlIGRhdGVzPwoKICAgICAgICBpZiggISR0aGlzLT5zY2FsZS0+SXNSYW5nZVNldCgpICkgewogICAgICAgICAgICBsaXN0KCRtaW4sJG1heCkgPSAkdGhpcy0+R2V0QmFyTWluTWF4KCk7CiAgICAgICAgICAgICR0aGlzLT5zY2FsZS0+U2V0UmFuZ2UoJG1pbiwkbWF4KTsKICAgICAgICB9CgogICAgICAgICR0aGlzLT5zY2FsZS0+QWRqdXN0U3RhcnRFbmREYXkoKTsKCiAgICAgICAgLy8gQ2hlY2sgaWYgd2Ugc2hvdWxkIGF1dG9zY2FsZSB0aGUgaW1hZ2UKICAgICAgICAkdGhpcy0+QXV0b1NpemUoKTsKCiAgICAgICAgLy8gU2hvdWxkIHdlIHN0YXJ0IGZyb20gdGhlIHRvcCBvciBqdXN0IHNwcmVhZCB0aGUgYmFycyBvdXQgZXZlbiBvdmVyIHRoZQogICAgICAgIC8vIGF2YWlsYWJsZSBoZWlnaHQKICAgICAgICAkdGhpcy0+c2NhbGUtPlNldFZlcnRMYXlvdXQoJHRoaXMtPmlMYXlvdXQpOwogICAgICAgIGlmKCAkdGhpcy0+aUxheW91dCA9PSBHQU5UVF9GUk9NVE9QICkgewogICAgICAgICAgICAkbWF4aGVpZ2h0PW1heCgkdGhpcy0+R2V0TWF4TGFiZWxIZWlnaHQoKSwkdGhpcy0+R2V0TWF4QmFyQWJzSGVpZ2h0KCkpOwogICAgICAgICAgICAkdGhpcy0+c2NhbGUtPlNldFZlcnRTcGFjaW5nKCRtYXhoZWlnaHQqKDErJHRoaXMtPmlMYWJlbFZNYXJnaW5GYWN0b3IpKTsKICAgICAgICB9CiAgICAgICAgLy8gSWYgaXQgaGFzbid0IGJlZW4gc2V0IGZpbmQgb3V0IHRoZSBtYXhpbXVtIGxpbmUgbnVtYmVyCiAgICAgICAgaWYoICR0aGlzLT5zY2FsZS0+aVZlcnRMaW5lcyA9PSAtMSApCiAgICAgICAgCSR0aGlzLT5zY2FsZS0+aVZlcnRMaW5lcyA9ICR0aGlzLT5HZXRCYXJNYXhMaW5lTnVtYmVyKCkrMTsKCiAgICAgICAgJG1heHdpZHRoPW1heCgkdGhpcy0+c2NhbGUtPmFjdGluZm8tPkdldFdpZHRoKCR0aGlzLT5pbWcpLAogICAgICAgIG1heCgkdGhpcy0+R2V0TWF4TGFiZWxXaWR0aCgpLAogICAgICAgICR0aGlzLT5zY2FsZS0+dGFibGVUaXRsZS0+R2V0V2lkdGgoJHRoaXMtPmltZykpKTsKCiAgICAgICAgJHRoaXMtPnNjYWxlLT5TZXRMYWJlbFdpZHRoKCRtYXh3aWR0aCskdGhpcy0+c2NhbGUtPmRpdmlkZXItPmlXZWlnaHQpOy8vKigxKyR0aGlzLT5pTGFiZWxITWFyZ2luRmFjdG9yKSk7CgogICAgICAgIGlmKCAhJF9jc2ltICkgewogICAgICAgICAgICAkdGhpcy0+U3Ryb2tlUGxvdEFyZWEoKTsKICAgICAgICAgICAgaWYoICR0aGlzLT5pSWNvbkRlcHRoID09IERFUFRIX0JBQ0sgKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+U3Ryb2tlSWNvbnMoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJHRoaXMtPnNjYWxlLT5TdHJva2UoKTsKCiAgICAgICAgaWYoICEkX2NzaW0gKSB7CiAgICAgICAgICAgIC8vIER1ZSB0byBhIG1pbm9yIG9mZiBieSAxIGJ1ZyB3ZSBuZWVkIHRvIHRlbXBvcmFyaWx5IGFkanVzdCB0aGUgbWFyZ2luCiAgICAgICAgICAgICR0aGlzLT5pbWctPnJpZ2h0X21hcmdpbi0tOwogICAgICAgICAgICAkdGhpcy0+U3Ryb2tlUGxvdEJveCgpOwogICAgICAgICAgICAkdGhpcy0+aW1nLT5yaWdodF9tYXJnaW4rKzsKICAgICAgICB9CgogICAgICAgIC8vIFN0cm9rZSBHcmlkIGxpbmUKICAgICAgICAkdGhpcy0+aGdyaWQtPlN0cm9rZSgkdGhpcy0+aW1nLCR0aGlzLT5zY2FsZSk7CgogICAgICAgICRuID0gY291bnQoJHRoaXMtPmlPYmopOwogICAgICAgIGZvcigkaT0wOyAkaSA8ICRuOyArKyRpKSB7CiAgICAgICAgICAgIC8vJHRoaXMtPmlPYmpbJGldLT5TZXRMYWJlbExlZnRNYXJnaW4ocm91bmQoJG1heHdpZHRoKiR0aGlzLT5pTGFiZWxITWFyZ2luRmFjdG9yLzIpKTsKICAgICAgICAgICAgJHRoaXMtPmlPYmpbJGldLT5TdHJva2UoJHRoaXMtPmltZywkdGhpcy0+c2NhbGUpOwogICAgICAgIH0KCiAgICAgICAgJHRoaXMtPlN0cm9rZVRpdGxlcygpOwoKICAgICAgICBpZiggISRfY3NpbSApIHsKICAgICAgICAgICAgJHRoaXMtPlN0cm9rZUNvbnN0cmFpbnMoKTsKICAgICAgICAgICAgJHRoaXMtPmZvb3Rlci0+U3Ryb2tlKCR0aGlzLT5pbWcpOwoKCiAgICAgICAgICAgIGlmKCAkdGhpcy0+aUljb25EZXB0aCA9PSBERVBUSF9GUk9OVCkgewogICAgICAgICAgICAgICAgJHRoaXMtPlN0cm9rZUljb25zKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFN0cm9rZSBhbGwgYWRkZWQgdXNlciB0ZXh0cwogICAgICAgICAgICAkdGhpcy0+U3Ryb2tlVGV4dHMoKTsKCiAgICAgICAgICAgIC8vIFNob3VsZCB3ZSBkbyBhbnkgZmluYWwgaW1hZ2UgdHJhbnNmb3JtYXRpb24KICAgICAgICAgICAgaWYoICR0aGlzLT5pSW1nVHJhbnMgKSB7CiAgICAgICAgICAgICAgICBpZiggIWNsYXNzX2V4aXN0cygnSW1nVHJhbnMnLGZhbHNlKSApIHsKICAgICAgICAgICAgICAgICAgICByZXF1aXJlX29uY2UoJ2pwZ3JhcGhfaW1ndHJhbnMucGhwJyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJHRmb3JtID0gbmV3IEltZ1RyYW5zKCR0aGlzLT5pbWctPmltZyk7CiAgICAgICAgICAgICAgICAkdGhpcy0+aW1nLT5pbWcgPSAkdGZvcm0tPlNrZXczRCgkdGhpcy0+aUltZ1RyYW5zSG9yaXpvbiwkdGhpcy0+aUltZ1RyYW5zU2tld0Rpc3QsCiAgICAgICAgICAgICAgICAkdGhpcy0+aUltZ1RyYW5zRGlyZWN0aW9uLCR0aGlzLT5pSW1nVHJhbnNIaWdoUSwKICAgICAgICAgICAgICAgICR0aGlzLT5pSW1nVHJhbnNNaW5TaXplLCR0aGlzLT5pSW1nVHJhbnNGaWxsQ29sb3IsCiAgICAgICAgICAgICAgICAkdGhpcy0+aUltZ1RyYW5zQm9yZGVyKTsKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgIC8vIElmIHRoZSBmaWxlbmFtZSBpcyBnaXZlbiBhcyB0aGUgc3BlY2lhbCAiX19oYW5kbGUiCiAgICAgICAgICAgIC8vIHRoZW4gdGhlIGltYWdlIGhhbmRsZXIgaXMgcmV0dXJuZWQgYW5kIHRoZSBpbWFnZSBpcyBOT1QKICAgICAgICAgICAgLy8gc3RyZWFtZWQgYmFjawogICAgICAgICAgICBpZiggJGFTdHJva2VGaWxlTmFtZSA9PSBfSU1HX0hBTkRMRVIgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPmltZy0+aW1nOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgLy8gRmluYWxseSBzdHJlYW0gdGhlIGdlbmVyYXRlZCBwaWN0dXJlCiAgICAgICAgICAgICAgICAkdGhpcy0+Y2FjaGUtPlB1dEFuZFN0cmVhbSgkdGhpcy0+aW1nLCR0aGlzLT5jYWNoZV9uYW1lLCR0aGlzLT5pbmxpbmUsCiAgICAgICAgICAgICAgICAkYVN0cm9rZUZpbGVOYW1lKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBTdHJva2VDb25zdHJhaW5zKCkgewogICAgICAgICRuID0gY291bnQoJHRoaXMtPmlPYmopOwoKICAgICAgICAvLyBTdHJva2UgYWxsIGNvbnN0cmFpbnMKICAgICAgICBmb3IoJGk9MDsgJGkgPCAkbjsgKyskaSkgewoKICAgICAgICAgICAgLy8gU29tZSBnYW50dCBvYmplY3RzIG1heSBub3QgaGF2ZSBjb25zdHJhaW50cyBhc3NvY2lhdGVkIHdpdGggdGhlbQogICAgICAgICAgICAvLyBmb3IgZXhhbXBsZSB3ZSBjYW4gYWRkIEljb25QbG90cyB3aGljaCBkb2Vzbid0IGhhdmUgdGhpcyBwcm9wZXJ0eS4KICAgICAgICAgICAgaWYoIGVtcHR5KCR0aGlzLT5pT2JqWyRpXS0+Y29uc3RyYWludHMpICkgY29udGludWU7CgogICAgICAgICAgICAkbnVtQ29uc3RyYWlucyA9IGNvdW50KCR0aGlzLT5pT2JqWyRpXS0+Y29uc3RyYWludHMpOwoKICAgICAgICAgICAgZm9yKCAkayA9IDA7ICRrIDwgJG51bUNvbnN0cmFpbnM7ICRrKysgKSB7CiAgICAgICAgICAgICAgICAkdnBvcyA9ICR0aGlzLT5pT2JqWyRpXS0+Y29uc3RyYWludHNbJGtdLT5pQ29uc3RyYWluUm93OwogICAgICAgICAgICAgICAgaWYoICR2cG9zID49IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgJGMxID0gJHRoaXMtPmlPYmpbJGldLT5pQ29uc3RyYWluUG9zOwoKICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIG91dCB3aGljaCBvYmplY3QgaXMgb24gdGhlIHRhcmdldCByb3cKICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0b2JqID0gLTE7CiAgICAgICAgICAgICAgICAgICAgZm9yKCAkaj0wOyAkaiA8ICRuICYmICR0YXJnZXRvYmogPT0gLTE7ICsrJGogKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkdGhpcy0+aU9ialskal0tPmlWUG9zID09ICR2cG9zICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldG9iaiA9ICRqOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKCAkdGFyZ2V0b2JqID09IC0xICkgewogICAgICAgICAgICAgICAgICAgICAgICBKcEdyYXBoRXJyb3I6OlJhaXNlTCg2MDA4LCR0aGlzLT5pT2JqWyRpXS0+aVZQb3MsJHZwb3MpOwogICAgICAgICAgICAgICAgICAgICAgICAvLygnWW91IGhhdmUgc3BlY2lmZWQgYSBjb25zdHJhaW4gZnJvbSByb3c9Jy4kdGhpcy0+aU9ialskaV0tPmlWUG9zLicgdG8gcm93PScuJHZwb3MuJyB3aGljaCBkb2VzIG5vdCBoYXZlIGFueSBhY3Rpdml0eS4nKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJGMyID0gJHRoaXMtPmlPYmpbJHRhcmdldG9ial0tPmlDb25zdHJhaW5Qb3M7CiAgICAgICAgICAgICAgICAgICAgaWYoIGNvdW50KCRjMSkgPT0gNCAmJiBjb3VudCgkYzIgKSA9PSA0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCggJHRoaXMtPmlPYmpbJGldLT5jb25zdHJhaW50c1ska10tPmlDb25zdHJhaW5UeXBlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDT05TVFJBSU5fRU5EU1RBUlQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICRjMVsxXSA8ICRjMlsxXSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpbmsgPSBuZXcgR2FudHRMaW5rKCRjMVsyXSwkYzFbM10sJGMyWzBdLCRjMlsxXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGluayA9IG5ldyBHYW50dExpbmsoJGMxWzJdLCRjMVsxXSwkYzJbMF0sJGMyWzNdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpbmstPlNldFBhdGgoMyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENPTlNUUkFJTl9TVEFSVEVORDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggJGMxWzFdIDwgJGMyWzFdICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGluayA9IG5ldyBHYW50dExpbmsoJGMxWzBdLCRjMVszXSwkYzJbMl0sJGMyWzFdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsaW5rID0gbmV3IEdhbnR0TGluaygkYzFbMF0sJGMxWzFdLCRjMlsyXSwkYzJbM10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGluay0+U2V0UGF0aCgwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ09OU1RSQUlOX0VOREVORDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggJGMxWzFdIDwgJGMyWzFdICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGluayA9IG5ldyBHYW50dExpbmsoJGMxWzJdLCRjMVszXSwkYzJbMl0sJGMyWzFdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsaW5rID0gbmV3IEdhbnR0TGluaygkYzFbMl0sJGMxWzFdLCRjMlsyXSwkYzJbM10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGluay0+U2V0UGF0aCgxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ09OU1RSQUlOX1NUQVJUU1RBUlQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICRjMVsxXSA8ICRjMlsxXSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpbmsgPSBuZXcgR2FudHRMaW5rKCRjMVswXSwkYzFbM10sJGMyWzBdLCRjMlsxXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGluayA9IG5ldyBHYW50dExpbmsoJGMxWzBdLCRjMVsxXSwkYzJbMF0sJGMyWzNdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpbmstPlNldFBhdGgoMyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpwR3JhcGhFcnJvcjo6UmFpc2VMKDYwMDksJHRoaXMtPmlPYmpbJGldLT5pVlBvcywkdnBvcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8oJ1Vua25vd24gY29uc3RyYWluIHR5cGUgc3BlY2lmaWVkIGZyb20gcm93PScuJHRoaXMtPmlPYmpbJGldLT5pVlBvcy4nIHRvIHJvdz0nLiR2cG9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgJGxpbmstPlNldENvbG9yKCR0aGlzLT5pT2JqWyRpXS0+Y29uc3RyYWludHNbJGtdLT5pQ29uc3RyYWluQ29sb3IpOwogICAgICAgICAgICAgICAgICAgICAgICAkbGluay0+U2V0QXJyb3coJHRoaXMtPmlPYmpbJGldLT5jb25zdHJhaW50c1ska10tPmlDb25zdHJhaW5BcnJvd1NpemUsCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5pT2JqWyRpXS0+Y29uc3RyYWludHNbJGtdLT5pQ29uc3RyYWluQXJyb3dUeXBlKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICRsaW5rLT5TdHJva2UoJHRoaXMtPmltZyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIEdldENTSU1BcmVhcygpIHsKICAgICAgICBpZiggISR0aGlzLT5pSGFzU3Ryb2tlZCApCiAgICAgICAgJHRoaXMtPlN0cm9rZShfQ1NJTV9TUEVDSUFMRklMRSk7CgogICAgICAgICRjc2ltID0gJHRoaXMtPnRpdGxlLT5HZXRDU0lNQXJlYXMoKTsKICAgICAgICAkY3NpbSAuPSAkdGhpcy0+c3VidGl0bGUtPkdldENTSU1BcmVhcygpOwogICAgICAgICRjc2ltIC49ICR0aGlzLT5zdWJzdWJ0aXRsZS0+R2V0Q1NJTUFyZWFzKCk7CgogICAgICAgICRuID0gY291bnQoJHRoaXMtPmlPYmopOwogICAgICAgIGZvciggJGk9JG4tMTsgJGkgPj0gMDsgLS0kaSApCiAgICAgICAgJGNzaW0gLj0gJHRoaXMtPmlPYmpbJGldLT5HZXRDU0lNQXJlYSgpOwogICAgICAgIHJldHVybiAkY3NpbTsKICAgIH0KfQoKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gQ0xBU1MgUHJlZGVmSWNvbnMKLy8gRGVzY3JpcHRpb246IFByZWRlZmluZWQgaWNvbnMgZm9yIHVzZSB3aXRoIEdhbnR0IGNoYXJ0cwovLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpkZWZpbmUoJ0dJQ09OX1dBUk5JTkdSRUQnLDApOwpkZWZpbmUoJ0dJQ09OX1RFWFQnLDEpOwpkZWZpbmUoJ0dJQ09OX0VORENPTlMnLDIpOwpkZWZpbmUoJ0dJQ09OX01BSUwnLDMpOwpkZWZpbmUoJ0dJQ09OX1NUQVJUQ09OUycsNCk7CmRlZmluZSgnR0lDT05fQ0FMQycsNSk7CmRlZmluZSgnR0lDT05fTUFHTklGSUVSJyw2KTsKZGVmaW5lKCdHSUNPTl9MT0NLJyw3KTsKZGVmaW5lKCdHSUNPTl9TVE9QJyw4KTsKZGVmaW5lKCdHSUNPTl9XQVJOSU5HWUVMTE9XJyw5KTsKZGVmaW5lKCdHSUNPTl9GT0xERVJPUEVOJywxMCk7CmRlZmluZSgnR0lDT05fRk9MREVSJywxMSk7CmRlZmluZSgnR0lDT05fVEVYVElNUE9SVEFOVCcsMTIpOwoKY2xhc3MgUHJlZGVmSWNvbnMgewogICAgcHJpdmF0ZSAkaUJ1aWx0aW5JY29uID0gbnVsbCwgJGlMZW4gPSAtMSA7CgogICAgZnVuY3Rpb24gR2V0TGVuKCkgewogICAgICAgIHJldHVybiAkdGhpcy0+aUxlbiA7CiAgICB9CgogICAgZnVuY3Rpb24gR2V0SW1nKCRhSWR4KSB7CiAgICAgICAgaWYoICRhSWR4IDwgMCB8fCAkYUlkeCA+PSAkdGhpcy0+aUxlbiApIHsKICAgICAgICAgICAgSnBHcmFwaEVycm9yOjpSYWlzZUwoNjAxMCwkYUlkeCk7CiAgICAgICAgICAgIC8vKCdJbGxlZ2FsIGljb24gaW5kZXggZm9yIEdhbnR0IGJ1aWx0aW4gaWNvbiBbJy4kYUlkeC4nXScpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gSW1hZ2U6OkNyZWF0ZUZyb21TdHJpbmcoYmFzZTY0X2RlY29kZSgkdGhpcy0+aUJ1aWx0aW5JY29uWyRhSWR4XVsxXSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkgewogICAgICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgIC8vIHdhcm5pbmcucG5nCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvblswXVswXT0gMTA0MyA7CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvblswXVsxXT0KICAgICAnaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUNBQUFBQWdDQVlBQUFCemVucjBBQUFBQm1KTFIwUUEvd0QvQVArZ3ZhZVRBQUFBQ1hCSVdYTUFBQXNTQUFBTEVnSFMzWDc4QUFBQScuCiAgICAgJ0IzUkpUVVVIMHdnS0ZTZ2lsV1BoVVFBQUE2QkpSRUZVZU5ydGw5MXJIRlVZaDUvM3pNeCtaNUpOVW9PYW1DWk5hcVRaNklXSWtxUmlRV21pMUlEZXRIZmVpQ2lsdGdYQlA4QUwnLgogICAgICcwU0lVeGYvQXZmUlNCUzlFS0lMRkZxeUlIOUNFbUZadFBxckJKTHM3YytiMVluZVQzV1RUYk5zVUZQTENjQWJtelB0NzNvOXp6Z3pzMlo3OTMyMzFVT2R2M3c5azlaMnV6T2RBJy4KICAgICAnNSsyKzc5eU5lTDdIbDdodzdvZWl4Uk1aNlBKTTI2VzE4RE5BbS9WaDdsUjhmcWg5N05tTUYxMWVzMWlGcE1BVHFkaXJ3TU5BL0o0RHBJemtyNVlzQUYxUE82Z0lNWUhSZFB3bCcuCiAgICAgJ29PMmVsbUIrcUgzc203WG96YmtnWXZ5OFN6WW5aUHRjYmx5TTZJKzV6M2pRKzB2SmZncEV1NTZCZkk5dlVrYnlpMkhaZDFRSm9lV1JpQWpCZDRTRENXOFNTQU95NndCSE16RjcnLgogICAgICdZZFYyQStST3V2UlBMZkhvaVNVMEVNWS9jREFJaHhKZUduZ0thTjFWZ0h5UEw3TkJ4STFLOVA0UXhCenczSzF6Si96a0c4Qjl1d2FRNy9ITnNSWnY5a29oQkdEMG83SnFNWVMvJy4KICAgICAnL3luUGlkUXcvTHJCaVBCY1MveUZDVDk1RHZCMkJXQXk0NTc1UGFRYlFLVyt0UGQzR0NJdHUyb2RLSSsrWXhpS3UwZDI2b1dtQUQ3cGFaVS9yTHozN1ZxSWlqRDJZYm56TkJCRScuCiAgICAgJ0lCSGY4Szhxakw3dlloQ0dFckVVOENUZzN4WEFlTXA5NkdySkVxa3lYa205Qmh1aTF4ZnN1bmpkR2hjWUxxK0l6anNHbUJ0NVlIL2NtSmtGcTZnSXFsb24zdTRMeGRLR3VDSW8nLgogICAgICdRdTQxZzBFNDFwbysyUjMzWHQ1dXo5a1JJQjJVVGxlN1BuZktyUk9QMUhENHNSalpscTBsemh3b1o2ckROZVRpM25FZzFzaS83RlQ3a1lRYlhTNkU1RTY1dEE1dVJGOXR1dHEwJy4KICAgICAnSy9Wd0FGKy9GYklZV3Q2K3RqUU0vQXFVbXM3QTRXeTZkN1lTZlNOeGdNbXppMHljV1d3b3JpbzRRSnZqNExwdUw1QnF1Z1RuWHp6cUpzSnd1cnJsTmhKWEZhYXZXNjdOUnczRicuCiAgICAgJ3ErYUpjQ1FWZTlmenZKR21BWTcvZFBIMGdpMGY2NE92ZUd4YSt1c0N1UU1lWjAra3Q4QlZyWCtxUE85Qnp4ME1ncUJ2cythMlBmRGRZSWYrV0FqWFUxdWI0dHFOYVBQelJzOEEnLgogICAgICdibHJsaStXVm43OWNYbjBjV0tsK3RHeDdITGM3cHUzQ1NtbmZpdEwrbDFVaWhBaHdqRmtQUWV2NEsvZlNBQmpCTThKQ2FGdXVySlUrcmdXNDFTcm9BOGFOTVZOQUZ0Z0hKQ3NuJy4KICAgICAnWEd5LzU4UVZ4QUM5TWNjSnRaNWtJek5sVzQ0MFdySjJlYTRZUEE5Y0Fvb0E3aTBBL2dTK2lxTG9PcEIxSE9lZ3FyWUIzVUJtSnJBdFFBSndwd1ByMVJ5OTJ3VmxnWnNpWWxXMScuCiAgICAgJ3VYMWdVMzZkeW1ncVl4SklKSk5KVDFXOVFxSGdOd0ZRQkdZcW85NE93SFpRVXVQRDdBQ2dsU3ZjKzVuNVQ5bS93ZkpKWDRVOXF6RUFBQUFBU1VWT1JLNUNZSUk9JyA7CgogICAgICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgIC8vIGVkaXQucG5nCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvblsxXVswXT0gOTU5IDsKICAgICAgICAkdGhpcy0+aUJ1aWx0aW5JY29uWzFdWzFdPQogICAgICdpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQllBQUFBV0NBWUFBQURFdEd3N0FBQUFCR2RCVFVFQUFMR1BDL3hoQlFBQUFBWmlTMGRFQUZnQVdBQlk5aitadXdBQUFBbHdTRmx6Jy4KICAgICAnQUFBTEVBQUFDeEFCclNPOWRRQUFBQWQwU1UxRkI5QUtEQXdiSUVYT0E2QUFBQU04U1VSQlZIaWNwZFJQYUJ4bEhNYng3Nlp2c21PVG1tMWRzRXFRU0lJc0VtR1ZCQVFqaXZFUScuCiAgICAgJ1BBVUpuZ3BXc0FXbEJ3OGVncFFlcEt3cGxONFVMRUc5Q2prRXlVRktsU0pyV1RHMElVNTFwQ3NkWVcybmNVUGpkdHA5WitmM3Z1Tmh1OG5LYm1oYWY1Y1plR2MrUE84emYxTGMnLgogICAgICdtMEtoa0FDSUNDS0NNZWFCamlMQzB0TFNuak52UG11T0hScEgwVFpUVTFNOHpCaTl3YWt6bjdPRlRzNXN3OFlZQUNZbUpycmU3SGtldVZ5dTY5cVBGNzdobFQxWG1aMGVRMDNPJy4KICAgICAnd09MSlR2aEJ4MXJMejE4Vm1KMGVZK2pWZDJGeERrS1hudllMSGdiOTdPZ0x6RTRPTjlIemMxQjFRYVF6c2VkNU8wTHRhM0VjODlPblI1aDVNY2ZRK013MnFnUVVuZkJPUGJaMycuCiAgICAgJ2JLM2wreE92TVQwKzNFUkxwNUZORjZVRWpjTDMyK0RkVm1HdDVXTGhEWVlQWnJiUnFyZUZ1bVh3cWwwUzN3OXRuRHZMV0Q1UFppZ1BwZE93dVlwU0NvM0M4d1UzVUh4UWRIYmYnLgogICAgICdjWklrTk02ZHhjbmxVTTRrMWVVRk1sVVBwVUFEYnBrdHRGYXJIZTZvWXFlT3I2eXQ0UnpNUUhZVWNVc1FWdEdpY0hEd0twclZpdUxEa2tPdFZuc0hDSFpWUlZ5L3pjajFpNUFmJy4KICAgICAnaDhBamRJdHMraFVjR2NZUEszaUJ0S00zZ0QvdUF6Zi9BZFkybW1tVmd5Nlg4WU5OS21HSXZ5bG9QY0I4U1VpbjA3UlE0RVpIRmRzZEcwd2tKRW5FYUhBSnh2S0VwU0xlYW9rVicuCiAgICAgJ3I0eldtaFVaWUxsWTRiMUQwM3k1ZUlFV0N0Uzd2c2NpQWdpSXhrUVJhYldPcmxRb3I2Nnk0cFVwaG9KYjFqaU80dU81bzBTM3E2UlNxVmJpT21DN1ZDRWdBaExTYURRNDhkSDcnLgogICAgICd2RDQ2UkVZMGl5c2VnU2pLUWNpUnQ5OWliN3FYd1gwTytwRzR0ZU02WUtITEI5Sk1xNG1UbUY5LytBS0E0d3ZMWkJ5SDdPZ1lMNytVWTJxdncvN0JmZzVrSGlYakpGeXYzQ0dPJy4KICAgICAnWTFyb2YrQlc0dC9YTGlQRzBEQ0dyNzlkNFh6UnhSbklNbjk4aHVYU1RZeUo2ZXQxVU5ZUWhSdmNpbnBKcTg2SDN3R1BQUE0waUJEZCtRZmZEMWc0ZVpqTHZ1RzdTMVdlZjI2RScuCiAgICAgJ0o3TDdlU3g3Z0FIVmc3VjNNU2JpNm0vcjkzYmFCZDZxUWplckFKZy85UWwvWHJ2RzBPTjErdnY3R0gzcVNmWTVmYWhVblNUcHdaZ0lFUWVzYVZYUlBiSFJHL3h5SlNBeE1ZbHAnLgogICAgICdFT203MUhVSU5pWTdtR2I5NWwvOGpaQ3lRbUpqTURHSmpVbXNkQ1JPdFowbi9QL1o4djRGczJNVFVVZjd2WW9BQUFBQVNVVk9SSzVDWUlJPScgOwoKICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAvLyBlbmRjb25zdHJhaW4ucG5nCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvblsyXVswXT0gNjY2IDsKICAgICAgICAkdGhpcy0+aUJ1aWx0aW5JY29uWzJdWzFdPQogICAgICdpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQllBQUFBV0NBWUFBQURFdEd3N0FBQUFCR2RCVFVFQUFMR1BDL3hoQlFBQUFBWmlTMGRFQVA4QS93RC9vTDJua3dBQUFBbHdTRmx6Jy4KICAgICAnQUFBTER3QUFDdzhCa3ZrRHBRQUFBQWQwU1UxRkI5QUxFUkVJTGtoMCtlUUFBQUlYU1VSQlZIaWN0WlU5YUZOUkZNZC9OODFIWDc3YXB0SlVXbXAxTEhScEljV2hnNXNJRGxVUScuCiAgICAgJ0xBWEI0dDdSUlVwd0VoeTdpUTQ2Q0NJb1NIY2wwQ0Zhb1ZBUlUyTUZNWWt0YWRMWEpOb2s3eDJIdENFeHZ1WUZtbk80dy8zZ3grR2MvejFIS1JUZE1FZFhxSGJCL3NnYy9zaWMnLgogICAgICduRG9ZQUk4WHdEYThvMVJNTFQrMmhBc2lndFR2YklHVnFoWDQ2c3pVaWZCR3N3VWVDUGdBR0I3UWVMazBYNE9yaytIT3hvMVZnU3FHQVNqTXFrbjhXNHI0dlZ0RWdJL1JSUUVMJy4KICAgICAndmFvR0Q4NWNsNVYzbnlTUi9TMW14V3hhYjdmMzVQbm50TnlNSmVScjlrQ01xaUhUeTA5RW9lVG9Md2dneDZ5bWlNT0QvVndjRDdPYS9NSGtjSWlReDAyNldHWXRvNVAvVStaWicuCiAgICAgJzdnRDBRd0R1VDV6OU4zTHJWUGkwWHM1NDNlUVBLa1J6YVM1NGV2aUpJcDR0TUZRRk1sbEFXTjJxY1JaSEJuaXhOTThOWUQxNjJ4cTh1N2VQU1ErR1gyUGp3eGMyZEIyY0x0QjgnLgogICAgICc3R2dhbUNiMGFuQllCZUNoTXRsODg1NUNhcmNseFUxZ3ZWaWlVSzR3Mk9Na05EbkdlSjhidDlmSDkweU9uT2tDd0xGVHdoenlraHZ0WXpPV29CQmJZLy9SM2RiYU5UWWhmMlJPJy4KICAgICAnUXBldVVNenYxODhNbHd1SHkwSDEzSG5FNDhVek1jTDBXQXRVSFg4T3haSG9HMVVSaUZ3N3JuTExDc3d1U1BEMXVsemUvaVdqVDJQU2YrZEJYUkZ0VlZHSXZ6cXBoMHBRTDdWRScuCiAgICAgJ2F2WFlhWFh4UHdzbnQwaW1kdHRDb2NNbVpCZEs3WVU5RDh3dU5PVzBuWGM2UVd6UHNTYTVuYVoxYmViOUJiR0I2ZHhHdE1uWEFBQUFBRWxGVGtTdVFtQ0MnIDsKCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgLy8gbWFpbC5wbmcKICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAkdGhpcy0+aUJ1aWx0aW5JY29uWzNdWzBdPSAxMTIyIDsKICAgICAgICAkdGhpcy0+aUJ1aWx0aW5JY29uWzNdWzFdPQogICAgICdpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQllBQUFBV0NBWUFBQURFdEd3N0FBQUFCR2RCVFVFQUFMR1BDL3hoQlFBQUFBWmlTMGRFQVA4QS93RC9vTDJua3dBQUFBbHdTRmx6Jy4KICAgICAnQUFBTEVBQUFDeEFCclNPOWRRQUFBQWQwU1UxRkI5QUpIQU1mRnZMOU9VOEFBQVBmU1VSQlZIaWN0WlJkYUJSWEZNZC85ODdIN3RiTng4YVl0R0NyRWV4RHNPQkRhS0hGeGlyYicuCiAgICAgJ2gwcWhzaVkweWtwcEtxMW9zSTk5QzRIMldTaUZGTUhXVWhYQnJqUmkwdUNtdFNFVUdnUDFRV3FoV2pHa29XN00xa1RYM1dSbjVwNCtUSkpOR29sUTZJWERuRHR6K04wei8zUFAnLgogICAgICdVV0JJcGRwWWEyM2I5ZzA5UFoya1VyT3J2bVV5R1ZLcDFBby9tVXlpNTZZblZnV2ZPL1AxQ2loQWQvZEpNcG1hTlJPSVJxOEJrTTFtMGJINlRhc0MzajZRWGdGZFhJK0RSNlBSJy4KICAgICAnSlgvUG5vOEIrS0xuTUtxbHBVVTh6OE1ZczJSQkVEeldmOUorMFJjUmJNZHhHQnNidy9mbUNYd1BNVUVZSUQ0aUFWcDh3SVJtRElITW80eUhTSUJTQVNLQytDV0UwQy9QRjlqVScuCiAgICAgJzNCNkNwKzRNMDdDNUZVdEtHTnZHd1FKY3RQZ0lzZ0Qyd1JoRUlxQU1HQitVUVlrSEpnWVlaRDdQMUh3VmxtV2hIY2ZoeWs4M0tlUkdVVzR0NkNnb0c1U05VUzRLQldnUURVb3YnLgogICAgICc3QUdsd1lBU0JWcUgwQms0OWRYcEN2aVZWM2R3L3RJMUJ2cjdrTUlJbGgwTllVcGpsRjBCQVl2Y3hTWG1FVkxLY2VIU0NKbStQbmJ1ZUJIYnRrTndUWFVOQnpvNmFHcHE0c1NaJy4KICAgICAnR3dUNUg3QnNGNldkZjFHV0hRQW9NMHVwZUk5UFQxeWlvUzdCN3RkYVNkU3V3N0tzVUdNQXk3SFlzbVV6dFRXMW5Nd00wdHhzc1gxcmxIampTNWp5L1VxMllrSy9lSnVMbDYveicuCiAgICAgJ3grMXhrc2xXNm1yaXhHSU9EeDhFRlNsRUJDMCt0bVhUME5oQTI3NjNpRVVqbkx2NEM4WHBVYlNiQUIxbUtrR0ozSjgzT2Q3N0hXNUVzenZaU3FLMmlsak1JZUphUkdOdUplUEYnLgogICAgICc2bXNwWTdCSjFEWHdRbkNkMmZ4R1JxNU9VQ3o4eHQ3MmR5aE1aY24rK0N1M3h1OVNLaGRwMmI0WkhXbkF0VFN4bUlXbGhjSWpsa3NSM2xOQll6bHhac2I3K2Y3bmUreHRTek9kJy4KICAgICAndTgzc3pIMU9uVGhPUHAvbithMGJlZVAxbDRtdnErUFUyUXlkKzVQWTFSdXdsQXFMWUZhQmZiVGJ5UFNkZmdhSDc3QS8vUUY0ZjFPL3ZwcjZSSnlxK0M1S2MvTThGYkZ4WEl0WScuCiAgICAgJ3hPSERydmZvL2Z4TERuYnNKQnA1Qm93QlJlVldZQXphYmVUaDVBQkR3N2NXb05OTDNZWVlOdFN2NTdsbm42WitReDAxVmV1SXVCYTJEVjFIRDNINjNCQVBadTR1MVdHcGVMSHEnLgogICAgICdSaDcrTmNqQTBPKzBwNCtDTndYaWd3bmJXbFFRZHB1RXBsaStuK1BJa2NPYy8vWUt1Y2tKSkZoMksyYW5yakZ3K1FadDZTNmtQSW1JRi9iK2NxQUpEMUxpaFdBeEM2MXR3QlRvJy4KICAgICAnZlBjUUYvb0dzVlc1b3ZIUWxhdnMyLzgrdVluUlZTT1VnSEFtbUFDbEJJT0J3S0MwZ1BqaElSZ0VJWDJ3ZzdObndwWlczZDNkNHZzK3Z1OFRCTUdLNTFydlBNOWI4aGR0ZVp4ZCcuCiAgICAgJ0xCYlZSOGZlSkRzMFJsdjZHRktlWEoyMXJOUlhFU3hNUFIrQ0JVbDBuTjdQanRPK2R5ZTdVcC84djFJODhiZi9peFQvQU8xL2hac3FXK0M2QUFBQUFFbEZUa1N1UW1DQycgOwoKICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAvLyBzdGFydGNvbnN0cmFpbi5wbmcKICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAkdGhpcy0+aUJ1aWx0aW5JY29uWzRdWzBdPSA3MjUgOwogICAgICAgICR0aGlzLT5pQnVpbHRpbkljb25bNF1bMV09CiAgICAgJ2lWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFCWUFBQUFXQ0FZQUFBREV0R3c3QUFBQUJHZEJUVUVBQUxHUEMveGhCUUFBQUFaaVMwZEVBUDhBL3dEL29MMm5rd0FBQUFsd1NGbHonLgogICAgICdBQUFMRGdBQUN3NEJRTDdoUVFBQUFBZDBTVTFGQjlBTEVSRUlDSnA1ZkJrQUFBSlNTVVJCVkhpYzNkUzlhMU5SR01meDc3a3h0Uyt4cVM5Rkc2cDFFUjNxVkpwQlFVVWMzQ1JVJy4KICAgICAnQndVUlZMQjFFQXVLSVAwVEhKUWlpTlJKQkszaUpsMThBeWVsdFJaYTBiYmFKTWJVTm1sTlNtNWU3czI1ajBOcXBTU215YWcvT01NOVBPZHpEdWZsd244ZGp6OGdDbFZSclZFVicuCiAgICAgJ3VyNEJsMUZUTlN6THJTUzZ2Ym1sMGpVVXdTWGo4UWZrM1BrTHRMVzJBZUJJeWJtcmd6MytnRnpwdWNqbEU0ZjRidHVGVHVXdUNGNVhEcjNhM1VQZjZjTThHUXZ4emJzUkFKZGgnLgogICAgICdTY2Z4U3l3bWw1ajdtVnlwTjBlR0VKMHRlYklyZSt6eEI2VHY3alBSZVMyaFJFcE92cG1VWFUrSDVlQzkxM0puTkNTUlZFNjBwVVZiV29aanByUjM5WXE3MGJkcWo0cFc3UEVIJy4KICAgICAnNUZwdkw5ZTc5ak9UVEhNN3NzREw2Q0paMDhMYnZBR25ycFpnMm1JMlovTWxaZk44SWt4dVN3dTRWOStXSXJqN3pGbE9IZlh6S3JMSWkyU0doNUVDS2puTlZOeGtRRWM1NXZPdycuCiAgICAgJ3JiNk84SkxGZEh5SitheUZFbFVlSHZqd2tmdGVML1Y3ZktUU2tGdklRRTREb0xJMk16L211VGtUQXBjQktJd2FOOHB3SVVyS3crYWpXd0RrbkFPMGQvcjR6RmFNdVJTNjNzV20nLgogICAgICdSb09kbSt2UklyaVVZaktleHJRVit0MW8wWUVWd2ZaU1ZKbUQvZElBQkp1TzBMRzNsUkZ4MEdPZmlBRUxFOU9nQ3JmVTBYbklwNUZ3R0xFeTVXRUFPeGxSNXVOK0FSaFA3R04zJy4KICAgICAnNXc3R3Y0YlFJMit4cHQ0amp2Mm5XQm1JbGNFeEUydkRBSFlpb3N6QlpYdzZDUEU0QURvV1ZIbWQvdHV3bFpSOWVYWXlvc3pCZnBpTlFxYUFPVTUrVFhSTitEZWVlbkFEUFQ5YicuCiAgICAgJ0VWZ0tWc3V0S1BsMFRHV0dod29mb3F1YW9LSzRhcHNxL3RIL2Uva0Z3Qk1YTGdBRUtLNEFBQUFBU1VWT1JLNUNZSUk9JyA7CgogICAgICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgIC8vIGNhbGMucG5nCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvbls1XVswXT0gNTg5IDsKICAgICAgICAkdGhpcy0+aUJ1aWx0aW5JY29uWzVdWzFdPQogICAgICdpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQllBQUFBV0NBWUFBQURFdEd3N0FBQUFCR2RCVFVFQUFMR1BDL3hoQlFBQUFBWmlTMGRFQUE0QUl3QmJnTUYxMndBQUFBbHdTRmx6Jy4KICAgICAnQUFBTEVRQUFDeEVCZjJSZmtRQUFBQWQwU1UxRkI5QUhCeFFlRnNxbjB3UUFBQUhLU1VSQlZIaWNuWldmZitSQUdJZWYzVS9nY09FZ1VBZ1VDZ2NMaFlYQ3dzSEJRZUdnVURncycuCiAgICAgJ0ZnTUhCNFZBLzRCZzRYQ2hXRmdJRklxQndrSmhzUkFZZU9HRitUUUhtV1NUVGJLZDlwVTM3L3g0NWp2ZlRESVRYRXluQWJkV0tWUUIwTmF6Y1ZtMGFsY0w0ckphUlZ6bSt3L2UnLgogICAgICczaXdBa3piWVJjbm5ZZ0kwNEdDdnN4eFNQYWJZYUVkdDJSYTZEMGF0Y3Z2dkRteXJNV0JYMXpQcTJpcmNQL1RrOThEaUp0alYvZmltNnppT0NMNmRESFpOaHhRM2FySU1zb3g0Jy4KICAgICAndmVqbGVMMkF5OStqYXc2QSs0T1NJQ0cyY2FjR0toc0d4ZytDeGVxQVFTMFk3QllKdm93cTdpR01PaFhIRWZ6cHZwUWtBOWJMS2dPZ1dLdCs0TG8xbU05aHM5bTE3UU5zSjcwUCcuCiAgICAgJ0ZqYy9PNTJqb29nb1g4TVpLaUJpQUZ4ZDlaMXZjajl3ZlNwVWxEUk5NY1lReHpGcG1uSjBGUEg4bkRlMU1RYVdTejl3b1FwV1NaS0VvakRrZWFXb0tBeXIxdGx1K3M0OHdmVngnLgogICAgICd1N241aTdqdGhtR0lpRUdjVCszNlBQK2dGZUpyeFdMaGIwVUEvbGI0Z2dHczFUMHJaczB6d00vWmpOZmlsY0lZNXR1dFB4Z09XM0Y2ZFVYNDY0THJLSUxMaXcrQTdXRXJybCsyJy4KICAgICAnckFCRzFFTC9CaWxaUDhEalUydVI0VSsyRTQ5UDFaOFFKbU5YVXpsMjRBOUdCVDBJcnVDZmk4NmQ5eCtEMTJSR3p0K3BOQUFBQUFCSlJVNUVya0pnZ2c9PScgOwoKICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAvLyBtYWcucG5nCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvbls2XVswXT0gMTQxNSA7CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvbls2XVsxXT0KICAgICAnaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJZQUFBQVdDQVlBQUFERXRHdzdBQUFBQkdkQlRVRUFBTEdQQy94aEJRQUFBQVppUzBkRUFQOEEvd0Qvb0wybmt3QUFBQWx3U0ZseicuCiAgICAgJ0FBQUxEQUFBQ3d3QlAwQWl5QUFBQUFkMFNVMUZCOUFMRHhFV0RZNlVsK1VBQUFVRVNVUkJWSGljZFpWcmJGUkZHSWFmc3l5RjBuYWxWMVI2V2lnZ2FBcHRsenNyMU9nRW9nbUMnLgogICAgICcwSWdvQkFzQmdrSXJCQVBFaEJqL0FQNnhSVENVRkV3Ukk0amNnc2l0WE1yRkNKcHRKV3ZCTnBYWWJiWHRidHR0dDZlN2U4NmVjL3l4YWRsQ2ZaUEpaREl6NzN6enpqZnZSMlZMJy4KICAgICAnRjdVK2hmMEhEMkpkdUl6VEZ5NlNsSlJrUHRrY0RnZENDRTY1T3hGQzhOUFY2d2doeU03T3B0YW5rSjJkemJTQzVRZ2hFRUlnQ1NIb2c5UHBOQUYyN2RsTjZtaVp1UGdFbEI0LycuCiAgICAgJ25tWTNPN1p0QnlBMU5WVUNrR1dad2VEMWVrbEpTY0VTVGJxeHVJanJkKy94NnVJbDVNMTloU3k3bmZHT2VVeGYrZzdWalUxc0tpN0M0L0dZc2l5ejd0QUpBRDQvY1JhQTF0WlcnLgogICAgICdBSElQbkVDVVZHRDErLzNVMTllYkc0dUxlSGYxYWthbWpzSXdvVm5WQ092UUVkTG9WSUxZWW1NbzNQSXhTQkpmbHBTYURYNUZBbWp1MVFBWXYvOGsvczgrd0xWeE9VMGpSMkxaJy4KICAgICAnOHNNRkFBcFdyQ0FwYlJSRHJSWmlyQllTTEJLYW9SUFF3M1NGZXJuZjJzYXY3VDBVYnQ0S3dMNEZNd0Y0VnU4Rm9IQkNLZ0N6RGh3SHdMSWhaN3k1YTg5dTRtMkpoQTB3VGREQycuCiAgICAgJ09ycGhFakpNTkVsQ0h4S0RFamFvYm12bGZvL0tyajI3Q1FRQ0pzQ0dKVzhDMEtYcUFNeE1pb3NRQThoWldjVEZ4OU9zYW5pREtoMXFtRzdWb0ZzTDB4MEswNmtiZUFNaFdwUmUnLgogICAgICcvS3BHK2d3SEFLVW56N0R6M0JVTXc2REsxOG51dzk5d3QwTmg2VmRISThSSmljbUVUUWdGZzdTRndqU3JHditvS3A2Z2hsZFY2ZFowdWdKQmxGNkZtQ0VTUTJ3MkFJcVhMc2FuJy4KICAgICAnQnJGWUxKVG5UQ0JyZEJxdmVlb3BXWmlQRmFCSFVlZ0poZWdNcUdneEVrSER3Qi9VYVE5cmRJVjA2djArVEQyRUVRalFGdEFZMGRzTmdOdnQ1c2lhbFFBSUlYaDd3UUt1VmY2SicuCiAgICAgJ2dUc1NjY1BEV2xRc3RDbEJHanI5ZUhwVld2VVFuY0V3ZFlFZWRGOG5vUTR2bVltcFpNVEgwblR2RG4yNXZMYnJObXU3YnZmbnNZRWJBTW5oY1BEZ3dRUHpVbzJMSnVzdy9taHAnLgogICAgICdRd2xITk8wS0JBbm9JZnh0cmNRTVQyRGUxTW04OTF3eVV6TmxVbEpTcEl5TURCb2JHemx6cjVyRk0vS29xNnZyUDhBU0d4c0x3UG1LY3ZJU2hqUEdaaVBPYWtFM1ZGQjhoSHdkJy4KICAgICAndkpBeGhyazVMN0x5K1JRdUgvc1dnUGRYcndGZy82SERGQlVzSWowOW5laGZiQVd3UFdPVDluNVJZaHFHd2FyTld4a1JNNVRSQ2ZGNFUxUFFzRERKRms5dVlod1h2enZLam0zYicuCiAgICAgJ0tTc3JvM0RKSW5OVzVSWHA3dTJiQUtTbHBlSDFlc25QejZlcXFncUxwbW1jcjNGaHQ5dWxmYVY3bVprMUJzK2xNNlQxZGpNOWZoZzVlZ0RQcFROTXk1VFpzVzA3a3lkUFlkV00nLgogICAgICdhWHg5Nml4T3A5TzhjZlVhODBzcm1EcGpPZ0F1bHl0aVFxWnBNbnZPYkxidC9KVHRIeFhqOS90UlZkVTBER09BdWZScGV2UERUZWFjMGhKeWMzTnhPT2F3ZnYxNjFsVldTNmVYJy4KICAgICAneis5L1VPQ3h1MVZXVnZhVFJHdjE2TkZmakIyYk5lQVFwOU5wVHBtU000RGNicmRMMFdzR0RLTFJSKzUydXdlMXlQOGpiMmxwWWZpa3lZOXQ4MG4wM1VDV1plYVhWancxZit6cycuCiAgICAgJ09lbisvZCtwcWFuaHpwMmZLU3NydytsMG1pNlhpeVBsNVpHSVRkTjhmQVZKd2pSTkpFbWkxcWZ3MWt3N3NpeVRuSnhNZTNzNzFkWFYzR3BvWk82NERHNDFOUEp5bHZ4VTVEL2UnLgogICAgICdxSktzZldRRDlJa2FaMlJtVXZyOWFWNGFHWWNRZ2pmTzNhV29ZQkY1ZVhtNGV3SXN1L0NiZFB6MWFXYjAvcDFiTm9PclF4bFVpdWlhRm8zYzNGeUVFT3g5K0M5Q0NENnBhYVRXJy4KICAgICAncC9UWHlZa1RKMFhlNTlqZjdRT3lBS0RXcC9RWHhjRlE2MVA0cFQzU2hCQmN2blVISVFUanhtWDE5LzhCQ2VWZysvR1Bwc2tBQUFBQVNVVk9SSzVDWUlJPScgOwoKICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAvLyBsb2NrLnBuZwogICAgICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgICR0aGlzLT5pQnVpbHRpbkljb25bN11bMF09IDk2MyA7CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvbls3XVsxXT0KICAgICAnaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJZQUFBQVdDQVlBQUFERXRHdzdBQUFBQkdkQlRVRUFBTEdQQy94aEJRQUFBQVppUzBkRUFBQUFBQUFBK1VPN2Z3QUFBQWx3U0ZseicuCiAgICAgJ0FBQUxDd0FBQ3dzQmJRU0V0d0FBQUFkMFNVMUZCOUFLQXcwWERtd01Pd0lBQUFOQVNVUkJWSGljN1pYZlMxdDNHTVkvMytQcHJJN2Fpc3ZvMllVNmg2QVRBOEpXNHJybHNGNFUnLgogICAgICdxaUFzRjltaGwwTjJjWVRSeTlHL3dwdEFZV1BEOWlKdFJ5NWFzRGU3Y1lGbXlqYVhPTGFNSW1Pcm1rUnJqTDl5VG1JUzMxMjBKeWJXUWdmYjNSNzR3dWM4THp3ODU4dkxPVXBFJy4KICAgICAnT0s2cHFTbTJ0cmJZMzkrbnU3dGJQSFljaDdtNU9jTGhNSUE2N2tXajBhTVFFV2s2dG0xN3JObTJMU0lpZTN0N2tzdmxKSjFPU3lxVmtsczNaOFN5TE1ubGNxVFRhVktwRkxkdScuCiAgICAgJ3ptQlpWajFIZVkyVlV0aTJUU1FTUVNtbDJiWmRpMFFpcksydE1UMDl6ZXJxS3Rsc2xxR2hJU1luSjRuSHYyTitmb0ZzTnF1T2U5Rm90TGx4T0J3bWs4bGdXUmJoY0ZneW1ZeFknLgogICAgICdsaVVpMG1xYUpvQXVJaTJtYWNyZE83ZkZzaXp4M3RvMFRlN2V1VjF2clh0WEVncUZtSm1aWVdWbGhYSzVMQjQvVTlrd0RMNzg0a1lWMEEzRFlIZDNtNHNYUnltWHl3S29SaThVJy4KICAgICAnQ2gwMURnUUNKQklKTE1zaUVBaElJcEh3MnVMeitlcXRZckVZSXFLWnBpbXhXRXlDd2FDTWpZMDF6WVBCSUpwWHFWUXFzYnk4VExWYWJXS0EvdjUrUmtaR01BeURycTR1bEZLSCcuCiAgICAgJ0hzZmpjV1puWituczdLVFJxd2NuazBtS3hTS0ZRcUdKbFZLdHJ1dVNUQ1lCNk8zdHJXOVVJL3Y5L2laUEIvajhzMkhPblgwRmdIZmVYcGVmZm56SytmV2YrZmlqdmhMczBQdEcnLgogICAgICdEL24xT0o5K01zcmxTd2IzNzMzRHdNQ0F0MUV5UGo2dUFDWW1KcDU2MTY4TlU2blVxRlNFOW5aZFBFNytXcUMvcjROS1RhZ2NDSlZxRGFVVUI1VkRBQTRQYTl4N3NNTGxTd2FuJy4KICAgICAnV2pSbXYxM0Q3L2VycGFXbG82MDRxT3A4OE9GN0xDNDhyUE5vc01xNVRoK0RneGQ0L1h5QTFyYnpBRGk3ajhqbmYyUCsrd2RjdlNyOE1KL2k4ZW9tQUtsVXFuNDFPc0RBUURlRCcuCiAgICAgJ2crK3l1UEN3em0vMnZVOCtuMmE3c01GZmo3OW1wN0JCdVZ6aW9GU2lYSEp4M1NLdVcyUnp5MFVwOWR4blFWdk9EQUxRZXJxTlJuNFpLZTBNdnRjNlRwenBtcWJ4YWxjWTlBdG8nLgogICAgICcydjA2dDUxNUM3M1lRZnRaQjlHTG5EcnQ0TG91anVQZ09BNFVpK0M2eU9wWEp3WnJKN3IvZ3Y0UC91K0Q5VzdmTHhUeisxU2NReHJaM2F0UkxhVnhkamJZMmQxODRSNi9zTEhlJy4KICAgICAnb3BIUDcvRG85MFVhK1dXVXllenpaSE9iUC83Y2ZYNTQvZG93RTFkNjZzOFRWM29FK01mbitML3piNFhtSFBqUkc5WWpBQUFBQUVsRlRrU3VRbUNDJyA7CgogICAgICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgIC8vIHN0b3AucG5nCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvbls4XVswXT0gODg5IDsKICAgICAgICAkdGhpcy0+aUJ1aWx0aW5JY29uWzhdWzFdPQogICAgICdpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQllBQUFBV0NBWUFBQURFdEd3N0FBQUFCR2RCVFVFQUFMR1BDL3hoQlFBQUFBWmlTMGRFQUFBQUFBQUErVU83ZndBQUFBbHdTRmx6Jy4KICAgICAnQUFBTER3QUFDdzhCa3ZrRHBRQUFBQWQwU1UxRkI5QUpEd0V2TnlENk0vMEFBQUwyU1VSQlZIaWMxWlRMYXhWbkdJZWZiMmJPNU9TY0hKTjRvV3JGTnFjVUpZb1VFZ1UzL1FmNicuCiAgICAgJ0Y3Z3dDa0lydmRCTFV0cXFpTGhTZzliZ0JkdUZTSFpkaUc1Y3RrSjN4UkRiVUZ3VW1naE56QkRhblBHTWt6T1g3OUxGSkdQTU9TZDIwNFUvK0JienZkLzc4RjRIL2llSmRvYWQnLgogICAgICdwWkt4UkZzekFJL0RjUDBIYXpYWTIyditIQjAxa2VlMVBBL3YzemZuang0eGdHbkhjTlplN092dU5qK2NPRUYxWkFUdjVuVUE0amhCU2dtQURDVldvOEdlMk9mOXdiMThQL0c3Jy4KICAgICAnb1VYbVlpMzB6cWxUVkVkR1dMaDFnMkQ2TVlsS2tYR0UwVmw4YWEyR0VCMTQ5KzR4WFN6eW9PSXcvbWltaVpWL0RQYjI1cEZPajEzQTlnT01FQ2hoVUVxaFZZcVdLVWs5UUFVcCcuCiAgICAgJ3NUL1A0czhQbUtsVW1OaFFhSUpia0RWcUJicHc2d1oyelVjNE5tK2VQa3U1cDRlT3JncHVlUU9GVW9WQ1Z4Y0Q0K04wN2RwRjkrNXRWSmVXR1BCamh2cjdXRjF6QzhBU2d0Y1AnLgogICAgICdIOGE3ZVoxb2RoNHNoNTBuendDdzlaTmgzTTRTdHV0aXUwWDJuQi9MeWpaNmxjSWJWVHBkUVUvaldWUHpMQURNOCtaR0JSZHRDN3dyRi9PN2JSOTlpdTI2Vkw4NmlVNFNBSDRiJy4KICAgICAnUG81ZDZBUWhzdE1Tdkd5STR3UzVGSkJLU1J3bnpGOGJ5eC91K1BqenpNRjFtZnJ5UTFLL2puQ2FocXAxeEVvcGpGTG9ORUZKU1JKSHpGNzk5Z1dIcWErL1FLY1NVWEJJNjA5ZicuCiAgICAgJ0FsNVc0dGVRU2lIRE9pcE5VS25NSTEzUnZuT1hBSUVLUWl4dkdXeWE5OFNDNTYwTUZ3UGlxRUc4NkpNOHE3OVEwNmx2aG5PbmR5NS9CNkdQQ1VPTVV1M0JRZ2c4ejBNM0dtQlonLgogICAgICdpR0puM3YyVm1zcW5mek54N0ZEdWVPRHVqOFJPQ0ZwanRHNVRDbU9ZdjMyYkowOW1zUDBJU3lkTWZuQVVnRjgvTzQ1UkFBNldUUGpsdlhjQitHbjdGdVJmL3pBbk5YNngzQVJlJy4KICAgICAnUFNkbXFMK1AvWUhrd01HRE9HV0RaVGxRY05CUmhQRUNvbWdCL1llSGZxMkluRjFrTGxYVU9rcE1iaW8xYmQ3YUFUUkQvWDBNMWxQZVNsTTJ2dDJYMVhCWmpabnBMRzJ0bVpPNicuCiAgICAgJ0xiUVZPSWNQK0hHMlVhdUgzeGd3QnFPejlDYzNsMXRDMjRGeitNdlVEcm9lR05iNWlmOUgvMWRNL3dMUENZTXc5ZnJ5S2dBQUFBQkpSVTVFcmtKZ2dnPT0nIDsKCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgLy8gZXJyb3IucG5nCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvbls5XVswXT0gNTQxIDsKICAgICAgICAkdGhpcy0+aUJ1aWx0aW5JY29uWzldWzFdPQogICAgICdpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQ2dBQUFBb0NBTUFBQUM3SUVoZkFBQUFhVkJNVkVYLy8vLy8vMlh5OG1MbDVWL1oyVnZNekZpL3YxV3lzbEtscFUrWm1VeU1qRWgvJy4KICAgICAnZjBWeWNrSmxaVDlZV0R4TVREakF3TUR5OHNMbDViblkySy9NektXL3Y1eXlzcEtscFlpWW1IK01qSFkvUHpWL2YyeHljbUpsWlZsWldVOU1URVhZMk1zL1B6d3lNakxGVGplYScuCiAgICAgJ0FBQUFBWFJTVGxNQVFPYllaZ0FBQUFGaVMwZEVBSWdGSFVnQUFBQUpjRWhaY3dBQUN4SUFBQXNTQWRMZGZ2d0FBQUFIZEVsTlJRZlRDQWtVTVNqOXdXU09BQUFCTFVsRVFWUjQnLgogICAgICcyczJVM1pLQ01BeEdqZnpKYW5GQVhGa1VsZS85SDlKVUtBMWdLVE43WXk2WU1qbCtrTlBLNXJsWlZTdXhmMVpSbmxaeEZZQW05M05uSUt2UitNRUhVZ3FCWHg5M3daR0lVclNlJy4KICAgICAnaCtjdEVnYnBpTW8zaVE0a2lvSENHeGlyL1pZVWJyN0FnUFhzOWJYMEJDWU04dk4vY1BlOG9RWXpvbTN0VnNTQk1WSEVvT0o1ZG01RjFSc0llOUN0cUdnUmFjQ0FrVXZSdGV2VCcuCiAgICAgJ2UycGQ2dk9XRitnQ3VjL2JyY3VoeUFSYWtCVTlGZ0s1YlVCV2RIRUg4dEhwRHNablJUWlFHemRMVnZRM0N6eVlaaVRBbVNJT0RFd3pGQ0FkSm9wdXZicGVaRGlzSjRwS0VjakQnLgogICAgICdpaldQSmhVMU1qQ285ZGtZZmlVVmpRTlRES1k2Q1ZiUjZBMG5pVVNaalJ3RmFuUjBsOWkvVHl2R25GZHF3U3RxNWF4TWZEYnlCa3NsZC9GVXVtdnhTL0JkOVZ5SnZRRFdpaU14Jy4KICAgICAnaU9zQ0hnQUFBQUJKUlU1RXJrSmdnZz09JyA7CgogICAgICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgICAgIC8vIG9wZW5mb2xkZXIucG5nCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvblsxMF1bMF09IDIwNDAgOwogICAgICAgICR0aGlzLT5pQnVpbHRpbkljb25bMTBdWzFdPQogICAgICdpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQ0FBQUFBZ0NBWUFBQUJ6ZW5yMEFBQUFCR2RCVFVFQUFMR1BDL3hoQlFBQUFBWmlTMGRFQU5BQXR3Q2xGaHQ3MUFBQUFBbHdTRmx6Jy4KICAgICAnQUFBTEVBQUFDeEFCclNPOWRRQUFBQWQwU1UxRkI5QUtEUTRSSVhNZWFMY0FBQWQxU1VSQlZIaWN4WmQ3akJYVkhjYy81OHpjdlROekg4dnVzcXc4RnNUc0tpQ1VVaDVXQlpYRycuCiAgICAgJ0drT3B0bXF3TldzV0xLWEZHbEVwelpJMEFXTktTeTBXaERTMjJnSkt0V2xUc1NScXpZSXVMR0IyV1Z2REl3UU1aUU1zeTJPRmZkemRlKy9PbkhQNng5MDd2SmFGcGpiOUpaTTUnLgogICAgICdjODVNZnAvZjkvczdKeG40UDRlNDFndFN5cDc4V0d2dGZkRUFjcURGWVVPSDlIUzBOaEdrOXRQYi9pbFN5cDc4OVVVQjJBTXVxaFF5M1V6bTdIR2tFNlczZFROWk1SSTNFY1dPJy4KICAgICAnamY5Q2xMbVdCVDNkelc4alVzZXZXSENHM1VwV2wrSWtIU3huYkRoL01jejEyTmV2QmN1V1hUbWY2VGpuWHZKODhnRG1WQjNwdzMrbnQzVXpIYTFOcU16QlMyenFQTEdGanRNTicuCiAgICAgJ1pOcjNYZFcrcXlxd1pjRms3NkhYL3RIV2Z1UXZ5TzRXN3FoYUh3TDhlZmtNUmxSVXBQdjdycUQwUnJKK0ZnQWpMeTFhMjBPSXhaSkVFdU5DUmZJQXBqK29tNGJHTTN1Mi9zWVUnLgogICAgICc5SjQxZDg5NzNmM0RoZzFwSVNUVjFkWFhCUk5KeFBHRkN6aG91K0RDUXJTY1pPa2t0TmFlRFpqYW1nZVo5TWdpWW1WRGNjdkhoakF6SncwTlRoOC9hbHlaTWFWSmljcDBpVEhqJy4KICAgICAnSnBnTnYzOHRqV1VoaEdST2RiVUw5VzUvTUg1WENramxjaWJpK0tJb3A1TFZITEtFdThBL2Y0cjI4NmRvYTlwR3JHd1lBQXNmcWJiSDNiOE1nTy9OcWd5Nld2ZGJiWEhNa0VGSicuCiAgICAgJzR4VU9NVkV2YVRadTNCZ212RjRZazRoejlyTy9VbHI1Y0U5b3dhZS9yY0d4b2hTT3VpV2tDMklqY0lxS3lQWm0rT21DSDdHaG9aRUYwNzdFRXpWVndlQWJKK3JpRWVPMEV5OHknLgogICAgICdVdWJxT0huMEFPZ013dmY1OXR4bkJyU3A5ZGd4S21mLytrSVAxTlk4U0ZrMGpoNWFqbU5IQVdnNWIyRTVFZXhvakdIamJpVlJNb1JNTnMwTEMrWXo0NnZUdUgzZW5ON0JJOGZyJy4KICAgICAncUZkbzBCb1ZaTkM5YVZTUTRmTmpCekVtUUppQVJ4YisvQXFZUE1BVkI1RnNQVTV2MzdnOU94Z0xoZTE0Wk01L2p1MDUyRTZNTlp2ZjVwbUhIdUxtbVdPa0V5c3hVdHBHQXRtZScuCiAgICAgJ2R0SFRmbEprZXpxUXRvM2pGUm5Mc3N5ZjFqeWR4aWlNN3pObnllL2MzWnNxTHUyQk41ZmNNZnpydi9oYnkxdFB6bVJVb2loY1RKODdDd1FJMnlMdERjSXFzSWpZVWY1MXFCbGYnLgogICAgICdPblNjT1NyZFFVT01VUmtpWHNMVXpKbnZiR2hvQkdESEg1Y0d5WkxoT3BZb05sNWhxWW5ZRVhPdTVmRGw5ZVlBSG50eDk4bjhoRkhaY1BIVXVUU3hTQVNBZUsvQ0dJT3hKSjBmJy4KICAgICAnYk9HTlBVMjgwZGdrcTZZMnl1OHZmakNJbHd3enIrL1pRL1BITzBnT0x1TzVxc2Z0RFEyTmJOKzRPQ2dxRzZXVHhXVmFxNnpwRitEaVNIV25pY2R5bHAzcjZhWlRXdGhJT3JOcCcuCiAgICAgJ2t0SGN2QnUwc0hYMVNtNm96QjNCNDJkOTB6WkE5YlFwN1B2Z1BTelhaZm5xWC9IUzRES0tLMit4NjlZL0hVUnMyNmlCQU41Y2NzZnc3Nzc0VWN1bUYzN0M2ZjA3S1N0Mk9IamknLgogICAgICdERVVKRDB0SVNqeVByclNQbEFLdk4wSlAvVTRPMU5manVoRzJydmtsTjFTT3BmWHdmdHBiVHFBeUtScmZmNWZiN3JzOVYxUjdtNHdsejJpaEEzSHBtWGZsVVd5T0gydW1wTGlZJy4KICAgICAndWkzdjhNKzZiV3pmc1JOYlNncWt4YUNraXkwc2ltTXVFV0VocGNSekloUVdPSUFoNnRpQXdTNG93SW5GaVRvdTVkT25NbmwyTlIrK3VqQndYRWM5dGVyRDZNNDNucmo2TGdBQicuCiAgICAgJ1FuRFBBOS9pcnRrUDhKUlM3SHIvM1Q2WWVrRFExcEVpRVhPd3BVVkp6Q1ZsWlpGUzRtWnRrcEVvOUNoQWtEcC9qdExNQkFDeTZTNFJpUWdoTHl2NWNnQlJQbktVT1g2c21VR0YnLgogICAgICdoU2lsME1ZdzlkNzdtUHkxZTVtbkZFM2JhdG0zY3p2YjZuWWdFSnp0U0ZHVTlMQ1JsTVJkVWpJSDArbG5FTUl3UE5YRDNOdW1vVkpuck1DSmFpY2lNVVpmdlFuejRRY0JTdlYxJy4KICAgICAndmpFNUdLMzU4dDB6bVhEbkRCNzlzYUxwbzIwYythU1JEK3QyNUpUcDdHWlF3c0VXRmlWeGw2aGxVZi9XTzl6MzJDeG1MMXJPZTZ1L0kyS3V3R2h6TFFDQjcvc1lZOUJhaDNlbCcuCiAgICAgJ0ZLYnZyclZtNHZTN0dILzduY3grY2hFSEd6N215Q2VOYlB0b08wSkkyanE3OFdJUkxHa3pzcXM3VjVTZkZWNUVvdlhBQ29pcXFzZk5wazJ2bzVWQ1d0WUZCZm9VMFZvVEJBRmEnLgogICAgICdhN1RSYUsycCtNb1VSaytjeE16cStSemJ2NDlERGJ1bzI3VVRXOWgwZGVkc3NQeHVLK2tJZk44WHhoZ0RZUFZYZjJGaDRYS3RGSWw0QWlrbEFsQktBWVJLS0szNndISXdlVEN0Jy4KICAgICAnTmZIaUVrYU9uOGowKzcvQm1ERmphVDMwR2JIeXdTeGN1WmtwRmZGZyttMWpqWi9ObW5Wdk5mUnZ3ZDY5ZThXQkEvdU5GQUloNEpWWFhtSHNtREhFNHZFUVFnalEybHhRSW05TicuCiAgICAgJ256MzVxM0JFT1pPSHphRzJ0aGFBNG1SVStMMjlJdCtJVjIxQ3BiUlFmZU1GQzM1Z1JCL00yclZydWJueVptTHhXSmhFQ0JFbXovZUh5by83bE1sSDNMRkZ1anN0aE5GQ0NHT3UnLgogICAgICcrV055ZVVncGpTVnpNS3RXcmFLeXNoTFBkY1BFZVlXQ0lFQmRwSXhTaXZyNmV0YTh2STdkNitjR25oZFYwNnBlMVFQK0YvUVhXbXVSTCtqWlo1OExsVm14WWdVVkZSVjRyaHR1Jy4KICAgICAnNFR6TXhYQUE2WFJhUkF0c1lVa3g4SS9KdFNKUU9sU3dwbVpwQ0xOOCtmUGNkTk5vSE1mQjkvMFFKZ1JvUDI5NVRsUjdVVnY4eHhaY0hNdVdJWjkvSG4zNXZHM0pFR1pwelZKRycuCiAgICAgJ2p4NU4xSWxpdEthaHNaRTFMNjlqNjlxSGd4K3VyRlgvbFFMOUpZZExsZm5aaWhVaHpPTEZpOE4zTWwxZHRoT3hWSC9mLzgvQ3RxU0oySmFKMkpaNTlKN1JQc0MvQVZpSnNRUy8nLgogICAgICdkQm50QUFBQUFFbEZUa1N1UW1DQycgOwoKICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAvLyBmb2xkZXIucG5nCiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvblsxMV1bMF09IDE4MjQgOwogICAgICAgICR0aGlzLT5pQnVpbHRpbkljb25bMTFdWzFdPQogICAgICdpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQ0lBQUFBaUNBWUFBQUE2Und2Q0FBQUFCR2RCVFVFQUFMR1BDL3hoQlFBQUFBWmlTMGRFQUFBQUFBQUErVU83ZndBQUFBbHdTRmx6Jy4KICAgICAnQUFBTEVBQUFDeEFCclNPOWRRQUFBQWQwU1UxRkI5RUNBUWdGRnlkOWNSVUFBQWFkU1VSQlZIaWN6ZGh2YkJQM0hjZng5LzJ4ZmVmRU9BNUpvQ05ObklUOEFkdFptWUJFVEpzSScuCiAgICAgJzYralFPbFFpaFQxQVlneXRxelpwRDFhdGZ5WXFsVDFoMGxScFQ3YVJKNE5RcFJ2WkdFTFZ1bzVVYTlqRUpESUVUUXNOUXlQQnNVSk1XR1Buai8vZStlNzJ3Tmc0eEVsTVI2ZWQnLgogICAgICdaTmxuMzkzM2RaL2Y5M2Y2eWZCL3NnbXJIZERWMVdYbFBnOE5EWlVEU2NEOExGRkZFWlpsV1laaFdNRmcwT3JxNnNxL2dESkFmRnkxaWlaeTlPanJWbmo0SnpRMXJNV3FmeG0vJy4KICAgICAnMzA5all5TnRiVzBrRWdudTNidkg0Y09IODhjL2pxU0tRbDQvWEdrZCtlVnRBTjQ2dXAxTEg5Mmt0cVlTKytaWDhQdjlORFEwc0duVEpsS3BGT0Z3bU83dTd2eTVJeU1qZVZSZCcuCiAgICAgJ1hWMStXRU9oMElyWTRwRG5xNndYWC9zVGlDSmFNa0ZaZFJOcXhlZm9lN1Z0Q1NxWFZEcWRabloybHRyYVdrelRwS3FxaWp0M0pwRmxHN2R2ajdOeloxZisrcUZReUEzRUNsSEwnLgogICAgICdRbDc0M25Ga2h4UER0SkFkNWVUYVlTVlVmWDA5bFpXVmxKV1ZJVW5TZzdzVlFNQkNVY3U0Y2VNR2UvYnNJUlFLMVFBek9jeXlrSU05UDBLeXVkQXlDV3lxRzhuaHdxYTRTa0x0Jy4KICAgICAnM3IwYlZWVnh1OTI0WEM0MFRVT1daVVF4ZTk3Q3dnSWRIUjJMTUhJeFNDYVZJblZ2RkVseEUwdk1ZMVBkMk5VS0pNV05UWEhsVWZGLy80dkVUSkNlbHdicEZtM01qUDJkdDM3eCcuCiAgICAgJ0FsTitQelUxTlZpV1JTd1c0KzdkdTNnOEhqd2VENHFpNUVGQUp6QUV4SXBDQU5ib294aHBsZkIwRkp2VGc2eFdJcXNWUlZGNk1vcGtVM0ZYUGNua0p4R1UwVkVBZEYybm9xS0MnLgogICAgICdXMy84RHBucUxqemVwMmx1YnNibGNqRThQRXhIUjhmYm9WRElEOXhZRnBMQkRwSkYwakRRSW5jUXBXbGttMzFGbEZMdHA5UGZ5dVcvdllRajFrUFN1UlcvMzgrbGoyN1MyUTd2Jy4KICAgICAnL2FXWFVCVlVmZlZOdG0zYmxpdlZDRXdzQzVFeWM1aWlBcEVwREVBWE1xUWRsZGhTaVdWUUhqSmFndWQrOEZ1ZXhjay96ditLODJkZm9TYlNDc0RlNzUva20rNEdWUGQ2K2w1dCcuCiAgICAgJzR6SkhjcVZVWU4yeUVFdFpRRENTSkN1ZVJBWXNQWTQ5SHNGSVpWRzZwMjVKVXVtRmFmVDRES0pONGFtdFQ3TnozOHNrNSs1QTcwSE10RVl5TWtGaVpoeHpqUS9wb1hyTFFyUlUnLgogICAgICdERkdFZUZwQWxrUWttNHBSaUNwSUtvZEt6azBULzJRTWgrcGlQanhLWlB3aVNrVXR1L2I5bU5uSkVXUzdFOG5oQW12cE02MG9KRGtYSnhxTm96eFJSVXhQSWVzaXNwQkJsc1hWJy4KICAgICAnVWFLRUZvOGd6b2FKaHo4czJsT21ycFVHK1dCaEo5LzYwZytaK2ZEWFRBWGZ4bGxSamwxVmtPME9GQVRzWWhZbGlpSzIxWktLaGhIbkZ2ZVVxU2RLZ3dBRU9wN0YydjUxdnZ3OCcuCiAgICAgJ1hINy9OMXdkL0JsVHdldVVWNjVCZHRnZm9MVFNraXBzZEQzdFJpMFZZcG9tbVV3R3d6RHdkVDVIWUVjM2dpQXdjdkgzakx6M0JsUEI2N2pXZVpCRUtZc1NCV3dwSFp0TktvNHEnLgogICAgICdhSFREc0plZWlHRVlXSmFGWlZtWXBvbW1hUmlHUWRQbnYwYmIxbThnU1JML3ZQSU9WOTc5YVI0bG1BSjJwNHFDZ0N4a3NOdUtKNlZOcHg0TlloZ0dwbWt1UWhtR1FUcWR4akFNJy4KICAgICAncXIyZDdIdHhFRUVRdUgxdGtLdnZ2a0Y0NHRxRG5ySWNLSktBUGYxZytMQVVFbHE4ZElpdTYwc0FwbW5tOTNQZnpjN09ZaGdHcmllK3dGZSsrenRjTGhjVDF3ZjU0UHpQQ1U5YycuCiAgICAgJ3c3WFdqV1MzSWRzZE9BVUJXWkF4clJKblRRNlNHNWJjZTJGQ3Bta3VnaG1HUVNxVlltNXVEdG5qNDRzSDM4VHRkaFA2K0R3Zi8vVjR0dEhYcmtHVVJaSmFpYzhSZ0hRNmpXbWEnLgogICAgICdTSktVTDVSTEtOZklPY3pES0YzWFNTYVRSQ0lSaExKV250cDNuR2ZXclNNeGM1T0xmM2lOUDQrNjhUOVViOW5GNzZsVHB4Z2ZIeWNhalpKS3BkQTBMWjlHYmpZVjdoY0RXWmFGJy4KICAgICAncG1uTXo4OFRpOFVZdW5TTG11MUhGaTJhVmt4a2FHaklOVFkydHREYjI0dlg2K1hRb1VOczNyeVo4dkp5SUR1MUJVRllra3hoZ3hlaVdscGFPSFBtREUxTlRkVFgxeGU5OGVXRycuCiAgICAgJ0puRi85ZFFaQ29YVVlEQTRBT0QxZWpsdzRBQ3RyYTJVbDVmbml3bUNrRWNVSmlVSUFvRkFnTDYrUG53K0gyMXRiZlQzOXo4U3hDUzdoSHNmV0g5LzhkTDRNS3FucDRlV2xoYWMnLgogICAgICdUbWNla0V2TU5FMmFtNXM1Y2VJRWdVQ0E5dloyVHA0OGljL25ZM2o0VXNtUUhDWU9qSkh0cGVCS3FMMTc5OUxjM0l6VDZVVFhkUm9iR3hrWUdLQzl2WjNXMXRaOEtvODZOSjhhJy4KICAgICAndFhIalJvNGRPOGJwMDZmWnNtVUxHelpzb0wrL24wQWdnTmZyNWV6WnMvOFZwR1RVNU9Ta2MvLysvYWNCZkQ0ZjFkWFY3TnExaTRhR0JzNmRPNGZQNStQcTFTdVBCYklpeWpUTicuCiAgICAgJ1JVblYxZFVOWExod0FhL1h5NDRkTzRqRllnQkVvOUZGRjFyMTM0QlB1WWxrMTZMckFZWHNBbG10cTZzYktEd29GQXA5bSt5a3VQNVpRVlpGM2Y4dENkd0NvdjhMeUhJb0FBTkknLgogICAgICdBWGYvQTFUSTBYQ0RoN09XQUFBQUFFbEZUa1N1UW1DQycgOwoKICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAvLyBmaWxlX2ltcG9ydGFudC5wbmcKICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgICAkdGhpcy0+aUJ1aWx0aW5JY29uWzEyXVswXT0gMTc4NSA7CiAgICAgICAgJHRoaXMtPmlCdWlsdGluSWNvblsxMl1bMV09CiAgICAgJ2lWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFDSUFBQUFpQ0FZQUFBQTZSd3ZDQUFBQUJHZEJUVUVBQUxHUEMveGhCUUFBQUFaaVMwZEVBQUFBQUFBQStVTzdmd0FBQUFsd1NGbHonLgogICAgICdBQUFMRHdBQUN3OEJrdmtEcFFBQUFBZDBTVTFGQjlFQ0RBY2pEZUQzbEtzQUFBWjJTVVJCVkhpY3JaaFBhRnpISGNjLzg5N3M3bHV0SkNzcjJWSHNPSFdNazBNUGJzQlVyY25GJy4KICAgICAnT0ZSZFNvNkZOaGRCNlNHSGxwRG1ZdEpDRHlveHlLZTZFQnhLUWt0N0tLTDBUNkFCbzBOYmNpcWlndEM2UGhXS0kyTkZxcXhkU2Q3VjIvZG1mdFBEdlBkMjEydDU1ZENCWWZiTicuCiAgICAgJ3pwdmZaNzd6Ky8xbWRoVWp5dFdyVjkzSGYvMjRlRDV6OWd3aU1sRGpPS2JiN2RMdGRoRVIydTAydTd1NzNMcDFDeEVaQnc0QWVad2ROUXFrTWQ5d2J6aUZHSU5KVXQ2clJiejUnLgogICAgICcxcHRVcTFYSzVUSkJFQUFVTUh0N2UrenU3Z0t3dkx6TXlzb0t3QW5nL3VOZzlDZ1FnRktsZ2cxRFVKNjdWcXR4NnRRcFptZG5pYUlJcFJUT09aUlNkRG9kZG5aMmFMZmJMQzh2Jy4KICAgICAnczdTMHhKVXJWN1pHd1FTajFQaGhmUm9kVmREbE1ycGM1dnVwNVoyZnZNUGR1M2ZaMjl2RFdqdnd6dGpZR1BWNm5WcXRScVZTNGRLbFN5d3RMUUZzQWRPSDJYd3NDRUFwZzNqbCcuCiAgICAgJ3c5OFJhazJndllqTlpwTm1zMG1TSkRqbkhna0RNRGMzZHlTWVEwRWE4dzEzOVlVWDBPVUt1bHp5ZzdVbUNFTytsMWh1dkh1RHJhMHQ5dmYzaDFUSllTcVZ5cEZoSHF1SXJsUUknLgogICAgICdTNXF2L3VJREFDNy80YmNFUVlBS3ZLKzBXcTFEVlFHSW9vZzdkKzRjQ2VhUklJMzVocnQrOFNzRU9rUmxVYUV5UjBVcEZJclhIeHlNVktWVUtuSHYzcjBqd1J3YU5lbEJqQmpMJy4KICAgICAnU3ovN0tZdUxpd0FzTGk3eTR6LzlrWTllK1Rwa0N1U3FqSStQbzdYdUFXZUtYTHQyRFdOTVVaTWt3UmpEaFFzWFdGdGJLNkpwQ0NUM2pmUWd4b21QdFBYMTlZSFdpY001eDNjMicuCiAgICAgJzczUGozUnU4L2FPM21acWFvbEtwb0hWdnl1dlhyL1BwbmYvUTd1enozODBOUHR1NHkvcW5HK3p0ZDFoZlgyZHRiUTNnSXZEblJ5cVN4bDFVb1BqeXo5OEQ0UFRwMHdQdHEzOVonLgogICAgICc0ZmR6THhlZ3JWYUxWcXZGNU9Ra1lSZ1dxcFJLSlo3N3d2TnNiVzFSRzV0Z2ZLTE9USDJHN1oxdHdxQlFyZ3JNRHZoSW5qZlNPQ1k1aUl2K2hZV0ZnUlpBckVXc1pXRjk0MUJmJy4KICAgICAnU2RNVWdNbkpDV3BqVlU0Y24rSFV5ZVBNMUdjNCtmUlVQa3pCSTV3MWpidWtjY3pMdi81bDBYZm16Sm1CRnVDYmEzOHIvQ1JYcFQrQ3JEVW9aMGpqQjRSWW9uSkFPWVJvYkpLVCcuCiAgICAgJ3o1emdxZnF4QWJzRlNINm1wSEZNMnFkR1hoNFZub1ZpRDZtU0pGMmNUUWVxRHFCYUtWSFdtb25KQ1dwWmpoa0M2YW5SNVdzZmZUZ3dhSFYxRmFVVXE2dXJBLzJ2M2Y1azRMblYnLgogICAgICdhckc5dFVuM29JMllCQ2NXSFlBeE1WWXMxcVpFWlkyU0ZCMmFZWkRHZk1OOWQ3dUppV1BTZUZpTm81UmNsYzNOVFhaYk82UnBGN0VKVml4WUE5YWd3d0RuVWlxbEVQZFEzaW1pJy4KICAgICAnSm8yN0JHSEl0Lzd4OXlFamMzTnpoMjdOYTdjLzRUZGZmS2w0YmphM2FlNU1VSXUwVC9IT0VJYU9wSnQ0Z3dvU3NWVEs0U0JJWTc3aEZ0WTNBQkJqQmlaOTByS3d2c0g3Ny8rSycuCiAgICAgJ3QzN3dPaE8xaVBwVGs0U0J3MW1Mc3o2Q25LUTRsM3FWK2tFK3Q5WEhsTlpPaytiVUpMVklFMVZDY0lKV1FtSjZxamozME5iY1hMa1pNdDhZUGlnK1ozbjFHNWZaMzkvai92WTInLgogICAgICc5Y2txWlQyT2NoYm4wcDRxTmtVL2REZlVBRGRYYmg0SFhnUk80ek5kRVUwWEwxNzg0UExseTV3OWU3WjRTYXpGT2ZHckVvdERjT0tyY29KUG1yWUlYZi9ab3AzUU5kMXNrdUd0Jy4KICAgICAnY1VBYjJNZ0F4dkhaVGdGVXExV21wNmVablowRjhKbFRqRGR1RFRoQm5EZUVDRW9KdGJHSXA2ZW5xRWJsekNjRVoxUEVDVTR5VlJpT0dnZDBnYytBQjBDWnZrdjFzV1BIT0hmdScuCiAgICAgJ0hPZlBuOGRhNDFjcGtrbHRFQkVQSmhZbkJrVFFKY2RZVktHa2dSeENmQnNxNXhYTmdBYTJCbitoalRPZ0hFS0JQOHB6UlV4eWtJSDRpZkxKUlRKQWwrVU1CSnpQSFE2YmZlL2YnLgogICAgICdjV0l6UHhsVXBEK3p1Z3pJWnRWazFkOHpuQkFxUnhnb1F1VlFnU0pRM2g5QzVRaERSWWdqVUlMQ0F6bG5FZHNIWVRLZk1URUJjUDdGNTRZVUdWbWMyR0xsSW42dmU2djBhaFN0Jy4KICAgICAnOFgyNVR6akorckl4MWdyS3BRUFdSNExrR1ZWc01nZ2h2UzBxalBkdm01T2VjZU9UV0E1RXZvMm1GemtqUWZMN2haUFV5NXl2dkYvdVBGUUwzK25iRG1zTENFbVQzc1RtQ1ROcicuCiAgICAgJ3JvZ1Q2eUZzT2l4M2Z0dzdPd1Foa3ZTVTZDdWluaENrMCtrQWtGb0JhekVFSUNIYUhIaVBWbVUwZ25VcDRFQWMxbVlyRjBFQlZwd1BpMzRWckJrd1B4S2szVzVqdS9lNS9jK2QnLgogICAgICdiR1VISUFJdXlkVElFNXpmYzVXcjRsSmNhaEhuSFRQM0NWR203OERyZ1kzOE4rREVpYnA3ZG1ZS2RBUW1CaDFoakVGamlzKzlDVFdZR0syMUg2UHhQeU9JMERvYll3elpGL3o3Jy4KICAgICAnN2phZFR2SnRZRzBrQ0Q3bGZ3bDQ5aWpnVDFnYzBBSCtkWlNKQS94QitNei9HU0l2Rm9qL0I3SDFtQWQ4Q08vekFBQUFBRWxGVGtTdVFtQ0MnIDsKCiAgICAgICAgJHRoaXMtPmlMZW4gPSBjb3VudCgkdGhpcy0+aUJ1aWx0aW5JY29uKTsKICAgIH0KfQoKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gR2xvYmFsIGNhY2hlIGZvciBidWlsdGluIGltYWdlcwovLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQokX2dQcmVkZWZJY29ucyA9IG5ldyBQcmVkZWZJY29ucygpOwoKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gQ0xBU1MgSWNvbkltYWdlCi8vIERlc2NyaXB0aW9uOiBIb2xkcyBwcm9wZXJ0aWVzIGZvciBhbiBpY29uIGltYWdlCi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CmNsYXNzIEljb25JbWFnZSB7CiAgICBwcml2YXRlICRpR0RJbWFnZT1udWxsOwogICAgcHJpdmF0ZSAkaVdpZHRoLCRpSGVpZ2h0OwogICAgcHJpdmF0ZSAkaXhhbGlnbj0nbGVmdCcsJGl5YWxpZ249J2NlbnRlcic7CiAgICBwcml2YXRlICRpU2NhbGU9MS4wOwoKICAgIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRhSWNvbiwkYVNjYWxlPTEpIHsKICAgICAgICBHTE9CQUwgJF9nUHJlZGVmSWNvbnMgOwogICAgICAgIGlmKCBpc19zdHJpbmcoJGFJY29uKSApIHsKICAgICAgICAgICAgJHRoaXMtPmlHREltYWdlID0gR3JhcGg6OkxvYWRCa2dJbWFnZSgnJywkYUljb24pOwogICAgICAgIH0KICAgICAgICBlbHNlaWYoIGlzX2ludGVnZXIoJGFJY29uKSApIHsKICAgICAgICAgICAgLy8gQnVpbHRpbiBpbWFnZQogICAgICAgICAgICAkdGhpcy0+aUdESW1hZ2UgPSAkX2dQcmVkZWZJY29ucy0+R2V0SW1nKCRhSWNvbik7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBKcEdyYXBoRXJyb3I6OlJhaXNlTCg2MDExKTsKICAgICAgICAgICAgLy8oJ0FyZ3VtZW50IHRvIEljb25JbWFnZSBtdXN0IGJlIHN0cmluZyBvciBpbnRlZ2VyJyk7CiAgICAgICAgfQogICAgICAgICR0aGlzLT5pU2NhbGUgPSAkYVNjYWxlOwogICAgICAgICR0aGlzLT5pV2lkdGggPSBJbWFnZTo6R2V0V2lkdGgoJHRoaXMtPmlHREltYWdlKTsKICAgICAgICAkdGhpcy0+aUhlaWdodCA9IEltYWdlOjpHZXRIZWlnaHQoJHRoaXMtPmlHREltYWdlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBHZXRXaWR0aCgpIHsKICAgICAgICByZXR1cm4gcm91bmQoJHRoaXMtPmlTY2FsZSokdGhpcy0+aVdpZHRoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBHZXRIZWlnaHQoKSB7CiAgICAgICAgcmV0dXJuIHJvdW5kKCR0aGlzLT5pU2NhbGUqJHRoaXMtPmlIZWlnaHQpOwogICAgfQoKICAgIGZ1bmN0aW9uIFNldEFsaWduKCRhWD0nbGVmdCcsJGFZPSdjZW50ZXInKSB7CiAgICAgICAgJHRoaXMtPml4YWxpZ24gPSAkYVg7CiAgICAgICAgJHRoaXMtPml5YWxpZ24gPSAkYVk7CiAgICB9CgogICAgZnVuY3Rpb24gU3Ryb2tlKCRhSW1nLCR4LCR5KSB7CgogICAgICAgIGlmKCAkdGhpcy0+aXhhbGlnbiA9PSAncmlnaHQnICkgewogICAgICAgICAgICAkeCAtPSAkdGhpcy0+aVdpZHRoOwogICAgICAgIH0KICAgICAgICBlbHNlaWYoICR0aGlzLT5peGFsaWduID09ICdjZW50ZXInICkgewogICAgICAgICAgICAkeCAtPSByb3VuZCgkdGhpcy0+aVdpZHRoLzIqJHRoaXMtPmlTY2FsZSk7CiAgICAgICAgfQoKICAgICAgICBpZiggJHRoaXMtPml5YWxpZ24gPT0gJ2JvdHRvbScgKSB7CiAgICAgICAgICAgICR5IC09ICR0aGlzLT5pSGVpZ2h0OwogICAgICAgIH0KICAgICAgICBlbHNlaWYoICR0aGlzLT5peWFsaWduID09ICdjZW50ZXInICkgewogICAgICAgICAgICAkeSAtPSByb3VuZCgkdGhpcy0+aUhlaWdodC8yKiR0aGlzLT5pU2NhbGUpOwogICAgICAgIH0KCiAgICAgICAgJGFJbWctPkNvcHkoJHRoaXMtPmlHREltYWdlLAogICAgICAgIAkJCSR4LCR5LDAsMCwKICAgICAgICAJCQlyb3VuZCgkdGhpcy0+aVdpZHRoKiR0aGlzLT5pU2NhbGUpLHJvdW5kKCR0aGlzLT5pSGVpZ2h0KiR0aGlzLT5pU2NhbGUpLAogICAgICAgIAkJCSR0aGlzLT5pV2lkdGgsJHRoaXMtPmlIZWlnaHQpOwogICAgfQp9CgoKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gQ0xBU1MgVGV4dFByb3BlcnR5Ci8vIERlc2NyaXB0aW9uOiBIb2xkcyBwcm9wZXJ0aWVzIGZvciBhIHRleHQKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KY2xhc3MgVGV4dFByb3BlcnR5IHsKICAgIHB1YmxpYyAkaVNob3c9dHJ1ZTsKICAgIHB1YmxpYyAkY3NpbXRhcmdldD0nJywkY3NpbXdpbnRhcmdldD0nJywkY3NpbWFsdD0nJzsKICAgIHByaXZhdGUgJGlGRmFtaWx5PUZGX0ZPTlQxLCRpRlN0eWxlPUZTX05PUk1BTCwkaUZTaXplPTEwOwogICAgcHJpdmF0ZSAkaUZvbnRBcnJheT1hcnJheSgpOwogICAgcHJpdmF0ZSAkaUNvbG9yPSJibGFjayI7CiAgICBwcml2YXRlICRpVGV4dD0iIjsKICAgIHByaXZhdGUgJGlIQWxpZ249ImxlZnQiLCRpVkFsaWduPSJib3R0b20iOwoKICAgIC8vLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBDT05TVFJVQ1RPUgogICAgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGFUeHQ9JycpIHsKICAgICAgICAkdGhpcy0+aVRleHQgPSAkYVR4dDsKICAgIH0KCiAgICAvLy0tLS0tLS0tLS0tLS0tLQogICAgLy8gUFVCTElDIE1FVEhPRFMKICAgIGZ1bmN0aW9uIFNldCgkYVR4dCkgewogICAgICAgICR0aGlzLT5pVGV4dCA9ICRhVHh0OwogICAgfQoKICAgIGZ1bmN0aW9uIFNldENTSU1UYXJnZXQoJGFUYXJnZXQsJGFBbHRUZXh0PScnLCRhV2luVGFyZ2V0PScnKSB7CiAgICAgICAgaWYoIGlzX3N0cmluZygkYVRhcmdldCkgKQogICAgICAgICRhVGFyZ2V0ID0gYXJyYXkoJGFUYXJnZXQpOwogICAgICAgICR0aGlzLT5jc2ltdGFyZ2V0PSRhVGFyZ2V0OwoKICAgICAgICBpZiggaXNfc3RyaW5nKCRhV2luVGFyZ2V0KSApCiAgICAgICAgJGFXaW5UYXJnZXQgPSBhcnJheSgkYVdpblRhcmdldCk7CiAgICAgICAgJHRoaXMtPmNzaW13aW50YXJnZXQ9JGFXaW5UYXJnZXQ7CgogICAgICAgIGlmKCBpc19zdHJpbmcoJGFBbHRUZXh0KSApCiAgICAgICAgJGFBbHRUZXh0ID0gYXJyYXkoJGFBbHRUZXh0KTsKICAgICAgICAkdGhpcy0+Y3NpbWFsdD0kYUFsdFRleHQ7CgogICAgfQoKICAgIGZ1bmN0aW9uIFNldENTSU1BbHQoJGFBbHRUZXh0KSB7CiAgICAgICAgaWYoIGlzX3N0cmluZygkYUFsdFRleHQpICkKICAgICAgICAkYUFsdFRleHQgPSBhcnJheSgkYUFsdFRleHQpOwogICAgICAgICR0aGlzLT5jc2ltYWx0PSRhQWx0VGV4dDsKICAgIH0KCiAgICAvLyBTZXQgdGV4dCBjb2xvcgogICAgZnVuY3Rpb24gU2V0Q29sb3IoJGFDb2xvcikgewogICAgICAgICR0aGlzLT5pQ29sb3IgPSAkYUNvbG9yOwogICAgfQoKICAgIGZ1bmN0aW9uIEhhc1RhYnMoKSB7CiAgICAgICAgaWYoIGlzX3N0cmluZygkdGhpcy0+aVRleHQpICkgewogICAgICAgICAgICByZXR1cm4gc3Vic3RyX2NvdW50KCR0aGlzLT5pVGV4dCwiXHQiKSA+IDA7CiAgICAgICAgfQogICAgICAgIGVsc2VpZiggaXNfYXJyYXkoJHRoaXMtPmlUZXh0KSApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBHZXQgbnVtYmVyIG9mIHRhYnMgaW4gc3RyaW5nCiAgICBmdW5jdGlvbiBHZXROYnJUYWJzKCkgewogICAgICAgIGlmKCBpc19zdHJpbmcoJHRoaXMtPmlUZXh0KSApIHsKICAgICAgICAgICAgcmV0dXJuIHN1YnN0cl9jb3VudCgkdGhpcy0+aVRleHQsIlx0IikgOwogICAgICAgIH0KICAgICAgICBlbHNlewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICB9CgogICAgLy8gU2V0IGFsaWdubWVudAogICAgZnVuY3Rpb24gQWxpZ24oJGFIQWxpZ24sJGFWQWxpZ249ImJvdHRvbSIpIHsKICAgICAgICAkdGhpcy0+aUhBbGlnbj0kYUhBbGlnbjsKICAgICAgICAkdGhpcy0+aVZBbGlnbj0kYVZBbGlnbjsKICAgIH0KCiAgICAvLyBTeW5vbnltCiAgICBmdW5jdGlvbiBTZXRBbGlnbigkYUhBbGlnbiwkYVZBbGlnbj0iYm90dG9tIikgewogICAgICAgICR0aGlzLT5pSEFsaWduPSRhSEFsaWduOwogICAgICAgICR0aGlzLT5pVkFsaWduPSRhVkFsaWduOwogICAgfQoKICAgIC8vIFNwZWNpZnkgZm9udAogICAgZnVuY3Rpb24gU2V0Rm9udCgkYUZGYW1pbHksJGFGU3R5bGU9RlNfTk9STUFMLCRhRlNpemU9MTApIHsKICAgICAgICAkdGhpcy0+aUZGYW1pbHkgPSAkYUZGYW1pbHk7CiAgICAgICAgJHRoaXMtPmlGU3R5bGUgID0gJGFGU3R5bGU7CiAgICAgICAgJHRoaXMtPmlGU2l6ZSAgPSAkYUZTaXplOwogICAgfQoKICAgIGZ1bmN0aW9uIFNldENvbHVtbkZvbnRzKCRhRm9udEFycmF5KSB7CiAgICAgICAgaWYoICFpc19hcnJheSgkYUZvbnRBcnJheSkgfHwgY291bnQoJGFGb250QXJyYXlbMF0pICE9IDMgKSB7CiAgICAgICAgICAgIEpwR3JhcGhFcnJvcjo6UmFpc2VMKDYwMzMpOwogICAgICAgICAgICAvLyAnQXJyYXkgb2YgZm9udHMgbXVzdCBjb250YWluIGFycmF5cyB3aXRoIDMgZWxlbWVudHMsIGkuZS4gKEZhbWlseSwgU3R5bGUsIFNpemUpJwogICAgICAgIH0KICAgICAgICAkdGhpcy0+aUZvbnRBcnJheSA9ICRhRm9udEFycmF5OwogICAgfQoKCiAgICBmdW5jdGlvbiBJc0NvbHVtbnMoKSB7CiAgICAgICAgcmV0dXJuIGlzX2FycmF5KCR0aGlzLT5pVGV4dCkgOwogICAgfQoKICAgIC8vIEdldCB3aWR0aCBvZiB0ZXh0LiBJZiB0ZXh0IGNvbnRhaW5zIHNldmVyYWwgY29sdW1ucyBzZXBhcmF0ZWQgYnkKICAgIC8vIHRhYnMgdGhlbiByZXR1cm4gYm90aCB0aGUgdG90YWwgd2lkdGggYXMgd2VsbCBhcyBhbiBhcnJheSB3aXRoIGEKICAgIC8vIHdpZHRoIGZvciBlYWNoIGNvbHVtbi4KICAgIGZ1bmN0aW9uIEdldFdpZHRoKCRhSW1nLCRhVXNlVGFicz1mYWxzZSwkYVRhYkV4dHJhTWFyZ2luPTEuMSkgewogICAgICAgICRleHRyYV9tYXJnaW49NDsKICAgICAgICAkYUltZy0+U2V0Rm9udCgkdGhpcy0+aUZGYW1pbHksJHRoaXMtPmlGU3R5bGUsJHRoaXMtPmlGU2l6ZSk7CiAgICAgICAgaWYoIGlzX3N0cmluZygkdGhpcy0+aVRleHQpICkgewogICAgICAgICAgICBpZiggc3RybGVuKCR0aGlzLT5pVGV4dCkgPT0gMCApIHJldHVybiAwOwogICAgICAgICAgICAkdG1wID0gcHJlZ19zcGxpdCgnL1x0LycsJHRoaXMtPmlUZXh0KTsKICAgICAgICAgICAgaWYoIGNvdW50KCR0bXApIDw9IDEgfHwgISRhVXNlVGFicyApIHsKICAgICAgICAgICAgICAgICR3ID0gJGFJbWctPkdldFRleHRXaWR0aCgkdGhpcy0+aVRleHQpOwogICAgICAgICAgICAgICAgcmV0dXJuICR3ICsgMiokZXh0cmFfbWFyZ2luOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJHRvdD0wOwogICAgICAgICAgICAgICAgJG4gPSBjb3VudCgkdG1wKTsKICAgICAgICAgICAgICAgIGZvcigkaT0wOyAkaSA8ICRuOyArKyRpKSB7CiAgICAgICAgICAgICAgICAgICAgJHJlc1skaV0gPSAkYUltZy0+R2V0VGV4dFdpZHRoKCR0bXBbJGldKTsKICAgICAgICAgICAgICAgICAgICAkdG90ICs9ICRyZXNbJGldKiRhVGFiRXh0cmFNYXJnaW47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXkocm91bmQoJHRvdCksJHJlcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZWlmKCBpc19vYmplY3QoJHRoaXMtPmlUZXh0KSApIHsKICAgICAgICAgICAgLy8gQSBzaW5nbGUgaWNvbgogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmlUZXh0LT5HZXRXaWR0aCgpKzIqJGV4dHJhX21hcmdpbjsKICAgICAgICB9CiAgICAgICAgZWxzZWlmKCBpc19hcnJheSgkdGhpcy0+aVRleHQpICkgewogICAgICAgICAgICAvLyBNdXN0IGJlIGFuIGFycmF5IG9mIHRleHRzLiBJbiB0aGlzIGNhc2Ugd2UgcmV0dXJuIHRoZSBzdW0gb2YgdGhlCiAgICAgICAgICAgIC8vIGxlbmd0aCArIGEgZml4ZWQgbWFyZ2luIG9mIDQgcGl4ZWxzIG9uIGVhY2ggdGV4dCBzdHJpbmcKICAgICAgICAgICAgJG4gPSBjb3VudCgkdGhpcy0+aVRleHQpOwogICAgICAgICAgICAkbmYgPSBjb3VudCgkdGhpcy0+aUZvbnRBcnJheSk7CiAgICAgICAgICAgIGZvciggJGk9MCwgJHc9MDsgJGkgPCAkbjsgKyskaSApIHsKICAgICAgICAgICAgICAgIGlmKCAkaSA8ICRuZiApIHsKICAgICAgICAgICAgICAgICAgICAkYUltZy0+U2V0Rm9udCgkdGhpcy0+aUZvbnRBcnJheVskaV1bMF0sJHRoaXMtPmlGb250QXJyYXlbJGldWzFdLCR0aGlzLT5pRm9udEFycmF5WyRpXVsyXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkYUltZy0+U2V0Rm9udCgkdGhpcy0+aUZGYW1pbHksJHRoaXMtPmlGU3R5bGUsJHRoaXMtPmlGU2l6ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkdG1wID0gJHRoaXMtPmlUZXh0WyRpXTsKICAgICAgICAgICAgICAgIGlmKCBpc19zdHJpbmcoJHRtcCkgKSB7CiAgICAgICAgICAgICAgICAgICAgJHcgKz0gJGFJbWctPkdldFRleHRXaWR0aCgkdG1wKSskZXh0cmFfbWFyZ2luOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYoIGlzX29iamVjdCgkdG1wKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEpwR3JhcGhFcnJvcjo6UmFpc2VMKDYwMTIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkdyArPSAkdG1wLT5HZXRXaWR0aCgpKyRleHRyYV9tYXJnaW47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICR3OwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgSnBHcmFwaEVycm9yOjpSYWlzZUwoNjAxMik7CiAgICAgICAgfQogICAgfQoKICAgIC8vIGZvciB0aGUgY2FzZSB3aGVyZSB3ZSBoYXZlIG11bHRpcGxlIGNvbHVtbnMgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB3aWR0aCBvZiBlYWNoCiAgICAvLyBjb2x1bW4gaW5kaXZpZHVhbGx5LiBJZiB0aGVyZSBpcyBubyBjb2x1bW5zIGp1c3QgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgc2luZ2xlCiAgICAvLyBjb2x1bW4gYXMgYW4gYXJyYXkgb2Ygb25lCiAgICBmdW5jdGlvbiBHZXRDb2xXaWR0aCgkYUltZywkYU1hcmdpbj0wKSB7CiAgICAgICAgJGFJbWctPlNldEZvbnQoJHRoaXMtPmlGRmFtaWx5LCR0aGlzLT5pRlN0eWxlLCR0aGlzLT5pRlNpemUpOwogICAgICAgIGlmKCBpc19hcnJheSgkdGhpcy0+aVRleHQpICkgewogICAgICAgICAgICAkbiA9IGNvdW50KCR0aGlzLT5pVGV4dCk7CiAgICAgICAgICAgICRuZiA9IGNvdW50KCR0aGlzLT5pRm9udEFycmF5KTsKICAgICAgICAgICAgZm9yKCAkaT0wLCAkdz1hcnJheSgpOyAkaSA8ICRuOyArKyRpICkgewogICAgICAgICAgICAgICAgJHRtcCA9ICR0aGlzLT5pVGV4dFskaV07CiAgICAgICAgICAgICAgICBpZiggaXNfc3RyaW5nKCR0bXApICkgewogICAgICAgICAgICAgICAgICAgIGlmKCAkaSA8ICRuZiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGFJbWctPlNldEZvbnQoJHRoaXMtPmlGb250QXJyYXlbJGldWzBdLCR0aGlzLT5pRm9udEFycmF5WyRpXVsxXSwkdGhpcy0+aUZvbnRBcnJheVskaV1bMl0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGFJbWctPlNldEZvbnQoJHRoaXMtPmlGRmFtaWx5LCR0aGlzLT5pRlN0eWxlLCR0aGlzLT5pRlNpemUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkd1skaV0gPSAkYUltZy0+R2V0VGV4dFdpZHRoKCR0bXApKyRhTWFyZ2luOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYoIGlzX29iamVjdCgkdG1wKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEpwR3JhcGhFcnJvcjo6UmFpc2VMKDYwMTIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkd1skaV0gPSAkdG1wLT5HZXRXaWR0aCgpKyRhTWFyZ2luOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAkdzsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBhcnJheSgkdGhpcy0+R2V0V2lkdGgoJGFJbWcpKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gR2V0IHRvdGFsIGhlaWdodCBvZiB0ZXh0CiAgICBmdW5jdGlvbiBHZXRIZWlnaHQoJGFJbWcpIHsKICAgICAgICAkbmYgPSBjb3VudCgkdGhpcy0+aUZvbnRBcnJheSk7CiAgICAgICAgJG1heGhlaWdodCA9IC0xOwoKICAgICAgICBpZiggJG5mID4gMCApIHsKICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBmaW5kIG91dCB0aGUgbGFyZ2VzdCBmb250IGFuZCB0YWtlIHRoYXQgb25lIGFzIHRoZQogICAgICAgICAgICAvLyBoZWlnaHQgb2YgdGhlIHJvdwogICAgICAgICAgICBmb3IoJGk9MDsgJGkgPCAkbmY7ICsrJGkgKSB7CiAgICAgICAgICAgICAgICAkYUltZy0+U2V0Rm9udCgkdGhpcy0+aUZvbnRBcnJheVskaV1bMF0sJHRoaXMtPmlGb250QXJyYXlbJGldWzFdLCR0aGlzLT5pRm9udEFycmF5WyRpXVsyXSk7CiAgICAgICAgICAgICAgICAkaGVpZ2h0ID0gJGFJbWctPkdldEZvbnRIZWlnaHQoKTsKICAgICAgICAgICAgICAgICRtYXhoZWlnaHQgPSBtYXgoJGhlaWdodCwkbWF4aGVpZ2h0KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJGFJbWctPlNldEZvbnQoJHRoaXMtPmlGRmFtaWx5LCR0aGlzLT5pRlN0eWxlLCR0aGlzLT5pRlNpemUpOwogICAgICAgICRoZWlnaHQgPSAkYUltZy0+R2V0Rm9udEhlaWdodCgpOwogICAgICAgICRtYXhoZWlnaHQgPSBtYXgoJGhlaWdodCwkbWF4aGVpZ2h0KTsKICAgICAgICByZXR1cm4gJG1heGhlaWdodDsKICAgIH0KCiAgICAvLyBVbmhpZGUvaGlkZSB0aGUgdGV4dAogICAgZnVuY3Rpb24gU2hvdygkYVNob3c9dHJ1ZSkgewogICAgICAgICR0aGlzLT5pU2hvdz0kYVNob3c7CiAgICB9CgogICAgLy8gU3Ryb2tlIHRleHQgYXQgKHgseSkgY29vcmRpbmF0ZXMuIElmIHRoZSB0ZXh0IGNvbnRhaW5zIHRhYnMgdGhlbiB0aGUKICAgIC8vIHggcGFyYW1ldGVyIHNob3VsZCBiZSBhbiBhcnJheSBvZiBwb3NpdGlvbnMgdG8gYmUgdXNlZCBmb3IgZWFjaCBzdWNjZXNzaXZlCiAgICAvLyB0YWIgbWFyay4gSWYgbm8gYXJyYXkgaXMgc3VwcGxpZWQgdGhlbiB0aGUgdGFicyB3aWxsIGJlIGlnbm9yZWQuCiAgICBmdW5jdGlvbiBTdHJva2UoJGFJbWcsJGFYLCRhWSkgewogICAgICAgIGlmKCAkdGhpcy0+aVNob3cgKSB7CiAgICAgICAgICAgICRhSW1nLT5TZXRDb2xvcigkdGhpcy0+aUNvbG9yKTsKICAgICAgICAgICAgJGFJbWctPlNldEZvbnQoJHRoaXMtPmlGRmFtaWx5LCR0aGlzLT5pRlN0eWxlLCR0aGlzLT5pRlNpemUpOwogICAgICAgICAgICAkYUltZy0+U2V0VGV4dEFsaWduKCR0aGlzLT5pSEFsaWduLCR0aGlzLT5pVkFsaWduKTsKICAgICAgICAgICAgaWYoICR0aGlzLT5HZXROYnJUYWJzKCkgPCAxICkgewogICAgICAgICAgICAgICAgaWYoIGlzX3N0cmluZygkdGhpcy0+aVRleHQpICkgewogICAgICAgICAgICAgICAgICAgIGlmKCBpc19hcnJheSgkYVgpICkgJGFYPSRhWFswXTsKICAgICAgICAgICAgICAgICAgICBpZiggaXNfYXJyYXkoJGFZKSApICRhWT0kYVlbMF07CiAgICAgICAgICAgICAgICAgICAgJGFJbWctPlN0cm9rZVRleHQoJGFYLCRhWSwkdGhpcy0+aVRleHQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZWlmKCBpc19hcnJheSgkdGhpcy0+aVRleHQpICYmICgkbiA9IGNvdW50KCR0aGlzLT5pVGV4dCkpID4gMCApIHsKICAgICAgICAgICAgICAgICAgICAkYXggPSBpc19hcnJheSgkYVgpIDsKICAgICAgICAgICAgICAgICAgICAkYXkgPSBpc19hcnJheSgkYVkpIDsKICAgICAgICAgICAgICAgICAgICBpZiggJGF4ICYmICRheSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90aGluZzsgYm90aCBhcmUgYWxyZWFkeSBhcnJheXMKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZWlmKCAkYXggKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRhWSA9IGFycmF5X2ZpbGwoMCwkbiwkYVkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlaWYoICRheSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGFYID0gYXJyYXlfZmlsbCgwLCRuLCRhWCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkYVggPSBhcnJheV9maWxsKDAsJG4sJGFYKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGFZID0gYXJyYXlfZmlsbCgwLCRuLCRhWSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRuID0gbWluKCRuLCBjb3VudCgkYVgpICkgOwogICAgICAgICAgICAgICAgICAgICRuID0gbWluKCRuLCBjb3VudCgkYVkpICkgOwogICAgICAgICAgICAgICAgICAgIGZvcigkaT0wOyAkaSA8ICRuOyArKyRpICkgewogICAgICAgICAgICAgICAgICAgICAgICAkdG1wID0gJHRoaXMtPmlUZXh0WyRpXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGlzX29iamVjdCgkdG1wKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0bXAtPlN0cm9rZSgkYUltZywkYVhbJGldLCRhWVskaV0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICRpIDwgY291bnQoJHRoaXMtPmlGb250QXJyYXkpICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmb250ID0gJHRoaXMtPmlGb250QXJyYXlbJGldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhSW1nLT5TZXRGb250KCRmb250WzBdLCRmb250WzFdLCRmb250WzJdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhSW1nLT5TZXRGb250KCR0aGlzLT5pRkZhbWlseSwkdGhpcy0+aUZTdHlsZSwkdGhpcy0+aUZTaXplKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgCSRhSW1nLT5TdHJva2VUZXh0KCRhWFskaV0sJGFZWyRpXSxzdHJfcmVwbGFjZSgiXHQiLCIgIiwkdG1wKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkdG1wID0gcHJlZ19zcGxpdCgnL1x0LycsJHRoaXMtPmlUZXh0KTsKICAgICAgICAgICAgICAgICRuID0gbWluKGNvdW50KCR0bXApLGNvdW50KCRhWCkpOwogICAgICAgICAgICAgICAgZm9yKCRpPTA7ICRpIDwgJG47ICsrJGkpIHsKICAgICAgICAgICAgICAgICAgICBpZiggJGkgPCBjb3VudCgkdGhpcy0+aUZvbnRBcnJheSkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRmb250ID0gJHRoaXMtPmlGb250QXJyYXlbJGldOwogICAgICAgICAgICAgICAgICAgICAgICAkYUltZy0+U2V0Rm9udCgkZm9udFswXSwkZm9udFsxXSwkZm9udFsyXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkYUltZy0+U2V0Rm9udCgkdGhpcy0+aUZGYW1pbHksJHRoaXMtPmlGU3R5bGUsJHRoaXMtPmlGU2l6ZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRhSW1nLT5TdHJva2VUZXh0KCRhWFskaV0sJGFZLCR0bXBbJGldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gQ0xBU1MgSGVhZGVyUHJvcGVydHkKLy8gRGVzY3JpcHRpb246IERhdGEgZW5jYXBzdWxhdGluZyBjbGFzcyB0byBob2xkIHByb3BlcnR5Ci8vIGZvciBlYWNoIHR5cGUgb2YgdGhlIHNjYWxlIGhlYWRlcnMKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KY2xhc3MgSGVhZGVyUHJvcGVydHkgewogICAgcHVibGljICRncmlkOwogICAgcHVibGljICRpU2hvd0xhYmVscz10cnVlLCRpU2hvd0dyaWQ9dHJ1ZTsKICAgIHB1YmxpYyAkaVRpdGxlVmVydE1hcmdpbj0zLCRpRkZhbWlseT1GRl9GT05UMCwkaUZTdHlsZT1GU19OT1JNQUwsJGlGU2l6ZT04OwogICAgcHVibGljICRpU3R5bGU9MDsKICAgIHB1YmxpYyAkaUZyYW1lQ29sb3I9ImJsYWNrIiwkaUZyYW1lV2VpZ2h0PTE7CiAgICBwdWJsaWMgJGlCYWNrZ3JvdW5kQ29sb3I9IndoaXRlIjsKICAgIHB1YmxpYyAkaVdlZWtlbmRCYWNrZ3JvdW5kQ29sb3I9ImxpZ2h0Z3JheSIsJGlTdW5kYXlUZXh0Q29sb3I9InJlZCI7IC8vIHRoZXNlIGFyZSBvbmx5IHVzZWQgd2l0aCBkYXkgc2NhbGUKICAgIHB1YmxpYyAkaVRleHRDb2xvcj0iYmxhY2siOwogICAgcHVibGljICRpTGFiZWxGb3JtU3RyPSIlZCI7CiAgICBwdWJsaWMgJGlJbnRlcnZhbGwgPSAxOwoKICAgIC8vLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBDT05TVFJVQ1RPUgogICAgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKSB7CiAgICAgICAgJHRoaXMtPmdyaWQgPSBuZXcgTGluZVByb3BlcnR5KCk7CiAgICB9CgogICAgLy8tLS0tLS0tLS0tLS0tLS0KICAgIC8vIFBVQkxJQyBNRVRIT0RTCiAgICBmdW5jdGlvbiBTaG93KCRhU2hvdz10cnVlKSB7CiAgICAgICAgJHRoaXMtPmlTaG93TGFiZWxzID0gJGFTaG93OwogICAgfQoKICAgIGZ1bmN0aW9uIFNldEludGVydmFsbCgkYUludCkgewogICAgCSR0aGlzLT5pSW50ZXJ2YWxsID0gJGFJbnQ7CiAgICB9CgogICAgZnVuY3Rpb24gU2V0SW50ZXJ2YWwoJGFJbnQpIHsKICAgICAgICAkdGhpcy0+aUludGVydmFsbCA9ICRhSW50OwogICAgfQoKICAgIGZ1bmN0aW9uIEdldEludGVydmFsbCgpIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmlJbnRlcnZhbGwgOwogICAgfQoKICAgIGZ1bmN0aW9uIFNldEZvbnQoJGFGRmFtaWx5LCRhRlN0eWxlPUZTX05PUk1BTCwkYUZTaXplPTEwKSB7CiAgICAgICAgJHRoaXMtPmlGRmFtaWx5ID0gJGFGRmFtaWx5OwogICAgICAgICR0aGlzLT5pRlN0eWxlICA9ICRhRlN0eWxlOwogICAgICAgICR0aGlzLT5pRlNpemUgID0gJGFGU2l6ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRGb250Q29sb3IoJGFDb2xvcikgewogICAgICAgICR0aGlzLT5pVGV4dENvbG9yID0gJGFDb2xvcjsKICAgIH0KCiAgICBmdW5jdGlvbiBHZXRGb250SGVpZ2h0KCRhSW1nKSB7CiAgICAgICAgJGFJbWctPlNldEZvbnQoJHRoaXMtPmlGRmFtaWx5LCR0aGlzLT5pRlN0eWxlLCR0aGlzLT5pRlNpemUpOwogICAgICAgIHJldHVybiAkYUltZy0+R2V0Rm9udEhlaWdodCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIEdldEZvbnRXaWR0aCgkYUltZykgewogICAgICAgICRhSW1nLT5TZXRGb250KCR0aGlzLT5pRkZhbWlseSwkdGhpcy0+aUZTdHlsZSwkdGhpcy0+aUZTaXplKTsKICAgICAgICByZXR1cm4gJGFJbWctPkdldEZvbnRXaWR0aCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIEdldFN0cldpZHRoKCRhSW1nLCRhU3RyKSB7CiAgICAgICAgJGFJbWctPlNldEZvbnQoJHRoaXMtPmlGRmFtaWx5LCR0aGlzLT5pRlN0eWxlLCR0aGlzLT5pRlNpemUpOwogICAgICAgIHJldHVybiAkYUltZy0+R2V0VGV4dFdpZHRoKCRhU3RyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRTdHlsZSgkYVN0eWxlKSB7CiAgICAgICAgJHRoaXMtPmlTdHlsZSA9ICRhU3R5bGU7CiAgICB9CgogICAgZnVuY3Rpb24gU2V0QmFja2dyb3VuZENvbG9yKCRhQ29sb3IpIHsKICAgICAgICAkdGhpcy0+aUJhY2tncm91bmRDb2xvcj0kYUNvbG9yOwogICAgfQoKICAgIGZ1bmN0aW9uIFNldEZyYW1lV2VpZ2h0KCRhV2VpZ2h0KSB7CiAgICAgICAgJHRoaXMtPmlGcmFtZVdlaWdodD0kYVdlaWdodDsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRGcmFtZUNvbG9yKCRhQ29sb3IpIHsKICAgICAgICAkdGhpcy0+aUZyYW1lQ29sb3I9JGFDb2xvcjsKICAgIH0KCiAgICAvLyBPbmx5IHVzZWQgYnkgZGF5IHNjYWxlCiAgICBmdW5jdGlvbiBTZXRXZWVrZW5kQ29sb3IoJGFDb2xvcikgewogICAgICAgICR0aGlzLT5pV2Vla2VuZEJhY2tncm91bmRDb2xvcj0kYUNvbG9yOwogICAgfQoKICAgIC8vIE9ubHkgdXNlZCBieSBkYXkgc2NhbGUKICAgIGZ1bmN0aW9uIFNldFN1bmRheUZvbnRDb2xvcigkYUNvbG9yKSB7CiAgICAgICAgJHRoaXMtPmlTdW5kYXlUZXh0Q29sb3I9JGFDb2xvcjsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRUaXRsZVZlcnRNYXJnaW4oJGFNYXJnaW4pIHsKICAgICAgICAkdGhpcy0+aVRpdGxlVmVydE1hcmdpbj0kYU1hcmdpbjsKICAgIH0KCiAgICBmdW5jdGlvbiBTZXRMYWJlbEZvcm1hdFN0cmluZygkYVN0cikgewogICAgICAgICR0aGlzLT5pTGFiZWxGb3JtU3RyPSRhU3RyOwogICAgfQoKICAgIGZ1bmN0aW9uIFNldEZvcm1hdFN0cmluZygkYVN0cikgewogICAgICAgICR0aGlzLT5TZXRMYWJlbEZvcm1hdFN0cmluZygkYVN0cik7CiAgICB9CgoKfQoKLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gQ0xBU1MgR2FudHRTY2FsZQovLyBEZXNjcmlwdGlvbjogUmVzcG9uc2libGUgZm9yIGNhbGN1bGF0aW5nIGFuZCBzaG93aW5nCi8vIHRoZSBzY2FsZSBpbiBhIGdhbnR0IGNoYXJ0LiBUaGlzIGluY2x1ZGVzIHByb3ZpZGluZyBtZXRob2RzIGZvcgovLyBjb252ZXJ0aW5nIGRhdGVzIHRvIHBvc2l0aW9uIGluIHRoZSBjaGFydCBhcyB3ZWxsIGFzIHN0cm9raW5nIHRoZQovLyBkYXRlIGhlYWRlcnMgKGRheXMsIHdlZWssIGV0YykuCi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CmNsYXNzIEdhbnR0U2NhbGUgewogICAgcHVibGljICRtaW51dGUsJGhvdXIsJGRheSwkd2VlaywkbW9udGgsJHllYXI7CiAgICBwdWJsaWMgJGRpdmlkZXIsJGRpdmlkZXJoLCR0YWJsZVRpdGxlOwogICAgcHVibGljICRpU3RhcnREYXRlPS0xLCRpRW5kRGF0ZT0tMTsKICAgIC8vIE51bWJlciBvZiBnYW50dCBiYXIgcG9zaXRpb24gKG4uYiBub3QgbmVjZXNzYXJpbGl5IHRoZSBzYW1lIGFzIHRoZSBudW1iZXIgb2YgYmFycykKICAgIC8vIHdlIGNvdWxkIGhhdmUgb24gYmFyIGluIHBvc2l0aW9uIDEsIGFuZCBvbmUgYmFyIGluIHBvc2l0aW9uIDUgdGhlbiB0aGVyZSBhcmUgdHdvCiAgICAvLyBiYXJzIGJ1dCB0aGUgbnVtYmVyIG9mIGJhciBwb3NpdGlvbnMgaXMgNQogICAgcHVibGljICRhY3RpbmZvOwogICAgcHVibGljICRpVG9wUGxvdE1hcmdpbj0xMCwkaUJvdHRvbVBsb3RNYXJnaW49MTU7CiAgICBwdWJsaWMgJGlWZXJ0TGluZXM9LTE7CiAgICBwdWJsaWMgJGlWZXJ0SGVhZGVyU2l6ZT0tMTsKICAgIC8vIFRoZSB3aWR0aCBvZiB0aGUgbGFiZWxzIChkZWZhdWx0cyB0byB0aGUgd2lkZXN0IG9mIGFsbCBsYWJlbHMpCiAgICBwcml2YXRlICRpTGFiZWxXaWR0aDsKICAgIC8vIE91dCBpbWFnZSB0byBzdHJva2UgdGhlIHNjYWxlIHRvCiAgICBwcml2YXRlICRpSW1nOwogICAgcHJpdmF0ZSAkaVRhYmxlSGVhZGVyQmFja2dyb3VuZENvbG9yPSJ3aGl0ZSIsJGlUYWJsZUhlYWRlckZyYW1lQ29sb3I9ImJsYWNrIjsKICAgIHByaXZhdGUgJGlUYWJsZUhlYWRlckZyYW1lV2VpZ2h0PTE7CiAgICBwcml2YXRlICRpQXZhaWxhYmxlSGVpZ2h0PS0xLCRpVmVydFNwYWNpbmc9LTE7CiAgICBwcml2YXRlICRpRGF0ZUxvY2FsZTsKICAgIHByaXZhdGUgJGlWZXJ0TGF5b3V0PUdBTlRUX0VWRU47CiAgICBwcml2YXRlICRpVXNlUGxvdFdlZWtlbmRCYWNrZ3JvdW5kPXRydWU7CiAgICBwcml2YXRlICRpV2Vla1N0YXJ0ID0gMTsgLy8gRGVmYXVsdCB0byBoYXZlIHdlZWtlbmRzIHN0YXJ0IG9uIE1vbmRheQoKICAgIC8vLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBDT05TVFJVQ1RPUgogICAgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGFJbWcpIHsKICAgICAgICAkdGhpcy0+aUltZyA9ICRhSW1nOwogICAgICAgICR0aGlzLT5pRGF0ZUxvY2FsZSA9IG5ldyBEYXRlTG9jYWxlKCk7CgogICAgICAgICR0aGlzLT5taW51dGUgPSBuZXcgSGVhZGVyUHJvcGVydHkoKTsKICAgICAgICAkdGhpcy0+bWludXRlLT5TZXRJbnRlcnZhbGwoMTUpOwogICAgICAgICR0aGlzLT5taW51dGUtPlNldExhYmVsRm9ybWF0U3RyaW5nKCdpJyk7CiAgICAgICAgJHRoaXMtPm1pbnV0ZS0+U2V0Rm9udChGRl9GT05UMCk7CiAgICAgICAgJHRoaXMtPm1pbnV0ZS0+Z3JpZC0+U2V0Q29sb3IoImdyYXkiKTsKCiAgICAgICAgJHRoaXMtPmhvdXIgPSBuZXcgSGVhZGVyUHJvcGVydHkoKTsKICAgICAgICAkdGhpcy0+aG91ci0+U2V0Rm9udChGRl9GT05UMCk7CiAgICAgICAgJHRoaXMtPmhvdXItPlNldEludGVydmFsbCg2KTsKICAgICAgICAkdGhpcy0+aG91ci0+U2V0U3R5bGUoSE9VUlNUWUxFX0hNMjQpOwogICAgICAgICR0aGlzLT5ob3VyLT5TZXRMYWJlbEZvcm1hdFN0cmluZygnSDppJyk7CiAgICAgICAgJHRoaXMtPmhvdXItPmdyaWQtPlNldENvbG9yKCJncmF5Iik7CgogICAgICAgICR0aGlzLT5kYXkgPSBuZXcgSGVhZGVyUHJvcGVydHkoKTsKICAgICAgICAkdGhpcy0+ZGF5LT5ncmlkLT5TZXRDb2xvcigiZ3JheSIpOwogICAgICAgICR0aGlzLT5kYXktPlNldExhYmVsRm9ybWF0U3RyaW5nKCdsJyk7CgogICAgICAgICR0aGlzLT53ZWVrID0gbmV3IEhlYWRlclByb3BlcnR5KCk7CiAgICAgICAgJHRoaXMtPndlZWstPlNldExhYmVsRm9ybWF0U3RyaW5nKCJ3JWQiKTsKICAgICAgICAkdGhpcy0+d2Vlay0+U2V0Rm9udChGRl9GT05UMSk7CgogICAgICAgICR0aGlzLT5tb250aCA9IG5ldyBIZWFkZXJQcm9wZXJ0eSgpOwogICAgICAgICR0aGlzLT5tb250aC0+U2V0Rm9udChGRl9GT05UMSxGU19CT0xEKTsKCiAgICAgICAgJHRoaXMtPnllYXIgPSBuZXcgSGVhZGVyUHJvcGVydHkoKTsKICAgICAgICAkdGhpcy0+eWVhci0+U2V0Rm9udChGRl9GT05UMSxGU19CT0xEKTsKCiAgICAgICAgJHRoaXMtPmRpdmlkZXI9bmV3IExpbmVQcm9wZXJ0eSgpOwogICAgICAgICR0aGlzLT5kaXZpZGVyaD1uZXcgTGluZVByb3BlcnR5KCk7CiAgICAgICAgJHRoaXMtPmRpdmlkZXJoLT5TZXRXZWlnaHQoMik7CiAgICAgICAgJHRoaXMtPmRpdmlkZXItPlNldFdlaWdodCg2KTsKICAgICAgICAkdGhpcy0+ZGl2aWRlci0+U2V0Q29sb3IoJ2dyYXknKTsKICAgICAgICAkdGhpcy0+ZGl2aWRlci0+U2V0U3R5bGUoJ2ZhbmN5Jyk7CgogICAgICAgICR0aGlzLT50YWJsZVRpdGxlPW5ldyBUZXh0UHJvcGVydHkoKTsKICAgICAgICAkdGhpcy0+dGFibGVUaXRsZS0+U2hvdyhmYWxzZSk7CiAgICAgICAgJHRoaXMtPmFjdGluZm8gPSBuZXcgR2FudHRBY3Rpdml0eUluZm8oKTsKICAgIH0KCiAgICAvLy0tLS0tLS0tLS0tLS0tLQogICAgLy8gUFVCTElDIE1FVEhPRFMKICAgIC8vIFNwZWNpZnkgd2hhdCBoZWFkZXJzIHNob3VsZCBiZSB2aXNpYmxlCiAgICBmdW5jdGlvbiBTaG93SGVhZGVycygkYUZsZykgewogICAgICAgICR0aGlzLT5kYXktPlNob3coJGFGbGcgJiBHQU5UVF9IREFZKTsKICAgICAgICAkdGhpcy0+d2Vlay0+U2hvdygkYUZsZyAmIEdBTlRUX0hXRUVLKTsKICAgICAgICAkdGhpcy0+bW9udGgtPlNob3coJGFGbGcgJiBHQU5UVF9ITU9OVEgpOwogICAgICAgICR0aGlzLT55ZWFyLT5TaG93KCRhRmxnICYgR0FOVFRfSFlFQVIpOwogICAgICAgICR0aGlzLT5ob3VyLT5TaG93KCRhRmxnICYgR0FOVFRfSEhPVVIpOwogICAgICAgICR0aGlzLT5taW51dGUtPlNob3coJGFGbGcgJiBHQU5UVF9ITUlOKTsKCiAgICAgICAgLy8gTWFrZSBzb21lIGRlZmF1bHQgc2V0dGluZ3Mgb2YgZ3JpZGxpbmVzIHdoaWhjIG1ha2VzIHNlbnNlCiAgICAgICAgaWYoICRhRmxnICYgR0FOVFRfSFdFRUsgKSB7CiAgICAgICAgICAgICR0aGlzLT5tb250aC0+Z3JpZC0+U2hvdyhmYWxzZSk7CiAgICAgICAgICAgICR0aGlzLT55ZWFyLT5ncmlkLT5TaG93KGZhbHNlKTsKICAgICAgICB9CiAgICAgICAgaWYoICRhRmxnICYgR0FOVFRfSEhPVVIgKSB7CiAgICAgICAgICAgICR0aGlzLT5kYXktPmdyaWQtPlNldENvbG9yKCJibGFjayIpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBTaG91bGQgdGhlIHdlZWtlbmQgYmFja2dyb3VuZCBzdHJldGNoIGFsbCB0aGUgd2F5IGRvd24gaW4gdGhlIHBsb3RhcmVhCiAgICBmdW5jdGlvbiBVc2VXZWVrZW5kQmFja2dyb3VuZCgkYVNob3cpIHsKICAgICAgICAkdGhpcy0+aVVzZVBsb3RXZWVrZW5kQmFja2dyb3VuZCA9ICRhU2hvdzsKICAgIH0KCiAgICAvLyBIYXZlIGEgcmFuZ2UgYmVlbiBzcGVjaWZpZWQ\/CiAgICBmdW5jdGlvbiBJc1JhbmdlU2V0KCkgewogICAgICAgIHJldHVybiAkdGhpcy0+aVN0YXJ0RGF0ZSE9LTEgJiYgJHRoaXMtPmlFbmREYXRlIT0tMTsKICAgIH0KCiAgICAvLyBTaG91bGQgdGhlIGxheW91dCBiZSBmcm9tIHRvcCBvciBldmVuPwogICAgZnVuY3Rpb24gU2V0VmVydExheW91dCgkYUxheW91dCkgewogICAgICAgICR0aGlzLT5pVmVydExheW91dCA9ICRhTGF5b3V0OwogICAgfQoKICAgIC8vIFdoaWNoIGxvY2FsZSBzaG91bGQgYmUgdXNlZD8KICAgIGZ1bmN0aW9uIFNldERhdGVMb2NhbGUoJGFMb2NhbGUpIHsKICAgICAgICAkdGhpcy0+aURhdGVMb2NhbGUtPlNldCgkYUxvY2FsZSk7CiAgICB9CgogICAgLy8gTnVtYmVyIG9mIGRheXMgd2UgYXJlIHNob3dpbmcKICAgIGZ1bmN0aW9uIEdldE51bWJlck9mRGF5cygpIHsKICAgICAgICByZXR1cm4gcm91bmQoKCR0aGlzLT5pRW5kRGF0ZS0kdGhpcy0+aVN0YXJ0RGF0ZSkvU0VDUEVSREFZKTsKICAgIH0KCiAgICAvLyBUaGUgd2lkdGggb2YgdGhlIGFjdHVhbCBwbG90IGFyZWEKICAgIGZ1bmN0aW9uIEdldFBsb3RXaWR0aCgpIHsKICAgICAgICAkaW1nPSR0aGlzLT5pSW1nOwogICAgICAgIHJldHVybiAkaW1nLT53aWR0aCAtICRpbWctPmxlZnRfbWFyZ2luIC0gJGltZy0+cmlnaHRfbWFyZ2luOwogICAgfQoKICAgIC8vIFNwZWNpZnkgdGhlIHdpZHRoIG9mIHRoZSB0aXRsZXMobGFiZWxzKSBmb3IgdGhlIGFjdGl2aXRpZXMKICAgIC8vIChUaGlzIGlzIGJ5IGRlZmF1bHQgc2V0IHRvIHRoZSBtaW5pbXVtIHdpZHRoIGVub3VnaHQgZm9yIHRoZQogICAgLy8gd2lkZXN0IHRpdGxlKQogICAgZnVuY3Rpb24gU2V0TGFiZWxXaWR0aCgkYUxhYmVsV2lkdGgpIHsKICAgICAgICAkdGhpcy0+aUxhYmVsV2lkdGg9JGFMYWJlbFdpZHRoOwogICAgfQoKICAgIC8vIFdoaWNoIGRheSBzaG91bGQgdGhlIHdlZWsgc3RhcnQ\/CiAgICAvLyAwPT1TdW4sIDE9PU1vbmRheSwgMj09VHVlc2RheSBldGMKICAgIGZ1bmN0aW9uIFNldFdlZWtTdGFydCgkYVN0YXJ0RGF5KSB7CiAgICAgICAgJHRoaXMtPmlXZWVrU3RhcnQgPSAkYVN0YXJ0RGF5ICUgNzsKCiAgICAgICAgLy9SZWNhbGN1bGF0ZSB0aGUgc3RhcnRkYXkgc2luY2UgdGhpcyB3aWxsIGNoYW5nZSB0aGUgd2VlayBzdGFydAogICAgICAgICR0aGlzLT5TZXRSYW5nZSgkdGhpcy0+aVN0YXJ0RGF0ZSwkdGhpcy0+aUVuZERhdGUpOwogICAgfQoKICAgIC8vIERvIHdlIHNob3cgbWluIHNjYWxlPwogICAgZnVuY3Rpb24gSXNEaXNwbGF5TWludXRlKCkgewogICAgICAgIHJldHVybiAkdGhpcy0+bWludXRlLT5pU2hvd0xhYmVsczsKICAgIH0KCiAgICAvLyBEbyB3ZSBzaG93IGRheSBzY2FsZT8KICAgIGZ1bmN0aW9uIElzRGlzcGxheUhvdXIoKSB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5ob3VyLT5pU2hvd0xhYmVsczsKICAgIH0KCgogICAgLy8gRG8gd2Ugc2hvdyBkYXkgc2NhbGU\\/Pgo=",
    "size": "160481"
}