{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/flot\/jquery.flot.errorbars.js",
    "lastUpdate": "2018-03-22+14:20:58.62",
    "contentFile": "LyogRmxvdCBwbHVnaW4gZm9yIHBsb3R0aW5nIGVycm9yIGJhcnMuCgpDb3B5cmlnaHQgKGMpIDIwMDctMjAxNCBJT0xBIGFuZCBPbGUgTGF1cnNlbi4KTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgoKRXJyb3IgYmFycyBhcmUgdXNlZCB0byBzaG93IHN0YW5kYXJkIGRldmlhdGlvbiBhbmQgb3RoZXIgc3RhdGlzdGljYWwKcHJvcGVydGllcyBpbiBhIHBsb3QuCgoqIENyZWF0ZWQgYnkgUnVpIFBlcmVpcmEgIC0gIHJ1aSAoZG90KSBwZXJlaXJhIChhdCkgZ21haWwgKGRvdCkgY29tCgpUaGlzIHBsdWdpbiBhbGxvd3MgeW91IHRvIHBsb3QgZXJyb3ItYmFycyBvdmVyIHBvaW50cy4gU2V0ICJlcnJvcmJhcnMiIGluc2lkZQp0aGUgcG9pbnRzIHNlcmllcyB0byB0aGUgYXhpcyBuYW1lIG92ZXIgd2hpY2ggdGhlcmUgd2lsbCBiZSBlcnJvciB2YWx1ZXMgaW4KeW91ciBkYXRhIGFycmF5ICgqZXZlbiogaWYgeW91IGRvIG5vdCBpbnRlbmQgdG8gcGxvdCB0aGVtIGxhdGVyLCBieSBzZXR0aW5nCiJzaG93OiBudWxsIiBvbiB4ZXJyL3llcnIpLgoKVGhlIHBsdWdpbiBzdXBwb3J0cyB0aGVzZSBvcHRpb25zOgoKCXNlcmllczogewoJCXBvaW50czogewoJCQllcnJvcmJhcnM6ICJ4IiBvciAieSIgb3IgInh5IiwKCQkJeGVycjogewoJCQkJc2hvdzogbnVsbC9mYWxzZSBvciB0cnVlLAoJCQkJYXN5bW1ldHJpYzogbnVsbC9mYWxzZSBvciB0cnVlLAoJCQkJdXBwZXJDYXA6IG51bGwgb3IgIi0iIG9yIGZ1bmN0aW9uLAoJCQkJbG93ZXJDYXA6IG51bGwgb3IgIi0iIG9yIGZ1bmN0aW9uLAoJCQkJY29sb3I6IG51bGwgb3IgY29sb3IsCgkJCQlyYWRpdXM6IG51bGwgb3IgbnVtYmVyCgkJCX0sCgkJCXllcnI6IHsgc2FtZSBvcHRpb25zIGFzIHhlcnIgfQoJCX0KCX0KCkVhY2ggZGF0YSBwb2ludCBhcnJheSBpcyBleHBlY3RlZCB0byBiZSBvZiB0aGUgdHlwZToKCgkieCIgIFsgeCwgeSwgeGVyciBdCgkieSIgIFsgeCwgeSwgeWVyciBdCgkieHkiIFsgeCwgeSwgeGVyciwgeWVyciBdCgpXaGVyZSB4ZXJyIGJlY29tZXMgeGVycl9sb3dlcix4ZXJyX3VwcGVyIGZvciB0aGUgYXN5bW1ldHJpYyBlcnJvciBjYXNlLCBhbmQKZXF1aXZhbGVudGx5IGZvciB5ZXJyLiBFZy4sIGEgZGF0YXBvaW50IGZvciB0aGUgInh5IiBjYXNlIHdpdGggc3ltbWV0cmljCmVycm9yLWJhcnMgb24gWCBhbmQgYXN5bW1ldHJpYyBvbiBZIHdvdWxkIGJlOgoKCVsgeCwgeSwgeGVyciwgeWVycl9sb3dlciwgeWVycl91cHBlciBdCgpCeSBkZWZhdWx0IG5vIGVuZCBjYXBzIGFyZSBkcmF3bi4gU2V0dGluZyB1cHBlckNhcCBhbmQvb3IgbG93ZXJDYXAgdG8gIi0iIHdpbGwKZHJhdyBhIHNtYWxsIGNhcCBwZXJwZW5kaWN1bGFyIHRvIHRoZSBlcnJvciBiYXIuIFRoZXkgY2FuIGFsc28gYmUgc2V0IHRvIGEKdXNlci1kZWZpbmVkIGRyYXdpbmcgZnVuY3Rpb24sIHdpdGggKGN0eCwgeCwgeSwgcmFkaXVzKSBhcyBwYXJhbWV0ZXJzLCBhcyBlZy4KCglmdW5jdGlvbiBkcmF3U2VtaUNpcmNsZSggY3R4LCB4LCB5LCByYWRpdXMgKSB7CgkJY3R4LmJlZ2luUGF0aCgpOwoJCWN0eC5hcmMoIHgsIHksIHJhZGl1cywgMCwgTWF0aC5QSSwgZmFsc2UgKTsKCQljdHgubW92ZVRvKCB4IC0gcmFkaXVzLCB5ICk7CgkJY3R4LmxpbmVUbyggeCArIHJhZGl1cywgeSApOwoJCWN0eC5zdHJva2UoKTsKCX0KCkNvbG9yIGFuZCByYWRpdXMgYm90aCBkZWZhdWx0IHRvIHRoZSBzYW1lIG9uZXMgb2YgdGhlIHBvaW50cyBzZXJpZXMgaWYgbm90CnNldC4gVGhlIGluZGVwZW5kZW50IHJhZGl1cyBwYXJhbWV0ZXIgb24geGVyci95ZXJyIGlzIHVzZWZ1bCBmb3IgdGhlIGNhc2Ugd2hlbgp3ZSBtYXkgd2FudCB0byBhZGQgZXJyb3ItYmFycyB0byBhIGxpbmUsIHdpdGhvdXQgc2hvd2luZyB0aGUgaW50ZXJjb25uZWN0aW5nCnBvaW50cyAod2l0aCByYWRpdXM6IDApLCBhbmQgc3RpbGwgc2hvd2luZyBlbmQgY2FwcyBvbiB0aGUgZXJyb3ItYmFycy4Kc2hhZG93U2l6ZSBhbmQgbGluZVdpZHRoIGFyZSBkZXJpdmVkIGFzIHdlbGwgZnJvbSB0aGUgcG9pbnRzIHNlcmllcy4KCiovCgooZnVuY3Rpb24gKCQpIHsKICAgIHZhciBvcHRpb25zID0gewogICAgICAgIHNlcmllczogewogICAgICAgICAgICBwb2ludHM6IHsKICAgICAgICAgICAgICAgIGVycm9yYmFyczogbnVsbCwgLy9zaG91bGQgYmUgJ3gnLCAneScgb3IgJ3h5JwogICAgICAgICAgICAgICAgeGVycjogeyBlcnI6ICd4Jywgc2hvdzogbnVsbCwgYXN5bW1ldHJpYzogbnVsbCwgdXBwZXJDYXA6IG51bGwsIGxvd2VyQ2FwOiBudWxsLCBjb2xvcjogbnVsbCwgcmFkaXVzOiBudWxsfSwKICAgICAgICAgICAgICAgIHllcnI6IHsgZXJyOiAneScsIHNob3c6IG51bGwsIGFzeW1tZXRyaWM6IG51bGwsIHVwcGVyQ2FwOiBudWxsLCBsb3dlckNhcDogbnVsbCwgY29sb3I6IG51bGwsIHJhZGl1czogbnVsbH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07CgogICAgZnVuY3Rpb24gcHJvY2Vzc1Jhd0RhdGEocGxvdCwgc2VyaWVzLCBkYXRhLCBkYXRhcG9pbnRzKXsKICAgICAgICBpZiAoIXNlcmllcy5wb2ludHMuZXJyb3JiYXJzKQogICAgICAgICAgICByZXR1cm47CgogICAgICAgIC8vIHgseSB2YWx1ZXMKICAgICAgICB2YXIgZm9ybWF0ID0gWwogICAgICAgICAgICB7IHg6IHRydWUsIG51bWJlcjogdHJ1ZSwgcmVxdWlyZWQ6IHRydWUgfSwKICAgICAgICAgICAgeyB5OiB0cnVlLCBudW1iZXI6IHRydWUsIHJlcXVpcmVkOiB0cnVlIH0KICAgICAgICBdOwoKICAgICAgICB2YXIgZXJyb3JzID0gc2VyaWVzLnBvaW50cy5lcnJvcmJhcnM7CiAgICAgICAgLy8gZXJyb3IgYmFycyAtIGZpcnN0IFggdGhlbiBZCiAgICAgICAgaWYgKGVycm9ycyA9PSAneCcgfHwgZXJyb3JzID09ICd4eScpIHsKICAgICAgICAgICAgLy8gbG93ZXIgLyB1cHBlciBlcnJvcgogICAgICAgICAgICBpZiAoc2VyaWVzLnBvaW50cy54ZXJyLmFzeW1tZXRyaWMpIHsKICAgICAgICAgICAgICAgIGZvcm1hdC5wdXNoKHsgeDogdHJ1ZSwgbnVtYmVyOiB0cnVlLCByZXF1aXJlZDogdHJ1ZSB9KTsKICAgICAgICAgICAgICAgIGZvcm1hdC5wdXNoKHsgeDogdHJ1ZSwgbnVtYmVyOiB0cnVlLCByZXF1aXJlZDogdHJ1ZSB9KTsKICAgICAgICAgICAgfSBlbHNlCiAgICAgICAgICAgICAgICBmb3JtYXQucHVzaCh7IHg6IHRydWUsIG51bWJlcjogdHJ1ZSwgcmVxdWlyZWQ6IHRydWUgfSk7CiAgICAgICAgfQogICAgICAgIGlmIChlcnJvcnMgPT0gJ3knIHx8IGVycm9ycyA9PSAneHknKSB7CiAgICAgICAgICAgIC8vIGxvd2VyIC8gdXBwZXIgZXJyb3IKICAgICAgICAgICAgaWYgKHNlcmllcy5wb2ludHMueWVyci5hc3ltbWV0cmljKSB7CiAgICAgICAgICAgICAgICBmb3JtYXQucHVzaCh7IHk6IHRydWUsIG51bWJlcjogdHJ1ZSwgcmVxdWlyZWQ6IHRydWUgfSk7CiAgICAgICAgICAgICAgICBmb3JtYXQucHVzaCh7IHk6IHRydWUsIG51bWJlcjogdHJ1ZSwgcmVxdWlyZWQ6IHRydWUgfSk7CiAgICAgICAgICAgIH0gZWxzZQogICAgICAgICAgICAgICAgZm9ybWF0LnB1c2goeyB5OiB0cnVlLCBudW1iZXI6IHRydWUsIHJlcXVpcmVkOiB0cnVlIH0pOwogICAgICAgIH0KICAgICAgICBkYXRhcG9pbnRzLmZvcm1hdCA9IGZvcm1hdDsKICAgIH0KCiAgICBmdW5jdGlvbiBwYXJzZUVycm9ycyhzZXJpZXMsIGkpewoKICAgICAgICB2YXIgcG9pbnRzID0gc2VyaWVzLmRhdGFwb2ludHMucG9pbnRzOwoKICAgICAgICAvLyByZWFkIGVycm9ycyBmcm9tIHBvaW50cyBhcnJheQogICAgICAgIHZhciBleGwgPSBudWxsLAogICAgICAgICAgICAgICAgZXh1ID0gbnVsbCwKICAgICAgICAgICAgICAgIGV5bCA9IG51bGwsCiAgICAgICAgICAgICAgICBleXUgPSBudWxsOwogICAgICAgIHZhciB4ZXJyID0gc2VyaWVzLnBvaW50cy54ZXJyLAogICAgICAgICAgICAgICAgeWVyciA9IHNlcmllcy5wb2ludHMueWVycjsKCiAgICAgICAgdmFyIGViID0gc2VyaWVzLnBvaW50cy5lcnJvcmJhcnM7CiAgICAgICAgLy8gZXJyb3IgYmFycyAtIGZpcnN0IFgKICAgICAgICBpZiAoZWIgPT0gJ3gnIHx8IGViID09ICd4eScpIHsKICAgICAgICAgICAgaWYgKHhlcnIuYXN5bW1ldHJpYykgewogICAgICAgICAgICAgICAgZXhsID0gcG9pbnRzW2kgKyAyXTsKICAgICAgICAgICAgICAgIGV4dSA9IHBvaW50c1tpICsgM107CiAgICAgICAgICAgICAgICBpZiAoZWIgPT0gJ3h5JykKICAgICAgICAgICAgICAgICAgICBpZiAoeWVyci5hc3ltbWV0cmljKXsKICAgICAgICAgICAgICAgICAgICAgICAgZXlsID0gcG9pbnRzW2kgKyA0XTsKICAgICAgICAgICAgICAgICAgICAgICAgZXl1ID0gcG9pbnRzW2kgKyA1XTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZXlsID0gcG9pbnRzW2kgKyA0XTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGV4bCA9IHBvaW50c1tpICsgMl07CiAgICAgICAgICAgICAgICBpZiAoZWIgPT0gJ3h5JykKICAgICAgICAgICAgICAgICAgICBpZiAoeWVyci5hc3ltbWV0cmljKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV5bCA9IHBvaW50c1tpICsgM107CiAgICAgICAgICAgICAgICAgICAgICAgIGV5dSA9IHBvaW50c1tpICsgNF07CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGV5bCA9IHBvaW50c1tpICsgM107CiAgICAgICAgICAgIH0KICAgICAgICAvLyBvbmx5IFkKICAgICAgICB9IGVsc2UgaWYgKGViID09ICd5JykKICAgICAgICAgICAgaWYgKHllcnIuYXN5bW1ldHJpYykgewogICAgICAgICAgICAgICAgZXlsID0gcG9pbnRzW2kgKyAyXTsKICAgICAgICAgICAgICAgIGV5dSA9IHBvaW50c1tpICsgM107CiAgICAgICAgICAgIH0gZWxzZSBleWwgPSBwb2ludHNbaSArIDJdOwoKICAgICAgICAvLyBzeW1tZXRyaWMgZXJyb3JzPwogICAgICAgIGlmIChleHUgPT0gbnVsbCkgZXh1ID0gZXhsOwogICAgICAgIGlmIChleXUgPT0gbnVsbCkgZXl1ID0gZXlsOwoKICAgICAgICB2YXIgZXJyUmFuZ2VzID0gW2V4bCwgZXh1LCBleWwsIGV5dV07CiAgICAgICAgLy8gbnVsbGlmeSBpZiBub3Qgc2hvd2luZwogICAgICAgIGlmICgheGVyci5zaG93KXsKICAgICAgICAgICAgZXJyUmFuZ2VzWzBdID0gbnVsbDsKICAgICAgICAgICAgZXJyUmFuZ2VzWzFdID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgaWYgKCF5ZXJyLnNob3cpewogICAgICAgICAgICBlcnJSYW5nZXNbMl0gPSBudWxsOwogICAgICAgICAgICBlcnJSYW5nZXNbM10gPSBudWxsOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZXJyUmFuZ2VzOwogICAgfQoKICAgIGZ1bmN0aW9uIGRyYXdTZXJpZXNFcnJvcnMocGxvdCwgY3R4LCBzKXsKCiAgICAgICAgdmFyIHBvaW50cyA9IHMuZGF0YXBvaW50cy5wb2ludHMsCiAgICAgICAgICAgICAgICBwcyA9IHMuZGF0YXBvaW50cy5wb2ludHNpemUsCiAgICAgICAgICAgICAgICBheCA9IFtzLnhheGlzLCBzLnlheGlzXSwKICAgICAgICAgICAgICAgIHJhZGl1cyA9IHMucG9pbnRzLnJhZGl1cywKICAgICAgICAgICAgICAgIGVyciA9IFtzLnBvaW50cy54ZXJyLCBzLnBvaW50cy55ZXJyXTsKCiAgICAgICAgLy9zYW5pdHkgY2hlY2ssIGluIGNhc2Ugc29tZSBpbnZlcnRlZCBheGlzIGhhY2sgaXMgYXBwbGllZCB0byBmbG90CiAgICAgICAgdmFyIGludmVydFggPSBmYWxzZTsKICAgICAgICBpZiAoYXhbMF0ucDJjKGF4WzBdLm1heCkgPCBheFswXS5wMmMoYXhbMF0ubWluKSkgewogICAgICAgICAgICBpbnZlcnRYID0gdHJ1ZTsKICAgICAgICAgICAgdmFyIHRtcCA9IGVyclswXS5sb3dlckNhcDsKICAgICAgICAgICAgZXJyWzBdLmxvd2VyQ2FwID0gZXJyWzBdLnVwcGVyQ2FwOwogICAgICAgICAgICBlcnJbMF0udXBwZXJDYXAgPSB0bXA7CiAgICAgICAgfQoKICAgICAgICB2YXIgaW52ZXJ0WSA9IGZhbHNlOwogICAgICAgIGlmIChheFsxXS5wMmMoYXhbMV0ubWluKSA8IGF4WzFdLnAyYyhheFsxXS5tYXgpKSB7CiAgICAgICAgICAgIGludmVydFkgPSB0cnVlOwogICAgICAgICAgICB2YXIgdG1wID0gZXJyWzFdLmxvd2VyQ2FwOwogICAgICAgICAgICBlcnJbMV0ubG93ZXJDYXAgPSBlcnJbMV0udXBwZXJDYXA7CiAgICAgICAgICAgIGVyclsxXS51cHBlckNhcCA9IHRtcDsKICAgICAgICB9CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5kYXRhcG9pbnRzLnBvaW50cy5sZW5ndGg7IGkgKz0gcHMpIHsKCiAgICAgICAgICAgIC8vcGFyc2UKICAgICAgICAgICAgdmFyIGVyclJhbmdlcyA9IHBhcnNlRXJyb3JzKHMsIGkpOwoKICAgICAgICAgICAgLy9jeWNsZSB4ZXJyICYgeWVycgogICAgICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IGVyci5sZW5ndGg7IGUrKyl7CgogICAgICAgICAgICAgICAgdmFyIG1pbm1heCA9IFtheFtlXS5taW4sIGF4W2VdLm1heF07CgogICAgICAgICAgICAgICAgLy9kcmF3IHRoaXMgZXJyb3I\/CiAgICAgICAgICAgICAgICBpZiAoZXJyUmFuZ2VzW2UgKiBlcnIubGVuZ3RoXSl7CgogICAgICAgICAgICAgICAgICAgIC8vZGF0YSBjb29yZGluYXRlcwogICAgICAgICAgICAgICAgICAgIHZhciB4ID0gcG9pbnRzW2ldLAogICAgICAgICAgICAgICAgICAgICAgICB5ID0gcG9pbnRzW2kgKyAxXTsKCiAgICAgICAgICAgICAgICAgICAgLy9lcnJvcmJhciByYW5nZXMKICAgICAgICAgICAgICAgICAgICB2YXIgdXBwZXIgPSBbeCwgeV1bZV0gKyBlcnJSYW5nZXNbZSAqIGVyci5sZW5ndGggKyAxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXIgPSBbeCwgeV1bZV0gLSBlcnJSYW5nZXNbZSAqIGVyci5sZW5ndGhdOwoKICAgICAgICAgICAgICAgICAgICAvL3BvaW50cyBvdXRzaWRlIG9mIHRoZSBjYW52YXMKICAgICAgICAgICAgICAgICAgICBpZiAoZXJyW2VdLmVyciA9PSAneCcpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ID4gYXhbMV0ubWF4IHx8IHkgPCBheFsxXS5taW4gfHwgdXBwZXIgPCBheFswXS5taW4gfHwgbG93ZXIgPiBheFswXS5tYXgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICBpZiAoZXJyW2VdLmVyciA9PSAneScpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4ID4gYXhbMF0ubWF4IHx8IHggPCBheFswXS5taW4gfHwgdXBwZXIgPCBheFsxXS5taW4gfHwgbG93ZXIgPiBheFsxXS5tYXgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKCiAgICAgICAgICAgICAgICAgICAgLy8gcHJldmVudCBlcnJvcmJhcnMgZ2V0dGluZyBvdXQgb2YgdGhlIGNhbnZhcwogICAgICAgICAgICAgICAgICAgIHZhciBkcmF3VXBwZXIgPSB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBkcmF3TG93ZXIgPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgICBpZiAodXBwZXIgPiBtaW5tYXhbMV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgZHJhd1VwcGVyID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyID0gbWlubWF4WzFdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAobG93ZXIgPCBtaW5tYXhbMF0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgZHJhd0xvd2VyID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyID0gbWlubWF4WzBdOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy9zYW5pdHkgY2hlY2ssIGluIGNhc2Ugc29tZSBpbnZlcnRlZCBheGlzIGhhY2sgaXMgYXBwbGllZCB0byBmbG90CiAgICAgICAgICAgICAgICAgICAgaWYgKChlcnJbZV0uZXJyID09ICd4JyAmJiBpbnZlcnRYKSB8fCAoZXJyW2VdLmVyciA9PSAneScgJiYgaW52ZXJ0WSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy9zd2FwIGNvb3JkaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBsb3dlcjsKICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXIgPSB1cHBlcjsKICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXIgPSB0bXA7CiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IGRyYXdMb3dlcjsKICAgICAgICAgICAgICAgICAgICAgICAgZHJhd0xvd2VyID0gZHJhd1VwcGVyOwogICAgICAgICAgICAgICAgICAgICAgICBkcmF3VXBwZXIgPSB0bXA7CiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IG1pbm1heFswXTsKICAgICAgICAgICAgICAgICAgICAgICAgbWlubWF4WzBdID0gbWlubWF4WzFdOwogICAgICAgICAgICAgICAgICAgICAgICBtaW5tYXhbMV0gPSB0bXA7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHRvIHBpeGVscwogICAgICAgICAgICAgICAgICAgIHggPSBheFswXS5wMmMoeCksCiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBheFsxXS5wMmMoeSksCiAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVyID0gYXhbZV0ucDJjKHVwcGVyKTsKICAgICAgICAgICAgICAgICAgICBsb3dlciA9IGF4W2VdLnAyYyhsb3dlcik7CiAgICAgICAgICAgICAgICAgICAgbWlubWF4WzBdID0gYXhbZV0ucDJjKG1pbm1heFswXSk7CiAgICAgICAgICAgICAgICAgICAgbWlubWF4WzFdID0gYXhbZV0ucDJjKG1pbm1heFsxXSk7CgogICAgICAgICAgICAgICAgICAgIC8vc2FtZSBzdHlsZSBhcyBwb2ludHMgYnkgZGVmYXVsdAogICAgICAgICAgICAgICAgICAgIHZhciBsdyA9IGVycltlXS5saW5lV2lkdGggPyBlcnJbZV0ubGluZVdpZHRoIDogcy5wb2ludHMubGluZVdpZHRoLAogICAgICAgICAgICAgICAgICAgICAgICBzdyA9IHMucG9pbnRzLnNoYWRvd1NpemUgIT0gbnVsbCA\/IHMucG9pbnRzLnNoYWRvd1NpemUgOiBzLnNoYWRvd1NpemU7CgogICAgICAgICAgICAgICAgICAgIC8vc2hhZG93IGFzIGZvciBwb2ludHMKICAgICAgICAgICAgICAgICAgICBpZiAobHcgPiAwICYmIHN3ID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdyA9IHN3IC8gMjsKICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IHc7CiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICJyZ2JhKDAsMCwwLDAuMSkiOwogICAgICAgICAgICAgICAgICAgICAgICBkcmF3RXJyb3IoY3R4LCBlcnJbZV0sIHgsIHksIHVwcGVyLCBsb3dlciwgZHJhd1VwcGVyLCBkcmF3TG93ZXIsIHJhZGl1cywgdyArIHcvMiwgbWlubWF4KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICJyZ2JhKDAsMCwwLDAuMikiOwogICAgICAgICAgICAgICAgICAgICAgICBkcmF3RXJyb3IoY3R4LCBlcnJbZV0sIHgsIHksIHVwcGVyLCBsb3dlciwgZHJhd1VwcGVyLCBkcmF3TG93ZXIsIHJhZGl1cywgdy8yLCBtaW5tYXgpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gZXJyW2VdLmNvbG9yPyBlcnJbZV0uY29sb3I6IHMuY29sb3I7CiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGx3OwogICAgICAgICAgICAgICAgICAgIC8vZHJhdyBpdAogICAgICAgICAgICAgICAgICAgIGRyYXdFcnJvcihjdHgsIGVycltlXSwgeCwgeSwgdXBwZXIsIGxvd2VyLCBkcmF3VXBwZXIsIGRyYXdMb3dlciwgcmFkaXVzLCAwLCBtaW5tYXgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGRyYXdFcnJvcihjdHgsZXJyLHgseSx1cHBlcixsb3dlcixkcmF3VXBwZXIsZHJhd0xvd2VyLHJhZGl1cyxvZmZzZXQsbWlubWF4KXsKCiAgICAgICAgLy9zaGFkb3cgb2Zmc2V0CiAgICAgICAgeSArPSBvZmZzZXQ7CiAgICAgICAgdXBwZXIgKz0gb2Zmc2V0OwogICAgICAgIGxvd2VyICs9IG9mZnNldDsKCiAgICAgICAgLy8gZXJyb3IgYmFyIC0gYXZvaWQgcGxvdHRpbmcgb3ZlciBjaXJjbGVzCiAgICAgICAgaWYgKGVyci5lcnIgPT0gJ3gnKXsKICAgICAgICAgICAgaWYgKHVwcGVyID4geCArIHJhZGl1cykgZHJhd1BhdGgoY3R4LCBbW3VwcGVyLHldLFtNYXRoLm1heCh4ICsgcmFkaXVzLG1pbm1heFswXSkseV1dKTsKICAgICAgICAgICAgZWxzZSBkcmF3VXBwZXIgPSBmYWxzZTsKICAgICAgICAgICAgaWYgKGxvd2VyIDwgeCAtIHJhZGl1cykgZHJhd1BhdGgoY3R4LCBbW01hdGgubWluKHggLSByYWRpdXMsbWlubWF4WzFdKSx5XSxbbG93ZXIseV1dICk7CiAgICAgICAgICAgIGVsc2UgZHJhd0xvd2VyID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZiAodXBwZXIgPCB5IC0gcmFkaXVzKSBkcmF3UGF0aChjdHgsIFtbeCx1cHBlcl0sW3gsTWF0aC5taW4oeSAtIHJhZGl1cyxtaW5tYXhbMF0pXV0gKTsKICAgICAgICAgICAgZWxzZSBkcmF3VXBwZXIgPSBmYWxzZTsKICAgICAgICAgICAgaWYgKGxvd2VyID4geSArIHJhZGl1cykgZHJhd1BhdGgoY3R4LCBbW3gsTWF0aC5tYXgoeSArIHJhZGl1cyxtaW5tYXhbMV0pXSxbeCxsb3dlcl1dICk7CiAgICAgICAgICAgIGVsc2UgZHJhd0xvd2VyID0gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICAvL2ludGVybmFsIHJhZGl1cyB2YWx1ZSBpbiBlcnJvcmJhciwgYWxsb3dzIHRvIHBsb3QgcmFkaXVzIDAgcG9pbnRzIGFuZCBzdGlsbCBrZWVwIHByb3BlciBzaXplZCBjYXBzCiAgICAgICAgLy90aGlzIGlzIGEgd2F5IHRvIGdldCBlcnJvcmJhcnMgb24gbGluZXMgd2l0aG91dCB2aXNpYmxlIGNvbm5lY3RpbmcgZG90cwogICAgICAgIHJhZGl1cyA9IGVyci5yYWRpdXMgIT0gbnVsbD8gZXJyLnJhZGl1czogcmFkaXVzOwoKICAgICAgICAvLyB1cHBlciBjYXAKICAgICAgICBpZiAoZHJhd1VwcGVyKSB7CiAgICAgICAgICAgIGlmIChlcnIudXBwZXJDYXAgPT0gJy0nKXsKICAgICAgICAgICAgICAgIGlmIChlcnIuZXJyPT0neCcpIGRyYXdQYXRoKGN0eCwgW1t1cHBlcix5IC0gcmFkaXVzXSxbdXBwZXIseSArIHJhZGl1c11dICk7CiAgICAgICAgICAgICAgICBlbHNlIGRyYXdQYXRoKGN0eCwgW1t4IC0gcmFkaXVzLHVwcGVyXSxbeCArIHJhZGl1cyx1cHBlcl1dICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoJC5pc0Z1bmN0aW9uKGVyci51cHBlckNhcCkpewogICAgICAgICAgICAgICAgaWYgKGVyci5lcnI9PSd4JykgZXJyLnVwcGVyQ2FwKGN0eCwgdXBwZXIsIHksIHJhZGl1cyk7CiAgICAgICAgICAgICAgICBlbHNlIGVyci51cHBlckNhcChjdHgsIHgsIHVwcGVyLCByYWRpdXMpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIGxvd2VyIGNhcAogICAgICAgIGlmIChkcmF3TG93ZXIpIHsKICAgICAgICAgICAgaWYgKGVyci5sb3dlckNhcCA9PSAnLScpewogICAgICAgICAgICAgICAgaWYgKGVyci5lcnI9PSd4JykgZHJhd1BhdGgoY3R4LCBbW2xvd2VyLHkgLSByYWRpdXNdLFtsb3dlcix5ICsgcmFkaXVzXV0gKTsKICAgICAgICAgICAgICAgIGVsc2UgZHJhd1BhdGgoY3R4LCBbW3ggLSByYWRpdXMsbG93ZXJdLFt4ICsgcmFkaXVzLGxvd2VyXV0gKTsKICAgICAgICAgICAgfSBlbHNlIGlmICgkLmlzRnVuY3Rpb24oZXJyLmxvd2VyQ2FwKSl7CiAgICAgICAgICAgICAgICBpZiAoZXJyLmVycj09J3gnKSBlcnIubG93ZXJDYXAoY3R4LCBsb3dlciwgeSwgcmFkaXVzKTsKICAgICAgICAgICAgICAgIGVsc2UgZXJyLmxvd2VyQ2FwKGN0eCwgeCwgbG93ZXIsIHJhZGl1cyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZHJhd1BhdGgoY3R4LCBwdHMpewogICAgICAgIGN0eC5iZWdpblBhdGgoKTsKICAgICAgICBjdHgubW92ZVRvKHB0c1swXVswXSwgcHRzWzBdWzFdKTsKICAgICAgICBmb3IgKHZhciBwPTE7IHAgPCBwdHMubGVuZ3RoOyBwKyspCiAgICAgICAgICAgIGN0eC5saW5lVG8ocHRzW3BdWzBdLCBwdHNbcF1bMV0pOwogICAgICAgIGN0eC5zdHJva2UoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBkcmF3KHBsb3QsIGN0eCl7CiAgICAgICAgdmFyIHBsb3RPZmZzZXQgPSBwbG90LmdldFBsb3RPZmZzZXQoKTsKCiAgICAgICAgY3R4LnNhdmUoKTsKICAgICAgICBjdHgudHJhbnNsYXRlKHBsb3RPZmZzZXQubGVmdCwgcGxvdE9mZnNldC50b3ApOwogICAgICAgICQuZWFjaChwbG90LmdldERhdGEoKSwgZnVuY3Rpb24gKGksIHMpIHsKICAgICAgICAgICAgaWYgKHMucG9pbnRzLmVycm9yYmFycyAmJiAocy5wb2ludHMueGVyci5zaG93IHx8IHMucG9pbnRzLnllcnIuc2hvdykpCiAgICAgICAgICAgICAgICBkcmF3U2VyaWVzRXJyb3JzKHBsb3QsIGN0eCwgcyk7CiAgICAgICAgfSk7CiAgICAgICAgY3R4LnJlc3RvcmUoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpbml0KHBsb3QpIHsKICAgICAgICBwbG90Lmhvb2tzLnByb2Nlc3NSYXdEYXRhLnB1c2gocHJvY2Vzc1Jhd0RhdGEpOwogICAgICAgIHBsb3QuaG9va3MuZHJhdy5wdXNoKGRyYXcpOwogICAgfQoKICAgICQucGxvdC5wbHVnaW5zLnB1c2goewogICAgICAgICAgICAgICAgaW5pdDogaW5pdCwKICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsCiAgICAgICAgICAgICAgICBuYW1lOiAnZXJyb3JiYXJzJywKICAgICAgICAgICAgICAgIHZlcnNpb246ICcxLjAnCiAgICAgICAgICAgIH0pOwp9KShqUXVlcnkpOwo=",
    "size": "12614"
}