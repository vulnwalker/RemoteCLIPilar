{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/jquery-validation\/src\/core.js",
    "lastUpdate": "2018-03-22+14:26:21.36",
    "contentFile": "\/XHsoXGQrKVx9L2c7CgkJCWlmICggdHlwZW9mIG1lc3NhZ2UgPT09ICJmdW5jdGlvbiIgKSB7CgkJCQltZXNzYWdlID0gbWVzc2FnZS5jYWxsKCB0aGlzLCBydWxlLnBhcmFtZXRlcnMsIGVsZW1lbnQgKTsKCQkJfSBlbHNlIGlmICggdGhlcmVnZXgudGVzdCggbWVzc2FnZSApICkgewoJCQkJbWVzc2FnZSA9ICQudmFsaWRhdG9yLmZvcm1hdCggbWVzc2FnZS5yZXBsYWNlKCB0aGVyZWdleCwgInskMX0iICksIHJ1bGUucGFyYW1ldGVycyApOwoJCQl9CgkJCXRoaXMuZXJyb3JMaXN0LnB1c2goewoJCQkJbWVzc2FnZTogbWVzc2FnZSwKCQkJCWVsZW1lbnQ6IGVsZW1lbnQsCgkJCQltZXRob2Q6IHJ1bGUubWV0aG9kCgkJCX0pOwoKCQkJdGhpcy5lcnJvck1hcFsgZWxlbWVudC5uYW1lIF0gPSBtZXNzYWdlOwoJCQl0aGlzLnN1Ym1pdHRlZFsgZWxlbWVudC5uYW1lIF0gPSBtZXNzYWdlOwoJCX0sCgoJCWFkZFdyYXBwZXI6IGZ1bmN0aW9uKCB0b1RvZ2dsZSApIHsKCQkJaWYgKCB0aGlzLnNldHRpbmdzLndyYXBwZXIgKSB7CgkJCQl0b1RvZ2dsZSA9IHRvVG9nZ2xlLmFkZCggdG9Ub2dnbGUucGFyZW50KCB0aGlzLnNldHRpbmdzLndyYXBwZXIgKSApOwoJCQl9CgkJCXJldHVybiB0b1RvZ2dsZTsKCQl9LAoKCQlkZWZhdWx0U2hvd0Vycm9yczogZnVuY3Rpb24oKSB7CgkJCXZhciBpLCBlbGVtZW50cywgZXJyb3I7CgkJCWZvciAoIGkgPSAwOyB0aGlzLmVycm9yTGlzdFsgaSBdOyBpKysgKSB7CgkJCQllcnJvciA9IHRoaXMuZXJyb3JMaXN0WyBpIF07CgkJCQlpZiAoIHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0ICkgewoJCQkJCXRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVycm9yLmVsZW1lbnQsIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7CgkJCQl9CgkJCQl0aGlzLnNob3dMYWJlbCggZXJyb3IuZWxlbWVudCwgZXJyb3IubWVzc2FnZSApOwoJCQl9CgkJCWlmICggdGhpcy5lcnJvckxpc3QubGVuZ3RoICkgewoJCQkJdGhpcy50b1Nob3cgPSB0aGlzLnRvU2hvdy5hZGQoIHRoaXMuY29udGFpbmVycyApOwoJCQl9CgkJCWlmICggdGhpcy5zZXR0aW5ncy5zdWNjZXNzICkgewoJCQkJZm9yICggaSA9IDA7IHRoaXMuc3VjY2Vzc0xpc3RbIGkgXTsgaSsrICkgewoJCQkJCXRoaXMuc2hvd0xhYmVsKCB0aGlzLnN1Y2Nlc3NMaXN0WyBpIF0gKTsKCQkJCX0KCQkJfQoJCQlpZiAoIHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQgKSB7CgkJCQlmb3IgKCBpID0gMCwgZWxlbWVudHMgPSB0aGlzLnZhbGlkRWxlbWVudHMoKTsgZWxlbWVudHNbIGkgXTsgaSsrICkgewoJCQkJCXRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudHNbIGkgXSwgdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKTsKCQkJCX0KCQkJfQoJCQl0aGlzLnRvSGlkZSA9IHRoaXMudG9IaWRlLm5vdCggdGhpcy50b1Nob3cgKTsKCQkJdGhpcy5oaWRlRXJyb3JzKCk7CgkJCXRoaXMuYWRkV3JhcHBlciggdGhpcy50b1Nob3cgKS5zaG93KCk7CgkJfSwKCgkJdmFsaWRFbGVtZW50czogZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLmN1cnJlbnRFbGVtZW50cy5ub3QoIHRoaXMuaW52YWxpZEVsZW1lbnRzKCkgKTsKCQl9LAoKCQlpbnZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gJCggdGhpcy5lcnJvckxpc3QgKS5tYXAoZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gdGhpcy5lbGVtZW50OwoJCQl9KTsKCQl9LAoKCQlzaG93TGFiZWw6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXNzYWdlICkgewoJCQl2YXIgcGxhY2UsIGdyb3VwLCBlcnJvcklELAoJCQkJZXJyb3IgPSB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApLAoJCQkJZWxlbWVudElEID0gdGhpcy5pZE9yTmFtZSggZWxlbWVudCApLAoJCQkJZGVzY3JpYmVkQnkgPSAkKCBlbGVtZW50ICkuYXR0ciggImFyaWEtZGVzY3JpYmVkYnkiICk7CgkJCWlmICggZXJyb3IubGVuZ3RoICkgewoJCQkJLy8gcmVmcmVzaCBlcnJvci9zdWNjZXNzIGNsYXNzCgkJCQllcnJvci5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICkuYWRkQ2xhc3MoIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcyApOwoJCQkJLy8gcmVwbGFjZSBtZXNzYWdlIG9uIGV4aXN0aW5nIGxhYmVsCgkJCQllcnJvci5odG1sKCBtZXNzYWdlICk7CgkJCX0gZWxzZSB7CgkJCQkvLyBjcmVhdGUgZXJyb3IgZWxlbWVudAoJCQkJZXJyb3IgPSAkKCAiPCIgKyB0aGlzLnNldHRpbmdzLmVycm9yRWxlbWVudCArICI+IiApCgkJCQkJLmF0dHIoICJpZCIsIGVsZW1lbnRJRCArICItZXJyb3IiICkKCQkJCQkuYWRkQ2xhc3MoIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcyApCgkJCQkJLmh0bWwoIG1lc3NhZ2UgfHwgIiIgKTsKCgkJCQkvLyBNYWludGFpbiByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgdG8gYmUgcGxhY2VkIGludG8gdGhlIERPTQoJCQkJcGxhY2UgPSBlcnJvcjsKCQkJCWlmICggdGhpcy5zZXR0aW5ncy53cmFwcGVyICkgewoJCQkJCS8vIG1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlLCBldmVuIGluIElFCgkJCQkJLy8gYWN0dWFsbHkgc2hvd2luZyB0aGUgd3JhcHBlZCBlbGVtZW50IGlzIGhhbmRsZWQgZWxzZXdoZXJlCgkJCQkJcGxhY2UgPSBlcnJvci5oaWRlKCkuc2hvdygpLndyYXAoICI8IiArIHRoaXMuc2V0dGluZ3Mud3JhcHBlciArICIvPiIgKS5wYXJlbnQoKTsKCQkJCX0KCQkJCWlmICggdGhpcy5sYWJlbENvbnRhaW5lci5sZW5ndGggKSB7CgkJCQkJdGhpcy5sYWJlbENvbnRhaW5lci5hcHBlbmQoIHBsYWNlICk7CgkJCQl9IGVsc2UgaWYgKCB0aGlzLnNldHRpbmdzLmVycm9yUGxhY2VtZW50ICkgewoJCQkJCXRoaXMuc2V0dGluZ3MuZXJyb3JQbGFjZW1lbnQoIHBsYWNlLCAkKCBlbGVtZW50ICkgKTsKCQkJCX0gZWxzZSB7CgkJCQkJcGxhY2UuaW5zZXJ0QWZ0ZXIoIGVsZW1lbnQgKTsKCQkJCX0KCgkJCQkvLyBMaW5rIGVycm9yIGJhY2sgdG8gdGhlIGVsZW1lbnQKCQkJCWlmICggZXJyb3IuaXMoICJsYWJlbCIgKSApIHsKCQkJCQkvLyBJZiB0aGUgZXJyb3IgaXMgYSBsYWJlbCwgdGhlbiBhc3NvY2lhdGUgdXNpbmcgJ2ZvcicKCQkJCQllcnJvci5hdHRyKCAiZm9yIiwgZWxlbWVudElEICk7CgkJCQl9IGVsc2UgaWYgKCBlcnJvci5wYXJlbnRzKCAibGFiZWxbZm9yPSciICsgZWxlbWVudElEICsgIiddIiApLmxlbmd0aCA9PT0gMCApIHsKCQkJCQkvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYSBjaGlsZCBvZiBhbiBhc3NvY2lhdGVkIGxhYmVsLCB0aGVuIGl0J3MgbmVjZXNzYXJ5CgkJCQkJLy8gdG8gZXhwbGljaXRseSBhcHBseSBhcmlhLWRlc2NyaWJlZGJ5CgoJCQkJCWVycm9ySUQgPSBlcnJvci5hdHRyKCAiaWQiICkucmVwbGFjZSggLyg6fFwufFxbfFxdKS9nLCAiXFwkMSIpOwoJCQkJCS8vIFJlc3BlY3QgZXhpc3Rpbmcgbm9uLWVycm9yIGFyaWEtZGVzY3JpYmVkYnkKCQkJCQlpZiAoICFkZXNjcmliZWRCeSApIHsKCQkJCQkJZGVzY3JpYmVkQnkgPSBlcnJvcklEOwoJCQkJCX0gZWxzZSBpZiAoICFkZXNjcmliZWRCeS5tYXRjaCggbmV3IFJlZ0V4cCggIlxcYiIgKyBlcnJvcklEICsgIlxcYiIgKSApICkgewoJCQkJCQkvLyBBZGQgdG8gZW5kIG9mIGxpc3QgaWYgbm90IGFscmVhZHkgcHJlc2VudAoJCQkJCQlkZXNjcmliZWRCeSArPSAiICIgKyBlcnJvcklEOwoJCQkJCX0KCQkJCQkkKCBlbGVtZW50ICkuYXR0ciggImFyaWEtZGVzY3JpYmVkYnkiLCBkZXNjcmliZWRCeSApOwoKCQkJCQkvLyBJZiB0aGlzIGVsZW1lbnQgaXMgZ3JvdXBlZCwgdGhlbiBhc3NpZ24gdG8gYWxsIGVsZW1lbnRzIGluIHRoZSBzYW1lIGdyb3VwCgkJCQkJZ3JvdXAgPSB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF07CgkJCQkJaWYgKCBncm91cCApIHsKCQkJCQkJJC5lYWNoKCB0aGlzLmdyb3VwcywgZnVuY3Rpb24oIG5hbWUsIHRlc3Rncm91cCApIHsKCQkJCQkJCWlmICggdGVzdGdyb3VwID09PSBncm91cCApIHsKCQkJCQkJCQkkKCAiW25hbWU9JyIgKyBuYW1lICsgIiddIiwgdGhpcy5jdXJyZW50Rm9ybSApCgkJCQkJCQkJCS5hdHRyKCAiYXJpYS1kZXNjcmliZWRieSIsIGVycm9yLmF0dHIoICJpZCIgKSApOwoJCQkJCQkJfQoJCQkJCQl9KTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJaWYgKCAhbWVzc2FnZSAmJiB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgKSB7CgkJCQllcnJvci50ZXh0KCAiIiApOwoJCQkJaWYgKCB0eXBlb2YgdGhpcy5zZXR0aW5ncy5zdWNjZXNzID09PSAic3RyaW5nIiApIHsKCQkJCQllcnJvci5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5zdWNjZXNzICk7CgkJCQl9IGVsc2UgewoJCQkJCXRoaXMuc2V0dGluZ3Muc3VjY2VzcyggZXJyb3IsIGVsZW1lbnQgKTsKCQkJCX0KCQkJfQoJCQl0aGlzLnRvU2hvdyA9IHRoaXMudG9TaG93LmFkZCggZXJyb3IgKTsKCQl9LAoKCQllcnJvcnNGb3I6IGZ1bmN0aW9uKCBlbGVtZW50ICkgewoJCQl2YXIgbmFtZSA9IHRoaXMuaWRPck5hbWUoIGVsZW1lbnQgKSwKCQkJCWRlc2NyaWJlciA9ICQoIGVsZW1lbnQgKS5hdHRyKCAiYXJpYS1kZXNjcmliZWRieSIgKSwKCQkJCXNlbGVjdG9yID0gImxhYmVsW2Zvcj0nIiArIG5hbWUgKyAiJ10sIGxhYmVsW2Zvcj0nIiArIG5hbWUgKyAiJ10gKiI7CgoJCQkvLyBhcmlhLWRlc2NyaWJlZGJ5IHNob3VsZCBkaXJlY3RseSByZWZlcmVuY2UgdGhlIGVycm9yIGVsZW1lbnQKCQkJaWYgKCBkZXNjcmliZXIgKSB7CgkJCQlzZWxlY3RvciA9IHNlbGVjdG9yICsgIiwgIyIgKyBkZXNjcmliZXIucmVwbGFjZSggL1xzKy9nLCAiLCAjIiApOwoJCQl9CgkJCXJldHVybiB0aGlzCgkJCQkuZXJyb3JzKCkKCQkJCS5maWx0ZXIoIHNlbGVjdG9yICk7CgkJfSwKCgkJaWRPck5hbWU6IGZ1bmN0aW9uKCBlbGVtZW50ICkgewoJCQlyZXR1cm4gdGhpcy5ncm91cHNbIGVsZW1lbnQubmFtZSBdIHx8ICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSA\\/IG1lc3NhZ2UgOiAkLnZhbGlkYXRvci5tZXNzYWdlc1sgbmFtZSBdOwoJCWlmICggbWV0aG9kLmxlbmd0aCA8IDMgKSB7CgkJCSQudmFsaWRhdG9yLmFkZENsYXNzUnVsZXMoIG5hbWUsICQudmFsaWRhdG9yLm5vcm1hbGl6ZVJ1bGUoIG5hbWUgKSApOwoJCX0KCX0sCgoJbWV0aG9kczogewoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmVxdWlyZWQtbWV0aG9kLwoJCXJlcXVpcmVkOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkgewoJCQkvLyBjaGVjayBpZiBkZXBlbmRlbmN5IGlzIG1ldAoJCQlpZiAoICF0aGlzLmRlcGVuZCggcGFyYW0sIGVsZW1lbnQgKSApIHsKCQkJCXJldHVybiAiZGVwZW5kZW5jeS1taXNtYXRjaCI7CgkJCX0KCQkJaWYgKCBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJzZWxlY3QiICkgewoJCQkJLy8gY291bGQgYmUgYW4gYXJyYXkgZm9yIHNlbGVjdC1tdWx0aXBsZSBvciBhIHN0cmluZywgYm90aCBhcmUgZmluZSB0aGlzIHdheQoJCQkJdmFyIHZhbCA9ICQoIGVsZW1lbnQgKS52YWwoKTsKCQkJCXJldHVybiB2YWwgJiYgdmFsLmxlbmd0aCA+IDA7CgkJCX0KCQkJaWYgKCB0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApICkgewoJCQkJcmV0dXJuIHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApID4gMDsKCQkJfQoJCQlyZXR1cm4gJC50cmltKCB2YWx1ZSApLmxlbmd0aCA+IDA7CgkJfSwKCgkJLy8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2VtYWlsLW1ldGhvZC8KCQllbWFpbDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkgewoJCQkvLyBGcm9tIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3N0YXRlcy1vZi10aGUtdHlwZS1hdHRyaWJ1dGUuaHRtbCNlLW1haWwtc3RhdGUtJTI4dHlwZT1lbWFpbCUyOQoJCQkvLyBSZXRyaWV2ZWQgMjAxNC0wMS0xNAoJCQkvLyBJZiB5b3UgaGF2ZSBhIHByb2JsZW0gd2l0aCB0aGlzIGltcGxlbWVudGF0aW9uLCByZXBvcnQgYSBidWcgYWdhaW5zdCB0aGUgYWJvdmUgc3BlYwoJCQkvLyBPciB1c2UgY3VzdG9tIG1ldGhvZHMgdG8gaW1wbGVtZW50IHlvdXIgb3duIGVtYWlsIHZhbGlkYXRpb24KCQkJcmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlthLXpBLVowLTkuISMkJSYnKitcLz0\/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg\/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykqJC8udGVzdCggdmFsdWUgKTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdXJsLW1ldGhvZC8KCQl1cmw6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHsKCQkJLy8gY29udHJpYnV0ZWQgYnkgU2NvdHQgR29uemFsZXo6IGh0dHA6Ly9wcm9qZWN0cy5zY290dHNwbGF5Z3JvdW5kLmNvbS9pcmkvCgkJCXJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oaHR0cHM\/fHM\/ZnRwKTpcL1wvKCgoKFthLXpdfFxkfC18XC58X3x+fFtcdTAwQTAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdKXwoJVtcZGEtZl17Mn0pfFshXCQmJ1woXClcKlwrLDs9XXw6KSpAKT8oKChcZHxbMS05XVxkfDFcZFxkfDJbMC00XVxkfDI1WzAtNV0pXC4oXGR8WzEtOV1cZHwxXGRcZHwyWzAtNF1cZHwyNVswLTVdKVwuKFxkfFsxLTldXGR8MVxkXGR8MlswLTRdXGR8MjVbMC01XSlcLihcZHxbMS05XVxkfDFcZFxkfDJbMC00XVxkfDI1WzAtNV0pKXwoKChbYS16XXxcZHxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSl8KChbYS16XXxcZHxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSkoW2Etel18XGR8LXxcLnxffH58W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pKihbYS16XXxcZHxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSkpKVwuKSsoKFthLXpdfFtcdTAwQTAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdKXwoKFthLXpdfFtcdTAwQTAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdKShbYS16XXxcZHwtfFwufF98fnxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSkqKFthLXpdfFtcdTAwQTAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdKSkpXC4\/KSg6XGQqKT8pKFwvKCgoW2Etel18XGR8LXxcLnxffH58W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pfCglW1xkYS1mXXsyfSl8WyFcJCYnXChcKVwqXCssOz1dfDp8QCkrKFwvKChbYS16XXxcZHwtfFwufF98fnxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSl8KCVbXGRhLWZdezJ9KXxbIVwkJidcKFwpXCpcKyw7PV18OnxAKSopKik\/KT8oXD8oKChbYS16XXxcZHwtfFwufF98fnxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSl8KCVbXGRhLWZdezJ9KXxbIVwkJidcKFwpXCpcKyw7PV18OnxAKXxbXHVFMDAwLVx1RjhGRl18XC98XD8pKik\/KCMoKChbYS16XXxcZHwtfFwufF98fnxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSl8KCVbXGRhLWZdezJ9KXxbIVwkJidcKFwpXCpcKyw7PV18OnxAKXxcL3xcPykqKT8kL2kudGVzdCggdmFsdWUgKTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGF0ZS1tZXRob2QvCgkJZGF0ZTogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkgewoJCQlyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8ICEvSW52YWxpZHxOYU4vLnRlc3QoIG5ldyBEYXRlKCB2YWx1ZSApLnRvU3RyaW5nKCkgKTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGF0ZUlTTy1tZXRob2QvCgkJZGF0ZUlTTzogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkgewoJCQlyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXGR7NH1bXC9cLV0oMD9bMS05XXwxWzAxMl0pW1wvXC1dKDA\/WzEtOV18WzEyXVswLTldfDNbMDFdKSQvLnRlc3QoIHZhbHVlICk7CgkJfSwKCgkJLy8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL251bWJlci1tZXRob2QvCgkJbnVtYmVyOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7CgkJCXJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14tPyg\/OlxkK3xcZHsxLDN9KD86LFxkezN9KSspPyg\/OlwuXGQrKT8kLy50ZXN0KCB2YWx1ZSApOwoJCX0sCgoJCS8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9kaWdpdHMtbWV0aG9kLwoJCWRpZ2l0czogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkgewoJCQlyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXGQrJC8udGVzdCggdmFsdWUgKTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvY3JlZGl0Y2FyZC1tZXRob2QvCgkJLy8gYmFzZWQgb24gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MdWhuLwoJCWNyZWRpdGNhcmQ6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHsKCQkJaWYgKCB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSB7CgkJCQlyZXR1cm4gImRlcGVuZGVuY3ktbWlzbWF0Y2giOwoJCQl9CgkJCS8vIGFjY2VwdCBvbmx5IHNwYWNlcywgZGlnaXRzIGFuZCBkYXNoZXMKCQkJaWYgKCAvW14wLTkgXC1dKy8udGVzdCggdmFsdWUgKSApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCQl2YXIgbkNoZWNrID0gMCwKCQkJCW5EaWdpdCA9IDAsCgkJCQliRXZlbiA9IGZhbHNlLAoJCQkJbiwgY0RpZ2l0OwoKCQkJdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCAvXEQvZywgIiIgKTsKCgkJCS8vIEJhc2luZyBtaW4gYW5kIG1heCBsZW5ndGggb24KCQkJLy8gaHR0cDovL2RldmVsb3Blci5lYW4uY29tL2dlbmVyYWxfaW5mby9WYWxpZF9DcmVkaXRfQ2FyZF9UeXBlcwoJCQlpZiAoIHZhbHVlLmxlbmd0aCA8IDEzIHx8IHZhbHVlLmxlbmd0aCA+IDE5ICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQlmb3IgKCBuID0gdmFsdWUubGVuZ3RoIC0gMTsgbiA+PSAwOyBuLS0pIHsKCQkJCWNEaWdpdCA9IHZhbHVlLmNoYXJBdCggbiApOwoJCQkJbkRpZ2l0ID0gcGFyc2VJbnQoIGNEaWdpdCwgMTAgKTsKCQkJCWlmICggYkV2ZW4gKSB7CgkJCQkJaWYgKCAoIG5EaWdpdCAqPSAyICkgPiA5ICkgewoJCQkJCQluRGlnaXQgLT0gOTsKCQkJCQl9CgkJCQl9CgkJCQluQ2hlY2sgKz0gbkRpZ2l0OwoJCQkJYkV2ZW4gPSAhYkV2ZW47CgkJCX0KCgkJCXJldHVybiAoIG5DaGVjayAlIDEwICkgPT09IDA7CgkJfSwKCgkJLy8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL21pbmxlbmd0aC1tZXRob2QvCgkJbWlubGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkgewoJCQl2YXIgbGVuZ3RoID0gJC5pc0FycmF5KCB2YWx1ZSApID8gdmFsdWUubGVuZ3RoIDogdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICk7CgkJCXJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgbGVuZ3RoID49IHBhcmFtOwoJCX0sCgoJCS8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9tYXhsZW5ndGgtbWV0aG9kLwoJCW1heGxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHsKCQkJdmFyIGxlbmd0aCA9ICQuaXNBcnJheSggdmFsdWUgKSA\/IHZhbHVlLmxlbmd0aCA6IHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApOwoJCQlyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IGxlbmd0aCA8PSBwYXJhbTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmFuZ2VsZW5ndGgtbWV0aG9kLwoJCXJhbmdlbGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkgewoJCQl2YXIgbGVuZ3RoID0gJC5pc0FycmF5KCB2YWx1ZSApID8gdmFsdWUubGVuZ3RoIDogdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICk7CgkJCXJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgKCBsZW5ndGggPj0gcGFyYW1bIDAgXSAmJiBsZW5ndGggPD0gcGFyYW1bIDEgXSApOwoJCX0sCgoJCS8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9taW4tbWV0aG9kLwoJCW1pbjogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHsKCQkJcmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCB2YWx1ZSA+PSBwYXJhbTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWF4LW1ldGhvZC8KCQltYXg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7CgkJCXJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsdWUgPD0gcGFyYW07CgkJfSwKCgkJLy8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JhbmdlLW1ldGhvZC8KCQlyYW5nZTogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHsKCQkJcmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAoIHZhbHVlID49IHBhcmFtWyAwIF0gJiYgdmFsdWUgPD0gcGFyYW1bIDEgXSApOwoJCX0sCgoJCS8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9lcXVhbFRvLW1ldGhvZC8KCQllcXVhbFRvOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkgewoJCQkvLyBiaW5kIHRvIHRoZSBibHVyIGV2ZW50IG9mIHRoZSB0YXJnZXQgaW4gb3JkZXIgdG8gcmV2YWxpZGF0ZSB3aGVuZXZlciB0aGUgdGFyZ2V0IGZpZWxkIGlzIHVwZGF0ZWQKCQkJLy8gVE9ETyBmaW5kIGEgd2F5IHRvIGJpbmQgdGhlIGV2ZW50IGp1c3Qgb25jZSwgYXZvaWRpbmcgdGhlIHVuYmluZC1yZWJpbmQgb3ZlcmhlYWQKCQkJdmFyIHRhcmdldCA9ICQoIHBhcmFtICk7CgkJCWlmICggdGhpcy5zZXR0aW5ncy5vbmZvY3Vzb3V0ICkgewoJCQkJdGFyZ2V0LnVuYmluZCggIi52YWxpZGF0ZS1lcXVhbFRvIiApLmJpbmQoICJibHVyLnZhbGlkYXRlLWVxdWFsVG8iLCBmdW5jdGlvbigpIHsKCQkJCQkkKCBlbGVtZW50ICkudmFsaWQoKTsKCQkJCX0pOwoJCQl9CgkJCXJldHVybiB2YWx1ZSA9PT0gdGFyZ2V0LnZhbCgpOwoJCX0sCgoJCS8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9yZW1vdGUtbWV0aG9kLwoJCXJlbW90ZTogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHsKCQkJaWYgKCB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSB7CgkJCQlyZXR1cm4gImRlcGVuZGVuY3ktbWlzbWF0Y2giOwoJCQl9CgoJCQl2YXIgcHJldmlvdXMgPSB0aGlzLnByZXZpb3VzVmFsdWUoIGVsZW1lbnQgKSwKCQkJCXZhbGlkYXRvciwgZGF0YTsKCgkJCWlmICghdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0gKSB7CgkJCQl0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSA9IHt9OwoJCQl9CgkJCXByZXZpb3VzLm9yaWdpbmFsTWVzc2FnZSA9IHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdLnJlbW90ZTsKCQkJdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0ucmVtb3RlID0gcHJldmlvdXMubWVzc2FnZTsKCgkJCXBhcmFtID0gdHlwZW9mIHBhcmFtID09PSAic3RyaW5nIiAmJiB7IHVybDogcGFyYW0gfSB8fCBwYXJhbTsKCgkJCWlmICggcHJldmlvdXMub2xkID09PSB2YWx1ZSApIHsKCQkJCXJldHVybiBwcmV2aW91cy52YWxpZDsKCQkJfQoKCQkJcHJldmlvdXMub2xkID0gdmFsdWU7CgkJCXZhbGlkYXRvciA9IHRoaXM7CgkJCXRoaXMuc3RhcnRSZXF1ZXN0KCBlbGVtZW50ICk7CgkJCWRhdGEgPSB7fTsKCQkJZGF0YVsgZWxlbWVudC5uYW1lIF0gPSB2YWx1ZTsKCQkJJC5hamF4KCAkLmV4dGVuZCggdHJ1ZSwgewoJCQkJdXJsOiBwYXJhbSwKCQkJCW1vZGU6ICJhYm9ydCIsCgkJCQlwb3J0OiAidmFsaWRhdGUiICsgZWxlbWVudC5uYW1lLAoJCQkJZGF0YVR5cGU6ICJqc29uIiwKCQkJCWRhdGE6IGRhdGEsCgkJCQljb250ZXh0OiB2YWxpZGF0b3IuY3VycmVudEZvcm0sCgkJCQlzdWNjZXNzOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7CgkJCQkJdmFyIHZhbGlkID0gcmVzcG9uc2UgPT09IHRydWUgfHwgcmVzcG9uc2UgPT09ICJ0cnVlIiwKCQkJCQkJZXJyb3JzLCBtZXNzYWdlLCBzdWJtaXR0ZWQ7CgoJCQkJCXZhbGlkYXRvci5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0ucmVtb3RlID0gcHJldmlvdXMub3JpZ2luYWxNZXNzYWdlOwoJCQkJCWlmICggdmFsaWQgKSB7CgkJCQkJCXN1Ym1pdHRlZCA9IHZhbGlkYXRvci5mb3JtU3VibWl0dGVkOwoJCQkJCQl2YWxpZGF0b3IucHJlcGFyZUVsZW1lbnQoIGVsZW1lbnQgKTsKCQkJCQkJdmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQgPSBzdWJtaXR0ZWQ7CgkJCQkJCXZhbGlkYXRvci5zdWNjZXNzTGlzdC5wdXNoKCBlbGVtZW50ICk7CgkJCQkJCWRlbGV0ZSB2YWxpZGF0b3IuaW52YWxpZFsgZWxlbWVudC5uYW1lIF07CgkJCQkJCXZhbGlkYXRvci5zaG93RXJyb3JzKCk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJZXJyb3JzID0ge307CgkJCQkJCW1lc3NhZ2UgPSByZXNwb25zZSB8fCB2YWxpZGF0b3IuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsICJyZW1vdGUiICk7CgkJCQkJCWVycm9yc1sgZWxlbWVudC5uYW1lIF0gPSBwcmV2aW91cy5tZXNzYWdlID0gJC5pc0Z1bmN0aW9uKCBtZXNzYWdlICkgPyBtZXNzYWdlKCB2YWx1ZSApIDogbWVzc2FnZTsKCQkJCQkJdmFsaWRhdG9yLmludmFsaWRbIGVsZW1lbnQubmFtZSBdID0gdHJ1ZTsKCQkJCQkJdmFsaWRhdG9yLnNob3dFcnJvcnMoIGVycm9ycyApOwoJCQkJCX0KCQkJCQlwcmV2aW91cy52YWxpZCA9IHZhbGlkOwoJCQkJCXZhbGlkYXRvci5zdG9wUmVxdWVzdCggZWxlbWVudCwgdmFsaWQgKTsKCQkJCX0KCQkJfSwgcGFyYW0gKSApOwoJCQlyZXR1cm4gInBlbmRpbmciOwoJCX0KCgl9Cgp9KTsKCiQuZm9ybWF0ID0gZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHsKCXRocm93ICIkLmZvcm1hdCBoYXMgYmVlbiBkZXByZWNhdGVkLiBQbGVhc2UgdXNlICQudmFsaWRhdG9yLmZvcm1hdCBpbnN0ZWFkLiI7Cn07Cg==",
    "size": "40927"
}