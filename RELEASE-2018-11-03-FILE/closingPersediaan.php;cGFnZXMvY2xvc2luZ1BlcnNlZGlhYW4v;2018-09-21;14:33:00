{
    "namaFile": "pages\/closingPersediaan\/closingPersediaan.php",
    "lastUpdate": "2018-09-21+14:33:00.08",
    "contentFile": "\/IDI6IDE7CgoKICAgIHJldHVybiAkaGVhZGVyVGFibGU7CiAgfQoKICBmdW5jdGlvbiBzZXRLb2xvbURhdGEoJG5vLCAkaXNpLCAkTW9kZSwgJFRhbXBpbENoZWNrQm94KXsKICAgZ2xvYmFsICRSZWY7CiAgIGZvcmVhY2ggKCRpc2kgYXMgJGtleSA9PiAkdmFsdWUpIHsKICAgICAgICAgICAgJCRrZXkgPSAkdmFsdWU7CiAgIH0KICAgaWYoJHRoaXMtPm5vbW9yS29sb20gJSAyID09IDEpewogICAgICAkcm93Q2xhc3MgPSAicm93MCI7CiAgICB9ZWxzZXsKICAgICAgJHJvd0NsYXNzID0gInJvdzEiOwogICAgfQogICAgJGtvZGVTS1BEID0gJGMxLiIuIi4kYy4iLiIuJGQuIi4iLiRlLiIuIi4kZTE7CiAgICBpZihpbl9hcnJheSgka29kZVNLUEQsJHRoaXMtPmFycmF5U0tQRCkgPT0gZmFsc2UpewogICAgICAkdGhpcy0+YXJyYXlTS1BEW10gPSAka29kZVNLUEQ7CiAgICAgICRnZXREYXRhU0tQRCA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgY29uY2F0KGMxLCcuJyxjLCcuJyxkLCcuJyxlLCcuJyxlMSkgPSAnJGtvZGVTS1BEJyAiKSk7CiAgICAgICRrb2xvbUNsb3NpbmcgPSAiCiAgICAgICAgPHRyIGNsYXNzPSckcm93Q2xhc3MnIHZhbGlnbj0ndG9wJz4KICAgICAgICAgIDx0ZCBhbGlnbj0nY2VudGVyJyBjbGFzcz0nR2FyaXNEYWZ0YXInID4kbm88L3RkPgogICAgICAgICAgPHRkIGFsaWduPSdjZW50ZXInIGNsYXNzPSdHYXJpc0RhZnRhcicgID4kVGFtcGlsQ2hlY2tCb3g8L3RkPgogICAgICAgICAgPHRkIGFsaWduPSdjZW50ZXInIGNsYXNzPSdHYXJpc0RhZnRhcicgID4ka29kZVNLUEQ8L3RkPgogICAgICAgICAgPHRkIGFsaWduPSdsZWZ0JyBjbGFzcz0nR2FyaXNEYWZ0YXInICA+Ii4kZ2V0RGF0YVNLUERbJ25tX3NrcGQnXS4iPC90ZD4KICAgICAgICAgIDx0ZCBhbGlnbj0nY2VudGVyJyBjbGFzcz0nR2FyaXNEYWZ0YXInICA+JHNlbWVzdGVyPC90ZD4KICAgICAgICAgIDx0ZCBhbGlnbj0nY2VudGVyJyBjbGFzcz0nR2FyaXNEYWZ0YXInICA+Ii4kdGhpcy0+Z2VuZXJhdGVEYXRlKCR0YW5nZ2FsX3VwZGF0ZSkuIjwvdGQ+CiAgICAgICAgICA8dGQgYWxpZ249J2NlbnRlcicgY2xhc3M9J0dhcmlzRGFmdGFyJyAgPiIuJHVzZXJuYW1lLiI8L3RkPgogICAgICAgICAgPHRkIGFsaWduPSdsZWZ0JyBjbGFzcz0nR2FyaXNEYWZ0YXInICA+Ii4ka2V0ZXJhbmdhbi4iPC90ZD4KICAgICAgICA8L3RyPgogICAgICAiOwogICAgfWVsc2V7CiAgICAgICRrb2xvbUNsb3NpbmcgPSAiCiAgICAgICAgPHRyIGNsYXNzPSckcm93Q2xhc3MnIHZhbGlnbj0ndG9wJz4KICAgICAgICAgIDx0ZCBhbGlnbj0nY2VudGVyJyBjbGFzcz0nR2FyaXNEYWZ0YXInID4kbm88L3RkPgogICAgICAgICAgPHRkIGFsaWduPSdjZW50ZXInIGNsYXNzPSdHYXJpc0RhZnRhcicgID4kVGFtcGlsQ2hlY2tCb3g8L3RkPgogICAgICAgICAgPHRkIGFsaWduPSdjZW50ZXInIGNsYXNzPSdHYXJpc0RhZnRhcicgID48L3RkPgogICAgICAgICAgPHRkIGFsaWduPSdsZWZ0JyBjbGFzcz0nR2FyaXNEYWZ0YXInICA+PC90ZD4KICAgICAgICAgIDx0ZCBhbGlnbj0nY2VudGVyJyBjbGFzcz0nR2FyaXNEYWZ0YXInICA+JHNlbWVzdGVyPC90ZD4KICAgICAgICAgIDx0ZCBhbGlnbj0nY2VudGVyJyBjbGFzcz0nR2FyaXNEYWZ0YXInICA+Ii4kdGhpcy0+Z2VuZXJhdGVEYXRlKCR0YW5nZ2FsX3VwZGF0ZSkuIjwvdGQ+CiAgICAgICAgICA8dGQgYWxpZ249J2NlbnRlcicgY2xhc3M9J0dhcmlzRGFmdGFyJyAgPiIuJHVzZXJuYW1lLiI8L3RkPgogICAgICAgICAgPHRkIGFsaWduPSdsZWZ0JyBjbGFzcz0nR2FyaXNEYWZ0YXInICA+Ii4ka2V0ZXJhbmdhbi4iPC90ZD4KICAgICAgICA8L3RyPgogICAgICAiOwogICAgfQoKCiAgICAkdGhpcy0+bm9tb3JLb2xvbSArPSAxOwogICAgJEtvbG9tcyA9IGFycmF5KAogICAgICBhcnJheSgiVnVsbldhbGtlciIsICRrb2xvbUNsb3NpbmcpCiAgICAgKTsKCiAgIHJldHVybiAkS29sb21zOwogIH0KCgoKCgogIGZ1bmN0aW9uIGdlbkRhZnRhck9wc2koKXsKICAgZ2xvYmFsICRSZWYsICRNYWluOwogICBmb3JlYWNoICgkX1JFUVVFU1QgYXMgJGtleSA9PiAkdmFsdWUpIHsKICAgICAgICAgJCRrZXkgPSAkdmFsdWU7CiAgIH0KICAgJGp1bWxhaERhdGEgPSAkX1JFUVVFU1RbJ2p1bWxhaERhdGEnXTsKICAgaWYoZW1wdHkoJGp1bWxhaERhdGEpKSRqdW1sYWhEYXRhID0gNTA7CiAgICRhcnJheVNlbWVzdGVyID0gYXJyYXkoCiAgICAgYXJyYXkoJzEnLCJTRU1FU1RFUiAxIiksCiAgICAgYXJyYXkoJzInLCJTRU1FU1RFUiAyIiksCiAgICk7CiAgICAgICRUYW1waWxPcHQgPQogICAgICAgICAgIjx0cj48dGQ+Ii4KICAgICAgICAgIGdlbkZpbHRlckJhcihhcnJheSgkdGhpcy0+Z2VuRmlsdGVyU3ViVW5pdCgkdGhpcy0+UHJlZml4LCR0aGlzLT5QcmVmaXguJ0ZpbHRlclNLUEQnLCcxMDAlJywnMTQ1cHgnKSksJycsJycsJycpLgogICAgICAgICAgZ2VuRmlsdGVyQmFyKAogICAgICAgICAgICBhcnJheSgKICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgVEFIVU4gJm5ic3AgJm5ic3AgPGlucHV0IHR5cGU9J3RleHQnIHZhbHVlPSciLiR0aGlzLT50YWh1bkFuZ2dhcmFuLiInIHN0eWxlPSd3aWR0aDo0MHB4OycgcmVhZG9ubHk+Jm5ic3AgJm5ic3AgJm5ic3AgJm5ic3AgSlVNTEFIIERBVEEgJm5ic3AgJm5ic3AgPGlucHV0IHR5cGU9J3RleHQnIG5hbWUgPSdqdW1sYWhEYXRhJyBpZD0nanVtbGFoRGF0YScgdmFsdWUgPSckanVtbGFoRGF0YScgc3R5bGU9J3dpZHRoOjQwcHg7Jz4gICZuYnNwIDxpbnB1dCB0eXBlPSdidXR0b24nIG9uY2xpY2sgPSR0aGlzLT5QcmVmaXgucmVmcmVzaExpc3QodHJ1ZSk7IHZhbHVlPSdUYW1waWxrYW4nPiAmbmJzcCBTRU1FU1RFUiA6ICIuY21iQXJyYXkoImZpbHRlclNlbWVzdGVyIiwkZmlsdGVyU2VtZXN0ZXIsJGFycmF5U2VtZXN0ZXIsIi0tIFNFTVVBIFNFTUVTVEVSIC0tIiwiIG9uY2hhbmdlPSR0aGlzLT5QcmVmaXguZmlsdGVyUmVuZGVyKHRydWUpIikKICAgICAgICAgICksJycsJycsJycpOwoKICAgIHJldHVybiBhcnJheSgnVGFtcGlsT3B0Jz0+JFRhbXBpbE9wdCk7CgoKICB9CgogIGZ1bmN0aW9uIGdldERhZnRhck9wc2koJE1vZGU9MSl7CiAgICBnbG9iYWwgJE1haW4sICRIVFRQX0NPT0tJRV9WQVJTOwogICAgJFVJRCA9ICRfQ09PS0lFWydjb0lEJ107CiAgICAvL2tvbmRpc2kgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICRhcnJLb25kaXNpID0gYXJyYXkoKTsKICAgIGZvcmVhY2ggKCRfUkVRVUVTVCBhcyAka2V5ID0+ICR2YWx1ZSkgewogICAgICAgICAgJCRrZXkgPSAkdmFsdWU7CiAgICB9CiAgICBpZigkZmlsdGVyVXJ1c2FuICE9JzAwJyl7CiAgICAgICAgJGFycktvbmRpc2lbXSA9ICJjMSA9ICckZmlsdGVyVXJ1c2FuJyI7CiAgICB9CiAgICBpZigkZmlsdGVyQmlkYW5nICE9JzAwJyl7CiAgICAgICAgJGFycktvbmRpc2lbXSA9ICJjID0gJyRmaWx0ZXJCaWRhbmcnIjsKICAgIH0KICAgIGlmKCRmaWx0ZXJTS1BEICE9JzAwJyl7CiAgICAgICAgJGFycktvbmRpc2lbXSA9ICJkID0gJyRmaWx0ZXJTS1BEJyI7CiAgICB9CiAgICBpZigkZmlsdGVyVW5pdCAhPScwMCcpewogICAgICAgICRhcnJLb25kaXNpW10gPSAiZSA9ICckZmlsdGVyVW5pdCciOwogICAgfQogICAgaWYoJGZpbHRlclN1YlVuaXQgIT0nMDAwJyl7CiAgICAgICAgJGFycktvbmRpc2lbXSA9ICJlMSA9ICckZmlsdGVyU3ViVW5pdCciOwogICAgfQogICAgJGFycktvbmRpc2lbXSA9ICJ0YWh1bl9hbmdnYXJhbiA9ICciLiR0aGlzLT50YWh1bkFuZ2dhcmFuLiInIjsKCiAgICBpZighZW1wdHkoJGZpbHRlclNlbWVzdGVyKSl7CiAgICAgICAgJGFycktvbmRpc2lbXT0gInNlbWVzdGVyID0gJyRmaWx0ZXJTZW1lc3RlciciOwogICAgfQoKICAgICRLb25kaXNpPSBqb2luKCcgYW5kICcsJGFycktvbmRpc2kpOwogICAgJEtvbmRpc2kgPSAkS29uZGlzaSA9PScnID8gJyc6JyBXaGVyZSAnLiRLb25kaXNpIDsKICAgIC8vT3JkZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgJGZtT1JERVIxID0gY2VrUE9TVCgnZm1PUkRFUjEnKTsKICAgICRmbURFU0MxID0gY2VrUE9TVCgnZm1ERVNDMScpOwogICAgJEFzYzEgPSAkZm1ERVNDMSA9PScnPyAnJzogJ2Rlc2MnOwogICAgJGFyck9yZGVycyA9IGFycmF5KCk7CiAgICAkYXJyT3JkZXJzW109ICIgY29uY2F0KGMxLCcuJyxjLCcuJyxkLCcuJyxlLCcuJyxlMSksc2VtZXN0ZXIiOwogICAgJE9yZGVyPSBqb2luKCcsJywkYXJyT3JkZXJzKTsKICAgICRPcmRlckRlZmF1bHQgPSAnJzsKICAgICRPcmRlciA9ICAkT3JkZXIgPT0nJz8gJE9yZGVyRGVmYXVsdCA6ICcgT3JkZXIgQnkgJy4kT3JkZXI7CgogICAgaWYoZW1wdHkoJGp1bWxhaERhdGEpKSRqdW1sYWhEYXRhID01MDsKICAgICR0aGlzLT5wYWdlUGVySGFsID0gJGp1bWxhaERhdGE7CiAgICAkTWFpbi0+UGFnZVBlckhhbCA9ICRqdW1sYWhEYXRhOwogICAgJHBhZ2VQZXJIYWwgPSAkdGhpcy0+cGFnZVBlckhhbCA9PScnID8gJE1haW4tPlBhZ2VQZXJIYWw6ICR0aGlzLT5wYWdlUGVySGFsOwogICAgJEhhbERlZmF1bHQ9Y2VrUE9TVCgkdGhpcy0+UHJlZml4LidfaGFsJywxKTsKICAgIC8vJExpbWl0ID0gIiBsaW1pdCAiLigoJEhhbERlZmF1bHQgICoxKSAtIDEpICogJE1haW4tPlBhZ2VQZXJIYWwuIiwiLiRNYWluLT5QYWdlUGVySGFsOyAvLyRMaW1pdEhhbCA9ICcnOwogICAgJExpbWl0ID0gIiBsaW1pdCAiLigoJEhhbERlZmF1bHQgICoxKSAtIDEpICogJHBhZ2VQZXJIYWwuIiwiLiRwYWdlUGVySGFsOyAvLyRMaW1pdEhhbCA9ICcnOwogICAgJExpbWl0ID0gJE1vZGUgPT0gMyA\/ICcnOiAkTGltaXQ7CiAgICAvL25vYXdhbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICROb0F3YWw9ICRwYWdlUGVySGFsICogKCgkSGFsRGVmYXVsdCoxKSAtIDEpOwogICAgJE5vQXdhbCA9ICRNb2RlID09IDMgPyAwOiAkTm9Bd2FsOwoKICAgIHJldHVybiBhcnJheSgnS29uZGlzaSc9PiRLb25kaXNpLCAnT3JkZXInPT4kT3JkZXIgLCdMaW1pdCc9PiRMaW1pdCwgJ05vQXdhbCc9PiROb0F3YWwgKTsKCiAgfQoKCiAgZnVuY3Rpb24gcGFnZVNob3coKXsKICAgIGdsb2JhbCAkYXBwLCAkTWFpbjsKCiAgICAkbmF2YXRhc18gPSAkdGhpcy0+c2V0TmF2QXRhcygpOwogICAgJG5hdmF0YXMgPSAkbmF2YXRhc189PScnPyAvLyAnMCc6ICcyMCc7CiAgICAgICcnOgogICAgICAiPHRyPjx0ZCBoZWlnaHQ9JzIwJz4iLgogICAgICAgICAgJG5hdmF0YXNfLgogICAgICAiPC90ZD48L3RyPiI7CiAgICAkZm9ybTEgPSAkdGhpcy0+d2l0aGZvcm0\\/ICI8c3R5bGU+Lm5mbXQ1IHttc28tbnVtYmVyLWZvcm1hdDonXEAnO308L3N0eWxlPiI6IjxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiY3NzL3RlbXBsYXRlX2Nzcy5jc3NcIiB0eXBlPVwidGV4dC9jc3NcIiAvPiI7CiAgICBlY2hvCiAgICAgICI8aHRtbD4KICAgICAgPGxpbmsgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2NzcycgaHJlZj0nYXNzZXRzL2Nzcy9ib290c3RyYXAubWluLmNzcyc+CiAgICAgIDxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M\/ZmFtaWx5PSRmb250RmFtaWx5W29wdGlvbl92YWx1ZV0nPgogICAgICA8bGluayByZWw9J3N0eWxlc2hlZXQnIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT0kZm9udE1lbnViYXJbb3B0aW9uX3ZhbHVlXSc+CiAgICAgIDxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M\/ZmFtaWx5PSRDb250ZW50Rm9udFN0eWxlW29wdGlvbl92YWx1ZV0nPgogICAgICA8bGluayByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJyBocmVmPSdjc3MvcGFnZU51bWJlci5jc3MnPgogICAgICA8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCcgc3JjPSdhc3NldHMvanMvanF1ZXJ5LTMuMi4xLm1pbi5qcyc+PC9zY3JpcHQ+CiAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9J2pzL3BhZ2VOdW1iZXIuanMnPjwvc2NyaXB0PgogICAgICA8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCcgc3JjPSdhc3NldHMvanMvYm9vdHN0cmFwLm1pbi5qcyc+PC9zY3JpcHQ+Ii4KICAgICAgICAiPGhlYWQ+CiAgICAgICAgICA8dGl0bGU+JE1haW4tPkp1ZHVsPC90aXRsZT4KICAgICAgICAgICRjc3MKICAgICAgICAgICR0aGlzLT5DZXRha19PdGhlckhUTUxIZWFkCiAgICAgICAgICA8c3R5bGU+CiAgICAgICAgICAgIC51a3VyYW50dWxpc2FuewogICAgICAgICAgICAgIGZvbnQtc2l6ZToxNXB4OwogICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC51a3VyYW50dWxpc2FuMXsKICAgICAgICAgICAgICBmb250LXNpemU6MjBweDsKICAgICAgICAgICAgfQogICAgICAgICAgICAudWt1cmFudHVsaXNhbklkUGVuZXJpbWFhbnsKICAgICAgICAgICAgICBmb250LXNpemU6MTZweDsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGVhZCB7IGRpc3BsYXk6IHRhYmxlLWhlYWRlci1ncm91cDsgfQogICAgICAgICAgPC9zdHlsZT4KICAgICAgICA8L2hlYWQ+Ii4KICAgICAgIjxib2R5ID4KICAgICAgICA8ZGl2IHN0eWxlPSd3aWR0aDokdGhpcy0+Q2V0YWtfV0lEVEhfTGFuZHNjYXBlOyc+CiAgICAgICAgICA8dGFibGUgY2xhc3M9XCJyYW5na2FjZXRha1wiIHN0eWxlPSd3aWR0aDogMzNjbTsgaGVpZ2h0OiAyMS41Y207IGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOyc+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICA8dGQgdmFsaWduPVwidG9wXCI+IDxkaXYgc3R5bGU9J3RleHQtYWxpZ246Y2VudGVyOyc+CiAgICAgICAgICAgICAgPHRhYmxlIHN0eWxlPSd3aWR0aDogMTAwJTsgYm9yZGVyOiBub25lOyc+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9J3dpZHRoOiAxMCU7IHRleHQtYWxpZ246IGNlbnRlcjsnPgogICAgICAgICAgICAgICAgICA8aW1nIHNyYz0nIi4kdGhpcy0+Z2V0SW1hZ2VSZXBvcnQoKS4iJyBzdHlsZT0nCiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMi4wOHB4OwogICAgICAgICAgICAgICAgICAgIGhlaWdodDogODQuNTk7CiAgICAgICAgICAgICAgICAgICAgbWF4LWhlaWdodDogODQuNTk7CiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDIuMDhweDsKICAgICAgICAgICAgICAgICAgJz4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0ndGV4dC1hbGlnbjogY2VudGVyOyc+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxOHB4O2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsgJz4KICAgICAgICAgICAgICAgICAgICAgIERBRlRBUiBDTE9TSU5HIFBFUlNFRElBQU4gQkFSQU5HPGJyPgogICAgICAgICAgICAgICAgICAgICAgS09UQSAiLiR0aGlzLT5nZXRWZXJzaU5hbWUoKS4iPGJyPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3VrdXJhbnR1bGlzYW5JZFBlbmVyaW1hYW4nIHN0eWxlPSdmb250LXdlaWdodDogYm9sZDsnPlRBSFVOIEFOR0dBUkFOICIuJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIiA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICA8L3RhYmxlPiI7CiAgICBlY2hvICIKICAgICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgIDx0YWJsZSB0YWJsZSB3aWR0aD0nMTAwJScgY2xhc3M9J2NldGFrJyBib3JkZXI9JzEnIHN0eWxlPSd3aWR0aDoxMDAlOyc+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9J3RoMDEnIHN0eWxlPSd3aWR0aDoyMHB4OycgPk5PPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9J3RoMDEnIHN0eWxlPSd3aWR0aDogNiU7Jz5UR0w8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0ndGgwMSc+Tk9NT1I8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0ndGgwMScgc3R5bGU9J3dpZHRoOiA1JTsnPlVOVFVLIEtFUEVSTFVBTjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSd0aDAxJz5OQU1BIEJBUkFORzwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSd0aDAxJyBzdHlsZT0nd2lkdGg6IDglOyc+TUVSSy9UWVBFL1NQRUs8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0ndGgwMScgc3R5bGU9J3dpZHRoOiA3JTsnPkpVTUxBSDwvdGg+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgIjsKICAgICRhcnJheVBlbmdndW5hQmFyYW5nID0gYXJyYXkoKTsKICAgICRhcnJheUV4Y2VwdCA9IGFycmF5KCk7CiAgICAkbm8gPSAxOwoKICAgICRxdWVyeVBlbmdlbHVhcmFuID0gbXlzcWxfcXVlcnkoIlNFTEVDVCAqIGZyb20gcGVuZ2VsdWFyYW4gd2hlcmUgYzEgPSAnJGMxJyBhbmQgYyA9ICckYycgYW5kIGQgPSAnJGQnIGFuZCBlID0gJyRlJyBhbmQgZTEgPSAnJGUxJyBhbmQgc3RhdHVzX3Bvc3RpbmcgPSAxICIpOwoKICAgIHdoaWxlICgkZGF0YVBlbmdlbHVhcmFuID0gbXlzcWxfZmV0Y2hfYXJyYXkoJHF1ZXJ5UGVuZ2VsdWFyYW4pKSB7CgogICAgICAkcXVlcnlEZXRhaWxQZW5nZWx1YXJhbiA9IG15c3FsX2ZldGNoX2FycmF5KG15c3FsX3F1ZXJ5KCJTRUxFQ1QgKiBmcm9tIGRldGFpbF9wZW5nZWx1YXJhbiB3aGVyZSBpZF9wZW5nZWx1YXJhbiA9ICIuJGRhdGFQZW5nZWx1YXJhbltpZF0uIiAiKSk7CgogICAgICAkZmlyc3RJZCA9ICRxdWVyeURldGFpbFBlbmdlbHVhcmFuW2lkXTsKCiAgICAgIGlmICgkcXVlcnlEZXRhaWxQZW5nZWx1YXJhbltqdW1sYWhdID09ICIiKSB7CiAgICAgICAgJGp1bWxhaCA9ICcwJzsKICAgICAgfWVsc2V7CiAgICAgICAgJGp1bWxhaCA9ICRxdWVyeURldGFpbFBlbmdlbHVhcmFuW2p1bWxhaF07CiAgICAgIH0KCiAgICAgICRxdWVyeVJlZkJhcmFuZyA9IG15c3FsX2ZldGNoX2FycmF5KG15c3FsX3F1ZXJ5KCJTRUxFQ1QgKiBmcm9tIHJlZl9iYXJhbmcgd2hlcmUgZiA9ICIuJHF1ZXJ5RGV0YWlsUGVuZ2VsdWFyYW5bZl0uIiBhbmQgZyA9ICIuJHF1ZXJ5RGV0YWlsUGVuZ2VsdWFyYW5bZ10uIiBhbmQgaCA9ICIuJHF1ZXJ5RGV0YWlsUGVuZ2VsdWFyYW5baF0uIiBhbmQgaSA9ICIuJHF1ZXJ5RGV0YWlsUGVuZ2VsdWFyYW5baV0uIiBhbmQgaiA9ICIuJHF1ZXJ5RGV0YWlsUGVuZ2VsdWFyYW5bal0uIiBhbmQgajEgPSAiLiRxdWVyeURldGFpbFBlbmdlbHVhcmFuW2oxXS4iICIpKTsKCiAgICAgIGVjaG8gIgogICAgICAgIDx0cj4KICAgICAgICAgIDx0ZCBhbGlnbj0nY2VudGVyJyBjbGFzcz0nR2FyaXNDZXRhayc+Ii4kbm8uIjwvdGQ+CiAgICAgICAgICA8dGQgY2xhc3M9J0dhcmlzQ2V0YWsnPiIuJGRhdGFQZW5nZWx1YXJhblt0YW5nZ2FsXS4iPC90ZD4KICAgICAgICAgIDx0ZCBjbGFzcz0nR2FyaXNDZXRhayc+Ii4kZGF0YVBlbmdlbHVhcmFuW25vbW9yXS4iPC90ZD4KICAgICAgICAgIDx0ZCBjbGFzcz0nR2FyaXNDZXRhayc+Ii4kZGF0YVBlbmdlbHVhcmFuW2tlcGVybHVhbl0uIjwvdGQ+CiAgICAgICAgICA8dGQgY2xhc3M9J0dhcmlzQ2V0YWsnPiIuJHF1ZXJ5UmVmQmFyYW5nW25tX2JhcmFuZ10uIjwvdGQ+CiAgICAgICAgICA8dGQgY2xhc3M9J0dhcmlzQ2V0YWsnPiIuJHF1ZXJ5RGV0YWlsUGVuZ2VsdWFyYW5bbWVya10uIjwvdGQ+CiAgICAgICAgICA8dGQgYWxpZ249J3JpZ2h0JyBjbGFzcz0nR2FyaXNDZXRhayc+Ii5udW1iZXJfZm9ybWF0KCRqdW1sYWgsMiwnLCcsJy4nKS4iPC90ZD4KICAgICAgICA8L3RyPgogICAgICAiOwoKICAgICAgJHF1ZXJ5RGV0YWlsUGVuZ2VsdWFyYW4yID0gbXlzcWxfcXVlcnkoIlNFTEVDVCAqIGZyb20gZGV0YWlsX3BlbmdlbHVhcmFuIHdoZXJlIGlkX3BlbmdlbHVhcmFuID0gIi4kZGF0YVBlbmdlbHVhcmFuW2lkXS4iIGFuZCBpZCAhPSAiLiRmaXJzdElkLiIgIik7CiAgICAgIHdoaWxlICgkZGF0YVBlbmdlbHVhcmFuMiA9IG15c3FsX2ZldGNoX2FycmF5KCRxdWVyeURldGFpbFBlbmdlbHVhcmFuMikpIHsKCiAgICAgICAgJHF1ZXJ5UmVmQmFyYW5nMiA9IG15c3FsX2ZldGNoX2FycmF5KG15c3FsX3F1ZXJ5KCJTRUxFQ1QgKiBmcm9tIHJlZl9iYXJhbmcgd2hlcmUgZiA9ICIuJGRhdGFQZW5nZWx1YXJhbjJbZl0uIiBhbmQgZyA9ICIuJGRhdGFQZW5nZWx1YXJhbjJbZ10uIiBhbmQgaCA9ICIuJGRhdGFQZW5nZWx1YXJhbjJbaF0uIiBhbmQgaSA9ICIuJGRhdGFQZW5nZWx1YXJhbjJbaV0uIiBhbmQgaiA9ICIuJGRhdGFQZW5nZWx1YXJhbjJbal0uIiBhbmQgajEgPSAiLiRkYXRhUGVuZ2VsdWFyYW4yW2oxXS4iICIpKTsKCiAgICAgICAgaWYgKCRkYXRhUGVuZ2VsdWFyYW4yW2p1bWxhaF0gPT0gIiIpIHsKICAgICAgICAgICRqdW1sYWgyID0gJzAnOwogICAgICAgIH1lbHNlewogICAgICAgICAgJGp1bWxhaDIgPSAkZGF0YVBlbmdlbHVhcmFuMltqdW1sYWhdOwogICAgICAgIH0KCiAgICAgICAgZWNobyAiCiAgICAgICAgPHRyPgogICAgICAgICAgPHRkIGFsaWduPSdjZW50ZXInIGNsYXNzPSdHYXJpc0NldGFrJyBjb2xzcGFuPSc0Jz48L3RkPgogICAgICAgICAgPHRkIGNsYXNzPSdHYXJpc0NldGFrJz4iLiRxdWVyeVJlZkJhcmFuZzJbbm1fYmFyYW5nXS4iPC90ZD4KICAgICAgICAgIDx0ZCBjbGFzcz0nR2FyaXNDZXRhayc+Ii4kZGF0YVBlbmdlbHVhcmFuMlttZXJrXS4iPC90ZD4KICAgICAgICAgIDx0ZCBhbGlnbj0ncmlnaHQnIGNsYXNzPSdHYXJpc0NldGFrJz4iLm51bWJlcl9mb3JtYXQoJGp1bWxhaDIsMiwnLCcsJy4nKS4iPC90ZD4KICAgICAgICA8L3RyPgogICAgICAiOwogICAgICB9CiAgICAgICRubysrOwogICAgfQoKICAgIGVjaG8gICAgICAgICI8L3RhYmxlPiI7CgogICAgaWYoJHhscyl7CiAgICAgIGVjaG8KICAgICAgICAgICAgIjxicj48ZGl2IGNsYXNzPSd1a3VyYW50dWxpc2FuJyBhbGlnbj0ncmlnaHQnPgogICAgICAgICAgICA8dGFibGUgYWxpZ249J3JpZ2h0Jz4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY29sc3Bhbj0nMic+CiAgICAgICAgICAgICR0aGlzLT5rb3RhLCAiLlZ1bG5XYWxrZXJUaXRpTWFuZ3NhKGRhdGUoJ1ktbS1kJykpLiIKICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY29sc3Bhbj0nMic+CiAgICAgICAgICAgIFBlbmdlbG9sYSBCYXJhbmcKICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY29sc3Bhbj0nMic+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+PHRyPgogICAgICAgICAgICA8dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY29sc3Bhbj0nMic+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+PHRyPgogICAgICAgICAgICA8dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY29sc3Bhbj0nMic+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgPHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNvbHNwYW49JzInPgogICAgICAgICAgICA8dT4kdGhpcy0+cGVuZ2Vsb2xhQmFyYW5nPC91PgogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPjx0cj4KICAgICAgICAgICAgPHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD48dGQgPgogICAgICAgICAgICAmbmJzcAogICAgICAgICAgICA8L3RkPjx0ZCA+CiAgICAgICAgICAgICZuYnNwCiAgICAgICAgICAgIDwvdGQ+PHRkID4KICAgICAgICAgICAgJm5ic3AKICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNvbHNwYW49JzInPgogICAgICAgICAgICBOSVAgJHRoaXMtPm5pcFBlbmdlbG9sYQogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgoKCgoKCiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvYm9keT4KICAgICAgPC9odG1sPiI7CiAgICB9ZWxzZXsKCgogICAgICAgICAgICAgICAgICAkcXVlcnlOYW1hMSA9IG15c3FsX2ZldGNoX2FycmF5KG15c3FsX3F1ZXJ5KCJTRUxFQ1QgKiBmcm9tIHJlZl90YW5kYXRhbmdhbiB3aGVyZSBrYXRlZ29yaV90YW5kYXRhbmdhbiA9ICczJyBhbmQgYzEgPSAnJGMxJyBhbmQgYyA9ICckYycgYW5kIGQgPSAnJGQnIGFuZCBlID0gJyRlJyBhbmQgZTEgPSAnJGUxJyAiKSk7CiAgICAgICAgICAgICAgICAgICRobW0gPSBteXNxbF9mZXRjaF9hcnJheShteXNxbF9xdWVyeSgiU0VMRUNUICogZnJvbSByZWZfdGFuZGF0YW5nYW4gd2hlcmUga2F0ZWdvcmlfdGFuZGF0YW5nYW4gPSAnMjMnIGFuZCBjMSA9ICckYzEnIGFuZCBjID0gJyRjJyBhbmQgZCA9ICckZCcgYW5kIElkID0gJyIuJGlkUGVuYW5kYVRhbmdhbi4iJyAiKSk7CgogICAgICAgICAgICAgICAgICAkcXVlcnlLYXRlZ29yaTEgPSBteXNxbF9mZXRjaF9hcnJheShteXNxbF9xdWVyeSgiU0VMRUNUICogZnJvbSByZWZfa2F0ZWdvcmlfdGFuZGF0YW5nYW4gd2hlcmUgaWQgPSAnMycgIikpOwogICAgICAgICAgICAgICAgICAkbmFtYVBlbWRhID0gbXlzcWxfZmV0Y2hfYXJyYXkobXlzcWxfcXVlcnkoIlNFTEVDVCAqIGZyb20gZ2VuZXJhbF9zZXR0aW5nIHdoZXJlIG9wdGlvbl9uYW1lID0gJ2FsYW1hdF9wZW1kYScgIikpOwoKICAgICAgICAgICAgICAgICAgJHRhbmRhVGFuZ2FubmEgLj0gIjxicj48YnI+PGJyPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd1a3VyYW50dWxpc2FuJyBzdHlsZSA9J2Zsb2F0OnJpZ2h0OyB0ZXh0LWFsaWduOmNlbnRlcjsnPgogICAgICAgICAgICAgICAgICAiLiR0aGlzLT5nZXRWZXJzaU5hbWUoKS4iLCAiLiR0aGlzLT50aXRpTWFuZ3NhKCR0aGlzLT5nZW5lcmF0ZURhdGUoJHRhbmdnYWxDZXRhaykpLiI8YnI+CiAgICAgICAgICAgICAgICAgICRobW1bamFiYXRhbl0KICAgICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICAgICA8YnI+CiAgICAgICAgICAgICAgICAgIDx1PiIuJGhtbVsnbmFtYSddLiI8L3U+PGJyPgogICAgICAgICAgICAgICAgICBOSVAgIi4kaG1tWyduaXAnXS4iCgoKICAgICAgICAgICAgICAgICAgPC9kaXY+IjsKCgogICAgICBlY2hvCiAgICAgICAgICAgICIKICAgICAgICAgICAgIi4kdGFuZGFUYW5nYW5uYS4iCiAgICAgICAgICAgIDwhLS0gPGg1IGNsYXNzPSdwYWcgcGFnMSc+CiAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9J2JvdHRvbTogLTEwcHg7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDowOyc+Ii5kYXRlKCdkLW0tWScpLiIgLyAiLmRhdGUoJ2g6aScpLiIgLyAiLiR0aGlzLT51c2VybmFtZS4iPC9zcGFuPgogICAgICAgICAgICA8L2g1PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdpbnNlcnQnPjwvZGl2PiAtLT4KICAgICAgICA8L2JvZHk+CiAgICAgIDwvaHRtbD4iOwogICAgfQogIH0KCiAgZnVuY3Rpb24gY2hlY2tGaWZvKCRrb25kaXNpU0tQRCwgJHNlbWVzdGVyKXsKICAgICRhcnJheUVycm9yID0gYXJyYXkoKTsKICAgICRnZXREYXRhU0tQRCA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByZWZfc2twZCB3aGVyZSAxPTEgJGtvbmRpc2lTS1BEIGFuZCBlMSE9JzAwMCciKTsKICAgIHdoaWxlICgkZGF0YVNLUEQgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFTS1BEKSkgewogICAgICAka29kZVNLUEQgPSAkZGF0YVNLUERbJ2MxJ10uIi4iLiRkYXRhU0tQRFsnYyddLiIuIi4kZGF0YVNLUERbJ2QnXS4iLiIuJGRhdGFTS1BEWydlJ10uIi4iLiRkYXRhU0tQRFsnZTEnXTsKICAgICAgJGdldERhdGFQZXJzZWRpYWFuID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHZpZXdfZGFmdGFyX3BlcnNlZGlhYW4gd2hlcmUgY29uY2F0KGMxLCcuJyxjLCcuJyxkLCcuJyxlLCcuJyxlMSkgPSAnJGtvZGVTS1BEJyIpOwogICAgICB3aGlsZSAoJGRhdGFQZXJzZWRpYWFuID0gJHRoaXMtPnNxbEFycmF5KCRnZXREYXRhUGVyc2VkaWFhbikpIHsKICAgICAgICAgICRrb2RlQmFyYW5nID0gJGRhdGFQZXJzZWRpYWFuWydmJ10uIi4iLiRkYXRhUGVyc2VkaWFhblsnZyddLiIuIi4kZGF0YVBlcnNlZGlhYW5bJ2gnXS4iLiIuJGRhdGFQZXJzZWRpYWFuWydpJ10uIi4iLiRkYXRhUGVyc2VkaWFhblsnaiddLiIuIi4kZGF0YVBlcnNlZGlhYW5bJ2oxJ107CiAgICAgICAgICAkaGFzaWxDaGVjayA9ICAkdGhpcy0+Y2hlY2tCYXJhbmcoJGtvZGVTS1BELCRrb2RlQmFyYW5nLCRzZW1lc3Rlcik7CiAgICAgICAgICBpZihzaXplb2YoJGhhc2lsQ2hlY2spID4gMCl7CiAgICAgICAgICAgICRhcnJheUVycm9yW10gPSBhcnJheSgna29kZUJhcmFuZycgPT4gJGtvZGVCYXJhbmcsICdpZEthcnR1UGVyc2VkaWFhbicgPT4gJGhhc2lsQ2hlY2spOwogICAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZihzaXplb2YoJGFycmF5RXJyb3IpID4gMCApewogICAgICAkZXJyb3JNZXNzYWdlID0gIkFkYSBkYXRhIHlhbmcgZXJyb3Igc2lsYWhrYW4gY2VrIGRpIGRhZnRhciBwZXJzZWRpYWFuICEiOwogICAgfWVsc2V7CiAgICAgICRlcnJvck1lc3NhZ2UgPSAiIjsKICAgIH0KICAgIHJldHVybiAkZXJyb3JNZXNzYWdlOwogIH0KCiAgZnVuY3Rpb24gY2hlY2tCYXJhbmcoJGtvZGVTS1BELCRrb2RlQmFyYW5nLCRwZXJpb2RlKXsKICAgICRlcnIgPSAiIjsKICAgICRjZWsgPSAiIjsKICAgICRjb250ZW50ID0gIiI7CiAgICAkZXhwbG9kZUtvZGVTS1BEID0gZXhwbG9kZSgiLiIsJGtvZGVTS1BEKTsKICAgICRleHBsb2RlS29kZUJhcmFuZyA9IGV4cGxvZGUoIi4iLCRrb2RlQmFyYW5nKTsKICAgICRjMSA9ICRleHBsb2RlS29kZVNLUERbMF07CiAgICAkYyA9ICRleHBsb2RlS29kZVNLUERbMV07CiAgICAkZCA9ICRleHBsb2RlS29kZVNLUERbMl07CiAgICAkZSA9ICRleHBsb2RlS29kZVNLUERbM107CiAgICAkZTEgPSAkZXhwbG9kZUtvZGVTS1BEWzRdOwogICAgJGYgPSAkZXhwbG9kZUtvZGVCYXJhbmdbMF07CiAgICAkZyA9ICRleHBsb2RlS29kZUJhcmFuZ1sxXTsKICAgICRoID0gJGV4cGxvZGVLb2RlQmFyYW5nWzJdOwogICAgJGkgPSAkZXhwbG9kZUtvZGVCYXJhbmdbM107CiAgICAkaiA9ICRleHBsb2RlS29kZUJhcmFuZ1s0XTsKICAgICRqMSA9ICRleHBsb2RlS29kZUJhcmFuZ1s1XTsKICAgICRzYWxkb0JhcmFuZyA9IDA7CiAgICAka29uZGlzaVRhaHVuID0gIiBhbmQgbGVmdCh0YW5nZ2FsX2J1a3UsNCkgPSAnIi4kdGhpcy0+dGFodW5BbmdnYXJhbi4iJyAiOwogICAgaWYoIWVtcHR5KCRwZXJpb2RlKSl7CiAgICAgICAgaWYoJHBlcmlvZGUgPT0gJzEnKXsKICAgICAgICAgICAgJG1heEZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIwNiI7CiAgICAgICAgICAgICRrb25kaXNpUGVyaW9kZSAgPSAiIGFuZCByZXBsYWNlKGxlZnQodGFuZ2dhbF9idWt1LDcpLCctJywnJykgPD0gJyRtYXhGaWx0ZXInICI7CiAgICAgICAgfWVsc2VpZigkcGVyaW9kZSA9PSAnMicpewogICAgICAgICAgICAkbWluRmlsdGVyID0gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIjA3IjsKICAgICAgICAgICAgJG1heEZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIxMiI7CiAgICAgICAgICAgICRrb25kaXNpUGVyaW9kZT0gIiBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpID49ICckbWluRmlsdGVyJyBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpIDw9ICckbWF4RmlsdGVyJyI7CiAgICAgICAgfWVsc2VpZigkcGVyaW9kZSA9PSAnMycpewogICAgICAgICAgICAkbWF4RmlsdGVyID0gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIjEyIjsKICAgICAgICAgICAgJGtvbmRpc2lQZXJpb2RlID0gIiBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpIDw9ICckbWF4RmlsdGVyJyI7CiAgICAgICAgfQogICAgfQoKICAgICRnZXREYXRhVGFtYmFoID0gbXlzcWxfcXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGNvbmNhdChjMSwnLicsYywnLicsZCwnLicsZSwnLicsZTEpID0gJyRrb2RlU0tQRCcgIGFuZCBjb25jYXQoZiwnLicsZywnLicsaCwnLicsaSwnLicsaiwnLicsajEpID0nJGtvZGVCYXJhbmcnIGFuZCBqZW5pc19wZXJzZWRpYWFuID0gJzEnICRrb25kaXNpVGFodW4gJGtvbmRpc2lQZXJpb2RlIG9yZGVyIGJ5IHRhbmdnYWxfYnVrdSBhc2MiKTsKICAgIHdoaWxlICgkZGF0YVRhbWJhaCA9IG15c3FsX2ZldGNoX2FycmF5KCRnZXREYXRhVGFtYmFoKSkgewogICAgICAgICRkYXRhTG9ja1RhbWJhaCA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICd0YW5nZ2FsJyA9PiAkZGF0YVRhbWJhaFsndGFuZ2dhbF9idWt1J10sCiAgICAgICAgICAgICAgICAgICAgJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbicgPT4gJGRhdGFUYW1iYWhbJ2lkJ10sCiAgICAgICAgICAgICAgICAgICAgJ2p1bWxhaCcgPT4gJGRhdGFUYW1iYWhbJ2p1bWxhaCddLAogICAgICAgICAgICAgICAgICAgICdoYXJnYScgPT4gJGRhdGFUYW1iYWhbJ2hhcmdhX3NhdHVhbiddLAogICAgICAgICAgICAgICAgICAgICdzaXNhJyA9PiAkZGF0YVRhbWJhaFsnanVtbGFoJ10sCiAgICAgICAgICAgICAgICAgICAgJ2MxJyA9PiAkYzEsCiAgICAgICAgICAgICAgICAgICAgJ2MnID0+ICRjLAogICAgICAgICAgICAgICAgICAgICdkJyA9PiAkZCwKICAgICAgICAgICAgICAgICAgICAnZScgPT4gJGUsCiAgICAgICAgICAgICAgICAgICAgJ2UxJyA9PiAkZTEsCiAgICAgICAgICAgICAgICAgICAgJ2YnID0+ICRmLAogICAgICAgICAgICAgICAgICAgICdnJyA9PiAkZywKICAgICAgICAgICAgICAgICAgICAnaCcgPT4gJGgsCiAgICAgICAgICAgICAgICAgICAgJ2knID0+ICRpLAogICAgICAgICAgICAgICAgICAgICdqJyA9PiAkaiwKICAgICAgICAgICAgICAgICAgICAnajEnID0+ICRqMSwKICAgICAgICAgICAgICAgICAgICAndXNlcm5hbWUnID0+ICR0aGlzLT51c2VybmFtZQogICAgICAgICk7CiAgICAgICAgbXlzcWxfcXVlcnkoVnVsbldhbGtlckluc2VydCgndGVtcF9jaGVja19iYXJhbmdfdGFtYmFoJywkZGF0YUxvY2tUYW1iYWgpKTsKICAgIH0KICAgICRnZXREYXRhS3VyYW5nID0gbXlzcWxfcXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGNvbmNhdChjMSwnLicsYywnLicsZCwnLicsZSwnLicsZTEpID0gJyRrb2RlU0tQRCcgIGFuZCBjb25jYXQoZiwnLicsZywnLicsaCwnLicsaSwnLicsaiwnLicsajEpID0nJGtvZGVCYXJhbmcnIGFuZCBqZW5pc19wZXJzZWRpYWFuID0gJzInICRrb25kaXNpVGFodW4gJGtvbmRpc2lQZXJpb2RlIG9yZGVyIGJ5IHRhbmdnYWxfYnVrdSBhc2MiKTsKICAgIHdoaWxlICgkZGF0YUt1cmFuZyA9IG15c3FsX2ZldGNoX2FycmF5KCRnZXREYXRhS3VyYW5nKSkgewogICAgICAgICRhcnJheVBlcm9sZWhhbiA9IGFycmF5KCk7CiAgICAgICAgJGp1bWxhaEJhcmFuZ0t1cmFuZyA9ICRkYXRhS3VyYW5nWydqdW1sYWgnXTsKICAgICAgICAkZ2V0RGF0YVBlbmVyaW1hYW4gPSBteXNxbF9xdWVyeSgic2VsZWN0ICogZnJvbSB0ZW1wX2NoZWNrX2JhcmFuZ190YW1iYWggd2hlcmUgY29uY2F0KGMxLCcuJyxjLCcuJyxkLCcuJyxlLCcuJyxlMSkgPSAnJGtvZGVTS1BEJyAgYW5kIGNvbmNhdChmLCcuJyxnLCcuJyxoLCcuJyxpLCcuJyxqLCcuJyxqMSkgPScka29kZUJhcmFuZycgYW5kIHNpc2EgIT0nMCciKTsKICAgICAgICB3aGlsZSAoJGRhdGFQZW5lcmltYWFuID0gbXlzcWxfZmV0Y2hfYXJyYXkoJGdldERhdGFQZW5lcmltYWFuKSkgewogICAgICAgICAgICBpZigkanVtbGFoQmFyYW5nS3VyYW5nICE9IDApewogICAgICAgICAgICAgIGlmKCRqdW1sYWhCYXJhbmdLdXJhbmcgPiAkZGF0YVBlbmVyaW1hYW5bJ3Npc2EnXSApewogICAgICAgICAgICAgICAgICBteXNxbF9xdWVyeSgidXBkYXRlIHRlbXBfY2hlY2tfYmFyYW5nX3RhbWJhaCBzZXQgc2lzYSA9IHNpc2EgLSAiLiRkYXRhUGVuZXJpbWFhblsnc2lzYSddLiIgd2hlcmUgaWQgPSAnIi4kZGF0YVBlbmVyaW1hYW5bJ2lkJ10uIiciKTsKICAgICAgICAgICAgICAgICAgJGFycmF5UGVyb2xlaGFuW10gPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRQZW5lcmltYWFuJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRkYXRhUGVuZXJpbWFhblsnc2lzYSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoYXJnYScgPT4gJGRhdGFQZW5lcmltYWFuWydoYXJnYSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3RhbCcgPT4gJGRhdGFQZW5lcmltYWFuWydzaXNhJ10gKiAkZGF0YVBlbmVyaW1hYW5bJ2hhcmdhJ10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICRqdW1sYWhCYXJhbmdLdXJhbmcgLT0gJGRhdGFQZW5lcmltYWFuWydzaXNhJ107CiAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgIG15c3FsX3F1ZXJ5KCJ1cGRhdGUgdGVtcF9jaGVja19iYXJhbmdfdGFtYmFoIHNldCBzaXNhID0gc2lzYSAtICRqdW1sYWhCYXJhbmdLdXJhbmcgd2hlcmUgaWQgPSAnIi4kZGF0YVBlbmVyaW1hYW5bJ2lkJ10uIiciKTsKICAgICAgICAgICAgICAgICAgJGFycmF5UGVyb2xlaGFuW10gPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRQZW5lcmltYWFuJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRqdW1sYWhCYXJhbmdLdXJhbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhcmdhJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ2hhcmdhJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvdGFsJyA9PiAkanVtbGFoQmFyYW5nS3VyYW5nICogJGRhdGFQZW5lcmltYWFuWydoYXJnYSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAkanVtbGFoQmFyYW5nS3VyYW5nID0gMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJGVuY29kaW5nID0ganNvbl9lbmNvZGUoJGFycmF5UGVyb2xlaGFuKTsKICAgICAgICAkZGVjb2RpbmcgPSBqc29uX2RlY29kZSgkZW5jb2RpbmcpOwogICAgICAgICRoYXJnYVBlcm9sZWhhbj0gIiI7CiAgICAgICAgZm9yICgkcGFuamFuZ0Zvcj0wOyAkcGFuamFuZ0ZvciA8IHNpemVvZigkZGVjb2RpbmcpIDsgJHBhbmphbmdGb3IrKykgewogICAgICAgICAgICAkaGFyZ2FQZXJvbGVoYW4gKz0gJGRlY29kaW5nWyRwYW5qYW5nRm9yXS0+dG90YWw7CiAgICAgICAgfQogICAgICAgICRkYXRhTG9ja0t1cmFuZyA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICd0YW5nZ2FsJyA9PiAkZGF0YUt1cmFuZ1sndGFuZ2dhbF9idWt1J10sCiAgICAgICAgICAgICAgICAgICAgJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbicgPT4gJGRhdGFLdXJhbmdbJ2lkJ10sCiAgICAgICAgICAgICAgICAgICAgJ2p1bWxhaCcgPT4gJGRhdGFLdXJhbmdbJ2p1bWxhaCddLAogICAgICAgICAgICAgICAgICAgICAnaGFyZ2EnID0+ICRoYXJnYVBlcm9sZWhhbiwKICAgICAgICAgICAgICAgICAgICAgJ2MxJyA9PiAkYzEsCiAgICAgICAgICAgICAgICAgICAgICdjJyA9PiAkYywKICAgICAgICAgICAgICAgICAgICAgJ2QnID0+ICRkLAogICAgICAgICAgICAgICAgICAgICAnZScgPT4gJGUsCiAgICAgICAgICAgICAgICAgICAgICdlMScgPT4gJGUxLAogICAgICAgICAgICAgICAgICAgICAnZicgPT4gJGYsCiAgICAgICAgICAgICAgICAgICAgICdnJyA9PiAkZywKICAgICAgICAgICAgICAgICAgICAgJ2gnID0+ICRoLAogICAgICAgICAgICAgICAgICAgICAnaScgPT4gJGksCiAgICAgICAgICAgICAgICAgICAgICdqJyA9PiAkaiwKICAgICAgICAgICAgICAgICAgICAgJ2oxJyA9PiAkajEsCiAgICAgICAgICAgICAgICAgICAgJ3VzZXJuYW1lJyA9PiAkdGhpcy0+dXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgICAgJ3Blcm9sZWhhbicgPT4ganNvbl9lbmNvZGUoJGFycmF5UGVyb2xlaGFuKQoKICAgICAgICApOwogICAgICAgIG15c3FsX3F1ZXJ5KFZ1bG5XYWxrZXJJbnNlcnQoJ3RlbXBfY2hlY2tfYmFyYW5nX2t1cmFuZycsJGRhdGFMb2NrS3VyYW5nKSk7CiAgICB9CgoKCiAgICAkZ2V0RGF0YUhpc3RvcmkgPSBteXNxbF9xdWVyeSgic2VsZWN0ICogZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgY29uY2F0KGMxLCcuJyxjLCcuJyxkLCcuJyxlLCcuJyxlMSkgPSAnJGtvZGVTS1BEJyAgYW5kIGNvbmNhdChmLCcuJyxnLCcuJyxoLCcuJyxpLCcuJyxqLCcuJyxqMSkgPScka29kZUJhcmFuZycgICRrb25kaXNpVGFodW4gJGtvbmRpc2lQZXJpb2RlIG9yZGVyIGJ5IHRhbmdnYWxfYnVrdSxqZW5pc19wZXJzZWRpYWFuIGFzYyIpOwogICAgd2hpbGUgKCRkYXRhSGlzdG9yaSA9IG15c3FsX2ZldGNoX2FycmF5KCRnZXREYXRhSGlzdG9yaSkpIHsKICAgICAgICAkc3RhdHVzQ2hlY2sgPSAyOwogICAgICAgIGlmKCRkYXRhSGlzdG9yaVsnamVuaXNfcGVyc2VkaWFhbiddID09IDEpewogICAgICAgICAgaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnMScpewogICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiU0FMRE8gQVdBTCI7CiAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzInKXsKICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgJGJhcmFuZ0tlbHVhciA9IDA7CiAgICAgICAgICAgIGlmKCRkYXRhSGlzdG9yaVsnY2FyYV9wZXJvbGVoYW4nXSA9PSAnMicpewogICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkVSSU1BQU4gUEVNQkVMSUFOIjsKICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2NhcmFfcGVyb2xlaGFuJ10gPT0gJzMnKXsKICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJQRU5FUklNQUFOIEhJQkFIIjsKICAgICAgICAgICAgfQogICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICc0Jyl7CiAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAwOwogICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJDRUsgRklTSUsgVEFNQkFIIjsKICAgICAgICAgIH1lbHNlaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnMycpewogICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiUEVORVJJTUFBTiBESVNUUklCVVNJIjsKICAgICAgICAgIH0KICAgICAgICAgICRoYXJnYVNhdHVhbiA9ICRkYXRhSGlzdG9yaVsnaGFyZ2Ffc2F0dWFuJ107CiAgICAgICAgICAkdG90YWxIYXJnYSA9ICRoYXJnYVNhdHVhbiAqICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAkc2FsZG9CYXJhbmcgKz0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICR0b3RhbFNhbGRvICs9ICR0b3RhbEhhcmdhOwogICAgICAgIH1lbHNlewogICAgICAgICAgICBpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICc2Jyl7CiAgICAgICAgICAgICAgJGJhcmFuZ0tlbHVhciA9ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gMDsKICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJQRU5HRUxVQVJBTiI7CiAgICAgICAgICAgIH1lbHNlaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnNScpewogICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9IDA7CiAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiQ0VLIEZJU0lLIEtVUkFORyI7CiAgICAgICAgICAgIH1lbHNlaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnNycpewogICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9IDA7CiAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiUEVOR0VMVUFSQU4gRElTVFJJQlVTSSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJGhhcmdhU2F0dWFuID0gIiI7CiAgICAgICAgICAkc2FsZG9CYXJhbmcgLT0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICRnZXRUb3RhbEhhcmdhID0gbXlzcWxfZmV0Y2hfYXJyYXkobXlzcWxfcXVlcnkoInNlbGVjdCAqIGZyb20gdGVtcF9jaGVja19iYXJhbmdfa3VyYW5nIHdoZXJlIGNvbmNhdChjMSwnLicsYywnLicsZCwnLicsZSwnLicsZTEpID0gJyRrb2RlU0tQRCcgIGFuZCBjb25jYXQoZiwnLicsZywnLicsaCwnLicsaSwnLicsaiwnLicsajEpID0nJGtvZGVCYXJhbmcnIGFuZCB1c2VybmFtZSA9JyR0aGlzLT51c2VybmFtZScgYW5kIGlkX3Rfa2FydHVfcGVyc2VkaWFhbiA9ICciLiRkYXRhSGlzdG9yaVsnaWQnXS4iJyIpKTsKICAgICAgICAgICR0b3RhbEhhcmdhID0gJGdldFRvdGFsSGFyZ2FbJ2hhcmdhJ107CiAgICAgICAgICAkdG90YWxTYWxkbyAtPSAkdG90YWxIYXJnYTsKICAgICAgICB9CgogICAgICAgIGlmKCRzYWxkb0JhcmFuZyA8IDApewogICAgICAgICAgICAkaWRLYXJ0dVBlcnNlZGlhYW5bXSA9ICRkYXRhSGlzdG9yaVsnaWQnXTsKICAgICAgICAgICAgJHN0YXR1c0NoZWNrID0gIjEiOwogICAgICAgIH0KICAgICAgICAkZGF0YVJpbmNpYW5Mb2NrID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgJ2MxJyA9PiAkYzEsCiAgICAgICAgICAgICAgICAgICAgJ2MnID0+ICRjLAogICAgICAgICAgICAgICAgICAgICdkJyA9PiAkZCwKICAgICAgICAgICAgICAgICAgICAnZScgPT4gJGUsCiAgICAgICAgICAgICAgICAgICAgJ2UxJyA9PiAkZTEsCiAgICAgICAgICAgICAgICAgICAgJ2YnID0+ICRmLAogICAgICAgICAgICAgICAgICAgICdnJyA9PiAkZywKICAgICAgICAgICAgICAgICAgICAnaCcgPT4gJGgsCiAgICAgICAgICAgICAgICAgICAgJ2knID0+ICRpLAogICAgICAgICAgICAgICAgICAgICdqJyA9PiAkaiwKICAgICAgICAgICAgICAgICAgICAnajEnID0+ICRqMSwKICAgICAgICAgICAgICAgICAgICAndXNlcm5hbWUnID0+ICR0aGlzLT51c2VybmFtZSwKICAgICAgICAgICAgICAgICAgICAndGFuZ2dhbCcgPT4gJGRhdGFIaXN0b3JpWyd0YW5nZ2FsX2J1a3UnXSwKICAgICAgICAgICAgICAgICAgICAndXJhaWFuJyA9PiAkdXJhaWFuUGVyc2VkaWFhbiwKICAgICAgICAgICAgICAgICAgICAnbWFzdWsnID0+ICRiYXJhbmdNYXN1aywKICAgICAgICAgICAgICAgICAgICAna2VsdWFyJyA9PiAkYmFyYW5nS2VsdWFyLAogICAgICAgICAgICAgICAgICAgICdoYXJnYV9zYXR1YW4nID0+ICRoYXJnYVNhdHVhbiwKICAgICAgICAgICAgICAgICAgICAnc2FsZG8nID0+ICRzYWxkb0JhcmFuZywKICAgICAgICAgICAgICAgICAgICAndG90YWwnID0+ICR0b3RhbEhhcmdhLAogICAgICAgICAgICAgICAgICAgICd0b3RhbF9oYXJnYScgPT4gJHRvdGFsU2FsZG8sCiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnID0+ICRkYXRhSGlzdG9yaVsnamVuaXNfcGVyc2VkaWFhbiddLAogICAgICAgICAgICAgICAgICAgICdpZF90X2thcnR1X3BlcnNlZGlhYW4nID0+ICRkYXRhSGlzdG9yaVsnaWQnXSwKICAgICAgICAgICAgICAgICAgICAndGFodW4nID0+ICR0aGlzLT50YWh1bkFuZ2dhcmFuLAogICAgICAgICAgICAgICAgICAgICdwZXJpb2RlJyA9PiAkcGVyaW9kZSwKICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAkc3RhdHVzQ2hlY2ssCiAgICAgICAgICAgICAgICAgICAgJ2lkX3RyYW5zYWtzaScgPT4gJGRhdGFIaXN0b3JpWydyZWZpZCddCiAgICAgICAgKTsKICAgICAgICBteXNxbF9xdWVyeShWdWxuV2Fsa2VySW5zZXJ0KCdjaGVja19iYXJhbmdfcGVyc2VkaWFhbicsJGRhdGFSaW5jaWFuTG9jaykpOwoKICAgIH0KICAgICAgcmV0dXJuICRpZEthcnR1UGVyc2VkaWFhbiA7CiAgfQoKCiAgZnVuY3Rpb24gc2V0U2FsZG9Bd2FsKCRrb2RlU0tQRCwka29kZUJhcmFuZyl7CiAgICAkZ2V0RGF0YUJhcmFuZyA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX2JhcmFuZyB3aGVyZSBjb25jYXQoZiwnLicsZywnLicsaCwnLicsaSwnLicsaiwnLicsajEpID0gJyRrb2RlQmFyYW5nJyIpKTsKICAgICRnZXREYXRhUGVyc2VkaWFhbiA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdmlld19kYWZ0YXJfcGVyc2VkaWFhbiB3aGVyZSBjb25jYXQoYzEsJy4nLGMsJy4nLGQsJy4nLGUsJy4nLGUxKSA9ICcka29kZVNLUEQnIGFuZCBjb25jYXQoZiwnLicsZywnLicsaCwnLicsaSwnLicsaiwnLicsajEpID0gJyRrb2RlQmFyYW5nJyBhbmQgeWVhcih0YW5nZ2FsX2J1a3UpID0gJyR0aGlzLT50YWh1bkFuZ2dhcmFuJyIpKTsKICAgICRnZXREYXRhTG9ja0JhcmFuZyA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9wZXJzZWRpYWFuX2xvY2tfYmFyYW5nIHdoZXJlIGNvbmNhdChjMSwnLicsYywnLicsZCwnLicsZSwnLicsZTEpID0gJyRrb2RlU0tQRCcgYW5kIGNvbmNhdChmLCcuJyxnLCcuJyxoLCcuJyxpLCcuJyxqLCcuJyxqMSkgPSAnJGtvZGVCYXJhbmcnIGFuZCB0YWh1biA9ICckdGhpcy0+dGFodW5BbmdnYXJhbicgYW5kIHNlbWVzdGVyID0gJzEnIikpOwogICAgJGRhdGFTYWxkb0F3YWwgPSBhcnJheSgKICAgICAgJ2MxJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2MxJ10sCiAgICAgICdjJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2MnXSwKICAgICAgJ2QnID0+ICRnZXREYXRhUGVyc2VkaWFhblsnZCddLAogICAgICAnZScgPT4gJGdldERhdGFQZXJzZWRpYWFuWydlJ10sCiAgICAgICdlMScgPT4gJGdldERhdGFQZXJzZWRpYWFuWydlMSddLAogICAgICAnZicgPT4gJGdldERhdGFQZXJzZWRpYWFuWydmJ10sCiAgICAgICdnJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2cnXSwKICAgICAgJ2gnID0+ICRnZXREYXRhUGVyc2VkaWFhblsnaCddLAogICAgICAnaScgPT4gJGdldERhdGFQZXJzZWRpYWFuWydpJ10sCiAgICAgICdqJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2onXSwKICAgICAgJ2oxJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2oxJ10sCiAgICAgICdzYXR1YW4nID0+ICRnZXREYXRhQmFyYW5nWydzYXR1YW4nXSwKICAgICAgJ3RhbmdnYWwnID0+ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiItMDctMDEiLAogICAgICAnam5zJyA9PiAnMScsCiAgICAgICdqZW5pc19wZXJzZWRpYWFuJyA9PiAnMScsCiAgICAgICd0YWh1bl9hbmdnYXJhbicgPT4gJHRoaXMtPnRhaHVuQW5nZ2FyYW4sCiAgICAgICdoYXJnYV9zYXR1YW4nID0+ICRnZXREYXRhTG9ja0JhcmFuZ1snaGFyZ2EnXSAvICRnZXREYXRhTG9ja0JhcmFuZ1snc2FsZG9fYmFyYW5nJ10gICwKICAgICAgJ2p1bWxhaCcgPT4gJGdldERhdGFMb2NrQmFyYW5nWydzYWxkb19iYXJhbmcnXSAsCiAgICAgICd0b3RhbCcgPT4gJGdldERhdGFMb2NrQmFyYW5nWydoYXJnYSddLAogICAgKTsKICAgICRxdWVyeUluc2V0U2FsZG9Bd2FsID0gJHRoaXMtPnNxbEluc2VydCgic2FsZG9fYXdhbCIsJGRhdGFTYWxkb0F3YWwpOwogICAgJHRoaXMtPnNxbFF1ZXJ5KCRxdWVyeUluc2V0U2FsZG9Bd2FsKTsKICAgICRnZXRJZFRyYW5zYWtzaSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCBtYXgoaWQpIGZyb20gc2FsZG9fYXdhbCB3aGVyZSAkdGhpcy0+c3RyaW5nQ29uY2F0U3ViVW5pdCA9ICcka29kZVNLUEQnIGFuZCAkdGhpcy0+c3RyaW5nQ29uY2F0S29kZUJhcmFuZyA9ICcka29kZUJhcmFuZycgYW5kIHRhbmdnYWw9JyIuJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIi0wNy0wMSIuIiciKSk7CiAgICAkZGF0YUthcnR1UGVyc2VkaWFhbiA9IGFycmF5KAogICAgICAnYzEnID0+ICRnZXREYXRhUGVyc2VkaWFhblsnYzEnXSwKICAgICAgJ2MnID0+ICRnZXREYXRhUGVyc2VkaWFhblsnYyddLAogICAgICAnZCcgPT4gJGdldERhdGFQZXJzZWRpYWFuWydkJ10sCiAgICAgICdlJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2UnXSwKICAgICAgJ2UxJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2UxJ10sCiAgICAgICdmJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2YnXSwKICAgICAgJ2cnID0+ICRnZXREYXRhUGVyc2VkaWFhblsnZyddLAogICAgICAnaCcgPT4gJGdldERhdGFQZXJzZWRpYWFuWydoJ10sCiAgICAgICdpJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2knXSwKICAgICAgJ2onID0+ICRnZXREYXRhUGVyc2VkaWFhblsnaiddLAogICAgICAnajEnID0+ICRnZXREYXRhUGVyc2VkaWFhblsnajEnXSwKICAgICAgJ3RhbmdnYWxfYnVrdScgPT4gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIi0wNy0wMSIsCiAgICAgICdqbnMnID0+ICcxJywKICAgICAgJ2plbmlzX3BlcnNlZGlhYW4nID0+ICcxJywKICAgICAgJ2NhcmFfcGVyb2xlaGFuJyA9PiAnMScsCiAgICAgICdoYXJnYV9zYXR1YW4nID0+ICRnZXREYXRhTG9ja0JhcmFuZ1snaGFyZ2EnXSAvICRnZXREYXRhTG9ja0JhcmFuZ1snc2FsZG9fYmFyYW5nJ10sCiAgICAgICdqdW1sYWgnID0+ICRnZXREYXRhTG9ja0JhcmFuZ1snc2FsZG9fYmFyYW5nJ10gLAogICAgICAndG90YWwnID0+ICRnZXREYXRhTG9ja0JhcmFuZ1snaGFyZ2EnXSwKICAgICAgJ3NhdHVhbicgPT4gJGdldERhdGFCYXJhbmdbJ3NhdHVhbiddLAogICAgICAncmVmaWQnID0+ICRnZXRJZFRyYW5zYWtzaVsnbWF4KGlkKSddCiAgICApOwogICAgJHF1ZXJ5S2FydHVQZXJzZWRpYWFuID0gJHRoaXMtPnNxbEluc2VydCgidF9rYXJ0dV9wZXJzZWRpYWFuIiwkZGF0YUthcnR1UGVyc2VkaWFhbik7CiAgICAkdGhpcy0+c3FsUXVlcnkoJHF1ZXJ5S2FydHVQZXJzZWRpYWFuKTsKICAgIHJldHVybiAkcXVlcnlJbnNldFNhbGRvQXdhbDsKICB9CglmdW5jdGlvbiBzZXRTYWxkb0F3YWxUYWh1bmFuKCRrb2RlU0tQRCwka29kZUJhcmFuZyl7CiAgICAkdGFodW5EZXBhbiA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuICArIDE7CiAgICAkZ2V0RGF0YUJhcmFuZyA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX2JhcmFuZyB3aGVyZSBjb25jYXQoZiwnLicsZywnLicsaCwnLicsaSwnLicsaiwnLicsajEpID0gJyRrb2RlQmFyYW5nJyIpKTsKICAgICRnZXREYXRhUGVyc2VkaWFhbiA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdmlld19kYWZ0YXJfcGVyc2VkaWFhbiB3aGVyZSBjb25jYXQoYzEsJy4nLGMsJy4nLGQsJy4nLGUsJy4nLGUxKSA9ICcka29kZVNLUEQnIGFuZCBjb25jYXQoZiwnLicsZywnLicsaCwnLicsaSwnLicsaiwnLicsajEpID0gJyRrb2RlQmFyYW5nJyBhbmQgeWVhcih0YW5nZ2FsX2J1a3UpID0gJyR0aGlzLT50YWh1bkFuZ2dhcmFuJyIpKTsKICAgICRnZXREYXRhTG9ja0JhcmFuZyA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9wZXJzZWRpYWFuX2xvY2tfYmFyYW5nIHdoZXJlIGNvbmNhdChjMSwnLicsYywnLicsZCwnLicsZSwnLicsZTEpID0gJyRrb2RlU0tQRCcgYW5kIGNvbmNhdChmLCcuJyxnLCcuJyxoLCcuJyxpLCcuJyxqLCcuJyxqMSkgPSAnJGtvZGVCYXJhbmcnIGFuZCB0YWh1biA9ICckdGhpcy0+dGFodW5BbmdnYXJhbicgYW5kIHNlbWVzdGVyID0gJzInIikpOwogICAgJGRhdGFTYWxkb0F3YWwgPSBhcnJheSgKICAgICAgJ2MxJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2MxJ10sCiAgICAgICdjJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2MnXSwKICAgICAgJ2QnID0+ICRnZXREYXRhUGVyc2VkaWFhblsnZCddLAogICAgICAnZScgPT4gJGdldERhdGFQZXJzZWRpYWFuWydlJ10sCiAgICAgICdlMScgPT4gJGdldERhdGFQZXJzZWRpYWFuWydlMSddLAogICAgICAnZicgPT4gJGdldERhdGFQZXJzZWRpYWFuWydmJ10sCiAgICAgICdnJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2cnXSwKICAgICAgJ2gnID0+ICRnZXREYXRhUGVyc2VkaWFhblsnaCddLAogICAgICAnaScgPT4gJGdldERhdGFQZXJzZWRpYWFuWydpJ10sCiAgICAgICdqJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2onXSwKICAgICAgJ2oxJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2oxJ10sCiAgICAgICdzYXR1YW4nID0+ICRnZXREYXRhQmFyYW5nWydzYXR1YW4nXSwKICAgICAgJ3RhbmdnYWwnID0+ICR0YWh1bkRlcGFuLiItJHRoaXMtPmJ1bGFuVGFuZ2dhbFNhbGRvQXdhbCIsCiAgICAgICdqbnMnID0+ICcxJywKICAgICAgJ2plbmlzX3BlcnNlZGlhYW4nID0+ICcxJywKICAgICAgJ3RhaHVuX2FuZ2dhcmFuJyA9PiAkdGFodW5EZXBhbiwKICAgICAgJ2hhcmdhX3NhdHVhbicgPT4gJGdldERhdGFMb2NrQmFyYW5nWydoYXJnYSddIC8gJGdldERhdGFMb2NrQmFyYW5nWydzYWxkb19iYXJhbmcnXSAgLAogICAgICAnanVtbGFoJyA9PiAkZ2V0RGF0YUxvY2tCYXJhbmdbJ3NhbGRvX2JhcmFuZyddICwKICAgICAgJ3RvdGFsJyA9PiAkZ2V0RGF0YUxvY2tCYXJhbmdbJ2hhcmdhJ10sCiAgICApOwogICAgJHF1ZXJ5SW5zZXRTYWxkb0F3YWwgPSAkdGhpcy0+c3FsSW5zZXJ0KCJzYWxkb19hd2FsIiwkZGF0YVNhbGRvQXdhbCk7CiAgICAkdGhpcy0+c3FsUXVlcnkoJHF1ZXJ5SW5zZXRTYWxkb0F3YWwpOwogICAgJGdldElkVHJhbnNha3NpID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0IG1heChpZCkgZnJvbSBzYWxkb19hd2FsIHdoZXJlICR0aGlzLT5zdHJpbmdDb25jYXRTdWJVbml0ID0gJyRrb2RlU0tQRCcgYW5kICR0aGlzLT5zdHJpbmdDb25jYXRLb2RlQmFyYW5nID0gJyRrb2RlQmFyYW5nJyBhbmQgdGFuZ2dhbD0nIi4kdGFodW5EZXBhbi4iLSR0aGlzLT5idWxhblRhbmdnYWxTYWxkb0F3YWwiLiInIikpOwogICAgJGRhdGFLYXJ0dVBlcnNlZGlhYW4gPSBhcnJheSgKICAgICAgJ2MxJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2MxJ10sCiAgICAgICdjJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2MnXSwKICAgICAgJ2QnID0+ICRnZXREYXRhUGVyc2VkaWFhblsnZCddLAogICAgICAnZScgPT4gJGdldERhdGFQZXJzZWRpYWFuWydlJ10sCiAgICAgICdlMScgPT4gJGdldERhdGFQZXJzZWRpYWFuWydlMSddLAogICAgICAnZicgPT4gJGdldERhdGFQZXJzZWRpYWFuWydmJ10sCiAgICAgICdnJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2cnXSwKICAgICAgJ2gnID0+ICRnZXREYXRhUGVyc2VkaWFhblsnaCddLAogICAgICAnaScgPT4gJGdldERhdGFQZXJzZWRpYWFuWydpJ10sCiAgICAgICdqJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2onXSwKICAgICAgJ2oxJyA9PiAkZ2V0RGF0YVBlcnNlZGlhYW5bJ2oxJ10sCiAgICAgICd0YW5nZ2FsX2J1a3UnID0+ICR0YWh1bkRlcGFuLiItJHRoaXMtPmJ1bGFuVGFuZ2dhbFNhbGRvQXdhbCIsCiAgICAgICdqbnMnID0+ICcxJywKICAgICAgJ2plbmlzX3BlcnNlZGlhYW4nID0+ICcxJywKICAgICAgJ2NhcmFfcGVyb2xlaGFuJyA9PiAnMScsCiAgICAgICdoYXJnYV9zYXR1YW4nID0+ICRnZXREYXRhTG9ja0JhcmFuZ1snaGFyZ2EnXSAvICRnZXREYXRhTG9ja0JhcmFuZ1snc2FsZG9fYmFyYW5nJ10sCiAgICAgICdqdW1sYWgnID0+ICRnZXREYXRhTG9ja0JhcmFuZ1snc2FsZG9fYmFyYW5nJ10gLAogICAgICAndG90YWwnID0+ICRnZXREYXRhTG9ja0JhcmFuZ1snaGFyZ2EnXSwKICAgICAgJ3NhdHVhbicgPT4gJGdldERhdGFCYXJhbmdbJ3NhdHVhbiddLAogICAgICAncmVmaWQnID0+ICRnZXRJZFRyYW5zYWtzaVsnbWF4KGlkKSddCiAgICApOwogICAgaWYoIWVtcHR5KCRnZXREYXRhUGVyc2VkaWFhblsnYzEnXSkpewogICAgICAkcXVlcnlLYXJ0dVBlcnNlZGlhYW4gPSAkdGhpcy0+c3FsSW5zZXJ0KCJ0X2thcnR1X3BlcnNlZGlhYW4iLCRkYXRhS2FydHVQZXJzZWRpYWFuKTsKICAgIH0KICAgICR0aGlzLT5zcWxRdWVyeSgkcXVlcnlLYXJ0dVBlcnNlZGlhYW4pOwoKICAgIHJldHVybiAkcXVlcnlJbnNldFNhbGRvQXdhbDsKICB9CiAgZnVuY3Rpb24gZ3JhYlRyYW5zYWtzaVNlbWVzdGVyMSgka29kZVNLUEQsJGtvZGVCYXJhbmcsJGZpbHRlclBlcmlvZGUpewoJCSR0aGlzLT5zcWxRdWVyeSgiZGVsZXRlIGZyb20gY291bnRfZGlzdHJpYnVzaV9wZXJzZWRpYWFuIHdoZXJlICR0aGlzLT5zdHJpbmdDb25jYXRTdWJVbml0ID0gJyRrb2RlU0tQRCcgYW5kICR0aGlzLT5zdHJpbmdDb25jYXRLb2RlQmFyYW5nPScka29kZUJhcmFuZycgYW5kIHNlbWVzdGVyID0gJyRmaWx0ZXJQZXJpb2RlJyIpOwogICAgJGVyciA9ICIiOwogICAgJGNlayA9ICIiOwogICAgJGNvbnRlbnQgPSAiIjsKICAgICRrb25kaXNpVGFodW4gPSAiIGFuZCBsZWZ0KHRhbmdnYWxfYnVrdSw0KSA9ICciLiR0aGlzLT50YWh1bkFuZ2dhcmFuLiInICI7CiAgICBpZighZW1wdHkoJGZpbHRlclBlcmlvZGUpKXsKICAgICAgICBpZigkZmlsdGVyUGVyaW9kZSA9PSAnMScpewogICAgICAgICAgICAkbWF4RmlsdGVyID0gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIjA2IjsKICAgICAgICAgICAgJGtvbmRpc2lQZXJpb2RlICA9ICIgYW5kIHJlcGxhY2UobGVmdCh0YW5nZ2FsX2J1a3UsNyksJy0nLCcnKSA8PSAnJG1heEZpbHRlcicgIjsKICAgICAgICB9ZWxzZWlmKCRmaWx0ZXJQZXJpb2RlID09ICcyJyl7CiAgICAgICAgICAgICRtaW5GaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMDciOwogICAgICAgICAgICAkbWF4RmlsdGVyID0gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIjEyIjsKICAgICAgICAgICAgJGtvbmRpc2lQZXJpb2RlPSAiIGFuZCByZXBsYWNlKGxlZnQodGFuZ2dhbF9idWt1LDcpLCctJywnJykgPj0gJyRtaW5GaWx0ZXInIGFuZCByZXBsYWNlKGxlZnQodGFuZ2dhbF9idWt1LDcpLCctJywnJykgPD0gJyRtYXhGaWx0ZXInIjsKICAgICAgICB9ZWxzZWlmKCRmaWx0ZXJQZXJpb2RlID09ICczJyl7CiAgICAgICAgICAgICRtYXhGaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMTIiOwogICAgICAgICAgICAka29uZGlzaVBlcmlvZGUgPSAiIGFuZCByZXBsYWNlKGxlZnQodGFuZ2dhbF9idWt1LDcpLCctJywnJykgPD0gJyRtYXhGaWx0ZXInIjsKICAgICAgICB9CiAgICB9CgogICAgICAkZ2V0RGF0YSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlICR0aGlzLT5zdHJpbmdDb25jYXRTdWJVbml0ID0gJyRrb2RlU0tQRCcgYW5kICR0aGlzLT5zdHJpbmdDb25jYXRLb2RlQmFyYW5nPScka29kZUJhcmFuZycgIikpOwogICAgICAkZGF0YUxvY2tCYXJhbmcgPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICdjMScgPT4gJGdldERhdGFbJ2MxJ10sCiAgICAgICAgICAgICAgICAgICAgICAnYycgPT4gJGdldERhdGFbJ2MnXSwKICAgICAgICAgICAgICAgICAgICAgICdkJyA9PiAkZ2V0RGF0YVsnZCddLAogICAgICAgICAgICAgICAgICAgICAgJ2UnID0+ICRnZXREYXRhWydlJ10sCiAgICAgICAgICAgICAgICAgICAgICAnZTEnID0+ICRnZXREYXRhWydlMSddLAogICAgICAgICAgICAgICAgICAgICAgJ2YxJyA9PiAkZ2V0RGF0YVsnZjEnXSwKICAgICAgICAgICAgICAgICAgICAgICdmMicgPT4gJGdldERhdGFbJ2YyJ10sCiAgICAgICAgICAgICAgICAgICAgICAnZicgPT4gJGdldERhdGFbJ2YnXSwKICAgICAgICAgICAgICAgICAgICAgICdnJyA9PiAkZ2V0RGF0YVsnZyddLAogICAgICAgICAgICAgICAgICAgICAgJ2gnID0+ICRnZXREYXRhWydoJ10sCiAgICAgICAgICAgICAgICAgICAgICAnaScgPT4gJGdldERhdGFbJ2knXSwKICAgICAgICAgICAgICAgICAgICAgICdqJyA9PiAkZ2V0RGF0YVsnaiddLAogICAgICAgICAgICAgICAgICAgICAgJ2oxJyA9PiAkZ2V0RGF0YVsnajEnXSwKICAgICAgICAgICAgICAgICAgICAgICd0YWh1bicgPT4gJHRoaXMtPnRhaHVuQW5nZ2FyYW4sCiAgICAgICAgICAgICAgICAgICAgICAnc2VtZXN0ZXInID0+IDEsCiAgICAgICAgICApOwogICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoInRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyIsJGRhdGFMb2NrQmFyYW5nKSk7CgogICAgICAgICAgJGlkTG9jayA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCBtYXgoaWQpIGZyb20gdF9wZXJzZWRpYWFuX2xvY2tfYmFyYW5nIHdoZXJlIGMxPSciLiRnZXREYXRhWydjMSddLiInIGFuZCBjPSciLiRnZXREYXRhWydjJ10uIicgYW5kIGQ9JyIuJGdldERhdGFbJ2QnXS4iJyBhbmQgZT0nIi4kZ2V0RGF0YVsnZSddLiInIGFuZCBlMT0nIi4kZ2V0RGF0YVsnZTEnXS4iJyAgYW5kIGY9JyIuJGdldERhdGFbJ2YnXS4iJyBhbmQgZz0nIi4kZ2V0RGF0YVsnZyddLiInIGFuZCBoPSciLiRnZXREYXRhWydoJ10uIicgYW5kIGk9JyIuJGdldERhdGFbJ2knXS4iJyBhbmQgaj0nIi4kZ2V0RGF0YVsnaiddLiInIGFuZCBqMT0nIi4kZ2V0RGF0YVsnajEnXS4iJyBhbmQgdGFodW4gPSAnIi4kdGhpcy0+dGFodW5BbmdnYXJhbi4iJyBhbmQgc2VtZXN0ZXIgPSAnIi4kZmlsdGVyUGVyaW9kZS4iJyAiKSk7CiAgICAgICAgICAkaWRMb2NrID0gJGlkTG9ja1snbWF4KGlkKSddOwoKCiAgICAgICAgICAkZ2V0RGF0YVRhbWJhaCA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgYzE9JyIuJGdldERhdGFbJ2MxJ10uIicgYW5kIGM9JyIuJGdldERhdGFbJ2MnXS4iJyBhbmQgZD0nIi4kZ2V0RGF0YVsnZCddLiInIGFuZCBlPSciLiRnZXREYXRhWydlJ10uIicgYW5kIGUxPSciLiRnZXREYXRhWydlMSddLiInICBhbmQgZj0nIi4kZ2V0RGF0YVsnZiddLiInIGFuZCBnPSciLiRnZXREYXRhWydnJ10uIicgYW5kIGg9JyIuJGdldERhdGFbJ2gnXS4iJyBhbmQgaT0nIi4kZ2V0RGF0YVsnaSddLiInIGFuZCBqPSciLiRnZXREYXRhWydqJ10uIicgYW5kIGoxPSciLiRnZXREYXRhWydqMSddLiInIGFuZCBqZW5pc19wZXJzZWRpYWFuID0gJzEnICRrb25kaXNpVGFodW4gJGtvbmRpc2lQZXJpb2RlIG9yZGVyIGJ5IHRhbmdnYWxfYnVrdSBhc2MiKTsKICAgICAgICAgIHdoaWxlICgkZGF0YVRhbWJhaCA9ICR0aGlzLT5zcWxBcnJheSgkZ2V0RGF0YVRhbWJhaCkpIHsKCQkJCQkJaWYoJGRhdGFUYW1iYWhbJ2pucyddID09ICczJyl7CgkJCQkJCQkkZ2V0RGF0YURldGFpbERpc3RyaWJ1c2kgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGRldGFpbF9yaW5jaWFuX2Rpc3RyaWJ1c2kgd2hlcmUgIGlkID0gJyIuJGRhdGFUYW1iYWhbJ3JlZmlkJ10uIiciKSk7CgkJCQkJCQkkZ2V0RGF0YVJpbmNpYW5EaXN0cmlidXNpID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByaW5jaWFuX2Rpc3RyaWJ1c2kgd2hlcmUgIGlkID0gJyIuJGdldERhdGFEZXRhaWxEaXN0cmlidXNpWydpZF9yaW5jaWFuX2Rpc3RyaWJ1c2knXS4iJyIpKTsKCQkJCQkJCSRkYXRhQ291bnREaXN0cmlidXNpID0gYXJyYXkoCgkJCQkJCQkJCQkJCQknaWRfbG9ja19iYXJhbmcnID0+ICRpZExvY2ssCgkJCQkJCQkJCQkJCQknYzEnID0+ICRnZXREYXRhWydjMSddLAoJCQkJCQkJCQkJCQkJJ2MnID0+ICRnZXREYXRhWydjJ10sCgkJCQkJCQkJCQkJCQknZCcgPT4gJGdldERhdGFbJ2QnXSwKCQkJCQkJCQkJCQkJCSdlJyA9PiAkZ2V0RGF0YVsnZSddLAoJCQkJCQkJCQkJCQkJJ2UxJyA9PiAkZ2V0RGF0YVsnZTEnXSwKCQkJCQkJCQkJCQkJCSdmJyA9PiAkZ2V0RGF0YVsnZiddLAoJCQkJCQkJCQkJCQkJJ2cnID0+ICRnZXREYXRhWydnJ10sCgkJCQkJCQkJCQkJCQknaCcgPT4gJGdldERhdGFbJ2gnXSwKCQkJCQkJCQkJCQkJCSdpJyA9PiAkZ2V0RGF0YVsnaSddLAoJCQkJCQkJCQkJCQkJJ2onID0+ICRnZXREYXRhWydqJ10sCgkJCQkJCQkJCQkJCQknajEnID0+ICRnZXREYXRhWydqMSddLAoJCQkJCQkJCQkJCQkJJ2lkX2Rpc3RyaWJ1c2knID0+ICRnZXREYXRhUmluY2lhbkRpc3RyaWJ1c2lbJ2lkX2Rpc3RyaWJ1c2knXSwKCQkJCQkJCQkJCQkJCSdpZF9yaW5jaWFuX2Rpc3RyaWJ1c2knID0+ICRnZXREYXRhRGV0YWlsRGlzdHJpYnVzaVsnaWRfcmluY2lhbl9kaXN0cmlidXNpJ10sCgkJCQkJCQkJCQkJCQknc2VtZXN0ZXInID0+IDEsCgkJCQkJCQkJCQkJCQknbm9tb3InID0+ICRkYXRhVGFtYmFoWydub21vciddLAoJCQkJCQkJCQkJCQkJJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbicgPT4gJGRhdGFUYW1iYWhbJ2lkJ10KCgkJCQkJCQkpOwoJCQkJCQkJJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ2NvdW50X2Rpc3RyaWJ1c2lfcGVyc2VkaWFhbicsJGRhdGFDb3VudERpc3RyaWJ1c2kpKTsKCQkJCQkJIH0KICAgICAgICAgICAgICAkZGF0YUxvY2tUYW1iYWggPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAndGFuZ2dhbCcgPT4gJGRhdGFUYW1iYWhbJ3RhbmdnYWxfYnVrdSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdpZF90X2thcnR1X3BlcnNlZGlhYW4nID0+ICRkYXRhVGFtYmFoWydpZCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRkYXRhVGFtYmFoWydqdW1sYWgnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFyZ2EnID0+ICRkYXRhVGFtYmFoWydoYXJnYV9zYXR1YW4nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2lzYScgPT4gJGRhdGFUYW1iYWhbJ2p1bWxhaCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdpZF9sb2NrJyA9PiAkaWRMb2NrLAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ2xvY2tfYmFyYW5nX3RhbWJhaCcsJGRhdGFMb2NrVGFtYmFoKSk7CiAgICAgICAgICB9CgogICAgICAgICAgJGdldERhdGFLdXJhbmcgPSAkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGMxPSciLiRnZXREYXRhWydjMSddLiInIGFuZCBjPSciLiRnZXREYXRhWydjJ10uIicgYW5kIGU9JyIuJGdldERhdGFbJ2UnXS4iJyBhbmQgZTE9JyIuJGdldERhdGFbJ2UxJ10uIicgYW5kIGQ9JyIuJGdldERhdGFbJ2QnXS4iJyAgYW5kIGY9JyIuJGdldERhdGFbJ2YnXS4iJyBhbmQgZz0nIi4kZ2V0RGF0YVsnZyddLiInIGFuZCBoPSciLiRnZXREYXRhWydoJ10uIicgYW5kIGk9JyIuJGdldERhdGFbJ2knXS4iJyBhbmQgaj0nIi4kZ2V0RGF0YVsnaiddLiInIGFuZCBqMT0nIi4kZ2V0RGF0YVsnajEnXS4iJyBhbmQgamVuaXNfcGVyc2VkaWFhbiA9ICcyJyAka29uZGlzaVRhaHVuICRrb25kaXNpUGVyaW9kZSBvcmRlciBieSB0YW5nZ2FsX2J1a3UgYXNjIik7CiAgICAgICAgICB3aGlsZSAoJGRhdGFLdXJhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFLdXJhbmcpKSB7CiAgICAgICAgICAgICAgJGFycmF5UGVyb2xlaGFuID0gYXJyYXkoKTsKICAgICAgICAgICAgICAkanVtbGFoQmFyYW5nS3VyYW5nID0gJGRhdGFLdXJhbmdbJ2p1bWxhaCddOwogICAgICAgICAgICAgICRnZXREYXRhUGVuZXJpbWFhbiA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBsb2NrX2JhcmFuZ190YW1iYWggd2hlcmUgaWRfbG9jayA9ICciLiRpZExvY2suIicgYW5kIHNpc2EgIT0nMCciKTsKICAgICAgICAgICAgICB3aGlsZSAoJGRhdGFQZW5lcmltYWFuID0gJHRoaXMtPnNxbEFycmF5KCRnZXREYXRhUGVuZXJpbWFhbikpIHsKICAgICAgICAgICAgICAgICAgaWYoJGp1bWxhaEJhcmFuZ0t1cmFuZyAhPSAwKXsKCQkJCQkJCQkJCSRnZXRLYXJ0dVBlcnNlZGlhYW4gPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHRfa2FydHVfcGVyc2VkaWFhbiB3aGVyZSBpZCA9ICciLiRkYXRhUGVuZXJpbWFhblsnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJ10uIiciKSk7CgkJCQkJCQkJCQlpZigkZ2V0S2FydHVQZXJzZWRpYWFuWydqbnMnXSA9PSAnMycpewoJCQkJCQkJCQkJCQkvLyBpZihpbnR2YWwoJGdldEthcnR1UGVyc2VkaWFhblsnaGFyZ2Ffc2F0dWFuJ10pID09IDApewoJCQkJCQkJCQkJCQkJaWYoJHRoaXMtPnNxbE51bVJvdygkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gY291bnRfZGlzdHJpYnVzaV9wZXJzZWRpYWFuIHdoZXJlIG5vbW9yID0gJyIuJGdldEthcnR1UGVyc2VkaWFhblsnbm9tb3InXS4iJyBhbmQgc2VtZXN0ZXIgPSAnMScgYW5kIHRhbWJhaGFuX2hhcmdhICE9JyciKSkgIT0gMCl7CgkJCQkJCQkJCQkJCQkJJGdldERhdGFDb3VudERpc3RyaWJ1c2kgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGNvdW50X2Rpc3RyaWJ1c2lfcGVyc2VkaWFhbiB3aGVyZSBub21vciA9ICciLiRnZXRLYXJ0dVBlcnNlZGlhYW5bJ25vbW9yJ10uIicgYW5kIHNlbWVzdGVyID0gJzEnIGFuZCB0YW1iYWhhbl9oYXJnYSAhPScnIikpOwoJCQkJCQkJCQkJCQkJCSRoYXJnYVNhdHVhblBlbmVyaW1hYW4gPSAkZ2V0RGF0YUNvdW50RGlzdHJpYnVzaVsndGFtYmFoYW5faGFyZ2EnXSAvICRnZXRLYXJ0dVBlcnNlZGlhYW5bJ2p1bWxhaCddOwoJCQkJCQkJCQkJCQkJCSRkYXRhVXBkYXRlRGlzdHJpYnVzaUthcnR1ID0gYXJyYXkoCgkJCQkJCQkJCQkJCQkJCSdoYXJnYV9zYXR1YW4nID0+ICRoYXJnYVNhdHVhblBlbmVyaW1hYW4sCgkJCQkJCQkJCQkJCQkJCSd0b3RhbCcgPT4gJGdldERhdGFDb3VudERpc3RyaWJ1c2lbJ3RhbWJhaGFuX2hhcmdhJ10sCgkJCQkJCQkJCQkJCQkJKTsKCQkJCQkJCQkJCQkJCQkkdGhpcy0+c3FsUXVlcnkoJHRoaXMtPnNxbFVwZGF0ZSgidF9rYXJ0dV9wZXJzZWRpYWFuIiwkZGF0YVVwZGF0ZURpc3RyaWJ1c2lLYXJ0dSwiaWQgPSAnIi4kZGF0YVBlbmVyaW1hYW5bJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbiddLiInIikpOwoJCQkJCQkJCQkJCQkJCSR0aGlzLT5zcWxRdWVyeSgiZGVsZXRlIGZyb20gY291bnRfZGlzdHJpYnVzaV9wZXJzZWRpYWFuIHdoZXJlIG5vbW9yPSciLiRnZXRLYXJ0dVBlcnNlZGlhYW5bJ25vbW9yJ10uIiciKTsKCQkJCQkJCQkJCQkJCX0KCQkJCQkJCQkJCQkJLy8gfQoJCQkJCQkJCQkJfWVsc2V7CgkJCQkJCQkJCQkJJGhhcmdhU2F0dWFuUGVuZXJpbWFhbiA9ICRkYXRhUGVuZXJpbWFhblsnaGFyZ2EnXTsKCQkJCQkJCQkJCX0KICAgICAgICAgICAgICAgICAgICBpZigkanVtbGFoQmFyYW5nS3VyYW5nID4gJGRhdGFQZW5lcmltYWFuWydzaXNhJ10gKXsKICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCJ1cGRhdGUgbG9ja19iYXJhbmdfdGFtYmFoIHNldCBzaXNhID0gc2lzYSAtICIuJGRhdGFQZW5lcmltYWFuWydzaXNhJ10uIiB3aGVyZSBpZCA9ICciLiRkYXRhUGVuZXJpbWFhblsnaWQnXS4iJyIpOwogICAgICAgICAgICAgICAgICAgICAgICAkYXJyYXlQZXJvbGVoYW5bXSA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZFBlbmVyaW1hYW4nID0+ICRkYXRhUGVuZXJpbWFhblsnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2p1bWxhaCcgPT4gJGRhdGFQZW5lcmltYWFuWydzaXNhJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhcmdhJyA9PiAkJGhhcmdhU2F0dWFuUGVuZXJpbWFhbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndG90YWwnID0+ICRkYXRhUGVuZXJpbWFhblsnc2lzYSddICogJGhhcmdhU2F0dWFuUGVuZXJpbWFhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGp1bWxhaEJhcmFuZ0t1cmFuZyAtPSAkZGF0YVBlbmVyaW1hYW5bJ3Npc2EnXTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCJ1cGRhdGUgbG9ja19iYXJhbmdfdGFtYmFoIHNldCBzaXNhID0gc2lzYSAtICRqdW1sYWhCYXJhbmdLdXJhbmcgd2hlcmUgaWQgPSAnIi4kZGF0YVBlbmVyaW1hYW5bJ2lkJ10uIiciKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGFycmF5UGVyb2xlaGFuW10gPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRQZW5lcmltYWFuJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRqdW1sYWhCYXJhbmdLdXJhbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhcmdhJyA9PiAkaGFyZ2FTYXR1YW5QZW5lcmltYWFuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3RhbCcgPT4gJGp1bWxhaEJhcmFuZ0t1cmFuZyAqICRoYXJnYVNhdHVhblBlbmVyaW1hYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICRqdW1sYWhCYXJhbmdLdXJhbmcgPSAwOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAkZW5jb2RpbmcgPSBqc29uX2VuY29kZSgkYXJyYXlQZXJvbGVoYW4pOwogICAgICAgICAgICAgICRkZWNvZGluZyA9IGpzb25fZGVjb2RlKCRlbmNvZGluZyk7CiAgICAgICAgICAgICAgJGhhcmdhUGVyb2xlaGFuPSAiIjsKICAgICAgICAgICAgICBmb3IgKCRpPTA7ICRpIDwgc2l6ZW9mKCRkZWNvZGluZykgOyAkaSsrKSB7CiAgICAgICAgICAgICAgICAgICRoYXJnYVBlcm9sZWhhbiArPSAkZGVjb2RpbmdbJGldLT50b3RhbDsKICAgICAgICAgICAgICB9CgkJCQkJCQlpZigkZGF0YUt1cmFuZ1snam5zJ10gPT0gIjciKXsKCQkJCQkJCQkvL2h1YmxhCgkJCQkJCQkJJGdldERhdGFEZXRhaWxEaXN0cmlidXNpID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBkZXRhaWxfcmluY2lhbl9kaXN0cmlidXNpIHdoZXJlICBpZCA9ICciLiRkYXRhS3VyYW5nWydyZWZpZCddLiInIikpOwoJCQkJCQkJCSRnZXREYXRhUmluY2lhbkRpc3RyaWJ1c2kgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJpbmNpYW5fZGlzdHJpYnVzaSB3aGVyZSAgaWQgPSAnIi4kZ2V0RGF0YURldGFpbERpc3RyaWJ1c2lbJ2lkX3JpbmNpYW5fZGlzdHJpYnVzaSddLiInIikpOwoJCQkJCQkJCSRkYXRhQ291bnREaXN0cmlidXNpID0gYXJyYXkoCgkJCQkJCQkJCQkJCQkJJ2lkX2xvY2tfYmFyYW5nJyA9PiAkaWRMb2NrLAoJCQkJCQkJCQkJCQkJCSdjMScgPT4gJGdldERhdGFbJ2MxJ10sCgkJCQkJCQkJCQkJCQkJJ2MnID0+ICRnZXREYXRhWydjJ10sCgkJCQkJCQkJCQkJCQkJJ2QnID0+ICRnZXREYXRhWydkJ10sCgkJCQkJCQkJCQkJCQkJJ2UnID0+ICRnZXREYXRhWydlJ10sCgkJCQkJCQkJCQkJCQkJJ2UxJyA9PiAkZ2V0RGF0YVsnZTEnXSwKCQkJCQkJCQkJCQkJCQknZicgPT4gJGdldERhdGFbJ2YnXSwKCQkJCQkJCQkJCQkJCQknZycgPT4gJGdldERhdGFbJ2cnXSwKCQkJCQkJCQkJCQkJCQknaCcgPT4gJGdldERhdGFbJ2gnXSwKCQkJCQkJCQkJCQkJCQknaScgPT4gJGdldERhdGFbJ2knXSwKCQkJCQkJCQkJCQkJCQknaicgPT4gJGdldERhdGFbJ2onXSwKCQkJCQkJCQkJCQkJCQknajEnID0+ICRnZXREYXRhWydqMSddLAoJCQkJCQkJCQkJCQkJCSdpZF9kaXN0cmlidXNpJyA9PiAkZ2V0RGF0YVJpbmNpYW5EaXN0cmlidXNpWydpZF9kaXN0cmlidXNpJ10sCgkJCQkJCQkJCQkJCQkJJ2lkX3JpbmNpYW5fZGlzdHJpYnVzaScgPT4gJGdldERhdGFEZXRhaWxEaXN0cmlidXNpWydpZF9yaW5jaWFuX2Rpc3RyaWJ1c2knXSwKCQkJCQkJCQkJCQkJCQknc2VtZXN0ZXInID0+IDEsCgkJCQkJCQkJCQkJCQkJJ25vbW9yJyA9PiAkZGF0YUt1cmFuZ1snbm9tb3InXSwKCQkJCQkJCQkJCQkJCQkndGFtYmFoYW5faGFyZ2EnID0+ICRoYXJnYVBlcm9sZWhhbiwKCQkJCQkJCQkJCQkJCQknanNvbl9hcnJheScgPT4gJGVuY29kaW5nCgkJCQkJCQkJKTsKCQkJCQkJCQkkdGhpcy0+c3FsUXVlcnkoJHRoaXMtPnNxbEluc2VydCgnY291bnRfZGlzdHJpYnVzaV9wZXJzZWRpYWFuJywkZGF0YUNvdW50RGlzdHJpYnVzaSkpOwoJCQkJCQkJfQogICAgICAgICAgICAgICRkYXRhTG9ja0t1cmFuZyA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICd0YW5nZ2FsJyA9PiAkZGF0YUt1cmFuZ1sndGFuZ2dhbF9idWt1J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbicgPT4gJGRhdGFLdXJhbmdbJ2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2p1bWxhaCcgPT4gJGRhdGFLdXJhbmdbJ2p1bWxhaCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFyZ2EnID0+ICRoYXJnYVBlcm9sZWhhbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfbG9jaycgPT4gJGlkTG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgICAncGVyb2xlaGFuJyA9PiBqc29uX2VuY29kZSgkYXJyYXlQZXJvbGVoYW4pCgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ2xvY2tfYmFyYW5nX2t1cmFuZycsJGRhdGFMb2NrS3VyYW5nKSk7CiAgICAgICAgICB9CgoKICAgICAgICAgICRnZXREYXRhSGlzdG9yaSA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgYzE9JyIuJGdldERhdGFbJ2MxJ10uIicgYW5kIGM9JyIuJGdldERhdGFbJ2MnXS4iJyBhbmQgZD0nIi4kZ2V0RGF0YVsnZCddLiInIGFuZCBlPSciLiRnZXREYXRhWydlJ10uIicgYW5kIGUxPSciLiRnZXREYXRhWydlMSddLiInICBhbmQgZj0nIi4kZ2V0RGF0YVsnZiddLiInIGFuZCBnPSciLiRnZXREYXRhWydnJ10uIicgYW5kIGg9JyIuJGdldERhdGFbJ2gnXS4iJyBhbmQgaT0nIi4kZ2V0RGF0YVsnaSddLiInIGFuZCBqPSciLiRnZXREYXRhWydqJ10uIicgYW5kIGoxPSciLiRnZXREYXRhWydqMSddLiInICAka29uZGlzaVRhaHVuICRrb25kaXNpUGVyaW9kZSBvcmRlciBieSB0YW5nZ2FsX2J1a3UsamVuaXNfcGVyc2VkaWFhbiBhc2MiKTsKICAgICAgICAgIHdoaWxlICgkZGF0YUhpc3RvcmkgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFIaXN0b3JpKSkgewogICAgICAgICAgICAgIGlmKCRkYXRhSGlzdG9yaVsnamVuaXNfcGVyc2VkaWFhbiddID09IDEpewogICAgICAgICAgICAgICAgaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnMScpewogICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiU0FMRE8gQVdBTCI7CiAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzInKXsKICAgICAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgJGJhcmFuZ0tlbHVhciA9IDA7CiAgICAgICAgICAgICAgICAgIGlmKCRkYXRhSGlzdG9yaVsnY2FyYV9wZXJvbGVoYW4nXSA9PSAnMicpewogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkVSSU1BQU4gUEVNQkVMSUFOIjsKICAgICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2NhcmFfcGVyb2xlaGFuJ10gPT0gJzMnKXsKICAgICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJQRU5FUklNQUFOIEhJQkFIIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICc0Jyl7CiAgICAgICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAwOwogICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJDRUsgRklTSUsgVEFNQkFIIjsKICAgICAgICAgICAgICAgIH1lbHNlaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnMycpewogICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiUEVORVJJTUFBTiBESVNUUklCVVNJIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRoYXJnYVNhdHVhbiA9ICRkYXRhSGlzdG9yaVsnaGFyZ2Ffc2F0dWFuJ107CiAgICAgICAgICAgICAgICAkdG90YWxIYXJnYSA9ICRoYXJnYVNhdHVhbiAqICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAkc2FsZG9CYXJhbmcgKz0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICR0b3RhbFNhbGRvICs9ICR0b3RhbEhhcmdhOwoKICAgICAgICAgICAgICAgICRnZXRJZERldGFpbCA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gbG9ja19iYXJhbmdfdGFtYmFoIHdoZXJlIGlkX2xvY2sgPSAnJGlkTG9jaycgYW5kIGlkX3Rfa2FydHVfcGVyc2VkaWFhbiA9ICciLiRkYXRhSGlzdG9yaVsnaWQnXS4iJyIpKTsKICAgICAgICAgICAgICAgICRpZERldGFpbCA9ICRnZXRJZERldGFpbFsnaWQnXTsKICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnNicpewogICAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9IDA7CiAgICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiUEVOR0VMVUFSQU4iOwogICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzUnKXsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAwOwogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIkNFSyBGSVNJSyBLVVJBTkciOwogICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzcnKXsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAwOwogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkdFTFVBUkFOIERJU1RSSUJVU0kiOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICRoYXJnYVNhdHVhbiA9ICIiOwogICAgICAgICAgICAgICAgJHNhbGRvQmFyYW5nIC09ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAkZ2V0VG90YWxIYXJnYSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gbG9ja19iYXJhbmdfa3VyYW5nIHdoZXJlIGlkX2xvY2sgPSAnJGlkTG9jaycgYW5kIGlkX3Rfa2FydHVfcGVyc2VkaWFhbiA9ICciLiRkYXRhSGlzdG9yaVsnaWQnXS4iJyIpKTsKICAgICAgICAgICAgICAgICR0b3RhbEhhcmdhID0gJGdldFRvdGFsSGFyZ2FbJ2hhcmdhJ107CiAgICAgICAgICAgICAgICAkdG90YWxTYWxkbyAtPSAkdG90YWxIYXJnYTsKICAgICAgICAgICAgICAgICRpZERldGFpbCA9ICRnZXRUb3RhbEhhcmdhWydpZCddOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAkZGF0YVJpbmNpYW5Mb2NrID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX2xvY2snID0+ICRpZExvY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhbmdnYWwnID0+ICRkYXRhSGlzdG9yaVsndGFuZ2dhbF9idWt1J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VyYWlhbicgPT4gJHVyYWlhblBlcnNlZGlhYW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hc3VrJyA9PiAkYmFyYW5nTWFzdWssCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2tlbHVhcicgPT4gJGJhcmFuZ0tlbHVhciwKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2FsZG9fYmFyYW5nJyA9PiAkc2FsZG9CYXJhbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvdGFsJyA9PiAkdG90YWxIYXJnYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2FsZG8nID0+ICR0b3RhbFNhbGRvLAogICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJyA9PiAkZGF0YUhpc3RvcmlbJ2plbmlzX3BlcnNlZGlhYW4nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJyA9PiAkZGF0YUhpc3RvcmlbJ2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX2RldGFpbCcgPT4gJGlkRGV0YWlsLAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ3JpbmNpYW5fbG9ja19iYXJhbmcnLCRkYXRhUmluY2lhbkxvY2spKTsKICAgICAgICAgIH0KICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgidXBkYXRlIHRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyBzZXQgaGFyZ2EgPSAnJHRvdGFsU2FsZG8nLCBzYWxkb19iYXJhbmcgPSAnJHNhbGRvQmFyYW5nJyB3aGVyZSBpZCA9ICckaWRMb2NrJyIpOwogICAgICByZXR1cm4gYXJyYXkoCiAgICAgICAgJ2lkTG9jaycgPT4gJGlkTG9jaywKICAgICAgICAnanVtbGFoSGFyZ2EnID0+ICR0b3RhbFNhbGRvLAogICAgICAgICdzYWxkbycgPT4gJHNhbGRvQmFyYW5nLAogICAgICApOwogIH0KICBmdW5jdGlvbiBncmFiVHJhbnNha3NpU2VtZXN0ZXIyKCRrb2RlU0tQRCwka29kZUJhcmFuZyl7CgogICAgJGVyciA9ICIiOwogICAgJGNlayA9ICIiOwogICAgJGNvbnRlbnQgPSAiIjsKICAgICRmaWx0ZXJQZXJpb2RlID0gJzInOwogICAgJGtvbmRpc2lUYWh1biA9ICIgYW5kIGxlZnQodGFuZ2dhbF9idWt1LDQpID0gJyIuJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIicgIjsKICAgIGlmKCFlbXB0eSgkZmlsdGVyUGVyaW9kZSkpewogICAgICAgIGlmKCRmaWx0ZXJQZXJpb2RlID09ICcxJyl7CiAgICAgICAgICAgICRtYXhGaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMDYiOwogICAgICAgICAgICAka29uZGlzaVBlcmlvZGUgID0gIiBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpIDw9ICckbWF4RmlsdGVyJyAiOwogICAgICAgIH1lbHNlaWYoJGZpbHRlclBlcmlvZGUgPT0gJzInKXsKICAgICAgICAgICAgJG1pbkZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIwNyI7CiAgICAgICAgICAgICRtYXhGaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMTIiOwogICAgICAgICAgICAka29uZGlzaVBlcmlvZGU9ICIgYW5kIHJlcGxhY2UobGVmdCh0YW5nZ2FsX2J1a3UsNyksJy0nLCcnKSA+PSAnJG1pbkZpbHRlcicgYW5kIHJlcGxhY2UobGVmdCh0YW5nZ2FsX2J1a3UsNyksJy0nLCcnKSA8PSAnJG1heEZpbHRlciciOwogICAgICAgICAgICAka29uZGlzaVNhbGRvQXdhbCA9ICIgYW5kIGlkIG5vdCBpbiAoIHNlbGVjdCBpZCBmcm9tIHRfa2FydHVfcGVyc2VkaWFhbiB3aGVyZSBqbnMgPSAnMScgYW5kIGplbmlzX3BlcnNlZGlhYW4gPSAnMScgYW5kIHRhbmdnYWxfYnVrdSA9ICciLiR0aGlzLT50YWh1bkFuZ2dhcmFuLiItJHRoaXMtPmJ1bGFuVGFuZ2dhbFNhbGRvQXdhbCcpICI7CiAgICAgICAgfWVsc2VpZigkZmlsdGVyUGVyaW9kZSA9PSAnMycpewogICAgICAgICAgICAkbWF4RmlsdGVyID0gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIjEyIjsKICAgICAgICAgICAgJGtvbmRpc2lQZXJpb2RlID0gIiBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpIDw9ICckbWF4RmlsdGVyJyI7CiAgICAgICAgICAgICRrb25kaXNpU2FsZG9Bd2FsID0gIiBhbmQgaWQgbm90IGluICggc2VsZWN0IGlkIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGpucyA9ICcxJyBhbmQgamVuaXNfcGVyc2VkaWFhbiA9ICcxJyBhbmQgdGFuZ2dhbF9idWt1ID0gJyIuJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIi0wNy0wMScpICI7CiAgICAgICAgfQogICAgfQoKICAgICAgJGdldERhdGEgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHRfa2FydHVfcGVyc2VkaWFhbiB3aGVyZSAkdGhpcy0+c3RyaW5nQ29uY2F0U3ViVW5pdCA9ICcka29kZVNLUEQnIGFuZCAkdGhpcy0+c3RyaW5nQ29uY2F0S29kZUJhcmFuZz0nJGtvZGVCYXJhbmcnICIpKTsKICAgICAgJGRhdGFMb2NrQmFyYW5nID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAnYzEnID0+ICRnZXREYXRhWydjMSddLAogICAgICAgICAgICAgICAgICAgICAgJ2MnID0+ICRnZXREYXRhWydjJ10sCiAgICAgICAgICAgICAgICAgICAgICAnZCcgPT4gJGdldERhdGFbJ2QnXSwKICAgICAgICAgICAgICAgICAgICAgICdlJyA9PiAkZ2V0RGF0YVsnZSddLAogICAgICAgICAgICAgICAgICAgICAgJ2UxJyA9PiAkZ2V0RGF0YVsnZTEnXSwKICAgICAgICAgICAgICAgICAgICAgICdmMScgPT4gJGdldERhdGFbJ2YxJ10sCiAgICAgICAgICAgICAgICAgICAgICAnZjInID0+ICRnZXREYXRhWydmMiddLAogICAgICAgICAgICAgICAgICAgICAgJ2YnID0+ICRnZXREYXRhWydmJ10sCiAgICAgICAgICAgICAgICAgICAgICAnZycgPT4gJGdldERhdGFbJ2cnXSwKICAgICAgICAgICAgICAgICAgICAgICdoJyA9PiAkZ2V0RGF0YVsnaCddLAogICAgICAgICAgICAgICAgICAgICAgJ2knID0+ICRnZXREYXRhWydpJ10sCiAgICAgICAgICAgICAgICAgICAgICAnaicgPT4gJGdldERhdGFbJ2onXSwKICAgICAgICAgICAgICAgICAgICAgICdqMScgPT4gJGdldERhdGFbJ2oxJ10sCiAgICAgICAgICAgICAgICAgICAgICAndGFodW4nID0+ICR0aGlzLT50YWh1bkFuZ2dhcmFuLAogICAgICAgICAgICAgICAgICAgICAgJ3NlbWVzdGVyJyA9PiAyLAogICAgICAgICAgKTsKCQkJCQkkaW5zZXJ0TG9ja0JhcmFuZyA9ICR0aGlzLT5zcWxJbnNlcnQoInRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyIsJGRhdGFMb2NrQmFyYW5nKTsKICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgkaW5zZXJ0TG9ja0JhcmFuZyk7CgogICAgICAgICAgJGlkTG9jayA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCBtYXgoaWQpIGZyb20gdF9wZXJzZWRpYWFuX2xvY2tfYmFyYW5nIHdoZXJlIGMxPSciLiRnZXREYXRhWydjMSddLiInIGFuZCBjPSciLiRnZXREYXRhWydjJ10uIicgYW5kIGQ9JyIuJGdldERhdGFbJ2QnXS4iJyBhbmQgZT0nIi4kZ2V0RGF0YVsnZSddLiInIGFuZCBlMT0nIi4kZ2V0RGF0YVsnZTEnXS4iJyAgYW5kIGY9JyIuJGdldERhdGFbJ2YnXS4iJyBhbmQgZz0nIi4kZ2V0RGF0YVsnZyddLiInIGFuZCBoPSciLiRnZXREYXRhWydoJ10uIicgYW5kIGk9JyIuJGdldERhdGFbJ2knXS4iJyBhbmQgaj0nIi4kZ2V0RGF0YVsnaiddLiInIGFuZCBqMT0nIi4kZ2V0RGF0YVsnajEnXS4iJyBhbmQgdGFodW4gPSAnIi4kdGhpcy0+dGFodW5BbmdnYXJhbi4iJyBhbmQgc2VtZXN0ZXIgPSAnIi4kZmlsdGVyUGVyaW9kZS4iJyAiKSk7CiAgICAgICAgICAkaWRMb2NrID0gJGlkTG9ja1snbWF4KGlkKSddOwoKCiAgICAgICAgICAkZ2V0RGF0YVRhbWJhaCA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgYzE9JyIuJGdldERhdGFbJ2MxJ10uIicgYW5kIGM9JyIuJGdldERhdGFbJ2MnXS4iJyBhbmQgZD0nIi4kZ2V0RGF0YVsnZCddLiInIGFuZCBlPSciLiRnZXREYXRhWydlJ10uIicgYW5kIGUxPSciLiRnZXREYXRhWydlMSddLiInICBhbmQgZj0nIi4kZ2V0RGF0YVsnZiddLiInIGFuZCBnPSciLiRnZXREYXRhWydnJ10uIicgYW5kIGg9JyIuJGdldERhdGFbJ2gnXS4iJyBhbmQgaT0nIi4kZ2V0RGF0YVsnaSddLiInIGFuZCBqPSciLiRnZXREYXRhWydqJ10uIicgYW5kIGoxPSciLiRnZXREYXRhWydqMSddLiInIGFuZCBqZW5pc19wZXJzZWRpYWFuID0gJzEnICRrb25kaXNpVGFodW4gJGtvbmRpc2lQZXJpb2RlICRrb25kaXNpU2FsZG9Bd2FsIG9yZGVyIGJ5IHRhbmdnYWxfYnVrdSBhc2MiKTsKICAgICAgICAgIHdoaWxlICgkZGF0YVRhbWJhaCA9ICR0aGlzLT5zcWxBcnJheSgkZ2V0RGF0YVRhbWJhaCkpIHsKICAgICAgICAgICAgICAkZGF0YUxvY2tUYW1iYWggPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAndGFuZ2dhbCcgPT4gJGRhdGFUYW1iYWhbJ3RhbmdnYWxfYnVrdSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdpZF90X2thcnR1X3BlcnNlZGlhYW4nID0+ICRkYXRhVGFtYmFoWydpZCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRkYXRhVGFtYmFoWydqdW1sYWgnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFyZ2EnID0+ICRkYXRhVGFtYmFoWydoYXJnYV9zYXR1YW4nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2lzYScgPT4gJGRhdGFUYW1iYWhbJ2p1bWxhaCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdpZF9sb2NrJyA9PiAkaWRMb2NrLAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ2xvY2tfYmFyYW5nX3RhbWJhaCcsJGRhdGFMb2NrVGFtYmFoKSk7CiAgICAgICAgICB9CgogICAgICAgICAgJGdldERhdGFLdXJhbmcgPSAkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGMxPSciLiRnZXREYXRhWydjMSddLiInIGFuZCBjPSciLiRnZXREYXRhWydjJ10uIicgYW5kIGU9JyIuJGdldERhdGFbJ2UnXS4iJyBhbmQgZTE9JyIuJGdldERhdGFbJ2UxJ10uIicgYW5kIGQ9JyIuJGdldERhdGFbJ2QnXS4iJyAgYW5kIGY9JyIuJGdldERhdGFbJ2YnXS4iJyBhbmQgZz0nIi4kZ2V0RGF0YVsnZyddLiInIGFuZCBoPSciLiRnZXREYXRhWydoJ10uIicgYW5kIGk9JyIuJGdldERhdGFbJ2knXS4iJyBhbmQgaj0nIi4kZ2V0RGF0YVsnaiddLiInIGFuZCBqMT0nIi4kZ2V0RGF0YVsnajEnXS4iJyBhbmQgamVuaXNfcGVyc2VkaWFhbiA9ICcyJyAka29uZGlzaVRhaHVuICRrb25kaXNpUGVyaW9kZSAka29uZGlzaVNhbGRvQXdhbCBvcmRlciBieSB0YW5nZ2FsX2J1a3UgYXNjIik7CiAgICAgICAgICB3aGlsZSAoJGRhdGFLdXJhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFLdXJhbmcpKSB7CiAgICAgICAgICAgICAgJGFycmF5UGVyb2xlaGFuID0gYXJyYXkoKTsKICAgICAgICAgICAgICAkanVtbGFoQmFyYW5nS3VyYW5nID0gJGRhdGFLdXJhbmdbJ2p1bWxhaCddOwogICAgICAgICAgICAgICRnZXREYXRhUGVuZXJpbWFhbiA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBsb2NrX2JhcmFuZ190YW1iYWggd2hlcmUgaWRfbG9jayA9ICciLiRpZExvY2suIicgYW5kIHNpc2EgIT0nMCciKTsKICAgICAgICAgICAgICB3aGlsZSAoJGRhdGFQZW5lcmltYWFuID0gJHRoaXMtPnNxbEFycmF5KCRnZXREYXRhUGVuZXJpbWFhbikpIHsKICAgICAgICAgICAgICAgICAgaWYoJGp1bWxhaEJhcmFuZ0t1cmFuZyAhPSAwKXsKICAgICAgICAgICAgICAgICAgICBpZigkanVtbGFoQmFyYW5nS3VyYW5nID4gJGRhdGFQZW5lcmltYWFuWydzaXNhJ10gKXsKICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCJ1cGRhdGUgbG9ja19iYXJhbmdfdGFtYmFoIHNldCBzaXNhID0gc2lzYSAtICIuJGRhdGFQZW5lcmltYWFuWydzaXNhJ10uIiB3aGVyZSBpZCA9ICciLiRkYXRhUGVuZXJpbWFhblsnaWQnXS4iJyIpOwogICAgICAgICAgICAgICAgICAgICAgICAkYXJyYXlQZXJvbGVoYW5bXSA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZFBlbmVyaW1hYW4nID0+ICRkYXRhUGVuZXJpbWFhblsnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2p1bWxhaCcgPT4gJGRhdGFQZW5lcmltYWFuWydzaXNhJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhcmdhJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ2hhcmdhJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvdGFsJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ3Npc2EnXSAqICRkYXRhUGVuZXJpbWFhblsnaGFyZ2EnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGp1bWxhaEJhcmFuZ0t1cmFuZyAtPSAkZGF0YVBlbmVyaW1hYW5bJ3Npc2EnXTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCJ1cGRhdGUgbG9ja19iYXJhbmdfdGFtYmFoIHNldCBzaXNhID0gc2lzYSAtICRqdW1sYWhCYXJhbmdLdXJhbmcgd2hlcmUgaWQgPSAnIi4kZGF0YVBlbmVyaW1hYW5bJ2lkJ10uIiciKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGFycmF5UGVyb2xlaGFuW10gPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRQZW5lcmltYWFuJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRqdW1sYWhCYXJhbmdLdXJhbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhcmdhJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ2hhcmdhJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvdGFsJyA9PiAkanVtbGFoQmFyYW5nS3VyYW5nICogJGRhdGFQZW5lcmltYWFuWydoYXJnYSddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAkanVtbGFoQmFyYW5nS3VyYW5nID0gMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgJGVuY29kaW5nID0ganNvbl9lbmNvZGUoJGFycmF5UGVyb2xlaGFuKTsKICAgICAgICAgICAgICAkZGVjb2RpbmcgPSBqc29uX2RlY29kZSgkZW5jb2RpbmcpOwogICAgICAgICAgICAgICRoYXJnYVBlcm9sZWhhbj0gIiI7CiAgICAgICAgICAgICAgZm9yICgkaT0wOyAkaSA8IHNpemVvZigkZGVjb2RpbmcpIDsgJGkrKykgewogICAgICAgICAgICAgICAgICAkaGFyZ2FQZXJvbGVoYW4gKz0gJGRlY29kaW5nWyRpXS0+dG90YWw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICRkYXRhTG9ja0t1cmFuZyA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICd0YW5nZ2FsJyA9PiAkZGF0YUt1cmFuZ1sndGFuZ2dhbF9idWt1J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbicgPT4gJGRhdGFLdXJhbmdbJ2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2p1bWxhaCcgPT4gJGRhdGFLdXJhbmdbJ2p1bWxhaCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFyZ2EnID0+ICRoYXJnYVBlcm9sZWhhbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfbG9jaycgPT4gJGlkTG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgICAncGVyb2xlaGFuJyA9PiBqc29uX2VuY29kZSgkYXJyYXlQZXJvbGVoYW4pCgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ2xvY2tfYmFyYW5nX2t1cmFuZycsJGRhdGFMb2NrS3VyYW5nKSk7CiAgICAgICAgICB9CgoKICAgICAgICAgICRnZXREYXRhSGlzdG9yaSA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgYzE9JyIuJGdldERhdGFbJ2MxJ10uIicgYW5kIGM9JyIuJGdldERhdGFbJ2MnXS4iJyBhbmQgZD0nIi4kZ2V0RGF0YVsnZCddLiInIGFuZCBlPSciLiRnZXREYXRhWydlJ10uIicgYW5kIGUxPSciLiRnZXREYXRhWydlMSddLiInICBhbmQgZj0nIi4kZ2V0RGF0YVsnZiddLiInIGFuZCBnPSciLiRnZXREYXRhWydnJ10uIicgYW5kIGg9JyIuJGdldERhdGFbJ2gnXS4iJyBhbmQgaT0nIi4kZ2V0RGF0YVsnaSddLiInIGFuZCBqPSciLiRnZXREYXRhWydqJ10uIicgYW5kIGoxPSciLiRnZXREYXRhWydqMSddLiInICAka29uZGlzaVRhaHVuICRrb25kaXNpUGVyaW9kZSAka29uZGlzaVNhbGRvQXdhbCBvcmRlciBieSB0YW5nZ2FsX2J1a3UsamVuaXNfcGVyc2VkaWFhbiBhc2MiKTsKICAgICAgICAgIHdoaWxlICgkZGF0YUhpc3RvcmkgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFIaXN0b3JpKSkgewogICAgICAgICAgICAgIGlmKCRkYXRhSGlzdG9yaVsnamVuaXNfcGVyc2VkaWFhbiddID09IDEpewogICAgICAgICAgICAgICAgaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnMScpewogICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiU0FMRE8gQVdBTCI7CiAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzInKXsKICAgICAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgJGJhcmFuZ0tlbHVhciA9IDA7CiAgICAgICAgICAgICAgICAgIGlmKCRkYXRhSGlzdG9yaVsnY2FyYV9wZXJvbGVoYW4nXSA9PSAnMicpewogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkVSSU1BQU4gUEVNQkVMSUFOIjsKICAgICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2NhcmFfcGVyb2xlaGFuJ10gPT0gJzMnKXsKICAgICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJQRU5FUklNQUFOIEhJQkFIIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICc0Jyl7CiAgICAgICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAwOwogICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJDRUsgRklTSUsgVEFNQkFIIjsKICAgICAgICAgICAgICAgIH1lbHNlaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnMycpewogICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiUEVORVJJTUFBTiBESVNUUklCVVNJIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRoYXJnYVNhdHVhbiA9ICRkYXRhSGlzdG9yaVsnaGFyZ2Ffc2F0dWFuJ107CiAgICAgICAgICAgICAgICAkdG90YWxIYXJnYSA9ICRoYXJnYVNhdHVhbiAqICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAkc2FsZG9CYXJhbmcgKz0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICR0b3RhbFNhbGRvICs9ICR0b3RhbEhhcmdhOwoKICAgICAgICAgICAgICAgICRnZXRJZERldGFpbCA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gbG9ja19iYXJhbmdfdGFtYmFoIHdoZXJlIGlkX2xvY2sgPSAnJGlkTG9jaycgYW5kIGlkX3Rfa2FydHVfcGVyc2VkaWFhbiA9ICciLiRkYXRhSGlzdG9yaVsnaWQnXS4iJyIpKTsKICAgICAgICAgICAgICAgICRpZERldGFpbCA9ICRnZXRJZERldGFpbFsnaWQnXTsKICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnNicpewogICAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9IDA7CiAgICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiUEVOR0VMVUFSQU4iOwogICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzUnKXsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAwOwogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIkNFSyBGSVNJSyBLVVJBTkciOwogICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzcnKXsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAwOwogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkdFTFVBUkFOIERJU1RSSUJVU0kiOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICRoYXJnYVNhdHVhbiA9ICIiOwogICAgICAgICAgICAgICAgJHNhbGRvQmFyYW5nIC09ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAkZ2V0VG90YWxIYXJnYSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gbG9ja19iYXJhbmdfa3VyYW5nIHdoZXJlIGlkX2xvY2sgPSAnJGlkTG9jaycgYW5kIGlkX3Rfa2FydHVfcGVyc2VkaWFhbiA9ICciLiRkYXRhSGlzdG9yaVsnaWQnXS4iJyIpKTsKICAgICAgICAgICAgICAgICR0b3RhbEhhcmdhID0gJGdldFRvdGFsSGFyZ2FbJ2hhcmdhJ107CiAgICAgICAgICAgICAgICAkdG90YWxTYWxkbyAtPSAkdG90YWxIYXJnYTsKICAgICAgICAgICAgICAgICRpZERldGFpbCA9ICRnZXRUb3RhbEhhcmdhWydpZCddOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAkZGF0YVJpbmNpYW5Mb2NrID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX2xvY2snID0+ICRpZExvY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhbmdnYWwnID0+ICRkYXRhSGlzdG9yaVsndGFuZ2dhbF9idWt1J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VyYWlhbicgPT4gJHVyYWlhblBlcnNlZGlhYW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hc3VrJyA9PiAkYmFyYW5nTWFzdWssCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2tlbHVhcicgPT4gJGJhcmFuZ0tlbHVhciwKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2FsZG9fYmFyYW5nJyA9PiAkc2FsZG9CYXJhbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvdGFsJyA9PiAkdG90YWxIYXJnYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2FsZG8nID0+ICR0b3RhbFNhbGRvLAogICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJyA9PiAkZGF0YUhpc3RvcmlbJ2plbmlzX3BlcnNlZGlhYW4nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJyA9PiAkZGF0YUhpc3RvcmlbJ2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX2RldGFpbCcgPT4gJGlkRGV0YWlsLAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ3JpbmNpYW5fbG9ja19iYXJhbmcnLCRkYXRhUmluY2lhbkxvY2spKTsKICAgICAgICAgIH0KICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgidXBkYXRlIHRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyBzZXQgaGFyZ2EgPSAnJHRvdGFsU2FsZG8nLCBzYWxkb19iYXJhbmcgPSAnJHNhbGRvQmFyYW5nJyB3aGVyZSBpZCA9ICckaWRMb2NrJyIpOwogICAgICAvLyByZXR1cm4gYXJyYXkoCiAgICAgIC8vICAgJ2lkTG9jaycgPT4gJGlkTG9jaywKICAgICAgLy8gICAnanVtbGFoSGFyZ2EnID0+ICR0b3RhbFNhbGRvLAogICAgICAvLyAgICdzYWxkbycgPT4gJHNhbGRvQmFyYW5nLAogICAgICAvLyApOwoJCQlyZXR1cm4gJGluc2VydExvY2tCYXJhbmc7CiAgfQoKICBmdW5jdGlvbiBncmFiVHJhbnNha3NpVGFodW5hbigka29kZVNLUEQsJGtvZGVCYXJhbmcpewoJCSRmaWx0ZXJQZXJpb2RlID0gMzsKCQkkdGhpcy0+c3FsUXVlcnkoImRlbGV0ZSBmcm9tIGNvdW50X2Rpc3RyaWJ1c2lfcGVyc2VkaWFhbiB3aGVyZSAkdGhpcy0+c3RyaW5nQ29uY2F0U3ViVW5pdCA9ICcka29kZVNLUEQnIGFuZCAkdGhpcy0+c3RyaW5nQ29uY2F0S29kZUJhcmFuZz0nJGtvZGVCYXJhbmcnIGFuZCBzZW1lc3RlciA9ICckZmlsdGVyUGVyaW9kZSciKTsKICAgICRlcnIgPSAiIjsKICAgICRjZWsgPSAiIjsKICAgICRjb250ZW50ID0gIiI7CiAgICAka29uZGlzaVRhaHVuID0gIiBhbmQgbGVmdCh0YW5nZ2FsX2J1a3UsNCkgPSAnIi4kdGhpcy0+dGFodW5BbmdnYXJhbi4iJyAiOwogICAgaWYoIWVtcHR5KCRmaWx0ZXJQZXJpb2RlKSl7CiAgICAgICAgaWYoJGZpbHRlclBlcmlvZGUgPT0gJzEnKXsKICAgICAgICAgICAgJG1heEZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIwNiI7CiAgICAgICAgICAgICRrb25kaXNpUGVyaW9kZSAgPSAiIGFuZCByZXBsYWNlKGxlZnQodGFuZ2dhbF9idWt1LDcpLCctJywnJykgPD0gJyRtYXhGaWx0ZXInICI7CiAgICAgICAgfWVsc2VpZigkZmlsdGVyUGVyaW9kZSA9PSAnMicpewogICAgICAgICAgICAkbWluRmlsdGVyID0gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIjA3IjsKICAgICAgICAgICAgJG1heEZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIxMiI7CiAgICAgICAgICAgICRrb25kaXNpUGVyaW9kZT0gIiBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpID49ICckbWluRmlsdGVyJyBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpIDw9ICckbWF4RmlsdGVyJyI7CiAgICAgICAgICAgICRrb25kaXNpU2FsZG9Bd2FsID0gIiBhbmQgaWQgbm90IGluICggc2VsZWN0IGlkIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGpucyA9ICcxJyBhbmQgamVuaXNfcGVyc2VkaWFhbiA9ICcxJyBhbmQgdGFuZ2dhbF9idWt1ID0gJyIuJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIi0kdGhpcy0+YnVsYW5UYW5nZ2FsU2FsZG9Bd2FsJykgIjsKICAgICAgICB9ZWxzZWlmKCRmaWx0ZXJQZXJpb2RlID09ICczJyl7CiAgICAgICAgICAgICRtYXhGaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMTIiOwogICAgICAgICAgICAka29uZGlzaVBlcmlvZGUgPSAiIGFuZCByZXBsYWNlKGxlZnQodGFuZ2dhbF9idWt1LDcpLCctJywnJykgPD0gJyRtYXhGaWx0ZXInIjsKICAgICAgICAgICAgJGtvbmRpc2lTYWxkb0F3YWwgPSAiIGFuZCBpZCBub3QgaW4gKCBzZWxlY3QgaWQgZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgam5zID0gJzEnIGFuZCBqZW5pc19wZXJzZWRpYWFuID0gJzEnIGFuZCB0YW5nZ2FsX2J1a3UgPSAnIi4kdGhpcy0+dGFodW5BbmdnYXJhbi4iLTA3LTAxJykgIjsKICAgICAgICB9CiAgICB9CgoKCiAgICAkZ2V0RGF0YSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlICR0aGlzLT5zdHJpbmdDb25jYXRTdWJVbml0ID0gJyRrb2RlU0tQRCcgYW5kICR0aGlzLT5zdHJpbmdDb25jYXRLb2RlQmFyYW5nPScka29kZUJhcmFuZycgICIpKTsKICAgICAgJGRhdGFMb2NrQmFyYW5nID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAnYzEnID0+ICRnZXREYXRhWydjMSddLAogICAgICAgICAgICAgICAgICAgICAgJ2MnID0+ICRnZXREYXRhWydjJ10sCiAgICAgICAgICAgICAgICAgICAgICAnZCcgPT4gJGdldERhdGFbJ2QnXSwKICAgICAgICAgICAgICAgICAgICAgICdlJyA9PiAkZ2V0RGF0YVsnZSddLAogICAgICAgICAgICAgICAgICAgICAgJ2UxJyA9PiAkZ2V0RGF0YVsnZTEnXSwKICAgICAgICAgICAgICAgICAgICAgICdmMScgPT4gJGdldERhdGFbJ2YxJ10sCiAgICAgICAgICAgICAgICAgICAgICAnZjInID0+ICRnZXREYXRhWydmMiddLAogICAgICAgICAgICAgICAgICAgICAgJ2YnID0+ICRnZXREYXRhWydmJ10sCiAgICAgICAgICAgICAgICAgICAgICAnZycgPT4gJGdldERhdGFbJ2cnXSwKICAgICAgICAgICAgICAgICAgICAgICdoJyA9PiAkZ2V0RGF0YVsnaCddLAogICAgICAgICAgICAgICAgICAgICAgJ2knID0+ICRnZXREYXRhWydpJ10sCiAgICAgICAgICAgICAgICAgICAgICAnaicgPT4gJGdldERhdGFbJ2onXSwKICAgICAgICAgICAgICAgICAgICAgICdqMScgPT4gJGdldERhdGFbJ2oxJ10sCiAgICAgICAgICAgICAgICAgICAgICAndGFodW4nID0+ICR0aGlzLT50YWh1bkFuZ2dhcmFuLAogICAgICAgICAgICAgICAgICAgICAgJ3NlbWVzdGVyJyA9PiAzLAogICAgICAgICAgKTsKICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgkdGhpcy0+c3FsSW5zZXJ0KCJ0X3BlcnNlZGlhYW5fbG9ja19iYXJhbmciLCRkYXRhTG9ja0JhcmFuZykpOwoKICAgICAgICAgICRpZExvY2sgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgbWF4KGlkKSBmcm9tIHRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyB3aGVyZSBjMT0nIi4kZ2V0RGF0YVsnYzEnXS4iJyBhbmQgYz0nIi4kZ2V0RGF0YVsnYyddLiInIGFuZCBkPSciLiRnZXREYXRhWydkJ10uIicgYW5kIGU9JyIuJGdldERhdGFbJ2UnXS4iJyBhbmQgZTE9JyIuJGdldERhdGFbJ2UxJ10uIicgIGFuZCBmPSciLiRnZXREYXRhWydmJ10uIicgYW5kIGc9JyIuJGdldERhdGFbJ2cnXS4iJyBhbmQgaD0nIi4kZ2V0RGF0YVsnaCddLiInIGFuZCBpPSciLiRnZXREYXRhWydpJ10uIicgYW5kIGo9JyIuJGdldERhdGFbJ2onXS4iJyBhbmQgajE9JyIuJGdldERhdGFbJ2oxJ10uIicgYW5kIHRhaHVuID0gJyIuJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIicgYW5kIHNlbWVzdGVyID0gJyIuJGZpbHRlclBlcmlvZGUuIicgIikpOwogICAgICAgICAgJGlkTG9jayA9ICRpZExvY2tbJ21heChpZCknXTsKCgogICAgICAgICAgJGdldERhdGFUYW1iYWggPSAkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGMxPSciLiRnZXREYXRhWydjMSddLiInIGFuZCBjPSciLiRnZXREYXRhWydjJ10uIicgYW5kIGQ9JyIuJGdldERhdGFbJ2QnXS4iJyBhbmQgZT0nIi4kZ2V0RGF0YVsnZSddLiInIGFuZCBlMT0nIi4kZ2V0RGF0YVsnZTEnXS4iJyAgYW5kIGY9JyIuJGdldERhdGFbJ2YnXS4iJyBhbmQgZz0nIi4kZ2V0RGF0YVsnZyddLiInIGFuZCBoPSciLiRnZXREYXRhWydoJ10uIicgYW5kIGk9JyIuJGdldERhdGFbJ2knXS4iJyBhbmQgaj0nIi4kZ2V0RGF0YVsnaiddLiInIGFuZCBqMT0nIi4kZ2V0RGF0YVsnajEnXS4iJyBhbmQgamVuaXNfcGVyc2VkaWFhbiA9ICcxJyAka29uZGlzaVRhaHVuICRrb25kaXNpUGVyaW9kZSAka29uZGlzaVNhbGRvQXdhbCBvcmRlciBieSB0YW5nZ2FsX2J1a3UgYXNjIik7CiAgICAgICAgICB3aGlsZSAoJGRhdGFUYW1iYWggPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFUYW1iYWgpKSB7CgkJCQkJCQlpZigkZGF0YVRhbWJhaFsnam5zJ10gPT0gJzMnKXsKCQkJCQkJCQkkZ2V0RGF0YURldGFpbERpc3RyaWJ1c2kgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGRldGFpbF9yaW5jaWFuX2Rpc3RyaWJ1c2kgd2hlcmUgIGlkID0gJyIuJGRhdGFUYW1iYWhbJ3JlZmlkJ10uIiciKSk7CgkJCQkJCQkJJGdldERhdGFSaW5jaWFuRGlzdHJpYnVzaSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmluY2lhbl9kaXN0cmlidXNpIHdoZXJlICBpZCA9ICciLiRnZXREYXRhRGV0YWlsRGlzdHJpYnVzaVsnaWRfcmluY2lhbl9kaXN0cmlidXNpJ10uIiciKSk7CgkJCQkJCQkJJGRhdGFDb3VudERpc3RyaWJ1c2kgPSBhcnJheSgKCQkJCQkJCQkJCQkJCQknaWRfbG9ja19iYXJhbmcnID0+ICRpZExvY2ssCgkJCQkJCQkJCQkJCQkJJ2MxJyA9PiAkZ2V0RGF0YVsnYzEnXSwKCQkJCQkJCQkJCQkJCQknYycgPT4gJGdldERhdGFbJ2MnXSwKCQkJCQkJCQkJCQkJCQknZCcgPT4gJGdldERhdGFbJ2QnXSwKCQkJCQkJCQkJCQkJCQknZScgPT4gJGdldERhdGFbJ2UnXSwKCQkJCQkJCQkJCQkJCQknZTEnID0+ICRnZXREYXRhWydlMSddLAoJCQkJCQkJCQkJCQkJCSdmJyA9PiAkZ2V0RGF0YVsnZiddLAoJCQkJCQkJCQkJCQkJCSdnJyA9PiAkZ2V0RGF0YVsnZyddLAoJCQkJCQkJCQkJCQkJCSdoJyA9PiAkZ2V0RGF0YVsnaCddLAoJCQkJCQkJCQkJCQkJCSdpJyA9PiAkZ2V0RGF0YVsnaSddLAoJCQkJCQkJCQkJCQkJCSdqJyA9PiAkZ2V0RGF0YVsnaiddLAoJCQkJCQkJCQkJCQkJCSdqMScgPT4gJGdldERhdGFbJ2oxJ10sCgkJCQkJCQkJCQkJCQkJJ2lkX2Rpc3RyaWJ1c2knID0+ICRnZXREYXRhUmluY2lhbkRpc3RyaWJ1c2lbJ2lkX2Rpc3RyaWJ1c2knXSwKCQkJCQkJCQkJCQkJCQknaWRfcmluY2lhbl9kaXN0cmlidXNpJyA9PiAkZ2V0RGF0YURldGFpbERpc3RyaWJ1c2lbJ2lkX3JpbmNpYW5fZGlzdHJpYnVzaSddLAoJCQkJCQkJCQkJCQkJCSdzZW1lc3RlcicgPT4gMywKCQkJCQkJCQkJCQkJCQknbm9tb3InID0+ICRkYXRhVGFtYmFoWydub21vciddLAoJCQkJCQkJCQkJCQkJCSdpZF90X2thcnR1X3BlcnNlZGlhYW4nID0+ICRkYXRhVGFtYmFoWydpZCddCgoJCQkJCQkJCSk7CgkJCQkJCQkJJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ2NvdW50X2Rpc3RyaWJ1c2lfcGVyc2VkaWFhbicsJGRhdGFDb3VudERpc3RyaWJ1c2kpKTsKCQkJCQkJCSB9CiAgICAgICAgICAgICAgJGRhdGFMb2NrVGFtYmFoID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhbmdnYWwnID0+ICRkYXRhVGFtYmFoWyd0YW5nZ2FsX2J1a3UnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJyA9PiAkZGF0YVRhbWJhaFsnaWQnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnanVtbGFoJyA9PiAkZGF0YVRhbWJhaFsnanVtbGFoJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhcmdhJyA9PiAkZGF0YVRhbWJhaFsnaGFyZ2Ffc2F0dWFuJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Npc2EnID0+ICRkYXRhVGFtYmFoWydqdW1sYWgnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfbG9jaycgPT4gJGlkTG9jaywKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgkdGhpcy0+c3FsSW5zZXJ0KCdsb2NrX2JhcmFuZ190YW1iYWgnLCRkYXRhTG9ja1RhbWJhaCkpOwogICAgICAgICAgfQoKICAgICAgICAgICRnZXREYXRhS3VyYW5nID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHRfa2FydHVfcGVyc2VkaWFhbiB3aGVyZSBjMT0nIi4kZ2V0RGF0YVsnYzEnXS4iJyBhbmQgYz0nIi4kZ2V0RGF0YVsnYyddLiInIGFuZCBlPSciLiRnZXREYXRhWydlJ10uIicgYW5kIGUxPSciLiRnZXREYXRhWydlMSddLiInIGFuZCBkPSciLiRnZXREYXRhWydkJ10uIicgIGFuZCBmPSciLiRnZXREYXRhWydmJ10uIicgYW5kIGc9JyIuJGdldERhdGFbJ2cnXS4iJyBhbmQgaD0nIi4kZ2V0RGF0YVsnaCddLiInIGFuZCBpPSciLiRnZXREYXRhWydpJ10uIicgYW5kIGo9JyIuJGdldERhdGFbJ2onXS4iJyBhbmQgajE9JyIuJGdldERhdGFbJ2oxJ10uIicgYW5kIGplbmlzX3BlcnNlZGlhYW4gPSAnMicgJGtvbmRpc2lUYWh1biAka29uZGlzaVBlcmlvZGUgJGtvbmRpc2lTYWxkb0F3YWwgb3JkZXIgYnkgdGFuZ2dhbF9idWt1IGFzYyIpOwogICAgICAgICAgd2hpbGUgKCRkYXRhS3VyYW5nID0gJHRoaXMtPnNxbEFycmF5KCRnZXREYXRhS3VyYW5nKSkgewogICAgICAgICAgICAgICRhcnJheVBlcm9sZWhhbiA9IGFycmF5KCk7CiAgICAgICAgICAgICAgJGp1bWxhaEJhcmFuZ0t1cmFuZyA9ICRkYXRhS3VyYW5nWydqdW1sYWgnXTsKICAgICAgICAgICAgICAkZ2V0RGF0YVBlbmVyaW1hYW4gPSAkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gbG9ja19iYXJhbmdfdGFtYmFoIHdoZXJlIGlkX2xvY2sgPSAnIi4kaWRMb2NrLiInIGFuZCBzaXNhICE9JzAnIik7CiAgICAgICAgICAgICAgd2hpbGUgKCRkYXRhUGVuZXJpbWFhbiA9ICR0aGlzLT5zcWxBcnJheSgkZ2V0RGF0YVBlbmVyaW1hYW4pKSB7CiAgICAgICAgICAgICAgICAgIGlmKCRqdW1sYWhCYXJhbmdLdXJhbmcgIT0gMCl7CgkJCQkJCQkJCQkkZ2V0S2FydHVQZXJzZWRpYWFuID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgaWQgPSAnIi4kZGF0YVBlbmVyaW1hYW5bJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbiddLiInIikpOwoJCQkJCQkJCQkJaWYoJGdldEthcnR1UGVyc2VkaWFhblsnam5zJ10gPT0gJzMnKXsKCQkJCQkJCQkJCQkJLy8gaWYoaW50dmFsKCRnZXRLYXJ0dVBlcnNlZGlhYW5bJ2hhcmdhX3NhdHVhbiddKSA9PSAwKXsKCQkJCQkJCQkJCQkJCWlmKCR0aGlzLT5zcWxOdW1Sb3coJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGNvdW50X2Rpc3RyaWJ1c2lfcGVyc2VkaWFhbiB3aGVyZSBub21vciA9ICciLiRnZXRLYXJ0dVBlcnNlZGlhYW5bJ25vbW9yJ10uIicgYW5kIHNlbWVzdGVyID0gJzEnIGFuZCB0YW1iYWhhbl9oYXJnYSAhPScnIikpICE9IDApewoJCQkJCQkJCQkJCQkJCSRnZXREYXRhQ291bnREaXN0cmlidXNpID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBjb3VudF9kaXN0cmlidXNpX3BlcnNlZGlhYW4gd2hlcmUgbm9tb3IgPSAnIi4kZ2V0S2FydHVQZXJzZWRpYWFuWydub21vciddLiInIGFuZCBzZW1lc3RlciA9ICcxJyBhbmQgdGFtYmFoYW5faGFyZ2EgIT0nJyIpKTsKCQkJCQkJCQkJCQkJCQkkaGFyZ2FTYXR1YW5QZW5lcmltYWFuID0gJGdldERhdGFDb3VudERpc3RyaWJ1c2lbJ3RhbWJhaGFuX2hhcmdhJ10gLyAkZ2V0S2FydHVQZXJzZWRpYWFuWydqdW1sYWgnXTsKCQkJCQkJCQkJCQkJCQkkZGF0YVVwZGF0ZURpc3RyaWJ1c2lLYXJ0dSA9IGFycmF5KAoJCQkJCQkJCQkJCQkJCQknaGFyZ2Ffc2F0dWFuJyA9PiAkaGFyZ2FTYXR1YW5QZW5lcmltYWFuLAoJCQkJCQkJCQkJCQkJCQkndG90YWwnID0+ICRnZXREYXRhQ291bnREaXN0cmlidXNpWyd0YW1iYWhhbl9oYXJnYSddLAoJCQkJCQkJCQkJCQkJCSk7CgkJCQkJCQkJCQkJCQkJJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxVcGRhdGUoInRfa2FydHVfcGVyc2VkaWFhbiIsJGRhdGFVcGRhdGVEaXN0cmlidXNpS2FydHUsImlkID0gJyIuJGRhdGFQZW5lcmltYWFuWydpZF90X2thcnR1X3BlcnNlZGlhYW4nXS4iJyIpKTsKCQkJCQkJCQkJCQkJCQkkdGhpcy0+c3FsUXVlcnkoImRlbGV0ZSBmcm9tIGNvdW50X2Rpc3RyaWJ1c2lfcGVyc2VkaWFhbiB3aGVyZSBub21vcj0nIi4kZ2V0S2FydHVQZXJzZWRpYWFuWydub21vciddLiInIik7CgkJCQkJCQkJCQkJCQl9CgkJCQkJCQkJCQkJCS8vIH0KCQkJCQkJCQkJCX1lbHNlewoJCQkJCQkJCQkJCSRoYXJnYVNhdHVhblBlbmVyaW1hYW4gPSAkZGF0YVBlbmVyaW1hYW5bJ2hhcmdhJ107CgkJCQkJCQkJCQl9CiAgICAgICAgICAgICAgICAgICAgaWYoJGp1bWxhaEJhcmFuZ0t1cmFuZyA+ICRkYXRhUGVuZXJpbWFhblsnc2lzYSddICl7CiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgidXBkYXRlIGxvY2tfYmFyYW5nX3RhbWJhaCBzZXQgc2lzYSA9IHNpc2EgLSAiLiRkYXRhUGVuZXJpbWFhblsnc2lzYSddLiIgd2hlcmUgaWQgPSAnIi4kZGF0YVBlbmVyaW1hYW5bJ2lkJ10uIiciKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGFycmF5UGVyb2xlaGFuW10gPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRQZW5lcmltYWFuJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRkYXRhUGVuZXJpbWFhblsnc2lzYSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoYXJnYScgPT4gJGhhcmdhU2F0dWFuUGVuZXJpbWFhbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndG90YWwnID0+ICRkYXRhUGVuZXJpbWFhblsnc2lzYSddICogJGhhcmdhU2F0dWFuUGVuZXJpbWFhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGp1bWxhaEJhcmFuZ0t1cmFuZyAtPSAkZGF0YVBlbmVyaW1hYW5bJ3Npc2EnXTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCJ1cGRhdGUgbG9ja19iYXJhbmdfdGFtYmFoIHNldCBzaXNhID0gc2lzYSAtICRqdW1sYWhCYXJhbmdLdXJhbmcgd2hlcmUgaWQgPSAnIi4kZGF0YVBlbmVyaW1hYW5bJ2lkJ10uIiciKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGFycmF5UGVyb2xlaGFuW10gPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRQZW5lcmltYWFuJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRqdW1sYWhCYXJhbmdLdXJhbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhcmdhJyA9PiAkaGFyZ2FTYXR1YW5QZW5lcmltYWFuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3RhbCcgPT4gJGp1bWxhaEJhcmFuZ0t1cmFuZyAqICRoYXJnYVNhdHVhblBlbmVyaW1hYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICRqdW1sYWhCYXJhbmdLdXJhbmcgPSAwOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAkZW5jb2RpbmcgPSBqc29uX2VuY29kZSgkYXJyYXlQZXJvbGVoYW4pOwogICAgICAgICAgICAgICRkZWNvZGluZyA9IGpzb25fZGVjb2RlKCRlbmNvZGluZyk7CiAgICAgICAgICAgICAgJGhhcmdhUGVyb2xlaGFuPSAiIjsKICAgICAgICAgICAgICBmb3IgKCRpPTA7ICRpIDwgc2l6ZW9mKCRkZWNvZGluZykgOyAkaSsrKSB7CiAgICAgICAgICAgICAgICAgICRoYXJnYVBlcm9sZWhhbiArPSAkZGVjb2RpbmdbJGldLT50b3RhbDsKICAgICAgICAgICAgICB9CgkJCQkJCQlpZigkZGF0YUt1cmFuZ1snam5zJ10gPT0gIjciKXsKCQkJCQkJCQkvL2h1YmxhCgkJCQkJCQkJJGdldERhdGFEZXRhaWxEaXN0cmlidXNpID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBkZXRhaWxfcmluY2lhbl9kaXN0cmlidXNpIHdoZXJlICBpZCA9ICciLiRkYXRhS3VyYW5nWydyZWZpZCddLiInIikpOwoJCQkJCQkJCSRnZXREYXRhUmluY2lhbkRpc3RyaWJ1c2kgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJpbmNpYW5fZGlzdHJpYnVzaSB3aGVyZSAgaWQgPSAnIi4kZ2V0RGF0YURldGFpbERpc3RyaWJ1c2lbJ2lkX3JpbmNpYW5fZGlzdHJpYnVzaSddLiInIikpOwoJCQkJCQkJCSRkYXRhQ291bnREaXN0cmlidXNpID0gYXJyYXkoCgkJCQkJCQkJCQkJCQkJJ2lkX2xvY2tfYmFyYW5nJyA9PiAkaWRMb2NrLAoJCQkJCQkJCQkJCQkJCSdjMScgPT4gJGdldERhdGFbJ2MxJ10sCgkJCQkJCQkJCQkJCQkJJ2MnID0+ICRnZXREYXRhWydjJ10sCgkJCQkJCQkJCQkJCQkJJ2QnID0+ICRnZXREYXRhWydkJ10sCgkJCQkJCQkJCQkJCQkJJ2UnID0+ICRnZXREYXRhWydlJ10sCgkJCQkJCQkJCQkJCQkJJ2UxJyA9PiAkZ2V0RGF0YVsnZTEnXSwKCQkJCQkJCQkJCQkJCQknZicgPT4gJGdldERhdGFbJ2YnXSwKCQkJCQkJCQkJCQkJCQknZycgPT4gJGdldERhdGFbJ2cnXSwKCQkJCQkJCQkJCQkJCQknaCcgPT4gJGdldERhdGFbJ2gnXSwKCQkJCQkJCQkJCQkJCQknaScgPT4gJGdldERhdGFbJ2knXSwKCQkJCQkJCQkJCQkJCQknaicgPT4gJGdldERhdGFbJ2onXSwKCQkJCQkJCQkJCQkJCQknajEnID0+ICRnZXREYXRhWydqMSddLAoJCQkJCQkJCQkJCQkJCSdpZF9kaXN0cmlidXNpJyA9PiAkZ2V0RGF0YVJpbmNpYW5EaXN0cmlidXNpWydpZF9kaXN0cmlidXNpJ10sCgkJCQkJCQkJCQkJCQkJJ2lkX3JpbmNpYW5fZGlzdHJpYnVzaScgPT4gJGdldERhdGFEZXRhaWxEaXN0cmlidXNpWydpZF9yaW5jaWFuX2Rpc3RyaWJ1c2knXSwKCQkJCQkJCQkJCQkJCQknc2VtZXN0ZXInID0+IDMsCgkJCQkJCQkJCQkJCQkJJ25vbW9yJyA9PiAkZGF0YUt1cmFuZ1snbm9tb3InXSwKCQkJCQkJCQkJCQkJCQkndGFtYmFoYW5faGFyZ2EnID0+ICRoYXJnYVBlcm9sZWhhbiwKCQkJCQkJCQkJCQkJCQknanNvbl9hcnJheScgPT4gJGVuY29kaW5nCgkJCQkJCQkJKTsKCQkJCQkJCQkkdGhpcy0+c3FsUXVlcnkoJHRoaXMtPnNxbEluc2VydCgnY291bnRfZGlzdHJpYnVzaV9wZXJzZWRpYWFuJywkZGF0YUNvdW50RGlzdHJpYnVzaSkpOwoJCQkJCQkJfQogICAgICAgICAgICAgICRkYXRhTG9ja0t1cmFuZyA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICd0YW5nZ2FsJyA9PiAkZGF0YUt1cmFuZ1sndGFuZ2dhbF9idWt1J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbicgPT4gJGRhdGFLdXJhbmdbJ2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2p1bWxhaCcgPT4gJGRhdGFLdXJhbmdbJ2p1bWxhaCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFyZ2EnID0+ICRoYXJnYVBlcm9sZWhhbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfbG9jaycgPT4gJGlkTG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgICAncGVyb2xlaGFuJyA9PiBqc29uX2VuY29kZSgkYXJyYXlQZXJvbGVoYW4pCgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ2xvY2tfYmFyYW5nX2t1cmFuZycsJGRhdGFMb2NrS3VyYW5nKSk7CiAgICAgICAgICB9CgoKICAgICAgICAgICRnZXREYXRhSGlzdG9yaSA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgYzE9JyIuJGdldERhdGFbJ2MxJ10uIicgYW5kIGM9JyIuJGdldERhdGFbJ2MnXS4iJyBhbmQgZD0nIi4kZ2V0RGF0YVsnZCddLiInIGFuZCBlPSciLiRnZXREYXRhWydlJ10uIicgYW5kIGUxPSciLiRnZXREYXRhWydlMSddLiInICBhbmQgZj0nIi4kZ2V0RGF0YVsnZiddLiInIGFuZCBnPSciLiRnZXREYXRhWydnJ10uIicgYW5kIGg9JyIuJGdldERhdGFbJ2gnXS4iJyBhbmQgaT0nIi4kZ2V0RGF0YVsnaSddLiInIGFuZCBqPSciLiRnZXREYXRhWydqJ10uIicgYW5kIGoxPSciLiRnZXREYXRhWydqMSddLiInICAka29uZGlzaVRhaHVuICRrb25kaXNpUGVyaW9kZSAka29uZGlzaVNhbGRvQXdhbCBvcmRlciBieSB0YW5nZ2FsX2J1a3UsamVuaXNfcGVyc2VkaWFhbiBhc2MiKTsKICAgICAgICAgIHdoaWxlICgkZGF0YUhpc3RvcmkgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFIaXN0b3JpKSkgewogICAgICAgICAgICAgIGlmKCRkYXRhSGlzdG9yaVsnamVuaXNfcGVyc2VkaWFhbiddID09IDEpewogICAgICAgICAgICAgICAgaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnMScpewogICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiU0FMRE8gQVdBTCI7CiAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzInKXsKICAgICAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgJGJhcmFuZ0tlbHVhciA9IDA7CiAgICAgICAgICAgICAgICAgIGlmKCRkYXRhSGlzdG9yaVsnY2FyYV9wZXJvbGVoYW4nXSA9PSAnMicpewogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkVSSU1BQU4gUEVNQkVMSUFOIjsKICAgICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2NhcmFfcGVyb2xlaGFuJ10gPT0gJzMnKXsKICAgICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJQRU5FUklNQUFOIEhJQkFIIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICc0Jyl7CiAgICAgICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAwOwogICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJDRUsgRklTSUsgVEFNQkFIIjsKICAgICAgICAgICAgICAgIH1lbHNlaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnMycpewogICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiUEVORVJJTUFBTiBESVNUUklCVVNJIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRoYXJnYVNhdHVhbiA9ICRkYXRhSGlzdG9yaVsnaGFyZ2Ffc2F0dWFuJ107CiAgICAgICAgICAgICAgICAkdG90YWxIYXJnYSA9ICRoYXJnYVNhdHVhbiAqICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAkc2FsZG9CYXJhbmcgKz0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICR0b3RhbFNhbGRvICs9ICR0b3RhbEhhcmdhOwoKICAgICAgICAgICAgICAgICRnZXRJZERldGFpbCA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gbG9ja19iYXJhbmdfdGFtYmFoIHdoZXJlIGlkX2xvY2sgPSAnJGlkTG9jaycgYW5kIGlkX3Rfa2FydHVfcGVyc2VkaWFhbiA9ICciLiRkYXRhSGlzdG9yaVsnaWQnXS4iJyIpKTsKICAgICAgICAgICAgICAgICRpZERldGFpbCA9ICRnZXRJZERldGFpbFsnaWQnXTsKICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnNicpewogICAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9IDA7CiAgICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiUEVOR0VMVUFSQU4iOwogICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzUnKXsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAwOwogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIkNFSyBGSVNJSyBLVVJBTkciOwogICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzcnKXsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nTWFzdWsgPSAwOwogICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkdFTFVBUkFOIERJU1RSSUJVU0kiOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICRoYXJnYVNhdHVhbiA9ICIiOwogICAgICAgICAgICAgICAgJHNhbGRvQmFyYW5nIC09ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAkZ2V0VG90YWxIYXJnYSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gbG9ja19iYXJhbmdfa3VyYW5nIHdoZXJlIGlkX2xvY2sgPSAnJGlkTG9jaycgYW5kIGlkX3Rfa2FydHVfcGVyc2VkaWFhbiA9ICciLiRkYXRhSGlzdG9yaVsnaWQnXS4iJyIpKTsKICAgICAgICAgICAgICAgICR0b3RhbEhhcmdhID0gJGdldFRvdGFsSGFyZ2FbJ2hhcmdhJ107CiAgICAgICAgICAgICAgICAkdG90YWxTYWxkbyAtPSAkdG90YWxIYXJnYTsKICAgICAgICAgICAgICAgICRpZERldGFpbCA9ICRnZXRUb3RhbEhhcmdhWydpZCddOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAkZGF0YVJpbmNpYW5Mb2NrID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX2xvY2snID0+ICRpZExvY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhbmdnYWwnID0+ICRkYXRhSGlzdG9yaVsndGFuZ2dhbF9idWt1J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VyYWlhbicgPT4gJHVyYWlhblBlcnNlZGlhYW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hc3VrJyA9PiAkYmFyYW5nTWFzdWssCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2tlbHVhcicgPT4gJGJhcmFuZ0tlbHVhciwKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2FsZG9fYmFyYW5nJyA9PiAkc2FsZG9CYXJhbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvdGFsJyA9PiAkdG90YWxIYXJnYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnc2FsZG8nID0+ICR0b3RhbFNhbGRvLAogICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJyA9PiAkZGF0YUhpc3RvcmlbJ2plbmlzX3BlcnNlZGlhYW4nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJyA9PiAkZGF0YUhpc3RvcmlbJ2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX2RldGFpbCcgPT4gJGlkRGV0YWlsLAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCR0aGlzLT5zcWxJbnNlcnQoJ3JpbmNpYW5fbG9ja19iYXJhbmcnLCRkYXRhUmluY2lhbkxvY2spKTsKICAgICAgICAgIH0KICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgidXBkYXRlIHRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyBzZXQgaGFyZ2EgPSAnJHRvdGFsU2FsZG8nLCBzYWxkb19iYXJhbmcgPSAnJHNhbGRvQmFyYW5nJyB3aGVyZSBpZCA9ICckaWRMb2NrJyIpOwogICAgICByZXR1cm4gYXJyYXkoCiAgICAgICAgJ2lkTG9jaycgPT4gJGlkTG9jaywKICAgICAgICAnanVtbGFoSGFyZ2EnID0+ICR0b3RhbFNhbGRvLAogICAgICAgICdzYWxkbycgPT4gJHNhbGRvQmFyYW5nLAogICAgICApOwogIH0KICBmdW5jdGlvbiBjbG9zaW5nU2VtZXN0ZXIxKCRrb2RlU0tQRCwka29kZUJhcmFuZyl7CgkJIGZvcmVhY2ggKCRfUkVRVUVTVCBhcyAka2V5ID0+ICR2YWx1ZSkgewoJCQkJJCRrZXkgPSAkdmFsdWU7CgkJIH0KICAgICAvLyAkZ2V0RGF0YUJhcmFuZyA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByZWZfYmFyYW5nIHdoZXJlIGY9ICcwOCcgYW5kIGoxICE9JzAwMDAnIik7CiAgICAgLy8gd2hpbGUgKCRkYXRhQmFyYW5nID0gJHRoaXMtPnNxbEFycmF5KCRnZXREYXRhQmFyYW5nKSkgewogICAgIC8vICAgJGtvZGVCYXJhbmcgPSAkZGF0YUJhcmFuZ1snZiddLiIuIi4kZGF0YUJhcmFuZ1snZyddLiIuIi4kZGF0YUJhcmFuZ1snaCddLiIuIi4kZGF0YUJhcmFuZ1snaSddLiIuIi4kZGF0YUJhcmFuZ1snaiddLiIuIi4kZGF0YUJhcmFuZ1snajEnXTsKICAgICAgICAkdGhpcy0+c2V0U2FsZG9Bd2FsKCRrb2RlU0tQRCwka29kZUJhcmFuZyk7CiAgICAgLy8gfQoKICAgICByZXR1cm4gJGxvZzsKCgl9CglmdW5jdGlvbiBjbG9zaW5nU2VtZXN0ZXIyKCRrb2RlU0tQRCwka29kZUJhcmFuZyl7CgkJZm9yZWFjaCAoJF9SRVFVRVNUIGFzICRrZXkgPT4gJHZhbHVlKSB7CgkJCSAkJGtleSA9ICR2YWx1ZTsKCQl9CgkJJGV4cGxvZGVLb2RlU0tQRCA9IGV4cGxvZGUoIi4iLCRrb2RlU0tQRCk7CgkgICR0aGlzLT5zZXRTYWxkb0F3YWwoJGtvZGVTS1BELCRrb2RlQmFyYW5nKTsKCQkkdGhpcy0+c2V0U2FsZG9Bd2FsVGFodW5hbigka29kZVNLUEQsJGtvZGVCYXJhbmcpOwoJfQoKICBmdW5jdGlvbiBDbG9zaW5nKCRkdCl7CiAgIGdsb2JhbCAkU2Vuc3VzVG1wLCRNYWluLCRIVFRQX0NPT0tJRV9WQVJTOwogICBmb3JlYWNoICgkX1JFUVVFU1QgYXMgJGtleSA9PiAkdmFsdWUpIHsKICAgICAgJCRrZXkgPSAkdmFsdWU7CiAgIH0KICAgJGNlayA9ICcnOyAkZXJyPScnOyAkY29udGVudD0nJzsKICAgJGpzb24gPSBUUlVFOwkvLyRFcnJNc2cgPSAndGVzJzsKICAgJGZvcm1fbmFtZSA9ICR0aGlzLT5QcmVmaXguJ19mb3JtJzsKICAgJHRoaXMtPmZvcm1fd2lkdGggPSA4MjA7CiAgICR0aGlzLT5mb3JtX2hlaWdodCA9IDUwMDsKICAgJHRoaXMtPmZvcm1fY2FwdGlvbiA9ICdDbG9zaW5nJzsKICAgaWYoJGZpbHRlclN1YlVuaXQgIT0gJzAwMCcpewogICAgICRrb25kaXNpU0tQRCA9ICIgYW5kIGMxID0gJyIuJGZpbHRlclVydXNhbi4iJyBhbmQgYyA9ICciLiRmaWx0ZXJCaWRhbmcuIicgYW5kIGQgPSAnIi4kZmlsdGVyU0tQRC4iJyBhbmQgZSA9ICciLiRmaWx0ZXJVbml0LiInIGFuZCBlMSA9ICciLiRmaWx0ZXJTdWJVbml0LiInICAiOwogICAgICRrb2RlU0tQRCA9ICRmaWx0ZXJVcnVzYW4uIi4iLiRmaWx0ZXJCaWRhbmcuIi4iLiRmaWx0ZXJTS1BELiIuIi4kZmlsdGVyVW5pdC4iLiIuJGZpbHRlclN1YlVuaXQ7CiAgICAgJGdldERhdGFVcnVzYW4gPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPScwMCciKSk7CiAgICAgJGdldERhdGFCaWRhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPSckZmlsdGVyQmlkYW5nJyBhbmQgZD0nMDAnIikpOwogICAgICRnZXREYXRhU0tQRCA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JyRmaWx0ZXJCaWRhbmcnIGFuZCBkPSckZmlsdGVyU0tQRCciKSk7CiAgICAgJGdldERhdGFVbml0ID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByZWZfc2twZCB3aGVyZSBjMSA9ICckZmlsdGVyVXJ1c2FuJyBhbmQgYz0nJGZpbHRlckJpZGFuZycgYW5kIGQ9JyRmaWx0ZXJTS1BEJyBhbmQgZT0nJGZpbHRlclVuaXQnIGFuZCBlMT0nMDAwJyIpKTsKICAgICAkZ2V0RGF0YVN1YlVuaXQgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPSckZmlsdGVyQmlkYW5nJyBhbmQgZD0nJGZpbHRlclNLUEQnIGFuZCBlPSckZmlsdGVyVW5pdCcgYW5kIGUxPSckZmlsdGVyU3ViVW5pdCciKSk7CiAgICAgJHVydXNhbiA9ICRnZXREYXRhVXJ1c2FuWydubV9za3BkJ107CiAgICAgJGJpZGFuZyA9ICRnZXREYXRhQmlkYW5nWydubV9za3BkJ107CiAgICAgJHNrcGQgPSAkZ2V0RGF0YVNLUERbJ25tX3NrcGQnXTsKICAgICAkdW5pdCA9ICRnZXREYXRhVW5pdFsnbm1fc2twZCddOwogICAgICRzdWJVbml0ID0gJGdldERhdGFTdWJVbml0WydubV9za3BkJ107CiAgIH1lbHNlaWYoJGZpbHRlclVuaXQgIT0gJzAwJyl7CiAgICAgJGtvbmRpc2lTS1BEID0gIiBhbmQgYzEgPSAnIi4kZmlsdGVyVXJ1c2FuLiInIGFuZCBjID0gJyIuJGZpbHRlckJpZGFuZy4iJyBhbmQgZCA9ICciLiRmaWx0ZXJTS1BELiInIGFuZCBlID0gJyIuJGZpbHRlclVuaXQuIicgIjsKICAgICAka29kZVNLUEQgPSAkZmlsdGVyVXJ1c2FuLiIuIi4kZmlsdGVyQmlkYW5nLiIuIi4kZmlsdGVyU0tQRC4iLiIuJGZpbHRlclVuaXQ7CiAgICAgJGdldERhdGFVcnVzYW4gPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPScwMCciKSk7CiAgICAgJGdldERhdGFCaWRhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPSckZmlsdGVyQmlkYW5nJyBhbmQgZD0nMDAnIikpOwogICAgICRnZXREYXRhU0tQRCA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JyRmaWx0ZXJCaWRhbmcnIGFuZCBkPSckZmlsdGVyU0tQRCciKSk7CiAgICAgJGdldERhdGFVbml0ID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByZWZfc2twZCB3aGVyZSBjMSA9ICckZmlsdGVyVXJ1c2FuJyBhbmQgYz0nJGZpbHRlckJpZGFuZycgYW5kIGQ9JyRmaWx0ZXJTS1BEJyBhbmQgZT0nJGZpbHRlclVuaXQnIGFuZCBlMT0nMDAwJyIpKTsKICAgICAkdXJ1c2FuID0gJGdldERhdGFVcnVzYW5bJ25tX3NrcGQnXTsKICAgICAkYmlkYW5nID0gJGdldERhdGFCaWRhbmdbJ25tX3NrcGQnXTsKICAgICAkc2twZCA9ICRnZXREYXRhU0tQRFsnbm1fc2twZCddOwogICAgICR1bml0ID0gJGdldERhdGFVbml0WydubV9za3BkJ107CiAgICAgJHN1YlVuaXQgPSAiU0VNVUEgU1VCIFVOSVQiOwogICB9ZWxzZWlmKCRmaWx0ZXJTS1BEICE9JzAwJyl7CiAgICAgJGtvbmRpc2lTS1BEID0gIiBhbmQgYzEgPSAnIi4kZmlsdGVyVXJ1c2FuLiInIGFuZCBjID0gJyIuJGZpbHRlckJpZGFuZy4iJyBhbmQgZCA9ICciLiRmaWx0ZXJTS1BELiInIjsKICAgICAka29kZVNLUEQgPSAkZmlsdGVyVXJ1c2FuLiIuIi4kZmlsdGVyQmlkYW5nLiIuIi4kZmlsdGVyU0tQRDsKICAgICAkZ2V0RGF0YVVydXNhbiA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JzAwJyIpKTsKICAgICAkZ2V0RGF0YUJpZGFuZyA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JyRmaWx0ZXJCaWRhbmcnIGFuZCBkPScwMCciKSk7CiAgICAgJGdldERhdGFTS1BEID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByZWZfc2twZCB3aGVyZSBjMSA9ICckZmlsdGVyVXJ1c2FuJyBhbmQgYz0nJGZpbHRlckJpZGFuZycgYW5kIGQ9JyRmaWx0ZXJTS1BEJyIpKTsKICAgICAkdXJ1c2FuID0gJGdldERhdGFVcnVzYW5bJ25tX3NrcGQnXTsKICAgICAkYmlkYW5nID0gJGdldERhdGFCaWRhbmdbJ25tX3NrcGQnXTsKICAgICAkc2twZCA9ICRnZXREYXRhU0tQRFsnbm1fc2twZCddOwogICAgICR1bml0ID0gIlNFTVVBIFVOSVQiOwogICAgICRzdWJVbml0ID0gIlNFTVVBIFNVQiBVTklUIjsKICAgfWVsc2VpZigkZmlsdGVyQmlkYW5nICE9JzAwJyl7CiAgICAgJGtvbmRpc2lTS1BEID0gIiBhbmQgYzEgPSAnIi4kZmlsdGVyVXJ1c2FuLiInIGFuZCBjID0gJyIuJGZpbHRlckJpZGFuZy4iJyI7CiAgICAgJGtvZGVTS1BEID0gJGZpbHRlclVydXNhbi4iLiIuJGZpbHRlckJpZGFuZzsKICAgICAkZ2V0RGF0YVVydXNhbiA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JzAwJyIpKTsKICAgICAkZ2V0RGF0YUJpZGFuZyA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JyRmaWx0ZXJCaWRhbmcnIGFuZCBkPScwMCciKSk7CiAgICAgJHVydXNhbiA9ICRnZXREYXRhVXJ1c2FuWydubV9za3BkJ107CiAgICAgJGJpZGFuZyA9ICRnZXREYXRhQmlkYW5nWydubV9za3BkJ107CiAgICAgJHNrcGQgPSAiU0VNVUEgU0tQRCI7CiAgICAgJHVuaXQgPSAiU0VNVUEgVU5JVCI7CiAgICAgJHN1YlVuaXQgPSAiU0VNVUEgU1VCIFVOSVQiOwogICB9ZWxzZWlmKCRmaWx0ZXJVcnVzYW4gIT0nMDAnKXsKICAgICAka29uZGlzaVNLUEQgPSAiIGFuZCBjMSA9ICciLiRmaWx0ZXJVcnVzYW4uIiciOwogICAgICRrb2RlU0tQRCA9ICRmaWx0ZXJVcnVzYW47CiAgICAgJGdldERhdGFVcnVzYW4gPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPScwMCciKSk7CiAgICAgJHVydXNhbiA9ICRnZXREYXRhVXJ1c2FuWydubV9za3BkJ107CiAgICAgJGJpZGFuZyA9ICJTRU1VQSBCSURBTkciOwogICAgICRza3BkID0gIlNFTVVBIFNLUEQiOwogICAgICR1bml0ID0gIlNFTVVBIFVOSVQiOwogICAgICRzdWJVbml0ID0gIlNFTVVBIFNVQiBVTklUIjsKICAgfWVsc2V7CiAgICAgJGtvZGVTS1BEID0gIiI7CiAgICAgJHVydXNhbiA9ICJTRU1VQSBVUlVTQU4iOwogICAgICRiaWRhbmcgPSAiU0VNVUEgQklEQU5HIjsKICAgICAkc2twZCA9ICJTRU1VQSBTS1BEIjsKICAgICAkdW5pdCA9ICJTRU1VQSBVTklUIjsKICAgICAkc3ViVW5pdCA9ICJTRU1VQSBTVUIgVU5JVCI7CiAgIH0KICRmaWx0ZXJQZXJpb2RlPSAkZmlsdGVyU2VtZXN0ZXI7CiAgaWYoZW1wdHkoJGZpbHRlclBlcmlvZGUpKSRlcnIgPSAiUGlsaWggUGVyaW9kZSI7CiAJaWYoJGZpbHRlclBlcmlvZGUgPT0gMSl7CiAJCSR0YW5nZ2FsID0gIjMxLTA2LSIuJHRoaXMtPnRhaHVuQW5nZ2FyYW47CiAJCS8vICRzdGF0dXNDbG9zaW5nID0gJHRoaXMtPmdldFN0YXR1c0Nsb3NpbmcoJGtvZGVTS1BELCR0aGlzLT5nZW5lcmF0ZURhdGUoJHRhbmdnYWwpKTsKIAkJaWYoJHN0YXR1c0Nsb3NpbmcgIT0gMCl7CiAJCQkkZXJyID0gIkRhdGEgc2VtZXN0ZXIgc2F0dSBzdWRhaCBkaSBjbG9zaW5nLCBiYXRhbGthbiBjbG9zaW5nID8iOwogCQl9CiAJCSRuYW1hU2VtZXN0ZXIgPSAiU0FUVSI7CiAJfWVsc2V7CiAJCSR0YW5nZ2FsID0gIjMxLTEyLSIuJHRoaXMtPnRhaHVuQW5nZ2FyYW47CiAJCS8vICRzdGF0dXNDbG9zaW5nID0gJHRoaXMtPmdldFN0YXR1c0Nsb3NpbmcoJGtvZGVTS1BELCR0aGlzLT5nZW5lcmF0ZURhdGUoJHRhbmdnYWwpKTsKIAkJaWYoJHN0YXR1c0Nsb3NpbmcgIT0gMCl7CiAJCQkkZXJyID0gIkRhdGEgc2VtZXN0ZXIgZHVhIHN1ZGFoIGRpIGNsb3NpbmcsIGJhdGFsa2FuIGNsb3NpbmcgPyI7CiAJCX0KIAkJJG5hbWFTZW1lc3RlciA9ICJEVUEiOwogCX0KCiAgICRnZXREYXRhQmFyYW5nID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9iYXJhbmcgd2hlcmUgZj0nMDgnIGFuZCBqMSE9JzAwMDAnICIpOwogICB3aGlsZSAoJGRhdGFCYXJhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFCYXJhbmcpKSB7CiAgICAgJGFycmF5S29kZUJhcmFuZ1tdID0gJGRhdGFCYXJhbmdbJ2YnXS4iLiIuJGRhdGFCYXJhbmdbJ2cnXS4iLiIuJGRhdGFCYXJhbmdbJ2gnXS4iLiIuJGRhdGFCYXJhbmdbJ2knXS4iLiIuJGRhdGFCYXJhbmdbJ2onXS4iLiIuJGRhdGFCYXJhbmdbJ2oxJ107CiAgIH0KICAgJGdldERhdGFDbG9zaW5nID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGNsb3NpbmdfcGVyc2VkaWFhbiB3aGVyZSAxPTEgJGtvbmRpc2lTS1BEIGFuZCB0YWh1bl9hbmdnYXJhbiA9JyR0aGlzLT50YWh1bkFuZ2dhcmFuJyBhbmQgc2VtZXN0ZXIgPSAnJGZpbHRlclBlcmlvZGUnIik7CiAgIHdoaWxlICgkZGF0YUNsb3NpbmcgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFDbG9zaW5nKSkgewogICAgICRhcnJheVNLUERDb3NpbmdbXSA9ICInIi4kZGF0YUNsb3NpbmdbJ2MxJ10uIi4iLiRkYXRhQ2xvc2luZ1snYyddLiIuIi4kZGF0YUNsb3NpbmdbJ2QnXS4iLiIuJGRhdGFDbG9zaW5nWydlJ10uIi4iLiRkYXRhQ2xvc2luZ1snZTEnXS4iJyIgOwogICB9CiAgIGlmKHNpemVvZigkYXJyYXlTS1BEQ29zaW5nKSA+IDApewogICAgICRrb25kaXNpQ0xvc2luZ1NLUEQgPSAiIGFuZCBjb25jYXQoYzEsJy4nLGMsJy4nLGQsJy4nLGUsJy4nLGUxKSBub3QgaW4oIi5pbXBsb2RlKCIsIiwkYXJyYXlTS1BEQ29zaW5nKS4iKSAiOwogICB9CiAgICRnZXREYXRhU0tQRCA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByZWZfc2twZCB3aGVyZSAxPTEgJGtvbmRpc2lTS1BEIGFuZCBlMSE9JzAwMCcgJGtvbmRpc2lDTG9zaW5nU0tQRCAiKTsKICAgd2hpbGUgKCRkYXRhU0tQRCA9ICR0aGlzLT5zcWxBcnJheSgkZ2V0RGF0YVNLUEQpKSB7CiAgICAgJGNvbmNhdFNLUERDTG9zaW5nID0gJGRhdGFTS1BEWydjMSddLiIuIi4kZGF0YVNLUERbJ2MnXS4iLiIuJGRhdGFTS1BEWydkJ10uIi4iLiRkYXRhU0tQRFsnZSddLiIuIi4kZGF0YVNLUERbJ2UxJ107CiAgICAgaWYoJHRoaXMtPnNxbE51bVJvdygkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdHV0dXBfYnVrdV9wZXJzZWRpYWFuIHdoZXJlIHRhaHVuX2FuZ2dhcmFuID0gJyR0aGlzLT50YWh1bkFuZ2dhcmFuJyBhbmQgJHRoaXMtPnN0cmluZ0NvbmNhdFN1YlVuaXQgPSAnJGNvbmNhdFNLUERDTG9zaW5nJyIpKSA9PTApewogICAgICAgJGFycmF5U0tQRFtdID0gJGRhdGFTS1BEWydjMSddLiIuIi4kZGF0YVNLUERbJ2MnXS4iLiIuJGRhdGFTS1BEWydkJ10uIi4iLiRkYXRhU0tQRFsnZSddLiIuIi4kZGF0YVNLUERbJ2UxJ10gOwogICAgIH0KICAgICAvLyBmb3IgKCRpPTA7ICRpIDwgc2l6ZW9mKCRhcnJheUtvZGVCYXJhbmcpOyAkaSsrKSB7CiAgICAgLy8gICAkYXJyYXlEYXRhUG9zdFtdID0gJGRhdGFTS1BEWydjMSddLiIuIi4kZGF0YVNLUERbJ2MnXS4iLiIuJGRhdGFTS1BEWydkJ10uIi4iLiRkYXRhU0tQRFsnZSddLiIuIi4kZGF0YVNLUERbJ2UxJ10uIjsiLiRhcnJheUtvZGVCYXJhbmdbJGldOwogICAgIC8vIH0KICAgfQogICAkYXJyYXlTZW1lc3RlciA9IGFycmF5KAogICAgYXJyYXkoJzEnLCdTRU1FU1RFUiAxJyksCiAgICBhcnJheSgnMicsJ1NFTUVTVEVSIDInKSwKICApOwogIGlmKGVtcHR5KCRlcnIpKXsKICAgIGlmKHNpemVvZigkYXJyYXlTS1BEKSA9PSAwKXsKICAgICAgJGVyciA9ICJEYXRhIHN1ZGFoIGRpIGNsb3NpbmcgISI7CiAgICB9CiAgfQoKICAgJHRoaXMtPmZvcm1fZmllbGRzID0gYXJyYXkoCiAgICAgJ2tvZGUwJyA9PiBhcnJheSgKICAgICAgICdsYWJlbCc9PidVUlVTQU4nLAogICAgICAgJ2xhYmVsV2lkdGgnPT4xNTAsCiAgICAgICAndmFsdWUnPT4gJHVydXNhbgogICAgICksCiAgICAgJ2tvZGUxJyA9PiBhcnJheSgKICAgICAgICdsYWJlbCc9PidCSURBTkcnLAogICAgICAgJ2xhYmVsV2lkdGgnPT4xNTAsCiAgICAgICAndmFsdWUnPT4gJGJpZGFuZwogICAgICksCiAgICAgJ2tvZGUyJyA9PiBhcnJheSgKICAgICAgICdsYWJlbCc9PidTS1BEJywKICAgICAgICdsYWJlbFdpZHRoJz0+MTUwLAogICAgICAgJ3ZhbHVlJz0+ICRza3BkCiAgICAgKSwKICAgICAna29kZTMnID0+IGFycmF5KAogICAgICAgJ2xhYmVsJz0+J1VOSVQnLAogICAgICAgJ2xhYmVsV2lkdGgnPT4xNTAsCiAgICAgICAndmFsdWUnPT4gJHVuaXQKICAgICApLAogICAgICdrb2RlNCcgPT4gYXJyYXkoCiAgICAgICAnbGFiZWwnPT4nU1VCIFVOSVQnLAogICAgICAgJ2xhYmVsV2lkdGgnPT4xNTAsCiAgICAgICAndmFsdWUnPT4gJHN1YlVuaXQKICAgICApLAogICAgICdzZW1lc3RlcicgPT4gYXJyYXkoCiAgICAgICAnbGFiZWwnPT4nU0VNRVNURVInLAogICAgICAgJ2xhYmVsV2lkdGgnPT4xNTAsCiAgICAgICAndmFsdWUnPT4gY21iQXJyYXkoInNkcyIsJGZpbHRlclNlbWVzdGVyLCRhcnJheVNlbWVzdGVyLCAiLS0gU0VNRVNURVIgLS0gIiwiIGRpc2FibGVkIiApLiI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nJGZpbHRlclNlbWVzdGVyJyBuYW1lPSdmaWx0ZXJQZXJpb2RlJyBpZD0nZmlsdGVyUGVyaW9kZScgPiIKICAgICApLAogCQkna2V0ZXJhbmdhbicgPT4gYXJyYXkoCiAJCQknbGFiZWwnPT4nS0VURVJBTkdBTicsCiAJCQknbGFiZWxXaWR0aCc9PjcwLAogCQkJJ3ZhbHVlJz0+ICI8dGV4dGFyZWEgaWQ9J2tldGVyYW5nYW4nIG5hbWU9J2tldGVyYW5nYW4nIHN0eWxlPSd3aWR0aDozMDBweDtoZWlnaHQ6NTBweDsnPjwvdGV4dGFyZWE+IgogCQkpLAoKICAgICAncHJvZ3Jlc3MnID0+IGFycmF5KAogICAgICAgJ2xhYmVsJz0+JycsCiAgICAgICAnbGFiZWxXaWR0aCc9PjEsCiAgICAgICAncGVtaXNhaCc9PicgJywKICAgICAgICd0eXBlJz0+J21lcmdlJywKICAgICAgICd2YWx1ZSc9PgogICAgICAgICAiPGRpdiBpZD0ncHJvZ3Jlc3Nib3gnIHN0eWxlPSdiYWNrZ3JvdW5kOiNmZmZiZjA7Ym9yZGVyLXJhZGl1czo1cHg7Ym9yZGVyOjFweCBzb2xpZDtoZWlnaHQ6MTBweCc+CiAgICAgICAgICAgPGRpdiBpZD0ncHJvZ3Jlc3NiYXInPjwvZGl2ID4KICAgICAgICAgICA8ZGl2IGlkPSdzdGF0dXN0eHQnIHN0eWxlPSd3aWR0aDowJTtiYWNrZ3JvdW5kOmdyZWVuO2hlaWdodDoxMHB4O3RleHQtYWxpZ246cmlnaHQ7Y29sb3I6d2hpdGU7Zm9udC1zaXplOjhweDsnPjAlPC9kaXY+CiAgICAgICAgICAgPGRpdiBpZD0nb3V0cHV0Jz48L2Rpdj4KICAgICAgICAgPC9kaXY+CSIKICAgICAgICksCiAgICAgJ3BlcmluZ2F0YW4nID0+IGFycmF5KAogICAgICAgICAgICdsYWJlbCc9PicnLAogCQkJCQkndHlwZSc9PidtZXJnZScsCiAgICAgICAgICAgJ2xhYmVsV2lkdGgnPT4xLAogICAgICAgICAgICdwZW1pc2FoJz0+JyAnLAogICAgICAgICAgICd2YWx1ZSc9PiI8ZGl2IGlkPSdwZW1pc2FoJyBzdHlsZT0nY29sb3I6cmVkO2ZvbnQtc2l6ZToxMXB4Oyc+PC9kaXY+IiwKICAgICAgICksCiAgICAgJ2xvZycgPT4gYXJyYXkoCiAgICAgICAgICAgJ2xhYmVsJz0+JycsCiAJCQkJCSd0eXBlJz0+J21lcmdlJywKICAgICAgICAgICAnbGFiZWxXaWR0aCc9PicwJywKICAgICAgICAgICAncGVtaXNhaCc9PicgJywKICAgICAgICAgICAndmFsdWUnPT4iCgogICAgICAgICAgIDx0ZXh0YXJlYSBpZD0nbG9nQ2xvc2luZycgbmFtZT0nbG9nQ2xvc2luZycgcmVhZG9ubHkgc3R5bGU9J3dpZHRoOjc5MHB4O2hlaWdodDoyMjBweDsnPkp1bWxhaCBTS1BEICA9ICIuc2l6ZW9mKCRhcnJheVNLUEQpLiJcbkp1bWxhaCBLb2RlIEJhcmFuZyAgPSAiLnNpemVvZigkYXJyYXlLb2RlQmFyYW5nKS4iXG48L3RleHRhcmVhPiIsCiAgICAgICApLAogICAgICk7CiAgICAvL3RvbWJvbAoKICAgIC8vICRsZW5ndGhQcm9jY2VzcyA9IHNpemVvZigkYXJyYXlTS1BEKSAqIHNpemVvZigkYXJyYXlLb2RlQmFyYW5nKTsKICAgICRsZW5ndGhQcm9jY2VzcyA9IHNpemVvZigkYXJyYXlTS1BEKTsKICAgICR0aGlzLT5mb3JtX21lbnViYXdhaCA9CiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi5qc29uX2VuY29kZSgkYXJyYXlLb2RlQmFyYW5nKS4iJyAgaWQ9J2FycmF5S29kZUJhcmFuZycgbmFtZT0nYXJyYXlLb2RlQmFyYW5nJyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi5zaXplb2YoJGFycmF5S29kZUJhcmFuZykuIicgIGlkPSd0b3RhbEJhcmFuZycgbmFtZT0ndG90YWxCYXJhbmcnID4gIi4KICAgICAgIjxpbnB1dCB0eXBlPSdoaWRkZW4nIHZhbHVlPSciLmpzb25fZW5jb2RlKCRhcnJheVNLUEQpLiInICBpZD0nYXJyYXlLb2RlU0tQRCcgbmFtZT0nYXJyYXlLb2RlU0tQRCcgPiAiLgogICAgICAiPGlucHV0IHR5cGU9J2hpZGRlbicgdmFsdWU9JyIuanNvbl9lbmNvZGUoJGFycmF5U0tQRCkuIicgIGlkPSdhcnJheURhdGFQb3N0JyBuYW1lPSdhcnJheURhdGFQb3N0JyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi4kbGVuZ3RoUHJvY2Nlc3MuIicgIGlkPSdsZW5ndGhQcm9jY2VzcycgIG5hbWU9J2xlbmd0aFByb2NjZXNzJyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi4ka29kZVNLUEQuIicgIGlkPSdrb2RlU0tQRCcgbmFtZT0na29kZVNLUEQnID4gIi4KICAgICAgIjxpbnB1dCB0eXBlPSdoaWRkZW4nIHZhbHVlPScnICBpZD0nc2twZE5vdENMb3NpbmcnIG5hbWU9J3NrcGROb3RDTG9zaW5nJyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nQ2xvc2luZycgb25jbGljayA9JyIuJHRoaXMtPlByZWZpeC4iLmV4ZWN1dGVDbG9zaW5nKCknIHRpdGxlPSdDbG9zaW5nJyA+ICZuYnNwIi4KICAgICAgIjxpbnB1dCB0eXBlPSdidXR0b24nIHZhbHVlPSdUdXR1cCcgb25jbGljayA9JyIuJHRoaXMtPlByZWZpeC4iLkNsb3NlKCknID4iOwoKICAgICRmb3JtID0gJHRoaXMtPmdlbkZvcm0oKTsKICAgICRjb250ZW50ID0gJGZvcm07Ly8kY29udGVudCA9ICdjb250ZW50JzsKICAgIHJldHVybglhcnJheSAoJ2Nlayc9PiRjZWssICdlcnInPT4kZXJyLCAnY29udGVudCc9PiRjb250ZW50KTsKICB9CiAgZnVuY3Rpb24gVHV0dXBCdWt1KCRkdCl7CiAgIGdsb2JhbCAkU2Vuc3VzVG1wLCRNYWluLCRIVFRQX0NPT0tJRV9WQVJTOwogICBmb3JlYWNoICgkX1JFUVVFU1QgYXMgJGtleSA9PiAkdmFsdWUpIHsKICAgICAgJCRrZXkgPSAkdmFsdWU7CiAgIH0KICAgJGNlayA9ICcnOyAkZXJyPScnOyAkY29udGVudD0nJzsKICAgJGpzb24gPSBUUlVFOwkvLyRFcnJNc2cgPSAndGVzJzsKICAgJGZvcm1fbmFtZSA9ICR0aGlzLT5QcmVmaXguJ19mb3JtJzsKICAgJHRoaXMtPmZvcm1fd2lkdGggPSA4MjA7CiAgICR0aGlzLT5mb3JtX2hlaWdodCA9IDUwMDsKICAgJHRoaXMtPmZvcm1fY2FwdGlvbiA9ICdUdXR1cCBCdWt1JzsKICAgaWYoJGZpbHRlclN1YlVuaXQgIT0gJzAwMCcpewogICAgICRrb25kaXNpU0tQRCA9ICIgYW5kIGMxID0gJyIuJGZpbHRlclVydXNhbi4iJyBhbmQgYyA9ICciLiRmaWx0ZXJCaWRhbmcuIicgYW5kIGQgPSAnIi4kZmlsdGVyU0tQRC4iJyBhbmQgZSA9ICciLiRmaWx0ZXJVbml0LiInIGFuZCBlMSA9ICciLiRmaWx0ZXJTdWJVbml0LiInICAiOwogICAgICRrb2RlU0tQRCA9ICRmaWx0ZXJVcnVzYW4uIi4iLiRmaWx0ZXJCaWRhbmcuIi4iLiRmaWx0ZXJTS1BELiIuIi4kZmlsdGVyVW5pdC4iLiIuJGZpbHRlclN1YlVuaXQ7CiAgICAgJGdldERhdGFVcnVzYW4gPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPScwMCciKSk7CiAgICAgJGdldERhdGFCaWRhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPSckZmlsdGVyQmlkYW5nJyBhbmQgZD0nMDAnIikpOwogICAgICRnZXREYXRhU0tQRCA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JyRmaWx0ZXJCaWRhbmcnIGFuZCBkPSckZmlsdGVyU0tQRCciKSk7CiAgICAgJGdldERhdGFVbml0ID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByZWZfc2twZCB3aGVyZSBjMSA9ICckZmlsdGVyVXJ1c2FuJyBhbmQgYz0nJGZpbHRlckJpZGFuZycgYW5kIGQ9JyRmaWx0ZXJTS1BEJyBhbmQgZT0nJGZpbHRlclVuaXQnIGFuZCBlMT0nMDAwJyIpKTsKICAgICAkZ2V0RGF0YVN1YlVuaXQgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPSckZmlsdGVyQmlkYW5nJyBhbmQgZD0nJGZpbHRlclNLUEQnIGFuZCBlPSckZmlsdGVyVW5pdCcgYW5kIGUxPSckZmlsdGVyU3ViVW5pdCciKSk7CiAgICAgJHVydXNhbiA9ICRnZXREYXRhVXJ1c2FuWydubV9za3BkJ107CiAgICAgJGJpZGFuZyA9ICRnZXREYXRhQmlkYW5nWydubV9za3BkJ107CiAgICAgJHNrcGQgPSAkZ2V0RGF0YVNLUERbJ25tX3NrcGQnXTsKICAgICAkdW5pdCA9ICRnZXREYXRhVW5pdFsnbm1fc2twZCddOwogICAgICRzdWJVbml0ID0gJGdldERhdGFTdWJVbml0WydubV9za3BkJ107CiAgIH1lbHNlaWYoJGZpbHRlclVuaXQgIT0gJzAwJyl7CiAgICAgJGtvbmRpc2lTS1BEID0gIiBhbmQgYzEgPSAnIi4kZmlsdGVyVXJ1c2FuLiInIGFuZCBjID0gJyIuJGZpbHRlckJpZGFuZy4iJyBhbmQgZCA9ICciLiRmaWx0ZXJTS1BELiInIGFuZCBlID0gJyIuJGZpbHRlclVuaXQuIicgIjsKICAgICAka29kZVNLUEQgPSAkZmlsdGVyVXJ1c2FuLiIuIi4kZmlsdGVyQmlkYW5nLiIuIi4kZmlsdGVyU0tQRC4iLiIuJGZpbHRlclVuaXQ7CiAgICAgJGdldERhdGFVcnVzYW4gPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPScwMCciKSk7CiAgICAgJGdldERhdGFCaWRhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPSckZmlsdGVyQmlkYW5nJyBhbmQgZD0nMDAnIikpOwogICAgICRnZXREYXRhU0tQRCA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JyRmaWx0ZXJCaWRhbmcnIGFuZCBkPSckZmlsdGVyU0tQRCciKSk7CiAgICAgJGdldERhdGFVbml0ID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByZWZfc2twZCB3aGVyZSBjMSA9ICckZmlsdGVyVXJ1c2FuJyBhbmQgYz0nJGZpbHRlckJpZGFuZycgYW5kIGQ9JyRmaWx0ZXJTS1BEJyBhbmQgZT0nJGZpbHRlclVuaXQnIGFuZCBlMT0nMDAwJyIpKTsKICAgICAkdXJ1c2FuID0gJGdldERhdGFVcnVzYW5bJ25tX3NrcGQnXTsKICAgICAkYmlkYW5nID0gJGdldERhdGFCaWRhbmdbJ25tX3NrcGQnXTsKICAgICAkc2twZCA9ICRnZXREYXRhU0tQRFsnbm1fc2twZCddOwogICAgICR1bml0ID0gJGdldERhdGFVbml0WydubV9za3BkJ107CiAgICAgJHN1YlVuaXQgPSAiU0VNVUEgU1VCIFVOSVQiOwogICB9ZWxzZWlmKCRmaWx0ZXJTS1BEICE9JzAwJyl7CiAgICAgJGtvbmRpc2lTS1BEID0gIiBhbmQgYzEgPSAnIi4kZmlsdGVyVXJ1c2FuLiInIGFuZCBjID0gJyIuJGZpbHRlckJpZGFuZy4iJyBhbmQgZCA9ICciLiRmaWx0ZXJTS1BELiInIjsKICAgICAka29kZVNLUEQgPSAkZmlsdGVyVXJ1c2FuLiIuIi4kZmlsdGVyQmlkYW5nLiIuIi4kZmlsdGVyU0tQRDsKICAgICAkZ2V0RGF0YVVydXNhbiA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JzAwJyIpKTsKICAgICAkZ2V0RGF0YUJpZGFuZyA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JyRmaWx0ZXJCaWRhbmcnIGFuZCBkPScwMCciKSk7CiAgICAgJGdldERhdGFTS1BEID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByZWZfc2twZCB3aGVyZSBjMSA9ICckZmlsdGVyVXJ1c2FuJyBhbmQgYz0nJGZpbHRlckJpZGFuZycgYW5kIGQ9JyRmaWx0ZXJTS1BEJyIpKTsKICAgICAkdXJ1c2FuID0gJGdldERhdGFVcnVzYW5bJ25tX3NrcGQnXTsKICAgICAkYmlkYW5nID0gJGdldERhdGFCaWRhbmdbJ25tX3NrcGQnXTsKICAgICAkc2twZCA9ICRnZXREYXRhU0tQRFsnbm1fc2twZCddOwogICAgICR1bml0ID0gIlNFTVVBIFVOSVQiOwogICAgICRzdWJVbml0ID0gIlNFTVVBIFNVQiBVTklUIjsKICAgfWVsc2VpZigkZmlsdGVyQmlkYW5nICE9JzAwJyl7CiAgICAgJGtvbmRpc2lTS1BEID0gIiBhbmQgYzEgPSAnIi4kZmlsdGVyVXJ1c2FuLiInIGFuZCBjID0gJyIuJGZpbHRlckJpZGFuZy4iJyI7CiAgICAgJGtvZGVTS1BEID0gJGZpbHRlclVydXNhbi4iLiIuJGZpbHRlckJpZGFuZzsKICAgICAkZ2V0RGF0YVVydXNhbiA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JzAwJyIpKTsKICAgICAkZ2V0RGF0YUJpZGFuZyA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGZpbHRlclVydXNhbicgYW5kIGM9JyRmaWx0ZXJCaWRhbmcnIGFuZCBkPScwMCciKSk7CiAgICAgJHVydXNhbiA9ICRnZXREYXRhVXJ1c2FuWydubV9za3BkJ107CiAgICAgJGJpZGFuZyA9ICRnZXREYXRhQmlkYW5nWydubV9za3BkJ107CiAgICAgJHNrcGQgPSAiU0VNVUEgU0tQRCI7CiAgICAgJHVuaXQgPSAiU0VNVUEgVU5JVCI7CiAgICAgJHN1YlVuaXQgPSAiU0VNVUEgU1VCIFVOSVQiOwogICB9ZWxzZWlmKCRmaWx0ZXJVcnVzYW4gIT0nMDAnKXsKICAgICAka29uZGlzaVNLUEQgPSAiIGFuZCBjMSA9ICciLiRmaWx0ZXJVcnVzYW4uIiciOwogICAgICRrb2RlU0tQRCA9ICRmaWx0ZXJVcnVzYW47CiAgICAgJGdldERhdGFVcnVzYW4gPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRmaWx0ZXJVcnVzYW4nIGFuZCBjPScwMCciKSk7CiAgICAgJHVydXNhbiA9ICRnZXREYXRhVXJ1c2FuWydubV9za3BkJ107CiAgICAgJGJpZGFuZyA9ICJTRU1VQSBCSURBTkciOwogICAgICRza3BkID0gIlNFTVVBIFNLUEQiOwogICAgICR1bml0ID0gIlNFTVVBIFVOSVQiOwogICAgICRzdWJVbml0ID0gIlNFTVVBIFNVQiBVTklUIjsKICAgfWVsc2V7CiAgICAgJGtvZGVTS1BEID0gIiI7CiAgICAgJHVydXNhbiA9ICJTRU1VQSBVUlVTQU4iOwogICAgICRiaWRhbmcgPSAiU0VNVUEgQklEQU5HIjsKICAgICAkc2twZCA9ICJTRU1VQSBTS1BEIjsKICAgICAkdW5pdCA9ICJTRU1VQSBVTklUIjsKICAgICAkc3ViVW5pdCA9ICJTRU1VQSBTVUIgVU5JVCI7CiAgIH0KCiAgICRnZXREYXRhQmFyYW5nID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9iYXJhbmcgd2hlcmUgZj0nMDgnIGFuZCBqMSE9JzAwMDAnICIpOwogICB3aGlsZSAoJGRhdGFCYXJhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFCYXJhbmcpKSB7CiAgICAgJGFycmF5S29kZUJhcmFuZ1tdID0gJGRhdGFCYXJhbmdbJ2YnXS4iLiIuJGRhdGFCYXJhbmdbJ2cnXS4iLiIuJGRhdGFCYXJhbmdbJ2gnXS4iLiIuJGRhdGFCYXJhbmdbJ2knXS4iLiIuJGRhdGFCYXJhbmdbJ2onXS4iLiIuJGRhdGFCYXJhbmdbJ2oxJ107CiAgIH0KICAgLy8gJGdldERhdGFDbG9zaW5nID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGNsb3NpbmdfcGVyc2VkaWFhbiB3aGVyZSAxPTEgJGtvbmRpc2lTS1BEIGFuZCB0YWh1bl9hbmdnYXJhbiA9JyR0aGlzLT50YWh1bkFuZ2dhcmFuJyAiKTsKICAgLy8gd2hpbGUgKCRkYXRhQ2xvc2luZyA9ICR0aGlzLT5zcWxBcnJheSgkZ2V0RGF0YUNsb3NpbmcpKSB7CiAgIC8vICAgJGNvbmNhdFNLUEQgPSAkZGF0YUNsb3NpbmdbJ2MxJ10uIi4iLiRkYXRhQ2xvc2luZ1snYyddLiIuIi4kZGF0YUNsb3NpbmdbJ2QnXS4iLiIuJGRhdGFDbG9zaW5nWydlJ10uIi4iLiRkYXRhQ2xvc2luZ1snZTEnXTsKICAgLy8gICBpZigkdGhpcy0+c3FsTnVtUm93KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBjbG9zaW5nX3BlcnNlZGlhYW4gd2hlcmUgJHRoaXMtPnN0cmluZ0NvbmNhdFN1YlVuaXQgPSAnJGNvbmNhdFNLUEQnIGFuZCB0YWh1bl9hbmdnYXJhbiA9JyR0aGlzLT50YWh1bkFuZ2dhcmFuJyAiKSkgIT0gMil7CiAgIC8vICAgICAkYXJyYXlTS1BEQ29zaW5nW10gPSAiJyIuJGRhdGFDbG9zaW5nWydjMSddLiIuIi4kZGF0YUNsb3NpbmdbJ2MnXS4iLiIuJGRhdGFDbG9zaW5nWydkJ10uIi4iLiRkYXRhQ2xvc2luZ1snZSddLiIuIi4kZGF0YUNsb3NpbmdbJ2UxJ10uIiciIDsKICAgLy8gICB9CiAgIC8vIH0KICAgLy8gaWYoc2l6ZW9mKCRhcnJheVNLUERDb3NpbmcpID4gMCl7CiAgIC8vICAgJGtvbmRpc2lDTG9zaW5nU0tQRCA9ICIgYW5kIGNvbmNhdChjMSwnLicsYywnLicsZCwnLicsZSwnLicsZTEpIG5vdCBpbigiLmltcGxvZGUoIiwiLCRhcnJheVNLUERDb3NpbmcpLiIpICI7CiAgIC8vIH0KICAgJGdldERhdGFTS1BEID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIDE9MSAka29uZGlzaVNLUEQgYW5kIGUxIT0nMDAwJyAka29uZGlzaUNMb3NpbmdTS1BEICIpOwogICB3aGlsZSAoJGRhdGFTS1BEID0gJHRoaXMtPnNxbEFycmF5KCRnZXREYXRhU0tQRCkpIHsKICAgICAkYXJyYXlTS1BEW10gPSAkZGF0YVNLUERbJ2MxJ10uIi4iLiRkYXRhU0tQRFsnYyddLiIuIi4kZGF0YVNLUERbJ2QnXS4iLiIuJGRhdGFTS1BEWydlJ10uIi4iLiRkYXRhU0tQRFsnZTEnXSA7CiAgIH0KICAgJGFycmF5U2VtZXN0ZXIgPSBhcnJheSgKICAgIGFycmF5KCcxJywnU0VNRVNURVIgMScpLAogICAgYXJyYXkoJzInLCdTRU1FU1RFUiAyJyksCiAgKTsKICBpZihlbXB0eSgkZXJyKSl7CiAgICBpZihzaXplb2YoJGFycmF5U0tQRCkgPT0gMCl7CiAgICAgICRlcnIgPSAiRGF0YSBzdWRhaCBkaSBjbG9zaW5nICEiOwogICAgfQogIH0KCiAgICR0aGlzLT5mb3JtX2ZpZWxkcyA9IGFycmF5KAogICAgICdrb2RlMCcgPT4gYXJyYXkoCiAgICAgICAnbGFiZWwnPT4nVVJVU0FOJywKICAgICAgICdsYWJlbFdpZHRoJz0+MTUwLAogICAgICAgJ3ZhbHVlJz0+ICR1cnVzYW4KICAgICApLAogICAgICdrb2RlMScgPT4gYXJyYXkoCiAgICAgICAnbGFiZWwnPT4nQklEQU5HJywKICAgICAgICdsYWJlbFdpZHRoJz0+MTUwLAogICAgICAgJ3ZhbHVlJz0+ICRiaWRhbmcKICAgICApLAogICAgICdrb2RlMicgPT4gYXJyYXkoCiAgICAgICAnbGFiZWwnPT4nU0tQRCcsCiAgICAgICAnbGFiZWxXaWR0aCc9PjE1MCwKICAgICAgICd2YWx1ZSc9PiAkc2twZAogICAgICksCiAgICAgJ2tvZGUzJyA9PiBhcnJheSgKICAgICAgICdsYWJlbCc9PidVTklUJywKICAgICAgICdsYWJlbFdpZHRoJz0+MTUwLAogICAgICAgJ3ZhbHVlJz0+ICR1bml0CiAgICAgKSwKICAgICAna29kZTQnID0+IGFycmF5KAogICAgICAgJ2xhYmVsJz0+J1NVQiBVTklUJywKICAgICAgICdsYWJlbFdpZHRoJz0+MTUwLAogICAgICAgJ3ZhbHVlJz0+ICRzdWJVbml0CiAgICAgKSwKIAkJJ2tldGVyYW5nYW4nID0+IGFycmF5KAogCQkJJ2xhYmVsJz0+J0tFVEVSQU5HQU4nLAogCQkJJ2xhYmVsV2lkdGgnPT43MCwKIAkJCSd2YWx1ZSc9PiAiPHRleHRhcmVhIGlkPSdrZXRlcmFuZ2FuJyBuYW1lPSdrZXRlcmFuZ2FuJyBzdHlsZT0nd2lkdGg6MzAwcHg7aGVpZ2h0OjUwcHg7Jz48L3RleHRhcmVhPiIKIAkJKSwKICAgICAncHJvZ3Jlc3MnID0+IGFycmF5KAogICAgICAgJ2xhYmVsJz0+JycsCiAgICAgICAnbGFiZWxXaWR0aCc9PjEsCiAgICAgICAncGVtaXNhaCc9PicgJywKICAgICAgICd0eXBlJz0+J21lcmdlJywKICAgICAgICd2YWx1ZSc9PgogICAgICAgICAiPGRpdiBpZD0ncHJvZ3Jlc3Nib3gnIHN0eWxlPSdiYWNrZ3JvdW5kOiNmZmZiZjA7Ym9yZGVyLXJhZGl1czo1cHg7Ym9yZGVyOjFweCBzb2xpZDtoZWlnaHQ6MTBweCc+CiAgICAgICAgICAgPGRpdiBpZD0ncHJvZ3Jlc3NiYXInPjwvZGl2ID4KICAgICAgICAgICA8ZGl2IGlkPSdzdGF0dXN0eHQnIHN0eWxlPSd3aWR0aDowJTtiYWNrZ3JvdW5kOmdyZWVuO2hlaWdodDoxMHB4O3RleHQtYWxpZ246cmlnaHQ7Y29sb3I6d2hpdGU7Zm9udC1zaXplOjhweDsnPjAlPC9kaXY+CiAgICAgICAgICAgPGRpdiBpZD0nb3V0cHV0Jz48L2Rpdj4KICAgICAgICAgPC9kaXY+CSIKICAgICAgICksCiAgICAgJ3BlcmluZ2F0YW4nID0+IGFycmF5KAogICAgICAgICAgICdsYWJlbCc9PicnLAogCQkJCQkndHlwZSc9PidtZXJnZScsCiAgICAgICAgICAgJ2xhYmVsV2lkdGgnPT4xLAogICAgICAgICAgICdwZW1pc2FoJz0+JyAnLAogICAgICAgICAgICd2YWx1ZSc9PiI8ZGl2IGlkPSdwZW1pc2FoJyBzdHlsZT0nY29sb3I6cmVkO2ZvbnQtc2l6ZToxMXB4Oyc+PC9kaXY+IiwKICAgICAgICksCiAgICAgJ2xvZycgPT4gYXJyYXkoCiAgICAgICAgICAgJ2xhYmVsJz0+JycsCiAJCQkJCSd0eXBlJz0+J21lcmdlJywKICAgICAgICAgICAnbGFiZWxXaWR0aCc9PicwJywKICAgICAgICAgICAncGVtaXNhaCc9PicgJywKICAgICAgICAgICAndmFsdWUnPT4iCgogICAgICAgICAgIDx0ZXh0YXJlYSBpZD0nbG9nQ2xvc2luZycgbmFtZT0nbG9nQ2xvc2luZycgcmVhZG9ubHkgc3R5bGU9J3dpZHRoOjc5MHB4O2hlaWdodDoyMjBweDsnPkp1bWxhaCBTS1BEICA9ICIuc2l6ZW9mKCRhcnJheVNLUEQpLiJcbkp1bWxhaCBLb2RlIEJhcmFuZyAgPSAiLnNpemVvZigkYXJyYXlLb2RlQmFyYW5nKS4iXG48L3RleHRhcmVhPiIsCiAgICAgICApLAogICAgICk7CiAgICAvL3RvbWJvbAoKICAgIC8vICRsZW5ndGhQcm9jY2VzcyA9IHNpemVvZigkYXJyYXlTS1BEKSAqIHNpemVvZigkYXJyYXlLb2RlQmFyYW5nKTsKICAgICRsZW5ndGhQcm9jY2VzcyA9IHNpemVvZigkYXJyYXlTS1BEKTsKICAgICR0aGlzLT5mb3JtX21lbnViYXdhaCA9CiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi5qc29uX2VuY29kZSgkYXJyYXlLb2RlQmFyYW5nKS4iJyAgaWQ9J2FycmF5S29kZUJhcmFuZycgbmFtZT0nYXJyYXlLb2RlQmFyYW5nJyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi5zaXplb2YoJGFycmF5S29kZUJhcmFuZykuIicgIGlkPSd0b3RhbEJhcmFuZycgbmFtZT0ndG90YWxCYXJhbmcnID4gIi4KICAgICAgIjxpbnB1dCB0eXBlPSdoaWRkZW4nIHZhbHVlPSciLmpzb25fZW5jb2RlKCRhcnJheVNLUEQpLiInICBpZD0nYXJyYXlLb2RlU0tQRCcgbmFtZT0nYXJyYXlLb2RlU0tQRCcgPiAiLgogICAgICAiPGlucHV0IHR5cGU9J2hpZGRlbicgdmFsdWU9JyIuanNvbl9lbmNvZGUoJGFycmF5U0tQRCkuIicgIGlkPSdhcnJheURhdGFQb3N0JyBuYW1lPSdhcnJheURhdGFQb3N0JyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi4kbGVuZ3RoUHJvY2Nlc3MuIicgIGlkPSdsZW5ndGhQcm9jY2VzcycgIG5hbWU9J2xlbmd0aFByb2NjZXNzJyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi4ka29kZVNLUEQuIicgIGlkPSdrb2RlU0tQRCcgbmFtZT0na29kZVNLUEQnID4gIi4KICAgICAgIjxpbnB1dCB0eXBlPSdoaWRkZW4nIHZhbHVlPScnICBpZD0nc2twZE5vdENMb3NpbmcnIG5hbWU9J3NrcGROb3RDTG9zaW5nJyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nVHV0dXAgQnVrdScgb25jbGljayA9JyIuJHRoaXMtPlByZWZpeC4iLmV4ZWN1dGVUdXR1cEJ1a3UoKScgdGl0bGU9J1R1dHVwIEJ1a3UnID4gJm5ic3AiLgogICAgICAiPGlucHV0IHR5cGU9J2J1dHRvbicgdmFsdWU9J0JhdGFsJyBvbmNsaWNrID0nIi4kdGhpcy0+UHJlZml4LiIuQ2xvc2UoKScgPiI7CgogICAgJGZvcm0gPSAkdGhpcy0+Z2VuRm9ybSgpOwogICAgJGNvbnRlbnQgPSAkZm9ybTsvLyRjb250ZW50ID0gJ2NvbnRlbnQnOwogICAgcmV0dXJuCWFycmF5ICgnY2VrJz0+JGNlaywgJ2Vycic9PiRlcnIsICdjb250ZW50Jz0+JGNvbnRlbnQpOwogIH0KICBmdW5jdGlvbiBDb3VudEFuZENsb3NlKCRkdCl7CiAgIGdsb2JhbCAkU2Vuc3VzVG1wLCRNYWluLCRIVFRQX0NPT0tJRV9WQVJTOwogICBmb3JlYWNoICgkX1JFUVVFU1QgYXMgJGtleSA9PiAkdmFsdWUpIHsKICAgICAgJCRrZXkgPSAkdmFsdWU7CiAgIH0KICAgJGNlayA9ICcnOyAkZXJyPScnOyAkY29udGVudD0nJzsKICAgJGpzb24gPSBUUlVFOwkvLyRFcnJNc2cgPSAndGVzJzsKICAgJGZvcm1fbmFtZSA9ICR0aGlzLT5QcmVmaXguJ19mb3JtJzsKICAgJHRoaXMtPmZvcm1fd2lkdGggPSA4MjA7CiAgICR0aGlzLT5mb3JtX2hlaWdodCA9IDQwMDsKICAgJHRoaXMtPmZvcm1fY2FwdGlvbiA9ICdDb3VudCBBbmQgQ2xvc2luZyc7CgogICRmaWx0ZXJQZXJpb2RlPSAkZmlsdGVyU2VtZXN0ZXI7CiAgaWYoZW1wdHkoJGZpbHRlclBlcmlvZGUpKSRlcnIgPSAiUGlsaWggUGVyaW9kZSI7CiAJaWYoJGZpbHRlclBlcmlvZGUgPT0gMSl7CiAJCSR0YW5nZ2FsID0gIjMxLTA2LSIuJHRoaXMtPnRhaHVuQW5nZ2FyYW47CiAJCS8vICRzdGF0dXNDbG9zaW5nID0gJHRoaXMtPmdldFN0YXR1c0Nsb3NpbmcoJGtvZGVTS1BELCR0aGlzLT5nZW5lcmF0ZURhdGUoJHRhbmdnYWwpKTsKIAkJaWYoJHN0YXR1c0Nsb3NpbmcgIT0gMCl7CiAJCQkkZXJyID0gIkRhdGEgc2VtZXN0ZXIgc2F0dSBzdWRhaCBkaSBjbG9zaW5nLCBiYXRhbGthbiBjbG9zaW5nID8iOwogCQl9CiAJCSRuYW1hU2VtZXN0ZXIgPSAiU0FUVSI7CiAJfWVsc2V7CiAJCSR0YW5nZ2FsID0gIjMxLTEyLSIuJHRoaXMtPnRhaHVuQW5nZ2FyYW47CiAJCS8vICRzdGF0dXNDbG9zaW5nID0gJHRoaXMtPmdldFN0YXR1c0Nsb3NpbmcoJGtvZGVTS1BELCR0aGlzLT5nZW5lcmF0ZURhdGUoJHRhbmdnYWwpKTsKIAkJaWYoJHN0YXR1c0Nsb3NpbmcgIT0gMCl7CiAJCQkkZXJyID0gIkRhdGEgc2VtZXN0ZXIgZHVhIHN1ZGFoIGRpIGNsb3NpbmcsIGJhdGFsa2FuIGNsb3NpbmcgPyI7CiAJCX0KIAkJJG5hbWFTZW1lc3RlciA9ICJEVUEiOwogCX0KCiAgICRnZXREYXRhQmFyYW5nID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9iYXJhbmcgd2hlcmUgZj0nMDgnIGFuZCBqMSE9JzAwMDAnICIpOwogICB3aGlsZSAoJGRhdGFCYXJhbmcgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFCYXJhbmcpKSB7CiAgICAgJGFycmF5S29kZUJhcmFuZ1tdID0gJGRhdGFCYXJhbmdbJ2YnXS4iLiIuJGRhdGFCYXJhbmdbJ2cnXS4iLiIuJGRhdGFCYXJhbmdbJ2gnXS4iLiIuJGRhdGFCYXJhbmdbJ2knXS4iLiIuJGRhdGFCYXJhbmdbJ2onXS4iLiIuJGRhdGFCYXJhbmdbJ2oxJ107CiAgIH0KICAgJGFycmF5U0tQRENvc2luZyA9IGV4cGxvZGUoIjsiLCRsaXN0S29kZVNLUEQpOwogICBmb3IgKCRpPTA7ICRpIDwgc2l6ZW9mKCRhcnJheVNLUERDb3NpbmcpIDsgJGkrKykgewogICAgICRhcnJheVNLUERDTE9TSU5HW10gPSAiJyIuJGFycmF5U0tQRENvc2luZ1skaV0uIiciOwogICB9CiAgICRrb25kaXNpQ0xvc2luZ1NLUEQgPSAiIGFuZCBjb25jYXQoYzEsJy4nLGMsJy4nLGQsJy4nLGUsJy4nLGUxKSBpbigiLmltcGxvZGUoIiwiLCRhcnJheVNLUERDTE9TSU5HKS4iKSAiOwogICAkZ2V0RGF0YVNLUEQgPSAkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgMT0xICRrb25kaXNpU0tQRCBhbmQgZTEhPScwMDAnICRrb25kaXNpQ0xvc2luZ1NLUEQgIik7CiAgIHdoaWxlICgkZGF0YVNLUEQgPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFTS1BEKSkgewogICAgICRhcnJheVNLUERbXSA9ICRkYXRhU0tQRFsnYzEnXS4iLiIuJGRhdGFTS1BEWydjJ10uIi4iLiRkYXRhU0tQRFsnZCddLiIuIi4kZGF0YVNLUERbJ2UnXS4iLiIuJGRhdGFTS1BEWydlMSddIDsKICAgICBmb3IgKCRpPTA7ICRpIDwgc2l6ZW9mKCRhcnJheUtvZGVCYXJhbmcpOyAkaSsrKSB7CiAgICAgICAkYXJyYXlEYXRhUG9zdFtdID0gJGRhdGFTS1BEWydjMSddLiIuIi4kZGF0YVNLUERbJ2MnXS4iLiIuJGRhdGFTS1BEWydkJ10uIi4iLiRkYXRhU0tQRFsnZSddLiIuIi4kZGF0YVNLUERbJ2UxJ10uIjsiLiRhcnJheUtvZGVCYXJhbmdbJGldOwogICAgIH0KICAgfQogICAkYXJyYXlTZW1lc3RlciA9IGFycmF5KAogICAgYXJyYXkoJzEnLCdTRU1FU1RFUiAxJyksCiAgICBhcnJheSgnMicsJ1NFTUVTVEVSIDInKSwKICApOwoKICAgJHRoaXMtPmZvcm1fZmllbGRzID0gYXJyYXkoCiAgICAgJ3NlbWVzdGVyJyA9PiBhcnJheSgKICAgICAgICdsYWJlbCc9PidTRU1FU1RFUicsCiAgICAgICAnbGFiZWxXaWR0aCc9PjE1MCwKICAgICAgICd2YWx1ZSc9PiBjbWJBcnJheSgic2RzIiwkZmlsdGVyU2VtZXN0ZXIsJGFycmF5U2VtZXN0ZXIsICItLSBTRU1FU1RFUiAtLSAiLCIgZGlzYWJsZWQiICkuIjxpbnB1dCB0eXBlPSdoaWRkZW4nIHZhbHVlPSckZmlsdGVyU2VtZXN0ZXInIG5hbWU9J2ZpbHRlclBlcmlvZGUnIGlkPSdmaWx0ZXJQZXJpb2RlJyA+IgogICAgICksCiAJCSdrZXRlcmFuZ2FuJyA9PiBhcnJheSgKIAkJCSdsYWJlbCc9PidLRVRFUkFOR0FOJywKIAkJCSdsYWJlbFdpZHRoJz0+NzAsCiAJCQkndmFsdWUnPT4gIjx0ZXh0YXJlYSBpZD0na2V0ZXJhbmdhbicgbmFtZT0na2V0ZXJhbmdhbicgc3R5bGU9J3dpZHRoOjMwMHB4O2hlaWdodDo1MHB4Oyc+JGtldGVyYW5nYW48L3RleHRhcmVhPiIKIAkJKSwKCiAgICAgJ3Byb2dyZXNzJyA9PiBhcnJheSgKICAgICAgICdsYWJlbCc9PicnLAogICAgICAgJ2xhYmVsV2lkdGgnPT4xLAogICAgICAgJ3BlbWlzYWgnPT4nICcsCiAgICAgICAndHlwZSc9PidtZXJnZScsCiAgICAgICAndmFsdWUnPT4KICAgICAgICAgIjxkaXYgaWQ9J3Byb2dyZXNzYm94JyBzdHlsZT0nYmFja2dyb3VuZDojZmZmYmYwO2JvcmRlci1yYWRpdXM6NXB4O2JvcmRlcjoxcHggc29saWQ7aGVpZ2h0OjEwcHgnPgogICAgICAgICAgIDxkaXYgaWQ9J3Byb2dyZXNzYmFyJz48L2RpdiA+CiAgICAgICAgICAgPGRpdiBpZD0nc3RhdHVzdHh0JyBzdHlsZT0nd2lkdGg6MCU7YmFja2dyb3VuZDpncmVlbjtoZWlnaHQ6MTBweDt0ZXh0LWFsaWduOnJpZ2h0O2NvbG9yOndoaXRlO2ZvbnQtc2l6ZTo4cHg7Jz4wJTwvZGl2PgogICAgICAgICAgIDxkaXYgaWQ9J291dHB1dCc+PC9kaXY+CiAgICAgICAgIDwvZGl2PgkiCiAgICAgICApLAogICAgICdwZXJpbmdhdGFuJyA9PiBhcnJheSgKICAgICAgICAgICAnbGFiZWwnPT4nJywKIAkJCQkJJ3R5cGUnPT4nbWVyZ2UnLAogICAgICAgICAgICdsYWJlbFdpZHRoJz0+MSwKICAgICAgICAgICAncGVtaXNhaCc9PicgJywKICAgICAgICAgICAndmFsdWUnPT4iPGRpdiBpZD0ncGVtaXNhaCcgc3R5bGU9J2NvbG9yOnJlZDtmb250LXNpemU6MTFweDsnPjwvZGl2PiIsCiAgICAgICApLAogICAgICdsb2cnID0+IGFycmF5KAogICAgICAgICAgICdsYWJlbCc9PicnLAogCQkJCQkndHlwZSc9PidtZXJnZScsCiAgICAgICAgICAgJ2xhYmVsV2lkdGgnPT4nMCcsCiAgICAgICAgICAgJ3BlbWlzYWgnPT4nICcsCiAgICAgICAgICAgJ3ZhbHVlJz0+IgoKICAgICAgICAgICA8dGV4dGFyZWEgaWQ9J2xvZ0Nsb3NpbmcnIG5hbWU9J2xvZ0Nsb3NpbmcnIHJlYWRvbmx5IHN0eWxlPSd3aWR0aDo3OTBweDtoZWlnaHQ6MjIwcHg7Jz5KdW1sYWggU0tQRCAgPSAiLnNpemVvZigkYXJyYXlTS1BEKS4iXG5KdW1sYWggS29kZSBCYXJhbmcgID0gIi5zaXplb2YoJGFycmF5S29kZUJhcmFuZykuIlxuPC90ZXh0YXJlYT4iLAogICAgICAgKSwKICAgICApOwogICAgLy90b21ib2wKCiAgICAvLyAkbGVuZ3RoUHJvY2Nlc3MgPSBzaXplb2YoJGFycmF5U0tQRCkgKiBzaXplb2YoJGFycmF5S29kZUJhcmFuZyk7CiAgICAkbGVuZ3RoUHJvY2Nlc3MgPSBzaXplb2YoJGFycmF5RGF0YVBvc3QpOwogICAgJHRoaXMtPmZvcm1fbWVudWJhd2FoID0KICAgICAgIjxpbnB1dCB0eXBlPSdoaWRkZW4nIHZhbHVlPSciLmpzb25fZW5jb2RlKCRhcnJheUtvZGVCYXJhbmcpLiInICBpZD0nYXJyYXlLb2RlQmFyYW5nJyBuYW1lPSdhcnJheUtvZGVCYXJhbmcnID4gIi4KICAgICAgIjxpbnB1dCB0eXBlPSdoaWRkZW4nIHZhbHVlPSciLnNpemVvZigkYXJyYXlLb2RlQmFyYW5nKS4iJyAgaWQ9J3RvdGFsQmFyYW5nJyBuYW1lPSd0b3RhbEJhcmFuZycgPiAiLgogICAgICAiPGlucHV0IHR5cGU9J2hpZGRlbicgdmFsdWU9JyIuanNvbl9lbmNvZGUoJGFycmF5U0tQRCkuIicgIGlkPSdhcnJheUtvZGVTS1BEJyBuYW1lPSdhcnJheUtvZGVTS1BEJyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi5qc29uX2VuY29kZSgkYXJyYXlEYXRhUG9zdCkuIicgIGlkPSdhcnJheURhdGFQb3N0JyBuYW1lPSdhcnJheURhdGFQb3N0JyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi4kbGVuZ3RoUHJvY2Nlc3MuIicgIGlkPSdsZW5ndGhQcm9jY2VzcycgIG5hbWU9J2xlbmd0aFByb2NjZXNzJyA+ICIuCiAgICAgICI8aW5wdXQgdHlwZT0naGlkZGVuJyB2YWx1ZT0nIi4ka29kZVNLUEQuIicgIGlkPSdrb2RlU0tQRCcgbmFtZT0na29kZVNLUEQnID4gIi4KICAgICAgIjxpbnB1dCB0eXBlPSdidXR0b24nIHZhbHVlPSdDbG9zaW5nJyBvbmNsaWNrID0nIi4kdGhpcy0+UHJlZml4LiIuZXhlY3V0ZUNvdW50QW5kQ2xvc2UoIi5zaXplb2YoJGFycmF5U0tQRCkuIiwxKScgdGl0bGU9J0Nsb3NpbmcnID4gJm5ic3AiLgogICAgICAiPGlucHV0IHR5cGU9J2J1dHRvbicgdmFsdWU9J1R1dHVwJyBvbmNsaWNrID0nIi4kdGhpcy0+UHJlZml4LiIuQ2xvc2UoKScgPiI7CgogICAgJGZvcm0gPSAkdGhpcy0+Z2VuRm9ybSgpOwogICAgJGNvbnRlbnQgPSAkZm9ybTsvLyRjb250ZW50ID0gJ2NvbnRlbnQnOwogICAgcmV0dXJuCWFycmF5ICgnY2VrJz0+JGNlaywgJ2Vycic9PiRlcnIsICdjb250ZW50Jz0+JGNvbnRlbnQpOwogIH0KCgogIGZ1bmN0aW9uIGdldFN0YXR1c0hpdHVuZygka29kZVNLUEQsJHNlbWVzdGVyKXsKCQlpZighZW1wdHkoJHNlbWVzdGVyKSl7CgkJCQlpZigkc2VtZXN0ZXIgPT0gJzEnKXsKCQkJCQkJJG1heEZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIwNiI7CgkJCQkJCSRjb25kaXRpb25QZXJpb2RlID0gImFuZCByZXBsYWNlKGxlZnQodGFuZ2dhbF9idWt1LDcpLCctJywnJykgPD0gJyRtYXhGaWx0ZXInIjsKCQkJCX1lbHNlaWYoJHNlbWVzdGVyID09ICcyJyl7CgkJCQkJCSRtaW5GaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMDciOwoJCQkJCQkkbWF4RmlsdGVyID0gJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIjEyIjsKCQkJCQkJJGNvbmRpdGlvblBlcmlvZGUgPSAiYW5kIHJlcGxhY2UobGVmdCh0YW5nZ2FsX2J1a3UsNyksJy0nLCcnKSA+PSAnJG1pbkZpbHRlcicgYW5kIHJlcGxhY2UobGVmdCh0YW5nZ2FsX2J1a3UsNyksJy0nLCcnKSA8PSAnJG1heEZpbHRlciciOwoJCQkJfWVsc2VpZigkc2VtZXN0ZXIgPT0gJzMnKXsKCQkJCQkJJG1heEZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIxMiI7CgkJCQl9CgkJfQoJCSRzdGF0dXNIaXR1bmcgPSAkdGhpcy0+c3FsTnVtUm93KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB0X3BlcnNlZGlhYW5fbG9ja19iYXJhbmcgd2hlcmUgJHRoaXMtPnN0cmluZ0NvbmNhdFN1YlVuaXQgPSAnJGtvZGVTS1BEJyBhbmQgdGFodW4gPSAnJHRoaXMtPnRhaHVuQW5nZ2FyYW4nIGFuZCBzZW1lc3RlciA9ICckc2VtZXN0ZXInIikpOwoJCWlmKCAkc3RhdHVzSGl0dW5nICAhPSAwKXsKCQkJJHJldHVybiA9IDE7CgkJfWVsc2V7CgkJCSRyZXR1cm4gPSAwIDsKCQl9CgkJcmV0dXJuICRyZXR1cm47Cgl9CiAgZnVuY3Rpb24gY291bnRBbmRDbG9zZVNlbWVzdGVyMSgka29kZVNLUEQsJGtvZGVCYXJhbmcpewogIAkJIGZvcmVhY2ggKCRfUkVRVUVTVCBhcyAka2V5ID0+ICR2YWx1ZSkgewogIAkJCQkkJGtleSA9ICR2YWx1ZTsKICAJCSB9CiAgICAgICRnZXREYXRhUGVyc2VkaWFhbiA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB2aWV3X2RhZnRhcl9wZXJzZWRpYWFuIHdoZXJlIGNvbmNhdChjMSwnLicsYywnLicsZCwnLicsZSwnLicsZTEpID0gJyRrb2RlU0tQRCcgYW5kIGNvbmNhdChmLCcuJyxnLCcuJyxoLCcuJyxpLCcuJyxqLCcuJyxqMSkgPSAnJGtvZGVCYXJhbmcnIGFuZCB5ZWFyKHRhbmdnYWxfYnVrdSkgPSAnJHRoaXMtPnRhaHVuQW5nZ2FyYW4nIik7CiAgICAgIHdoaWxlICgkZGF0YVBlcnNlZGlhYW4gPSAkdGhpcy0+c3FsQXJyYXkoJGdldERhdGFQZXJzZWRpYWFuKSkgewogICAgICAgICRrb2RlQmFyYW5nID0gJGRhdGFQZXJzZWRpYWFuWydmJ10uIi4iLiRkYXRhUGVyc2VkaWFhblsnZyddLiIuIi4kZGF0YVBlcnNlZGlhYW5bJ2gnXS4iLiIuJGRhdGFQZXJzZWRpYWFuWydpJ10uIi4iLiRkYXRhUGVyc2VkaWFhblsnaiddLiIuIi4kZGF0YVBlcnNlZGlhYW5bJ2oxJ107CiAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCJkZWxldGUgZnJvbSB0X3BlcnNlZGlhYW5fbG9ja19iYXJhbmcgd2hlcmUgY29uY2F0KGMxLCcuJyxjLCcuJyxkLCcuJyxlLCcuJyxlMSkgPSAnJGtvZGVTS1BEJyBhbmQgJHRoaXMtPnN0cmluZ0NvbmNhdEtvZGVCYXJhbmcgPSAnJGtvZGVCYXJhbmcnIGFuZCB0YWh1biA9ICckdGhpcy0+dGFodW5BbmdnYXJhbiciKTsKICAgICAgICAkYXJyYXlTYWxkb0F3YWwgPSAkdGhpcy0+Z3JhYlRyYW5zYWtzaVNlbWVzdGVyMSgka29kZVNLUEQsJGtvZGVCYXJhbmcsJzEnKTsKICAgICAgICAkZ2V0RGF0YUJhcmFuZyA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX2JhcmFuZyB3aGVyZSAkdGhpcy0+c3RyaW5nQ29uY2F0S29kZUJhcmFuZyA9ICcka29kZUJhcmFuZyciKSk7CiAgICAgICAgJGRhdGFTYWxkb0F3YWwgPSBhcnJheSgKICAgICAgICAgICdjMScgPT4gJGRhdGFQZXJzZWRpYWFuWydjMSddLAogICAgICAgICAgJ2MnID0+ICRkYXRhUGVyc2VkaWFhblsnYyddLAogICAgICAgICAgJ2QnID0+ICRkYXRhUGVyc2VkaWFhblsnZCddLAogICAgICAgICAgJ2UnID0+ICRkYXRhUGVyc2VkaWFhblsnZSddLAogICAgICAgICAgJ2UxJyA9PiAkZGF0YVBlcnNlZGlhYW5bJ2UxJ10sCiAgICAgICAgICAnZicgPT4gJGRhdGFQZXJzZWRpYWFuWydmJ10sCiAgICAgICAgICAnZycgPT4gJGRhdGFQZXJzZWRpYWFuWydnJ10sCiAgICAgICAgICAnaCcgPT4gJGRhdGFQZXJzZWRpYWFuWydoJ10sCiAgICAgICAgICAnaScgPT4gJGRhdGFQZXJzZWRpYWFuWydpJ10sCiAgICAgICAgICAnaicgPT4gJGRhdGFQZXJzZWRpYWFuWydqJ10sCiAgICAgICAgICAnajEnID0+ICRkYXRhUGVyc2VkaWFhblsnajEnXSwKICAgICAgICAgICdzYXR1YW4nID0+ICRnZXREYXRhQmFyYW5nWydzYXR1YW4nXSwKICAgICAgICAgICd0YW5nZ2FsJyA9PiAkdGhpcy0+dGFodW5BbmdnYXJhbi4iLTA3LTAxIiwKICAgICAgICAgICdqbnMnID0+ICcxJywKICAgICAgICAgICdqZW5pc19wZXJzZWRpYWFuJyA9PiAnMScsCiAgICAgICAgICAndGFodW5fYW5nZ2FyYW4nID0+ICR0aGlzLT50YWh1bkFuZ2dhcmFuLAogICAgICAgICAgJ2hhcmdhX3NhdHVhbicgPT4gJGFycmF5U2FsZG9Bd2FsWydqdW1sYWhIYXJnYSddIC8gJGFycmF5U2FsZG9Bd2FsWydzYWxkbyddICAsCiAgICAgICAgICAnanVtbGFoJyA9PiAkYXJyYXlTYWxkb0F3YWxbJ3NhbGRvJ10gLAogICAgICAgICAgJ3RvdGFsJyA9PiAkYXJyYXlTYWxkb0F3YWxbJ2p1bWxhaEhhcmdhJ10sCiAgICAgICAgKTsKICAgICAgICAkcXVlcnlJbnNldFNhbGRvQXdhbCA9ICR0aGlzLT5zcWxJbnNlcnQoInNhbGRvX2F3YWwiLCRkYXRhU2FsZG9Bd2FsKTsKICAgICAgICAkdGhpcy0+c3FsUXVlcnkoJHF1ZXJ5SW5zZXRTYWxkb0F3YWwpOwogICAgICAgICRnZXRJZFRyYW5zYWtzaSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCBtYXgoaWQpIGZyb20gc2FsZG9fYXdhbCB3aGVyZSAkdGhpcy0+c3RyaW5nQ29uY2F0U3ViVW5pdCA9ICcka29kZVNLUEQnIGFuZCAkdGhpcy0+c3RyaW5nQ29uY2F0S29kZUJhcmFuZyA9ICcka29kZUJhcmFuZycgYW5kIHRhbmdnYWw9JyIuJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIi0wNy0wMSIuIiciKSk7CiAgICAgICAgJGRhdGFLYXJ0dVBlcnNlZGlhYW4gPSBhcnJheSgKICAgICAgICAgICdjMScgPT4gJGRhdGFQZXJzZWRpYWFuWydjMSddLAogICAgICAgICAgJ2MnID0+ICRkYXRhUGVyc2VkaWFhblsnYyddLAogICAgICAgICAgJ2QnID0+ICRkYXRhUGVyc2VkaWFhblsnZCddLAogICAgICAgICAgJ2UnID0+ICRkYXRhUGVyc2VkaWFhblsnZSddLAogICAgICAgICAgJ2UxJyA9PiAkZGF0YVBlcnNlZGlhYW5bJ2UxJ10sCiAgICAgICAgICAnZicgPT4gJGRhdGFQZXJzZWRpYWFuWydmJ10sCiAgICAgICAgICAnZycgPT4gJGRhdGFQZXJzZWRpYWFuWydnJ10sCiAgICAgICAgICAnaCcgPT4gJGRhdGFQZXJzZWRpYWFuWydoJ10sCiAgICAgICAgICAnaScgPT4gJGRhdGFQZXJzZWRpYWFuWydpJ10sCiAgICAgICAgICAnaicgPT4gJGRhdGFQZXJzZWRpYWFuWydqJ10sCiAgICAgICAgICAnajEnID0+ICRkYXRhUGVyc2VkaWFhblsnajEnXSwKICAgICAgICAgICd0YW5nZ2FsX2J1a3UnID0+ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiItMDctMDEiLAogICAgICAgICAgJ2pucycgPT4gJzEnLAogICAgICAgICAgJ2plbmlzX3BlcnNlZGlhYW4nID0+ICcxJywKICAgICAgICAgICdjYXJhX3Blcm9sZWhhbicgPT4gJzEnLAogICAgICAgICAgJ2hhcmdhX3NhdHVhbicgPT4gJGFycmF5U2FsZG9Bd2FsWydqdW1sYWhIYXJnYSddIC8gJGFycmF5U2FsZG9Bd2FsWydzYWxkbyddLAogICAgICAgICAgJ2p1bWxhaCcgPT4gJGFycmF5U2FsZG9Bd2FsWydzYWxkbyddICwKICAgICAgICAgICd0b3RhbCcgPT4gJGFycmF5U2FsZG9Bd2FsWydqdW1sYWhIYXJnYSddLAogICAgICAgICAgJ3NhdHVhbicgPT4gJGdldERhdGFCYXJhbmdbJ3NhdHVhbiddLAogICAgICAgICAgJ3JlZmlkJyA9PiAkZ2V0SWRUcmFuc2Frc2lbJ21heChpZCknXQogICAgICAgICk7CiAgICAgICAgJHF1ZXJ5S2FydHVQZXJzZWRpYWFuID0gJHRoaXMtPnNxbEluc2VydCgidF9rYXJ0dV9wZXJzZWRpYWFuIiwkZGF0YUthcnR1UGVyc2VkaWFhbik7CiAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCRxdWVyeUthcnR1UGVyc2VkaWFhbik7CiAgICAgIH0KICAgICAgcmV0dXJuICRjZWs7CiAgCX0KICAgIGZ1bmN0aW9uIGNvdW50QW5kQ2xvc2VTZW1lc3RlcjIoJGtvZGVTS1BELCRrb2RlQmFyYW5nKXsKICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCJkZWxldGUgZnJvbSBjb3VudF9kaXN0cmlidXNpX3BlcnNlZGlhYW4gd2hlcmUgJHRoaXMtPnN0cmluZ0NvbmNhdFN1YlVuaXQgPSAnJGtvZGVTS1BEJyBhbmQgJHRoaXMtPnN0cmluZ0NvbmNhdEtvZGVCYXJhbmc9JyRrb2RlQmFyYW5nJyBhbmQgc2VtZXN0ZXIgPSAnMiciKTsKCiAgICAgICRlcnIgPSAiIjsKICAgICAgJGNlayA9ICIiOwogICAgICAkY29udGVudCA9ICIiOwogICAgICAkZmlsdGVyUGVyaW9kZSA9ICcyJzsKICAgICAgJGtvbmRpc2lUYWh1biA9ICIgYW5kIGxlZnQodGFuZ2dhbF9idWt1LDQpID0gJyIuJHRoaXMtPnRhaHVuQW5nZ2FyYW4uIicgIjsKICAgICAgaWYoIWVtcHR5KCRmaWx0ZXJQZXJpb2RlKSl7CiAgICAgICAgICBpZigkZmlsdGVyUGVyaW9kZSA9PSAnMScpewogICAgICAgICAgICAgICRtYXhGaWx0ZXIgPSAkdGhpcy0+dGFodW5BbmdnYXJhbi4iMDYiOwogICAgICAgICAgICAgICRrb25kaXNpUGVyaW9kZSAgPSAiIGFuZCByZXBsYWNlKGxlZnQodGFuZ2dhbF9idWt1LDcpLCctJywnJykgPD0gJyRtYXhGaWx0ZXInICI7CiAgICAgICAgICB9ZWxzZWlmKCRmaWx0ZXJQZXJpb2RlID09ICcyJyl7CiAgICAgICAgICAgICAgJG1pbkZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIwNyI7CiAgICAgICAgICAgICAgJG1heEZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIxMiI7CiAgICAgICAgICAgICAgJGtvbmRpc2lQZXJpb2RlPSAiIGFuZCByZXBsYWNlKGxlZnQodGFuZ2dhbF9idWt1LDcpLCctJywnJykgPj0gJyRtaW5GaWx0ZXInIGFuZCByZXBsYWNlKGxlZnQodGFuZ2dhbF9idWt1LDcpLCctJywnJykgPD0gJyRtYXhGaWx0ZXInIjsKICAgICAgICAgICAgICAka29uZGlzaVNhbGRvQXdhbCA9ICIgYW5kIGlkIG5vdCBpbiAoIHNlbGVjdCBpZCBmcm9tIHRfa2FydHVfcGVyc2VkaWFhbiB3aGVyZSBqbnMgPSAnMScgYW5kIGplbmlzX3BlcnNlZGlhYW4gPSAnMScgYW5kIHRhbmdnYWxfYnVrdSA9ICciLiR0aGlzLT50YWh1bkFuZ2dhcmFuLiItJHRoaXMtPmJ1bGFuVGFuZ2dhbFNhbGRvQXdhbCcpICI7CiAgICAgICAgICB9ZWxzZWlmKCRmaWx0ZXJQZXJpb2RlID09ICczJyl7CiAgICAgICAgICAgICAgJG1heEZpbHRlciA9ICR0aGlzLT50YWh1bkFuZ2dhcmFuLiIxMiI7CiAgICAgICAgICAgICAgJGtvbmRpc2lQZXJpb2RlID0gIiBhbmQgcmVwbGFjZShsZWZ0KHRhbmdnYWxfYnVrdSw3KSwnLScsJycpIDw9ICckbWF4RmlsdGVyJyI7CiAgICAgICAgICAgICAgJGtvbmRpc2lTYWxkb0F3YWwgPSAiIGFuZCBpZCBub3QgaW4gKCBzZWxlY3QgaWQgZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgam5zID0gJzEnIGFuZCBqZW5pc19wZXJzZWRpYWFuID0gJzEnIGFuZCB0YW5nZ2FsX2J1a3UgPSAnIi4kdGhpcy0+dGFodW5BbmdnYXJhbi4iLTA3LTAxJykgIjsKICAgICAgICAgIH0KICAgICAgfQoKICAgICAgICAkZ2V0RGF0YSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlICR0aGlzLT5zdHJpbmdDb25jYXRTdWJVbml0ID0gJyRrb2RlU0tQRCcgYW5kICR0aGlzLT5zdHJpbmdDb25jYXRLb2RlQmFyYW5nPScka29kZUJhcmFuZycgIikpOwogICAgICAgICRkYXRhTG9ja0JhcmFuZyA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAnYzEnID0+ICRnZXREYXRhWydjMSddLAogICAgICAgICAgICAgICAgICAgICAgICAnYycgPT4gJGdldERhdGFbJ2MnXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2QnID0+ICRnZXREYXRhWydkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdlJyA9PiAkZ2V0RGF0YVsnZSddLAogICAgICAgICAgICAgICAgICAgICAgICAnZTEnID0+ICRnZXREYXRhWydlMSddLAogICAgICAgICAgICAgICAgICAgICAgICAnZjEnID0+ICRnZXREYXRhWydmMSddLAogICAgICAgICAgICAgICAgICAgICAgICAnZjInID0+ICRnZXREYXRhWydmMiddLAogICAgICAgICAgICAgICAgICAgICAgICAnZicgPT4gJGdldERhdGFbJ2YnXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2cnID0+ICRnZXREYXRhWydnJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdoJyA9PiAkZ2V0RGF0YVsnaCddLAogICAgICAgICAgICAgICAgICAgICAgICAnaScgPT4gJGdldERhdGFbJ2knXSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2onID0+ICRnZXREYXRhWydqJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICdqMScgPT4gJGdldERhdGFbJ2oxJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICd0YWh1bicgPT4gJHRoaXMtPnRhaHVuQW5nZ2FyYW4sCiAgICAgICAgICAgICAgICAgICAgICAgICdzZW1lc3RlcicgPT4gMiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgJGluc2VydExvY2tCYXJhbmcgPSAkdGhpcy0+c3FsSW5zZXJ0KCJ0X3BlcnNlZGlhYW5fbG9ja19iYXJhbmciLCRkYXRhTG9ja0JhcmFuZyk7CiAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgkaW5zZXJ0TG9ja0JhcmFuZyk7CgogICAgICAgICAgICAkaWRMb2NrID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0IG1heChpZCkgZnJvbSB0X3BlcnNlZGlhYW5fbG9ja19iYXJhbmcgd2hlcmUgYzE9JyIuJGdldERhdGFbJ2MxJ10uIicgYW5kIGM9JyIuJGdldERhdGFbJ2MnXS4iJyBhbmQgZD0nIi4kZ2V0RGF0YVsnZCddLiInIGFuZCBlPSciLiRnZXREYXRhWydlJ10uIicgYW5kIGUxPSciLiRnZXREYXRhWydlMSddLiInICBhbmQgZj0nIi4kZ2V0RGF0YVsnZiddLiInIGFuZCBnPSciLiRnZXREYXRhWydnJ10uIicgYW5kIGg9JyIuJGdldERhdGFbJ2gnXS4iJyBhbmQgaT0nIi4kZ2V0RGF0YVsnaSddLiInIGFuZCBqPSciLiRnZXREYXRhWydqJ10uIicgYW5kIGoxPSciLiRnZXREYXRhWydqMSddLiInIGFuZCB0YWh1biA9ICciLiR0aGlzLT50YWh1bkFuZ2dhcmFuLiInIGFuZCBzZW1lc3RlciA9ICciLiRmaWx0ZXJQZXJpb2RlLiInICIpKTsKICAgICAgICAgICAgJGlkTG9jayA9ICRpZExvY2tbJ21heChpZCknXTsKCgogICAgICAgICAgICAkZ2V0RGF0YVRhbWJhaCA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgYzE9JyIuJGdldERhdGFbJ2MxJ10uIicgYW5kIGM9JyIuJGdldERhdGFbJ2MnXS4iJyBhbmQgZD0nIi4kZ2V0RGF0YVsnZCddLiInIGFuZCBlPSciLiRnZXREYXRhWydlJ10uIicgYW5kIGUxPSciLiRnZXREYXRhWydlMSddLiInICBhbmQgZj0nIi4kZ2V0RGF0YVsnZiddLiInIGFuZCBnPSciLiRnZXREYXRhWydnJ10uIicgYW5kIGg9JyIuJGdldERhdGFbJ2gnXS4iJyBhbmQgaT0nIi4kZ2V0RGF0YVsnaSddLiInIGFuZCBqPSciLiRnZXREYXRhWydqJ10uIicgYW5kIGoxPSciLiRnZXREYXRhWydqMSddLiInIGFuZCBqZW5pc19wZXJzZWRpYWFuID0gJzEnICRrb25kaXNpVGFodW4gJGtvbmRpc2lQZXJpb2RlICRrb25kaXNpU2FsZG9Bd2FsIG9yZGVyIGJ5IHRhbmdnYWxfYnVrdSBhc2MiKTsKICAgICAgICAgICAgd2hpbGUgKCRkYXRhVGFtYmFoID0gJHRoaXMtPnNxbEFycmF5KCRnZXREYXRhVGFtYmFoKSkgewogICAgICAgICAgICAgIGlmKCRkYXRhVGFtYmFoWydqbnMnXSA9PSAnMycpewogICAgICAgICAgICAgICRnZXREYXRhRGV0YWlsRGlzdHJpYnVzaSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gZGV0YWlsX3JpbmNpYW5fZGlzdHJpYnVzaSB3aGVyZSAgaWQgPSAnIi4kZGF0YVRhbWJhaFsncmVmaWQnXS4iJyIpKTsKICAgICAgICAgICAgICAkZ2V0RGF0YVJpbmNpYW5EaXN0cmlidXNpID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSByaW5jaWFuX2Rpc3RyaWJ1c2kgd2hlcmUgIGlkID0gJyIuJGdldERhdGFEZXRhaWxEaXN0cmlidXNpWydpZF9yaW5jaWFuX2Rpc3RyaWJ1c2knXS4iJyIpKTsKICAgICAgICAgICAgICAkZGF0YUNvdW50RGlzdHJpYnVzaSA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICdpZF9sb2NrX2JhcmFuZycgPT4gJGlkTG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgICAnYzEnID0+ICRnZXREYXRhWydjMSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdjJyA9PiAkZ2V0RGF0YVsnYyddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdkJyA9PiAkZ2V0RGF0YVsnZCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdlJyA9PiAkZ2V0RGF0YVsnZSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdlMScgPT4gJGdldERhdGFbJ2UxJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2YnID0+ICRnZXREYXRhWydmJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2cnID0+ICRnZXREYXRhWydnJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2gnID0+ICRnZXREYXRhWydoJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2knID0+ICRnZXREYXRhWydpJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2onID0+ICRnZXREYXRhWydqJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2oxJyA9PiAkZ2V0RGF0YVsnajEnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfZGlzdHJpYnVzaScgPT4gJGdldERhdGFSaW5jaWFuRGlzdHJpYnVzaVsnaWRfZGlzdHJpYnVzaSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICdpZF9yaW5jaWFuX2Rpc3RyaWJ1c2knID0+ICRnZXREYXRhRGV0YWlsRGlzdHJpYnVzaVsnaWRfcmluY2lhbl9kaXN0cmlidXNpJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbWVzdGVyJyA9PiAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICdub21vcicgPT4gJGRhdGFUYW1iYWhbJ25vbW9yJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbicgPT4gJGRhdGFUYW1iYWhbJ2lkJ10KCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAkdGhpcy0+c3FsUXVlcnkoJHRoaXMtPnNxbEluc2VydCgnY291bnRfZGlzdHJpYnVzaV9wZXJzZWRpYWFuJywkZGF0YUNvdW50RGlzdHJpYnVzaSkpOwogICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGRhdGFMb2NrVGFtYmFoID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFuZ2dhbCcgPT4gJGRhdGFUYW1iYWhbJ3RhbmdnYWxfYnVrdSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkX3Rfa2FydHVfcGVyc2VkaWFhbicgPT4gJGRhdGFUYW1iYWhbJ2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnanVtbGFoJyA9PiAkZGF0YVRhbWJhaFsnanVtbGFoJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFyZ2EnID0+ICRkYXRhVGFtYmFoWydoYXJnYV9zYXR1YW4nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzaXNhJyA9PiAkZGF0YVRhbWJhaFsnanVtbGFoJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfbG9jaycgPT4gJGlkTG9jaywKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAkdGhpcy0+c3FsUXVlcnkoJHRoaXMtPnNxbEluc2VydCgnbG9ja19iYXJhbmdfdGFtYmFoJywkZGF0YUxvY2tUYW1iYWgpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGdldERhdGFLdXJhbmcgPSAkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gdF9rYXJ0dV9wZXJzZWRpYWFuIHdoZXJlIGMxPSciLiRnZXREYXRhWydjMSddLiInIGFuZCBjPSciLiRnZXREYXRhWydjJ10uIicgYW5kIGU9JyIuJGdldERhdGFbJ2UnXS4iJyBhbmQgZTE9JyIuJGdldERhdGFbJ2UxJ10uIicgYW5kIGQ9JyIuJGdldERhdGFbJ2QnXS4iJyAgYW5kIGY9JyIuJGdldERhdGFbJ2YnXS4iJyBhbmQgZz0nIi4kZ2V0RGF0YVsnZyddLiInIGFuZCBoPSciLiRnZXREYXRhWydoJ10uIicgYW5kIGk9JyIuJGdldERhdGFbJ2knXS4iJyBhbmQgaj0nIi4kZ2V0RGF0YVsnaiddLiInIGFuZCBqMT0nIi4kZ2V0RGF0YVsnajEnXS4iJyBhbmQgamVuaXNfcGVyc2VkaWFhbiA9ICcyJyAka29uZGlzaVRhaHVuICRrb25kaXNpUGVyaW9kZSAka29uZGlzaVNhbGRvQXdhbCBvcmRlciBieSB0YW5nZ2FsX2J1a3UgYXNjIik7CiAgICAgICAgICAgIHdoaWxlICgkZGF0YUt1cmFuZyA9ICR0aGlzLT5zcWxBcnJheSgkZ2V0RGF0YUt1cmFuZykpIHsKICAgICAgICAgICAgICAgICRhcnJheVBlcm9sZWhhbiA9IGFycmF5KCk7CiAgICAgICAgICAgICAgICAkanVtbGFoQmFyYW5nS3VyYW5nID0gJGRhdGFLdXJhbmdbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgJGdldERhdGFQZW5lcmltYWFuID0gJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGxvY2tfYmFyYW5nX3RhbWJhaCB3aGVyZSBpZF9sb2NrID0gJyIuJGlkTG9jay4iJyBhbmQgc2lzYSAhPScwJyIpOwogICAgICAgICAgICAgICAgd2hpbGUgKCRkYXRhUGVuZXJpbWFhbiA9ICR0aGlzLT5zcWxBcnJheSgkZ2V0RGF0YVBlbmVyaW1hYW4pKSB7CiAgICAgICAgICAgICAgICAgICAgaWYoJGp1bWxhaEJhcmFuZ0t1cmFuZyAhPSAwKXsKICAgICAgICAgICAgICAgICAgICAgICRnZXRLYXJ0dVBlcnNlZGlhYW4gPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIHRfa2FydHVfcGVyc2VkaWFhbiB3aGVyZSBpZCA9ICciLiRkYXRhUGVuZXJpbWFhblsnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJ10uIiciKSk7CiAgICAgICAgICAgICAgICAgICAgICBpZigkZ2V0S2FydHVQZXJzZWRpYWFuWydqbnMnXSA9PSAnMycpewogICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmKGludHZhbCgkZ2V0S2FydHVQZXJzZWRpYWFuWydoYXJnYV9zYXR1YW4nXSkgPT0gMCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkdGhpcy0+c3FsTnVtUm93KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBjb3VudF9kaXN0cmlidXNpX3BlcnNlZGlhYW4gd2hlcmUgbm9tb3IgPSAnIi4kZ2V0S2FydHVQZXJzZWRpYWFuWydub21vciddLiInIGFuZCBzZW1lc3RlciA9ICcyJyBhbmQgdGFtYmFoYW5faGFyZ2EgIT0nJyIpKSAhPSAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdldERhdGFDb3VudERpc3RyaWJ1c2kgPSAkdGhpcy0+c3FsQXJyYXkoJHRoaXMtPnNxbFF1ZXJ5KCJzZWxlY3QgKiBmcm9tIGNvdW50X2Rpc3RyaWJ1c2lfcGVyc2VkaWFhbiB3aGVyZSBub21vciA9ICciLiRnZXRLYXJ0dVBlcnNlZGlhYW5bJ25vbW9yJ10uIicgYW5kIHNlbWVzdGVyID0gJzInIGFuZCB0YW1iYWhhbl9oYXJnYSAhPScnIikpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaGFyZ2FTYXR1YW5QZW5lcmltYWFuID0gJGdldERhdGFDb3VudERpc3RyaWJ1c2lbJ3RhbWJhaGFuX2hhcmdhJ10gLyAkZ2V0S2FydHVQZXJzZWRpYWFuWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGFVcGRhdGVEaXN0cmlidXNpS2FydHUgPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFyZ2Ffc2F0dWFuJyA9PiAkaGFyZ2FTYXR1YW5QZW5lcmltYWFuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3RhbCcgPT4gJGdldERhdGFDb3VudERpc3RyaWJ1c2lbJ3RhbWJhaGFuX2hhcmdhJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgkdGhpcy0+c3FsVXBkYXRlKCJ0X2thcnR1X3BlcnNlZGlhYW4iLCRkYXRhVXBkYXRlRGlzdHJpYnVzaUthcnR1LCJpZCA9ICciLiRkYXRhUGVuZXJpbWFhblsnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJ10uIiciKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgiZGVsZXRlIGZyb20gY291bnRfZGlzdHJpYnVzaV9wZXJzZWRpYWFuIHdoZXJlIG5vbW9yPSciLiRnZXRLYXJ0dVBlcnNlZGlhYW5bJ25vbW9yJ10uIiciKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9CiAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgJGhhcmdhU2F0dWFuUGVuZXJpbWFhbiA9ICRkYXRhUGVuZXJpbWFhblsnaGFyZ2EnXTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGlmKCRqdW1sYWhCYXJhbmdLdXJhbmcgPiAkZGF0YVBlbmVyaW1hYW5bJ3Npc2EnXSApewogICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgidXBkYXRlIGxvY2tfYmFyYW5nX3RhbWJhaCBzZXQgc2lzYSA9IHNpc2EgLSAiLiRkYXRhUGVuZXJpbWFhblsnc2lzYSddLiIgd2hlcmUgaWQgPSAnIi4kZGF0YVBlbmVyaW1hYW5bJ2lkJ10uIiciKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAkYXJyYXlQZXJvbGVoYW5bXSA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkUGVuZXJpbWFhbicgPT4gJGRhdGFQZW5lcmltYWFuWydpZF90X2thcnR1X3BlcnNlZGlhYW4nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRkYXRhUGVuZXJpbWFhblsnc2lzYSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhcmdhJyA9PiAkaGFyZ2FTYXR1YW5QZW5lcmltYWFuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvdGFsJyA9PiAkZGF0YVBlbmVyaW1hYW5bJ3Npc2EnXSAqICRoYXJnYVNhdHVhblBlbmVyaW1hYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAkanVtbGFoQmFyYW5nS3VyYW5nIC09ICRkYXRhUGVuZXJpbWFhblsnc2lzYSddOwogICAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnNxbFF1ZXJ5KCJ1cGRhdGUgbG9ja19iYXJhbmdfdGFtYmFoIHNldCBzaXNhID0gc2lzYSAtICRqdW1sYWhCYXJhbmdLdXJhbmcgd2hlcmUgaWQgPSAnIi4kZGF0YVBlbmVyaW1hYW5bJ2lkJ10uIiciKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAkYXJyYXlQZXJvbGVoYW5bXSA9IGFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkUGVuZXJpbWFhbicgPT4gJGRhdGFQZW5lcmltYWFuWydpZF90X2thcnR1X3BlcnNlZGlhYW4nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRqdW1sYWhCYXJhbmdLdXJhbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFyZ2EnID0+ICRoYXJnYVNhdHVhblBlbmVyaW1hYW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndG90YWwnID0+ICRqdW1sYWhCYXJhbmdLdXJhbmcgKiAkaGFyZ2FTYXR1YW5QZW5lcmltYWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgJGp1bWxhaEJhcmFuZ0t1cmFuZyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGVuY29kaW5nID0ganNvbl9lbmNvZGUoJGFycmF5UGVyb2xlaGFuKTsKICAgICAgICAgICAgICAgICRkZWNvZGluZyA9IGpzb25fZGVjb2RlKCRlbmNvZGluZyk7CiAgICAgICAgICAgICAgICAkaGFyZ2FQZXJvbGVoYW49ICIiOwogICAgICAgICAgICAgICAgZm9yICgkaT0wOyAkaSA8IHNpemVvZigkZGVjb2RpbmcpIDsgJGkrKykgewogICAgICAgICAgICAgICAgICAgICRoYXJnYVBlcm9sZWhhbiArPSAkZGVjb2RpbmdbJGldLT50b3RhbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKCRkYXRhS3VyYW5nWydqbnMnXSA9PSAiNyIpewogICAgICAgICAgICAgICAgICAvL2h1YmxhCiAgICAgICAgICAgICAgICAgICRnZXREYXRhRGV0YWlsRGlzdHJpYnVzaSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gZGV0YWlsX3JpbmNpYW5fZGlzdHJpYnVzaSB3aGVyZSAgaWQgPSAnIi4kZGF0YUt1cmFuZ1sncmVmaWQnXS4iJyIpKTsKICAgICAgICAgICAgICAgICAgJGdldERhdGFSaW5jaWFuRGlzdHJpYnVzaSA9ICR0aGlzLT5zcWxBcnJheSgkdGhpcy0+c3FsUXVlcnkoInNlbGVjdCAqIGZyb20gcmluY2lhbl9kaXN0cmlidXNpIHdoZXJlICBpZCA9ICciLiRnZXREYXRhRGV0YWlsRGlzdHJpYnVzaVsnaWRfcmluY2lhbl9kaXN0cmlidXNpJ10uIiciKSk7CiAgICAgICAgICAgICAgICAgICRkYXRhQ291bnREaXN0cmlidXNpID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZF9sb2NrX2JhcmFuZycgPT4gJGlkTG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2MxJyA9PiAkZ2V0RGF0YVsnYzEnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2MnID0+ICRnZXREYXRhWydjJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkJyA9PiAkZ2V0RGF0YVsnZCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZScgPT4gJGdldERhdGFbJ2UnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2UxJyA9PiAkZ2V0RGF0YVsnZTEnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2YnID0+ICRnZXREYXRhWydmJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnJyA9PiAkZ2V0RGF0YVsnZyddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaCcgPT4gJGdldERhdGFbJ2gnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2knID0+ICRnZXREYXRhWydpJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdqJyA9PiAkZ2V0RGF0YVsnaiddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnajEnID0+ICRnZXREYXRhWydqMSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfZGlzdHJpYnVzaScgPT4gJGdldERhdGFSaW5jaWFuRGlzdHJpYnVzaVsnaWRfZGlzdHJpYnVzaSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfcmluY2lhbl9kaXN0cmlidXNpJyA9PiAkZ2V0RGF0YURldGFpbERpc3RyaWJ1c2lbJ2lkX3JpbmNpYW5fZGlzdHJpYnVzaSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VtZXN0ZXInID0+IDIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdub21vcicgPT4gJGRhdGFLdXJhbmdbJ25vbW9yJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YW1iYWhhbl9oYXJnYScgPT4gJGhhcmdhUGVyb2xlaGFuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnanNvbl9hcnJheScgPT4gJGVuY29kaW5nCiAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgkdGhpcy0+c3FsSW5zZXJ0KCdjb3VudF9kaXN0cmlidXNpX3BlcnNlZGlhYW4nLCRkYXRhQ291bnREaXN0cmlidXNpKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkZGF0YUxvY2tLdXJhbmcgPSBhcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YW5nZ2FsJyA9PiAkZGF0YUt1cmFuZ1sndGFuZ2dhbF9idWt1J10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfdF9rYXJ0dV9wZXJzZWRpYWFuJyA9PiAkZGF0YUt1cmFuZ1snaWQnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdqdW1sYWgnID0+ICRkYXRhS3VyYW5nWydqdW1sYWgnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFyZ2EnID0+ICRoYXJnYVBlcm9sZWhhbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZF9sb2NrJyA9PiAkaWRMb2NrLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Blcm9sZWhhbicgPT4ganNvbl9lbmNvZGUoJGFycmF5UGVyb2xlaGFuKQoKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAkdGhpcy0+c3FsUXVlcnkoJHRoaXMtPnNxbEluc2VydCgnbG9ja19iYXJhbmdfa3VyYW5nJywkZGF0YUxvY2tLdXJhbmcpKTsKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICRnZXREYXRhSGlzdG9yaSA9ICR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSB0X2thcnR1X3BlcnNlZGlhYW4gd2hlcmUgYzE9JyIuJGdldERhdGFbJ2MxJ10uIicgYW5kIGM9JyIuJGdldERhdGFbJ2MnXS4iJyBhbmQgZD0nIi4kZ2V0RGF0YVsnZCddLiInIGFuZCBlPSciLiRnZXREYXRhWydlJ10uIicgYW5kIGUxPSciLiRnZXREYXRhWydlMSddLiInICBhbmQgZj0nIi4kZ2V0RGF0YVsnZiddLiInIGFuZCBnPSciLiRnZXREYXRhWydnJ10uIicgYW5kIGg9JyIuJGdldERhdGFbJ2gnXS4iJyBhbmQgaT0nIi4kZ2V0RGF0YVsnaSddLiInIGFuZCBqPSciLiRnZXREYXRhWydqJ10uIicgYW5kIGoxPSciLiRnZXREYXRhWydqMSddLiInICAka29uZGlzaVRhaHVuICRrb25kaXNpUGVyaW9kZSAka29uZGlzaVNhbGRvQXdhbCBvcmRlciBieSB0YW5nZ2FsX2J1a3UsamVuaXNfcGVyc2VkaWFhbiBhc2MiKTsKICAgICAgICAgICAgd2hpbGUgKCRkYXRhSGlzdG9yaSA9ICR0aGlzLT5zcWxBcnJheSgkZ2V0RGF0YUhpc3RvcmkpKSB7CiAgICAgICAgICAgICAgICBpZigkZGF0YUhpc3RvcmlbJ2plbmlzX3BlcnNlZGlhYW4nXSA9PSAxKXsKICAgICAgICAgICAgICAgICAgaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnMScpewogICAgICAgICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAgICAgJGJhcmFuZ0tlbHVhciA9IDA7CiAgICAgICAgICAgICAgICAgICAgJHVyYWlhblBlcnNlZGlhYW4gPSAiU0FMRE8gQVdBTCI7CiAgICAgICAgICAgICAgICAgIH1lbHNlaWYoJGRhdGFIaXN0b3JpWydqbnMnXSA9PSAnMicpewogICAgICAgICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAgICAgJGJhcmFuZ0tlbHVhciA9IDA7CiAgICAgICAgICAgICAgICAgICAgaWYoJGRhdGFIaXN0b3JpWydjYXJhX3Blcm9sZWhhbiddID09ICcyJyl7CiAgICAgICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJQRU5FUklNQUFOIFBFTUJFTElBTiI7CiAgICAgICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2NhcmFfcGVyb2xlaGFuJ10gPT0gJzMnKXsKICAgICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkVSSU1BQU4gSElCQUgiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICc0Jyl7CiAgICAgICAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJDRUsgRklTSUsgVEFNQkFIIjsKICAgICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICczJyl7CiAgICAgICAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gMDsKICAgICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJQRU5FUklNQUFOIERJU1RSSUJVU0kiOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICRoYXJnYVNhdHVhbiA9ICRkYXRhSGlzdG9yaVsnaGFyZ2Ffc2F0dWFuJ107CiAgICAgICAgICAgICAgICAgICR0b3RhbEhhcmdhID0gJGhhcmdhU2F0dWFuICogJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgJHNhbGRvQmFyYW5nICs9ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAgICR0b3RhbFNhbGRvICs9ICR0b3RhbEhhcmdhOwoKICAgICAgICAgICAgICAgICAgJGdldElkRGV0YWlsID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBsb2NrX2JhcmFuZ190YW1iYWggd2hlcmUgaWRfbG9jayA9ICckaWRMb2NrJyBhbmQgaWRfdF9rYXJ0dV9wZXJzZWRpYWFuID0gJyIuJGRhdGFIaXN0b3JpWydpZCddLiInIikpOwogICAgICAgICAgICAgICAgICAkaWREZXRhaWwgPSAkZ2V0SWREZXRhaWxbJ2lkJ107CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICc2Jyl7CiAgICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJQRU5HRUxVQVJBTiI7CiAgICAgICAgICAgICAgICAgICAgfWVsc2VpZigkZGF0YUhpc3RvcmlbJ2pucyddID09ICc1Jyl7CiAgICAgICAgICAgICAgICAgICAgICAkYmFyYW5nS2VsdWFyID0gJGRhdGFIaXN0b3JpWydqdW1sYWgnXTsKICAgICAgICAgICAgICAgICAgICAgICRiYXJhbmdNYXN1ayA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAkdXJhaWFuUGVyc2VkaWFhbiA9ICJDRUsgRklTSUsgS1VSQU5HIjsKICAgICAgICAgICAgICAgICAgICB9ZWxzZWlmKCRkYXRhSGlzdG9yaVsnam5zJ10gPT0gJzcnKXsKICAgICAgICAgICAgICAgICAgICAgICRiYXJhbmdLZWx1YXIgPSAkZGF0YUhpc3RvcmlbJ2p1bWxhaCddOwogICAgICAgICAgICAgICAgICAgICAgJGJhcmFuZ01hc3VrID0gMDsKICAgICAgICAgICAgICAgICAgICAgICR1cmFpYW5QZXJzZWRpYWFuID0gIlBFTkdFTFVBUkFOIERJU1RSSUJVU0kiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkaGFyZ2FTYXR1YW4gPSAiIjsKICAgICAgICAgICAgICAgICAgJHNhbGRvQmFyYW5nIC09ICRkYXRhSGlzdG9yaVsnanVtbGFoJ107CiAgICAgICAgICAgICAgICAgICRnZXRUb3RhbEhhcmdhID0gJHRoaXMtPnNxbEFycmF5KCR0aGlzLT5zcWxRdWVyeSgic2VsZWN0ICogZnJvbSBsb2NrX2JhcmFuZ19rdXJhbmcgd2hlcmUgaWRfbG9jayA9ICckaWRMb2NrJyBhbmQgaWRfdF9rYXJ0dV9wZXJzZWRpYWFuID0gJyIuJGRhdGFIaXN0b3JpWydpZCddLiInIikpOwogICAgICAgICAgICAgICAgICAkdG90YWxIYXJnYSA9ICRnZXRUb3RhbEhhcmdhWydoYXJnYSddOwogICAgICAgICAgICAgICAgICAkdG90YWxTYWxkbyAtPSAkdG90YWxIYXJnYTsKICAgICAgICAgICAgICAgICAgJGlkRGV0YWlsID0gJGdldFRvdGFsSGFyZ2FbJ2lkJ107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkZGF0YVJpbmNpYW5Mb2NrID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWRfbG9jaycgPT4gJGlkTG9jaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YW5nZ2FsJyA9PiAkZGF0YUhpc3RvcmlbJ3RhbmdnYWxfYnVrdSddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VyYWlhbicgPT4gJHVyYWlhblBlcnNlZGlhYW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWFzdWsnID0+ICRiYXJhbmdNYXN1aywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZWx1YXInID0+ICRiYXJhbmdLZWx1YXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2FsZG9fYmFyYW5nJyA9PiAkc2FsZG9CYXJhbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndG90YWwnID0+ICR0b3RhbEhhcmdhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NhbGRvJyA9PiAkdG90YWxTYWxkbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJyA9PiAkZGF0YUhpc3RvcmlbJ2plbmlzX3BlcnNlZGlhYW4nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZF90X2thcnR1X3BlcnNlZGlhYW4nID0+ICRkYXRhSGlzdG9yaVsnaWQnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZF9kZXRhaWwnID0+ICRpZERldGFpbCwKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAkdGhpcy0+c3FsUXVlcnkoJHRoaXMtPnNxbEluc2VydCgncmluY2lhbl9sb2NrX2JhcmFuZycsJGRhdGFSaW5jaWFuTG9jaykpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICR0aGlzLT5zcWxRdWVyeSgidXBkYXRlIHRfcGVyc2VkaWFhbl9sb2NrX2JhcmFuZyBzZXQgaGFyZ2EgPSAnJHRvdGFsU2FsZG8nLCBzYWxkb19iYXJhbmcgPSAnJHNhbGRvQmFyYW5nJyB3aGVyZSBpZCA9ICckaWRMb2NrJyIpOwogICAgICAgIC8vIHJldHVybiBhcnJheSgKICAgICAgICAvLyAgICdpZExvY2snID0+ICRpZExvY2ssCiAgICAgICAgLy8gICAnanVtbGFoSGFyZ2EnID0+ICR0b3RhbFNhbGRvLAogICAgICAgIC8vICAgJ3NhbGRvJyA9PiAkc2FsZG9CYXJhbmcsCiAgICAgICAgLy8gKTsKICAgICAgICByZXR1cm4gJGluc2VydExvY2tCYXJhbmc7CiAgICB9Cgp9CgokY2xvc2luZ1BlcnNlZGlhYW4gPSBuZXcgY2xvc2luZ1BlcnNlZGlhYW5PYmooKTsKJGNsb3NpbmdQZXJzZWRpYWFuLT51c2VybmFtZSA9ICRfQ09PS0lFWydjb0lEJ107CiRkYXRhUGVuZ2F0dXJhbiA9ICRjbG9zaW5nUGVyc2VkaWFhbi0+Z2V0U2V0dGluZ1BlcnNlZGlhYW4oKTsKJGNsb3NpbmdQZXJzZWRpYWFuLT50YWh1bkFuZ2dhcmFuID0gJGRhdGFQZW5nYXR1cmFuWyd0YWh1biddOwoKCj8+Cg==",
    "size": "202315"
}