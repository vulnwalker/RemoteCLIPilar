{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/CachedObjectStorage\/SQLite3.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKgogKiBQSFBFeGNlbF9DYWNoZWRPYmplY3RTdG9yYWdlX1NRTGl0ZTMKICoKICogQ29weXJpZ2h0IChjKSAyMDA2IC0gMjAxNSBQSFBFeGNlbAogKgogKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yCiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyCiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgogKgogKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSBHTlUKICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEgIFVTQQogKgogKiBAY2F0ZWdvcnkgICBQSFBFeGNlbAogKiBAcGFja2FnZSAgICBQSFBFeGNlbF9DYWNoZWRPYmplY3RTdG9yYWdlCiAqIEBjb3B5cmlnaHQgIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwgKGh0dHA6Ly93d3cuY29kZXBsZXguY29tL1BIUEV4Y2VsKQogKiBAbGljZW5zZSAgICBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2xncGwtMi4xLnR4dCAgICBMR1BMCiAqIEB2ZXJzaW9uICAgICMjVkVSU0lPTiMjLCAjI0RBVEUjIwogKi8KY2xhc3MgUEhQRXhjZWxfQ2FjaGVkT2JqZWN0U3RvcmFnZV9TUUxpdGUzIGV4dGVuZHMgUEhQRXhjZWxfQ2FjaGVkT2JqZWN0U3RvcmFnZV9DYWNoZUJhc2UgaW1wbGVtZW50cyBQSFBFeGNlbF9DYWNoZWRPYmplY3RTdG9yYWdlX0lDYWNoZQp7CiAgICAvKioKICAgICAqIERhdGFiYXNlIHRhYmxlIG5hbWUKICAgICAqCiAgICAgKiBAdmFyIHN0cmluZwogICAgICovCiAgICBwcml2YXRlICRUYWJsZU5hbWUgPSBudWxsOwoKICAgIC8qKgogICAgICogRGF0YWJhc2UgaGFuZGxlCiAgICAgKgogICAgICogQHZhciByZXNvdXJjZQogICAgICovCiAgICBwcml2YXRlICREQkhhbmRsZSA9IG51bGw7CgogICAgLyoqCiAgICAgKiBQcmVwYXJlZCBzdGF0ZW1lbnQgZm9yIGEgU1FMaXRlMyBzZWxlY3QgcXVlcnkKICAgICAqCiAgICAgKiBAdmFyIFNRTGl0ZTNTdG10CiAgICAgKi8KICAgIHByaXZhdGUgJHNlbGVjdFF1ZXJ5OwoKICAgIC8qKgogICAgICogUHJlcGFyZWQgc3RhdGVtZW50IGZvciBhIFNRTGl0ZTMgaW5zZXJ0IHF1ZXJ5CiAgICAgKgogICAgICogQHZhciBTUUxpdGUzU3RtdAogICAgICovCiAgICBwcml2YXRlICRpbnNlcnRRdWVyeTsKCiAgICAvKioKICAgICAqIFByZXBhcmVkIHN0YXRlbWVudCBmb3IgYSBTUUxpdGUzIHVwZGF0ZSBxdWVyeQogICAgICoKICAgICAqIEB2YXIgU1FMaXRlM1N0bXQKICAgICAqLwogICAgcHJpdmF0ZSAkdXBkYXRlUXVlcnk7CgogICAgLyoqCiAgICAgKiBQcmVwYXJlZCBzdGF0ZW1lbnQgZm9yIGEgU1FMaXRlMyBkZWxldGUgcXVlcnkKICAgICAqCiAgICAgKiBAdmFyIFNRTGl0ZTNTdG10CiAgICAgKi8KICAgIHByaXZhdGUgJGRlbGV0ZVF1ZXJ5OwoKICAgIC8qKgogICAgICogU3RvcmUgY2VsbCBkYXRhIGluIGNhY2hlIGZvciB0aGUgY3VycmVudCBjZWxsIG9iamVjdCBpZiBpdCdzICJkaXJ0eSIsCiAgICAgKiAgICAgYW5kIHRoZSAnbnVsbGlmeScgdGhlIGN1cnJlbnQgY2VsbCBvYmplY3QKICAgICAqCiAgICAgKiBAcmV0dXJuICAgIHZvaWQKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfRXhjZXB0aW9uCiAgICAgKi8KICAgIHByb3RlY3RlZCBmdW5jdGlvbiBzdG9yZURhdGEoKQogICAgewogICAgICAgIGlmICgkdGhpcy0+Y3VycmVudENlbGxJc0RpcnR5ICYmICFlbXB0eSgkdGhpcy0+Y3VycmVudE9iamVjdElEKSkgewogICAgICAgICAgICAkdGhpcy0+Y3VycmVudE9iamVjdC0+ZGV0YWNoKCk7CgogICAgICAgICAgICAkdGhpcy0+aW5zZXJ0UXVlcnktPmJpbmRWYWx1ZSgnaWQnLCAkdGhpcy0+Y3VycmVudE9iamVjdElELCBTUUxJVEUzX1RFWFQpOwogICAgICAgICAgICAkdGhpcy0+aW5zZXJ0UXVlcnktPmJpbmRWYWx1ZSgnZGF0YScsIHNlcmlhbGl6ZSgkdGhpcy0+Y3VycmVudE9iamVjdCksIFNRTElURTNfQkxPQik7CiAgICAgICAgICAgICRyZXN1bHQgPSAkdGhpcy0+aW5zZXJ0UXVlcnktPmV4ZWN1dGUoKTsKICAgICAgICAgICAgaWYgKCRyZXN1bHQgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfRXhjZXB0aW9uKCR0aGlzLT5EQkhhbmRsZS0+bGFzdEVycm9yTXNnKCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICR0aGlzLT5jdXJyZW50Q2VsbElzRGlydHkgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgJHRoaXMtPmN1cnJlbnRPYmplY3RJRCA9ICR0aGlzLT5jdXJyZW50T2JqZWN0ID0gbnVsbDsKICAgIH0KCiAgICAvKioKICAgICAqIEFkZCBvciBVcGRhdGUgYSBjZWxsIGluIGNhY2hlIGlkZW50aWZpZWQgYnkgY29vcmRpbmF0ZSBhZGRyZXNzCiAgICAgKgogICAgICogQHBhcmFtICAgIHN0cmluZyAgICAgICAgICAgICRwQ29vcmQgICAgICAgIENvb3JkaW5hdGUgYWRkcmVzcyBvZiB0aGUgY2VsbCB0byB1cGRhdGUKICAgICAqIEBwYXJhbSAgICBQSFBFeGNlbF9DZWxsICAgICRjZWxsICAgICAgICBDZWxsIHRvIHVwZGF0ZQogICAgICogQHJldHVybiAgICBQSFBFeGNlbF9DZWxsCiAgICAgKiBAdGhyb3dzICAgIFBIUEV4Y2VsX0V4Y2VwdGlvbgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gYWRkQ2FjaGVEYXRhKCRwQ29vcmQsIFBIUEV4Y2VsX0NlbGwgJGNlbGwpCiAgICB7CiAgICAgICAgaWYgKCgkcENvb3JkICE9PSAkdGhpcy0+Y3VycmVudE9iamVjdElEKSAmJiAoJHRoaXMtPmN1cnJlbnRPYmplY3RJRCAhPT0gbnVsbCkpIHsKICAgICAgICAgICAgJHRoaXMtPnN0b3JlRGF0YSgpOwogICAgICAgIH0KCiAgICAgICAgJHRoaXMtPmN1cnJlbnRPYmplY3RJRCA9ICRwQ29vcmQ7CiAgICAgICAgJHRoaXMtPmN1cnJlbnRPYmplY3QgPSAkY2VsbDsKICAgICAgICAkdGhpcy0+Y3VycmVudENlbGxJc0RpcnR5ID0gdHJ1ZTsKCiAgICAgICAgcmV0dXJuICRjZWxsOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IGNlbGwgYXQgYSBzcGVjaWZpYyBjb29yZGluYXRlCiAgICAgKgogICAgICogQHBhcmFtICAgICBzdHJpbmcgICAgICAgICAgICAgJHBDb29yZCAgICAgICAgQ29vcmRpbmF0ZSBvZiB0aGUgY2VsbAogICAgICogQHRocm93cyAgICAgUEhQRXhjZWxfRXhjZXB0aW9uCiAgICAgKiBAcmV0dXJuICAgICBQSFBFeGNlbF9DZWxsICAgICBDZWxsIHRoYXQgd2FzIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Q2FjaGVEYXRhKCRwQ29vcmQpCiAgICB7CiAgICAgICAgaWYgKCRwQ29vcmQgPT09ICR0aGlzLT5jdXJyZW50T2JqZWN0SUQpIHsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5jdXJyZW50T2JqZWN0OwogICAgICAgIH0KICAgICAgICAkdGhpcy0+c3RvcmVEYXRhKCk7CgogICAgICAgICR0aGlzLT5zZWxlY3RRdWVyeS0+YmluZFZhbHVlKCdpZCcsICRwQ29vcmQsIFNRTElURTNfVEVYVCk7CiAgICAgICAgJGNlbGxSZXN1bHQgPSAkdGhpcy0+c2VsZWN0UXVlcnktPmV4ZWN1dGUoKTsKICAgICAgICBpZiAoJGNlbGxSZXN1bHQgPT09IGZhbHNlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oJHRoaXMtPkRCSGFuZGxlLT5sYXN0RXJyb3JNc2coKSk7CiAgICAgICAgfQogICAgICAgICRjZWxsRGF0YSA9ICRjZWxsUmVzdWx0LT5mZXRjaEFycmF5KFNRTElURTNfQVNTT0MpOwogICAgICAgIGlmICgkY2VsbERhdGEgPT09IGZhbHNlKSB7CiAgICAgICAgICAgIC8vICAgIFJldHVybiBudWxsIGlmIHJlcXVlc3RlZCBlbnRyeSBkb2Vzbid0IGV4aXN0IGluIGNhY2hlCiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KCiAgICAgICAgLy8gICAgU2V0IGN1cnJlbnQgZW50cnkgdG8gdGhlIHJlcXVlc3RlZCBlbnRyeQogICAgICAgICR0aGlzLT5jdXJyZW50T2JqZWN0SUQgPSAkcENvb3JkOwoKICAgICAgICAkdGhpcy0+Y3VycmVudE9iamVjdCA9IHVuc2VyaWFsaXplKCRjZWxsRGF0YVsndmFsdWUnXSk7CiAgICAgICAgLy8gICAgUmUtYXR0YWNoIHRoaXMgYXMgdGhlIGNlbGwncyBwYXJlbnQKICAgICAgICAkdGhpcy0+Y3VycmVudE9iamVjdC0+YXR0YWNoKCR0aGlzKTsKCiAgICAgICAgLy8gICAgUmV0dXJuIHJlcXVlc3RlZCBlbnRyeQogICAgICAgIHJldHVybiAkdGhpcy0+Y3VycmVudE9iamVjdDsKICAgIH0KCiAgICAvKioKICAgICAqICAgIElzIGEgdmFsdWUgc2V0IGZvciBhbiBpbmRleGVkIGNlbGw\",
    "size": "11230"
}