{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/typeahead\/typeahead.jquery.js",
    "lastUpdate": "2018-03-22+14:24:05.79",
    "contentFile": "LyohCiAqIHR5cGVhaGVhZC5qcyAwLjEwLjUKICogaHR0cHM6Ly9naXRodWIuY29tL3R3aXR0ZXIvdHlwZWFoZWFkLmpzCiAqIENvcHlyaWdodCAyMDEzLTIwMTQgVHdpdHRlciwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzOyBMaWNlbnNlZCBNSVQKICovCgooZnVuY3Rpb24oJCkgewogICAgdmFyIF8gPSBmdW5jdGlvbigpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgaXNNc2llOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID8gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvKG1zaWUgfHJ2OikoXGQrKC5cZCspPykvaSlbMl0gOiBmYWxzZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNCbGFua1N0cmluZzogZnVuY3Rpb24oc3RyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIXN0ciB8fCAvXlxzKiQvLnRlc3Qoc3RyKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXNjYXBlUmVnRXhDaGFyczogZnVuY3Rpb24oc3RyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcLVxbXF1cL1x7XH1cKFwpXCpcK1w\/XC5cXFxeXCRcfF0vZywgIlxcJCYiKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNTdHJpbmc6IGZ1bmN0aW9uKG9iaikgewogICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICJzdHJpbmciOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpc051bWJlcjogZnVuY3Rpb24ob2JqKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gIm51bWJlciI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzQXJyYXk6ICQuaXNBcnJheSwKICAgICAgICAgICAgaXNGdW5jdGlvbjogJC5pc0Z1bmN0aW9uLAogICAgICAgICAgICBpc09iamVjdDogJC5pc1BsYWluT2JqZWN0LAogICAgICAgICAgICBpc1VuZGVmaW5lZDogZnVuY3Rpb24ob2JqKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gInVuZGVmaW5lZCI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRvU3RyOiBmdW5jdGlvbiB0b1N0cihzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gXy5pc1VuZGVmaW5lZChzKSB8fCBzID09PSBudWxsID8gIiIgOiBzICsgIiI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJpbmQ6ICQucHJveHksCiAgICAgICAgICAgIGVhY2g6IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGNiKSB7CiAgICAgICAgICAgICAgICAkLmVhY2goY29sbGVjdGlvbiwgcmV2ZXJzZUFyZ3MpOwogICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV2ZXJzZUFyZ3MoaW5kZXgsIHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKHZhbHVlLCBpbmRleCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1hcDogJC5tYXAsCiAgICAgICAgICAgIGZpbHRlcjogJC5ncmVwLAogICAgICAgICAgICBldmVyeTogZnVuY3Rpb24ob2JqLCB0ZXN0KSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGlmICghb2JqKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQuZWFjaChvYmosIGZ1bmN0aW9uKGtleSwgdmFsKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzdWx0ID0gdGVzdC5jYWxsKG51bGwsIHZhbCwga2V5LCBvYmopKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gISFyZXN1bHQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNvbWU6IGZ1bmN0aW9uKG9iaiwgdGVzdCkgewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlOwogICAgICAgICAgICAgICAgaWYgKCFvYmopIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJC5lYWNoKG9iaiwgZnVuY3Rpb24oa2V5LCB2YWwpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID0gdGVzdC5jYWxsKG51bGwsIHZhbCwga2V5LCBvYmopKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiAhIXJlc3VsdDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWl4aW46ICQuZXh0ZW5kLAogICAgICAgICAgICBnZXRVbmlxdWVJZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgY291bnRlciA9IDA7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50ZXIrKzsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0oKSwKICAgICAgICAgICAgdGVtcGxhdGlmeTogZnVuY3Rpb24gdGVtcGxhdGlmeShvYmopIHsKICAgICAgICAgICAgICAgIHJldHVybiAkLmlzRnVuY3Rpb24ob2JqKSA\\/IGZuLmJpbmQoY29udGV4dCkgOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGZuLmFwcGx5KGNvbnRleHQsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSk7CiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgfSgpOwogICAgdmFyIGhpZ2hsaWdodCA9IGZ1bmN0aW9uKGRvYykgewogICAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgICB2YXIgZGVmYXVsdHMgPSB7CiAgICAgICAgICAgIG5vZGU6IG51bGwsCiAgICAgICAgICAgIHBhdHRlcm46IG51bGwsCiAgICAgICAgICAgIHRhZ05hbWU6ICJzdHJvbmciLAogICAgICAgICAgICBjbGFzc05hbWU6IG51bGwsCiAgICAgICAgICAgIHdvcmRzT25seTogZmFsc2UsCiAgICAgICAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlCiAgICAgICAgfTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gaGlnaHRsaWdodChvKSB7CiAgICAgICAgICAgIHZhciByZWdleDsKICAgICAgICAgICAgbyA9IF8ubWl4aW4oe30sIGRlZmF1bHRzLCBvKTsKICAgICAgICAgICAgaWYgKCFvLm5vZGUgfHwgIW8ucGF0dGVybikgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG8ucGF0dGVybiA9IF8uaXNBcnJheShvLnBhdHRlcm4pID8gby5wYXR0ZXJuIDogWyBvLnBhdHRlcm4gXTsKICAgICAgICAgICAgcmVnZXggPSBnZXRSZWdleChvLnBhdHRlcm4sIG8uY2FzZVNlbnNpdGl2ZSwgby53b3Jkc09ubHkpOwogICAgICAgICAgICB0cmF2ZXJzZShvLm5vZGUsIGhpZ2h0bGlnaHRUZXh0Tm9kZSk7CiAgICAgICAgICAgIGZ1bmN0aW9uIGhpZ2h0bGlnaHRUZXh0Tm9kZSh0ZXh0Tm9kZSkgewogICAgICAgICAgICAgICAgdmFyIG1hdGNoLCBwYXR0ZXJuTm9kZSwgd3JhcHBlck5vZGU7CiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSByZWdleC5leGVjKHRleHROb2RlLmRhdGEpKSB7CiAgICAgICAgICAgICAgICAgICAgd3JhcHBlck5vZGUgPSBkb2MuY3JlYXRlRWxlbWVudChvLnRhZ05hbWUpOwogICAgICAgICAgICAgICAgICAgIG8uY2xhc3NOYW1lICYmICh3cmFwcGVyTm9kZS5jbGFzc05hbWUgPSBvLmNsYXNzTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgcGF0dGVybk5vZGUgPSB0ZXh0Tm9kZS5zcGxpdFRleHQobWF0Y2guaW5kZXgpOwogICAgICAgICAgICAgICAgICAgIHBhdHRlcm5Ob2RlLnNwbGl0VGV4dChtYXRjaFswXS5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgIHdyYXBwZXJOb2RlLmFwcGVuZENoaWxkKHBhdHRlcm5Ob2RlLmNsb25lTm9kZSh0cnVlKSk7CiAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQod3JhcHBlck5vZGUsIHBhdHRlcm5Ob2RlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAhIW1hdGNoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHRyYXZlcnNlKGVsLCBoaWdodGxpZ2h0VGV4dE5vZGUpIHsKICAgICAgICAgICAgICAgIHZhciBjaGlsZE5vZGUsIFRFWFRfTk9ERV9UWVBFID0gMzsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGVsLmNoaWxkTm9kZXNbaV07CiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFX1RZUEUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSBoaWdodGxpZ2h0VGV4dE5vZGUoY2hpbGROb2RlKSA\/IDEgOiAwOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlKGNoaWxkTm9kZSwgaGlnaHRsaWdodFRleHROb2RlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGZ1bmN0aW9uIGdldFJlZ2V4KHBhdHRlcm5zLCBjYXNlU2Vuc2l0aXZlLCB3b3Jkc09ubHkpIHsKICAgICAgICAgICAgdmFyIGVzY2FwZWRQYXR0ZXJucyA9IFtdLCByZWdleFN0cjsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhdHRlcm5zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICBlc2NhcGVkUGF0dGVybnMucHVzaChfLmVzY2FwZVJlZ0V4Q2hhcnMocGF0dGVybnNbaV0pKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZWdleFN0ciA9IHdvcmRzT25seSA\/ICJcXGIoIiArIGVzY2FwZWRQYXR0ZXJucy5qb2luKCJ8IikgKyAiKVxcYiIgOiAiKCIgKyBlc2NhcGVkUGF0dGVybnMuam9pbigifCIpICsgIikiOwogICAgICAgICAgICByZXR1cm4gY2FzZVNlbnNpdGl2ZSA\/IG5ldyBSZWdFeHAocmVnZXhTdHIpIDogbmV3IFJlZ0V4cChyZWdleFN0ciwgImkiKTsKICAgICAgICB9CiAgICB9KHdpbmRvdy5kb2N1bWVudCk7CiAgICB2YXIgSW5wdXQgPSBmdW5jdGlvbigpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIHNwZWNpYWxLZXlDb2RlTWFwOwogICAgICAgIHNwZWNpYWxLZXlDb2RlTWFwID0gewogICAgICAgICAgICA5OiAidGFiIiwKICAgICAgICAgICAgMjc6ICJlc2MiLAogICAgICAgICAgICAzNzogImxlZnQiLAogICAgICAgICAgICAzOTogInJpZ2h0IiwKICAgICAgICAgICAgMTM6ICJlbnRlciIsCiAgICAgICAgICAgIDM4OiAidXAiLAogICAgICAgICAgICA0MDogImRvd24iCiAgICAgICAgfTsKICAgICAgICBmdW5jdGlvbiBJbnB1dChvKSB7CiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcywgb25CbHVyLCBvbkZvY3VzLCBvbktleWRvd24sIG9uSW5wdXQ7CiAgICAgICAgICAgIG8gPSBvIHx8IHt9OwogICAgICAgICAgICBpZiAoIW8uaW5wdXQpIHsKICAgICAgICAgICAgICAgICQuZXJyb3IoImlucHV0IGlzIG1pc3NpbmciKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBvbkJsdXIgPSBfLmJpbmQodGhpcy5fb25CbHVyLCB0aGlzKTsKICAgICAgICAgICAgb25Gb2N1cyA9IF8uYmluZCh0aGlzLl9vbkZvY3VzLCB0aGlzKTsKICAgICAgICAgICAgb25LZXlkb3duID0gXy5iaW5kKHRoaXMuX29uS2V5ZG93biwgdGhpcyk7CiAgICAgICAgICAgIG9uSW5wdXQgPSBfLmJpbmQodGhpcy5fb25JbnB1dCwgdGhpcyk7CiAgICAgICAgICAgIHRoaXMuJGhpbnQgPSAkKG8uaGludCk7CiAgICAgICAgICAgIHRoaXMuJGlucHV0ID0gJChvLmlucHV0KS5vbigiYmx1ci50dCIsIG9uQmx1cikub24oImZvY3VzLnR0Iiwgb25Gb2N1cykub24oImtleWRvd24udHQiLCBvbktleWRvd24pOwogICAgICAgICAgICBpZiAodGhpcy4kaGludC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgIHRoaXMuc2V0SGludCA9IHRoaXMuZ2V0SGludCA9IHRoaXMuY2xlYXJIaW50ID0gdGhpcy5jbGVhckhpbnRJZkludmFsaWQgPSBfLm5vb3A7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFfLmlzTXNpZSgpKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5vbigiaW5wdXQudHQiLCBvbklucHV0KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuJGlucHV0Lm9uKCJrZXlkb3duLnR0IGtleXByZXNzLnR0IGN1dC50dCBwYXN0ZS50dCIsIGZ1bmN0aW9uKCRlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHNwZWNpYWxLZXlDb2RlTWFwWyRlLndoaWNoIHx8ICRlLmtleUNvZGVdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXy5kZWZlcihfLmJpbmQodGhhdC5fb25JbnB1dCwgdGhhdCwgJGUpKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMucXVlcnkgPSB0aGlzLiRpbnB1dC52YWwoKTsKICAgICAgICAgICAgdGhpcy4kb3ZlcmZsb3dIZWxwZXIgPSBidWlsZE92ZXJmbG93SGVscGVyKHRoaXMuJGlucHV0KTsKICAgICAgICB9CiAgICAgICAgSW5wdXQubm9ybWFsaXplUXVlcnkgPSBmdW5jdGlvbihzdHIpIHsKICAgICAgICAgICAgcmV0dXJuIChzdHIgfHwgIiIpLnJlcGxhY2UoL15ccyovZywgIiIpLnJlcGxhY2UoL1xzezIsfS9nLCAiICIpOwogICAgICAgIH07CiAgICAgICAgXy5taXhpbihJbnB1dC5wcm90b3R5cGUsIEV2ZW50RW1pdHRlciwgewogICAgICAgICAgICBfb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7CiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0SW5wdXRWYWx1ZSgpOwogICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCJibHVycmVkIik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9vbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKCkgewogICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCJmb2N1c2VkIik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9vbktleWRvd246IGZ1bmN0aW9uIG9uS2V5ZG93bigkZSkgewogICAgICAgICAgICAgICAgdmFyIGtleU5hbWUgPSBzcGVjaWFsS2V5Q29kZU1hcFskZS53aGljaCB8fCAkZS5rZXlDb2RlXTsKICAgICAgICAgICAgICAgIHRoaXMuX21hbmFnZVByZXZlbnREZWZhdWx0KGtleU5hbWUsICRlKTsKICAgICAgICAgICAgICAgIGlmIChrZXlOYW1lICYmIHRoaXMuX3Nob3VsZFRyaWdnZXIoa2V5TmFtZSwgJGUpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKGtleU5hbWUgKyAiS2V5ZWQiLCAkZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9vbklucHV0OiBmdW5jdGlvbiBvbklucHV0KCkgewogICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbHVlKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9tYW5hZ2VQcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gbWFuYWdlUHJldmVudERlZmF1bHQoa2V5TmFtZSwgJGUpIHsKICAgICAgICAgICAgICAgIHZhciBwcmV2ZW50RGVmYXVsdCwgaGludFZhbHVlLCBpbnB1dFZhbHVlOwogICAgICAgICAgICAgICAgc3dpdGNoIChrZXlOYW1lKSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgInRhYiI6CiAgICAgICAgICAgICAgICAgICAgaGludFZhbHVlID0gdGhpcy5nZXRIaW50KCk7CiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHRoaXMuZ2V0SW5wdXRWYWx1ZSgpOwogICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0ID0gaGludFZhbHVlICYmIGhpbnRWYWx1ZSAhPT0gaW5wdXRWYWx1ZSAmJiAhd2l0aE1vZGlmaWVyKCRlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgIGNhc2UgInVwIjoKICAgICAgICAgICAgICAgICAgY2FzZSAiZG93biI6CiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQgPSAhd2l0aE1vZGlmaWVyKCRlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0ICYmICRlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9zaG91bGRUcmlnZ2VyOiBmdW5jdGlvbiBzaG91bGRUcmlnZ2VyKGtleU5hbWUsICRlKSB7CiAgICAgICAgICAgICAgICB2YXIgdHJpZ2dlcjsKICAgICAgICAgICAgICAgIHN3aXRjaCAoa2V5TmFtZSkgewogICAgICAgICAgICAgICAgICBjYXNlICJ0YWIiOgogICAgICAgICAgICAgICAgICAgIHRyaWdnZXIgPSAhd2l0aE1vZGlmaWVyKCRlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlciA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJpZ2dlcjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX2NoZWNrSW5wdXRWYWx1ZTogZnVuY3Rpb24gY2hlY2tJbnB1dFZhbHVlKCkgewogICAgICAgICAgICAgICAgdmFyIGlucHV0VmFsdWUsIGFyZUVxdWl2YWxlbnQsIGhhc0RpZmZlcmVudFdoaXRlc3BhY2U7CiAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gdGhpcy5nZXRJbnB1dFZhbHVlKCk7CiAgICAgICAgICAgICAgICBhcmVFcXVpdmFsZW50ID0gYXJlUXVlcmllc0VxdWl2YWxlbnQoaW5wdXRWYWx1ZSwgdGhpcy5xdWVyeSk7CiAgICAgICAgICAgICAgICBoYXNEaWZmZXJlbnRXaGl0ZXNwYWNlID0gYXJlRXF1aXZhbGVudCA\/IHRoaXMucXVlcnkubGVuZ3RoICE9PSBpbnB1dFZhbHVlLmxlbmd0aCA6IGZhbHNlOwogICAgICAgICAgICAgICAgdGhpcy5xdWVyeSA9IGlucHV0VmFsdWU7CiAgICAgICAgICAgICAgICBpZiAoIWFyZUVxdWl2YWxlbnQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoInF1ZXJ5Q2hhbmdlZCIsIHRoaXMucXVlcnkpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNEaWZmZXJlbnRXaGl0ZXNwYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCJ3aGl0ZXNwYWNlQ2hhbmdlZCIsIHRoaXMucXVlcnkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5mb2N1cygpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBibHVyOiBmdW5jdGlvbiBibHVyKCkgewogICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQuYmx1cigpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRRdWVyeTogZnVuY3Rpb24gZ2V0UXVlcnkoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5xdWVyeTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0UXVlcnk6IGZ1bmN0aW9uIHNldFF1ZXJ5KHF1ZXJ5KSB7CiAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldElucHV0VmFsdWU6IGZ1bmN0aW9uIGdldElucHV0VmFsdWUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaW5wdXQudmFsKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNldElucHV0VmFsdWU6IGZ1bmN0aW9uIHNldElucHV0VmFsdWUodmFsdWUsIHNpbGVudCkgewogICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQudmFsKHZhbHVlKTsKICAgICAgICAgICAgICAgIHNpbGVudCA\/IHRoaXMuY2xlYXJIaW50KCkgOiB0aGlzLl9jaGVja0lucHV0VmFsdWUoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVzZXRJbnB1dFZhbHVlOiBmdW5jdGlvbiByZXNldElucHV0VmFsdWUoKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNldElucHV0VmFsdWUodGhpcy5xdWVyeSwgdHJ1ZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldEhpbnQ6IGZ1bmN0aW9uIGdldEhpbnQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaGludC52YWwoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0SGludDogZnVuY3Rpb24gc2V0SGludCh2YWx1ZSkgewogICAgICAgICAgICAgICAgdGhpcy4kaGludC52YWwodmFsdWUpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjbGVhckhpbnQ6IGZ1bmN0aW9uIGNsZWFySGludCgpIHsKICAgICAgICAgICAgICAgIHRoaXMuc2V0SGludCgiIik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsZWFySGludElmSW52YWxpZDogZnVuY3Rpb24gY2xlYXJIaW50SWZJbnZhbGlkKCkgewogICAgICAgICAgICAgICAgdmFyIHZhbCwgaGludCwgdmFsSXNQcmVmaXhPZkhpbnQsIGlzVmFsaWQ7CiAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLmdldElucHV0VmFsdWUoKTsKICAgICAgICAgICAgICAgIGhpbnQgPSB0aGlzLmdldEhpbnQoKTsKICAgICAgICAgICAgICAgIHZhbElzUHJlZml4T2ZIaW50ID0gdmFsICE9PSBoaW50ICYmIGhpbnQuaW5kZXhPZih2YWwpID09PSAwOwogICAgICAgICAgICAgICAgaXNWYWxpZCA9IHZhbCAhPT0gIiIgJiYgdmFsSXNQcmVmaXhPZkhpbnQgJiYgIXRoaXMuaGFzT3ZlcmZsb3coKTsKICAgICAgICAgICAgICAgICFpc1ZhbGlkICYmIHRoaXMuY2xlYXJIaW50KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldExhbmd1YWdlRGlyZWN0aW9uOiBmdW5jdGlvbiBnZXRMYW5ndWFnZURpcmVjdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy4kaW5wdXQuY3NzKCJkaXJlY3Rpb24iKSB8fCAibHRyIikudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaGFzT3ZlcmZsb3c6IGZ1bmN0aW9uIGhhc092ZXJmbG93KCkgewogICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSB0aGlzLiRpbnB1dC53aWR0aCgpIC0gMjsKICAgICAgICAgICAgICAgIHRoaXMuJG92ZXJmbG93SGVscGVyLnRleHQodGhpcy5nZXRJbnB1dFZhbHVlKCkpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG92ZXJmbG93SGVscGVyLndpZHRoKCkgPj0gY29uc3RyYWludDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNDdXJzb3JBdEVuZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWVMZW5ndGgsIHNlbGVjdGlvblN0YXJ0LCByYW5nZTsKICAgICAgICAgICAgICAgIHZhbHVlTGVuZ3RoID0gdGhpcy4kaW5wdXQudmFsKCkubGVuZ3RoOwogICAgICAgICAgICAgICAgc2VsZWN0aW9uU3RhcnQgPSB0aGlzLiRpbnB1dFswXS5zZWxlY3Rpb25TdGFydDsKICAgICAgICAgICAgICAgIGlmIChfLmlzTnVtYmVyKHNlbGVjdGlvblN0YXJ0KSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb25TdGFydCA9PT0gdmFsdWVMZW5ndGg7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikgewogICAgICAgICAgICAgICAgICAgIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7CiAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVN0YXJ0KCJjaGFyYWN0ZXIiLCAtdmFsdWVMZW5ndGgpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUxlbmd0aCA9PT0gcmFuZ2UudGV4dC5sZW5ndGg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgICAgICAgICAgIHRoaXMuJGhpbnQub2ZmKCIudHQiKTsKICAgICAgICAgICAgICAgIHRoaXMuJGlucHV0Lm9mZigiLnR0Iik7CiAgICAgICAgICAgICAgICB0aGlzLiRoaW50ID0gdGhpcy4kaW5wdXQgPSB0aGlzLiRvdmVyZmxvd0hlbHBlciA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gSW5wdXQ7CiAgICAgICAgZnVuY3Rpb24gYnVpbGRPdmVyZmxvd0hlbHBlcigkaW5wdXQpIHsKICAgICAgICAgICAgcmV0dXJuICQoJzxwcmUgYXJpYS1oaWRkZW49InRydWUiPjwvcHJlPicpLmNzcyh7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIiwKICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICJoaWRkZW4iLAogICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogInByZSIsCiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAkaW5wdXQuY3NzKCJmb250LWZhbWlseSIpLAogICAgICAgICAgICAgICAgZm9udFNpemU6ICRpbnB1dC5jc3MoImZvbnQtc2l6ZSIpLAogICAgICAgICAgICAgICAgZm9udFN0eWxlOiAkaW5wdXQuY3NzKCJmb250LXN0eWxlIiksCiAgICAgICAgICAgICAgICBmb250VmFyaWFudDogJGlucHV0LmNzcygiZm9udC12YXJpYW50IiksCiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAkaW5wdXQuY3NzKCJmb250LXdlaWdodCIpLAogICAgICAgICAgICAgICAgd29yZFNwYWNpbmc6ICRpbnB1dC5jc3MoIndvcmQtc3BhY2luZyIpLAogICAgICAgICAgICAgICAgbGV0dGVyU3BhY2luZzogJGlucHV0LmNzcygibGV0dGVyLXNwYWNpbmciKSwKICAgICAgICAgICAgICAgIHRleHRJbmRlbnQ6ICRpbnB1dC5jc3MoInRleHQtaW5kZW50IiksCiAgICAgICAgICAgICAgICB0ZXh0UmVuZGVyaW5nOiAkaW5wdXQuY3NzKCJ0ZXh0LXJlbmRlcmluZyIpLAogICAgICAgICAgICAgICAgdGV4dFRyYW5zZm9ybTogJGlucHV0LmNzcygidGV4dC10cmFuc2Zvcm0iKQogICAgICAgICAgICB9KS5pbnNlcnRBZnRlcigkaW5wdXQpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBhcmVRdWVyaWVzRXF1aXZhbGVudChhLCBiKSB7CiAgICAgICAgICAgIHJldHVybiBJbnB1dC5ub3JtYWxpemVRdWVyeShhKSA9PT0gSW5wdXQubm9ybWFsaXplUXVlcnkoYik7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHdpdGhNb2RpZmllcigkZSkgewogICAgICAgICAgICByZXR1cm4gJGUuYWx0S2V5IHx8ICRlLmN0cmxLZXkgfHwgJGUubWV0YUtleSB8fCAkZS5zaGlmdEtleTsKICAgICAgICB9CiAgICB9KCk7CiAgICB2YXIgRGF0YXNldCA9IGZ1bmN0aW9uKCkgewogICAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgICB2YXIgZGF0YXNldEtleSA9ICJ0dERhdGFzZXQiLCB2YWx1ZUtleSA9ICJ0dFZhbHVlIiwgZGF0dW1LZXkgPSAidHREYXR1bSI7CiAgICAgICAgZnVuY3Rpb24gRGF0YXNldChvKSB7CiAgICAgICAgICAgIG8gPSBvIHx8IHt9OwogICAgICAgICAgICBvLnRlbXBsYXRlcyA9IG8udGVtcGxhdGVzIHx8IHt9OwogICAgICAgICAgICBpZiAoIW8uc291cmNlKSB7CiAgICAgICAgICAgICAgICAkLmVycm9yKCJtaXNzaW5nIHNvdXJjZSIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChvLm5hbWUgJiYgIWlzVmFsaWROYW1lKG8ubmFtZSkpIHsKICAgICAgICAgICAgICAgICQuZXJyb3IoImludmFsaWQgZGF0YXNldCBuYW1lOiAiICsgby5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnF1ZXJ5ID0gbnVsbDsKICAgICAgICAgICAgdGhpcy5oaWdobGlnaHQgPSAhIW8uaGlnaGxpZ2h0OwogICAgICAgICAgICB0aGlzLm5hbWUgPSBvLm5hbWUgfHwgXy5nZXRVbmlxdWVJZCgpOwogICAgICAgICAgICB0aGlzLnNvdXJjZSA9IG8uc291cmNlOwogICAgICAgICAgICB0aGlzLmRpc3BsYXlGbiA9IGdldERpc3BsYXlGbihvLmRpc3BsYXkgfHwgby5kaXNwbGF5S2V5KTsKICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZXMgPSBnZXRUZW1wbGF0ZXMoby50ZW1wbGF0ZXMsIHRoaXMuZGlzcGxheUZuKTsKICAgICAgICAgICAgdGhpcy4kZWwgPSAkKGh0bWwuZGF0YXNldC5yZXBsYWNlKCIlQ0xBU1MlIiwgdGhpcy5uYW1lKSk7CiAgICAgICAgfQogICAgICAgIERhdGFzZXQuZXh0cmFjdERhdGFzZXROYW1lID0gZnVuY3Rpb24gZXh0cmFjdERhdGFzZXROYW1lKGVsKSB7CiAgICAgICAgICAgIHJldHVybiAkKGVsKS5kYXRhKGRhdGFzZXRLZXkpOwogICAgICAgIH07CiAgICAgICAgRGF0YXNldC5leHRyYWN0VmFsdWUgPSBmdW5jdGlvbiBleHRyYWN0RGF0dW0oZWwpIHsKICAgICAgICAgICAgcmV0dXJuICQoZWwpLmRhdGEodmFsdWVLZXkpOwogICAgICAgIH07CiAgICAgICAgRGF0YXNldC5leHRyYWN0RGF0dW0gPSBmdW5jdGlvbiBleHRyYWN0RGF0dW0oZWwpIHsKICAgICAgICAgICAgcmV0dXJuICQoZWwpLmRhdGEoZGF0dW1LZXkpOwogICAgICAgIH07CiAgICAgICAgXy5taXhpbihEYXRhc2V0LnByb3RvdHlwZSwgRXZlbnRFbWl0dGVyLCB7CiAgICAgICAgICAgIF9yZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihxdWVyeSwgc3VnZ2VzdGlvbnMpIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy4kZWwpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsIGhhc1N1Z2dlc3Rpb25zOwogICAgICAgICAgICAgICAgdGhpcy4kZWwuZW1wdHkoKTsKICAgICAgICAgICAgICAgIGhhc1N1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbnMgJiYgc3VnZ2VzdGlvbnMubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKCFoYXNTdWdnZXN0aW9ucyAmJiB0aGlzLnRlbXBsYXRlcy5lbXB0eSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwoZ2V0RW1wdHlIdG1sKCkpLnByZXBlbmQodGhhdC50ZW1wbGF0ZXMuaGVhZGVyID8gZ2V0SGVhZGVySHRtbCgpIDogbnVsbCkuYXBwZW5kKHRoYXQudGVtcGxhdGVzLmZvb3RlciA\/IGdldEZvb3Rlckh0bWwoKSA6IG51bGwpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNTdWdnZXN0aW9ucykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwoZ2V0U3VnZ2VzdGlvbnNIdG1sKCkpLnByZXBlbmQodGhhdC50ZW1wbGF0ZXMuaGVhZGVyID8gZ2V0SGVhZGVySHRtbCgpIDogbnVsbCkuYXBwZW5kKHRoYXQudGVtcGxhdGVzLmZvb3RlciA\\\",
    "size": "48446"
}