{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Reader\/Gnumeric.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\\/IHRydWUgOiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5WydhbGlnbm1lbnQnXVsnaW5kZW50J10gPSAoaW50dmFsKCRzdHlsZUF0dHJpYnV0ZXNbIkluZGVudCJdKSA+IDApID8gJHN0eWxlQXR0cmlidXRlc1siaW5kZW50Il0gOiAwOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSR0IgPSBzZWxmOjpwYXJzZUdudW1lcmljQ29sb3VyKCRzdHlsZUF0dHJpYnV0ZXNbIkZvcmUiXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZm9udCddWydjb2xvciddWydyZ2InXSA9ICRSR0I7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUkdCID0gc2VsZjo6cGFyc2VHbnVtZXJpY0NvbG91cigkc3R5bGVBdHRyaWJ1dGVzWyJCYWNrIl0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNoYWRlID0gJHN0eWxlQXR0cmlidXRlc1siU2hhZGUiXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJFJHQiAhPSAnMDAwMDAwJykgfHwgKCRzaGFkZSAhPSAnMCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZpbGwnXVsnY29sb3InXVsncmdiJ10gPSAkc3R5bGVBcnJheVsnZmlsbCddWydzdGFydGNvbG9yJ11bJ3JnYiddID0gJFJHQjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUkdCMiA9IHNlbGY6OnBhcnNlR251bWVyaWNDb2xvdXIoJHN0eWxlQXR0cmlidXRlc1siUGF0dGVybkNvbG9yIl0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5WydmaWxsJ11bJ2VuZGNvbG9yJ11bJ3JnYiddID0gJFJHQjI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgkc2hhZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1NPTElEOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzInOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZpbGwnXVsndHlwZSddID0gUEhQRXhjZWxfU3R5bGVfRmlsbDo6RklMTF9HUkFESUVOVF9MSU5FQVI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMyc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX0dSQURJRU5UX1BBVEg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnNCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1BBVFRFUk5fREFSS0RPV047CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnNSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1BBVFRFUk5fREFSS0dSQVk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnNic6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1BBVFRFUk5fREFSS0dSSUQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnNyc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1BBVFRFUk5fREFSS0hPUklaT05UQUw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnOCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1BBVFRFUk5fREFSS1RSRUxMSVM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnOSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1BBVFRFUk5fREFSS1VQOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzEwJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5WydmaWxsJ11bJ3R5cGUnXSA9IFBIUEV4Y2VsX1N0eWxlX0ZpbGw6OkZJTExfUEFUVEVSTl9EQVJLVkVSVElDQUw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMTEnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZpbGwnXVsndHlwZSddID0gUEhQRXhjZWxfU3R5bGVfRmlsbDo6RklMTF9QQVRURVJOX0dSQVkwNjI1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzEyJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5WydmaWxsJ11bJ3R5cGUnXSA9IFBIUEV4Y2VsX1N0eWxlX0ZpbGw6OkZJTExfUEFUVEVSTl9HUkFZMTI1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzEzJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5WydmaWxsJ11bJ3R5cGUnXSA9IFBIUEV4Y2VsX1N0eWxlX0ZpbGw6OkZJTExfUEFUVEVSTl9MSUdIVERPV047CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMTQnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZpbGwnXVsndHlwZSddID0gUEhQRXhjZWxfU3R5bGVfRmlsbDo6RklMTF9QQVRURVJOX0xJR0hUR1JBWTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcxNSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1BBVFRFUk5fTElHSFRHUklEOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzE2JzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5WydmaWxsJ11bJ3R5cGUnXSA9IFBIUEV4Y2VsX1N0eWxlX0ZpbGw6OkZJTExfUEFUVEVSTl9MSUdIVEhPUklaT05UQUw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMTcnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZpbGwnXVsndHlwZSddID0gUEhQRXhjZWxfU3R5bGVfRmlsbDo6RklMTF9QQVRURVJOX0xJR0hUVFJFTExJUzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcxOCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1BBVFRFUk5fTElHSFRVUDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcxOSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1BBVFRFUk5fTElHSFRWRVJUSUNBTDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcyMCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZmlsbCddWyd0eXBlJ10gPSBQSFBFeGNlbF9TdHlsZV9GaWxsOjpGSUxMX1BBVFRFUk5fTUVESVVNR1JBWTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZm9udEF0dHJpYnV0ZXMgPSAkc3R5bGVSZWdpb24tPlN0eWxlLT5Gb250LT5hdHRyaWJ1dGVzKCk7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcl9kdW1wKCRmb250QXR0cmlidXRlcyk7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxiciAvPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZm9udCddWyduYW1lJ10gPSAoc3RyaW5nKSAkc3R5bGVSZWdpb24tPlN0eWxlLT5Gb250OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZvbnQnXVsnc2l6ZSddID0gaW50dmFsKCRmb250QXR0cmlidXRlc1snVW5pdCddKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5Wydmb250J11bJ2JvbGQnXSA9ICgkZm9udEF0dHJpYnV0ZXNbJ0JvbGQnXSA9PSAnMScpID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZvbnQnXVsnaXRhbGljJ10gPSAoJGZvbnRBdHRyaWJ1dGVzWydJdGFsaWMnXSA9PSAnMScpID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZvbnQnXVsnc3RyaWtlJ10gPSAoJGZvbnRBdHRyaWJ1dGVzWydTdHJpa2VUaHJvdWdoJ10gPT0gJzEnKSA\/IHRydWUgOiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoJGZvbnRBdHRyaWJ1dGVzWydVbmRlcmxpbmUnXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzEnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZm9udCddWyd1bmRlcmxpbmUnXSA9IFBIUEV4Y2VsX1N0eWxlX0ZvbnQ6OlVOREVSTElORV9TSU5HTEU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzInOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZm9udCddWyd1bmRlcmxpbmUnXSA9IFBIUEV4Y2VsX1N0eWxlX0ZvbnQ6OlVOREVSTElORV9ET1VCTEU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzMnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnZm9udCddWyd1bmRlcmxpbmUnXSA9IFBIUEV4Y2VsX1N0eWxlX0ZvbnQ6OlVOREVSTElORV9TSU5HTEVBQ0NPVU5USU5HOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICc0JzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZvbnQnXVsndW5kZXJsaW5lJ10gPSBQSFBFeGNlbF9TdHlsZV9Gb250OjpVTkRFUkxJTkVfRE9VQkxFQUNDT1VOVElORzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZvbnQnXVsndW5kZXJsaW5lJ10gPSBQSFBFeGNlbF9TdHlsZV9Gb250OjpVTkRFUkxJTkVfTk9ORTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCRmb250QXR0cmlidXRlc1snU2NyaXB0J10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcxJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZvbnQnXVsnc3VwZXJTY3JpcHQnXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJy0xJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2ZvbnQnXVsnc3ViU2NyaXB0J10gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHN0eWxlUmVnaW9uLT5TdHlsZS0+U3R5bGVCb3JkZXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRzdHlsZVJlZ2lvbi0+U3R5bGUtPlN0eWxlQm9yZGVyLT5Ub3ApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5Wydib3JkZXJzJ11bJ3RvcCddID0gc2VsZjo6cGFyc2VCb3JkZXJBdHRyaWJ1dGVzKCRzdHlsZVJlZ2lvbi0+U3R5bGUtPlN0eWxlQm9yZGVyLT5Ub3AtPmF0dHJpYnV0ZXMoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkc3R5bGVSZWdpb24tPlN0eWxlLT5TdHlsZUJvcmRlci0+Qm90dG9tKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnYm9yZGVycyddWydib3R0b20nXSA9IHNlbGY6OnBhcnNlQm9yZGVyQXR0cmlidXRlcygkc3R5bGVSZWdpb24tPlN0eWxlLT5TdHlsZUJvcmRlci0+Qm90dG9tLT5hdHRyaWJ1dGVzKCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHN0eWxlUmVnaW9uLT5TdHlsZS0+U3R5bGVCb3JkZXItPkxlZnQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5Wydib3JkZXJzJ11bJ2xlZnQnXSA9IHNlbGY6OnBhcnNlQm9yZGVyQXR0cmlidXRlcygkc3R5bGVSZWdpb24tPlN0eWxlLT5TdHlsZUJvcmRlci0+TGVmdC0+YXR0cmlidXRlcygpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRzdHlsZVJlZ2lvbi0+U3R5bGUtPlN0eWxlQm9yZGVyLT5SaWdodCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2JvcmRlcnMnXVsncmlnaHQnXSA9IHNlbGY6OnBhcnNlQm9yZGVyQXR0cmlidXRlcygkc3R5bGVSZWdpb24tPlN0eWxlLT5TdHlsZUJvcmRlci0+UmlnaHQtPmF0dHJpYnV0ZXMoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaXNzZXQoJHN0eWxlUmVnaW9uLT5TdHlsZS0+U3R5bGVCb3JkZXItPkRpYWdvbmFsKSkgJiYgKGlzc2V0KCRzdHlsZVJlZ2lvbi0+U3R5bGUtPlN0eWxlQm9yZGVyLT57J1Jldi1EaWFnb25hbCd9KSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0eWxlQXJyYXlbJ2JvcmRlcnMnXVsnZGlhZ29uYWwnXSA9IHNlbGY6OnBhcnNlQm9yZGVyQXR0cmlidXRlcygkc3R5bGVSZWdpb24tPlN0eWxlLT5TdHlsZUJvcmRlci0+RGlhZ29uYWwtPmF0dHJpYnV0ZXMoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5Wydib3JkZXJzJ11bJ2RpYWdvbmFsZGlyZWN0aW9uJ10gPSBQSFBFeGNlbF9TdHlsZV9Cb3JkZXJzOjpESUFHT05BTF9CT1RIOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZWlmIChpc3NldCgkc3R5bGVSZWdpb24tPlN0eWxlLT5TdHlsZUJvcmRlci0+RGlhZ29uYWwpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHlsZUFycmF5Wydib3JkZXJzJ11bJ2RpYWdvbmFsJ10gPSBzZWxmOjpwYXJzZUJvcmRlckF0dHJpYnV0ZXMoJHN0eWxlUmVnaW9uLT5TdHlsZS0+U3R5bGVCb3JkZXItPkRpYWdvbmFsLT5hdHRyaWJ1dGVzKCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnYm9yZGVycyddWydkaWFnb25hbGRpcmVjdGlvbiddID0gUEhQRXhjZWxfU3R5bGVfQm9yZGVyczo6RElBR09OQUxfVVA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlaWYgKGlzc2V0KCRzdHlsZVJlZ2lvbi0+U3R5bGUtPlN0eWxlQm9yZGVyLT57J1Jldi1EaWFnb25hbCd9KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnYm9yZGVycyddWydkaWFnb25hbCddID0gc2VsZjo6cGFyc2VCb3JkZXJBdHRyaWJ1dGVzKCRzdHlsZVJlZ2lvbi0+U3R5bGUtPlN0eWxlQm9yZGVyLT57J1Jldi1EaWFnb25hbCd9LT5hdHRyaWJ1dGVzKCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R5bGVBcnJheVsnYm9yZGVycyddWydkaWFnb25hbGRpcmVjdGlvbiddID0gUEhQRXhjZWxfU3R5bGVfQm9yZGVyczo6RElBR09OQUxfRE9XTjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHN0eWxlUmVnaW9uLT5TdHlsZS0+SHlwZXJMaW5rKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIFRPIERPCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh5cGVybGluayA9ICRzdHlsZVJlZ2lvbi0+U3R5bGUtPkh5cGVyTGluay0+YXR0cmlidXRlcygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9Ci8vICAgICAgICAgICAgICAgICAgICAgICAgdmFyX2R1bXAoJHN0eWxlQXJyYXkpOwovLyAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxiciAvPic7CiAgICAgICAgICAgICAgICAgICAgICAgICRvYmpQSFBFeGNlbC0+Z2V0QWN0aXZlU2hlZXQoKS0+Z2V0U3R5bGUoJGNlbGxSYW5nZSktPmFwcGx5RnJvbUFycmF5KCRzdHlsZUFycmF5KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgoISR0aGlzLT5yZWFkRGF0YU9ubHkpICYmIChpc3NldCgkc2hlZXQtPkNvbHMpKSkgewogICAgICAgICAgICAgICAgLy8gICAgQ29sdW1uIFdpZHRocwogICAgICAgICAgICAgICAgJGNvbHVtbkF0dHJpYnV0ZXMgPSAkc2hlZXQtPkNvbHMtPmF0dHJpYnV0ZXMoKTsKICAgICAgICAgICAgICAgICRkZWZhdWx0V2lkdGggPSAkY29sdW1uQXR0cmlidXRlc1snRGVmYXVsdFNpemVQdHMnXSAgLyA1LjQ7CiAgICAgICAgICAgICAgICAkYyA9IDA7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkc2hlZXQtPkNvbHMtPkNvbEluZm8gYXMgJGNvbHVtbk92ZXJyaWRlKSB7CiAgICAgICAgICAgICAgICAgICAgJGNvbHVtbkF0dHJpYnV0ZXMgPSAkY29sdW1uT3ZlcnJpZGUtPmF0dHJpYnV0ZXMoKTsKICAgICAgICAgICAgICAgICAgICAkY29sdW1uID0gJGNvbHVtbkF0dHJpYnV0ZXNbJ05vJ107CiAgICAgICAgICAgICAgICAgICAgJGNvbHVtbldpZHRoID0gJGNvbHVtbkF0dHJpYnV0ZXNbJ1VuaXQnXSAgLyA1LjQ7CiAgICAgICAgICAgICAgICAgICAgJGhpZGRlbiA9ICgoaXNzZXQoJGNvbHVtbkF0dHJpYnV0ZXNbJ0hpZGRlbiddKSkgJiYgKCRjb2x1bW5BdHRyaWJ1dGVzWydIaWRkZW4nXSA9PSAnMScpKSA\/IHRydWUgOiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAkY29sdW1uQ291bnQgPSAoaXNzZXQoJGNvbHVtbkF0dHJpYnV0ZXNbJ0NvdW50J10pKSA\",
    "size": "41888"
}