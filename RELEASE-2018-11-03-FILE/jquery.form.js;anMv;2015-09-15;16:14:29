{
    "namaFile": "js\/jquery.form.js",
    "lastUpdate": "2015-09-15+16:14:29.97",
    "contentFile": "LyohCiAqIGpRdWVyeSBGb3JtIFBsdWdpbgogKiB2ZXJzaW9uOiAzLjA5ICgxNi1BUFItMjAxMikKICogQHJlcXVpcmVzIGpRdWVyeSB2MS4zLjIgb3IgbGF0ZXIKICoKICogRXhhbXBsZXMgYW5kIGRvY3VtZW50YXRpb24gYXQ6IGh0dHA6Ly9tYWxzdXAuY29tL2pxdWVyeS9mb3JtLwogKiBQcm9qZWN0IHJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYWxzdXAvZm9ybQogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgYW5kIEdQTCBsaWNlbnNlczoKICogICAgaHR0cDovL21hbHN1cC5naXRodWIuY29tL21pdC1saWNlbnNlLnR4dAogKiAgICBodHRwOi8vbWFsc3VwLmdpdGh1Yi5jb20vZ3BsLWxpY2Vuc2UtdjIudHh0CiAqLwovKmdsb2JhbCBBY3RpdmVYT2JqZWN0IGFsZXJ0ICovCjsoZnVuY3Rpb24oJCkgewoidXNlIHN0cmljdCI7CgovKgogICAgVXNhZ2UgTm90ZToKICAgIC0tLS0tLS0tLS0tCiAgICBEbyBub3QgdXNlIGJvdGggYWpheFN1Ym1pdCBhbmQgYWpheEZvcm0gb24gdGhlIHNhbWUgZm9ybS4gIFRoZXNlCiAgICBmdW5jdGlvbnMgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gIFVzZSBhamF4U3VibWl0IGlmIHlvdSB3YW50CiAgICB0byBiaW5kIHlvdXIgb3duIHN1Ym1pdCBoYW5kbGVyIHRvIHRoZSBmb3JtLiAgRm9yIGV4YW1wbGUsCgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CiAgICAgICAgJCgnI215Rm9ybScpLm9uKCdzdWJtaXQnLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gPC0tIGltcG9ydGFudAogICAgICAgICAgICAkKHRoaXMpLmFqYXhTdWJtaXQoewogICAgICAgICAgICAgICAgdGFyZ2V0OiAnI291dHB1dCcKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9KTsKCiAgICBVc2UgYWpheEZvcm0gd2hlbiB5b3Ugd2FudCB0aGUgcGx1Z2luIHRvIG1hbmFnZSBhbGwgdGhlIGV2ZW50IGJpbmRpbmcKICAgIGZvciB5b3UuICBGb3IgZXhhbXBsZSwKCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKICAgICAgICAkKCcjbXlGb3JtJykuYWpheEZvcm0oewogICAgICAgICAgICB0YXJnZXQ6ICcjb3V0cHV0JwogICAgICAgIH0pOwogICAgfSk7CiAgICAKICAgIFlvdSBjYW4gYWxzbyB1c2UgYWpheEZvcm0gd2l0aCBkZWxlZ2F0aW9uIChyZXF1aXJlcyBqUXVlcnkgdjEuNyspLCBzbyB0aGUKICAgIGZvcm0gZG9lcyBub3QgaGF2ZSB0byBleGlzdCB3aGVuIHlvdSBpbnZva2UgYWpheEZvcm06CgogICAgJCgnI215Rm9ybScpLmFqYXhGb3JtKHsKICAgICAgICBkZWxlZ2F0aW9uOiB0cnVlLAogICAgICAgIHRhcmdldDogJyNvdXRwdXQnCiAgICB9KTsKICAgIAogICAgV2hlbiB1c2luZyBhamF4Rm9ybSwgdGhlIGFqYXhTdWJtaXQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIGZvciB5b3UKICAgIGF0IHRoZSBhcHByb3ByaWF0ZSB0aW1lLgoqLwoKLyoqCiAqIEZlYXR1cmUgZGV0ZWN0aW9uCiAqLwp2YXIgZmVhdHVyZSA9IHt9OwpmZWF0dXJlLmZpbGVhcGkgPSAkKCI8aW5wdXQgdHlwZT0nZmlsZScvPiIpLmdldCgwKS5maWxlcyAhPT0gdW5kZWZpbmVkOwpmZWF0dXJlLmZvcm1kYXRhID0gd2luZG93LkZvcm1EYXRhICE9PSB1bmRlZmluZWQ7CgovKioKICogYWpheFN1Ym1pdCgpIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBpbW1lZGlhdGVseSBzdWJtaXR0aW5nCiAqIGFuIEhUTUwgZm9ybSB1c2luZyBBSkFYLgogKi8KJC5mbi5hamF4U3VibWl0ID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgLypqc2hpbnQgc2NyaXB0dXJsOnRydWUgKi8KCiAgICAvLyBmYXN0IGZhaWwgaWYgbm90aGluZyBzZWxlY3RlZCAoaHR0cDovL2Rldi5qcXVlcnkuY29tL3RpY2tldC8yNzUyKQogICAgaWYgKCF0aGlzLmxlbmd0aCkgewogICAgICAgIGxvZygnYWpheFN1Ym1pdDogc2tpcHBpbmcgc3VibWl0IHByb2Nlc3MgLSBubyBlbGVtZW50IHNlbGVjdGVkJyk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICAKICAgIHZhciBtZXRob2QsIGFjdGlvbiwgdXJsLCAkZm9ybSA9IHRoaXM7CgogICAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdmdW5jdGlvbicpIHsKICAgICAgICBvcHRpb25zID0geyBzdWNjZXNzOiBvcHRpb25zIH07CiAgICB9CgogICAgbWV0aG9kID0gdGhpcy5hdHRyKCdtZXRob2QnKTsKICAgIGFjdGlvbiA9IHRoaXMuYXR0cignYWN0aW9uJyk7CiAgICB1cmwgPSAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpID8gJC50cmltKGFjdGlvbikgOiAnJzsKICAgIHVybCA9IHVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZiB8fCAnJzsKICAgIGlmICh1cmwpIHsKICAgICAgICAvLyBjbGVhbiB1cmwgKGRvbid0IGluY2x1ZGUgaGFzaCB2YXVlKQogICAgICAgIHVybCA9ICh1cmwubWF0Y2goL14oW14jXSspLyl8fFtdKVsxXTsKICAgIH0KCiAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgewogICAgICAgIHVybDogIHVybCwKICAgICAgICBzdWNjZXNzOiAkLmFqYXhTZXR0aW5ncy5zdWNjZXNzLAogICAgICAgIHR5cGU6IG1ldGhvZCB8fCAnR0VUJywKICAgICAgICBpZnJhbWVTcmM6IC9eaHR0cHMvaS50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmIHx8ICcnKSA\/ICdqYXZhc2NyaXB0OmZhbHNlJyA6ICdhYm91dDpibGFuaycKICAgIH0sIG9wdGlvbnMpOwoKICAgIC8vIGhvb2sgZm9yIG1hbmlwdWxhdGluZyB0aGUgZm9ybSBkYXRhIGJlZm9yZSBpdCBpcyBleHRyYWN0ZWQ7CiAgICAvLyBjb252ZW5pZW50IGZvciB1c2Ugd2l0aCByaWNoIGVkaXRvcnMgbGlrZSB0aW55TUNFIG9yIEZDS0VkaXRvcgogICAgdmFyIHZldG8gPSB7fTsKICAgIHRoaXMudHJpZ2dlcignZm9ybS1wcmUtc2VyaWFsaXplJywgW3RoaXMsIG9wdGlvbnMsIHZldG9dKTsKICAgIGlmICh2ZXRvLnZldG8pIHsKICAgICAgICBsb2coJ2FqYXhTdWJtaXQ6IHN1Ym1pdCB2ZXRvZWQgdmlhIGZvcm0tcHJlLXNlcmlhbGl6ZSB0cmlnZ2VyJyk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgLy8gcHJvdmlkZSBvcHBvcnR1bml0eSB0byBhbHRlciBmb3JtIGRhdGEgYmVmb3JlIGl0IGlzIHNlcmlhbGl6ZWQKICAgIGlmIChvcHRpb25zLmJlZm9yZVNlcmlhbGl6ZSAmJiBvcHRpb25zLmJlZm9yZVNlcmlhbGl6ZSh0aGlzLCBvcHRpb25zKSA9PT0gZmFsc2UpIHsKICAgICAgICBsb2coJ2FqYXhTdWJtaXQ6IHN1Ym1pdCBhYm9ydGVkIHZpYSBiZWZvcmVTZXJpYWxpemUgY2FsbGJhY2snKTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICB2YXIgdHJhZGl0aW9uYWwgPSBvcHRpb25zLnRyYWRpdGlvbmFsOwogICAgaWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkgewogICAgICAgIHRyYWRpdGlvbmFsID0gJC5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7CiAgICB9CiAgICAKICAgIHZhciBlbGVtZW50cyA9IFtdOwogICAgdmFyIHF4LCBhID0gdGhpcy5mb3JtVG9BcnJheShvcHRpb25zLnNlbWFudGljLCBlbGVtZW50cyk7CiAgICBpZiAob3B0aW9ucy5kYXRhKSB7CiAgICAgICAgb3B0aW9ucy5leHRyYURhdGEgPSBvcHRpb25zLmRhdGE7CiAgICAgICAgcXggPSAkLnBhcmFtKG9wdGlvbnMuZGF0YSwgdHJhZGl0aW9uYWwpOwogICAgfQoKICAgIC8vIGdpdmUgcHJlLXN1Ym1pdCBjYWxsYmFjayBhbiBvcHBvcnR1bml0eSB0byBhYm9ydCB0aGUgc3VibWl0CiAgICBpZiAob3B0aW9ucy5iZWZvcmVTdWJtaXQgJiYgb3B0aW9ucy5iZWZvcmVTdWJtaXQoYSwgdGhpcywgb3B0aW9ucykgPT09IGZhbHNlKSB7CiAgICAgICAgbG9nKCdhamF4U3VibWl0OiBzdWJtaXQgYWJvcnRlZCB2aWEgYmVmb3JlU3VibWl0IGNhbGxiYWNrJyk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgLy8gZmlyZSB2ZXRvYWJsZSAndmFsaWRhdGUnIGV2ZW50CiAgICB0aGlzLnRyaWdnZXIoJ2Zvcm0tc3VibWl0LXZhbGlkYXRlJywgW2EsIHRoaXMsIG9wdGlvbnMsIHZldG9dKTsKICAgIGlmICh2ZXRvLnZldG8pIHsKICAgICAgICBsb2coJ2FqYXhTdWJtaXQ6IHN1Ym1pdCB2ZXRvZWQgdmlhIGZvcm0tc3VibWl0LXZhbGlkYXRlIHRyaWdnZXInKTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICB2YXIgcSA9ICQucGFyYW0oYSwgdHJhZGl0aW9uYWwpOwogICAgaWYgKHF4KSB7CiAgICAgICAgcSA9ICggcSA\\/ICd0aW1lb3V0JyA6ICdhYm9ydGVkJyk7CiAgICAgICAgICAgICAgICBsb2coJ2Fib3J0aW5nIHVwbG9hZC4uLiAnICsgZSk7CiAgICAgICAgICAgICAgICB0aGlzLmFib3J0ZWQgPSAxOwogICAgICAgICAgICAgICAgJGlvLmF0dHIoJ3NyYycsIHMuaWZyYW1lU3JjKTsgLy8gYWJvcnQgb3AgaW4gcHJvZ3Jlc3MKICAgICAgICAgICAgICAgIHhoci5lcnJvciA9IGU7CiAgICAgICAgICAgICAgICBpZiAocy5lcnJvcikKICAgICAgICAgICAgICAgICAgICBzLmVycm9yLmNhbGwocy5jb250ZXh0LCB4aHIsIGUsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICBpZiAoZykKICAgICAgICAgICAgICAgICAgICAkLmV2ZW50LnRyaWdnZXIoImFqYXhFcnJvciIsIFt4aHIsIHMsIGVdKTsKICAgICAgICAgICAgICAgIGlmIChzLmNvbXBsZXRlKQogICAgICAgICAgICAgICAgICAgIHMuY29tcGxldGUuY2FsbChzLmNvbnRleHQsIHhociwgZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBnID0gcy5nbG9iYWw7CiAgICAgICAgLy8gdHJpZ2dlciBhamF4IGdsb2JhbCBldmVudHMgc28gdGhhdCBhY3Rpdml0eS9ibG9jayBpbmRpY2F0b3JzIHdvcmsgbGlrZSBub3JtYWwKICAgICAgICBpZiAoZyAmJiAwID09PSAkLmFjdGl2ZSsrKSB7CiAgICAgICAgICAgICQuZXZlbnQudHJpZ2dlcigiYWpheFN0YXJ0Iik7CiAgICAgICAgfQogICAgICAgIGlmIChnKSB7CiAgICAgICAgICAgICQuZXZlbnQudHJpZ2dlcigiYWpheFNlbmQiLCBbeGhyLCBzXSk7CiAgICAgICAgfQoKICAgICAgICBpZiAocy5iZWZvcmVTZW5kICYmIHMuYmVmb3JlU2VuZC5jYWxsKHMuY29udGV4dCwgeGhyLCBzKSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgaWYgKHMuZ2xvYmFsKSB7CiAgICAgICAgICAgICAgICAkLmFjdGl2ZS0tOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKHhoci5hYm9ydGVkKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIC8vIGFkZCBzdWJtaXR0aW5nIGVsZW1lbnQgdG8gZGF0YSBpZiB3ZSBrbm93IGl0CiAgICAgICAgc3ViID0gZm9ybS5jbGs7CiAgICAgICAgaWYgKHN1YikgewogICAgICAgICAgICBuID0gc3ViLm5hbWU7CiAgICAgICAgICAgIGlmIChuICYmICFzdWIuZGlzYWJsZWQpIHsKICAgICAgICAgICAgICAgIHMuZXh0cmFEYXRhID0gcy5leHRyYURhdGEgfHwge307CiAgICAgICAgICAgICAgICBzLmV4dHJhRGF0YVtuXSA9IHN1Yi52YWx1ZTsKICAgICAgICAgICAgICAgIGlmIChzdWIudHlwZSA9PSAiaW1hZ2UiKSB7CiAgICAgICAgICAgICAgICAgICAgcy5leHRyYURhdGFbbisnLngnXSA9IGZvcm0uY2xrX3g7CiAgICAgICAgICAgICAgICAgICAgcy5leHRyYURhdGFbbisnLnknXSA9IGZvcm0uY2xrX3k7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgdmFyIENMSUVOVF9USU1FT1VUX0FCT1JUID0gMTsKICAgICAgICB2YXIgU0VSVkVSX0FCT1JUID0gMjsKCiAgICAgICAgZnVuY3Rpb24gZ2V0RG9jKGZyYW1lKSB7CiAgICAgICAgICAgIHZhciBkb2MgPSBmcmFtZS5jb250ZW50V2luZG93ID8gZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudCA6IGZyYW1lLmNvbnRlbnREb2N1bWVudCA\\/IGIudGV4dENvbnRlbnQgOiBiLmlubmVyVGV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGR0ID09ICd4bWwnICYmICF4aHIucmVzcG9uc2VYTUwgJiYgeGhyLnJlc3BvbnNlVGV4dCkgewogICAgICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZVhNTCA9IHRvWG1sKHhoci5yZXNwb25zZVRleHQpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGh0dHBEYXRhKHhociwgZHQsIHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSAncGFyc2VyZXJyb3InOwogICAgICAgICAgICAgICAgICAgIHhoci5lcnJvciA9IGVyck1zZyA9IChlIHx8IHN0YXR1cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIGxvZygnZXJyb3IgY2F1Z2h0OiAnLGUpOwogICAgICAgICAgICAgICAgc3RhdHVzID0gJ2Vycm9yJzsKICAgICAgICAgICAgICAgIHhoci5lcnJvciA9IGVyck1zZyA9IChlIHx8IHN0YXR1cyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh4aHIuYWJvcnRlZCkgewogICAgICAgICAgICAgICAgbG9nKCd1cGxvYWQgYWJvcnRlZCcpOwogICAgICAgICAgICAgICAgc3RhdHVzID0gbnVsbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMpIHsgLy8gd2UndmUgc2V0IHhoci5zdGF0dXMKICAgICAgICAgICAgICAgIHN0YXR1cyA9ICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwIHx8IHhoci5zdGF0dXMgPT09IDMwNCkgPyAnc3VjY2VzcycgOiAnZXJyb3InOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBvcmRlcmluZyBvZiB0aGVzZSBjYWxsYmFja3MvdHJpZ2dlcnMgaXMgb2RkLCBidXQgdGhhdCdzIGhvdyAkLmFqYXggZG9lcyBpdAogICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnc3VjY2VzcycpIHsKICAgICAgICAgICAgICAgIGlmIChzLnN1Y2Nlc3MpCiAgICAgICAgICAgICAgICAgICAgcy5zdWNjZXNzLmNhbGwocy5jb250ZXh0LCBkYXRhLCAnc3VjY2VzcycsIHhocik7CiAgICAgICAgICAgICAgICBpZiAoZykKICAgICAgICAgICAgICAgICAgICAkLmV2ZW50LnRyaWdnZXIoImFqYXhTdWNjZXNzIiwgW3hociwgc10pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cykgewogICAgICAgICAgICAgICAgaWYgKGVyck1zZyA9PT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgICAgICAgIGVyck1zZyA9IHhoci5zdGF0dXNUZXh0OwogICAgICAgICAgICAgICAgaWYgKHMuZXJyb3IpCiAgICAgICAgICAgICAgICAgICAgcy5lcnJvci5jYWxsKHMuY29udGV4dCwgeGhyLCBzdGF0dXMsIGVyck1zZyk7CiAgICAgICAgICAgICAgICBpZiAoZykKICAgICAgICAgICAgICAgICAgICAkLmV2ZW50LnRyaWdnZXIoImFqYXhFcnJvciIsIFt4aHIsIHMsIGVyck1zZ10pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZykKICAgICAgICAgICAgICAgICQuZXZlbnQudHJpZ2dlcigiYWpheENvbXBsZXRlIiwgW3hociwgc10pOwoKICAgICAgICAgICAgaWYgKGcgJiYgISAtLSQuYWN0aXZlKSB7CiAgICAgICAgICAgICAgICAkLmV2ZW50LnRyaWdnZXIoImFqYXhTdG9wIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzLmNvbXBsZXRlKQogICAgICAgICAgICAgICAgcy5jb21wbGV0ZS5jYWxsKHMuY29udGV4dCwgeGhyLCBzdGF0dXMpOwoKICAgICAgICAgICAgY2FsbGJhY2tQcm9jZXNzZWQgPSB0cnVlOwogICAgICAgICAgICBpZiAocy50aW1lb3V0KQogICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGUpOwoKICAgICAgICAgICAgLy8gY2xlYW4gdXAKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmICghcy5pZnJhbWVUYXJnZXQpCiAgICAgICAgICAgICAgICAgICAgJGlvLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlWE1MID0gbnVsbDsKICAgICAgICAgICAgfSwgMTAwKTsKICAgICAgICB9CgogICAgICAgIHZhciB0b1htbCA9ICQucGFyc2VYTUwgfHwgZnVuY3Rpb24ocywgZG9jKSB7IC8vIHVzZSBwYXJzZVhNTCBpZiBhdmFpbGFibGUgKGpRdWVyeSAxLjUrKQogICAgICAgICAgICBpZiAod2luZG93LkFjdGl2ZVhPYmplY3QpIHsKICAgICAgICAgICAgICAgIGRvYyA9IG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MRE9NJyk7CiAgICAgICAgICAgICAgICBkb2MuYXN5bmMgPSAnZmFsc2UnOwogICAgICAgICAgICAgICAgZG9jLmxvYWRYTUwocyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBkb2MgPSAobmV3IERPTVBhcnNlcigpKS5wYXJzZUZyb21TdHJpbmcocywgJ3RleHQveG1sJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIChkb2MgJiYgZG9jLmRvY3VtZW50RWxlbWVudCAmJiBkb2MuZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9ICdwYXJzZXJlcnJvcicpID8gZG9jIDogbnVsbDsKICAgICAgICB9OwogICAgICAgIHZhciBwYXJzZUpTT04gPSAkLnBhcnNlSlNPTiB8fCBmdW5jdGlvbihzKSB7CiAgICAgICAgICAgIC8qanNsaW50IGV2aWw6dHJ1ZSAqLwogICAgICAgICAgICByZXR1cm4gd2luZG93WydldmFsJ10oJygnICsgcyArICcpJyk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGh0dHBEYXRhID0gZnVuY3Rpb24oIHhociwgdHlwZSwgcyApIHsgLy8gbW9zdGx5IGxpZnRlZCBmcm9tIGpxMS40LjQKCiAgICAgICAgICAgIHZhciBjdCA9IHhoci5nZXRSZXNwb25zZUhlYWRlcignY29udGVudC10eXBlJykgfHwgJycsCiAgICAgICAgICAgICAgICB4bWwgPSB0eXBlID09PSAneG1sJyB8fCAhdHlwZSAmJiBjdC5pbmRleE9mKCd4bWwnKSA+PSAwLAogICAgICAgICAgICAgICAgZGF0YSA9IHhtbCA\/IHhoci5yZXNwb25zZVhNTCA6IHhoci5yZXNwb25zZVRleHQ7CgogICAgICAgICAgICBpZiAoeG1sICYmIGRhdGEuZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lID09PSAncGFyc2VyZXJyb3InKSB7CiAgICAgICAgICAgICAgICBpZiAoJC5lcnJvcikKICAgICAgICAgICAgICAgICAgICAkLmVycm9yKCdwYXJzZXJlcnJvcicpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzICYmIHMuZGF0YUZpbHRlcikgewogICAgICAgICAgICAgICAgZGF0YSA9IHMuZGF0YUZpbHRlcihkYXRhLCB0eXBlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2pzb24nIHx8ICF0eXBlICYmIGN0LmluZGV4T2YoJ2pzb24nKSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHBhcnNlSlNPTihkYXRhKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gInNjcmlwdCIgfHwgIXR5cGUgJiYgY3QuaW5kZXhPZigiamF2YXNjcmlwdCIpID49IDApIHsKICAgICAgICAgICAgICAgICAgICAkLmdsb2JhbEV2YWwoZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgICAgfTsKICAgIH0KfTsKCi8qKgogKiBhamF4Rm9ybSgpIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBmdWxseSBhdXRvbWF0aW5nIGZvcm0gc3VibWlzc2lvbi4KICoKICogVGhlIGFkdmFudGFnZXMgb2YgdXNpbmcgdGhpcyBtZXRob2QgaW5zdGVhZCBvZiBhamF4U3VibWl0KCkgYXJlOgogKgogKiAxOiBUaGlzIG1ldGhvZCB3aWxsIGluY2x1ZGUgY29vcmRpbmF0ZXMgZm9yIDxpbnB1dCB0eXBlPSJpbWFnZSIgLz4gZWxlbWVudHMgKGlmIHRoZSBlbGVtZW50CiAqICAgIGlzIHVzZWQgdG8gc3VibWl0IHRoZSBmb3JtKS4KICogMi4gVGhpcyBtZXRob2Qgd2lsbCBpbmNsdWRlIHRoZSBzdWJtaXQgZWxlbWVudCdzIG5hbWUvdmFsdWUgZGF0YSAoZm9yIHRoZSBlbGVtZW50IHRoYXQgd2FzCiAqICAgIHVzZWQgdG8gc3VibWl0IHRoZSBmb3JtKS4KICogMy4gVGhpcyBtZXRob2QgYmluZHMgdGhlIHN1Ym1pdCgpIG1ldGhvZCB0byB0aGUgZm9ybSBmb3IgeW91LgogKgogKiBUaGUgb3B0aW9ucyBhcmd1bWVudCBmb3IgYWpheEZvcm0gd29ya3MgZXhhY3RseSBhcyBpdCBkb2VzIGZvciBhamF4U3VibWl0LiAgYWpheEZvcm0gbWVyZWx5CiAqIHBhc3NlcyB0aGUgb3B0aW9ucyBhcmd1bWVudCBhbG9uZyBhZnRlciBwcm9wZXJseSBiaW5kaW5nIGV2ZW50cyBmb3Igc3VibWl0IGVsZW1lbnRzIGFuZAogKiB0aGUgZm9ybSBpdHNlbGYuCiAqLwokLmZuLmFqYXhGb3JtID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICBvcHRpb25zLmRlbGVnYXRpb24gPSBvcHRpb25zLmRlbGVnYXRpb24gJiYgJC5pc0Z1bmN0aW9uKCQuZm4ub24pOwogICAgCiAgICAvLyBpbiBqUXVlcnkgMS4zKyB3ZSBjYW4gZml4IG1pc3Rha2VzIHdpdGggdGhlIHJlYWR5IHN0YXRlCiAgICBpZiAoIW9wdGlvbnMuZGVsZWdhdGlvbiAmJiB0aGlzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHZhciBvID0geyBzOiB0aGlzLnNlbGVjdG9yLCBjOiB0aGlzLmNvbnRleHQgfTsKICAgICAgICBpZiAoISQuaXNSZWFkeSAmJiBvLnMpIHsKICAgICAgICAgICAgbG9nKCdET00gbm90IHJlYWR5LCBxdWV1aW5nIGFqYXhGb3JtJyk7CiAgICAgICAgICAgICQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkKG8ucyxvLmMpLmFqYXhGb3JtKG9wdGlvbnMpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQogICAgICAgIC8vIGlzIHlvdXIgRE9NIHJlYWR5PyAgaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9UdXRvcmlhbHM6SW50cm9kdWNpbmdfJChkb2N1bWVudCkucmVhZHkoKQogICAgICAgIGxvZygndGVybWluYXRpbmc7IHplcm8gZWxlbWVudHMgZm91bmQgYnkgc2VsZWN0b3InICsgKCQuaXNSZWFkeSA\/ICcnIDogJyAoRE9NIG5vdCByZWFkeSknKSk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgaWYgKCBvcHRpb25zLmRlbGVnYXRpb24gKSB7CiAgICAgICAgJChkb2N1bWVudCkKICAgICAgICAgICAgLm9mZignc3VibWl0LmZvcm0tcGx1Z2luJywgdGhpcy5zZWxlY3RvciwgZG9BamF4U3VibWl0KQogICAgICAgICAgICAub2ZmKCdjbGljay5mb3JtLXBsdWdpbicsIHRoaXMuc2VsZWN0b3IsIGNhcHR1cmVTdWJtaXR0aW5nRWxlbWVudCkKICAgICAgICAgICAgLm9uKCdzdWJtaXQuZm9ybS1wbHVnaW4nLCB0aGlzLnNlbGVjdG9yLCBvcHRpb25zLCBkb0FqYXhTdWJtaXQpCiAgICAgICAgICAgIC5vbignY2xpY2suZm9ybS1wbHVnaW4nLCB0aGlzLnNlbGVjdG9yLCBvcHRpb25zLCBjYXB0dXJlU3VibWl0dGluZ0VsZW1lbnQpOwogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIHJldHVybiB0aGlzLmFqYXhGb3JtVW5iaW5kKCkKICAgICAgICAuYmluZCgnc3VibWl0LmZvcm0tcGx1Z2luJywgb3B0aW9ucywgZG9BamF4U3VibWl0KQogICAgICAgIC5iaW5kKCdjbGljay5mb3JtLXBsdWdpbicsIG9wdGlvbnMsIGNhcHR1cmVTdWJtaXR0aW5nRWxlbWVudCk7Cn07CgovLyBwcml2YXRlIGV2ZW50IGhhbmRsZXJzICAgIApmdW5jdGlvbiBkb0FqYXhTdWJtaXQoZSkgewogICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi8KICAgIHZhciBvcHRpb25zID0gZS5kYXRhOwogICAgaWYgKCFlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7IC8vIGlmIGV2ZW50IGhhcyBiZWVuIGNhbmNlbGVkLCBkb24ndCBwcm9jZWVkCiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICQodGhpcykuYWpheFN1Ym1pdChvcHRpb25zKTsKICAgIH0KfQogICAgCmZ1bmN0aW9uIGNhcHR1cmVTdWJtaXR0aW5nRWxlbWVudChlKSB7CiAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqLwogICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0OwogICAgdmFyICRlbCA9ICQodGFyZ2V0KTsKICAgIGlmICghKCRlbC5pcygiOnN1Ym1pdCxpbnB1dDppbWFnZSIpKSkgewogICAgICAgIC8vIGlzIHRoaXMgYSBjaGlsZCBlbGVtZW50IG9mIHRoZSBzdWJtaXQgZWw\\/OmNvbG9yfGRhdGV8ZGF0ZXRpbWV8ZW1haWx8bW9udGh8bnVtYmVyfHBhc3N3b3JkfHJhbmdlfHNlYXJjaHx0ZWx8dGV4dHx0aW1lfHVybHx3ZWVrKSQvaTsgLy8gJ2hpZGRlbicgaXMgbm90IGluIHRoaXMgbGlzdAogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgdCA9IHRoaXMudHlwZSwgdGFnID0gdGhpcy50YWdOYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgaWYgKHJlLnRlc3QodCkgfHwgdGFnID09ICd0ZXh0YXJlYScpIHsKICAgICAgICAgICAgdGhpcy52YWx1ZSA9ICcnOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmICh0ID09ICdjaGVja2JveCcgfHwgdCA9PSAncmFkaW8nKSB7CiAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmICh0YWcgPT0gJ3NlbGVjdCcpIHsKICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gLTE7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGluY2x1ZGVIaWRkZW4pIHsKICAgICAgICAgICAgLy8gaW5jbHVkZUhpZGRlbiBjYW4gYmUgdGhlIHZhbHVkIHRydWUsIG9yIGl0IGNhbiBiZSBhIHNlbGVjdG9yIHN0cmluZwogICAgICAgICAgICAvLyBpbmRpY2F0aW5nIGEgc3BlY2lhbCB0ZXN0OyBmb3IgZXhhbXBsZToKICAgICAgICAgICAgLy8gICQoJyNteUZvcm0nKS5jbGVhckZvcm0oJy5zcGVjaWFsOmhpZGRlbicpCiAgICAgICAgICAgIC8vIHRoZSBhYm92ZSB3b3VsZCBjbGVhbiBoaWRkZW4gaW5wdXRzIHRoYXQgaGF2ZSB0aGUgY2xhc3Mgb2YgJ3NwZWNpYWwnCiAgICAgICAgICAgIGlmICggKGluY2x1ZGVIaWRkZW4gPT09IHRydWUgJiYgL2hpZGRlbi8udGVzdCh0KSkgfHwKICAgICAgICAgICAgICAgICAodHlwZW9mIGluY2x1ZGVIaWRkZW4gPT0gJ3N0cmluZycgJiYgJCh0aGlzKS5pcyhpbmNsdWRlSGlkZGVuKSkgKQogICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9ICcnOwogICAgICAgIH0KICAgIH0pOwp9OwoKLyoqCiAqIFJlc2V0cyB0aGUgZm9ybSBkYXRhLiAgQ2F1c2VzIGFsbCBmb3JtIGVsZW1lbnRzIHRvIGJlIHJlc2V0IHRvIHRoZWlyIG9yaWdpbmFsIHZhbHVlLgogKi8KJC5mbi5yZXNldEZvcm0gPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gZ3VhcmQgYWdhaW5zdCBhbiBpbnB1dCB3aXRoIHRoZSBuYW1lIG9mICdyZXNldCcKICAgICAgICAvLyBub3RlIHRoYXQgSUUgcmVwb3J0cyB0aGUgcmVzZXQgZnVuY3Rpb24gYXMgYW4gJ29iamVjdCcKICAgICAgICBpZiAodHlwZW9mIHRoaXMucmVzZXQgPT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIHRoaXMucmVzZXQgPT0gJ29iamVjdCcgJiYgIXRoaXMucmVzZXQubm9kZVR5cGUpKSB7CiAgICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICB9CiAgICB9KTsKfTsKCi8qKgogKiBFbmFibGVzIG9yIGRpc2FibGVzIGFueSBtYXRjaGluZyBlbGVtZW50cy4KICovCiQuZm4uZW5hYmxlID0gZnVuY3Rpb24oYikgewogICAgaWYgKGIgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGIgPSB0cnVlOwogICAgfQogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLmRpc2FibGVkID0gIWI7CiAgICB9KTsKfTsKCi8qKgogKiBDaGVja3MvdW5jaGVja3MgYW55IG1hdGNoaW5nIGNoZWNrYm94ZXMgb3IgcmFkaW8gYnV0dG9ucyBhbmQKICogc2VsZWN0cy9kZXNlbGVjdHMgYW5kIG1hdGNoaW5nIG9wdGlvbiBlbGVtZW50cy4KICovCiQuZm4uc2VsZWN0ZWQgPSBmdW5jdGlvbihzZWxlY3QpIHsKICAgIGlmIChzZWxlY3QgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHNlbGVjdCA9IHRydWU7CiAgICB9CiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciB0ID0gdGhpcy50eXBlOwogICAgICAgIGlmICh0ID09ICdjaGVja2JveCcgfHwgdCA9PSAncmFkaW8nKSB7CiAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IHNlbGVjdDsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAodGhpcy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gJ29wdGlvbicpIHsKICAgICAgICAgICAgdmFyICRzZWwgPSAkKHRoaXMpLnBhcmVudCgnc2VsZWN0Jyk7CiAgICAgICAgICAgIGlmIChzZWxlY3QgJiYgJHNlbFswXSAmJiAkc2VsWzBdLnR5cGUgPT0gJ3NlbGVjdC1vbmUnKSB7CiAgICAgICAgICAgICAgICAvLyBkZXNlbGVjdCBhbGwgb3RoZXIgb3B0aW9ucwogICAgICAgICAgICAgICAgJHNlbC5maW5kKCdvcHRpb24nKS5zZWxlY3RlZChmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHNlbGVjdDsKICAgICAgICB9CiAgICB9KTsKfTsKCi8vIGV4cG9zZSBkZWJ1ZyB2YXIKJC5mbi5hamF4U3VibWl0LmRlYnVnID0gZmFsc2U7CgovLyBoZWxwZXIgZm4gZm9yIGNvbnNvbGUgbG9nZ2luZwpmdW5jdGlvbiBsb2coKSB7CiAgICBpZiAoISQuZm4uYWpheFN1Ym1pdC5kZWJ1ZykgCiAgICAgICAgcmV0dXJuOwogICAgdmFyIG1zZyA9ICdbanF1ZXJ5LmZvcm1dICcgKyBBcnJheS5wcm90b3R5cGUuam9pbi5jYWxsKGFyZ3VtZW50cywnJyk7CiAgICBpZiAod2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nKSB7CiAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKG1zZyk7CiAgICB9CiAgICBlbHNlIGlmICh3aW5kb3cub3BlcmEgJiYgd2luZG93Lm9wZXJhLnBvc3RFcnJvcikgewogICAgICAgIHdpbmRvdy5vcGVyYS5wb3N0RXJyb3IobXNnKTsKICAgIH0KfQoKfSkoalF1ZXJ5KTsK",
    "size": "37332"
}