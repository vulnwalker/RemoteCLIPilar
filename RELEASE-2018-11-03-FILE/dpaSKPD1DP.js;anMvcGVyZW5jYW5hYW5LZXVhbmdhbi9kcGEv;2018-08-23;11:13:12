{
    "namaFile": "js\/perencanaanKeuangan\/dpa\/dpaSKPD1DP.js",
    "lastUpdate": "2018-08-23+11:13:12.78",
    "contentFile": "dmFyIGRwYVNLUEQxRFBGaWx0ZXJTS1BEID0gbmV3IFNrcGRDbHMoewogIHByZWZpeDogImRwYVNLUEQxRFAiLAogIGZvcm1OYW1lOiAiZHBhU0tQRDFEUEZvcm0iLAoKICBwaWxpaFVydXNhbmZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgLy8gZHBhU0tQRDFEUC5yZWZyZXNoTGlzdCh0cnVlKTsKICAgIGRwYVNLUEQxRFAuZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwaWxpaEJpZGFuZ0FmdGVyOiBmdW5jdGlvbigpIHsKICAgIC8vIGRwYVNLUEQxRFAucmVmcmVzaExpc3QodHJ1ZSk7CiAgICBkcGFTS1BEMURQLmZpbHRlclJlbmRlcigpOwogIH0sCiAgcGlsaWhVbml0QWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgLy8gZHBhU0tQRDFEUC5yZWZyZXNoTGlzdCh0cnVlKTsKICAgIGRwYVNLUEQxRFAuZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwaWxpaFN1YlVuaXRBZnRlcjogZnVuY3Rpb24oKSB7CiAgICAvLyBkcGFTS1BEMURQLnJlZnJlc2hMaXN0KHRydWUpOwogICAgZHBhU0tQRDFEUC5maWx0ZXJSZW5kZXIoKTsKICB9LAogIHBpbGloU2Vrc2lBZnRlcjogZnVuY3Rpb24oKSB7CiAgICAvLyBkcGFTS1BEMURQLnJlZnJlc2hMaXN0KHRydWUpOwogICAgZHBhU0tQRDFEUC5maWx0ZXJSZW5kZXIoKTsKICB9Cn0pOwp2YXIgZHBhU0tQRDFEUCA9IG5ldyBEYWZ0YXJPYmoyKHsKICBwcmVmaXg6ICJkcGFTS1BEMURQIiwKICB1cmw6ICJwZ0tldS5waHA\/UGc9ZHBhU0tQRDFEUCIsCiAgZm9ybU5hbWU6ICJkcGFTS1BEMURQRm9ybSIsCiAgZHBhU0tQRDFEUF9mb3JtOiAiMCIsIC8vZGVmYXVsdCBqcyBkcGFTS1BEMURQCiAgbG9hZGluZzogZnVuY3Rpb24oKSB7CiAgICAvL2FsZXJ0KCdsb2FkaW5nJyk7CiAgICB0aGlzLnRvcEJhclJlbmRlcigpOwogICAgdGhpcy5maWx0ZXJSZW5kZXIoKTsKICAgIHRoaXMuZGFmdGFyUmVuZGVyKCk7CiAgICB0aGlzLnN1bUhhbFJlbmRlcigpOwogIH0sCiAgdG9wQmFyUmVuZGVyOiBmdW5jdGlvbigpewogICAgdmFyIG1lPXRoaXM7CiAgICAvL3JlbmRlciBzdWJ0aXRsZQogICAgJC5hamF4KHsKICAgICAgdXJsOiB0aGlzLnVybCsnJnRpcGU9c3VidGl0bGUnLAogICAgICB0eXBlOidQT1NUJywKICAgICAgZGF0YTokKCcjJyt0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICB2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1lLnByZWZpeCsnX2NvbnRfdGl0bGUnKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7CiAgICAgIG1lLnRvcEJhclJlbmRlckFmdGVyKCkKICAgICAgfQogICAgfSk7CiAgfSwKICBub3RpY2VTeW5jOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybWNvdmVyIjsKICAgICQuYWpheCh7CiAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgZGF0YTogJCgiIyIgKyB0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1ub3RpY2VTeW5jIiwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAiaGlkZGVuIjsKICAgICAgICAgIGFkZENvdmVyUGFnZTIoY292ZXIsIDk5OSwgdHJ1ZSwgZmFsc2UpOwogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfSwKICBjbG9zZU5vdGljZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgbWUuU3luYygpOwogIH0sCiAgU3luYzogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgdmFyIGNvdmVyID0gdGhpcy5wcmVmaXggKyAiX2Zvcm1jb3ZlckxvYWRpbmciOwogICAgYWRkQ292ZXJQYWdlMihjb3ZlciwgOTk5OSwgdHJ1ZSwgZmFsc2UpOwogICAgJC5hamF4KHsKICAgICAgdHlwZTogIlBPU1QiLAogICAgICBkYXRhOiB7IGtvZGVTS1BEOiAkKCIja29kZVNLUEQiKS52YWwoKSB9LAogICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPXN5bmMiLAogICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgZGVsRWxlbShjb3Zlcik7CiAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgYWxlcnQoInN5bmMgc3Vrc2VzIik7CiAgICAgICAgICBtZS5DbG9zZSgpOwogICAgICAgICAgbWUucmVmcmVzaExpc3QodHJ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0sCiAgLy8gZmlsdGVyUmVuZGVyQWZ0ZXI6IGZ1bmN0aW9uKCkgewogIC8vICAgdGhpcy5kYWZ0YXJSZW5kZXIoKTsKICAvLyB9LAogIGRldGFpbDogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgZXJybXNnID0gdGhpcy5DZWtDaGVja2JveCgpOwogICAgaWYgKGVycm1zZyA9PSAiIikgewogICAgICB2YXIgYm94ID0gdGhpcy5HZXRDYnhDaGVja2VkKCk7CiAgICB9IGVsc2UgewogICAgICBhbGVydChlcnJtc2cpOwogICAgfQogIH0sCiAgZGFmdGFyUmVuZGVyOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7IC8vcmVuZGVyIGRhZnRhcgogICAgYWRkQ292ZXJQYWdlMigiZGFmdGFyX2NvdmVyIiwgMSwgdHJ1ZSwgdHJ1ZSwgewogICAgICByZW5kZXJUbzogdGhpcy5wcmVmaXggKyAiX2NvbnRfZGFmdGFyIiwKICAgICAgaW1nc3JjOiAiaW1hZ2VzL3dhaXQuZ2lmIiwKICAgICAgc3R5bGU6IHsgcG9zaXRpb246ICJhYnNvbHV0ZSIsIHRvcDogIjUiLCBsZWZ0OiAiNSIgfQogICAgfSk7CiAgICAkLmFqYXgoewogICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPWRhZnRhciIsCiAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgZGF0YTogJCgiIyIgKyB0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtZS5wcmVmaXggKyAiX2NvbnRfZGFmdGFyIikuaW5uZXJIVE1MID0KICAgICAgICAgIHJlc3AuY29udGVudDsKICAgICAgICBtZS5zdW1IYWxSZW5kZXIoKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBCYXJ1OiBmdW5jdGlvbigpewogICAgdmFyIG1lID0gdGhpczsKCiAgCQllcnJtc2cgPSAnJzsKCiAgCQlpZigkKCIjZmlsdGVyVXJ1c2FuIikudmFsKCkgPT0gJzAwJyl7CiAgCQkJZXJybXNnID0gIlBpbGloIFVydXNhbiI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyU0tQRCIpLnZhbCgpID09ICcwMCcpewogIAkJCWVycm1zZyA9ICJQaWxpaCBCaWRhbmciOwogIAkJfWVsc2UgaWYoJCgiI2ZpbHRlclNLUEQiKS52YWwoKSA9PSAnMDAnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggU0tQRCI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyQ29uY2F0UHJvZ3JhbSIpLnZhbCgpID09ICcnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggUHJvZ3JhbSI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyUSIpLnZhbCgpID09ICcnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggS2VnaWF0YW4iOwogIAkJfQogIAkJaWYoZXJybXNnID09JycpewogIAkJCXZhciBtZSA9IHRoaXM7CiAgCQkJdmFyIGFGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5mb3JtTmFtZSk7CiAgCQkJJC5hamF4KHsKICAJCQkgIHVybDogdGhpcy51cmwrJyZ0aXBlPUJhcnUnLAogIAkJCSAgdHlwZSA6ICdQT1NUJywKICAJCQkgIGRhdGE6JCgnIycrdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgCQkJICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgCQkJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CiAgCQkJCQlpZihyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgICAgICQoIiNuZXdCbGFua1BhZ2UiKS52YWwoIiIpOwogIAkJCQkJCWFGb3JtLmFjdGlvbj0gJ3BnS2V1LnBocD9QZz1kcGFTS1BEMURQSW5zJzsKICAJCQkJCQlhRm9ybS50YXJnZXQ9J19ibGFuayc7CiAgCQkJCQkJYUZvcm0uc3VibWl0KCk7CiAgCQkJCQkJYUZvcm0udGFyZ2V0PScnOwogIAkJCQkJfWVsc2V7CiAgCQkJCQkJYWxlcnQocmVzcC5lcnIpOwogIAkJCQkJfQogIAkJCSAgfQogIAkJCX0pOwogIAkJfWVsc2V7CiAgCQkJCWFsZXJ0KGVycm1zZyk7CiAgCQl9Cgl9LAogIG5ld0JsYW5rUGFnZTogZnVuY3Rpb24oKXsKICAgIHZhciBtZSA9IHRoaXM7CgogIAkJZXJybXNnID0gJyc7CgogIAkJaWYoJCgiI2ZpbHRlclVydXNhbiIpLnZhbCgpID09ICcwMCcpewogIAkJCWVycm1zZyA9ICJQaWxpaCBVcnVzYW4iOwogIAkJfWVsc2UgaWYoJCgiI2ZpbHRlclNLUEQiKS52YWwoKSA9PSAnMDAnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggQmlkYW5nIjsKICAJCX1lbHNlIGlmKCQoIiNmaWx0ZXJTS1BEIikudmFsKCkgPT0gJzAwJyl7CiAgCQkJZXJybXNnID0gIlBpbGloIFNLUEQiOwogIAkJfWVsc2UgaWYoJCgiI2ZpbHRlckNvbmNhdFByb2dyYW0iKS52YWwoKSA9PSAnJyl7CiAgCQkJZXJybXNnID0gIlBpbGloIFByb2dyYW0iOwogIAkJfWVsc2UgaWYoJCgiI2ZpbHRlclEiKS52YWwoKSA9PSAnJyl7CiAgCQkJZXJybXNnID0gIlBpbGloIEtlZ2lhdGFuIjsKICAJCX0KICAJCWlmKGVycm1zZyA9PScnKXsKICAJCQl2YXIgbWUgPSB0aGlzOwogIAkJCXZhciBhRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZm9ybU5hbWUpOwogIAkJCSQuYWpheCh7CiAgCQkJICB1cmw6IHRoaXMudXJsKycmdGlwZT1uZXdCbGFua1BhZ2UnLAogIAkJCSAgdHlwZSA6ICdQT1NUJywKICAJCQkgIGRhdGE6JCgnIycrdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgCQkJICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgCQkJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CiAgCQkJCQlpZihyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgICAgICQoIiNuZXdCbGFua1BhZ2UiKS52YWwoIjEiKTsKICAJCQkJCQlhRm9ybS5hY3Rpb249ICdwZ0tldS5waHA\",
    "size": "26081"
}