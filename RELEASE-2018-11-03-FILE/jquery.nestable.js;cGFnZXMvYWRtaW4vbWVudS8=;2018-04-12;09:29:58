{
    "namaFile": "pages\/admin\/menu\/jquery.nestable.js",
    "lastUpdate": "2018-04-12+09:29:58.41",
    "contentFile": "LyohCiAqIE5lc3RhYmxlIGpRdWVyeSBQbHVnaW4gLSBDb3B5cmlnaHQgKGMpIDIwMTQgUmFtb24gU21pdCAtIGh0dHBzOi8vZ2l0aHViLmNvbS9SYW1vblNtaXQvTmVzdGFibGUKICovCgooZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7CiAgICB2YXIgaGFzVG91Y2ggPSAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudDsKCiAgICAvKioKICAgICAqIERldGVjdCBDU1MgcG9pbnRlci1ldmVudHMgcHJvcGVydHkKICAgICAqIGV2ZW50cyBhcmUgbm9ybWFsbHkgZGlzYWJsZWQgb24gdGhlIGRyYWdnaW5nIGVsZW1lbnQgdG8gYXZvaWQgY29uZmxpY3RzCiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vYXVzaS9GZWF0dXJlLWRldGVjdGlvbi10ZWNobmlxdWUtZm9yLXBvaW50ZXItZXZlbnRzL2Jsb2IvbWFzdGVyL21vZGVybml6ci1wb2ludGVyZXZlbnRzLmpzCiAgICAgKi8KICAgIHZhciBoYXNQb2ludGVyRXZlbnRzID0gKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLAogICAgICAgICAgICBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICAgICAgICBpZiAoISgncG9pbnRlckV2ZW50cycgaW4gZWwuc3R5bGUpKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdhdXRvJzsKICAgICAgICBlbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ3gnOwogICAgICAgIGRvY0VsLmFwcGVuZENoaWxkKGVsKTsKICAgICAgICB2YXIgc3VwcG9ydHMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgJycpLnBvaW50ZXJFdmVudHMgPT09ICdhdXRvJzsKICAgICAgICBkb2NFbC5yZW1vdmVDaGlsZChlbCk7CiAgICAgICAgcmV0dXJuICEhc3VwcG9ydHM7CiAgICB9KSgpOwoKICAgIHZhciBkZWZhdWx0cyA9IHsKICAgICAgICBjb250ZW50Q2FsbGJhY2s6IGZ1bmN0aW9uKGl0ZW0pIHtyZXR1cm4gaXRlbS5jb250ZW50IHx8ICcnID8gaXRlbS5jb250ZW50IDogaXRlbS5pZDt9LAogICAgICAgIGxpc3ROb2RlTmFtZTogJ29sJywKICAgICAgICBpdGVtTm9kZU5hbWU6ICdsaScsCiAgICAgICAgaGFuZGxlTm9kZU5hbWU6ICdkaXYnLAogICAgICAgIGNvbnRlbnROb2RlTmFtZTogJ3NwYW4nLAogICAgICAgIHJvb3RDbGFzczogJ2RkJywKICAgICAgICBsaXN0Q2xhc3M6ICdkZC1saXN0JywKICAgICAgICBpdGVtQ2xhc3M6ICdkZC1pdGVtJywKICAgICAgICBkcmFnQ2xhc3M6ICdkZC1kcmFnZWwnLAogICAgICAgIGhhbmRsZUNsYXNzOiAnZGQtaGFuZGxlJywKICAgICAgICBjb250ZW50Q2xhc3M6ICdkZC1jb250ZW50JywKICAgICAgICBjb2xsYXBzZWRDbGFzczogJ2RkLWNvbGxhcHNlZCcsCiAgICAgICAgcGxhY2VDbGFzczogJ2RkLXBsYWNlaG9sZGVyJywKICAgICAgICBub0RyYWdDbGFzczogJ2RkLW5vZHJhZycsCiAgICAgICAgbm9DaGlsZHJlbkNsYXNzOiAnZGQtbm9jaGlsZHJlbicsCiAgICAgICAgZW1wdHlDbGFzczogJ2RkLWVtcHR5JywKICAgICAgICBleHBhbmRCdG5IVE1MOiAnPGJ1dHRvbiBjbGFzcz0iZGQtZXhwYW5kIiBkYXRhLWFjdGlvbj0iZXhwYW5kIiB0eXBlPSJidXR0b24iPkV4cGFuZDwvYnV0dG9uPicsCiAgICAgICAgY29sbGFwc2VCdG5IVE1MOiAnPGJ1dHRvbiBjbGFzcz0iZGQtY29sbGFwc2UiIGRhdGEtYWN0aW9uPSJjb2xsYXBzZSIgdHlwZT0iYnV0dG9uIj5Db2xsYXBzZTwvYnV0dG9uPicsCiAgICAgICAgZ3JvdXA6IDAsCiAgICAgICAgbWF4RGVwdGg6IDUsCiAgICAgICAgdGhyZXNob2xkOiAyMCwKICAgICAgICBmaXhlZERlcHRoOiBmYWxzZSwgLy9maXhlZCBpdGVtJ3MgZGVwdGgKICAgICAgICBmaXhlZDogZmFsc2UsCiAgICAgICAgaW5jbHVkZUNvbnRlbnQ6IGZhbHNlLAogICAgICAgIHNjcm9sbDogZmFsc2UsCiAgICAgICAgc2Nyb2xsU2Vuc2l0aXZpdHk6IDEsCiAgICAgICAgc2Nyb2xsU3BlZWQ6IDUsCiAgICAgICAgc2Nyb2xsVHJpZ2dlcnM6IHsKICAgICAgICAgICAgdG9wOiA0MCwKICAgICAgICAgICAgbGVmdDogNDAsCiAgICAgICAgICAgIHJpZ2h0OiAtNDAsCiAgICAgICAgICAgIGJvdHRvbTogLTQwCiAgICAgICAgfSwKICAgICAgICBlZmZlY3Q6IHsKICAgICAgICAgICAgYW5pbWF0aW9uOiAnbm9uZScsCiAgICAgICAgICAgIHRpbWU6ICdzbG93JwogICAgICAgIH0sCiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKGwsIGUsIHApIHt9LAogICAgICAgIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbihsLCBlLCBwKSB7fSwKICAgICAgICBiZWZvcmVEcmFnU3RvcDogZnVuY3Rpb24obCwgZSwgcCkge30sCiAgICAgICAgbGlzdFJlbmRlcmVyOiBmdW5jdGlvbihjaGlsZHJlbiwgb3B0aW9ucykgewogICAgICAgICAgICB2YXIgaHRtbCA9ICc8JyArIG9wdGlvbnMubGlzdE5vZGVOYW1lICsgJyBjbGFzcz0iJyArIG9wdGlvbnMubGlzdENsYXNzICsgJyI+JzsKICAgICAgICAgICAgaHRtbCArPSBjaGlsZHJlbjsKICAgICAgICAgICAgaHRtbCArPSAnPC8nICsgb3B0aW9ucy5saXN0Tm9kZU5hbWUgKyAnPic7CgogICAgICAgICAgICByZXR1cm4gaHRtbDsKICAgICAgICB9LAogICAgICAgIGl0ZW1SZW5kZXJlcjogZnVuY3Rpb24oaXRlbV9hdHRycywgY29udGVudCwgY2hpbGRyZW4sIG9wdGlvbnMsIGl0ZW0pIHsKICAgICAgICAgICAgdmFyIGl0ZW1fYXR0cnNfc3RyaW5nID0gJC5tYXAoaXRlbV9hdHRycywgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgICAgICAgICAgcmV0dXJuICcgJyArIGtleSArICc9IicgKyB2YWx1ZSArICciJzsKICAgICAgICAgICAgfSkuam9pbignICcpOwoKICAgICAgICAgICAgdmFyIGh0bWwgPSAnPCcgKyBvcHRpb25zLml0ZW1Ob2RlTmFtZSArIGl0ZW1fYXR0cnNfc3RyaW5nICsgJz4nOwogICAgICAgICAgICBodG1sICs9ICc8JyArIG9wdGlvbnMuaGFuZGxlTm9kZU5hbWUgKyAnIGNsYXNzPSInICsgb3B0aW9ucy5oYW5kbGVDbGFzcyArICciPic7CiAgICAgICAgICAgIGh0bWwgKz0gJzwnICsgb3B0aW9ucy5jb250ZW50Tm9kZU5hbWUgKyAnIGNsYXNzPSInICsgb3B0aW9ucy5jb250ZW50Q2xhc3MgKyAnIj4nOwogICAgICAgICAgICBodG1sICs9IGNvbnRlbnQ7CiAgICAgICAgICAgIGh0bWwgKz0gJzwvJyArIG9wdGlvbnMuY29udGVudE5vZGVOYW1lICsgJz4nOwogICAgICAgICAgICBodG1sICs9ICc8LycgKyBvcHRpb25zLmhhbmRsZU5vZGVOYW1lICsgJz4nOwogICAgICAgICAgICBodG1sICs9IGNoaWxkcmVuOwogICAgICAgICAgICBodG1sICs9ICc8LycgKyBvcHRpb25zLml0ZW1Ob2RlTmFtZSArICc+JzsKCiAgICAgICAgICAgIHJldHVybiBodG1sOwogICAgICAgIH0KICAgIH07CgogICAgZnVuY3Rpb24gUGx1Z2luKGVsZW1lbnQsIG9wdGlvbnMpIHsKICAgICAgICB0aGlzLncgID0gJChkb2N1bWVudCk7CiAgICAgICAgdGhpcy5lbCA9ICQoZWxlbWVudCk7CiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgZGVmYXVsdHM7CgogICAgICAgIGlmIChvcHRpb25zLnJvb3RDbGFzcyAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMucm9vdENsYXNzICE9PSAnZGQnKSB7CiAgICAgICAgICAgIG9wdGlvbnMubGlzdENsYXNzICAgICAgID0gb3B0aW9ucy5saXN0Q2xhc3MgPyBvcHRpb25zLmxpc3RDbGFzcyA6IG9wdGlvbnMucm9vdENsYXNzICsgJy1saXN0JzsKICAgICAgICAgICAgb3B0aW9ucy5pdGVtQ2xhc3MgICAgICAgPSBvcHRpb25zLml0ZW1DbGFzcyA\/IG9wdGlvbnMuaXRlbUNsYXNzIDogb3B0aW9ucy5yb290Q2xhc3MgKyAnLWl0ZW0nOwogICAgICAgICAgICBvcHRpb25zLmRyYWdDbGFzcyAgICAgICA9IG9wdGlvbnMuZHJhZ0NsYXNzID8gb3B0aW9ucy5kcmFnQ2xhc3MgOiBvcHRpb25zLnJvb3RDbGFzcyArICctZHJhZ2VsJzsKICAgICAgICAgICAgb3B0aW9ucy5oYW5kbGVDbGFzcyAgICAgPSBvcHRpb25zLmhhbmRsZUNsYXNzID8gb3B0aW9ucy5oYW5kbGVDbGFzcyA6IG9wdGlvbnMucm9vdENsYXNzICsgJy1oYW5kbGUnOwogICAgICAgICAgICBvcHRpb25zLmNvbGxhcHNlZENsYXNzICA9IG9wdGlvbnMuY29sbGFwc2VkQ2xhc3MgPyBvcHRpb25zLmNvbGxhcHNlZENsYXNzIDogb3B0aW9ucy5yb290Q2xhc3MgKyAnLWNvbGxhcHNlZCc7CiAgICAgICAgICAgIG9wdGlvbnMucGxhY2VDbGFzcyAgICAgID0gb3B0aW9ucy5wbGFjZUNsYXNzID8gb3B0aW9ucy5wbGFjZUNsYXNzIDogb3B0aW9ucy5yb290Q2xhc3MgKyAnLXBsYWNlaG9sZGVyJzsKICAgICAgICAgICAgb3B0aW9ucy5ub0RyYWdDbGFzcyAgICAgPSBvcHRpb25zLm5vRHJhZ0NsYXNzID8gb3B0aW9ucy5ub0RyYWdDbGFzcyA6IG9wdGlvbnMucm9vdENsYXNzICsgJy1ub2RyYWcnOwogICAgICAgICAgICBvcHRpb25zLm5vQ2hpbGRyZW5DbGFzcyA9IG9wdGlvbnMubm9DaGlsZHJlbkNsYXNzID8gb3B0aW9ucy5ub0NoaWxkcmVuQ2xhc3MgOiBvcHRpb25zLnJvb3RDbGFzcyArICctbm9jaGlsZHJlbic7CiAgICAgICAgICAgIG9wdGlvbnMuZW1wdHlDbGFzcyAgICAgID0gb3B0aW9ucy5lbXB0eUNsYXNzID8gb3B0aW9ucy5lbXB0eUNsYXNzIDogb3B0aW9ucy5yb290Q2xhc3MgKyAnLWVtcHR5JzsKICAgICAgICB9CgogICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7CgogICAgICAgIC8vIGJ1aWxkIEhUTUwgZnJvbSBzZXJpYWxpemVkIEpTT04gaWYgcGFzc2VkCiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5qc29uICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdGhpcy5fYnVpbGQoKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuaW5pdCgpOwogICAgfQoKICAgIFBsdWdpbi5wcm90b3R5cGUgPSB7CgogICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgbGlzdCA9IHRoaXM7CgogICAgICAgICAgICBsaXN0LnJlc2V0KCk7CiAgICAgICAgICAgIGxpc3QuZWwuZGF0YSgnbmVzdGFibGUtZ3JvdXAnLCB0aGlzLm9wdGlvbnMuZ3JvdXApOwogICAgICAgICAgICBsaXN0LnBsYWNlRWwgPSAkKCc8ZGl2IGNsYXNzPSInICsgbGlzdC5vcHRpb25zLnBsYWNlQ2xhc3MgKyAnIi8+Jyk7CgogICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLmVsLmZpbmQobGlzdC5vcHRpb25zLml0ZW1Ob2RlTmFtZSk7CiAgICAgICAgICAgICQuZWFjaChpdGVtcywgZnVuY3Rpb24oaywgZWwpIHsKICAgICAgICAgICAgICAgIHZhciBpdGVtID0gJChlbCksCiAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gaXRlbS5wYXJlbnQoKTsKICAgICAgICAgICAgICAgIGxpc3Quc2V0UGFyZW50KGl0ZW0pOwogICAgICAgICAgICAgICAgaWYgKHBhcmVudC5oYXNDbGFzcyhsaXN0Lm9wdGlvbnMuY29sbGFwc2VkQ2xhc3MpKSB7CiAgICAgICAgICAgICAgICAgICAgbGlzdC5jb2xsYXBzZUl0ZW0ocGFyZW50LnBhcmVudCgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBBcHBlbmQgdGhlIC5kZC1lbXB0eSBkaXYgaWYgdGhlIGxpc3QgZG9uJ3QgaGF2ZSBhbnkgaXRlbXMgb24gaW5pdAogICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkgewogICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRFbXB0eUVsZW1lbnQodGhpcy5lbCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxpc3QuZWwub24oJ2NsaWNrJywgJ2J1dHRvbicsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIGlmIChsaXN0LmRyYWdFbCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCksCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gdGFyZ2V0LmRhdGEoJ2FjdGlvbicpLAogICAgICAgICAgICAgICAgICAgIGl0ZW0gPSB0YXJnZXQucGFyZW50cyhsaXN0Lm9wdGlvbnMuaXRlbU5vZGVOYW1lKS5lcSgwKTsKICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdjb2xsYXBzZScpIHsKICAgICAgICAgICAgICAgICAgICBsaXN0LmNvbGxhcHNlSXRlbShpdGVtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdleHBhbmQnKSB7CiAgICAgICAgICAgICAgICAgICAgbGlzdC5leHBhbmRJdGVtKGl0ZW0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHZhciBvblN0YXJ0RXZlbnQgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlID0gJChlLnRhcmdldCk7CiAgICAgICAgICAgICAgICBpZiAoIWhhbmRsZS5oYXNDbGFzcyhsaXN0Lm9wdGlvbnMuaGFuZGxlQ2xhc3MpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZS5jbG9zZXN0KCcuJyArIGxpc3Qub3B0aW9ucy5ub0RyYWdDbGFzcykubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlID0gaGFuZGxlLmNsb3Nlc3QoJy4nICsgbGlzdC5vcHRpb25zLmhhbmRsZUNsYXNzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICghaGFuZGxlLmxlbmd0aCB8fCBsaXN0LmRyYWdFbCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBsaXN0LmlzVG91Y2ggPSAvXnRvdWNoLy50ZXN0KGUudHlwZSk7CiAgICAgICAgICAgICAgICBpZiAobGlzdC5pc1RvdWNoICYmIGUudG91Y2hlcy5sZW5ndGggIT09IDEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgbGlzdC5kcmFnU3RhcnQoZS50b3VjaGVzID8gZS50b3VjaGVzWzBdIDogZSk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICB2YXIgb25Nb3ZlRXZlbnQgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICBpZiAobGlzdC5kcmFnRWwpIHsKICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgbGlzdC5kcmFnTW92ZShlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHZhciBvbkVuZEV2ZW50ID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgaWYgKGxpc3QuZHJhZ0VsKSB7CiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIGxpc3QuZHJhZ1N0b3AoZS50b3VjaGVzID8gZS5jaGFuZ2VkVG91Y2hlc1swXSA6IGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgaWYgKGhhc1RvdWNoKSB7CiAgICAgICAgICAgICAgICBsaXN0LmVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblN0YXJ0RXZlbnQsIGZhbHNlKTsKICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbk1vdmVFdmVudCwgZmFsc2UpOwogICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25FbmRFdmVudCwgZmFsc2UpOwogICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgb25FbmRFdmVudCwgZmFsc2UpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBsaXN0LmVsLm9uKCdtb3VzZWRvd24nLCBvblN0YXJ0RXZlbnQpOwogICAgICAgICAgICBsaXN0Lncub24oJ21vdXNlbW92ZScsIG9uTW92ZUV2ZW50KTsKICAgICAgICAgICAgbGlzdC53Lm9uKCdtb3VzZXVwJywgb25FbmRFdmVudCk7CgogICAgICAgICAgICB2YXIgZGVzdHJveU5lc3RhYmxlID0gZnVuY3Rpb24oKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoaGFzVG91Y2gpIHsKICAgICAgICAgICAgICAgICAgICBsaXN0LmVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblN0YXJ0RXZlbnQsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Nb3ZlRXZlbnQsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvbkVuZEV2ZW50LCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgb25FbmRFdmVudCwgZmFsc2UpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGxpc3QuZWwub2ZmKCdtb3VzZWRvd24nLCBvblN0YXJ0RXZlbnQpOwogICAgICAgICAgICAgICAgbGlzdC53Lm9mZignbW91c2Vtb3ZlJywgb25Nb3ZlRXZlbnQpOwogICAgICAgICAgICAgICAgbGlzdC53Lm9mZignbW91c2V1cCcsIG9uRW5kRXZlbnQpOwoKICAgICAgICAgICAgICAgIGxpc3QuZWwub2ZmKCdjbGljaycpOwogICAgICAgICAgICAgICAgbGlzdC5lbC51bmJpbmQoJ2Rlc3Ryb3ktbmVzdGFibGUnKTsKCiAgICAgICAgICAgICAgICBsaXN0LmVsLmRhdGEoIm5lc3RhYmxlIiwgbnVsbCk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBsaXN0LmVsLmJpbmQoJ2Rlc3Ryb3ktbmVzdGFibGUnLCBkZXN0cm95TmVzdGFibGUpOwoKICAgICAgICB9LAoKICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKQogICAgICAgIHsKICAgICAgICAgICAgdGhpcy5lbC50cmlnZ2VyKCdkZXN0cm95LW5lc3RhYmxlJyk7CiAgICAgICAgfSwKCiAgICAgICAgYWRkOiBmdW5jdGlvbiAoaXRlbSkKICAgICAgICB7CiAgICAgICAgICAgIHZhciBsaXN0Q2xhc3NTZWxlY3RvciA9ICcuJyArIHRoaXMub3B0aW9ucy5saXN0Q2xhc3M7CiAgICAgICAgICAgIHZhciB0cmVlID0gJCh0aGlzLmVsKS5jaGlsZHJlbihsaXN0Q2xhc3NTZWxlY3Rvcik7CgogICAgICAgICAgICBpZiAoaXRlbS5wYXJlbnRfaWQgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdHJlZSA9IHRyZWUuZmluZCgnW2RhdGEtaWQ9IicgKyBpdGVtLnBhcmVudF9pZCArICciXScpOwogICAgICAgICAgICAgICAgZGVsZXRlIGl0ZW0ucGFyZW50X2lkOwoKICAgICAgICAgICAgICAgIGlmICh0cmVlLmNoaWxkcmVuKGxpc3RDbGFzc1NlbGVjdG9yKS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICB0cmVlID0gdHJlZS5hcHBlbmQodGhpcy5vcHRpb25zLmxpc3RSZW5kZXJlcignJywgdGhpcy5vcHRpb25zKSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdHJlZSA9IHRyZWUuZmluZChsaXN0Q2xhc3NTZWxlY3RvciArICc6Zmlyc3QnKTsKICAgICAgICAgICAgICAgIHRoaXMuc2V0UGFyZW50KHRyZWUucGFyZW50KCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0cmVlLmFwcGVuZCh0aGlzLl9idWlsZEl0ZW0oaXRlbSwgdGhpcy5vcHRpb25zKSk7CiAgICAgICAgfSwKCiAgICAgICAgcmVwbGFjZTogZnVuY3Rpb24gKGl0ZW0pCiAgICAgICAgewogICAgICAgICAgICB2YXIgaHRtbCA9IHRoaXMuX2J1aWxkSXRlbShpdGVtLCB0aGlzLm9wdGlvbnMpOwoKICAgICAgICAgICAgdGhpcy5fZ2V0SXRlbUJ5SWQoaXRlbS5pZCkKICAgICAgICAgICAgICAgIC5yZXBsYWNlV2l0aChodG1sKTsKICAgICAgICB9LAoKICAgICAgICAvL3JlbW92ZXMgaXRlbSBhbmQgYWRkaXRpb25hbCBlbGVtZW50cyBmcm9tIGxpc3QKICAgICAgICByZW1vdmVJdGVtOiBmdW5jdGlvbiAoaXRlbSl7CiAgICAgICAgICAgIHZhciBvcHRzID0gdGhpcy5vcHRpb25zLAogICAgICAgICAgICAgICAgZWwgICA9IHRoaXMuZWw7CgogICAgICAgICAgICAvLyByZW1vdmUgaXRlbQogICAgICAgICAgICBpdGVtID0gaXRlbSB8fCB0aGlzOwogICAgICAgICAgICBpdGVtLnJlbW92ZSgpOwoKICAgICAgICAgICAgLy8gcmVtb3ZlIGVtcHR5IGNoaWxkcmVuIGxpc3RzCiAgICAgICAgICAgIHZhciBlbXB0eUxpc3RzU2VsZWN0b3IgPSAnLicgKyBvcHRzLmxpc3RDbGFzcwogICAgICAgICAgICAgICAgKyAnIC4nICsgb3B0cy5saXN0Q2xhc3MgKyAnOm5vdCg6aGFzKCopKSc7CiAgICAgICAgICAgICQoZWwpLmZpbmQoZW1wdHlMaXN0c1NlbGVjdG9yKS5yZW1vdmUoKTsKCiAgICAgICAgICAgIC8vIHJlbW92ZSBidXR0b25zIGlmIHBhcmVudHMgZG8gbm90IGhhdmUgY2hpbGRyZW4KICAgICAgICAgICAgdmFyIGJ1dHRvbnNTZWxlY3RvciA9ICdbZGF0YS1hY3Rpb249ImV4cGFuZCJdLCBbZGF0YS1hY3Rpb249ImNvbGxhcHNlIl0nOwogICAgICAgICAgICAkKGVsKS5maW5kKGJ1dHRvbnNTZWxlY3RvcikuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBzaWJsaW5ncyA9ICQodGhpcykuc2libGluZ3MoJy4nICsgb3B0cy5saXN0Q2xhc3MpOwogICAgICAgICAgICAgICAgaWYgKHNpYmxpbmdzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8vcmVtb3ZlcyBpdGVtIGJ5IGl0ZW1JZCBhbmQgcnVuIGNhbGxiYWNrIGF0IHRoZSBlbmQKICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChpdGVtSWQsIGNhbGxiYWNrKQogICAgICAgIHsKICAgICAgICAgICAgdmFyIG9wdHMgPSB0aGlzLm9wdGlvbnM7CiAgICAgICAgICAgIHZhciBsaXN0ID0gdGhpczsKICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLl9nZXRJdGVtQnlJZChpdGVtSWQpOwoKICAgICAgICAgICAgLy9hbmltYXRpb24gc3R5bGUKICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IG9wdHMuZWZmZWN0LmFuaW1hdGlvbiB8fCAnZmFkZSc7CgogICAgICAgICAgICAvL2FuaW1hdGlvbiB0aW1lCiAgICAgICAgICAgIHZhciB0aW1lID0gb3B0cy5lZmZlY3QudGltZSB8fCAnc2xvdyc7CgogICAgICAgICAgICAvL2FkZCBmYWRlT3V0IGVmZmVjdCB3aGVuIHJlbW92aW5nCiAgICAgICAgICAgIGlmIChhbmltYXRpb24gPT09ICdmYWRlJyl7CiAgICAgICAgICAgICAgICBpdGVtLmZhZGVPdXQodGltZSwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICBsaXN0LnJlbW92ZUl0ZW0oaXRlbSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlSXRlbShpdGVtKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpOwogICAgICAgIH0sCgogICAgICAgIC8vcmVtb3ZlcyBhbGwgaXRlbXMgZnJvbSB0aGUgbGlzdCBhbmQgcnVuIGNhbGxiYWNrIGF0IHRoZSBlbmQKICAgICAgICByZW1vdmVBbGw6IGZ1bmN0aW9uKGNhbGxiYWNrKXsKCiAgICAgICAgICAgIHZhciBsaXN0ICA9IHRoaXMsCiAgICAgICAgICAgICAgICBvcHRzICA9IHRoaXMub3B0aW9ucywKICAgICAgICAgICAgICAgIG5vZGUgID0gbGlzdC5lbC5maW5kKG9wdHMubGlzdE5vZGVOYW1lKS5maXJzdCgpLAogICAgICAgICAgICAgICAgaXRlbXMgPSBub2RlLmNoaWxkcmVuKG9wdHMuaXRlbU5vZGVOYW1lKTsKCiAgICAgICAgICAgIC8vYW5pbWF0aW9uIHN0eWxlCiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBvcHRzLmVmZmVjdC5hbmltYXRpb24gfHwgJ2ZhZGUnOwoKICAgICAgICAgICAgLy9hbmltYXRpb24gdGltZQogICAgICAgICAgICB2YXIgdGltZSA9IG9wdHMuZWZmZWN0LnRpbWUgfHwgJ3Nsb3cnOwoKICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlKCl7CiAgICAgICAgICAgICAgICAvL1JlbW92ZXMgZWFjaCBpdGVtIGFuZCBpdHMgY2hpbGRyZW4uCiAgICAgICAgICAgICAgICBpdGVtcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGxpc3QucmVtb3ZlSXRlbSgkKHRoaXMpKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgLy9Ob3cgd2UgY2FuIGFnYWluIHNob3cgb3VyIG5vZGUgZWxlbWVudAogICAgICAgICAgICAgICAgbm9kZS5zaG93KCk7CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vYWRkIGZhZGVPdXQgZWZmZWN0IHdoZW4gcmVtb3ZpbmcKICAgICAgICAgICAgaWYgKGFuaW1hdGlvbiA9PT0gJ2ZhZGUnKXsKICAgICAgICAgICAgICAgIG5vZGUuZmFkZU91dCh0aW1lLCByZW1vdmUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmVtb3ZlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBfZ2V0SXRlbUJ5SWQ6IGZ1bmN0aW9uKGl0ZW1JZCkgewogICAgICAgICAgICByZXR1cm4gJCh0aGlzLmVsKS5jaGlsZHJlbignLicgKyB0aGlzLm9wdGlvbnMubGlzdENsYXNzKQogICAgICAgICAgICAgICAgLmZpbmQoJ1tkYXRhLWlkPSInICsgaXRlbUlkICsgJyJdJyk7CiAgICAgICAgfSwKCiAgICAgICAgX2J1aWxkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGpzb24gPSB0aGlzLm9wdGlvbnMuanNvbjsKCiAgICAgICAgICAgIGlmICh0eXBlb2YganNvbiA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb24pOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkKHRoaXMuZWwpLmh0bWwodGhpcy5fYnVpbGRMaXN0KGpzb24sIHRoaXMub3B0aW9ucykpOwogICAgICAgIH0sCgogICAgICAgIF9idWlsZExpc3Q6IGZ1bmN0aW9uKGl0ZW1zLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICghaXRlbXMpIHsKICAgICAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gJyc7CiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpczsKCiAgICAgICAgICAgICQuZWFjaChpdGVtcywgZnVuY3Rpb24oaW5kZXgsIHN1YikgewogICAgICAgICAgICAgICAgY2hpbGRyZW4gKz0gdGhhdC5fYnVpbGRJdGVtKHN1Yiwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMubGlzdFJlbmRlcmVyKGNoaWxkcmVuLCBvcHRpb25zKTsKICAgICAgICB9LAoKICAgICAgICBfYnVpbGRJdGVtOiBmdW5jdGlvbihpdGVtLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIGVzY2FwZUh0bWwodGV4dCkgewogICAgICAgICAgICAgICAgdmFyIG1hcCA9IHsKICAgICAgICAgICAgICAgICAgICAnJic6ICcmYW1wOycsCiAgICAgICAgICAgICAgICAgICAgJzwnOiAnJmx0OycsCiAgICAgICAgICAgICAgICAgICAgJz4nOiAnJmd0OycsCiAgICAgICAgICAgICAgICAgICAgJyInOiAnJnF1b3Q7JywKICAgICAgICAgICAgICAgICAgICAiJyI6ICcmIzAzOTsnCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0ICsgIiIucmVwbGFjZSgvWyY8PiInXS9nLCBmdW5jdGlvbihtKSB7IHJldHVybiBtYXBbbV07IH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBmaWx0ZXJDbGFzc2VzKGNsYXNzZXMpIHsKICAgICAgICAgICAgICAgIHZhciBuZXdfY2xhc3NlcyA9IHt9OwoKICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gY2xhc3NlcykgewogICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzCiAgICAgICAgICAgICAgICAgICAgbmV3X2NsYXNzZXNbY2xhc3Nlc1trXV0gPSBjbGFzc2VzW2tdOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBuZXdfY2xhc3NlczsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQ2xhc3Nlc1N0cmluZyhpdGVtLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IGl0ZW0uY2xhc3NlcyB8fCB7fTsKCiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNsYXNzZXMgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyA9IFtjbGFzc2VzXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgaXRlbV9jbGFzc2VzID0gZmlsdGVyQ2xhc3NlcyhjbGFzc2VzKTsKICAgICAgICAgICAgICAgIGl0ZW1fY2xhc3Nlc1tvcHRpb25zLml0ZW1DbGFzc10gPSBvcHRpb25zLml0ZW1DbGFzczsKCiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgY2xhc3Mgc3RyaW5nCiAgICAgICAgICAgICAgICByZXR1cm4gJC5tYXAoaXRlbV9jbGFzc2VzLCBmdW5jdGlvbih2YWwpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsOwogICAgICAgICAgICAgICAgfSkuam9pbignICcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVEYXRhQXR0cnMoYXR0cikgewogICAgICAgICAgICAgICAgYXR0ciA9ICQuZXh0ZW5kKHt9LCBhdHRyKTsKCiAgICAgICAgICAgICAgICBkZWxldGUgYXR0ci5jaGlsZHJlbjsKICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyLmNsYXNzZXM7CiAgICAgICAgICAgICAgICBkZWxldGUgYXR0ci5jb250ZW50OwoKICAgICAgICAgICAgICAgIHZhciBkYXRhX2F0dHJzID0ge307CgogICAgICAgICAgICAgICAgJC5lYWNoKGF0dHIsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JykgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGRhdGFfYXR0cnNbImRhdGEtIiArIGtleV0gPSBlc2NhcGVIdG1sKHZhbHVlKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIHJldHVybiBkYXRhX2F0dHJzOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgaXRlbV9hdHRycyA9IGNyZWF0ZURhdGFBdHRycyhpdGVtKTsKICAgICAgICAgICAgaXRlbV9hdHRyc1siY2xhc3MiXSA9IGNyZWF0ZUNsYXNzZXNTdHJpbmcoaXRlbSwgb3B0aW9ucyk7CgogICAgICAgICAgICB2YXIgY29udGVudCA9IG9wdGlvbnMuY29udGVudENhbGxiYWNrKGl0ZW0pOwogICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLl9idWlsZExpc3QoaXRlbS5jaGlsZHJlbiwgb3B0aW9ucyk7CiAgICAgICAgICAgIHZhciBodG1sID0gJChvcHRpb25zLml0ZW1SZW5kZXJlcihpdGVtX2F0dHJzLCBjb250ZW50LCBjaGlsZHJlbiwgb3B0aW9ucywgaXRlbSkpOwoKICAgICAgICAgICAgdGhpcy5zZXRQYXJlbnQoaHRtbCk7CgogICAgICAgICAgICByZXR1cm4gaHRtbFswXS5vdXRlckhUTUw7CiAgICAgICAgfSwKCiAgICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGRhdGEsIGxpc3QgPSB0aGlzLCBzdGVwID0gZnVuY3Rpb24obGV2ZWwpIHsKICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IFtdLAogICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gbGV2ZWwuY2hpbGRyZW4obGlzdC5vcHRpb25zLml0ZW1Ob2RlTmFtZSk7CiAgICAgICAgICAgICAgICBpdGVtcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBsaSA9ICQodGhpcyksCiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSAkLmV4dGVuZCh7fSwgbGkuZGF0YSgpKSwKICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gbGkuY2hpbGRyZW4obGlzdC5vcHRpb25zLmxpc3ROb2RlTmFtZSk7CgogICAgICAgICAgICAgICAgICAgIGlmIChsaXN0Lm9wdGlvbnMuaW5jbHVkZUNvbnRlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBsaS5maW5kKCcuJyArIGxpc3Qub3B0aW9ucy5jb250ZW50Q2xhc3MpLmh0bWwoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnRlbnQgPSBjb250ZW50OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoc3ViLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNoaWxkcmVuID0gc3RlcChzdWIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBhcnJheS5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGRhdGEgPSBzdGVwKGxpc3QuZWwuZmluZChsaXN0Lm9wdGlvbnMubGlzdE5vZGVOYW1lKS5maXJzdCgpKTsKICAgICAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgICAgfSwKCiAgICAgICAgYXNOZXN0ZWRTZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgbGlzdCA9IHRoaXMsIG8gPSBsaXN0Lm9wdGlvbnMsIGRlcHRoID0gLTEsIHJldCA9IFtdLCBsZnQgPSAxOwogICAgICAgICAgICB2YXIgaXRlbXMgPSBsaXN0LmVsLmZpbmQoby5saXN0Tm9kZU5hbWUpLmZpcnN0KCkuY2hpbGRyZW4oby5pdGVtTm9kZU5hbWUpOwoKICAgICAgICAgICAgaXRlbXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBsZnQgPSB0cmF2ZXJzZSh0aGlzLCBkZXB0aCArIDEsIGxmdCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0ID0gcmV0LnNvcnQoZnVuY3Rpb24oYSxiKXsgcmV0dXJuIChhLmxmdCAtIGIubGZ0KTsgfSk7CiAgICAgICAgICAgIHJldHVybiByZXQ7CgogICAgICAgICAgICBmdW5jdGlvbiB0cmF2ZXJzZShpdGVtLCBkZXB0aCwgbGZ0KSB7CiAgICAgICAgICAgICAgICB2YXIgcmd0ID0gbGZ0ICsgMSwgaWQsIHBpZDsKCiAgICAgICAgICAgICAgICBpZiAoJChpdGVtKS5jaGlsZHJlbihvLmxpc3ROb2RlTmFtZSkuY2hpbGRyZW4oby5pdGVtTm9kZU5hbWUpLmxlbmd0aCA+IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgZGVwdGgrKzsKICAgICAgICAgICAgICAgICAgICAkKGl0ZW0pLmNoaWxkcmVuKG8ubGlzdE5vZGVOYW1lKS5jaGlsZHJlbihvLml0ZW1Ob2RlTmFtZSkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJndCA9IHRyYXZlcnNlKCQodGhpcyksIGRlcHRoLCByZ3QpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGRlcHRoLS07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWQgPSAkKGl0ZW0pLmF0dHIoJ2RhdGEtaWQnKTsKICAgICAgICAgICAgICAgIGlmIChpc0ludChpZCkpIHsKICAgICAgICAgICAgICAgICAgICBpZCA9IHBhcnNlSW50KGlkKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBwaWQgPSAkKGl0ZW0pLnBhcmVudChvLmxpc3ROb2RlTmFtZSkucGFyZW50KG8uaXRlbU5vZGVOYW1lKS5hdHRyKCdkYXRhLWlkJykgfHwgJyc7CiAgICAgICAgICAgICAgICBpZiAoaXNJbnQocGlkKSkgewogICAgICAgICAgICAgICAgICAgIHBpZCA9IHBhcnNlSW50KHBpZCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKGlkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goeyJpZCI6IGlkLCAicGFyZW50X2lkIjogcGlkLCAiZGVwdGgiOiBkZXB0aCwgImxmdCI6IGxmdCwgInJndCI6IHJndH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGxmdCA9IHJndCArIDE7CiAgICAgICAgICAgICAgICByZXR1cm4gbGZ0OwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBpc0ludCh2YWx1ZSkgewogICAgICAgICAgICAgICAgcmV0dXJuICQuaXNOdW1lcmljKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PSB2YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHJldHVybk9wdGlvbnM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zOwogICAgICAgIH0sCgogICAgICAgIHNlcmlhbGlzZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlcmlhbGl6ZSgpOwogICAgICAgIH0sCgogICAgICAgIHRvSGllcmFyY2h5OiBmdW5jdGlvbihvcHRpb25zKSB7CgogICAgICAgICAgICB2YXIgbyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpLAogICAgICAgICAgICAgICAgcmV0ID0gW107CgogICAgICAgICAgICAkKHRoaXMuZWxlbWVudCkuY2hpbGRyZW4oby5pdGVtcykuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBsZXZlbCA9IF9yZWN1cnNpdmVJdGVtcyh0aGlzKTsKICAgICAgICAgICAgICAgIHJldC5wdXNoKGxldmVsKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZXR1cm4gcmV0OwoKICAgICAgICAgICAgZnVuY3Rpb24gX3JlY3Vyc2l2ZUl0ZW1zKGl0ZW0pIHsKICAgICAgICAgICAgICAgIHZhciBpZCA9ICgkKGl0ZW0pLmF0dHIoby5hdHRyaWJ1dGUgfHwgJ2lkJykgfHwgJycpLm1hdGNoKG8uZXhwcmVzc2lvbiB8fCAoLyguKylbLT1fXSguKykvKSk7CiAgICAgICAgICAgICAgICBpZiAoaWQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudEl0ZW0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6IGlkWzJdCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBpZiAoJChpdGVtKS5jaGlsZHJlbihvLmxpc3RUeXBlKS5jaGlsZHJlbihvLml0ZW1zKS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJdGVtLmNoaWxkcmVuID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICQoaXRlbSkuY2hpbGRyZW4oby5saXN0VHlwZSkuY2hpbGRyZW4oby5pdGVtcykuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZXZlbCA9IF9yZWN1cnNpdmVJdGVtcyh0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJdGVtLmNoaWxkcmVuLnB1c2gobGV2ZWwpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJdGVtOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgdG9BcnJheTogZnVuY3Rpb24oKSB7CgogICAgICAgICAgICB2YXIgbyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIHRoaXMpLAogICAgICAgICAgICAgICAgc0RlcHRoID0gby5zdGFydERlcHRoQ291bnQgfHwgMCwKICAgICAgICAgICAgICAgIHJldCA9IFtdLAogICAgICAgICAgICAgICAgbGVmdCA9IDIsCiAgICAgICAgICAgICAgICBsaXN0ID0gdGhpcywKICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBsaXN0LmVsLmZpbmQobGlzdC5vcHRpb25zLmxpc3ROb2RlTmFtZSkuZmlyc3QoKTsKCiAgICAgICAgICAgIHZhciBpdGVtcyA9IGVsZW1lbnQuY2hpbGRyZW4obGlzdC5vcHRpb25zLml0ZW1Ob2RlTmFtZSk7CiAgICAgICAgICAgIGl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBsZWZ0ID0gX3JlY3Vyc2l2ZUFycmF5KCQodGhpcyksIHNEZXB0aCArIDEsIGxlZnQpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHJldCA9IHJldC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiAoYS5sZWZ0IC0gYi5sZWZ0KTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZXR1cm4gcmV0OwoKICAgICAgICAgICAgZnVuY3Rpb24gX3JlY3Vyc2l2ZUFycmF5KGl0ZW0sIGRlcHRoLCBsZWZ0KSB7CgogICAgICAgICAgICAgICAgdmFyIHJpZ2h0ID0gbGVmdCArIDEsCiAgICAgICAgICAgICAgICAgICAgaWQsCiAgICAgICAgICAgICAgICAgICAgcGlkOwoKICAgICAgICAgICAgICAgIGlmIChpdGVtLmNoaWxkcmVuKG8ub3B0aW9ucy5saXN0Tm9kZU5hbWUpLmNoaWxkcmVuKG8ub3B0aW9ucy5pdGVtTm9kZU5hbWUpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICBkZXB0aCsrOwogICAgICAgICAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW4oby5vcHRpb25zLmxpc3ROb2RlTmFtZSkuY2hpbGRyZW4oby5vcHRpb25zLml0ZW1Ob2RlTmFtZSkuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSBfcmVjdXJzaXZlQXJyYXkoJCh0aGlzKSwgZGVwdGgsIHJpZ2h0KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBkZXB0aC0tOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlkID0gaXRlbS5kYXRhKCkuaWQ7CgoKICAgICAgICAgICAgICAgIGlmIChkZXB0aCA9PT0gc0RlcHRoICsgMSkgewogICAgICAgICAgICAgICAgICAgIHBpZCA9IG8ucm9vdElEOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudEl0ZW0gPSAoaXRlbS5wYXJlbnQoby5vcHRpb25zLmxpc3ROb2RlTmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudChvLm9wdGlvbnMuaXRlbU5vZGVOYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAuZGF0YSgpKTsKICAgICAgICAgICAgICAgICAgICBwaWQgPSBwYXJlbnRJdGVtLmlkOwoKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoaWQpIHsKICAgICAgICAgICAgICAgICAgICByZXQucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6IGlkLAogICAgICAgICAgICAgICAgICAgICAgICAicGFyZW50X2lkIjogcGlkLAogICAgICAgICAgICAgICAgICAgICAgICAiZGVwdGgiOiBkZXB0aCwKICAgICAgICAgICAgICAgICAgICAgICAgImxlZnQiOiBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICAicmlnaHQiOiByaWdodAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGxlZnQgPSByaWdodCArIDE7CiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdDsKICAgICAgICAgICAgfQoKICAgICAgICB9LAoKICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMubW91c2UgPSB7CiAgICAgICAgICAgICAgICBvZmZzZXRYOiAwLAogICAgICAgICAgICAgICAgb2Zmc2V0WTogMCwKICAgICAgICAgICAgICAgIHN0YXJ0WDogMCwKICAgICAgICAgICAgICAgIHN0YXJ0WTogMCwKICAgICAgICAgICAgICAgIGxhc3RYOiAwLAogICAgICAgICAgICAgICAgbGFzdFk6IDAsCiAgICAgICAgICAgICAgICBub3dYOiAwLAogICAgICAgICAgICAgICAgbm93WTogMCwKICAgICAgICAgICAgICAgIGRpc3RYOiAwLAogICAgICAgICAgICAgICAgZGlzdFk6IDAsCiAgICAgICAgICAgICAgICBkaXJBeDogMCwKICAgICAgICAgICAgICAgIGRpclg6IDAsCiAgICAgICAgICAgICAgICBkaXJZOiAwLAogICAgICAgICAgICAgICAgbGFzdERpclg6IDAsCiAgICAgICAgICAgICAgICBsYXN0RGlyWTogMCwKICAgICAgICAgICAgICAgIGRpc3RBeFg6IDAsCiAgICAgICAgICAgICAgICBkaXN0QXhZOiAwCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuaXNUb3VjaCA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLm1vdmluZyA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLmRyYWdFbCA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuZHJhZ1Jvb3RFbCA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuZHJhZ0RlcHRoID0gMDsKICAgICAgICAgICAgdGhpcy5oYXNOZXdSb290ID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMucG9pbnRFbCA9IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgZXhwYW5kSXRlbTogZnVuY3Rpb24obGkpIHsKICAgICAgICAgICAgbGkucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmNvbGxhcHNlZENsYXNzKTsKICAgICAgICB9LAoKICAgICAgICBjb2xsYXBzZUl0ZW06IGZ1bmN0aW9uKGxpKSB7CiAgICAgICAgICAgIHZhciBsaXN0cyA9IGxpLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5saXN0Tm9kZU5hbWUpOwogICAgICAgICAgICBpZiAobGlzdHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBsaS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY29sbGFwc2VkQ2xhc3MpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgZXhwYW5kQWxsOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzOwogICAgICAgICAgICBsaXN0LmVsLmZpbmQobGlzdC5vcHRpb25zLml0ZW1Ob2RlTmFtZSkuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGxpc3QuZXhwYW5kSXRlbSgkKHRoaXMpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgY29sbGFwc2VBbGw6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgbGlzdCA9IHRoaXM7CiAgICAgICAgICAgIGxpc3QuZWwuZmluZChsaXN0Lm9wdGlvbnMuaXRlbU5vZGVOYW1lKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgbGlzdC5jb2xsYXBzZUl0ZW0oJCh0aGlzKSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIHNldFBhcmVudDogZnVuY3Rpb24obGkpIHsKICAgICAgICAgICAgLy9DaGVjayBpZiBsaSBpcyBhbiBlbGVtZW50IG9mIGl0ZW1Ob2RlTmFtZSB0eXBlIGFuZCBoYXMgY2hpbGRyZW4KICAgICAgICAgICAgaWYgKGxpLmlzKHRoaXMub3B0aW9ucy5pdGVtTm9kZU5hbWUpICYmIGxpLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5saXN0Tm9kZU5hbWUpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIE5PVCBzaG93aW5nIHR3byBvciBtb3JlIHNldHMgZGF0YS1hY3Rpb24gYnV0dG9ucwogICAgICAgICAgICAgICAgbGkuY2hpbGRyZW4oJ1tkYXRhLWFjdGlvbl0nKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgIGxpLnByZXBlbmQoJCh0aGlzLm9wdGlvbnMuZXhwYW5kQnRuSFRNTCkpOwogICAgICAgICAgICAgICAgbGkucHJlcGVuZCgkKHRoaXMub3B0aW9ucy5jb2xsYXBzZUJ0bkhUTUwpKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHVuc2V0UGFyZW50OiBmdW5jdGlvbihsaSkgewogICAgICAgICAgICBsaS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuY29sbGFwc2VkQ2xhc3MpOwogICAgICAgICAgICBsaS5jaGlsZHJlbignW2RhdGEtYWN0aW9uXScpLnJlbW92ZSgpOwogICAgICAgICAgICBsaS5jaGlsZHJlbih0aGlzLm9wdGlvbnMubGlzdE5vZGVOYW1lKS5yZW1vdmUoKTsKICAgICAgICB9LAoKICAgICAgICBkcmFnU3RhcnQ6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgdmFyIG1vdXNlID0gdGhpcy5tb3VzZSwKICAgICAgICAgICAgICAgIHRhcmdldCA9ICQoZS50YXJnZXQpLAogICAgICAgICAgICAgICAgZHJhZ0l0ZW0gPSB0YXJnZXQuY2xvc2VzdCh0aGlzLm9wdGlvbnMuaXRlbU5vZGVOYW1lKSwKICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gewogICAgICAgICAgICAgICAgICAgIHRvcCAgOiBlLnBhZ2VZLAogICAgICAgICAgICAgICAgICAgIGxlZnQgOiBlLnBhZ2VYCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIGNvbnRpbnVlRXhlY3V0aW9uID0gdGhpcy5vcHRpb25zLm9uRHJhZ1N0YXJ0LmNhbGwodGhpcywgdGhpcy5lbCwgZHJhZ0l0ZW0sIHBvc2l0aW9uKTsKCiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGludWVFeGVjdXRpb24gIT09ICd1bmRlZmluZWQnICYmIGNvbnRpbnVlRXhlY3V0aW9uID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLnBsYWNlRWwuY3NzKCdoZWlnaHQnLCBkcmFnSXRlbS5oZWlnaHQoKSk7CgogICAgICAgICAgICBtb3VzZS5vZmZzZXRYID0gZS5wYWdlWCAtIGRyYWdJdGVtLm9mZnNldCgpLmxlZnQ7CiAgICAgICAgICAgIG1vdXNlLm9mZnNldFkgPSBlLnBhZ2VZIC0gZHJhZ0l0ZW0ub2Zmc2V0KCkudG9wOwogICAgICAgICAgICBtb3VzZS5zdGFydFggPSBtb3VzZS5sYXN0WCA9IGUucGFnZVg7CiAgICAgICAgICAgIG1vdXNlLnN0YXJ0WSA9IG1vdXNlLmxhc3RZID0gZS5wYWdlWTsKCiAgICAgICAgICAgIHRoaXMuZHJhZ1Jvb3RFbCA9IHRoaXMuZWw7CiAgICAgICAgICAgIHRoaXMuZHJhZ0VsID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMub3B0aW9ucy5saXN0Tm9kZU5hbWUpKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubGlzdENsYXNzICsgJyAnICsgdGhpcy5vcHRpb25zLmRyYWdDbGFzcyk7CiAgICAgICAgICAgIHRoaXMuZHJhZ0VsLmNzcygnd2lkdGgnLCBkcmFnSXRlbS5vdXRlcldpZHRoKCkpOwoKICAgICAgICAgICAgdGhpcy5zZXRJbmRleE9mSXRlbShkcmFnSXRlbSk7CgogICAgICAgICAgICAvLyBmaXggZm9yIHplcHRvLmpzCiAgICAgICAgICAgIC8vZHJhZ0l0ZW0uYWZ0ZXIodGhpcy5wbGFjZUVsKS5kZXRhY2goKS5hcHBlbmRUbyh0aGlzLmRyYWdFbCk7CiAgICAgICAgICAgIGRyYWdJdGVtLmFmdGVyKHRoaXMucGxhY2VFbCk7CiAgICAgICAgICAgIGRyYWdJdGVtWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZHJhZ0l0ZW1bMF0pOwogICAgICAgICAgICBkcmFnSXRlbS5hcHBlbmRUbyh0aGlzLmRyYWdFbCk7CgogICAgICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmFwcGVuZCh0aGlzLmRyYWdFbCk7CiAgICAgICAgICAgIHRoaXMuZHJhZ0VsLmNzcyh7CiAgICAgICAgICAgICAgICAnbGVmdCc6IGUucGFnZVggLSBtb3VzZS5vZmZzZXRYLAogICAgICAgICAgICAgICAgJ3RvcCc6IGUucGFnZVkgLSBtb3VzZS5vZmZzZXRZCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAvLyB0b3RhbCBkZXB0aCBvZiBkcmFnZ2luZyBpdGVtCiAgICAgICAgICAgIHZhciBpLCBkZXB0aCwKICAgICAgICAgICAgICAgIGl0ZW1zID0gdGhpcy5kcmFnRWwuZmluZCh0aGlzLm9wdGlvbnMuaXRlbU5vZGVOYW1lKTsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBkZXB0aCA9ICQoaXRlbXNbaV0pLnBhcmVudHModGhpcy5vcHRpb25zLmxpc3ROb2RlTmFtZSkubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKGRlcHRoID4gdGhpcy5kcmFnRGVwdGgpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYWdEZXB0aCA9IGRlcHRoOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLy9DcmVhdGUgc3VibGV2ZWwuCiAgICAgICAgLy8gIGVsZW1lbnQgOiBlbGVtZW50IHdoaWNoIGJlY29tZSBwYXJlbnQKICAgICAgICAvLyAgaXRlbSAgICA6IHNvbWV0aGluZyB0byBwbGFjZSBpbnRvIG5ldyBzdWJsZXZlbAogICAgICAgIGNyZWF0ZVN1YkxldmVsOiBmdW5jdGlvbihlbGVtZW50LCBpdGVtKSB7CiAgICAgICAgICAgIHZhciBsaXN0ID0gJCgnPCcgKyB0aGlzLm9wdGlvbnMubGlzdE5vZGVOYW1lICsgJy8+JykuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxpc3RDbGFzcyk7CiAgICAgICAgICAgIGlmIChpdGVtKSBsaXN0LmFwcGVuZChpdGVtKTsKICAgICAgICAgICAgZWxlbWVudC5hcHBlbmQobGlzdCk7CiAgICAgICAgICAgIHRoaXMuc2V0UGFyZW50KGVsZW1lbnQpOwogICAgICAgICAgICByZXR1cm4gbGlzdDsKICAgICAgICB9LAoKICAgICAgICBzZXRJbmRleE9mSXRlbTogZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgaW5kZXggPSBpbmRleCB8fCBbXTsKCiAgICAgICAgICAgIGluZGV4LnVuc2hpZnQoaXRlbS5pbmRleCgpKTsKCiAgICAgICAgICAgIGlmICgkKGl0ZW1bMF0ucGFyZW50Tm9kZSlbMF0gIT09IHRoaXMuZHJhZ1Jvb3RFbFswXSkgewogICAgICAgICAgICAgICAgdGhpcy5zZXRJbmRleE9mSXRlbSgkKGl0ZW1bMF0ucGFyZW50Tm9kZSksIGluZGV4KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZHJhZ0VsLmRhdGEoJ2luZGV4T2ZJdGVtJywgaW5kZXgpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgcmVzdG9yZUl0ZW1BdEluZGV4OiBmdW5jdGlvbihkcmFnRWxlbWVudCwgaW5kZXhBcnJheSkgewogICAgICAgICAgICB2YXIgY3VycmVudEVsID0gdGhpcy5lbCwKICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IGluZGV4QXJyYXkubGVuZ3RoIC0gMTsKCiAgICAgICAgICAgIC8vUHV0IGRyYWcgZWxlbWVudCBhdCBjdXJyZW50IGVsZW1lbnQgcG9zaXRpb24uCiAgICAgICAgICAgIGZ1bmN0aW9uIHBsYWNlRWxlbWVudChjdXJyZW50RWwsIGRyYWdFbGVtZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXhBcnJheVtsYXN0SW5kZXhdID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgJChjdXJyZW50RWwpLnByZXBlbmQoZHJhZ0VsZW1lbnQuY2xvbmUodHJ1ZSkpOyAvL3VzaW5nIHRydWUgc2F2ZXMgYWRkZWQgdG8gZWxlbWVudCBldmVudHMuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkKGN1cnJlbnRFbC5jaGlsZHJlbltpbmRleEFycmF5W2xhc3RJbmRleF0gLSAxXSkuYWZ0ZXIoZHJhZ0VsZW1lbnQuY2xvbmUodHJ1ZSkpOyAvL3VzaW5nIHRydWUgc2F2ZXMgYWRkZWQgdG8gZWxlbWVudCBldmVudHMuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9EaWdnaW4gdGhyb3VnaCBpbmRleEFycmF5IHRvIGdldCBob21lIGZvciBkcmFnRWxlbWVudC4KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRleEFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAobGFzdEluZGV4ID09PSBwYXJzZUludChpKSkgewogICAgICAgICAgICAgICAgICAgIHBsYWNlRWxlbWVudChjdXJyZW50RWwsIGRyYWdFbGVtZW50KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvL2VsZW1lbnQgY2FuIGhhdmUgbm8gaW5kZXhlcywgc28gd2UgaGF2ZSB0byB1c2UgY29uZGl0aW9uYWwgaGVyZSB0byBhdm9pZCBlcnJvcnMuCiAgICAgICAgICAgICAgICAvL2lmIGVsZW1lbnQgZG9lc24ndCBleGlzdCB3ZSBkZWZlbmV0bHkgbmVlZCB0byBhZGQgbmV3IGxpc3QuCiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IChjdXJyZW50RWxbMF0pID8gY3VycmVudEVsWzBdIDogY3VycmVudEVsOwogICAgICAgICAgICAgICAgdmFyIG5leHRFbCAgPSBlbGVtZW50LmNoaWxkcmVuW2luZGV4QXJyYXlbaV1dOwogICAgICAgICAgICAgICAgY3VycmVudEVsICAgPSAoIW5leHRFbCkgPyB0aGlzLmNyZWF0ZVN1YkxldmVsKCQoZWxlbWVudCkpIDogbmV4dEVsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgZHJhZ1N0b3A6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgLy8gZml4IGZvciB6ZXB0by5qcwogICAgICAgICAgICAvL3RoaXMucGxhY2VFbC5yZXBsYWNlV2l0aCh0aGlzLmRyYWdFbC5jaGlsZHJlbih0aGlzLm9wdGlvbnMuaXRlbU5vZGVOYW1lICsgJzpmaXJzdCcpLmRldGFjaCgpKTsKICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gewogICAgICAgICAgICAgICAgdG9wICA6IGUucGFnZVksCiAgICAgICAgICAgICAgICBsZWZ0IDogZS5wYWdlWAogICAgICAgICAgICB9OwogICAgICAgICAgICAvL0dldCBpbmRleEFycmF5IG9mIGl0ZW0gYXQgZHJhZyBzdGFydC4KICAgICAgICAgICAgdmFyIHNyY0luZGV4ID0gdGhpcy5kcmFnRWwuZGF0YSgnaW5kZXhPZkl0ZW0nKTsKCiAgICAgICAgICAgIHZhciBlbCA9IHRoaXMuZHJhZ0VsLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5pdGVtTm9kZU5hbWUpLmZpcnN0KCk7CgogICAgICAgICAgICBlbFswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsWzBdKTsKCiAgICAgICAgICAgIHRoaXMuZHJhZ0VsLnJlbW92ZSgpOyAvL1JlbW92ZSBkcmFnRWwsIGNhdXNlIGl0IGNhbiBhZmZlY3Qgb24gaW5kZXhpbmcgaW4gaHRtbCBjb2xsZWN0aW9uLgoKICAgICAgICAgICAgLy9CZWZvcmUgZHJhZyBzdG9wIGNhbGxiYWNrCiAgICAgICAgICAgIHZhciBjb250aW51ZUV4ZWN1dGlvbiA9IHRoaXMub3B0aW9ucy5iZWZvcmVEcmFnU3RvcC5jYWxsKHRoaXMsIHRoaXMuZWwsIGVsLCB0aGlzLnBsYWNlRWwucGFyZW50KCkpOwogICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRpbnVlRXhlY3V0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBjb250aW51ZUV4ZWN1dGlvbiA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBsYWNlRWwucGFyZW50KCk7CiAgICAgICAgICAgICAgICB0aGlzLnBsYWNlRWwucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICBpZiAoIXBhcmVudC5jaGlsZHJlbigpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMudW5zZXRQYXJlbnQocGFyZW50LnBhcmVudCgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZUl0ZW1BdEluZGV4KGVsLCBzcmNJbmRleCk7CiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMucGxhY2VFbC5yZXBsYWNlV2l0aChlbCk7CgogICAgICAgICAgICBpZiAodGhpcy5oYXNOZXdSb290KSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpeGVkID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlSXRlbUF0SW5kZXgoZWwsIHNyY0luZGV4KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuZWwudHJpZ2dlcignbG9zdEl0ZW0nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1Jvb3RFbC50cmlnZ2VyKCdnYWluZWRJdGVtJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmRyYWdSb290RWwudHJpZ2dlcignY2hhbmdlJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jYWxsYmFjay5jYWxsKHRoaXMsIHRoaXMuZHJhZ1Jvb3RFbCwgZWwsIHBvc2l0aW9uKTsKCiAgICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICB9LAoKICAgICAgICBkcmFnTW92ZTogZnVuY3Rpb24oZSkgewogICAgICAgICAgICB2YXIgbGlzdCwgcGFyZW50LCBwcmV2LCBuZXh0LCBkZXB0aCwKICAgICAgICAgICAgICAgIG9wdCA9IHRoaXMub3B0aW9ucywKICAgICAgICAgICAgICAgIG1vdXNlID0gdGhpcy5tb3VzZTsKCiAgICAgICAgICAgIHRoaXMuZHJhZ0VsLmNzcyh7CiAgICAgICAgICAgICAgICAnbGVmdCc6IGUucGFnZVggLSBtb3VzZS5vZmZzZXRYLAogICAgICAgICAgICAgICAgJ3RvcCc6IGUucGFnZVkgLSBtb3VzZS5vZmZzZXRZCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gbW91c2UgcG9zaXRpb24gbGFzdCBldmVudHMKICAgICAgICAgICAgbW91c2UubGFzdFggPSBtb3VzZS5ub3dYOwogICAgICAgICAgICBtb3VzZS5sYXN0WSA9IG1vdXNlLm5vd1k7CiAgICAgICAgICAgIC8vIG1vdXNlIHBvc2l0aW9uIHRoaXMgZXZlbnRzCiAgICAgICAgICAgIG1vdXNlLm5vd1ggPSBlLnBhZ2VYOwogICAgICAgICAgICBtb3VzZS5ub3dZID0gZS5wYWdlWTsKICAgICAgICAgICAgLy8gZGlzdGFuY2UgbW91c2UgbW92ZWQgYmV0d2VlbiBldmVudHMKICAgICAgICAgICAgbW91c2UuZGlzdFggPSBtb3VzZS5ub3dYIC0gbW91c2UubGFzdFg7CiAgICAgICAgICAgIG1vdXNlLmRpc3RZID0gbW91c2Uubm93WSAtIG1vdXNlLmxhc3RZOwogICAgICAgICAgICAvLyBkaXJlY3Rpb24gbW91c2Ugd2FzIG1vdmluZwogICAgICAgICAgICBtb3VzZS5sYXN0RGlyWCA9IG1vdXNlLmRpclg7CiAgICAgICAgICAgIG1vdXNlLmxhc3REaXJZID0gbW91c2UuZGlyWTsKICAgICAgICAgICAgLy8gZGlyZWN0aW9uIG1vdXNlIGlzIG5vdyBtb3ZpbmcgKG9uIGJvdGggYXhpcykKICAgICAgICAgICAgbW91c2UuZGlyWCA9IG1vdXNlLmRpc3RYID09PSAwID8gMCA6IG1vdXNlLmRpc3RYID4gMCA\/IDEgOiAtMTsKICAgICAgICAgICAgbW91c2UuZGlyWSA9IG1vdXNlLmRpc3RZID09PSAwID8gMCA6IG1vdXNlLmRpc3RZID4gMCA\/IDEgOiAtMTsKICAgICAgICAgICAgLy8gYXhpcyBtb3VzZSBpcyBub3cgbW92aW5nIG9uCiAgICAgICAgICAgIHZhciBuZXdBeCA9IE1hdGguYWJzKG1vdXNlLmRpc3RYKSA+IE1hdGguYWJzKG1vdXNlLmRpc3RZKSA\",
    "size": "40129"
}