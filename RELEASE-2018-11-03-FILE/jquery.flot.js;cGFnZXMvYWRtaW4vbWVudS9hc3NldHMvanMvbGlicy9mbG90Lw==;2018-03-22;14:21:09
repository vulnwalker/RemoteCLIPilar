{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/flot\/jquery.flot.js",
    "lastUpdate": "2018-03-22+14:21:09.28",
    "contentFile": "LyogSmF2YXNjcmlwdCBwbG90dGluZyBsaWJyYXJ5IGZvciBqUXVlcnksIHZlcnNpb24gMC44LjMuCgpDb3B5cmlnaHQgKGMpIDIwMDctMjAxNCBJT0xBIGFuZCBPbGUgTGF1cnNlbi4KTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgoKKi8KCi8vIGZpcnN0IGFuIGlubGluZSBkZXBlbmRlbmN5LCBqcXVlcnkuY29sb3JoZWxwZXJzLmpzLCB3ZSBpbmxpbmUgaXQgaGVyZQovLyBmb3IgY29udmVuaWVuY2UKCi8qIFBsdWdpbiBmb3IgalF1ZXJ5IGZvciB3b3JraW5nIHdpdGggY29sb3JzLgogKgogKiBWZXJzaW9uIDEuMS4KICoKICogSW5zcGlyYXRpb24gZnJvbSBqUXVlcnkgY29sb3IgYW5pbWF0aW9uIHBsdWdpbiBieSBKb2huIFJlc2lnLgogKgogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgYnkgT2xlIExhdXJzZW4sIE9jdG9iZXIgMjAwOS4KICoKICogRXhhbXBsZXM6CiAqCiAqICAgJC5jb2xvci5wYXJzZSgiI2ZmZiIpLnNjYWxlKCdyZ2InLCAwLjI1KS5hZGQoJ2EnLCAtMC41KS50b1N0cmluZygpCiAqICAgdmFyIGMgPSAkLmNvbG9yLmV4dHJhY3QoJCgiI215ZGl2IiksICdiYWNrZ3JvdW5kLWNvbG9yJyk7CiAqICAgY29uc29sZS5sb2coYy5yLCBjLmcsIGMuYiwgYy5hKTsKICogICAkLmNvbG9yLm1ha2UoMTAwLCA1MCwgMjUsIDAuNCkudG9TdHJpbmcoKSAvLyByZXR1cm5zICJyZ2JhKDEwMCw1MCwyNSwwLjQpIgogKgogKiBOb3RlIHRoYXQgLnNjYWxlKCkgYW5kIC5hZGQoKSByZXR1cm4gdGhlIHNhbWUgbW9kaWZpZWQgb2JqZWN0CiAqIGluc3RlYWQgb2YgbWFraW5nIGEgbmV3IG9uZS4KICoKICogVi4gMS4xOiBGaXggZXJyb3IgaGFuZGxpbmcgc28gZS5nLiBwYXJzaW5nIGFuIGVtcHR5IHN0cmluZyBkb2VzCiAqIHByb2R1Y2UgYSBjb2xvciByYXRoZXIgdGhhbiBqdXN0IGNyYXNoaW5nLgogKi8KKGZ1bmN0aW9uKCQpeyQuY29sb3I9e307JC5jb2xvci5tYWtlPWZ1bmN0aW9uKHIsZyxiLGEpe3ZhciBvPXt9O28ucj1yfHwwO28uZz1nfHwwO28uYj1ifHwwO28uYT1hIT1udWxsP2E6MTtvLmFkZD1mdW5jdGlvbihjLGQpe2Zvcih2YXIgaT0wO2k8Yy5sZW5ndGg7KytpKW9bYy5jaGFyQXQoaSldKz1kO3JldHVybiBvLm5vcm1hbGl6ZSgpfTtvLnNjYWxlPWZ1bmN0aW9uKGMsZil7Zm9yKHZhciBpPTA7aTxjLmxlbmd0aDsrK2kpb1tjLmNoYXJBdChpKV0qPWY7cmV0dXJuIG8ubm9ybWFsaXplKCl9O28udG9TdHJpbmc9ZnVuY3Rpb24oKXtpZihvLmE+PTEpe3JldHVybiJyZ2IoIitbby5yLG8uZyxvLmJdLmpvaW4oIiwiKSsiKSJ9ZWxzZXtyZXR1cm4icmdiYSgiK1tvLnIsby5nLG8uYixvLmFdLmpvaW4oIiwiKSsiKSJ9fTtvLm5vcm1hbGl6ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGNsYW1wKG1pbix2YWx1ZSxtYXgpe3JldHVybiB2YWx1ZTxtaW4\/bWluOnZhbHVlPm1heD9tYXg6dmFsdWV9by5yPWNsYW1wKDAscGFyc2VJbnQoby5yKSwyNTUpO28uZz1jbGFtcCgwLHBhcnNlSW50KG8uZyksMjU1KTtvLmI9Y2xhbXAoMCxwYXJzZUludChvLmIpLDI1NSk7by5hPWNsYW1wKDAsby5hLDEpO3JldHVybiBvfTtvLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuICQuY29sb3IubWFrZShvLnIsby5iLG8uZyxvLmEpfTtyZXR1cm4gby5ub3JtYWxpemUoKX07JC5jb2xvci5leHRyYWN0PWZ1bmN0aW9uKGVsZW0sY3NzKXt2YXIgYztkb3tjPWVsZW0uY3NzKGNzcykudG9Mb3dlckNhc2UoKTtpZihjIT0iIiYmYyE9InRyYW5zcGFyZW50IilicmVhaztlbGVtPWVsZW0ucGFyZW50KCl9d2hpbGUoZWxlbS5sZW5ndGgmJiEkLm5vZGVOYW1lKGVsZW0uZ2V0KDApLCJib2R5IikpO2lmKGM9PSJyZ2JhKDAsIDAsIDAsIDApIiljPSJ0cmFuc3BhcmVudCI7cmV0dXJuICQuY29sb3IucGFyc2UoYyl9OyQuY29sb3IucGFyc2U9ZnVuY3Rpb24oc3RyKXt2YXIgcmVzLG09JC5jb2xvci5tYWtlO2lmKHJlcz0vcmdiXChccyooWzAtOV17MSwzfSlccyosXHMqKFswLTldezEsM30pXHMqLFxzKihbMC05XXsxLDN9KVxzKlwpLy5leGVjKHN0cikpcmV0dXJuIG0ocGFyc2VJbnQocmVzWzFdLDEwKSxwYXJzZUludChyZXNbMl0sMTApLHBhcnNlSW50KHJlc1szXSwxMCkpO2lmKHJlcz0vcmdiYVwoXHMqKFswLTldezEsM30pXHMqLFxzKihbMC05XXsxLDN9KVxzKixccyooWzAtOV17MSwzfSlccyosXHMqKFswLTldKyg\/OlwuWzAtOV0rKT8pXHMqXCkvLmV4ZWMoc3RyKSlyZXR1cm4gbShwYXJzZUludChyZXNbMV0sMTApLHBhcnNlSW50KHJlc1syXSwxMCkscGFyc2VJbnQocmVzWzNdLDEwKSxwYXJzZUZsb2F0KHJlc1s0XSkpO2lmKHJlcz0vcmdiXChccyooWzAtOV0rKD86XC5bMC05XSspPylcJVxzKixccyooWzAtOV0rKD86XC5bMC05XSspPylcJVxzKixccyooWzAtOV0rKD86XC5bMC05XSspPylcJVxzKlwpLy5leGVjKHN0cikpcmV0dXJuIG0ocGFyc2VGbG9hdChyZXNbMV0pKjIuNTUscGFyc2VGbG9hdChyZXNbMl0pKjIuNTUscGFyc2VGbG9hdChyZXNbM10pKjIuNTUpO2lmKHJlcz0vcmdiYVwoXHMqKFswLTldKyg\/OlwuWzAtOV0rKT8pXCVccyosXHMqKFswLTldKyg\/OlwuWzAtOV0rKT8pXCVccyosXHMqKFswLTldKyg\/OlwuWzAtOV0rKT8pXCVccyosXHMqKFswLTldKyg\\/ICJ4IiA6ICJ5IiwKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiAkLmV4dGVuZCh0cnVlLCB7fSwgYXhlcyA9PSB4YXhlcyA\\/IHhheGVzIDogeWF4ZXMsIGZ1bmN0aW9uKGksIGEpIHsKICAgICAgICAgICAgICAgIGlmIChhICYmIChhLnNob3cgfHwgYS5yZXNlcnZlU3BhY2UpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGEgPT09IGF4aXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5vcHRpb25zLnBvc2l0aW9uID09PSBwb3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRlcm1vc3QgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVybW9zdCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICghZm91bmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gVGhlIG91dGVybW9zdCBheGlzIG9uIGVhY2ggc2lkZSBoYXMgbm8gbWFyZ2luCgogICAgICAgICAgICBpZiAob3V0ZXJtb3N0KSB7CiAgICAgICAgICAgICAgICBheGlzTWFyZ2luID0gMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gVGhlIHRpY2tzIGZvciB0aGUgZmlyc3QgYXhpcyBpbiBlYWNoIGRpcmVjdGlvbiBzdHJldGNoIGFjcm9zcwoKICAgICAgICAgICAgaWYgKHRpY2tMZW5ndGggPT0gbnVsbCkgewogICAgICAgICAgICAgICAgdGlja0xlbmd0aCA9IGZpcnN0ID8gImZ1bGwiIDogNTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFpc05hTigrdGlja0xlbmd0aCkpCiAgICAgICAgICAgICAgICBwYWRkaW5nICs9ICt0aWNrTGVuZ3RoOwoKICAgICAgICAgICAgaWYgKGlzWEF4aXMpIHsKICAgICAgICAgICAgICAgIGxoICs9IHBhZGRpbmc7CgogICAgICAgICAgICAgICAgaWYgKHBvcyA9PSAiYm90dG9tIikgewogICAgICAgICAgICAgICAgICAgIHBsb3RPZmZzZXQuYm90dG9tICs9IGxoICsgYXhpc01hcmdpbjsKICAgICAgICAgICAgICAgICAgICBheGlzLmJveCA9IHsgdG9wOiBzdXJmYWNlLmhlaWdodCAtIHBsb3RPZmZzZXQuYm90dG9tLCBoZWlnaHQ6IGxoIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBheGlzLmJveCA9IHsgdG9wOiBwbG90T2Zmc2V0LnRvcCArIGF4aXNNYXJnaW4sIGhlaWdodDogbGggfTsKICAgICAgICAgICAgICAgICAgICBwbG90T2Zmc2V0LnRvcCArPSBsaCArIGF4aXNNYXJnaW47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBsdyArPSBwYWRkaW5nOwoKICAgICAgICAgICAgICAgIGlmIChwb3MgPT0gImxlZnQiKSB7CiAgICAgICAgICAgICAgICAgICAgYXhpcy5ib3ggPSB7IGxlZnQ6IHBsb3RPZmZzZXQubGVmdCArIGF4aXNNYXJnaW4sIHdpZHRoOiBsdyB9OwogICAgICAgICAgICAgICAgICAgIHBsb3RPZmZzZXQubGVmdCArPSBsdyArIGF4aXNNYXJnaW47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBwbG90T2Zmc2V0LnJpZ2h0ICs9IGx3ICsgYXhpc01hcmdpbjsKICAgICAgICAgICAgICAgICAgICBheGlzLmJveCA9IHsgbGVmdDogc3VyZmFjZS53aWR0aCAtIHBsb3RPZmZzZXQucmlnaHQsIHdpZHRoOiBsdyB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAgLy8gc2F2ZSBmb3IgZnV0dXJlIHJlZmVyZW5jZQogICAgICAgICAgICBheGlzLnBvc2l0aW9uID0gcG9zOwogICAgICAgICAgICBheGlzLnRpY2tMZW5ndGggPSB0aWNrTGVuZ3RoOwogICAgICAgICAgICBheGlzLmJveC5wYWRkaW5nID0gcGFkZGluZzsKICAgICAgICAgICAgYXhpcy5pbm5lcm1vc3QgPSBpbm5lcm1vc3Q7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhbGxvY2F0ZUF4aXNCb3hTZWNvbmRQaGFzZShheGlzKSB7CiAgICAgICAgICAgIC8vIG5vdyB0aGF0IGFsbCBheGlzIGJveGVzIGhhdmUgYmVlbiBwbGFjZWQgaW4gb25lCiAgICAgICAgICAgIC8vIGRpbWVuc2lvbiwgd2UgY2FuIHNldCB0aGUgcmVtYWluaW5nIGRpbWVuc2lvbiBjb29yZGluYXRlcwogICAgICAgICAgICBpZiAoYXhpcy5kaXJlY3Rpb24gPT0gIngiKSB7CiAgICAgICAgICAgICAgICBheGlzLmJveC5sZWZ0ID0gcGxvdE9mZnNldC5sZWZ0IC0gYXhpcy5sYWJlbFdpZHRoIC8gMjsKICAgICAgICAgICAgICAgIGF4aXMuYm94LndpZHRoID0gc3VyZmFjZS53aWR0aCAtIHBsb3RPZmZzZXQubGVmdCAtIHBsb3RPZmZzZXQucmlnaHQgKyBheGlzLmxhYmVsV2lkdGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBheGlzLmJveC50b3AgPSBwbG90T2Zmc2V0LnRvcCAtIGF4aXMubGFiZWxIZWlnaHQgLyAyOwogICAgICAgICAgICAgICAgYXhpcy5ib3guaGVpZ2h0ID0gc3VyZmFjZS5oZWlnaHQgLSBwbG90T2Zmc2V0LmJvdHRvbSAtIHBsb3RPZmZzZXQudG9wICsgYXhpcy5sYWJlbEhlaWdodDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYWRqdXN0TGF5b3V0Rm9yVGhpbmdzU3RpY2tpbmdPdXQoKSB7CiAgICAgICAgICAgIC8vIHBvc3NpYmx5IGFkanVzdCBwbG90IG9mZnNldCB0byBlbnN1cmUgZXZlcnl0aGluZyBzdGF5cwogICAgICAgICAgICAvLyBpbnNpZGUgdGhlIGNhbnZhcyBhbmQgaXNuJ3QgY2xpcHBlZCBvZmYKCiAgICAgICAgICAgIHZhciBtaW5NYXJnaW4gPSBvcHRpb25zLmdyaWQubWluQm9yZGVyTWFyZ2luLAogICAgICAgICAgICAgICAgYXhpcywgaTsKCiAgICAgICAgICAgIC8vIGNoZWNrIHN0dWZmIGZyb20gdGhlIHBsb3QgKEZJWE1FOiB0aGlzIHNob3VsZCBqdXN0IHJlYWQKICAgICAgICAgICAgLy8gYSB2YWx1ZSBmcm9tIHRoZSBzZXJpZXMsIG90aGVyd2lzZSBpdCdzIGltcG9zc2libGUgdG8KICAgICAgICAgICAgLy8gY3VzdG9taXplKQogICAgICAgICAgICBpZiAobWluTWFyZ2luID09IG51bGwpIHsKICAgICAgICAgICAgICAgIG1pbk1hcmdpbiA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgKytpKQogICAgICAgICAgICAgICAgICAgIG1pbk1hcmdpbiA9IE1hdGgubWF4KG1pbk1hcmdpbiwgMiAqIChzZXJpZXNbaV0ucG9pbnRzLnJhZGl1cyArIHNlcmllc1tpXS5wb2ludHMubGluZVdpZHRoLzIpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIG1hcmdpbnMgPSB7CiAgICAgICAgICAgICAgICBsZWZ0OiBtaW5NYXJnaW4sCiAgICAgICAgICAgICAgICByaWdodDogbWluTWFyZ2luLAogICAgICAgICAgICAgICAgdG9wOiBtaW5NYXJnaW4sCiAgICAgICAgICAgICAgICBib3R0b206IG1pbk1hcmdpbgogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy8gY2hlY2sgYXhpcyBsYWJlbHMsIG5vdGUgd2UgZG9uJ3QgY2hlY2sgdGhlIGFjdHVhbAogICAgICAgICAgICAvLyBsYWJlbHMgYnV0IGluc3RlYWQgdXNlIHRoZSBvdmVyYWxsIHdpZHRoL2hlaWdodCB0byBub3QKICAgICAgICAgICAgLy8ganVtcCBhcyBtdWNoIGFyb3VuZCB3aXRoIHJlcGxvdHMKICAgICAgICAgICAgJC5lYWNoKGFsbEF4ZXMoKSwgZnVuY3Rpb24gKF8sIGF4aXMpIHsKICAgICAgICAgICAgICAgIGlmIChheGlzLnJlc2VydmVTcGFjZSAmJiBheGlzLnRpY2tzICYmIGF4aXMudGlja3MubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGF4aXMuZGlyZWN0aW9uID09PSAieCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2lucy5sZWZ0ID0gTWF0aC5tYXgobWFyZ2lucy5sZWZ0LCBheGlzLmxhYmVsV2lkdGggLyAyKTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2lucy5yaWdodCA9IE1hdGgubWF4KG1hcmdpbnMucmlnaHQsIGF4aXMubGFiZWxXaWR0aCAvIDIpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbnMuYm90dG9tID0gTWF0aC5tYXgobWFyZ2lucy5ib3R0b20sIGF4aXMubGFiZWxIZWlnaHQgLyAyKTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2lucy50b3AgPSBNYXRoLm1heChtYXJnaW5zLnRvcCwgYXhpcy5sYWJlbEhlaWdodCAvIDIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBwbG90T2Zmc2V0LmxlZnQgPSBNYXRoLmNlaWwoTWF0aC5tYXgobWFyZ2lucy5sZWZ0LCBwbG90T2Zmc2V0LmxlZnQpKTsKICAgICAgICAgICAgcGxvdE9mZnNldC5yaWdodCA9IE1hdGguY2VpbChNYXRoLm1heChtYXJnaW5zLnJpZ2h0LCBwbG90T2Zmc2V0LnJpZ2h0KSk7CiAgICAgICAgICAgIHBsb3RPZmZzZXQudG9wID0gTWF0aC5jZWlsKE1hdGgubWF4KG1hcmdpbnMudG9wLCBwbG90T2Zmc2V0LnRvcCkpOwogICAgICAgICAgICBwbG90T2Zmc2V0LmJvdHRvbSA9IE1hdGguY2VpbChNYXRoLm1heChtYXJnaW5zLmJvdHRvbSwgcGxvdE9mZnNldC5ib3R0b20pKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHNldHVwR3JpZCgpIHsKICAgICAgICAgICAgdmFyIGksIGF4ZXMgPSBhbGxBeGVzKCksIHNob3dHcmlkID0gb3B0aW9ucy5ncmlkLnNob3c7CgogICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBwbG90J3Mgb2Zmc2V0IGZyb20gdGhlIGVkZ2Ugb2YgdGhlIGNhbnZhcwoKICAgICAgICAgICAgZm9yICh2YXIgYSBpbiBwbG90T2Zmc2V0KSB7CiAgICAgICAgICAgICAgICB2YXIgbWFyZ2luID0gb3B0aW9ucy5ncmlkLm1hcmdpbiB8fCAwOwogICAgICAgICAgICAgICAgcGxvdE9mZnNldFthXSA9IHR5cGVvZiBtYXJnaW4gPT0gIm51bWJlciIgPyBtYXJnaW4gOiBtYXJnaW5bYV0gfHwgMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZXhlY3V0ZUhvb2tzKGhvb2tzLnByb2Nlc3NPZmZzZXQsIFtwbG90T2Zmc2V0XSk7CgogICAgICAgICAgICAvLyBJZiB0aGUgZ3JpZCBpcyB2aXNpYmxlLCBhZGQgaXRzIGJvcmRlciB3aWR0aCB0byB0aGUgb2Zmc2V0CgogICAgICAgICAgICBmb3IgKHZhciBhIGluIHBsb3RPZmZzZXQpIHsKICAgICAgICAgICAgICAgIGlmKHR5cGVvZihvcHRpb25zLmdyaWQuYm9yZGVyV2lkdGgpID09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgcGxvdE9mZnNldFthXSArPSBzaG93R3JpZCA\/IG9wdGlvbnMuZ3JpZC5ib3JkZXJXaWR0aFthXSA6IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBwbG90T2Zmc2V0W2FdICs9IHNob3dHcmlkID8gb3B0aW9ucy5ncmlkLmJvcmRlcldpZHRoIDogMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgJC5lYWNoKGF4ZXMsIGZ1bmN0aW9uIChfLCBheGlzKSB7CiAgICAgICAgICAgICAgICB2YXIgYXhpc09wdHMgPSBheGlzLm9wdGlvbnM7CiAgICAgICAgICAgICAgICBheGlzLnNob3cgPSBheGlzT3B0cy5zaG93ID09IG51bGwgPyBheGlzLnVzZWQgOiBheGlzT3B0cy5zaG93OwogICAgICAgICAgICAgICAgYXhpcy5yZXNlcnZlU3BhY2UgPSBheGlzT3B0cy5yZXNlcnZlU3BhY2UgPT0gbnVsbCA\/IGF4aXMuc2hvdyA6IGF4aXNPcHRzLnJlc2VydmVTcGFjZTsKICAgICAgICAgICAgICAgIHNldFJhbmdlKGF4aXMpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChzaG93R3JpZCkgewoKICAgICAgICAgICAgICAgIHZhciBhbGxvY2F0ZWRBeGVzID0gJC5ncmVwKGF4ZXMsIGZ1bmN0aW9uIChheGlzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF4aXMuc2hvdyB8fCBheGlzLnJlc2VydmVTcGFjZTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICQuZWFjaChhbGxvY2F0ZWRBeGVzLCBmdW5jdGlvbiAoXywgYXhpcykgewogICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgdGhlIHRpY2tzCiAgICAgICAgICAgICAgICAgICAgc2V0dXBUaWNrR2VuZXJhdGlvbihheGlzKTsKICAgICAgICAgICAgICAgICAgICBzZXRUaWNrcyhheGlzKTsKICAgICAgICAgICAgICAgICAgICBzbmFwUmFuZ2VUb1RpY2tzKGF4aXMsIGF4aXMudGlja3MpOwogICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgbGFiZWxXaWR0aC9IZWlnaHQgZm9yIGF4aXMKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlVGlja0xhYmVscyhheGlzKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vIHdpdGggYWxsIGRpbWVuc2lvbnMgY2FsY3VsYXRlZCwgd2UgY2FuIGNvbXB1dGUgdGhlCiAgICAgICAgICAgICAgICAvLyBheGlzIGJvdW5kaW5nIGJveGVzLCBzdGFydCBmcm9tIHRoZSBvdXRzaWRlCiAgICAgICAgICAgICAgICAvLyAocmV2ZXJzZSBvcmRlcikKICAgICAgICAgICAgICAgIGZvciAoaSA9IGFsbG9jYXRlZEF4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpCiAgICAgICAgICAgICAgICAgICAgYWxsb2NhdGVBeGlzQm94Rmlyc3RQaGFzZShhbGxvY2F0ZWRBeGVzW2ldKTsKCiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2UndmUgZ290IGVub3VnaCBzcGFjZSBmb3IgdGhpbmdzIHRoYXQKICAgICAgICAgICAgICAgIC8vIG1pZ2h0IHN0aWNrIG91dAogICAgICAgICAgICAgICAgYWRqdXN0TGF5b3V0Rm9yVGhpbmdzU3RpY2tpbmdPdXQoKTsKCiAgICAgICAgICAgICAgICAkLmVhY2goYWxsb2NhdGVkQXhlcywgZnVuY3Rpb24gKF8sIGF4aXMpIHsKICAgICAgICAgICAgICAgICAgICBhbGxvY2F0ZUF4aXNCb3hTZWNvbmRQaGFzZShheGlzKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBwbG90V2lkdGggPSBzdXJmYWNlLndpZHRoIC0gcGxvdE9mZnNldC5sZWZ0IC0gcGxvdE9mZnNldC5yaWdodDsKICAgICAgICAgICAgcGxvdEhlaWdodCA9IHN1cmZhY2UuaGVpZ2h0IC0gcGxvdE9mZnNldC5ib3R0b20gLSBwbG90T2Zmc2V0LnRvcDsKCiAgICAgICAgICAgIC8vIG5vdyB3ZSBnb3QgdGhlIHByb3BlciBwbG90IGRpbWVuc2lvbnMsIHdlIGNhbiBjb21wdXRlIHRoZSBzY2FsaW5nCiAgICAgICAgICAgICQuZWFjaChheGVzLCBmdW5jdGlvbiAoXywgYXhpcykgewogICAgICAgICAgICAgICAgc2V0VHJhbnNmb3JtYXRpb25IZWxwZXJzKGF4aXMpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChzaG93R3JpZCkgewogICAgICAgICAgICAgICAgZHJhd0F4aXNMYWJlbHMoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaW5zZXJ0TGVnZW5kKCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzZXRSYW5nZShheGlzKSB7CiAgICAgICAgICAgIHZhciBvcHRzID0gYXhpcy5vcHRpb25zLAogICAgICAgICAgICAgICAgbWluID0gKyhvcHRzLm1pbiAhPSBudWxsID8gb3B0cy5taW4gOiBheGlzLmRhdGFtaW4pLAogICAgICAgICAgICAgICAgbWF4ID0gKyhvcHRzLm1heCAhPSBudWxsID8gb3B0cy5tYXggOiBheGlzLmRhdGFtYXgpLAogICAgICAgICAgICAgICAgZGVsdGEgPSBtYXggLSBtaW47CgogICAgICAgICAgICBpZiAoZGVsdGEgPT0gMC4wKSB7CiAgICAgICAgICAgICAgICAvLyBkZWdlbmVyYXRlIGNhc2UKICAgICAgICAgICAgICAgIHZhciB3aWRlbiA9IG1heCA9PSAwID8gMSA6IDAuMDE7CgogICAgICAgICAgICAgICAgaWYgKG9wdHMubWluID09IG51bGwpCiAgICAgICAgICAgICAgICAgICAgbWluIC09IHdpZGVuOwogICAgICAgICAgICAgICAgLy8gYWx3YXlzIHdpZGVuIG1heCBpZiB3ZSBjb3VsZG4ndCB3aWRlbiBtaW4gdG8gZW5zdXJlIHdlCiAgICAgICAgICAgICAgICAvLyBkb24ndCBmYWxsIGludG8gbWluID09IG1heCB3aGljaCBkb2Vzbid0IHdvcmsKICAgICAgICAgICAgICAgIGlmIChvcHRzLm1heCA9PSBudWxsIHx8IG9wdHMubWluICE9IG51bGwpCiAgICAgICAgICAgICAgICAgICAgbWF4ICs9IHdpZGVuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgLy8gY29uc2lkZXIgYXV0b3NjYWxpbmcKICAgICAgICAgICAgICAgIHZhciBtYXJnaW4gPSBvcHRzLmF1dG9zY2FsZU1hcmdpbjsKICAgICAgICAgICAgICAgIGlmIChtYXJnaW4gIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm1pbiA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1pbiAtPSBkZWx0YSAqIG1hcmdpbjsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIGRvbid0IGdvIGJlbG93IHplcm8gaWYgYWxsIHZhbHVlcwogICAgICAgICAgICAgICAgICAgICAgICAvLyBhcmUgcG9zaXRpdmUKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pbiA8IDAgJiYgYXhpcy5kYXRhbWluICE9IG51bGwgJiYgYXhpcy5kYXRhbWluID49IDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSAwOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXggPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICBtYXggKz0gZGVsdGEgKiBtYXJnaW47CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXggPiAwICYmIGF4aXMuZGF0YW1heCAhPSBudWxsICYmIGF4aXMuZGF0YW1heCA8PSAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYXhpcy5taW4gPSBtaW47CiAgICAgICAgICAgIGF4aXMubWF4ID0gbWF4OwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2V0dXBUaWNrR2VuZXJhdGlvbihheGlzKSB7CiAgICAgICAgICAgIHZhciBvcHRzID0gYXhpcy5vcHRpb25zOwoKICAgICAgICAgICAgLy8gZXN0aW1hdGUgbnVtYmVyIG9mIHRpY2tzCiAgICAgICAgICAgIHZhciBub1RpY2tzOwogICAgICAgICAgICBpZiAodHlwZW9mIG9wdHMudGlja3MgPT0gIm51bWJlciIgJiYgb3B0cy50aWNrcyA+IDApCiAgICAgICAgICAgICAgICBub1RpY2tzID0gb3B0cy50aWNrczsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgLy8gaGV1cmlzdGljIGJhc2VkIG9uIHRoZSBtb2RlbCBhKnNxcnQoeCkgZml0dGVkIHRvCiAgICAgICAgICAgICAgICAvLyBzb21lIGRhdGEgcG9pbnRzIHRoYXQgc2VlbWVkIHJlYXNvbmFibGUKICAgICAgICAgICAgICAgIG5vVGlja3MgPSAwLjMgKiBNYXRoLnNxcnQoYXhpcy5kaXJlY3Rpb24gPT0gIngiID8gc3VyZmFjZS53aWR0aCA6IHN1cmZhY2UuaGVpZ2h0KTsKCiAgICAgICAgICAgIHZhciBkZWx0YSA9IChheGlzLm1heCAtIGF4aXMubWluKSAvIG5vVGlja3MsCiAgICAgICAgICAgICAgICBkZWMgPSAtTWF0aC5mbG9vcihNYXRoLmxvZyhkZWx0YSkgLyBNYXRoLkxOMTApLAogICAgICAgICAgICAgICAgbWF4RGVjID0gb3B0cy50aWNrRGVjaW1hbHM7CgogICAgICAgICAgICBpZiAobWF4RGVjICE9IG51bGwgJiYgZGVjID4gbWF4RGVjKSB7CiAgICAgICAgICAgICAgICBkZWMgPSBtYXhEZWM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBtYWduID0gTWF0aC5wb3coMTAsIC1kZWMpLAogICAgICAgICAgICAgICAgbm9ybSA9IGRlbHRhIC8gbWFnbiwgLy8gbm9ybSBpcyBiZXR3ZWVuIDEuMCBhbmQgMTAuMAogICAgICAgICAgICAgICAgc2l6ZTsKCiAgICAgICAgICAgIGlmIChub3JtIDwgMS41KSB7CiAgICAgICAgICAgICAgICBzaXplID0gMTsKICAgICAgICAgICAgfSBlbHNlIGlmIChub3JtIDwgMykgewogICAgICAgICAgICAgICAgc2l6ZSA9IDI7CiAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIDIuNSwgcmVxdWlyZXMgYW4gZXh0cmEgZGVjaW1hbAogICAgICAgICAgICAgICAgaWYgKG5vcm0gPiAyLjI1ICYmIChtYXhEZWMgPT0gbnVsbCB8fCBkZWMgKyAxIDw9IG1heERlYykpIHsKICAgICAgICAgICAgICAgICAgICBzaXplID0gMi41OwogICAgICAgICAgICAgICAgICAgICsrZGVjOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKG5vcm0gPCA3LjUpIHsKICAgICAgICAgICAgICAgIHNpemUgPSA1OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2l6ZSA9IDEwOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzaXplICo9IG1hZ247CgogICAgICAgICAgICBpZiAob3B0cy5taW5UaWNrU2l6ZSAhPSBudWxsICYmIHNpemUgPCBvcHRzLm1pblRpY2tTaXplKSB7CiAgICAgICAgICAgICAgICBzaXplID0gb3B0cy5taW5UaWNrU2l6ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYXhpcy5kZWx0YSA9IGRlbHRhOwogICAgICAgICAgICBheGlzLnRpY2tEZWNpbWFscyA9IE1hdGgubWF4KDAsIG1heERlYyAhPSBudWxsID8gbWF4RGVjIDogZGVjKTsKICAgICAgICAgICAgYXhpcy50aWNrU2l6ZSA9IG9wdHMudGlja1NpemUgfHwgc2l6ZTsKCiAgICAgICAgICAgIC8vIFRpbWUgbW9kZSB3YXMgbW92ZWQgdG8gYSBwbHVnLWluIGluIDAuOCwgYW5kIHNpbmNlIHNvIG1hbnkgcGVvcGxlIHVzZSBpdAogICAgICAgICAgICAvLyB3ZSdsbCBhZGQgYW4gZXNwZWNpYWxseSBmcmllbmRseSByZW1pbmRlciB0byBtYWtlIHN1cmUgdGhleSBpbmNsdWRlZCBpdC4KCiAgICAgICAgICAgIGlmIChvcHRzLm1vZGUgPT0gInRpbWUiICYmICFheGlzLnRpY2tHZW5lcmF0b3IpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiVGltZSBtb2RlIHJlcXVpcmVzIHRoZSBmbG90LnRpbWUgcGx1Z2luLiIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBGbG90IHN1cHBvcnRzIGJhc2UtMTAgYXhlczsgYW55IG90aGVyIG1vZGUgZWxzZSBpcyBoYW5kbGVkIGJ5IGEgcGx1Zy1pbiwKICAgICAgICAgICAgLy8gbGlrZSBmbG90LnRpbWUuanMuCgogICAgICAgICAgICBpZiAoIWF4aXMudGlja0dlbmVyYXRvcikgewoKICAgICAgICAgICAgICAgIGF4aXMudGlja0dlbmVyYXRvciA9IGZ1bmN0aW9uIChheGlzKSB7CgogICAgICAgICAgICAgICAgICAgIHZhciB0aWNrcyA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGZsb29ySW5CYXNlKGF4aXMubWluLCBheGlzLnRpY2tTaXplKSwKICAgICAgICAgICAgICAgICAgICAgICAgaSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBOdW1iZXIuTmFOLAogICAgICAgICAgICAgICAgICAgICAgICBwcmV2OwoKICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSB2OwogICAgICAgICAgICAgICAgICAgICAgICB2ID0gc3RhcnQgKyBpICogYXhpcy50aWNrU2l6ZTsKICAgICAgICAgICAgICAgICAgICAgICAgdGlja3MucHVzaCh2KTsKICAgICAgICAgICAgICAgICAgICAgICAgKytpOwogICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHYgPCBheGlzLm1heCAmJiB2ICE9IHByZXYpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aWNrczsKICAgICAgICAgICAgICAgIH07CgoJCQkJYXhpcy50aWNrRm9ybWF0dGVyID0gZnVuY3Rpb24gKHZhbHVlLCBheGlzKSB7CgoJCQkJCXZhciBmYWN0b3IgPSBheGlzLnRpY2tEZWNpbWFscyA\/IE1hdGgucG93KDEwLCBheGlzLnRpY2tEZWNpbWFscykgOiAxOwoJCQkJCXZhciBmb3JtYXR0ZWQgPSAiIiArIE1hdGgucm91bmQodmFsdWUgKiBmYWN0b3IpIC8gZmFjdG9yOwoKCQkJCQkvLyBJZiB0aWNrRGVjaW1hbHMgd2FzIHNwZWNpZmllZCwgZW5zdXJlIHRoYXQgd2UgaGF2ZSBleGFjdGx5IHRoYXQKCQkJCQkvLyBtdWNoIHByZWNpc2lvbjsgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIHZhbHVlJ3Mgb3duIHByZWNpc2lvbi4KCgkJCQkJaWYgKGF4aXMudGlja0RlY2ltYWxzICE9IG51bGwpIHsKCQkJCQkJdmFyIGRlY2ltYWwgPSBmb3JtYXR0ZWQuaW5kZXhPZigiLiIpOwoJCQkJCQl2YXIgcHJlY2lzaW9uID0gZGVjaW1hbCA9PSAtMSA\/IDAgOiBmb3JtYXR0ZWQubGVuZ3RoIC0gZGVjaW1hbCAtIDE7CgkJCQkJCWlmIChwcmVjaXNpb24gPCBheGlzLnRpY2tEZWNpbWFscykgewoJCQkJCQkJcmV0dXJuIChwcmVjaXNpb24gPyBmb3JtYXR0ZWQgOiBmb3JtYXR0ZWQgKyAiLiIpICsgKCIiICsgZmFjdG9yKS5zdWJzdHIoMSwgYXhpcy50aWNrRGVjaW1hbHMgLSBwcmVjaXNpb24pOwoJCQkJCQl9CgkJCQkJfQoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLnRpY2tGb3JtYXR0ZXIpKQogICAgICAgICAgICAgICAgYXhpcy50aWNrRm9ybWF0dGVyID0gZnVuY3Rpb24gKHYsIGF4aXMpIHsgcmV0dXJuICIiICsgb3B0cy50aWNrRm9ybWF0dGVyKHYsIGF4aXMpOyB9OwoKICAgICAgICAgICAgaWYgKG9wdHMuYWxpZ25UaWNrc1dpdGhBeGlzICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHZhciBvdGhlckF4aXMgPSAoYXhpcy5kaXJlY3Rpb24gPT0gIngiID8geGF4ZXMgOiB5YXhlcylbb3B0cy5hbGlnblRpY2tzV2l0aEF4aXMgLSAxXTsKICAgICAgICAgICAgICAgIGlmIChvdGhlckF4aXMgJiYgb3RoZXJBeGlzLnVzZWQgJiYgb3RoZXJBeGlzICE9IGF4aXMpIHsKICAgICAgICAgICAgICAgICAgICAvLyBjb25zaWRlciBzbmFwcGluZyBtaW4vbWF4IHRvIG91dGVybW9zdCBuaWNlIHRpY2tzCiAgICAgICAgICAgICAgICAgICAgdmFyIG5pY2VUaWNrcyA9IGF4aXMudGlja0dlbmVyYXRvcihheGlzKTsKICAgICAgICAgICAgICAgICAgICBpZiAobmljZVRpY2tzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWluID09IG51bGwpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBheGlzLm1pbiA9IE1hdGgubWluKGF4aXMubWluLCBuaWNlVGlja3NbMF0pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXggPT0gbnVsbCAmJiBuaWNlVGlja3MubGVuZ3RoID4gMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF4aXMubWF4ID0gTWF0aC5tYXgoYXhpcy5tYXgsIG5pY2VUaWNrc1tuaWNlVGlja3MubGVuZ3RoIC0gMV0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgYXhpcy50aWNrR2VuZXJhdG9yID0gZnVuY3Rpb24gKGF4aXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29weSB0aWNrcywgc2NhbGVkIHRvIHRoaXMgYXhpcwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGlja3MgPSBbXSwgdiwgaTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG90aGVyQXhpcy50aWNrcy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IChvdGhlckF4aXMudGlja3NbaV0udiAtIG90aGVyQXhpcy5taW4pIC8gKG90aGVyQXhpcy5tYXggLSBvdGhlckF4aXMubWluKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBheGlzLm1pbiArIHYgKiAoYXhpcy5tYXggLSBheGlzLm1pbik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWNrcy5wdXNoKHYpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aWNrczsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAvLyB3ZSBtaWdodCBuZWVkIGFuIGV4dHJhIGRlY2ltYWwgc2luY2UgZm9yY2VkCiAgICAgICAgICAgICAgICAgICAgLy8gdGlja3MgZG9uJ3QgbmVjZXNzYXJpbHkgZml0IG5hdHVyYWxseQogICAgICAgICAgICAgICAgICAgIGlmICghYXhpcy5tb2RlICYmIG9wdHMudGlja0RlY2ltYWxzID09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4dHJhRGVjID0gTWF0aC5tYXgoMCwgLU1hdGguZmxvb3IoTWF0aC5sb2coYXhpcy5kZWx0YSkgLyBNYXRoLkxOMTApICsgMSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cyA9IGF4aXMudGlja0dlbmVyYXRvcihheGlzKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgcHJvY2VlZCBpZiB0aGUgdGljayBpbnRlcnZhbCByb3VuZGVkCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpdGggYW4gZXh0cmEgZGVjaW1hbCBkb2Vzbid0IGdpdmUgdXMgYQogICAgICAgICAgICAgICAgICAgICAgICAvLyB6ZXJvIGF0IGVuZAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0cy5sZW5ndGggPiAxICYmIC9cLi4qMCQvLnRlc3QoKHRzWzFdIC0gdHNbMF0pLnRvRml4ZWQoZXh0cmFEZWMpKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBheGlzLnRpY2tEZWNpbWFscyA9IGV4dHJhRGVjOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2V0VGlja3MoYXhpcykgewogICAgICAgICAgICB2YXIgb3RpY2tzID0gYXhpcy5vcHRpb25zLnRpY2tzLCB0aWNrcyA9IFtdOwogICAgICAgICAgICBpZiAob3RpY2tzID09IG51bGwgfHwgKHR5cGVvZiBvdGlja3MgPT0gIm51bWJlciIgJiYgb3RpY2tzID4gMCkpCiAgICAgICAgICAgICAgICB0aWNrcyA9IGF4aXMudGlja0dlbmVyYXRvcihheGlzKTsKICAgICAgICAgICAgZWxzZSBpZiAob3RpY2tzKSB7CiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG90aWNrcykpCiAgICAgICAgICAgICAgICAgICAgLy8gZ2VuZXJhdGUgdGhlIHRpY2tzCiAgICAgICAgICAgICAgICAgICAgdGlja3MgPSBvdGlja3MoYXhpcyk7CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgdGlja3MgPSBvdGlja3M7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGNsZWFuIHVwL2xhYmVsaWZ5IHRoZSBzdXBwbGllZCB0aWNrcywgY29weSB0aGVtIG92ZXIKICAgICAgICAgICAgdmFyIGksIHY7CiAgICAgICAgICAgIGF4aXMudGlja3MgPSBbXTsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRpY2tzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBudWxsOwogICAgICAgICAgICAgICAgdmFyIHQgPSB0aWNrc1tpXTsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgIHYgPSArdFswXTsKICAgICAgICAgICAgICAgICAgICBpZiAodC5sZW5ndGggPiAxKQogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IHRbMV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgdiA9ICt0OwogICAgICAgICAgICAgICAgaWYgKGxhYmVsID09IG51bGwpCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBheGlzLnRpY2tGb3JtYXR0ZXIodiwgYXhpcyk7CiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHYpKQogICAgICAgICAgICAgICAgICAgIGF4aXMudGlja3MucHVzaCh7IHY6IHYsIGxhYmVsOiBsYWJlbCB9KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc25hcFJhbmdlVG9UaWNrcyhheGlzLCB0aWNrcykgewogICAgICAgICAgICBpZiAoYXhpcy5vcHRpb25zLmF1dG9zY2FsZU1hcmdpbiAmJiB0aWNrcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAvLyBzbmFwIHRvIHRpY2tzCiAgICAgICAgICAgICAgICBpZiAoYXhpcy5vcHRpb25zLm1pbiA9PSBudWxsKQogICAgICAgICAgICAgICAgICAgIGF4aXMubWluID0gTWF0aC5taW4oYXhpcy5taW4sIHRpY2tzWzBdLnYpOwogICAgICAgICAgICAgICAgaWYgKGF4aXMub3B0aW9ucy5tYXggPT0gbnVsbCAmJiB0aWNrcy5sZW5ndGggPiAxKQogICAgICAgICAgICAgICAgICAgIGF4aXMubWF4ID0gTWF0aC5tYXgoYXhpcy5tYXgsIHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnYpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBkcmF3KCkgewoKICAgICAgICAgICAgc3VyZmFjZS5jbGVhcigpOwoKICAgICAgICAgICAgZXhlY3V0ZUhvb2tzKGhvb2tzLmRyYXdCYWNrZ3JvdW5kLCBbY3R4XSk7CgogICAgICAgICAgICB2YXIgZ3JpZCA9IG9wdGlvbnMuZ3JpZDsKCiAgICAgICAgICAgIC8vIGRyYXcgYmFja2dyb3VuZCwgaWYgYW55CiAgICAgICAgICAgIGlmIChncmlkLnNob3cgJiYgZ3JpZC5iYWNrZ3JvdW5kQ29sb3IpCiAgICAgICAgICAgICAgICBkcmF3QmFja2dyb3VuZCgpOwoKICAgICAgICAgICAgaWYgKGdyaWQuc2hvdyAmJiAhZ3JpZC5hYm92ZURhdGEpIHsKICAgICAgICAgICAgICAgIGRyYXdHcmlkKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICBleGVjdXRlSG9va3MoaG9va3MuZHJhd1NlcmllcywgW2N0eCwgc2VyaWVzW2ldXSk7CiAgICAgICAgICAgICAgICBkcmF3U2VyaWVzKHNlcmllc1tpXSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGV4ZWN1dGVIb29rcyhob29rcy5kcmF3LCBbY3R4XSk7CgogICAgICAgICAgICBpZiAoZ3JpZC5zaG93ICYmIGdyaWQuYWJvdmVEYXRhKSB7CiAgICAgICAgICAgICAgICBkcmF3R3JpZCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzdXJmYWNlLnJlbmRlcigpOwoKICAgICAgICAgICAgLy8gQSBkcmF3IGltcGxpZXMgdGhhdCBlaXRoZXIgdGhlIGF4ZXMgb3IgZGF0YSBoYXZlIGNoYW5nZWQsIHNvIHdlCiAgICAgICAgICAgIC8vIHNob3VsZCBwcm9iYWJseSB1cGRhdGUgdGhlIG92ZXJsYXkgaGlnaGxpZ2h0cyBhcyB3ZWxsLgoKICAgICAgICAgICAgdHJpZ2dlclJlZHJhd092ZXJsYXkoKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGV4dHJhY3RSYW5nZShyYW5nZXMsIGNvb3JkKSB7CiAgICAgICAgICAgIHZhciBheGlzLCBmcm9tLCB0bywga2V5LCBheGVzID0gYWxsQXhlcygpOwoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBheGVzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICBheGlzID0gYXhlc1tpXTsKICAgICAgICAgICAgICAgIGlmIChheGlzLmRpcmVjdGlvbiA9PSBjb29yZCkgewogICAgICAgICAgICAgICAgICAgIGtleSA9IGNvb3JkICsgYXhpcy5uICsgImF4aXMiOwogICAgICAgICAgICAgICAgICAgIGlmICghcmFuZ2VzW2tleV0gJiYgYXhpcy5uID09IDEpCiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IGNvb3JkICsgImF4aXMiOyAvLyBzdXBwb3J0IHgxYXhpcyBhcyB4YXhpcwogICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZXNba2V5XSkgewogICAgICAgICAgICAgICAgICAgICAgICBmcm9tID0gcmFuZ2VzW2tleV0uZnJvbTsKICAgICAgICAgICAgICAgICAgICAgICAgdG8gPSByYW5nZXNba2V5XS50bzsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBiYWNrd2FyZHMtY29tcGF0IHN0dWZmIC0gdG8gYmUgcmVtb3ZlZCBpbiBmdXR1cmUKICAgICAgICAgICAgaWYgKCFyYW5nZXNba2V5XSkgewogICAgICAgICAgICAgICAgYXhpcyA9IGNvb3JkID09ICJ4IiA\\/IGZ1bmN0aW9uIChib3R0b20sIHRvcCkgeyByZXR1cm4gZ2V0RmlsbFN0eWxlKHNlcmllcy5iYXJzLCBzZXJpZXMuY29sb3IsIGJvdHRvbSwgdG9wKTsgfSA6IG51bGw7CiAgICAgICAgICAgIHBsb3RCYXJzKHNlcmllcy5kYXRhcG9pbnRzLCBiYXJMZWZ0LCBiYXJMZWZ0ICsgc2VyaWVzLmJhcnMuYmFyV2lkdGgsIGZpbGxTdHlsZUNhbGxiYWNrLCBzZXJpZXMueGF4aXMsIHNlcmllcy55YXhpcyk7CiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRGaWxsU3R5bGUoZmlsbG9wdGlvbnMsIHNlcmllc0NvbG9yLCBib3R0b20sIHRvcCkgewogICAgICAgICAgICB2YXIgZmlsbCA9IGZpbGxvcHRpb25zLmZpbGw7CiAgICAgICAgICAgIGlmICghZmlsbCkKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwoKICAgICAgICAgICAgaWYgKGZpbGxvcHRpb25zLmZpbGxDb2xvcikKICAgICAgICAgICAgICAgIHJldHVybiBnZXRDb2xvck9yR3JhZGllbnQoZmlsbG9wdGlvbnMuZmlsbENvbG9yLCBib3R0b20sIHRvcCwgc2VyaWVzQ29sb3IpOwoKICAgICAgICAgICAgdmFyIGMgPSAkLmNvbG9yLnBhcnNlKHNlcmllc0NvbG9yKTsKICAgICAgICAgICAgYy5hID0gdHlwZW9mIGZpbGwgPT0gIm51bWJlciIgPyBmaWxsIDogMC40OwogICAgICAgICAgICBjLm5vcm1hbGl6ZSgpOwogICAgICAgICAgICByZXR1cm4gYy50b1N0cmluZygpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaW5zZXJ0TGVnZW5kKCkgewoKICAgICAgICAgICAgaWYgKG9wdGlvbnMubGVnZW5kLmNvbnRhaW5lciAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAkKG9wdGlvbnMubGVnZW5kLmNvbnRhaW5lcikuaHRtbCgiIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlci5maW5kKCIubGVnZW5kIikucmVtb3ZlKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghb3B0aW9ucy5sZWdlbmQuc2hvdykgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgZnJhZ21lbnRzID0gW10sIGVudHJpZXMgPSBbXSwgcm93U3RhcnRlZCA9IGZhbHNlLAogICAgICAgICAgICAgICAgbGYgPSBvcHRpb25zLmxlZ2VuZC5sYWJlbEZvcm1hdHRlciwgcywgbGFiZWw7CgogICAgICAgICAgICAvLyBCdWlsZCBhIGxpc3Qgb2YgbGVnZW5kIGVudHJpZXMsIHdpdGggZWFjaCBoYXZpbmcgYSBsYWJlbCBhbmQgYSBjb2xvcgoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgIHMgPSBzZXJpZXNbaV07CiAgICAgICAgICAgICAgICBpZiAocy5sYWJlbCkgewogICAgICAgICAgICAgICAgICAgIGxhYmVsID0gbGYgPyBsZihzLmxhYmVsLCBzKSA6IHMubGFiZWw7CiAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbGFiZWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcy5jb2xvcgogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFNvcnQgdGhlIGxlZ2VuZCB1c2luZyBlaXRoZXIgdGhlIGRlZmF1bHQgb3IgYSBjdXN0b20gY29tcGFyYXRvcgoKICAgICAgICAgICAgaWYgKG9wdGlvbnMubGVnZW5kLnNvcnRlZCkgewogICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRpb25zLmxlZ2VuZC5zb3J0ZWQpKSB7CiAgICAgICAgICAgICAgICAgICAgZW50cmllcy5zb3J0KG9wdGlvbnMubGVnZW5kLnNvcnRlZCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubGVnZW5kLnNvcnRlZCA9PSAicmV2ZXJzZSIpIHsKICAgICAgICAgICAgICAgIAllbnRyaWVzLnJldmVyc2UoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGFzY2VuZGluZyA9IG9wdGlvbnMubGVnZW5kLnNvcnRlZCAhPSAiZGVzY2VuZGluZyI7CiAgICAgICAgICAgICAgICAgICAgZW50cmllcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEubGFiZWwgPT0gYi5sYWJlbCA\/IDAgOiAoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYS5sYWJlbCA8IGIubGFiZWwpICE9IGFzY2VuZGluZyA\\",
    "size": "122971"
}