{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/jquery-validation\/dist\/jquery.validate.js",
    "lastUpdate": "2018-03-22+14:25:57.39",
    "contentFile": "\/KD86XC5bYS16QS1aMC05XSg\/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvLnRlc3QoIHZhbHVlICk7CgkJfSwKCgkJLy8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3VybC1tZXRob2QvCgkJdXJsOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7CgkJCS8vIGNvbnRyaWJ1dGVkIGJ5IFNjb3R0IEdvbnphbGV6OiBodHRwOi8vcHJvamVjdHMuc2NvdHRzcGxheWdyb3VuZC5jb20vaXJpLwoJCQlyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eKGh0dHBzP3xzP2Z0cCk6XC9cLygoKChbYS16XXxcZHwtfFwufF98fnxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSl8KCVbXGRhLWZdezJ9KXxbIVwkJidcKFwpXCpcKyw7PV18OikqQCk\/KCgoXGR8WzEtOV1cZHwxXGRcZHwyWzAtNF1cZHwyNVswLTVdKVwuKFxkfFsxLTldXGR8MVxkXGR8MlswLTRdXGR8MjVbMC01XSlcLihcZHxbMS05XVxkfDFcZFxkfDJbMC00XVxkfDI1WzAtNV0pXC4oXGR8WzEtOV1cZHwxXGRcZHwyWzAtNF1cZHwyNVswLTVdKSl8KCgoW2Etel18XGR8W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pfCgoW2Etel18XGR8W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pKFthLXpdfFxkfC18XC58X3x+fFtcdTAwQTAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdKSooW2Etel18XGR8W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pKSlcLikrKChbYS16XXxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSl8KChbYS16XXxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSkoW2Etel18XGR8LXxcLnxffH58W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pKihbYS16XXxbXHUwMEEwLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkVGXSkpKVwuPykoOlxkKik\/KShcLygoKFthLXpdfFxkfC18XC58X3x+fFtcdTAwQTAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdKXwoJVtcZGEtZl17Mn0pfFshXCQmJ1woXClcKlwrLDs9XXw6fEApKyhcLygoW2Etel18XGR8LXxcLnxffH58W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pfCglW1xkYS1mXXsyfSl8WyFcJCYnXChcKVwqXCssOz1dfDp8QCkqKSopPyk\/KFw\/KCgoW2Etel18XGR8LXxcLnxffH58W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pfCglW1xkYS1mXXsyfSl8WyFcJCYnXChcKVwqXCssOz1dfDp8QCl8W1x1RTAwMC1cdUY4RkZdfFwvfFw\/KSopPygjKCgoW2Etel18XGR8LXxcLnxffH58W1x1MDBBMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0pfCglW1xkYS1mXXsyfSl8WyFcJCYnXChcKVwqXCssOz1dfDp8QCl8XC98XD8pKik\/JC9pLnRlc3QoIHZhbHVlICk7CgkJfSwKCgkJLy8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RhdGUtbWV0aG9kLwoJCWRhdGU6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHsKCQkJcmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAhL0ludmFsaWR8TmFOLy50ZXN0KCBuZXcgRGF0ZSggdmFsdWUgKS50b1N0cmluZygpICk7CgkJfSwKCgkJLy8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RhdGVJU08tbWV0aG9kLwoJCWRhdGVJU086IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHsKCQkJcmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlxkezR9W1wvXC1dKDA\/WzEtOV18MVswMTJdKVtcL1wtXSgwP1sxLTldfFsxMl1bMC05XXwzWzAxXSkkLy50ZXN0KCB2YWx1ZSApOwoJCX0sCgoJCS8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9udW1iZXItbWV0aG9kLwoJCW51bWJlcjogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkgewoJCQlyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eLT8oPzpcZCt8XGR7MSwzfSg\/OixcZHszfSkrKT8oPzpcLlxkKyk\/JC8udGVzdCggdmFsdWUgKTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGlnaXRzLW1ldGhvZC8KCQlkaWdpdHM6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHsKCQkJcmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlxkKyQvLnRlc3QoIHZhbHVlICk7CgkJfSwKCgkJLy8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2NyZWRpdGNhcmQtbWV0aG9kLwoJCS8vIGJhc2VkIG9uIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTHVobi8KCQljcmVkaXRjYXJkOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7CgkJCWlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkgewoJCQkJcmV0dXJuICJkZXBlbmRlbmN5LW1pc21hdGNoIjsKCQkJfQoJCQkvLyBhY2NlcHQgb25seSBzcGFjZXMsIGRpZ2l0cyBhbmQgZGFzaGVzCgkJCWlmICggL1teMC05IFwtXSsvLnRlc3QoIHZhbHVlICkgKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQkJdmFyIG5DaGVjayA9IDAsCgkJCQluRGlnaXQgPSAwLAoJCQkJYkV2ZW4gPSBmYWxzZSwKCQkJCW4sIGNEaWdpdDsKCgkJCXZhbHVlID0gdmFsdWUucmVwbGFjZSggL1xEL2csICIiICk7CgoJCQkvLyBCYXNpbmcgbWluIGFuZCBtYXggbGVuZ3RoIG9uCgkJCS8vIGh0dHA6Ly9kZXZlbG9wZXIuZWFuLmNvbS9nZW5lcmFsX2luZm8vVmFsaWRfQ3JlZGl0X0NhcmRfVHlwZXMKCQkJaWYgKCB2YWx1ZS5sZW5ndGggPCAxMyB8fCB2YWx1ZS5sZW5ndGggPiAxOSApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJZm9yICggbiA9IHZhbHVlLmxlbmd0aCAtIDE7IG4gPj0gMDsgbi0tKSB7CgkJCQljRGlnaXQgPSB2YWx1ZS5jaGFyQXQoIG4gKTsKCQkJCW5EaWdpdCA9IHBhcnNlSW50KCBjRGlnaXQsIDEwICk7CgkJCQlpZiAoIGJFdmVuICkgewoJCQkJCWlmICggKCBuRGlnaXQgKj0gMiApID4gOSApIHsKCQkJCQkJbkRpZ2l0IC09IDk7CgkJCQkJfQoJCQkJfQoJCQkJbkNoZWNrICs9IG5EaWdpdDsKCQkJCWJFdmVuID0gIWJFdmVuOwoJCQl9CgoJCQlyZXR1cm4gKCBuQ2hlY2sgJSAxMCApID09PSAwOwoJCX0sCgoJCS8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9taW5sZW5ndGgtbWV0aG9kLwoJCW1pbmxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHsKCQkJdmFyIGxlbmd0aCA9ICQuaXNBcnJheSggdmFsdWUgKSA\/IHZhbHVlLmxlbmd0aCA6IHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApOwoJCQlyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IGxlbmd0aCA+PSBwYXJhbTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWF4bGVuZ3RoLW1ldGhvZC8KCQltYXhsZW5ndGg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7CgkJCXZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTsKCQkJcmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCBsZW5ndGggPD0gcGFyYW07CgkJfSwKCgkJLy8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JhbmdlbGVuZ3RoLW1ldGhvZC8KCQlyYW5nZWxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHsKCQkJdmFyIGxlbmd0aCA9ICQuaXNBcnJheSggdmFsdWUgKSA\/IHZhbHVlLmxlbmd0aCA6IHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApOwoJCQlyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8ICggbGVuZ3RoID49IHBhcmFtWyAwIF0gJiYgbGVuZ3RoIDw9IHBhcmFtWyAxIF0gKTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWluLW1ldGhvZC8KCQltaW46IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7CgkJCXJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsdWUgPj0gcGFyYW07CgkJfSwKCgkJLy8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL21heC1tZXRob2QvCgkJbWF4OiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkgewoJCQlyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHZhbHVlIDw9IHBhcmFtOwoJCX0sCgoJCS8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9yYW5nZS1tZXRob2QvCgkJcmFuZ2U6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7CgkJCXJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgKCB2YWx1ZSA+PSBwYXJhbVsgMCBdICYmIHZhbHVlIDw9IHBhcmFtWyAxIF0gKTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZXF1YWxUby1tZXRob2QvCgkJZXF1YWxUbzogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHsKCQkJLy8gYmluZCB0byB0aGUgYmx1ciBldmVudCBvZiB0aGUgdGFyZ2V0IGluIG9yZGVyIHRvIHJldmFsaWRhdGUgd2hlbmV2ZXIgdGhlIHRhcmdldCBmaWVsZCBpcyB1cGRhdGVkCgkJCS8vIFRPRE8gZmluZCBhIHdheSB0byBiaW5kIHRoZSBldmVudCBqdXN0IG9uY2UsIGF2b2lkaW5nIHRoZSB1bmJpbmQtcmViaW5kIG92ZXJoZWFkCgkJCXZhciB0YXJnZXQgPSAkKCBwYXJhbSApOwoJCQlpZiAoIHRoaXMuc2V0dGluZ3Mub25mb2N1c291dCApIHsKCQkJCXRhcmdldC51bmJpbmQoICIudmFsaWRhdGUtZXF1YWxUbyIgKS5iaW5kKCAiYmx1ci52YWxpZGF0ZS1lcXVhbFRvIiwgZnVuY3Rpb24oKSB7CgkJCQkJJCggZWxlbWVudCApLnZhbGlkKCk7CgkJCQl9KTsKCQkJfQoJCQlyZXR1cm4gdmFsdWUgPT09IHRhcmdldC52YWwoKTsKCQl9LAoKCQkvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmVtb3RlLW1ldGhvZC8KCQlyZW1vdGU6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7CgkJCWlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkgewoJCQkJcmV0dXJuICJkZXBlbmRlbmN5LW1pc21hdGNoIjsKCQkJfQoKCQkJdmFyIHByZXZpb3VzID0gdGhpcy5wcmV2aW91c1ZhbHVlKCBlbGVtZW50ICksCgkJCQl2YWxpZGF0b3IsIGRhdGE7CgoJCQlpZiAoIXRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdICkgewoJCQkJdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0gPSB7fTsKCQkJfQoJCQlwcmV2aW91cy5vcmlnaW5hbE1lc3NhZ2UgPSB0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXS5yZW1vdGU7CgkJCXRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdLnJlbW90ZSA9IHByZXZpb3VzLm1lc3NhZ2U7CgoJCQlwYXJhbSA9IHR5cGVvZiBwYXJhbSA9PT0gInN0cmluZyIgJiYgeyB1cmw6IHBhcmFtIH0gfHwgcGFyYW07CgoJCQlpZiAoIHByZXZpb3VzLm9sZCA9PT0gdmFsdWUgKSB7CgkJCQlyZXR1cm4gcHJldmlvdXMudmFsaWQ7CgkJCX0KCgkJCXByZXZpb3VzLm9sZCA9IHZhbHVlOwoJCQl2YWxpZGF0b3IgPSB0aGlzOwoJCQl0aGlzLnN0YXJ0UmVxdWVzdCggZWxlbWVudCApOwoJCQlkYXRhID0ge307CgkJCWRhdGFbIGVsZW1lbnQubmFtZSBdID0gdmFsdWU7CgkJCSQuYWpheCggJC5leHRlbmQoIHRydWUsIHsKCQkJCXVybDogcGFyYW0sCgkJCQltb2RlOiAiYWJvcnQiLAoJCQkJcG9ydDogInZhbGlkYXRlIiArIGVsZW1lbnQubmFtZSwKCQkJCWRhdGFUeXBlOiAianNvbiIsCgkJCQlkYXRhOiBkYXRhLAoJCQkJY29udGV4dDogdmFsaWRhdG9yLmN1cnJlbnRGb3JtLAoJCQkJc3VjY2VzczogZnVuY3Rpb24oIHJlc3BvbnNlICkgewoJCQkJCXZhciB2YWxpZCA9IHJlc3BvbnNlID09PSB0cnVlIHx8IHJlc3BvbnNlID09PSAidHJ1ZSIsCgkJCQkJCWVycm9ycywgbWVzc2FnZSwgc3VibWl0dGVkOwoKCQkJCQl2YWxpZGF0b3Iuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdLnJlbW90ZSA9IHByZXZpb3VzLm9yaWdpbmFsTWVzc2FnZTsKCQkJCQlpZiAoIHZhbGlkICkgewoJCQkJCQlzdWJtaXR0ZWQgPSB2YWxpZGF0b3IuZm9ybVN1Ym1pdHRlZDsKCQkJCQkJdmFsaWRhdG9yLnByZXBhcmVFbGVtZW50KCBlbGVtZW50ICk7CgkJCQkJCXZhbGlkYXRvci5mb3JtU3VibWl0dGVkID0gc3VibWl0dGVkOwoJCQkJCQl2YWxpZGF0b3Iuc3VjY2Vzc0xpc3QucHVzaCggZWxlbWVudCApOwoJCQkJCQlkZWxldGUgdmFsaWRhdG9yLmludmFsaWRbIGVsZW1lbnQubmFtZSBdOwoJCQkJCQl2YWxpZGF0b3Iuc2hvd0Vycm9ycygpOwoJCQkJCX0gZWxzZSB7CgkJCQkJCWVycm9ycyA9IHt9OwoJCQkJCQltZXNzYWdlID0gcmVzcG9uc2UgfHwgdmFsaWRhdG9yLmRlZmF1bHRNZXNzYWdlKCBlbGVtZW50LCAicmVtb3RlIiApOwoJCQkJCQllcnJvcnNbIGVsZW1lbnQubmFtZSBdID0gcHJldmlvdXMubWVzc2FnZSA9ICQuaXNGdW5jdGlvbiggbWVzc2FnZSApID8gbWVzc2FnZSggdmFsdWUgKSA6IG1lc3NhZ2U7CgkJCQkJCXZhbGlkYXRvci5pbnZhbGlkWyBlbGVtZW50Lm5hbWUgXSA9IHRydWU7CgkJCQkJCXZhbGlkYXRvci5zaG93RXJyb3JzKCBlcnJvcnMgKTsKCQkJCQl9CgkJCQkJcHJldmlvdXMudmFsaWQgPSB2YWxpZDsKCQkJCQl2YWxpZGF0b3Iuc3RvcFJlcXVlc3QoIGVsZW1lbnQsIHZhbGlkICk7CgkJCQl9CgkJCX0sIHBhcmFtICkgKTsKCQkJcmV0dXJuICJwZW5kaW5nIjsKCQl9CgoJfQoKfSk7CgokLmZvcm1hdCA9IGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7Cgl0aHJvdyAiJC5mb3JtYXQgaGFzIGJlZW4gZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSAkLnZhbGlkYXRvci5mb3JtYXQgaW5zdGVhZC4iOwp9OwoKLy8gYWpheCBtb2RlOiBhYm9ydAovLyB1c2FnZTogJC5hamF4KHsgbW9kZTogImFib3J0IlssIHBvcnQ6ICJ1bmlxdWVwb3J0Il19KTsKLy8gaWYgbW9kZToiYWJvcnQiIGlzIHVzZWQsIHRoZSBwcmV2aW91cyByZXF1ZXN0IG9uIHRoYXQgcG9ydCAocG9ydCBjYW4gYmUgdW5kZWZpbmVkKSBpcyBhYm9ydGVkIHZpYSBYTUxIdHRwUmVxdWVzdC5hYm9ydCgpCgp2YXIgcGVuZGluZ1JlcXVlc3RzID0ge30sCglhamF4OwovLyBVc2UgYSBwcmVmaWx0ZXIgaWYgYXZhaWxhYmxlICgxLjUrKQppZiAoICQuYWpheFByZWZpbHRlciApIHsKCSQuYWpheFByZWZpbHRlcihmdW5jdGlvbiggc2V0dGluZ3MsIF8sIHhociApIHsKCQl2YXIgcG9ydCA9IHNldHRpbmdzLnBvcnQ7CgkJaWYgKCBzZXR0aW5ncy5tb2RlID09PSAiYWJvcnQiICkgewoJCQlpZiAoIHBlbmRpbmdSZXF1ZXN0c1twb3J0XSApIHsKCQkJCXBlbmRpbmdSZXF1ZXN0c1twb3J0XS5hYm9ydCgpOwoJCQl9CgkJCXBlbmRpbmdSZXF1ZXN0c1twb3J0XSA9IHhocjsKCQl9Cgl9KTsKfSBlbHNlIHsKCS8vIFByb3h5IGFqYXgKCWFqYXggPSAkLmFqYXg7CgkkLmFqYXggPSBmdW5jdGlvbiggc2V0dGluZ3MgKSB7CgkJdmFyIG1vZGUgPSAoICJtb2RlIiBpbiBzZXR0aW5ncyA\/IHNldHRpbmdzIDogJC5hamF4U2V0dGluZ3MgKS5tb2RlLAoJCQlwb3J0ID0gKCAicG9ydCIgaW4gc2V0dGluZ3MgPyBzZXR0aW5ncyA6ICQuYWpheFNldHRpbmdzICkucG9ydDsKCQlpZiAoIG1vZGUgPT09ICJhYm9ydCIgKSB7CgkJCWlmICggcGVuZGluZ1JlcXVlc3RzW3BvcnRdICkgewoJCQkJcGVuZGluZ1JlcXVlc3RzW3BvcnRdLmFib3J0KCk7CgkJCX0KCQkJcGVuZGluZ1JlcXVlc3RzW3BvcnRdID0gYWpheC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCQlyZXR1cm4gcGVuZGluZ1JlcXVlc3RzW3BvcnRdOwoJCX0KCQlyZXR1cm4gYWpheC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJfTsKfQoKLy8gcHJvdmlkZXMgZGVsZWdhdGUodHlwZTogU3RyaW5nLCBkZWxlZ2F0ZTogU2VsZWN0b3IsIGhhbmRsZXI6IENhbGxiYWNrKSBwbHVnaW4gZm9yIGVhc2llciBldmVudCBkZWxlZ2F0aW9uCi8vIGhhbmRsZXIgaXMgb25seSBjYWxsZWQgd2hlbiAkKGV2ZW50LnRhcmdldCkuaXMoZGVsZWdhdGUpLCBpbiB0aGUgc2NvcGUgb2YgdGhlIGpxdWVyeS1vYmplY3QgZm9yIGV2ZW50LnRhcmdldAoKJC5leHRlbmQoJC5mbiwgewoJdmFsaWRhdGVEZWxlZ2F0ZTogZnVuY3Rpb24oIGRlbGVnYXRlLCB0eXBlLCBoYW5kbGVyICkgewoJCXJldHVybiB0aGlzLmJpbmQodHlwZSwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQl2YXIgdGFyZ2V0ID0gJChldmVudC50YXJnZXQpOwoJCQlpZiAoIHRhcmdldC5pcyhkZWxlZ2F0ZSkgKSB7CgkJCQlyZXR1cm4gaGFuZGxlci5hcHBseSh0YXJnZXQsIGFyZ3VtZW50cyk7CgkJCX0KCQl9KTsKCX0KfSk7Cgp9KSk7",
    "size": "42696"
}