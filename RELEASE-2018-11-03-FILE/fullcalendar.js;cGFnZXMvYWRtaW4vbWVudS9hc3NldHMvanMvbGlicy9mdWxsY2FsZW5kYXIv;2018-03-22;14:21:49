{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/fullcalendar\/fullcalendar.js",
    "lastUpdate": "2018-03-22+14:21:49.28",
    "contentFile": "\/IG1lcmdlIHRoZW0gaW4KCWlmIChuZXdGY09wdGlvbnMpIHsKCQltZXJnZU9wdGlvbnMoZmNPcHRpb25zLCBuZXdGY09wdGlvbnMpOwoJfQoKCS8vIGNvbXB1dGUgbGFuZ3VhZ2Ugb3B0aW9ucyB0aGF0IHdlcmVuJ3QgZGVmaW5lZC4KCS8vIGFsd2F5cyBkbyB0aGlzLiBuZXdGY09wdGlvbnMgY2FuIGJlIHVuZGVmaW5lZCB3aGVuIGluaXRpYWxpemluZyBmcm9tIGkxOG4gZmlsZSwKCS8vIHNvIG5vIHdheSB0byB0ZWxsIGlmIHRoaXMgaXMgYW4gaW5pdGlhbGl6YXRpb24gb3IgYSBkZWZhdWx0LXNldHRpbmcuCgltb21PcHRpb25zID0gZ2V0TW9tZW50TG9jYWxlRGF0YShsYW5nQ29kZSk7IC8vIHdpbGwgZmFsbCBiYWNrIHRvIGVuCgkkLmVhY2gobW9tQ29tcHV0YWJsZU9wdGlvbnMsIGZ1bmN0aW9uKG5hbWUsIGZ1bmMpIHsKCQlpZiAoZmNPcHRpb25zW25hbWVdID09PSB1bmRlZmluZWQpIHsKCQkJZmNPcHRpb25zW25hbWVdID0gZnVuYyhtb21PcHRpb25zLCBmY09wdGlvbnMpOwoJCX0KCX0pOwoKCS8vIHNldCBpdCBhcyB0aGUgZGVmYXVsdCBsYW5ndWFnZSBmb3IgRnVsbENhbGVuZGFyCglkZWZhdWx0cy5sYW5nID0gbGFuZ0NvZGU7Cn07CgoKLy8gTk9URTogY2FuJ3QgZ3VhcmFudGVlIGFueSBvZiB0aGVzZSBjb21wdXRhdGlvbnMgd2lsbCBydW4gYmVjYXVzZSBub3QgZXZlcnkgbGFuZ3VhZ2UgaGFzIGRhdGVwaWNrZXIKLy8gY29uZmlncywgc28gbWFrZSBzdXJlIHRoZXJlIGFyZSBFbmdsaXNoIGZhbGxiYWNrcyBmb3IgdGhlc2UgaW4gdGhlIGRlZmF1bHRzIGZpbGUuCnZhciBkcENvbXB1dGFibGVPcHRpb25zID0gewoKCWRlZmF1bHRCdXR0b25UZXh0OiBmdW5jdGlvbihkcE9wdGlvbnMpIHsKCQlyZXR1cm4gewoJCQkvLyB0aGUgdHJhbnNsYXRpb25zIHNvbWV0aW1lcyB3cm9uZ2x5IGNvbnRhaW4gSFRNTCBlbnRpdGllcwoJCQlwcmV2OiBzdHJpcEh0bWxFbnRpdGllcyhkcE9wdGlvbnMucHJldlRleHQpLAoJCQluZXh0OiBzdHJpcEh0bWxFbnRpdGllcyhkcE9wdGlvbnMubmV4dFRleHQpLAoJCQl0b2RheTogc3RyaXBIdG1sRW50aXRpZXMoZHBPcHRpb25zLmN1cnJlbnRUZXh0KQoJCX07Cgl9LAoKCS8vIFByb2R1Y2VzIGZvcm1hdCBzdHJpbmdzIGxpa2UgIk1NTU0gWVlZWSIgLT4gIlNlcHRlbWJlciAyMDE0IgoJbW9udGhZZWFyRm9ybWF0OiBmdW5jdGlvbihkcE9wdGlvbnMpIHsKCQlyZXR1cm4gZHBPcHRpb25zLnNob3dNb250aEFmdGVyWWVhciA\\/KSBidXQgSSBoYXZlIG5vdCB0ZXN0ZWQuCi8vIFBSRVJFUVVJU0lURTogY29udGFpbmVyIGVsZW1lbnQgbXVzdCBoYXZlIGEgc2luZ2xlIGNoaWxkIHdpdGggZGlzcGxheTpibG9jawpmdW5jdGlvbiBnZXRTY3JvbGxiYXJXaWR0aHMoY29udGFpbmVyKSB7Cgl2YXIgY29udGFpbmVyTGVmdCA9IGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0OwoJdmFyIGNvbnRhaW5lclJpZ2h0ID0gY29udGFpbmVyTGVmdCArIGNvbnRhaW5lci53aWR0aCgpOwoJdmFyIGlubmVyID0gY29udGFpbmVyLmNoaWxkcmVuKCk7Cgl2YXIgaW5uZXJMZWZ0ID0gaW5uZXIub2Zmc2V0KCkubGVmdDsKCXZhciBpbm5lclJpZ2h0ID0gaW5uZXJMZWZ0ICsgaW5uZXIub3V0ZXJXaWR0aCgpOwoKCXJldHVybiB7CgkJbGVmdDogaW5uZXJMZWZ0IC0gY29udGFpbmVyTGVmdCwKCQlyaWdodDogY29udGFpbmVyUmlnaHQgLSBpbm5lclJpZ2h0Cgl9Owp9CgoKLy8gUmV0dXJucyBhIGJvb2xlYW4gd2hldGhlciB0aGlzIHdhcyBhIGxlZnQgbW91c2UgY2xpY2sgYW5kIG5vIGN0cmwga2V5ICh3aGljaCBtZWFucyByaWdodCBjbGljayBvbiBNYWMpCmZ1bmN0aW9uIGlzUHJpbWFyeU1vdXNlQnV0dG9uKGV2KSB7CglyZXR1cm4gZXYud2hpY2ggPT0gMSAmJiAhZXYuY3RybEtleTsKfQoKCi8qIEZ1bGxDYWxlbmRhci1zcGVjaWZpYyBNaXNjIFV0aWxpdGllcwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgovLyBDcmVhdGVzIGEgYmFzaWMgc2VnbWVudCB3aXRoIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3byByYW5nZXMuIFJldHVybnMgdW5kZWZpbmVkIGlmIG5vIGludGVyc2VjdGlvbi4KLy8gRXhwZWN0cyBhbGwgZGF0ZXMgdG8gYmUgbm9ybWFsaXplZCB0byB0aGUgc2FtZSB0aW1lem9uZSBiZWZvcmVoYW5kLgovLyBUT0RPOiBtb3ZlIHRvIGRhdGUgc2VjdGlvbj8KZnVuY3Rpb24gaW50ZXJzZWN0aW9uVG9TZWcoc3ViamVjdFJhbmdlLCBjb25zdHJhaW50UmFuZ2UpIHsKCXZhciBzdWJqZWN0U3RhcnQgPSBzdWJqZWN0UmFuZ2Uuc3RhcnQ7Cgl2YXIgc3ViamVjdEVuZCA9IHN1YmplY3RSYW5nZS5lbmQ7Cgl2YXIgY29uc3RyYWludFN0YXJ0ID0gY29uc3RyYWludFJhbmdlLnN0YXJ0OwoJdmFyIGNvbnN0cmFpbnRFbmQgPSBjb25zdHJhaW50UmFuZ2UuZW5kOwoJdmFyIHNlZ1N0YXJ0LCBzZWdFbmQ7Cgl2YXIgaXNTdGFydCwgaXNFbmQ7CgoJaWYgKHN1YmplY3RFbmQgPiBjb25zdHJhaW50U3RhcnQgJiYgc3ViamVjdFN0YXJ0IDwgY29uc3RyYWludEVuZCkgeyAvLyBpbiBib3VuZHMgYXQgYWxsPwoKCQlpZiAoc3ViamVjdFN0YXJ0ID49IGNvbnN0cmFpbnRTdGFydCkgewoJCQlzZWdTdGFydCA9IHN1YmplY3RTdGFydC5jbG9uZSgpOwoJCQlpc1N0YXJ0ID0gdHJ1ZTsKCQl9CgkJZWxzZSB7CgkJCXNlZ1N0YXJ0ID0gY29uc3RyYWludFN0YXJ0LmNsb25lKCk7CgkJCWlzU3RhcnQgPSAgZmFsc2U7CgkJfQoKCQlpZiAoc3ViamVjdEVuZCA8PSBjb25zdHJhaW50RW5kKSB7CgkJCXNlZ0VuZCA9IHN1YmplY3RFbmQuY2xvbmUoKTsKCQkJaXNFbmQgPSB0cnVlOwoJCX0KCQllbHNlIHsKCQkJc2VnRW5kID0gY29uc3RyYWludEVuZC5jbG9uZSgpOwoJCQlpc0VuZCA9IGZhbHNlOwoJCX0KCgkJcmV0dXJuIHsKCQkJc3RhcnQ6IHNlZ1N0YXJ0LAoJCQllbmQ6IHNlZ0VuZCwKCQkJaXNTdGFydDogaXNTdGFydCwKCQkJaXNFbmQ6IGlzRW5kCgkJfTsKCX0KfQoKCmZ1bmN0aW9uIHNtYXJ0UHJvcGVydHkob2JqLCBuYW1lKSB7IC8vIGdldCBhIGNhbWVsLWNhc2VkL25hbWVzcGFjZWQgcHJvcGVydHkgb2YgYW4gb2JqZWN0CglvYmogPSBvYmogfHwge307CglpZiAob2JqW25hbWVdICE9PSB1bmRlZmluZWQpIHsKCQlyZXR1cm4gb2JqW25hbWVdOwoJfQoJdmFyIHBhcnRzID0gbmFtZS5zcGxpdCgvKD89W0EtWl0pLyksCgkJaSA9IHBhcnRzLmxlbmd0aCAtIDEsIHJlczsKCWZvciAoOyBpPj0wOyBpLS0pIHsKCQlyZXMgPSBvYmpbcGFydHNbaV0udG9Mb3dlckNhc2UoKV07CgkJaWYgKHJlcyAhPT0gdW5kZWZpbmVkKSB7CgkJCXJldHVybiByZXM7CgkJfQoJfQoJcmV0dXJuIG9ialsnZGVmYXVsdCddOwp9CgoKLyogRGF0ZSBVdGlsaXRpZXMKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgp2YXIgZGF5SURzID0gWyAnc3VuJywgJ21vbicsICd0dWUnLCAnd2VkJywgJ3RodScsICdmcmknLCAnc2F0JyBdOwp2YXIgaW50ZXJ2YWxVbml0cyA9IFsgJ3llYXInLCAnbW9udGgnLCAnd2VlaycsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgJ21pbGxpc2Vjb25kJyBdOwoKCi8vIERpZmZzIHRoZSB0d28gbW9tZW50cyBpbnRvIGEgRHVyYXRpb24gd2hlcmUgZnVsbC1kYXlzIGFyZSByZWNvcmRlZCBmaXJzdCwgdGhlbiB0aGUgcmVtYWluaW5nIHRpbWUuCi8vIE1vbWVudHMgd2lsbCBoYXZlIHRoZWlyIHRpbWV6b25lcyBub3JtYWxpemVkLgpmdW5jdGlvbiBkaWZmRGF5VGltZShhLCBiKSB7CglyZXR1cm4gbW9tZW50LmR1cmF0aW9uKHsKCQlkYXlzOiBhLmNsb25lKCkuc3RyaXBUaW1lKCkuZGlmZihiLmNsb25lKCkuc3RyaXBUaW1lKCksICdkYXlzJyksCgkJbXM6IGEudGltZSgpIC0gYi50aW1lKCkgLy8gdGltZS1vZi1kYXkgZnJvbSBkYXkgc3RhcnQuIGRpc3JlZ2FyZHMgdGltZXpvbmUKCX0pOwp9CgoKLy8gRGlmZnMgdGhlIHR3byBtb21lbnRzIHZpYSB0aGVpciBzdGFydC1vZi1kYXkgKHJlZ2FyZGxlc3Mgb2YgdGltZXpvbmUpLiBQcm9kdWNlcyB3aG9sZS1kYXkgZHVyYXRpb25zLgpmdW5jdGlvbiBkaWZmRGF5KGEsIGIpIHsKCXJldHVybiBtb21lbnQuZHVyYXRpb24oewoJCWRheXM6IGEuY2xvbmUoKS5zdHJpcFRpbWUoKS5kaWZmKGIuY2xvbmUoKS5zdHJpcFRpbWUoKSwgJ2RheXMnKQoJfSk7Cn0KCgovLyBDb21wdXRlcyB0aGUgbGFyZ2VzIHdob2xlLXVuaXQgcGVyaW9kIG9mIHRpbWUsIGFzIGEgZHVyYXRpb24gb2JqZWN0LgovLyBGb3IgZXhhbXBsZSwgNDggaG91cnMgd2lsbCBiZSB7ZGF5czoyfSB3aGVyZWFzIDQ5IGhvdXJzIHdpbGwgYmUge2hvdXJzOjQ5fS4KLy8gQWNjZXB0cyBzdGFydC9lbmQsIGEgcmFuZ2Ugb2JqZWN0LCBvciBhbiBvcmlnaW5hbCBkdXJhdGlvbiBvYmplY3QuCi8qIChuZXZlciB1c2VkKQpmdW5jdGlvbiBjb21wdXRlSW50ZXJ2YWxEdXJhdGlvbihzdGFydCwgZW5kKSB7Cgl2YXIgZHVyYXRpb25JbnB1dCA9IHt9OwoJdmFyIGksIHVuaXQ7Cgl2YXIgdmFsOwoKCWZvciAoaSA9IDA7IGkgPCBpbnRlcnZhbFVuaXRzLmxlbmd0aDsgaSsrKSB7CgkJdW5pdCA9IGludGVydmFsVW5pdHNbaV07CgkJdmFsID0gY29tcHV0ZUludGVydmFsQXModW5pdCwgc3RhcnQsIGVuZCk7CgkJaWYgKHZhbCkgewoJCQlicmVhazsKCQl9Cgl9CgoJZHVyYXRpb25JbnB1dFt1bml0XSA9IHZhbDsKCXJldHVybiBtb21lbnQuZHVyYXRpb24oZHVyYXRpb25JbnB1dCk7Cn0KKi8KCgovLyBDb21wdXRlcyB0aGUgdW5pdCBuYW1lIG9mIHRoZSBsYXJnZXN0IHdob2xlLXVuaXQgcGVyaW9kIG9mIHRpbWUuCi8vIEZvciBleGFtcGxlLCA0OCBob3VycyB3aWxsIGJlICJkYXlzIiB3aGVyZXdhcyA0OSBob3VycyB3aWxsIGJlICJob3VycyIuCi8vIEFjY2VwdHMgc3RhcnQvZW5kLCBhIHJhbmdlIG9iamVjdCwgb3IgYW4gb3JpZ2luYWwgZHVyYXRpb24gb2JqZWN0LgpmdW5jdGlvbiBjb21wdXRlSW50ZXJ2YWxVbml0KHN0YXJ0LCBlbmQpIHsKCXZhciBpLCB1bml0OwoKCWZvciAoaSA9IDA7IGkgPCBpbnRlcnZhbFVuaXRzLmxlbmd0aDsgaSsrKSB7CgkJdW5pdCA9IGludGVydmFsVW5pdHNbaV07CgkJaWYgKGNvbXB1dGVJbnRlcnZhbEFzKHVuaXQsIHN0YXJ0LCBlbmQpKSB7CgkJCWJyZWFrOwoJCX0KCX0KCglyZXR1cm4gdW5pdDsgLy8gd2lsbCBiZSAibWlsbGlzZWNvbmRzIiBpZiBub3RoaW5nIGVsc2UgbWF0Y2hlcwp9CgoKLy8gQ29tcHV0ZXMgdGhlIG51bWJlciBvZiB1bml0cyB0aGUgaW50ZXJ2YWwgaXMgY2xlYW5seSBjb21wcmlzZWQgb2YuCi8vIElmIHRoZSBnaXZlbiB1bml0IGRvZXMgbm90IGNsZWFubHkgZGl2aWRlIHRoZSBpbnRlcnZhbCBhIHdob2xlIG51bWJlciBvZiB0aW1lcywgYGZhbHNlYCBpcyByZXR1cm5lZC4KLy8gQWNjZXB0cyBzdGFydC9lbmQsIGEgcmFuZ2Ugb2JqZWN0LCBvciBhbiBvcmlnaW5hbCBkdXJhdGlvbiBvYmplY3QuCmZ1bmN0aW9uIGNvbXB1dGVJbnRlcnZhbEFzKHVuaXQsIHN0YXJ0LCBlbmQpIHsKCXZhciB2YWw7CgoJaWYgKGVuZCAhPSBudWxsKSB7IC8vIGdpdmVuIHN0YXJ0LCBlbmQKCQl2YWwgPSBlbmQuZGlmZihzdGFydCwgdW5pdCwgdHJ1ZSk7Cgl9CgllbHNlIGlmIChtb21lbnQuaXNEdXJhdGlvbihzdGFydCkpIHsgLy8gZ2l2ZW4gZHVyYXRpb24KCQl2YWwgPSBzdGFydC5hcyh1bml0KTsKCX0KCWVsc2UgeyAvLyBnaXZlbiB7IHN0YXJ0LCBlbmQgfSByYW5nZSBvYmplY3QKCQl2YWwgPSBzdGFydC5lbmQuZGlmZihzdGFydC5zdGFydCwgdW5pdCwgdHJ1ZSk7Cgl9CgoJaWYgKHZhbCA+PSAxICYmIGlzSW50KHZhbCkpIHsKCQlyZXR1cm4gdmFsOwoJfQoKCXJldHVybiBmYWxzZTsKfQoKCmZ1bmN0aW9uIGlzTmF0aXZlRGF0ZShpbnB1dCkgewoJcmV0dXJuICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXScgfHwgaW5wdXQgaW5zdGFuY2VvZiBEYXRlOwp9CgoKLy8gUmV0dXJucyBhIGJvb2xlYW4gYWJvdXQgd2hldGhlciB0aGUgZ2l2ZW4gaW5wdXQgaXMgYSB0aW1lIHN0cmluZywgbGlrZSAiMDY6NDA6MDAiIG9yICIwNjowMCIKZnVuY3Rpb24gaXNUaW1lU3RyaW5nKHN0cikgewoJcmV0dXJuIC9eXGQrXDpcZCsoPzpcOlxkK1wuPyg\/OlxkezN9KT8pPyQvLnRlc3Qoc3RyKTsKfQoKCi8qIEdlbmVyYWwgVXRpbGl0aWVzCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKdmFyIGhhc093blByb3BNZXRob2QgPSB7fS5oYXNPd25Qcm9wZXJ0eTsKCgovLyBDcmVhdGUgYW4gb2JqZWN0IHRoYXQgaGFzIHRoZSBnaXZlbiBwcm90b3R5cGUuIEp1c3QgbGlrZSBPYmplY3QuY3JlYXRlCmZ1bmN0aW9uIGNyZWF0ZU9iamVjdChwcm90bykgewoJdmFyIGYgPSBmdW5jdGlvbigpIHt9OwoJZi5wcm90b3R5cGUgPSBwcm90bzsKCXJldHVybiBuZXcgZigpOwp9CgoKZnVuY3Rpb24gY29weU93blByb3BzKHNyYywgZGVzdCkgewoJZm9yICh2YXIgbmFtZSBpbiBzcmMpIHsKCQlpZiAoaGFzT3duUHJvcChzcmMsIG5hbWUpKSB7CgkJCWRlc3RbbmFtZV0gPSBzcmNbbmFtZV07CgkJfQoJfQp9CgoKZnVuY3Rpb24gaGFzT3duUHJvcChvYmosIG5hbWUpIHsKCXJldHVybiBoYXNPd25Qcm9wTWV0aG9kLmNhbGwob2JqLCBuYW1lKTsKfQoKCi8vIElzIHRoZSBnaXZlbiB2YWx1ZSBhIG5vbi1vYmplY3Qgbm9uLWZ1bmN0aW9uIHZhbHVlPwpmdW5jdGlvbiBpc0F0b21pYyh2YWwpIHsKCXJldHVybiAvdW5kZWZpbmVkfG51bGx8Ym9vbGVhbnxudW1iZXJ8c3RyaW5nLy50ZXN0KCQudHlwZSh2YWwpKTsKfQoKCmZ1bmN0aW9uIGFwcGx5QWxsKGZ1bmN0aW9ucywgdGhpc09iaiwgYXJncykgewoJaWYgKCQuaXNGdW5jdGlvbihmdW5jdGlvbnMpKSB7CgkJZnVuY3Rpb25zID0gWyBmdW5jdGlvbnMgXTsKCX0KCWlmIChmdW5jdGlvbnMpIHsKCQl2YXIgaTsKCQl2YXIgcmV0OwoJCWZvciAoaT0wOyBpPGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykgewoJCQlyZXQgPSBmdW5jdGlvbnNbaV0uYXBwbHkodGhpc09iaiwgYXJncykgfHwgcmV0OwoJCX0KCQlyZXR1cm4gcmV0OwoJfQp9CgoKZnVuY3Rpb24gZmlyc3REZWZpbmVkKCkgewoJZm9yICh2YXIgaT0wOyBpPGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewoJCWlmIChhcmd1bWVudHNbaV0gIT09IHVuZGVmaW5lZCkgewoJCQlyZXR1cm4gYXJndW1lbnRzW2ldOwoJCX0KCX0KfQoKCmZ1bmN0aW9uIGh0bWxFc2NhcGUocykgewoJcmV0dXJuIChzICsgJycpLnJlcGxhY2UoLyYvZywgJyZhbXA7JykKCQkucmVwbGFjZSgvPC9nLCAnJmx0OycpCgkJLnJlcGxhY2UoLz4vZywgJyZndDsnKQoJCS5yZXBsYWNlKC8nL2csICcmIzAzOTsnKQoJCS5yZXBsYWNlKC8iL2csICcmcXVvdDsnKQoJCS5yZXBsYWNlKC9cbi9nLCAnPGJyIC8+Jyk7Cn0KCgpmdW5jdGlvbiBzdHJpcEh0bWxFbnRpdGllcyh0ZXh0KSB7CglyZXR1cm4gdGV4dC5yZXBsYWNlKC8mLio\/Oy9nLCAnJyk7Cn0KCgpmdW5jdGlvbiBjYXBpdGFsaXNlRmlyc3RMZXR0ZXIoc3RyKSB7CglyZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpOwp9CgoKZnVuY3Rpb24gY29tcGFyZU51bWJlcnMoYSwgYikgeyAvLyBmb3IgLnNvcnQoKQoJcmV0dXJuIGEgLSBiOwp9CgoKZnVuY3Rpb24gaXNJbnQobikgewoJcmV0dXJuIG4gJSAxID09PSAwOwp9CgoKLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdAovLyBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yCi8vIE4gbWlsbGlzZWNvbmRzLgovLyBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvYmxvYi8xLjYuMC91bmRlcnNjb3JlLmpzI0w3MTQKZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCkgewoJdmFyIHRpbWVvdXRJZDsKCXZhciBhcmdzOwoJdmFyIGNvbnRleHQ7Cgl2YXIgdGltZXN0YW1wOyAvLyBvZiBtb3N0IHJlY2VudCBjYWxsCgl2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHsKCQl2YXIgbGFzdCA9ICtuZXcgRGF0ZSgpIC0gdGltZXN0YW1wOwoJCWlmIChsYXN0IDwgd2FpdCAmJiBsYXN0ID4gMCkgewoJCQl0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7CgkJfQoJCWVsc2UgewoJCQl0aW1lb3V0SWQgPSBudWxsOwoJCQlmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwoJCQlpZiAoIXRpbWVvdXRJZCkgewoJCQkJY29udGV4dCA9IGFyZ3MgPSBudWxsOwoJCQl9CgkJfQoJfTsKCglyZXR1cm4gZnVuY3Rpb24oKSB7CgkJY29udGV4dCA9IHRoaXM7CgkJYXJncyA9IGFyZ3VtZW50czsKCQl0aW1lc3RhbXAgPSArbmV3IERhdGUoKTsKCQlpZiAoIXRpbWVvdXRJZCkgewoJCQl0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTsKCQl9Cgl9Owp9Cgo7OwoKdmFyIGFtYmlnRGF0ZU9mTW9udGhSZWdleCA9IC9eXHMqXGR7NH0tXGRcZCQvOwp2YXIgYW1iaWdUaW1lT3Jab25lUmVnZXggPQoJL15ccypcZHs0fS0oPzooXGRcZC1cZFxkKXwoV1xkXGQkKXwoV1xkXGQtXGQpfChcZFxkXGQpKSgoVHwgKShcZFxkKDpcZFxkKDpcZFxkKFwuXGQrKT8pPyk\\/IGFuZCBhIGZvcm1hdCBzdHJpbmcgcHJvdmlkZWQ\/CgkJcmV0dXJuIGZvcm1hdERhdGUodGhpcywgYXJndW1lbnRzWzBdKTsgLy8gb3VyIGV4dGVuZGVkIGZvcm1hdHRpbmcKCX0KCWlmICh0aGlzLl9hbWJpZ1RpbWUpIHsKCQlyZXR1cm4gb2xkTW9tZW50Rm9ybWF0KHRoaXMsICdZWVlZLU1NLUREJyk7Cgl9CglpZiAodGhpcy5fYW1iaWdab25lKSB7CgkJcmV0dXJuIG9sZE1vbWVudEZvcm1hdCh0aGlzLCAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzJyk7Cgl9CglyZXR1cm4gb2xkTW9tZW50UHJvdG8uZm9ybWF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn07CgpuZXdNb21lbnRQcm90by50b0lTT1N0cmluZyA9IGZ1bmN0aW9uKCkgewoJaWYgKHRoaXMuX2FtYmlnVGltZSkgewoJCXJldHVybiBvbGRNb21lbnRGb3JtYXQodGhpcywgJ1lZWVktTU0tREQnKTsKCX0KCWlmICh0aGlzLl9hbWJpZ1pvbmUpIHsKCQlyZXR1cm4gb2xkTW9tZW50Rm9ybWF0KHRoaXMsICdZWVlZLU1NLUREW1RdSEg6bW06c3MnKTsKCX0KCXJldHVybiBvbGRNb21lbnRQcm90by50b0lTT1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9OwoKCi8vIFF1ZXJ5aW5nCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCi8vIElzIHRoZSBtb21lbnQgd2l0aGluIHRoZSBzcGVjaWZpZWQgcmFuZ2U\\\/CgkJCQl0aGlzLnNjcm9sbFRvcFZlbCA9IDA7CgkJCX0KCQl9CgoJCWlmICh0aGlzLnNjcm9sbExlZnRWZWwgPCAwKSB7IC8vIHNjcm9sbGluZyBsZWZ0PwoJCQlpZiAoZWwuc2Nyb2xsTGVmdCgpIDw9IDApIHsgLy8gYWxyZWFkeSBzY3JvbGxlZCBhbGwgdGhlIGxlZnQ\/CgkJCQl0aGlzLnNjcm9sbExlZnRWZWwgPSAwOwoJCQl9CgkJfQoJCWVsc2UgaWYgKHRoaXMuc2Nyb2xsTGVmdFZlbCA+IDApIHsgLy8gc2Nyb2xsaW5nIHJpZ2h0PwoJCQlpZiAoZWwuc2Nyb2xsTGVmdCgpICsgZWxbMF0uY2xpZW50V2lkdGggPj0gZWxbMF0uc2Nyb2xsV2lkdGgpIHsgLy8gYWxyZWFkeSBzY3JvbGxlZCBhbGwgdGhlIHdheSByaWdodD8KCQkJCXRoaXMuc2Nyb2xsTGVmdFZlbCA9IDA7CgkJCX0KCQl9Cgl9LAoKCgkvLyBUaGlzIGZ1bmN0aW9uIGdldHMgY2FsbGVkIGR1cmluZyBldmVyeSBpdGVyYXRpb24gb2YgdGhlIHNjcm9sbGluZyBhbmltYXRpb24gbG9vcAoJc2Nyb2xsSW50ZXJ2YWxGdW5jOiBmdW5jdGlvbigpIHsKCQl2YXIgZWwgPSB0aGlzLnNjcm9sbEVsOwoJCXZhciBmcmFjID0gdGhpcy5zY3JvbGxJbnRlcnZhbE1zIC8gMTAwMDsgLy8gY29uc2lkZXJpbmcgYW5pbWF0aW9uIGZyZXF1ZW5jeSwgd2hhdCB0aGUgdmVsIHNob3VsZCBiZSBtdWx0J2QgYnkKCgkJLy8gY2hhbmdlIHRoZSB2YWx1ZSBvZiBzY3JvbGxFbCdzIHNjcm9sbAoJCWlmICh0aGlzLnNjcm9sbFRvcFZlbCkgewoJCQllbC5zY3JvbGxUb3AoZWwuc2Nyb2xsVG9wKCkgKyB0aGlzLnNjcm9sbFRvcFZlbCAqIGZyYWMpOwoJCX0KCQlpZiAodGhpcy5zY3JvbGxMZWZ0VmVsKSB7CgkJCWVsLnNjcm9sbExlZnQoZWwuc2Nyb2xsTGVmdCgpICsgdGhpcy5zY3JvbGxMZWZ0VmVsICogZnJhYyk7CgkJfQoKCQl0aGlzLmNvbnN0cmFpblNjcm9sbFZlbCgpOyAvLyBzaW5jZSB0aGUgc2Nyb2xsIHZhbHVlcyBjaGFuZ2VkLCByZWNvbXB1dGUgdGhlIHZlbG9jaXRpZXMKCgkJLy8gaWYgc2Nyb2xsZWQgYWxsIHRoZSB3YXksIHdoaWNoIGNhdXNlcyB0aGUgdmVscyB0byBiZSB6ZXJvLCBzdG9wIHRoZSBhbmltYXRpb24gbG9vcAoJCWlmICghdGhpcy5zY3JvbGxUb3BWZWwgJiYgIXRoaXMuc2Nyb2xsTGVmdFZlbCkgewoJCQl0aGlzLnN0b3BTY3JvbGxpbmcoKTsKCQl9Cgl9LAoKCgkvLyBLaWxscyBhbnkgZXhpc3Rpbmcgc2Nyb2xsaW5nIGFuaW1hdGlvbiBsb29wCglzdG9wU2Nyb2xsaW5nOiBmdW5jdGlvbigpIHsKCQlpZiAodGhpcy5zY3JvbGxJbnRlcnZhbElkKSB7CgkJCWNsZWFySW50ZXJ2YWwodGhpcy5zY3JvbGxJbnRlcnZhbElkKTsKCQkJdGhpcy5zY3JvbGxJbnRlcnZhbElkID0gbnVsbDsKCgkJCS8vIHdoZW4gYWxsIGRvbmUgd2l0aCBzY3JvbGxpbmcsIHJlY29tcHV0ZSBwb3NpdGlvbnMgc2luY2UgdGhleSBwcm9iYWJseSBjaGFuZ2VkCgkJCXRoaXMuY29tcHV0ZUNvb3JkcygpOwoJCX0KCX0sCgoKCS8vIEdldCBjYWxsZWQgd2hlbiB0aGUgc2Nyb2xsRWwgaXMgc2Nyb2xsZWQgKE5PVEU6IHRoaXMgaXMgZGVsYXllZCB2aWEgZGVib3VuY2UpCglzY3JvbGxIYW5kbGVyOiBmdW5jdGlvbigpIHsKCQkvLyByZWNvbXB1dGUgYWxsIGNvb3JkaW5hdGVzLCBidXQgKm9ubHkqIGlmIHRoaXMgaXMgKm5vdCogcGFydCBvZiBvdXIgc2Nyb2xsaW5nIGFuaW1hdGlvbgoJCWlmICghdGhpcy5zY3JvbGxJbnRlcnZhbElkKSB7CgkJCXRoaXMuY29tcHV0ZUNvb3JkcygpOwoJCX0KCX0KCn0pOwoKCi8vIFJldHVybnMgYHRydWVgIGlmIHRoZSBjZWxscyBhcmUgaWRlbnRpY2FsbHkgZXF1YWwuIGBmYWxzZWAgb3RoZXJ3aXNlLgovLyBUaGV5IG11c3QgaGF2ZSB0aGUgc2FtZSByb3csIGNvbCwgYW5kIGJlIGZyb20gdGhlIHNhbWUgZ3JpZC4KLy8gVHdvIG51bGwgdmFsdWVzIHdpbGwgYmUgY29uc2lkZXJlZCBlcXVhbCwgYXMgdHdvICJvdXQgb2YgdGhlIGdyaWQiIHN0YXRlcyBhcmUgdGhlIHNhbWUuCmZ1bmN0aW9uIGlzQ2VsbHNFcXVhbChjZWxsMSwgY2VsbDIpIHsKCglpZiAoIWNlbGwxICYmICFjZWxsMikgewoJCXJldHVybiB0cnVlOwoJfQoKCWlmIChjZWxsMSAmJiBjZWxsMikgewoJCXJldHVybiBjZWxsMS5ncmlkID09PSBjZWxsMi5ncmlkICYmCgkJCWNlbGwxLnJvdyA9PT0gY2VsbDIucm93ICYmCgkJCWNlbGwxLmNvbCA9PT0gY2VsbDIuY29sOwoJfQoKCXJldHVybiBmYWxzZTsKfQoKOzsKCi8qIENyZWF0ZXMgYSBjbG9uZSBvZiBhbiBlbGVtZW50IGFuZCBsZXRzIGl0IHRyYWNrIHRoZSBtb3VzZSBhcyBpdCBtb3ZlcwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCnZhciBNb3VzZUZvbGxvd2VyID0gQ2xhc3MuZXh0ZW5kKHsKCglvcHRpb25zOiBudWxsLAoKCXNvdXJjZUVsOiBudWxsLCAvLyB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgY2xvbmVkIGFuZCBtYWRlIHRvIGxvb2sgbGlrZSBpdCBpcyBkcmFnZ2luZwoJZWw6IG51bGwsIC8vIHRoZSBjbG9uZSBvZiBgc291cmNlRWxgIHRoYXQgd2lsbCB0cmFjayB0aGUgbW91c2UKCXBhcmVudEVsOiBudWxsLCAvLyB0aGUgZWxlbWVudCB0aGF0IGBlbGAgKHRoZSBjbG9uZSkgd2lsbCBiZSBhdHRhY2hlZCB0bwoKCS8vIHRoZSBpbml0aWFsIHBvc2l0aW9uIG9mIGVsLCByZWxhdGl2ZSB0byB0aGUgb2Zmc2V0IHBhcmVudC4gbWFkZSB0byBtYXRjaCB0aGUgaW5pdGlhbCBvZmZzZXQgb2Ygc291cmNlRWwKCXRvcDA6IG51bGwsCglsZWZ0MDogbnVsbCwKCgkvLyB0aGUgaW5pdGlhbCBwb3NpdGlvbiBvZiB0aGUgbW91c2UKCW1vdXNlWTA6IG51bGwsCgltb3VzZVgwOiBudWxsLAoKCS8vIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHRoZSBtb3VzZSBoYXMgbW92ZWQgZnJvbSBpdHMgaW5pdGlhbCBwb3NpdGlvbgoJdG9wRGVsdGE6IG51bGwsCglsZWZ0RGVsdGE6IG51bGwsCgoJbW91c2Vtb3ZlUHJveHk6IG51bGwsIC8vIGRvY3VtZW50IG1vdXNlbW92ZSBoYW5kbGVyLCBib3VuZCB0byB0aGUgTW91c2VGb2xsb3dlcidzIGB0aGlzYAoKCWlzRm9sbG93aW5nOiBmYWxzZSwKCWlzSGlkZGVuOiBmYWxzZSwKCWlzQW5pbWF0aW5nOiBmYWxzZSwgLy8gZG9pbmcgdGhlIHJldmVydCBhbmltYXRpb24\\\/ICcgc3R5bGU9IicgKyBzdHlsZXMgKyAnIicgOiAnJykgKwoJCQknIC8+JzsKCX0sCgoKCS8qIEdlbmVyaWMgcmVuZGVyaW5nIHV0aWxpdGllcyBmb3Igc3ViY2xhc3NlcwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoJLy8gUmVuZGVycyBhIGRheS1vZi13ZWVrIGhlYWRlciByb3cuCgkvLyBUT0RPOiBtb3ZlIHRvIGFub3RoZXIgY2xhc3MuIG5vdCBhcHBsaWNhYmxlIHRvIGFsbCBHcmlkcwoJaGVhZEh0bWw6IGZ1bmN0aW9uKCkgewoJCXJldHVybiAnJyArCgkJCSc8ZGl2IGNsYXNzPSJmYy1yb3cgJyArIHRoaXMudmlldy53aWRnZXRIZWFkZXJDbGFzcyArICciPicgKwoJCQkJJzx0YWJsZT4nICsKCQkJCQknPHRoZWFkPicgKwoJCQkJCQl0aGlzLnJvd0h0bWwoJ2hlYWQnKSArIC8vIGxldmVyYWdlcyBSb3dSZW5kZXJlcgoJCQkJCSc8L3RoZWFkPicgKwoJCQkJJzwvdGFibGU+JyArCgkJCSc8L2Rpdj4nOwoJfSwKCgoJLy8gVXNlZCBieSB0aGUgYGhlYWRIdG1sYCBtZXRob2QsIHZpYSBSb3dSZW5kZXJlciwgZm9yIHJlbmRlcmluZyB0aGUgSFRNTCBvZiBhIGRheS1vZi13ZWVrIGhlYWRlciBjZWxsCgkvLyBUT0RPOiBtb3ZlIHRvIGFub3RoZXIgY2xhc3MuIG5vdCBhcHBsaWNhYmxlIHRvIGFsbCBHcmlkcwoJaGVhZENlbGxIdG1sOiBmdW5jdGlvbihjZWxsKSB7CgkJdmFyIHZpZXcgPSB0aGlzLnZpZXc7CgkJdmFyIGRhdGUgPSBjZWxsLnN0YXJ0OwoKCQlyZXR1cm4gJycgKwoJCQknPHRoIGNsYXNzPSJmYy1kYXktaGVhZGVyICcgKyB2aWV3LndpZGdldEhlYWRlckNsYXNzICsgJyBmYy0nICsgZGF5SURzW2RhdGUuZGF5KCldICsgJyI+JyArCgkJCQlodG1sRXNjYXBlKGRhdGUuZm9ybWF0KHRoaXMuY29sSGVhZEZvcm1hdCkpICsKCQkJJzwvdGg+JzsKCX0sCgoKCS8vIFJlbmRlcnMgdGhlIEhUTUwgZm9yIGEgc2luZ2xlLWRheSBiYWNrZ3JvdW5kIGNlbGwKCWJnQ2VsbEh0bWw6IGZ1bmN0aW9uKGNlbGwpIHsKCQl2YXIgdmlldyA9IHRoaXMudmlldzsKCQl2YXIgZGF0ZSA9IGNlbGwuc3RhcnQ7CgkJdmFyIGNsYXNzZXMgPSB0aGlzLmdldERheUNsYXNzZXMoZGF0ZSk7CgoJCWNsYXNzZXMudW5zaGlmdCgnZmMtZGF5Jywgdmlldy53aWRnZXRDb250ZW50Q2xhc3MpOwoKCQlyZXR1cm4gJzx0ZCBjbGFzcz0iJyArIGNsYXNzZXMuam9pbignICcpICsgJyInICsKCQkJJyBkYXRhLWRhdGU9IicgKyBkYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpICsgJyInICsgLy8gaWYgZGF0ZSBoYXMgYSB0aW1lLCB3b24ndCBmb3JtYXQgaXQKCQkJJz48L3RkPic7Cgl9LAoKCgkvLyBDb21wdXRlcyBIVE1MIGNsYXNzTmFtZXMgZm9yIGEgc2luZ2xlLWRheSBjZWxsCglnZXREYXlDbGFzc2VzOiBmdW5jdGlvbihkYXRlKSB7CgkJdmFyIHZpZXcgPSB0aGlzLnZpZXc7CgkJdmFyIHRvZGF5ID0gdmlldy5jYWxlbmRhci5nZXROb3coKS5zdHJpcFRpbWUoKTsKCQl2YXIgY2xhc3NlcyA9IFsgJ2ZjLScgKyBkYXlJRHNbZGF0ZS5kYXkoKV0gXTsKCgkJaWYgKAoJCQl2aWV3Lm5hbWUgPT09ICdtb250aCcgJiYKCQkJZGF0ZS5tb250aCgpICE9IHZpZXcuaW50ZXJ2YWxTdGFydC5tb250aCgpCgkJKSB7CgkJCWNsYXNzZXMucHVzaCgnZmMtb3RoZXItbW9udGgnKTsKCQl9CgoJCWlmIChkYXRlLmlzU2FtZSh0b2RheSwgJ2RheScpKSB7CgkJCWNsYXNzZXMucHVzaCgKCQkJCSdmYy10b2RheScsCgkJCQl2aWV3LmhpZ2hsaWdodFN0YXRlQ2xhc3MKCQkJKTsKCQl9CgkJZWxzZSBpZiAoZGF0ZSA8IHRvZGF5KSB7CgkJCWNsYXNzZXMucHVzaCgnZmMtcGFzdCcpOwoJCX0KCQllbHNlIHsKCQkJY2xhc3Nlcy5wdXNoKCdmYy1mdXR1cmUnKTsKCQl9CgoJCXJldHVybiBjbGFzc2VzOwoJfQoKfSk7Cgo7OwoKLyogRXZlbnQtcmVuZGVyaW5nIGFuZCBldmVudC1pbnRlcmFjdGlvbiBtZXRob2RzIGZvciB0aGUgYWJzdHJhY3QgR3JpZCBjbGFzcwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCkdyaWQubWl4aW4oewoKCW1vdXNlZE92ZXJTZWc6IG51bGwsIC8vIHRoZSBzZWdtZW50IG9iamVjdCB0aGUgdXNlcidzIG1vdXNlIGlzIG92ZXIuIG51bGwgaWYgb3ZlciBub3RoaW5nCglpc0RyYWdnaW5nU2VnOiBmYWxzZSwgLy8gaXMgYSBzZWdtZW50IGJlaW5nIGRyYWdnZWQ\\/IGFjY2VwdC5jYWxsKGVsWzBdLCBlbCkgOiBlbC5pcyhhY2NlcHQpKSB7CgoJCQkJdGhpcy5zdGFydEV4dGVybmFsRHJhZyhlbCwgZXYsIHVpKTsKCQkJfQoJCX0KCX0sCgoKCS8vIENhbGxlZCB3aGVuIGEgalF1ZXJ5IFVJIGRyYWcgc3RhcnRzIGFuZCBpdCBuZWVkcyB0byBiZSBtb25pdG9yZWQgZm9yIGNlbGwgZHJvcHBpbmcKCXN0YXJ0RXh0ZXJuYWxEcmFnOiBmdW5jdGlvbihlbCwgZXYsIHVpKSB7CgkJdmFyIF90aGlzID0gdGhpczsKCQl2YXIgbWV0YSA9IGdldERyYWdnZWRFbE1ldGEoZWwpOyAvLyBleHRyYSBkYXRhIGFib3V0IGV2ZW50IGRyb3AsIGluY2x1ZGluZyBwb3NzaWJsZSBldmVudCB0byBjcmVhdGUKCQl2YXIgZHJhZ0xpc3RlbmVyOwoJCXZhciBkcm9wTG9jYXRpb247IC8vIGEgbnVsbCB2YWx1ZSBzaWduYWxzIGFuIHVuc3VjY2Vzc2Z1bCBkcmFnCgoJCS8vIGxpc3RlbmVyIHRoYXQgdHJhY2tzIG1vdXNlIG1vdmVtZW50IG92ZXIgZGF0ZS1hc3NvY2lhdGVkIHBpeGVsIHJlZ2lvbnMKCQlkcmFnTGlzdGVuZXIgPSBuZXcgRHJhZ0xpc3RlbmVyKHRoaXMuY29vcmRNYXAsIHsKCQkJY2VsbE92ZXI6IGZ1bmN0aW9uKGNlbGwpIHsKCQkJCWRyb3BMb2NhdGlvbiA9IF90aGlzLmNvbXB1dGVFeHRlcm5hbERyb3AoY2VsbCwgbWV0YSk7CgkJCQlpZiAoZHJvcExvY2F0aW9uKSB7CgkJCQkJX3RoaXMucmVuZGVyRHJhZyhkcm9wTG9jYXRpb24pOyAvLyBjYWxsZWQgd2l0aG91dCBhIHNlZyBwYXJhbWV0ZXIKCQkJCX0KCQkJCWVsc2UgeyAvLyBpbnZhbGlkIGRyb3AgY2VsbAoJCQkJCWRpc2FibGVDdXJzb3IoKTsKCQkJCX0KCQkJfSwKCQkJY2VsbE91dDogZnVuY3Rpb24oKSB7CgkJCQlkcm9wTG9jYXRpb24gPSBudWxsOyAvLyBzaWduYWwgdW5zdWNjZXNzZnVsCgkJCQlfdGhpcy5kZXN0cm95RHJhZygpOwoJCQkJZW5hYmxlQ3Vyc29yKCk7CgkJCX0KCQl9KTsKCgkJLy8gZ2V0cyBjYWxsZWQsIG9ubHkgb25jZSwgd2hlbiBqcXVpIGRyYWcgaXMgZmluaXNoZWQKCQkkKGRvY3VtZW50KS5vbmUoJ2RyYWdzdG9wJywgZnVuY3Rpb24oZXYsIHVpKSB7CgkJCV90aGlzLmRlc3Ryb3lEcmFnKCk7CgkJCWVuYWJsZUN1cnNvcigpOwoKCQkJaWYgKGRyb3BMb2NhdGlvbikgeyAvLyBlbGVtZW50IHdhcyBkcm9wcGVkIG9uIGEgdmFsaWQgZGF0ZS90aW1lIGNlbGwKCQkJCV90aGlzLnZpZXcucmVwb3J0RXh0ZXJuYWxEcm9wKG1ldGEsIGRyb3BMb2NhdGlvbiwgZWwsIGV2LCB1aSk7CgkJCX0KCQl9KTsKCgkJZHJhZ0xpc3RlbmVyLnN0YXJ0RHJhZyhldik7IC8vIHN0YXJ0IGxpc3RlbmluZyBpbW1lZGlhdGVseQoJfSwKCgoJLy8gR2l2ZW4gYSBjZWxsIHRvIGJlIGRyb3BwZWQgdXBvbiwgYW5kIG1pc2MgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIGpxdWkgZHJhZyAoZ3VhcmFudGVlZCB0byBiZSBhIHBsYWluIG9iamVjdCksCgkvLyByZXR1cm5zIHN0YXJ0L2VuZCBkYXRlcyBmb3IgdGhlIGV2ZW50IHRoYXQgd291bGQgcmVzdWx0IGZyb20gdGhlIGh5cG90aGV0aWNhbCBkcm9wLiBlbmQgbWlnaHQgYmUgbnVsbC4KCS8vIFJldHVybmluZyBhIG51bGwgdmFsdWUgc2lnbmFscyBhbiBpbnZhbGlkIGRyb3AgY2VsbC4KCWNvbXB1dGVFeHRlcm5hbERyb3A6IGZ1bmN0aW9uKGNlbGwsIG1ldGEpIHsKCQl2YXIgZHJvcExvY2F0aW9uID0gewoJCQlzdGFydDogY2VsbC5zdGFydC5jbG9uZSgpLAoJCQllbmQ6IG51bGwKCQl9OwoKCQkvLyBpZiBkcm9wcGVkIG9uIGFuIGFsbC1kYXkgY2VsbCwgYW5kIGVsZW1lbnQncyBtZXRhZGF0YSBzcGVjaWZpZWQgYSB0aW1lLCBzZXQgaXQKCQlpZiAobWV0YS5zdGFydFRpbWUgJiYgIWRyb3BMb2NhdGlvbi5zdGFydC5oYXNUaW1lKCkpIHsKCQkJZHJvcExvY2F0aW9uLnN0YXJ0LnRpbWUobWV0YS5zdGFydFRpbWUpOwoJCX0KCgkJaWYgKG1ldGEuZHVyYXRpb24pIHsKCQkJZHJvcExvY2F0aW9uLmVuZCA9IGRyb3BMb2NhdGlvbi5zdGFydC5jbG9uZSgpLmFkZChtZXRhLmR1cmF0aW9uKTsKCQl9CgoJCWlmICghdGhpcy52aWV3LmNhbGVuZGFyLmlzRXh0ZXJuYWxEcm9wUmFuZ2VBbGxvd2VkKGRyb3BMb2NhdGlvbiwgbWV0YS5ldmVudFByb3BzKSkgewoJCQlyZXR1cm4gbnVsbDsKCQl9CgoJCXJldHVybiBkcm9wTG9jYXRpb247Cgl9LAoKCgoJLyogRHJhZyBSZW5kZXJpbmcgKGZvciBib3RoIGV2ZW50cyBhbmQgYW4gZXh0ZXJuYWwgZWxlbWVudHMpCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCgkvLyBSZW5kZXJzIGEgdmlzdWFsIGluZGljYXRpb24gb2YgYW4gZXZlbnQgb3IgZXh0ZXJuYWwgZWxlbWVudCBiZWluZyBkcmFnZ2VkLgoJLy8gYGRyb3BMb2NhdGlvbmAgY29udGFpbnMgaHlwb3RoZXRpY2FsIHN0YXJ0L2VuZC9hbGxEYXkgdmFsdWVzIHRoZSBldmVudCB3b3VsZCBoYXZlIGlmIGRyb3BwZWQuIGVuZCBjYW4gYmUgbnVsbC4KCS8vIGBzZWdgIGlzIHRoZSBpbnRlcm5hbCBzZWdtZW50IG9iamVjdCB0aGF0IGlzIGJlaW5nIGRyYWdnZWQuIElmIGRyYWdnaW5nIGFuIGV4dGVybmFsIGVsZW1lbnQsIGBzZWdgIGlzIG51bGwuCgkvLyBBIHRydXRoeSByZXR1cm5lZCB2YWx1ZSBpbmRpY2F0ZXMgdGhpcyBtZXRob2QgaGFzIHJlbmRlcmVkIGEgaGVscGVyIGVsZW1lbnQuCglyZW5kZXJEcmFnOiBmdW5jdGlvbihkcm9wTG9jYXRpb24sIHNlZykgewoJCS8vIHN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnQKCX0sCgoKCS8vIFVucmVuZGVycyBhIHZpc3VhbCBpbmRpY2F0aW9uIG9mIGFuIGV2ZW50IG9yIGV4dGVybmFsIGVsZW1lbnQgYmVpbmcgZHJhZ2dlZAoJZGVzdHJveURyYWc6IGZ1bmN0aW9uKCkgewoJCS8vIHN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnQKCX0sCgoKCS8qIFJlc2l6aW5nCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCgkvLyBDYWxsZWQgd2hlbiB0aGUgdXNlciBkb2VzIGEgbW91c2Vkb3duIG9uIGFuIGV2ZW50J3MgcmVzaXplciwgd2hpY2ggbWlnaHQgbGVhZCB0byByZXNpemluZy4KCS8vIEdlbmVyaWMgZW5vdWdoIHRvIHdvcmsgd2l0aCBhbnkgdHlwZSBvZiBHcmlkLgoJc2VnUmVzaXplTW91c2Vkb3duOiBmdW5jdGlvbihzZWcsIGV2KSB7CgkJdmFyIF90aGlzID0gdGhpczsKCQl2YXIgdmlldyA9IHRoaXMudmlldzsKCQl2YXIgY2FsZW5kYXIgPSB2aWV3LmNhbGVuZGFyOwoJCXZhciBlbCA9IHNlZy5lbDsKCQl2YXIgZXZlbnQgPSBzZWcuZXZlbnQ7CgkJdmFyIHN0YXJ0ID0gZXZlbnQuc3RhcnQ7CgkJdmFyIG9sZEVuZCA9IGNhbGVuZGFyLmdldEV2ZW50RW5kKGV2ZW50KTsKCQl2YXIgbmV3RW5kOyAvLyBmYWxzeSBpZiBpbnZhbGlkIHJlc2l6ZQoJCXZhciBkcmFnTGlzdGVuZXI7CgoJCWZ1bmN0aW9uIGRlc3Ryb3koKSB7IC8vIHJlc2V0cyB0aGUgcmVuZGVyaW5nIHRvIHNob3cgdGhlIG9yaWdpbmFsIGV2ZW50CgkJCV90aGlzLmRlc3Ryb3lFdmVudFJlc2l6ZSgpOwoJCQl2aWV3LnNob3dFdmVudChldmVudCk7CgkJCWVuYWJsZUN1cnNvcigpOwoJCX0KCgkJLy8gVHJhY2tzIG1vdXNlIG1vdmVtZW50IG92ZXIgdGhlICpncmlkJ3MqIGNvb3JkaW5hdGUgbWFwCgkJZHJhZ0xpc3RlbmVyID0gbmV3IERyYWdMaXN0ZW5lcih0aGlzLmNvb3JkTWFwLCB7CgkJCWRpc3RhbmNlOiA1LAoJCQlzY3JvbGw6IHZpZXcub3B0KCdkcmFnU2Nyb2xsJyksCgkJCWRyYWdTdGFydDogZnVuY3Rpb24oZXYpIHsKCQkJCV90aGlzLnRyaWdnZXJTZWdNb3VzZW91dChzZWcsIGV2KTsgLy8gZW5zdXJlIGEgbW91c2VvdXQgb24gdGhlIG1hbmlwdWxhdGVkIGV2ZW50IGhhcyBiZWVuIHJlcG9ydGVkCgkJCQlfdGhpcy5pc1Jlc2l6aW5nU2VnID0gdHJ1ZTsKCQkJCXZpZXcudHJpZ2dlcignZXZlbnRSZXNpemVTdGFydCcsIGVsWzBdLCBldmVudCwgZXYsIHt9KTsgLy8gbGFzdCBhcmd1bWVudCBpcyBqcXVpIGR1bW15CgkJCX0sCgkJCWNlbGxPdmVyOiBmdW5jdGlvbihjZWxsKSB7CgkJCQluZXdFbmQgPSBjZWxsLmVuZDsKCgkJCQlpZiAoIW5ld0VuZC5pc0FmdGVyKHN0YXJ0KSkgeyAvLyB3YXMgZW5kIG1vdmVkIGJlZm9yZSBzdGFydD8KCQkJCQluZXdFbmQgPSBzdGFydC5jbG9uZSgpLmFkZCggLy8gbWFrZSB0aGUgZXZlbnQgc3BhbiBhIHNpbmdsZSBzbG90CgkJCQkJCWRpZmZEYXlUaW1lKGNlbGwuZW5kLCBjZWxsLnN0YXJ0KSAvLyBhc3N1bWVzIGFsbCBzbG90IGR1cmF0aW9ucyBhcmUgdGhlIHNhbWUKCQkJCQkpOwoJCQkJfQoKCQkJCWlmIChuZXdFbmQuaXNTYW1lKG9sZEVuZCkpIHsKCQkJCQluZXdFbmQgPSBudWxsOwoJCQkJfQoJCQkJZWxzZSBpZiAoIWNhbGVuZGFyLmlzRXZlbnRSYW5nZUFsbG93ZWQoeyBzdGFydDogc3RhcnQsIGVuZDogbmV3RW5kIH0sIGV2ZW50KSkgewoJCQkJCW5ld0VuZCA9IG51bGw7CgkJCQkJZGlzYWJsZUN1cnNvcigpOwoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJX3RoaXMucmVuZGVyRXZlbnRSZXNpemUoeyBzdGFydDogc3RhcnQsIGVuZDogbmV3RW5kIH0sIHNlZyk7CgkJCQkJdmlldy5oaWRlRXZlbnQoZXZlbnQpOwoJCQkJfQoJCQl9LAoJCQljZWxsT3V0OiBmdW5jdGlvbigpIHsgLy8gY2FsbGVkIGJlZm9yZSBtb3VzZSBtb3ZlcyB0byBhIGRpZmZlcmVudCBjZWxsIE9SIG1vdmVkIG91dCBvZiBhbGwgY2VsbHMKCQkJCW5ld0VuZCA9IG51bGw7CgkJCQlkZXN0cm95KCk7CgkJCX0sCgkJCWRyYWdTdG9wOiBmdW5jdGlvbihldikgewoJCQkJX3RoaXMuaXNSZXNpemluZ1NlZyA9IGZhbHNlOwoJCQkJZGVzdHJveSgpOwoJCQkJdmlldy50cmlnZ2VyKCdldmVudFJlc2l6ZVN0b3AnLCBlbFswXSwgZXZlbnQsIGV2LCB7fSk7IC8vIGxhc3QgYXJndW1lbnQgaXMganF1aSBkdW1teQoKCQkJCWlmIChuZXdFbmQpIHsgLy8gdmFsaWQgZGF0ZSB0byByZXNpemUgdG8\/CgkJCQkJdmlldy5yZXBvcnRFdmVudFJlc2l6ZShldmVudCwgbmV3RW5kLCBlbCwgZXYpOwoJCQkJfQoJCQl9CgkJfSk7CgoJCWRyYWdMaXN0ZW5lci5tb3VzZWRvd24oZXYpOyAvLyBzdGFydCBsaXN0ZW5pbmcsIHdoaWNoIHdpbGwgZXZlbnR1YWxseSBsZWFkIHRvIGEgZHJhZ1N0YXJ0Cgl9LAoKCgkvLyBSZW5kZXJzIGEgdmlzdWFsIGluZGljYXRpb24gb2YgYW4gZXZlbnQgYmVpbmcgcmVzaXplZC4KCS8vIGByYW5nZWAgaGFzIHRoZSB1cGRhdGVkIGRhdGVzIG9mIHRoZSBldmVudC4gYHNlZ2AgaXMgdGhlIG9yaWdpbmFsIHNlZ21lbnQgb2JqZWN0IGludm9sdmVkIGluIHRoZSBkcmFnLgoJcmVuZGVyRXZlbnRSZXNpemU6IGZ1bmN0aW9uKHJhbmdlLCBzZWcpIHsKCQkvLyBzdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50Cgl9LAoKCgkvLyBVbnJlbmRlcnMgYSB2aXN1YWwgaW5kaWNhdGlvbiBvZiBhbiBldmVudCBiZWluZyByZXNpemVkLgoJZGVzdHJveUV2ZW50UmVzaXplOiBmdW5jdGlvbigpIHsKCQkvLyBzdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50Cgl9LAoKCgkvKiBSZW5kZXJpbmcgVXRpbHMKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKCS8vIENvbXB1dGUgdGhlIHRleHQgdGhhdCBzaG91bGQgYmUgZGlzcGxheWVkIG9uIGFuIGV2ZW50J3MgZWxlbWVudC4KCS8vIGByYW5nZWAgY2FuIGJlIHRoZSBFdmVudCBvYmplY3QgaXRzZWxmLCBvciBzb21ldGhpbmcgcmFuZ2UtbGlrZSwgd2l0aCBhdCBsZWFzdCBhIGBzdGFydGAuCgkvLyBUaGUgYHRpbWVGb3JtYXRgIG9wdGlvbnMgYW5kIHRoZSBncmlkJ3MgZGVmYXVsdCBmb3JtYXQgaXMgdXNlZCwgYnV0IGBmb3JtYXRTdHJgIGNhbiBvdmVycmlkZS4KCWdldEV2ZW50VGltZVRleHQ6IGZ1bmN0aW9uKHJhbmdlLCBmb3JtYXRTdHIpIHsKCgkJZm9ybWF0U3RyID0gZm9ybWF0U3RyIHx8IHRoaXMuZXZlbnRUaW1lRm9ybWF0OwoKCQlpZiAocmFuZ2UuZW5kICYmIHRoaXMuZGlzcGxheUV2ZW50RW5kKSB7CgkJCXJldHVybiB0aGlzLnZpZXcuZm9ybWF0UmFuZ2UocmFuZ2UsIGZvcm1hdFN0cik7CgkJfQoJCWVsc2UgewoJCQlyZXR1cm4gcmFuZ2Uuc3RhcnQuZm9ybWF0KGZvcm1hdFN0cik7CgkJfQoJfSwKCgoJLy8gR2VuZXJpYyB1dGlsaXR5IGZvciBnZW5lcmF0aW5nIHRoZSBIVE1MIGNsYXNzTmFtZXMgZm9yIGFuIGV2ZW50IHNlZ21lbnQncyBlbGVtZW50CglnZXRTZWdDbGFzc2VzOiBmdW5jdGlvbihzZWcsIGlzRHJhZ2dhYmxlLCBpc1Jlc2l6YWJsZSkgewoJCXZhciBldmVudCA9IHNlZy5ldmVudDsKCQl2YXIgY2xhc3NlcyA9IFsKCQkJJ2ZjLWV2ZW50JywKCQkJc2VnLmlzU3RhcnQgPyAnZmMtc3RhcnQnIDogJ2ZjLW5vdC1zdGFydCcsCgkJCXNlZy5pc0VuZCA\/ICdmYy1lbmQnIDogJ2ZjLW5vdC1lbmQnCgkJXS5jb25jYXQoCgkJCWV2ZW50LmNsYXNzTmFtZSwKCQkJZXZlbnQuc291cmNlID8gZXZlbnQuc291cmNlLmNsYXNzTmFtZSA6IFtdCgkJKTsKCgkJaWYgKGlzRHJhZ2dhYmxlKSB7CgkJCWNsYXNzZXMucHVzaCgnZmMtZHJhZ2dhYmxlJyk7CgkJfQoJCWlmIChpc1Jlc2l6YWJsZSkgewoJCQljbGFzc2VzLnB1c2goJ2ZjLXJlc2l6YWJsZScpOwoJCX0KCgkJcmV0dXJuIGNsYXNzZXM7Cgl9LAoKCgkvLyBVdGlsaXR5IGZvciBnZW5lcmF0aW5nIGEgQ1NTIHN0cmluZyB3aXRoIGFsbCB0aGUgZXZlbnQgc2tpbi1yZWxhdGVkIHByb3BlcnRpZXMKCWdldEV2ZW50U2tpbkNzczogZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgdmlldyA9IHRoaXMudmlldzsKCQl2YXIgc291cmNlID0gZXZlbnQuc291cmNlIHx8IHt9OwoJCXZhciBldmVudENvbG9yID0gZXZlbnQuY29sb3I7CgkJdmFyIHNvdXJjZUNvbG9yID0gc291cmNlLmNvbG9yOwoJCXZhciBvcHRpb25Db2xvciA9IHZpZXcub3B0KCdldmVudENvbG9yJyk7CgkJdmFyIGJhY2tncm91bmRDb2xvciA9CgkJCWV2ZW50LmJhY2tncm91bmRDb2xvciB8fAoJCQlldmVudENvbG9yIHx8CgkJCXNvdXJjZS5iYWNrZ3JvdW5kQ29sb3IgfHwKCQkJc291cmNlQ29sb3IgfHwKCQkJdmlldy5vcHQoJ2V2ZW50QmFja2dyb3VuZENvbG9yJykgfHwKCQkJb3B0aW9uQ29sb3I7CgkJdmFyIGJvcmRlckNvbG9yID0KCQkJZXZlbnQuYm9yZGVyQ29sb3IgfHwKCQkJZXZlbnRDb2xvciB8fAoJCQlzb3VyY2UuYm9yZGVyQ29sb3IgfHwKCQkJc291cmNlQ29sb3IgfHwKCQkJdmlldy5vcHQoJ2V2ZW50Qm9yZGVyQ29sb3InKSB8fAoJCQlvcHRpb25Db2xvcjsKCQl2YXIgdGV4dENvbG9yID0KCQkJZXZlbnQudGV4dENvbG9yIHx8CgkJCXNvdXJjZS50ZXh0Q29sb3IgfHwKCQkJdmlldy5vcHQoJ2V2ZW50VGV4dENvbG9yJyk7CgkJdmFyIHN0YXRlbWVudHMgPSBbXTsKCQlpZiAoYmFja2dyb3VuZENvbG9yKSB7CgkJCXN0YXRlbWVudHMucHVzaCgnYmFja2dyb3VuZC1jb2xvcjonICsgYmFja2dyb3VuZENvbG9yKTsKCQl9CgkJaWYgKGJvcmRlckNvbG9yKSB7CgkJCXN0YXRlbWVudHMucHVzaCgnYm9yZGVyLWNvbG9yOicgKyBib3JkZXJDb2xvcik7CgkJfQoJCWlmICh0ZXh0Q29sb3IpIHsKCQkJc3RhdGVtZW50cy5wdXNoKCdjb2xvcjonICsgdGV4dENvbG9yKTsKCQl9CgkJcmV0dXJuIHN0YXRlbWVudHMuam9pbignOycpOwoJfSwKCgoJLyogQ29udmVydGluZyBldmVudHMgLT4gcmFuZ2VzIC0+IHNlZ3MKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKCS8vIENvbnZlcnRzIGFuIGFycmF5IG9mIGV2ZW50IG9iamVjdHMgaW50byBhbiBhcnJheSBvZiBldmVudCBzZWdtZW50IG9iamVjdHMuCgkvLyBBIGN1c3RvbSBgcmFuZ2VUb1NlZ3NGdW5jYCBtYXkgYmUgZ2l2ZW4gZm9yIGFyYml0cmFyaWx5IHNsaWNpbmcgdXAgZXZlbnRzLgoJZXZlbnRzVG9TZWdzOiBmdW5jdGlvbihldmVudHMsIHJhbmdlVG9TZWdzRnVuYykgewoJCXZhciBldmVudFJhbmdlcyA9IHRoaXMuZXZlbnRzVG9SYW5nZXMoZXZlbnRzKTsKCQl2YXIgc2VncyA9IFtdOwoJCXZhciBpOwoKCQlmb3IgKGkgPSAwOyBpIDwgZXZlbnRSYW5nZXMubGVuZ3RoOyBpKyspIHsKCQkJc2Vncy5wdXNoLmFwcGx5KAoJCQkJc2VncywKCQkJCXRoaXMuZXZlbnRSYW5nZVRvU2VncyhldmVudFJhbmdlc1tpXSwgcmFuZ2VUb1NlZ3NGdW5jKQoJCQkpOwoJCX0KCgkJcmV0dXJuIHNlZ3M7Cgl9LAoKCgkvLyBDb252ZXJ0cyBhbiBhcnJheSBvZiBldmVudHMgaW50byBhbiBhcnJheSBvZiAicmFuZ2UiIG9iamVjdHMuCgkvLyBBICJyYW5nZSIgb2JqZWN0IGlzIGEgcGxhaW4gb2JqZWN0IHdpdGggc3RhcnQvZW5kIHByb3BlcnRpZXMgZGVub3RpbmcgdGhlIHRpbWUgaXQgY292ZXJzLiBBbHNvIGFuIGV2ZW50IHByb3BlcnR5LgoJLy8gRm9yICJub3JtYWwiIGV2ZW50cywgdGhpcyB3aWxsIGJlIGlkZW50aWNhbCB0byB0aGUgZXZlbnQncyBzdGFydC9lbmQsIGJ1dCBmb3IgImludmVyc2UtYmFja2dyb3VuZCIgZXZlbnRzLAoJLy8gd2lsbCBjcmVhdGUgYW4gYXJyYXkgb2YgcmFuZ2VzIHRoYXQgc3BhbiB0aGUgdGltZSAqbm90KiBjb3ZlcmVkIGJ5IHRoZSBnaXZlbiBldmVudC4KCWV2ZW50c1RvUmFuZ2VzOiBmdW5jdGlvbihldmVudHMpIHsKCQl2YXIgX3RoaXMgPSB0aGlzOwoJCXZhciBldmVudHNCeUlkID0gZ3JvdXBFdmVudHNCeUlkKGV2ZW50cyk7CgkJdmFyIHJhbmdlcyA9IFtdOwoKCQkvLyBncm91cCBieSBJRCBzbyB0aGF0IHJlbGF0ZWQgaW52ZXJzZS1iYWNrZ3JvdW5kIGV2ZW50cyBjYW4gYmUgcmVuZGVyZWQgdG9nZXRoZXIKCQkkLmVhY2goZXZlbnRzQnlJZCwgZnVuY3Rpb24oaWQsIGV2ZW50R3JvdXApIHsKCQkJaWYgKGV2ZW50R3JvdXAubGVuZ3RoKSB7CgkJCQlyYW5nZXMucHVzaC5hcHBseSgKCQkJCQlyYW5nZXMsCgkJCQkJaXNJbnZlcnNlQmdFdmVudChldmVudEdyb3VwWzBdKSA\/CgkJCQkJCV90aGlzLmV2ZW50c1RvSW52ZXJzZVJhbmdlcyhldmVudEdyb3VwKSA6CgkJCQkJCV90aGlzLmV2ZW50c1RvTm9ybWFsUmFuZ2VzKGV2ZW50R3JvdXApCgkJCQkpOwoJCQl9CgkJfSk7CgoJCXJldHVybiByYW5nZXM7Cgl9LAoKCgkvLyBDb252ZXJ0cyBhbiBhcnJheSBvZiAibm9ybWFsIiBldmVudHMgKG5vdCBpbnZlcnRlZCByZW5kZXJpbmcpIGludG8gYSBwYXJhbGxlbCBhcnJheSBvZiByYW5nZXMKCWV2ZW50c1RvTm9ybWFsUmFuZ2VzOiBmdW5jdGlvbihldmVudHMpIHsKCQl2YXIgY2FsZW5kYXIgPSB0aGlzLnZpZXcuY2FsZW5kYXI7CgkJdmFyIHJhbmdlcyA9IFtdOwoJCXZhciBpLCBldmVudDsKCQl2YXIgZXZlbnRTdGFydCwgZXZlbnRFbmQ7CgoJCWZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHsKCQkJZXZlbnQgPSBldmVudHNbaV07CgoJCQkvLyBtYWtlIGNvcGllcyBhbmQgbm9ybWFsaXplIGJ5IHN0cmlwcGluZyB0aW1lem9uZQoJCQlldmVudFN0YXJ0ID0gZXZlbnQuc3RhcnQuY2xvbmUoKS5zdHJpcFpvbmUoKTsKCQkJZXZlbnRFbmQgPSBjYWxlbmRhci5nZXRFdmVudEVuZChldmVudCkuc3RyaXBab25lKCk7CgoJCQlyYW5nZXMucHVzaCh7CgkJCQlldmVudDogZXZlbnQsCgkJCQlzdGFydDogZXZlbnRTdGFydCwKCQkJCWVuZDogZXZlbnRFbmQsCgkJCQlldmVudFN0YXJ0TVM6ICtldmVudFN0YXJ0LAoJCQkJZXZlbnREdXJhdGlvbk1TOiBldmVudEVuZCAtIGV2ZW50U3RhcnQKCQkJfSk7CgkJfQoKCQlyZXR1cm4gcmFuZ2VzOwoJfSwKCgoJLy8gQ29udmVydHMgYW4gYXJyYXkgb2YgZXZlbnRzLCB3aXRoIGludmVyc2UtYmFja2dyb3VuZCByZW5kZXJpbmcsIGludG8gYW4gYXJyYXkgb2YgcmFuZ2Ugb2JqZWN0cy4KCS8vIFRoZSByYW5nZSBvYmplY3RzIHdpbGwgY292ZXIgYWxsIHRoZSB0aW1lIE5PVCBjb3ZlcmVkIGJ5IHRoZSBldmVudHMuCglldmVudHNUb0ludmVyc2VSYW5nZXM6IGZ1bmN0aW9uKGV2ZW50cykgewoJCXZhciB2aWV3ID0gdGhpcy52aWV3OwoJCXZhciB2aWV3U3RhcnQgPSB2aWV3LnN0YXJ0LmNsb25lKCkuc3RyaXBab25lKCk7IC8vIG5vcm1hbGl6ZSB0aW1lem9uZQoJCXZhciB2aWV3RW5kID0gdmlldy5lbmQuY2xvbmUoKS5zdHJpcFpvbmUoKTsgLy8gbm9ybWFsaXplIHRpbWV6b25lCgkJdmFyIG5vcm1hbFJhbmdlcyA9IHRoaXMuZXZlbnRzVG9Ob3JtYWxSYW5nZXMoZXZlbnRzKTsgLy8gd2lsbCBnaXZlIHVzIG5vcm1hbGl6ZWQgZGF0ZXMgd2UgY2FuIHVzZSB3L28gY29waWVzCgkJdmFyIGludmVyc2VSYW5nZXMgPSBbXTsKCQl2YXIgZXZlbnQwID0gZXZlbnRzWzBdOyAvLyBhc3NpZ24gdGhpcyB0byBlYWNoIHJhbmdlJ3MgYC5ldmVudGAKCQl2YXIgc3RhcnQgPSB2aWV3U3RhcnQ7IC8vIHRoZSBlbmQgb2YgdGhlIHByZXZpb3VzIHJhbmdlLiB0aGUgc3RhcnQgb2YgdGhlIG5ldyByYW5nZQoJCXZhciBpLCBub3JtYWxSYW5nZTsKCgkJLy8gcmFuZ2VzIG5lZWQgdG8gYmUgaW4gb3JkZXIuIHJlcXVpcmVkIGZvciBvdXIgZGF0ZS13YWxraW5nIGFsZ29yaXRobQoJCW5vcm1hbFJhbmdlcy5zb3J0KGNvbXBhcmVOb3JtYWxSYW5nZXMpOwoKCQlmb3IgKGkgPSAwOyBpIDwgbm9ybWFsUmFuZ2VzLmxlbmd0aDsgaSsrKSB7CgkJCW5vcm1hbFJhbmdlID0gbm9ybWFsUmFuZ2VzW2ldOwoKCQkJLy8gYWRkIHRoZSBzcGFuIG9mIHRpbWUgYmVmb3JlIHRoZSBldmVudCAoaWYgdGhlcmUgaXMgYW55KQoJCQlpZiAobm9ybWFsUmFuZ2Uuc3RhcnQgPiBzdGFydCkgeyAvLyBjb21wYXJlIG1pbGxpc2Vjb25kIHRpbWUgKHNraXAgYW55IGFtYmlnIGxvZ2ljKQoJCQkJaW52ZXJzZVJhbmdlcy5wdXNoKHsKCQkJCQlldmVudDogZXZlbnQwLAoJCQkJCXN0YXJ0OiBzdGFydCwKCQkJCQllbmQ6IG5vcm1hbFJhbmdlLnN0YXJ0CgkJCQl9KTsKCQkJfQoKCQkJc3RhcnQgPSBub3JtYWxSYW5nZS5lbmQ7CgkJfQoKCQkvLyBhZGQgdGhlIHNwYW4gb2YgdGltZSBhZnRlciB0aGUgbGFzdCBldmVudCAoaWYgdGhlcmUgaXMgYW55KQoJCWlmIChzdGFydCA8IHZpZXdFbmQpIHsgLy8gY29tcGFyZSBtaWxsaXNlY29uZCB0aW1lIChza2lwIGFueSBhbWJpZyBsb2dpYykKCQkJaW52ZXJzZVJhbmdlcy5wdXNoKHsKCQkJCWV2ZW50OiBldmVudDAsCgkJCQlzdGFydDogc3RhcnQsCgkJCQllbmQ6IHZpZXdFbmQKCQkJfSk7CgkJfQoKCQlyZXR1cm4gaW52ZXJzZVJhbmdlczsKCX0sCgoKCS8vIFNsaWNlcyB0aGUgZ2l2ZW4gZXZlbnQgcmFuZ2UgaW50byBvbmUgb3IgbW9yZSBzZWdtZW50IG9iamVjdHMuCgkvLyBBIGByYW5nZVRvU2Vnc0Z1bmNgIGN1c3RvbSBzbGljaW5nIGZ1bmN0aW9uIGNhbiBiZSBnaXZlbi4KCWV2ZW50UmFuZ2VUb1NlZ3M6IGZ1bmN0aW9uKGV2ZW50UmFuZ2UsIHJhbmdlVG9TZWdzRnVuYykgewoJCXZhciBzZWdzOwoJCXZhciBpLCBzZWc7CgoJCWlmIChyYW5nZVRvU2Vnc0Z1bmMpIHsKCQkJc2VncyA9IHJhbmdlVG9TZWdzRnVuYyhldmVudFJhbmdlKTsKCQl9CgkJZWxzZSB7CgkJCXNlZ3MgPSB0aGlzLnJhbmdlVG9TZWdzKGV2ZW50UmFuZ2UpOyAvLyBkZWZpbmVkIGJ5IHRoZSBzdWJjbGFzcwoJCX0KCgkJZm9yIChpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyBpKyspIHsKCQkJc2VnID0gc2Vnc1tpXTsKCQkJc2VnLmV2ZW50ID0gZXZlbnRSYW5nZS5ldmVudDsKCQkJc2VnLmV2ZW50U3RhcnRNUyA9IGV2ZW50UmFuZ2UuZXZlbnRTdGFydE1TOwoJCQlzZWcuZXZlbnREdXJhdGlvbk1TID0gZXZlbnRSYW5nZS5ldmVudER1cmF0aW9uTVM7CgkJfQoKCQlyZXR1cm4gc2VnczsKCX0KCn0pOwoKCi8qIFV0aWxpdGllcwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgpmdW5jdGlvbiBpc0JnRXZlbnQoZXZlbnQpIHsgLy8gcmV0dXJucyB0cnVlIGlmIGJhY2tncm91bmQgT1IgaW52ZXJzZS1iYWNrZ3JvdW5kCgl2YXIgcmVuZGVyaW5nID0gZ2V0RXZlbnRSZW5kZXJpbmcoZXZlbnQpOwoJcmV0dXJuIHJlbmRlcmluZyA9PT0gJ2JhY2tncm91bmQnIHx8IHJlbmRlcmluZyA9PT0gJ2ludmVyc2UtYmFja2dyb3VuZCc7Cn0KCgpmdW5jdGlvbiBpc0ludmVyc2VCZ0V2ZW50KGV2ZW50KSB7CglyZXR1cm4gZ2V0RXZlbnRSZW5kZXJpbmcoZXZlbnQpID09PSAnaW52ZXJzZS1iYWNrZ3JvdW5kJzsKfQoKCmZ1bmN0aW9uIGdldEV2ZW50UmVuZGVyaW5nKGV2ZW50KSB7CglyZXR1cm4gZmlyc3REZWZpbmVkKChldmVudC5zb3VyY2UgfHwge30pLnJlbmRlcmluZywgZXZlbnQucmVuZGVyaW5nKTsKfQoKCmZ1bmN0aW9uIGdyb3VwRXZlbnRzQnlJZChldmVudHMpIHsKCXZhciBldmVudHNCeUlkID0ge307Cgl2YXIgaSwgZXZlbnQ7CgoJZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykgewoJCWV2ZW50ID0gZXZlbnRzW2ldOwoJCShldmVudHNCeUlkW2V2ZW50Ll9pZF0gfHwgKGV2ZW50c0J5SWRbZXZlbnQuX2lkXSA9IFtdKSkucHVzaChldmVudCk7Cgl9CgoJcmV0dXJuIGV2ZW50c0J5SWQ7Cn0KCgovLyBBIGNtcCBmdW5jdGlvbiBmb3IgZGV0ZXJtaW5pbmcgd2hpY2ggbm9uLWludmVydGVkICJyYW5nZXMiIChzZWUgYWJvdmUpIGhhcHBlbiBlYXJsaWVyCmZ1bmN0aW9uIGNvbXBhcmVOb3JtYWxSYW5nZXMocmFuZ2UxLCByYW5nZTIpIHsKCXJldHVybiByYW5nZTEuZXZlbnRTdGFydE1TIC0gcmFuZ2UyLmV2ZW50U3RhcnRNUzsgLy8gZWFybGllciByYW5nZXMgZ28gZmlyc3QKfQoKCi8vIEEgY21wIGZ1bmN0aW9uIGZvciBkZXRlcm1pbmluZyB3aGljaCBzZWdtZW50cyBzaG91bGQgdGFrZSB2aXN1YWwgcHJpb3JpdHkKLy8gRE9FUyBOT1QgV09SSyBPTiBJTlZFUlRFRCBCQUNLR1JPVU5EIEVWRU5UUyBiZWNhdXNlIHRoZXkgaGF2ZSBubyBldmVudFN0YXJ0TVMvZXZlbnREdXJhdGlvbk1TCmZ1bmN0aW9uIGNvbXBhcmVTZWdzKHNlZzEsIHNlZzIpIHsKCXJldHVybiBzZWcxLmV2ZW50U3RhcnRNUyAtIHNlZzIuZXZlbnRTdGFydE1TIHx8IC8vIGVhcmxpZXIgZXZlbnRzIGdvIGZpcnN0CgkJc2VnMi5ldmVudER1cmF0aW9uTVMgLSBzZWcxLmV2ZW50RHVyYXRpb25NUyB8fCAvLyB0aWU\/IGxvbmdlciBldmVudHMgZ28gZmlyc3QKCQlzZWcyLmV2ZW50LmFsbERheSAtIHNlZzEuZXZlbnQuYWxsRGF5IHx8IC8vIHRpZT8gcHV0IGFsbC1kYXkgZXZlbnRzIGZpcnN0IChib29sZWFucyBjYXN0IHRvIDAvMSkKCQkoc2VnMS5ldmVudC50aXRsZSB8fCAnJykubG9jYWxlQ29tcGFyZShzZWcyLmV2ZW50LnRpdGxlKTsgLy8gdGllPyBhbHBoYWJldGljYWxseSBieSB0aXRsZQp9CgpmYy5jb21wYXJlU2VncyA9IGNvbXBhcmVTZWdzOyAvLyBleHBvcnQKCgovKiBFeHRlcm5hbC1EcmFnZ2luZy1FbGVtZW50IERhdGEKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgovLyBSZXF1aXJlIGFsbCBIVE1MNSBkYXRhLSogYXR0cmlidXRlcyB1c2VkIGJ5IEZ1bGxDYWxlbmRhciB0byBoYXZlIHRoaXMgcHJlZml4LgovLyBBIHZhbHVlIG9mICcnIHdpbGwgcXVlcnkgYXR0cmlidXRlcyBsaWtlIGRhdGEtZXZlbnQuIEEgdmFsdWUgb2YgJ2ZjJyB3aWxsIHF1ZXJ5IGF0dHJpYnV0ZXMgbGlrZSBkYXRhLWZjLWV2ZW50LgpmYy5kYXRhQXR0clByZWZpeCA9ICcnOwoKLy8gR2l2ZW4gYSBqUXVlcnkgZWxlbWVudCB0aGF0IG1pZ2h0IHJlcHJlc2VudCBhIGRyYWdnZWQgRnVsbENhbGVuZGFyIGV2ZW50LCByZXR1cm5zIGFuIGludGVybWVkaWF0ZSBkYXRhIHN0cnVjdHVyZQovLyB0byBiZSB1c2VkIGZvciBFdmVudCBPYmplY3QgY3JlYXRpb24uCi8vIEEgZGVmaW5lZCBgLmV2ZW50UHJvcHNgLCBldmVuIHdoZW4gZW1wdHksIGluZGljYXRlcyB0aGF0IGFuIGV2ZW50IHNob3VsZCBiZSBjcmVhdGVkLgpmdW5jdGlvbiBnZXREcmFnZ2VkRWxNZXRhKGVsKSB7Cgl2YXIgcHJlZml4ID0gZmMuZGF0YUF0dHJQcmVmaXg7Cgl2YXIgZXZlbnRQcm9wczsgLy8gcHJvcGVydGllcyBmb3IgY3JlYXRpbmcgdGhlIGV2ZW50LCBub3QgcmVsYXRlZCB0byBkYXRlL3RpbWUKCXZhciBzdGFydFRpbWU7IC8vIGEgRHVyYXRpb24KCXZhciBkdXJhdGlvbjsKCXZhciBzdGljazsKCglpZiAocHJlZml4KSB7IHByZWZpeCArPSAnLSc7IH0KCWV2ZW50UHJvcHMgPSBlbC5kYXRhKHByZWZpeCArICdldmVudCcpIHx8IG51bGw7CgoJaWYgKGV2ZW50UHJvcHMpIHsKCQlpZiAodHlwZW9mIGV2ZW50UHJvcHMgPT09ICdvYmplY3QnKSB7CgkJCWV2ZW50UHJvcHMgPSAkLmV4dGVuZCh7fSwgZXZlbnRQcm9wcyk7IC8vIG1ha2UgYSBjb3B5CgkJfQoJCWVsc2UgeyAvLyBzb21ldGhpbmcgbGlrZSAxIG9yIHRydWUuIHN0aWxsIHNpZ25hbCBldmVudCBjcmVhdGlvbgoJCQlldmVudFByb3BzID0ge307CgkJfQoKCQkvLyBwbHVjayBzcGVjaWFsLWNhc2VkIGRhdGUvdGltZSBwcm9wZXJ0aWVzCgkJc3RhcnRUaW1lID0gZXZlbnRQcm9wcy5zdGFydDsKCQlpZiAoc3RhcnRUaW1lID09IG51bGwpIHsgc3RhcnRUaW1lID0gZXZlbnRQcm9wcy50aW1lOyB9IC8vIGFjY2VwdCAndGltZScgYXMgd2VsbAoJCWR1cmF0aW9uID0gZXZlbnRQcm9wcy5kdXJhdGlvbjsKCQlzdGljayA9IGV2ZW50UHJvcHMuc3RpY2s7CgkJZGVsZXRlIGV2ZW50UHJvcHMuc3RhcnQ7CgkJZGVsZXRlIGV2ZW50UHJvcHMudGltZTsKCQlkZWxldGUgZXZlbnRQcm9wcy5kdXJhdGlvbjsKCQlkZWxldGUgZXZlbnRQcm9wcy5zdGljazsKCX0KCgkvLyBmYWxsYmFjayB0byBzdGFuZGFsb25lIGF0dHJpYnV0ZSB2YWx1ZXMgZm9yIGVhY2ggb2YgdGhlIGRhdGUvdGltZSBwcm9wZXJ0aWVzCglpZiAoc3RhcnRUaW1lID09IG51bGwpIHsgc3RhcnRUaW1lID0gZWwuZGF0YShwcmVmaXggKyAnc3RhcnQnKTsgfQoJaWYgKHN0YXJ0VGltZSA9PSBudWxsKSB7IHN0YXJ0VGltZSA9IGVsLmRhdGEocHJlZml4ICsgJ3RpbWUnKTsgfSAvLyBhY2NlcHQgJ3RpbWUnIGFzIHdlbGwKCWlmIChkdXJhdGlvbiA9PSBudWxsKSB7IGR1cmF0aW9uID0gZWwuZGF0YShwcmVmaXggKyAnZHVyYXRpb24nKTsgfQoJaWYgKHN0aWNrID09IG51bGwpIHsgc3RpY2sgPSBlbC5kYXRhKHByZWZpeCArICdzdGljaycpOyB9CgoJLy8gbWFzc2FnZSBpbnRvIGNvcnJlY3QgZGF0YSB0eXBlcwoJc3RhcnRUaW1lID0gc3RhcnRUaW1lICE9IG51bGwgPyBtb21lbnQuZHVyYXRpb24oc3RhcnRUaW1lKSA6IG51bGw7CglkdXJhdGlvbiA9IGR1cmF0aW9uICE9IG51bGwgPyBtb21lbnQuZHVyYXRpb24oZHVyYXRpb24pIDogbnVsbDsKCXN0aWNrID0gQm9vbGVhbihzdGljayk7CgoJcmV0dXJuIHsgZXZlbnRQcm9wczogZXZlbnRQcm9wcywgc3RhcnRUaW1lOiBzdGFydFRpbWUsIGR1cmF0aW9uOiBkdXJhdGlvbiwgc3RpY2s6IHN0aWNrIH07Cn0KCgo7OwoKLyogQSBjb21wb25lbnQgdGhhdCByZW5kZXJzIGEgZ3JpZCBvZiB3aG9sZS1kYXlzIHRoYXQgcnVucyBob3Jpem9udGFsbHkuIFRoZXJlIGNhbiBiZSBtdWx0aXBsZSByb3dzLCBvbmUgcGVyIHdlZWsuCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKdmFyIERheUdyaWQgPSBHcmlkLmV4dGVuZCh7CgoJbnVtYmVyc1Zpc2libGU6IGZhbHNlLCAvLyBzaG91bGQgcmVuZGVyIGEgcm93IGZvciBkYXkvd2VlayBudW1iZXJzPyBzZXQgYnkgb3V0c2lkZSB2aWV3LiBUT0RPOiBtYWtlIGludGVybmFsCglib3R0b21Db29yZFBhZGRpbmc6IDAsIC8vIGhhY2sgZm9yIGV4dGVuZGluZyB0aGUgaGl0IGFyZWEgZm9yIHRoZSBsYXN0IHJvdyBvZiB0aGUgY29vcmRpbmF0ZSBncmlkCglicmVha09uV2Vla3M6IG51bGwsIC8vIHNob3VsZCBjcmVhdGUgYSBuZXcgcm93IGZvciBlYWNoIHdlZWs\\/CgkJCQkJJyBocmVmPSInICsgaHRtbEVzY2FwZShldmVudC51cmwpICsgJyInIDoKCQkJCQknJwoJCQkJCSkgKwoJCQkJKHNraW5Dc3MgPwoJCQkJCScgc3R5bGU9IicgKyBza2luQ3NzICsgJyInIDoKCQkJCQknJwoJCQkJCSkgKwoJCQknPicgKwoJCQkJJzxkaXYgY2xhc3M9ImZjLWNvbnRlbnQiPicgKwoJCQkJCSh0aGlzLmlzUlRMID8KCQkJCQkJdGl0bGVIdG1sICsgJyAnICsgdGltZUh0bWwgOiAvLyBwdXQgYSBuYXR1cmFsIHNwYWNlIGluIGJldHdlZW4KCQkJCQkJdGltZUh0bWwgKyAnICcgKyB0aXRsZUh0bWwgICAvLwoJCQkJCQkpICsKCQkJCSc8L2Rpdj4nICsKCQkJCShpc1Jlc2l6YWJsZSA\\/CgkJdmFyIHRyRWxzID0gdGhpcy5yb3dTdHJ1Y3RzW3Jvd10udGJvZHlFbC5jaGlsZHJlbigpOwoJCXZhciBpLCB0ckVsOwoKCQkvLyBSZXZlYWwgb25lIGxldmVsIDx0cj4gYXQgYSB0aW1lIGFuZCBzdG9wIHdoZW4gd2UgZmluZCBvbmUgb3V0IG9mIGJvdW5kcwoJCWZvciAoaSA9IDA7IGkgPCB0ckVscy5sZW5ndGg7IGkrKykgewoJCQl0ckVsID0gdHJFbHMuZXEoaSkucmVtb3ZlQ2xhc3MoJ2ZjLWxpbWl0ZWQnKTsgLy8gZ2V0IGFuZCByZXZlYWwKCQkJaWYgKHRyRWwucG9zaXRpb24oKS50b3AgKyB0ckVsLm91dGVySGVpZ2h0KCkgPiByb3dIZWlnaHQpIHsKCQkJCXJldHVybiBpOwoJCQl9CgkJfQoKCQlyZXR1cm4gZmFsc2U7IC8vIHNob3VsZCBub3QgbGltaXQgYXQgYWxsCgl9LAoKCgkvLyBMaW1pdHMgdGhlIGdpdmVuIGdyaWQgcm93IHRvIHRoZSBtYXhpbXVtIG51bWJlciBvZiBsZXZlbHMgYW5kIGluamVjdHMgIm1vcmUiIGxpbmtzIGlmIG5lY2Vzc2FyeS4KCS8vIGByb3dgIGlzIHRoZSByb3cgbnVtYmVyLgoJLy8gYGxldmVsTGltaXRgIGlzIGEgbnVtYmVyIGZvciB0aGUgbWF4aW11bSAoaW5jbHVzaXZlKSBudW1iZXIgb2YgbGV2ZWxzIGFsbG93ZWQuCglsaW1pdFJvdzogZnVuY3Rpb24ocm93LCBsZXZlbExpbWl0KSB7CgkJdmFyIF90aGlzID0gdGhpczsKCQl2YXIgcm93U3RydWN0ID0gdGhpcy5yb3dTdHJ1Y3RzW3Jvd107CgkJdmFyIG1vcmVOb2RlcyA9IFtdOyAvLyBhcnJheSBvZiAibW9yZSIgPGE+IGxpbmtzIGFuZCA8dGQ+IERPTSBub2RlcwoJCXZhciBjb2wgPSAwOyAvLyBjb2wgIywgbGVmdC10by1yaWdodCAobm90IGNocm9ub2xvZ2ljYWxseSkKCQl2YXIgY2VsbDsKCQl2YXIgbGV2ZWxTZWdzOyAvLyBhcnJheSBvZiBzZWdtZW50IG9iamVjdHMgaW4gdGhlIGxhc3QgYWxsb3dhYmxlIGxldmVsLCBvcmRlcmVkIGxlZnQtdG8tcmlnaHQKCQl2YXIgY2VsbE1hdHJpeDsgLy8gYSBtYXRyaXggKGJ5IGxldmVsLCB0aGVuIGNvbHVtbikgb2YgYWxsIDx0ZD4galF1ZXJ5IGVsZW1lbnRzIGluIHRoZSByb3cKCQl2YXIgbGltaXRlZE5vZGVzOyAvLyBhcnJheSBvZiB0ZW1wb3JhcmlseSBoaWRkZW4gbGV2ZWwgPHRyPiBhbmQgc2VnbWVudCA8dGQ+IERPTSBub2RlcwoJCXZhciBpLCBzZWc7CgkJdmFyIHNlZ3NCZWxvdzsgLy8gYXJyYXkgb2Ygc2VnbWVudCBvYmplY3RzIGJlbG93IGBzZWdgIGluIHRoZSBjdXJyZW50IGBjb2xgCgkJdmFyIHRvdGFsU2Vnc0JlbG93OyAvLyB0b3RhbCBudW1iZXIgb2Ygc2VnbWVudHMgYmVsb3cgYHNlZ2AgaW4gYW55IG9mIHRoZSBjb2x1bW5zIGBzZWdgIG9jY3VwaWVzCgkJdmFyIGNvbFNlZ3NCZWxvdzsgLy8gYXJyYXkgb2Ygc2VnbWVudCBhcnJheXMsIGJlbG93IHNlZywgb25lIGZvciBlYWNoIGNvbHVtbiAob2Zmc2V0IGZyb20gc2VncydzIGZpcnN0IGNvbHVtbikKCQl2YXIgdGQsIHJvd3NwYW47CgkJdmFyIHNlZ01vcmVOb2RlczsgLy8gYXJyYXkgb2YgIm1vcmUiIDx0ZD4gY2VsbHMgdGhhdCB3aWxsIHN0YW5kLWluIGZvciB0aGUgY3VycmVudCBzZWcncyBjZWxsCgkJdmFyIGo7CgkJdmFyIG1vcmVUZCwgbW9yZVdyYXAsIG1vcmVMaW5rOwoKCQkvLyBJdGVyYXRlcyB0aHJvdWdoIGVtcHR5IGxldmVsIGNlbGxzIGFuZCBwbGFjZXMgIm1vcmUiIGxpbmtzIGluc2lkZSBpZiBuZWVkIGJlCgkJZnVuY3Rpb24gZW1wdHlDZWxsc1VudGlsKGVuZENvbCkgeyAvLyBnb2VzIGZyb20gY3VycmVudCBgY29sYCB0byBgZW5kQ29sYAoJCQl3aGlsZSAoY29sIDwgZW5kQ29sKSB7CgkJCQljZWxsID0gX3RoaXMuZ2V0Q2VsbChyb3csIGNvbCk7CgkJCQlzZWdzQmVsb3cgPSBfdGhpcy5nZXRDZWxsU2VncyhjZWxsLCBsZXZlbExpbWl0KTsKCQkJCWlmIChzZWdzQmVsb3cubGVuZ3RoKSB7CgkJCQkJdGQgPSBjZWxsTWF0cml4W2xldmVsTGltaXQgLSAxXVtjb2xdOwoJCQkJCW1vcmVMaW5rID0gX3RoaXMucmVuZGVyTW9yZUxpbmsoY2VsbCwgc2Vnc0JlbG93KTsKCQkJCQltb3JlV3JhcCA9ICQoJzxkaXYvPicpLmFwcGVuZChtb3JlTGluayk7CgkJCQkJdGQuYXBwZW5kKG1vcmVXcmFwKTsKCQkJCQltb3JlTm9kZXMucHVzaChtb3JlV3JhcFswXSk7CgkJCQl9CgkJCQljb2wrKzsKCQkJfQoJCX0KCgkJaWYgKGxldmVsTGltaXQgJiYgbGV2ZWxMaW1pdCA8IHJvd1N0cnVjdC5zZWdMZXZlbHMubGVuZ3RoKSB7IC8vIGlzIGl0IGFjdHVhbGx5IG92ZXIgdGhlIGxpbWl0PwoJCQlsZXZlbFNlZ3MgPSByb3dTdHJ1Y3Quc2VnTGV2ZWxzW2xldmVsTGltaXQgLSAxXTsKCQkJY2VsbE1hdHJpeCA9IHJvd1N0cnVjdC5jZWxsTWF0cml4OwoKCQkJbGltaXRlZE5vZGVzID0gcm93U3RydWN0LnRib2R5RWwuY2hpbGRyZW4oKS5zbGljZShsZXZlbExpbWl0KSAvLyBnZXQgbGV2ZWwgPHRyPiBlbGVtZW50cyBwYXN0IHRoZSBsaW1pdAoJCQkJLmFkZENsYXNzKCdmYy1saW1pdGVkJykuZ2V0KCk7IC8vIGhpZGUgZWxlbWVudHMgYW5kIGdldCBhIHNpbXBsZSBET00tbm9kZXMgYXJyYXkKCgkJCS8vIGl0ZXJhdGUgdGhvdWdoIHNlZ21lbnRzIGluIHRoZSBsYXN0IGFsbG93YWJsZSBsZXZlbAoJCQlmb3IgKGkgPSAwOyBpIDwgbGV2ZWxTZWdzLmxlbmd0aDsgaSsrKSB7CgkJCQlzZWcgPSBsZXZlbFNlZ3NbaV07CgkJCQllbXB0eUNlbGxzVW50aWwoc2VnLmxlZnRDb2wpOyAvLyBwcm9jZXNzIGVtcHR5IGNlbGxzIGJlZm9yZSB0aGUgc2VnbWVudAoKCQkJCS8vIGRldGVybWluZSAqYWxsKiBzZWdtZW50cyBiZWxvdyBgc2VnYCB0aGF0IG9jY3VweSB0aGUgc2FtZSBjb2x1bW5zCgkJCQljb2xTZWdzQmVsb3cgPSBbXTsKCQkJCXRvdGFsU2Vnc0JlbG93ID0gMDsKCQkJCXdoaWxlIChjb2wgPD0gc2VnLnJpZ2h0Q29sKSB7CgkJCQkJY2VsbCA9IHRoaXMuZ2V0Q2VsbChyb3csIGNvbCk7CgkJCQkJc2Vnc0JlbG93ID0gdGhpcy5nZXRDZWxsU2VncyhjZWxsLCBsZXZlbExpbWl0KTsKCQkJCQljb2xTZWdzQmVsb3cucHVzaChzZWdzQmVsb3cpOwoJCQkJCXRvdGFsU2Vnc0JlbG93ICs9IHNlZ3NCZWxvdy5sZW5ndGg7CgkJCQkJY29sKys7CgkJCQl9CgoJCQkJaWYgKHRvdGFsU2Vnc0JlbG93KSB7IC8vIGRvIHdlIG5lZWQgdG8gcmVwbGFjZSB0aGlzIHNlZ21lbnQgd2l0aCBvbmUgb3IgbWFueSAibW9yZSIgbGlua3M\/CgkJCQkJdGQgPSBjZWxsTWF0cml4W2xldmVsTGltaXQgLSAxXVtzZWcubGVmdENvbF07IC8vIHRoZSBzZWdtZW50J3MgcGFyZW50IGNlbGwKCQkJCQlyb3dzcGFuID0gdGQuYXR0cigncm93c3BhbicpIHx8IDE7CgkJCQkJc2VnTW9yZU5vZGVzID0gW107CgoJCQkJCS8vIG1ha2UgYSByZXBsYWNlbWVudCA8dGQ+IGZvciBlYWNoIGNvbHVtbiB0aGUgc2VnbWVudCBvY2N1cGllcy4gd2lsbCBiZSBvbmUgZm9yIGVhY2ggY29sc3BhbgoJCQkJCWZvciAoaiA9IDA7IGogPCBjb2xTZWdzQmVsb3cubGVuZ3RoOyBqKyspIHsKCQkJCQkJbW9yZVRkID0gJCgnPHRkIGNsYXNzPSJmYy1tb3JlLWNlbGwiLz4nKS5hdHRyKCdyb3dzcGFuJywgcm93c3Bhbik7CgkJCQkJCXNlZ3NCZWxvdyA9IGNvbFNlZ3NCZWxvd1tqXTsKCQkJCQkJY2VsbCA9IHRoaXMuZ2V0Q2VsbChyb3csIHNlZy5sZWZ0Q29sICsgaik7CgkJCQkJCW1vcmVMaW5rID0gdGhpcy5yZW5kZXJNb3JlTGluayhjZWxsLCBbIHNlZyBdLmNvbmNhdChzZWdzQmVsb3cpKTsgLy8gY291bnQgc2VnIGFzIGhpZGRlbiB0b28KCQkJCQkJbW9yZVdyYXAgPSAkKCc8ZGl2Lz4nKS5hcHBlbmQobW9yZUxpbmspOwoJCQkJCQltb3JlVGQuYXBwZW5kKG1vcmVXcmFwKTsKCQkJCQkJc2VnTW9yZU5vZGVzLnB1c2gobW9yZVRkWzBdKTsKCQkJCQkJbW9yZU5vZGVzLnB1c2gobW9yZVRkWzBdKTsKCQkJCQl9CgoJCQkJCXRkLmFkZENsYXNzKCdmYy1saW1pdGVkJykuYWZ0ZXIoJChzZWdNb3JlTm9kZXMpKTsgLy8gaGlkZSBvcmlnaW5hbCA8dGQ+IGFuZCBpbmplY3QgcmVwbGFjZW1lbnRzCgkJCQkJbGltaXRlZE5vZGVzLnB1c2godGRbMF0pOwoJCQkJfQoJCQl9CgoJCQllbXB0eUNlbGxzVW50aWwodGhpcy5jb2xDbnQpOyAvLyBmaW5pc2ggb2ZmIHRoZSBsZXZlbAoJCQlyb3dTdHJ1Y3QubW9yZUVscyA9ICQobW9yZU5vZGVzKTsgLy8gZm9yIGVhc3kgdW5kb2luZyBsYXRlcgoJCQlyb3dTdHJ1Y3QubGltaXRlZEVscyA9ICQobGltaXRlZE5vZGVzKTsgLy8gZm9yIGVhc3kgdW5kb2luZyBsYXRlcgoJCX0KCX0sCgoKCS8vIFJldmVhbHMgYWxsIGxldmVscyBhbmQgcmVtb3ZlcyBhbGwgIm1vcmUiLXJlbGF0ZWQgZWxlbWVudHMgZm9yIGEgZ3JpZCdzIHJvdy4KCS8vIGByb3dgIGlzIGEgcm93IG51bWJlci4KCXVubGltaXRSb3c6IGZ1bmN0aW9uKHJvdykgewoJCXZhciByb3dTdHJ1Y3QgPSB0aGlzLnJvd1N0cnVjdHNbcm93XTsKCgkJaWYgKHJvd1N0cnVjdC5tb3JlRWxzKSB7CgkJCXJvd1N0cnVjdC5tb3JlRWxzLnJlbW92ZSgpOwoJCQlyb3dTdHJ1Y3QubW9yZUVscyA9IG51bGw7CgkJfQoKCQlpZiAocm93U3RydWN0LmxpbWl0ZWRFbHMpIHsKCQkJcm93U3RydWN0LmxpbWl0ZWRFbHMucmVtb3ZlQ2xhc3MoJ2ZjLWxpbWl0ZWQnKTsKCQkJcm93U3RydWN0LmxpbWl0ZWRFbHMgPSBudWxsOwoJCX0KCX0sCgoKCS8vIFJlbmRlcnMgYW4gPGE+IGVsZW1lbnQgdGhhdCByZXByZXNlbnRzIGhpZGRlbiBldmVudCBlbGVtZW50IGZvciBhIGNlbGwuCgkvLyBSZXNwb25zaWJsZSBmb3IgYXR0YWNoaW5nIGNsaWNrIGhhbmRsZXIgYXMgd2VsbC4KCXJlbmRlck1vcmVMaW5rOiBmdW5jdGlvbihjZWxsLCBoaWRkZW5TZWdzKSB7CgkJdmFyIF90aGlzID0gdGhpczsKCQl2YXIgdmlldyA9IHRoaXMudmlldzsKCgkJcmV0dXJuICQoJzxhIGNsYXNzPSJmYy1tb3JlIi8+JykKCQkJLnRleHQoCgkJCQl0aGlzLmdldE1vcmVMaW5rVGV4dChoaWRkZW5TZWdzLmxlbmd0aCkKCQkJKQoJCQkub24oJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHsKCQkJCXZhciBjbGlja09wdGlvbiA9IHZpZXcub3B0KCdldmVudExpbWl0Q2xpY2snKTsKCQkJCXZhciBkYXRlID0gY2VsbC5zdGFydDsKCQkJCXZhciBtb3JlRWwgPSAkKHRoaXMpOwoJCQkJdmFyIGRheUVsID0gX3RoaXMuZ2V0Q2VsbERheUVsKGNlbGwpOwoJCQkJdmFyIGFsbFNlZ3MgPSBfdGhpcy5nZXRDZWxsU2VncyhjZWxsKTsKCgkJCQkvLyByZXNjb3BlIHRoZSBzZWdtZW50cyB0byBiZSB3aXRoaW4gdGhlIGNlbGwncyBkYXRlCgkJCQl2YXIgcmVzbGljZWRBbGxTZWdzID0gX3RoaXMucmVzbGljZURheVNlZ3MoYWxsU2VncywgZGF0ZSk7CgkJCQl2YXIgcmVzbGljZWRIaWRkZW5TZWdzID0gX3RoaXMucmVzbGljZURheVNlZ3MoaGlkZGVuU2VncywgZGF0ZSk7CgoJCQkJaWYgKHR5cGVvZiBjbGlja09wdGlvbiA9PT0gJ2Z1bmN0aW9uJykgewoJCQkJCS8vIHRoZSByZXR1cm5lZCB2YWx1ZSBjYW4gYmUgYW4gYXRvbWljIG9wdGlvbgoJCQkJCWNsaWNrT3B0aW9uID0gdmlldy50cmlnZ2VyKCdldmVudExpbWl0Q2xpY2snLCBudWxsLCB7CgkJCQkJCWRhdGU6IGRhdGUsCgkJCQkJCWRheUVsOiBkYXlFbCwKCQkJCQkJbW9yZUVsOiBtb3JlRWwsCgkJCQkJCXNlZ3M6IHJlc2xpY2VkQWxsU2VncywKCQkJCQkJaGlkZGVuU2VnczogcmVzbGljZWRIaWRkZW5TZWdzCgkJCQkJfSwgZXYpOwoJCQkJfQoKCQkJCWlmIChjbGlja09wdGlvbiA9PT0gJ3BvcG92ZXInKSB7CgkJCQkJX3RoaXMuc2hvd1NlZ1BvcG92ZXIoY2VsbCwgbW9yZUVsLCByZXNsaWNlZEFsbFNlZ3MpOwoJCQkJfQoJCQkJZWxzZSBpZiAodHlwZW9mIGNsaWNrT3B0aW9uID09PSAnc3RyaW5nJykgeyAvLyBhIHZpZXcgbmFtZQoJCQkJCXZpZXcuY2FsZW5kYXIuem9vbVRvKGRhdGUsIGNsaWNrT3B0aW9uKTsKCQkJCX0KCQkJfSk7Cgl9LAoKCgkvLyBSZXZlYWxzIHRoZSBwb3BvdmVyIHRoYXQgZGlzcGxheXMgYWxsIGV2ZW50cyB3aXRoaW4gYSBjZWxsCglzaG93U2VnUG9wb3ZlcjogZnVuY3Rpb24oY2VsbCwgbW9yZUxpbmssIHNlZ3MpIHsKCQl2YXIgX3RoaXMgPSB0aGlzOwoJCXZhciB2aWV3ID0gdGhpcy52aWV3OwoJCXZhciBtb3JlV3JhcCA9IG1vcmVMaW5rLnBhcmVudCgpOyAvLyB0aGUgPGRpdj4gd3JhcHBlciBhcm91bmQgdGhlIDxhPgoJCXZhciB0b3BFbDsgLy8gdGhlIGVsZW1lbnQgd2Ugd2FudCB0byBtYXRjaCB0aGUgdG9wIGNvb3JkaW5hdGUgb2YKCQl2YXIgb3B0aW9uczsKCgkJaWYgKHRoaXMucm93Q250ID09IDEpIHsKCQkJdG9wRWwgPSB2aWV3LmVsOyAvLyB3aWxsIGNhdXNlIHRoZSBwb3BvdmVyIHRvIGNvdmVyIGFueSBzb3J0IG9mIGhlYWRlcgoJCX0KCQllbHNlIHsKCQkJdG9wRWwgPSB0aGlzLnJvd0Vscy5lcShjZWxsLnJvdyk7IC8vIHdpbGwgYWxpZ24gd2l0aCB0b3Agb2Ygcm93CgkJfQoKCQlvcHRpb25zID0gewoJCQljbGFzc05hbWU6ICdmYy1tb3JlLXBvcG92ZXInLAoJCQljb250ZW50OiB0aGlzLnJlbmRlclNlZ1BvcG92ZXJDb250ZW50KGNlbGwsIHNlZ3MpLAoJCQlwYXJlbnRFbDogdGhpcy5lbCwKCQkJdG9wOiB0b3BFbC5vZmZzZXQoKS50b3AsCgkJCWF1dG9IaWRlOiB0cnVlLCAvLyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBlbHNld2hlcmUsIGhpZGUgdGhlIHBvcG92ZXIKCQkJdmlld3BvcnRDb25zdHJhaW46IHZpZXcub3B0KCdwb3BvdmVyVmlld3BvcnRDb25zdHJhaW4nKSwKCQkJaGlkZTogZnVuY3Rpb24oKSB7CgkJCQkvLyBkZXN0cm95IGV2ZXJ5dGhpbmcgd2hlbiB0aGUgcG9wb3ZlciBpcyBoaWRkZW4KCQkJCV90aGlzLnNlZ1BvcG92ZXIuZGVzdHJveSgpOwoJCQkJX3RoaXMuc2VnUG9wb3ZlciA9IG51bGw7CgkJCQlfdGhpcy5wb3BvdmVyU2VncyA9IG51bGw7CgkJCX0KCQl9OwoKCQkvLyBEZXRlcm1pbmUgaG9yaXpvbnRhbCBjb29yZGluYXRlLgoJCS8vIFdlIHVzZSB0aGUgbW9yZVdyYXAgaW5zdGVhZCBvZiB0aGUgPHRkPiB0byBhdm9pZCBib3JkZXIgY29uZnVzaW9uLgoJCWlmICh0aGlzLmlzUlRMKSB7CgkJCW9wdGlvbnMucmlnaHQgPSBtb3JlV3JhcC5vZmZzZXQoKS5sZWZ0ICsgbW9yZVdyYXAub3V0ZXJXaWR0aCgpICsgMTsgLy8gKzEgdG8gYmUgb3ZlciBjZWxsIGJvcmRlcgoJCX0KCQllbHNlIHsKCQkJb3B0aW9ucy5sZWZ0ID0gbW9yZVdyYXAub2Zmc2V0KCkubGVmdCAtIDE7IC8vIC0xIHRvIGJlIG92ZXIgY2VsbCBib3JkZXIKCQl9CgoJCXRoaXMuc2VnUG9wb3ZlciA9IG5ldyBQb3BvdmVyKG9wdGlvbnMpOwoJCXRoaXMuc2VnUG9wb3Zlci5zaG93KCk7Cgl9LAoKCgkvLyBCdWlsZHMgdGhlIGlubmVyIERPTSBjb250ZW50cyBvZiB0aGUgc2VnbWVudCBwb3BvdmVyCglyZW5kZXJTZWdQb3BvdmVyQ29udGVudDogZnVuY3Rpb24oY2VsbCwgc2VncykgewoJCXZhciB2aWV3ID0gdGhpcy52aWV3OwoJCXZhciBpc1RoZW1lID0gdmlldy5vcHQoJ3RoZW1lJyk7CgkJdmFyIHRpdGxlID0gY2VsbC5zdGFydC5mb3JtYXQodmlldy5vcHQoJ2RheVBvcG92ZXJGb3JtYXQnKSk7CgkJdmFyIGNvbnRlbnQgPSAkKAoJCQknPGRpdiBjbGFzcz0iZmMtaGVhZGVyICcgKyB2aWV3LndpZGdldEhlYWRlckNsYXNzICsgJyI+JyArCgkJCQknPHNwYW4gY2xhc3M9ImZjLWNsb3NlICcgKwoJCQkJCShpc1RoZW1lID8gJ3VpLWljb24gdWktaWNvbi1jbG9zZXRoaWNrJyA6ICdmYy1pY29uIGZjLWljb24teCcpICsKCQkJCSciPjwvc3Bhbj4nICsKCQkJCSc8c3BhbiBjbGFzcz0iZmMtdGl0bGUiPicgKwoJCQkJCWh0bWxFc2NhcGUodGl0bGUpICsKCQkJCSc8L3NwYW4+JyArCgkJCQknPGRpdiBjbGFzcz0iZmMtY2xlYXIiLz4nICsKCQkJJzwvZGl2PicgKwoJCQknPGRpdiBjbGFzcz0iZmMtYm9keSAnICsgdmlldy53aWRnZXRDb250ZW50Q2xhc3MgKyAnIj4nICsKCQkJCSc8ZGl2IGNsYXNzPSJmYy1ldmVudC1jb250YWluZXIiPjwvZGl2PicgKwoJCQknPC9kaXY+JwoJCSk7CgkJdmFyIHNlZ0NvbnRhaW5lciA9IGNvbnRlbnQuZmluZCgnLmZjLWV2ZW50LWNvbnRhaW5lcicpOwoJCXZhciBpOwoKCQkvLyByZW5kZXIgZWFjaCBzZWcncyBgZWxgIGFuZCBvbmx5IHJldHVybiB0aGUgdmlzaWJsZSBzZWdzCgkJc2VncyA9IHRoaXMucmVuZGVyRmdTZWdFbHMoc2VncywgdHJ1ZSk7IC8vIGRpc2FibGVSZXNpemluZz10cnVlCgkJdGhpcy5wb3BvdmVyU2VncyA9IHNlZ3M7CgoJCWZvciAoaSA9IDA7IGkgPCBzZWdzLmxlbmd0aDsgaSsrKSB7CgoJCQkvLyBiZWNhdXNlIHNlZ21lbnRzIGluIHRoZSBwb3BvdmVyIGFyZSBub3QgcGFydCBvZiBhIGdyaWQgY29vcmRpbmF0ZSBzeXN0ZW0sIHByb3ZpZGUgYSBoaW50IHRvIGFueQoJCQkvLyBncmlkcyB0aGF0IHdhbnQgdG8gZG8gZHJhZy1uLWRyb3AgYWJvdXQgd2hpY2ggY2VsbCBpdCBjYW1lIGZyb20KCQkJc2Vnc1tpXS5jZWxsID0gY2VsbDsKCgkJCXNlZ0NvbnRhaW5lci5hcHBlbmQoc2Vnc1tpXS5lbCk7CgkJfQoKCQlyZXR1cm4gY29udGVudDsKCX0sCgoKCS8vIEdpdmVuIHRoZSBldmVudHMgd2l0aGluIGFuIGFycmF5IG9mIHNlZ21lbnQgb2JqZWN0cywgcmVzbGljZSB0aGVtIHRvIGJlIGluIGEgc2luZ2xlIGRheQoJcmVzbGljZURheVNlZ3M6IGZ1bmN0aW9uKHNlZ3MsIGRheURhdGUpIHsKCgkJLy8gYnVpbGQgYW4gYXJyYXkgb2YgdGhlIG9yaWdpbmFsIGV2ZW50cwoJCXZhciBldmVudHMgPSAkLm1hcChzZWdzLCBmdW5jdGlvbihzZWcpIHsKCQkJcmV0dXJuIHNlZy5ldmVudDsKCQl9KTsKCgkJdmFyIGRheVN0YXJ0ID0gZGF5RGF0ZS5jbG9uZSgpLnN0cmlwVGltZSgpOwoJCXZhciBkYXlFbmQgPSBkYXlTdGFydC5jbG9uZSgpLmFkZCgxLCAnZGF5cycpOwoJCXZhciBkYXlSYW5nZSA9IHsgc3RhcnQ6IGRheVN0YXJ0LCBlbmQ6IGRheUVuZCB9OwoKCQkvLyBzbGljZSB0aGUgZXZlbnRzIHdpdGggYSBjdXN0b20gc2xpY2luZyBmdW5jdGlvbgoJCXJldHVybiB0aGlzLmV2ZW50c1RvU2VncygKCQkJZXZlbnRzLAoJCQlmdW5jdGlvbihyYW5nZSkgewoJCQkJdmFyIHNlZyA9IGludGVyc2VjdGlvblRvU2VnKHJhbmdlLCBkYXlSYW5nZSk7IC8vIHVuZGVmaW5kIGlmIG5vIGludGVyc2VjdGlvbgoJCQkJcmV0dXJuIHNlZyA\/IFsgc2VnIF0gOiBbXTsgLy8gbXVzdCByZXR1cm4gYW4gYXJyYXkgb2Ygc2VnbWVudHMKCQkJfQoJCSk7Cgl9LAoKCgkvLyBHZW5lcmF0ZXMgdGhlIHRleHQgdGhhdCBzaG91bGQgYmUgaW5zaWRlIGEgIm1vcmUiIGxpbmssIGdpdmVuIHRoZSBudW1iZXIgb2YgZXZlbnRzIGl0IHJlcHJlc2VudHMKCWdldE1vcmVMaW5rVGV4dDogZnVuY3Rpb24obnVtKSB7CgkJdmFyIG9wdCA9IHRoaXMudmlldy5vcHQoJ2V2ZW50TGltaXRUZXh0Jyk7CgoJCWlmICh0eXBlb2Ygb3B0ID09PSAnZnVuY3Rpb24nKSB7CgkJCXJldHVybiBvcHQobnVtKTsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiAnKycgKyBudW0gKyAnICcgKyBvcHQ7CgkJfQoJfSwKCgoJLy8gUmV0dXJucyBzZWdtZW50cyB3aXRoaW4gYSBnaXZlbiBjZWxsLgoJLy8gSWYgYHN0YXJ0TGV2ZWxgIGlzIHNwZWNpZmllZCwgcmV0dXJucyBvbmx5IGV2ZW50cyBpbmNsdWRpbmcgYW5kIGJlbG93IHRoYXQgbGV2ZWwuIE90aGVyd2lzZSByZXR1cm5zIGFsbCBzZWdzLgoJZ2V0Q2VsbFNlZ3M6IGZ1bmN0aW9uKGNlbGwsIHN0YXJ0TGV2ZWwpIHsKCQl2YXIgc2VnTWF0cml4ID0gdGhpcy5yb3dTdHJ1Y3RzW2NlbGwucm93XS5zZWdNYXRyaXg7CgkJdmFyIGxldmVsID0gc3RhcnRMZXZlbCB8fCAwOwoJCXZhciBzZWdzID0gW107CgkJdmFyIHNlZzsKCgkJd2hpbGUgKGxldmVsIDwgc2VnTWF0cml4Lmxlbmd0aCkgewoJCQlzZWcgPSBzZWdNYXRyaXhbbGV2ZWxdW2NlbGwuY29sXTsKCQkJaWYgKHNlZykgewoJCQkJc2Vncy5wdXNoKHNlZyk7CgkJCX0KCQkJbGV2ZWwrKzsKCQl9CgoJCXJldHVybiBzZWdzOwoJfQoKfSk7Cgo7OwoKLyogQSBjb21wb25lbnQgdGhhdCByZW5kZXJzIG9uZSBvciBtb3JlIGNvbHVtbnMgb2YgdmVydGljYWwgdGltZSBzbG90cwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCnZhciBUaW1lR3JpZCA9IEdyaWQuZXh0ZW5kKHsKCglzbG90RHVyYXRpb246IG51bGwsIC8vIGR1cmF0aW9uIG9mIGEgInNsb3QiLCBhIGRpc3RpbmN0IHRpbWUgc2VnbWVudCBvbiBnaXZlbiBkYXksIHZpc3VhbGl6ZWQgYnkgbGluZXMKCXNuYXBEdXJhdGlvbjogbnVsbCwgLy8gZ3JhbnVsYXJpdHkgb2YgdGltZSBmb3IgZHJhZ2dpbmcgYW5kIHNlbGVjdGluZwoKCW1pblRpbWU6IG51bGwsIC8vIER1cmF0aW9uIG9iamVjdCB0aGF0IGRlbm90ZXMgdGhlIGZpcnN0IHZpc2libGUgdGltZSBvZiBhbnkgZ2l2ZW4gZGF5CgltYXhUaW1lOiBudWxsLCAvLyBEdXJhdGlvbiBvYmplY3QgdGhhdCBkZW5vdGVzIHRoZSBleGNsdXNpdmUgdmlzaWJsZSBlbmQgdGltZSBvZiBhbnkgZ2l2ZW4gZGF5CgoJYXhpc0Zvcm1hdDogbnVsbCwgLy8gZm9ybWF0dGluZyBzdHJpbmcgZm9yIHRpbWVzIHJ1bm5pbmcgYWxvbmcgdmVydGljYWwgYXhpcwoKCWRheUVsczogbnVsbCwgLy8gY2VsbHMgZWxlbWVudHMgaW4gdGhlIGRheS1yb3cgYmFja2dyb3VuZAoJc2xhdEVsczogbnVsbCwgLy8gZWxlbWVudHMgcnVubmluZyBob3Jpem9udGFsbHkgYWNyb3NzIGFsbCBjb2x1bW5zCgoJc2xhdFRvcHM6IG51bGwsIC8vIGFuIGFycmF5IG9mIHRvcCBwb3NpdGlvbnMsIHJlbGF0aXZlIHRvIHRoZSBjb250YWluZXIuIGxhc3QgaXRlbSBob2xkcyBib3R0b20gb2YgbGFzdCBzbG90CgoJaGVscGVyRWw6IG51bGwsIC8vIGNlbGwgc2tlbGV0b24gZWxlbWVudCBmb3IgcmVuZGVyaW5nIHRoZSBtb2NrIGV2ZW50ICJoZWxwZXIiCgoJYnVzaW5lc3NIb3VyU2VnczogbnVsbCwKCgoJY29uc3RydWN0b3I6IGZ1bmN0aW9uKCkgewoJCUdyaWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gY2FsbCB0aGUgc3VwZXItY29uc3RydWN0b3IKCQl0aGlzLnByb2Nlc3NPcHRpb25zKCk7Cgl9LAoKCgkvLyBSZW5kZXJzIHRoZSB0aW1lIGdyaWQgaW50byBgdGhpcy5lbGAsIHdoaWNoIHNob3VsZCBhbHJlYWR5IGJlIGFzc2lnbmVkLgoJLy8gUmVsaWVzIG9uIHRoZSB2aWV3J3MgY29sQ250LiBJbiB0aGUgZnV0dXJlLCB0aGlzIGNvbXBvbmVudCBzaG91bGQgcHJvYmFibHkgYmUgc2VsZi1zdWZmaWNpZW50LgoJcmVuZGVyOiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsLmh0bWwodGhpcy5yZW5kZXJIdG1sKCkpOwoJCXRoaXMuZGF5RWxzID0gdGhpcy5lbC5maW5kKCcuZmMtZGF5Jyk7CgkJdGhpcy5zbGF0RWxzID0gdGhpcy5lbC5maW5kKCcuZmMtc2xhdHMgdHInKTsKCgkJdGhpcy5jb21wdXRlU2xhdFRvcHMoKTsKCQl0aGlzLnJlbmRlckJ1c2luZXNzSG91cnMoKTsKCQlHcmlkLnByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzKTsgLy8gY2FsbCB0aGUgc3VwZXItbWV0aG9kCgl9LAoKCglyZW5kZXJCdXNpbmVzc0hvdXJzOiBmdW5jdGlvbigpIHsKCQl2YXIgZXZlbnRzID0gdGhpcy52aWV3LmNhbGVuZGFyLmdldEJ1c2luZXNzSG91cnNFdmVudHMoKTsKCQl0aGlzLmJ1c2luZXNzSG91clNlZ3MgPSB0aGlzLnJlbmRlckZpbGwoJ2J1c2luZXNzSG91cnMnLCB0aGlzLmV2ZW50c1RvU2VncyhldmVudHMpLCAnYmdldmVudCcpOwoJfSwKCgoJLy8gUmVuZGVycyB0aGUgYmFzaWMgSFRNTCBza2VsZXRvbiBmb3IgdGhlIGdyaWQKCXJlbmRlckh0bWw6IGZ1bmN0aW9uKCkgewoJCXJldHVybiAnJyArCgkJCSc8ZGl2IGNsYXNzPSJmYy1iZyI+JyArCgkJCQknPHRhYmxlPicgKwoJCQkJCXRoaXMucm93SHRtbCgnc2xvdEJnJykgKyAvLyBsZXZlcmFnZXMgUm93UmVuZGVyZXIsIHdoaWNoIHdpbGwgY2FsbCBzbG90QmdDZWxsSHRtbAoJCQkJJzwvdGFibGU+JyArCgkJCSc8L2Rpdj4nICsKCQkJJzxkaXYgY2xhc3M9ImZjLXNsYXRzIj4nICsKCQkJCSc8dGFibGU+JyArCgkJCQkJdGhpcy5zbGF0Um93SHRtbCgpICsKCQkJCSc8L3RhYmxlPicgKwoJCQknPC9kaXY+JzsKCX0sCgoKCS8vIFJlbmRlcnMgdGhlIEhUTUwgZm9yIGEgdmVydGljYWwgYmFja2dyb3VuZCBjZWxsIGJlaGluZCB0aGUgc2xvdHMuCgkvLyBUaGlzIG1ldGhvZCBpcyBkaXN0aW5jdCBmcm9tICdiZycgYmVjYXVzZSB3ZSB3YW50ZWQgYSBuZXcgYHJvd1R5cGVgIHNvIHRoZSBWaWV3IGNvdWxkIGN1c3RvbWl6ZSB0aGUgcmVuZGVyaW5nLgoJc2xvdEJnQ2VsbEh0bWw6IGZ1bmN0aW9uKGNlbGwpIHsKCQlyZXR1cm4gdGhpcy5iZ0NlbGxIdG1sKGNlbGwpOwoJfSwKCgoJLy8gR2VuZXJhdGVzIHRoZSBIVE1MIGZvciB0aGUgaG9yaXpvbnRhbCAic2xhdHMiIHRoYXQgcnVuIHdpZHRoLXdpc2UuIEhhcyBhIHRpbWUgYXhpcyBvbiBhIHNpZGUuIERlcGVuZHMgb24gUlRMLgoJc2xhdFJvd0h0bWw6IGZ1bmN0aW9uKCkgewoJCXZhciB2aWV3ID0gdGhpcy52aWV3OwoJCXZhciBpc1JUTCA9IHRoaXMuaXNSVEw7CgkJdmFyIGh0bWwgPSAnJzsKCQl2YXIgc2xvdE5vcm1hbCA9IHRoaXMuc2xvdER1cmF0aW9uLmFzTWludXRlcygpICUgMTUgPT09IDA7CgkJdmFyIHNsb3RUaW1lID0gbW9tZW50LmR1cmF0aW9uKCt0aGlzLm1pblRpbWUpOyAvLyB3aXNoIHRoZXJlIHdhcyAuY2xvbmUoKSBmb3IgZHVyYXRpb25zCgkJdmFyIHNsb3REYXRlOyAvLyB3aWxsIGJlIG9uIHRoZSB2aWV3J3MgZmlyc3QgZGF5LCBidXQgd2Ugb25seSBjYXJlIGFib3V0IGl0cyB0aW1lCgkJdmFyIG1pbnV0ZXM7CgkJdmFyIGF4aXNIdG1sOwoKCQkvLyBDYWxjdWxhdGUgdGhlIHRpbWUgZm9yIGVhY2ggc2xvdAoJCXdoaWxlIChzbG90VGltZSA8IHRoaXMubWF4VGltZSkgewoJCQlzbG90RGF0ZSA9IHRoaXMuc3RhcnQuY2xvbmUoKS50aW1lKHNsb3RUaW1lKTsgLy8gd2lsbCBiZSBpbiBVVEMgYnV0IHRoYXQncyBnb29kLiB0byBhdm9pZCBEU1QgaXNzdWVzCgkJCW1pbnV0ZXMgPSBzbG90RGF0ZS5taW51dGVzKCk7CgoJCQlheGlzSHRtbCA9CgkJCQknPHRkIGNsYXNzPSJmYy1heGlzIGZjLXRpbWUgJyArIHZpZXcud2lkZ2V0Q29udGVudENsYXNzICsgJyIgJyArIHZpZXcuYXhpc1N0eWxlQXR0cigpICsgJz4nICsKCQkJCQkoKCFzbG90Tm9ybWFsIHx8ICFtaW51dGVzKSA\/IC8vIGlmIGlycmVndWxhciBzbG90IGR1cmF0aW9uLCBvciBvbiB0aGUgaG91ciwgdGhlbiBkaXNwbGF5IHRoZSB0aW1lCgkJCQkJCSc8c3Bhbj4nICsgLy8gZm9yIG1hdGNoQ2VsbFdpZHRocwoJCQkJCQkJaHRtbEVzY2FwZShzbG90RGF0ZS5mb3JtYXQodGhpcy5heGlzRm9ybWF0KSkgKwoJCQkJCQknPC9zcGFuPicgOgoJCQkJCQknJwoJCQkJCQkpICsKCQkJCSc8L3RkPic7CgoJCQlodG1sICs9CgkJCQknPHRyICcgKyAoIW1pbnV0ZXMgPyAnJyA6ICdjbGFzcz0iZmMtbWlub3IiJykgKyAnPicgKwoJCQkJCSghaXNSVEwgPyBheGlzSHRtbCA6ICcnKSArCgkJCQkJJzx0ZCBjbGFzcz0iJyArIHZpZXcud2lkZ2V0Q29udGVudENsYXNzICsgJyIvPicgKwoJCQkJCShpc1JUTCA\\/CgkJCQkJCSc8ZGl2IGNsYXNzPSJmYy10aXRsZSI+JyArCgkJCQkJCQlodG1sRXNjYXBlKGV2ZW50LnRpdGxlKSArCgkJCQkJCSc8L2Rpdj4nIDoKCQkJCQkJJycKCQkJCQkJKSArCgkJCQknPC9kaXY+JyArCgkJCQknPGRpdiBjbGFzcz0iZmMtYmciLz4nICsKCQkJCShpc1Jlc2l6YWJsZSA\\\/CgkJaWYgKHRoaXMuaXNTZWxlY3RlZCAmJiB0aGlzLm9wdCgndW5zZWxlY3RBdXRvJykgJiYgaXNQcmltYXJ5TW91c2VCdXR0b24oZXYpKSB7CgoJCQkvLyBvbmx5IHVuc2VsZWN0IGlmIHRoZSBjbGlja2VkIGVsZW1lbnQgaXMgbm90IGlkZW50aWNhbCB0byBvciBpbnNpZGUgb2YgYW4gJ3Vuc2VsZWN0Q2FuY2VsJyBlbGVtZW50CgkJCWlnbm9yZSA9IHRoaXMub3B0KCd1bnNlbGVjdENhbmNlbCcpOwoJCQlpZiAoIWlnbm9yZSB8fCAhJChldi50YXJnZXQpLmNsb3Nlc3QoaWdub3JlKS5sZW5ndGgpIHsKCQkJCXRoaXMudW5zZWxlY3QoZXYpOwoJCQl9CgkJfQoJfSwKCgoJLyogRGF0ZSBVdGlscwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoJLy8gSW5pdGlhbGl6ZXMgaW50ZXJuYWwgdmFyaWFibGVzIHJlbGF0ZWQgdG8gY2FsY3VsYXRpbmcgaGlkZGVuIGRheXMtb2Ytd2VlawoJaW5pdEhpZGRlbkRheXM6IGZ1bmN0aW9uKCkgewoJCXZhciBoaWRkZW5EYXlzID0gdGhpcy5vcHQoJ2hpZGRlbkRheXMnKSB8fCBbXTsgLy8gYXJyYXkgb2YgZGF5LW9mLXdlZWsgaW5kaWNlcyB0aGF0IGFyZSBoaWRkZW4KCQl2YXIgaXNIaWRkZW5EYXlIYXNoID0gW107IC8vIGlzIHRoZSBkYXktb2Ytd2VlayBoaWRkZW4\/IChoYXNoIHdpdGggZGF5LW9mLXdlZWstaW5kZXggLT4gYm9vbCkKCQl2YXIgZGF5Q250ID0gMDsKCQl2YXIgaTsKCgkJaWYgKHRoaXMub3B0KCd3ZWVrZW5kcycpID09PSBmYWxzZSkgewoJCQloaWRkZW5EYXlzLnB1c2goMCwgNik7IC8vIDA9c3VuZGF5LCA2PXNhdHVyZGF5CgkJfQoKCQlmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7CgkJCWlmICgKCQkJCSEoaXNIaWRkZW5EYXlIYXNoW2ldID0gJC5pbkFycmF5KGksIGhpZGRlbkRheXMpICE9PSAtMSkKCQkJKSB7CgkJCQlkYXlDbnQrKzsKCQkJfQoJCX0KCgkJaWYgKCFkYXlDbnQpIHsKCQkJdGhyb3cgJ2ludmFsaWQgaGlkZGVuRGF5cyc7IC8vIGFsbCBkYXlzIHdlcmUgaGlkZGVuPyBiYWQuCgkJfQoKCQl0aGlzLmlzSGlkZGVuRGF5SGFzaCA9IGlzSGlkZGVuRGF5SGFzaDsKCX0sCgoKCS8vIElzIHRoZSBjdXJyZW50IGRheSBoaWRkZW4\/CgkvLyBgZGF5YCBpcyBhIGRheS1vZi13ZWVrIGluZGV4ICgwLTYpLCBvciBhIE1vbWVudAoJaXNIaWRkZW5EYXk6IGZ1bmN0aW9uKGRheSkgewoJCWlmIChtb21lbnQuaXNNb21lbnQoZGF5KSkgewoJCQlkYXkgPSBkYXkuZGF5KCk7CgkJfQoJCXJldHVybiB0aGlzLmlzSGlkZGVuRGF5SGFzaFtkYXldOwoJfSwKCgoJLy8gSW5jcmVtZW50aW5nIHRoZSBjdXJyZW50IGRheSB1bnRpbCBpdCBpcyBubyBsb25nZXIgYSBoaWRkZW4gZGF5LCByZXR1cm5pbmcgYSBjb3B5LgoJLy8gSWYgdGhlIGluaXRpYWwgdmFsdWUgb2YgYGRhdGVgIGlzIG5vdCBhIGhpZGRlbiBkYXksIGRvbid0IGRvIGFueXRoaW5nLgoJLy8gUGFzcyBgaXNFeGNsdXNpdmVgIGFzIGB0cnVlYCBpZiB5b3UgYXJlIGRlYWxpbmcgd2l0aCBhbiBlbmQgZGF0ZS4KCS8vIGBpbmNgIGRlZmF1bHRzIHRvIGAxYCAoaW5jcmVtZW50IG9uZSBkYXkgZm9yd2FyZCBlYWNoIHRpbWUpCglza2lwSGlkZGVuRGF5czogZnVuY3Rpb24oZGF0ZSwgaW5jLCBpc0V4Y2x1c2l2ZSkgewoJCXZhciBvdXQgPSBkYXRlLmNsb25lKCk7CgkJaW5jID0gaW5jIHx8IDE7CgkJd2hpbGUgKAoJCQl0aGlzLmlzSGlkZGVuRGF5SGFzaFsob3V0LmRheSgpICsgKGlzRXhjbHVzaXZlID8gaW5jIDogMCkgKyA3KSAlIDddCgkJKSB7CgkJCW91dC5hZGQoaW5jLCAnZGF5cycpOwoJCX0KCQlyZXR1cm4gb3V0OwoJfSwKCgoJLy8gUmV0dXJucyB0aGUgZGF0ZSByYW5nZSBvZiB0aGUgZnVsbCBkYXlzIHRoZSBnaXZlbiByYW5nZSB2aXN1YWxseSBhcHBlYXJzIHRvIG9jY3VweS4KCS8vIFJldHVybnMgYSBuZXcgcmFuZ2Ugb2JqZWN0LgoJY29tcHV0ZURheVJhbmdlOiBmdW5jdGlvbihyYW5nZSkgewoJCXZhciBzdGFydERheSA9IHJhbmdlLnN0YXJ0LmNsb25lKCkuc3RyaXBUaW1lKCk7IC8vIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGRheSB0aGUgcmFuZ2Ugc3RhcnRzCgkJdmFyIGVuZCA9IHJhbmdlLmVuZDsKCQl2YXIgZW5kRGF5ID0gbnVsbDsKCQl2YXIgZW5kVGltZU1TOwoKCQlpZiAoZW5kKSB7CgkJCWVuZERheSA9IGVuZC5jbG9uZSgpLnN0cmlwVGltZSgpOyAvLyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBkYXkgdGhlIHJhbmdlIGV4Y2x1c2l2ZWx5IGVuZHMKCQkJZW5kVGltZU1TID0gK2VuZC50aW1lKCk7IC8vICMgb2YgbWlsbGlzZWNvbmRzIGludG8gYGVuZERheWAKCgkJCS8vIElmIHRoZSBlbmQgdGltZSBpcyBhY3R1YWxseSBpbmNsdXNpdmVseSBwYXJ0IG9mIHRoZSBuZXh0IGRheSBhbmQgaXMgZXF1YWwgdG8gb3IKCQkJLy8gYmV5b25kIHRoZSBuZXh0IGRheSB0aHJlc2hvbGQsIGFkanVzdCB0aGUgZW5kIHRvIGJlIHRoZSBleGNsdXNpdmUgZW5kIG9mIGBlbmREYXlgLgoJCQkvLyBPdGhlcndpc2UsIGxlYXZpbmcgaXQgYXMgaW5jbHVzaXZlIHdpbGwgY2F1c2UgaXQgdG8gZXhjbHVkZSBgZW5kRGF5YC4KCQkJaWYgKGVuZFRpbWVNUyAmJiBlbmRUaW1lTVMgPj0gdGhpcy5uZXh0RGF5VGhyZXNob2xkKSB7CgkJCQllbmREYXkuYWRkKDEsICdkYXlzJyk7CgkJCX0KCQl9CgoJCS8vIElmIG5vIGVuZCB3YXMgc3BlY2lmaWVkLCBvciBpZiBpdCBpcyB3aXRoaW4gYHN0YXJ0RGF5YCBidXQgbm90IHBhc3QgbmV4dERheVRocmVzaG9sZCwKCQkvLyBhc3NpZ24gdGhlIGRlZmF1bHQgZHVyYXRpb24gb2Ygb25lIGRheS4KCQlpZiAoIWVuZCB8fCBlbmREYXkgPD0gc3RhcnREYXkpIHsKCQkJZW5kRGF5ID0gc3RhcnREYXkuY2xvbmUoKS5hZGQoMSwgJ2RheXMnKTsKCQl9CgoJCXJldHVybiB7IHN0YXJ0OiBzdGFydERheSwgZW5kOiBlbmREYXkgfTsKCX0sCgoKCS8vIERvZXMgdGhlIGdpdmVuIGV2ZW50IHZpc3VhbGx5IGFwcGVhciB0byBvY2N1cHkgbW9yZSB0aGFuIG9uZSBkYXk\/Cglpc011bHRpRGF5RXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7CgkJdmFyIHJhbmdlID0gdGhpcy5jb21wdXRlRGF5UmFuZ2UoZXZlbnQpOyAvLyBldmVudCBpcyByYW5nZS1pc2gKCgkJcmV0dXJuIHJhbmdlLmVuZC5kaWZmKHJhbmdlLnN0YXJ0LCAnZGF5cycpID4gMTsKCX0KCn0pOwoKOzsKCiAKZnVuY3Rpb24gQ2FsZW5kYXIoZWxlbWVudCwgaW5zdGFuY2VPcHRpb25zKSB7Cgl2YXIgdCA9IHRoaXM7CgoKCgkvLyBCdWlsZCBvcHRpb25zIG9iamVjdAoJLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vIFByZWNlZGVuY2UgKGxvd2VzdCB0byBoaWdoZXN0KTogZGVmYXVsdHMsIHJ0bERlZmF1bHRzLCBsYW5nT3B0aW9ucywgaW5zdGFuY2VPcHRpb25zCgoJaW5zdGFuY2VPcHRpb25zID0gaW5zdGFuY2VPcHRpb25zIHx8IHt9OwoKCXZhciBvcHRpb25zID0gbWVyZ2VPcHRpb25zKHt9LCBkZWZhdWx0cywgaW5zdGFuY2VPcHRpb25zKTsKCXZhciBsYW5nT3B0aW9uczsKCgkvLyBkZXRlcm1pbmUgbGFuZ3VhZ2Ugb3B0aW9ucwoJaWYgKG9wdGlvbnMubGFuZyBpbiBsYW5nT3B0aW9uSGFzaCkgewoJCWxhbmdPcHRpb25zID0gbGFuZ09wdGlvbkhhc2hbb3B0aW9ucy5sYW5nXTsKCX0KCWVsc2UgewoJCWxhbmdPcHRpb25zID0gbGFuZ09wdGlvbkhhc2hbZGVmYXVsdHMubGFuZ107Cgl9CgoJaWYgKGxhbmdPcHRpb25zKSB7IC8vIGlmIGxhbmd1YWdlIG9wdGlvbnMgZXhpc3QsIHJlYnVpbGQuLi4KCQlvcHRpb25zID0gbWVyZ2VPcHRpb25zKHt9LCBkZWZhdWx0cywgbGFuZ09wdGlvbnMsIGluc3RhbmNlT3B0aW9ucyk7Cgl9CgoJaWYgKG9wdGlvbnMuaXNSVEwpIHsgLy8gaXMgaXNSVEwsIHJlYnVpbGQuLi4KCQlvcHRpb25zID0gbWVyZ2VPcHRpb25zKHt9LCBkZWZhdWx0cywgcnRsRGVmYXVsdHMsIGxhbmdPcHRpb25zIHx8IHt9LCBpbnN0YW5jZU9wdGlvbnMpOwoJfQoKCgkKCS8vIEV4cG9ydHMKCS8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoJdC5vcHRpb25zID0gb3B0aW9uczsKCXQucmVuZGVyID0gcmVuZGVyOwoJdC5kZXN0cm95ID0gZGVzdHJveTsKCXQucmVmZXRjaEV2ZW50cyA9IHJlZmV0Y2hFdmVudHM7Cgl0LnJlcG9ydEV2ZW50cyA9IHJlcG9ydEV2ZW50czsKCXQucmVwb3J0RXZlbnRDaGFuZ2UgPSByZXBvcnRFdmVudENoYW5nZTsKCXQucmVyZW5kZXJFdmVudHMgPSByZW5kZXJFdmVudHM7IC8vIGByZW5kZXJFdmVudHNgIHNlcnZlcyBhcyBhIHJlcmVuZGVyLiBhbiBBUEkgbWV0aG9kCgl0LmNoYW5nZVZpZXcgPSByZW5kZXJWaWV3OyAvLyBgcmVuZGVyVmlld2Agd2lsbCBzd2l0Y2ggdG8gYW5vdGhlciB2aWV3Cgl0LnNlbGVjdCA9IHNlbGVjdDsKCXQudW5zZWxlY3QgPSB1bnNlbGVjdDsKCXQucHJldiA9IHByZXY7Cgl0Lm5leHQgPSBuZXh0OwoJdC5wcmV2WWVhciA9IHByZXZZZWFyOwoJdC5uZXh0WWVhciA9IG5leHRZZWFyOwoJdC50b2RheSA9IHRvZGF5OwoJdC5nb3RvRGF0ZSA9IGdvdG9EYXRlOwoJdC5pbmNyZW1lbnREYXRlID0gaW5jcmVtZW50RGF0ZTsKCXQuem9vbVRvID0gem9vbVRvOwoJdC5nZXREYXRlID0gZ2V0RGF0ZTsKCXQuZ2V0Q2FsZW5kYXIgPSBnZXRDYWxlbmRhcjsKCXQuZ2V0VmlldyA9IGdldFZpZXc7Cgl0Lm9wdGlvbiA9IG9wdGlvbjsKCXQudHJpZ2dlciA9IHRyaWdnZXI7Cgl0LmlzVmFsaWRWaWV3VHlwZSA9IGlzVmFsaWRWaWV3VHlwZTsKCXQuZ2V0Vmlld0J1dHRvblRleHQgPSBnZXRWaWV3QnV0dG9uVGV4dDsKCgoKCS8vIExhbmd1YWdlLWRhdGEgSW50ZXJuYWxzCgkvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJLy8gQXBwbHkgb3ZlcnJpZGVzIHRvIHRoZSBjdXJyZW50IGxhbmd1YWdlJ3MgZGF0YQoKCgl2YXIgbG9jYWxlRGF0YSA9IGNyZWF0ZU9iamVjdCggLy8gbWFrZSBhIGNoZWFwIGNvcHkKCQlnZXRNb21lbnRMb2NhbGVEYXRhKG9wdGlvbnMubGFuZykgLy8gd2lsbCBmYWxsIGJhY2sgdG8gZW4KCSk7CgoJaWYgKG9wdGlvbnMubW9udGhOYW1lcykgewoJCWxvY2FsZURhdGEuX21vbnRocyA9IG9wdGlvbnMubW9udGhOYW1lczsKCX0KCWlmIChvcHRpb25zLm1vbnRoTmFtZXNTaG9ydCkgewoJCWxvY2FsZURhdGEuX21vbnRoc1Nob3J0ID0gb3B0aW9ucy5tb250aE5hbWVzU2hvcnQ7Cgl9CglpZiAob3B0aW9ucy5kYXlOYW1lcykgewoJCWxvY2FsZURhdGEuX3dlZWtkYXlzID0gb3B0aW9ucy5kYXlOYW1lczsKCX0KCWlmIChvcHRpb25zLmRheU5hbWVzU2hvcnQpIHsKCQlsb2NhbGVEYXRhLl93ZWVrZGF5c1Nob3J0ID0gb3B0aW9ucy5kYXlOYW1lc1Nob3J0OwoJfQoJaWYgKG9wdGlvbnMuZmlyc3REYXkgIT0gbnVsbCkgewoJCXZhciBfd2VlayA9IGNyZWF0ZU9iamVjdChsb2NhbGVEYXRhLl93ZWVrKTsgLy8gX3dlZWs6IHsgZG93OiAjIH0KCQlfd2Vlay5kb3cgPSBvcHRpb25zLmZpcnN0RGF5OwoJCWxvY2FsZURhdGEuX3dlZWsgPSBfd2VlazsKCX0KCgoKCS8vIENhbGVuZGFyLXNwZWNpZmljIERhdGUgVXRpbGl0aWVzCgkvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCgl0LmRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uID0gbW9tZW50LmR1cmF0aW9uKG9wdGlvbnMuZGVmYXVsdEFsbERheUV2ZW50RHVyYXRpb24pOwoJdC5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uID0gbW9tZW50LmR1cmF0aW9uKG9wdGlvbnMuZGVmYXVsdFRpbWVkRXZlbnREdXJhdGlvbik7CgoKCS8vIEJ1aWxkcyBhIG1vbWVudCB1c2luZyB0aGUgc2V0dGluZ3Mgb2YgdGhlIGN1cnJlbnQgY2FsZW5kYXI6IHRpbWV6b25lIGFuZCBsYW5ndWFnZS4KCS8vIEFjY2VwdHMgYW55dGhpbmcgdGhlIHZhbmlsbGEgbW9tZW50KCkgY29uc3RydWN0b3IgYWNjZXB0cy4KCXQubW9tZW50ID0gZnVuY3Rpb24oKSB7CgkJdmFyIG1vbTsKCgkJaWYgKG9wdGlvbnMudGltZXpvbmUgPT09ICdsb2NhbCcpIHsKCQkJbW9tID0gZmMubW9tZW50LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CgoJCQkvLyBGb3JjZSB0aGUgbW9tZW50IHRvIGJlIGxvY2FsLCBiZWNhdXNlIGZjLm1vbWVudCBkb2Vzbid0IGd1YXJhbnRlZSBpdC4KCQkJaWYgKG1vbS5oYXNUaW1lKCkpIHsgLy8gZG9uJ3QgZ2l2ZSBhbWJpZ3VvdXNseS10aW1lZCBtb21lbnRzIGEgbG9jYWwgem9uZQoJCQkJbW9tLmxvY2FsKCk7CgkJCX0KCQl9CgkJZWxzZSBpZiAob3B0aW9ucy50aW1lem9uZSA9PT0gJ1VUQycpIHsKCQkJbW9tID0gZmMubW9tZW50LnV0Yy5hcHBseShudWxsLCBhcmd1bWVudHMpOyAvLyBwcm9jZXNzIGFzIFVUQwoJCX0KCQllbHNlIHsKCQkJbW9tID0gZmMubW9tZW50LnBhcnNlWm9uZS5hcHBseShudWxsLCBhcmd1bWVudHMpOyAvLyBsZXQgdGhlIGlucHV0IGRlY2lkZSB0aGUgem9uZQoJCX0KCgkJaWYgKCdfbG9jYWxlJyBpbiBtb20pIHsgLy8gbW9tZW50IDIuOCBhbmQgYWJvdmUKCQkJbW9tLl9sb2NhbGUgPSBsb2NhbGVEYXRhOwoJCX0KCQllbHNlIHsgLy8gcHJlLW1vbWVudC0yLjgKCQkJbW9tLl9sYW5nID0gbG9jYWxlRGF0YTsKCQl9CgoJCXJldHVybiBtb207Cgl9OwoKCgkvLyBSZXR1cm5zIGEgYm9vbGVhbiBhYm91dCB3aGV0aGVyIG9yIG5vdCB0aGUgY2FsZW5kYXIga25vd3MgaG93IHRvIGNhbGN1bGF0ZQoJLy8gdGhlIHRpbWV6b25lIG9mZnNldCBvZiBhcmJpdHJhcnkgZGF0ZXMgaW4gdGhlIGN1cnJlbnQgdGltZXpvbmUuCgl0LmdldElzQW1iaWdUaW1lem9uZSA9IGZ1bmN0aW9uKCkgewoJCXJldHVybiBvcHRpb25zLnRpbWV6b25lICE9PSAnbG9jYWwnICYmIG9wdGlvbnMudGltZXpvbmUgIT09ICdVVEMnOwoJfTsKCgoJLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIGdpdmVuIGRhdGUgaW4gdGhlIGN1cnJlbnQgdGltZXpvbmUgb2YgaXQgaXMgYW1iaWd1b3VzbHkgem9uZWQuCgkvLyBUaGlzIHdpbGwgYWxzbyBnaXZlIHRoZSBkYXRlIGFuIHVuYW1iaWd1b3VzIHRpbWUuCgl0LnJlem9uZURhdGUgPSBmdW5jdGlvbihkYXRlKSB7CgkJcmV0dXJuIHQubW9tZW50KGRhdGUudG9BcnJheSgpKTsKCX07CgoKCS8vIFJldHVybnMgYSBtb21lbnQgZm9yIHRoZSBjdXJyZW50IGRhdGUsIGFzIGRlZmluZWQgYnkgdGhlIGNsaWVudCdzIGNvbXB1dGVyLAoJLy8gb3Igb3ZlcnJpZGRlbiBieSB0aGUgYG5vd2Agb3B0aW9uLgoJdC5nZXROb3cgPSBmdW5jdGlvbigpIHsKCQl2YXIgbm93ID0gb3B0aW9ucy5ub3c7CgkJaWYgKHR5cGVvZiBub3cgPT09ICdmdW5jdGlvbicpIHsKCQkJbm93ID0gbm93KCk7CgkJfQoJCXJldHVybiB0Lm1vbWVudChub3cpOwoJfTsKCgoJLy8gQ2FsY3VsYXRlcyB0aGUgd2VlayBudW1iZXIgZm9yIGEgbW9tZW50IGFjY29yZGluZyB0byB0aGUgY2FsZW5kYXIncwoJLy8gYHdlZWtOdW1iZXJDYWxjdWxhdGlvbmAgc2V0dGluZy4KCXQuY2FsY3VsYXRlV2Vla051bWJlciA9IGZ1bmN0aW9uKG1vbSkgewoJCXZhciBjYWxjID0gb3B0aW9ucy53ZWVrTnVtYmVyQ2FsY3VsYXRpb247CgoJCWlmICh0eXBlb2YgY2FsYyA9PT0gJ2Z1bmN0aW9uJykgewoJCQlyZXR1cm4gY2FsYyhtb20pOwoJCX0KCQllbHNlIGlmIChjYWxjID09PSAnbG9jYWwnKSB7CgkJCXJldHVybiBtb20ud2VlaygpOwoJCX0KCQllbHNlIGlmIChjYWxjLnRvVXBwZXJDYXNlKCkgPT09ICdJU08nKSB7CgkJCXJldHVybiBtb20uaXNvV2VlaygpOwoJCX0KCX07CgoKCS8vIEdldCBhbiBldmVudCdzIG5vcm1hbGl6ZWQgZW5kIGRhdGUuIElmIG5vdCBwcmVzZW50LCBjYWxjdWxhdGUgaXQgZnJvbSB0aGUgZGVmYXVsdHMuCgl0LmdldEV2ZW50RW5kID0gZnVuY3Rpb24oZXZlbnQpIHsKCQlpZiAoZXZlbnQuZW5kKSB7CgkJCXJldHVybiBldmVudC5lbmQuY2xvbmUoKTsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiB0LmdldERlZmF1bHRFdmVudEVuZChldmVudC5hbGxEYXksIGV2ZW50LnN0YXJ0KTsKCQl9Cgl9OwoKCgkvLyBHaXZlbiBhbiBldmVudCdzIGFsbERheSBzdGF0dXMgYW5kIHN0YXJ0IGRhdGUsIHJldHVybiBzd2hhdCBpdHMgZmFsbGJhY2sgZW5kIGRhdGUgc2hvdWxkIGJlLgoJdC5nZXREZWZhdWx0RXZlbnRFbmQgPSBmdW5jdGlvbihhbGxEYXksIHN0YXJ0KSB7IC8vIFRPRE86IHJlbmFtZSB0byBjb21wdXRlRGVmYXVsdEV2ZW50RW5kCgkJdmFyIGVuZCA9IHN0YXJ0LmNsb25lKCk7CgoJCWlmIChhbGxEYXkpIHsKCQkJZW5kLnN0cmlwVGltZSgpLmFkZCh0LmRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uKTsKCQl9CgkJZWxzZSB7CgkJCWVuZC5hZGQodC5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uKTsKCQl9CgoJCWlmICh0LmdldElzQW1iaWdUaW1lem9uZSgpKSB7CgkJCWVuZC5zdHJpcFpvbmUoKTsgLy8gd2UgZG9uJ3Qga25vdyB3aGF0IHRoZSB0em8gc2hvdWxkIGJlCgkJfQoKCQlyZXR1cm4gZW5kOwoJfTsKCgoJLy8gUHJvZHVjZXMgYSBodW1hbi1yZWFkYWJsZSBzdHJpbmcgZm9yIHRoZSBnaXZlbiBkdXJhdGlvbi4KCS8vIFNpZGUtZWZmZWN0OiBjaGFuZ2VzIHRoZSBsb2NhbGUgb2YgdGhlIGdpdmVuIGR1cmF0aW9uLgoJZnVuY3Rpb24gaHVtYW5pemVEdXJhdGlvbihkdXJhdGlvbikgewoJCXJldHVybiAoZHVyYXRpb24ubG9jYWxlIHx8IGR1cmF0aW9uLmxhbmcpLmNhbGwoZHVyYXRpb24sIG9wdGlvbnMubGFuZykgLy8gd29ya3MgbW9tZW50LXByZS0yLjgKCQkJLmh1bWFuaXplKCk7Cgl9CgoKCQoJLy8gSW1wb3J0cwoJLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoJRXZlbnRNYW5hZ2VyLmNhbGwodCwgb3B0aW9ucyk7Cgl2YXIgaXNGZXRjaE5lZWRlZCA9IHQuaXNGZXRjaE5lZWRlZDsKCXZhciBmZXRjaEV2ZW50cyA9IHQuZmV0Y2hFdmVudHM7CgoKCgkvLyBMb2NhbHMKCS8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCXZhciBfZWxlbWVudCA9IGVsZW1lbnRbMF07Cgl2YXIgaGVhZGVyOwoJdmFyIGhlYWRlckVsZW1lbnQ7Cgl2YXIgY29udGVudDsKCXZhciB0bTsgLy8gZm9yIG1ha2luZyB0aGVtZSBjbGFzc2VzCgl2YXIgdmlld1NwZWNDYWNoZSA9IHt9OwoJdmFyIGN1cnJlbnRWaWV3OwoJdmFyIHN1Z2dlc3RlZFZpZXdIZWlnaHQ7Cgl2YXIgd2luZG93UmVzaXplUHJveHk7IC8vIHdyYXBzIHRoZSB3aW5kb3dSZXNpemUgZnVuY3Rpb24KCXZhciBpZ25vcmVXaW5kb3dSZXNpemUgPSAwOwoJdmFyIGRhdGU7Cgl2YXIgZXZlbnRzID0gW107CgkKCQoJCgkvLyBNYWluIFJlbmRlcmluZwoJLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoJaWYgKG9wdGlvbnMuZGVmYXVsdERhdGUgIT0gbnVsbCkgewoJCWRhdGUgPSB0Lm1vbWVudChvcHRpb25zLmRlZmF1bHREYXRlKTsKCX0KCWVsc2UgewoJCWRhdGUgPSB0LmdldE5vdygpOwoJfQoJCgkKCWZ1bmN0aW9uIHJlbmRlcihpbmMpIHsKCQlpZiAoIWNvbnRlbnQpIHsKCQkJaW5pdGlhbFJlbmRlcigpOwoJCX0KCQllbHNlIGlmIChlbGVtZW50VmlzaWJsZSgpKSB7CgkJCS8vIG1haW5seSBmb3IgdGhlIHB1YmxpYyBBUEkKCQkJY2FsY1NpemUoKTsKCQkJcmVuZGVyVmlldyhpbmMpOwoJCX0KCX0KCQoJCglmdW5jdGlvbiBpbml0aWFsUmVuZGVyKCkgewoJCXRtID0gb3B0aW9ucy50aGVtZSA\/ICd1aScgOiAnZmMnOwoJCWVsZW1lbnQuYWRkQ2xhc3MoJ2ZjJyk7CgoJCWlmIChvcHRpb25zLmlzUlRMKSB7CgkJCWVsZW1lbnQuYWRkQ2xhc3MoJ2ZjLXJ0bCcpOwoJCX0KCQllbHNlIHsKCQkJZWxlbWVudC5hZGRDbGFzcygnZmMtbHRyJyk7CgkJfQoKCQlpZiAob3B0aW9ucy50aGVtZSkgewoJCQllbGVtZW50LmFkZENsYXNzKCd1aS13aWRnZXQnKTsKCQl9CgkJZWxzZSB7CgkJCWVsZW1lbnQuYWRkQ2xhc3MoJ2ZjLXVudGhlbWVkJyk7CgkJfQoKCQljb250ZW50ID0gJCgiPGRpdiBjbGFzcz0nZmMtdmlldy1jb250YWluZXInLz4iKS5wcmVwZW5kVG8oZWxlbWVudCk7CgoJCWhlYWRlciA9IG5ldyBIZWFkZXIodCwgb3B0aW9ucyk7CgkJaGVhZGVyRWxlbWVudCA9IGhlYWRlci5yZW5kZXIoKTsKCQlpZiAoaGVhZGVyRWxlbWVudCkgewoJCQllbGVtZW50LnByZXBlbmQoaGVhZGVyRWxlbWVudCk7CgkJfQoKCQlyZW5kZXJWaWV3KG9wdGlvbnMuZGVmYXVsdFZpZXcpOwoKCQlpZiAob3B0aW9ucy5oYW5kbGVXaW5kb3dSZXNpemUpIHsKCQkJd2luZG93UmVzaXplUHJveHkgPSBkZWJvdW5jZSh3aW5kb3dSZXNpemUsIG9wdGlvbnMud2luZG93UmVzaXplRGVsYXkpOyAvLyBwcmV2ZW50cyByYXBpZCBjYWxscwoJCQkkKHdpbmRvdykucmVzaXplKHdpbmRvd1Jlc2l6ZVByb3h5KTsKCQl9Cgl9CgkKCQoJZnVuY3Rpb24gZGVzdHJveSgpIHsKCgkJaWYgKGN1cnJlbnRWaWV3KSB7CgkJCWN1cnJlbnRWaWV3LmRlc3Ryb3lWaWV3KCk7CgkJfQoKCQloZWFkZXIuZGVzdHJveSgpOwoJCWNvbnRlbnQucmVtb3ZlKCk7CgkJZWxlbWVudC5yZW1vdmVDbGFzcygnZmMgZmMtbHRyIGZjLXJ0bCBmYy11bnRoZW1lZCB1aS13aWRnZXQnKTsKCgkJJCh3aW5kb3cpLnVuYmluZCgncmVzaXplJywgd2luZG93UmVzaXplUHJveHkpOwoJfQoJCgkKCWZ1bmN0aW9uIGVsZW1lbnRWaXNpYmxlKCkgewoJCXJldHVybiBlbGVtZW50LmlzKCc6dmlzaWJsZScpOwoJfQoJCgkKCgkvLyBWaWV3IFJlbmRlcmluZwoJLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoJLy8gUmVuZGVycyBhIHZpZXcgYmVjYXVzZSBvZiBhIGRhdGUgY2hhbmdlLCB2aWV3LXR5cGUgY2hhbmdlLCBvciBmb3IgdGhlIGZpcnN0IHRpbWUKCWZ1bmN0aW9uIHJlbmRlclZpZXcodmlld1R5cGUpIHsKCQlpZ25vcmVXaW5kb3dSZXNpemUrKzsKCgkJLy8gaWYgdmlld1R5cGUgaXMgY2hhbmdpbmcsIGRlc3Ryb3kgdGhlIG9sZCB2aWV3CgkJaWYgKGN1cnJlbnRWaWV3ICYmIHZpZXdUeXBlICYmIGN1cnJlbnRWaWV3LnR5cGUgIT09IHZpZXdUeXBlKSB7CgkJCWhlYWRlci5kZWFjdGl2YXRlQnV0dG9uKGN1cnJlbnRWaWV3LnR5cGUpOwoJCQlmcmVlemVDb250ZW50SGVpZ2h0KCk7IC8vIHByZXZlbnQgYSBzY3JvbGwganVtcCB3aGVuIHZpZXcgZWxlbWVudCBpcyByZW1vdmVkCgkJCWlmIChjdXJyZW50Vmlldy5zdGFydCkgeyAvLyByZW5kZXJlZCBiZWZvcmU\/CgkJCQljdXJyZW50Vmlldy5kZXN0cm95VmlldygpOwoJCQl9CgkJCWN1cnJlbnRWaWV3LmVsLnJlbW92ZSgpOwoJCQljdXJyZW50VmlldyA9IG51bGw7CgkJfQoKCQkvLyBpZiB2aWV3VHlwZSBjaGFuZ2VkLCBvciB0aGUgdmlldyB3YXMgbmV2ZXIgY3JlYXRlZCwgY3JlYXRlIGEgZnJlc2ggdmlldwoJCWlmICghY3VycmVudFZpZXcgJiYgdmlld1R5cGUpIHsKCQkJY3VycmVudFZpZXcgPSBpbnN0YW50aWF0ZVZpZXcodmlld1R5cGUpOwoJCQljdXJyZW50Vmlldy5lbCA9ICAkKCI8ZGl2IGNsYXNzPSdmYy12aWV3IGZjLSIgKyB2aWV3VHlwZSArICItdmlldycgLz4iKS5hcHBlbmRUbyhjb250ZW50KTsKCQkJaGVhZGVyLmFjdGl2YXRlQnV0dG9uKHZpZXdUeXBlKTsKCQl9CgoJCWlmIChjdXJyZW50VmlldykgewoKCQkJLy8gaW4gY2FzZSB0aGUgdmlldyBzaG91bGQgcmVuZGVyIGEgcGVyaW9kIG9mIHRpbWUgdGhhdCBpcyBjb21wbGV0ZWx5IGhpZGRlbgoJCQlkYXRlID0gY3VycmVudFZpZXcubWFzc2FnZUN1cnJlbnREYXRlKGRhdGUpOwoKCQkJLy8gcmVuZGVyIG9yIHJlcmVuZGVyIHRoZSB2aWV3CgkJCWlmICgKCQkJCSFjdXJyZW50Vmlldy5zdGFydCB8fCAvLyBuZXZlciByZW5kZXJlZCBiZWZvcmUKCQkJCSFkYXRlLmlzV2l0aGluKGN1cnJlbnRWaWV3LmludGVydmFsU3RhcnQsIGN1cnJlbnRWaWV3LmludGVydmFsRW5kKSAvLyBpbXBsaWNpdCBkYXRlIHdpbmRvdyBjaGFuZ2UKCQkJKSB7CgkJCQlpZiAoZWxlbWVudFZpc2libGUoKSkgewoKCQkJCQlmcmVlemVDb250ZW50SGVpZ2h0KCk7CgkJCQkJaWYgKGN1cnJlbnRWaWV3LnN0YXJ0KSB7IC8vIHJlbmRlcmVkIGJlZm9yZT8KCQkJCQkJY3VycmVudFZpZXcuZGVzdHJveVZpZXcoKTsKCQkJCQl9CgkJCQkJY3VycmVudFZpZXcuc2V0RGF0ZShkYXRlKTsKCQkJCQljdXJyZW50Vmlldy5yZW5kZXJWaWV3KCk7CgkJCQkJdW5mcmVlemVDb250ZW50SGVpZ2h0KCk7CgoJCQkJCS8vIG5lZWQgdG8gZG8gdGhpcyBhZnRlciBWaWV3OjpyZW5kZXIsIHNvIGRhdGVzIGFyZSBjYWxjdWxhdGVkCgkJCQkJdXBkYXRlVGl0bGUoKTsKCQkJCQl1cGRhdGVUb2RheUJ1dHRvbigpOwoKCQkJCQlnZXRBbmRSZW5kZXJFdmVudHMoKTsKCQkJCX0KCQkJfQoJCX0KCgkJdW5mcmVlemVDb250ZW50SGVpZ2h0KCk7IC8vIHVuZG8gYW55IGxvbmUgZnJlZXplQ29udGVudEhlaWdodCBjYWxscwoJCWlnbm9yZVdpbmRvd1Jlc2l6ZS0tOwoJfQoKCgoJLy8gVmlldyBJbnN0YW50aWF0aW9uCgkvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCgkvLyBHaXZlbiBhIHZpZXcgbmFtZSBmb3IgYSBjdXN0b20gdmlldyBvciBhIHN0YW5kYXJkIHZpZXcsIGNyZWF0ZXMgYSByZWFkeS10by1nbyBWaWV3IG9iamVjdAoJZnVuY3Rpb24gaW5zdGFudGlhdGVWaWV3KHZpZXdUeXBlKSB7CgkJdmFyIHNwZWMgPSBnZXRWaWV3U3BlYyh2aWV3VHlwZSk7CgoJCXJldHVybiBuZXcgc3BlY1snY2xhc3MnXSh0LCBzcGVjLm9wdGlvbnMsIHZpZXdUeXBlKTsKCX0KCgoJLy8gR2V0cyBpbmZvcm1hdGlvbiBhYm91dCBob3cgdG8gY3JlYXRlIGEgdmlldwoJZnVuY3Rpb24gZ2V0Vmlld1NwZWMocmVxdWVzdGVkVmlld1R5cGUpIHsKCQl2YXIgYWxsRGVmYXVsdEJ1dHRvblRleHQgPSBvcHRpb25zLmRlZmF1bHRCdXR0b25UZXh0IHx8IHt9OwoJCXZhciBhbGxCdXR0b25UZXh0ID0gb3B0aW9ucy5idXR0b25UZXh0IHx8IHt9OwoJCXZhciBoYXNoID0gb3B0aW9ucy52aWV3cyB8fCB7fTsgLy8gdGhlIGB2aWV3c2Agb3B0aW9uIG9iamVjdAoJCXZhciB2aWV3VHlwZSA9IHJlcXVlc3RlZFZpZXdUeXBlOwoJCXZhciB2aWV3T3B0aW9uc0NoYWluID0gW107CgkJdmFyIHZpZXdPcHRpb25zOwoJCXZhciB2aWV3Q2xhc3M7CgkJdmFyIGR1cmF0aW9uLCB1bml0LCB1bml0SXNTaW5nbGUgPSBmYWxzZTsKCQl2YXIgYnV0dG9uVGV4dDsKCgkJaWYgKHZpZXdTcGVjQ2FjaGVbcmVxdWVzdGVkVmlld1R5cGVdKSB7CgkJCXJldHVybiB2aWV3U3BlY0NhY2hlW3JlcXVlc3RlZFZpZXdUeXBlXTsKCQl9CgoJCWZ1bmN0aW9uIHByb2Nlc3NTcGVjSW5wdXQoaW5wdXQpIHsKCQkJaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJykgewoJCQkJdmlld0NsYXNzID0gaW5wdXQ7CgkJCX0KCQkJZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JykgewoJCQkJJC5leHRlbmQodmlld09wdGlvbnMsIGlucHV0KTsKCQkJfQoJCX0KCgkJLy8gaXRlcmF0ZSB1cCBhIHZpZXcncyBzcGVjIGFuY2VzdG9yIGNoYWluIHV0aWwgd2UgZmluZCBhIGNsYXNzIHRvIGluc3RhbnRpYXRlCgkJd2hpbGUgKHZpZXdUeXBlICYmICF2aWV3Q2xhc3MpIHsKCQkJdmlld09wdGlvbnMgPSB7fTsgLy8gb25seSBmb3IgdGhpcyBzcGVjaWZpYyB2aWV3IGluIHRoZSBhbmNlc3RyeQoJCQlwcm9jZXNzU3BlY0lucHV0KGZjVmlld3Nbdmlld1R5cGVdKTsgLy8gJC5mdWxsQ2FsZW5kYXIudmlld3MsIGxvd2VyIHByZWNlZGVuY2UKCQkJcHJvY2Vzc1NwZWNJbnB1dChoYXNoW3ZpZXdUeXBlXSk7IC8vIG9wdGlvbnMgYXQgaW5pdGlhbGl6YXRpb24sIGhpZ2hlciBwcmVjZWRlbmNlCgkJCXZpZXdPcHRpb25zQ2hhaW4udW5zaGlmdCh2aWV3T3B0aW9ucyk7IC8vIHJlY29yZCBvbGRlciBhbmNlc3RvcnMgZmlyc3QKCQkJdmlld1R5cGUgPSB2aWV3T3B0aW9ucy50eXBlOwoJCX0KCgkJdmlld09wdGlvbnNDaGFpbi51bnNoaWZ0KHt9KTsgLy8galF1ZXJ5J3MgZXh0ZW5kIG5lZWRzIGF0IGxlYXN0IG9uZSBhcmcKCQl2aWV3T3B0aW9ucyA9ICQuZXh0ZW5kLmFwcGx5KCQsIHZpZXdPcHRpb25zQ2hhaW4pOyAvLyBjb21iaW5lIGFsbCwgbmV3ZXIgYW5jZXN0b3JzIG92ZXJ3cml0dGluZyBvbGQKCgkJaWYgKHZpZXdDbGFzcykgewoKCQkJZHVyYXRpb24gPSB2aWV3T3B0aW9ucy5kdXJhdGlvbiB8fCB2aWV3Q2xhc3MuZHVyYXRpb247CgkJCWlmIChkdXJhdGlvbikgewoJCQkJZHVyYXRpb24gPSBtb21lbnQuZHVyYXRpb24oZHVyYXRpb24pOwoJCQkJdW5pdCA9IGNvbXB1dGVJbnRlcnZhbFVuaXQoZHVyYXRpb24pOwoJCQkJdW5pdElzU2luZ2xlID0gY29tcHV0ZUludGVydmFsQXModW5pdCwgZHVyYXRpb24pID09PSAxOwoJCQl9CgoJCQkvLyBvcHRpb25zIHRoYXQgYXJlIHNwZWNpZmllZCBwZXIgdGhlIHZpZXcncyBkdXJhdGlvbiwgbGlrZSAid2VlayIgb3IgImRheSIKCQkJaWYgKHVuaXRJc1NpbmdsZSAmJiBoYXNoW3VuaXRdKSB7CgkJCQl2aWV3T3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBoYXNoW3VuaXRdLCB2aWV3T3B0aW9ucyk7IC8vIGxvd2VzdCBwcmlvcml0eQoJCQl9CgoJCQkvLyBjb21wdXRlIHRoZSBmaW5hbCB0ZXh0IGZvciB0aGUgYnV0dG9uIHJlcHJlc2VudGluZyB0aGlzIHZpZXcKCQkJYnV0dG9uVGV4dCA9CgkJCQlhbGxCdXR0b25UZXh0W3JlcXVlc3RlZFZpZXdUeXBlXSB8fCAvLyBpbml0IG9wdGlvbnMsIGxpa2UgImFnZW5kYVdlZWsiCgkJCQkodW5pdElzU2luZ2xlID8gYWxsQnV0dG9uVGV4dFt1bml0XSA6IG51bGwpIHx8IC8vIGluaXQgb3B0aW9ucywgbGlrZSAid2VlayIKCQkJCWFsbERlZmF1bHRCdXR0b25UZXh0W3JlcXVlc3RlZFZpZXdUeXBlXSB8fCAvLyBsYW5nIGRhdGEsIGxpa2UgImFnZW5kYVdlZWsiCgkJCQkodW5pdElzU2luZ2xlID8gYWxsRGVmYXVsdEJ1dHRvblRleHRbdW5pdF0gOiBudWxsKSB8fCAvLyBsYW5nIGRhdGEsIGxpa2UgIndlZWsiCgkJCQl2aWV3T3B0aW9ucy5idXR0b25UZXh0IHx8CgkJCQl2aWV3Q2xhc3MuYnV0dG9uVGV4dCB8fAoJCQkJKGR1cmF0aW9uID8gaHVtYW5pemVEdXJhdGlvbihkdXJhdGlvbikgOiBudWxsKSB8fAoJCQkJcmVxdWVzdGVkVmlld1R5cGU7CgoJCQlyZXR1cm4gKHZpZXdTcGVjQ2FjaGVbcmVxdWVzdGVkVmlld1R5cGVdID0gewoJCQkJJ2NsYXNzJzogdmlld0NsYXNzLAoJCQkJb3B0aW9uczogdmlld09wdGlvbnMsCgkJCQlidXR0b25UZXh0OiBidXR0b25UZXh0CgkJCX0pOwoJCX0KCX0KCgoJLy8gUmV0dXJucyBhIGJvb2xlYW4gYWJvdXQgd2hldGhlciB0aGUgdmlldyBpcyBva2F5IHRvIGluc3RhbnRpYXRlIGF0IHNvbWUgcG9pbnQKCWZ1bmN0aW9uIGlzVmFsaWRWaWV3VHlwZSh2aWV3VHlwZSkgewoJCXJldHVybiBCb29sZWFuKGdldFZpZXdTcGVjKHZpZXdUeXBlKSk7Cgl9CgoKCS8vIEdldHMgdGhlIHRleHQgdGhhdCBzaG91bGQgYmUgZGlzcGxheWVkIG9uIGEgdmlldydzIGJ1dHRvbiBpbiB0aGUgaGVhZGVyCglmdW5jdGlvbiBnZXRWaWV3QnV0dG9uVGV4dCh2aWV3VHlwZSkgewoJCXZhciBzcGVjID0gZ2V0Vmlld1NwZWModmlld1R5cGUpOwoKCQlpZiAoc3BlYykgewoJCQlyZXR1cm4gc3BlYy5idXR0b25UZXh0OwoJCX0KCX0KCQoJCgoJLy8gUmVzaXppbmcKCS8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCXQuZ2V0U3VnZ2VzdGVkVmlld0hlaWdodCA9IGZ1bmN0aW9uKCkgewoJCWlmIChzdWdnZXN0ZWRWaWV3SGVpZ2h0ID09PSB1bmRlZmluZWQpIHsKCQkJY2FsY1NpemUoKTsKCQl9CgkJcmV0dXJuIHN1Z2dlc3RlZFZpZXdIZWlnaHQ7Cgl9OwoKCgl0LmlzSGVpZ2h0QXV0byA9IGZ1bmN0aW9uKCkgewoJCXJldHVybiBvcHRpb25zLmNvbnRlbnRIZWlnaHQgPT09ICdhdXRvJyB8fCBvcHRpb25zLmhlaWdodCA9PT0gJ2F1dG8nOwoJfTsKCQoJCglmdW5jdGlvbiB1cGRhdGVTaXplKHNob3VsZFJlY2FsYykgewoJCWlmIChlbGVtZW50VmlzaWJsZSgpKSB7CgoJCQlpZiAoc2hvdWxkUmVjYWxjKSB7CgkJCQlfY2FsY1NpemUoKTsKCQkJfQoKCQkJaWdub3JlV2luZG93UmVzaXplKys7CgkJCWN1cnJlbnRWaWV3LnVwZGF0ZVNpemUodHJ1ZSk7IC8vIGlzUmVzaXplPXRydWUuIHdpbGwgcG9sbCBnZXRTdWdnZXN0ZWRWaWV3SGVpZ2h0KCkgYW5kIGlzSGVpZ2h0QXV0bygpCgkJCWlnbm9yZVdpbmRvd1Jlc2l6ZS0tOwoKCQkJcmV0dXJuIHRydWU7IC8vIHNpZ25hbCBzdWNjZXNzCgkJfQoJfQoKCglmdW5jdGlvbiBjYWxjU2l6ZSgpIHsKCQlpZiAoZWxlbWVudFZpc2libGUoKSkgewoJCQlfY2FsY1NpemUoKTsKCQl9Cgl9CgkKCQoJZnVuY3Rpb24gX2NhbGNTaXplKCkgeyAvLyBhc3N1bWVzIGVsZW1lbnRWaXNpYmxlCgkJaWYgKHR5cGVvZiBvcHRpb25zLmNvbnRlbnRIZWlnaHQgPT09ICdudW1iZXInKSB7IC8vIGV4aXN0cyBhbmQgbm90ICdhdXRvJwoJCQlzdWdnZXN0ZWRWaWV3SGVpZ2h0ID0gb3B0aW9ucy5jb250ZW50SGVpZ2h0OwoJCX0KCQllbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWlnaHQgPT09ICdudW1iZXInKSB7IC8vIGV4aXN0cyBhbmQgbm90ICdhdXRvJwoJCQlzdWdnZXN0ZWRWaWV3SGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgLSAoaGVhZGVyRWxlbWVudCA\/IGhlYWRlckVsZW1lbnQub3V0ZXJIZWlnaHQodHJ1ZSkgOiAwKTsKCQl9CgkJZWxzZSB7CgkJCXN1Z2dlc3RlZFZpZXdIZWlnaHQgPSBNYXRoLnJvdW5kKGNvbnRlbnQud2lkdGgoKSAvIE1hdGgubWF4KG9wdGlvbnMuYXNwZWN0UmF0aW8sIC41KSk7CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIHdpbmRvd1Jlc2l6ZShldikgewoJCWlmICgKCQkJIWlnbm9yZVdpbmRvd1Jlc2l6ZSAmJgoJCQlldi50YXJnZXQgPT09IHdpbmRvdyAmJiAvLyBzbyB3ZSBkb24ndCBwcm9jZXNzIGpxdWkgInJlc2l6ZSIgZXZlbnRzIHRoYXQgaGF2ZSBidWJibGVkIHVwCgkJCWN1cnJlbnRWaWV3LnN0YXJ0IC8vIHZpZXcgaGFzIGFscmVhZHkgYmVlbiByZW5kZXJlZAoJCSkgewoJCQlpZiAodXBkYXRlU2l6ZSh0cnVlKSkgewoJCQkJY3VycmVudFZpZXcudHJpZ2dlcignd2luZG93UmVzaXplJywgX2VsZW1lbnQpOwoJCQl9CgkJfQoJfQoJCgkKCQoJLyogRXZlbnQgRmV0Y2hpbmcvUmVuZGVyaW5nCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkvLyBUT0RPOiBnb2luZyBmb3J3YXJkLCBtb3N0IG9mIHRoaXMgc3R1ZmYgc2hvdWxkIGJlIGRpcmVjdGx5IGhhbmRsZWQgYnkgdGhlIHZpZXcKCgoJZnVuY3Rpb24gcmVmZXRjaEV2ZW50cygpIHsgLy8gY2FuIGJlIGNhbGxlZCBhcyBhbiBBUEkgbWV0aG9kCgkJZGVzdHJveUV2ZW50cygpOyAvLyBzbyB0aGF0IGV2ZW50cyBhcmUgY2xlYXJlZCBiZWZvcmUgdXNlciBzdGFydHMgd2FpdGluZyBmb3IgQUpBWAoJCWZldGNoQW5kUmVuZGVyRXZlbnRzKCk7Cgl9CgoKCWZ1bmN0aW9uIHJlbmRlckV2ZW50cygpIHsgLy8gZGVzdHJveXMgb2xkIGV2ZW50cyBpZiBwcmV2aW91c2x5IHJlbmRlcmVkCgkJaWYgKGVsZW1lbnRWaXNpYmxlKCkpIHsKCQkJZnJlZXplQ29udGVudEhlaWdodCgpOwoJCQljdXJyZW50Vmlldy5kZXN0cm95Vmlld0V2ZW50cygpOyAvLyBubyBwZXJmb3JtYW5jZSBjb3N0IGlmIG5ldmVyIHJlbmRlcmVkCgkJCWN1cnJlbnRWaWV3LnJlbmRlclZpZXdFdmVudHMoZXZlbnRzKTsKCQkJdW5mcmVlemVDb250ZW50SGVpZ2h0KCk7CgkJfQoJfQoKCglmdW5jdGlvbiBkZXN0cm95RXZlbnRzKCkgewoJCWZyZWV6ZUNvbnRlbnRIZWlnaHQoKTsKCQljdXJyZW50Vmlldy5kZXN0cm95Vmlld0V2ZW50cygpOwoJCXVuZnJlZXplQ29udGVudEhlaWdodCgpOwoJfQoJCgoJZnVuY3Rpb24gZ2V0QW5kUmVuZGVyRXZlbnRzKCkgewoJCWlmICghb3B0aW9ucy5sYXp5RmV0Y2hpbmcgfHwgaXNGZXRjaE5lZWRlZChjdXJyZW50Vmlldy5zdGFydCwgY3VycmVudFZpZXcuZW5kKSkgewoJCQlmZXRjaEFuZFJlbmRlckV2ZW50cygpOwoJCX0KCQllbHNlIHsKCQkJcmVuZGVyRXZlbnRzKCk7CgkJfQoJfQoKCglmdW5jdGlvbiBmZXRjaEFuZFJlbmRlckV2ZW50cygpIHsKCQlmZXRjaEV2ZW50cyhjdXJyZW50Vmlldy5zdGFydCwgY3VycmVudFZpZXcuZW5kKTsKCQkJLy8gLi4uIHdpbGwgY2FsbCByZXBvcnRFdmVudHMKCQkJLy8gLi4uIHdoaWNoIHdpbGwgY2FsbCByZW5kZXJFdmVudHMKCX0KCgkKCS8vIGNhbGxlZCB3aGVuIGV2ZW50IGRhdGEgYXJyaXZlcwoJZnVuY3Rpb24gcmVwb3J0RXZlbnRzKF9ldmVudHMpIHsKCQlldmVudHMgPSBfZXZlbnRzOwoJCXJlbmRlckV2ZW50cygpOwoJfQoKCgkvLyBjYWxsZWQgd2hlbiBhIHNpbmdsZSBldmVudCdzIGRhdGEgaGFzIGJlZW4gY2hhbmdlZAoJZnVuY3Rpb24gcmVwb3J0RXZlbnRDaGFuZ2UoKSB7CgkJcmVuZGVyRXZlbnRzKCk7Cgl9CgoKCgkvKiBIZWFkZXIgVXBkYXRpbmcKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoJZnVuY3Rpb24gdXBkYXRlVGl0bGUoKSB7CgkJY3VycmVudFZpZXcudXBkYXRlVGl0bGUoKTsKCQloZWFkZXIudXBkYXRlVGl0bGUoY3VycmVudFZpZXcudGl0bGUpOwoJfQoKCglmdW5jdGlvbiB1cGRhdGVUb2RheUJ1dHRvbigpIHsKCQl2YXIgbm93ID0gdC5nZXROb3coKTsKCQlpZiAobm93LmlzV2l0aGluKGN1cnJlbnRWaWV3LmludGVydmFsU3RhcnQsIGN1cnJlbnRWaWV3LmludGVydmFsRW5kKSkgewoJCQloZWFkZXIuZGlzYWJsZUJ1dHRvbigndG9kYXknKTsKCQl9CgkJZWxzZSB7CgkJCWhlYWRlci5lbmFibGVCdXR0b24oJ3RvZGF5Jyk7CgkJfQoJfQoJCgoKCS8qIFNlbGVjdGlvbgoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgoJZnVuY3Rpb24gc2VsZWN0KHN0YXJ0LCBlbmQpIHsKCgkJc3RhcnQgPSB0Lm1vbWVudChzdGFydCk7CgkJaWYgKGVuZCkgewoJCQllbmQgPSB0Lm1vbWVudChlbmQpOwoJCX0KCQllbHNlIGlmIChzdGFydC5oYXNUaW1lKCkpIHsKCQkJZW5kID0gc3RhcnQuY2xvbmUoKS5hZGQodC5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uKTsKCQl9CgkJZWxzZSB7CgkJCWVuZCA9IHN0YXJ0LmNsb25lKCkuYWRkKHQuZGVmYXVsdEFsbERheUV2ZW50RHVyYXRpb24pOwoJCX0KCgkJY3VycmVudFZpZXcuc2VsZWN0KHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9KTsgLy8gYWNjZXB0cyBhIHJhbmdlCgl9CgkKCglmdW5jdGlvbiB1bnNlbGVjdCgpIHsgLy8gc2FmZSB0byBiZSBjYWxsZWQgYmVmb3JlIHJlbmRlclZpZXcKCQlpZiAoY3VycmVudFZpZXcpIHsKCQkJY3VycmVudFZpZXcudW5zZWxlY3QoKTsKCQl9Cgl9CgkKCQoJCgkvKiBEYXRlCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJZnVuY3Rpb24gcHJldigpIHsKCQlkYXRlID0gY3VycmVudFZpZXcuY29tcHV0ZVByZXZEYXRlKGRhdGUpOwoJCXJlbmRlclZpZXcoKTsKCX0KCQoJCglmdW5jdGlvbiBuZXh0KCkgewoJCWRhdGUgPSBjdXJyZW50Vmlldy5jb21wdXRlTmV4dERhdGUoZGF0ZSk7CgkJcmVuZGVyVmlldygpOwoJfQoJCgkKCWZ1bmN0aW9uIHByZXZZZWFyKCkgewoJCWRhdGUuYWRkKC0xLCAneWVhcnMnKTsKCQlyZW5kZXJWaWV3KCk7Cgl9CgkKCQoJZnVuY3Rpb24gbmV4dFllYXIoKSB7CgkJZGF0ZS5hZGQoMSwgJ3llYXJzJyk7CgkJcmVuZGVyVmlldygpOwoJfQoJCgkKCWZ1bmN0aW9uIHRvZGF5KCkgewoJCWRhdGUgPSB0LmdldE5vdygpOwoJCXJlbmRlclZpZXcoKTsKCX0KCQoJCglmdW5jdGlvbiBnb3RvRGF0ZShkYXRlSW5wdXQpIHsKCQlkYXRlID0gdC5tb21lbnQoZGF0ZUlucHV0KTsKCQlyZW5kZXJWaWV3KCk7Cgl9CgkKCQoJZnVuY3Rpb24gaW5jcmVtZW50RGF0ZShkZWx0YSkgewoJCWRhdGUuYWRkKG1vbWVudC5kdXJhdGlvbihkZWx0YSkpOwoJCXJlbmRlclZpZXcoKTsKCX0KCgoJLy8gRm9yY2VzIG5hdmlnYXRpb24gdG8gYSB2aWV3IGZvciB0aGUgZ2l2ZW4gZGF0ZS4KCS8vIGB2aWV3VHlwZWAgY2FuIGJlIGEgc3BlY2lmaWMgdmlldyBuYW1lIG9yIGEgZ2VuZXJpYyBvbmUgbGlrZSAid2VlayIgb3IgImRheSIuCglmdW5jdGlvbiB6b29tVG8obmV3RGF0ZSwgdmlld1R5cGUpIHsKCQl2YXIgdmlld1N0cjsKCQl2YXIgbWF0Y2g7CgoJCWlmICghdmlld1R5cGUgfHwgIWlzVmFsaWRWaWV3VHlwZSh2aWV3VHlwZSkpIHsgLy8gYSBnZW5lcmFsIHZpZXcgbmFtZSwgb3IgImF1dG8iCgkJCXZpZXdUeXBlID0gdmlld1R5cGUgfHwgJ2RheSc7CgkJCXZpZXdTdHIgPSBoZWFkZXIuZ2V0Vmlld3NXaXRoQnV0dG9ucygpLmpvaW4oJyAnKTsgLy8gc3BhY2Utc2VwYXJhdGVkIHN0cmluZyBvZiBhbGwgdGhlIHZpZXdzIGluIHRoZSBoZWFkZXIKCgkJCS8vIHRyeSB0byBtYXRjaCBhIGdlbmVyYWwgdmlldyBuYW1lLCBsaWtlICJ3ZWVrIiwgYWdhaW5zdCBhIHNwZWNpZmljIG9uZSwgbGlrZSAiYWdlbmRhV2VlayIKCQkJbWF0Y2ggPSB2aWV3U3RyLm1hdGNoKG5ldyBSZWdFeHAoJ1xcdysnICsgY2FwaXRhbGlzZUZpcnN0TGV0dGVyKHZpZXdUeXBlKSkpOwoKCQkJLy8gZmFsbCBiYWNrIHRvIHRoZSBkYXkgdmlldyBiZWluZyB1c2VkIGluIHRoZSBoZWFkZXIKCQkJaWYgKCFtYXRjaCkgewoJCQkJbWF0Y2ggPSB2aWV3U3RyLm1hdGNoKC9cdytEYXkvKTsKCQkJfQoKCQkJdmlld1R5cGUgPSBtYXRjaCA\/IG1hdGNoWzBdIDogJ2FnZW5kYURheSc7IC8vIGZhbGwgYmFjayB0byBhZ2VuZGFEYXkKCQl9CgoJCWRhdGUgPSBuZXdEYXRlOwoJCXJlbmRlclZpZXcodmlld1R5cGUpOwoJfQoJCgkKCWZ1bmN0aW9uIGdldERhdGUoKSB7CgkJcmV0dXJuIGRhdGUuY2xvbmUoKTsKCX0KCgoKCS8qIEhlaWdodCAiRnJlZXppbmciCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKCWZ1bmN0aW9uIGZyZWV6ZUNvbnRlbnRIZWlnaHQoKSB7CgkJY29udGVudC5jc3MoewoJCQl3aWR0aDogJzEwMCUnLAoJCQloZWlnaHQ6IGNvbnRlbnQuaGVpZ2h0KCksCgkJCW92ZXJmbG93OiAnaGlkZGVuJwoJCX0pOwoJfQoKCglmdW5jdGlvbiB1bmZyZWV6ZUNvbnRlbnRIZWlnaHQoKSB7CgkJY29udGVudC5jc3MoewoJCQl3aWR0aDogJycsCgkJCWhlaWdodDogJycsCgkJCW92ZXJmbG93OiAnJwoJCX0pOwoJfQoJCgkKCQoJLyogTWlzYwoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoJCgoJZnVuY3Rpb24gZ2V0Q2FsZW5kYXIoKSB7CgkJcmV0dXJuIHQ7Cgl9CgoJCglmdW5jdGlvbiBnZXRWaWV3KCkgewoJCXJldHVybiBjdXJyZW50VmlldzsKCX0KCQoJCglmdW5jdGlvbiBvcHRpb24obmFtZSwgdmFsdWUpIHsKCQlpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgewoJCQlyZXR1cm4gb3B0aW9uc1tuYW1lXTsKCQl9CgkJaWYgKG5hbWUgPT0gJ2hlaWdodCcgfHwgbmFtZSA9PSAnY29udGVudEhlaWdodCcgfHwgbmFtZSA9PSAnYXNwZWN0UmF0aW8nKSB7CgkJCW9wdGlvbnNbbmFtZV0gPSB2YWx1ZTsKCQkJdXBkYXRlU2l6ZSh0cnVlKTsgLy8gdHJ1ZSA9IGFsbG93IHJlY2FsY3VsYXRpb24gb2YgaGVpZ2h0CgkJfQoJfQoJCgkKCWZ1bmN0aW9uIHRyaWdnZXIobmFtZSwgdGhpc09iaikgewoJCWlmIChvcHRpb25zW25hbWVdKSB7CgkJCXJldHVybiBvcHRpb25zW25hbWVdLmFwcGx5KAoJCQkJdGhpc09iaiB8fCBfZWxlbWVudCwKCQkJCUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikKCQkJKTsKCQl9Cgl9Cgp9Cgo7OwoKLyogVG9wIHRvb2xiYXIgYXJlYSB3aXRoIGJ1dHRvbnMgYW5kIHRpdGxlCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovLyBUT0RPOiByZW5hbWUgYWxsIGhlYWRlci1yZWxhdGVkIHRoaW5ncyB0byAidG9vbGJhciIKCmZ1bmN0aW9uIEhlYWRlcihjYWxlbmRhciwgb3B0aW9ucykgewoJdmFyIHQgPSB0aGlzOwoJCgkvLyBleHBvcnRzCgl0LnJlbmRlciA9IHJlbmRlcjsKCXQuZGVzdHJveSA9IGRlc3Ryb3k7Cgl0LnVwZGF0ZVRpdGxlID0gdXBkYXRlVGl0bGU7Cgl0LmFjdGl2YXRlQnV0dG9uID0gYWN0aXZhdGVCdXR0b247Cgl0LmRlYWN0aXZhdGVCdXR0b24gPSBkZWFjdGl2YXRlQnV0dG9uOwoJdC5kaXNhYmxlQnV0dG9uID0gZGlzYWJsZUJ1dHRvbjsKCXQuZW5hYmxlQnV0dG9uID0gZW5hYmxlQnV0dG9uOwoJdC5nZXRWaWV3c1dpdGhCdXR0b25zID0gZ2V0Vmlld3NXaXRoQnV0dG9uczsKCQoJLy8gbG9jYWxzCgl2YXIgZWwgPSAkKCk7Cgl2YXIgdmlld3NXaXRoQnV0dG9ucyA9IFtdOwoJdmFyIHRtOwoKCglmdW5jdGlvbiByZW5kZXIoKSB7CgkJdmFyIHNlY3Rpb25zID0gb3B0aW9ucy5oZWFkZXI7CgoJCXRtID0gb3B0aW9ucy50aGVtZSA\\\/IC8vIGEgbm9ybWFsaXplZCBldmVudCBzb3VyY2U\/CgkJCQkoc291cmNlLm9yaWdBcnJheSB8fCBzb3VyY2UuZ29vZ2xlQ2FsZW5kYXJJZCB8fCBzb3VyY2UudXJsIHx8IHNvdXJjZS5ldmVudHMpIDogLy8gZ2V0IHRoZSBwcmltaXRpdmUKCQkJCW51bGwKCQkpIHx8CgkJc291cmNlOyAvLyB0aGUgZ2l2ZW4gYXJndW1lbnQgKmlzKiB0aGUgcHJpbWl0aXZlCgl9CgkKCQoJCgkvKiBNYW5pcHVsYXRpb24KCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoJLy8gT25seSBldmVyIGNhbGxlZCBmcm9tIHRoZSBleHRlcm5hbGx5LWZhY2luZyBBUEkKCWZ1bmN0aW9uIHVwZGF0ZUV2ZW50KGV2ZW50KSB7CgoJCS8vIG1hc3NhZ2Ugc3RhcnQvZW5kIHZhbHVlcywgZXZlbiBpZiBkYXRlIHN0cmluZyB2YWx1ZXMKCQlldmVudC5zdGFydCA9IHQubW9tZW50KGV2ZW50LnN0YXJ0KTsKCQlpZiAoZXZlbnQuZW5kKSB7CgkJCWV2ZW50LmVuZCA9IHQubW9tZW50KGV2ZW50LmVuZCk7CgkJfQoJCWVsc2UgewoJCQlldmVudC5lbmQgPSBudWxsOwoJCX0KCgkJbXV0YXRlRXZlbnQoZXZlbnQsIGdldE1pc2NFdmVudFByb3BzKGV2ZW50KSk7IC8vIHdpbGwgaGFuZGxlIHN0YXJ0L2VuZC9hbGxEYXkgbm9ybWFsaXphdGlvbgoJCXJlcG9ydEV2ZW50cyhjYWNoZSk7IC8vIHJlcG9ydHMgZXZlbnQgbW9kaWZpY2F0aW9ucyAoc28gd2UgY2FuIHJlZHJhdykKCX0KCgoJLy8gUmV0dXJucyBhIGhhc2ggb2YgbWlzYyBldmVudCBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGJlIGNvcGllZCBvdmVyIHRvIHJlbGF0ZWQgZXZlbnRzLgoJZnVuY3Rpb24gZ2V0TWlzY0V2ZW50UHJvcHMoZXZlbnQpIHsKCQl2YXIgcHJvcHMgPSB7fTsKCgkJJC5lYWNoKGV2ZW50LCBmdW5jdGlvbihuYW1lLCB2YWwpIHsKCQkJaWYgKGlzTWlzY0V2ZW50UHJvcE5hbWUobmFtZSkpIHsKCQkJCWlmICh2YWwgIT09IHVuZGVmaW5lZCAmJiBpc0F0b21pYyh2YWwpKSB7IC8vIGEgZGVmaW5lZCBub24tb2JqZWN0CgkJCQkJcHJvcHNbbmFtZV0gPSB2YWw7CgkJCQl9CgkJCX0KCQl9KTsKCgkJcmV0dXJuIHByb3BzOwoJfQoKCS8vIG5vbi1kYXRlLXJlbGF0ZWQsIG5vbi1pZC1yZWxhdGVkLCBub24tc2VjcmV0CglmdW5jdGlvbiBpc01pc2NFdmVudFByb3BOYW1lKG5hbWUpIHsKCQlyZXR1cm4gIS9eX3xeKGlkfGFsbERheXxzdGFydHxlbmQpJC8udGVzdChuYW1lKTsKCX0KCgkKCS8vIHJldHVybnMgdGhlIGV4cGFuZGVkIGV2ZW50cyB0aGF0IHdlcmUgY3JlYXRlZAoJZnVuY3Rpb24gcmVuZGVyRXZlbnQoZXZlbnRJbnB1dCwgc3RpY2spIHsKCQl2YXIgYWJzdHJhY3RFdmVudCA9IGJ1aWxkRXZlbnRGcm9tSW5wdXQoZXZlbnRJbnB1dCk7CgkJdmFyIGV2ZW50czsKCQl2YXIgaSwgZXZlbnQ7CgoJCWlmIChhYnN0cmFjdEV2ZW50KSB7IC8vIG5vdCBmYWxzZSAoYSB2YWxpZCBpbnB1dCkKCQkJZXZlbnRzID0gZXhwYW5kRXZlbnQoYWJzdHJhY3RFdmVudCk7CgoJCQlmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7CgkJCQlldmVudCA9IGV2ZW50c1tpXTsKCgkJCQlpZiAoIWV2ZW50LnNvdXJjZSkgewoJCQkJCWlmIChzdGljaykgewoJCQkJCQlzdGlja3lTb3VyY2UuZXZlbnRzLnB1c2goZXZlbnQpOwoJCQkJCQlldmVudC5zb3VyY2UgPSBzdGlja3lTb3VyY2U7CgkJCQkJfQoJCQkJCWNhY2hlLnB1c2goZXZlbnQpOwoJCQkJfQoJCQl9CgoJCQlyZXBvcnRFdmVudHMoY2FjaGUpOwoKCQkJcmV0dXJuIGV2ZW50czsKCQl9CgoJCXJldHVybiBbXTsKCX0KCQoJCglmdW5jdGlvbiByZW1vdmVFdmVudHMoZmlsdGVyKSB7CgkJdmFyIGV2ZW50SUQ7CgkJdmFyIGk7CgoJCWlmIChmaWx0ZXIgPT0gbnVsbCkgeyAvLyBudWxsIG9yIHVuZGVmaW5lZC4gcmVtb3ZlIGFsbCBldmVudHMKCQkJZmlsdGVyID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9OyAvLyB3aWxsIGFsd2F5cyBtYXRjaAoJCX0KCQllbHNlIGlmICghJC5pc0Z1bmN0aW9uKGZpbHRlcikpIHsgLy8gYW4gZXZlbnQgSUQKCQkJZXZlbnRJRCA9IGZpbHRlciArICcnOwoJCQlmaWx0ZXIgPSBmdW5jdGlvbihldmVudCkgewoJCQkJcmV0dXJuIGV2ZW50Ll9pZCA9PSBldmVudElEOwoJCQl9OwoJCX0KCgkJLy8gUHVyZ2UgZXZlbnQocykgZnJvbSBvdXIgbG9jYWwgY2FjaGUKCQljYWNoZSA9ICQuZ3JlcChjYWNoZSwgZmlsdGVyLCB0cnVlKTsgLy8gaW52ZXJzZT10cnVlCgoJCS8vIFJlbW92ZSBldmVudHMgZnJvbSBhcnJheSBzb3VyY2VzLgoJCS8vIFRoaXMgd29ya3MgYmVjYXVzZSB0aGV5IGhhdmUgYmVlbiBjb252ZXJ0ZWQgdG8gb2ZmaWNpYWwgRXZlbnQgT2JqZWN0cyB1cCBmcm9udC4KCQkvLyAoYW5kIGFzIGEgcmVzdWx0LCBldmVudC5faWQgaGFzIGJlZW4gY2FsY3VsYXRlZCkuCgkJZm9yIChpPTA7IGk8c291cmNlcy5sZW5ndGg7IGkrKykgewoJCQlpZiAoJC5pc0FycmF5KHNvdXJjZXNbaV0uZXZlbnRzKSkgewoJCQkJc291cmNlc1tpXS5ldmVudHMgPSAkLmdyZXAoc291cmNlc1tpXS5ldmVudHMsIGZpbHRlciwgdHJ1ZSk7CgkJCX0KCQl9CgoJCXJlcG9ydEV2ZW50cyhjYWNoZSk7Cgl9CgkKCQoJZnVuY3Rpb24gY2xpZW50RXZlbnRzKGZpbHRlcikgewoJCWlmICgkLmlzRnVuY3Rpb24oZmlsdGVyKSkgewoJCQlyZXR1cm4gJC5ncmVwKGNhY2hlLCBmaWx0ZXIpOwoJCX0KCQllbHNlIGlmIChmaWx0ZXIgIT0gbnVsbCkgeyAvLyBub3QgbnVsbCwgbm90IHVuZGVmaW5lZC4gYW4gZXZlbnQgSUQKCQkJZmlsdGVyICs9ICcnOwoJCQlyZXR1cm4gJC5ncmVwKGNhY2hlLCBmdW5jdGlvbihlKSB7CgkJCQlyZXR1cm4gZS5faWQgPT0gZmlsdGVyOwoJCQl9KTsKCQl9CgkJcmV0dXJuIGNhY2hlOyAvLyBlbHNlLCByZXR1cm4gYWxsCgl9CgkKCQoJCgkvKiBMb2FkaW5nIFN0YXRlCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkKCQoJZnVuY3Rpb24gcHVzaExvYWRpbmcoKSB7CgkJaWYgKCEobG9hZGluZ0xldmVsKyspKSB7CgkJCXRyaWdnZXIoJ2xvYWRpbmcnLCBudWxsLCB0cnVlLCBnZXRWaWV3KCkpOwoJCX0KCX0KCQoJCglmdW5jdGlvbiBwb3BMb2FkaW5nKCkgewoJCWlmICghKC0tbG9hZGluZ0xldmVsKSkgewoJCQl0cmlnZ2VyKCdsb2FkaW5nJywgbnVsbCwgZmFsc2UsIGdldFZpZXcoKSk7CgkJfQoJfQoJCgkKCQoJLyogRXZlbnQgTm9ybWFsaXphdGlvbgoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCgkvLyBHaXZlbiBhIHJhdyBvYmplY3Qgd2l0aCBrZXkvdmFsdWUgcHJvcGVydGllcywgcmV0dXJucyBhbiAiYWJzdHJhY3QiIEV2ZW50IG9iamVjdC4KCS8vIEFuICJhYnN0cmFjdCIgZXZlbnQgaXMgYW4gZXZlbnQgdGhhdCwgaWYgcmVjdXJyaW5nLCB3aWxsIG5vdCBoYXZlIGJlZW4gZXhwYW5kZWQgeWV0LgoJLy8gV2lsbCByZXR1cm4gYGZhbHNlYCB3aGVuIGlucHV0IGlzIGludmFsaWQuCgkvLyBgc291cmNlYCBpcyBvcHRpb25hbAoJZnVuY3Rpb24gYnVpbGRFdmVudEZyb21JbnB1dChpbnB1dCwgc291cmNlKSB7CgkJdmFyIG91dCA9IHt9OwoJCXZhciBzdGFydCwgZW5kOwoJCXZhciBhbGxEYXk7CgoJCWlmIChvcHRpb25zLmV2ZW50RGF0YVRyYW5zZm9ybSkgewoJCQlpbnB1dCA9IG9wdGlvbnMuZXZlbnREYXRhVHJhbnNmb3JtKGlucHV0KTsKCQl9CgkJaWYgKHNvdXJjZSAmJiBzb3VyY2UuZXZlbnREYXRhVHJhbnNmb3JtKSB7CgkJCWlucHV0ID0gc291cmNlLmV2ZW50RGF0YVRyYW5zZm9ybShpbnB1dCk7CgkJfQoKCQkvLyBDb3B5IGFsbCBwcm9wZXJ0aWVzIG92ZXIgdG8gdGhlIHJlc3VsdGluZyBvYmplY3QuCgkJLy8gVGhlIHNwZWNpYWwtY2FzZSBwcm9wZXJ0aWVzIHdpbGwgYmUgY29waWVkIG92ZXIgYWZ0ZXJ3YXJkcy4KCQkkLmV4dGVuZChvdXQsIGlucHV0KTsKCgkJaWYgKHNvdXJjZSkgewoJCQlvdXQuc291cmNlID0gc291cmNlOwoJCX0KCgkJb3V0Ll9pZCA9IGlucHV0Ll9pZCB8fCAoaW5wdXQuaWQgPT09IHVuZGVmaW5lZCA\/ICdfZmMnICsgZXZlbnRHVUlEKysgOiBpbnB1dC5pZCArICcnKTsKCgkJaWYgKGlucHV0LmNsYXNzTmFtZSkgewoJCQlpZiAodHlwZW9mIGlucHV0LmNsYXNzTmFtZSA9PSAnc3RyaW5nJykgewoJCQkJb3V0LmNsYXNzTmFtZSA9IGlucHV0LmNsYXNzTmFtZS5zcGxpdCgvXHMrLyk7CgkJCX0KCQkJZWxzZSB7IC8vIGFzc3VtZWQgdG8gYmUgYW4gYXJyYXkKCQkJCW91dC5jbGFzc05hbWUgPSBpbnB1dC5jbGFzc05hbWU7CgkJCX0KCQl9CgkJZWxzZSB7CgkJCW91dC5jbGFzc05hbWUgPSBbXTsKCQl9CgoJCXN0YXJ0ID0gaW5wdXQuc3RhcnQgfHwgaW5wdXQuZGF0ZTsgLy8gImRhdGUiIGlzIGFuIGFsaWFzIGZvciAic3RhcnQiCgkJZW5kID0gaW5wdXQuZW5kOwoKCQkvLyBwYXJzZSBhcyBhIHRpbWUgKER1cmF0aW9uKSBpZiBhcHBsaWNhYmxlCgkJaWYgKGlzVGltZVN0cmluZyhzdGFydCkpIHsKCQkJc3RhcnQgPSBtb21lbnQuZHVyYXRpb24oc3RhcnQpOwoJCX0KCQlpZiAoaXNUaW1lU3RyaW5nKGVuZCkpIHsKCQkJZW5kID0gbW9tZW50LmR1cmF0aW9uKGVuZCk7CgkJfQoKCQlpZiAoaW5wdXQuZG93IHx8IG1vbWVudC5pc0R1cmF0aW9uKHN0YXJ0KSB8fCBtb21lbnQuaXNEdXJhdGlvbihlbmQpKSB7CgoJCQkvLyB0aGUgZXZlbnQgaXMgImFic3RyYWN0IiAocmVjdXJyaW5nKSBzbyBkb24ndCBjYWxjdWxhdGUgZXhhY3Qgc3RhcnQvZW5kIGRhdGVzIGp1c3QgeWV0CgkJCW91dC5zdGFydCA9IHN0YXJ0ID8gbW9tZW50LmR1cmF0aW9uKHN0YXJ0KSA6IG51bGw7IC8vIHdpbGwgYmUgYSBEdXJhdGlvbiBvciBudWxsCgkJCW91dC5lbmQgPSBlbmQgPyBtb21lbnQuZHVyYXRpb24oZW5kKSA6IG51bGw7IC8vIHdpbGwgYmUgYSBEdXJhdGlvbiBvciBudWxsCgkJCW91dC5fcmVjdXJyaW5nID0gdHJ1ZTsgLy8gb3VyIGludGVybmFsIG1hcmtlcgoJCX0KCQllbHNlIHsKCgkJCWlmIChzdGFydCkgewoJCQkJc3RhcnQgPSB0Lm1vbWVudChzdGFydCk7CgkJCQlpZiAoIXN0YXJ0LmlzVmFsaWQoKSkgewoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfQoKCQkJaWYgKGVuZCkgewoJCQkJZW5kID0gdC5tb21lbnQoZW5kKTsKCQkJCWlmICghZW5kLmlzVmFsaWQoKSkgewoJCQkJCWVuZCA9IG51bGw7IC8vIGxldCBkZWZhdWx0cyB0YWtlIG92ZXIKCQkJCX0KCQkJfQoKCQkJYWxsRGF5ID0gaW5wdXQuYWxsRGF5OwoJCQlpZiAoYWxsRGF5ID09PSB1bmRlZmluZWQpIHsgLy8gc3RpbGwgdW5kZWZpbmVkPyBmYWxsYmFjayB0byBkZWZhdWx0CgkJCQlhbGxEYXkgPSBmaXJzdERlZmluZWQoCgkJCQkJc291cmNlID8gc291cmNlLmFsbERheURlZmF1bHQgOiB1bmRlZmluZWQsCgkJCQkJb3B0aW9ucy5hbGxEYXlEZWZhdWx0CgkJCQkpOwoJCQkJLy8gc3RpbGwgdW5kZWZpbmVkPyBub3JtYWxpemVFdmVudERhdGVQcm9wcyB3aWxsIGNhbGN1bGF0ZSBpdAoJCQl9CgoJCQlhc3NpZ25EYXRlc1RvRXZlbnQoc3RhcnQsIGVuZCwgYWxsRGF5LCBvdXQpOwoJCX0KCgkJcmV0dXJuIG91dDsKCX0KCgoJLy8gTm9ybWFsaXplcyBhbmQgYXNzaWducyB0aGUgZ2l2ZW4gZGF0ZXMgdG8gdGhlIGdpdmVuIHBhcnRpYWxseS1mb3JtZWQgZXZlbnQgb2JqZWN0LgoJLy8gTk9URTogbXV0YXRlcyB0aGUgZ2l2ZW4gc3RhcnQvZW5kIG1vbWVudHMuIGRvZXMgbm90IG1ha2UgYSBjb3B5LgoJZnVuY3Rpb24gYXNzaWduRGF0ZXNUb0V2ZW50KHN0YXJ0LCBlbmQsIGFsbERheSwgZXZlbnQpIHsKCQlldmVudC5zdGFydCA9IHN0YXJ0OwoJCWV2ZW50LmVuZCA9IGVuZDsKCQlldmVudC5hbGxEYXkgPSBhbGxEYXk7CgkJbm9ybWFsaXplRXZlbnREYXRlUHJvcHMoZXZlbnQpOwoJCWJhY2t1cEV2ZW50RGF0ZXMoZXZlbnQpOwoJfQoKCgkvLyBFbnN1cmVzIHRoZSBhbGxEYXkgcHJvcGVydHkgZXhpc3RzLgoJLy8gRW5zdXJlcyB0aGUgc3RhcnQvZW5kIGRhdGVzIGFyZSBjb25zaXN0ZW50IHdpdGggYWxsRGF5IGFuZCBmb3JjZUV2ZW50RHVyYXRpb24uCgkvLyBBY2NlcHRzIGFuIEV2ZW50IG9iamVjdCwgb3IgYSBwbGFpbiBvYmplY3Qgd2l0aCBldmVudC1pc2ggcHJvcGVydGllcy4KCS8vIE5PVEU6IFdpbGwgbW9kaWZ5IHRoZSBnaXZlbiBvYmplY3QuCglmdW5jdGlvbiBub3JtYWxpemVFdmVudERhdGVQcm9wcyhwcm9wcykgewoKCQlpZiAocHJvcHMuYWxsRGF5ID09IG51bGwpIHsKCQkJcHJvcHMuYWxsRGF5ID0gIShwcm9wcy5zdGFydC5oYXNUaW1lKCkgfHwgKHByb3BzLmVuZCAmJiBwcm9wcy5lbmQuaGFzVGltZSgpKSk7CgkJfQoKCQlpZiAocHJvcHMuYWxsRGF5KSB7CgkJCXByb3BzLnN0YXJ0LnN0cmlwVGltZSgpOwoJCQlpZiAocHJvcHMuZW5kKSB7CgkJCQlwcm9wcy5lbmQuc3RyaXBUaW1lKCk7CgkJCX0KCQl9CgkJZWxzZSB7CgkJCWlmICghcHJvcHMuc3RhcnQuaGFzVGltZSgpKSB7CgkJCQlwcm9wcy5zdGFydCA9IHQucmV6b25lRGF0ZShwcm9wcy5zdGFydCk7IC8vIHdpbGwgYWxzbyBnaXZlIGl0IGEgMDA6MDAgdGltZQoJCQl9CgkJCWlmIChwcm9wcy5lbmQgJiYgIXByb3BzLmVuZC5oYXNUaW1lKCkpIHsKCQkJCXByb3BzLmVuZCA9IHQucmV6b25lRGF0ZShwcm9wcy5lbmQpOyAvLyB3aWxsIGFsc28gZ2l2ZSBpdCBhIDAwOjAwIHRpbWUKCQkJfQoJCX0KCgkJaWYgKHByb3BzLmVuZCAmJiAhcHJvcHMuZW5kLmlzQWZ0ZXIocHJvcHMuc3RhcnQpKSB7CgkJCXByb3BzLmVuZCA9IG51bGw7CgkJfQoKCQlpZiAoIXByb3BzLmVuZCkgewoJCQlpZiAob3B0aW9ucy5mb3JjZUV2ZW50RHVyYXRpb24pIHsKCQkJCXByb3BzLmVuZCA9IHQuZ2V0RGVmYXVsdEV2ZW50RW5kKHByb3BzLmFsbERheSwgcHJvcHMuc3RhcnQpOwoJCQl9CgkJCWVsc2UgewoJCQkJcHJvcHMuZW5kID0gbnVsbDsKCQkJfQoJCX0KCX0KCgoJLy8gSWYgYHJhbmdlYCBpcyBhIHByb3BlciByYW5nZSB3aXRoIGEgc3RhcnQgYW5kIGVuZCwgcmV0dXJucyB0aGUgb3JpZ2luYWwgb2JqZWN0LgoJLy8gSWYgbWlzc2luZyBhbiBlbmQsIGNvbXB1dGVzIGEgbmV3IHJhbmdlIHdpdGggYW4gZW5kLCBjb21wdXRpbmcgaXQgYXMgaWYgaXQgd2VyZSBhbiBldmVudC4KCS8vIFRPRE86IG1ha2UgdGhpcyBhIHBhcnQgb2YgdGhlIGV2ZW50IC0+IGV2ZW50UmFuZ2Ugc3lzdGVtCglmdW5jdGlvbiBlbnN1cmVWaXNpYmxlRXZlbnRSYW5nZShyYW5nZSkgewoJCXZhciBhbGxEYXk7CgoJCWlmICghcmFuZ2UuZW5kKSB7CgoJCQlhbGxEYXkgPSByYW5nZS5hbGxEYXk7IC8vIHJhbmdlIG1pZ2h0IGJlIG1vcmUgZXZlbnQtaXNoIHRoYW4gd2UgdGhpbmsKCQkJaWYgKGFsbERheSA9PSBudWxsKSB7CgkJCQlhbGxEYXkgPSAhcmFuZ2Uuc3RhcnQuaGFzVGltZSgpOwoJCQl9CgoJCQlyYW5nZSA9IHsKCQkJCXN0YXJ0OiByYW5nZS5zdGFydCwKCQkJCWVuZDogdC5nZXREZWZhdWx0RXZlbnRFbmQoYWxsRGF5LCByYW5nZS5zdGFydCkKCQkJfTsKCQl9CgkJcmV0dXJuIHJhbmdlOwoJfQoKCgkvLyBJZiB0aGUgZ2l2ZW4gZXZlbnQgaXMgYSByZWN1cnJpbmcgZXZlbnQsIGJyZWFrIGl0IGRvd24gaW50byBhbiBhcnJheSBvZiBpbmRpdmlkdWFsIGluc3RhbmNlcy4KCS8vIElmIG5vdCBhIHJlY3VycmluZyBldmVudCwgcmV0dXJuIGFuIGFycmF5IHdpdGggdGhlIHNpbmdsZSBvcmlnaW5hbCBldmVudC4KCS8vIElmIGdpdmVuIGEgZmFsc3kgaW5wdXQgKHByb2JhYmx5IGJlY2F1c2Ugb2YgYSBmYWlsZWQgYnVpbGRFdmVudEZyb21JbnB1dCBjYWxsKSwgcmV0dXJucyBhbiBlbXB0eSBhcnJheS4KCS8vIEhBQ0s6IGNhbiBvdmVycmlkZSB0aGUgcmVjdXJyaW5nIHdpbmRvdyBieSBwcm92aWRpbmcgY3VzdG9tIHJhbmdlU3RhcnQvcmFuZ2VFbmQgKGZvciBidXNpbmVzc0hvdXJzKS4KCWZ1bmN0aW9uIGV4cGFuZEV2ZW50KGFic3RyYWN0RXZlbnQsIF9yYW5nZVN0YXJ0LCBfcmFuZ2VFbmQpIHsKCQl2YXIgZXZlbnRzID0gW107CgkJdmFyIGRvd0hhc2g7CgkJdmFyIGRvdzsKCQl2YXIgaTsKCQl2YXIgZGF0ZTsKCQl2YXIgc3RhcnRUaW1lLCBlbmRUaW1lOwoJCXZhciBzdGFydCwgZW5kOwoJCXZhciBldmVudDsKCgkJX3JhbmdlU3RhcnQgPSBfcmFuZ2VTdGFydCB8fCByYW5nZVN0YXJ0OwoJCV9yYW5nZUVuZCA9IF9yYW5nZUVuZCB8fCByYW5nZUVuZDsKCgkJaWYgKGFic3RyYWN0RXZlbnQpIHsKCQkJaWYgKGFic3RyYWN0RXZlbnQuX3JlY3VycmluZykgewoKCQkJCS8vIG1ha2UgYSBib29sZWFuIGhhc2ggYXMgdG8gd2hldGhlciB0aGUgZXZlbnQgb2NjdXJzIG9uIGVhY2ggZGF5LW9mLXdlZWsKCQkJCWlmICgoZG93ID0gYWJzdHJhY3RFdmVudC5kb3cpKSB7CgkJCQkJZG93SGFzaCA9IHt9OwoJCQkJCWZvciAoaSA9IDA7IGkgPCBkb3cubGVuZ3RoOyBpKyspIHsKCQkJCQkJZG93SGFzaFtkb3dbaV1dID0gdHJ1ZTsKCQkJCQl9CgkJCQl9CgoJCQkJLy8gaXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5IGRheSBpbiB0aGUgY3VycmVudCByYW5nZQoJCQkJZGF0ZSA9IF9yYW5nZVN0YXJ0LmNsb25lKCkuc3RyaXBUaW1lKCk7IC8vIGhvbGRzIHRoZSBkYXRlIG9mIHRoZSBjdXJyZW50IGRheQoJCQkJd2hpbGUgKGRhdGUuaXNCZWZvcmUoX3JhbmdlRW5kKSkgewoKCQkJCQlpZiAoIWRvd0hhc2ggfHwgZG93SGFzaFtkYXRlLmRheSgpXSkgeyAvLyBpZiBldmVyeWRheSwgb3IgdGhpcyBwYXJ0aWN1bGFyIGRheS1vZi13ZWVrCgoJCQkJCQlzdGFydFRpbWUgPSBhYnN0cmFjdEV2ZW50LnN0YXJ0OyAvLyB0aGUgc3RvcmVkIHN0YXJ0IGFuZCBlbmQgcHJvcGVydGllcyBhcmUgdGltZXMgKER1cmF0aW9ucykKCQkJCQkJZW5kVGltZSA9IGFic3RyYWN0RXZlbnQuZW5kOyAvLyAiCgkJCQkJCXN0YXJ0ID0gZGF0ZS5jbG9uZSgpOwoJCQkJCQllbmQgPSBudWxsOwoKCQkJCQkJaWYgKHN0YXJ0VGltZSkgewoJCQkJCQkJc3RhcnQgPSBzdGFydC50aW1lKHN0YXJ0VGltZSk7CgkJCQkJCX0KCQkJCQkJaWYgKGVuZFRpbWUpIHsKCQkJCQkJCWVuZCA9IGRhdGUuY2xvbmUoKS50aW1lKGVuZFRpbWUpOwoJCQkJCQl9CgoJCQkJCQlldmVudCA9ICQuZXh0ZW5kKHt9LCBhYnN0cmFjdEV2ZW50KTsgLy8gbWFrZSBhIGNvcHkgb2YgdGhlIG9yaWdpbmFsCgkJCQkJCWFzc2lnbkRhdGVzVG9FdmVudCgKCQkJCQkJCXN0YXJ0LCBlbmQsCgkJCQkJCQkhc3RhcnRUaW1lICYmICFlbmRUaW1lLCAvLyBhbGxEYXk\/CgkJCQkJCQlldmVudAoJCQkJCQkpOwoJCQkJCQlldmVudHMucHVzaChldmVudCk7CgkJCQkJfQoKCQkJCQlkYXRlLmFkZCgxLCAnZGF5cycpOwoJCQkJfQoJCQl9CgkJCWVsc2UgewoJCQkJZXZlbnRzLnB1c2goYWJzdHJhY3RFdmVudCk7IC8vIHJldHVybiB0aGUgb3JpZ2luYWwgZXZlbnQuIHdpbGwgYmUgYSBvbmUtaXRlbSBhcnJheQoJCQl9CgkJfQoKCQlyZXR1cm4gZXZlbnRzOwoJfQoKCgoJLyogRXZlbnQgTW9kaWZpY2F0aW9uIE1hdGgKCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoJLy8gTW9kaWZpZXMgYW4gZXZlbnQgYW5kIGFsbCByZWxhdGVkIGV2ZW50cyBieSBhcHBseWluZyB0aGUgZ2l2ZW4gcHJvcGVydGllcy4KCS8vIFNwZWNpYWwgZGF0ZS1kaWZmaW5nIGxvZ2ljIGlzIHVzZWQgZm9yIG1hbmlwdWxhdGlvbiBvZiBkYXRlcy4KCS8vIElmIGBwcm9wc2AgZG9lcyBub3QgY29udGFpbiBzdGFydC9lbmQgZGF0ZXMsIHRoZSB1cGRhdGVkIHZhbHVlcyBhcmUgYXNzdW1lZCB0byBiZSB0aGUgZXZlbnQncyBjdXJyZW50IHN0YXJ0L2VuZC4KCS8vIEFsbCBkYXRlIGNvbXBhcmlzb25zIGFyZSBkb25lIGFnYWluc3QgdGhlIGV2ZW50J3MgcHJpc3RpbmUgX3N0YXJ0IGFuZCBfZW5kIGRhdGVzLgoJLy8gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBkZWx0YSBpbmZvcm1hdGlvbiBhbmQgYSBmdW5jdGlvbiB0byB1bmRvIGFsbCBvcGVyYXRpb25zLgoJLy8KCWZ1bmN0aW9uIG11dGF0ZUV2ZW50KGV2ZW50LCBwcm9wcykgewoJCXZhciBtaXNjUHJvcHMgPSB7fTsKCQl2YXIgY2xlYXJFbmQ7CgkJdmFyIGRhdGVEZWx0YTsKCQl2YXIgZHVyYXRpb25EZWx0YTsKCQl2YXIgdW5kb0Z1bmM7CgoJCXByb3BzID0gcHJvcHMgfHwge307CgoJCS8vIGVuc3VyZSBuZXcgZGF0ZS1yZWxhdGVkIHZhbHVlcyB0byBjb21wYXJlIGFnYWluc3QKCQlpZiAoIXByb3BzLnN0YXJ0KSB7CgkJCXByb3BzLnN0YXJ0ID0gZXZlbnQuc3RhcnQuY2xvbmUoKTsKCQl9CgkJaWYgKHByb3BzLmVuZCA9PT0gdW5kZWZpbmVkKSB7CgkJCXByb3BzLmVuZCA9IGV2ZW50LmVuZCA\\/CgkvLyBzdGFydC9lbmQgYWxyZWFkeSBhc3N1bWVkIHRvIGhhdmUgc3RyaXBwZWQgem9uZXMgOigKCWZ1bmN0aW9uIGV2ZW50SW50ZXJzZWN0c1JhbmdlKGV2ZW50LCByYW5nZSkgewoJCXZhciBldmVudFN0YXJ0ID0gZXZlbnQuc3RhcnQuY2xvbmUoKS5zdHJpcFpvbmUoKTsKCQl2YXIgZXZlbnRFbmQgPSB0LmdldEV2ZW50RW5kKGV2ZW50KS5zdHJpcFpvbmUoKTsKCgkJcmV0dXJuIHJhbmdlLnN0YXJ0IDwgZXZlbnRFbmQgJiYgcmFuZ2UuZW5kID4gZXZlbnRTdGFydDsKCX0KCn0KCgovLyB1cGRhdGVzIHRoZSAiYmFja3VwIiBwcm9wZXJ0aWVzLCB3aGljaCBhcmUgcHJlc2VydmVkIGluIG9yZGVyIHRvIGNvbXB1dGUgZGlmZnMgbGF0ZXIgb24uCmZ1bmN0aW9uIGJhY2t1cEV2ZW50RGF0ZXMoZXZlbnQpIHsKCWV2ZW50Ll9hbGxEYXkgPSBldmVudC5hbGxEYXk7CglldmVudC5fc3RhcnQgPSBldmVudC5zdGFydC5jbG9uZSgpOwoJZXZlbnQuX2VuZCA9IGV2ZW50LmVuZCA\\",
    "size": "280260"
}