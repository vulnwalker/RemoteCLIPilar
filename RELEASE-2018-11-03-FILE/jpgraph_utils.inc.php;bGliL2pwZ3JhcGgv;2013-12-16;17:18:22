{
    "namaFile": "lib\/jpgraph\/jpgraph_utils.inc.php",
    "lastUpdate": "2013-12-16+17:18:22.00",
    "contentFile": "<?php
/*=======================================================================
 // File:        JPGRAPH_UTILS.INC
 // Description: Collection of non-essential "nice to have" utilities
 // Created:     2005-11-20
 // Ver:         $Id: jpgraph_utils.inc.php 1777 2009-08-23 17:34:36Z ljp $
 //
 // Copyright (c) Asial Corporation. All rights reserved.
 //========================================================================
 */

//===================================================
// CLASS FuncGenerator
// Description: Utility class to help generate data for function plots.
// The class supports both parametric and regular functions.
//===================================================
class FuncGenerator {
    private $iFunc='',$iXFunc='',$iMin,$iMax,$iStepSize;

    function __construct($aFunc,$aXFunc='') {
        $this->iFunc = $aFunc;
        $this->iXFunc = $aXFunc;
    }

    function E($aXMin,$aXMax,$aSteps=50) {
        $this->iMin = $aXMin;
        $this->iMax = $aXMax;
        $this->iStepSize = ($aXMax-$aXMin)/$aSteps;

        if( $this->iXFunc != '' )
        $t = 'for($i='.$aXMin.'; $i<='.$aXMax.'; $i += '.$this->iStepSize.') {$ya[]='.$this->iFunc.';$xa[]='.$this->iXFunc.';}';
        elseif( $this->iFunc != '' )
        $t = 'for($x='.$aXMin.'; $x<='.$aXMax.'; $x += '.$this->iStepSize.') {$ya[]='.$this->iFunc.';$xa[]=$x;} $x='.$aXMax.';$ya[]='.$this->iFunc.';$xa[]=$x;';
        else
        JpGraphError::RaiseL(24001);//('FuncGenerator : No function specified. ');

        @eval($t);

        // If there is an error in the function specifcation this is the only
        // way we can discover that.
        if( empty($xa) || empty($ya) )
        JpGraphError::RaiseL(24002);//('FuncGenerator : Syntax error in function specification ');

        return array($xa,$ya);
    }
}


//=============================================================================
// CLASS DateScaleUtils
// Description: Help to create a manual date scale
//=============================================================================
define('DSUTILS_MONTH',1); // Major and minor ticks on a monthly basis
define('DSUTILS_MONTH1',1); // Major and minor ticks on a monthly basis
define('DSUTILS_MONTH2',2); // Major ticks on a bi-monthly basis
define('DSUTILS_MONTH3',3); // Major icks on a tri-monthly basis
define('DSUTILS_MONTH6',4); // Major on a six-monthly basis
define('DSUTILS_WEEK1',5); // Major ticks on a weekly basis
define('DSUTILS_WEEK2',6); // Major ticks on a bi-weekly basis
define('DSUTILS_WEEK4',7); // Major ticks on a quod-weekly basis
define('DSUTILS_DAY1',8); // Major ticks on a daily basis
define('DSUTILS_DAY2',9); // Major ticks on a bi-daily basis
define('DSUTILS_DAY4',10); // Major ticks on a qoud-daily basis
define('DSUTILS_YEAR1',11); // Major ticks on a yearly basis
define('DSUTILS_YEAR2',12); // Major ticks on a bi-yearly basis
define('DSUTILS_YEAR5',13); // Major ticks on a five-yearly basis


class DateScaleUtils {
    public static $iMin=0, $iMax=0;

    private static $starthour,$startmonth, $startday, $startyear;
    private static $endmonth, $endyear, $endday;
    private static $tickPositions=array(),$minTickPositions=array();
    private static $iUseWeeks = true;

    static function UseWeekFormat($aFlg) {
        self::$iUseWeeks = $aFlg;
    }

    static function doYearly($aType,$aMinor=false) {
        $i=0; $j=0;
        $m = self::$startmonth;
        $y = self::$startyear;

        if( self::$startday == 1 ) {
            self::$tickPositions[$i++] = mktime(0,0,0,$m,1,$y);
        }
        ++$m;


        switch( $aType ) {
            case DSUTILS_YEAR1:
                for($y=self::$startyear; $y <= self::$endyear; ++$y ) {
                    if( $aMinor ) {
                        while( $m <= 12 ) {
                            if( !($y == self::$endyear && $m > self::$endmonth) ) {
                                self::$minTickPositions[$j++] = mktime(0,0,0,$m,1,$y);
                            }
                            ++$m;
                        }
                        $m=1;
                    }
                    self::$tickPositions[$i++] = mktime(0,0,0,1,1,$y);
                }
                break;
            case DSUTILS_YEAR2:
                $y=self::$startyear;
                while( $y <= self::$endyear ) {
                    self::$tickPositions[$i++] = mktime(0,0,0,1,1,$y);
                    for($k=0; $k < 1; ++$k ) {
                        ++$y;
                        if( $aMinor ) {
                            self::$minTickPositions[$j++] = mktime(0,0,0,1,1,$y);
                        }
                    }
                    ++$y;
                }
                break;
            case DSUTILS_YEAR5:
                $y=self::$startyear;
                while( $y <= self::$endyear ) {
                    self::$tickPositions[$i++] = mktime(0,0,0,1,1,$y);
                    for($k=0; $k < 4; ++$k ) {
                        ++$y;
                        if( $aMinor ) {
                            self::$minTickPositions[$j++] = mktime(0,0,0,1,1,$y);
                        }
                    }
                    ++$y;
                }
                break;
        }
    }

    static function doDaily($aType,$aMinor=false) {
        $m = self::$startmonth;
        $y = self::$startyear;
        $d = self::$startday;
        $h = self::$starthour;
        $i=0;$j=0;

        if( $h == 0 ) {
            self::$tickPositions[$i++] = mktime(0,0,0,$m,$d,$y);
        }
        $t = mktime(0,0,0,$m,$d,$y);

        switch($aType) {
            case DSUTILS_DAY1:
                while( $t <= self::$iMax ) {
                    $t = strtotime('+1 day',$t);
                    self::$tickPositions[$i++] = $t;
                    if( $aMinor ) {
                        self::$minTickPositions[$j++] = strtotime('+12 hours',$t);
                    }
                }
                break;
            case DSUTILS_DAY2:
                while( $t <= self::$iMax ) {
                    $t = strtotime('+1 day',$t);
                    if( $aMinor ) {
                        self::$minTickPositions[$j++] = $t;
                    }
                    $t = strtotime('+1 day',$t);
                    self::$tickPositions[$i++] = $t;
                }
                break;
            case DSUTILS_DAY4:
                while( $t <= self::$iMax ) {
                    for($k=0; $k < 3; ++$k ) {
                        $t = strtotime('+1 day',$t);
                        if( $aMinor ) {
                            self::$minTickPositions[$j++] = $t;
                        }
                    }
                    $t = strtotime('+1 day',$t);
                    self::$tickPositions[$i++] = $t;
                }
                break;
        }
    }

    static function doWeekly($aType,$aMinor=false) {
        $hpd = 3600*24;
        $hpw = 3600*24*7;
        // Find out week number of min date
        $thursday = self::$iMin + $hpd * (3 - (date('w', self::$iMin) + 6) % 7);
        $week = 1 + (date('z', $thursday) - (11 - date('w', mktime(0, 0, 0, 1, 1, date('Y', $thursday)))) % 7) / 7;
        $daynumber = date('w',self::$iMin);
        if( $daynumber == 0 ) $daynumber = 7;
        $m = self::$startmonth;
        $y = self::$startyear;
        $d = self::$startday;
        $i=0;$j=0;
        // The assumption is that the weeks start on Monday. If the first day
        // is later in the week then the first week tick has to be on the following
        // week.
        if( $daynumber == 1 ) {
            self::$tickPositions[$i++] = mktime(0,0,0,$m,$d,$y);
            $t = mktime(0,0,0,$m,$d,$y) + $hpw;
        }
        else {
            $t = mktime(0,0,0,$m,$d,$y) + $hpd*(8-$daynumber);
        }

        switch($aType) {
            case DSUTILS_WEEK1:
                $cnt=0;
                break;
            case DSUTILS_WEEK2:
                $cnt=1;
                break;
            case DSUTILS_WEEK4:
                $cnt=3;
                break;
        }
        while( $t <= self::$iMax ) {
            self::$tickPositions[$i++] = $t;
            for($k=0; $k < $cnt; ++$k ) {
                $t += $hpw;
                if( $aMinor ) {
                    self::$minTickPositions[$j++] = $t;
                }
            }
            $t += $hpw;
        }
    }

    static function doMonthly($aType,$aMinor=false) {
        $monthcount=0;
        $m = self::$startmonth;
        $y = self::$startyear;
        $i=0; $j=0;

        // Skip the first month label if it is before the startdate
        if( self::$startday == 1 ) {
            self::$tickPositions[$i++] = mktime(0,0,0,$m,1,$y);
            $monthcount=1;
        }
        if( $aType == 1 ) {
            if( self::$startday < 15 ) {
                self::$minTickPositions[$j++] = mktime(0,0,0,$m,15,$y);
            }
        }
        ++$m;

        // Loop through all the years included in the scale
        for($y=self::$startyear; $y <= self::$endyear; ++$y ) {
            // Loop through all the months. There are three cases to consider:
            // 1. We are in the first year and must start with the startmonth
            // 2. We are in the end year and we must stop at last month of the scale
            // 3. A year in between where we run through all the 12 months
            $stopmonth = $y == self::$endyear \\",
    "size": "25399"
}