{
    "namaFile": "js\/spectrum\/index.html",
    "lastUpdate": "2017-10-27+15:20:42.27",
    "contentFile": "PCFkb2N0eXBlIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtdHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04Ij4KICAgIDx0aXRsZT5TcGVjdHJ1bSAtIFRoZSBObyBIYXNzbGUgalF1ZXJ5IENvbG9ycGlja2VyPC90aXRsZT4KCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iU3BlY3RydW0gaXMgYSBKYXZhU2NyaXB0IGNvbG9ycGlja2VyIHBsdWdpbiB1c2luZyB0aGUgalF1ZXJ5IGZyYW1ld29yay4gIEl0IGlzIGhpZ2hseSBjdXN0b21pemFibGUsIGJ1dCBjYW4gYWxzbyBiZSB1c2VkIGFzIGEgc2ltcGxlIGlucHV0IHR5cGU9Y29sb3IgcG9seWZpbGwiPgogICAgPG1ldGEgbmFtZT0iYXV0aG9yIiBjb250ZW50PSJCcmlhbiBHcmluc3RlYWQgYW5kIFNwZWN0cnVtIGNvbnRyaWJ1dG9ycyI+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0ic3BlY3RydW0uY3NzIj4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9ImRvY3MvYm9vdHN0cmFwLmNzcyI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJkb2NzL2RvY3MuY3NzIj4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImRvY3MvanF1ZXJ5LTEuOS4xLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9InNwZWN0cnVtLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9J2RvY3MvdG9jLmpzJz48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9J2RvY3MvZG9jcy5qcyc+PC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHk+CjxkaXYgaWQ9J2hlYWRlcic+CiAgICA8aDE+PGEgaHJlZj0naHR0cDovL2Jncmlucy5naXRodWIuY29tL3NwZWN0cnVtJz5TcGVjdHJ1bTwvYT48L2gxPiA8aDI+PGVtPlRoZSBObyBIYXNzbGUgalF1ZXJ5IENvbG9ycGlja2VyPC9lbT48L2gyPgogICAgPGRpdiBpZD0nbGlua3MnPgogICAgICAgIDxhIGhyZWY9J2h0dHA6Ly9naXRodWIuY29tL2Jncmlucy9zcGVjdHJ1bS96aXBiYWxsLzEuOC4wJyBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5Ij5Eb3dubG9hZCBaaXA8L2E+CiAgICAgICAgVmlldyB0aGUgPGEgaHJlZj0naHR0cDovL2dpdGh1Yi5jb20vYmdyaW5zL3NwZWN0cnVtJz5Tb3VyY2UgY29kZTwvYT4uCiAgICAgICAgU3BlY3RydW0gaXMgYSBwcm9qZWN0IGJ5IDxhIGhyZWY9J2h0dHA6Ly90d2l0dGVyLmNvbS9iZ3JpbnMnPkBiZ3JpbnM8L2E+LgogICAgPC9kaXY+CiAgICA8YnIgc3R5bGU9J2NsZWFyOmJvdGg7JyAvPgo8L2Rpdj4KCjxkaXYgaWQ9J3RvYyc+PC9kaXY+CjxkaXYgaWQ9J3RvYy1zbGlkZXInPjwvZGl2PgoKPGRpdiBpZD0nZG9jcyc+CiAgICA8ZGl2IGlkPSdkb2NzLWNvbnRlbnQnPgoKICAgIDxkaXYgaWQ9J3N3aXRjaC1jdXJyZW50Jz4KICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgbmFtZT0nY29sb3IxJyBpZD0ncGljazEnIHZhbHVlPScjZGRkZGZmJyAvPgogICAgICAgIDxkaXYgaWQ9J3N3aXRjaC1jdXJyZW50LWhzdicgY2xhc3M9J3N3aXRjaC1jdXJyZW50LW91dHB1dCc+PC9kaXY+CiAgICAgICAgPGRpdiBpZD0nc3dpdGNoLWN1cnJlbnQtcmdiJyBjbGFzcz0nc3dpdGNoLWN1cnJlbnQtb3V0cHV0Jz48L2Rpdj4KICAgICAgICA8ZGl2IGlkPSdzd2l0Y2gtY3VycmVudC1oZXgnIGNsYXNzPSdzd2l0Y2gtY3VycmVudC1vdXRwdXQnPjwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBzdHlsZT0ndGV4dC1hbGlnbjpjZW50ZXI7Jz4KICAgIDxpbnB1dCBpZD0iZnVsbCIgLz4KICAgIDwvZGl2PgoKPHByZSBjbGFzcz0ncHJldHR5cHJpbnQgaGlkZScgaWQ9J2NvZGUtaGVhZGluZyc+CiZsdDtpbnB1dCB0eXBlPSdjb2xvcicgdmFsdWU9JyNmNTk0ZDAnIC8mZ3Q7CjxpbnB1dCB0eXBlPSdjb2xvcicgY2xhc3M9J2Jhc2ljJyB2YWx1ZT0nI2Y1OTRkMCcgLz4KPC9wcmU+CgogICAgICAgIDxoMiBpZD0id2h5Ij5XaHkgQSBDb2xvcnBpY2tlcj88L2gyPgogICAgICAgIDxwPjxlbT5JIHdhc24ndCBzYXRpc2ZpZWQgd2l0aCB0aGUgc29sdXRpb25zIGF2YWlsYWJsZSBmb3IgY29sb3JwaWNraW5nPC9lbT4uCiAgICAgICAgTWFueSBvZiB0aGVtIGluY2x1ZGVkIGEgdG9uIG9mIGltYWdlcywgd2VyZSBoYXJkIHRvIHNraW4gb3IgY3VzdG9taXplLCBvciB3ZXJlIHZlcnkgbGFyZ2UgcGx1Z2lucy4KICAgICAgICBIZXJlIGFyZSB0aGUgZ29hbHMgSSBoYWQgd2hlbiBtYWtpbmcgYSBuZXcgb25lOgogICAgICAgIDwvcD4KCiAgICAgICAgPGgzIGlkPSJ3aHktZm9vdHByaW50IiBjbGFzcz0ncG9pbnQnPlNtYWxsIEZvb3RwcmludDwvaDM+CiAgICAgICAgPGRpdiBjbGFzcz0nbm90ZSc+c2VlIGEgd29ya2luZyA8YSBocmVmPSdodHRwOi8vanNmaWRkbGUubmV0L2Jncmlucy9jdGtZMy8nPmpzRmlkZGxlIGV4YW1wbGU8L2E+PC9kaXY+CiAgICAgICAgPHA+SnVzdCBpbmNsdWRlIHRoZSBuZWVkZWQgQ1NTIGFuZCBKYXZhU2NyaXB0IGZpbGVzLCBhbmQgeW91IGFyZSByZWFkeSB0byBnbyEgIDwvcD4KPHByZSBjbGFzcz0ncHJldHR5cHJpbnQnIGlkPSdjb2RlLXN1YmhlYWRpbmcnPgombHQ7c2NyaXB0IHNyYz0nPGEgaHJlZj0naHR0cDovL2Jncmlucy5naXRodWIuY29tL3NwZWN0cnVtL3NwZWN0cnVtLmpzJyB0YXJnZXQ9Il9ibGFuayI+c3BlY3RydW0uanM8L2E+JyZndDsmbHQ7L3NjcmlwdCZndDsKJmx0O2xpbmsgcmVsPSdzdHlsZXNoZWV0JyBocmVmPSc8YSBocmVmPSdodHRwOi8vYmdyaW5zLmdpdGh1Yi5jb20vc3BlY3RydW0vc3BlY3RydW0uY3NzJyB0YXJnZXQ9Il9ibGFuayI+c3BlY3RydW0uY3NzPC9hPicgLyZndDsKPC9wcmU+CiAgICAgICAgPHA+PHN0cm9uZz5XZSBkb24ndCBuZWVkIG5vIHN0aW5raW4nIGltYWdlcyE8L3N0cm9uZz48L3A+CiAgICAgICAgPHA+Tm9ib2R5IHdhbnRzIHRvIGFkZCBhIGJ1bmNoIG9mIGNvZGUgaW50byB0aGVpciBwcm9qZWN0LiAgU3BlY3RydW0gaXMgY29udGFpbmVkIGluIHR3byBmaWxlcywgYW5kIGJvdGggYXJlIGNhcmVmdWwgbm90IHRvIG1lc3Mgd2l0aCB5b3VyIGV4aXN0aW5nIGNvZGUuPC9wPgoKICAgICAgICA8aDMgaWQ9IndoeS1wb2x5ZmlsbCIgY2xhc3M9J3BvaW50Jz5Qb2x5ZmlsbDwvaDM+CiAgICAgICAgPHA+SSB3YW50ZWQgYW4gb3B0aW9uIGZvciB0aGUgbW9zdCBiYXNpYyB1c2UgY2FzZSwgYSBwb2x5ZmlsbCBmb3IgdGhlIDxhIGhyZWY9J2h0dHA6Ly9kZXYudzMub3JnL2h0bWw1L21hcmt1cC9pbnB1dC5jb2xvci5odG1sJz5pbnB1dFt0eXBlPWNvbG9yXTwvYT4gSFRNTDUgY29udHJvbC4KICAgICAgICAgICBUaGlzIG1vZGUgbmVlZHMgdG8gd29yayB3aXRob3V0IEphdmFTY3JpcHQgZW5hYmxlZCAtIGFuZCBmYWxsYmFjayB0byBhbiBpbnB1dFt0eXBlPXRleHRdIGxpa2Ugb3RoZXIgSFRNTDUgaW5wdXRzLgogICAgICAgIDwvcD4KICAgICAgICA8cD5JZiB5b3UgZG9uJ3Qgd2FudCB0aGlzIGJlaGF2aW9yIHRvIGhhcHBlbiwgYnV0IHN0aWxsIHdhbnQgdG8gdXNlIHNwZWN0cnVtIGVsc2V3aGVyZSBvbiB0aGUgcGFnZSwgeW91IGNhbiBzZXQgPGNvZGU+JC5mbi5zcGVjdHJ1bS5sb2FkID0gZmFsc2U7PC9jb2RlPiByaWdodCBhZnRlciBsb2FkaW5nIHRoZSBzY3JpcHQgZmlsZS48L3A+CgoKICAgICAgICA8aDMgaWQ9IndoeS1jdXN0b21pemFibGUiIGNsYXNzPSdwb2ludCc+Q3VzdG9taXphYmxlPC9oMz4KICAgICAgICA8cD5KdXN0IGJlY2F1c2UgeW91IGRvbid0IDxlbT5oYXZlPC9lbT4gdG8gY2hhbmdlIGFueXRoaW5nIHRvIGdldCBpdCB0byB3b3JrLCBkb2Vzbid0IG1lYW4geW91IDxlbT5jYW4ndDwvZW0+IQogICAgICAgIEl0IGlzIGVhc3kgdG8gc2tpbiBhbmQgY3VzdG9taXplIHRoZSBwbHVnaW4gd2l0aCBDU1MsIGFuZCB0aGVyZSBhcmUgYSB3aWRlIHJhbmdlIG9mIG1vZGVzIGFuZCBvcHRpb25zIHRvIGV4cGxvcmUuCiAgICAgICAgPC9wPgoKICAgICAgICA8aDMgaWQ9IndoeS1tb2JpbGUiIGNsYXNzPSdwb2ludCc+TW9iaWxlIFN1cHBvcnQ8L2gzPgogICAgICAgIDxwPkFsb25nIHdpdGggZGVza3RvcCBicm93c2VyIHN1cHBvcnQsIEkgd2FudGVkIGEgbW9iaWxlIGNvbG9ycGlja2VyIHRoYXQgd2FzIHRvdWNoIGZyaWVuZGx5LCB3b3JrZWQgaW4gaU9TIGFuZCBBbmRyb2lkLCBhbmQgdXNlZCBzdGFuZGFyZHMKICAgICAgICAgICAgdGhhdCBtYXhpbWl6ZSBmdXR1cmUgbW9iaWxlIHN1cHBvcnQuCiAgICAgICAgPC9wPgoKICAgICAgICA8aDMgaWQ9IndoeS1kZXZ0b29scyIgY2xhc3M9J3BvaW50Jz5EZXZ0b29sczwvaDM+CgogICAgICAgIDxwPgogICAgICAgICAgICBCZWxpZXZlIGl0IG9yIG5vdCwgPHN0cm9uZz50aGlzIGNvbG9ycGlja2VyIGxpdmVzIGluc2lkZSBvZiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkgZGV2dG9vbHM8L3N0cm9uZz4gdG8gbWFrZSBwaWNraW5nIGNvbG9ycyBlYXNpZXIgZm9yIHdlYiBkZXZlbG9wZXJzIGFuZCBkZXNpZ25lcnMuCiAgICAgICAgPC9wPgoKICAgICAgICA8cD4KICAgICAgICAgICAgV2hlbiBJIHN0YXJ0ZWQgdGhlIHByb2plY3QsIEkgd3JvdGUgYWJvdXQgPGEgaHJlZj0iaHR0cDovL3d3dy5icmlhbmdyaW5zdGVhZC5jb20vYmxvZy9jaHJvbWUtZGV2ZWxvcGVyLXRvb2xzLWNvbG9ycGlja2VyLWNvbmNlcHQiPmRldmVsb3BlciB0b29scyBjb25jZXB0IGNvbG9ycGlja2VyIGltcGxlbWVudGF0aW9uPC9hPi4gIEFmdGVyIHRoYXQsIEkgd2FzIDxhIGhyZWY9Imh0dHA6Ly9ncm91cHMuZ29vZ2xlLmNvbS9ncm91cC9nb29nbGUtY2hyb21lLWRldmVsb3Blci10b29scy9icm93c2VfdGhyZWFkL3RocmVhZC80ZGQxZTg1M2I4MDUxNzI3LzQ1NDlhNmYwNzg4ODg1ZDQiPmNvbnRhY3RlZCBvbiB0aGUgZGV2dG9vbHMgbWFpbGluZyBsaXN0PC9hPiBhbmQgZ290IHNvbWUgaW5pdGlhbCBmZWVkYmFjayBhYm91dCB0aGUgcG9zc2liaWxpdHkgb2YgaW50ZWdyYXRpbmcgaXQgd2l0aCBkZXZ0b29scy4gIFRoZW4gSSBwdWxsZWQgdGhlIGpRdWVyeSBkZXBlbmRlbmN5IG91dCBvZiBhIGJyYW5jaCBhbmQgSSBzdWJtaXR0ZWQgYSBwYXRjaCB0byB0aGUgV2ViS2l0IHByb2plY3QuCiAgICAgICAgPC9wPgoKICAgICAgICA8cD4KICAgICAgICAgICAgRnJvbSB0aGVyZSwgSSBvcGVuZWQgYSA8YSBocmVmPSJodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k\\/ICdodHRwczovL3NzbCcgOiAnaHR0cDovL3d3dycpICsgJy5nb29nbGUtYW5hbHl0aWNzLmNvbS9nYS5qcyc7CiAgICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYSwgcyk7CiAgfSkoKTsKCjwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K",
    "size": "46815"
}