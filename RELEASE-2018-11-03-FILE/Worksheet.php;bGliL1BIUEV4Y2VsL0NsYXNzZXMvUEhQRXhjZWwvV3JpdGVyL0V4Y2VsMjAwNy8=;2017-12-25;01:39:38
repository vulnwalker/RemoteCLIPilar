{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Writer\/Excel2007\/Worksheet.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/CiAgICAgICAgJHNoZWV0U2VsZWN0ZWQgPSBmYWxzZTsKICAgICAgICBpZiAoJHRoaXMtPmdldFBhcmVudFdyaXRlcigpLT5nZXRQSFBFeGNlbCgpLT5nZXRJbmRleCgkcFNoZWV0KSA9PSAkdGhpcy0+Z2V0UGFyZW50V3JpdGVyKCktPmdldFBIUEV4Y2VsKCktPmdldEFjdGl2ZVNoZWV0SW5kZXgoKSkgewogICAgICAgICAgICAkc2hlZXRTZWxlY3RlZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICAvLyBzaGVldFZpZXcKICAgICAgICAkb2JqV3JpdGVyLT5zdGFydEVsZW1lbnQoJ3NoZWV0VmlldycpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCd0YWJTZWxlY3RlZCcsICRzaGVldFNlbGVjdGVkID8gJzEnIDogJzAnKTsKICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnd29ya2Jvb2tWaWV3SWQnLCAnMCcpOwoKICAgICAgICAvLyBab29tIHNjYWxlcwogICAgICAgIGlmICgkcFNoZWV0LT5nZXRTaGVldFZpZXcoKS0+Z2V0Wm9vbVNjYWxlKCkgIT0gMTAwKSB7CiAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCd6b29tU2NhbGUnLCAkcFNoZWV0LT5nZXRTaGVldFZpZXcoKS0+Z2V0Wm9vbVNjYWxlKCkpOwogICAgICAgIH0KICAgICAgICBpZiAoJHBTaGVldC0+Z2V0U2hlZXRWaWV3KCktPmdldFpvb21TY2FsZU5vcm1hbCgpICE9IDEwMCkgewogICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnem9vbVNjYWxlTm9ybWFsJywgJHBTaGVldC0+Z2V0U2hlZXRWaWV3KCktPmdldFpvb21TY2FsZU5vcm1hbCgpKTsKICAgICAgICB9CgogICAgICAgIC8vIFZpZXcgTGF5b3V0IFR5cGUKICAgICAgICBpZiAoJHBTaGVldC0+Z2V0U2hlZXRWaWV3KCktPmdldFZpZXcoKSAhPT0gUEhQRXhjZWxfV29ya3NoZWV0X1NoZWV0Vmlldzo6U0hFRVRWSUVXX05PUk1BTCkgewogICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgndmlldycsICRwU2hlZXQtPmdldFNoZWV0VmlldygpLT5nZXRWaWV3KCkpOwogICAgICAgIH0KCiAgICAgICAgLy8gR3JpZGxpbmVzCiAgICAgICAgaWYgKCRwU2hlZXQtPmdldFNob3dHcmlkbGluZXMoKSkgewogICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnc2hvd0dyaWRMaW5lcycsICd0cnVlJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3Nob3dHcmlkTGluZXMnLCAnZmFsc2UnKTsKICAgICAgICB9CgogICAgICAgIC8vIFJvdyBhbmQgY29sdW1uIGhlYWRlcnMKICAgICAgICBpZiAoJHBTaGVldC0+Z2V0U2hvd1Jvd0NvbEhlYWRlcnMoKSkgewogICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnc2hvd1Jvd0NvbEhlYWRlcnMnLCAnMScpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdzaG93Um93Q29sSGVhZGVycycsICcwJyk7CiAgICAgICAgfQoKICAgICAgICAvLyBSaWdodC10by1sZWZ0CiAgICAgICAgaWYgKCRwU2hlZXQtPmdldFJpZ2h0VG9MZWZ0KCkpIHsKICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3JpZ2h0VG9MZWZ0JywgJ3RydWUnKTsKICAgICAgICB9CgogICAgICAgICRhY3RpdmVDZWxsID0gJHBTaGVldC0+Z2V0QWN0aXZlQ2VsbCgpOwoKICAgICAgICAvLyBQYW5lCiAgICAgICAgJHBhbmUgPSAnJzsKICAgICAgICAkdG9wTGVmdENlbGwgPSAkcFNoZWV0LT5nZXRGcmVlemVQYW5lKCk7CiAgICAgICAgaWYgKCgkdG9wTGVmdENlbGwgIT0gJycpICYmICgkdG9wTGVmdENlbGwgIT0gJ0ExJykpIHsKICAgICAgICAgICAgJGFjdGl2ZUNlbGwgPSBlbXB0eSgkYWN0aXZlQ2VsbCkgPyAkdG9wTGVmdENlbGwgOiAkYWN0aXZlQ2VsbDsKICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGZyZWV6ZSBjb29yZGluYXRlcwogICAgICAgICAgICAkeFNwbGl0ID0gJHlTcGxpdCA9IDA7CgogICAgICAgICAgICBsaXN0KCR4U3BsaXQsICR5U3BsaXQpID0gUEhQRXhjZWxfQ2VsbDo6Y29vcmRpbmF0ZUZyb21TdHJpbmcoJHRvcExlZnRDZWxsKTsKICAgICAgICAgICAgJHhTcGxpdCA9IFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkeFNwbGl0KTsKCiAgICAgICAgICAgIC8vIHBhbmUKICAgICAgICAgICAgJHBhbmUgPSAndG9wUmlnaHQnOwogICAgICAgICAgICAkb2JqV3JpdGVyLT5zdGFydEVsZW1lbnQoJ3BhbmUnKTsKICAgICAgICAgICAgaWYgKCR4U3BsaXQgPiAxKSB7CiAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgneFNwbGl0JywgJHhTcGxpdCAtIDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkeVNwbGl0ID4gMSkgewogICAgICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3lTcGxpdCcsICR5U3BsaXQgLSAxKTsKICAgICAgICAgICAgICAgICRwYW5lID0gKCR4U3BsaXQgPiAxKSA\/ICdib3R0b21SaWdodCcgOiAnYm90dG9tTGVmdCc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3RvcExlZnRDZWxsJywgJHRvcExlZnRDZWxsKTsKICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ2FjdGl2ZVBhbmUnLCAkcGFuZSk7CiAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdzdGF0ZScsICdmcm96ZW4nKTsKICAgICAgICAgICAgJG9ialdyaXRlci0+ZW5kRWxlbWVudCgpOwoKICAgICAgICAgICAgaWYgKCgkeFNwbGl0ID4gMSkgJiYgKCR5U3BsaXQgPiAxKSkgewogICAgICAgICAgICAgICAgLy8gICAgV3JpdGUgYWRkaXRpb25hbCBzZWxlY3Rpb25zIGlmIG1vcmUgdGhhbiB0d28gcGFuZXMgKGllIGJvdGggYW4gWCBhbmQgYSBZIHNwbGl0KQogICAgICAgICAgICAgICAgJG9ialdyaXRlci0+c3RhcnRFbGVtZW50KCdzZWxlY3Rpb24nKTsKICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdwYW5lJywgJ3RvcFJpZ2h0Jyk7CiAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT5lbmRFbGVtZW50KCk7CiAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT5zdGFydEVsZW1lbnQoJ3NlbGVjdGlvbicpOwogICAgICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3BhbmUnLCAnYm90dG9tTGVmdCcpOwogICAgICAgICAgICAgICAgJG9ialdyaXRlci0+ZW5kRWxlbWVudCgpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBTZWxlY3Rpb24KLy8gICAgICBpZiAoJHBhbmUgIT0gJycpIHsKICAgICAgICAvLyBPbmx5IG5lZWQgdG8gd3JpdGUgc2VsZWN0aW9uIGVsZW1lbnQgaWYgd2UgaGF2ZSBhIHNwbGl0IHBhbmUKICAgICAgICAvLyBXZSBjaGVhdCBhIGxpdHRsZSBieSBvdmVyLXJpZGluZyB0aGUgYWN0aXZlIGNlbGwgc2VsZWN0aW9uLCBzZXR0aW5nIGl0IHRvIHRoZSBzcGxpdCBjZWxsCiAgICAgICAgJG9ialdyaXRlci0+c3RhcnRFbGVtZW50KCdzZWxlY3Rpb24nKTsKICAgICAgICBpZiAoJHBhbmUgIT0gJycpIHsKICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3BhbmUnLCAkcGFuZSk7CiAgICAgICAgfQogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdhY3RpdmVDZWxsJywgJGFjdGl2ZUNlbGwpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdzcXJlZicsICRhY3RpdmVDZWxsKTsKICAgICAgICAkb2JqV3JpdGVyLT5lbmRFbGVtZW50KCk7Ci8vICAgICAgfQoKICAgICAgICAkb2JqV3JpdGVyLT5lbmRFbGVtZW50KCk7CgogICAgICAgICRvYmpXcml0ZXItPmVuZEVsZW1lbnQoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIFNoZWV0Rm9ybWF0UHIKICAgICAqCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfU2hhcmVkX1hNTFdyaXRlciAkb2JqV3JpdGVyICAgICAgICBYTUwgV3JpdGVyCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfV29ya3NoZWV0ICAgICAgICAgICRwU2hlZXQgICAgICAgICAgICBXb3Jrc2hlZXQKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfV3JpdGVyX0V4Y2VwdGlvbgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlU2hlZXRGb3JtYXRQcihQSFBFeGNlbF9TaGFyZWRfWE1MV3JpdGVyICRvYmpXcml0ZXIgPSBudWxsLCBQSFBFeGNlbF9Xb3Jrc2hlZXQgJHBTaGVldCA9IG51bGwpCiAgICB7CiAgICAgICAgLy8gc2hlZXRGb3JtYXRQcgogICAgICAgICRvYmpXcml0ZXItPnN0YXJ0RWxlbWVudCgnc2hlZXRGb3JtYXRQcicpOwoKICAgICAgICAvLyBEZWZhdWx0IHJvdyBoZWlnaHQKICAgICAgICBpZiAoJHBTaGVldC0+Z2V0RGVmYXVsdFJvd0RpbWVuc2lvbigpLT5nZXRSb3dIZWlnaHQoKSA+PSAwKSB7CiAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdjdXN0b21IZWlnaHQnLCAndHJ1ZScpOwogICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnZGVmYXVsdFJvd0hlaWdodCcsIFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OkZvcm1hdE51bWJlcigkcFNoZWV0LT5nZXREZWZhdWx0Um93RGltZW5zaW9uKCktPmdldFJvd0hlaWdodCgpKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ2RlZmF1bHRSb3dIZWlnaHQnLCAnMTQuNCcpOwogICAgICAgIH0KCiAgICAgICAgLy8gU2V0IFplcm8gSGVpZ2h0IHJvdwogICAgICAgIGlmICgoc3RyaW5nKSRwU2hlZXQtPmdldERlZmF1bHRSb3dEaW1lbnNpb24oKS0+Z2V0WmVyb0hlaWdodCgpICA9PSAnMScgfHwKICAgICAgICAgICAgc3RydG9sb3dlcigoc3RyaW5nKSRwU2hlZXQtPmdldERlZmF1bHRSb3dEaW1lbnNpb24oKS0+Z2V0WmVyb0hlaWdodCgpKSA9PSAndHJ1ZScpIHsKICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3plcm9IZWlnaHQnLCAnMScpOwogICAgICAgIH0KCiAgICAgICAgLy8gRGVmYXVsdCBjb2x1bW4gd2lkdGgKICAgICAgICBpZiAoJHBTaGVldC0+Z2V0RGVmYXVsdENvbHVtbkRpbWVuc2lvbigpLT5nZXRXaWR0aCgpID49IDApIHsKICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ2RlZmF1bHRDb2xXaWR0aCcsIFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OkZvcm1hdE51bWJlcigkcFNoZWV0LT5nZXREZWZhdWx0Q29sdW1uRGltZW5zaW9uKCktPmdldFdpZHRoKCkpKTsKICAgICAgICB9CgogICAgICAgIC8vIE91dGxpbmUgbGV2ZWwgLSByb3cKICAgICAgICAkb3V0bGluZUxldmVsUm93ID0gMDsKICAgICAgICBmb3JlYWNoICgkcFNoZWV0LT5nZXRSb3dEaW1lbnNpb25zKCkgYXMgJGRpbWVuc2lvbikgewogICAgICAgICAgICBpZiAoJGRpbWVuc2lvbi0+Z2V0T3V0bGluZUxldmVsKCkgPiAkb3V0bGluZUxldmVsUm93KSB7CiAgICAgICAgICAgICAgICAkb3V0bGluZUxldmVsUm93ID0gJGRpbWVuc2lvbi0+Z2V0T3V0bGluZUxldmVsKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ291dGxpbmVMZXZlbFJvdycsIChpbnQpJG91dGxpbmVMZXZlbFJvdyk7CgogICAgICAgIC8vIE91dGxpbmUgbGV2ZWwgLSBjb2x1bW4KICAgICAgICAkb3V0bGluZUxldmVsQ29sID0gMDsKICAgICAgICBmb3JlYWNoICgkcFNoZWV0LT5nZXRDb2x1bW5EaW1lbnNpb25zKCkgYXMgJGRpbWVuc2lvbikgewogICAgICAgICAgICBpZiAoJGRpbWVuc2lvbi0+Z2V0T3V0bGluZUxldmVsKCkgPiAkb3V0bGluZUxldmVsQ29sKSB7CiAgICAgICAgICAgICAgICAkb3V0bGluZUxldmVsQ29sID0gJGRpbWVuc2lvbi0+Z2V0T3V0bGluZUxldmVsKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ291dGxpbmVMZXZlbENvbCcsIChpbnQpJG91dGxpbmVMZXZlbENvbCk7CgogICAgICAgICRvYmpXcml0ZXItPmVuZEVsZW1lbnQoKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIENvbHMKICAgICAqCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfU2hhcmVkX1hNTFdyaXRlciAkb2JqV3JpdGVyIFhNTCBXcml0ZXIKICAgICAqIEBwYXJhbSAgICBQSFBFeGNlbF9Xb3Jrc2hlZXQgJHBTaGVldCBXb3Jrc2hlZXQKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfV3JpdGVyX0V4Y2VwdGlvbgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlQ29scyhQSFBFeGNlbF9TaGFyZWRfWE1MV3JpdGVyICRvYmpXcml0ZXIgPSBudWxsLCBQSFBFeGNlbF9Xb3Jrc2hlZXQgJHBTaGVldCA9IG51bGwpCiAgICB7CiAgICAgICAgLy8gY29scwogICAgICAgIGlmIChjb3VudCgkcFNoZWV0LT5nZXRDb2x1bW5EaW1lbnNpb25zKCkpID4gMCkgewogICAgICAgICAgICAkb2JqV3JpdGVyLT5zdGFydEVsZW1lbnQoJ2NvbHMnKTsKCiAgICAgICAgICAgICRwU2hlZXQtPmNhbGN1bGF0ZUNvbHVtbldpZHRocygpOwoKICAgICAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGNvbHVtbiBkaW1lbnNpb25zCiAgICAgICAgICAgIGZvcmVhY2ggKCRwU2hlZXQtPmdldENvbHVtbkRpbWVuc2lvbnMoKSBhcyAkY29sRGltZW5zaW9uKSB7CiAgICAgICAgICAgICAgICAvLyBjb2wKICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPnN0YXJ0RWxlbWVudCgnY29sJyk7CiAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnbWluJywgUEhQRXhjZWxfQ2VsbDo6Y29sdW1uSW5kZXhGcm9tU3RyaW5nKCRjb2xEaW1lbnNpb24tPmdldENvbHVtbkluZGV4KCkpKTsKICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdtYXgnLCBQSFBFeGNlbF9DZWxsOjpjb2x1bW5JbmRleEZyb21TdHJpbmcoJGNvbERpbWVuc2lvbi0+Z2V0Q29sdW1uSW5kZXgoKSkpOwoKICAgICAgICAgICAgICAgIGlmICgkY29sRGltZW5zaW9uLT5nZXRXaWR0aCgpIDwgMCkgewogICAgICAgICAgICAgICAgICAgIC8vIE5vIHdpZHRoIHNldCwgYXBwbHkgZGVmYXVsdCBvZiAxMAogICAgICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCd3aWR0aCcsICc5LjEwJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIFdpZHRoIHNldAogICAgICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCd3aWR0aCcsIFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OkZvcm1hdE51bWJlcigkY29sRGltZW5zaW9uLT5nZXRXaWR0aCgpKSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gQ29sdW1uIHZpc2liaWxpdHkKICAgICAgICAgICAgICAgIGlmICgkY29sRGltZW5zaW9uLT5nZXRWaXNpYmxlKCkgPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnaGlkZGVuJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBBdXRvIHNpemU\/CiAgICAgICAgICAgICAgICBpZiAoJGNvbERpbWVuc2lvbi0+Z2V0QXV0b1NpemUoKSkgewogICAgICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdiZXN0Rml0JywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBDdXN0b20gd2lkdGg\/CiAgICAgICAgICAgICAgICBpZiAoJGNvbERpbWVuc2lvbi0+Z2V0V2lkdGgoKSAhPSAkcFNoZWV0LT5nZXREZWZhdWx0Q29sdW1uRGltZW5zaW9uKCktPmdldFdpZHRoKCkpIHsKICAgICAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnY3VzdG9tV2lkdGgnLCAndHJ1ZScpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIENvbGxhcHNlZAogICAgICAgICAgICAgICAgaWYgKCRjb2xEaW1lbnNpb24tPmdldENvbGxhcHNlZCgpID09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnY29sbGFwc2VkJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBPdXRsaW5lIGxldmVsCiAgICAgICAgICAgICAgICBpZiAoJGNvbERpbWVuc2lvbi0+Z2V0T3V0bGluZUxldmVsKCkgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ291dGxpbmVMZXZlbCcsICRjb2xEaW1lbnNpb24tPmdldE91dGxpbmVMZXZlbCgpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBTdHlsZQogICAgICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3N0eWxlJywgJGNvbERpbWVuc2lvbi0+Z2V0WGZJbmRleCgpKTsKCiAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT5lbmRFbGVtZW50KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRvYmpXcml0ZXItPmVuZEVsZW1lbnQoKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBXcml0ZSBTaGVldFByb3RlY3Rpb24KICAgICAqCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfU2hhcmVkX1hNTFdyaXRlciAgICAgICAgICAgICRvYmpXcml0ZXIgICAgICAgIFhNTCBXcml0ZXIKICAgICAqIEBwYXJhbSAgICBQSFBFeGNlbF9Xb3Jrc2hlZXQgICAgICAgICAgICAgICAgICAgICRwU2hlZXQgICAgICAgICAgICBXb3Jrc2hlZXQKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfV3JpdGVyX0V4Y2VwdGlvbgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlU2hlZXRQcm90ZWN0aW9uKFBIUEV4Y2VsX1NoYXJlZF9YTUxXcml0ZXIgJG9ialdyaXRlciA9IG51bGwsIFBIUEV4Y2VsX1dvcmtzaGVldCAkcFNoZWV0ID0gbnVsbCkKICAgIHsKICAgICAgICAvLyBzaGVldFByb3RlY3Rpb24KICAgICAgICAkb2JqV3JpdGVyLT5zdGFydEVsZW1lbnQoJ3NoZWV0UHJvdGVjdGlvbicpOwoKICAgICAgICBpZiAoJHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRQYXNzd29yZCgpICE9ICcnKSB7CiAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdwYXNzd29yZCcsICRwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0UGFzc3dvcmQoKSk7CiAgICAgICAgfQoKICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnc2hlZXQnLCAoJHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRTaGVldCgpID8gJ3RydWUnIDogJ2ZhbHNlJykpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdvYmplY3RzJywgKCRwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0T2JqZWN0cygpID8gJ3RydWUnIDogJ2ZhbHNlJykpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdzY2VuYXJpb3MnLCAoJHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRTY2VuYXJpb3MoKSA\/ICd0cnVlJyA6ICdmYWxzZScpKTsKICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnZm9ybWF0Q2VsbHMnLCAoJHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRGb3JtYXRDZWxscygpID8gJ3RydWUnIDogJ2ZhbHNlJykpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdmb3JtYXRDb2x1bW5zJywgKCRwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0Rm9ybWF0Q29sdW1ucygpID8gJ3RydWUnIDogJ2ZhbHNlJykpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdmb3JtYXRSb3dzJywgKCRwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0Rm9ybWF0Um93cygpID8gJ3RydWUnIDogJ2ZhbHNlJykpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdpbnNlcnRDb2x1bW5zJywgKCRwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0SW5zZXJ0Q29sdW1ucygpID8gJ3RydWUnIDogJ2ZhbHNlJykpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdpbnNlcnRSb3dzJywgKCRwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0SW5zZXJ0Um93cygpID8gJ3RydWUnIDogJ2ZhbHNlJykpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdpbnNlcnRIeXBlcmxpbmtzJywgKCRwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0SW5zZXJ0SHlwZXJsaW5rcygpID8gJ3RydWUnIDogJ2ZhbHNlJykpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdkZWxldGVDb2x1bW5zJywgKCRwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0RGVsZXRlQ29sdW1ucygpID8gJ3RydWUnIDogJ2ZhbHNlJykpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdkZWxldGVSb3dzJywgKCRwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0RGVsZXRlUm93cygpID8gJ3RydWUnIDogJ2ZhbHNlJykpOwogICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdzZWxlY3RMb2NrZWRDZWxscycsICgkcFNoZWV0LT5nZXRQcm90ZWN0aW9uKCktPmdldFNlbGVjdExvY2tlZENlbGxzKCkgPyAndHJ1ZScgOiAnZmFsc2UnKSk7CiAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3NvcnQnLCAoJHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRTb3J0KCkgPyAndHJ1ZScgOiAnZmFsc2UnKSk7CiAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ2F1dG9GaWx0ZXInLCAoJHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRBdXRvRmlsdGVyKCkgPyAndHJ1ZScgOiAnZmFsc2UnKSk7CiAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3Bpdm90VGFibGVzJywgKCRwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0UGl2b3RUYWJsZXMoKSA\/ICd0cnVlJyA6ICdmYWxzZScpKTsKICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnc2VsZWN0VW5sb2NrZWRDZWxscycsICgkcFNoZWV0LT5nZXRQcm90ZWN0aW9uKCktPmdldFNlbGVjdFVubG9ja2VkQ2VsbHMoKSA\/ICd0cnVlJyA6ICdmYWxzZScpKTsKICAgICAgICAkb2JqV3JpdGVyLT5lbmRFbGVtZW50KCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBXcml0ZSBDb25kaXRpb25hbEZvcm1hdHRpbmcKICAgICAqCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfU2hhcmVkX1hNTFdyaXRlciAgICAgICAgICAgICRvYmpXcml0ZXIgICAgICAgIFhNTCBXcml0ZXIKICAgICAqIEBwYXJhbSAgICBQSFBFeGNlbF9Xb3Jrc2hlZXQgICAgICAgICAgICAgICAgICAgICRwU2hlZXQgICAgICAgICAgICBXb3Jrc2hlZXQKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfV3JpdGVyX0V4Y2VwdGlvbgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKFBIUEV4Y2VsX1NoYXJlZF9YTUxXcml0ZXIgJG9ialdyaXRlciA9IG51bGwsIFBIUEV4Y2VsX1dvcmtzaGVldCAkcFNoZWV0ID0gbnVsbCkKICAgIHsKICAgICAgICAvLyBDb25kaXRpb25hbCBpZAogICAgICAgICRpZCA9IDE7CgogICAgICAgIC8vIExvb3AgdGhyb3VnaCBzdHlsZXMgaW4gdGhlIGN1cnJlbnQgd29ya3NoZWV0CiAgICAgICAgZm9yZWFjaCAoJHBTaGVldC0+Z2V0Q29uZGl0aW9uYWxTdHlsZXNDb2xsZWN0aW9uKCkgYXMgJGNlbGxDb29yZGluYXRlID0+ICRjb25kaXRpb25hbFN0eWxlcykgewogICAgICAgICAgICBmb3JlYWNoICgkY29uZGl0aW9uYWxTdHlsZXMgYXMgJGNvbmRpdGlvbmFsKSB7CiAgICAgICAgICAgICAgICAvLyBXSFkgd2FzIHRoaXMgYWdhaW4\/CiAgICAgICAgICAgICAgICAvLyBpZiAoJHRoaXMtPmdldFBhcmVudFdyaXRlcigpLT5nZXRTdHlsZXNDb25kaXRpb25hbEhhc2hUYWJsZSgpLT5nZXRJbmRleEZvckhhc2hDb2RlKCRjb25kaXRpb25hbC0+Z2V0SGFzaENvZGUoKSkgPT0gJycpIHsKICAgICAgICAgICAgICAgIC8vICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgLy8gfQogICAgICAgICAgICAgICAgaWYgKCRjb25kaXRpb25hbC0+Z2V0Q29uZGl0aW9uVHlwZSgpICE9IFBIUEV4Y2VsX1N0eWxlX0NvbmRpdGlvbmFsOjpDT05ESVRJT05fTk9ORSkgewogICAgICAgICAgICAgICAgICAgIC8vIGNvbmRpdGlvbmFsRm9ybWF0dGluZwogICAgICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPnN0YXJ0RWxlbWVudCgnY29uZGl0aW9uYWxGb3JtYXR0aW5nJyk7CiAgICAgICAgICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3NxcmVmJywgJGNlbGxDb29yZGluYXRlKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gY2ZSdWxlCiAgICAgICAgICAgICAgICAgICAgJG9ialdyaXRlci0+c3RhcnRFbGVtZW50KCdjZlJ1bGUnKTsKICAgICAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgndHlwZScsICRjb25kaXRpb25hbC0+Z2V0Q29uZGl0aW9uVHlwZSgpKTsKICAgICAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnZHhmSWQnLCAkdGhpcy0+Z2V0UGFyZW50V3JpdGVyKCktPmdldFN0eWxlc0NvbmRpdGlvbmFsSGFzaFRhYmxlKCktPmdldEluZGV4Rm9ySGFzaENvZGUoJGNvbmRpdGlvbmFsLT5nZXRIYXNoQ29kZSgpKSk7CiAgICAgICAgICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3ByaW9yaXR5JywgJGlkKyspOwoKICAgICAgICAgICAgICAgICAgICBpZiAoKCRjb25kaXRpb25hbC0+Z2V0Q29uZGl0aW9uVHlwZSgpID09IFBIUEV4Y2VsX1N0eWxlX0NvbmRpdGlvbmFsOjpDT05ESVRJT05fQ0VMTElTIHx8ICRjb25kaXRpb25hbC0+Z2V0Q29uZGl0aW9uVHlwZSgpID09IFBIUEV4Y2VsX1N0eWxlX0NvbmRpdGlvbmFsOjpDT05ESVRJT05fQ09OVEFJTlNURVhUKQogICAgICAgICAgICAgICAgICAgICAgICAmJiAkY29uZGl0aW9uYWwtPmdldE9wZXJhdG9yVHlwZSgpICE9IFBIUEV4Y2VsX1N0eWxlX0NvbmRpdGlvbmFsOjpPUEVSQVRPUl9OT05FKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdvcGVyYXRvcicsICRjb25kaXRpb25hbC0+Z2V0T3BlcmF0b3JUeXBlKCkpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCRjb25kaXRpb25hbC0+Z2V0Q29uZGl0aW9uVHlwZSgpID09IFBIUEV4Y2VsX1N0eWxlX0NvbmRpdGlvbmFsOjpDT05ESVRJT05fQ09OVEFJTlNURVhUCiAgICAgICAgICAgICAgICAgICAgICAgICYmICFpc19udWxsKCRjb25kaXRpb25hbC0+Z2V0VGV4dCgpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgndGV4dCcsICRjb25kaXRpb25hbC0+Z2V0VGV4dCgpKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICgkY29uZGl0aW9uYWwtPmdldENvbmRpdGlvblR5cGUoKSA9PSBQSFBFeGNlbF9TdHlsZV9Db25kaXRpb25hbDo6Q09ORElUSU9OX0NPTlRBSU5TVEVYVAogICAgICAgICAgICAgICAgICAgICAgICAmJiAkY29uZGl0aW9uYWwtPmdldE9wZXJhdG9yVHlwZSgpID09IFBIUEV4Y2VsX1N0eWxlX0NvbmRpdGlvbmFsOjpPUEVSQVRPUl9DT05UQUlOU1RFWFQKICAgICAgICAgICAgICAgICAgICAgICAgJiYgIWlzX251bGwoJGNvbmRpdGlvbmFsLT5nZXRUZXh0KCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlRWxlbWVudCgnZm9ybXVsYScsICdOT1QoSVNFUlJPUihTRUFSQ0goIicgLiAkY29uZGl0aW9uYWwtPmdldFRleHQoKSAuICciLCcgLiAkY2VsbENvb3JkaW5hdGUgLiAnKSkpJyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlaWYgKCRjb25kaXRpb25hbC0+Z2V0Q29uZGl0aW9uVHlwZSgpID09IFBIUEV4Y2VsX1N0eWxlX0NvbmRpdGlvbmFsOjpDT05ESVRJT05fQ09OVEFJTlNURVhUCiAgICAgICAgICAgICAgICAgICAgICAgICYmICRjb25kaXRpb25hbC0+Z2V0T3BlcmF0b3JUeXBlKCkgPT0gUEhQRXhjZWxfU3R5bGVfQ29uZGl0aW9uYWw6Ok9QRVJBVE9SX0JFR0lOU1dJVEgKICAgICAgICAgICAgICAgICAgICAgICAgJiYgIWlzX251bGwoJGNvbmRpdGlvbmFsLT5nZXRUZXh0KCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlRWxlbWVudCgnZm9ybXVsYScsICdMRUZUKCcgLiAkY2VsbENvb3JkaW5hdGUgLiAnLCcgLiBzdHJsZW4oJGNvbmRpdGlvbmFsLT5nZXRUZXh0KCkpIC4gJyk9IicgLiAkY29uZGl0aW9uYWwtPmdldFRleHQoKSAuICciJyk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlaWYgKCRjb25kaXRpb25hbC0+Z2V0Q29uZGl0aW9uVHlwZSgpID09IFBIUEV4Y2VsX1N0eWxlX0NvbmRpdGlvbmFsOjpDT05ESVRJT05fQ09OVEFJTlNURVhUCiAgICAgICAgICAgICAgICAgICAgICAgICYmICRjb25kaXRpb25hbC0+Z2V0T3BlcmF0b3JUeXBlKCkgPT0gUEhQRXhjZWxfU3R5bGVfQ29uZGl0aW9uYWw6Ok9QRVJBVE9SX0VORFNXSVRICiAgICAgICAgICAgICAgICAgICAgICAgICYmICFpc19udWxsKCRjb25kaXRpb25hbC0+Z2V0VGV4dCgpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUVsZW1lbnQoJ2Zvcm11bGEnLCAnUklHSFQoJyAuICRjZWxsQ29vcmRpbmF0ZSAuICcsJyAuIHN0cmxlbigkY29uZGl0aW9uYWwtPmdldFRleHQoKSkgLiAnKT0iJyAuICRjb25kaXRpb25hbC0+Z2V0VGV4dCgpIC4gJyInKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAoJGNvbmRpdGlvbmFsLT5nZXRDb25kaXRpb25UeXBlKCkgPT0gUEhQRXhjZWxfU3R5bGVfQ29uZGl0aW9uYWw6OkNPTkRJVElPTl9DT05UQUlOU1RFWFQKICAgICAgICAgICAgICAgICAgICAgICAgJiYgJGNvbmRpdGlvbmFsLT5nZXRPcGVyYXRvclR5cGUoKSA9PSBQSFBFeGNlbF9TdHlsZV9Db25kaXRpb25hbDo6T1BFUkFUT1JfTk9UQ09OVEFJTlMKICAgICAgICAgICAgICAgICAgICAgICAgJiYgIWlzX251bGwoJGNvbmRpdGlvbmFsLT5nZXRUZXh0KCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlRWxlbWVudCgnZm9ybXVsYScsICdJU0VSUk9SKFNFQVJDSCgiJyAuICRjb25kaXRpb25hbC0+Z2V0VGV4dCgpIC4gJyIsJyAuICRjZWxsQ29vcmRpbmF0ZSAuICcpKScpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZWlmICgkY29uZGl0aW9uYWwtPmdldENvbmRpdGlvblR5cGUoKSA9PSBQSFBFeGNlbF9TdHlsZV9Db25kaXRpb25hbDo6Q09ORElUSU9OX0NFTExJUwogICAgICAgICAgICAgICAgICAgICAgICB8fCAkY29uZGl0aW9uYWwtPmdldENvbmRpdGlvblR5cGUoKSA9PSBQSFBFeGNlbF9TdHlsZV9Db25kaXRpb25hbDo6Q09ORElUSU9OX0NPTlRBSU5TVEVYVAogICAgICAgICAgICAgICAgICAgICAgICB8fCAkY29uZGl0aW9uYWwtPmdldENvbmRpdGlvblR5cGUoKSA9PSBQSFBFeGNlbF9TdHlsZV9Db25kaXRpb25hbDo6Q09ORElUSU9OX0VYUFJFU1NJT04pIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGNvbmRpdGlvbmFsLT5nZXRDb25kaXRpb25zKCkgYXMgJGZvcm11bGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcm11bGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlRWxlbWVudCgnZm9ybXVsYScsICRmb3JtdWxhKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJG9ialdyaXRlci0+ZW5kRWxlbWVudCgpOwoKICAgICAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT5lbmRFbGVtZW50KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBXcml0ZSBEYXRhVmFsaWRhdGlvbnMKICAgICAqCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfU2hhcmVkX1hNTFdyaXRlciAgICAgICAgICAgICRvYmpXcml0ZXIgICAgICAgIFhNTCBXcml0ZXIKICAgICAqIEBwYXJhbSAgICBQSFBFeGNlbF9Xb3Jrc2hlZXQgICAgICAgICAgICAgICAgICAgICRwU2hlZXQgICAgICAgICAgICBXb3Jrc2hlZXQKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfV3JpdGVyX0V4Y2VwdGlvbgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlRGF0YVZhbGlkYXRpb25zKFBIUEV4Y2VsX1NoYXJlZF9YTUxXcml0ZXIgJG9ialdyaXRlciA9IG51bGwsIFBIUEV4Y2VsX1dvcmtzaGVldCAkcFNoZWV0ID0gbnVsbCkKICAgIHsKICAgICAgICAvLyBEYXRhdmFsaWRhdGlvbiBjb2xsZWN0aW9uCiAgICAgICAgJGRhdGFWYWxpZGF0aW9uQ29sbGVjdGlvbiA9ICRwU2hlZXQtPmdldERhdGFWYWxpZGF0aW9uQ29sbGVjdGlvbigpOwoKICAgICAgICAvLyBXcml0ZSBkYXRhIHZhbGlkYXRpb25zPwogICAgICAgIGlmICghZW1wdHkoJGRhdGFWYWxpZGF0aW9uQ29sbGVjdGlvbikpIHsKICAgICAgICAgICAgJG9ialdyaXRlci0+c3RhcnRFbGVtZW50KCdkYXRhVmFsaWRhdGlvbnMnKTsKICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ2NvdW50JywgY291bnQoJGRhdGFWYWxpZGF0aW9uQ29sbGVjdGlvbikpOwoKICAgICAgICAgICAgZm9yZWFjaCAoJGRhdGFWYWxpZGF0aW9uQ29sbGVjdGlvbiBhcyAkY29vcmRpbmF0ZSA9PiAkZHYpIHsKICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPnN0YXJ0RWxlbWVudCgnZGF0YVZhbGlkYXRpb24nKTsKCiAgICAgICAgICAgICAgICBpZiAoJGR2LT5nZXRUeXBlKCkgIT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgndHlwZScsICRkdi0+Z2V0VHlwZSgpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJGR2LT5nZXRFcnJvclN0eWxlKCkgIT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnZXJyb3JTdHlsZScsICRkdi0+Z2V0RXJyb3JTdHlsZSgpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJGR2LT5nZXRPcGVyYXRvcigpICE9ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ29wZXJhdG9yJywgJGR2LT5nZXRPcGVyYXRvcigpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnYWxsb3dCbGFuaycsICgkZHYtPmdldEFsbG93QmxhbmsoKSA\/ICcxJyAgOiAnMCcpKTsKICAgICAgICAgICAgICAgICRvYmpXcml0ZXItPndyaXRlQXR0cmlidXRlKCdzaG93RHJvcERvd24nLCAoISRkdi0+Z2V0U2hvd0Ryb3BEb3duKCkgPyAnMScgIDogJzAnKSk7CiAgICAgICAgICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnc2hvd0lucHV0TWVzc2FnZScsICgkZHYtPmdldFNob3dJbnB1dE1lc3NhZ2UoKSA\\/ICd0cnVlJyA6ICdmYWxzZScpKTsKICAgICAgICAkb2JqV3JpdGVyLT53cml0ZUF0dHJpYnV0ZSgnZGlmZmVyZW50Rmlyc3QnLCAoJHBTaGVldC0+Z2V0SGVhZGVyRm9vdGVyKCktPmdldERpZmZlcmVudEZpcnN0KCkgPyAndHJ1ZScgOiAnZmFsc2UnKSk7CiAgICAgICAgJG9ialdyaXRlci0+d3JpdGVBdHRyaWJ1dGUoJ3NjYWxlV2l0aERvYycsICgkcFNoZWV0LT5nZXRIZWFkZXJGb290ZXIoKS0+Z2V0U2NhbGVXaXRoRG9jdW1lbnQoKSA\",
    "size": "55244"
}