{
    "namaFile": "js\/perencanaanKeuangan\/anggaranKas\/anggaranKasSKPD1PAD.js",
    "lastUpdate": "2018-08-23+11:13:07.18",
    "contentFile": "var anggaranKasSKPD1PADFilterSKPD = new SkpdCls({
  prefix: "anggaranKasSKPD1PAD",
  formName: "anggaranKasSKPD1PADForm",

  pilihUrusanfter: function() {
    // rkaSKPD21.refreshList(true);
    anggaranKasSKPD1PAD.filterRender();
  },
  pilihBidangAfter: function() {
    anggaranKasSKPD1PAD.filterRender();
  },
  pilihUnitAfter: function() {
    anggaranKasSKPD1PAD.filterRender();
  },
  pilihSubUnitAfter: function() {
    anggaranKasSKPD1PAD.filterRender();
  },
  pilihSeksiAfter: function() {
    anggaranKasSKPD1PAD.filterRender();
  },
  programChanged: function() {
    // rkaSKPD21.refreshList(true);
    anggaranKasSKPD1PAD.filterRender();
  }
});
var anggaranKasSKPD1PAD = new DaftarObj2({
  prefix: "anggaranKasSKPD1PAD",
  url: "pgKeu.php?Pg=anggaranKasSKPD1PAD",
  formName: "anggaranKasSKPD1PADForm",
  anggaranKasSKPD1PAD_form: "0", //default js anggaranKasSKPD1PAD
  loading: function() {
    //alert('loading');
    this.topBarRender();
    this.filterRender();
    this.daftarRender();
    this.sumHalRender();
  },
  topBarRender: function() {
    var me = this;
    //render subtitle
    $.ajax({
      url: this.url + "&tipe=subtitle",
      type: "POST",
      data: $("#" + this.formName).serialize(),
      success: function(data) {
        var resp = eval("(" + data + ")");
        document.getElementById(me.prefix + "_cont_title").innerHTML =
          resp.content;
        me.topBarRenderAfter();
      }
    });
  },
  filterCheckAll: function() {
    // var isChecked = $("#filterSemua").attr("checked");
    // if (isChecked == "checked") {
    //   $("#filterJanuari").removeAttr("checked");
    //   $("#filterFebruari").removeAttr("checked");
    //   $("#filterMaret").removeAttr("checked");
    //   $("#filterApril").removeAttr("checked");
    //   $("#filterMei").removeAttr("checked");
    //   $("#filterJuni").removeAttr("checked");
    //   $("#filterJuli").removeAttr("checked");
    //   $("#filterAgustus").removeAttr("checked");
    //   $("#filterSeptember").removeAttr("checked");
    //   $("#filterOktober").removeAttr("checked");
    //   $("#filterNopember").removeAttr("checked");
    //   $("#filterDesember").removeAttr("checked");
    // } else {
    //   $("#filterJanuari").attr("checked", true);
    //   $("#filterFebruari").attr("checked", true);
    //   $("#filterMaret").attr("checked", true);
    //   $("#filterApril").attr("checked", true);
    //   $("#filterMei").attr("checked", true);
    //   $("#filterJuni").attr("checked", true);
    //   $("#filterJuli").attr("checked", true);
    //   $("#filterAgustus").attr("checked", true);
    //   $("#filterSeptember").attr("checked", true);
    //   $("#filterOktober").attr("checked", true);
    //   $("#filterNopember").attr("checked", true);
    //   $("#filterDesember").attr("checked", true);
    // }
    // this.refreshList(true);
  },
  // filterRenderAfter: function() {
  // },
  detail: function() {
    var me = this;
    errmsg = this.CekCheckbox();
    if (errmsg == "") {
      var box = this.GetCbxChecked();
    } else {
      alert(errmsg);
    }
  },
  daftarRender: function() {
    var me = this; //render daftar
    addCoverPage2("daftar_cover", 1, true, true, {
      renderTo: this.prefix + "_cont_daftar",
      imgsrc: "images/wait.gif",
      style: { position: "absolute", top: "5", left: "5" }
    });
    $.ajax({
      url: this.url + "&tipe=daftar",
      type: "POST",
      data: $("#" + this.formName).serialize(),
      success: function(data) {
        var resp = eval("(" + data + ")");
        document.getElementById(me.prefix + "_cont_daftar").innerHTML =
          resp.content;
        me.sumHalRender();
      }
    });
  },
  Baru: function() {
    var me = this;

    errmsg = "";

    if ($("#filterUrusan").val() == "00") {
      errmsg = "Pilih Urusan";
    } else if ($("#filterSKPD").val() == "00") {
      errmsg = "Pilih Bidang";
    } else if ($("#filterSKPD").val() == "00") {
      errmsg = "Pilih SKPD";
    } else if ($("#filterConcatProgram").val() == "") {
      errmsg = "Pilih Program";
    } else if ($("#filterQ").val() == "") {
      errmsg = "Pilih Kegiatan";
    }
    if (errmsg == "") {
      var me = this;
      var aForm = document.getElementById(this.formName);
      $.ajax({
        url: this.url + "&tipe=Baru",
        type: "POST",
        data: $("#" + this.formName).serialize(),
        success: function(data) {
          var resp = eval("(" + data + ")");
          if (resp.err == "") {
            aForm.action = "pgKeu.php?Pg=anggaranKasSKPD1PADIns";
            aForm.target = "_blank";
            aForm.submit();
            aForm.target = "";
          } else {
            alert(resp.err);
          }
        }
      });
    } else {
      alert(errmsg);
    }
  },
  Info: function() {
    var me = this;
    var cover = this.prefix + "_formcover";
    $.ajax({
      type: "POST",
      url: this.url + "&tipe=Info",
      success: function(data) {
        var resp = eval("(" + data + ")");
        if (resp.err == "") {
          document.body.style.overflow = "hidden";
          addCoverPage2(cover, 999, true, false);
          document.getElementById(cover).innerHTML = resp.content;
        } else {
          alert(resp.err);
        }
      }
    });
  },
  Edit: function() {
    var me = this;
    errmsg = this.CekCheckbox();
    if (errmsg == "") {
      var box = this.GetCbxChecked();
      var aForm = document.getElementById(this.formName);
      $.ajax({
        url: this.url + "&tipe=editTab",
        type: "POST",
        data: $("#" + this.formName).serialize(),
        success: function(data) {
          var resp = eval("(" + data + ")");
          if (resp.err == "") {
            var IDrenja = Number(resp.content.idrenja);
            aForm.action =
              "pgKeu.php?Pg=rkbmd_" +
              resp.content.kemana +
              "&YN=1&id=" +
              IDrenja;
            aForm.target = "_blank";
            aForm.submit();
            aForm.target = "";
          } else {
            alert(resp.err);
          }
        }
      });
    } else {
      alert(errmsg);
    }
  },
  Close2: function() {
    var cover = this.prefix + "_formcoverKB";
    if (document.getElementById(cover)) delElem(cover);
    if (tipe == null) {
      document.body.style.overflow = "auto";
    }
  },
  formatCurrency: function(num) {
    num = num.toString().replace(/\$|\,/g, "");
    if (isNaN(num)) num = "0";
    sign = num == (num = Math.abs(num));
    num = Math.floor(num * 100 + 0.50000000001);
    cents = num % 100;
    num = Math.floor(num / 100).toString();
    if (cents < 10) cents = "0" + cents;
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
      num =
        num.substring(0, num.length - (4 * i + 3)) +
        "." +
        num.substring(num.length - (4 * i + 3));
    return (sign ? "" : "-") + "" + num;
  },
  Laporan: function() {
    var me = this;
    var err = "";
    var cover = this.prefix + "_formcover";
    if (err == "") {
      document.body.style.overflow = "hidden";
      addCoverPage2(cover, 2, true, false);
      $.ajax({
        type: "POST",
        data: $("#" + this.formName).serialize(),
        url: this.url + "&tipe=Laporan",
        success: function(data) {
          var resp = eval("(" + data + ")");
          if (resp.err == "") {
            document.getElementById(cover).innerHTML = resp.content;
            me.AfterFormBaru(resp);
            $("#tanggalCetak").datepicker({
              dateFormat: "dd-mm-yy",
              showAnim: "slideDown",
              inline: true,
              showOn: "button",
              buttonImage: "images/calendar.gif",
              buttonImageOnly: true,
              changeMonth: true,
              changeYear: false,
              yearRange: resp.content.yearRange,
              buttonText: "",
              defaultDate: +0
            });
          } else {
            alert(resp.err);
            delElem(cover);
            document.body.style.overflow = "auto";
          }
        }
      });
    } else {
      alert(err);
    }
  },
  viewLaporan: function() {
    var me = this;
    errmsg = "";
    if (errmsg == "") {
      var me = this;
      var aForm = document.getElementById(this.prefix + "_form");
      aForm.action = me.url + "&tipe=viewLaporan";
      aForm.target = "_blank";
      aForm.submit();
      aForm.target = "";
    } else {
      alert(errmsg);
    }
  },
  checkAlokasi: function() {
    var me = this;
    errmsg = this.CekCheckbox();
    if (errmsg == "") {
      var box = this.GetCbxChecked();
      $.ajax({
        type: "POST",
        data: $("#" + this.formName).serialize(),
        url: this.url + "&tipe=checkAlokasi",
        success: function(data) {
          var resp = eval("(" + data + ")");
          if (resp.err == "") {
            if (resp.content.jenis == "BULANAN") {
              me.formAlokasi();
            } else if (resp.content.jenis == "TRIWULAN") {
              me.formAlokasiTriwulan();
            } else {
              me.formAlokasiTriwulan();
            }
          } else {
            alert(resp.err);
            if (resp.err == "Tahap Telah Habis") {
              window.location.reload();
            }
          }
        }
      });
    } else {
      alert(errmsg);
    }
  },
  quickCheckAlokasi: function(idDPA) {
    var me = this;
    var errmsg = "";
    if (errmsg == "") {
      $.ajax({
        type: "POST",
        data: {idDPA : idDPA},
        url: this.url + "&tipe=quickCheckAlokasi",
        success: function(data) {
          var resp = eval("(" + data + ")");
          if (resp.err == "") {
            if (resp.content.jenis == "BULANAN") {
              me.quickFormAlokasi(idDPA);
            } else if (resp.content.jenis == "TRIWULAN") {
              me.quickFormAlokasiTriwulan(idDPA);
            } else {
              me.quickFormAlokasiTriwulan(idDPA);
            }
          } else {
            alert(resp.err);
            if (resp.err == "Tahap Telah Habis") {
              window.location.reload();
            }
          }
        }
      });
    } else {
      alert(errmsg);
    }
  },
  formAlokasi: function() {
    var me = this;
    var cover = this.prefix + "_formcover";

    $.ajax({
      type: "POST",
      data: $("#" + this.formName).serialize(),
      url: this.url + "&tipe=formAlokasi",
      success: function(data) {
        var resp = eval("(" + data + ")");
        if (resp.err == "") {
          document.body.style.overflow = "hidden";
          addCoverPage2(cover, 999, true, false);
          document.getElementById(cover).innerHTML = resp.content;
        } else {
          alert(resp.err);
        }
      }
    });
  },
  quickFormAlokasi: function(idDPA) {
    var me = this;
    var cover = this.prefix + "_formcover";

    $.ajax({
      type: "POST",
      data: {idDPA : idDPA},
      url: this.url + "&tipe=quickFormAlokasi",
      success: function(data) {
        var resp = eval("(" + data + ")");
        if (resp.err == "") {
          document.body.style.overflow = "hidden";
          addCoverPage2(cover, 999, true, false);
          document.getElementById(cover).innerHTML = resp.content;
        } else {
          alert(resp.err);
        }
      }
    });
  },
  quickFormAlokasiTriwulan: function(idDPA) {
    var me = this;
    var cover = this.prefix + "_formcover";

    $.ajax({
      type: "POST",
      data: {idDPA : idDPA},
      url: this.url + "&tipe=quickFormAlokasiTriwulan",
      success: function(data) {
        var resp = eval("(" + data + ")");
        if (resp.err == "") {
          document.body.style.overflow = "hidden";
          addCoverPage2(cover, 999, true, false);
          document.getElementById(cover).innerHTML = resp.content;
        } else {
          alert(resp.err);
        }
      }
    });
  },
  formAlokasiTriwulan: function() {
    var me = this;
    var cover = this.prefix + "_formcover";

    $.ajax({
      type: "POST",
      data: $("#" + this.formName).serialize(),
      url: this.url + "&tipe=formAlokasiTriwulan",
      success: function(data) {
        var resp = eval("(" + data + ")");
        if (resp.err == "") {
          document.body.style.overflow = "hidden";
          addCoverPage2(cover, 999, true, false);
          document.getElementById(cover).innerHTML = resp.content;
        } else {
          alert(resp.err);
        }
      }
    });
  },

  jenisPerhitunganChanged: function() {
    if ($("#jenisPerhitungan").val() == "BAGI RATA") {
      $("#buttonHitung").attr("disabled", false);
    } else {
      $("#buttonHitung").attr("disabled", true);
    }
  },
  jenisAlokasiChanged: function() {
    if ($("#jenisAlokasi").val() == "BULANAN") {
      var me = this;
      this.OnErrorClose = false;
      document.body.style.overflow = "hidden";
      var cover = this.prefix + "_formsimpan";
      addCoverPage2(cover, 1, true, false);
      delElem(cover);
      me.Close();
      $.ajax({
        type: "POST",
        url: this.url + "&tipe=clearAlokasi",
        success: function(data) {
          anggaranKasSKPD1PAD.formAlokasi();
        }
      });
    } else if ($("#jenisAlokasi").val() == "TRIWULAN") {
      var me = this;
      this.OnErrorClose = false;
      document.body.style.overflow = "hidden";
      var cover = this.prefix + "_formsimpan";
      addCoverPage2(cover, 1, true, false);
      delElem(cover);
      me.Close();
      $.ajax({
        type: "POST",
        url: this.url + "&tipe=clearAlokasi",
        success: function(data) {
          anggaranKasSKPD1PAD.formAlokasiTriwulan();
        }
      });
    } else {
      var me = this;
      this.OnErrorClose = false;
      document.body.style.overflow = "hidden";
      var cover = this.prefix + "_formsimpan";
      addCoverPage2(cover, 1, true, false);
      delElem(cover);
      me.Close();
      $.ajax({
        type: "POST",
        url: this.url + "&tipe=clearAlokasi",
        success: function(data) {
          anggaranKasSKPD1PAD.formAlokasi();
        }
      });
    }
  },
  jenisAlokasiChangedQuick: function(idDPA) {
    if ($("#jenisAlokasi").val() == "BULANAN") {
      var me = this;
      this.OnErrorClose = false;
      document.body.style.overflow = "hidden";
      var cover = this.prefix + "_formsimpan";
      addCoverPage2(cover, 1, true, false);
      delElem(cover);
      me.Close();
      $.ajax({
        type: "POST",
        url: this.url + "&tipe=clearAlokasi",
        success: function(data) {
          anggaranKasSKPD1PAD.quickFormAlokasi(idDPA);
        }
      });
    } else if ($("#jenisAlokasi").val() == "TRIWULAN") {
      var me = this;
      this.OnErrorClose = false;
      document.body.style.overflow = "hidden";
      var cover = this.prefix + "_formsimpan";
      addCoverPage2(cover, 1, true, false);
      delElem(cover);
      me.Close();
      $.ajax({
        type: "POST",
        url: this.url + "&tipe=clearAlokasi",
        success: function(data) {
          anggaranKasSKPD1PAD.quickFormAlokasiTriwulan(idDPA);
        }
      });
    } else {
      var me = this;
      this.OnErrorClose = false;
      document.body.style.overflow = "hidden";
      var cover = this.prefix + "_formsimpan";
      addCoverPage2(cover, 1, true, false);
      delElem(cover);
      me.Close();
      $.ajax({
        type: "POST",
        url: this.url + "&tipe=clearAlokasi",
        success: function(data) {
          anggaranKasSKPD1PAD.quickFormAlokasi(idDPA);
        }
      });
    }
  },
  hitungSelisih: function(namaBantu) {
    var jan = Number($("#jan").val());
    var feb = Number($("#feb").val());
    var mar = Number($("#mar").val());
    var apr = Number($("#apr").val());
    var mei = Number($("#mei").val());
    var jun = Number($("#jun").val());
    var jul = Number($("#jul").val());
    var agu = Number($("#agu").val());
    var sep = Number($("#sep").val());
    var okt = Number($("#okt").val());
    var nop = Number($("#nop").val());
    var des = Number($("#des").val());

    var idPost = namaBantu.replace("bantu", "");
    idPost = idPost.toLowerCase();
    $("#" + namaBantu).text(
      "Rp. " + this.formatCurrency($("#" + idPost).val())
    );

    var jumlahHargaAlokasi = Number(
      jan + feb + mar + apr + mei + jun + jul + agu + sep + okt + nop + des
    );
    $("#jumlahHargaAlokasi").val(jumlahHargaAlokasi);
    var selisih = Number(
      Number($("#jumlahHargaForm").val()) -
        Number(
          jan + feb + mar + apr + mei + jun + jul + agu + sep + okt + nop + des
        )
    );
    $("#selisih").val(selisih);
    $("#bantuPenjumlahan").text(
      "Rp. " + this.formatCurrency(jumlahHargaAlokasi)
    );
    $("#bantuSelisih").text("Rp. " + this.formatCurrency(selisih));
  },
  hitung: function() {
    if ($("#jenisAlokasi").val() == "") {
      alert("Pilih Jenis Alokasi");
    } else if ($("#jenisPerhitungan").val() == "") {
      alert("Pilih Jenis Perhitungan");
    } else {
      if ($("#jenisAlokasi").val() == "BULANAN") {
        var jumlahHargaForm = $("#jumlahHargaForm").val();
        $("#jan").val(jumlahHargaForm / 12);
        $("#feb").val(jumlahHargaForm / 12);
        $("#mar").val(jumlahHargaForm / 12);
        $("#apr").val(jumlahHargaForm / 12);
        $("#mei").val(jumlahHargaForm / 12);
        $("#jun").val(jumlahHargaForm / 12);
        $("#jul").val(jumlahHargaForm / 12);
        $("#agu").val(jumlahHargaForm / 12);
        $("#sep").val(jumlahHargaForm / 12);
        $("#okt").val(jumlahHargaForm / 12);
        $("#nop").val(jumlahHargaForm / 12);
        $("#des").val(jumlahHargaForm / 12);
        this.hitungSelisih("bantuJan");
        this.hitungSelisih("bantuFeb");
        this.hitungSelisih("bantuApr");
        this.hitungSelisih("bantuMei");
        this.hitungSelisih("bantuJul");
        this.hitungSelisih("bantuAgu");
        this.hitungSelisih("bantuOkt");
        this.hitungSelisih("bantuNop");
        this.hitungSelisih("bantuMar");
        this.hitungSelisih("bantuJun");
        this.hitungSelisih("bantuSep");
        this.hitungSelisih("bantuDes");
      } else if ($("#jenisAlokasi").val() == "TRIWULAN") {
        var jumlahHargaForm = $("#jumlahHargaForm").val();
        $("#jan").val("");
        $("#feb").val("");
        $("#mar").val(jumlahHargaForm / 4);
        $("#apr").val("");
        $("#mei").val("");
        $("#jun").val(jumlahHargaForm / 4);
        $("#jul").val("");
        $("#agu").val("");
        $("#sep").val(jumlahHargaForm / 4);
        $("#okt").val("");
        $("#nop").val("");
        $("#des").val(jumlahHargaForm / 4);
        this.hitungSelisih("bantuMar");
        this.hitungSelisih("bantuJun");
        this.hitungSelisih("bantuSep");
        this.hitungSelisih("bantuDes");
      }
    }
  },
  saveAlokasi : function(){
			var me= this;
			this.OnErrorClose = false;
			document.body.style.overflow='hidden';
			var cover = this.prefix+'_formsimpan';
			addCoverPage2(cover,1,true,false);
			$.ajax({
				type:'POST',
        data:$('#'+this.prefix+'_form').serialize(),
				url: this.url+'&tipe=saveAlokasi',
			  	success: function(data) {
					var resp = eval('(' + data + ')');
					delElem(cover);
					if(resp.err == ''){
						me.Close();
						me.refreshList(true);
					}else{
						alert(resp.err);
						if(resp.err == 'Tahap Telah Habis'){
							window.location.reload();
						}
					}

				 }
			});


	},
  checkBoxRincianBelanjaChanged : function(){

    if ( $( "#checkBoxShowRincianBelanja" ).is( ":checked" ) ) {
      $("#filterRincian").val("show");
    }else{
      $("#filterRincian").val("hide");

    }

	},
  checkBoxSubRincianBelanjaChanged : function(){
    if ( $( "#checkBoxShowSubRincianBelanja" ).is( ":checked" ) ) {
      $("#filterSubRincian").val("show");
    }else{
      $("#filterSubRincian").val("hide");

    }

	},
});
",
    "size": "19908"
}