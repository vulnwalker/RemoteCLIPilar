{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Writer\/HTML.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/CiAgICAgKiBAcmV0dXJuICAgIHN0cmluZwogICAgICogQHRocm93cyBQSFBFeGNlbF9Xcml0ZXJfRXhjZXB0aW9uCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZW5lcmF0ZUhUTUxIZWFkZXIoJHBJbmNsdWRlU3R5bGVzID0gZmFsc2UpCiAgICB7CiAgICAgICAgLy8gUEhQRXhjZWwgb2JqZWN0IGtub3duPwogICAgICAgIGlmIChpc19udWxsKCR0aGlzLT5waHBFeGNlbCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX1dyaXRlcl9FeGNlcHRpb24oJ0ludGVybmFsIFBIUEV4Y2VsIG9iamVjdCBub3Qgc2V0IHRvIGFuIGluc3RhbmNlIG9mIGFuIG9iamVjdC4nKTsKICAgICAgICB9CgogICAgICAgIC8vIENvbnN0cnVjdCBIVE1MCiAgICAgICAgJHByb3BlcnRpZXMgPSAkdGhpcy0+cGhwRXhjZWwtPmdldFByb3BlcnRpZXMoKTsKICAgICAgICAkaHRtbCA9ICc8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIEhUTUwgNC4wMS8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9zdHJpY3QuZHRkIj4nIC4gUEhQX0VPTDsKICAgICAgICAkaHRtbCAuPSAnPCEtLSBHZW5lcmF0ZWQgYnkgUEhQRXhjZWwgLSBodHRwOi8vd3d3LnBocGV4Y2VsLm5ldCAtLT4nIC4gUEhQX0VPTDsKICAgICAgICAkaHRtbCAuPSAnPGh0bWw+JyAuIFBIUF9FT0w7CiAgICAgICAgJGh0bWwgLj0gJyAgPGhlYWQ+JyAuIFBIUF9FT0w7CiAgICAgICAgJGh0bWwgLj0gJyAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Ij4nIC4gUEhQX0VPTDsKICAgICAgICBpZiAoJHByb3BlcnRpZXMtPmdldFRpdGxlKCkgPiAnJykgewogICAgICAgICAgICAkaHRtbCAuPSAnICAgICAgPHRpdGxlPicgLiBodG1sc3BlY2lhbGNoYXJzKCRwcm9wZXJ0aWVzLT5nZXRUaXRsZSgpKSAuICc8L3RpdGxlPicgLiBQSFBfRU9MOwogICAgICAgIH0KICAgICAgICBpZiAoJHByb3BlcnRpZXMtPmdldENyZWF0b3IoKSA+ICcnKSB7CiAgICAgICAgICAgICRodG1sIC49ICcgICAgICA8bWV0YSBuYW1lPSJhdXRob3IiIGNvbnRlbnQ9IicgLiBodG1sc3BlY2lhbGNoYXJzKCRwcm9wZXJ0aWVzLT5nZXRDcmVhdG9yKCkpIC4gJyIgLz4nIC4gUEhQX0VPTDsKICAgICAgICB9CiAgICAgICAgaWYgKCRwcm9wZXJ0aWVzLT5nZXRUaXRsZSgpID4gJycpIHsKICAgICAgICAgICAgJGh0bWwgLj0gJyAgICAgIDxtZXRhIG5hbWU9InRpdGxlIiBjb250ZW50PSInIC4gaHRtbHNwZWNpYWxjaGFycygkcHJvcGVydGllcy0+Z2V0VGl0bGUoKSkgLiAnIiAvPicgLiBQSFBfRU9MOwogICAgICAgIH0KICAgICAgICBpZiAoJHByb3BlcnRpZXMtPmdldERlc2NyaXB0aW9uKCkgPiAnJykgewogICAgICAgICAgICAkaHRtbCAuPSAnICAgICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IicgLiBodG1sc3BlY2lhbGNoYXJzKCRwcm9wZXJ0aWVzLT5nZXREZXNjcmlwdGlvbigpKSAuICciIC8+JyAuIFBIUF9FT0w7CiAgICAgICAgfQogICAgICAgIGlmICgkcHJvcGVydGllcy0+Z2V0U3ViamVjdCgpID4gJycpIHsKICAgICAgICAgICAgJGh0bWwgLj0gJyAgICAgIDxtZXRhIG5hbWU9InN1YmplY3QiIGNvbnRlbnQ9IicgLiBodG1sc3BlY2lhbGNoYXJzKCRwcm9wZXJ0aWVzLT5nZXRTdWJqZWN0KCkpIC4gJyIgLz4nIC4gUEhQX0VPTDsKICAgICAgICB9CiAgICAgICAgaWYgKCRwcm9wZXJ0aWVzLT5nZXRLZXl3b3JkcygpID4gJycpIHsKICAgICAgICAgICAgJGh0bWwgLj0gJyAgICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSInIC4gaHRtbHNwZWNpYWxjaGFycygkcHJvcGVydGllcy0+Z2V0S2V5d29yZHMoKSkgLiAnIiAvPicgLiBQSFBfRU9MOwogICAgICAgIH0KICAgICAgICBpZiAoJHByb3BlcnRpZXMtPmdldENhdGVnb3J5KCkgPiAnJykgewogICAgICAgICAgICAkaHRtbCAuPSAnICAgICAgPG1ldGEgbmFtZT0iY2F0ZWdvcnkiIGNvbnRlbnQ9IicgLiBodG1sc3BlY2lhbGNoYXJzKCRwcm9wZXJ0aWVzLT5nZXRDYXRlZ29yeSgpKSAuICciIC8+JyAuIFBIUF9FT0w7CiAgICAgICAgfQogICAgICAgIGlmICgkcHJvcGVydGllcy0+Z2V0Q29tcGFueSgpID4gJycpIHsKICAgICAgICAgICAgJGh0bWwgLj0gJyAgICAgIDxtZXRhIG5hbWU9ImNvbXBhbnkiIGNvbnRlbnQ9IicgLiBodG1sc3BlY2lhbGNoYXJzKCRwcm9wZXJ0aWVzLT5nZXRDb21wYW55KCkpIC4gJyIgLz4nIC4gUEhQX0VPTDsKICAgICAgICB9CiAgICAgICAgaWYgKCRwcm9wZXJ0aWVzLT5nZXRNYW5hZ2VyKCkgPiAnJykgewogICAgICAgICAgICAkaHRtbCAuPSAnICAgICAgPG1ldGEgbmFtZT0ibWFuYWdlciIgY29udGVudD0iJyAuIGh0bWxzcGVjaWFsY2hhcnMoJHByb3BlcnRpZXMtPmdldE1hbmFnZXIoKSkgLiAnIiAvPicgLiBQSFBfRU9MOwogICAgICAgIH0KCiAgICAgICAgaWYgKCRwSW5jbHVkZVN0eWxlcykgewogICAgICAgICAgICAkaHRtbCAuPSAkdGhpcy0+Z2VuZXJhdGVTdHlsZXModHJ1ZSk7CiAgICAgICAgfQoKICAgICAgICAkaHRtbCAuPSAnICA8L2hlYWQ+JyAuIFBIUF9FT0w7CiAgICAgICAgJGh0bWwgLj0gJycgLiBQSFBfRU9MOwogICAgICAgICRodG1sIC49ICcgIDxib2R5PicgLiBQSFBfRU9MOwoKICAgICAgICByZXR1cm4gJGh0bWw7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZW5lcmF0ZSBzaGVldCBkYXRhCiAgICAgKgogICAgICogQHJldHVybiAgICBzdHJpbmcKICAgICAqIEB0aHJvd3MgUEhQRXhjZWxfV3JpdGVyX0V4Y2VwdGlvbgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2VuZXJhdGVTaGVldERhdGEoKQogICAgewogICAgICAgIC8vIFBIUEV4Y2VsIG9iamVjdCBrbm93bj8KICAgICAgICBpZiAoaXNfbnVsbCgkdGhpcy0+cGhwRXhjZWwpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9Xcml0ZXJfRXhjZXB0aW9uKCdJbnRlcm5hbCBQSFBFeGNlbCBvYmplY3Qgbm90IHNldCB0byBhbiBpbnN0YW5jZSBvZiBhbiBvYmplY3QuJyk7CiAgICAgICAgfQoKICAgICAgICAvLyBFbnN1cmUgdGhhdCBTcGFucyBoYXZlIGJlZW4gY2FsY3VsYXRlZD8KICAgICAgICBpZiAoJHRoaXMtPnNoZWV0SW5kZXggIT09IG51bGwgfHwgISR0aGlzLT5zcGFuc0FyZUNhbGN1bGF0ZWQpIHsKICAgICAgICAgICAgJHRoaXMtPmNhbGN1bGF0ZVNwYW5zKCk7CiAgICAgICAgfQoKICAgICAgICAvLyBGZXRjaCBzaGVldHMKICAgICAgICAkc2hlZXRzID0gYXJyYXkoKTsKICAgICAgICBpZiAoaXNfbnVsbCgkdGhpcy0+c2hlZXRJbmRleCkpIHsKICAgICAgICAgICAgJHNoZWV0cyA9ICR0aGlzLT5waHBFeGNlbC0+Z2V0QWxsU2hlZXRzKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHNoZWV0c1tdID0gJHRoaXMtPnBocEV4Y2VsLT5nZXRTaGVldCgkdGhpcy0+c2hlZXRJbmRleCk7CiAgICAgICAgfQoKICAgICAgICAvLyBDb25zdHJ1Y3QgSFRNTAogICAgICAgICRodG1sID0gJyc7CgogICAgICAgIC8vIExvb3AgYWxsIHNoZWV0cwogICAgICAgICRzaGVldElkID0gMDsKICAgICAgICBmb3JlYWNoICgkc2hlZXRzIGFzICRzaGVldCkgewogICAgICAgICAgICAvLyBXcml0ZSB0YWJsZSBoZWFkZXIKICAgICAgICAgICAgJGh0bWwgLj0gJHRoaXMtPmdlbmVyYXRlVGFibGVIZWFkZXIoJHNoZWV0KTsKCiAgICAgICAgICAgIC8vIEdldCB3b3Jrc2hlZXQgZGltZW5zaW9uCiAgICAgICAgICAgICRkaW1lbnNpb24gPSBleHBsb2RlKCc6JywgJHNoZWV0LT5jYWxjdWxhdGVXb3Jrc2hlZXREaW1lbnNpb24oKSk7CiAgICAgICAgICAgICRkaW1lbnNpb25bMF0gPSBQSFBFeGNlbF9DZWxsOjpjb29yZGluYXRlRnJvbVN0cmluZygkZGltZW5zaW9uWzBdKTsKICAgICAgICAgICAgJGRpbWVuc2lvblswXVswXSA9IFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkZGltZW5zaW9uWzBdWzBdKSAtIDE7CiAgICAgICAgICAgICRkaW1lbnNpb25bMV0gPSBQSFBFeGNlbF9DZWxsOjpjb29yZGluYXRlRnJvbVN0cmluZygkZGltZW5zaW9uWzFdKTsKICAgICAgICAgICAgJGRpbWVuc2lvblsxXVswXSA9IFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkZGltZW5zaW9uWzFdWzBdKSAtIDE7CgogICAgICAgICAgICAvLyByb3cgbWluLG1heAogICAgICAgICAgICAkcm93TWluID0gJGRpbWVuc2lvblswXVsxXTsKICAgICAgICAgICAgJHJvd01heCA9ICRkaW1lbnNpb25bMV1bMV07CgogICAgICAgICAgICAvLyBjYWxjdWxhdGUgc3RhcnQgb2YgPHRib2R5PiwgPHRoZWFkPgogICAgICAgICAgICAkdGJvZHlTdGFydCA9ICRyb3dNaW47CiAgICAgICAgICAgICR0aGVhZFN0YXJ0ID0gJHRoZWFkRW5kICAgPSAwOyAvLyBkZWZhdWx0OiBubyA8dGhlYWQ+ICAgIG5vIDwvdGhlYWQ+CiAgICAgICAgICAgIGlmICgkc2hlZXQtPmdldFBhZ2VTZXR1cCgpLT5pc1Jvd3NUb1JlcGVhdEF0VG9wU2V0KCkpIHsKICAgICAgICAgICAgICAgICRyb3dzVG9SZXBlYXRBdFRvcCA9ICRzaGVldC0+Z2V0UGFnZVNldHVwKCktPmdldFJvd3NUb1JlcGVhdEF0VG9wKCk7CgogICAgICAgICAgICAgICAgLy8gd2UgY2FuIG9ubHkgc3VwcG9ydCByZXBlYXRpbmcgcm93cyB0aGF0IHN0YXJ0IGF0IHRvcCByb3cKICAgICAgICAgICAgICAgIGlmICgkcm93c1RvUmVwZWF0QXRUb3BbMF0gPT0gMSkgewogICAgICAgICAgICAgICAgICAgICR0aGVhZFN0YXJ0ID0gJHJvd3NUb1JlcGVhdEF0VG9wWzBdOwogICAgICAgICAgICAgICAgICAgICR0aGVhZEVuZCAgID0gJHJvd3NUb1JlcGVhdEF0VG9wWzFdOwogICAgICAgICAgICAgICAgICAgICR0Ym9keVN0YXJ0ID0gJHJvd3NUb1JlcGVhdEF0VG9wWzFdICsgMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGNlbGxzCiAgICAgICAgICAgICRyb3cgPSAkcm93TWluLTE7CiAgICAgICAgICAgIHdoaWxlICgkcm93KysgPCAkcm93TWF4KSB7CiAgICAgICAgICAgICAgICAvLyA8dGhlYWQ+ID8KICAgICAgICAgICAgICAgIGlmICgkcm93ID09ICR0aGVhZFN0YXJ0KSB7CiAgICAgICAgICAgICAgICAgICAgJGh0bWwgLj0gJyAgICAgICAgPHRoZWFkPicgLiBQSFBfRU9MOwogICAgICAgICAgICAgICAgICAgICRjZWxsVHlwZSA9ICd0aCc7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gPHRib2R5PiA\/CiAgICAgICAgICAgICAgICBpZiAoJHJvdyA9PSAkdGJvZHlTdGFydCkgewogICAgICAgICAgICAgICAgICAgICRodG1sIC49ICcgICAgICAgIDx0Ym9keT4nIC4gUEhQX0VPTDsKICAgICAgICAgICAgICAgICAgICAkY2VsbFR5cGUgPSAndGQnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIFdyaXRlIHJvdyBpZiB0aGVyZSBhcmUgSFRNTCB0YWJsZSBjZWxscyBpbiBpdAogICAgICAgICAgICAgICAgaWYgKCFpc3NldCgkdGhpcy0+aXNTcGFubmVkUm93WyRzaGVldC0+Z2V0UGFyZW50KCktPmdldEluZGV4KCRzaGVldCldWyRyb3ddKSkgewogICAgICAgICAgICAgICAgICAgIC8vIFN0YXJ0IGEgbmV3IHJvd0RhdGEKICAgICAgICAgICAgICAgICAgICAkcm93RGF0YSA9IGFycmF5KCk7CiAgICAgICAgICAgICAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGNvbHVtbnMKICAgICAgICAgICAgICAgICAgICAkY29sdW1uID0gJGRpbWVuc2lvblswXVswXSAtIDE7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCRjb2x1bW4rKyA8ICRkaW1lbnNpb25bMV1bMF0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2VsbCBleGlzdHM\/CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2hlZXQtPmNlbGxFeGlzdHNCeUNvbHVtbkFuZFJvdygkY29sdW1uLCAkcm93KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvd0RhdGFbJGNvbHVtbl0gPSBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJGNvbHVtbikgLiAkcm93OwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvd0RhdGFbJGNvbHVtbl0gPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkaHRtbCAuPSAkdGhpcy0+Z2VuZXJhdGVSb3coJHNoZWV0LCAkcm93RGF0YSwgJHJvdyAtIDEsICRjZWxsVHlwZSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gPC90aGVhZD4gPwogICAgICAgICAgICAgICAgaWYgKCRyb3cgPT0gJHRoZWFkRW5kKSB7CiAgICAgICAgICAgICAgICAgICAgJGh0bWwgLj0gJyAgICAgICAgPC90aGVhZD4nIC4gUEhQX0VPTDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkaHRtbCAuPSAkdGhpcy0+ZXh0ZW5kUm93c0ZvckNoYXJ0c0FuZEltYWdlcygkc2hlZXQsICRyb3cpOwoKICAgICAgICAgICAgLy8gQ2xvc2UgdGFibGUgYm9keS4KICAgICAgICAgICAgJGh0bWwgLj0gJyAgICAgICAgPC90Ym9keT4nIC4gUEhQX0VPTDsKCiAgICAgICAgICAgIC8vIFdyaXRlIHRhYmxlIGZvb3RlcgogICAgICAgICAgICAkaHRtbCAuPSAkdGhpcy0+Z2VuZXJhdGVUYWJsZUZvb3RlcigpOwoKICAgICAgICAgICAgLy8gV3JpdGluZyBQREY\\/IChodG1sIHsgfSkKICAgICAqIEByZXR1cm4gICAgYXJyYXkKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfV3JpdGVyX0V4Y2VwdGlvbgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gYnVpbGRDU1MoJGdlbmVyYXRlU3Vycm91bmRpbmdIVE1MID0gdHJ1ZSkKICAgIHsKICAgICAgICAvLyBQSFBFeGNlbCBvYmplY3Qga25vd24\\/ICcgZ3JpZGxpbmVzJyA6ICcnOwogICAgICAgICAgICAkaHRtbCAuPSAnICAgIDx0YWJsZSBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSIwIiBjZWxsc3BhY2luZz0iMCIgaWQ9InNoZWV0JyAuICRzaGVldEluZGV4IC4gJyIgY2xhc3M9InNoZWV0JyAuICRzaGVldEluZGV4IC4gJGdyaWRsaW5lcyAuICciPicgLiBQSFBfRU9MOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRzdHlsZSA9IGlzc2V0KCR0aGlzLT5jc3NTdHlsZXNbJ3RhYmxlJ10pID8KICAgICAgICAgICAgICAgICR0aGlzLT5hc3NlbWJsZUNTUygkdGhpcy0+Y3NzU3R5bGVzWyd0YWJsZSddKSA6ICcnOwoKICAgICAgICAgICAgaWYgKCR0aGlzLT5pc1BkZiAmJiAkcFNoZWV0LT5nZXRTaG93R3JpZGxpbmVzKCkpIHsKICAgICAgICAgICAgICAgICRodG1sIC49ICcgICAgPHRhYmxlIGJvcmRlcj0iMSIgY2VsbHBhZGRpbmc9IjEiIGlkPSJzaGVldCcgLiAkc2hlZXRJbmRleCAuICciIGNlbGxzcGFjaW5nPSIxIiBzdHlsZT0iJyAuICRzdHlsZSAuICciPicgLiBQSFBfRU9MOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJGh0bWwgLj0gJyAgICA8dGFibGUgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMSIgaWQ9InNoZWV0JyAuICRzaGVldEluZGV4IC4gJyIgY2VsbHNwYWNpbmc9IjAiIHN0eWxlPSInIC4gJHN0eWxlIC4gJyI+JyAuIFBIUF9FT0w7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIFdyaXRlIDxjb2w+IGVsZW1lbnRzCiAgICAgICAgJGhpZ2hlc3RDb2x1bW5JbmRleCA9IFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkcFNoZWV0LT5nZXRIaWdoZXN0Q29sdW1uKCkpIC0gMTsKICAgICAgICAkaSA9IC0xOwogICAgICAgIHdoaWxlICgkaSsrIDwgJGhpZ2hlc3RDb2x1bW5JbmRleCkgewogICAgICAgICAgICBpZiAoISR0aGlzLT5pc1BkZikgewogICAgICAgICAgICAgICAgaWYgKCEkdGhpcy0+dXNlSW5saW5lQ3NzKSB7CiAgICAgICAgICAgICAgICAgICAgJGh0bWwgLj0gJyAgICAgICAgPGNvbCBjbGFzcz0iY29sJyAuICRpIC4gJyI+JyAuIFBIUF9FT0w7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRzdHlsZSA9IGlzc2V0KCR0aGlzLT5jc3NTdHlsZXNbJ3RhYmxlLnNoZWV0JyAuICRzaGVldEluZGV4IC4gJyBjb2wuY29sJyAuICRpXSkgPwogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+YXNzZW1ibGVDU1MoJHRoaXMtPmNzc1N0eWxlc1sndGFibGUuc2hlZXQnIC4gJHNoZWV0SW5kZXggLiAnIGNvbC5jb2wnIC4gJGldKSA6ICcnOwogICAgICAgICAgICAgICAgICAgICRodG1sIC49ICcgICAgICAgIDxjb2wgc3R5bGU9IicgLiAkc3R5bGUgLiAnIj4nIC4gUEhQX0VPTDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRodG1sOwogICAgfQoKICAgIC8qKgogICAgICogR2VuZXJhdGUgdGFibGUgZm9vdGVyCiAgICAgKgogICAgICogQHRocm93cyAgICBQSFBFeGNlbF9Xcml0ZXJfRXhjZXB0aW9uCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gZ2VuZXJhdGVUYWJsZUZvb3RlcigpCiAgICB7CiAgICAgICAgJGh0bWwgPSAnICAgIDwvdGFibGU+JyAuIFBIUF9FT0w7CgogICAgICAgIHJldHVybiAkaHRtbDsKICAgIH0KCiAgICAvKioKICAgICAqIEdlbmVyYXRlIHJvdwogICAgICoKICAgICAqIEBwYXJhbSAgICBQSFBFeGNlbF9Xb3Jrc2hlZXQgICAgJHBTaGVldCAgICAgICAgICAgIFBIUEV4Y2VsX1dvcmtzaGVldAogICAgICogQHBhcmFtICAgIGFycmF5ICAgICAgICAgICAgICAgICRwVmFsdWVzICAgICAgICBBcnJheSBjb250YWluaW5nIGNlbGxzIGluIGEgcm93CiAgICAgKiBAcGFyYW0gICAgaW50ICAgICAgICAgICAgICAgICAgICAkcFJvdyAgICAgICAgICAgIFJvdyBudW1iZXIgKDAtYmFzZWQpCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZwogICAgICogQHRocm93cyAgICBQSFBFeGNlbF9Xcml0ZXJfRXhjZXB0aW9uCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gZ2VuZXJhdGVSb3coUEhQRXhjZWxfV29ya3NoZWV0ICRwU2hlZXQsICRwVmFsdWVzID0gbnVsbCwgJHBSb3cgPSAwLCAkY2VsbFR5cGUgPSAndGQnKQogICAgewogICAgICAgIGlmIChpc19hcnJheSgkcFZhbHVlcykpIHsKICAgICAgICAgICAgLy8gQ29uc3RydWN0IEhUTUwKICAgICAgICAgICAgJGh0bWwgPSAnJzsKCiAgICAgICAgICAgIC8vIFNoZWV0IGluZGV4CiAgICAgICAgICAgICRzaGVldEluZGV4ID0gJHBTaGVldC0+Z2V0UGFyZW50KCktPmdldEluZGV4KCRwU2hlZXQpOwoKICAgICAgICAgICAgLy8gRG9tUERGIGFuZCBicmVha3MKICAgICAgICAgICAgaWYgKCR0aGlzLT5pc1BkZiAmJiBjb3VudCgkcFNoZWV0LT5nZXRCcmVha3MoKSkgPiAwKSB7CiAgICAgICAgICAgICAgICAkYnJlYWtzID0gJHBTaGVldC0+Z2V0QnJlYWtzKCk7CgogICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgYSBicmVhayBpcyBuZWVkZWQgYmVmb3JlIHRoaXMgcm93CiAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJGJyZWFrc1snQScgLiAkcFJvd10pKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gY2xvc2UgdGFibGU6IDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgJGh0bWwgLj0gJHRoaXMtPmdlbmVyYXRlVGFibGVGb290ZXIoKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gaW5zZXJ0IHBhZ2UgYnJlYWsKICAgICAgICAgICAgICAgICAgICAkaHRtbCAuPSAnPGRpdiBzdHlsZT0icGFnZS1icmVhay1iZWZvcmU6YWx3YXlzIiAvPic7CgogICAgICAgICAgICAgICAgICAgIC8vIG9wZW4gdGFibGUgYWdhaW46IDx0YWJsZT4gKyA8Y29sPiBldGMuCiAgICAgICAgICAgICAgICAgICAgJGh0bWwgLj0gJHRoaXMtPmdlbmVyYXRlVGFibGVIZWFkZXIoJHBTaGVldCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFdyaXRlIHJvdyBzdGFydAogICAgICAgICAgICBpZiAoISR0aGlzLT51c2VJbmxpbmVDc3MpIHsKICAgICAgICAgICAgICAgICRodG1sIC49ICcgICAgICAgICAgPHRyIGNsYXNzPSJyb3cnIC4gJHBSb3cgLiAnIj4nIC4gUEhQX0VPTDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRzdHlsZSA9IGlzc2V0KCR0aGlzLT5jc3NTdHlsZXNbJ3RhYmxlLnNoZWV0JyAuICRzaGVldEluZGV4IC4gJyB0ci5yb3cnIC4gJHBSb3ddKQogICAgICAgICAgICAgICAgICAgID8gJHRoaXMtPmFzc2VtYmxlQ1NTKCR0aGlzLT5jc3NTdHlsZXNbJ3RhYmxlLnNoZWV0JyAuICRzaGVldEluZGV4IC4gJyB0ci5yb3cnIC4gJHBSb3ddKSA6ICcnOwoKICAgICAgICAgICAgICAgICRodG1sIC49ICcgICAgICAgICAgPHRyIHN0eWxlPSInIC4gJHN0eWxlIC4gJyI+JyAuIFBIUF9FT0w7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFdyaXRlIGNlbGxzCiAgICAgICAgICAgICRjb2xOdW0gPSAwOwogICAgICAgICAgICBmb3JlYWNoICgkcFZhbHVlcyBhcyAkY2VsbEFkZHJlc3MpIHsKICAgICAgICAgICAgICAgICRjZWxsID0gKCRjZWxsQWRkcmVzcyA+ICcnKSA\/ICRwU2hlZXQtPmdldENlbGwoJGNlbGxBZGRyZXNzKSA6ICcnOwogICAgICAgICAgICAgICAgJGNvb3JkaW5hdGUgPSBQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJGNvbE51bSkgLiAoJHBSb3cgKyAxKTsKICAgICAgICAgICAgICAgIGlmICghJHRoaXMtPnVzZUlubGluZUNzcykgewogICAgICAgICAgICAgICAgICAgICRjc3NDbGFzcyA9ICcnOwogICAgICAgICAgICAgICAgICAgICRjc3NDbGFzcyA9ICdjb2x1bW4nIC4gJGNvbE51bTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJGNzc0NsYXNzID0gYXJyYXkoKTsKICAgICAgICAgICAgICAgICAgICBpZiAoJGNlbGxUeXBlID09ICd0aCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5jc3NTdHlsZXNbJ3RhYmxlLnNoZWV0JyAuICRzaGVldEluZGV4IC4gJyB0aC5jb2x1bW4nIC4gJGNvbE51bV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y3NzU3R5bGVzWyd0YWJsZS5zaGVldCcgLiAkc2hlZXRJbmRleCAuICcgdGguY29sdW1uJyAuICRjb2xOdW1dOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5jc3NTdHlsZXNbJ3RhYmxlLnNoZWV0JyAuICRzaGVldEluZGV4IC4gJyB0ZC5jb2x1bW4nIC4gJGNvbE51bV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y3NzU3R5bGVzWyd0YWJsZS5zaGVldCcgLiAkc2hlZXRJbmRleCAuICcgdGQuY29sdW1uJyAuICRjb2xOdW1dOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGNvbFNwYW4gPSAxOwogICAgICAgICAgICAgICAgJHJvd1NwYW4gPSAxOwoKICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemUKICAgICAgICAgICAgICAgICRjZWxsRGF0YSA9ICcmbmJzcDsnOwoKICAgICAgICAgICAgICAgIC8vIFBIUEV4Y2VsX0NlbGwKICAgICAgICAgICAgICAgIGlmICgkY2VsbCBpbnN0YW5jZW9mIFBIUEV4Y2VsX0NlbGwpIHsKICAgICAgICAgICAgICAgICAgICAkY2VsbERhdGEgPSAnJzsKICAgICAgICAgICAgICAgICAgICBpZiAoaXNfbnVsbCgkY2VsbC0+Z2V0UGFyZW50KCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRjZWxsLT5hdHRhY2goJHBTaGVldCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vIFZhbHVlCiAgICAgICAgICAgICAgICAgICAgaWYgKCRjZWxsLT5nZXRWYWx1ZSgpIGluc3RhbmNlb2YgUEhQRXhjZWxfUmljaFRleHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHJpY2ggdGV4dCBlbGVtZW50cwogICAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudHMgPSAkY2VsbC0+Z2V0VmFsdWUoKS0+Z2V0UmljaFRleHRFbGVtZW50cygpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkZWxlbWVudHMgYXMgJGVsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJpY2ggdGV4dCBzdGFydD8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZWxlbWVudCBpbnN0YW5jZW9mIFBIUEV4Y2VsX1JpY2hUZXh0X1J1bikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZWxsRGF0YSAuPSAnPHNwYW4gc3R5bGU9IicgLiAkdGhpcy0+YXNzZW1ibGVDU1MoJHRoaXMtPmNyZWF0ZUNTU1N0eWxlRm9udCgkZWxlbWVudC0+Z2V0Rm9udCgpKSkgLiAnIj4nOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGVsZW1lbnQtPmdldEZvbnQoKS0+Z2V0U3VwZXJTY3JpcHQoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2VsbERhdGEgLj0gJzxzdXA+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAoJGVsZW1lbnQtPmdldEZvbnQoKS0+Z2V0U3ViU2NyaXB0KCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxEYXRhIC49ICc8c3ViPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgVVRGOCBkYXRhIHRvIFBDREFUQQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxUZXh0ID0gJGVsZW1lbnQtPmdldFRleHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZWxsRGF0YSAuPSBodG1sc3BlY2lhbGNoYXJzKCRjZWxsVGV4dCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRlbGVtZW50IGluc3RhbmNlb2YgUEhQRXhjZWxfUmljaFRleHRfUnVuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRlbGVtZW50LT5nZXRGb250KCktPmdldFN1cGVyU2NyaXB0KCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxEYXRhIC49ICc8L3N1cD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZWlmICgkZWxlbWVudC0+Z2V0Rm9udCgpLT5nZXRTdWJTY3JpcHQoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2VsbERhdGEgLj0gJzwvc3ViPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2VsbERhdGEgLj0gJzwvc3Bhbj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLT5wcmVDYWxjdWxhdGVGb3JtdWxhcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxEYXRhID0gUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0Ojp0b0Zvcm1hdHRlZFN0cmluZygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2VsbC0+Z2V0Q2FsY3VsYXRlZFZhbHVlKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBTaGVldC0+Z2V0UGFyZW50KCktPmdldENlbGxYZkJ5SW5kZXgoJGNlbGwtPmdldFhmSW5kZXgoKSktPmdldE51bWJlckZvcm1hdCgpLT5nZXRGb3JtYXRDb2RlKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkoJHRoaXMsICdmb3JtYXRDb2xvcicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxEYXRhID0gUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0Ojp0b0Zvcm1hdHRlZFN0cmluZygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2VsbC0+Z2V0VmFsdWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcFNoZWV0LT5nZXRQYXJlbnQoKS0+Z2V0Q2VsbFhmQnlJbmRleCgkY2VsbC0+Z2V0WGZJbmRleCgpKS0+Z2V0TnVtYmVyRm9ybWF0KCktPmdldEZvcm1hdENvZGUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheSgkdGhpcywgJ2Zvcm1hdENvbG9yJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxEYXRhID0gaHRtbHNwZWNpYWxjaGFycygkY2VsbERhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHBTaGVldC0+Z2V0UGFyZW50KCktPmdldENlbGxYZkJ5SW5kZXgoJGNlbGwtPmdldFhmSW5kZXgoKSktPmdldEZvbnQoKS0+Z2V0U3VwZXJTY3JpcHQoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxEYXRhID0gJzxzdXA+Jy4kY2VsbERhdGEuJzwvc3VwPic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZWlmICgkcFNoZWV0LT5nZXRQYXJlbnQoKS0+Z2V0Q2VsbFhmQnlJbmRleCgkY2VsbC0+Z2V0WGZJbmRleCgpKS0+Z2V0Rm9udCgpLT5nZXRTdWJTY3JpcHQoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxEYXRhID0gJzxzdWI+Jy4kY2VsbERhdGEuJzwvc3ViPic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnRzIHRoZSBjZWxsIGNvbnRlbnQgc28gdGhhdCBzcGFjZXMgb2NjdXJpbmcgYXQgYmVnaW5uaW5nIG9mIGVhY2ggbmV3IGxpbmUgYXJlIHJlcGxhY2VkIGJ5ICZuYnNwOwogICAgICAgICAgICAgICAgICAgIC8vIEV4YW1wbGU6ICIgIEhlbGxvXG4gdG8gdGhlIHdvcmxkIiBpcyBjb252ZXJ0ZWQgdG8gIiZuYnNwOyZuYnNwO0hlbGxvXG4mbmJzcDt0byB0aGUgd29ybGQiCiAgICAgICAgICAgICAgICAgICAgJGNlbGxEYXRhID0gcHJlZ19yZXBsYWNlKCIvKD9tKSg\/Ol58XFxHKSAvIiwgJyZuYnNwOycsICRjZWxsRGF0YSk7CgogICAgICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgbmV3bGluZSAiXG4iIHRvICc8YnI+JwogICAgICAgICAgICAgICAgICAgICRjZWxsRGF0YSA9IG5sMmJyKCRjZWxsRGF0YSk7CgogICAgICAgICAgICAgICAgICAgIC8vIEV4dGVuZCBDU1MgY2xhc3M\\",
    "size": "59453"
}