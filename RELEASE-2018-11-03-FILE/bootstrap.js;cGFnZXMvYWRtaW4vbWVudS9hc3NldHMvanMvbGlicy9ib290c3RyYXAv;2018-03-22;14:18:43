{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/bootstrap\/bootstrap.js",
    "lastUpdate": "2018-03-22+14:18:43.91",
    "contentFile": "LyohCiAqIEJvb3RzdHJhcCB2My4zLjIgKGh0dHA6Ly9nZXRib290c3RyYXAuY29tKQogKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy4KICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSkKICovCgppZiAodHlwZW9mIGpRdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHsKICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeScpCn0KCitmdW5jdGlvbiAoJCkgewogICd1c2Ugc3RyaWN0JzsKICB2YXIgdmVyc2lvbiA9ICQuZm4uanF1ZXJ5LnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKQogIGlmICgodmVyc2lvblswXSA8IDIgJiYgdmVyc2lvblsxXSA8IDkpIHx8ICh2ZXJzaW9uWzBdID09IDEgJiYgdmVyc2lvblsxXSA9PSA5ICYmIHZlcnNpb25bMl0gPCAxKSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkgdmVyc2lvbiAxLjkuMSBvciBoaWdoZXInKQogIH0KfShqUXVlcnkpOwoKLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIEJvb3RzdHJhcDogdHJhbnNpdGlvbi5qcyB2My4zLjIKICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdHJhbnNpdGlvbnMKICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLgogKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKQogKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi8KCgorZnVuY3Rpb24gKCQpIHsKICAndXNlIHN0cmljdCc7CgogIC8vIENTUyBUUkFOU0lUSU9OIFNVUFBPUlQgKFNob3V0b3V0OiBodHRwOi8vd3d3Lm1vZGVybml6ci5jb20vKQogIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkgewogICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9vdHN0cmFwJykKCiAgICB2YXIgdHJhbnNFbmRFdmVudE5hbWVzID0gewogICAgICBXZWJraXRUcmFuc2l0aW9uIDogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLAogICAgICBNb3pUcmFuc2l0aW9uICAgIDogJ3RyYW5zaXRpb25lbmQnLAogICAgICBPVHJhbnNpdGlvbiAgICAgIDogJ29UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kJywKICAgICAgdHJhbnNpdGlvbiAgICAgICA6ICd0cmFuc2l0aW9uZW5kJwogICAgfQoKICAgIGZvciAodmFyIG5hbWUgaW4gdHJhbnNFbmRFdmVudE5hbWVzKSB7CiAgICAgIGlmIChlbC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIHsgZW5kOiB0cmFuc0VuZEV2ZW50TmFtZXNbbmFtZV0gfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZhbHNlIC8vIGV4cGxpY2l0IGZvciBpZTggKCAgLl8uKQogIH0KCiAgLy8gaHR0cDovL2Jsb2cuYWxleG1hY2Nhdy5jb20vY3NzLXRyYW5zaXRpb25zCiAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChkdXJhdGlvbikgewogICAgdmFyIGNhbGxlZCA9IGZhbHNlCiAgICB2YXIgJGVsID0gdGhpcwogICAgJCh0aGlzKS5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZSB9KQogICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkgeyBpZiAoIWNhbGxlZCkgJCgkZWwpLnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKSB9CiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkdXJhdGlvbikKICAgIHJldHVybiB0aGlzCiAgfQoKICAkKGZ1bmN0aW9uICgpIHsKICAgICQuc3VwcG9ydC50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkVuZCgpCgogICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuCgogICAgJC5ldmVudC5zcGVjaWFsLmJzVHJhbnNpdGlvbkVuZCA9IHsKICAgICAgYmluZFR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCwKICAgICAgZGVsZWdhdGVUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsCiAgICAgIGhhbmRsZTogZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoJChlLnRhcmdldCkuaXModGhpcykpIHJldHVybiBlLmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKICAgICAgfQogICAgfQogIH0pCgp9KGpRdWVyeSk7CgovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogQm9vdHN0cmFwOiBhbGVydC5qcyB2My4zLjIKICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWxlcnRzCiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy4KICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSkKICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgoKK2Z1bmN0aW9uICgkKSB7CiAgJ3VzZSBzdHJpY3QnOwoKICAvLyBBTEVSVCBDTEFTUyBERUZJTklUSU9OCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PQoKICB2YXIgZGlzbWlzcyA9ICdbZGF0YS1kaXNtaXNzPSJhbGVydCJdJwogIHZhciBBbGVydCAgID0gZnVuY3Rpb24gKGVsKSB7CiAgICAkKGVsKS5vbignY2xpY2snLCBkaXNtaXNzLCB0aGlzLmNsb3NlKQogIH0KCiAgQWxlcnQuVkVSU0lPTiA9ICczLjMuMicKCiAgQWxlcnQuVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MAoKICBBbGVydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZSkgewogICAgdmFyICR0aGlzICAgID0gJCh0aGlzKQogICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKQoKICAgIGlmICghc2VsZWN0b3IpIHsKICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJykKICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig\/PSNbXlxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3CiAgICB9CgogICAgdmFyICRwYXJlbnQgPSAkKHNlbGVjdG9yKQoKICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KCkKCiAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7CiAgICAgICRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCcuYWxlcnQnKQogICAgfQoKICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnY2xvc2UuYnMuYWxlcnQnKSkKCiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuCgogICAgJHBhcmVudC5yZW1vdmVDbGFzcygnaW4nKQoKICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoKSB7CiAgICAgIC8vIGRldGFjaCBmcm9tIHBhcmVudCwgZmlyZSBldmVudCB0aGVuIGNsZWFuIHVwIGRhdGEKICAgICAgJHBhcmVudC5kZXRhY2goKS50cmlnZ2VyKCdjbG9zZWQuYnMuYWxlcnQnKS5yZW1vdmUoKQogICAgfQoKICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmICRwYXJlbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA\/CiAgICAgICRwYXJlbnQKICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCByZW1vdmVFbGVtZW50KQogICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6CiAgICAgIHJlbW92ZUVsZW1lbnQoKQogIH0KCgogIC8vIEFMRVJUIFBMVUdJTiBERUZJTklUSU9OCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT0KCiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikgewogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgIHZhciAkdGhpcyA9ICQodGhpcykKICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuYWxlcnQnKQoKICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hbGVydCcsIChkYXRhID0gbmV3IEFsZXJ0KHRoaXMpKSkKICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKQogICAgfSkKICB9CgogIHZhciBvbGQgPSAkLmZuLmFsZXJ0CgogICQuZm4uYWxlcnQgICAgICAgICAgICAgPSBQbHVnaW4KICAkLmZuLmFsZXJ0LkNvbnN0cnVjdG9yID0gQWxlcnQKCgogIC8vIEFMRVJUIE5PIENPTkZMSUNUCiAgLy8gPT09PT09PT09PT09PT09PT0KCiAgJC5mbi5hbGVydC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgewogICAgJC5mbi5hbGVydCA9IG9sZAogICAgcmV0dXJuIHRoaXMKICB9CgoKICAvLyBBTEVSVCBEQVRBLUFQSQogIC8vID09PT09PT09PT09PT09CgogICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5hbGVydC5kYXRhLWFwaScsIGRpc21pc3MsIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSkKCn0oalF1ZXJ5KTsKCi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBCb290c3RyYXA6IGJ1dHRvbi5qcyB2My4zLjIKICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYnV0dG9ucwogKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuCiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpCiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoKCitmdW5jdGlvbiAoJCkgewogICd1c2Ugc3RyaWN0JzsKCiAgLy8gQlVUVE9OIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgogIHZhciBCdXR0b24gPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykgewogICAgdGhpcy4kZWxlbWVudCAgPSAkKGVsZW1lbnQpCiAgICB0aGlzLm9wdGlvbnMgICA9ICQuZXh0ZW5kKHt9LCBCdXR0b24uREVGQVVMVFMsIG9wdGlvbnMpCiAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlCiAgfQoKICBCdXR0b24uVkVSU0lPTiAgPSAnMy4zLjInCgogIEJ1dHRvbi5ERUZBVUxUUyA9IHsKICAgIGxvYWRpbmdUZXh0OiAnbG9hZGluZy4uLicKICB9CgogIEJ1dHRvbi5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHsKICAgIHZhciBkICAgID0gJ2Rpc2FibGVkJwogICAgdmFyICRlbCAgPSB0aGlzLiRlbGVtZW50CiAgICB2YXIgdmFsICA9ICRlbC5pcygnaW5wdXQnKSA\/ICd2YWwnIDogJ2h0bWwnCiAgICB2YXIgZGF0YSA9ICRlbC5kYXRhKCkKCiAgICBzdGF0ZSA9IHN0YXRlICsgJ1RleHQnCgogICAgaWYgKGRhdGEucmVzZXRUZXh0ID09IG51bGwpICRlbC5kYXRhKCdyZXNldFRleHQnLCAkZWxbdmFsXSgpKQoKICAgIC8vIHB1c2ggdG8gZXZlbnQgbG9vcCB0byBhbGxvdyBmb3JtcyB0byBzdWJtaXQKICAgIHNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbiAoKSB7CiAgICAgICRlbFt2YWxdKGRhdGFbc3RhdGVdID09IG51bGwgPyB0aGlzLm9wdGlvbnNbc3RhdGVdIDogZGF0YVtzdGF0ZV0pCgogICAgICBpZiAoc3RhdGUgPT0gJ2xvYWRpbmdUZXh0JykgewogICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZQogICAgICAgICRlbC5hZGRDbGFzcyhkKS5hdHRyKGQsIGQpCiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0xvYWRpbmcpIHsKICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlCiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKGQpLnJlbW92ZUF0dHIoZCkKICAgICAgfQogICAgfSwgdGhpcyksIDApCiAgfQoKICBCdXR0b24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBjaGFuZ2VkID0gdHJ1ZQogICAgdmFyICRwYXJlbnQgPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLXRvZ2dsZT0iYnV0dG9ucyJdJykKCiAgICBpZiAoJHBhcmVudC5sZW5ndGgpIHsKICAgICAgdmFyICRpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKQogICAgICBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAncmFkaW8nKSB7CiAgICAgICAgaWYgKCRpbnB1dC5wcm9wKCdjaGVja2VkJykgJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpIGNoYW5nZWQgPSBmYWxzZQogICAgICAgIGVsc2UgJHBhcmVudC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpCiAgICAgIH0KICAgICAgaWYgKGNoYW5nZWQpICRpbnB1dC5wcm9wKCdjaGVja2VkJywgIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKS50cmlnZ2VyKCdjaGFuZ2UnKQogICAgfSBlbHNlIHsKICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLXByZXNzZWQnLCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpCiAgICB9CgogICAgaWYgKGNoYW5nZWQpIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpCiAgfQoKCiAgLy8gQlVUVE9OIFBMVUdJTiBERUZJTklUSU9OCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09CgogIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHsKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgewogICAgICB2YXIgJHRoaXMgICA9ICQodGhpcykKICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5idXR0b24nKQogICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uCgogICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicsIChkYXRhID0gbmV3IEJ1dHRvbih0aGlzLCBvcHRpb25zKSkpCgogICAgICBpZiAob3B0aW9uID09ICd0b2dnbGUnKSBkYXRhLnRvZ2dsZSgpCiAgICAgIGVsc2UgaWYgKG9wdGlvbikgZGF0YS5zZXRTdGF0ZShvcHRpb24pCiAgICB9KQogIH0KCiAgdmFyIG9sZCA9ICQuZm4uYnV0dG9uCgogICQuZm4uYnV0dG9uICAgICAgICAgICAgID0gUGx1Z2luCiAgJC5mbi5idXR0b24uQ29uc3RydWN0b3IgPSBCdXR0b24KCgogIC8vIEJVVFRPTiBOTyBDT05GTElDVAogIC8vID09PT09PT09PT09PT09PT09PQoKICAkLmZuLmJ1dHRvbi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgewogICAgJC5mbi5idXR0b24gPSBvbGQKICAgIHJldHVybiB0aGlzCiAgfQoKCiAgLy8gQlVUVE9OIERBVEEtQVBJCiAgLy8gPT09PT09PT09PT09PT09CgogICQoZG9jdW1lbnQpCiAgICAub24oJ2NsaWNrLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePSJidXR0b24iXScsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciAkYnRuID0gJChlLnRhcmdldCkKICAgICAgaWYgKCEkYnRuLmhhc0NsYXNzKCdidG4nKSkgJGJ0biA9ICRidG4uY2xvc2VzdCgnLmJ0bicpCiAgICAgIFBsdWdpbi5jYWxsKCRidG4sICd0b2dnbGUnKQogICAgICBlLnByZXZlbnREZWZhdWx0KCkKICAgIH0pCiAgICAub24oJ2ZvY3VzLmJzLmJ1dHRvbi5kYXRhLWFwaSBibHVyLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePSJidXR0b24iXScsIGZ1bmN0aW9uIChlKSB7CiAgICAgICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5idG4nKS50b2dnbGVDbGFzcygnZm9jdXMnLCAvXmZvY3VzKGluKT8kLy50ZXN0KGUudHlwZSkpCiAgICB9KQoKfShqUXVlcnkpOwoKLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIEJvb3RzdHJhcDogY2Fyb3VzZWwuanMgdjMuMy4yCiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2Nhcm91c2VsCiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy4KICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSkKICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgoKK2Z1bmN0aW9uICgkKSB7CiAgJ3VzZSBzdHJpY3QnOwoKICAvLyBDQVJPVVNFTCBDTEFTUyBERUZJTklUSU9OCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PQoKICB2YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykgewogICAgdGhpcy4kZWxlbWVudCAgICA9ICQoZWxlbWVudCkKICAgIHRoaXMuJGluZGljYXRvcnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5jYXJvdXNlbC1pbmRpY2F0b3JzJykKICAgIHRoaXMub3B0aW9ucyAgICAgPSBvcHRpb25zCiAgICB0aGlzLnBhdXNlZCAgICAgID0KICAgIHRoaXMuc2xpZGluZyAgICAgPQogICAgdGhpcy5pbnRlcnZhbCAgICA9CiAgICB0aGlzLiRhY3RpdmUgICAgID0KICAgIHRoaXMuJGl0ZW1zICAgICAgPSBudWxsCgogICAgdGhpcy5vcHRpb25zLmtleWJvYXJkICYmIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcykpCgogICAgdGhpcy5vcHRpb25zLnBhdXNlID09ICdob3ZlcicgJiYgISgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpICYmIHRoaXMuJGVsZW1lbnQKICAgICAgLm9uKCdtb3VzZWVudGVyLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLnBhdXNlLCB0aGlzKSkKICAgICAgLm9uKCdtb3VzZWxlYXZlLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmN5Y2xlLCB0aGlzKSkKICB9CgogIENhcm91c2VsLlZFUlNJT04gID0gJzMuMy4yJwoKICBDYXJvdXNlbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gNjAwCgogIENhcm91c2VsLkRFRkFVTFRTID0gewogICAgaW50ZXJ2YWw6IDUwMDAsCiAgICBwYXVzZTogJ2hvdmVyJywKICAgIHdyYXA6IHRydWUsCiAgICBrZXlib2FyZDogdHJ1ZQogIH0KCiAgQ2Fyb3VzZWwucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkgewogICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVybgogICAgc3dpdGNoIChlLndoaWNoKSB7CiAgICAgIGNhc2UgMzc6IHRoaXMucHJldigpOyBicmVhawogICAgICBjYXNlIDM5OiB0aGlzLm5leHQoKTsgYnJlYWsKICAgICAgZGVmYXVsdDogcmV0dXJuCiAgICB9CgogICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgfQoKICBDYXJvdXNlbC5wcm90b3R5cGUuY3ljbGUgPSBmdW5jdGlvbiAoZSkgewogICAgZSB8fCAodGhpcy5wYXVzZWQgPSBmYWxzZSkKCiAgICB0aGlzLmludGVydmFsICYmIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCkKCiAgICB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwKICAgICAgJiYgIXRoaXMucGF1c2VkCiAgICAgICYmICh0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoJC5wcm94eSh0aGlzLm5leHQsIHRoaXMpLCB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwpKQoKICAgIHJldHVybiB0aGlzCiAgfQoKICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gKGl0ZW0pIHsKICAgIHRoaXMuJGl0ZW1zID0gaXRlbS5wYXJlbnQoKS5jaGlsZHJlbignLml0ZW0nKQogICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmluZGV4KGl0ZW0gfHwgdGhpcy4kYWN0aXZlKQogIH0KCiAgQ2Fyb3VzZWwucHJvdG90eXBlLmdldEl0ZW1Gb3JEaXJlY3Rpb24gPSBmdW5jdGlvbiAoZGlyZWN0aW9uLCBhY3RpdmUpIHsKICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KGFjdGl2ZSkKICAgIHZhciB3aWxsV3JhcCA9IChkaXJlY3Rpb24gPT0gJ3ByZXYnICYmIGFjdGl2ZUluZGV4ID09PSAwKQogICAgICAgICAgICAgICAgfHwgKGRpcmVjdGlvbiA9PSAnbmV4dCcgJiYgYWN0aXZlSW5kZXggPT0gKHRoaXMuJGl0ZW1zLmxlbmd0aCAtIDEpKQogICAgaWYgKHdpbGxXcmFwICYmICF0aGlzLm9wdGlvbnMud3JhcCkgcmV0dXJuIGFjdGl2ZQogICAgdmFyIGRlbHRhID0gZGlyZWN0aW9uID09ICdwcmV2JyA\/IC0xIDogMQogICAgdmFyIGl0ZW1JbmRleCA9IChhY3RpdmVJbmRleCArIGRlbHRhKSAlIHRoaXMuJGl0ZW1zLmxlbmd0aAogICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmVxKGl0ZW1JbmRleCkKICB9CgogIENhcm91c2VsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChwb3MpIHsKICAgIHZhciB0aGF0ICAgICAgICA9IHRoaXMKICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KHRoaXMuJGFjdGl2ZSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLml0ZW0uYWN0aXZlJykpCgogICAgaWYgKHBvcyA+ICh0aGlzLiRpdGVtcy5sZW5ndGggLSAxKSB8fCBwb3MgPCAwKSByZXR1cm4KCiAgICBpZiAodGhpcy5zbGlkaW5nKSAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudC5vbmUoJ3NsaWQuYnMuY2Fyb3VzZWwnLCBmdW5jdGlvbiAoKSB7IHRoYXQudG8ocG9zKSB9KSAvLyB5ZXMsICJzbGlkIgogICAgaWYgKGFjdGl2ZUluZGV4ID09IHBvcykgcmV0dXJuIHRoaXMucGF1c2UoKS5jeWNsZSgpCgogICAgcmV0dXJuIHRoaXMuc2xpZGUocG9zID4gYWN0aXZlSW5kZXggPyAnbmV4dCcgOiAncHJldicsIHRoaXMuJGl0ZW1zLmVxKHBvcykpCiAgfQoKICBDYXJvdXNlbC5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoZSkgewogICAgZSB8fCAodGhpcy5wYXVzZWQgPSB0cnVlKQoKICAgIGlmICh0aGlzLiRlbGVtZW50LmZpbmQoJy5uZXh0LCAucHJldicpLmxlbmd0aCAmJiAkLnN1cHBvcnQudHJhbnNpdGlvbikgewogICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKQogICAgICB0aGlzLmN5Y2xlKHRydWUpCiAgICB9CgogICAgdGhpcy5pbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCkKCiAgICByZXR1cm4gdGhpcwogIH0KCiAgQ2Fyb3VzZWwucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAodGhpcy5zbGlkaW5nKSByZXR1cm4KICAgIHJldHVybiB0aGlzLnNsaWRlKCduZXh0JykKICB9CgogIENhcm91c2VsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24gKCkgewogICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuCiAgICByZXR1cm4gdGhpcy5zbGlkZSgncHJldicpCiAgfQoKICBDYXJvdXNlbC5wcm90b3R5cGUuc2xpZGUgPSBmdW5jdGlvbiAodHlwZSwgbmV4dCkgewogICAgdmFyICRhY3RpdmUgICA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLml0ZW0uYWN0aXZlJykKICAgIHZhciAkbmV4dCAgICAgPSBuZXh0IHx8IHRoaXMuZ2V0SXRlbUZvckRpcmVjdGlvbih0eXBlLCAkYWN0aXZlKQogICAgdmFyIGlzQ3ljbGluZyA9IHRoaXMuaW50ZXJ2YWwKICAgIHZhciBkaXJlY3Rpb24gPSB0eXBlID09ICduZXh0JyA\/ICdsZWZ0JyA6ICdyaWdodCcKICAgIHZhciB0aGF0ICAgICAgPSB0aGlzCgogICAgaWYgKCRuZXh0Lmhhc0NsYXNzKCdhY3RpdmUnKSkgcmV0dXJuICh0aGlzLnNsaWRpbmcgPSBmYWxzZSkKCiAgICB2YXIgcmVsYXRlZFRhcmdldCA9ICRuZXh0WzBdCiAgICB2YXIgc2xpZGVFdmVudCA9ICQuRXZlbnQoJ3NsaWRlLmJzLmNhcm91c2VsJywgewogICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LAogICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbgogICAgfSkKICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkZUV2ZW50KQogICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybgoKICAgIHRoaXMuc2xpZGluZyA9IHRydWUKCiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5wYXVzZSgpCgogICAgaWYgKHRoaXMuJGluZGljYXRvcnMubGVuZ3RoKSB7CiAgICAgIHRoaXMuJGluZGljYXRvcnMuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKQogICAgICB2YXIgJG5leHRJbmRpY2F0b3IgPSAkKHRoaXMuJGluZGljYXRvcnMuY2hpbGRyZW4oKVt0aGlzLmdldEl0ZW1JbmRleCgkbmV4dCldKQogICAgICAkbmV4dEluZGljYXRvciAmJiAkbmV4dEluZGljYXRvci5hZGRDbGFzcygnYWN0aXZlJykKICAgIH0KCiAgICB2YXIgc2xpZEV2ZW50ID0gJC5FdmVudCgnc2xpZC5icy5jYXJvdXNlbCcsIHsgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCwgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfSkgLy8geWVzLCAic2xpZCIKICAgIGlmICgkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdzbGlkZScpKSB7CiAgICAgICRuZXh0LmFkZENsYXNzKHR5cGUpCiAgICAgICRuZXh0WzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvdwogICAgICAkYWN0aXZlLmFkZENsYXNzKGRpcmVjdGlvbikKICAgICAgJG5leHQuYWRkQ2xhc3MoZGlyZWN0aW9uKQogICAgICAkYWN0aXZlCiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgJG5leHQucmVtb3ZlQ2xhc3MoW3R5cGUsIGRpcmVjdGlvbl0uam9pbignICcpKS5hZGRDbGFzcygnYWN0aXZlJykKICAgICAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoWydhY3RpdmUnLCBkaXJlY3Rpb25dLmpvaW4oJyAnKSkKICAgICAgICAgIHRoYXQuc2xpZGluZyA9IGZhbHNlCiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudCkKICAgICAgICAgIH0sIDApCiAgICAgICAgfSkKICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTikKICAgIH0gZWxzZSB7CiAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpCiAgICAgICRuZXh0LmFkZENsYXNzKCdhY3RpdmUnKQogICAgICB0aGlzLnNsaWRpbmcgPSBmYWxzZQogICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc2xpZEV2ZW50KQogICAgfQoKICAgIGlzQ3ljbGluZyAmJiB0aGlzLmN5Y2xlKCkKCiAgICByZXR1cm4gdGhpcwogIH0KCgogIC8vIENBUk9VU0VMIFBMVUdJTiBERUZJTklUSU9OCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT0KCiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikgewogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKQogICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmNhcm91c2VsJykKICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ2Fyb3VzZWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pCiAgICAgIHZhciBhY3Rpb24gID0gdHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyA\\/ICRwYXJlbnQgOiAkdGhpcy5wYXJlbnQoKQogIH0KCgogIC8vIERST1BET1dOIFBMVUdJTiBERUZJTklUSU9OCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT0KCiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikgewogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgIHZhciAkdGhpcyA9ICQodGhpcykKICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nKQoKICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5kcm9wZG93bicsIChkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMpKSkKICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKQogICAgfSkKICB9CgogIHZhciBvbGQgPSAkLmZuLmRyb3Bkb3duCgogICQuZm4uZHJvcGRvd24gICAgICAgICAgICAgPSBQbHVnaW4KICAkLmZuLmRyb3Bkb3duLkNvbnN0cnVjdG9yID0gRHJvcGRvd24KCgogIC8vIERST1BET1dOIE5PIENPTkZMSUNUCiAgLy8gPT09PT09PT09PT09PT09PT09PT0KCiAgJC5mbi5kcm9wZG93bi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgewogICAgJC5mbi5kcm9wZG93biA9IG9sZAogICAgcmV0dXJuIHRoaXMKICB9CgoKICAvLyBBUFBMWSBUTyBTVEFOREFSRCBEUk9QRE9XTiBFTEVNRU5UUwogIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgogICQoZG9jdW1lbnQpCiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgY2xlYXJNZW51cykKICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duIGZvcm0nLCBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpIH0pCiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlKQogICAgLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93bikKICAgIC5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsICdbcm9sZT0ibWVudSJdJywgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pCiAgICAub24oJ2tleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnW3JvbGU9Imxpc3Rib3giXScsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKQoKfShqUXVlcnkpOwoKLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIEJvb3RzdHJhcDogbW9kYWwuanMgdjMuMy4yCiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI21vZGFscwogKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuCiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpCiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoKCitmdW5jdGlvbiAoJCkgewogICd1c2Ugc3RyaWN0JzsKCiAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTgogIC8vID09PT09PT09PT09PT09PT09PT09PT0KCiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHsKICAgIHRoaXMub3B0aW9ucyAgICAgICAgPSBvcHRpb25zCiAgICB0aGlzLiRib2R5ICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KQogICAgdGhpcy4kZWxlbWVudCAgICAgICA9ICQoZWxlbWVudCkKICAgIHRoaXMuJGJhY2tkcm9wICAgICAgPQogICAgdGhpcy5pc1Nob3duICAgICAgICA9IG51bGwKICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSAwCgogICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdGUpIHsKICAgICAgdGhpcy4kZWxlbWVudAogICAgICAgIC5maW5kKCcubW9kYWwtY29udGVudCcpCiAgICAgICAgLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2xvYWRlZC5icy5tb2RhbCcpCiAgICAgICAgfSwgdGhpcykpCiAgICB9CiAgfQoKICBNb2RhbC5WRVJTSU9OICA9ICczLjMuMicKCiAgTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDMwMAogIE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTAKCiAgTW9kYWwuREVGQVVMVFMgPSB7CiAgICBiYWNrZHJvcDogdHJ1ZSwKICAgIGtleWJvYXJkOiB0cnVlLAogICAgc2hvdzogdHJ1ZQogIH0KCiAgTW9kYWwucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChfcmVsYXRlZFRhcmdldCkgewogICAgcmV0dXJuIHRoaXMuaXNTaG93biA\\/ICdtb3VzZWVudGVyJyA6ICdmb2N1c2luJwogICAgICAgIHZhciBldmVudE91dCA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA\/ICdtb3VzZWxlYXZlJyA6ICdmb2N1c291dCcKCiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudEluICArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMuZW50ZXIsIHRoaXMpKQogICAgICAgIHRoaXMuJGVsZW1lbnQub24oZXZlbnRPdXQgKyAnLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLmxlYXZlLCB0aGlzKSkKICAgICAgfQogICAgfQoKICAgIHRoaXMub3B0aW9ucy5zZWxlY3RvciA\/CiAgICAgICh0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgeyB0cmlnZ2VyOiAnbWFudWFsJywgc2VsZWN0b3I6ICcnIH0pKSA6CiAgICAgIHRoaXMuZml4VGl0bGUoKQogIH0KCiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gVG9vbHRpcC5ERUZBVUxUUwogIH0KCiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuZ2V0RGVmYXVsdHMoKSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpCgogICAgaWYgKG9wdGlvbnMuZGVsYXkgJiYgdHlwZW9mIG9wdGlvbnMuZGVsYXkgPT0gJ251bWJlcicpIHsKICAgICAgb3B0aW9ucy5kZWxheSA9IHsKICAgICAgICBzaG93OiBvcHRpb25zLmRlbGF5LAogICAgICAgIGhpZGU6IG9wdGlvbnMuZGVsYXkKICAgICAgfQogICAgfQoKICAgIHJldHVybiBvcHRpb25zCiAgfQoKICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWxlZ2F0ZU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgb3B0aW9ucyAgPSB7fQogICAgdmFyIGRlZmF1bHRzID0gdGhpcy5nZXREZWZhdWx0cygpCgogICAgdGhpcy5fb3B0aW9ucyAmJiAkLmVhY2godGhpcy5fb3B0aW9ucywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgaWYgKGRlZmF1bHRzW2tleV0gIT0gdmFsdWUpIG9wdGlvbnNba2V5XSA9IHZhbHVlCiAgICB9KQoKICAgIHJldHVybiBvcHRpb25zCiAgfQoKICBUb29sdGlwLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uIChvYmopIHsKICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA\/CiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpCgogICAgaWYgKHNlbGYgJiYgc2VsZi4kdGlwICYmIHNlbGYuJHRpcC5pcygnOnZpc2libGUnKSkgewogICAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nCiAgICAgIHJldHVybgogICAgfQoKICAgIGlmICghc2VsZikgewogICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpCiAgICAgICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpCiAgICB9CgogICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dCkKCiAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nCgogICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5zaG93KSByZXR1cm4gc2VsZi5zaG93KCkKCiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSBzZWxmLnNob3coKQogICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LnNob3cpCiAgfQoKICBUb29sdGlwLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uIChvYmopIHsKICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA\/CiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpCgogICAgaWYgKCFzZWxmKSB7CiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSkKICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZikKICAgIH0KCiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KQoKICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdvdXQnCgogICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5oaWRlKSByZXR1cm4gc2VsZi5oaWRlKCkKCiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnb3V0Jykgc2VsZi5oaWRlKCkKICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5oaWRlKQogIH0KCiAgVG9vbHRpcC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlID0gJC5FdmVudCgnc2hvdy5icy4nICsgdGhpcy50eXBlKQoKICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSAmJiB0aGlzLmVuYWJsZWQpIHsKICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpCgogICAgICB2YXIgaW5Eb20gPSAkLmNvbnRhaW5zKHRoaXMuJGVsZW1lbnRbMF0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuJGVsZW1lbnRbMF0pCiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpbkRvbSkgcmV0dXJuCiAgICAgIHZhciB0aGF0ID0gdGhpcwoKICAgICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpCgogICAgICB2YXIgdGlwSWQgPSB0aGlzLmdldFVJRCh0aGlzLnR5cGUpCgogICAgICB0aGlzLnNldENvbnRlbnQoKQogICAgICAkdGlwLmF0dHIoJ2lkJywgdGlwSWQpCiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScsIHRpcElkKQoKICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pICR0aXAuYWRkQ2xhc3MoJ2ZhZGUnKQoKICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMucGxhY2VtZW50ID09ICdmdW5jdGlvbicgPwogICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6CiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudAoKICAgICAgdmFyIGF1dG9Ub2tlbiA9IC9ccz9hdXRvP1xzPy9pCiAgICAgIHZhciBhdXRvUGxhY2UgPSBhdXRvVG9rZW4udGVzdChwbGFjZW1lbnQpCiAgICAgIGlmIChhdXRvUGxhY2UpIHBsYWNlbWVudCA9IHBsYWNlbWVudC5yZXBsYWNlKGF1dG9Ub2tlbiwgJycpIHx8ICd0b3AnCgogICAgICAkdGlwCiAgICAgICAgLmRldGFjaCgpCiAgICAgICAgLmNzcyh7IHRvcDogMCwgbGVmdDogMCwgZGlzcGxheTogJ2Jsb2NrJyB9KQogICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpCiAgICAgICAgLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHRoaXMpCgogICAgICB0aGlzLm9wdGlvbnMuY29udGFpbmVyID8gJHRpcC5hcHBlbmRUbyh0aGlzLm9wdGlvbnMuY29udGFpbmVyKSA6ICR0aXAuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudCkKCiAgICAgIHZhciBwb3MgICAgICAgICAgPSB0aGlzLmdldFBvc2l0aW9uKCkKICAgICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGgKICAgICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0CgogICAgICBpZiAoYXV0b1BsYWNlKSB7CiAgICAgICAgdmFyIG9yZ1BsYWNlbWVudCA9IHBsYWNlbWVudAogICAgICAgIHZhciAkY29udGFpbmVyICAgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyID8gJCh0aGlzLm9wdGlvbnMuY29udGFpbmVyKSA6IHRoaXMuJGVsZW1lbnQucGFyZW50KCkKICAgICAgICB2YXIgY29udGFpbmVyRGltID0gdGhpcy5nZXRQb3NpdGlvbigkY29udGFpbmVyKQoKICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgJiYgcG9zLmJvdHRvbSArIGFjdHVhbEhlaWdodCA+IGNvbnRhaW5lckRpbS5ib3R0b20gPyAndG9wJyAgICA6CiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICd0b3AnICAgICYmIHBvcy50b3AgICAgLSBhY3R1YWxIZWlnaHQgPCBjb250YWluZXJEaW0udG9wICAgID8gJ2JvdHRvbScgOgogICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAncmlnaHQnICAmJiBwb3MucmlnaHQgICsgYWN0dWFsV2lkdGggID4gY29udGFpbmVyRGltLndpZHRoICA\/ICdsZWZ0JyAgIDoKICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgJiYgcG9zLmxlZnQgICAtIGFjdHVhbFdpZHRoICA8IGNvbnRhaW5lckRpbS5sZWZ0ICAgPyAncmlnaHQnICA6CiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50CgogICAgICAgICR0aXAKICAgICAgICAgIC5yZW1vdmVDbGFzcyhvcmdQbGFjZW1lbnQpCiAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KQogICAgICB9CgogICAgICB2YXIgY2FsY3VsYXRlZE9mZnNldCA9IHRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkKCiAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoY2FsY3VsYXRlZE9mZnNldCwgcGxhY2VtZW50KQoKICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBwcmV2SG92ZXJTdGF0ZSA9IHRoYXQuaG92ZXJTdGF0ZQogICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignc2hvd24uYnMuJyArIHRoYXQudHlwZSkKICAgICAgICB0aGF0LmhvdmVyU3RhdGUgPSBudWxsCgogICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PSAnb3V0JykgdGhhdC5sZWF2ZSh0aGF0KQogICAgICB9CgogICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiR0aXAuaGFzQ2xhc3MoJ2ZhZGUnKSA\/CiAgICAgICAgJHRpcAogICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpCiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6CiAgICAgICAgY29tcGxldGUoKQogICAgfQogIH0KCiAgVG9vbHRpcC5wcm90b3R5cGUuYXBwbHlQbGFjZW1lbnQgPSBmdW5jdGlvbiAob2Zmc2V0LCBwbGFjZW1lbnQpIHsKICAgIHZhciAkdGlwICAgPSB0aGlzLnRpcCgpCiAgICB2YXIgd2lkdGggID0gJHRpcFswXS5vZmZzZXRXaWR0aAogICAgdmFyIGhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0CgogICAgLy8gbWFudWFsbHkgcmVhZCBtYXJnaW5zIGJlY2F1c2UgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGluY2x1ZGVzIGRpZmZlcmVuY2UKICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUludCgkdGlwLmNzcygnbWFyZ2luLXRvcCcpLCAxMCkKICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi1sZWZ0JyksIDEwKQoKICAgIC8vIHdlIG11c3QgY2hlY2sgZm9yIE5hTiBmb3IgaWUgOC85CiAgICBpZiAoaXNOYU4obWFyZ2luVG9wKSkgIG1hcmdpblRvcCAgPSAwCiAgICBpZiAoaXNOYU4obWFyZ2luTGVmdCkpIG1hcmdpbkxlZnQgPSAwCgogICAgb2Zmc2V0LnRvcCAgPSBvZmZzZXQudG9wICArIG1hcmdpblRvcAogICAgb2Zmc2V0LmxlZnQgPSBvZmZzZXQubGVmdCArIG1hcmdpbkxlZnQKCiAgICAvLyAkLmZuLm9mZnNldCBkb2Vzbid0IHJvdW5kIHBpeGVsIHZhbHVlcwogICAgLy8gc28gd2UgdXNlIHNldE9mZnNldCBkaXJlY3RseSB3aXRoIG91ciBvd24gZnVuY3Rpb24gQi0wCiAgICAkLm9mZnNldC5zZXRPZmZzZXQoJHRpcFswXSwgJC5leHRlbmQoewogICAgICB1c2luZzogZnVuY3Rpb24gKHByb3BzKSB7CiAgICAgICAgJHRpcC5jc3MoewogICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKHByb3BzLnRvcCksCiAgICAgICAgICBsZWZ0OiBNYXRoLnJvdW5kKHByb3BzLmxlZnQpCiAgICAgICAgfSkKICAgICAgfQogICAgfSwgb2Zmc2V0KSwgMCkKCiAgICAkdGlwLmFkZENsYXNzKCdpbicpCgogICAgLy8gY2hlY2sgdG8gc2VlIGlmIHBsYWNpbmcgdGlwIGluIG5ldyBvZmZzZXQgY2F1c2VkIHRoZSB0aXAgdG8gcmVzaXplIGl0c2VsZgogICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGgKICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodAoKICAgIGlmIChwbGFjZW1lbnQgPT0gJ3RvcCcgJiYgYWN0dWFsSGVpZ2h0ICE9IGhlaWdodCkgewogICAgICBvZmZzZXQudG9wID0gb2Zmc2V0LnRvcCArIGhlaWdodCAtIGFjdHVhbEhlaWdodAogICAgfQoKICAgIHZhciBkZWx0YSA9IHRoaXMuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhKHBsYWNlbWVudCwgb2Zmc2V0LCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KQoKICAgIGlmIChkZWx0YS5sZWZ0KSBvZmZzZXQubGVmdCArPSBkZWx0YS5sZWZ0CiAgICBlbHNlIG9mZnNldC50b3AgKz0gZGVsdGEudG9wCgogICAgdmFyIGlzVmVydGljYWwgICAgICAgICAgPSAvdG9wfGJvdHRvbS8udGVzdChwbGFjZW1lbnQpCiAgICB2YXIgYXJyb3dEZWx0YSAgICAgICAgICA9IGlzVmVydGljYWwgPyBkZWx0YS5sZWZ0ICogMiAtIHdpZHRoICsgYWN0dWFsV2lkdGggOiBkZWx0YS50b3AgKiAyIC0gaGVpZ2h0ICsgYWN0dWFsSGVpZ2h0CiAgICB2YXIgYXJyb3dPZmZzZXRQb3NpdGlvbiA9IGlzVmVydGljYWwgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCcKCiAgICAkdGlwLm9mZnNldChvZmZzZXQpCiAgICB0aGlzLnJlcGxhY2VBcnJvdyhhcnJvd0RlbHRhLCAkdGlwWzBdW2Fycm93T2Zmc2V0UG9zaXRpb25dLCBpc1ZlcnRpY2FsKQogIH0KCiAgVG9vbHRpcC5wcm90b3R5cGUucmVwbGFjZUFycm93ID0gZnVuY3Rpb24gKGRlbHRhLCBkaW1lbnNpb24sIGlzSG9yaXpvbnRhbCkgewogICAgdGhpcy5hcnJvdygpCiAgICAgIC5jc3MoaXNIb3Jpem9udGFsID8gJ2xlZnQnIDogJ3RvcCcsIDUwICogKDEgLSBkZWx0YSAvIGRpbWVuc2lvbikgKyAnJScpCiAgICAgIC5jc3MoaXNIb3Jpem9udGFsID8gJ3RvcCcgOiAnbGVmdCcsICcnKQogIH0KCiAgVG9vbHRpcC5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciAkdGlwICA9IHRoaXMudGlwKCkKICAgIHZhciB0aXRsZSA9IHRoaXMuZ2V0VGl0bGUoKQoKICAgICR0aXAuZmluZCgnLnRvb2x0aXAtaW5uZXInKVt0aGlzLm9wdGlvbnMuaHRtbCA\/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpCiAgICAkdGlwLnJlbW92ZUNsYXNzKCdmYWRlIGluIHRvcCBib3R0b20gbGVmdCByaWdodCcpCiAgfQoKICBUb29sdGlwLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICB2YXIgdGhhdCA9IHRoaXMKICAgIHZhciAkdGlwID0gdGhpcy50aXAoKQogICAgdmFyIGUgICAgPSAkLkV2ZW50KCdoaWRlLmJzLicgKyB0aGlzLnR5cGUpCgogICAgZnVuY3Rpb24gY29tcGxldGUoKSB7CiAgICAgIGlmICh0aGF0LmhvdmVyU3RhdGUgIT0gJ2luJykgJHRpcC5kZXRhY2goKQogICAgICB0aGF0LiRlbGVtZW50CiAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknKQogICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuJyArIHRoYXQudHlwZSkKICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKQogICAgfQoKICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKQoKICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm4KCiAgICAkdGlwLnJlbW92ZUNsYXNzKCdpbicpCgogICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kdGlwLmhhc0NsYXNzKCdmYWRlJykgPwogICAgICAkdGlwCiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpCiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOgogICAgICBjb21wbGV0ZSgpCgogICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbAoKICAgIHJldHVybiB0aGlzCiAgfQoKICBUb29sdGlwLnByb3RvdHlwZS5maXhUaXRsZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnQKICAgIGlmICgkZS5hdHRyKCd0aXRsZScpIHx8IHR5cGVvZiAoJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpKSAhPSAnc3RyaW5nJykgewogICAgICAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgJGUuYXR0cigndGl0bGUnKSB8fCAnJykuYXR0cigndGl0bGUnLCAnJykKICAgIH0KICB9CgogIFRvb2x0aXAucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpCiAgfQoKICBUb29sdGlwLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgkZWxlbWVudCkgewogICAgJGVsZW1lbnQgICA9ICRlbGVtZW50IHx8IHRoaXMuJGVsZW1lbnQKCiAgICB2YXIgZWwgICAgID0gJGVsZW1lbnRbMF0KICAgIHZhciBpc0JvZHkgPSBlbC50YWdOYW1lID09ICdCT0RZJwoKICAgIHZhciBlbFJlY3QgICAgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKQogICAgaWYgKGVsUmVjdC53aWR0aCA9PSBudWxsKSB7CiAgICAgIC8vIHdpZHRoIGFuZCBoZWlnaHQgYXJlIG1pc3NpbmcgaW4gSUU4LCBzbyBjb21wdXRlIHRoZW0gbWFudWFsbHk7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzE0MDkzCiAgICAgIGVsUmVjdCA9ICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHsgd2lkdGg6IGVsUmVjdC5yaWdodCAtIGVsUmVjdC5sZWZ0LCBoZWlnaHQ6IGVsUmVjdC5ib3R0b20gLSBlbFJlY3QudG9wIH0pCiAgICB9CiAgICB2YXIgZWxPZmZzZXQgID0gaXNCb2R5ID8geyB0b3A6IDAsIGxlZnQ6IDAgfSA6ICRlbGVtZW50Lm9mZnNldCgpCiAgICB2YXIgc2Nyb2xsICAgID0geyBzY3JvbGw6IGlzQm9keSA\/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgOiAkZWxlbWVudC5zY3JvbGxUb3AoKSB9CiAgICB2YXIgb3V0ZXJEaW1zID0gaXNCb2R5ID8geyB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpIH0gOiBudWxsCgogICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHNjcm9sbCwgb3V0ZXJEaW1zLCBlbE9mZnNldCkKICB9CgogIFRvb2x0aXAucHJvdG90eXBlLmdldENhbGN1bGF0ZWRPZmZzZXQgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpIHsKICAgIHJldHVybiBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQsICAgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOgogICAgICAgICAgIHBsYWNlbWVudCA9PSAndG9wJyAgICA\/IHsgdG9wOiBwb3MudG9wIC0gYWN0dWFsSGVpZ2h0LCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAvIDIgLSBhY3R1YWxXaWR0aCAvIDIgfSA6CiAgICAgICAgICAgcGxhY2VtZW50ID09ICdsZWZ0JyAgID8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0IC0gYWN0dWFsV2lkdGggfSA6CiAgICAgICAgLyogcGxhY2VtZW50ID09ICdyaWdodCcgKi8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIH0KCiAgfQoKICBUb29sdGlwLnByb3RvdHlwZS5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpIHsKICAgIHZhciBkZWx0YSA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0KICAgIGlmICghdGhpcy4kdmlld3BvcnQpIHJldHVybiBkZWx0YQoKICAgIHZhciB2aWV3cG9ydFBhZGRpbmcgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgdGhpcy5vcHRpb25zLnZpZXdwb3J0LnBhZGRpbmcgfHwgMAogICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpCgogICAgaWYgKC9yaWdodHxsZWZ0Ly50ZXN0KHBsYWNlbWVudCkpIHsKICAgICAgdmFyIHRvcEVkZ2VPZmZzZXQgICAgPSBwb3MudG9wIC0gdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbAogICAgICB2YXIgYm90dG9tRWRnZU9mZnNldCA9IHBvcy50b3AgKyB2aWV3cG9ydFBhZGRpbmcgLSB2aWV3cG9ydERpbWVuc2lvbnMuc2Nyb2xsICsgYWN0dWFsSGVpZ2h0CiAgICAgIGlmICh0b3BFZGdlT2Zmc2V0IDwgdmlld3BvcnREaW1lbnNpb25zLnRvcCkgeyAvLyB0b3Agb3ZlcmZsb3cKICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wIC0gdG9wRWRnZU9mZnNldAogICAgICB9IGVsc2UgaWYgKGJvdHRvbUVkZ2VPZmZzZXQgPiB2aWV3cG9ydERpbWVuc2lvbnMudG9wICsgdmlld3BvcnREaW1lbnNpb25zLmhlaWdodCkgeyAvLyBib3R0b20gb3ZlcmZsb3cKICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wICsgdmlld3BvcnREaW1lbnNpb25zLmhlaWdodCAtIGJvdHRvbUVkZ2VPZmZzZXQKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdmFyIGxlZnRFZGdlT2Zmc2V0ICA9IHBvcy5sZWZ0IC0gdmlld3BvcnRQYWRkaW5nCiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoCiAgICAgIGlmIChsZWZ0RWRnZU9mZnNldCA8IHZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0KSB7IC8vIGxlZnQgb3ZlcmZsb3cKICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgLSBsZWZ0RWRnZU9mZnNldAogICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy53aWR0aCkgeyAvLyByaWdodCBvdmVyZmxvdwogICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCArIHZpZXdwb3J0RGltZW5zaW9ucy53aWR0aCAtIHJpZ2h0RWRnZU9mZnNldAogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGRlbHRhCiAgfQoKICBUb29sdGlwLnByb3RvdHlwZS5nZXRUaXRsZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciB0aXRsZQogICAgdmFyICRlID0gdGhpcy4kZWxlbWVudAogICAgdmFyIG8gID0gdGhpcy5vcHRpb25zCgogICAgdGl0bGUgPSAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJykKICAgICAgfHwgKHR5cGVvZiBvLnRpdGxlID09ICdmdW5jdGlvbicgPyBvLnRpdGxlLmNhbGwoJGVbMF0pIDogIG8udGl0bGUpCgogICAgcmV0dXJuIHRpdGxlCiAgfQoKICBUb29sdGlwLnByb3RvdHlwZS5nZXRVSUQgPSBmdW5jdGlvbiAocHJlZml4KSB7CiAgICBkbyBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApCiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSkKICAgIHJldHVybiBwcmVmaXgKICB9CgogIFRvb2x0aXAucHJvdG90eXBlLnRpcCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAodGhpcy4kdGlwID0gdGhpcy4kdGlwIHx8ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKSkKICB9CgogIFRvb2x0aXAucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuICh0aGlzLiRhcnJvdyA9IHRoaXMuJGFycm93IHx8IHRoaXMudGlwKCkuZmluZCgnLnRvb2x0aXAtYXJyb3cnKSkKICB9CgogIFRvb2x0aXAucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZW5hYmxlZCA9IHRydWUKICB9CgogIFRvb2x0aXAucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZQogIH0KCiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZW5hYmxlZCA9ICF0aGlzLmVuYWJsZWQKICB9CgogIFRvb2x0aXAucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMKICAgIGlmIChlKSB7CiAgICAgIHNlbGYgPSAkKGUuY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSkKICAgICAgaWYgKCFzZWxmKSB7CiAgICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUuY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSkKICAgICAgICAkKGUuY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZikKICAgICAgfQogICAgfQoKICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKQogIH0KCiAgVG9vbHRpcC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciB0aGF0ID0gdGhpcwogICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCkKICAgIHRoaXMuaGlkZShmdW5jdGlvbiAoKSB7CiAgICAgIHRoYXQuJGVsZW1lbnQub2ZmKCcuJyArIHRoYXQudHlwZSkucmVtb3ZlRGF0YSgnYnMuJyArIHRoYXQudHlwZSkKICAgIH0pCiAgfQoKCiAgLy8gVE9PTFRJUCBQTFVHSU4gREVGSU5JVElPTgogIC8vID09PT09PT09PT09PT09PT09PT09PT09PT0KCiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikgewogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKQogICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLnRvb2x0aXAnKQogICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uCgogICAgICBpZiAoIWRhdGEgJiYgb3B0aW9uID09ICdkZXN0cm95JykgcmV0dXJuCiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMudG9vbHRpcCcsIChkYXRhID0gbmV3IFRvb2x0aXAodGhpcywgb3B0aW9ucykpKQogICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKCkKICAgIH0pCiAgfQoKICB2YXIgb2xkID0gJC5mbi50b29sdGlwCgogICQuZm4udG9vbHRpcCAgICAgICAgICAgICA9IFBsdWdpbgogICQuZm4udG9vbHRpcC5Db25zdHJ1Y3RvciA9IFRvb2x0aXAKCgogIC8vIFRPT0xUSVAgTk8gQ09ORkxJQ1QKICAvLyA9PT09PT09PT09PT09PT09PT09CgogICQuZm4udG9vbHRpcC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgewogICAgJC5mbi50b29sdGlwID0gb2xkCiAgICByZXR1cm4gdGhpcwogIH0KCn0oalF1ZXJ5KTsKCi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBCb290c3RyYXA6IHBvcG92ZXIuanMgdjMuMy4yCiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3BvcG92ZXJzCiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy4KICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSkKICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgoKK2Z1bmN0aW9uICgkKSB7CiAgJ3VzZSBzdHJpY3QnOwoKICAvLyBQT1BPVkVSIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKICB2YXIgUG9wb3ZlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7CiAgICB0aGlzLmluaXQoJ3BvcG92ZXInLCBlbGVtZW50LCBvcHRpb25zKQogIH0KCiAgaWYgKCEkLmZuLnRvb2x0aXApIHRocm93IG5ldyBFcnJvcignUG9wb3ZlciByZXF1aXJlcyB0b29sdGlwLmpzJykKCiAgUG9wb3Zlci5WRVJTSU9OICA9ICczLjMuMicKCiAgUG9wb3Zlci5ERUZBVUxUUyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IuREVGQVVMVFMsIHsKICAgIHBsYWNlbWVudDogJ3JpZ2h0JywKICAgIHRyaWdnZXI6ICdjbGljaycsCiAgICBjb250ZW50OiAnJywKICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz0icG9wb3ZlciIgcm9sZT0idG9vbHRpcCI+PGRpdiBjbGFzcz0iYXJyb3ciPjwvZGl2PjxoMyBjbGFzcz0icG9wb3Zlci10aXRsZSI+PC9oMz48ZGl2IGNsYXNzPSJwb3BvdmVyLWNvbnRlbnQiPjwvZGl2PjwvZGl2PicKICB9KQoKCiAgLy8gTk9URTogUE9QT1ZFUiBFWFRFTkRTIHRvb2x0aXAuanMKICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKICBQb3BvdmVyLnByb3RvdHlwZSA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IucHJvdG90eXBlKQoKICBQb3BvdmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvcG92ZXIKCiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gUG9wb3Zlci5ERUZBVUxUUwogIH0KCiAgUG9wb3Zlci5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciAkdGlwICAgID0gdGhpcy50aXAoKQogICAgdmFyIHRpdGxlICAgPSB0aGlzLmdldFRpdGxlKCkKICAgIHZhciBjb250ZW50ID0gdGhpcy5nZXRDb250ZW50KCkKCiAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJylbdGhpcy5vcHRpb25zLmh0bWwgPyAnaHRtbCcgOiAndGV4dCddKHRpdGxlKQogICAgJHRpcC5maW5kKCcucG9wb3Zlci1jb250ZW50JykuY2hpbGRyZW4oKS5kZXRhY2goKS5lbmQoKVsgLy8gd2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50cwogICAgICB0aGlzLm9wdGlvbnMuaHRtbCA\/ICh0eXBlb2YgY29udGVudCA9PSAnc3RyaW5nJyA\/ICdodG1sJyA6ICdhcHBlbmQnKSA6ICd0ZXh0JwogICAgXShjb250ZW50KQoKICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0IGluJykKCiAgICAvLyBJRTggZG9lc24ndCBhY2NlcHQgaGlkaW5nIHZpYSB0aGUgYDplbXB0eWAgcHNldWRvIHNlbGVjdG9yLCB3ZSBoYXZlIHRvIGRvCiAgICAvLyB0aGlzIG1hbnVhbGx5IGJ5IGNoZWNraW5nIHRoZSBjb250ZW50cy4KICAgIGlmICghJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpLmh0bWwoKSkgJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpLmhpZGUoKQogIH0KCiAgUG9wb3Zlci5wcm90b3R5cGUuaGFzQ29udGVudCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5nZXRDb250ZW50KCkKICB9CgogIFBvcG92ZXIucHJvdG90eXBlLmdldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50CiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnMKCiAgICByZXR1cm4gJGUuYXR0cignZGF0YS1jb250ZW50JykKICAgICAgfHwgKHR5cGVvZiBvLmNvbnRlbnQgPT0gJ2Z1bmN0aW9uJyA\\/IHRhcmdldEhlaWdodCA6IGhlaWdodAoKICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiBzY3JvbGxUb3AgPD0gb2Zmc2V0VG9wKSByZXR1cm4gJ3RvcCcKICAgIGlmIChvZmZzZXRCb3R0b20gIT0gbnVsbCAmJiAoY29sbGlkZXJUb3AgKyBjb2xsaWRlckhlaWdodCA+PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pKSByZXR1cm4gJ2JvdHRvbScKCiAgICByZXR1cm4gZmFsc2UKICB9CgogIEFmZml4LnByb3RvdHlwZS5nZXRQaW5uZWRPZmZzZXQgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAodGhpcy5waW5uZWRPZmZzZXQpIHJldHVybiB0aGlzLnBpbm5lZE9mZnNldAogICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVCkuYWRkQ2xhc3MoJ2FmZml4JykKICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKCkKICAgIHZhciBwb3NpdGlvbiAgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpCiAgICByZXR1cm4gKHRoaXMucGlubmVkT2Zmc2V0ID0gcG9zaXRpb24udG9wIC0gc2Nyb2xsVG9wKQogIH0KCiAgQWZmaXgucHJvdG90eXBlLmNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wID0gZnVuY3Rpb24gKCkgewogICAgc2V0VGltZW91dCgkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcyksIDEpCiAgfQoKICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgIGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkgcmV0dXJuCgogICAgdmFyIGhlaWdodCAgICAgICA9IHRoaXMuJGVsZW1lbnQuaGVpZ2h0KCkKICAgIHZhciBvZmZzZXQgICAgICAgPSB0aGlzLm9wdGlvbnMub2Zmc2V0CiAgICB2YXIgb2Zmc2V0VG9wICAgID0gb2Zmc2V0LnRvcAogICAgdmFyIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b20KICAgIHZhciBzY3JvbGxIZWlnaHQgPSAkKCdib2R5JykuaGVpZ2h0KCkKCiAgICBpZiAodHlwZW9mIG9mZnNldCAhPSAnb2JqZWN0JykgICAgICAgICBvZmZzZXRCb3R0b20gPSBvZmZzZXRUb3AgPSBvZmZzZXQKICAgIGlmICh0eXBlb2Ygb2Zmc2V0VG9wID09ICdmdW5jdGlvbicpICAgIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3AodGhpcy4kZWxlbWVudCkKICAgIGlmICh0eXBlb2Ygb2Zmc2V0Qm90dG9tID09ICdmdW5jdGlvbicpIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b20odGhpcy4kZWxlbWVudCkKCiAgICB2YXIgYWZmaXggPSB0aGlzLmdldFN0YXRlKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSkKCiAgICBpZiAodGhpcy5hZmZpeGVkICE9IGFmZml4KSB7CiAgICAgIGlmICh0aGlzLnVucGluICE9IG51bGwpIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCAnJykKCiAgICAgIHZhciBhZmZpeFR5cGUgPSAnYWZmaXgnICsgKGFmZml4ID8gJy0nICsgYWZmaXggOiAnJykKICAgICAgdmFyIGUgICAgICAgICA9ICQuRXZlbnQoYWZmaXhUeXBlICsgJy5icy5hZmZpeCcpCgogICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSkKCiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm4KCiAgICAgIHRoaXMuYWZmaXhlZCA9IGFmZml4CiAgICAgIHRoaXMudW5waW4gPSBhZmZpeCA9PSAnYm90dG9tJyA\/IHRoaXMuZ2V0UGlubmVkT2Zmc2V0KCkgOiBudWxsCgogICAgICB0aGlzLiRlbGVtZW50CiAgICAgICAgLnJlbW92ZUNsYXNzKEFmZml4LlJFU0VUKQogICAgICAgIC5hZGRDbGFzcyhhZmZpeFR5cGUpCiAgICAgICAgLnRyaWdnZXIoYWZmaXhUeXBlLnJlcGxhY2UoJ2FmZml4JywgJ2FmZml4ZWQnKSArICcuYnMuYWZmaXgnKQogICAgfQoKICAgIGlmIChhZmZpeCA9PSAnYm90dG9tJykgewogICAgICB0aGlzLiRlbGVtZW50Lm9mZnNldCh7CiAgICAgICAgdG9wOiBzY3JvbGxIZWlnaHQgLSBoZWlnaHQgLSBvZmZzZXRCb3R0b20KICAgICAgfSkKICAgIH0KICB9CgoKICAvLyBBRkZJWCBQTFVHSU4gREVGSU5JVElPTgogIC8vID09PT09PT09PT09PT09PT09PT09PT09CgogIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHsKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgewogICAgICB2YXIgJHRoaXMgICA9ICQodGhpcykKICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5hZmZpeCcpCiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24KCiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWZmaXgnLCAoZGF0YSA9IG5ldyBBZmZpeCh0aGlzLCBvcHRpb25zKSkpCiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKQogICAgfSkKICB9CgogIHZhciBvbGQgPSAkLmZuLmFmZml4CgogICQuZm4uYWZmaXggICAgICAgICAgICAgPSBQbHVnaW4KICAkLmZuLmFmZml4LkNvbnN0cnVjdG9yID0gQWZmaXgKCgogIC8vIEFGRklYIE5PIENPTkZMSUNUCiAgLy8gPT09PT09PT09PT09PT09PT0KCiAgJC5mbi5hZmZpeC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgewogICAgJC5mbi5hZmZpeCA9IG9sZAogICAgcmV0dXJuIHRoaXMKICB9CgoKICAvLyBBRkZJWCBEQVRBLUFQSQogIC8vID09PT09PT09PT09PT09CgogICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHsKICAgICQoJ1tkYXRhLXNweT0iYWZmaXgiXScpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICB2YXIgJHNweSA9ICQodGhpcykKICAgICAgdmFyIGRhdGEgPSAkc3B5LmRhdGEoKQoKICAgICAgZGF0YS5vZmZzZXQgPSBkYXRhLm9mZnNldCB8fCB7fQoKICAgICAgaWYgKGRhdGEub2Zmc2V0Qm90dG9tICE9IG51bGwpIGRhdGEub2Zmc2V0LmJvdHRvbSA9IGRhdGEub2Zmc2V0Qm90dG9tCiAgICAgIGlmIChkYXRhLm9mZnNldFRvcCAgICAhPSBudWxsKSBkYXRhLm9mZnNldC50b3AgICAgPSBkYXRhLm9mZnNldFRvcAoKICAgICAgUGx1Z2luLmNhbGwoJHNweSwgZGF0YSkKICAgIH0pCiAgfSkKCn0oalF1ZXJ5KTsK",
    "size": "66732"
}