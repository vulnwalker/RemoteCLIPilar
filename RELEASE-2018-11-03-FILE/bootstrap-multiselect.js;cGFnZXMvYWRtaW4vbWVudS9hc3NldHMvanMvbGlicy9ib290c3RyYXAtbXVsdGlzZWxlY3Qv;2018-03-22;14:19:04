{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/bootstrap-multiselect\/bootstrap-multiselect.js",
    "lastUpdate": "2018-03-22+14:19:04.87",
    "contentFile": "\/IHRydWUgOiBqdXN0VmlzaWJsZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKGp1c3RWaXNpYmxlKSB7ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciB2aXNpYmxlQ2hlY2tib3hlcyA9ICQoImxpIGlucHV0W3R5cGU9J2NoZWNrYm94J106ZW5hYmxlZCIsIHRoaXMuJHVsKS5maWx0ZXIoIjp2aXNpYmxlIik7CiAgICAgICAgICAgICAgICB2aXNpYmxlQ2hlY2tib3hlcy5wcm9wKCdjaGVja2VkJywgZmFsc2UpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gdmlzaWJsZUNoZWNrYm94ZXMubWFwKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLnZhbCgpOwogICAgICAgICAgICAgICAgfSkuZ2V0KCk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICQoIm9wdGlvbjplbmFibGVkIiwgdGhpcy4kc2VsZWN0KS5maWx0ZXIoZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5pbkFycmF5KCQodGhpcykudmFsKCksIHZhbHVlcykgIT09IC0xOwogICAgICAgICAgICAgICAgfSkucHJvcCgnc2VsZWN0ZWQnLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcykgewogICAgICAgICAgICAgICAgICAgICQoImxpOm5vdCguZGl2aWRlcik6bm90KC5kaXNhYmxlZCkiLCB0aGlzLiR1bCkuZmlsdGVyKCI6dmlzaWJsZSIpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5zZWxlY3RlZENsYXNzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICQoImxpIGlucHV0W3R5cGU9J2NoZWNrYm94J106ZW5hYmxlZCIsIHRoaXMuJHVsKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpOwogICAgICAgICAgICAgICAgJCgib3B0aW9uOmVuYWJsZWQiLCB0aGlzLiRzZWxlY3QpLnByb3AoJ3NlbGVjdGVkJywgZmFsc2UpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MpIHsKICAgICAgICAgICAgICAgICAgICAkKCJsaTpub3QoLmRpdmlkZXIpOm5vdCguZGlzYWJsZWQpIiwgdGhpcy4kdWwpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5zZWxlY3RlZENsYXNzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIFJlYnVpbGQgdGhlIHBsdWdpbi4KICAgICAgICAgKiAKICAgICAgICAgKiBSZWJ1aWxkcyB0aGUgZHJvcGRvd24sIHRoZSBmaWx0ZXIgYW5kIHRoZSBzZWxlY3QgYWxsIG9wdGlvbi4KICAgICAgICAgKi8KICAgICAgICByZWJ1aWxkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy4kdWwuaHRtbCgnJyk7CgogICAgICAgICAgICAvLyBJbXBvcnRhbnQgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiByYWRpb3MgYW5kIGNoZWNrYm94ZXMuCiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5tdWx0aXBsZSA9IHRoaXMuJHNlbGVjdC5hdHRyKCdtdWx0aXBsZScpID09PSAibXVsdGlwbGUiOwoKICAgICAgICAgICAgdGhpcy5idWlsZFNlbGVjdEFsbCgpOwogICAgICAgICAgICB0aGlzLmJ1aWxkRHJvcGRvd25PcHRpb25zKCk7CiAgICAgICAgICAgIHRoaXMuYnVpbGRGaWx0ZXIoKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRoaXMudXBkYXRlQnV0dG9uVGV4dCgpOwogICAgICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdEFsbCgpOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlSWZFbXB0eSAmJiAkKCdvcHRpb24nLCB0aGlzLiRzZWxlY3QpLmxlbmd0aCA8PSAwKSB7CiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kcm9wUmlnaHQpIHsKICAgICAgICAgICAgICAgIHRoaXMuJHVsLmFkZENsYXNzKCdwdWxsLXJpZ2h0Jyk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgcHJvdmlkZWQgZGF0YSB3aWxsIGJlIHVzZWQgdG8gYnVpbGQgdGhlIGRyb3Bkb3duLgogICAgICAgICAqLwogICAgICAgIGRhdGFwcm92aWRlcjogZnVuY3Rpb24oZGF0YXByb3ZpZGVyKSB7CiAgICAgICAgICAgIHZhciBvcHRpb25ET00gPSAiIjsKICAgICAgICAgICAgdmFyIGdyb3VwQ291bnRlciA9IDA7CiAgICAgICAgICAgIHZhciB0YWdzID0gJCgnJyk7IC8vIGNyZWF0ZSBlbXB0eSBqUXVlcnkgYXJyYXkKCiAgICAgICAgICAgICQuZWFjaChkYXRhcHJvdmlkZXIsIGZ1bmN0aW9uIChpbmRleCwgb3B0aW9uKSB7CiAgICAgICAgICAgICAgICB2YXIgdGFnOwogICAgICAgICAgICAgICAgaWYgKCQuaXNBcnJheShvcHRpb24uY2hpbGRyZW4pKSB7IC8vIGNyZWF0ZSBvcHRpb25ncm91cCB0YWcKICAgICAgICAgICAgICAgICAgICBncm91cENvdW50ZXIrKzsKICAgICAgICAgICAgICAgICAgICB0YWcgPSAkKCc8b3B0Z3JvdXAvPicpLmF0dHIoewogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogb3B0aW9uLmxhYmVsIHx8ICdHcm91cCAnICsgZ3JvdXBDb3VudGVyCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgZm9yRWFjaChvcHRpb24uY2hpbGRyZW4sIGZ1bmN0aW9uKHN1Yk9wdGlvbikgeyAvLyBhZGQgY2hpbGRyZW4gb3B0aW9uIHRhZ3MKICAgICAgICAgICAgICAgICAgICAgICAgdGFnLmFwcGVuZCgkKCc8b3B0aW9uLz4nKS5hdHRyKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzdWJPcHRpb24udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogc3ViT3B0aW9uLmxhYmVsIHx8IHN1Yk9wdGlvbi52YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzdWJPcHRpb24udGl0bGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogISFzdWJPcHRpb24uc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICBvcHRpb25ET00gKz0gJzwvb3B0Z3JvdXA+JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBjcmVhdGUgb3B0aW9uIHRhZwogICAgICAgICAgICAgICAgICAgIHRhZyA9ICQoJzxvcHRpb24vPicpLmF0dHIoewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb3B0aW9uLnZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogb3B0aW9uLmxhYmVsIHx8IG9wdGlvbi52YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG9wdGlvbi50aXRsZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6ICEhb3B0aW9uLnNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGFncyA9IHRhZ3MuYWRkKHRhZyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAgICAgdGhpcy4kc2VsZWN0LmVtcHR5KCkuYXBwZW5kKHRhZ3MpOwogICAgICAgICAgICB0aGlzLnJlYnVpbGQoKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBFbmFibGUgdGhlIG11bHRpc2VsZWN0LgogICAgICAgICAqLwogICAgICAgIGVuYWJsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuJHNlbGVjdC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTsKICAgICAgICAgICAgdGhpcy4kYnV0dG9uLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpCiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogRGlzYWJsZSB0aGUgbXVsdGlzZWxlY3QuCiAgICAgICAgICovCiAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuJHNlbGVjdC5wcm9wKCdkaXNhYmxlZCcsIHRydWUpOwogICAgICAgICAgICB0aGlzLiRidXR0b24ucHJvcCgnZGlzYWJsZWQnLCB0cnVlKQogICAgICAgICAgICAgICAgLmFkZENsYXNzKCdkaXNhYmxlZCcpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIFNldCB0aGUgb3B0aW9ucy4KICAgICAgICAgKiAKICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zCiAgICAgICAgICovCiAgICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLm1lcmdlT3B0aW9ucyhvcHRpb25zKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBNZXJnZXMgdGhlIGdpdmVuIG9wdGlvbnMgd2l0aCB0aGUgZGVmYXVsdCBvcHRpb25zLgogICAgICAgICAqIAogICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IG9wdGlvbnMKICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9CiAgICAgICAgICovCiAgICAgICAgbWVyZ2VPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyk7CiAgICAgICAgfSwKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBDaGVja3Mgd2hldGhlciBhIHNlbGVjdCBhbGwgY2hlY2tib3ggaXMgcHJlc2VudC4KICAgICAgICAgKiAKICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBoYXNTZWxlY3RBbGw6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gJCgnbGkuJyArIHRoaXMub3B0aW9ucy5zZWxlY3RBbGxWYWx1ZSwgdGhpcy4kdWwpLmxlbmd0aCA+IDA7CiAgICAgICAgfSwKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBVcGRhdGVzIHRoZSBzZWxlY3QgYWxsIGNoZWNrYm94IGJhc2VkIG9uIHRoZSBjdXJyZW50bHkgZGlzcGxheWVkIGFuZCBzZWxlY3RlZCBjaGVja2JveGVzLgogICAgICAgICAqLwogICAgICAgIHVwZGF0ZVNlbGVjdEFsbDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmhhc1NlbGVjdEFsbCgpKSB7CiAgICAgICAgICAgICAgICB2YXIgYWxsQm94ZXMgPSAkKCJsaTpub3QoLm11bHRpc2VsZWN0LWl0ZW0pOm5vdCguZmlsdGVyLWhpZGRlbikgaW5wdXQ6ZW5hYmxlZCIsIHRoaXMuJHVsKTsKICAgICAgICAgICAgICAgIHZhciBhbGxCb3hlc0xlbmd0aCA9IGFsbEJveGVzLmxlbmd0aDsKICAgICAgICAgICAgICAgIHZhciBjaGVja2VkQm94ZXNMZW5ndGggPSBhbGxCb3hlcy5maWx0ZXIoIjpjaGVja2VkIikubGVuZ3RoOwogICAgICAgICAgICAgICAgdmFyIHNlbGVjdEFsbExpICA9ICQoImxpLiIgKyB0aGlzLm9wdGlvbnMuc2VsZWN0QWxsVmFsdWUsIHRoaXMuJHVsKTsKICAgICAgICAgICAgICAgIHZhciBzZWxlY3RBbGxJbnB1dCA9IHNlbGVjdEFsbExpLmZpbmQoImlucHV0Iik7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIChjaGVja2VkQm94ZXNMZW5ndGggPiAwICYmIGNoZWNrZWRCb3hlc0xlbmd0aCA9PT0gYWxsQm94ZXNMZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBzZWxlY3RBbGxJbnB1dC5wcm9wKCJjaGVja2VkIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsTGkuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsSW5wdXQucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICBzZWxlY3RBbGxMaS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIAogICAgICAgIC8qKgogICAgICAgICAqIFVwZGF0ZSB0aGUgYnV0dG9uIHRleHQgYW5kIGl0cyB0aXRsZSBiYXNlZCBvbiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIG9wdGlvbnMuCiAgICAgICAgICovCiAgICAgICAgdXBkYXRlQnV0dG9uVGV4dDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5nZXRTZWxlY3RlZCgpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gRmlyc3QgdXBkYXRlIHRoZSBkaXNwbGF5ZWQgYnV0dG9uIHRleHQuCiAgICAgICAgICAgICQoJy5tdWx0aXNlbGVjdCcsIHRoaXMuJGNvbnRhaW5lcikuaHRtbCh0aGlzLm9wdGlvbnMuYnV0dG9uVGV4dChvcHRpb25zLCB0aGlzLiRzZWxlY3QpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIE5vdyB1cGRhdGUgdGhlIHRpdGxlIGF0dHJpYnV0ZSBvZiB0aGUgYnV0dG9uLgogICAgICAgICAgICAkKCcubXVsdGlzZWxlY3QnLCB0aGlzLiRjb250YWluZXIpLmF0dHIoJ3RpdGxlJywgdGhpcy5vcHRpb25zLmJ1dHRvblRpdGxlKG9wdGlvbnMsIHRoaXMuJHNlbGVjdCkpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEdldCBhbGwgc2VsZWN0ZWQgb3B0aW9ucy4KICAgICAgICAgKiAKICAgICAgICAgKiBAcmV0dXJucyB7alFVZXJ5fQogICAgICAgICAqLwogICAgICAgIGdldFNlbGVjdGVkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICQoJ29wdGlvbicsIHRoaXMuJHNlbGVjdCkuZmlsdGVyKCI6c2VsZWN0ZWQiKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIGEgc2VsZWN0IG9wdGlvbiBieSBpdHMgdmFsdWUuCiAgICAgICAgICogCiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlCiAgICAgICAgICogQHJldHVybnMge2pRdWVyeX0KICAgICAgICAgKi8KICAgICAgICBnZXRPcHRpb25CeVZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHsKCiAgICAgICAgICAgIHZhciBvcHRpb25zID0gJCgnb3B0aW9uJywgdGhpcy4kc2VsZWN0KTsKICAgICAgICAgICAgdmFyIHZhbHVlVG9Db21wYXJlID0gdmFsdWUudG9TdHJpbmcoKTsKCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkgPSBpICsgMSkgewogICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG9wdGlvbnNbaV07CiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLnZhbHVlID09PSB2YWx1ZVRvQ29tcGFyZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkKG9wdGlvbik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBHZXQgdGhlIGlucHV0IChyYWRpby9jaGVja2JveCkgYnkgaXRzIHZhbHVlLgogICAgICAgICAqIAogICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZQogICAgICAgICAqIEByZXR1cm5zIHtqUXVlcnl9CiAgICAgICAgICovCiAgICAgICAgZ2V0SW5wdXRCeVZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHsKCiAgICAgICAgICAgIHZhciBjaGVja2JveGVzID0gJCgnbGkgaW5wdXQnLCB0aGlzLiR1bCk7CiAgICAgICAgICAgIHZhciB2YWx1ZVRvQ29tcGFyZSA9IHZhbHVlLnRvU3RyaW5nKCk7CgogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoZWNrYm94ZXMubGVuZ3RoOyBpID0gaSArIDEpIHsKICAgICAgICAgICAgICAgIHZhciBjaGVja2JveCA9IGNoZWNrYm94ZXNbaV07CiAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3gudmFsdWUgPT09IHZhbHVlVG9Db21wYXJlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoY2hlY2tib3gpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogVXNlZCBmb3Iga25vY2tvdXQgaW50ZWdyYXRpb24uCiAgICAgICAgICovCiAgICAgICAgdXBkYXRlT3JpZ2luYWxPcHRpb25zOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5vcmlnaW5hbE9wdGlvbnMgPSB0aGlzLiRzZWxlY3QuY2xvbmUoKVswXS5vcHRpb25zOwogICAgICAgIH0sCgogICAgICAgIGFzeW5jRnVuY3Rpb246IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aW1lb3V0LCBzZWxmKSB7CiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTsKICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShzZWxmIHx8IHdpbmRvdywgYXJncyk7CiAgICAgICAgICAgIH0sIHRpbWVvdXQpOwogICAgICAgIH0KICAgIH07CgogICAgJC5mbi5tdWx0aXNlbGVjdCA9IGZ1bmN0aW9uKG9wdGlvbiwgcGFyYW1ldGVyLCBleHRyYU9wdGlvbnMpIHsKICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YSgnbXVsdGlzZWxlY3QnKTsKICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09PSAnb2JqZWN0JyAmJiBvcHRpb247CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBtdWx0aXNlbGVjdC4KICAgICAgICAgICAgaWYgKCFkYXRhKSB7CiAgICAgICAgICAgICAgICBkYXRhID0gbmV3IE11bHRpc2VsZWN0KHRoaXMsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgJCh0aGlzKS5kYXRhKCdtdWx0aXNlbGVjdCcsIGRhdGEpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBDYWxsIG11bHRpc2VsZWN0IG1ldGhvZC4KICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICBkYXRhW29wdGlvbl0ocGFyYW1ldGVyLCBleHRyYU9wdGlvbnMpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiAob3B0aW9uID09PSAnZGVzdHJveScpIHsKICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ211bHRpc2VsZWN0JywgZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9OwoKICAgICQuZm4ubXVsdGlzZWxlY3QuQ29uc3RydWN0b3IgPSBNdWx0aXNlbGVjdDsKCiAgICAkKGZ1bmN0aW9uKCkgewogICAgICAgICQoInNlbGVjdFtkYXRhLXJvbGU9bXVsdGlzZWxlY3RdIikubXVsdGlzZWxlY3QoKTsKICAgIH0pOwoKfSh3aW5kb3cualF1ZXJ5KTs=",
    "size": "47918"
}