{
    "namaFile": "vendor\/popper\/popper.js",
    "lastUpdate": "2017-10-25+18:26:05.14",
    "contentFile": "LyoqIQogKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuCiAqIEB2ZXJzaW9uIDEuMTEuMQogKiBAbGljZW5zZQogKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnMKICoKICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQogKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CiAqCiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbAogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgogKgogKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUKICogU09GVFdBUkUuCiAqLwooZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkgewoJdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOgoJdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDoKCShnbG9iYWwuUG9wcGVyID0gZmFjdG9yeSgpKTsKfSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7Cgp2YXIgbmF0aXZlSGludHMgPSBbJ25hdGl2ZSBjb2RlJywgJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSddOwoKLyoqCiAqIERldGVybWluZSBpZiBhIGZ1bmN0aW9uIGlzIGltcGxlbWVudGVkIG5hdGl2ZWx5IChhcyBvcHBvc2VkIHRvIGEgcG9seWZpbGwpLgogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtGdW5jdGlvbiB8IHVuZGVmaW5lZH0gZm4gdGhlIGZ1bmN0aW9uIHRvIGNoZWNrCiAqIEByZXR1cm5zIHtCb29sZWFufQogKi8KdmFyIGlzTmF0aXZlID0gKGZ1bmN0aW9uIChmbikgewogIHJldHVybiBuYXRpdmVIaW50cy5zb21lKGZ1bmN0aW9uIChoaW50KSB7CiAgICByZXR1cm4gKGZuIHx8ICcnKS50b1N0cmluZygpLmluZGV4T2YoaGludCkgPiAtMTsKICB9KTsKfSk7Cgp2YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7CnZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107CnZhciB0aW1lb3V0RHVyYXRpb24gPSAwOwpmb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkgewogIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkgewogICAgdGltZW91dER1cmF0aW9uID0gMTsKICAgIGJyZWFrOwogIH0KfQoKZnVuY3Rpb24gbWljcm90YXNrRGVib3VuY2UoZm4pIHsKICB2YXIgc2NoZWR1bGVkID0gZmFsc2U7CiAgdmFyIGkgPSAwOwogIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwoKICAvLyBNdXRhdGlvbk9ic2VydmVyIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBzY2hlZHVsaW5nIG1pY3JvdGFza3MsIHdoaWNoCiAgLy8gYXJlIHNjaGVkdWxlZCAqYmVmb3JlKiB0aGUgbmV4dCB0YXNrLiBUaGlzIGdpdmVzIHVzIGEgd2F5IHRvIGRlYm91bmNlCiAgLy8gYSBmdW5jdGlvbiBidXQgZW5zdXJlIGl0J3MgY2FsbGVkICpiZWZvcmUqIHRoZSBuZXh0IHBhaW50LgogIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uICgpIHsKICAgIGZuKCk7CiAgICBzY2hlZHVsZWQgPSBmYWxzZTsKICB9KTsKCiAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtLCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7CgogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIXNjaGVkdWxlZCkgewogICAgICBzY2hlZHVsZWQgPSB0cnVlOwogICAgICBlbGVtLnNldEF0dHJpYnV0ZSgneC1pbmRleCcsIGkpOwogICAgICBpID0gaSArIDE7IC8vIGRvbid0IHVzZSBjb21wdW5kICgrPSkgYmVjYXVzZSBpdCBkb2Vzbid0IGdldCBvcHRpbWl6ZWQgaW4gVjgKICAgIH0KICB9Owp9CgpmdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHsKICB2YXIgc2NoZWR1bGVkID0gZmFsc2U7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIGlmICghc2NoZWR1bGVkKSB7CiAgICAgIHNjaGVkdWxlZCA9IHRydWU7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlOwogICAgICAgIGZuKCk7CiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7CiAgICB9CiAgfTsKfQoKLy8gSXQncyBjb21tb24gZm9yIE11dGF0aW9uT2JzZXJ2ZXIgcG9seWZpbGxzIHRvIGJlIHNlZW4gaW4gdGhlIHdpbGQsIGhvd2V2ZXIKLy8gdGhlc2UgcmVseSBvbiBNdXRhdGlvbiBFdmVudHMgd2hpY2ggb25seSBvY2N1ciB3aGVuIGFuIGVsZW1lbnQgaXMgY29ubmVjdGVkCi8vIHRvIHRoZSBET00uIFRoZSBhbGdvcml0aG0gdXNlZCBpbiB0aGlzIG1vZHVsZSBkb2VzIG5vdCB1c2UgYSBjb25uZWN0ZWQgZWxlbWVudCwKLy8gYW5kIHNvIHdlIG11c3QgZW5zdXJlIHRoYXQgYSAqbmF0aXZlKiBNdXRhdGlvbk9ic2VydmVyIGlzIGF2YWlsYWJsZS4KdmFyIHN1cHBvcnRzTmF0aXZlTXV0YXRpb25PYnNlcnZlciA9IGlzQnJvd3NlciAmJiBpc05hdGl2ZSh3aW5kb3cuTXV0YXRpb25PYnNlcnZlcik7CgovKioKKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkCiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLgoqCiogQG1ldGhvZAoqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmbgoqIEByZXR1cm5zIHtGdW5jdGlvbn0KKi8KdmFyIGRlYm91bmNlID0gc3VwcG9ydHNOYXRpdmVNdXRhdGlvbk9ic2VydmVyID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7CgovKioKICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb24KICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVjawogKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uPwogKi8KZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHsKICB2YXIgZ2V0VHlwZSA9IHt9OwogIHJldHVybiBmdW5jdGlvblRvQ2hlY2sgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7Cn0KCi8qKgogKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudAogKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkKICovCmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkgewogIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7CiAgICByZXR1cm4gW107CiAgfQogIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlCiAgdmFyIGNzcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpOwogIHJldHVybiBwcm9wZXJ0eSA\/IGNzc1twcm9wZXJ0eV0gOiBjc3M7Cn0KCi8qKgogKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQKICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudAogKi8KZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7CiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykgewogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfQogIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0Owp9CgovKioKICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudAogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50CiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50CiAqLwpmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkgewogIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdAogIGlmICghZWxlbWVudCB8fCBbJ0hUTUwnLCAnQk9EWScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGVsZW1lbnQubm9kZU5hbWUpICE9PSAtMSkgewogICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5ib2R5OwogIH0KCiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsCgogIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksCiAgICAgIG92ZXJmbG93ID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93LAogICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLAogICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZOwoKICBpZiAoLyhhdXRvfHNjcm9sbCkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7CiAgICByZXR1cm4gZWxlbWVudDsKICB9CgogIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7Cn0KCi8qKgogKiBSZXR1cm5zIHRoZSBvZmZzZXQgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQKICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnQKICovCmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7CiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmUKICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudCAmJiBlbGVtZW50Lm9mZnNldFBhcmVudDsKICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lOwoKICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykgewogICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CiAgfQoKICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFREIG9yIFRBQkxFIGluIGNhc2UKICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uCiAgaWYgKFsnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykgewogICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpOwogIH0KCiAgcmV0dXJuIG9mZnNldFBhcmVudDsKfQoKZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkgewogIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7CgogIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDsKfQoKLyoqCiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnQKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZQogKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlCiAqLwpmdW5jdGlvbiBnZXRSb290KG5vZGUpIHsKICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7CiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpOwogIH0KCiAgcmV0dXJuIG5vZGU7Cn0KCi8qKgogKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2RlcwogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MQogKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyCiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudAogKi8KZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHsKICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb24KICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7CiAgICByZXR1cm4gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICB9CgogIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgInN0YXJ0IiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET00KICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORzsKICB2YXIgc3RhcnQgPSBvcmRlciA\/IGVsZW1lbnQxIDogZWxlbWVudDI7CiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTsKCiAgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXIKICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpOwogIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTsKICByYW5nZS5zZXRFbmQoZW5kLCAwKTsKICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjsKCiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudAoKICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7CiAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7CiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjsKICAgIH0KCiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTsKICB9CgogIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmUKICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7CiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7CiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7CiAgfQp9CgovKioKICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQKICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgCiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHMKICovCmZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7CiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA\/IGFyZ3VtZW50c1sxXSA6ICd0b3AnOwoKICB2YXIgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JzsKICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lOwoKICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7CiAgICB2YXIgaHRtbCA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7CiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdOwogIH0KCiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTsKfQoKLyoKICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZQogKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXMKICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzCiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdAogKi8KZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50KSB7CiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKCiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7CiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTsKICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA\/IC0xIDogMTsKICByZWN0LnRvcCArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjsKICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjsKICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyOwogIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyOwogIHJldHVybiByZWN0Owp9CgovKgogKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlcwogKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnQKICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgCiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXMKICovCgpmdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHsKICB2YXIgc2lkZUEgPSBheGlzID09PSAneCcgPyAnTGVmdCcgOiAnVG9wJzsKICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nOwoKICByZXR1cm4gK3N0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10uc3BsaXQoJ3B4JylbMF0gKyArc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXS5zcGxpdCgncHgnKVswXTsKfQoKLyoqCiAqIFRlbGxzIGlmIHlvdSBhcmUgcnVubmluZyBJbnRlcm5ldCBFeHBsb3JlciAxMAogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQHJldHVybnMge0Jvb2xlYW59IGlzSUUxMAogKi8KdmFyIGlzSUUxMCA9IHVuZGVmaW5lZDsKCnZhciBpc0lFMTAkMSA9IGZ1bmN0aW9uICgpIHsKICBpZiAoaXNJRTEwID09PSB1bmRlZmluZWQpIHsKICAgIGlzSUUxMCA9IG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoJ01TSUUgMTAnKSAhPT0gLTE7CiAgfQogIHJldHVybiBpc0lFMTA7Cn07CgpmdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHsKICByZXR1cm4gTWF0aC5tYXgoYm9keVsnb2Zmc2V0JyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaXNJRTEwJDEoKSA\/IGh0bWxbJ29mZnNldCcgKyBheGlzXSArIGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldICsgY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA\/ICdCb3R0b20nIDogJ1JpZ2h0JyldIDogMCk7Cn0KCmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKCkgewogIHZhciBib2R5ID0gd2luZG93LmRvY3VtZW50LmJvZHk7CiAgdmFyIGh0bWwgPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRTEwJDEoKSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTsKCiAgcmV0dXJuIHsKICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksCiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKQogIH07Cn0KCnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9OwoKdmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICAgIH0KICB9CgogIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgICByZXR1cm4gQ29uc3RydWN0b3I7CiAgfTsKfSgpOwoKCgoKCnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9OwoKdmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CgogICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgewogICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn07CgovKioKICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3QKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzCiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXQKICovCmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykgewogIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywgewogICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsCiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHQKICB9KTsKfQoKLyoqCiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50CiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3QKICovCmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7CiAgdmFyIHJlY3QgPSB7fTsKCiAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndAogIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLgogIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTEKICBpZiAoaXNJRTEwJDEoKSkgewogICAgdHJ5IHsKICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpOwogICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpOwogICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7CiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0OwogICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7CiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDsKICAgIH0gY2F0Y2ggKGVycikge30KICB9IGVsc2UgewogICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgfQoKICB2YXIgcmVzdWx0ID0gewogICAgbGVmdDogcmVjdC5sZWZ0LAogICAgdG9wOiByZWN0LnRvcCwKICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LAogICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wCiAgfTsKCiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplcwogIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA\\/ICctJyArIHZhcmlhdGlvbiA6ICcnKTsKfQoKLyoqCiAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudAogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQHBhcmFtIHtPYmplY3R9IHN0YXRlCiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50CiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcykKICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIKICovCmZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7CiAgdmFyIGNvbW1vbk9mZnNldFBhcmVudCA9IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpOwogIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQpOwp9CgovKioKICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKQogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50CiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllcwogKi8KZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7CiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpOwogIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSk7CiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0KSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0KTsKICB2YXIgcmVzdWx0ID0gewogICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LAogICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHgKICB9OwogIHJldHVybiByZXN1bHQ7Cn0KCi8qKgogKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lCiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50CiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50CiAqLwpmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHsKICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9OwogIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7CiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTsKICB9KTsKfQoKLyoqCiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXIKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWQKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50CiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzIC0gdGhlIHJlZmVyZW5jZSBvZmZzZXRzICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcykKICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnMKICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyCiAqLwpmdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7CiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07CgogIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplcwogIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpOwoKICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0CiAgdmFyIHBvcHBlck9mZnNldHMgPSB7CiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCwKICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHQKICB9OwoKICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5CiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xOwogIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JzsKICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJzsKICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnOwogIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnOwoKICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyOwogIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHsKICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07CiAgfSBlbHNlIHsKICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTsKICB9CgogIHJldHVybiBwb3BwZXJPZmZzZXRzOwp9CgovKioKICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5CiAqIEBtZXRob2QKICogQG1lbWJlcm9mIFBvcHBlci5VdGlscwogKiBAYXJndW1lbnQge0FycmF5fSBhcnIKICogQGFyZ3VtZW50IHByb3AKICogQGFyZ3VtZW50IHZhbHVlCiAqIEByZXR1cm5zIGluZGV4IG9yIC0xCiAqLwpmdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHsKICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkCiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7CiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spOwogIH0KCiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGAKICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07Cn0KCi8qKgogKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3QKICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBhcmd1bWVudCB7QXJyYXl9IGFycgogKiBAYXJndW1lbnQgcHJvcAogKiBAYXJndW1lbnQgdmFsdWUKICogQHJldHVybnMgaW5kZXggb3IgLTEKICovCmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7CiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkCiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHsKICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHsKICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7CiAgICB9KTsKICB9CgogIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkCiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHsKICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlOwogIH0pOwogIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7Cn0KCi8qKgogKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLAogKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LgogKiBAbWV0aG9kCiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMKICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhCiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycwogKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyCiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fQogKi8KZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykgewogIHZhciBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZCA\\/KQogIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXQKICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudAogIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudAogIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93CiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi4KICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldAogIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZgogIC8vIGl0cyBib3R0b20uCiAgdmFyIGxlZnQgPSB2b2lkIDAsCiAgICAgIHRvcCA9IHZvaWQgMDsKICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7CiAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTsKICB9IGVsc2UgewogICAgdG9wID0gb2Zmc2V0cy50b3A7CiAgfQogIGlmIChzaWRlQiA9PT0gJ3JpZ2h0JykgewogICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDsKICB9IGVsc2UgewogICAgbGVmdCA9IG9mZnNldHMubGVmdDsKICB9CiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7CiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgsIDApJzsKICAgIHN0eWxlc1tzaWRlQV0gPSAwOwogICAgc3R5bGVzW3NpZGVCXSA9IDA7CiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nOwogIH0gZWxzZSB7CiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllcwogICAgdmFyIGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA\/IC0xIDogMTsKICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7CiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wOwogICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0OwogICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjsKICB9CgogIC8vIEF0dHJpYnV0ZXMKICB2YXIgYXR0cmlidXRlcyA9IHsKICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50CiAgfTsKCiAgLy8gVXBkYXRlIGF0dHJpYnV0ZXMgYW5kIHN0eWxlcyBvZiBgZGF0YWAKICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTsKICBkYXRhLnN0eWxlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMsIGRhdGEuc3R5bGVzKTsKCiAgcmV0dXJuIGRhdGE7Cn0KCi8qKgogKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+CiAqIEl0IGNoZWNrcyBpZiB0aGUgbmVlZGVkIG1vZGlmaWVyIGlzIGxpc3RlZCBhbmQgZW5hYmxlZC4KICogQG1ldGhvZAogKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzCiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycyAtIGxpc3Qgb2YgbW9kaWZpZXJzCiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllcgogKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyCiAqIEByZXR1cm5zIHtCb29sZWFufQogKi8KZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHsKICB2YXIgcmVxdWVzdGluZyA9IGZpbmQobW9kaWZpZXJzLCBmdW5jdGlvbiAoX3JlZikgewogICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7CiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7CiAgfSk7CgogIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikgewogICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiYgbW9kaWZpZXIuZW5hYmxlZCAmJiBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXI7CiAgfSk7CgogIGlmICghaXNSZXF1aXJlZCkgewogICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7CiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJzsKICAgIGNvbnNvbGUud2FybihyZXF1ZXN0ZWQgKyAnIG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICcgKyBfcmVxdWVzdGluZyArICcgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAnICsgX3JlcXVlc3RpbmcgKyAnIScpOwogIH0KICByZXR1cm4gaXNSZXF1aXJlZDsKfQoKLyoqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgTW9kaWZpZXJzCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnMKICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZAogKi8KZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykgewogIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmsKICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7CiAgICByZXR1cm4gZGF0YTsKICB9CgogIHZhciBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7CgogIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yCiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7CiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7CgogICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllcgogICAgaWYgKCFhcnJvd0VsZW1lbnQpIHsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CiAgfSBlbHNlIHsKICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlCiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGUKICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkgewogICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CiAgfQoKICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTsKICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cywKICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsCiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlOwoKICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7CgogIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnOwogIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA\/ICd0b3AnIDogJ2xlZnQnOwogIHZhciBhbHRTaWRlID0gaXNWZXJ0aWNhbCA\\/ICdyaWdodCcgOiAnYm90dG9tJzsKICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA\/ICdsZWZ0JyA6ICd0b3AnOwogIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7CgogIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHsKICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07CiAgfQogIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHsKICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7CiAgfQoKICByZXR1cm4gZGF0YTsKfQoKLyoqCiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXIKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH0KICogQHByaXZhdGUKICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmcKICogQGFyZ3VtZW50IHtTdHJpbmd9IG1lYXN1cmVtZW50IC0gYGhlaWdodGAgb3IgYHdpZHRoYAogKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0cwogKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cwogKiBAcmV0dXJucyB7TnVtYmVyfFN0cmluZ30KICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkCiAqLwpmdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHsKICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXQKICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcLXxcKyk\/XGQqXC4\/XGQqKSguKikvKTsKICB2YXIgdmFsdWUgPSArc3BsaXRbMV07CiAgdmFyIHVuaXQgPSBzcGxpdFsyXTsKCiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzcwogIGlmICghdmFsdWUpIHsKICAgIHJldHVybiBzdHI7CiAgfQoKICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHsKICAgIHZhciBlbGVtZW50ID0gdm9pZCAwOwogICAgc3dpdGNoICh1bml0KSB7CiAgICAgIGNhc2UgJyVwJzoKICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0czsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnJSc6CiAgICAgIGNhc2UgJyVyJzoKICAgICAgZGVmYXVsdDoKICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0czsKICAgIH0KCiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7CiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTsKICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3JykgewogICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydAogICAgdmFyIHNpemUgPSB2b2lkIDA7CiAgICBpZiAodW5pdCA9PT0gJ3ZoJykgewogICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApOwogICAgfSBlbHNlIHsKICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7CiAgICB9CiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlOwogIH0gZWxzZSB7CiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZQogICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZQogICAgcmV0dXJuIHZhbHVlOwogIH0KfQoKLyoqCiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9CiAqIEBwcml2YXRlCiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXQKICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHMKICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMKICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnQKICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzCiAqLwpmdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHsKICB2YXIgb2Zmc2V0cyA9IFswLCAwXTsKCiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoCiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZQogIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmUKICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7CgogIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcwogIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YykKICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXCt8XC0pLykubWFwKGZ1bmN0aW9uIChmcmFnKSB7CiAgICByZXR1cm4gZnJhZy50cmltKCk7CiAgfSk7CgogIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZQogIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlCiAgdmFyIGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihmaW5kKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHsKICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxccy8pICE9PSAtMTsKICB9KSk7CgogIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHsKICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpOwogIH0KCiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlCiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLgogIHZhciBzcGxpdFJlZ2V4ID0gL1xzKixccyp8XHMrLzsKICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTsKCiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnMKICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHsKICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXIKICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA\/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnOwogICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7CiAgICByZXR1cm4gb3AKICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzCiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdCiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHsKICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiOwogICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTsKICAgICAgICByZXR1cm4gYTsKICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykgewogICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiOwogICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7CiAgICAgICAgcmV0dXJuIGE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpOwogICAgICB9CiAgICB9LCBbXSkKICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KQogICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7CiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpOwogICAgfSk7CiAgfSk7CgogIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9ucwogIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHsKICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4MikgewogICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7CiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTsKICAgICAgfQogICAgfSk7CiAgfSk7CiAgcmV0dXJuIG9mZnNldHM7Cn0KCi8qKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1vZGlmaWVycwogKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZAogKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zCiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MAogKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb24KICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZAogKi8KZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHsKICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7CiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LAogICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLAogICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlciwKICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7CgogIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07CgogIHZhciBvZmZzZXRzID0gdm9pZCAwOwogIGlmIChpc051bWVyaWMoK29mZnNldCkpIHsKICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07CiAgfSBlbHNlIHsKICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTsKICB9CgogIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHsKICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTsKICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07CiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7CiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07CiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdOwogIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHsKICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07CiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07CiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykgewogICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTsKICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTsKICB9CgogIGRhdGEucG9wcGVyID0gcG9wcGVyOwogIHJldHVybiBkYXRhOwp9CgovKioKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNb2RpZmllcnMKICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZAogKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zCiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWQKICovCmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7CiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpOwoKICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0bwogIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0bwogIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW4KICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7CiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7CiAgfQoKICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTsKICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzOwoKICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5OwogIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyOwoKICB2YXIgY2hlY2sgPSB7CiAgICBwcmltYXJ5OiBmdW5jdGlvbiBwcmltYXJ5KHBsYWNlbWVudCkgewogICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTsKICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHsKICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pOwogICAgICB9CiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7CiAgICB9LAogICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7CiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA\/ICdsZWZ0JyA6ICd0b3AnOwogICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbbWFpblNpZGVdOwogICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkgewogICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA\/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTsKICAgICAgfQogICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7CiAgICB9CiAgfTsKCiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7CiAgICB2YXIgc2lkZSA9IFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7CiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTsKICB9KTsKCiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjsKCiAgcmV0dXJuIGRhdGE7Cn0KCi8qKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1vZGlmaWVycwogKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnMKICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZAogKi8KZnVuY3Rpb24gc2hpZnQoZGF0YSkgewogIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDsKICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdOwogIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdOwoKICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXIKICBpZiAoc2hpZnR2YXJpYXRpb24pIHsKICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLAogICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLAogICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyOwoKICAgIHZhciBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7CiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJzsKICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7CgogICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHsKICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLAogICAgICBlbmQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSkKICAgIH07CgogICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pOwogIH0KCiAgcmV0dXJuIGRhdGE7Cn0KCi8qKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1vZGlmaWVycwogKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZAogKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zCiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWQKICovCmZ1bmN0aW9uIGhpZGUoZGF0YSkgewogIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkgewogICAgcmV0dXJuIGRhdGE7CiAgfQoKICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7CiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7CiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7CiAgfSkuYm91bmRhcmllczsKCiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7CiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWQKICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CgogICAgZGF0YS5oaWRlID0gdHJ1ZTsKICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7CiAgfSBlbHNlIHsKICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZAogICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CgogICAgZGF0YS5oaWRlID0gZmFsc2U7CiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlOwogIH0KCiAgcmV0dXJuIGRhdGE7Cn0KCi8qKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1vZGlmaWVycwogKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kCiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnMKICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZAogKi8KZnVuY3Rpb24gaW5uZXIoZGF0YSkgewogIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDsKICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdOwogIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLAogICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlciwKICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7CgogIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7CgogIHZhciBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTsKCiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbcGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA\\/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pOwogICAgfSk7CgogICAgLy8gUmVmYWN0b3JpbmcgbW9kaWZpZXJzJyBsaXN0IChPYmplY3QgPT4gQXJyYXkpCiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkgewogICAgICByZXR1cm4gX2V4dGVuZHMoewogICAgICAgIG5hbWU6IG5hbWUKICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pOwogICAgfSkKICAgIC8vIHNvcnQgdGhlIG1vZGlmaWVycyBieSBvcmRlcgogICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyOwogICAgfSk7CgogICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkCiAgICAvLyBzdWNoIGNvZGUgaXMgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgb2YgaXRzIG1vZGlmaWVyCiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb24KICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIQogICAgdGhpcy5tb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXJPcHRpb25zKSB7CiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7CiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7CiAgICAgIH0KICAgIH0pOwoKICAgIC8vIGZpcmUgdGhlIGZpcnN0IHVwZGF0ZSB0byBwb3NpdGlvbiB0aGUgcG9wcGVyIGluIHRoZSByaWdodCBwbGFjZQogICAgdGhpcy51cGRhdGUoKTsKCiAgICB2YXIgZXZlbnRzRW5hYmxlZCA9IHRoaXMub3B0aW9ucy5ldmVudHNFbmFibGVkOwogICAgaWYgKGV2ZW50c0VuYWJsZWQpIHsKICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9ucwogICAgICB0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7CiAgICB9CgogICAgdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkID0gZXZlbnRzRW5hYmxlZDsKICB9CgogIC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZQogIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVicwoKCiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbewogICAga2V5OiAndXBkYXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUkJDEoKSB7CiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZXN0cm95JywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkgewogICAgICByZXR1cm4gZGVzdHJveS5jYWxsKHRoaXMpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VuYWJsZUV2ZW50TGlzdGVuZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHsKICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7CiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTsKICAgIH0KCiAgICAvKioKICAgICAqIFNjaGVkdWxlIGFuIHVwZGF0ZSwgaXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZQogICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZQogICAgICogQG1lbWJlcm9mIFBvcHBlcgogICAgICovCgoKICAgIC8qKgogICAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLgogICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91CiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC4KICAgICAqCiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkCiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLgogICAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3QKICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shCiAgICAgKiBAc3RhdGljCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHR5cGUge09iamVjdH0KICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44CiAgICAgKiBAbWVtYmVyIFV0aWxzCiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyCiAgICAgKi8KCiAgfV0pOwogIHJldHVybiBQb3BwZXI7Cn0oKTsKCi8qKgogKiBUaGUgYHJlZmVyZW5jZU9iamVjdGAgaXMgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGNvbXBhdGlibGUgd2l0aCBQb3BwZXIuanMKICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+CiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXMKICogaW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIERPTSBub2RlIHRvIHVzZSBhcyByZWZlcmVuY2UuCiAqCiAqIGBgYAogKiBuZXcgUG9wcGVyKHJlZmVyZW5jZU9iamVjdCwgcG9wcGVyTm9kZSk7CiAqIGBgYAogKgogKiBOQjogVGhpcyBmZWF0dXJlIGlzbid0IHN1cHBvcnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMAogKiBAbmFtZSByZWZlcmVuY2VPYmplY3QKICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QKICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZXQgb2YgY29vcmRpbmF0ZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgbWV0aG9kLgogKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aAogKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LgogKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRIZWlnaHQKICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuCiAqLwoKClBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA\/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7ClBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50czsKUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7CgpyZXR1cm4gUG9wcGVyOwoKfSkpKTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcAo=",
    "size": "80747"
}