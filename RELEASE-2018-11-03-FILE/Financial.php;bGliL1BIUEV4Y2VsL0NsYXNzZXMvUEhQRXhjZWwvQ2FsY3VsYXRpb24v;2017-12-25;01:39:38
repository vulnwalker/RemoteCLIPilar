{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Calculation\/Financial.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKiBQSFBFeGNlbCByb290IGRpcmVjdG9yeSAqLwppZiAoIWRlZmluZWQoJ1BIUEVYQ0VMX1JPT1QnKSkgewogICAgLyoqCiAgICAgKiBAaWdub3JlCiAgICAgKi8KICAgIGRlZmluZSgnUEhQRVhDRUxfUk9PVCcsIGRpcm5hbWUoX19GSUxFX18pIC4gJy8uLi8uLi8nKTsKICAgIHJlcXVpcmUoUEhQRVhDRUxfUk9PVCAuICdQSFBFeGNlbC9BdXRvbG9hZGVyLnBocCcpOwp9CgovKiogRklOQU5DSUFMX01BWF9JVEVSQVRJT05TICovCmRlZmluZSgnRklOQU5DSUFMX01BWF9JVEVSQVRJT05TJywgMTI4KTsKCi8qKiBGSU5BTkNJQUxfUFJFQ0lTSU9OICovCmRlZmluZSgnRklOQU5DSUFMX1BSRUNJU0lPTicsIDEuMGUtMDgpOwoKLyoqCiAqIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0ZpbmFuY2lhbAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VCiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCiAqCiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZQogKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBCiAqCiAqIEBjYXRlZ29yeSAgICBQSFBFeGNlbAogKiBAcGFja2FnZSAgICAgICAgUEhQRXhjZWxfQ2FsY3VsYXRpb24KICogQGNvcHlyaWdodCAgICBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsIChodHRwOi8vd3d3LmNvZGVwbGV4LmNvbS9QSFBFeGNlbCkKICogQGxpY2Vuc2UgICAgICAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvbGdwbC0yLjEudHh0ICAgIExHUEwKICogQHZlcnNpb24gICAgICAgICMjVkVSU0lPTiMjLCAjI0RBVEUjIwogKi8KY2xhc3MgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRmluYW5jaWFsCnsKICAgIC8qKgogICAgICogaXNMYXN0RGF5T2ZNb250aAogICAgICoKICAgICAqIFJldHVybnMgYSBib29sZWFuIFRSVUUvRkFMU0UgaW5kaWNhdGluZyBpZiB0aGlzIGRhdGUgaXMgdGhlIGxhc3QgZGF0ZSBvZiB0aGUgbW9udGgKICAgICAqCiAgICAgKiBAcGFyYW0gICAgRGF0ZVRpbWUgICAgJHRlc3REYXRlICAgIFRoZSBkYXRlIGZvciB0ZXN0aW5nCiAgICAgKiBAcmV0dXJuICAgIGJvb2xlYW4KICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gaXNMYXN0RGF5T2ZNb250aCgkdGVzdERhdGUpCiAgICB7CiAgICAgICAgcmV0dXJuICgkdGVzdERhdGUtPmZvcm1hdCgnZCcpID09ICR0ZXN0RGF0ZS0+Zm9ybWF0KCd0JykpOwogICAgfQoKCiAgICAvKioKICAgICAqIGlzRmlyc3REYXlPZk1vbnRoCiAgICAgKgogICAgICogUmV0dXJucyBhIGJvb2xlYW4gVFJVRS9GQUxTRSBpbmRpY2F0aW5nIGlmIHRoaXMgZGF0ZSBpcyB0aGUgZmlyc3QgZGF0ZSBvZiB0aGUgbW9udGgKICAgICAqCiAgICAgKiBAcGFyYW0gICAgRGF0ZVRpbWUgICAgJHRlc3REYXRlICAgIFRoZSBkYXRlIGZvciB0ZXN0aW5nCiAgICAgKiBAcmV0dXJuICAgIGJvb2xlYW4KICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gaXNGaXJzdERheU9mTW9udGgoJHRlc3REYXRlKQogICAgewogICAgICAgIHJldHVybiAoJHRlc3REYXRlLT5mb3JtYXQoJ2QnKSA9PSAxKTsKICAgIH0KCgogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gY291cG9uRmlyc3RQZXJpb2REYXRlKCRzZXR0bGVtZW50LCAkbWF0dXJpdHksICRmcmVxdWVuY3ksICRuZXh0KQogICAgewogICAgICAgICRtb250aHMgPSAxMiAvICRmcmVxdWVuY3k7CgogICAgICAgICRyZXN1bHQgPSBQSFBFeGNlbF9TaGFyZWRfRGF0ZTo6RXhjZWxUb1BIUE9iamVjdCgkbWF0dXJpdHkpOwogICAgICAgICRlb20gPSBzZWxmOjppc0xhc3REYXlPZk1vbnRoKCRyZXN1bHQpOwoKICAgICAgICB3aGlsZSAoJHNldHRsZW1lbnQgPCBQSFBFeGNlbF9TaGFyZWRfRGF0ZTo6UEhQVG9FeGNlbCgkcmVzdWx0KSkgewogICAgICAgICAgICAkcmVzdWx0LT5tb2RpZnkoJy0nLiRtb250aHMuJyBtb250aHMnKTsKICAgICAgICB9CiAgICAgICAgaWYgKCRuZXh0KSB7CiAgICAgICAgICAgICRyZXN1bHQtPm1vZGlmeSgnKycuJG1vbnRocy4nIG1vbnRocycpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCRlb20pIHsKICAgICAgICAgICAgJHJlc3VsdC0+bW9kaWZ5KCctMSBkYXknKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBQSFBFeGNlbF9TaGFyZWRfRGF0ZTo6UEhQVG9FeGNlbCgkcmVzdWx0KTsKICAgIH0KCgogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gaXNWYWxpZEZyZXF1ZW5jeSgkZnJlcXVlbmN5KQogICAgewogICAgICAgIGlmICgoJGZyZXF1ZW5jeSA9PSAxKSB8fCAoJGZyZXF1ZW5jeSA9PSAyKSB8fCAoJGZyZXF1ZW5jeSA9PSA0KSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKChQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmdldENvbXBhdGliaWxpdHlNb2RlKCkgPT0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpDT01QQVRJQklMSVRZX0dOVU1FUklDKSAmJgogICAgICAgICAgICAoKCRmcmVxdWVuY3kgPT0gNikgfHwgKCRmcmVxdWVuY3kgPT0gMTIpKSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKCiAgICAvKioKICAgICAqIGRheXNQZXJZZWFyCiAgICAgKgogICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRheXMgaW4gYSBzcGVjaWZpZWQgeWVhciwgYXMgZGVmaW5lZCBieSB0aGUgImJhc2lzIiB2YWx1ZQogICAgICoKICAgICAqIEBwYXJhbSAgICBpbnRlZ2VyICAgICAgICAkeWVhciAgICBUaGUgeWVhciBhZ2FpbnN0IHdoaWNoIHdlJ3JlIHRlc3RpbmcKICAgICAqIEBwYXJhbSAgIGludGVnZXIgICAgICAgICRiYXNpcyAgICBUaGUgdHlwZSBvZiBkYXkgY291bnQ6CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgb3Igb21pdHRlZCBVUyAoTkFTRCkgICAgMzYwCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgICAgICAgICAgICAgICAgICAgICAgICBBY3R1YWwgKDM2NSBvciAzNjYgaW4gYSBsZWFwIHllYXIpCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgICAgICAgICAgICAgICAgICAgICAgICAzNjAKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgIDM2NQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0ICAgICAgICAgICAgICAgICAgICAgICAgRXVyb3BlYW4gMzYwCiAgICAgKiBAcmV0dXJuICAgIGludGVnZXIKICAgICAqLwogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gZGF5c1BlclllYXIoJHllYXIsICRiYXNpcyA9IDApCiAgICB7CiAgICAgICAgc3dpdGNoICgkYmFzaXMpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICRkYXlzUGVyWWVhciA9IDM2MDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAkZGF5c1BlclllYXIgPSAzNjU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgJGRheXNQZXJZZWFyID0gKFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0RhdGVUaW1lOjppc0xlYXBZZWFyKCR5ZWFyKSkgPyAzNjYgOiAzNjU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6Ok5hTigpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJGRheXNQZXJZZWFyOwogICAgfQoKCiAgICBwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBpbnRlcmVzdEFuZFByaW5jaXBhbCgkcmF0ZSA9IDAsICRwZXIgPSAwLCAkbnBlciA9IDAsICRwdiA9IDAsICRmdiA9IDAsICR0eXBlID0gMCkKICAgIHsKICAgICAgICAkcG10ID0gc2VsZjo6UE1UKCRyYXRlLCAkbnBlciwgJHB2LCAkZnYsICR0eXBlKTsKICAgICAgICAkY2FwaXRhbCA9ICRwdjsKICAgICAgICBmb3IgKCRpID0gMTsgJGk8PSAkcGVyOyArKyRpKSB7CiAgICAgICAgICAgICRpbnRlcmVzdCA9ICgkdHlwZSAmJiAkaSA9PSAxKSA\/IDAgOiAtJGNhcGl0YWwgKiAkcmF0ZTsKICAgICAgICAgICAgJHByaW5jaXBhbCA9ICRwbXQgLSAkaW50ZXJlc3Q7CiAgICAgICAgICAgICRjYXBpdGFsICs9ICRwcmluY2lwYWw7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhcnJheSgkaW50ZXJlc3QsICRwcmluY2lwYWwpOwogICAgfQoKCiAgICAvKioKICAgICAqIEFDQ1JJTlQKICAgICAqCiAgICAgKiBSZXR1cm5zIHRoZSBhY2NydWVkIGludGVyZXN0IGZvciBhIHNlY3VyaXR5IHRoYXQgcGF5cyBwZXJpb2RpYyBpbnRlcmVzdC4KICAgICAqCiAgICAgKiBFeGNlbCBGdW5jdGlvbjoKICAgICAqICAgICAgICBBQ0NSSU5UKGlzc3VlLGZpcnN0aW50ZXJlc3Qsc2V0dGxlbWVudCxyYXRlLHBhcixmcmVxdWVuY3lbLGJhc2lzXSkKICAgICAqCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYwogICAgICogQGNhdGVnb3J5IEZpbmFuY2lhbCBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSAgICBtaXhlZCAgICAkaXNzdWUgICAgICAgICAgICBUaGUgc2VjdXJpdHkncyBpc3N1ZSBkYXRlLgogICAgICogQHBhcmFtICAgIG1peGVkICAgICRmaXJzdGludGVyZXN0ICAgIFRoZSBzZWN1cml0eSdzIGZpcnN0IGludGVyZXN0IGRhdGUuCiAgICAgKiBAcGFyYW0gICAgbWl4ZWQgICAgJHNldHRsZW1lbnQgICAgICAgIFRoZSBzZWN1cml0eSdzIHNldHRsZW1lbnQgZGF0ZS4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHNlY3VyaXR5IHNldHRsZW1lbnQgZGF0ZSBpcyB0aGUgZGF0ZSBhZnRlciB0aGUgaXNzdWUgZGF0ZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSBzZWN1cml0eSBpcyB0cmFkZWQgdG8gdGhlIGJ1eWVyLgogICAgICogQHBhcmFtICAgIGZsb2F0ICAgICRyYXRlICAgICAgICAgICAgVGhlIHNlY3VyaXR5J3MgYW5udWFsIGNvdXBvbiByYXRlLgogICAgICogQHBhcmFtICAgIGZsb2F0ICAgICRwYXIgICAgICAgICAgICBUaGUgc2VjdXJpdHkncyBwYXIgdmFsdWUuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHlvdSBvbWl0IHBhciwgQUNDUklOVCB1c2VzICQxLDAwMC4KICAgICAqIEBwYXJhbSAgICBpbnRlZ2VyICAgICRmcmVxdWVuY3kgICAgICAgIHRoZSBudW1iZXIgb2YgY291cG9uIHBheW1lbnRzIHBlciB5ZWFyLgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWxpZCBmcmVxdWVuY3kgdmFsdWVzIGFyZToKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgICAgQW5udWFsCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyICAgIFNlbWktQW5udWFsCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0ICAgIFF1YXJ0ZXJseQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB3b3JraW5nIGluIEdudW1lcmljIE1vZGUsIHRoZSBmb2xsb3dpbmcgZnJlcXVlbmN5IG9wdGlvbnMgYXJlCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsc28gYXZhaWxhYmxlCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA2ICAgIEJpbW9udGhseQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTIgICAgTW9udGhseQogICAgICogQHBhcmFtICAgIGludGVnZXIgICAgJGJhc2lzICAgICAgICAgICAgVGhlIHR5cGUgb2YgZGF5IGNvdW50IHRvIHVzZS4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgb3Igb21pdHRlZCAgICBVUyAoTkFTRCkgMzAvMzYwCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxICAgICAgICAgICAgICAgIEFjdHVhbC9hY3R1YWwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgICAgICAgICAgICAgICAgQWN0dWFsLzM2MAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyAgICAgICAgICAgICAgICBBY3R1YWwvMzY1CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0ICAgICAgICAgICAgICAgIEV1cm9wZWFuIDMwLzM2MAogICAgICogQHJldHVybiAgICBmbG9hdAogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIEFDQ1JJTlQoJGlzc3VlLCAkZmlyc3RpbnRlcmVzdCwgJHNldHRsZW1lbnQsICRyYXRlLCAkcGFyID0gMTAwMCwgJGZyZXF1ZW5jeSA9IDEsICRiYXNpcyA9IDApCiAgICB7CiAgICAgICAgJGlzc3VlICAgICAgICA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCRpc3N1ZSk7CiAgICAgICAgJGZpcnN0aW50ZXJlc3QgICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkZmlyc3RpbnRlcmVzdCk7CiAgICAgICAgJHNldHRsZW1lbnQgICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkc2V0dGxlbWVudCk7CiAgICAgICAgJHJhdGUgICAgICAgID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJHJhdGUpOwogICAgICAgICRwYXIgICAgICAgID0gKGlzX251bGwoJHBhcikpICAgICAgICA\/IDEwMDAgOiAgICBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkcGFyKTsKICAgICAgICAkZnJlcXVlbmN5ICAgID0gKGlzX251bGwoJGZyZXF1ZW5jeSkpICAgID8gMSAgICA6ICAgICAgICAgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJGZyZXF1ZW5jeSk7CiAgICAgICAgJGJhc2lzICAgICAgICA9IChpc19udWxsKCRiYXNpcykpICAgICAgICA\/IDAgICAgOiAgICAgICAgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJGJhc2lzKTsKCiAgICAgICAgLy8gICAgVmFsaWRhdGUKICAgICAgICBpZiAoKGlzX251bWVyaWMoJHJhdGUpKSAmJiAoaXNfbnVtZXJpYygkcGFyKSkpIHsKICAgICAgICAgICAgJHJhdGUgICAgPSAoZmxvYXQpICRyYXRlOwogICAgICAgICAgICAkcGFyICAgID0gKGZsb2F0KSAkcGFyOwogICAgICAgICAgICBpZiAoKCRyYXRlIDw9IDApIHx8ICgkcGFyIDw9IDApKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpOYU4oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkZGF5c0JldHdlZW5Jc3N1ZUFuZFNldHRsZW1lbnQgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9EYXRlVGltZTo6WUVBUkZSQUMoJGlzc3VlLCAkc2V0dGxlbWVudCwgJGJhc2lzKTsKICAgICAgICAgICAgaWYgKCFpc19udW1lcmljKCRkYXlzQmV0d2Vlbklzc3VlQW5kU2V0dGxlbWVudCkpIHsKICAgICAgICAgICAgICAgIC8vICAgIHJldHVybiBkYXRlIGVycm9yCiAgICAgICAgICAgICAgICByZXR1cm4gJGRheXNCZXR3ZWVuSXNzdWVBbmRTZXR0bGVtZW50OwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gJHBhciAqICRyYXRlICogJGRheXNCZXR3ZWVuSXNzdWVBbmRTZXR0bGVtZW50OwogICAgICAgIH0KICAgICAgICByZXR1cm4gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpWQUxVRSgpOwogICAgfQoKCiAgICAvKioKICAgICAqIEFDQ1JJTlRNCiAgICAgKgogICAgICogUmV0dXJucyB0aGUgYWNjcnVlZCBpbnRlcmVzdCBmb3IgYSBzZWN1cml0eSB0aGF0IHBheXMgaW50ZXJlc3QgYXQgbWF0dXJpdHkuCiAgICAgKgogICAgICogRXhjZWwgRnVuY3Rpb246CiAgICAgKiAgICAgICAgQUNDUklOVE0oaXNzdWUsc2V0dGxlbWVudCxyYXRlWyxwYXJbLGJhc2lzXV0pCiAgICAgKgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKICAgICAqIEBjYXRlZ29yeSBGaW5hbmNpYWwgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0gICAgbWl4ZWQgICAgaXNzdWUgICAgICAgIFRoZSBzZWN1cml0eSdzIGlzc3VlIGRhdGUuCiAgICAgKiBAcGFyYW0gICAgbWl4ZWQgICAgc2V0dGxlbWVudCAgICBUaGUgc2VjdXJpdHkncyBzZXR0bGVtZW50IChvciBtYXR1cml0eSkgZGF0ZS4KICAgICAqIEBwYXJhbSAgICBmbG9hdCAgICByYXRlICAgICAgICBUaGUgc2VjdXJpdHkncyBhbm51YWwgY291cG9uIHJhdGUuCiAgICAgKiBAcGFyYW0gICAgZmxvYXQgICAgcGFyICAgICAgICAgICAgVGhlIHNlY3VyaXR5J3MgcGFyIHZhbHVlLgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB5b3Ugb21pdCBwYXIsIEFDQ1JJTlQgdXNlcyAkMSwwMDAuCiAgICAgKiBAcGFyYW0gICAgaW50ZWdlciAgICBiYXNpcyAgICAgICAgVGhlIHR5cGUgb2YgZGF5IGNvdW50IHRvIHVzZS4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgb3Igb21pdHRlZCAgICBVUyAoTkFTRCkgMzAvMzYwCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxICAgICAgICAgICAgICAgIEFjdHVhbC9hY3R1YWwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgICAgICAgICAgICAgICAgQWN0dWFsLzM2MAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyAgICAgICAgICAgICAgICBBY3R1YWwvMzY1CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0ICAgICAgICAgICAgICAgIEV1cm9wZWFuIDMwLzM2MAogICAgICogQHJldHVybiAgICBmbG9hdAogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIEFDQ1JJTlRNKCRpc3N1ZSwgJHNldHRsZW1lbnQsICRyYXRlLCAkcGFyID0gMTAwMCwgJGJhc2lzID0gMCkKICAgIHsKICAgICAgICAkaXNzdWUgICAgICAgID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJGlzc3VlKTsKICAgICAgICAkc2V0dGxlbWVudCAgICA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCRzZXR0bGVtZW50KTsKICAgICAgICAkcmF0ZSAgICAgICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkcmF0ZSk7CiAgICAgICAgJHBhciAgICAgICAgPSAoaXNfbnVsbCgkcGFyKSkgICAgPyAxMDAwIDogICAgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJHBhcik7CiAgICAgICAgJGJhc2lzICAgICAgICA9IChpc19udWxsKCRiYXNpcykpICAgID8gMCA6ICAgICAgICBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkYmFzaXMpOwoKICAgICAgICAvLyAgICBWYWxpZGF0ZQogICAgICAgIGlmICgoaXNfbnVtZXJpYygkcmF0ZSkpICYmIChpc19udW1lcmljKCRwYXIpKSkgewogICAgICAgICAgICAkcmF0ZSAgICA9IChmbG9hdCkgJHJhdGU7CiAgICAgICAgICAgICRwYXIgICAgPSAoZmxvYXQpICRwYXI7CiAgICAgICAgICAgIGlmICgoJHJhdGUgPD0gMCkgfHwgKCRwYXIgPD0gMCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6Ok5hTigpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRkYXlzQmV0d2Vlbklzc3VlQW5kU2V0dGxlbWVudCA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0RhdGVUaW1lOjpZRUFSRlJBQygkaXNzdWUsICRzZXR0bGVtZW50LCAkYmFzaXMpOwogICAgICAgICAgICBpZiAoIWlzX251bWVyaWMoJGRheXNCZXR3ZWVuSXNzdWVBbmRTZXR0bGVtZW50KSkgewogICAgICAgICAgICAgICAgLy8gICAgcmV0dXJuIGRhdGUgZXJyb3IKICAgICAgICAgICAgICAgIHJldHVybiAkZGF5c0JldHdlZW5Jc3N1ZUFuZFNldHRsZW1lbnQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICRwYXIgKiAkcmF0ZSAqICRkYXlzQmV0d2Vlbklzc3VlQW5kU2V0dGxlbWVudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6VkFMVUUoKTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBBTU9SREVHUkMKICAgICAqCiAgICAgKiBSZXR1cm5zIHRoZSBkZXByZWNpYXRpb24gZm9yIGVhY2ggYWNjb3VudGluZyBwZXJpb2QuCiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIGZvciB0aGUgRnJlbmNoIGFjY291bnRpbmcgc3lzdGVtLiBJZiBhbiBhc3NldCBpcyBwdXJjaGFzZWQgaW4KICAgICAqIHRoZSBtaWRkbGUgb2YgdGhlIGFjY291bnRpbmcgcGVyaW9kLCB0aGUgcHJvcmF0ZWQgZGVwcmVjaWF0aW9uIGlzIHRha2VuIGludG8gYWNjb3VudC4KICAgICAqIFRoZSBmdW5jdGlvbiBpcyBzaW1pbGFyIHRvIEFNT1JMSU5DLCBleGNlcHQgdGhhdCBhIGRlcHJlY2lhdGlvbiBjb2VmZmljaWVudCBpcyBhcHBsaWVkIGluCiAgICAgKiB0aGUgY2FsY3VsYXRpb24gZGVwZW5kaW5nIG9uIHRoZSBsaWZlIG9mIHRoZSBhc3NldHMuCiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRoZSBkZXByZWNpYXRpb24gdW50aWwgdGhlIGxhc3QgcGVyaW9kIG9mIHRoZSBsaWZlIG9mIHRoZSBhc3NldHMKICAgICAqIG9yIHVudGlsIHRoZSBjdW11bGF0ZWQgdmFsdWUgb2YgZGVwcmVjaWF0aW9uIGlzIGdyZWF0ZXIgdGhhbiB0aGUgY29zdCBvZiB0aGUgYXNzZXRzIG1pbnVzCiAgICAgKiB0aGUgc2FsdmFnZSB2YWx1ZS4KICAgICAqCiAgICAgKiBFeGNlbCBGdW5jdGlvbjoKICAgICAqICAgICAgICBBTU9SREVHUkMoY29zdCxwdXJjaGFzZWQsZmlyc3RQZXJpb2Qsc2FsdmFnZSxwZXJpb2QscmF0ZVssYmFzaXNdKQogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAY2F0ZWdvcnkgRmluYW5jaWFsIEZ1bmN0aW9ucwogICAgICogQHBhcmFtICAgIGZsb2F0ICAgIGNvc3QgICAgICAgIFRoZSBjb3N0IG9mIHRoZSBhc3NldC4KICAgICAqIEBwYXJhbSAgICBtaXhlZCAgICBwdXJjaGFzZWQgICAgRGF0ZSBvZiB0aGUgcHVyY2hhc2Ugb2YgdGhlIGFzc2V0LgogICAgICogQHBhcmFtICAgIG1peGVkICAgIGZpcnN0UGVyaW9kICAgIERhdGUgb2YgdGhlIGVuZCBvZiB0aGUgZmlyc3QgcGVyaW9kLgogICAgICogQHBhcmFtICAgIG1peGVkICAgIHNhbHZhZ2UgICAgICAgIFRoZSBzYWx2YWdlIHZhbHVlIGF0IHRoZSBlbmQgb2YgdGhlIGxpZmUgb2YgdGhlIGFzc2V0LgogICAgICogQHBhcmFtICAgIGZsb2F0ICAgIHBlcmlvZCAgICAgICAgVGhlIHBlcmlvZC4KICAgICAqIEBwYXJhbSAgICBmbG9hdCAgICByYXRlICAgICAgICBSYXRlIG9mIGRlcHJlY2lhdGlvbi4KICAgICAqIEBwYXJhbSAgICBpbnRlZ2VyICAgIGJhc2lzICAgICAgICBUaGUgdHlwZSBvZiBkYXkgY291bnQgdG8gdXNlLgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCBvciBvbWl0dGVkICAgIFVTIChOQVNEKSAzMC8zNjAKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgICAgICAgICAgICAgICAgQWN0dWFsL2FjdHVhbAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMiAgICAgICAgICAgICAgICBBY3R1YWwvMzYwCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzICAgICAgICAgICAgICAgIEFjdHVhbC8zNjUKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQgICAgICAgICAgICAgICAgRXVyb3BlYW4gMzAvMzYwCiAgICAgKiBAcmV0dXJuICAgIGZsb2F0CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gQU1PUkRFR1JDKCRjb3N0LCAkcHVyY2hhc2VkLCAkZmlyc3RQZXJpb2QsICRzYWx2YWdlLCAkcGVyaW9kLCAkcmF0ZSwgJGJhc2lzID0gMCkKICAgIHsKICAgICAgICAkY29zdCAgICAgICAgICAgID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJGNvc3QpOwogICAgICAgICRwdXJjaGFzZWQgICAgICAgID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJHB1cmNoYXNlZCk7CiAgICAgICAgJGZpcnN0UGVyaW9kICAgID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJGZpcnN0UGVyaW9kKTsKICAgICAgICAkc2FsdmFnZSAgICAgICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkc2FsdmFnZSk7CiAgICAgICAgJHBlcmlvZCAgICAgICAgICAgID0gZmxvb3IoUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJHBlcmlvZCkpOwogICAgICAgICRyYXRlICAgICAgICAgICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkcmF0ZSk7CiAgICAgICAgJGJhc2lzICAgICAgICAgICAgPSAoaXNfbnVsbCgkYmFzaXMpKSAgICA\\\\\",
    "size": "108945"
}