{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Calculation\/Functions.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKiBQSFBFeGNlbCByb290IGRpcmVjdG9yeSAqLwppZiAoIWRlZmluZWQoJ1BIUEVYQ0VMX1JPT1QnKSkgewogICAgLyoqCiAgICAgKiBAaWdub3JlCiAgICAgKi8KICAgIGRlZmluZSgnUEhQRVhDRUxfUk9PVCcsIGRpcm5hbWUoX19GSUxFX18pIC4gJy8uLi8uLi8nKTsKICAgIHJlcXVpcmUoUEhQRVhDRUxfUk9PVCAuICdQSFBFeGNlbC9BdXRvbG9hZGVyLnBocCcpOwp9CgoKLyoqIE1BWF9WQUxVRSAqLwpkZWZpbmUoJ01BWF9WQUxVRScsIDEuMmUzMDgpOwoKLyoqIDIgLyBQSSAqLwpkZWZpbmUoJ01fMkRJVlBJJywgMC42MzY2MTk3NzIzNjc1ODEzNDMwNzU1MzUwNTM0OTAwNik7CgovKiogTUFYX0lURVJBVElPTlMgKi8KZGVmaW5lKCdNQVhfSVRFUkFUSU9OUycsIDI1Nik7CgovKiogUFJFQ0lTSU9OICovCmRlZmluZSgnUFJFQ0lTSU9OJywgOC44OEUtMDE2KTsKCgovKioKICogUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zCiAqCiAqIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwKICoKICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcgogKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlcgogKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUKICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0EKICoKICogQGNhdGVnb3J5ICAgIFBIUEV4Y2VsCiAqIEBwYWNrYWdlICAgICAgICBQSFBFeGNlbF9DYWxjdWxhdGlvbgogKiBAY29weXJpZ2h0ICAgIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwgKGh0dHA6Ly93d3cuY29kZXBsZXguY29tL1BIUEV4Y2VsKQogKiBAbGljZW5zZSAgICAgICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9sZ3BsLTIuMS50eHQgICAgTEdQTAogKiBAdmVyc2lvbiAgICAgICAgIyNWRVJTSU9OIyMsICMjREFURSMjCiAqLwpjbGFzcyBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnMKewoKICAgIC8qKiBjb25zdGFudHMgKi8KICAgIGNvbnN0IENPTVBBVElCSUxJVFlfRVhDRUwgICAgICA9ICdFeGNlbCc7CiAgICBjb25zdCBDT01QQVRJQklMSVRZX0dOVU1FUklDICAgPSAnR251bWVyaWMnOwogICAgY29uc3QgQ09NUEFUSUJJTElUWV9PUEVOT0ZGSUNFID0gJ09wZW5PZmZpY2VDYWxjJzsKCiAgICBjb25zdCBSRVRVUk5EQVRFX1BIUF9OVU1FUklDID0gJ1AnOwogICAgY29uc3QgUkVUVVJOREFURV9QSFBfT0JKRUNUICA9ICdPJzsKICAgIGNvbnN0IFJFVFVSTkRBVEVfRVhDRUwgICAgICAgPSAnRSc7CgoKICAgIC8qKgogICAgICogQ29tcGF0aWJpbGl0eSBtb2RlIHRvIHVzZSBmb3IgZXJyb3IgY2hlY2tpbmcgYW5kIHJlc3BvbnNlcwogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHJpdmF0ZQogICAgICogQHZhciBzdHJpbmcKICAgICAqLwogICAgcHJvdGVjdGVkIHN0YXRpYyAkY29tcGF0aWJpbGl0eU1vZGUgPSBzZWxmOjpDT01QQVRJQklMSVRZX0VYQ0VMOwoKICAgIC8qKgogICAgICogRGF0YSBUeXBlIHRvIHVzZSB3aGVuIHJldHVybmluZyBkYXRlIHZhbHVlcwogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHJpdmF0ZQogICAgICogQHZhciBzdHJpbmcKICAgICAqLwogICAgcHJvdGVjdGVkIHN0YXRpYyAkcmV0dXJuRGF0ZVR5cGUgPSBzZWxmOjpSRVRVUk5EQVRFX0VYQ0VMOwoKICAgIC8qKgogICAgICogTGlzdCBvZiBlcnJvciBjb2RlcwogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHJpdmF0ZQogICAgICogQHZhciBhcnJheQogICAgICovCiAgICBwcm90ZWN0ZWQgc3RhdGljICRlcnJvckNvZGVzID0gYXJyYXkoCiAgICAgICAgJ251bGwnICAgICAgICAgICA9PiAnI05VTEwhJywKICAgICAgICAnZGl2aXNpb25ieXplcm8nID0+ICcjRElWLzAhJywKICAgICAgICAndmFsdWUnICAgICAgICAgID0+ICcjVkFMVUUhJywKICAgICAgICAncmVmZXJlbmNlJyAgICAgID0+ICcjUkVGIScsCiAgICAgICAgJ25hbWUnICAgICAgICAgICA9PiAnI05BTUU\/JywKICAgICAgICAnbnVtJyAgICAgICAgICAgID0+ICcjTlVNIScsCiAgICAgICAgJ25hJyAgICAgICAgICAgICA9PiAnI04vQScsCiAgICAgICAgJ2dldHRpbmdkYXRhJyAgICA9PiAnI0dFVFRJTkdfREFUQScKICAgICk7CgoKICAgIC8qKgogICAgICogU2V0IHRoZSBDb21wYXRpYmlsaXR5IE1vZGUKICAgICAqCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uIENvbmZpZ3VyYXRpb24KICAgICAqIEBwYXJhbSAgICAgc3RyaW5nICAgICAgICAkY29tcGF0aWJpbGl0eU1vZGUgICAgICAgIENvbXBhdGliaWxpdHkgTW9kZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQZXJtaXR0ZWQgdmFsdWVzIGFyZToKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6Q09NUEFUSUJJTElUWV9FWENFTCAgICAgICAgICAgICdFeGNlbCcKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6Q09NUEFUSUJJTElUWV9HTlVNRVJJQyAgICAgICAgJ0dudW1lcmljJwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpDT01QQVRJQklMSVRZX09QRU5PRkZJQ0UgICAgJ09wZW5PZmZpY2VDYWxjJwogICAgICogQHJldHVybiAgICAgYm9vbGVhbiAgICAoU3VjY2VzcyBvciBGYWlsdXJlKQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHNldENvbXBhdGliaWxpdHlNb2RlKCRjb21wYXRpYmlsaXR5TW9kZSkKICAgIHsKICAgICAgICBpZiAoKCRjb21wYXRpYmlsaXR5TW9kZSA9PSBzZWxmOjpDT01QQVRJQklMSVRZX0VYQ0VMKSB8fAogICAgICAgICAgICAoJGNvbXBhdGliaWxpdHlNb2RlID09IHNlbGY6OkNPTVBBVElCSUxJVFlfR05VTUVSSUMpIHx8CiAgICAgICAgICAgICgkY29tcGF0aWJpbGl0eU1vZGUgPT0gc2VsZjo6Q09NUEFUSUJJTElUWV9PUEVOT0ZGSUNFKSkgewogICAgICAgICAgICBzZWxmOjokY29tcGF0aWJpbGl0eU1vZGUgPSAkY29tcGF0aWJpbGl0eU1vZGU7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgoKICAgIC8qKgogICAgICogUmV0dXJuIHRoZSBjdXJyZW50IENvbXBhdGliaWxpdHkgTW9kZQogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb24gQ29uZmlndXJhdGlvbgogICAgICogQHJldHVybiAgICAgc3RyaW5nICAgICAgICBDb21wYXRpYmlsaXR5IE1vZGUKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvc3NpYmxlIFJldHVybiB2YWx1ZXMgYXJlOgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6Q09NUEFUSUJJTElUWV9FWENFTCAgICAgICAgICAgICdFeGNlbCcKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OkNPTVBBVElCSUxJVFlfR05VTUVSSUMgICAgICAgICdHbnVtZXJpYycKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OkNPTVBBVElCSUxJVFlfT1BFTk9GRklDRSAgICAnT3Blbk9mZmljZUNhbGMnCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0Q29tcGF0aWJpbGl0eU1vZGUoKQogICAgewogICAgICAgIHJldHVybiBzZWxmOjokY29tcGF0aWJpbGl0eU1vZGU7CiAgICB9CgoKICAgIC8qKgogICAgICogU2V0IHRoZSBSZXR1cm4gRGF0ZSBGb3JtYXQgdXNlZCBieSBmdW5jdGlvbnMgdGhhdCByZXR1cm4gYSBkYXRlL3RpbWUgKEV4Y2VsLCBQSFAgU2VyaWFsaXplZCBOdW1lcmljIG9yIFBIUCBPYmplY3QpCiAgICAgKgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbiBDb25maWd1cmF0aW9uCiAgICAgKiBAcGFyYW0gICAgIHN0cmluZyAgICAkcmV0dXJuRGF0ZVR5cGUgICAgICAgICAgICBSZXR1cm4gRGF0ZSBGb3JtYXQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGVybWl0dGVkIHZhbHVlcyBhcmU6CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OlJFVFVSTkRBVEVfUEhQX05VTUVSSUMgICAgICAgICdQJwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpSRVRVUk5EQVRFX1BIUF9PQkpFQ1QgICAgICAgICdPJwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpSRVRVUk5EQVRFX0VYQ0VMICAgICAgICAgICAgJ0UnCiAgICAgKiBAcmV0dXJuICAgICBib29sZWFuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1Y2Nlc3Mgb3IgZmFpbHVyZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHNldFJldHVybkRhdGVUeXBlKCRyZXR1cm5EYXRlVHlwZSkKICAgIHsKICAgICAgICBpZiAoKCRyZXR1cm5EYXRlVHlwZSA9PSBzZWxmOjpSRVRVUk5EQVRFX1BIUF9OVU1FUklDKSB8fAogICAgICAgICAgICAoJHJldHVybkRhdGVUeXBlID09IHNlbGY6OlJFVFVSTkRBVEVfUEhQX09CSkVDVCkgfHwKICAgICAgICAgICAgKCRyZXR1cm5EYXRlVHlwZSA9PSBzZWxmOjpSRVRVUk5EQVRFX0VYQ0VMKSkgewogICAgICAgICAgICBzZWxmOjokcmV0dXJuRGF0ZVR5cGUgPSAkcmV0dXJuRGF0ZVR5cGU7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgoKICAgIC8qKgogICAgICogUmV0dXJuIHRoZSBjdXJyZW50IFJldHVybiBEYXRlIEZvcm1hdCBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIGEgZGF0ZS90aW1lIChFeGNlbCwgUEhQIFNlcmlhbGl6ZWQgTnVtZXJpYyBvciBQSFAgT2JqZWN0KQogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb24gQ29uZmlndXJhdGlvbgogICAgICogQHJldHVybiAgICAgc3RyaW5nICAgICAgICBSZXR1cm4gRGF0ZSBGb3JtYXQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvc3NpYmxlIFJldHVybiB2YWx1ZXMgYXJlOgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6UkVUVVJOREFURV9QSFBfTlVNRVJJQyAgICAgICAgJ1AnCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpSRVRVUk5EQVRFX1BIUF9PQkpFQ1QgICAgICAgICdPJwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6UkVUVVJOREFURV9FWENFTCAgICAgICAgICAgICdFJwogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldFJldHVybkRhdGVUeXBlKCkKICAgIHsKICAgICAgICByZXR1cm4gc2VsZjo6JHJldHVybkRhdGVUeXBlOwogICAgfQoKCiAgICAvKioKICAgICAqIERVTU1ZCiAgICAgKgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKICAgICAqIEBjYXRlZ29yeSBFcnJvciBSZXR1cm5zCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZyAgICAjTm90IFlldCBJbXBsZW1lbnRlZAogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIERVTU1ZKCkKICAgIHsKICAgICAgICByZXR1cm4gJyNOb3QgWWV0IEltcGxlbWVudGVkJzsKICAgIH0KCgogICAgLyoqCiAgICAgKiBESVYwCiAgICAgKgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKICAgICAqIEBjYXRlZ29yeSBFcnJvciBSZXR1cm5zCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZyAgICAjTm90IFlldCBJbXBsZW1lbnRlZAogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIERJVjAoKQogICAgewogICAgICAgIHJldHVybiBzZWxmOjokZXJyb3JDb2Rlc1snZGl2aXNpb25ieXplcm8nXTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBOQQogICAgICoKICAgICAqIEV4Y2VsIEZ1bmN0aW9uOgogICAgICogICAgICAgID1OQSgpCiAgICAgKgogICAgICogUmV0dXJucyB0aGUgZXJyb3IgdmFsdWUgI04vQQogICAgICogICAgICAgICNOL0EgaXMgdGhlIGVycm9yIHZhbHVlIHRoYXQgbWVhbnMgIm5vIHZhbHVlIGlzIGF2YWlsYWJsZS4iCiAgICAgKgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKICAgICAqIEBjYXRlZ29yeSBMb2dpY2FsIEZ1bmN0aW9ucwogICAgICogQHJldHVybiAgICBzdHJpbmcgICAgI04vQSEKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBOQSgpCiAgICB7CiAgICAgICAgcmV0dXJuIHNlbGY6OiRlcnJvckNvZGVzWyduYSddOwogICAgfQoKCiAgICAvKioKICAgICAqIE5hTgogICAgICoKICAgICAqIFJldHVybnMgdGhlIGVycm9yIHZhbHVlICNOVU0hCiAgICAgKgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKICAgICAqIEBjYXRlZ29yeSBFcnJvciBSZXR1cm5zCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZyAgICAjTlVNIQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIE5hTigpCiAgICB7CiAgICAgICAgcmV0dXJuIHNlbGY6OiRlcnJvckNvZGVzWydudW0nXTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBOQU1FCiAgICAgKgogICAgICogUmV0dXJucyB0aGUgZXJyb3IgdmFsdWUgI05BTUU\\/ICRyZXBsYWNlIDogKGFycmF5X2tleV9leGlzdHMoJGtleSwgJHJlcGxhY2UpID8gJHJlcGxhY2VbJGtleV0gOiAnJyk7CiAgICAgICAgICAgICRwb3MgPSBtYl9zdHJwb3MoJHN1YmplY3QsICRzLCAwLCAnVVRGLTgnKTsKICAgICAgICAgICAgd2hpbGUgKCRwb3MgIT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAkc3ViamVjdCA9IG1iX3N1YnN0cigkc3ViamVjdCwgMCwgJHBvcywgJ1VURi04JykgLiAkciAuIG1iX3N1YnN0cigkc3ViamVjdCwgJHBvcyArIG1iX3N0cmxlbigkcywgJ1VURi04JyksIDY1NTM1LCAnVVRGLTgnKTsKICAgICAgICAgICAgICAgICRwb3MgPSBtYl9zdHJwb3MoJHN1YmplY3QsICRzLCAkcG9zICsgbWJfc3RybGVuKCRyLCAnVVRGLTgnKSwgJ1VURi04Jyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuICRzdWJqZWN0OwogICAgfQp9Cg==",
    "size": "20659"
}