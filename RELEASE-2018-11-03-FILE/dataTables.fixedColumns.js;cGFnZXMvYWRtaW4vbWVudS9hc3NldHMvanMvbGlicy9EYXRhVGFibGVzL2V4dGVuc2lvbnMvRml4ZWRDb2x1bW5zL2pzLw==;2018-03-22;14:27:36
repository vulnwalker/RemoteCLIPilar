{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/DataTables\/extensions\/FixedColumns\/js\/dataTables.fixedColumns.js",
    "lastUpdate": "2018-03-22+14:27:36.06",
    "contentFile": "\/CgkJCQkJCS1lLm9yaWdpbmFsRXZlbnQuZGVsdGFYIDoKCQkJCQkJZS5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGFYOwoJCQkJCXRoYXQuZG9tLnNjcm9sbGVyLnNjcm9sbExlZnQgLT0geERlbHRhOwoJCQkJfSApOwoJCX0KCgkJaWYgKCB0aGF0LnMuaVJpZ2h0Q29sdW1ucyA+IDAgKSB7CgkJCS8vIFdoZW4gc2Nyb2xsaW5nIHRoZSByaWdodCBjb2x1bW4sIHNjcm9sbCB0aGUgYm9keSBhbmQgdGhlIGxlZnQgY29sdW1uCgkJCSQodGhhdC5kb20uZ3JpZC5yaWdodC5saW5lcikKCQkJCS5vbiggJ21vdXNlb3Zlci5EVEZDIHRvdWNoc3RhcnQuRFRGQycsIGZ1bmN0aW9uICgpIHsKCQkJCQltb3VzZUNvbnRyb2xsZXIgPSAncmlnaHQnOwoJCQkJfSApCgkJCQkub24oICdzY3JvbGwuRFRGQycsIGZ1bmN0aW9uICgpIHsKCQkJCQlpZiAoIG1vdXNlQ29udHJvbGxlciA9PT0gJ3JpZ2h0JyApIHsKCQkJCQkJdGhhdC5kb20uc2Nyb2xsZXIuc2Nyb2xsVG9wID0gdGhhdC5kb20uZ3JpZC5yaWdodC5saW5lci5zY3JvbGxUb3A7CgkJCQkJCWlmICggdGhhdC5zLmlMZWZ0Q29sdW1ucyA+IDAgKSB7CgkJCQkJCQl0aGF0LmRvbS5ncmlkLmxlZnQubGluZXIuc2Nyb2xsVG9wID0gdGhhdC5kb20uZ3JpZC5yaWdodC5saW5lci5zY3JvbGxUb3A7CgkJCQkJCX0KCQkJCQl9CgkJCQl9ICkKCQkJCS5vbiggd2hlZWxUeXBlLCBmdW5jdGlvbihlKSB7CgkJCQkJLy8gUGFzcyBob3Jpem9udGFsIHNjcm9sbGluZyB0aHJvdWdoCgkJCQkJdmFyIHhEZWx0YSA9IGUudHlwZSA9PT0gJ3doZWVsJyA\/CgkJCQkJCS1lLm9yaWdpbmFsRXZlbnQuZGVsdGFYIDoKCQkJCQkJZS5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGFYOwoJCQkJCXRoYXQuZG9tLnNjcm9sbGVyLnNjcm9sbExlZnQgLT0geERlbHRhOwoJCQkJfSApOwoJCX0KCgkJJCh3aW5kb3cpLm9uKCAncmVzaXplLkRURkMnLCBmdW5jdGlvbiAoKSB7CgkJCXRoYXQuX2ZuR3JpZExheW91dC5jYWxsKCB0aGF0ICk7CgkJfSApOwoKCQl2YXIgYkZpcnN0RHJhdyA9IHRydWU7CgkJdmFyIGpxVGFibGUgPSAkKHRoaXMucy5kdC5uVGFibGUpOwoKCQlqcVRhYmxlCgkJCS5vbiggJ2RyYXcuZHQuRFRGQycsIGZ1bmN0aW9uICgpIHsKCQkJCXRoYXQuX2ZuRHJhdy5jYWxsKCB0aGF0LCBiRmlyc3REcmF3ICk7CgkJCQliRmlyc3REcmF3ID0gZmFsc2U7CgkJCX0gKQoJCQkub24oICdjb2x1bW4tc2l6aW5nLmR0LkRURkMnLCBmdW5jdGlvbiAoKSB7CgkJCQl0aGF0Ll9mbkNvbENhbGMoKTsKCQkJCXRoYXQuX2ZuR3JpZExheW91dCggdGhhdCApOwoJCQl9ICkKCQkJLm9uKCAnY29sdW1uLXZpc2liaWxpdHkuZHQuRFRGQycsIGZ1bmN0aW9uICgpIHsKCQkJCXRoYXQuX2ZuQ29sQ2FsYygpOwoJCQkJdGhhdC5fZm5HcmlkTGF5b3V0KCB0aGF0ICk7CgkJCQl0aGF0Ll9mbkRyYXcoIHRydWUgKTsKCQkJfSApCgkJCS5vbiggJ2Rlc3Ryb3kuZHQuRFRGQycsIGZ1bmN0aW9uICgpIHsKCQkJCWpxVGFibGUub2ZmKCAnY29sdW1uLXNpemluZy5kdC5EVEZDIGRlc3Ryb3kuZHQuRFRGQyBkcmF3LmR0LkRURkMnICk7CgoJCQkJJCh0aGF0LmRvbS5zY3JvbGxlcikub2ZmKCAnc2Nyb2xsLkRURkMgbW91c2VvdmVyLkRURkMnICk7CgkJCQkkKHdpbmRvdykub2ZmKCAncmVzaXplLkRURkMnICk7CgoJCQkJJCh0aGF0LmRvbS5ncmlkLmxlZnQubGluZXIpLm9mZiggJ3Njcm9sbC5EVEZDIG1vdXNlb3Zlci5EVEZDICcrd2hlZWxUeXBlICk7CgkJCQkkKHRoYXQuZG9tLmdyaWQubGVmdC53cmFwcGVyKS5yZW1vdmUoKTsKCgkJCQkkKHRoYXQuZG9tLmdyaWQucmlnaHQubGluZXIpLm9mZiggJ3Njcm9sbC5EVEZDIG1vdXNlb3Zlci5EVEZDICcrd2hlZWxUeXBlICk7CgkJCQkkKHRoYXQuZG9tLmdyaWQucmlnaHQud3JhcHBlcikucmVtb3ZlKCk7CgkJCX0gKTsKCgkJLyogR2V0IHRoaW5ncyByaWdodCB0byBzdGFydCB3aXRoIC0gbm90ZSB0aGF0IGR1ZSB0byBhZGp1c3RpbmcgdGhlIGNvbHVtbnMsIHRoZXJlIG11c3QgYmUKCQkgKiBhbm90aGVyIHJlZHJhdyBvZiB0aGUgbWFpbiB0YWJsZS4gSXQgZG9lc24ndCBuZWVkIHRvIGJlIGEgZnVsbCByZWRyYXcgaG93ZXZlci4KCQkgKi8KCQl0aGlzLl9mbkdyaWRMYXlvdXQoKTsKCQl0aGlzLnMuZHQub0luc3RhbmNlLmZuRHJhdyhmYWxzZSk7Cgl9LAoKCgkvKioKCSAqIENhbGN1bGF0ZSB0aGUgY29sdW1uIHdpZHRocyBmb3IgdGhlIGdyaWQgbGF5b3V0CgkgKiAgQHJldHVybnMge3ZvaWR9CgkgKiAgQHByaXZhdGUKCSAqLwoJIl9mbkNvbENhbGMiOiBmdW5jdGlvbiAoKQoJewoJCXZhciB0aGF0ID0gdGhpczsKCQl2YXIgaUxlZnRXaWR0aCA9IDA7CgkJdmFyIGlSaWdodFdpZHRoID0gMDsKCgkJdGhpcy5zLmFpSW5uZXJXaWR0aHMgPSBbXTsKCQl0aGlzLnMuYWlPdXRlcldpZHRocyA9IFtdOwoKCQkkLmVhY2goIHRoaXMucy5kdC5hb0NvbHVtbnMsIGZ1bmN0aW9uIChpLCBjb2wpIHsKCQkJdmFyIHRoID0gJChjb2wublRoKTsKCQkJdmFyIGJvcmRlcjsKCgkJCWlmICggISB0aC5maWx0ZXIoJzp2aXNpYmxlJykubGVuZ3RoICkgewoJCQkJdGhhdC5zLmFpSW5uZXJXaWR0aHMucHVzaCggMCApOwoJCQkJdGhhdC5zLmFpT3V0ZXJXaWR0aHMucHVzaCggMCApOwoJCQl9CgkJCWVsc2UKCQkJewoJCQkJLy8gSW5uZXIgd2lkdGggaXMgdXNlZCB0byBhc3NpZ24gd2lkdGhzIHRvIGNlbGxzCgkJCQkvLyBPdXRlciB3aWR0aCBpcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgY29udGFpbmVyCgkJCQl2YXIgaVdpZHRoID0gdGgub3V0ZXJXaWR0aCgpOwoKCQkJCS8vIFdoZW4gd29ya2luZyB3aXRoIHRoZSBsZWZ0IG1vc3QtY2VsbCwgbmVlZCB0byBhZGQgb24gdGhlCgkJCQkvLyB0YWJsZSdzIGJvcmRlciB0byB0aGUgb3V0ZXJXaWR0aCwgc2luY2Ugd2UgbmVlZCB0byB0YWtlCgkJCQkvLyBhY2NvdW50IG9mIGl0LCBidXQgaXQgaXNuJ3QgaW4gYW55IGNlbGwKCQkJCWlmICggdGhhdC5zLmFpT3V0ZXJXaWR0aHMubGVuZ3RoID09PSAwICkgewoJCQkJCWJvcmRlciA9ICQodGhhdC5zLmR0Lm5UYWJsZSkuY3NzKCdib3JkZXItbGVmdC13aWR0aCcpOwoJCQkJCWlXaWR0aCArPSB0eXBlb2YgYm9yZGVyID09PSAnc3RyaW5nJyA\\/CgkJCQkJdGhhdC5zLmR0LmFpRGlzcGxheVsgdGhhdC5zLmR0Ll9pRGlzcGxheVN0YXJ0K3ogXSA6IHo7CgkJCQlmb3IgKCBpSW5kZXg9MCA7IGlJbmRleDxhaUNvbHVtbnMubGVuZ3RoIDsgaUluZGV4KysgKQoJCQkJewoJCQkJCXZhciBhVGRzID0gdGhhdC5zLmR0LmFvRGF0YVtpXS5hbkNlbGxzIHx8IHRoYXQucy5kdC5vQXBpLl9mbkdldFRkTm9kZXMoIHRoYXQucy5kdCwgaSApOwoJCQkJCWlDb2x1bW4gPSBhaUNvbHVtbnNbaUluZGV4XTsKCgkJCQkJaWYgKCBhVGRzLmxlbmd0aCA+IDAgKQoJCQkJCXsKCQkJCQkJbkNsb25lID0gJCggYVRkc1tpQ29sdW1uXSApLmNsb25lKHRydWUsIHRydWUpWzBdOwoJCQkJCQluLmFwcGVuZENoaWxkKCBuQ2xvbmUgKTsKCQkJCQl9CgkJCQl9CgkJCQluQm9keS5hcHBlbmRDaGlsZCggbiApOwoJCQl9ICk7CgkJfQoJCWVsc2UKCQl7CgkJCSQoJz50Ym9keT50cicsIHRoYXQuZG9tLmJvZHkpLmVhY2goIGZ1bmN0aW9uICh6KSB7CgkJCQluQ2xvbmUgPSB0aGlzLmNsb25lTm9kZSh0cnVlKTsKCQkJCW5DbG9uZS5jbGFzc05hbWUgKz0gJyBEVEZDX05vRGF0YSc7CgkJCQkkKCd0ZCcsIG5DbG9uZSkuaHRtbCgnJyk7CgkJCQluQm9keS5hcHBlbmRDaGlsZCggbkNsb25lICk7CgkJCX0gKTsKCQl9CgoJCW9DbG9uZS5ib2R5LnN0eWxlLndpZHRoID0gIjEwMCUiOwoJCW9DbG9uZS5ib2R5LnN0eWxlLm1hcmdpbiA9ICIwIjsKCQlvQ2xvbmUuYm9keS5zdHlsZS5wYWRkaW5nID0gIjAiOwoKCQlpZiAoIGJBbGwgKQoJCXsKCQkJaWYgKCB0eXBlb2YgdGhpcy5zLmR0Lm9TY3JvbGxlciAhPSAndW5kZWZpbmVkJyApCgkJCXsKCQkJCW9HcmlkLmxpbmVyLmFwcGVuZENoaWxkKCB0aGlzLnMuZHQub1Njcm9sbGVyLmRvbS5mb3JjZS5jbG9uZU5vZGUodHJ1ZSkgKTsKCQkJfQoJCX0KCQlvR3JpZC5saW5lci5hcHBlbmRDaGlsZCggb0Nsb25lLmJvZHkgKTsKCgkJdGhpcy5fZm5FcXVhbGlzZUhlaWdodHMoICd0Ym9keScsIHRoYXQuZG9tLmJvZHksIG9DbG9uZS5ib2R5ICk7CgoJCS8qCgkJICogRm9vdGVyCgkJICovCgkJaWYgKCB0aGlzLnMuZHQublRGb290ICE9PSBudWxsICkKCQl7CgkJCWlmICggYkFsbCApCgkJCXsKCQkJCWlmICggb0Nsb25lLmZvb3RlciAhPT0gbnVsbCApCgkJCQl7CgkJCQkJb0Nsb25lLmZvb3Rlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBvQ2xvbmUuZm9vdGVyICk7CgkJCQl9CgkJCQlvQ2xvbmUuZm9vdGVyID0gJCh0aGlzLmRvbS5mb290ZXIpLmNsb25lKHRydWUsIHRydWUpWzBdOwoJCQkJb0Nsb25lLmZvb3Rlci5jbGFzc05hbWUgKz0gIiBEVEZDX0Nsb25lZCI7CgkJCQlvQ2xvbmUuZm9vdGVyLnN0eWxlLndpZHRoID0gIjEwMCUiOwoJCQkJb0dyaWQuZm9vdC5hcHBlbmRDaGlsZCggb0Nsb25lLmZvb3RlciApOwoKCQkJCS8qIENvcHkgdGhlIGZvb3RlciBqdXN0IGxpa2Ugd2UgZG8gZm9yIHRoZSBoZWFkZXIgKi8KCQkJCWFvQ2xvbmVMYXlvdXQgPSB0aGlzLl9mbkNvcHlMYXlvdXQoIHRoaXMucy5kdC5hb0Zvb3RlciwgYWlDb2x1bW5zICk7CgkJCQl2YXIganFDbG9uZVRmb290ID0gJCgnPnRmb290Jywgb0Nsb25lLmZvb3Rlcik7CgkJCQlqcUNsb25lVGZvb3QuZW1wdHkoKTsKCgkJCQlmb3IgKCBpPTAsIGlMZW49YW9DbG9uZUxheW91dC5sZW5ndGggOyBpPGlMZW4gOyBpKysgKQoJCQkJewoJCQkJCWpxQ2xvbmVUZm9vdFswXS5hcHBlbmRDaGlsZCggYW9DbG9uZUxheW91dFtpXS5uVHIgKTsKCQkJCX0KCQkJCXRoaXMucy5kdC5vQXBpLl9mbkRyYXdIZWFkKCB0aGlzLnMuZHQsIGFvQ2xvbmVMYXlvdXQsIHRydWUgKTsKCQkJfQoJCQllbHNlCgkJCXsKCQkJCWFvQ2xvbmVMYXlvdXQgPSB0aGlzLl9mbkNvcHlMYXlvdXQoIHRoaXMucy5kdC5hb0Zvb3RlciwgYWlDb2x1bW5zICk7CgkJCQl2YXIgYW9DdXJyRm9vdGVyPVtdOwoKCQkJCXRoaXMucy5kdC5vQXBpLl9mbkRldGVjdEhlYWRlciggYW9DdXJyRm9vdGVyLCAkKCc+dGZvb3QnLCBvQ2xvbmUuZm9vdGVyKVswXSApOwoKCQkJCWZvciAoIGk9MCwgaUxlbj1hb0Nsb25lTGF5b3V0Lmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApCgkJCQl7CgkJCQkJZm9yICggaj0wLCBqTGVuPWFvQ2xvbmVMYXlvdXRbaV0ubGVuZ3RoIDsgajxqTGVuIDsgaisrICkKCQkJCQl7CgkJCQkJCWFvQ3VyckZvb3RlcltpXVtqXS5jZWxsLmNsYXNzTmFtZSA9IGFvQ2xvbmVMYXlvdXRbaV1bal0uY2VsbC5jbGFzc05hbWU7CgkJCQkJfQoJCQkJfQoJCQl9CgkJCXRoaXMuX2ZuRXF1YWxpc2VIZWlnaHRzKCAndGZvb3QnLCB0aGlzLmRvbS5mb290ZXIsIG9DbG9uZS5mb290ZXIgKTsKCQl9CgoJCS8qIEVxdWFsaXNlIHRoZSBjb2x1bW4gd2lkdGhzIGJldHdlZW4gdGhlIGhlYWRlciBmb290ZXIgYW5kIGJvZHkgLSBib2R5IGdldCdzIHByaW9yaXR5ICovCgkJdmFyIGFuVW5pcXVlID0gdGhpcy5zLmR0Lm9BcGkuX2ZuR2V0VW5pcXVlVGhzKCB0aGlzLnMuZHQsICQoJz50aGVhZCcsIG9DbG9uZS5oZWFkZXIpWzBdICk7CgkJJChhblVuaXF1ZSkuZWFjaCggZnVuY3Rpb24gKGkpIHsKCQkJaUNvbHVtbiA9IGFpQ29sdW1uc1tpXTsKCQkJdGhpcy5zdHlsZS53aWR0aCA9IHRoYXQucy5haUlubmVyV2lkdGhzW2lDb2x1bW5dKyJweCI7CgkJfSApOwoKCQlpZiAoIHRoYXQucy5kdC5uVEZvb3QgIT09IG51bGwgKQoJCXsKCQkJYW5VbmlxdWUgPSB0aGlzLnMuZHQub0FwaS5fZm5HZXRVbmlxdWVUaHMoIHRoaXMucy5kdCwgJCgnPnRmb290Jywgb0Nsb25lLmZvb3RlcilbMF0gKTsKCQkJJChhblVuaXF1ZSkuZWFjaCggZnVuY3Rpb24gKGkpIHsKCQkJCWlDb2x1bW4gPSBhaUNvbHVtbnNbaV07CgkJCQl0aGlzLnN0eWxlLndpZHRoID0gdGhhdC5zLmFpSW5uZXJXaWR0aHNbaUNvbHVtbl0rInB4IjsKCQkJfSApOwoJCX0KCX0sCgoKCS8qKgoJICogRnJvbSBhIGdpdmVuIHRhYmxlIG5vZGUgKFRIRUFEIGV0YyksIGdldCBhIGxpc3Qgb2YgVFIgZGlyZWN0IGNoaWxkIGVsZW1lbnRzCgkgKiAgQHBhcmFtICAge05vZGV9IG5JbiBUYWJsZSBlbGVtZW50IHRvIHNlYXJjaCBmb3IgVFIgZWxlbWVudHMgKFRIRUFELCBUQk9EWSBvciBURk9PVCBlbGVtZW50KQoJICogIEByZXR1cm5zIHtBcnJheX0gTGlzdCBvZiBUUiBlbGVtZW50cyBmb3VuZAoJICogIEBwcml2YXRlCgkgKi8KCSJfZm5HZXRUck5vZGVzIjogZnVuY3Rpb24gKCBuSW4gKQoJewoJCXZhciBhT3V0ID0gW107CgkJZm9yICggdmFyIGk9MCwgaUxlbj1uSW4uY2hpbGROb2Rlcy5sZW5ndGggOyBpPGlMZW4gOyBpKysgKQoJCXsKCQkJaWYgKCBuSW4uY2hpbGROb2Rlc1tpXS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09ICJUUiIgKQoJCQl7CgkJCQlhT3V0LnB1c2goIG5Jbi5jaGlsZE5vZGVzW2ldICk7CgkJCX0KCQl9CgkJcmV0dXJuIGFPdXQ7Cgl9LAoKCgkvKioKCSAqIEVxdWFsaXNlIHRoZSBoZWlnaHRzIG9mIHRoZSByb3dzIGluIGEgZ2l2ZW4gdGFibGUgbm9kZSBpbiBhIGNyb3NzIGJyb3dzZXIgd2F5CgkgKiAgQHJldHVybnMge3ZvaWR9CgkgKiAgQHBhcmFtICAge1N0cmluZ30gbm9kZU5hbWUgTm9kZSB0eXBlIC0gdGhlYWQsIHRib2R5IG9yIHRmb290CgkgKiAgQHBhcmFtICAge05vZGV9IG9yaWdpbmFsIE9yaWdpbmFsIG5vZGUgdG8gdGFrZSB0aGUgaGVpZ2h0cyBmcm9tCgkgKiAgQHBhcmFtICAge05vZGV9IGNsb25lIENvcHkgdGhlIGhlaWdodHMgdG8KCSAqICBAcHJpdmF0ZQoJICovCgkiX2ZuRXF1YWxpc2VIZWlnaHRzIjogZnVuY3Rpb24gKCBub2RlTmFtZSwgb3JpZ2luYWwsIGNsb25lICkKCXsKCQlpZiAoIHRoaXMucy5zSGVpZ2h0TWF0Y2ggPT0gJ25vbmUnICYmIG5vZGVOYW1lICE9PSAndGhlYWQnICYmIG5vZGVOYW1lICE9PSAndGZvb3QnICkKCQl7CgkJCXJldHVybjsKCQl9CgoJCXZhciB0aGF0ID0gdGhpcywKCQkJaSwgaUxlbiwgaUhlaWdodCwgaUhlaWdodDIsIGlIZWlnaHRPcmlnaW5hbCwgaUhlaWdodENsb25lLAoJCQlyb290T3JpZ2luYWwgPSBvcmlnaW5hbC5nZXRFbGVtZW50c0J5VGFnTmFtZShub2RlTmFtZSlbMF0sCgkJCXJvb3RDbG9uZSAgICA9IGNsb25lLmdldEVsZW1lbnRzQnlUYWdOYW1lKG5vZGVOYW1lKVswXSwKCQkJanFCb3hIYWNrICAgID0gJCgnPicrbm9kZU5hbWUrJz50cjplcSgwKScsIG9yaWdpbmFsKS5jaGlsZHJlbignOmZpcnN0JyksCgkJCWlCb3hIYWNrICAgICA9IGpxQm94SGFjay5vdXRlckhlaWdodCgpIC0ganFCb3hIYWNrLmhlaWdodCgpLAoJCQlhbk9yaWdpbmFsICAgPSB0aGlzLl9mbkdldFRyTm9kZXMoIHJvb3RPcmlnaW5hbCApLAoJCQlhbkNsb25lICAgICAgPSB0aGlzLl9mbkdldFRyTm9kZXMoIHJvb3RDbG9uZSApLAoJCQloZWlnaHRzICAgICAgPSBbXTsKCgkJZm9yICggaT0wLCBpTGVuPWFuQ2xvbmUubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkKCQl7CgkJCWlIZWlnaHRPcmlnaW5hbCA9IGFuT3JpZ2luYWxbaV0ub2Zmc2V0SGVpZ2h0OwoJCQlpSGVpZ2h0Q2xvbmUgPSBhbkNsb25lW2ldLm9mZnNldEhlaWdodDsKCQkJaUhlaWdodCA9IGlIZWlnaHRDbG9uZSA+IGlIZWlnaHRPcmlnaW5hbCA\/IGlIZWlnaHRDbG9uZSA6IGlIZWlnaHRPcmlnaW5hbDsKCgkJCWlmICggdGhpcy5zLnNIZWlnaHRNYXRjaCA9PSAnc2VtaWF1dG8nICkKCQkJewoJCQkJYW5PcmlnaW5hbFtpXS5fRFRUQ19pSGVpZ2h0ID0gaUhlaWdodDsKCQkJfQoKCQkJaGVpZ2h0cy5wdXNoKCBpSGVpZ2h0ICk7CgkJfQoKCQlmb3IgKCBpPTAsIGlMZW49YW5DbG9uZS5sZW5ndGggOyBpPGlMZW4gOyBpKysgKQoJCXsKCQkJYW5DbG9uZVtpXS5zdHlsZS5oZWlnaHQgPSBoZWlnaHRzW2ldKyJweCI7CgkJCWFuT3JpZ2luYWxbaV0uc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0c1tpXSsicHgiOwoJCX0KCX0KfTsKCgoKLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqCiAqIFN0YXRpY3MKICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqLwoKLyoqCiAqIEZpeGVkQ29sdW1ucyBkZWZhdWx0IHNldHRpbmdzIGZvciBpbml0aWFsaXNhdGlvbgogKiAgQG5hbWUgRml4ZWRDb2x1bW5zLmRlZmF1bHRzCiAqICBAbmFtZXNwYWNlCiAqICBAc3RhdGljCiAqLwpGaXhlZENvbHVtbnMuZGVmYXVsdHMgPSAvKiogQGxlbmRzIEZpeGVkQ29sdW1ucy5kZWZhdWx0cyAqL3sKCS8qKgoJICogTnVtYmVyIG9mIGxlZnQgaGFuZCBjb2x1bW5zIHRvIGZpeCBpbiBwb3NpdGlvbgoJICogIEB0eXBlICAgICBpbnQKCSAqICBAZGVmYXVsdCAgMQoJICogIEBzdGF0aWMKCSAqICBAZXhhbXBsZQoJICogICAgICB2YXIgID0gJCgnI2V4YW1wbGUnKS5kYXRhVGFibGUoIHsKCSAqICAgICAgICAgICJzY3JvbGxYIjogIjEwMCUiCgkgKiAgICAgIH0gKTsKCSAqICAgICAgbmV3ICQuZm4uZGF0YVRhYmxlLmZpeGVkQ29sdW1ucyggdGFibGUsIHsKCSAqICAgICAgICAgICJsZWZ0Q29sdW1ucyI6IDIKCSAqICAgICAgfSApOwoJICovCgkiaUxlZnRDb2x1bW5zIjogMSwKCgkvKioKCSAqIE51bWJlciBvZiByaWdodCBoYW5kIGNvbHVtbnMgdG8gZml4IGluIHBvc2l0aW9uCgkgKiAgQHR5cGUgICAgIGludAoJICogIEBkZWZhdWx0ICAwCgkgKiAgQHN0YXRpYwoJICogIEBleGFtcGxlCgkgKiAgICAgIHZhciB0YWJsZSA9ICQoJyNleGFtcGxlJykuZGF0YVRhYmxlKCB7CgkgKiAgICAgICAgICAic2Nyb2xsWCI6ICIxMDAlIgoJICogICAgICB9ICk7CgkgKiAgICAgIG5ldyAkLmZuLmRhdGFUYWJsZS5maXhlZENvbHVtbnMoIHRhYmxlLCB7CgkgKiAgICAgICAgICAicmlnaHRDb2x1bW5zIjogMQoJICogICAgICB9ICk7CgkgKi8KCSJpUmlnaHRDb2x1bW5zIjogMCwKCgkvKioKCSAqIERyYXcgY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIHdoZW4gRml4ZWRDb2x1bW5zIGhhcyByZWRyYXduIHRoZSBmaXhlZCBhc3NldHMKCSAqICBAdHlwZSAgICAgZnVuY3Rpb24ob2JqZWN0LCBvYmplY3QpOnZvaWQKCSAqICBAZGVmYXVsdCAgbnVsbAoJICogIEBzdGF0aWMKCSAqICBAZXhhbXBsZQoJICogICAgICB2YXIgdGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSggewoJICogICAgICAgICAgInNjcm9sbFgiOiAiMTAwJSIKCSAqICAgICAgfSApOwoJICogICAgICBuZXcgJC5mbi5kYXRhVGFibGUuZml4ZWRDb2x1bW5zKCB0YWJsZSwgewoJICogICAgICAgICAgImRyYXdDYWxsYmFjayI6IGZ1bmN0aW9uICgpIHsKCSAqCSAgICAgICAgICAgIGFsZXJ0KCAiRml4ZWRDb2x1bW5zIHJlZHJhdyIgKTsKCSAqCSAgICAgICAgfQoJICogICAgICB9ICk7CgkgKi8KCSJmbkRyYXdDYWxsYmFjayI6IG51bGwsCgoJLyoqCgkgKiBIZWlnaHQgbWF0Y2hpbmcgYWxnb3J0aGltIHRvIHVzZS4gVGhpcyBjYW4gYmUgIm5vbmUiIHdoaWNoIHdpbGwgcmVzdWx0IGluIG5vIGhlaWdodAoJICogbWF0Y2hpbmcgYmVpbmcgYXBwbGllZCBieSBGaXhlZENvbHVtbnMgKGhlaWdodCBtYXRjaGluZyBjb3VsZCBiZSBmb3JjZWQgYnkgQ1NTIGluIHRoaXMKCSAqIGNhc2UpLCAic2VtaWF1dG8iIHdoZXJlYnkgdGhlIGhlaWdodCBjYWxjdWxhdGlvbiB3aWxsIGJlIHBlcmZvcm1lZCBvbmNlLCBhbmQgdGhlIHJlc3VsdAoJICogY2FjaGVkIHRvIGJlIHVzZWQgYWdhaW4gKGZuUmVjYWxjdWxhdGVIZWlnaHQgY2FuIGJlIHVzZWQgdG8gZm9yY2UgcmVjYWxjdWxhdGlvbiksIG9yCgkgKiAiYXV0byIgd2hlbiBoZWlnaHQgbWF0Y2hpbmcgaXMgcGVyZm9ybWVkIG9uIGV2ZXJ5IGRyYXcgKHNsb3dlc3QgYnV0IG11c3QgYWNjdXJhdGUpCgkgKiAgQHR5cGUgICAgIHN0cmluZwoJICogIEBkZWZhdWx0ICBzZW1pYXV0bwoJICogIEBzdGF0aWMKCSAqICBAZXhhbXBsZQoJICogICAgICB2YXIgdGFibGUgPSAkKCcjZXhhbXBsZScpLmRhdGFUYWJsZSggewoJICogICAgICAgICAgInNjcm9sbFgiOiAiMTAwJSIKCSAqICAgICAgfSApOwoJICogICAgICBuZXcgJC5mbi5kYXRhVGFibGUuZml4ZWRDb2x1bW5zKCB0YWJsZSwgewoJICogICAgICAgICAgImhlaWdodE1hdGNoIjogImF1dG8iCgkgKiAgICAgIH0gKTsKCSAqLwoJInNIZWlnaHRNYXRjaCI6ICJzZW1pYXV0byIKfTsKCgoKCi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKgogKiBDb25zdGFudHMKICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqLwoKLyoqCiAqIEZpeGVkQ29sdW1ucyB2ZXJzaW9uCiAqICBAbmFtZSAgICAgIEZpeGVkQ29sdW1ucy52ZXJzaW9uCiAqICBAdHlwZSAgICAgIFN0cmluZwogKiAgQGRlZmF1bHQgICBTZWUgY29kZQogKiAgQHN0YXRpYwogKi8KRml4ZWRDb2x1bW5zLnZlcnNpb24gPSAiMy4wLjIiOwoKCgovKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICoKICogRmlyZWQgZXZlbnRzIChmb3IgZG9jdW1lbnRhdGlvbikKICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqLwoKCi8qKgogKiBFdmVudCBmaXJlZCB3aGVuZXZlciBGaXhlZENvbHVtbnMgcmVkcmF3cyB0aGUgZml4ZWQgY29sdW1ucyAoaS5lLiBjbG9uZXMgdGhlIHRhYmxlIGVsZW1lbnRzIGZyb20gdGhlIG1haW4gRGF0YVRhYmxlKS4gVGhpcyB3aWxsIG9jY3VyIHdoZW5ldmVyIHRoZSBEYXRhVGFibGUgdGhhdCB0aGUgRml4ZWRDb2x1bW5zIGluc3RhbmNlIGlzIGF0dGFjaGVkIGRvZXMgaXRzIG93biBkcmF3LgogKiBAbmFtZSBGaXhlZENvbHVtbnMjZHJhdy5kdGZjCiAqIEBldmVudAogKiBAcGFyYW0ge2V2ZW50fSBlIGpRdWVyeSBldmVudCBvYmplY3QKICogQHBhcmFtIHtvYmplY3R9IG8gRXZlbnQgcGFyYW1ldGVycyBmcm9tIEZpeGVkQ29sdW1ucwogKiBAcGFyYW0ge29iamVjdH0gby5sZWZ0Q2xvbmUgSW5zdGFuY2UncyBvYmplY3QgZG9tLmNsb25lLmxlZnQgZm9yIGVhc3kgcmVmZXJlbmNlLiBUaGlzIG9iamVjdCBjb250YWlucyByZWZlcmVuY2VzIHRvIHRoZSBsZWZ0IGZpeGVkIGNsdW1uIGNvbHVtbidzIG5vZGVzCiAqIEBwYXJhbSB7b2JqZWN0fSBvLnJpZ2h0Q2xvbmUgSW5zdGFuY2UncyBvYmplY3QgZG9tLmNsb25lLnJpZ2h0IGZvciBlYXN5IHJlZmVyZW5jZS4gVGhpcyBvYmplY3QgY29udGFpbnMgcmVmZXJlbmNlcyB0byB0aGUgcmlnaHQgZml4ZWQgY2x1bW4gY29sdW1uJ3Mgbm9kZXMKICovCgoKLy8gTWFrZSBGaXhlZENvbHVtbnMgYWNjZXNzaWJsZSBmcm9tIHRoZSBEYXRhVGFibGVzIGluc3RhbmNlCiQuZm4uZGF0YVRhYmxlLkZpeGVkQ29sdW1ucyA9IEZpeGVkQ29sdW1uczsKJC5mbi5EYXRhVGFibGUuRml4ZWRDb2x1bW5zID0gRml4ZWRDb2x1bW5zOwoKCnJldHVybiBGaXhlZENvbHVtbnM7Cn07IC8vIC9mYWN0b3J5CgoKLy8gRGVmaW5lIGFzIGFuIEFNRCBtb2R1bGUgaWYgcG9zc2libGUKaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7CglkZWZpbmUoIFsnanF1ZXJ5JywgJ2RhdGF0YWJsZXMnXSwgZmFjdG9yeSApOwp9CmVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7CiAgICAvLyBOb2RlL0NvbW1vbkpTCiAgICBmYWN0b3J5KCByZXF1aXJlKCdqcXVlcnknKSwgcmVxdWlyZSgnZGF0YXRhYmxlcycpICk7Cn0KZWxzZSBpZiAoIGpRdWVyeSAmJiAhalF1ZXJ5LmZuLmRhdGFUYWJsZS5GaXhlZENvbHVtbnMgKSB7CgkvLyBPdGhlcndpc2Ugc2ltcGx5IGluaXRpYWxpc2UgYXMgbm9ybWFsLCBzdG9wcGluZyBtdWx0aXBsZSBldmFsdWF0aW9uCglmYWN0b3J5KCBqUXVlcnksIGpRdWVyeS5mbi5kYXRhVGFibGUgKTsKfQoKCn0pKHdpbmRvdywgZG9jdW1lbnQpOwoK",
    "size": "40305"
}