{
    "namaFile": "js\/persediaan\/closingPersediaan\/closingPersediaan.js",
    "lastUpdate": "2018-09-28+13:21:48.52",
    "contentFile": "dmFyIGNsb3NpbmdQZXJzZWRpYWFuRmlsdGVyU0tQRCA9IG5ldyBTa3BkQ2xzKHsKICAgIHByZWZpeDogImNsb3NpbmdQZXJzZWRpYWFuIiwKICAgIGZvcm1OYW1lOiAiY2xvc2luZ1BlcnNlZGlhYW5Gb3JtIiwKICAgIHBpbGloVXJ1c2FuZnRlcjogZnVuY3Rpb24gKCkgewogICAgICAgIGNsb3NpbmdQZXJzZWRpYWFuLmZpbHRlclJlbmRlcih0cnVlKTsKICAgIH0sCiAgICBwaWxpaEJpZGFuZ0FmdGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgY2xvc2luZ1BlcnNlZGlhYW4uZmlsdGVyUmVuZGVyKHRydWUpOwogICAgfSwKICAgIHBpbGloVW5pdEFmdGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgY2xvc2luZ1BlcnNlZGlhYW4uZmlsdGVyUmVuZGVyKHRydWUpOwogICAgfSwKICAgIHBpbGloU3ViVW5pdEFmdGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgY2xvc2luZ1BlcnNlZGlhYW4uZmlsdGVyUmVuZGVyKHRydWUpOwogICAgfSwKICAgIHBpbGloU2Vrc2lBZnRlcjogZnVuY3Rpb24gKCkgewogICAgICAgIGNsb3NpbmdQZXJzZWRpYWFuLmZpbHRlclJlbmRlcih0cnVlKTsKICAgIH0KfSk7CnZhciBjbG9zaW5nUGVyc2VkaWFhbiA9IG5ldyBEYWZ0YXJPYmoyKHsKICAgIHByZWZpeDogImNsb3NpbmdQZXJzZWRpYWFuIiwKICAgIHVybDogInBnUGVyc2VkaWFhbi5waHA\\\",
    "size": "49487"
}