{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/DataTables\/extensions\/TableTools\/js\/dataTables.tableTools.js",
    "lastUpdate": "2018-03-22+14:27:53.48",
    "contentFile": "LyohIFRhYmxlVG9vbHMgMi4yLjIKICogMjAwOS0yMDE0IFNwcnlNZWRpYSBMdGQgLSBkYXRhdGFibGVzLm5ldC9saWNlbnNlCiAqCiAqIFplcm9DbGlwYm9hcmQgMS4wLjQKICogQXV0aG9yOiBKb3NlcGggSHVja2FieSAtIE1JVCBsaWNlbnNlZAogKi8KCi8qKgogKiBAc3VtbWFyeSAgICAgVGFibGVUb29scwogKiBAZGVzY3JpcHRpb24gVG9vbHMgYW5kIGJ1dHRvbnMgZm9yIERhdGFUYWJsZXMKICogQHZlcnNpb24gICAgIDIuMi4yCiAqIEBmaWxlICAgICAgICBkYXRhVGFibGVzLnRhYmxlVG9vbHMuanMKICogQGF1dGhvciAgICAgIFNwcnlNZWRpYSBMdGQgKHd3dy5zcHJ5bWVkaWEuY28udWspCiAqIEBjb250YWN0ICAgICB3d3cuc3ByeW1lZGlhLmNvLnVrL2NvbnRhY3QKICogQGNvcHlyaWdodCAgIENvcHlyaWdodCAyMDA5LTIwMTQgU3ByeU1lZGlhIEx0ZC4KICoKICogVGhpcyBzb3VyY2UgZmlsZSBpcyBmcmVlIHNvZnR3YXJlLCBhdmFpbGFibGUgdW5kZXIgdGhlIGZvbGxvd2luZyBsaWNlbnNlOgogKiAgIE1JVCBsaWNlbnNlIC0gaHR0cDovL2RhdGF0YWJsZXMubmV0L2xpY2Vuc2UvbWl0CiAqCiAqIFRoaXMgc291cmNlIGZpbGUgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0CiAqIFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZCiAqIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIGxpY2Vuc2UgZmlsZXMgZm9yIGRldGFpbHMuCiAqCiAqIEZvciBkZXRhaWxzIHBsZWFzZSByZWZlciB0bzogaHR0cDovL3d3dy5kYXRhdGFibGVzLm5ldAogKi8KCgovKiBHbG9iYWwgc2NvcGUgZm9yIFRhYmxlVG9vbHMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LgogKiBXaWxsIGJlIHJlbW92ZWQgaW4gMi4zCiAqLwp2YXIgVGFibGVUb29sczsKCihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHsKCgp2YXIgZmFjdG9yeSA9IGZ1bmN0aW9uKCAkLCBEYXRhVGFibGUgKSB7CiJ1c2Ugc3RyaWN0IjsKCgovL2luY2x1ZGUgWmVyb0NsaXBib2FyZC5qcwovKiBaZXJvQ2xpcGJvYXJkIDEuMC40CiAqIEF1dGhvcjogSm9zZXBoIEh1Y2thYnkKICovCgp2YXIgWmVyb0NsaXBib2FyZF9UYWJsZVRvb2xzID0gewoKCXZlcnNpb246ICIxLjAuNC1UYWJsZVRvb2xzMiIsCgljbGllbnRzOiB7fSwgLy8gcmVnaXN0ZXJlZCB1cGxvYWQgY2xpZW50cyBvbiBwYWdlLCBpbmRleGVkIGJ5IGlkCgltb3ZpZVBhdGg6ICcnLCAvLyBVUkwgdG8gbW92aWUKCW5leHRJZDogMSwgLy8gSUQgb2YgbmV4dCBtb3ZpZQoKCSQ6IGZ1bmN0aW9uKHRoaW5neSkgewoJCS8vIHNpbXBsZSBET00gbG9va3VwIHV0aWxpdHkgZnVuY3Rpb24KCQlpZiAodHlwZW9mKHRoaW5neSkgPT0gJ3N0cmluZycpIHsKCQkJdGhpbmd5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpbmd5KTsKCQl9CgkJaWYgKCF0aGluZ3kuYWRkQ2xhc3MpIHsKCQkJLy8gZXh0ZW5kIGVsZW1lbnQgd2l0aCBhIGZldyB1c2VmdWwgbWV0aG9kcwoJCQl0aGluZ3kuaGlkZSA9IGZ1bmN0aW9uKCkgeyB0aGlzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IH07CgkJCXRoaW5neS5zaG93ID0gZnVuY3Rpb24oKSB7IHRoaXMuc3R5bGUuZGlzcGxheSA9ICcnOyB9OwoJCQl0aGluZ3kuYWRkQ2xhc3MgPSBmdW5jdGlvbihuYW1lKSB7IHRoaXMucmVtb3ZlQ2xhc3MobmFtZSk7IHRoaXMuY2xhc3NOYW1lICs9ICcgJyArIG5hbWU7IH07CgkJCXRoaW5neS5yZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKG5hbWUpIHsKCQkJCXRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUucmVwbGFjZSggbmV3IFJlZ0V4cCgiXFxzKiIgKyBuYW1lICsgIlxccyoiKSwgIiAiKS5yZXBsYWNlKC9eXHMrLywgJycpLnJlcGxhY2UoL1xzKyQvLCAnJyk7CgkJCX07CgkJCXRoaW5neS5oYXNDbGFzcyA9IGZ1bmN0aW9uKG5hbWUpIHsKCQkJCXJldHVybiAhIXRoaXMuY2xhc3NOYW1lLm1hdGNoKCBuZXcgUmVnRXhwKCJcXHMqIiArIG5hbWUgKyAiXFxzKiIpICk7CgkJCX07CgkJfQoJCXJldHVybiB0aGluZ3k7Cgl9LAoKCXNldE1vdmllUGF0aDogZnVuY3Rpb24ocGF0aCkgewoJCS8vIHNldCBwYXRoIHRvIFplcm9DbGlwYm9hcmQuc3dmCgkJdGhpcy5tb3ZpZVBhdGggPSBwYXRoOwoJfSwKCglkaXNwYXRjaDogZnVuY3Rpb24oaWQsIGV2ZW50TmFtZSwgYXJncykgewoJCS8vIHJlY2VpdmUgZXZlbnQgZnJvbSBmbGFzaCBtb3ZpZSwgc2VuZCB0byBjbGllbnQKCQl2YXIgY2xpZW50ID0gdGhpcy5jbGllbnRzW2lkXTsKCQlpZiAoY2xpZW50KSB7CgkJCWNsaWVudC5yZWNlaXZlRXZlbnQoZXZlbnROYW1lLCBhcmdzKTsKCQl9Cgl9LAoKCXJlZ2lzdGVyOiBmdW5jdGlvbihpZCwgY2xpZW50KSB7CgkJLy8gcmVnaXN0ZXIgbmV3IGNsaWVudCB0byByZWNlaXZlIGV2ZW50cwoJCXRoaXMuY2xpZW50c1tpZF0gPSBjbGllbnQ7Cgl9LAoKCWdldERPTU9iamVjdFBvc2l0aW9uOiBmdW5jdGlvbihvYmopIHsKCQkvLyBnZXQgYWJzb2x1dGUgY29vcmRpbmF0ZXMgZm9yIGRvbSBlbGVtZW50CgkJdmFyIGluZm8gPSB7CgkJCWxlZnQ6IDAsCgkJCXRvcDogMCwKCQkJd2lkdGg6IG9iai53aWR0aCA\/IG9iai53aWR0aCA6IG9iai5vZmZzZXRXaWR0aCwKCQkJaGVpZ2h0OiBvYmouaGVpZ2h0ID8gb2JqLmhlaWdodCA6IG9iai5vZmZzZXRIZWlnaHQKCQl9OwoKCQlpZiAoIG9iai5zdHlsZS53aWR0aCAhPT0gIiIgKSB7CgkJCWluZm8ud2lkdGggPSBvYmouc3R5bGUud2lkdGgucmVwbGFjZSgicHgiLCIiKTsKCQl9CgoJCWlmICggb2JqLnN0eWxlLmhlaWdodCAhPT0gIiIgKSB7CgkJCWluZm8uaGVpZ2h0ID0gb2JqLnN0eWxlLmhlaWdodC5yZXBsYWNlKCJweCIsIiIpOwoJCX0KCgkJd2hpbGUgKG9iaikgewoJCQlpbmZvLmxlZnQgKz0gb2JqLm9mZnNldExlZnQ7CgkJCWluZm8udG9wICs9IG9iai5vZmZzZXRUb3A7CgkJCW9iaiA9IG9iai5vZmZzZXRQYXJlbnQ7CgkJfQoKCQlyZXR1cm4gaW5mbzsKCX0sCgoJQ2xpZW50OiBmdW5jdGlvbihlbGVtKSB7CgkJLy8gY29uc3RydWN0b3IgZm9yIG5ldyBzaW1wbGUgdXBsb2FkIGNsaWVudAoJCXRoaXMuaGFuZGxlcnMgPSB7fTsKCgkJLy8gdW5pcXVlIElECgkJdGhpcy5pZCA9IFplcm9DbGlwYm9hcmRfVGFibGVUb29scy5uZXh0SWQrKzsKCQl0aGlzLm1vdmllSWQgPSAnWmVyb0NsaXBib2FyZF9UYWJsZVRvb2xzTW92aWVfJyArIHRoaXMuaWQ7CgoJCS8vIHJlZ2lzdGVyIGNsaWVudCB3aXRoIHNpbmdsZXRvbiB0byByZWNlaXZlIGZsYXNoIGV2ZW50cwoJCVplcm9DbGlwYm9hcmRfVGFibGVUb29scy5yZWdpc3Rlcih0aGlzLmlkLCB0aGlzKTsKCgkJLy8gY3JlYXRlIG1vdmllCgkJaWYgKGVsZW0pIHsKCQkJdGhpcy5nbHVlKGVsZW0pOwoJCX0KCX0KfTsKClplcm9DbGlwYm9hcmRfVGFibGVUb29scy5DbGllbnQucHJvdG90eXBlID0gewoKCWlkOiAwLCAvLyB1bmlxdWUgSUQgZm9yIHVzCglyZWFkeTogZmFsc2UsIC8vIHdoZXRoZXIgbW92aWUgaXMgcmVhZHkgdG8gcmVjZWl2ZSBldmVudHMgb3Igbm90Cgltb3ZpZTogbnVsbCwgLy8gcmVmZXJlbmNlIHRvIG1vdmllIG9iamVjdAoJY2xpcFRleHQ6ICcnLCAvLyB0ZXh0IHRvIGNvcHkgdG8gY2xpcGJvYXJkCglmaWxlTmFtZTogJycsIC8vIGRlZmF1bHQgZmlsZSBzYXZlIG5hbWUKCWFjdGlvbjogJ2NvcHknLCAvLyBhY3Rpb24gdG8gcGVyZm9ybQoJaGFuZEN1cnNvckVuYWJsZWQ6IHRydWUsIC8vIHdoZXRoZXIgdG8gc2hvdyBoYW5kIGN1cnNvciwgb3IgZGVmYXVsdCBwb2ludGVyIGN1cnNvcgoJY3NzRWZmZWN0czogdHJ1ZSwgLy8gZW5hYmxlIENTUyBtb3VzZSBlZmZlY3RzIG9uIGRvbSBjb250YWluZXIKCWhhbmRsZXJzOiBudWxsLCAvLyB1c2VyIGV2ZW50IGhhbmRsZXJzCglzaXplZDogZmFsc2UsCgoJZ2x1ZTogZnVuY3Rpb24oZWxlbSwgdGl0bGUpIHsKCQkvLyBnbHVlIHRvIERPTSBlbGVtZW50CgkJLy8gZWxlbSBjYW4gYmUgSUQgb3IgYWN0dWFsIERPTSBlbGVtZW50IG9iamVjdAoJCXRoaXMuZG9tRWxlbWVudCA9IFplcm9DbGlwYm9hcmRfVGFibGVUb29scy4kKGVsZW0pOwoKCQkvLyBmbG9hdCBqdXN0IGFib3ZlIG9iamVjdCwgb3IgekluZGV4IDk5IGlmIGRvbSBlbGVtZW50IGlzbid0IHNldAoJCXZhciB6SW5kZXggPSA5OTsKCQlpZiAodGhpcy5kb21FbGVtZW50LnN0eWxlLnpJbmRleCkgewoJCQl6SW5kZXggPSBwYXJzZUludCh0aGlzLmRvbUVsZW1lbnQuc3R5bGUuekluZGV4LCAxMCkgKyAxOwoJCX0KCgkJLy8gZmluZCBYL1kgcG9zaXRpb24gb2YgZG9tRWxlbWVudAoJCXZhciBib3ggPSBaZXJvQ2xpcGJvYXJkX1RhYmxlVG9vbHMuZ2V0RE9NT2JqZWN0UG9zaXRpb24odGhpcy5kb21FbGVtZW50KTsKCgkJLy8gY3JlYXRlIGZsb2F0aW5nIERJViBhYm92ZSBlbGVtZW50CgkJdGhpcy5kaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCQl2YXIgc3R5bGUgPSB0aGlzLmRpdi5zdHlsZTsKCQlzdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7CgkJc3R5bGUubGVmdCA9ICcwcHgnOwoJCXN0eWxlLnRvcCA9ICcwcHgnOwoJCXN0eWxlLndpZHRoID0gKGJveC53aWR0aCkgKyAncHgnOwoJCXN0eWxlLmhlaWdodCA9IGJveC5oZWlnaHQgKyAncHgnOwoJCXN0eWxlLnpJbmRleCA9IHpJbmRleDsKCgkJaWYgKCB0eXBlb2YgdGl0bGUgIT0gInVuZGVmaW5lZCIgJiYgdGl0bGUgIT09ICIiICkgewoJCQl0aGlzLmRpdi50aXRsZSA9IHRpdGxlOwoJCX0KCQlpZiAoIGJveC53aWR0aCAhPT0gMCAmJiBib3guaGVpZ2h0ICE9PSAwICkgewoJCQl0aGlzLnNpemVkID0gdHJ1ZTsKCQl9CgoJCS8vIHN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjZjAwJzsgLy8gZGVidWcKCQlpZiAoIHRoaXMuZG9tRWxlbWVudCApIHsKCQkJdGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZGl2KTsKCQkJdGhpcy5kaXYuaW5uZXJIVE1MID0gdGhpcy5nZXRIVE1MKCBib3gud2lkdGgsIGJveC5oZWlnaHQgKS5yZXBsYWNlKC8mL2csICcmYW1wOycpOwoJCX0KCX0sCgoJcG9zaXRpb25FbGVtZW50OiBmdW5jdGlvbigpIHsKCQl2YXIgYm94ID0gWmVyb0NsaXBib2FyZF9UYWJsZVRvb2xzLmdldERPTU9iamVjdFBvc2l0aW9uKHRoaXMuZG9tRWxlbWVudCk7CgkJdmFyIHN0eWxlID0gdGhpcy5kaXYuc3R5bGU7CgoJCXN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJzsKCQkvL3N0eWxlLmxlZnQgPSAodGhpcy5kb21FbGVtZW50Lm9mZnNldExlZnQpKydweCc7CgkJLy9zdHlsZS50b3AgPSB0aGlzLmRvbUVsZW1lbnQub2Zmc2V0VG9wKydweCc7CgkJc3R5bGUud2lkdGggPSBib3gud2lkdGggKyAncHgnOwoJCXN0eWxlLmhlaWdodCA9IGJveC5oZWlnaHQgKyAncHgnOwoKCQlpZiAoIGJveC53aWR0aCAhPT0gMCAmJiBib3guaGVpZ2h0ICE9PSAwICkgewoJCQl0aGlzLnNpemVkID0gdHJ1ZTsKCQl9IGVsc2UgewoJCQlyZXR1cm47CgkJfQoKCQl2YXIgZmxhc2ggPSB0aGlzLmRpdi5jaGlsZE5vZGVzWzBdOwoJCWZsYXNoLndpZHRoID0gYm94LndpZHRoOwoJCWZsYXNoLmhlaWdodCA9IGJveC5oZWlnaHQ7Cgl9LAoKCWdldEhUTUw6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHsKCQkvLyByZXR1cm4gSFRNTCBmb3IgbW92aWUKCQl2YXIgaHRtbCA9ICcnOwoJCXZhciBmbGFzaHZhcnMgPSAnaWQ9JyArIHRoaXMuaWQgKwoJCQknJndpZHRoPScgKyB3aWR0aCArCgkJCScmaGVpZ2h0PScgKyBoZWlnaHQ7CgoJCWlmIChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9NU0lFLykpIHsKCQkJLy8gSUUgZ2V0cyBhbiBPQkpFQ1QgdGFnCgkJCXZhciBwcm90b2NvbCA9IGxvY2F0aW9uLmhyZWYubWF0Y2goL15odHRwcy9pKSA\\\/Pi9nLCAiIiApLnJlcGxhY2UoL15ccyt8XHMrJC9nLCIiKTsKCQkJCQlzTG9vcERhdGEgPSB0aGlzLl9mbkh0bWxEZWNvZGUoIHNMb29wRGF0YSApOwoKCQkJCQlhUm93LnB1c2goIHRoaXMuX2ZuQm91bmREYXRhKCBzTG9vcERhdGEsIG9Db25maWcuc0ZpZWxkQm91bmRhcnksIHJlZ2V4ICkgKTsKCQkJCX0KCQkJfQoKCQkJYURhdGEucHVzaCggYVJvdy5qb2luKG9Db25maWcuc0ZpZWxkU2VwZXJhdG9yKSApOwoJCX0KCgkJLyoKCQkgKiBCb2R5CgkJICovCgkJdmFyIGFTZWxlY3RlZCA9IHRoaXMuZm5HZXRTZWxlY3RlZCgpOwoJCWJTZWxlY3RlZE9ubHkgPSB0aGlzLnMuc2VsZWN0LnR5cGUgIT09ICJub25lIiAmJiBiU2VsZWN0ZWRPbmx5ICYmIGFTZWxlY3RlZC5sZW5ndGggIT09IDA7CgoJCXZhciBhcGkgPSAkLmZuLmRhdGFUYWJsZS5BcGk7CgkJdmFyIGFEYXRhSW5kZXggPSBhcGkgPwoJCQluZXcgYXBpKCBkdCApLnJvd3MoIG9Db25maWcub1NlbGVjdG9yT3B0cyApLmluZGV4ZXMoKS5mbGF0dGVuKCkudG9BcnJheSgpIDoKCQkJZHQub0luc3RhbmNlCgkJCQkuJCgndHInLCBvQ29uZmlnLm9TZWxlY3Rvck9wdHMpCgkJCQkubWFwKCBmdW5jdGlvbiAoaWQsIHJvdykgewoJCQkJCS8vIElmICJzZWxlY3RlZCBvbmx5IiwgdGhlbiBlbnN1cmUgdGhhdCB0aGUgcm93IGlzIGluIHRoZSBzZWxlY3RlZCBsaXN0CgkJCQkJcmV0dXJuIGJTZWxlY3RlZE9ubHkgJiYgJC5pbkFycmF5KCByb3csIGFTZWxlY3RlZCApID09PSAtMSA\/CgkJCQkJCW51bGwgOgoJCQkJCQlkdC5vSW5zdGFuY2UuZm5HZXRQb3NpdGlvbiggcm93ICk7CgkJCQl9ICkKCQkJCS5nZXQoKTsKCgkJZm9yICggaj0wLCBqTGVuPWFEYXRhSW5kZXgubGVuZ3RoIDsgajxqTGVuIDsgaisrICkKCQl7CgkJCXRyID0gZHQuYW9EYXRhWyBhRGF0YUluZGV4W2pdIF0ublRyOwoJCQlhUm93ID0gW107CgoJCQkvKiBDb2x1bW5zICovCgkJCWZvciAoIGk9MCwgaUxlbj1kdC5hb0NvbHVtbnMubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkKCQkJewoJCQkJaWYgKCBhQ29sdW1uc0luY1tpXSApCgkJCQl7CgkJCQkJLyogQ29udmVydCB0byBzdHJpbmdzICh3aXRoIHNtYWxsIG9wdGltaXNhdGlvbikgKi8KCQkJCQl2YXIgbVR5cGVEYXRhID0gZHQub0FwaS5fZm5HZXRDZWxsRGF0YSggZHQsIGFEYXRhSW5kZXhbal0sIGksICdkaXNwbGF5JyApOwoJCQkJCWlmICggb0NvbmZpZy5mbkNlbGxSZW5kZXIgKQoJCQkJCXsKCQkJCQkJc0xvb3BEYXRhID0gb0NvbmZpZy5mbkNlbGxSZW5kZXIoIG1UeXBlRGF0YSwgaSwgdHIsIGFEYXRhSW5kZXhbal0gKSsiIjsKCQkJCQl9CgkJCQkJZWxzZSBpZiAoIHR5cGVvZiBtVHlwZURhdGEgPT0gInN0cmluZyIgKQoJCQkJCXsKCQkJCQkJLyogU3RyaXAgbmV3bGluZXMsIHJlcGxhY2UgaW1nIHRhZ3Mgd2l0aCBhbHQgYXR0ci4gYW5kIGZpbmFsbHkgc3RyaXAgaHRtbC4uLiAqLwoJCQkJCQlzTG9vcERhdGEgPSBtVHlwZURhdGEucmVwbGFjZSgvXG4vZywiICIpOwoJCQkJCQlzTG9vcERhdGEgPQoJCQkJCQkgICAgc0xvb3BEYXRhLnJlcGxhY2UoLzxpbWcuKj9ccythbHRccyo9XHMqKD86IihbXiJdKykifCcoW14nXSspJ3woW15ccz5dKykpLio\/Pi9naSwKCQkJCQkJICAgICAgICAnJDEkMiQzJyk7CgkJCQkJCXNMb29wRGF0YSA9IHNMb29wRGF0YS5yZXBsYWNlKCAvPC4qPz4vZywgIiIgKTsKCQkJCQl9CgkJCQkJZWxzZQoJCQkJCXsKCQkJCQkJc0xvb3BEYXRhID0gbVR5cGVEYXRhKyIiOwoJCQkJCX0KCgkJCQkJLyogVHJpbSBhbmQgY2xlYW4gdGhlIGRhdGEgKi8KCQkJCQlzTG9vcERhdGEgPSBzTG9vcERhdGEucmVwbGFjZSgvXlxzKy8sICcnKS5yZXBsYWNlKC9ccyskLywgJycpOwoJCQkJCXNMb29wRGF0YSA9IHRoaXMuX2ZuSHRtbERlY29kZSggc0xvb3BEYXRhICk7CgoJCQkJCS8qIEJvdW5kIGl0IGFuZCBhZGQgaXQgdG8gdGhlIHRvdGFsIGRhdGEgKi8KCQkJCQlhUm93LnB1c2goIHRoaXMuX2ZuQm91bmREYXRhKCBzTG9vcERhdGEsIG9Db25maWcuc0ZpZWxkQm91bmRhcnksIHJlZ2V4ICkgKTsKCQkJCX0KCQkJfQoKCQkJYURhdGEucHVzaCggYVJvdy5qb2luKG9Db25maWcuc0ZpZWxkU2VwZXJhdG9yKSApOwoKCQkJLyogRGV0YWlscyByb3dzIGZyb20gZm5PcGVuICovCgkJCWlmICggb0NvbmZpZy5iT3BlblJvd3MgKQoJCQl7CgkJCQlhcnIgPSAkLmdyZXAoZHQuYW9PcGVuUm93cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uUGFyZW50ID09PSB0cjsgfSk7CgoJCQkJaWYgKCBhcnIubGVuZ3RoID09PSAxICkKCQkJCXsKCQkJCQlzTG9vcERhdGEgPSB0aGlzLl9mbkJvdW5kRGF0YSggJCgndGQnLCBhcnJbMF0ublRyKS5odG1sKCksIG9Db25maWcuc0ZpZWxkQm91bmRhcnksIHJlZ2V4ICk7CgkJCQkJYURhdGEucHVzaCggc0xvb3BEYXRhICk7CgkJCQl9CgkJCX0KCQl9CgoJCS8qCgkJICogRm9vdGVyCgkJICovCgkJaWYgKCBvQ29uZmlnLmJGb290ZXIgJiYgZHQublRGb290ICE9PSBudWxsICkKCQl7CgkJCWFSb3cgPSBbXTsKCgkJCWZvciAoIGk9MCwgaUxlbj1kdC5hb0NvbHVtbnMubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkKCQkJewoJCQkJaWYgKCBhQ29sdW1uc0luY1tpXSAmJiBkdC5hb0NvbHVtbnNbaV0ublRmICE9PSBudWxsICkKCQkJCXsKCQkJCQlzTG9vcERhdGEgPSBkdC5hb0NvbHVtbnNbaV0ublRmLmlubmVySFRNTC5yZXBsYWNlKC9cbi9nLCIgIikucmVwbGFjZSggLzwuKj8+L2csICIiICk7CgkJCQkJc0xvb3BEYXRhID0gdGhpcy5fZm5IdG1sRGVjb2RlKCBzTG9vcERhdGEgKTsKCgkJCQkJYVJvdy5wdXNoKCB0aGlzLl9mbkJvdW5kRGF0YSggc0xvb3BEYXRhLCBvQ29uZmlnLnNGaWVsZEJvdW5kYXJ5LCByZWdleCApICk7CgkJCQl9CgkJCX0KCgkJCWFEYXRhLnB1c2goIGFSb3cuam9pbihvQ29uZmlnLnNGaWVsZFNlcGVyYXRvcikgKTsKCQl9CgoJCXZhciBfc0xhc3REYXRhID0gYURhdGEuam9pbiggdGhpcy5fZm5OZXdsaW5lKG9Db25maWcpICk7CgkJcmV0dXJuIF9zTGFzdERhdGE7Cgl9LAoKCgkvKioKCSAqIFdyYXAgZGF0YSB1cCB3aXRoIGEgYm91bmRhcnkgc3RyaW5nCgkgKiAgQG1ldGhvZCAgX2ZuQm91bmREYXRhCgkgKiAgQHBhcmFtICAge1N0cmluZ30gc0RhdGEgZGF0YSB0byBib3VuZAoJICogIEBwYXJhbSAgIHtTdHJpbmd9IHNCb3VuZGFyeSBib3VuZGluZyBjaGFyKHMpCgkgKiAgQHBhcmFtICAge1JlZ0V4cH0gcmVnZXggc2VhcmNoIGZvciB0aGUgYm91bmRpbmcgY2hhcnMgLSBjb25zdHJ1Y3RlZCBvdXRzaWRlIGZvciBlZmZpY2llbmN5CgkgKgkJCSBpbiB0aGUgbG9vcAoJICogIEByZXR1cm5zIHtTdHJpbmd9IGJvdW5kIGRhdGEKCSAqICBAcHJpdmF0ZSAKCSAqLwoJIl9mbkJvdW5kRGF0YSI6IGZ1bmN0aW9uICggc0RhdGEsIHNCb3VuZGFyeSwgcmVnZXggKQoJewoJCWlmICggc0JvdW5kYXJ5ID09PSAiIiApCgkJewoJCQlyZXR1cm4gc0RhdGE7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBzQm91bmRhcnkgKyBzRGF0YS5yZXBsYWNlKHJlZ2V4LCBzQm91bmRhcnkrc0JvdW5kYXJ5KSArIHNCb3VuZGFyeTsKCQl9Cgl9LAoKCgkvKioKCSAqIEJyZWFrIGEgc3RyaW5nIHVwIGludG8gYW4gYXJyYXkgb2Ygc21hbGxlciBzdHJpbmdzCgkgKiAgQG1ldGhvZCAgX2ZuQ2h1bmtEYXRhCgkgKiAgQHBhcmFtICAge1N0cmluZ30gc0RhdGEgZGF0YSB0byBiZSBicm9rZW4gdXAKCSAqICBAcGFyYW0gICB7SW50fSBpU2l6ZSBjaHVuayBzaXplCgkgKiAgQHJldHVybnMge0FycmF5fSBTdHJpbmcgYXJyYXkgb2YgYnJva2VuIHVwIHRleHQKCSAqICBAcHJpdmF0ZSAKCSAqLwoJIl9mbkNodW5rRGF0YSI6IGZ1bmN0aW9uICggc0RhdGEsIGlTaXplICkKCXsKCQl2YXIgYXNSZXR1cm4gPSBbXTsKCQl2YXIgaVN0cmxlbiA9IHNEYXRhLmxlbmd0aDsKCgkJZm9yICggdmFyIGk9MCA7IGk8aVN0cmxlbiA7IGkrPWlTaXplICkKCQl7CgkJCWlmICggaStpU2l6ZSA8IGlTdHJsZW4gKQoJCQl7CgkJCQlhc1JldHVybi5wdXNoKCBzRGF0YS5zdWJzdHJpbmcoIGksIGkraVNpemUgKSApOwoJCQl9CgkJCWVsc2UKCQkJewoJCQkJYXNSZXR1cm4ucHVzaCggc0RhdGEuc3Vic3RyaW5nKCBpLCBpU3RybGVuICkgKTsKCQkJfQoJCX0KCgkJcmV0dXJuIGFzUmV0dXJuOwoJfSwKCgoJLyoqCgkgKiBEZWNvZGUgSFRNTCBlbnRpdGllcwoJICogIEBtZXRob2QgIF9mbkh0bWxEZWNvZGUKCSAqICBAcGFyYW0gICB7U3RyaW5nfSBzRGF0YSBlbmNvZGVkIHN0cmluZwoJICogIEByZXR1cm5zIHtTdHJpbmd9IGRlY29kZWQgc3RyaW5nCgkgKiAgQHByaXZhdGUgCgkgKi8KCSJfZm5IdG1sRGVjb2RlIjogZnVuY3Rpb24gKCBzRGF0YSApCgl7CgkJaWYgKCBzRGF0YS5pbmRleE9mKCcmJykgPT09IC0xICkKCQl7CgkJCXJldHVybiBzRGF0YTsKCQl9CgoJCXZhciBuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgoJCXJldHVybiBzRGF0YS5yZXBsYWNlKCAvJihbXlxzXSo\",
    "size": "82983"
}