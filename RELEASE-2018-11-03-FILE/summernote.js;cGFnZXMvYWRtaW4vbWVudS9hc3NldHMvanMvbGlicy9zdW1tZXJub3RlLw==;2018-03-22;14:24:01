{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/summernote\/summernote.js",
    "lastUpdate": "2018-03-22+14:24:01.21",
    "contentFile": "LyoqCiAqIFN1cGVyIHNpbXBsZSB3eXNpd3lnIGVkaXRvciBvbiBCb290c3RyYXAgdjAuNi4wCiAqIGh0dHA6Ly9oYWNrZXJ3aW5zLmdpdGh1Yi5pby9zdW1tZXJub3RlLwogKgogKiBzdW1tZXJub3RlLmpzCiAqIENvcHlyaWdodCAyMDEzLTIwMTQgQWxhbiBIb25nLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzCiAqIHN1bW1lcm5vdGUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuLwogKgogKiBEYXRlOiAyMDE0LTEyLTIzVDIwOjEwWgogKi8KKGZ1bmN0aW9uIChmYWN0b3J5KSB7CiAgLyogZ2xvYmFsIGRlZmluZSAqLwogIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsKICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS4KICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTsKICB9IGVsc2UgewogICAgLy8gQnJvd3NlciBnbG9iYWxzOiBqUXVlcnkKICAgIGZhY3Rvcnkod2luZG93LmpRdWVyeSk7CiAgfQp9KGZ1bmN0aW9uICgkKSB7CiAgCgoKICBpZiAoJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UpIHsKICAgIC8qKgogICAgICogQXJyYXkucHJvdG90eXBlLnJlZHVjZSBmYWxsYmFjawogICAgICoKICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L1JlZHVjZQogICAgICovCiAgICBBcnJheS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBvcHRJbml0aWFsVmFsdWUpIHsKICAgICAgdmFyIGlkeCwgdmFsdWUsIGxlbmd0aCA9IHRoaXMubGVuZ3RoID4+PiAwLCBpc1ZhbHVlU2V0ID0gZmFsc2U7CiAgICAgIGlmICgxIDwgYXJndW1lbnRzLmxlbmd0aCkgewogICAgICAgIHZhbHVlID0gb3B0SW5pdGlhbFZhbHVlOwogICAgICAgIGlzVmFsdWVTZXQgPSB0cnVlOwogICAgICB9CiAgICAgIGZvciAoaWR4ID0gMDsgbGVuZ3RoID4gaWR4OyArK2lkeCkgewogICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KGlkeCkpIHsKICAgICAgICAgIGlmIChpc1ZhbHVlU2V0KSB7CiAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2sodmFsdWUsIHRoaXNbaWR4XSwgaWR4LCB0aGlzKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhbHVlID0gdGhpc1tpZHhdOwogICAgICAgICAgICBpc1ZhbHVlU2V0ID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKCFpc1ZhbHVlU2V0KSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpOwogICAgICB9CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH07CiAgfQoKICBpZiAoJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIEFycmF5LnByb3RvdHlwZS5maWx0ZXIpIHsKICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoZnVuLyosIHRoaXNBcmcqLykgewogICAgICBpZiAodGhpcyA9PT0gdm9pZCAwIHx8IHRoaXMgPT09IG51bGwpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7CiAgICAgIH0KICAKICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyk7CiAgICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDsKICAgICAgaWYgKHR5cGVvZiBmdW4gIT09ICdmdW5jdGlvbicpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7CiAgICAgIH0KICAKICAgICAgdmFyIHJlcyA9IFtdOwogICAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMiA\\/IDAgOiBwb2ludC5vZmZzZXQgLSAxOwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIG5vZGU6IG5vZGUsCiAgICAgICAgb2Zmc2V0OiBvZmZzZXQKICAgICAgfTsKICAgIH07CgogICAgLyoqCiAgICAgKiByZXR1cm5zIG5leHQgYm91bmRhcnlQb2ludAogICAgICoKICAgICAqIEBwYXJhbSB7Qm91bmRhcnlQb2ludH0gcG9pbnQKICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNTa2lwSW5uZXJPZmZzZXQKICAgICAqIEByZXR1cm4ge0JvdW5kYXJ5UG9pbnR9CiAgICAgKi8KICAgIHZhciBuZXh0UG9pbnQgPSBmdW5jdGlvbiAocG9pbnQsIGlzU2tpcElubmVyT2Zmc2V0KSB7CiAgICAgIHZhciBub2RlLCBvZmZzZXQ7CgogICAgICBpZiAobm9kZUxlbmd0aChwb2ludC5ub2RlKSA9PT0gcG9pbnQub2Zmc2V0KSB7CiAgICAgICAgaWYgKGlzRWRpdGFibGUocG9pbnQubm9kZSkpIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KCiAgICAgICAgbm9kZSA9IHBvaW50Lm5vZGUucGFyZW50Tm9kZTsKICAgICAgICBvZmZzZXQgPSBwb3NpdGlvbihwb2ludC5ub2RlKSArIDE7CiAgICAgIH0gZWxzZSBpZiAoaGFzQ2hpbGRyZW4ocG9pbnQubm9kZSkpIHsKICAgICAgICBub2RlID0gcG9pbnQubm9kZS5jaGlsZE5vZGVzW3BvaW50Lm9mZnNldF07CiAgICAgICAgb2Zmc2V0ID0gMDsKICAgICAgfSBlbHNlIHsKICAgICAgICBub2RlID0gcG9pbnQubm9kZTsKICAgICAgICBvZmZzZXQgPSBpc1NraXBJbm5lck9mZnNldCA\/IG5vZGVMZW5ndGgocG9pbnQubm9kZSkgOiBwb2ludC5vZmZzZXQgKyAxOwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIG5vZGU6IG5vZGUsCiAgICAgICAgb2Zmc2V0OiBvZmZzZXQKICAgICAgfTsKICAgIH07CgogICAgLyoqCiAgICAgKiByZXR1cm5zIHdoZXRoZXIgcG9pbnRBIGFuZCBwb2ludEIgaXMgc2FtZSBvciBub3QuCiAgICAgKgogICAgICogQHBhcmFtIHtCb3VuZGFyeVBvaW50fSBwb2ludEEKICAgICAqIEBwYXJhbSB7Qm91bmRhcnlQb2ludH0gcG9pbnRCCiAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICovCiAgICB2YXIgaXNTYW1lUG9pbnQgPSBmdW5jdGlvbiAocG9pbnRBLCBwb2ludEIpIHsKICAgICAgcmV0dXJuIHBvaW50QS5ub2RlID09PSBwb2ludEIubm9kZSAmJiBwb2ludEEub2Zmc2V0ID09PSBwb2ludEIub2Zmc2V0OwogICAgfTsKCiAgICAvKioKICAgICAqIHJldHVybnMgd2hldGhlciBwb2ludCBpcyB2aXNpYmxlIChjYW4gc2V0IGN1cnNvcikgb3Igbm90LgogICAgICogCiAgICAgKiBAcGFyYW0ge0JvdW5kYXJ5UG9pbnR9IHBvaW50CiAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICovCiAgICB2YXIgaXNWaXNpYmxlUG9pbnQgPSBmdW5jdGlvbiAocG9pbnQpIHsKICAgICAgaWYgKGlzVGV4dChwb2ludC5ub2RlKSB8fCAhaGFzQ2hpbGRyZW4ocG9pbnQubm9kZSkgfHwgaXNFbXB0eShwb2ludC5ub2RlKSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICB2YXIgbGVmdE5vZGUgPSBwb2ludC5ub2RlLmNoaWxkTm9kZXNbcG9pbnQub2Zmc2V0IC0gMV07CiAgICAgIHZhciByaWdodE5vZGUgPSBwb2ludC5ub2RlLmNoaWxkTm9kZXNbcG9pbnQub2Zmc2V0XTsKICAgICAgaWYgKCghbGVmdE5vZGUgfHwgaXNWb2lkKGxlZnROb2RlKSkgJiYgKCFyaWdodE5vZGUgfHwgaXNWb2lkKHJpZ2h0Tm9kZSkpKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAcGFyYW0ge0JvdW5kYXJ5UG9pbnR9IHBvaW50CiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkCiAgICAgKiBAcmV0dXJuIHtCb3VuZGFyeVBvaW50fQogICAgICovCiAgICB2YXIgcHJldlBvaW50VW50aWwgPSBmdW5jdGlvbiAocG9pbnQsIHByZWQpIHsKICAgICAgd2hpbGUgKHBvaW50KSB7CiAgICAgICAgaWYgKHByZWQocG9pbnQpKSB7CiAgICAgICAgICByZXR1cm4gcG9pbnQ7CiAgICAgICAgfQoKICAgICAgICBwb2ludCA9IHByZXZQb2ludChwb2ludCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfTsKCiAgICAvKioKICAgICAqIEBwYXJhbSB7Qm91bmRhcnlQb2ludH0gcG9pbnQKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWQKICAgICAqIEByZXR1cm4ge0JvdW5kYXJ5UG9pbnR9CiAgICAgKi8KICAgIHZhciBuZXh0UG9pbnRVbnRpbCA9IGZ1bmN0aW9uIChwb2ludCwgcHJlZCkgewogICAgICB3aGlsZSAocG9pbnQpIHsKICAgICAgICBpZiAocHJlZChwb2ludCkpIHsKICAgICAgICAgIHJldHVybiBwb2ludDsKICAgICAgICB9CgogICAgICAgIHBvaW50ID0gbmV4dFBvaW50KHBvaW50KTsKICAgICAgfQoKICAgICAgcmV0dXJuIG51bGw7CiAgICB9OwoKICAgIC8qKgogICAgICogQHBhcmFtIHtCb3VuZGFyeVBvaW50fSBzdGFydFBvaW50CiAgICAgKiBAcGFyYW0ge0JvdW5kYXJ5UG9pbnR9IGVuZFBvaW50CiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzU2tpcElubmVyT2Zmc2V0CiAgICAgKi8KICAgIHZhciB3YWxrUG9pbnQgPSBmdW5jdGlvbiAoc3RhcnRQb2ludCwgZW5kUG9pbnQsIGhhbmRsZXIsIGlzU2tpcElubmVyT2Zmc2V0KSB7CiAgICAgIHZhciBwb2ludCA9IHN0YXJ0UG9pbnQ7CgogICAgICB3aGlsZSAocG9pbnQpIHsKICAgICAgICBoYW5kbGVyKHBvaW50KTsKCiAgICAgICAgaWYgKGlzU2FtZVBvaW50KHBvaW50LCBlbmRQb2ludCkpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgdmFyIGlzU2tpcE9mZnNldCA9IGlzU2tpcElubmVyT2Zmc2V0ICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9pbnQubm9kZSAhPT0gcG9pbnQubm9kZSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRQb2ludC5ub2RlICE9PSBwb2ludC5ub2RlOwogICAgICAgIHBvaW50ID0gbmV4dFBvaW50KHBvaW50LCBpc1NraXBPZmZzZXQpOwogICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogcmV0dXJuIG9mZnNldFBhdGgoYXJyYXkgb2Ygb2Zmc2V0KSBmcm9tIGFuY2VzdG9yCiAgICAgKgogICAgICogQHBhcmFtIHtOb2RlfSBhbmNlc3RvciAtIGFuY2VzdG9yIG5vZGUKICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZQogICAgICovCiAgICB2YXIgbWFrZU9mZnNldFBhdGggPSBmdW5jdGlvbiAoYW5jZXN0b3IsIG5vZGUpIHsKICAgICAgdmFyIGFuY2VzdG9ycyA9IGxpc3RBbmNlc3Rvcihub2RlLCBmdW5jLmVxKGFuY2VzdG9yKSk7CiAgICAgIHJldHVybiAkLm1hcChhbmNlc3RvcnMsIHBvc2l0aW9uKS5yZXZlcnNlKCk7CiAgICB9OwoKICAgIC8qKgogICAgICogcmV0dXJuIGVsZW1lbnQgZnJvbSBvZmZzZXRQYXRoKGFycmF5IG9mIG9mZnNldCkKICAgICAqCiAgICAgKiBAcGFyYW0ge05vZGV9IGFuY2VzdG9yIC0gYW5jZXN0b3Igbm9kZQogICAgICogQHBhcmFtIHthcnJheX0gYU9mZnNldCAtIG9mZnNldFBhdGgKICAgICAqLwogICAgdmFyIGZyb21PZmZzZXRQYXRoID0gZnVuY3Rpb24gKGFuY2VzdG9yLCBhT2Zmc2V0KSB7CiAgICAgIHZhciBjdXJyZW50ID0gYW5jZXN0b3I7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhT2Zmc2V0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgaWYgKGN1cnJlbnQuY2hpbGROb2Rlcy5sZW5ndGggPD0gYU9mZnNldFtpXSkgewogICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuY2hpbGROb2Rlc1tjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoIC0gMV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmNoaWxkTm9kZXNbYU9mZnNldFtpXV07CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBjdXJyZW50OwogICAgfTsKCiAgICAvKioKICAgICAqIHNwbGl0IGVsZW1lbnQgb3IgI3RleHQKICAgICAqCiAgICAgKiBAcGFyYW0ge0JvdW5kYXJ5UG9pbnR9IHBvaW50CiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpc1NraXBQYWRkaW5nQmxhbmtIVE1MXQogICAgICogQHJldHVybiB7Tm9kZX0gcmlnaHQgbm9kZSBvZiBib3VuZGFyeVBvaW50CiAgICAgKi8KICAgIHZhciBzcGxpdE5vZGUgPSBmdW5jdGlvbiAocG9pbnQsIGlzU2tpcFBhZGRpbmdCbGFua0hUTUwpIHsKICAgICAgLy8gc3BsaXQgI3RleHQKICAgICAgaWYgKGlzVGV4dChwb2ludC5ub2RlKSkgewogICAgICAgIC8vIGVkZ2UgY2FzZQogICAgICAgIGlmIChpc0xlZnRFZGdlUG9pbnQocG9pbnQpKSB7CiAgICAgICAgICByZXR1cm4gcG9pbnQubm9kZTsKICAgICAgICB9IGVsc2UgaWYgKGlzUmlnaHRFZGdlUG9pbnQocG9pbnQpKSB7CiAgICAgICAgICByZXR1cm4gcG9pbnQubm9kZS5uZXh0U2libGluZzsKICAgICAgICB9CgogICAgICAgIHJldHVybiBwb2ludC5ub2RlLnNwbGl0VGV4dChwb2ludC5vZmZzZXQpOwogICAgICB9CgogICAgICAvLyBzcGxpdCBlbGVtZW50CiAgICAgIHZhciBjaGlsZE5vZGUgPSBwb2ludC5ub2RlLmNoaWxkTm9kZXNbcG9pbnQub2Zmc2V0XTsKICAgICAgdmFyIGNsb25lID0gaW5zZXJ0QWZ0ZXIocG9pbnQubm9kZS5jbG9uZU5vZGUoZmFsc2UpLCBwb2ludC5ub2RlKTsKICAgICAgYXBwZW5kQ2hpbGROb2RlcyhjbG9uZSwgbGlzdE5leHQoY2hpbGROb2RlKSk7CgogICAgICBpZiAoIWlzU2tpcFBhZGRpbmdCbGFua0hUTUwpIHsKICAgICAgICBwYWRkaW5nQmxhbmtIVE1MKHBvaW50Lm5vZGUpOwogICAgICAgIHBhZGRpbmdCbGFua0hUTUwoY2xvbmUpOwogICAgICB9CgogICAgICByZXR1cm4gY2xvbmU7CiAgICB9OwoKICAgIC8qKgogICAgICogc3BsaXQgdHJlZSBieSBwb2ludAogICAgICoKICAgICAqIEBwYXJhbSB7Tm9kZX0gcm9vdCAtIHNwbGl0IHJvb3QKICAgICAqIEBwYXJhbSB7Qm91bmRhcnlQb2ludH0gcG9pbnQKICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2lzU2tpcFBhZGRpbmdCbGFua0hUTUxdCiAgICAgKiBAcmV0dXJuIHtOb2RlfSByaWdodCBub2RlIG9mIGJvdW5kYXJ5UG9pbnQKICAgICAqLwogICAgdmFyIHNwbGl0VHJlZSA9IGZ1bmN0aW9uIChyb290LCBwb2ludCwgaXNTa2lwUGFkZGluZ0JsYW5rSFRNTCkgewogICAgICAvLyBleCkgWyN0ZXh0LCA8c3Bhbj4sIDxwPl0KICAgICAgdmFyIGFuY2VzdG9ycyA9IGxpc3RBbmNlc3Rvcihwb2ludC5ub2RlLCBmdW5jLmVxKHJvb3QpKTsKCiAgICAgIGlmICghYW5jZXN0b3JzLmxlbmd0aCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9IGVsc2UgaWYgKGFuY2VzdG9ycy5sZW5ndGggPT09IDEpIHsKICAgICAgICByZXR1cm4gc3BsaXROb2RlKHBvaW50LCBpc1NraXBQYWRkaW5nQmxhbmtIVE1MKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGFuY2VzdG9ycy5yZWR1Y2UoZnVuY3Rpb24gKG5vZGUsIHBhcmVudCkgewogICAgICAgIHZhciBjbG9uZSA9IGluc2VydEFmdGVyKHBhcmVudC5jbG9uZU5vZGUoZmFsc2UpLCBwYXJlbnQpOwoKICAgICAgICBpZiAobm9kZSA9PT0gcG9pbnQubm9kZSkgewogICAgICAgICAgbm9kZSA9IHNwbGl0Tm9kZShwb2ludCwgaXNTa2lwUGFkZGluZ0JsYW5rSFRNTCk7CiAgICAgICAgfQoKICAgICAgICBhcHBlbmRDaGlsZE5vZGVzKGNsb25lLCBsaXN0TmV4dChub2RlKSk7CgogICAgICAgIGlmICghaXNTa2lwUGFkZGluZ0JsYW5rSFRNTCkgewogICAgICAgICAgcGFkZGluZ0JsYW5rSFRNTChwYXJlbnQpOwogICAgICAgICAgcGFkZGluZ0JsYW5rSFRNTChjbG9uZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjbG9uZTsKICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBjcmVhdGUgPSBmdW5jdGlvbiAobm9kZU5hbWUpIHsKICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobm9kZU5hbWUpOwogICAgfTsKCiAgICB2YXIgY3JlYXRlVGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7CiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTsKICAgIH07CgogICAgLyoqCiAgICAgKiByZW1vdmUgbm9kZSwgKGlzUmVtb3ZlQ2hpbGQ6IHJlbW92ZSBjaGlsZCBvciBub3QpCiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUKICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVDaGlsZAogICAgICovCiAgICB2YXIgcmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUsIGlzUmVtb3ZlQ2hpbGQpIHsKICAgICAgaWYgKCFub2RlIHx8ICFub2RlLnBhcmVudE5vZGUpIHsgcmV0dXJuOyB9CiAgICAgIGlmIChub2RlLnJlbW92ZU5vZGUpIHsgcmV0dXJuIG5vZGUucmVtb3ZlTm9kZShpc1JlbW92ZUNoaWxkKTsgfQoKICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTsKICAgICAgaWYgKCFpc1JlbW92ZUNoaWxkKSB7CiAgICAgICAgdmFyIG5vZGVzID0gW107CiAgICAgICAgdmFyIGksIGxlbjsKICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgIG5vZGVzLnB1c2gobm9kZS5jaGlsZE5vZGVzW2ldKTsKICAgICAgICB9CgogICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGVzW2ldLCBub2RlKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChub2RlKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWQKICAgICAqLwogICAgdmFyIHJlbW92ZVdoaWxlID0gZnVuY3Rpb24gKG5vZGUsIHByZWQpIHsKICAgICAgd2hpbGUgKG5vZGUpIHsKICAgICAgICBpZiAoaXNFZGl0YWJsZShub2RlKSB8fCAhcHJlZChub2RlKSkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlOwogICAgICAgIHJlbW92ZShub2RlKTsKICAgICAgICBub2RlID0gcGFyZW50OwogICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogcmVwbGFjZSBub2RlIHdpdGggcHJvdmlkZWQgbm9kZU5hbWUKICAgICAqCiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBub2RlTmFtZQogICAgICogQHJldHVybiB7Tm9kZX0gLSBuZXcgbm9kZQogICAgICovCiAgICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIChub2RlLCBub2RlTmFtZSkgewogICAgICBpZiAobm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSBub2RlTmFtZS50b1VwcGVyQ2FzZSgpKSB7CiAgICAgICAgcmV0dXJuIG5vZGU7CiAgICAgIH0KCiAgICAgIHZhciBuZXdOb2RlID0gY3JlYXRlKG5vZGVOYW1lKTsKCiAgICAgIGlmIChub2RlLnN0eWxlLmNzc1RleHQpIHsKICAgICAgICBuZXdOb2RlLnN0eWxlLmNzc1RleHQgPSBub2RlLnN0eWxlLmNzc1RleHQ7CiAgICAgIH0KCiAgICAgIGFwcGVuZENoaWxkTm9kZXMobmV3Tm9kZSwgbGlzdC5mcm9tKG5vZGUuY2hpbGROb2RlcykpOwogICAgICBpbnNlcnRBZnRlcihuZXdOb2RlLCBub2RlKTsKICAgICAgcmVtb3ZlKG5vZGUpOwoKICAgICAgcmV0dXJuIG5ld05vZGU7CiAgICB9OwoKICAgIHZhciBpc1RleHRhcmVhID0gbWFrZVByZWRCeU5vZGVOYW1lKCdURVhUQVJFQScpOwoKICAgIC8qKgogICAgICogZ2V0IHRoZSBIVE1MIGNvbnRlbnRzIG9mIG5vZGUgCiAgICAgKgogICAgICogQHBhcmFtIHtqUXVlcnl9ICRub2RlCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpc05ld2xpbmVPbkJsb2NrXQogICAgICovCiAgICB2YXIgaHRtbCA9IGZ1bmN0aW9uICgkbm9kZSwgaXNOZXdsaW5lT25CbG9jaykgewogICAgICB2YXIgbWFya3VwID0gaXNUZXh0YXJlYSgkbm9kZVswXSkgPyAkbm9kZS52YWwoKSA6ICRub2RlLmh0bWwoKTsKCiAgICAgIGlmIChpc05ld2xpbmVPbkJsb2NrKSB7CiAgICAgICAgdmFyIHJlZ2V4VGFnID0gLzwoXC8\/KShcYig\/ISEpW14+XHNdKikoLio\/KShccypcLz8+KS9nOwogICAgICAgIG1hcmt1cCA9IG1hcmt1cC5yZXBsYWNlKHJlZ2V4VGFnLCBmdW5jdGlvbiAobWF0Y2gsIGVuZFNsYXNoLCBuYW1lKSB7CiAgICAgICAgICBuYW1lID0gbmFtZS50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgdmFyIGlzRW5kT2ZJbmxpbmVDb250YWluZXIgPSAvXkRJVnxeVER8XlRIfF5QfF5MSXxeSFsxLTddLy50ZXN0KG5hbWUpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEhZW5kU2xhc2g7CiAgICAgICAgICB2YXIgaXNCbG9ja05vZGUgPSAvXkJMT0NLUVVPVEV8XlRBQkxFfF5UQk9EWXxeVFJ8XkhSfF5VTHxeT0wvLnRlc3QobmFtZSk7CgogICAgICAgICAgcmV0dXJuIG1hdGNoICsgKChpc0VuZE9mSW5saW5lQ29udGFpbmVyIHx8IGlzQmxvY2tOb2RlKSA\\/ICdib2xkJyA6ICdub3JtYWwnOwogICAgICBzdHlsZUluZm9bJ2ZvbnQtaXRhbGljJ10gPSBkb2N1bWVudC5xdWVyeUNvbW1hbmRTdGF0ZSgnaXRhbGljJykgPyAnaXRhbGljJyA6ICdub3JtYWwnOwogICAgICBzdHlsZUluZm9bJ2ZvbnQtdW5kZXJsaW5lJ10gPSBkb2N1bWVudC5xdWVyeUNvbW1hbmRTdGF0ZSgndW5kZXJsaW5lJykgPyAndW5kZXJsaW5lJyA6ICdub3JtYWwnOwogICAgICBzdHlsZUluZm9bJ2ZvbnQtc3RyaWtldGhyb3VnaCddID0gZG9jdW1lbnQucXVlcnlDb21tYW5kU3RhdGUoJ3N0cmlrZVRocm91Z2gnKSA\/ICdzdHJpa2V0aHJvdWdoJyA6ICdub3JtYWwnOwogICAgICBzdHlsZUluZm9bJ2ZvbnQtc3VwZXJzY3JpcHQnXSA9IGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKCdzdXBlcnNjcmlwdCcpID8gJ3N1cGVyc2NyaXB0JyA6ICdub3JtYWwnOwogICAgICBzdHlsZUluZm9bJ2ZvbnQtc3Vic2NyaXB0J10gPSBkb2N1bWVudC5xdWVyeUNvbW1hbmRTdGF0ZSgnc3Vic2NyaXB0JykgPyAnc3Vic2NyaXB0JyA6ICdub3JtYWwnOwoKICAgICAgLy8gbGlzdC1zdHlsZS10eXBlIHRvIGxpc3Qtc3R5bGUodW5vcmRlcmVkLCBvcmRlcmVkKQogICAgICBpZiAoIXJuZy5pc09uTGlzdCgpKSB7CiAgICAgICAgc3R5bGVJbmZvWydsaXN0LXN0eWxlJ10gPSAnbm9uZSc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGFPcmRlcmVkVHlwZSA9IFsnY2lyY2xlJywgJ2Rpc2MnLCAnZGlzYy1sZWFkaW5nLXplcm8nLCAnc3F1YXJlJ107CiAgICAgICAgdmFyIGlzVW5vcmRlcmVkID0gJC5pbkFycmF5KHN0eWxlSW5mb1snbGlzdC1zdHlsZS10eXBlJ10sIGFPcmRlcmVkVHlwZSkgPiAtMTsKICAgICAgICBzdHlsZUluZm9bJ2xpc3Qtc3R5bGUnXSA9IGlzVW5vcmRlcmVkID8gJ3Vub3JkZXJlZCcgOiAnb3JkZXJlZCc7CiAgICAgIH0KCiAgICAgIHZhciBwYXJhID0gZG9tLmFuY2VzdG9yKHJuZy5zYywgZG9tLmlzUGFyYSk7CiAgICAgIGlmIChwYXJhICYmIHBhcmEuc3R5bGVbJ2xpbmUtaGVpZ2h0J10pIHsKICAgICAgICBzdHlsZUluZm9bJ2xpbmUtaGVpZ2h0J10gPSBwYXJhLnN0eWxlLmxpbmVIZWlnaHQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGxpbmVIZWlnaHQgPSBwYXJzZUludChzdHlsZUluZm9bJ2xpbmUtaGVpZ2h0J10sIDEwKSAvIHBhcnNlSW50KHN0eWxlSW5mb1snZm9udC1zaXplJ10sIDEwKTsKICAgICAgICBzdHlsZUluZm9bJ2xpbmUtaGVpZ2h0J10gPSBsaW5lSGVpZ2h0LnRvRml4ZWQoMSk7CiAgICAgIH0KCiAgICAgIHN0eWxlSW5mby5pbWFnZSA9IGRvbS5pc0ltZyh0YXJnZXQpICYmIHRhcmdldDsKICAgICAgc3R5bGVJbmZvLmFuY2hvciA9IHJuZy5pc09uQW5jaG9yKCkgJiYgZG9tLmFuY2VzdG9yKHJuZy5zYywgZG9tLmlzQW5jaG9yKTsKICAgICAgc3R5bGVJbmZvLmFuY2VzdG9ycyA9IGRvbS5saXN0QW5jZXN0b3Iocm5nLnNjLCBkb20uaXNFZGl0YWJsZSk7CiAgICAgIHN0eWxlSW5mby5yYW5nZSA9IHJuZzsKCiAgICAgIHJldHVybiBzdHlsZUluZm87CiAgICB9OwogIH07CgoKICB2YXIgVHlwaW5nID0gZnVuY3Rpb24gKCkgewoKICAgIC8qKgogICAgICogQHBhcmFtIHtqUXVlcnl9ICRlZGl0YWJsZSAKICAgICAqIEBwYXJhbSB7V3JhcHBlZFJhbmdlfSBybmcKICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0YWJzaXplCiAgICAgKi8KICAgIHRoaXMuaW5zZXJ0VGFiID0gZnVuY3Rpb24gKCRlZGl0YWJsZSwgcm5nLCB0YWJzaXplKSB7CiAgICAgIHZhciB0YWIgPSBkb20uY3JlYXRlVGV4dChuZXcgQXJyYXkodGFic2l6ZSArIDEpLmpvaW4oZG9tLk5CU1BfQ0hBUikpOwogICAgICBybmcgPSBybmcuZGVsZXRlQ29udGVudHMoKTsKICAgICAgcm5nLmluc2VydE5vZGUodGFiLCB0cnVlKTsKCiAgICAgIHJuZyA9IHJhbmdlLmNyZWF0ZSh0YWIsIHRhYnNpemUpOwogICAgICBybmcuc2VsZWN0KCk7CiAgICB9OwoKICAgIC8qKgogICAgICogaW5zZXJ0IHBhcmFncmFwaAogICAgICovCiAgICB0aGlzLmluc2VydFBhcmFncmFwaCA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHJuZyA9IHJhbmdlLmNyZWF0ZSgpOwoKICAgICAgLy8gZGVsZXRlQ29udGVudHMgb24gcmFuZ2UuCiAgICAgIHJuZyA9IHJuZy5kZWxldGVDb250ZW50cygpOwoKICAgICAgLy8gV3JhcCByYW5nZSBpZiBpdCBuZWVkcyB0byBiZSB3cmFwcGVkIGJ5IHBhcmFncmFwaAogICAgICBybmcgPSBybmcud3JhcEJvZHlJbmxpbmVXaXRoUGFyYSgpOwoKICAgICAgLy8gZmluZGluZyBwYXJhZ3JhcGgKICAgICAgdmFyIHNwbGl0Um9vdCA9IGRvbS5hbmNlc3Rvcihybmcuc2MsIGRvbS5pc1BhcmEpOwoKICAgICAgdmFyIG5leHRQYXJhOwogICAgICAvLyBvbiBwYXJhZ3JhcGg6IHNwbGl0IHBhcmFncmFwaAogICAgICBpZiAoc3BsaXRSb290KSB7CiAgICAgICAgbmV4dFBhcmEgPSBkb20uc3BsaXRUcmVlKHNwbGl0Um9vdCwgcm5nLmdldFN0YXJ0UG9pbnQoKSk7CgogICAgICAgIHZhciBlbXB0eUFuY2hvcnMgPSBkb20ubGlzdERlc2NlbmRhbnQoc3BsaXRSb290LCBkb20uaXNFbXB0eUFuY2hvcik7CiAgICAgICAgZW1wdHlBbmNob3JzID0gZW1wdHlBbmNob3JzLmNvbmNhdChkb20ubGlzdERlc2NlbmRhbnQobmV4dFBhcmEsIGRvbS5pc0VtcHR5QW5jaG9yKSk7CgogICAgICAgICQuZWFjaChlbXB0eUFuY2hvcnMsIGZ1bmN0aW9uIChpZHgsIGFuY2hvcikgewogICAgICAgICAgZG9tLnJlbW92ZShhbmNob3IpOwogICAgICAgIH0pOwogICAgICAvLyBubyBwYXJhZ3JhcGg6IGluc2VydCBlbXB0eSBwYXJhZ3JhcGgKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgbmV4dCA9IHJuZy5zYy5jaGlsZE5vZGVzW3JuZy5zb107CiAgICAgICAgbmV4dFBhcmEgPSAkKGRvbS5lbXB0eVBhcmEpWzBdOwogICAgICAgIGlmIChuZXh0KSB7CiAgICAgICAgICBybmcuc2MuaW5zZXJ0QmVmb3JlKG5leHRQYXJhLCBuZXh0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcm5nLnNjLmFwcGVuZENoaWxkKG5leHRQYXJhKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJhbmdlLmNyZWF0ZShuZXh0UGFyYSwgMCkubm9ybWFsaXplKCkuc2VsZWN0KCk7CiAgICB9OwoKICB9OwoKICAvKioKICAgKiBUYWJsZQogICAqIEBjbGFzcwogICAqLwogIHZhciBUYWJsZSA9IGZ1bmN0aW9uICgpIHsKICAgIC8qKgogICAgICogaGFuZGxlIHRhYiBrZXkKICAgICAqCiAgICAgKiBAcGFyYW0ge1dyYXBwZWRSYW5nZX0gcm5nCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzU2hpZnQKICAgICAqLwogICAgdGhpcy50YWIgPSBmdW5jdGlvbiAocm5nLCBpc1NoaWZ0KSB7CiAgICAgIHZhciBjZWxsID0gZG9tLmFuY2VzdG9yKHJuZy5jb21tb25BbmNlc3RvcigpLCBkb20uaXNDZWxsKTsKICAgICAgdmFyIHRhYmxlID0gZG9tLmFuY2VzdG9yKGNlbGwsIGRvbS5pc1RhYmxlKTsKICAgICAgdmFyIGNlbGxzID0gZG9tLmxpc3REZXNjZW5kYW50KHRhYmxlLCBkb20uaXNDZWxsKTsKCiAgICAgIHZhciBuZXh0Q2VsbCA9IGxpc3RbaXNTaGlmdCA\/ICdwcmV2JyA6ICduZXh0J10oY2VsbHMsIGNlbGwpOwogICAgICBpZiAobmV4dENlbGwpIHsKICAgICAgICByYW5nZS5jcmVhdGUobmV4dENlbGwsIDApLnNlbGVjdCgpOwogICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogY3JlYXRlIGVtcHR5IHRhYmxlIGVsZW1lbnQKICAgICAqCiAgICAgKiBAcGFyYW0ge051bWJlcn0gcm93Q291bnQKICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb2xDb3VudAogICAgICogQHJldHVybiB7Tm9kZX0KICAgICAqLwogICAgdGhpcy5jcmVhdGVUYWJsZSA9IGZ1bmN0aW9uIChjb2xDb3VudCwgcm93Q291bnQpIHsKICAgICAgdmFyIHRkcyA9IFtdLCB0ZEhUTUw7CiAgICAgIGZvciAodmFyIGlkeENvbCA9IDA7IGlkeENvbCA8IGNvbENvdW50OyBpZHhDb2wrKykgewogICAgICAgIHRkcy5wdXNoKCc8dGQ+JyArIGRvbS5ibGFuayArICc8L3RkPicpOwogICAgICB9CiAgICAgIHRkSFRNTCA9IHRkcy5qb2luKCcnKTsKCiAgICAgIHZhciB0cnMgPSBbXSwgdHJIVE1MOwogICAgICBmb3IgKHZhciBpZHhSb3cgPSAwOyBpZHhSb3cgPCByb3dDb3VudDsgaWR4Um93KyspIHsKICAgICAgICB0cnMucHVzaCgnPHRyPicgKyB0ZEhUTUwgKyAnPC90cj4nKTsKICAgICAgfQogICAgICB0ckhUTUwgPSB0cnMuam9pbignJyk7CiAgICAgIHJldHVybiAkKCc8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWJvcmRlcmVkIj4nICsgdHJIVE1MICsgJzwvdGFibGU+JylbMF07CiAgICB9OwogIH07CgoKICB2YXIgQnVsbGV0ID0gZnVuY3Rpb24gKCkgewogICAgLyoqCiAgICAgKiB0b2dnbGUgb3JkZXJlZCBsaXN0CiAgICAgKiBAdHlwZSBjb21tYW5kCiAgICAgKi8KICAgIHRoaXMuaW5zZXJ0T3JkZXJlZExpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHRoaXMudG9nZ2xlTGlzdCgnT0wnKTsKICAgIH07CgogICAgLyoqCiAgICAgKiB0b2dnbGUgdW5vcmRlcmVkIGxpc3QKICAgICAqIEB0eXBlIGNvbW1hbmQKICAgICAqLwogICAgdGhpcy5pbnNlcnRVbm9yZGVyZWRMaXN0ID0gZnVuY3Rpb24gKCkgewogICAgICB0aGlzLnRvZ2dsZUxpc3QoJ1VMJyk7CiAgICB9OwoKICAgIC8qKgogICAgICogaW5kZW50CiAgICAgKiBAdHlwZSBjb21tYW5kCiAgICAgKi8KICAgIHRoaXMuaW5kZW50ID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBybmcgPSByYW5nZS5jcmVhdGUoKS53cmFwQm9keUlubGluZVdpdGhQYXJhKCk7CgogICAgICB2YXIgcGFyYXMgPSBybmcubm9kZXMoZG9tLmlzUGFyYSwgeyBpbmNsdWRlQW5jZXN0b3I6IHRydWUgfSk7CiAgICAgIHZhciBjbHVzdGVyZWRzID0gbGlzdC5jbHVzdGVyQnkocGFyYXMsIGZ1bmMucGVxMigncGFyZW50Tm9kZScpKTsKCiAgICAgICQuZWFjaChjbHVzdGVyZWRzLCBmdW5jdGlvbiAoaWR4LCBwYXJhcykgewogICAgICAgIHZhciBoZWFkID0gbGlzdC5oZWFkKHBhcmFzKTsKICAgICAgICBpZiAoZG9tLmlzTGkoaGVhZCkpIHsKICAgICAgICAgIHNlbGYud3JhcExpc3QocGFyYXMsIGhlYWQucGFyZW50Tm9kZS5ub2RlTmFtZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICQuZWFjaChwYXJhcywgZnVuY3Rpb24gKGlkeCwgcGFyYSkgewogICAgICAgICAgICAkKHBhcmEpLmNzcygnbWFyZ2luTGVmdCcsIGZ1bmN0aW9uIChpZHgsIHZhbCkgewogICAgICAgICAgICAgIHJldHVybiAocGFyc2VJbnQodmFsLCAxMCkgfHwgMCkgKyAyNTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgcm5nLnNlbGVjdCgpOwogICAgfTsKCiAgICAvKioKICAgICAqIG91dGRlbnQKICAgICAqIEB0eXBlIGNvbW1hbmQKICAgICAqLwogICAgdGhpcy5vdXRkZW50ID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBybmcgPSByYW5nZS5jcmVhdGUoKS53cmFwQm9keUlubGluZVdpdGhQYXJhKCk7CgogICAgICB2YXIgcGFyYXMgPSBybmcubm9kZXMoZG9tLmlzUGFyYSwgeyBpbmNsdWRlQW5jZXN0b3I6IHRydWUgfSk7CiAgICAgIHZhciBjbHVzdGVyZWRzID0gbGlzdC5jbHVzdGVyQnkocGFyYXMsIGZ1bmMucGVxMigncGFyZW50Tm9kZScpKTsKCiAgICAgICQuZWFjaChjbHVzdGVyZWRzLCBmdW5jdGlvbiAoaWR4LCBwYXJhcykgewogICAgICAgIHZhciBoZWFkID0gbGlzdC5oZWFkKHBhcmFzKTsKICAgICAgICBpZiAoZG9tLmlzTGkoaGVhZCkpIHsKICAgICAgICAgIHNlbGYucmVsZWFzZUxpc3QoW3BhcmFzXSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICQuZWFjaChwYXJhcywgZnVuY3Rpb24gKGlkeCwgcGFyYSkgewogICAgICAgICAgICAkKHBhcmEpLmNzcygnbWFyZ2luTGVmdCcsIGZ1bmN0aW9uIChpZHgsIHZhbCkgewogICAgICAgICAgICAgIHZhbCA9IChwYXJzZUludCh2YWwsIDEwKSB8fCAwKTsKICAgICAgICAgICAgICByZXR1cm4gdmFsID4gMjUgPyB2YWwgLSAyNSA6ICcnOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICBybmcuc2VsZWN0KCk7CiAgICB9OwoKICAgIC8qKgogICAgICogdG9nZ2xlIGxpc3QKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsaXN0TmFtZSAtIE9MIG9yIFVMCiAgICAgKi8KICAgIHRoaXMudG9nZ2xlTGlzdCA9IGZ1bmN0aW9uIChsaXN0TmFtZSkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBybmcgPSByYW5nZS5jcmVhdGUoKS53cmFwQm9keUlubGluZVdpdGhQYXJhKCk7CgogICAgICB2YXIgcGFyYXMgPSBybmcubm9kZXMoZG9tLmlzUGFyYSwgeyBpbmNsdWRlQW5jZXN0b3I6IHRydWUgfSk7CiAgICAgIHZhciBjbHVzdGVyZWRzID0gbGlzdC5jbHVzdGVyQnkocGFyYXMsIGZ1bmMucGVxMigncGFyZW50Tm9kZScpKTsKCiAgICAgIC8vIHBhcmFncmFwaCB0byBsaXN0CiAgICAgIGlmIChsaXN0LmZpbmQocGFyYXMsIGRvbS5pc1B1cmVQYXJhKSkgewogICAgICAgICQuZWFjaChjbHVzdGVyZWRzLCBmdW5jdGlvbiAoaWR4LCBwYXJhcykgewogICAgICAgICAgc2VsZi53cmFwTGlzdChwYXJhcywgbGlzdE5hbWUpOwogICAgICAgIH0pOwogICAgICAvLyBsaXN0IHRvIHBhcmFncmFwaCBvciBjaGFuZ2UgbGlzdCBzdHlsZQogICAgICB9IGVsc2UgewogICAgICAgIHZhciBkaWZmTGlzdHMgPSBybmcubm9kZXMoZG9tLmlzTGlzdCwgewogICAgICAgICAgaW5jbHVkZUFuY2VzdG9yOiB0cnVlCiAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChsaXN0Tm9kZSkgewogICAgICAgICAgcmV0dXJuICEkLm5vZGVOYW1lKGxpc3ROb2RlLCBsaXN0TmFtZSk7CiAgICAgICAgfSk7CgogICAgICAgIGlmIChkaWZmTGlzdHMubGVuZ3RoKSB7CiAgICAgICAgICAkLmVhY2goZGlmZkxpc3RzLCBmdW5jdGlvbiAoaWR4LCBsaXN0Tm9kZSkgewogICAgICAgICAgICBkb20ucmVwbGFjZShsaXN0Tm9kZSwgbGlzdE5hbWUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMucmVsZWFzZUxpc3QoY2x1c3RlcmVkcywgdHJ1ZSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBybmcuc2VsZWN0KCk7CiAgICB9OwoKICAgIC8qKgogICAgICogQHBhcmFtIHtOb2RlW119IHBhcmFzCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbGlzdE5hbWUKICAgICAqLwogICAgdGhpcy53cmFwTGlzdCA9IGZ1bmN0aW9uIChwYXJhcywgbGlzdE5hbWUpIHsKICAgICAgdmFyIGhlYWQgPSBsaXN0LmhlYWQocGFyYXMpOwogICAgICB2YXIgbGFzdCA9IGxpc3QubGFzdChwYXJhcyk7CgogICAgICB2YXIgcHJldkxpc3QgPSBkb20uaXNMaXN0KGhlYWQucHJldmlvdXNTaWJsaW5nKSAmJiBoZWFkLnByZXZpb3VzU2libGluZzsKICAgICAgdmFyIG5leHRMaXN0ID0gZG9tLmlzTGlzdChsYXN0Lm5leHRTaWJsaW5nKSAmJiBsYXN0Lm5leHRTaWJsaW5nOwoKICAgICAgdmFyIGxpc3ROb2RlID0gcHJldkxpc3QgfHwgZG9tLmluc2VydEFmdGVyKGRvbS5jcmVhdGUobGlzdE5hbWUgfHwgJ1VMJyksIGxhc3QpOwoKICAgICAgLy8gUCB0byBMSQogICAgICBwYXJhcyA9ICQubWFwKHBhcmFzLCBmdW5jdGlvbiAocGFyYSkgewogICAgICAgIHJldHVybiBkb20uaXNQdXJlUGFyYShwYXJhKSA\\/ICc8JyArIHRhZ05hbWUgKyAnPicgOiB0YWdOYW1lOwogICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnRm9ybWF0QmxvY2snLCBmYWxzZSwgdGFnTmFtZSk7CiAgICAgIGFmdGVyQ29tbWFuZCgkZWRpdGFibGUpOwogICAgfTsKCiAgICB0aGlzLmZvcm1hdFBhcmEgPSBmdW5jdGlvbiAoJGVkaXRhYmxlKSB7CiAgICAgIHRoaXMuZm9ybWF0QmxvY2soJGVkaXRhYmxlLCAnUCcpOwogICAgICBhZnRlckNvbW1hbmQoJGVkaXRhYmxlKTsKICAgIH07CgogICAgLyoganNoaW50IGlnbm9yZTpzdGFydCAqLwogICAgZm9yICh2YXIgaWR4ID0gMTsgaWR4IDw9IDY7IGlkeCArKykgewogICAgICB0aGlzWydmb3JtYXRIJyArIGlkeF0gPSBmdW5jdGlvbiAoaWR4KSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgkZWRpdGFibGUpIHsKICAgICAgICAgIHRoaXMuZm9ybWF0QmxvY2soJGVkaXRhYmxlLCAnSCcgKyBpZHgpOwogICAgICAgIH07CiAgICAgIH0oaWR4KTsKICAgIH07CiAgICAvKiBqc2hpbnQgaWdub3JlOmVuZCAqLwoKICAgIC8qKgogICAgICogZm9udHNpemUKICAgICAqIEZJWE1FOiBTdGlsbCBidWdneQogICAgICoKICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWRpdGFibGUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSAtIHB4CiAgICAgKi8KICAgIHRoaXMuZm9udFNpemUgPSBmdW5jdGlvbiAoJGVkaXRhYmxlLCB2YWx1ZSkgewogICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnZm9udFNpemUnLCBmYWxzZSwgMyk7CiAgICAgIGlmIChhZ2VudC5pc0ZGKSB7CiAgICAgICAgLy8gZmlyZWZveDogPGZvbnQgc2l6ZT0iMyI+IHRvIDxzcGFuIHN0eWxlPSdmb250LXNpemU9e3ZhbHVlfXB4Oyc+LCBidWdneQogICAgICAgICRlZGl0YWJsZS5maW5kKCdmb250W3NpemU9M10nKS5yZW1vdmVBdHRyKCdzaXplJykuY3NzKCdmb250LXNpemUnLCB2YWx1ZSArICdweCcpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIGNocm9tZTogPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogbWVkaXVtIj4gdG8gPHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZT17dmFsdWV9cHg7Jz4KICAgICAgICAkZWRpdGFibGUuZmluZCgnc3BhbicpLmZpbHRlcihmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5mb250U2l6ZSA9PT0gJ21lZGl1bSc7CiAgICAgICAgfSkuY3NzKCdmb250LXNpemUnLCB2YWx1ZSArICdweCcpOwogICAgICB9CgogICAgICBhZnRlckNvbW1hbmQoJGVkaXRhYmxlKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBsaW5lSGVpZ2h0CiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVkaXRhYmxlCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUKICAgICAqLwogICAgdGhpcy5saW5lSGVpZ2h0ID0gZnVuY3Rpb24gKCRlZGl0YWJsZSwgdmFsdWUpIHsKICAgICAgc3R5bGUuc3R5bGVQYXJhKHJhbmdlLmNyZWF0ZSgpLCB7CiAgICAgICAgbGluZUhlaWdodDogdmFsdWUKICAgICAgfSk7CiAgICAgIGFmdGVyQ29tbWFuZCgkZWRpdGFibGUpOwogICAgfTsKCiAgICAvKioKICAgICAqIHVubGluawogICAgICoKICAgICAqIEB0eXBlIGNvbW1hbmQKICAgICAqCiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVkaXRhYmxlCiAgICAgKi8KICAgIHRoaXMudW5saW5rID0gZnVuY3Rpb24gKCRlZGl0YWJsZSkgewogICAgICB2YXIgcm5nID0gcmFuZ2UuY3JlYXRlKCk7CiAgICAgIGlmIChybmcuaXNPbkFuY2hvcigpKSB7CiAgICAgICAgdmFyIGFuY2hvciA9IGRvbS5hbmNlc3Rvcihybmcuc2MsIGRvbS5pc0FuY2hvcik7CiAgICAgICAgcm5nID0gcmFuZ2UuY3JlYXRlRnJvbU5vZGUoYW5jaG9yKTsKICAgICAgICBybmcuc2VsZWN0KCk7CiAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ3VubGluaycpOwoKICAgICAgICBhZnRlckNvbW1hbmQoJGVkaXRhYmxlKTsKICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIGNyZWF0ZSBsaW5rCiAgICAgKgogICAgICogQHR5cGUgY29tbWFuZAogICAgICoKICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWRpdGFibGUKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsaW5rSW5mbwogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKICAgICAqLwogICAgdGhpcy5jcmVhdGVMaW5rID0gZnVuY3Rpb24gKCRlZGl0YWJsZSwgbGlua0luZm8sIG9wdGlvbnMpIHsKICAgICAgdmFyIGxpbmtVcmwgPSBsaW5rSW5mby51cmw7CiAgICAgIHZhciBsaW5rVGV4dCA9IGxpbmtJbmZvLnRleHQ7CiAgICAgIHZhciBpc05ld1dpbmRvdyA9IGxpbmtJbmZvLm5ld1dpbmRvdzsKICAgICAgdmFyIHJuZyA9IGxpbmtJbmZvLnJhbmdlOwoKICAgICAgaWYgKG9wdGlvbnMub25DcmVhdGVMaW5rKSB7CiAgICAgICAgbGlua1VybCA9IG9wdGlvbnMub25DcmVhdGVMaW5rKGxpbmtVcmwpOwogICAgICB9CgogICAgICBybmcgPSBybmcuZGVsZXRlQ29udGVudHMoKTsKCiAgICAgIC8vIENyZWF0ZSBhIG5ldyBsaW5rIHdoZW4gdGhlcmUgaXMgbm8gYW5jaG9yIG9uIHJhbmdlLgogICAgICB2YXIgYW5jaG9yID0gcm5nLmluc2VydE5vZGUoJCgnPEE+JyArIGxpbmtUZXh0ICsgJzwvQT4nKVswXSwgdHJ1ZSk7CiAgICAgICQoYW5jaG9yKS5hdHRyKHsKICAgICAgICBocmVmOiBsaW5rVXJsLAogICAgICAgIHRhcmdldDogaXNOZXdXaW5kb3cgPyAnX2JsYW5rJyA6ICcnCiAgICAgIH0pOwoKICAgICAgcmFuZ2UuY3JlYXRlRnJvbU5vZGUoYW5jaG9yKS5zZWxlY3QoKTsKICAgICAgYWZ0ZXJDb21tYW5kKCRlZGl0YWJsZSk7CiAgICB9OwoKICAgIC8qKgogICAgICogcmV0dXJucyBsaW5rIGluZm8KICAgICAqCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9CiAgICAgKi8KICAgIHRoaXMuZ2V0TGlua0luZm8gPSBmdW5jdGlvbiAoJGVkaXRhYmxlKSB7CiAgICAgICRlZGl0YWJsZS5mb2N1cygpOwoKICAgICAgdmFyIHJuZyA9IHJhbmdlLmNyZWF0ZSgpLmV4cGFuZChkb20uaXNBbmNob3IpOwoKICAgICAgLy8gR2V0IHRoZSBmaXJzdCBhbmNob3Igb24gcmFuZ2UoZm9yIGVkaXQpLgogICAgICB2YXIgJGFuY2hvciA9ICQobGlzdC5oZWFkKHJuZy5ub2Rlcyhkb20uaXNBbmNob3IpKSk7CgogICAgICByZXR1cm4gewogICAgICAgIHJhbmdlOiBybmcsCiAgICAgICAgdGV4dDogcm5nLnRvU3RyaW5nKCksCiAgICAgICAgaXNOZXdXaW5kb3c6ICRhbmNob3IubGVuZ3RoID8gJGFuY2hvci5hdHRyKCd0YXJnZXQnKSA9PT0gJ19ibGFuaycgOiB0cnVlLAogICAgICAgIHVybDogJGFuY2hvci5sZW5ndGggPyAkYW5jaG9yLmF0dHIoJ2hyZWYnKSA6ICcnCiAgICAgIH07CiAgICB9OwoKICAgIHRoaXMuY29sb3IgPSBmdW5jdGlvbiAoJGVkaXRhYmxlLCBzT2JqQ29sb3IpIHsKICAgICAgdmFyIG9Db2xvciA9IEpTT04ucGFyc2Uoc09iakNvbG9yKTsKICAgICAgdmFyIGZvcmVDb2xvciA9IG9Db2xvci5mb3JlQ29sb3IsIGJhY2tDb2xvciA9IG9Db2xvci5iYWNrQ29sb3I7CgogICAgICBpZiAoZm9yZUNvbG9yKSB7IGRvY3VtZW50LmV4ZWNDb21tYW5kKCdmb3JlQ29sb3InLCBmYWxzZSwgZm9yZUNvbG9yKTsgfQogICAgICBpZiAoYmFja0NvbG9yKSB7IGRvY3VtZW50LmV4ZWNDb21tYW5kKCdiYWNrQ29sb3InLCBmYWxzZSwgYmFja0NvbG9yKTsgfQoKICAgICAgYWZ0ZXJDb21tYW5kKCRlZGl0YWJsZSk7CiAgICB9OwoKICAgIHRoaXMuaW5zZXJ0VGFibGUgPSBmdW5jdGlvbiAoJGVkaXRhYmxlLCBzRGltKSB7CiAgICAgIHZhciBkaW1lbnNpb24gPSBzRGltLnNwbGl0KCd4Jyk7CiAgICAgIHZhciBybmcgPSByYW5nZS5jcmVhdGUoKTsKICAgICAgcm5nID0gcm5nLmRlbGV0ZUNvbnRlbnRzKCk7CiAgICAgIHJuZy5pbnNlcnROb2RlKHRhYmxlLmNyZWF0ZVRhYmxlKGRpbWVuc2lvblswXSwgZGltZW5zaW9uWzFdKSk7CiAgICAgIGFmdGVyQ29tbWFuZCgkZWRpdGFibGUpOwogICAgfTsKCiAgICAvKioKICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWRpdGFibGUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZQogICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQKICAgICAqLwogICAgdGhpcy5mbG9hdE1lID0gZnVuY3Rpb24gKCRlZGl0YWJsZSwgdmFsdWUsICR0YXJnZXQpIHsKICAgICAgJHRhcmdldC5jc3MoJ2Zsb2F0JywgdmFsdWUpOwogICAgICBhZnRlckNvbW1hbmQoJGVkaXRhYmxlKTsKICAgIH07CgogICAgdGhpcy5pbWFnZVNoYXBlID0gZnVuY3Rpb24gKCRlZGl0YWJsZSwgdmFsdWUsICR0YXJnZXQpIHsKICAgICAgJHRhcmdldC5yZW1vdmVDbGFzcygnaW1nLXJvdW5kZWQgaW1nLWNpcmNsZSBpbWctdGh1bWJuYWlsJyk7CgogICAgICBpZiAodmFsdWUpIHsKICAgICAgICAkdGFyZ2V0LmFkZENsYXNzKHZhbHVlKTsKICAgICAgfQoKICAgICAgYWZ0ZXJDb21tYW5kKCRlZGl0YWJsZSk7CiAgICB9OwoKICAgIC8qKgogICAgICogcmVzaXplIG92ZXJsYXkgZWxlbWVudAogICAgICogQHBhcmFtIHtqUXVlcnl9ICRlZGl0YWJsZQogICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlCiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIHRhcmdldCBlbGVtZW50CiAgICAgKi8KICAgIHRoaXMucmVzaXplID0gZnVuY3Rpb24gKCRlZGl0YWJsZSwgdmFsdWUsICR0YXJnZXQpIHsKICAgICAgJHRhcmdldC5jc3MoewogICAgICAgIHdpZHRoOiB2YWx1ZSAqIDEwMCArICclJywKICAgICAgICBoZWlnaHQ6ICcnCiAgICAgIH0pOwoKICAgICAgYWZ0ZXJDb21tYW5kKCRlZGl0YWJsZSk7CiAgICB9OwoKICAgIC8qKgogICAgICogQHBhcmFtIHtQb3NpdGlvbn0gcG9zCiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIHRhcmdldCBlbGVtZW50CiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtiS2VlcFJhdGlvXSAtIGtlZXAgcmF0aW8KICAgICAqLwogICAgdGhpcy5yZXNpemVUbyA9IGZ1bmN0aW9uIChwb3MsICR0YXJnZXQsIGJLZWVwUmF0aW8pIHsKICAgICAgdmFyIGltYWdlU2l6ZTsKICAgICAgaWYgKGJLZWVwUmF0aW8pIHsKICAgICAgICB2YXIgbmV3UmF0aW8gPSBwb3MueSAvIHBvcy54OwogICAgICAgIHZhciByYXRpbyA9ICR0YXJnZXQuZGF0YSgncmF0aW8nKTsKICAgICAgICBpbWFnZVNpemUgPSB7CiAgICAgICAgICB3aWR0aDogcmF0aW8gPiBuZXdSYXRpbyA\/IHBvcy54IDogcG9zLnkgLyByYXRpbywKICAgICAgICAgIGhlaWdodDogcmF0aW8gPiBuZXdSYXRpbyA\/IHBvcy54ICogcmF0aW8gOiBwb3MueQogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaW1hZ2VTaXplID0gewogICAgICAgICAgd2lkdGg6IHBvcy54LAogICAgICAgICAgaGVpZ2h0OiBwb3MueQogICAgICAgIH07CiAgICAgIH0KCiAgICAgICR0YXJnZXQuY3NzKGltYWdlU2l6ZSk7CiAgICB9OwoKICAgIC8qKgogICAgICogcmVtb3ZlIG1lZGlhIG9iamVjdAogICAgICoKICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWRpdGFibGUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSAtIGR1bW15IGFyZ3VtZW50IChmb3Iga2VlcCBpbnRlcmZhY2UpCiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIHRhcmdldCBlbGVtZW50CiAgICAgKi8KICAgIHRoaXMucmVtb3ZlTWVkaWEgPSBmdW5jdGlvbiAoJGVkaXRhYmxlLCB2YWx1ZSwgJHRhcmdldCkgewogICAgICAkdGFyZ2V0LmRldGFjaCgpOwoKICAgICAgYWZ0ZXJDb21tYW5kKCRlZGl0YWJsZSk7CiAgICB9OwogIH07CgogIC8qKgogICAqIEhpc3RvcnkKICAgKiBAY2xhc3MKICAgKi8KICB2YXIgSGlzdG9yeSA9IGZ1bmN0aW9uICgkZWRpdGFibGUpIHsKICAgIHZhciBzdGFjayA9IFtdLCBzdGFja09mZnNldCA9IC0xOwogICAgdmFyIGVkaXRhYmxlID0gJGVkaXRhYmxlWzBdOwoKICAgIHZhciBtYWtlU25hcHNob3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBybmcgPSByYW5nZS5jcmVhdGUoKTsKICAgICAgdmFyIGVtcHR5Qm9va21hcmsgPSB7czoge3BhdGg6IFswXSwgb2Zmc2V0OiAwfSwgZToge3BhdGg6IFswXSwgb2Zmc2V0OiAwfX07CgogICAgICByZXR1cm4gewogICAgICAgIGNvbnRlbnRzOiAkZWRpdGFibGUuaHRtbCgpLAogICAgICAgIGJvb2ttYXJrOiAocm5nID8gcm5nLmJvb2ttYXJrKGVkaXRhYmxlKSA6IGVtcHR5Qm9va21hcmspCiAgICAgIH07CiAgICB9OwoKICAgIHZhciBhcHBseVNuYXBzaG90ID0gZnVuY3Rpb24gKHNuYXBzaG90KSB7CiAgICAgIGlmIChzbmFwc2hvdC5jb250ZW50cyAhPT0gbnVsbCkgewogICAgICAgICRlZGl0YWJsZS5odG1sKHNuYXBzaG90LmNvbnRlbnRzKTsKICAgICAgfQogICAgICBpZiAoc25hcHNob3QuYm9va21hcmsgIT09IG51bGwpIHsKICAgICAgICByYW5nZS5jcmVhdGVGcm9tQm9va21hcmsoZWRpdGFibGUsIHNuYXBzaG90LmJvb2ttYXJrKS5zZWxlY3QoKTsKICAgICAgfQogICAgfTsKCiAgICB0aGlzLnVuZG8gPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICgwIDwgc3RhY2tPZmZzZXQpIHsKICAgICAgICBzdGFja09mZnNldC0tOwogICAgICAgIGFwcGx5U25hcHNob3Qoc3RhY2tbc3RhY2tPZmZzZXRdKTsKICAgICAgfQogICAgfTsKCiAgICB0aGlzLnJlZG8gPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChzdGFjay5sZW5ndGggLSAxID4gc3RhY2tPZmZzZXQpIHsKICAgICAgICBzdGFja09mZnNldCsrOwogICAgICAgIGFwcGx5U25hcHNob3Qoc3RhY2tbc3RhY2tPZmZzZXRdKTsKICAgICAgfQogICAgfTsKCiAgICB0aGlzLnJlY29yZFVuZG8gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHN0YWNrT2Zmc2V0Kys7CgogICAgICAvLyBXYXNoIG91dCBzdGFjayBhZnRlciBzdGFja09mZnNldAogICAgICBpZiAoc3RhY2subGVuZ3RoID4gc3RhY2tPZmZzZXQpIHsKICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsIHN0YWNrT2Zmc2V0KTsKICAgICAgfQoKICAgICAgLy8gQ3JlYXRlIG5ldyBzbmFwc2hvdCBhbmQgcHVzaCBpdCB0byB0aGUgZW5kCiAgICAgIHN0YWNrLnB1c2gobWFrZVNuYXBzaG90KCkpOwogICAgfTsKCiAgICAvLyBDcmVhdGUgZmlyc3QgdW5kbyBzdGFjawogICAgdGhpcy5yZWNvcmRVbmRvKCk7CiAgfTsKCiAgLyoqCiAgICogQnV0dG9uCiAgICovCiAgdmFyIEJ1dHRvbiA9IGZ1bmN0aW9uICgpIHsKICAgIC8qKgogICAgICogdXBkYXRlIGJ1dHRvbiBzdGF0dXMKICAgICAqCiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGNvbnRhaW5lcgogICAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlSW5mbwogICAgICovCiAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICgkY29udGFpbmVyLCBzdHlsZUluZm8pIHsKICAgICAgLyoqCiAgICAgICAqIGhhbmRsZSBkcm9wZG93bidzIGNoZWNrIG1hcmsgKGZvciBmb250bmFtZSwgZm9udHNpemUsIGxpbmVIZWlnaHQpLgogICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGJ0bgogICAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUKICAgICAgICovCiAgICAgIHZhciBjaGVja0Ryb3Bkb3duTWVudSA9IGZ1bmN0aW9uICgkYnRuLCB2YWx1ZSkgewogICAgICAgICRidG4uZmluZCgnLmRyb3Bkb3duLW1lbnUgbGkgYScpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gYWx3YXlzIGNvbXBhcmUgc3RyaW5nIHRvIGF2b2lkIGNyZWF0aW5nIGFub3RoZXIgZnVuYy4KICAgICAgICAgIHZhciBpc0NoZWNrZWQgPSAoJCh0aGlzKS5kYXRhKCd2YWx1ZScpICsgJycpID09PSAodmFsdWUgKyAnJyk7CiAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IGlzQ2hlY2tlZCA\/ICdjaGVja2VkJyA6ICcnOwogICAgICAgIH0pOwogICAgICB9OwoKICAgICAgLyoqCiAgICAgICAqIHVwZGF0ZSBidXR0b24gc3RhdGUoYWN0aXZlIG9yIG5vdCkuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvcgogICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkCiAgICAgICAqLwogICAgICB2YXIgYnRuU3RhdGUgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHByZWQpIHsKICAgICAgICB2YXIgJGJ0biA9ICRjb250YWluZXIuZmluZChzZWxlY3Rvcik7CiAgICAgICAgJGJ0bi50b2dnbGVDbGFzcygnYWN0aXZlJywgcHJlZCgpKTsKICAgICAgfTsKCiAgICAgIC8vIGZvbnRuYW1lCiAgICAgIHZhciAkZm9udG5hbWUgPSAkY29udGFpbmVyLmZpbmQoJy5ub3RlLWZvbnRuYW1lJyk7CiAgICAgIGlmICgkZm9udG5hbWUubGVuZ3RoKSB7CiAgICAgICAgdmFyIHNlbGVjdGVkRm9udCA9IHN0eWxlSW5mb1snZm9udC1mYW1pbHknXTsKICAgICAgICBpZiAoISFzZWxlY3RlZEZvbnQpIHsKICAgICAgICAgIHNlbGVjdGVkRm9udCA9IGxpc3QuaGVhZChzZWxlY3RlZEZvbnQuc3BsaXQoJywnKSk7CiAgICAgICAgICBzZWxlY3RlZEZvbnQgPSBzZWxlY3RlZEZvbnQucmVwbGFjZSgvXCcvZywgJycpOwogICAgICAgICAgJGZvbnRuYW1lLmZpbmQoJy5ub3RlLWN1cnJlbnQtZm9udG5hbWUnKS50ZXh0KHNlbGVjdGVkRm9udCk7CiAgICAgICAgICBjaGVja0Ryb3Bkb3duTWVudSgkZm9udG5hbWUsIHNlbGVjdGVkRm9udCk7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBmb250c2l6ZQogICAgICB2YXIgJGZvbnRzaXplID0gJGNvbnRhaW5lci5maW5kKCcubm90ZS1mb250c2l6ZScpOwogICAgICAkZm9udHNpemUuZmluZCgnLm5vdGUtY3VycmVudC1mb250c2l6ZScpLnRleHQoc3R5bGVJbmZvWydmb250LXNpemUnXSk7CiAgICAgIGNoZWNrRHJvcGRvd25NZW51KCRmb250c2l6ZSwgcGFyc2VGbG9hdChzdHlsZUluZm9bJ2ZvbnQtc2l6ZSddKSk7CgogICAgICAvLyBsaW5laGVpZ2h0CiAgICAgIHZhciAkbGluZUhlaWdodCA9ICRjb250YWluZXIuZmluZCgnLm5vdGUtaGVpZ2h0Jyk7CiAgICAgIGNoZWNrRHJvcGRvd25NZW51KCRsaW5lSGVpZ2h0LCBwYXJzZUZsb2F0KHN0eWxlSW5mb1snbGluZS1oZWlnaHQnXSkpOwoKICAgICAgYnRuU3RhdGUoJ2J1dHRvbltkYXRhLWV2ZW50PSJib2xkIl0nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHN0eWxlSW5mb1snZm9udC1ib2xkJ10gPT09ICdib2xkJzsKICAgICAgfSk7CiAgICAgIGJ0blN0YXRlKCdidXR0b25bZGF0YS1ldmVudD0iaXRhbGljIl0nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHN0eWxlSW5mb1snZm9udC1pdGFsaWMnXSA9PT0gJ2l0YWxpYyc7CiAgICAgIH0pOwogICAgICBidG5TdGF0ZSgnYnV0dG9uW2RhdGEtZXZlbnQ9InVuZGVybGluZSJdJywgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBzdHlsZUluZm9bJ2ZvbnQtdW5kZXJsaW5lJ10gPT09ICd1bmRlcmxpbmUnOwogICAgICB9KTsKICAgICAgYnRuU3RhdGUoJ2J1dHRvbltkYXRhLWV2ZW50PSJzdHJpa2V0aHJvdWdoIl0nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHN0eWxlSW5mb1snZm9udC1zdHJpa2V0aHJvdWdoJ10gPT09ICdzdHJpa2V0aHJvdWdoJzsKICAgICAgfSk7CiAgICAgIGJ0blN0YXRlKCdidXR0b25bZGF0YS1ldmVudD0ic3VwZXJzY3JpcHQiXScsIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gc3R5bGVJbmZvWydmb250LXN1cGVyc2NyaXB0J10gPT09ICdzdXBlcnNjcmlwdCc7CiAgICAgIH0pOwogICAgICBidG5TdGF0ZSgnYnV0dG9uW2RhdGEtZXZlbnQ9InN1YnNjcmlwdCJdJywgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBzdHlsZUluZm9bJ2ZvbnQtc3Vic2NyaXB0J10gPT09ICdzdWJzY3JpcHQnOwogICAgICB9KTsKICAgICAgYnRuU3RhdGUoJ2J1dHRvbltkYXRhLWV2ZW50PSJqdXN0aWZ5TGVmdCJdJywgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBzdHlsZUluZm9bJ3RleHQtYWxpZ24nXSA9PT0gJ2xlZnQnIHx8IHN0eWxlSW5mb1sndGV4dC1hbGlnbiddID09PSAnc3RhcnQnOwogICAgICB9KTsKICAgICAgYnRuU3RhdGUoJ2J1dHRvbltkYXRhLWV2ZW50PSJqdXN0aWZ5Q2VudGVyIl0nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHN0eWxlSW5mb1sndGV4dC1hbGlnbiddID09PSAnY2VudGVyJzsKICAgICAgfSk7CiAgICAgIGJ0blN0YXRlKCdidXR0b25bZGF0YS1ldmVudD0ianVzdGlmeVJpZ2h0Il0nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHN0eWxlSW5mb1sndGV4dC1hbGlnbiddID09PSAncmlnaHQnOwogICAgICB9KTsKICAgICAgYnRuU3RhdGUoJ2J1dHRvbltkYXRhLWV2ZW50PSJqdXN0aWZ5RnVsbCJdJywgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBzdHlsZUluZm9bJ3RleHQtYWxpZ24nXSA9PT0gJ2p1c3RpZnknOwogICAgICB9KTsKICAgICAgYnRuU3RhdGUoJ2J1dHRvbltkYXRhLWV2ZW50PSJpbnNlcnRVbm9yZGVyZWRMaXN0Il0nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHN0eWxlSW5mb1snbGlzdC1zdHlsZSddID09PSAndW5vcmRlcmVkJzsKICAgICAgfSk7CiAgICAgIGJ0blN0YXRlKCdidXR0b25bZGF0YS1ldmVudD0iaW5zZXJ0T3JkZXJlZExpc3QiXScsIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gc3R5bGVJbmZvWydsaXN0LXN0eWxlJ10gPT09ICdvcmRlcmVkJzsKICAgICAgfSk7CiAgICB9OwoKICAgIC8qKgogICAgICogdXBkYXRlIHJlY2VudCBjb2xvcgogICAgICoKICAgICAqIEBwYXJhbSB7Tm9kZX0gYnV0dG9uCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lCiAgICAgKiBAcGFyYW0ge3ZhbHVlfSB2YWx1ZQogICAgICovCiAgICB0aGlzLnVwZGF0ZVJlY2VudENvbG9yID0gZnVuY3Rpb24gKGJ1dHRvbiwgZXZlbnROYW1lLCB2YWx1ZSkgewogICAgICB2YXIgJGNvbG9yID0gJChidXR0b24pLmNsb3Nlc3QoJy5ub3RlLWNvbG9yJyk7CiAgICAgIHZhciAkcmVjZW50Q29sb3IgPSAkY29sb3IuZmluZCgnLm5vdGUtcmVjZW50LWNvbG9yJyk7CiAgICAgIHZhciBjb2xvckluZm8gPSBKU09OLnBhcnNlKCRyZWNlbnRDb2xvci5hdHRyKCdkYXRhLXZhbHVlJykpOwogICAgICBjb2xvckluZm9bZXZlbnROYW1lXSA9IHZhbHVlOwogICAgICAkcmVjZW50Q29sb3IuYXR0cignZGF0YS12YWx1ZScsIEpTT04uc3RyaW5naWZ5KGNvbG9ySW5mbykpOwogICAgICB2YXIgc0tleSA9IGV2ZW50TmFtZSA9PT0gJ2JhY2tDb2xvcicgPyAnYmFja2dyb3VuZC1jb2xvcicgOiAnY29sb3InOwogICAgICAkcmVjZW50Q29sb3IuZmluZCgnaScpLmNzcyhzS2V5LCB2YWx1ZSk7CiAgICB9OwogIH07CgogIC8qKgogICAqIFRvb2xiYXIKICAgKi8KICB2YXIgVG9vbGJhciA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBidXR0b24gPSBuZXcgQnV0dG9uKCk7CgogICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoJHRvb2xiYXIsIHN0eWxlSW5mbykgewogICAgICBidXR0b24udXBkYXRlKCR0b29sYmFyLCBzdHlsZUluZm8pOwogICAgfTsKCiAgICAvKioKICAgICAqIEBwYXJhbSB7Tm9kZX0gYnV0dG9uCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUKICAgICAqLwogICAgdGhpcy51cGRhdGVSZWNlbnRDb2xvciA9IGZ1bmN0aW9uIChidXR0b25Ob2RlLCBldmVudE5hbWUsIHZhbHVlKSB7CiAgICAgIGJ1dHRvbi51cGRhdGVSZWNlbnRDb2xvcihidXR0b25Ob2RlLCBldmVudE5hbWUsIHZhbHVlKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBhY3RpdmF0ZSBidXR0b25zIGV4Y2x1ZGUgY29kZXZpZXcKICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdG9vbGJhcgogICAgICovCiAgICB0aGlzLmFjdGl2YXRlID0gZnVuY3Rpb24gKCR0b29sYmFyKSB7CiAgICAgICR0b29sYmFyLmZpbmQoJ2J1dHRvbicpCiAgICAgICAgICAgICAgLm5vdCgnYnV0dG9uW2RhdGEtZXZlbnQ9ImNvZGV2aWV3Il0nKQogICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBkZWFjdGl2YXRlIGJ1dHRvbnMgZXhjbHVkZSBjb2RldmlldwogICAgICogQHBhcmFtIHtqUXVlcnl9ICR0b29sYmFyCiAgICAgKi8KICAgIHRoaXMuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgkdG9vbGJhcikgewogICAgICAkdG9vbGJhci5maW5kKCdidXR0b24nKQogICAgICAgICAgICAgIC5ub3QoJ2J1dHRvbltkYXRhLWV2ZW50PSJjb2RldmlldyJdJykKICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7CiAgICB9OwoKICAgIHRoaXMudXBkYXRlRnVsbHNjcmVlbiA9IGZ1bmN0aW9uICgkY29udGFpbmVyLCBiRnVsbHNjcmVlbikgewogICAgICB2YXIgJGJ0biA9ICRjb250YWluZXIuZmluZCgnYnV0dG9uW2RhdGEtZXZlbnQ9ImZ1bGxzY3JlZW4iXScpOwogICAgICAkYnRuLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBiRnVsbHNjcmVlbik7CiAgICB9OwoKICAgIHRoaXMudXBkYXRlQ29kZXZpZXcgPSBmdW5jdGlvbiAoJGNvbnRhaW5lciwgaXNDb2RldmlldykgewogICAgICB2YXIgJGJ0biA9ICRjb250YWluZXIuZmluZCgnYnV0dG9uW2RhdGEtZXZlbnQ9ImNvZGV2aWV3Il0nKTsKICAgICAgJGJ0bi50b2dnbGVDbGFzcygnYWN0aXZlJywgaXNDb2Rldmlldyk7CiAgICB9OwogIH07CgogIC8qKgogICAqIFBvcG92ZXIgKGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3BvcG92ZXJzKQogICAqLwogIHZhciBQb3BvdmVyID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGJ1dHRvbiA9IG5ldyBCdXR0b24oKTsKCiAgICAvKioKICAgICAqIHJldHVybnMgcG9zaXRpb24gZnJvbSBwbGFjZWhvbGRlcgogICAgICogQHBhcmFtIHtOb2RlfSBwbGFjZWhvbGRlcgogICAgICogQHBhcmFtIHtCb29sZWFufSBpc0Fpck1vZGUKICAgICAqLwogICAgdmFyIHBvc0Zyb21QbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChwbGFjZWhvbGRlciwgaXNBaXJNb2RlKSB7CiAgICAgIHZhciAkcGxhY2Vob2xkZXIgPSAkKHBsYWNlaG9sZGVyKTsKICAgICAgdmFyIHBvcyA9IGlzQWlyTW9kZSA\/ICRwbGFjZWhvbGRlci5vZmZzZXQoKSA6ICRwbGFjZWhvbGRlci5wb3NpdGlvbigpOwogICAgICB2YXIgaGVpZ2h0ID0gJHBsYWNlaG9sZGVyLm91dGVySGVpZ2h0KHRydWUpOyAvLyBpbmNsdWRlIG1hcmdpbgoKICAgICAgLy8gcG9wb3ZlciBiZWxvdyBwbGFjZWhvbGRlci4KICAgICAgcmV0dXJuIHsKICAgICAgICBsZWZ0OiBwb3MubGVmdCwKICAgICAgICB0b3A6IHBvcy50b3AgKyBoZWlnaHQKICAgICAgfTsKICAgIH07CgogICAgLyoqCiAgICAgKiBzaG93IHBvcG92ZXIKICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBwb3BvdmVyCiAgICAgKiBAcGFyYW0ge1Bvc2l0aW9ufSBwb3MKICAgICAqLwogICAgdmFyIHNob3dQb3BvdmVyID0gZnVuY3Rpb24gKCRwb3BvdmVyLCBwb3MpIHsKICAgICAgJHBvcG92ZXIuY3NzKHsKICAgICAgICBkaXNwbGF5OiAnYmxvY2snLAogICAgICAgIGxlZnQ6IHBvcy5sZWZ0LAogICAgICAgIHRvcDogcG9zLnRvcAogICAgICB9KTsKICAgIH07CgogICAgdmFyIFBYX1BPUE9WRVJfQVJST1dfT0ZGU0VUX1ggPSAyMDsKCiAgICAvKioKICAgICAqIHVwZGF0ZSBjdXJyZW50IHN0YXRlCiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJHBvcG92ZXIgLSBwb3BvdmVyIGNvbnRhaW5lcgogICAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlSW5mbyAtIHN0eWxlIG9iamVjdAogICAgICogQHBhcmFtIHtCb29sZWFufSBpc0Fpck1vZGUKICAgICAqLwogICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoJHBvcG92ZXIsIHN0eWxlSW5mbywgaXNBaXJNb2RlKSB7CiAgICAgIGJ1dHRvbi51cGRhdGUoJHBvcG92ZXIsIHN0eWxlSW5mbyk7CgogICAgICB2YXIgJGxpbmtQb3BvdmVyID0gJHBvcG92ZXIuZmluZCgnLm5vdGUtbGluay1wb3BvdmVyJyk7CiAgICAgIGlmIChzdHlsZUluZm8uYW5jaG9yKSB7CiAgICAgICAgdmFyICRhbmNob3IgPSAkbGlua1BvcG92ZXIuZmluZCgnYScpOwogICAgICAgIHZhciBocmVmID0gJChzdHlsZUluZm8uYW5jaG9yKS5hdHRyKCdocmVmJyk7CiAgICAgICAgJGFuY2hvci5hdHRyKCdocmVmJywgaHJlZikuaHRtbChocmVmKTsKICAgICAgICBzaG93UG9wb3ZlcigkbGlua1BvcG92ZXIsIHBvc0Zyb21QbGFjZWhvbGRlcihzdHlsZUluZm8uYW5jaG9yLCBpc0Fpck1vZGUpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAkbGlua1BvcG92ZXIuaGlkZSgpOwogICAgICB9CgogICAgICB2YXIgJGltYWdlUG9wb3ZlciA9ICRwb3BvdmVyLmZpbmQoJy5ub3RlLWltYWdlLXBvcG92ZXInKTsKICAgICAgaWYgKHN0eWxlSW5mby5pbWFnZSkgewogICAgICAgIHNob3dQb3BvdmVyKCRpbWFnZVBvcG92ZXIsIHBvc0Zyb21QbGFjZWhvbGRlcihzdHlsZUluZm8uaW1hZ2UsIGlzQWlyTW9kZSkpOwogICAgICB9IGVsc2UgewogICAgICAgICRpbWFnZVBvcG92ZXIuaGlkZSgpOwogICAgICB9CgogICAgICB2YXIgJGFpclBvcG92ZXIgPSAkcG9wb3Zlci5maW5kKCcubm90ZS1haXItcG9wb3ZlcicpOwogICAgICBpZiAoaXNBaXJNb2RlICYmICFzdHlsZUluZm8ucmFuZ2UuaXNDb2xsYXBzZWQoKSkgewogICAgICAgIHZhciBibmQgPSBmdW5jLnJlY3QyYm5kKGxpc3QubGFzdChzdHlsZUluZm8ucmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKSkpOwogICAgICAgIHNob3dQb3BvdmVyKCRhaXJQb3BvdmVyLCB7CiAgICAgICAgICBsZWZ0OiBNYXRoLm1heChibmQubGVmdCArIGJuZC53aWR0aCAvIDIgLSBQWF9QT1BPVkVSX0FSUk9XX09GRlNFVF9YLCAwKSwKICAgICAgICAgIHRvcDogYm5kLnRvcCArIGJuZC5oZWlnaHQKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAkYWlyUG9wb3Zlci5oaWRlKCk7CiAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBAcGFyYW0ge05vZGV9IGJ1dHRvbgogICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZQogICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlCiAgICAgKi8KICAgIHRoaXMudXBkYXRlUmVjZW50Q29sb3IgPSBmdW5jdGlvbiAoYnV0dG9uLCBldmVudE5hbWUsIHZhbHVlKSB7CiAgICAgIGJ1dHRvbi51cGRhdGVSZWNlbnRDb2xvcihidXR0b24sIGV2ZW50TmFtZSwgdmFsdWUpOwogICAgfTsKCiAgICAvKioKICAgICAqIGhpZGUgYWxsIHBvcG92ZXJzCiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJHBvcG92ZXIgLSBwb3BvdmVyIGNvbnRhaW5lcgogICAgICovCiAgICB0aGlzLmhpZGUgPSBmdW5jdGlvbiAoJHBvcG92ZXIpIHsKICAgICAgJHBvcG92ZXIuY2hpbGRyZW4oKS5oaWRlKCk7CiAgICB9OwogIH07CgogIC8qKgogICAqIEhhbmRsZQogICAqLwogIHZhciBIYW5kbGUgPSBmdW5jdGlvbiAoKSB7CiAgICAvKioKICAgICAqIHVwZGF0ZSBoYW5kbGUKICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlCiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVJbmZvCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzQWlyTW9kZQogICAgICovCiAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICgkaGFuZGxlLCBzdHlsZUluZm8sIGlzQWlyTW9kZSkgewogICAgICB2YXIgJHNlbGVjdGlvbiA9ICRoYW5kbGUuZmluZCgnLm5vdGUtY29udHJvbC1zZWxlY3Rpb24nKTsKICAgICAgaWYgKHN0eWxlSW5mby5pbWFnZSkgewogICAgICAgIHZhciAkaW1hZ2UgPSAkKHN0eWxlSW5mby5pbWFnZSk7CiAgICAgICAgdmFyIHBvcyA9IGlzQWlyTW9kZSA\\\/ICdtYWMnIDogJ3BjJ10pOwogICAgICB9CiAgICAgIGxheW91dEluZm8uZWRpdGFibGUub24oJ21vdXNlZG93bicsIGhNb3VzZWRvd24pOwogICAgICBsYXlvdXRJbmZvLmVkaXRhYmxlLm9uKCdrZXl1cCBtb3VzZXVwJywgaFRvb2xiYXJBbmRQb3BvdmVyVXBkYXRlKTsKICAgICAgbGF5b3V0SW5mby5lZGl0YWJsZS5vbignc2Nyb2xsJywgaFNjcm9sbCk7CiAgICAgIGxheW91dEluZm8uZWRpdGFibGUub24oJ3Bhc3RlJywgaFBhc3RlQ2xpcGJvYXJkSW1hZ2UpOwoKICAgICAgLy8gaGFuZGxlciBmb3IgaGFuZGxlIGFuZCBwb3BvdmVyCiAgICAgIGxheW91dEluZm8uaGFuZGxlLm9uKCdtb3VzZWRvd24nLCBoSGFuZGxlTW91c2Vkb3duKTsKICAgICAgbGF5b3V0SW5mby5wb3BvdmVyLm9uKCdjbGljaycsIGhUb29sYmFyQW5kUG9wb3ZlckNsaWNrKTsKICAgICAgbGF5b3V0SW5mby5wb3BvdmVyLm9uKCdtb3VzZWRvd24nLCBoVG9vbGJhckFuZFBvcG92ZXJNb3VzZWRvd24pOwoKICAgICAgLy8gaGFuZGxlcnMgZm9yIGZyYW1lIG1vZGUgKHRvb2xiYXIsIHN0YXR1c2JhcikKICAgICAgaWYgKCFvcHRpb25zLmFpck1vZGUpIHsKICAgICAgICAvLyBoYW5kbGVyIGZvciBkcmFnIGFuZCBkcm9wCiAgICAgICAgaGFuZGxlRHJhZ0FuZERyb3BFdmVudChsYXlvdXRJbmZvLCBvcHRpb25zKTsKCiAgICAgICAgLy8gaGFuZGxlciBmb3IgdG9vbGJhcgogICAgICAgIGxheW91dEluZm8udG9vbGJhci5vbignY2xpY2snLCBoVG9vbGJhckFuZFBvcG92ZXJDbGljayk7CiAgICAgICAgbGF5b3V0SW5mby50b29sYmFyLm9uKCdtb3VzZWRvd24nLCBoVG9vbGJhckFuZFBvcG92ZXJNb3VzZWRvd24pOwoKICAgICAgICAvLyBoYW5kbGVyIGZvciBzdGF0dXNiYXIKICAgICAgICBpZiAoIW9wdGlvbnMuZGlzYWJsZVJlc2l6ZUVkaXRvcikgewogICAgICAgICAgbGF5b3V0SW5mby5zdGF0dXNiYXIub24oJ21vdXNlZG93bicsIGhTdGF0dXNiYXJNb3VzZWRvd24pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gaGFuZGxlciBmb3IgdGFibGUgZGltZW5zaW9uCiAgICAgIHZhciAkY2F0Y2hlckNvbnRhaW5lciA9IG9wdGlvbnMuYWlyTW9kZSA\/IGxheW91dEluZm8ucG9wb3ZlciA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dEluZm8udG9vbGJhcjsKICAgICAgdmFyICRjYXRjaGVyID0gJGNhdGNoZXJDb250YWluZXIuZmluZCgnLm5vdGUtZGltZW5zaW9uLXBpY2tlci1tb3VzZWNhdGNoZXInKTsKICAgICAgJGNhdGNoZXIuY3NzKHsKICAgICAgICB3aWR0aDogb3B0aW9ucy5pbnNlcnRUYWJsZU1heFNpemUuY29sICsgJ2VtJywKICAgICAgICBoZWlnaHQ6IG9wdGlvbnMuaW5zZXJ0VGFibGVNYXhTaXplLnJvdyArICdlbScKICAgICAgfSkub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIGhEaW1lbnNpb25QaWNrZXJNb3ZlKGV2ZW50LCBvcHRpb25zKTsKICAgICAgfSk7CgogICAgICAvLyBzYXZlIG9wdGlvbnMgb24gZWRpdG9yCiAgICAgIGxheW91dEluZm8uZWRpdG9yLmRhdGEoJ29wdGlvbnMnLCBvcHRpb25zKTsKCiAgICAgIC8vIHJldCBzdHlsZVdpdGhDU1MgZm9yIGJhY2tDb2xvciAvIGZvcmVDb2xvciBjbGVhcmluZyB3aXRoICdpbmhlcml0Jy4KICAgICAgaWYgKCFhZ2VudC5pc01TSUUpIHsKICAgICAgICAvLyBwcm90ZWN0IEZGIEVycm9yOiBOU19FUlJPUl9GQUlMVVJFOiBGYWlsdXJlCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnc3R5bGVXaXRoQ1NTJywgMCwgb3B0aW9ucy5zdHlsZVdpdGhTcGFuKTsKICAgICAgICB9LCAwKTsKICAgICAgfQoKICAgICAgLy8gSGlzdG9yeQogICAgICB2YXIgaGlzdG9yeSA9IG5ldyBIaXN0b3J5KGxheW91dEluZm8uZWRpdGFibGUpOwogICAgICBsYXlvdXRJbmZvLmVkaXRhYmxlLmRhdGEoJ05vdGVIaXN0b3J5JywgaGlzdG9yeSk7CgogICAgICAvLyBiYXNpYyBldmVudCBjYWxsYmFja3MgKGxvd2VyY2FzZSkKICAgICAgLy8gZW50ZXIsIGZvY3VzLCBibHVyLCBrZXl1cCwga2V5ZG93bgogICAgICBpZiAob3B0aW9ucy5vbmVudGVyKSB7CiAgICAgICAgbGF5b3V0SW5mby5lZGl0YWJsZS5rZXlwcmVzcyhmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBrZXkuRU5URVIpIHsgb3B0aW9ucy5vbmVudGVyKGV2ZW50KTsgfQogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAob3B0aW9ucy5vbmZvY3VzKSB7IGxheW91dEluZm8uZWRpdGFibGUuZm9jdXMob3B0aW9ucy5vbmZvY3VzKTsgfQogICAgICBpZiAob3B0aW9ucy5vbmJsdXIpIHsgbGF5b3V0SW5mby5lZGl0YWJsZS5ibHVyKG9wdGlvbnMub25ibHVyKTsgfQogICAgICBpZiAob3B0aW9ucy5vbmtleXVwKSB7IGxheW91dEluZm8uZWRpdGFibGUua2V5dXAob3B0aW9ucy5vbmtleXVwKTsgfQogICAgICBpZiAob3B0aW9ucy5vbmtleWRvd24pIHsgbGF5b3V0SW5mby5lZGl0YWJsZS5rZXlkb3duKG9wdGlvbnMub25rZXlkb3duKTsgfQogICAgICBpZiAob3B0aW9ucy5vbnBhc3RlKSB7IGxheW91dEluZm8uZWRpdGFibGUub24oJ3Bhc3RlJywgb3B0aW9ucy5vbnBhc3RlKTsgfQoKICAgICAgLy8gY2FsbGJhY2tzIGZvciBhZHZhbmNlZCBmZWF0dXJlcyAoY2FtZWwpCiAgICAgIGlmIChvcHRpb25zLm9uVG9vbGJhckNsaWNrKSB7IGxheW91dEluZm8udG9vbGJhci5jbGljayhvcHRpb25zLm9uVG9vbGJhckNsaWNrKTsgfQogICAgICBpZiAob3B0aW9ucy5vbkNoYW5nZSkgewogICAgICAgIHZhciBoQ2hhbmdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgZWRpdG9yLnRyaWdnZXJPbkNoYW5nZShsYXlvdXRJbmZvLmVkaXRhYmxlKTsKICAgICAgICB9OwoKICAgICAgICBpZiAoYWdlbnQuaXNNU0lFKSB7CiAgICAgICAgICB2YXIgc0RvbUV2ZW50cyA9ICdET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWQgRE9NU3VidHJlZU1vZGlmaWVkIERPTU5vZGVJbnNlcnRlZCc7CiAgICAgICAgICBsYXlvdXRJbmZvLmVkaXRhYmxlLm9uKHNEb21FdmVudHMsIGhDaGFuZ2UpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBsYXlvdXRJbmZvLmVkaXRhYmxlLm9uKCdpbnB1dCcsIGhDaGFuZ2UpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gQWxsIGVkaXRvciBzdGF0dXMgd2lsbCBiZSBzYXZlZCBvbiBlZGl0YWJsZSB3aXRoIGpxdWVyeSdzIGRhdGEKICAgICAgLy8gZm9yIHN1cHBvcnQgbXVsdGlwbGUgZWRpdG9yIHdpdGggc2luZ2xldG9uIG9iamVjdC4KICAgICAgbGF5b3V0SW5mby5lZGl0YWJsZS5kYXRhKCdjYWxsYmFja3MnLCB7CiAgICAgICAgb25DaGFuZ2U6IG9wdGlvbnMub25DaGFuZ2UsCiAgICAgICAgb25BdXRvU2F2ZTogb3B0aW9ucy5vbkF1dG9TYXZlLAogICAgICAgIG9uSW1hZ2VVcGxvYWQ6IG9wdGlvbnMub25JbWFnZVVwbG9hZCwKICAgICAgICBvbkltYWdlVXBsb2FkRXJyb3I6IG9wdGlvbnMub25JbWFnZVVwbG9hZEVycm9yLAogICAgICAgIG9uRmlsZVVwbG9hZDogb3B0aW9ucy5vbkZpbGVVcGxvYWQsCiAgICAgICAgb25GaWxlVXBsb2FkRXJyb3I6IG9wdGlvbnMub25GaWxlVXBsb2FkCiAgICAgIH0pOwogICAgfTsKCiAgICB0aGlzLmRldGFjaCA9IGZ1bmN0aW9uIChsYXlvdXRJbmZvLCBvcHRpb25zKSB7CiAgICAgIGxheW91dEluZm8uZWRpdGFibGUub2ZmKCk7CgogICAgICBsYXlvdXRJbmZvLnBvcG92ZXIub2ZmKCk7CiAgICAgIGxheW91dEluZm8uaGFuZGxlLm9mZigpOwogICAgICBsYXlvdXRJbmZvLmRpYWxvZy5vZmYoKTsKCiAgICAgIGlmICghb3B0aW9ucy5haXJNb2RlKSB7CiAgICAgICAgbGF5b3V0SW5mby5kcm9wem9uZS5vZmYoKTsKICAgICAgICBsYXlvdXRJbmZvLnRvb2xiYXIub2ZmKCk7CiAgICAgICAgbGF5b3V0SW5mby5zdGF0dXNiYXIub2ZmKCk7CiAgICAgIH0KICAgIH07CiAgfTsKCiAgLyoqCiAgICogcmVuZGVyZXIKICAgKgogICAqIHJlbmRlcmluZyB0b29sYmFyIGFuZCBlZGl0YWJsZQogICAqLwogIHZhciBSZW5kZXJlciA9IGZ1bmN0aW9uICgpIHsKCiAgICAvKioKICAgICAqIGJvb3RzdHJhcCBidXR0b24gdGVtcGxhdGUKICAgICAqCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbGFiZWwKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5ldmVudF0KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy52YWx1ZV0KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy50aXRsZV0KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5kcm9wZG93bl0KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5oaWRlXQogICAgICovCiAgICB2YXIgdHBsQnV0dG9uID0gZnVuY3Rpb24gKGxhYmVsLCBvcHRpb25zKSB7CiAgICAgIHZhciBldmVudCA9IG9wdGlvbnMuZXZlbnQ7CiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnMudmFsdWU7CiAgICAgIHZhciB0aXRsZSA9IG9wdGlvbnMudGl0bGU7CiAgICAgIHZhciBjbGFzc05hbWUgPSBvcHRpb25zLmNsYXNzTmFtZTsKICAgICAgdmFyIGRyb3Bkb3duID0gb3B0aW9ucy5kcm9wZG93bjsKICAgICAgdmFyIGhpZGUgPSBvcHRpb25zLmhpZGU7CgogICAgICByZXR1cm4gJzxidXR0b24gdHlwZT0iYnV0dG9uIicgKwogICAgICAgICAgICAgICAgICcgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBidG4tc20gYnRuLXNtYWxsJyArCiAgICAgICAgICAgICAgICAgICAoY2xhc3NOYW1lID8gJyAnICsgY2xhc3NOYW1lIDogJycpICsKICAgICAgICAgICAgICAgICAgIChkcm9wZG93biA\/ICcgZHJvcGRvd24tdG9nZ2xlJyA6ICcnKSArCiAgICAgICAgICAgICAgICAgJyInICsKICAgICAgICAgICAgICAgICAoZHJvcGRvd24gPyAnIGRhdGEtdG9nZ2xlPSJkcm9wZG93biInIDogJycpICsKICAgICAgICAgICAgICAgICAodGl0bGUgPyAnIHRpdGxlPSInICsgdGl0bGUgKyAnIicgOiAnJykgKwogICAgICAgICAgICAgICAgIChldmVudCA\/ICcgZGF0YS1ldmVudD0iJyArIGV2ZW50ICsgJyInIDogJycpICsKICAgICAgICAgICAgICAgICAodmFsdWUgPyAnIGRhdGEtdmFsdWU9XCcnICsgdmFsdWUgKyAnXCcnIDogJycpICsKICAgICAgICAgICAgICAgICAoaGlkZSA\/ICcgZGF0YS1oaWRlPVwnJyArIGhpZGUgKyAnXCcnIDogJycpICsKICAgICAgICAgICAgICAgICAnIHRhYmluZGV4PSItMSI+JyArCiAgICAgICAgICAgICAgIGxhYmVsICsKICAgICAgICAgICAgICAgKGRyb3Bkb3duID8gJyA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4nIDogJycpICsKICAgICAgICAgICAgICc8L2J1dHRvbj4nICsKICAgICAgICAgICAgIChkcm9wZG93biB8fCAnJyk7CiAgICB9OwoKICAgIC8qKgogICAgICogYm9vdHN0cmFwIGljb24gYnV0dG9uIHRlbXBsYXRlCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd9IGljb25DbGFzc05hbWUKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5ldmVudF0KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy52YWx1ZV0KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy50aXRsZV0KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5kcm9wZG93bl0KICAgICAqLwogICAgdmFyIHRwbEljb25CdXR0b24gPSBmdW5jdGlvbiAoaWNvbkNsYXNzTmFtZSwgb3B0aW9ucykgewogICAgICB2YXIgbGFiZWwgPSAnPGkgY2xhc3M9IicgKyBpY29uQ2xhc3NOYW1lICsgJyI+PC9pPic7CiAgICAgIHJldHVybiB0cGxCdXR0b24obGFiZWwsIG9wdGlvbnMpOwogICAgfTsKCiAgICAvKioKICAgICAqIGJvb3RzdHJhcCBwb3BvdmVyIHRlbXBsYXRlCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZQogICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnQKICAgICAqLwogICAgdmFyIHRwbFBvcG92ZXIgPSBmdW5jdGlvbiAoY2xhc3NOYW1lLCBjb250ZW50KSB7CiAgICAgIHJldHVybiAnPGRpdiBjbGFzcz0iJyArIGNsYXNzTmFtZSArICcgcG9wb3ZlciBib3R0b20gaW4iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+JyArCiAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJhcnJvdyI+PC9kaXY+JyArCiAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJwb3BvdmVyLWNvbnRlbnQiPicgKwogICAgICAgICAgICAgICAgIGNvbnRlbnQgKwogICAgICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICAnPC9kaXY+JzsKICAgIH07CgogICAgLyoqCiAgICAgKiBib290c3RyYXAgZGlhbG9nIHRlbXBsYXRlCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZQogICAgICogQHBhcmFtIHtTdHJpbmd9IFt0aXRsZV0KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBib2R5CiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2Zvb3Rlcl0KICAgICAqLwogICAgdmFyIHRwbERpYWxvZyA9IGZ1bmN0aW9uIChjbGFzc05hbWUsIHRpdGxlLCBib2R5LCBmb290ZXIpIHsKICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPSInICsgY2xhc3NOYW1lICsgJyBtb2RhbCIgYXJpYS1oaWRkZW49ImZhbHNlIj4nICsKICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+JyArCiAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPicgKwogICAgICAgICAgICAgICAgICAgKHRpdGxlID8KICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPicgKwogICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgYXJpYS1oaWRkZW49InRydWUiIHRhYmluZGV4PSItMSI+JnRpbWVzOzwvYnV0dG9uPicgKwogICAgICAgICAgICAgICAgICAgICAnPGg0IGNsYXNzPSJtb2RhbC10aXRsZSI+JyArIHRpdGxlICsgJzwvaDQ+JyArCiAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyA6ICcnCiAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICc8Zm9ybSBjbGFzcz0ibm90ZS1tb2RhbC1mb3JtIj4nICsKICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPicgKyBib2R5ICsgJzwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAoZm9vdGVyID8KICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+JyArIGZvb3RlciArICc8L2Rpdj4nIDogJycKICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAnPC9mb3JtPicgKwogICAgICAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICAgICAgJzwvZGl2Pic7CiAgICB9OwoKICAgIHZhciB0cGxCdXR0b25JbmZvID0gewogICAgICBwaWN0dXJlOiBmdW5jdGlvbiAobGFuZykgewogICAgICAgIHJldHVybiB0cGxJY29uQnV0dG9uKCdmYSBmYS1waWN0dXJlLW8nLCB7CiAgICAgICAgICBldmVudDogJ3Nob3dJbWFnZURpYWxvZycsCiAgICAgICAgICB0aXRsZTogbGFuZy5pbWFnZS5pbWFnZSwKICAgICAgICAgIGhpZGU6IHRydWUKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgbGluazogZnVuY3Rpb24gKGxhbmcpIHsKICAgICAgICByZXR1cm4gdHBsSWNvbkJ1dHRvbignZmEgZmEtbGluaycsIHsKICAgICAgICAgIGV2ZW50OiAnc2hvd0xpbmtEaWFsb2cnLAogICAgICAgICAgdGl0bGU6IGxhbmcubGluay5saW5rLAogICAgICAgICAgaGlkZTogdHJ1ZQogICAgICAgIH0pOwogICAgICB9LAogICAgICB0YWJsZTogZnVuY3Rpb24gKGxhbmcpIHsKICAgICAgICB2YXIgZHJvcGRvd24gPSAnPHVsIGNsYXNzPSJub3RlLXRhYmxlIGRyb3Bkb3duLW1lbnUiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9Im5vdGUtZGltZW5zaW9uLXBpY2tlciI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJub3RlLWRpbWVuc2lvbi1waWNrZXItbW91c2VjYXRjaGVyIiBkYXRhLWV2ZW50PSJpbnNlcnRUYWJsZSIgZGF0YS12YWx1ZT0iMXgxIj48L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9Im5vdGUtZGltZW5zaW9uLXBpY2tlci1oaWdobGlnaHRlZCI+PC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJub3RlLWRpbWVuc2lvbi1waWNrZXItdW5oaWdobGlnaHRlZCI+PC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0ibm90ZS1kaW1lbnNpb24tZGlzcGxheSI+IDEgeCAxIDwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICc8L3VsPic7CiAgICAgICAgcmV0dXJuIHRwbEljb25CdXR0b24oJ2ZhIGZhLXRhYmxlJywgewogICAgICAgICAgdGl0bGU6IGxhbmcudGFibGUudGFibGUsCiAgICAgICAgICBkcm9wZG93bjogZHJvcGRvd24KICAgICAgICB9KTsKICAgICAgfSwKICAgICAgc3R5bGU6IGZ1bmN0aW9uIChsYW5nLCBvcHRpb25zKSB7CiAgICAgICAgdmFyIGl0ZW1zID0gb3B0aW9ucy5zdHlsZVRhZ3MucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCB2KSB7CiAgICAgICAgICB2YXIgbGFiZWwgPSBsYW5nLnN0eWxlW3YgPT09ICdwJyA\/ICdub3JtYWwnIDogdl07CiAgICAgICAgICByZXR1cm4gbWVtbyArICc8bGk+PGEgZGF0YS1ldmVudD0iZm9ybWF0QmxvY2siIGhyZWY9IiMiIGRhdGEtdmFsdWU9IicgKyB2ICsgJyI+JyArCiAgICAgICAgICAgICAgICAgICAoCiAgICAgICAgICAgICAgICAgICAgICh2ID09PSAncCcgfHwgdiA9PT0gJ3ByZScpID8gbGFiZWwgOgogICAgICAgICAgICAgICAgICAgICAnPCcgKyB2ICsgJz4nICsgbGFiZWwgKyAnPC8nICsgdiArICc+JwogICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgJzwvYT48L2xpPic7CiAgICAgICAgfSwgJycpOwoKICAgICAgICByZXR1cm4gdHBsSWNvbkJ1dHRvbignZmEgZmEtbWFnaWMnLCB7CiAgICAgICAgICB0aXRsZTogbGFuZy5zdHlsZS5zdHlsZSwKICAgICAgICAgIGRyb3Bkb3duOiAnPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4nICsgaXRlbXMgKyAnPC91bD4nCiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGZvbnRuYW1lOiBmdW5jdGlvbiAobGFuZywgb3B0aW9ucykgewogICAgICAgIHZhciBpdGVtcyA9IG9wdGlvbnMuZm9udE5hbWVzLnJlZHVjZShmdW5jdGlvbiAobWVtbywgdikgewogICAgICAgICAgaWYgKCFhZ2VudC5pc0ZvbnRJbnN0YWxsZWQodikpIHsgcmV0dXJuIG1lbW87IH0KICAgICAgICAgIHJldHVybiBtZW1vICsgJzxsaT48YSBkYXRhLWV2ZW50PSJmb250TmFtZSIgaHJlZj0iIyIgZGF0YS12YWx1ZT0iJyArIHYgKyAnIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAnPGkgY2xhc3M9ImZhIGZhLWNoZWNrIj48L2k+ICcgKyB2ICsKICAgICAgICAgICAgICAgICAgICAgICAgJzwvYT48L2xpPic7CiAgICAgICAgfSwgJycpOwogICAgICAgIHZhciBsYWJlbCA9ICc8c3BhbiBjbGFzcz0ibm90ZS1jdXJyZW50LWZvbnRuYW1lIj4nICsKICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmRlZmF1bHRGb250TmFtZSArCiAgICAgICAgICAgICAgICAgICAgICc8L3NwYW4+JzsKICAgICAgICByZXR1cm4gdHBsQnV0dG9uKGxhYmVsLCB7CiAgICAgICAgICB0aXRsZTogbGFuZy5mb250Lm5hbWUsCiAgICAgICAgICBkcm9wZG93bjogJzx1bCBjbGFzcz0iZHJvcGRvd24tbWVudSI+JyArIGl0ZW1zICsgJzwvdWw+JwogICAgICAgIH0pOwogICAgICB9LAogICAgICBjb2xvcjogZnVuY3Rpb24gKGxhbmcpIHsKICAgICAgICB2YXIgY29sb3JCdXR0b25MYWJlbCA9ICc8aSBjbGFzcz0iZmEgZmEtZm9udCIgc3R5bGU9ImNvbG9yOmJsYWNrO2JhY2tncm91bmQtY29sb3I6eWVsbG93OyI+PC9pPic7CiAgICAgICAgdmFyIGNvbG9yQnV0dG9uID0gdHBsQnV0dG9uKGNvbG9yQnV0dG9uTGFiZWwsIHsKICAgICAgICAgIGNsYXNzTmFtZTogJ25vdGUtcmVjZW50LWNvbG9yJywKICAgICAgICAgIHRpdGxlOiBsYW5nLmNvbG9yLnJlY2VudCwKICAgICAgICAgIGV2ZW50OiAnY29sb3InLAogICAgICAgICAgdmFsdWU6ICd7ImJhY2tDb2xvciI6InllbGxvdyJ9JwogICAgICAgIH0pOwoKICAgICAgICB2YXIgZHJvcGRvd24gPSAnPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICc8bGk+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJidG4tZ3JvdXAiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJub3RlLXBhbGV0dGUtdGl0bGUiPicgKyBsYW5nLmNvbG9yLmJhY2tncm91bmQgKyAnPC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9Im5vdGUtY29sb3ItcmVzZXQiIGRhdGEtZXZlbnQ9ImJhY2tDb2xvciInICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgZGF0YS12YWx1ZT0iaW5oZXJpdCIgdGl0bGU9IicgKyBsYW5nLmNvbG9yLnRyYW5zcGFyZW50ICsgJyI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5nLmNvbG9yLnNldFRyYW5zcGFyZW50ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9Im5vdGUtY29sb3ItcGFsZXR0ZSIgZGF0YS10YXJnZXQtZXZlbnQ9ImJhY2tDb2xvciI+PC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImJ0bi1ncm91cCI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9Im5vdGUtcGFsZXR0ZS10aXRsZSI+JyArIGxhbmcuY29sb3IuZm9yZWdyb3VuZCArICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0ibm90ZS1jb2xvci1yZXNldCIgZGF0YS1ldmVudD0iZm9yZUNvbG9yIiBkYXRhLXZhbHVlPSJpbmhlcml0IiB0aXRsZT0iJyArIGxhbmcuY29sb3IucmVzZXQgKyAnIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmcuY29sb3IucmVzZXRUb0RlZmF1bHQgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0ibm90ZS1jb2xvci1wYWxldHRlIiBkYXRhLXRhcmdldC1ldmVudD0iZm9yZUNvbG9yIj48L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgJzwvbGk+JyArCiAgICAgICAgICAgICAgICAgICAgICAgJzwvdWw+JzsKCiAgICAgICAgdmFyIG1vcmVCdXR0b24gPSB0cGxCdXR0b24oJycsIHsKICAgICAgICAgIHRpdGxlOiBsYW5nLmNvbG9yLm1vcmUsCiAgICAgICAgICBkcm9wZG93bjogZHJvcGRvd24KICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIGNvbG9yQnV0dG9uICsgbW9yZUJ1dHRvbjsKICAgICAgfSwKICAgICAgYm9sZDogZnVuY3Rpb24gKGxhbmcpIHsKICAgICAgICByZXR1cm4gdHBsSWNvbkJ1dHRvbignZmEgZmEtYm9sZCcsIHsKICAgICAgICAgIGV2ZW50OiAnYm9sZCcsCiAgICAgICAgICB0aXRsZTogbGFuZy5mb250LmJvbGQKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgaXRhbGljOiBmdW5jdGlvbiAobGFuZykgewogICAgICAgIHJldHVybiB0cGxJY29uQnV0dG9uKCdmYSBmYS1pdGFsaWMnLCB7CiAgICAgICAgICBldmVudDogJ2l0YWxpYycsCiAgICAgICAgICB0aXRsZTogbGFuZy5mb250Lml0YWxpYwogICAgICAgIH0pOwogICAgICB9LAogICAgICB1bmRlcmxpbmU6IGZ1bmN0aW9uIChsYW5nKSB7CiAgICAgICAgcmV0dXJuIHRwbEljb25CdXR0b24oJ2ZhIGZhLXVuZGVybGluZScsIHsKICAgICAgICAgIGV2ZW50OiAndW5kZXJsaW5lJywKICAgICAgICAgIHRpdGxlOiBsYW5nLmZvbnQudW5kZXJsaW5lCiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGNsZWFyOiBmdW5jdGlvbiAobGFuZykgewogICAgICAgIHJldHVybiB0cGxJY29uQnV0dG9uKCdmYSBmYS1lcmFzZXInLCB7CiAgICAgICAgICBldmVudDogJ3JlbW92ZUZvcm1hdCcsCiAgICAgICAgICB0aXRsZTogbGFuZy5mb250LmNsZWFyCiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIHVsOiBmdW5jdGlvbiAobGFuZykgewogICAgICAgIHJldHVybiB0cGxJY29uQnV0dG9uKCdmYSBmYS1saXN0LXVsJywgewogICAgICAgICAgZXZlbnQ6ICdpbnNlcnRVbm9yZGVyZWRMaXN0JywKICAgICAgICAgIHRpdGxlOiBsYW5nLmxpc3RzLnVub3JkZXJlZAogICAgICAgIH0pOwogICAgICB9LAogICAgICBvbDogZnVuY3Rpb24gKGxhbmcpIHsKICAgICAgICByZXR1cm4gdHBsSWNvbkJ1dHRvbignZmEgZmEtbGlzdC1vbCcsIHsKICAgICAgICAgIGV2ZW50OiAnaW5zZXJ0T3JkZXJlZExpc3QnLAogICAgICAgICAgdGl0bGU6IGxhbmcubGlzdHMub3JkZXJlZAogICAgICAgIH0pOwogICAgICB9LAogICAgICBwYXJhZ3JhcGg6IGZ1bmN0aW9uIChsYW5nKSB7CiAgICAgICAgdmFyIGxlZnRCdXR0b24gPSB0cGxJY29uQnV0dG9uKCdmYSBmYS1hbGlnbi1sZWZ0JywgewogICAgICAgICAgdGl0bGU6IGxhbmcucGFyYWdyYXBoLmxlZnQsCiAgICAgICAgICBldmVudDogJ2p1c3RpZnlMZWZ0JwogICAgICAgIH0pOwogICAgICAgIHZhciBjZW50ZXJCdXR0b24gPSB0cGxJY29uQnV0dG9uKCdmYSBmYS1hbGlnbi1jZW50ZXInLCB7CiAgICAgICAgICB0aXRsZTogbGFuZy5wYXJhZ3JhcGguY2VudGVyLAogICAgICAgICAgZXZlbnQ6ICdqdXN0aWZ5Q2VudGVyJwogICAgICAgIH0pOwogICAgICAgIHZhciByaWdodEJ1dHRvbiA9IHRwbEljb25CdXR0b24oJ2ZhIGZhLWFsaWduLXJpZ2h0JywgewogICAgICAgICAgdGl0bGU6IGxhbmcucGFyYWdyYXBoLnJpZ2h0LAogICAgICAgICAgZXZlbnQ6ICdqdXN0aWZ5UmlnaHQnCiAgICAgICAgfSk7CiAgICAgICAgdmFyIGp1c3RpZnlCdXR0b24gPSB0cGxJY29uQnV0dG9uKCdmYSBmYS1hbGlnbi1qdXN0aWZ5JywgewogICAgICAgICAgdGl0bGU6IGxhbmcucGFyYWdyYXBoLmp1c3RpZnksCiAgICAgICAgICBldmVudDogJ2p1c3RpZnlGdWxsJwogICAgICAgIH0pOwoKICAgICAgICB2YXIgb3V0ZGVudEJ1dHRvbiA9IHRwbEljb25CdXR0b24oJ2ZhIGZhLW91dGRlbnQnLCB7CiAgICAgICAgICB0aXRsZTogbGFuZy5wYXJhZ3JhcGgub3V0ZGVudCwKICAgICAgICAgIGV2ZW50OiAnb3V0ZGVudCcKICAgICAgICB9KTsKICAgICAgICB2YXIgaW5kZW50QnV0dG9uID0gdHBsSWNvbkJ1dHRvbignZmEgZmEtaW5kZW50JywgewogICAgICAgICAgdGl0bGU6IGxhbmcucGFyYWdyYXBoLmluZGVudCwKICAgICAgICAgIGV2ZW50OiAnaW5kZW50JwogICAgICAgIH0pOwoKICAgICAgICB2YXIgZHJvcGRvd24gPSAnPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0ibm90ZS1hbGlnbiBidG4tZ3JvdXAiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0QnV0dG9uICsgY2VudGVyQnV0dG9uICsgcmlnaHRCdXR0b24gKyBqdXN0aWZ5QnV0dG9uICsKICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJub3RlLWxpc3QgYnRuLWdyb3VwIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50QnV0dG9uICsgb3V0ZGVudEJ1dHRvbiArCiAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7CgogICAgICAgIHJldHVybiB0cGxJY29uQnV0dG9uKCdmYSBmYS1hbGlnbi1sZWZ0JywgewogICAgICAgICAgdGl0bGU6IGxhbmcucGFyYWdyYXBoLnBhcmFncmFwaCwKICAgICAgICAgIGRyb3Bkb3duOiBkcm9wZG93bgogICAgICAgIH0pOwogICAgICB9LAogICAgICBoZWlnaHQ6IGZ1bmN0aW9uIChsYW5nLCBvcHRpb25zKSB7CiAgICAgICAgdmFyIGl0ZW1zID0gb3B0aW9ucy5saW5lSGVpZ2h0cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIHYpIHsKICAgICAgICAgIHJldHVybiBtZW1vICsgJzxsaT48YSBkYXRhLWV2ZW50PSJsaW5lSGVpZ2h0IiBocmVmPSIjIiBkYXRhLXZhbHVlPSInICsgcGFyc2VGbG9hdCh2KSArICciPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICc8aSBjbGFzcz0iZmEgZmEtY2hlY2siPjwvaT4gJyArIHYgKwogICAgICAgICAgICAgICAgICAgICAgICAnPC9hPjwvbGk+JzsKICAgICAgICB9LCAnJyk7CgogICAgICAgIHJldHVybiB0cGxJY29uQnV0dG9uKCdmYSBmYS10ZXh0LWhlaWdodCcsIHsKICAgICAgICAgIHRpdGxlOiBsYW5nLmZvbnQuaGVpZ2h0LAogICAgICAgICAgZHJvcGRvd246ICc8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPicgKyBpdGVtcyArICc8L3VsPicKICAgICAgICB9KTsKCiAgICAgIH0sCiAgICAgIGhlbHA6IGZ1bmN0aW9uIChsYW5nKSB7CiAgICAgICAgcmV0dXJuIHRwbEljb25CdXR0b24oJ2ZhIGZhLXF1ZXN0aW9uJywgewogICAgICAgICAgZXZlbnQ6ICdzaG93SGVscERpYWxvZycsCiAgICAgICAgICB0aXRsZTogbGFuZy5vcHRpb25zLmhlbHAsCiAgICAgICAgICBoaWRlOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGZ1bGxzY3JlZW46IGZ1bmN0aW9uIChsYW5nKSB7CiAgICAgICAgcmV0dXJuIHRwbEljb25CdXR0b24oJ2ZhIGZhLWFycm93cy1hbHQnLCB7CiAgICAgICAgICBldmVudDogJ2Z1bGxzY3JlZW4nLAogICAgICAgICAgdGl0bGU6IGxhbmcub3B0aW9ucy5mdWxsc2NyZWVuCiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGNvZGV2aWV3OiBmdW5jdGlvbiAobGFuZykgewogICAgICAgIHJldHVybiB0cGxJY29uQnV0dG9uKCdmYSBmYS1jb2RlJywgewogICAgICAgICAgZXZlbnQ6ICdjb2RldmlldycsCiAgICAgICAgICB0aXRsZTogbGFuZy5vcHRpb25zLmNvZGV2aWV3CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIHVuZG86IGZ1bmN0aW9uIChsYW5nKSB7CiAgICAgICAgcmV0dXJuIHRwbEljb25CdXR0b24oJ2ZhIGZhLXVuZG8nLCB7CiAgICAgICAgICBldmVudDogJ3VuZG8nLAogICAgICAgICAgdGl0bGU6IGxhbmcuaGlzdG9yeS51bmRvCiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIHJlZG86IGZ1bmN0aW9uIChsYW5nKSB7CiAgICAgICAgcmV0dXJuIHRwbEljb25CdXR0b24oJ2ZhIGZhLXJlcGVhdCcsIHsKICAgICAgICAgIGV2ZW50OiAncmVkbycsCiAgICAgICAgICB0aXRsZTogbGFuZy5oaXN0b3J5LnJlZG8KICAgICAgICB9KTsKICAgICAgfSwKICAgICAgaHI6IGZ1bmN0aW9uIChsYW5nKSB7CiAgICAgICAgcmV0dXJuIHRwbEljb25CdXR0b24oJ2ZhIGZhLW1pbnVzJywgewogICAgICAgICAgZXZlbnQ6ICdpbnNlcnRIb3Jpem9udGFsUnVsZScsCiAgICAgICAgICB0aXRsZTogbGFuZy5oci5pbnNlcnQKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKCiAgICB2YXIgdHBsUG9wb3ZlcnMgPSBmdW5jdGlvbiAobGFuZywgb3B0aW9ucykgewogICAgICB2YXIgdHBsTGlua1BvcG92ZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGxpbmtCdXR0b24gPSB0cGxJY29uQnV0dG9uKCdmYSBmYS1lZGl0JywgewogICAgICAgICAgdGl0bGU6IGxhbmcubGluay5lZGl0LAogICAgICAgICAgZXZlbnQ6ICdzaG93TGlua0RpYWxvZycsCiAgICAgICAgICBoaWRlOiB0cnVlCiAgICAgICAgfSk7CiAgICAgICAgdmFyIHVubGlua0J1dHRvbiA9IHRwbEljb25CdXR0b24oJ2ZhIGZhLXVubGluaycsIHsKICAgICAgICAgIHRpdGxlOiBsYW5nLmxpbmsudW5saW5rLAogICAgICAgICAgZXZlbnQ6ICd1bmxpbmsnCiAgICAgICAgfSk7CiAgICAgICAgdmFyIGNvbnRlbnQgPSAnPGEgaHJlZj0iaHR0cDovL3d3dy5nb29nbGUuY29tIiB0YXJnZXQ9Il9ibGFuayI+d3d3Lmdvb2dsZS5jb208L2E+Jm5ic3A7Jm5ic3A7JyArCiAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0ibm90ZS1pbnNlcnQgYnRuLWdyb3VwIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgbGlua0J1dHRvbiArIHVubGlua0J1dHRvbiArCiAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JzsKICAgICAgICByZXR1cm4gdHBsUG9wb3Zlcignbm90ZS1saW5rLXBvcG92ZXInLCBjb250ZW50KTsKICAgICAgfTsKCiAgICAgIHZhciB0cGxJbWFnZVBvcG92ZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGZ1bGxCdXR0b24gPSB0cGxCdXR0b24oJzxzcGFuIGNsYXNzPSJub3RlLWZvbnRzaXplLTEwIj4xMDAlPC9zcGFuPicsIHsKICAgICAgICAgIHRpdGxlOiBsYW5nLmltYWdlLnJlc2l6ZUZ1bGwsCiAgICAgICAgICBldmVudDogJ3Jlc2l6ZScsCiAgICAgICAgICB2YWx1ZTogJzEnCiAgICAgICAgfSk7CiAgICAgICAgdmFyIGhhbGZCdXR0b24gPSB0cGxCdXR0b24oJzxzcGFuIGNsYXNzPSJub3RlLWZvbnRzaXplLTEwIj41MCU8L3NwYW4+JywgewogICAgICAgICAgdGl0bGU6IGxhbmcuaW1hZ2UucmVzaXplSGFsZiwKICAgICAgICAgIGV2ZW50OiAncmVzaXplJywKICAgICAgICAgIHZhbHVlOiAnMC41JwogICAgICAgIH0pOwogICAgICAgIHZhciBxdWFydGVyQnV0dG9uID0gdHBsQnV0dG9uKCc8c3BhbiBjbGFzcz0ibm90ZS1mb250c2l6ZS0xMCI+MjUlPC9zcGFuPicsIHsKICAgICAgICAgIHRpdGxlOiBsYW5nLmltYWdlLnJlc2l6ZVF1YXJ0ZXIsCiAgICAgICAgICBldmVudDogJ3Jlc2l6ZScsCiAgICAgICAgICB2YWx1ZTogJzAuMjUnCiAgICAgICAgfSk7CgogICAgICAgIHZhciBsZWZ0QnV0dG9uID0gdHBsSWNvbkJ1dHRvbignZmEgZmEtYWxpZ24tbGVmdCcsIHsKICAgICAgICAgIHRpdGxlOiBsYW5nLmltYWdlLmZsb2F0TGVmdCwKICAgICAgICAgIGV2ZW50OiAnZmxvYXRNZScsCiAgICAgICAgICB2YWx1ZTogJ2xlZnQnCiAgICAgICAgfSk7CiAgICAgICAgdmFyIHJpZ2h0QnV0dG9uID0gdHBsSWNvbkJ1dHRvbignZmEgZmEtYWxpZ24tcmlnaHQnLCB7CiAgICAgICAgICB0aXRsZTogbGFuZy5pbWFnZS5mbG9hdFJpZ2h0LAogICAgICAgICAgZXZlbnQ6ICdmbG9hdE1lJywKICAgICAgICAgIHZhbHVlOiAncmlnaHQnCiAgICAgICAgfSk7CiAgICAgICAgdmFyIGp1c3RpZnlCdXR0b24gPSB0cGxJY29uQnV0dG9uKCdmYSBmYS1hbGlnbi1qdXN0aWZ5JywgewogICAgICAgICAgdGl0bGU6IGxhbmcuaW1hZ2UuZmxvYXROb25lLAogICAgICAgICAgZXZlbnQ6ICdmbG9hdE1lJywKICAgICAgICAgIHZhbHVlOiAnbm9uZScKICAgICAgICB9KTsKCiAgICAgICAgdmFyIHJvdW5kZWRCdXR0b24gPSB0cGxJY29uQnV0dG9uKCdmYSBmYS1zcXVhcmUnLCB7CiAgICAgICAgICB0aXRsZTogbGFuZy5pbWFnZS5zaGFwZVJvdW5kZWQsCiAgICAgICAgICBldmVudDogJ2ltYWdlU2hhcGUnLAogICAgICAgICAgdmFsdWU6ICdpbWctcm91bmRlZCcKICAgICAgICB9KTsKICAgICAgICB2YXIgY2lyY2xlQnV0dG9uID0gdHBsSWNvbkJ1dHRvbignZmEgZmEtY2lyY2xlLW8nLCB7CiAgICAgICAgICB0aXRsZTogbGFuZy5pbWFnZS5zaGFwZUNpcmNsZSwKICAgICAgICAgIGV2ZW50OiAnaW1hZ2VTaGFwZScsCiAgICAgICAgICB2YWx1ZTogJ2ltZy1jaXJjbGUnCiAgICAgICAgfSk7CiAgICAgICAgdmFyIHRodW1ibmFpbEJ1dHRvbiA9IHRwbEljb25CdXR0b24oJ2ZhIGZhLXBpY3R1cmUtbycsIHsKICAgICAgICAgIHRpdGxlOiBsYW5nLmltYWdlLnNoYXBlVGh1bWJuYWlsLAogICAgICAgICAgZXZlbnQ6ICdpbWFnZVNoYXBlJywKICAgICAgICAgIHZhbHVlOiAnaW1nLXRodW1ibmFpbCcKICAgICAgICB9KTsKICAgICAgICB2YXIgbm9uZUJ1dHRvbiA9IHRwbEljb25CdXR0b24oJ2ZhIGZhLXRpbWVzJywgewogICAgICAgICAgdGl0bGU6IGxhbmcuaW1hZ2Uuc2hhcGVOb25lLAogICAgICAgICAgZXZlbnQ6ICdpbWFnZVNoYXBlJywKICAgICAgICAgIHZhbHVlOiAnJwogICAgICAgIH0pOwoKICAgICAgICB2YXIgcmVtb3ZlQnV0dG9uID0gdHBsSWNvbkJ1dHRvbignZmEgZmEtdHJhc2gtbycsIHsKICAgICAgICAgIHRpdGxlOiBsYW5nLmltYWdlLnJlbW92ZSwKICAgICAgICAgIGV2ZW50OiAncmVtb3ZlTWVkaWEnLAogICAgICAgICAgdmFsdWU6ICdub25lJwogICAgICAgIH0pOwoKICAgICAgICB2YXIgY29udGVudCA9ICc8ZGl2IGNsYXNzPSJidG4tZ3JvdXAiPicgKyBmdWxsQnV0dG9uICsgaGFsZkJ1dHRvbiArIHF1YXJ0ZXJCdXR0b24gKyAnPC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0iYnRuLWdyb3VwIj4nICsgbGVmdEJ1dHRvbiArIHJpZ2h0QnV0dG9uICsganVzdGlmeUJ1dHRvbiArICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJidG4tZ3JvdXAiPicgKyByb3VuZGVkQnV0dG9uICsgY2lyY2xlQnV0dG9uICsgdGh1bWJuYWlsQnV0dG9uICsgbm9uZUJ1dHRvbiArICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJidG4tZ3JvdXAiPicgKyByZW1vdmVCdXR0b24gKyAnPC9kaXY+JzsKICAgICAgICByZXR1cm4gdHBsUG9wb3Zlcignbm90ZS1pbWFnZS1wb3BvdmVyJywgY29udGVudCk7CiAgICAgIH07CgogICAgICB2YXIgdHBsQWlyUG9wb3ZlciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgY29udGVudCA9ICcnOwogICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbiA9IG9wdGlvbnMuYWlyUG9wb3Zlci5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4ICsrKSB7CiAgICAgICAgICB2YXIgZ3JvdXAgPSBvcHRpb25zLmFpclBvcG92ZXJbaWR4XTsKICAgICAgICAgIGNvbnRlbnQgKz0gJzxkaXYgY2xhc3M9Im5vdGUtJyArIGdyb3VwWzBdICsgJyBidG4tZ3JvdXAiPic7CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuR3JvdXAgPSBncm91cFsxXS5sZW5ndGg7IGkgPCBsZW5Hcm91cDsgaSsrKSB7CiAgICAgICAgICAgIGNvbnRlbnQgKz0gdHBsQnV0dG9uSW5mb1tncm91cFsxXVtpXV0obGFuZywgb3B0aW9ucyk7CiAgICAgICAgICB9CiAgICAgICAgICBjb250ZW50ICs9ICc8L2Rpdj4nOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRwbFBvcG92ZXIoJ25vdGUtYWlyLXBvcG92ZXInLCBjb250ZW50KTsKICAgICAgfTsKCiAgICAgIHJldHVybiAnPGRpdiBjbGFzcz0ibm90ZS1wb3BvdmVyIj4nICsKICAgICAgICAgICAgICAgdHBsTGlua1BvcG92ZXIoKSArCiAgICAgICAgICAgICAgIHRwbEltYWdlUG9wb3ZlcigpICsKICAgICAgICAgICAgICAgKG9wdGlvbnMuYWlyTW9kZSA\\",
    "size": "161499"
}