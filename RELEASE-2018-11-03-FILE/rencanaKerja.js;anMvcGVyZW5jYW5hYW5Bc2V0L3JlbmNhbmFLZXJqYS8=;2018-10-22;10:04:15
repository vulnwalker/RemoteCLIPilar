{
    "namaFile": "js\/perencanaanAset\/rencanaKerja\/rencanaKerja.js",
    "lastUpdate": "2018-10-22+10:04:15.95",
    "contentFile": "dmFyIHJlbmNhbmFLZXJqYUZpbHRlclNLUEQgPSBuZXcgU2twZENscyh7CiAgcHJlZml4OiAicmVuY2FuYUtlcmphIiwKICBmb3JtTmFtZTogInJlbmNhbmFLZXJqYUZvcm0iLAogIHBpbGloVXJ1c2FuZnRlcjogZnVuY3Rpb24oKSB7CiAgICByZW5jYW5hS2VyamEuZmlsdGVyUmVuZGVyKHRydWUpOwogIH0sCiAgcGlsaWhCaWRhbmdBZnRlcjogZnVuY3Rpb24oKSB7CiAgICByZW5jYW5hS2VyamEuZmlsdGVyUmVuZGVyKHRydWUpOwogIH0sCiAgcGlsaWhVbml0QWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgcmVuY2FuYUtlcmphLmZpbHRlclJlbmRlcih0cnVlKTsKICB9LAogIHBpbGloU3ViVW5pdEFmdGVyOiBmdW5jdGlvbigpIHsKICAgIHJlbmNhbmFLZXJqYS5maWx0ZXJSZW5kZXIodHJ1ZSk7CiAgfSwKICBwaWxpaFNla3NpQWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgcmVuY2FuYUtlcmphLmZpbHRlclJlbmRlcih0cnVlKTsKICB9Cn0pOwp2YXIgcmVuY2FuYUtlcmphID0gbmV3IERhZnRhck9iajIoewogIHByZWZpeDogInJlbmNhbmFLZXJqYSIsCiAgdXJsOiAicGFnZXMucGhwP1BnPXJlbmNhbmFLZXJqYSIsCiAgZm9ybU5hbWU6ICJyZW5jYW5hS2VyamFGb3JtIiwKICByZW5jYW5hS2VyamFfZm9ybTogIjAiLAogIGxvYWRpbmc6IGZ1bmN0aW9uKCkgewogICAgdGhpcy50b3BCYXJSZW5kZXIoKTsKICAgIHRoaXMuZmlsdGVyUmVuZGVyKCk7CiAgICB0aGlzLmRhZnRhclJlbmRlcigpOwogICAgdGhpcy5zdW1IYWxSZW5kZXIoKTsKICB9LAogIGZpbHRlclJlbmRlckFmdGVyOiBmdW5jdGlvbigpIHsKICAgIC8vIHRoaXMuZGFmdGFyUmVuZGVyKCk7CiAgfSwKICBkYWZ0YXJSZW5kZXI6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsgLy9yZW5kZXIgZGFmdGFyCiAgICBhZGRDb3ZlclBhZ2UyKCJkYWZ0YXJfY292ZXIiLCAxLCB0cnVlLCB0cnVlLCB7CiAgICAgIHJlbmRlclRvOiB0aGlzLnByZWZpeCArICJfY29udF9kYWZ0YXIiLAogICAgICBpbWdzcmM6ICJpbWFnZXMvd2FpdC5naWYiLAogICAgICBzdHlsZTogeyBwb3NpdGlvbjogImFic29sdXRlIiwgdG9wOiAiNSIsIGxlZnQ6ICI1IiB9CiAgICB9KTsKCiAgICAkLmFqYXgoewogICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPWRhZnRhciIsCiAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgZGF0YTogJCgiIyIgKyB0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtZS5wcmVmaXggKyAiX2NvbnRfZGFmdGFyIikuaW5uZXJIVE1MID0KICAgICAgICAgIHJlc3AuY29udGVudDsKICAgICAgICBtZS5zdW1IYWxSZW5kZXIoKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBHcmFiQVBJOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CgogICAgaWYgKGNvbmZpcm0oIkFtYmlsIGRhdGEgcmVuY2FuYSBrZXJqYSB0YWh1biBhbmdnYXJhbiAyMDE5IGFuZ2dhcmFuIE1VUk5JIGRhcmkgd2ViIHNlcnZpY2UgPyIpKSB7CiAgICAgIHZhciBjb3ZlciA9IHRoaXMucHJlZml4ICsgIl9oYXB1c2NvdmVyIjsKICAgICAgYWRkQ292ZXJQYWdlMihjb3ZlciwgNSwgdHJ1ZSwgZmFsc2UpOwogICAgICAkLmFqYXgoewogICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICBkYXRhOiAkKCIjIiArIHRoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogICAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9R3JhYkFQSSIsCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgICAgZGVsRWxlbShjb3Zlcik7CiAgICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICAgYWxlcnQoIlN1a3NlcyBpbnB1dCAiK3Jlc3AuY29udGVudC5zdWNjZXNzSW5zZXJ0KyAiIGRhdGEgIik7CiAgICAgICAgICAgIG1lLnJlZnJlc2hMaXN0KHRydWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgICAgICBpZihyZXNwLmVyciA9PSAnQWRhIHNrcGQgeWFuZyB0aWRhayB0ZXJkYWZ0YXIgIScpewogICAgICAgICAgICAgIHJlbmNhbmFLZXJqYS5zaG93RXJyb3JEaWFsb2dBUEkocmVzcC5jb250ZW50LmZhaWxlZFJlcXVlc3QpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LAogIHNob3dFcnJvckRpYWxvZ0FQSTogZnVuY3Rpb24oZXJyb3JMb2cpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybWNvdmVyIjsKICAgICQuYWpheCh7CiAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1zaG93RXJyb3JEaWFsb2dBUEkiLAogICAgICBkYXRhOiB7ZXJyb3JMb2cgOiBlcnJvckxvZ30sCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAvLyBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICAgICAgICBhZGRDb3ZlclBhZ2UyKGNvdmVyLCA1LCB0cnVlLCBmYWxzZSk7CiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb3ZlcikuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9LAogIENsZWFySW50ZWdyYXNpOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CgogICAgaWYgKGNvbmZpcm0oIkhhcHVzIGRhdGEgaW50ZWdyYXNpID8iKSkgewogICAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfaGFwdXNjb3ZlciI7CiAgICAgIGFkZENvdmVyUGFnZTIoY292ZXIsIDUsIHRydWUsIGZhbHNlKTsKICAgICAgJC5hamF4KHsKICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgZGF0YTogJCgiIyIgKyB0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAgICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPUNsZWFySW50ZWdyYXNpIiwKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgICBkZWxFbGVtKGNvdmVyKTsKICAgICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgICBhbGVydCgiU3Vrc2VzIGhhcHVzICIrcmVzcC5jb250ZW50LmRhdGFJbnRlZ3Jhc2krICIgZGF0YSAiKTsKICAgICAgICAgICAgbWUucmVmcmVzaExpc3QodHJ1ZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LAogIEJhcnU6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgIGVycm1zZyA9ICIiOwogICAgaWYgKCQoIiNmaWx0ZXJVcnVzYW4iKS52YWwoKSA9PSAiMDAiKSB7CiAgICAgIGVycm1zZyA9ICJQaWxpaCBVcnVzYW4iOwogICAgfSBlbHNlIGlmICgkKCIjZmlsdGVyU0tQRCIpLnZhbCgpID09ICIwMCIpIHsKICAgICAgZXJybXNnID0gIlBpbGloIEJpZGFuZyI7CiAgICB9IGVsc2UgaWYgKCQoIiNmaWx0ZXJTS1BEIikudmFsKCkgPT0gIjAwIikgewogICAgICBlcnJtc2cgPSAiUGlsaWggU0tQRCI7CiAgICB9CiAgICBpZiAoZXJybXNnID09ICIiKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICAgIHZhciBhRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZm9ybU5hbWUpOwogICAgICAkLmFqYXgoewogICAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9QmFydSIsCiAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAgICQoIiNuZXdCbGFua1BhZ2UiKS52YWwoIjEiKTsKICAgICAgICAgICAgYUZvcm0uYWN0aW9uID0gInBhZ2VzLnBocD9QZz1yZW5jYW5hS2VyamFJbnMiOwogICAgICAgICAgICBhRm9ybS50YXJnZXQgPSAiX2JsYW5rIjsKICAgICAgICAgICAgYUZvcm0uc3VibWl0KCk7CiAgICAgICAgICAgIGFGb3JtLnRhcmdldCA9ICIiOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBhbGVydChlcnJtc2cpOwogICAgfQogIH0sCgogIEhhcHVzOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5wcmVmaXggKyAiX2ptbGNlayIpKSB7CiAgICAgIHZhciBqbWxjZWsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnByZWZpeCArICJfam1sY2VrIikudmFsdWU7CiAgICB9IGVsc2UgewogICAgICB2YXIgam1sY2VrID0gIiI7CiAgICB9CgogICAgaWYgKGptbGNlayA9PSAwKSB7CiAgICAgIGFsZXJ0KCJEYXRhIEJlbHVtIERpcGlsaWghIik7CiAgICB9IGVsc2UgewogICAgICBpZiAoY29uZmlybSgiWWFraW4gSGFwdXMgIiArIGptbGNlayArICIgRGF0YSA\",
    "size": "11817"
}