{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Writer\/Excel5\/Worksheet.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\\/IDEgOiAwOyAvLyAxCiAgICAgICAgJGZEc3BSd0NvbCAgICAgID0gJHRoaXMtPnBocFNoZWV0LT5nZXRTaG93Um93Q29sSGVhZGVycygpID8gMSA6IDA7IC8vIDIKICAgICAgICAkZkZyb3plbiAgICAgICAgPSAkdGhpcy0+cGhwU2hlZXQtPmdldEZyZWV6ZVBhbmUoKSA\/IDEgOiAwOyAgICAgICAgLy8gMwogICAgICAgICRmRHNwWmVyb3MgICAgICA9IDE7ICAgICAgICAgICAgICAgICAgICAgLy8gNAogICAgICAgICRmRGVmYXVsdEhkciAgICA9IDE7ICAgICAgICAgICAgICAgICAgICAgLy8gNQogICAgICAgICRmQXJhYmljICAgICAgICA9ICR0aGlzLT5waHBTaGVldC0+Z2V0UmlnaHRUb0xlZnQoKSA\/IDEgOiAwOyAvLyA2CiAgICAgICAgJGZEc3BHdXRzICAgICAgID0gJHRoaXMtPm91dGxpbmVPbjsgICAgLy8gNwogICAgICAgICRmRnJvemVuTm9TcGxpdCA9IDA7ICAgICAgICAgICAgICAgICAgICAgLy8gMCAtIGJpdAogICAgICAgIC8vIG5vIHN1cHBvcnQgaW4gUEhQRXhjZWwgZm9yIHNlbGVjdGVkIHNoZWV0LCB0aGVyZWZvcmUgc2hlZXQgaXMgb25seSBzZWxlY3RlZCBpZiBpdCBpcyB0aGUgYWN0aXZlIHNoZWV0CiAgICAgICAgJGZTZWxlY3RlZCAgICAgID0gKCR0aGlzLT5waHBTaGVldCA9PT0gJHRoaXMtPnBocFNoZWV0LT5nZXRQYXJlbnQoKS0+Z2V0QWN0aXZlU2hlZXQoKSkgPyAxIDogMDsKICAgICAgICAkZlBhZ2VkICAgICAgICAgPSAxOyAgICAgICAgICAgICAgICAgICAgIC8vIDIKICAgICAgICAkZlBhZ2VCcmVha1ByZXZpZXcgPSAkdGhpcy0+cGhwU2hlZXQtPmdldFNoZWV0VmlldygpLT5nZXRWaWV3KCkgPT09IFBIUEV4Y2VsX1dvcmtzaGVldF9TaGVldFZpZXc6OlNIRUVUVklFV19QQUdFX0JSRUFLX1BSRVZJRVc7CgogICAgICAgICRncmJpdCAgICAgICAgICAgICA9ICRmRHNwRm1sYTsKICAgICAgICAkZ3JiaXQgICAgICAgICAgICB8PSAkZkRzcEdyaWQgICAgICAgPDwgMTsKICAgICAgICAkZ3JiaXQgICAgICAgICAgICB8PSAkZkRzcFJ3Q29sICAgICAgIDw8IDI7CiAgICAgICAgJGdyYml0ICAgICAgICAgICAgfD0gJGZGcm96ZW4gICAgICAgICAgIDw8IDM7CiAgICAgICAgJGdyYml0ICAgICAgICAgICAgfD0gJGZEc3BaZXJvcyAgICAgICA8PCA0OwogICAgICAgICRncmJpdCAgICAgICAgICAgIHw9ICRmRGVmYXVsdEhkciAgICAgICA8PCA1OwogICAgICAgICRncmJpdCAgICAgICAgICAgIHw9ICRmQXJhYmljICAgICAgICAgICA8PCA2OwogICAgICAgICRncmJpdCAgICAgICAgICAgIHw9ICRmRHNwR3V0cyAgICAgICA8PCA3OwogICAgICAgICRncmJpdCAgICAgICAgICAgIHw9ICRmRnJvemVuTm9TcGxpdCA8PCA4OwogICAgICAgICRncmJpdCAgICAgICAgICAgIHw9ICRmU2VsZWN0ZWQgICAgICAgPDwgOTsKICAgICAgICAkZ3JiaXQgICAgICAgICAgICB8PSAkZlBhZ2VkICAgICAgICAgICA8PCAxMDsKICAgICAgICAkZ3JiaXQgICAgICAgICAgICB8PSAkZlBhZ2VCcmVha1ByZXZpZXcgPDwgMTE7CgogICAgICAgICRoZWFkZXIgID0gcGFjaygidnYiLCAkcmVjb3JkLCAkbGVuZ3RoKTsKICAgICAgICAkZGF0YSAgICA9IHBhY2soInZ2diIsICRncmJpdCwgJHJ3VG9wLCAkY29sTGVmdCk7CgogICAgICAgIC8vIEZJWE1FICEhIQogICAgICAgICRyZ2JIZHIgICAgICAgPSAweDAwNDA7IC8vIFJvdy9jb2x1bW4gaGVhZGluZyBhbmQgZ3JpZGxpbmUgY29sb3IgaW5kZXgKICAgICAgICAkem9vbV9mYWN0b3JfcGFnZV9icmVhayA9ICgkZlBhZ2VCcmVha1ByZXZpZXcgPyAkdGhpcy0+cGhwU2hlZXQtPmdldFNoZWV0VmlldygpLT5nZXRab29tU2NhbGUoKSA6IDB4MDAwMCk7CiAgICAgICAgJHpvb21fZmFjdG9yX25vcm1hbCA9ICAkdGhpcy0+cGhwU2hlZXQtPmdldFNoZWV0VmlldygpLT5nZXRab29tU2NhbGVOb3JtYWwoKTsKCiAgICAgICAgJGRhdGEgLj0gcGFjaygidnZ2dlYiLCAkcmdiSGRyLCAweDAwMDAsICR6b29tX2ZhY3Rvcl9wYWdlX2JyZWFrLCAkem9vbV9mYWN0b3Jfbm9ybWFsLCAweDAwMDAwMDAwKTsKCiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyLiRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIEJJRkYgcmVjb3JkIERFRkFVTFRST1dIRUlHSFQuCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gd3JpdGVEZWZhdWx0Um93SGVpZ2h0KCkKICAgIHsKICAgICAgICAkZGVmYXVsdFJvd0hlaWdodCA9ICR0aGlzLT5waHBTaGVldC0+Z2V0RGVmYXVsdFJvd0RpbWVuc2lvbigpLT5nZXRSb3dIZWlnaHQoKTsKCiAgICAgICAgaWYgKCRkZWZhdWx0Um93SGVpZ2h0IDwgMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBjb252ZXJ0IHRvIHR3aXBzCiAgICAgICAgJGRlZmF1bHRSb3dIZWlnaHQgPSAoaW50KSAyMCAqICRkZWZhdWx0Um93SGVpZ2h0OwoKICAgICAgICAkcmVjb3JkICAgPSAweDAyMjU7ICAgICAgLy8gUmVjb3JkIGlkZW50aWZpZXIKICAgICAgICAkbGVuZ3RoICAgPSAweDAwMDQ7ICAgICAgLy8gTnVtYmVyIG9mIGJ5dGVzIHRvIGZvbGxvdwoKICAgICAgICAkaGVhZGVyICAgPSBwYWNrKCJ2diIsICRyZWNvcmQsICRsZW5ndGgpOwogICAgICAgICRkYXRhICAgICA9IHBhY2soInZ2IiwgMSwgJGRlZmF1bHRSb3dIZWlnaHQpOwogICAgICAgICR0aGlzLT5hcHBlbmQoJGhlYWRlciAuICRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIEJJRkYgcmVjb3JkIERFRkNPTFdJRFRIIGlmIENPTElORk8gcmVjb3JkcyBhcmUgaW4gdXNlLgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlRGVmY29sKCkKICAgIHsKICAgICAgICAkZGVmYXVsdENvbFdpZHRoID0gODsKCiAgICAgICAgJHJlY29yZCAgID0gMHgwMDU1OyAgICAgIC8vIFJlY29yZCBpZGVudGlmaWVyCiAgICAgICAgJGxlbmd0aCAgID0gMHgwMDAyOyAgICAgIC8vIE51bWJlciBvZiBieXRlcyB0byBmb2xsb3cKCiAgICAgICAgJGhlYWRlciA9IHBhY2soInZ2IiwgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgPSBwYWNrKCJ2IiwgJGRlZmF1bHRDb2xXaWR0aCk7CiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJGRhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogV3JpdGUgQklGRiByZWNvcmQgQ09MSU5GTyB0byBkZWZpbmUgY29sdW1uIHdpZHRocwogICAgICoKICAgICAqIE5vdGU6IFRoZSBTREsgc2F5cyB0aGUgcmVjb3JkIGxlbmd0aCBpcyAweDBCIGJ1dCBFeGNlbCB3cml0ZXMgYSAweDBDCiAgICAgKiBsZW5ndGggcmVjb3JkLgogICAgICoKICAgICAqIEBwYXJhbSBhcnJheSAkY29sX2FycmF5IFRoaXMgaXMgdGhlIG9ubHkgcGFyYW1ldGVyIHJlY2VpdmVkIGFuZCBpcyBjb21wb3NlZCBvZiB0aGUgZm9sbG93aW5nOgogICAgICogICAgICAgICAgICAgICAgMCA9PiBGaXJzdCBmb3JtYXR0ZWQgY29sdW1uLAogICAgICogICAgICAgICAgICAgICAgMSA9PiBMYXN0IGZvcm1hdHRlZCBjb2x1bW4sCiAgICAgKiAgICAgICAgICAgICAgICAyID0+IENvbCB3aWR0aCAoOC40MyBpcyBFeGNlbCBkZWZhdWx0KSwKICAgICAqICAgICAgICAgICAgICAgIDMgPT4gVGhlIG9wdGlvbmFsIFhGIGZvcm1hdCBvZiB0aGUgY29sdW1uLAogICAgICogICAgICAgICAgICAgICAgNCA9PiBPcHRpb24gZmxhZ3MuCiAgICAgKiAgICAgICAgICAgICAgICA1ID0+IE9wdGlvbmFsIG91dGxpbmUgbGV2ZWwKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiB3cml0ZUNvbGluZm8oJGNvbF9hcnJheSkKICAgIHsKICAgICAgICBpZiAoaXNzZXQoJGNvbF9hcnJheVswXSkpIHsKICAgICAgICAgICAgJGNvbEZpcnN0ID0gJGNvbF9hcnJheVswXTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzc2V0KCRjb2xfYXJyYXlbMV0pKSB7CiAgICAgICAgICAgICRjb2xMYXN0ID0gJGNvbF9hcnJheVsxXTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzc2V0KCRjb2xfYXJyYXlbMl0pKSB7CiAgICAgICAgICAgICRjb2xkeCA9ICRjb2xfYXJyYXlbMl07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJGNvbGR4ID0gOC40MzsKICAgICAgICB9CiAgICAgICAgaWYgKGlzc2V0KCRjb2xfYXJyYXlbM10pKSB7CiAgICAgICAgICAgICR4ZkluZGV4ID0gJGNvbF9hcnJheVszXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkeGZJbmRleCA9IDE1OwogICAgICAgIH0KICAgICAgICBpZiAoaXNzZXQoJGNvbF9hcnJheVs0XSkpIHsKICAgICAgICAgICAgJGdyYml0ID0gJGNvbF9hcnJheVs0XTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkZ3JiaXQgPSAwOwogICAgICAgIH0KICAgICAgICBpZiAoaXNzZXQoJGNvbF9hcnJheVs1XSkpIHsKICAgICAgICAgICAgJGxldmVsID0gJGNvbF9hcnJheVs1XTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkbGV2ZWwgPSAwOwogICAgICAgIH0KICAgICAgICAkcmVjb3JkICAgPSAweDAwN0Q7ICAgICAgICAgIC8vIFJlY29yZCBpZGVudGlmaWVyCiAgICAgICAgJGxlbmd0aCAgID0gMHgwMDBDOyAgICAgICAgICAvLyBOdW1iZXIgb2YgYnl0ZXMgdG8gZm9sbG93CgogICAgICAgICRjb2xkeCAgICo9IDI1NjsgICAgICAgICAgICAgLy8gQ29udmVydCB0byB1bml0cyBvZiAxLzI1NiBvZiBhIGNoYXIKCiAgICAgICAgJGl4ZmUgICAgID0gJHhmSW5kZXg7CiAgICAgICAgJHJlc2VydmVkID0gMHgwMDAwOyAgICAgICAgICAgIC8vIFJlc2VydmVkCgogICAgICAgICRsZXZlbCA9IG1heCgwLCBtaW4oJGxldmVsLCA3KSk7CiAgICAgICAgJGdyYml0IHw9ICRsZXZlbCA8PCA4OwoKICAgICAgICAkaGVhZGVyICAgPSBwYWNrKCJ2diIsICRyZWNvcmQsICRsZW5ndGgpOwogICAgICAgICRkYXRhICAgICA9IHBhY2soInZ2dnZ2diIsICRjb2xGaXJzdCwgJGNvbExhc3QsICRjb2xkeCwgJGl4ZmUsICRncmJpdCwgJHJlc2VydmVkKTsKICAgICAgICAkdGhpcy0+YXBwZW5kKCRoZWFkZXIuJGRhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogV3JpdGUgQklGRiByZWNvcmQgU0VMRUNUSU9OLgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlU2VsZWN0aW9uKCkKICAgIHsKICAgICAgICAvLyBsb29rIHVwIHRoZSBzZWxlY3RlZCBjZWxsIHJhbmdlCiAgICAgICAgJHNlbGVjdGVkQ2VsbHMgPSAkdGhpcy0+cGhwU2hlZXQtPmdldFNlbGVjdGVkQ2VsbHMoKTsKICAgICAgICAkc2VsZWN0ZWRDZWxscyA9IFBIUEV4Y2VsX0NlbGw6OnNwbGl0UmFuZ2UoJHRoaXMtPnBocFNoZWV0LT5nZXRTZWxlY3RlZENlbGxzKCkpOwogICAgICAgICRzZWxlY3RlZENlbGxzID0gJHNlbGVjdGVkQ2VsbHNbMF07CiAgICAgICAgaWYgKGNvdW50KCRzZWxlY3RlZENlbGxzKSA9PSAyKSB7CiAgICAgICAgICAgIGxpc3QoJGZpcnN0LCAkbGFzdCkgPSAkc2VsZWN0ZWRDZWxsczsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkZmlyc3QgPSAkc2VsZWN0ZWRDZWxsc1swXTsKICAgICAgICAgICAgJGxhc3QgID0gJHNlbGVjdGVkQ2VsbHNbMF07CiAgICAgICAgfQoKICAgICAgICBsaXN0KCRjb2xGaXJzdCwgJHJ3Rmlyc3QpID0gUEhQRXhjZWxfQ2VsbDo6Y29vcmRpbmF0ZUZyb21TdHJpbmcoJGZpcnN0KTsKICAgICAgICAkY29sRmlyc3QgPSBQSFBFeGNlbF9DZWxsOjpjb2x1bW5JbmRleEZyb21TdHJpbmcoJGNvbEZpcnN0KSAtIDE7IC8vIGJhc2UgMCBjb2x1bW4gaW5kZXgKICAgICAgICAtLSRyd0ZpcnN0OyAvLyBiYXNlIDAgcm93IGluZGV4CgogICAgICAgIGxpc3QoJGNvbExhc3QsICRyd0xhc3QpID0gUEhQRXhjZWxfQ2VsbDo6Y29vcmRpbmF0ZUZyb21TdHJpbmcoJGxhc3QpOwogICAgICAgICRjb2xMYXN0ID0gUEhQRXhjZWxfQ2VsbDo6Y29sdW1uSW5kZXhGcm9tU3RyaW5nKCRjb2xMYXN0KSAtIDE7IC8vIGJhc2UgMCBjb2x1bW4gaW5kZXgKICAgICAgICAtLSRyd0xhc3Q7IC8vIGJhc2UgMCByb3cgaW5kZXgKCiAgICAgICAgLy8gbWFrZSBzdXJlIHdlIGFyZSBub3Qgb3V0IG9mIGJvdW5kcwogICAgICAgICRjb2xGaXJzdCA9IG1pbigkY29sRmlyc3QsIDI1NSk7CiAgICAgICAgJGNvbExhc3QgID0gbWluKCRjb2xMYXN0LCAyNTUpOwoKICAgICAgICAkcndGaXJzdCA9IG1pbigkcndGaXJzdCwgNjU1MzUpOwogICAgICAgICRyd0xhc3QgID0gbWluKCRyd0xhc3QsIDY1NTM1KTsKCiAgICAgICAgJHJlY29yZCAgID0gMHgwMDFEOyAgICAgICAgICAgICAgICAgIC8vIFJlY29yZCBpZGVudGlmaWVyCiAgICAgICAgJGxlbmd0aCAgID0gMHgwMDBGOyAgICAgICAgICAgICAgICAgIC8vIE51bWJlciBvZiBieXRlcyB0byBmb2xsb3cKCiAgICAgICAgJHBubiAgICAgID0gJHRoaXMtPmFjdGl2ZVBhbmU7ICAgICAvLyBQYW5lIHBvc2l0aW9uCiAgICAgICAgJHJ3QWN0ICAgID0gJHJ3Rmlyc3Q7ICAgICAgICAgICAgICAgIC8vIEFjdGl2ZSByb3cKICAgICAgICAkY29sQWN0ICAgPSAkY29sRmlyc3Q7ICAgICAgICAgICAgICAgLy8gQWN0aXZlIGNvbHVtbgogICAgICAgICRpcmVmQWN0ICA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAvLyBBY3RpdmUgY2VsbCByZWYKICAgICAgICAkY3JlZiAgICAgPSAxOyAgICAgICAgICAgICAgICAgICAgICAgLy8gTnVtYmVyIG9mIHJlZnMKCiAgICAgICAgaWYgKCFpc3NldCgkcndMYXN0KSkgewogICAgICAgICAgICAkcndMYXN0ICAgPSAkcndGaXJzdDsgICAgICAgLy8gTGFzdCAgcm93IGluIHJlZmVyZW5jZQogICAgICAgIH0KICAgICAgICBpZiAoIWlzc2V0KCRjb2xMYXN0KSkgewogICAgICAgICAgICAkY29sTGFzdCAgPSAkY29sRmlyc3Q7ICAgICAgLy8gTGFzdCAgY29sIGluIHJlZmVyZW5jZQogICAgICAgIH0KCiAgICAgICAgLy8gU3dhcCBsYXN0IHJvdy9jb2wgZm9yIGZpcnN0IHJvdy9jb2wgYXMgbmVjZXNzYXJ5CiAgICAgICAgaWYgKCRyd0ZpcnN0ID4gJHJ3TGFzdCkgewogICAgICAgICAgICBsaXN0KCRyd0ZpcnN0LCAkcndMYXN0KSA9IGFycmF5KCRyd0xhc3QsICRyd0ZpcnN0KTsKICAgICAgICB9CgogICAgICAgIGlmICgkY29sRmlyc3QgPiAkY29sTGFzdCkgewogICAgICAgICAgICBsaXN0KCRjb2xGaXJzdCwgJGNvbExhc3QpID0gYXJyYXkoJGNvbExhc3QsICRjb2xGaXJzdCk7CiAgICAgICAgfQoKICAgICAgICAkaGVhZGVyICAgPSBwYWNrKCJ2diIsICRyZWNvcmQsICRsZW5ndGgpOwogICAgICAgICRkYXRhICAgICA9IHBhY2soIkN2dnZ2dnZDQyIsICRwbm4sICRyd0FjdCwgJGNvbEFjdCwgJGlyZWZBY3QsICRjcmVmLCAkcndGaXJzdCwgJHJ3TGFzdCwgJGNvbEZpcnN0LCAkY29sTGFzdCk7CiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJGRhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogU3RvcmUgdGhlIE1FUkdFRENFTExTIHJlY29yZHMgZm9yIGFsbCByYW5nZXMgb2YgbWVyZ2VkIGNlbGxzCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gd3JpdGVNZXJnZWRDZWxscygpCiAgICB7CiAgICAgICAgJG1lcmdlQ2VsbHMgPSAkdGhpcy0+cGhwU2hlZXQtPmdldE1lcmdlQ2VsbHMoKTsKICAgICAgICAkY291bnRNZXJnZUNlbGxzID0gY291bnQoJG1lcmdlQ2VsbHMpOwoKICAgICAgICBpZiAoJGNvdW50TWVyZ2VDZWxscyA9PSAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIC8vIG1heGltdW0gYWxsb3dlZCBudW1iZXIgb2YgbWVyZ2VkIGNlbGxzIHBlciByZWNvcmQKICAgICAgICAkbWF4Q291bnRNZXJnZUNlbGxzUGVyUmVjb3JkID0gMTAyNzsKCiAgICAgICAgLy8gcmVjb3JkIGlkZW50aWZpZXIKICAgICAgICAkcmVjb3JkID0gMHgwMEU1OwoKICAgICAgICAvLyBjb3VudGVyIGZvciB0b3RhbCBudW1iZXIgb2YgbWVyZ2VkIGNlbGxzIHRyZWF0ZWQgc28gZmFyIGJ5IHRoZSB3cml0ZXIKICAgICAgICAkaSA9IDA7CgogICAgICAgIC8vIGNvdW50ZXIgZm9yIG51bWJlciBvZiBtZXJnZWQgY2VsbHMgd3JpdHRlbiBpbiByZWNvcmQgY3VycmVudGx5IGJlaW5nIHdyaXR0ZW4KICAgICAgICAkaiA9IDA7CgogICAgICAgIC8vIGluaXRpYWxpemUgcmVjb3JkIGRhdGEKICAgICAgICAkcmVjb3JkRGF0YSA9ICcnOwoKICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIG1lcmdlZCBjZWxscwogICAgICAgIGZvcmVhY2ggKCRtZXJnZUNlbGxzIGFzICRtZXJnZUNlbGwpIHsKICAgICAgICAgICAgKyskaTsKICAgICAgICAgICAgKyskajsKCiAgICAgICAgICAgIC8vIGV4dHJhY3QgdGhlIHJvdyBhbmQgY29sdW1uIGluZGV4ZXMKICAgICAgICAgICAgJHJhbmdlID0gUEhQRXhjZWxfQ2VsbDo6c3BsaXRSYW5nZSgkbWVyZ2VDZWxsKTsKICAgICAgICAgICAgbGlzdCgkZmlyc3QsICRsYXN0KSA9ICRyYW5nZVswXTsKICAgICAgICAgICAgbGlzdCgkZmlyc3RDb2x1bW4sICRmaXJzdFJvdykgPSBQSFBFeGNlbF9DZWxsOjpjb29yZGluYXRlRnJvbVN0cmluZygkZmlyc3QpOwogICAgICAgICAgICBsaXN0KCRsYXN0Q29sdW1uLCAkbGFzdFJvdykgPSBQSFBFeGNlbF9DZWxsOjpjb29yZGluYXRlRnJvbVN0cmluZygkbGFzdCk7CgogICAgICAgICAgICAkcmVjb3JkRGF0YSAuPSBwYWNrKCd2dnZ2JywgJGZpcnN0Um93IC0gMSwgJGxhc3RSb3cgLSAxLCBQSFBFeGNlbF9DZWxsOjpjb2x1bW5JbmRleEZyb21TdHJpbmcoJGZpcnN0Q29sdW1uKSAtIDEsIFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkbGFzdENvbHVtbikgLSAxKTsKCiAgICAgICAgICAgIC8vIGZsdXNoIHJlY29yZCBpZiB3ZSBoYXZlIHJlYWNoZWQgbGltaXQgZm9yIG51bWJlciBvZiBtZXJnZWQgY2VsbHMsIG9yIHJlYWNoZWQgZmluYWwgbWVyZ2VkIGNlbGwKICAgICAgICAgICAgaWYgKCRqID09ICRtYXhDb3VudE1lcmdlQ2VsbHNQZXJSZWNvcmQgb3IgJGkgPT0gJGNvdW50TWVyZ2VDZWxscykgewogICAgICAgICAgICAgICAgJHJlY29yZERhdGEgPSBwYWNrKCd2JywgJGopIC4gJHJlY29yZERhdGE7CiAgICAgICAgICAgICAgICAkbGVuZ3RoID0gc3RybGVuKCRyZWNvcmREYXRhKTsKICAgICAgICAgICAgICAgICRoZWFkZXIgPSBwYWNrKCd2dicsICRyZWNvcmQsICRsZW5ndGgpOwogICAgICAgICAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJHJlY29yZERhdGEpOwoKICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemUgZm9yIG5leHQgcmVjb3JkLCBpZiBhbnkKICAgICAgICAgICAgICAgICRyZWNvcmREYXRhID0gJyc7CiAgICAgICAgICAgICAgICAkaiA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBXcml0ZSBTSEVFVExBWU9VVCByZWNvcmQKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiB3cml0ZVNoZWV0TGF5b3V0KCkKICAgIHsKICAgICAgICBpZiAoISR0aGlzLT5waHBTaGVldC0+aXNUYWJDb2xvclNldCgpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgICRyZWNvcmREYXRhID0gcGFjaygKICAgICAgICAgICAgJ3Z2VlZWdnYnLAogICAgICAgICAgICAweDA4NjIsCiAgICAgICAgICAgIDB4MDAwMCwgLy8gdW51c2VkCiAgICAgICAgICAgIDB4MDAwMDAwMDAsIC8vIHVudXNlZAogICAgICAgICAgICAweDAwMDAwMDAwLCAvLyB1bnVzZWQKICAgICAgICAgICAgMHgwMDAwMDAxNCwgLy8gc2l6ZSBvZiByZWNvcmQgZGF0YQogICAgICAgICAgICAkdGhpcy0+Y29sb3JzWyR0aGlzLT5waHBTaGVldC0+Z2V0VGFiQ29sb3IoKS0+Z2V0UkdCKCldLCAvLyBjb2xvciBpbmRleAogICAgICAgICAgICAweDAwMDAgICAgICAgIC8vIHVudXNlZAogICAgICAgICk7CgogICAgICAgICRsZW5ndGggPSBzdHJsZW4oJHJlY29yZERhdGEpOwoKICAgICAgICAkcmVjb3JkID0gMHgwODYyOyAvLyBSZWNvcmQgaWRlbnRpZmllcgogICAgICAgICRoZWFkZXIgPSBwYWNrKCd2dicsICRyZWNvcmQsICRsZW5ndGgpOwogICAgICAgICR0aGlzLT5hcHBlbmQoJGhlYWRlciAuICRyZWNvcmREYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIFNIRUVUUFJPVEVDVElPTgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlU2hlZXRQcm90ZWN0aW9uKCkKICAgIHsKICAgICAgICAvLyByZWNvcmQgaWRlbnRpZmllcgogICAgICAgICRyZWNvcmQgPSAweDA4Njc7CgogICAgICAgIC8vIHByZXBhcmUgb3B0aW9ucwogICAgICAgICRvcHRpb25zICA9ICAgKGludCkgISR0aGlzLT5waHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRPYmplY3RzKCkKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0U2NlbmFyaW9zKCkgICAgICAgICAgIDw8IDEKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0Rm9ybWF0Q2VsbHMoKSAgICAgICAgIDw8IDIKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0Rm9ybWF0Q29sdW1ucygpICAgICAgIDw8IDMKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0Rm9ybWF0Um93cygpICAgICAgICAgIDw8IDQKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0SW5zZXJ0Q29sdW1ucygpICAgICAgIDw8IDUKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0SW5zZXJ0Um93cygpICAgICAgICAgIDw8IDYKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0SW5zZXJ0SHlwZXJsaW5rcygpICAgIDw8IDcKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0RGVsZXRlQ29sdW1ucygpICAgICAgIDw8IDgKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0RGVsZXRlUm93cygpICAgICAgICAgIDw8IDkKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0U2VsZWN0TG9ja2VkQ2VsbHMoKSAgIDw8IDEwCiAgICAgICAgICAgICAgICAgICAgfCAoaW50KSAhJHRoaXMtPnBocFNoZWV0LT5nZXRQcm90ZWN0aW9uKCktPmdldFNvcnQoKSAgICAgICAgICAgICAgICA8PCAxMQogICAgICAgICAgICAgICAgICAgIHwgKGludCkgISR0aGlzLT5waHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRBdXRvRmlsdGVyKCkgICAgICAgICAgPDwgMTIKICAgICAgICAgICAgICAgICAgICB8IChpbnQpICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0UGl2b3RUYWJsZXMoKSAgICAgICAgIDw8IDEzCiAgICAgICAgICAgICAgICAgICAgfCAoaW50KSAhJHRoaXMtPnBocFNoZWV0LT5nZXRQcm90ZWN0aW9uKCktPmdldFNlbGVjdFVubG9ja2VkQ2VsbHMoKSA8PCAxNCA7CgogICAgICAgIC8vIHJlY29yZCBkYXRhCiAgICAgICAgJHJlY29yZERhdGEgPSBwYWNrKAogICAgICAgICAgICAndlZWQ1ZWdnYnLAogICAgICAgICAgICAweDA4NjcsIC8vIHJlcGVhdGVkIHJlY29yZCBpZGVudGlmaWVyCiAgICAgICAgICAgIDB4MDAwMCwgLy8gbm90IHVzZWQKICAgICAgICAgICAgMHgwMDAwLCAvLyBub3QgdXNlZAogICAgICAgICAgICAweDAwLCAvLyBub3QgdXNlZAogICAgICAgICAgICAweDAxMDAwMjAwLCAvLyB1bmtub3duIGRhdGEKICAgICAgICAgICAgMHhGRkZGRkZGRiwgLy8gdW5rbm93biBkYXRhCiAgICAgICAgICAgICRvcHRpb25zLCAvLyBvcHRpb25zCiAgICAgICAgICAgIDB4MDAwMCAvLyBub3QgdXNlZAogICAgICAgICk7CgogICAgICAgICRsZW5ndGggPSBzdHJsZW4oJHJlY29yZERhdGEpOwogICAgICAgICRoZWFkZXIgPSBwYWNrKCd2dicsICRyZWNvcmQsICRsZW5ndGgpOwoKICAgICAgICAkdGhpcy0+YXBwZW5kKCRoZWFkZXIgLiAkcmVjb3JkRGF0YSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBXcml0ZSBCSUZGIHJlY29yZCBSQU5HRVBST1RFQ1RJT04KICAgICAqCiAgICAgKiBPcGVub2ZmaWNlLm9yZydzIERvY3VtZW50YWlvbiBvZiB0aGUgTWljcm9zb2Z0IEV4Y2VsIEZpbGUgRm9ybWF0IHVzZXMgdGVybSBSQU5HRVBST1RFQ1RJT04gZm9yIHRoZXNlIHJlY29yZHMKICAgICAqIE1pY3Jvc29mdCBPZmZpY2UgRXhjZWwgOTctMjAwNyBCaW5hcnkgRmlsZSBGb3JtYXQgU3BlY2lmaWNhdGlvbiB1c2VzIHRlcm0gRkVBVCBmb3IgdGhlc2UgcmVjb3JkcwogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlUmFuZ2VQcm90ZWN0aW9uKCkKICAgIHsKICAgICAgICBmb3JlYWNoICgkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3RlZENlbGxzKCkgYXMgJHJhbmdlID0+ICRwYXNzd29yZCkgewogICAgICAgICAgICAvLyBudW1iZXIgb2YgcmFuZ2VzLCBlLmcuICdBMTpCMyBDMjA6RDI1JwogICAgICAgICAgICAkY2VsbFJhbmdlcyA9IGV4cGxvZGUoJyAnLCAkcmFuZ2UpOwogICAgICAgICAgICAkY3JlZiA9IGNvdW50KCRjZWxsUmFuZ2VzKTsKCiAgICAgICAgICAgICRyZWNvcmREYXRhID0gcGFjaygKICAgICAgICAgICAgICAgICd2dlZWdkNWdlZ2JywKICAgICAgICAgICAgICAgIDB4MDg2OCwKICAgICAgICAgICAgICAgIDB4MDAsCiAgICAgICAgICAgICAgICAweDAwMDAsCiAgICAgICAgICAgICAgICAweDAwMDAsCiAgICAgICAgICAgICAgICAweDAyLAogICAgICAgICAgICAgICAgMHgwLAogICAgICAgICAgICAgICAgMHgwMDAwLAogICAgICAgICAgICAgICAgJGNyZWYsCiAgICAgICAgICAgICAgICAweDAwMDAsCiAgICAgICAgICAgICAgICAweDAwCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBmb3JlYWNoICgkY2VsbFJhbmdlcyBhcyAkY2VsbFJhbmdlKSB7CiAgICAgICAgICAgICAgICAkcmVjb3JkRGF0YSAuPSAkdGhpcy0+d3JpdGVCSUZGOENlbGxSYW5nZUFkZHJlc3NGaXhlZCgkY2VsbFJhbmdlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gdGhlIHJnYkZlYXQgc3RydWN0dXJlCiAgICAgICAgICAgICRyZWNvcmREYXRhIC49IHBhY2soCiAgICAgICAgICAgICAgICAnVlYnLAogICAgICAgICAgICAgICAgMHgwMDAwLAogICAgICAgICAgICAgICAgaGV4ZGVjKCRwYXNzd29yZCkKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICRyZWNvcmREYXRhIC49IFBIUEV4Y2VsX1NoYXJlZF9TdHJpbmc6OlVURjh0b0JJRkY4VW5pY29kZUxvbmcoJ3AnIC4gbWQ1KCRyZWNvcmREYXRhKSk7CgogICAgICAgICAgICAkbGVuZ3RoID0gc3RybGVuKCRyZWNvcmREYXRhKTsKCiAgICAgICAgICAgICRyZWNvcmQgPSAweDA4Njg7ICAgICAgICAvLyBSZWNvcmQgaWRlbnRpZmllcgogICAgICAgICAgICAkaGVhZGVyID0gcGFjaygidnYiLCAkcmVjb3JkLCAkbGVuZ3RoKTsKICAgICAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJHJlY29yZERhdGEpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIEJJRkYgcmVjb3JkIEVYVEVSTkNPVU5UIHRvIGluZGljYXRlIHRoZSBudW1iZXIgb2YgZXh0ZXJuYWwgc2hlZXQKICAgICAqIHJlZmVyZW5jZXMgaW4gYSB3b3Jrc2hlZXQuCiAgICAgKgogICAgICogRXhjZWwgb25seSBzdG9yZXMgcmVmZXJlbmNlcyB0byBleHRlcm5hbCBzaGVldHMgdGhhdCBhcmUgdXNlZCBpbiBmb3JtdWxhcy4KICAgICAqIEZvciBzaW1wbGljaXR5IHdlIHN0b3JlIHJlZmVyZW5jZXMgdG8gYWxsIHRoZSBzaGVldHMgaW4gdGhlIHdvcmtib29rCiAgICAgKiByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhleSBhcmUgdXNlZCBvciBub3QuIFRoaXMgcmVkdWNlcyB0aGUgb3ZlcmFsbAogICAgICogY29tcGxleGl0eSBhbmQgZWxpbWluYXRlcyB0aGUgbmVlZCBmb3IgYSB0d28gd2F5IGRpYWxvZ3VlIGJldHdlZW4gdGhlIGZvcm11bGEKICAgICAqIHBhcnNlciB0aGUgd29ya3NoZWV0IG9iamVjdHMuCiAgICAgKgogICAgICogQHBhcmFtIGludGVnZXIgJGNvdW50IFRoZSBudW1iZXIgb2YgZXh0ZXJuYWwgc2hlZXQgcmVmZXJlbmNlcyBpbiB0aGlzIHdvcmtzaGVldAogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlRXh0ZXJuY291bnQoJGNvdW50KQogICAgewogICAgICAgICRyZWNvcmQgPSAweDAwMTY7ICAgICAgICAgIC8vIFJlY29yZCBpZGVudGlmaWVyCiAgICAgICAgJGxlbmd0aCA9IDB4MDAwMjsgICAgICAgICAgLy8gTnVtYmVyIG9mIGJ5dGVzIHRvIGZvbGxvdwoKICAgICAgICAkaGVhZGVyID0gcGFjaygidnYiLCAkcmVjb3JkLCAkbGVuZ3RoKTsKICAgICAgICAkZGF0YSAgID0gcGFjaygidiIsICRjb3VudCk7CiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJGRhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogV3JpdGVzIHRoZSBFeGNlbCBCSUZGIEVYVEVSTlNIRUVUIHJlY29yZC4gVGhlc2UgcmVmZXJlbmNlcyBhcmUgdXNlZCBieQogICAgICogZm9ybXVsYXMuIEEgZm9ybXVsYSByZWZlcmVuY2VzIGEgc2hlZXQgbmFtZSB2aWEgYW4gaW5kZXguIFNpbmNlIHdlIHN0b3JlIGEKICAgICAqIHJlZmVyZW5jZSB0byBhbGwgb2YgdGhlIGV4dGVybmFsIHdvcmtzaGVldHMgdGhlIEVYVEVSTlNIRUVUIGluZGV4IGlzIHRoZSBzYW1lCiAgICAgKiBhcyB0aGUgd29ya3NoZWV0IGluZGV4LgogICAgICoKICAgICAqIEBwYXJhbSBzdHJpbmcgJHNoZWV0bmFtZSBUaGUgbmFtZSBvZiBhIGV4dGVybmFsIHdvcmtzaGVldAogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlRXh0ZXJuc2hlZXQoJHNoZWV0bmFtZSkKICAgIHsKICAgICAgICAkcmVjb3JkICAgID0gMHgwMDE3OyAgICAgICAgIC8vIFJlY29yZCBpZGVudGlmaWVyCgogICAgICAgIC8vIFJlZmVyZW5jZXMgdG8gdGhlIGN1cnJlbnQgc2hlZXQgYXJlIGVuY29kZWQgZGlmZmVyZW50bHkgdG8gcmVmZXJlbmNlcyB0bwogICAgICAgIC8vIGV4dGVybmFsIHNoZWV0cy4KICAgICAgICAvLwogICAgICAgIGlmICgkdGhpcy0+cGhwU2hlZXQtPmdldFRpdGxlKCkgPT0gJHNoZWV0bmFtZSkgewogICAgICAgICAgICAkc2hlZXRuYW1lID0gJyc7CiAgICAgICAgICAgICRsZW5ndGggICAgPSAweDAyOyAgLy8gVGhlIGZvbGxvd2luZyAyIGJ5dGVzCiAgICAgICAgICAgICRjY2ggICAgICAgPSAxOyAgICAgLy8gVGhlIGZvbGxvd2luZyBieXRlCiAgICAgICAgICAgICRyZ2NoICAgICAgPSAweDAyOyAgLy8gU2VsZiByZWZlcmVuY2UKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkbGVuZ3RoICAgID0gMHgwMiArIHN0cmxlbigkc2hlZXRuYW1lKTsKICAgICAgICAgICAgJGNjaCAgICAgICA9IHN0cmxlbigkc2hlZXRuYW1lKTsKICAgICAgICAgICAgJHJnY2ggICAgICA9IDB4MDM7ICAvLyBSZWZlcmVuY2UgdG8gYSBzaGVldCBpbiB0aGUgY3VycmVudCB3b3JrYm9vawogICAgICAgIH0KCiAgICAgICAgJGhlYWRlciA9IHBhY2soInZ2IiwgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgICA9IHBhY2soIkNDIiwgJGNjaCwgJHJnY2gpOwogICAgICAgICR0aGlzLT5hcHBlbmQoJGhlYWRlciAuICRkYXRhIC4gJHNoZWV0bmFtZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBXcml0ZXMgdGhlIEV4Y2VsIEJJRkYgUEFORSByZWNvcmQuCiAgICAgKiBUaGUgcGFuZXMgY2FuIGVpdGhlciBiZSBmcm96ZW4gb3IgdGhhd2VkICh1bmZyb3plbikuCiAgICAgKiBGcm96ZW4gcGFuZXMgYXJlIHNwZWNpZmllZCBpbiB0ZXJtcyBvZiBhbiBpbnRlZ2VyIG51bWJlciBvZiByb3dzIGFuZCBjb2x1bW5zLgogICAgICogVGhhd2VkIHBhbmVzIGFyZSBzcGVjaWZpZWQgaW4gdGVybXMgb2YgRXhjZWwncyB1bml0cyBmb3Igcm93cyBhbmQgY29sdW1ucy4KICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiB3cml0ZVBhbmVzKCkKICAgIHsKICAgICAgICAkcGFuZXMgPSBhcnJheSgpOwogICAgICAgIGlmICgkZnJlZXplUGFuZSA9ICR0aGlzLT5waHBTaGVldC0+Z2V0RnJlZXplUGFuZSgpKSB7CiAgICAgICAgICAgIGxpc3QoJGNvbHVtbiwgJHJvdykgPSBQSFBFeGNlbF9DZWxsOjpjb29yZGluYXRlRnJvbVN0cmluZygkZnJlZXplUGFuZSk7CiAgICAgICAgICAgICRwYW5lc1swXSA9ICRyb3cgLSAxOwogICAgICAgICAgICAkcGFuZXNbMV0gPSBQSFBFeGNlbF9DZWxsOjpjb2x1bW5JbmRleEZyb21TdHJpbmcoJGNvbHVtbikgLSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIHRoYXcgcGFuZXMKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgJHkgICAgICAgPSBpc3NldCgkcGFuZXNbMF0pID8gJHBhbmVzWzBdIDogbnVsbDsKICAgICAgICAkeCAgICAgICA9IGlzc2V0KCRwYW5lc1sxXSkgPyAkcGFuZXNbMV0gOiBudWxsOwogICAgICAgICRyd1RvcCAgID0gaXNzZXQoJHBhbmVzWzJdKSA\\/IDEgOiAwOyAgICAgLy8gSG9yaXpvbnRhbCBjZW50ZXJpbmcKCiAgICAgICAgJGhlYWRlciAgICA9IHBhY2soInZ2IiwgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgICAgICA9IHBhY2soInYiLCAkZlZDZW50ZXIpOwogICAgICAgICR0aGlzLT5hcHBlbmQoJGhlYWRlciAuICRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFN0b3JlIHRoZSBMRUZUTUFSR0lOIEJJRkYgcmVjb3JkLgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlTWFyZ2luTGVmdCgpCiAgICB7CiAgICAgICAgJHJlY29yZCAgPSAweDAwMjY7ICAgICAgICAgICAgICAgICAgIC8vIFJlY29yZCBpZGVudGlmaWVyCiAgICAgICAgJGxlbmd0aCAgPSAweDAwMDg7ICAgICAgICAgICAgICAgICAgIC8vIEJ5dGVzIHRvIGZvbGxvdwoKICAgICAgICAkbWFyZ2luICA9ICR0aGlzLT5waHBTaGVldC0+Z2V0UGFnZU1hcmdpbnMoKS0+Z2V0TGVmdCgpOyAgICAgLy8gTWFyZ2luIGluIGluY2hlcwoKICAgICAgICAkaGVhZGVyICAgID0gcGFjaygidnYiLCAkcmVjb3JkLCAkbGVuZ3RoKTsKICAgICAgICAkZGF0YSAgICAgID0gcGFjaygiZCIsICRtYXJnaW4pOwogICAgICAgIGlmIChzZWxmOjpnZXRCeXRlT3JkZXIoKSkgeyAvLyBpZiBpdCdzIEJpZyBFbmRpYW4KICAgICAgICAgICAgJGRhdGEgPSBzdHJyZXYoJGRhdGEpOwogICAgICAgIH0KCiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJGRhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogU3RvcmUgdGhlIFJJR0hUTUFSR0lOIEJJRkYgcmVjb3JkLgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlTWFyZ2luUmlnaHQoKQogICAgewogICAgICAgICRyZWNvcmQgID0gMHgwMDI3OyAgICAgICAgICAgICAgICAgICAvLyBSZWNvcmQgaWRlbnRpZmllcgogICAgICAgICRsZW5ndGggID0gMHgwMDA4OyAgICAgICAgICAgICAgICAgICAvLyBCeXRlcyB0byBmb2xsb3cKCiAgICAgICAgJG1hcmdpbiAgPSAkdGhpcy0+cGhwU2hlZXQtPmdldFBhZ2VNYXJnaW5zKCktPmdldFJpZ2h0KCk7ICAgICAvLyBNYXJnaW4gaW4gaW5jaGVzCgogICAgICAgICRoZWFkZXIgICAgPSBwYWNrKCJ2diIsICRyZWNvcmQsICRsZW5ndGgpOwogICAgICAgICRkYXRhICAgICAgPSBwYWNrKCJkIiwgJG1hcmdpbik7CiAgICAgICAgaWYgKHNlbGY6OmdldEJ5dGVPcmRlcigpKSB7IC8vIGlmIGl0J3MgQmlnIEVuZGlhbgogICAgICAgICAgICAkZGF0YSA9IHN0cnJldigkZGF0YSk7CiAgICAgICAgfQoKICAgICAgICAkdGhpcy0+YXBwZW5kKCRoZWFkZXIgLiAkZGF0YSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTdG9yZSB0aGUgVE9QTUFSR0lOIEJJRkYgcmVjb3JkLgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlTWFyZ2luVG9wKCkKICAgIHsKICAgICAgICAkcmVjb3JkICA9IDB4MDAyODsgICAgICAgICAgICAgICAgICAgLy8gUmVjb3JkIGlkZW50aWZpZXIKICAgICAgICAkbGVuZ3RoICA9IDB4MDAwODsgICAgICAgICAgICAgICAgICAgLy8gQnl0ZXMgdG8gZm9sbG93CgogICAgICAgICRtYXJnaW4gID0gJHRoaXMtPnBocFNoZWV0LT5nZXRQYWdlTWFyZ2lucygpLT5nZXRUb3AoKTsgICAgIC8vIE1hcmdpbiBpbiBpbmNoZXMKCiAgICAgICAgJGhlYWRlciAgICA9IHBhY2soInZ2IiwgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgICAgICA9IHBhY2soImQiLCAkbWFyZ2luKTsKICAgICAgICBpZiAoc2VsZjo6Z2V0Qnl0ZU9yZGVyKCkpIHsgLy8gaWYgaXQncyBCaWcgRW5kaWFuCiAgICAgICAgICAgICRkYXRhID0gc3RycmV2KCRkYXRhKTsKICAgICAgICB9CgogICAgICAgICR0aGlzLT5hcHBlbmQoJGhlYWRlciAuICRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFN0b3JlIHRoZSBCT1RUT01NQVJHSU4gQklGRiByZWNvcmQuCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gd3JpdGVNYXJnaW5Cb3R0b20oKQogICAgewogICAgICAgICRyZWNvcmQgID0gMHgwMDI5OyAgICAgICAgICAgICAgICAgICAvLyBSZWNvcmQgaWRlbnRpZmllcgogICAgICAgICRsZW5ndGggID0gMHgwMDA4OyAgICAgICAgICAgICAgICAgICAvLyBCeXRlcyB0byBmb2xsb3cKCiAgICAgICAgJG1hcmdpbiAgPSAkdGhpcy0+cGhwU2hlZXQtPmdldFBhZ2VNYXJnaW5zKCktPmdldEJvdHRvbSgpOyAgICAgLy8gTWFyZ2luIGluIGluY2hlcwoKICAgICAgICAkaGVhZGVyICAgID0gcGFjaygidnYiLCAkcmVjb3JkLCAkbGVuZ3RoKTsKICAgICAgICAkZGF0YSAgICAgID0gcGFjaygiZCIsICRtYXJnaW4pOwogICAgICAgIGlmIChzZWxmOjpnZXRCeXRlT3JkZXIoKSkgeyAvLyBpZiBpdCdzIEJpZyBFbmRpYW4KICAgICAgICAgICAgJGRhdGEgPSBzdHJyZXYoJGRhdGEpOwogICAgICAgIH0KCiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJGRhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogV3JpdGUgdGhlIFBSSU5USEVBREVSUyBCSUZGIHJlY29yZC4KICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiB3cml0ZVByaW50SGVhZGVycygpCiAgICB7CiAgICAgICAgJHJlY29yZCAgICAgID0gMHgwMDJhOyAgICAgICAgICAgICAgICAgICAvLyBSZWNvcmQgaWRlbnRpZmllcgogICAgICAgICRsZW5ndGggICAgICA9IDB4MDAwMjsgICAgICAgICAgICAgICAgICAgLy8gQnl0ZXMgdG8gZm9sbG93CgogICAgICAgICRmUHJpbnRSd0NvbCA9ICR0aGlzLT5fcHJpbnRfaGVhZGVyczsgICAgIC8vIEJvb2xlYW4gZmxhZwoKICAgICAgICAkaGVhZGVyICAgICAgPSBwYWNrKCJ2diIsICRyZWNvcmQsICRsZW5ndGgpOwogICAgICAgICRkYXRhICAgICAgICA9IHBhY2soInYiLCAkZlByaW50UndDb2wpOwogICAgICAgICR0aGlzLT5hcHBlbmQoJGhlYWRlciAuICRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIHRoZSBQUklOVEdSSURMSU5FUyBCSUZGIHJlY29yZC4gTXVzdCBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlCiAgICAgKiBHUklEU0VUIHJlY29yZC4KICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiB3cml0ZVByaW50R3JpZGxpbmVzKCkKICAgIHsKICAgICAgICAkcmVjb3JkICAgICAgPSAweDAwMmI7ICAgICAgICAgICAgICAgICAgICAvLyBSZWNvcmQgaWRlbnRpZmllcgogICAgICAgICRsZW5ndGggICAgICA9IDB4MDAwMjsgICAgICAgICAgICAgICAgICAgIC8vIEJ5dGVzIHRvIGZvbGxvdwoKICAgICAgICAkZlByaW50R3JpZCAgPSAkdGhpcy0+cGhwU2hlZXQtPmdldFByaW50R3JpZGxpbmVzKCkgPyAxIDogMDsgICAgLy8gQm9vbGVhbiBmbGFnCgogICAgICAgICRoZWFkZXIgICAgICA9IHBhY2soInZ2IiwgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgICAgICA9IHBhY2soInYiLCAkZlByaW50R3JpZCk7CiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJGRhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogV3JpdGUgdGhlIEdSSURTRVQgQklGRiByZWNvcmQuIE11c3QgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZQogICAgICogUFJJTlRHUklETElORVMgcmVjb3JkLgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlR3JpZHNldCgpCiAgICB7CiAgICAgICAgJHJlY29yZCAgICAgID0gMHgwMDgyOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY29yZCBpZGVudGlmaWVyCiAgICAgICAgJGxlbmd0aCAgICAgID0gMHgwMDAyOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJ5dGVzIHRvIGZvbGxvdwoKICAgICAgICAkZkdyaWRTZXQgICAgPSAhJHRoaXMtPnBocFNoZWV0LT5nZXRQcmludEdyaWRsaW5lcygpOyAgICAgLy8gQm9vbGVhbiBmbGFnCgogICAgICAgICRoZWFkZXIgICAgICA9IHBhY2soInZ2IiwgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgICAgICAgID0gcGFjaygidiIsICRmR3JpZFNldCk7CiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJGRhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogV3JpdGUgdGhlIEFVVE9GSUxURVJJTkZPIEJJRkYgcmVjb3JkLiBUaGlzIGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSBudW1iZXIgb2YgYXV0b2ZpbHRlciBzZWxlY3QgdXNlZCBpbiB0aGUgc2hlZXQuCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gd3JpdGVBdXRvRmlsdGVySW5mbygpCiAgICB7CiAgICAgICAgJHJlY29yZCAgICAgID0gMHgwMDlEOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY29yZCBpZGVudGlmaWVyCiAgICAgICAgJGxlbmd0aCAgICAgID0gMHgwMDAyOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJ5dGVzIHRvIGZvbGxvdwoKICAgICAgICAkcmFuZ2VCb3VuZHMgPSBQSFBFeGNlbF9DZWxsOjpyYW5nZUJvdW5kYXJpZXMoJHRoaXMtPnBocFNoZWV0LT5nZXRBdXRvRmlsdGVyKCktPmdldFJhbmdlKCkpOwogICAgICAgICRpTnVtRmlsdGVycyA9IDEgKyAkcmFuZ2VCb3VuZHNbMV1bMF0gLSAkcmFuZ2VCb3VuZHNbMF1bMF07CgogICAgICAgICRoZWFkZXIgICA9IHBhY2soInZ2IiwgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgICAgID0gcGFjaygidiIsICRpTnVtRmlsdGVycyk7CiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJGRhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogV3JpdGUgdGhlIEdVVFMgQklGRiByZWNvcmQuIFRoaXMgaXMgdXNlZCB0byBjb25maWd1cmUgdGhlIGd1dHRlciBtYXJnaW5zCiAgICAgKiB3aGVyZSBFeGNlbCBvdXRsaW5lIHN5bWJvbHMgYXJlIGRpc3BsYXllZC4gVGhlIHZpc2liaWxpdHkgb2YgdGhlIGd1dHRlcnMgaXMKICAgICAqIGNvbnRyb2xsZWQgYnkgYSBmbGFnIGluIFdTQk9PTC4KICAgICAqCiAgICAgKiBAc2VlIHdyaXRlV3Nib29sKCkKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiB3cml0ZUd1dHMoKQogICAgewogICAgICAgICRyZWNvcmQgICAgICA9IDB4MDA4MDsgICAvLyBSZWNvcmQgaWRlbnRpZmllcgogICAgICAgICRsZW5ndGggICAgICA9IDB4MDAwODsgICAvLyBCeXRlcyB0byBmb2xsb3cKCiAgICAgICAgJGR4UndHdXQgICAgID0gMHgwMDAwOyAgIC8vIFNpemUgb2Ygcm93IGd1dHRlcgogICAgICAgICRkeENvbEd1dCAgICA9IDB4MDAwMDsgICAvLyBTaXplIG9mIGNvbCBndXR0ZXIKCiAgICAgICAgLy8gZGV0ZXJtaW5lIG1heGltdW0gcm93IG91dGxpbmUgbGV2ZWwKICAgICAgICAkbWF4Um93T3V0bGluZUxldmVsID0gMDsKICAgICAgICBmb3JlYWNoICgkdGhpcy0+cGhwU2hlZXQtPmdldFJvd0RpbWVuc2lvbnMoKSBhcyAkcm93RGltZW5zaW9uKSB7CiAgICAgICAgICAgICRtYXhSb3dPdXRsaW5lTGV2ZWwgPSBtYXgoJG1heFJvd091dGxpbmVMZXZlbCwgJHJvd0RpbWVuc2lvbi0+Z2V0T3V0bGluZUxldmVsKCkpOwogICAgICAgIH0KCiAgICAgICAgJGNvbF9sZXZlbCAgID0gMDsKCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBtYXhpbXVtIGNvbHVtbiBvdXRsaW5lIGxldmVsLiBUaGUgZXF1aXZhbGVudCBjYWxjdWxhdGlvbgogICAgICAgIC8vIGZvciB0aGUgcm93IG91dGxpbmUgbGV2ZWwgaXMgY2FycmllZCBvdXQgaW4gd3JpdGVSb3coKS4KICAgICAgICAkY29sY291bnQgPSBjb3VudCgkdGhpcy0+Y29sdW1uSW5mbyk7CiAgICAgICAgZm9yICgkaSA9IDA7ICRpIDwgJGNvbGNvdW50OyArKyRpKSB7CiAgICAgICAgICAgICRjb2xfbGV2ZWwgPSBtYXgoJHRoaXMtPmNvbHVtbkluZm9bJGldWzVdLCAkY29sX2xldmVsKTsKICAgICAgICB9CgogICAgICAgIC8vIFNldCB0aGUgbGltaXRzIGZvciB0aGUgb3V0bGluZSBsZXZlbHMgKDAgPD0geCA8PSA3KS4KICAgICAgICAkY29sX2xldmVsID0gbWF4KDAsIG1pbigkY29sX2xldmVsLCA3KSk7CgogICAgICAgIC8vIFRoZSBkaXNwbGF5ZWQgbGV2ZWwgaXMgb25lIGdyZWF0ZXIgdGhhbiB0aGUgbWF4IG91dGxpbmUgbGV2ZWxzCiAgICAgICAgaWYgKCRtYXhSb3dPdXRsaW5lTGV2ZWwpIHsKICAgICAgICAgICAgKyskbWF4Um93T3V0bGluZUxldmVsOwogICAgICAgIH0KICAgICAgICBpZiAoJGNvbF9sZXZlbCkgewogICAgICAgICAgICArKyRjb2xfbGV2ZWw7CiAgICAgICAgfQoKICAgICAgICAkaGVhZGVyICAgICAgPSBwYWNrKCJ2diIsICRyZWNvcmQsICRsZW5ndGgpOwogICAgICAgICRkYXRhICAgICAgICA9IHBhY2soInZ2dnYiLCAkZHhSd0d1dCwgJGR4Q29sR3V0LCAkbWF4Um93T3V0bGluZUxldmVsLCAkY29sX2xldmVsKTsKCiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyLiRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIHRoZSBXU0JPT0wgQklGRiByZWNvcmQsIG1haW5seSBmb3IgZml0LXRvLXBhZ2UuIFVzZWQgaW4gY29uanVuY3Rpb24KICAgICAqIHdpdGggdGhlIFNFVFVQIHJlY29yZC4KICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiB3cml0ZVdzYm9vbCgpCiAgICB7CiAgICAgICAgJHJlY29yZCAgICAgID0gMHgwMDgxOyAgIC8vIFJlY29yZCBpZGVudGlmaWVyCiAgICAgICAgJGxlbmd0aCAgICAgID0gMHgwMDAyOyAgIC8vIEJ5dGVzIHRvIGZvbGxvdwogICAgICAgICRncmJpdCAgICAgICA9IDB4MDAwMDsKCiAgICAgICAgLy8gVGhlIG9ubHkgb3B0aW9uIHRoYXQgaXMgb2YgaW50ZXJlc3QgaXMgdGhlIGZsYWcgZm9yIGZpdCB0byBwYWdlLiBTbyB3ZQogICAgICAgIC8vIHNldCBhbGwgdGhlIG9wdGlvbnMgaW4gb25lIGdvLgogICAgICAgIC8vCiAgICAgICAgLy8gU2V0IHRoZSBvcHRpb24gZmxhZ3MKICAgICAgICAkZ3JiaXQgfD0gMHgwMDAxOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF1dG8gcGFnZSBicmVha3MgdmlzaWJsZQogICAgICAgIGlmICgkdGhpcy0+b3V0bGluZVN0eWxlKSB7CiAgICAgICAgICAgICRncmJpdCB8PSAweDAwMjA7IC8vIEF1dG8gb3V0bGluZSBzdHlsZXMKICAgICAgICB9CiAgICAgICAgaWYgKCR0aGlzLT5waHBTaGVldC0+Z2V0U2hvd1N1bW1hcnlCZWxvdygpKSB7CiAgICAgICAgICAgICRncmJpdCB8PSAweDAwNDA7IC8vIE91dGxpbmUgc3VtbWFyeSBiZWxvdwogICAgICAgIH0KICAgICAgICBpZiAoJHRoaXMtPnBocFNoZWV0LT5nZXRTaG93U3VtbWFyeVJpZ2h0KCkpIHsKICAgICAgICAgICAgJGdyYml0IHw9IDB4MDA4MDsgLy8gT3V0bGluZSBzdW1tYXJ5IHJpZ2h0CiAgICAgICAgfQogICAgICAgIGlmICgkdGhpcy0+cGhwU2hlZXQtPmdldFBhZ2VTZXR1cCgpLT5nZXRGaXRUb1BhZ2UoKSkgewogICAgICAgICAgICAkZ3JiaXQgfD0gMHgwMTAwOyAvLyBQYWdlIHNldHVwIGZpdCB0byBwYWdlCiAgICAgICAgfQogICAgICAgIGlmICgkdGhpcy0+b3V0bGluZU9uKSB7CiAgICAgICAgICAgICRncmJpdCB8PSAweDA0MDA7IC8vIE91dGxpbmUgc3ltYm9scyBkaXNwbGF5ZWQKICAgICAgICB9CgogICAgICAgICRoZWFkZXIgICAgICA9IHBhY2soInZ2IiwgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgICAgICAgID0gcGFjaygidiIsICRncmJpdCk7CiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyIC4gJGRhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogV3JpdGUgdGhlIEhPUklaT05UQUxQQUdFQlJFQUtTIGFuZCBWRVJUSUNBTFBBR0VCUkVBS1MgQklGRiByZWNvcmRzLgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlQnJlYWtzKCkKICAgIHsKICAgICAgICAvLyBpbml0aWFsaXplCiAgICAgICAgJHZicmVha3MgPSBhcnJheSgpOwogICAgICAgICRoYnJlYWtzID0gYXJyYXkoKTsKCiAgICAgICAgZm9yZWFjaCAoJHRoaXMtPnBocFNoZWV0LT5nZXRCcmVha3MoKSBhcyAkY2VsbCA9PiAkYnJlYWtUeXBlKSB7CiAgICAgICAgICAgIC8vIEZldGNoIGNvb3JkaW5hdGVzCiAgICAgICAgICAgICRjb29yZGluYXRlcyA9IFBIUEV4Y2VsX0NlbGw6OmNvb3JkaW5hdGVGcm9tU3RyaW5nKCRjZWxsKTsKCiAgICAgICAgICAgIC8vIERlY2lkZSB3aGF0IHRvIGRvIGJ5IHRoZSB0eXBlIG9mIGJyZWFrCiAgICAgICAgICAgIHN3aXRjaCAoJGJyZWFrVHlwZSkgewogICAgICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9Xb3Jrc2hlZXQ6OkJSRUFLX0NPTFVNTjoKICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdG8gbGlzdCBvZiB2ZXJ0aWNhbCBicmVha3MKICAgICAgICAgICAgICAgICAgICAkdmJyZWFrc1tdID0gUEhQRXhjZWxfQ2VsbDo6Y29sdW1uSW5kZXhGcm9tU3RyaW5nKCRjb29yZGluYXRlc1swXSkgLSAxOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9Xb3Jrc2hlZXQ6OkJSRUFLX1JPVzoKICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdG8gbGlzdCBvZiBob3Jpem9udGFsIGJyZWFrcwogICAgICAgICAgICAgICAgICAgICRoYnJlYWtzW10gPSAkY29vcmRpbmF0ZXNbMV07CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIFBIUEV4Y2VsX1dvcmtzaGVldDo6QlJFQUtfTk9ORToKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgLy8gTm90aGluZyB0byBkbwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvL2hvcml6b250YWwgcGFnZSBicmVha3MKICAgICAgICBpZiAoIWVtcHR5KCRoYnJlYWtzKSkgewogICAgICAgICAgICAvLyBTb3J0IGFuZCBmaWx0ZXIgYXJyYXkgb2YgcGFnZSBicmVha3MKICAgICAgICAgICAgc29ydCgkaGJyZWFrcywgU09SVF9OVU1FUklDKTsKICAgICAgICAgICAgaWYgKCRoYnJlYWtzWzBdID09IDApIHsgLy8gZG9uJ3QgdXNlIGZpcnN0IGJyZWFrIGlmIGl0J3MgMAogICAgICAgICAgICAgICAgYXJyYXlfc2hpZnQoJGhicmVha3MpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkcmVjb3JkICA9IDB4MDAxYjsgICAgICAgICAgICAgICAvLyBSZWNvcmQgaWRlbnRpZmllcgogICAgICAgICAgICAkY2JyayAgICA9IGNvdW50KCRoYnJlYWtzKTsgICAgICAgLy8gTnVtYmVyIG9mIHBhZ2UgYnJlYWtzCiAgICAgICAgICAgICRsZW5ndGggID0gMiArIDYgKiAkY2JyazsgICAgICAvLyBCeXRlcyB0byBmb2xsb3cKCiAgICAgICAgICAgICRoZWFkZXIgID0gcGFjaygidnYiLCAkcmVjb3JkLCAkbGVuZ3RoKTsKICAgICAgICAgICAgJGRhdGEgICAgPSBwYWNrKCJ2IiwgJGNicmspOwoKICAgICAgICAgICAgLy8gQXBwZW5kIGVhY2ggcGFnZSBicmVhawogICAgICAgICAgICBmb3JlYWNoICgkaGJyZWFrcyBhcyAkaGJyZWFrKSB7CiAgICAgICAgICAgICAgICAkZGF0YSAuPSBwYWNrKCJ2dnYiLCAkaGJyZWFrLCAweDAwMDAsIDB4MDBmZik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICR0aGlzLT5hcHBlbmQoJGhlYWRlciAuICRkYXRhKTsKICAgICAgICB9CgogICAgICAgIC8vIHZlcnRpY2FsIHBhZ2UgYnJlYWtzCiAgICAgICAgaWYgKCFlbXB0eSgkdmJyZWFrcykpIHsKICAgICAgICAgICAgLy8gMTAwMCB2ZXJ0aWNhbCBwYWdlYnJlYWtzIGFwcGVhcnMgdG8gYmUgYW4gaW50ZXJuYWwgRXhjZWwgNSBsaW1pdC4KICAgICAgICAgICAgLy8gSXQgaXMgc2xpZ2h0bHkgaGlnaGVyIGluIEV4Y2VsIDk3LzIwMCwgYXBwcm94LiAxMDI2CiAgICAgICAgICAgICR2YnJlYWtzID0gYXJyYXlfc2xpY2UoJHZicmVha3MsIDAsIDEwMDApOwoKICAgICAgICAgICAgLy8gU29ydCBhbmQgZmlsdGVyIGFycmF5IG9mIHBhZ2UgYnJlYWtzCiAgICAgICAgICAgIHNvcnQoJHZicmVha3MsIFNPUlRfTlVNRVJJQyk7CiAgICAgICAgICAgIGlmICgkdmJyZWFrc1swXSA9PSAwKSB7IC8vIGRvbid0IHVzZSBmaXJzdCBicmVhayBpZiBpdCdzIDAKICAgICAgICAgICAgICAgIGFycmF5X3NoaWZ0KCR2YnJlYWtzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHJlY29yZCAgPSAweDAwMWE7ICAgICAgICAgICAgICAgLy8gUmVjb3JkIGlkZW50aWZpZXIKICAgICAgICAgICAgJGNicmsgICAgPSBjb3VudCgkdmJyZWFrcyk7ICAgICAgIC8vIE51bWJlciBvZiBwYWdlIGJyZWFrcwogICAgICAgICAgICAkbGVuZ3RoICA9IDIgKyA2ICogJGNicms7ICAgICAgLy8gQnl0ZXMgdG8gZm9sbG93CgogICAgICAgICAgICAkaGVhZGVyICA9IHBhY2soInZ2IiwgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgICAgICRkYXRhICAgID0gcGFjaygidiIsICRjYnJrKTsKCiAgICAgICAgICAgIC8vIEFwcGVuZCBlYWNoIHBhZ2UgYnJlYWsKICAgICAgICAgICAgZm9yZWFjaCAoJHZicmVha3MgYXMgJHZicmVhaykgewogICAgICAgICAgICAgICAgJGRhdGEgLj0gcGFjaygidnZ2IiwgJHZicmVhaywgMHgwMDAwLCAweGZmZmYpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkdGhpcy0+YXBwZW5kKCRoZWFkZXIgLiAkZGF0YSk7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU2V0IHRoZSBCaWZmIFBST1RFQ1QgcmVjb3JkIHRvIGluZGljYXRlIHRoYXQgdGhlIHdvcmtzaGVldCBpcyBwcm90ZWN0ZWQuCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gd3JpdGVQcm90ZWN0KCkKICAgIHsKICAgICAgICAvLyBFeGl0IHVubGVzcyBzaGVldCBwcm90ZWN0aW9uIGhhcyBiZWVuIHNwZWNpZmllZAogICAgICAgIGlmICghJHRoaXMtPnBocFNoZWV0LT5nZXRQcm90ZWN0aW9uKCktPmdldFNoZWV0KCkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgJHJlY29yZCAgICAgID0gMHgwMDEyOyAgICAgICAgICAgICAvLyBSZWNvcmQgaWRlbnRpZmllcgogICAgICAgICRsZW5ndGggICAgICA9IDB4MDAwMjsgICAgICAgICAgICAgLy8gQnl0ZXMgdG8gZm9sbG93CgogICAgICAgICRmTG9jayAgICAgID0gMTsgICAgLy8gV29ya3NoZWV0IGlzIHByb3RlY3RlZAoKICAgICAgICAkaGVhZGVyICAgICAgPSBwYWNrKCJ2diIsICRyZWNvcmQsICRsZW5ndGgpOwogICAgICAgICRkYXRhICAgICAgPSBwYWNrKCJ2IiwgJGZMb2NrKTsKCiAgICAgICAgJHRoaXMtPmFwcGVuZCgkaGVhZGVyLiRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIFNDRU5QUk9URUNUCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gd3JpdGVTY2VuUHJvdGVjdCgpCiAgICB7CiAgICAgICAgLy8gRXhpdCBpZiBzaGVldCBwcm90ZWN0aW9uIGlzIG5vdCBhY3RpdmUKICAgICAgICBpZiAoISR0aGlzLT5waHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRTaGVldCgpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIC8vIEV4aXQgaWYgc2NlbmFyaW9zIGFyZSBub3QgcHJvdGVjdGVkCiAgICAgICAgaWYgKCEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0U2NlbmFyaW9zKCkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgJHJlY29yZCA9IDB4MDBERDsgLy8gUmVjb3JkIGlkZW50aWZpZXIKICAgICAgICAkbGVuZ3RoID0gMHgwMDAyOyAvLyBCeXRlcyB0byBmb2xsb3cKCiAgICAgICAgJGhlYWRlciA9IHBhY2soJ3Z2JywgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgPSBwYWNrKCd2JywgMSk7CgogICAgICAgICR0aGlzLT5hcHBlbmQoJGhlYWRlciAuICRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIE9CSkVDVFBST1RFQ1QKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiB3cml0ZU9iamVjdFByb3RlY3QoKQogICAgewogICAgICAgIC8vIEV4aXQgaWYgc2hlZXQgcHJvdGVjdGlvbiBpcyBub3QgYWN0aXZlCiAgICAgICAgaWYgKCEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0U2hlZXQoKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBFeGl0IGlmIG9iamVjdHMgYXJlIG5vdCBwcm90ZWN0ZWQKICAgICAgICBpZiAoISR0aGlzLT5waHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRPYmplY3RzKCkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgJHJlY29yZCA9IDB4MDA2MzsgLy8gUmVjb3JkIGlkZW50aWZpZXIKICAgICAgICAkbGVuZ3RoID0gMHgwMDAyOyAvLyBCeXRlcyB0byBmb2xsb3cKCiAgICAgICAgJGhlYWRlciA9IHBhY2soJ3Z2JywgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgPSBwYWNrKCd2JywgMSk7CgogICAgICAgICR0aGlzLT5hcHBlbmQoJGhlYWRlciAuICRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyaXRlIHRoZSB3b3Jrc2hlZXQgUEFTU1dPUkQgcmVjb3JkLgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHdyaXRlUGFzc3dvcmQoKQogICAgewogICAgICAgIC8vIEV4aXQgdW5sZXNzIHNoZWV0IHByb3RlY3Rpb24gYW5kIHBhc3N3b3JkIGhhdmUgYmVlbiBzcGVjaWZpZWQKICAgICAgICBpZiAoISR0aGlzLT5waHBTaGVldC0+Z2V0UHJvdGVjdGlvbigpLT5nZXRTaGVldCgpIHx8ICEkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0UGFzc3dvcmQoKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAkcmVjb3JkICAgICAgPSAweDAwMTM7ICAgICAgICAgICAgICAgLy8gUmVjb3JkIGlkZW50aWZpZXIKICAgICAgICAkbGVuZ3RoICAgICAgPSAweDAwMDI7ICAgICAgICAgICAgICAgLy8gQnl0ZXMgdG8gZm9sbG93CgogICAgICAgICR3UGFzc3dvcmQgICA9IGhleGRlYygkdGhpcy0+cGhwU2hlZXQtPmdldFByb3RlY3Rpb24oKS0+Z2V0UGFzc3dvcmQoKSk7ICAgICAvLyBFbmNvZGVkIHBhc3N3b3JkCgogICAgICAgICRoZWFkZXIgICAgICA9IHBhY2soInZ2IiwgJHJlY29yZCwgJGxlbmd0aCk7CiAgICAgICAgJGRhdGEgICAgICAgID0gcGFjaygidiIsICR3UGFzc3dvcmQpOwoKICAgICAgICAkdGhpcy0+YXBwZW5kKCRoZWFkZXIgLiAkZGF0YSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBJbnNlcnQgYSAyNGJpdCBiaXRtYXAgaW1hZ2UgaW4gYSB3b3Jrc2hlZXQuCiAgICAgKgogICAgICogQGFjY2VzcyBwdWJsaWMKICAgICAqIEBwYXJhbSBpbnRlZ2VyICRyb3cgICAgIFRoZSByb3cgd2UgYXJlIGdvaW5nIHRvIGluc2VydCB0aGUgYml0bWFwIGludG8KICAgICAqIEBwYXJhbSBpbnRlZ2VyICRjb2wgICAgIFRoZSBjb2x1bW4gd2UgYXJlIGdvaW5nIHRvIGluc2VydCB0aGUgYml0bWFwIGludG8KICAgICAqIEBwYXJhbSBtaXhlZCAgICRiaXRtYXAgIFRoZSBiaXRtYXAgZmlsZW5hbWUgb3IgR0QtaW1hZ2UgcmVzb3VyY2UKICAgICAqIEBwYXJhbSBpbnRlZ2VyICR4ICAgICAgIFRoZSBob3Jpem9udGFsIHBvc2l0aW9uIChvZmZzZXQpIG9mIHRoZSBpbWFnZSBpbnNpZGUgdGhlIGNlbGwuCiAgICAgKiBAcGFyYW0gaW50ZWdlciAkeSAgICAgICBUaGUgdmVydGljYWwgcG9zaXRpb24gKG9mZnNldCkgb2YgdGhlIGltYWdlIGluc2lkZSB0aGUgY2VsbC4KICAgICAqIEBwYXJhbSBmbG9hdCAgICRzY2FsZV94IFRoZSBob3Jpem9udGFsIHNjYWxlCiAgICAgKiBAcGFyYW0gZmxvYXQgICAkc2NhbGVfeSBUaGUgdmVydGljYWwgc2NhbGUKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGluc2VydEJpdG1hcCgkcm93LCAkY29sLCAkYml0bWFwLCAkeCA9IDAsICR5ID0gMCwgJHNjYWxlX3ggPSAxLCAkc2NhbGVfeSA9IDEpCiAgICB7CiAgICAgICAgJGJpdG1hcF9hcnJheSA9IChpc19yZXNvdXJjZSgkYml0bWFwKSA\\/IDMgOiAweDAwMDApOwogICAgICAgICAgICAkc3pWYWx1ZTIgPSAoJGFyckNvbmRpdGlvbnNbMV0gPD0gNjU1MzUgPyAzIDogMHgwMDAwKTsKICAgICAgICAgICAgJG9wZXJhbmQxID0gcGFjaygnQ3YnLCAweDFFLCAkYXJyQ29uZGl0aW9uc1swXSk7CiAgICAgICAgICAgICRvcGVyYW5kMiA9IHBhY2soJ0N2JywgMHgxRSwgJGFyckNvbmRpdGlvbnNbMV0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRzelZhbHVlMSA9IDB4MDAwMDsKICAgICAgICAgICAgJHN6VmFsdWUyID0gMHgwMDAwOwogICAgICAgICAgICAkb3BlcmFuZDEgPSBudWxsOwogICAgICAgICAgICAkb3BlcmFuZDIgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgLy8gJGZsYWdzIDogT3B0aW9uIGZsYWdzCiAgICAgICAgLy8gQWxpZ25tZW50CiAgICAgICAgJGJBbGlnbkh6ID0gKCRjb25kaXRpb25hbC0+Z2V0U3R5bGUoKS0+Z2V0QWxpZ25tZW50KCktPmdldEhvcml6b250YWwoKSA9PSBudWxsID8gMSA6IDApOwogICAgICAgICRiQWxpZ25WdCA9ICgkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEFsaWdubWVudCgpLT5nZXRWZXJ0aWNhbCgpID09IG51bGwgPyAxIDogMCk7CiAgICAgICAgJGJBbGlnbldyYXBUeCA9ICgkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEFsaWdubWVudCgpLT5nZXRXcmFwVGV4dCgpID09IGZhbHNlID8gMSA6IDApOwogICAgICAgICRiVHhSb3RhdGlvbiA9ICgkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEFsaWdubWVudCgpLT5nZXRUZXh0Um90YXRpb24oKSA9PSBudWxsID8gMSA6IDApOwogICAgICAgICRiSW5kZW50ID0gKCRjb25kaXRpb25hbC0+Z2V0U3R5bGUoKS0+Z2V0QWxpZ25tZW50KCktPmdldEluZGVudCgpID09IDAgPyAxIDogMCk7CiAgICAgICAgJGJTaHJpbmtUb0ZpdCA9ICgkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEFsaWdubWVudCgpLT5nZXRTaHJpbmtUb0ZpdCgpID09IGZhbHNlID8gMSA6IDApOwogICAgICAgIGlmICgkYkFsaWduSHogPT0gMCB8fCAkYkFsaWduVnQgPT0gMCB8fCAkYkFsaWduV3JhcFR4ID09IDAgfHwgJGJUeFJvdGF0aW9uID09IDAgfHwgJGJJbmRlbnQgPT0gMCB8fCAkYlNocmlua1RvRml0ID09IDApIHsKICAgICAgICAgICAgJGJGb3JtYXRBbGlnbiA9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJGJGb3JtYXRBbGlnbiA9IDA7CiAgICAgICAgfQogICAgICAgIC8vIFByb3RlY3Rpb24KICAgICAgICAkYlByb3RMb2NrZWQgPSAoJGNvbmRpdGlvbmFsLT5nZXRTdHlsZSgpLT5nZXRQcm90ZWN0aW9uKCktPmdldExvY2tlZCgpID09IG51bGwgPyAxIDogMCk7CiAgICAgICAgJGJQcm90SGlkZGVuID0gKCRjb25kaXRpb25hbC0+Z2V0U3R5bGUoKS0+Z2V0UHJvdGVjdGlvbigpLT5nZXRIaWRkZW4oKSA9PSBudWxsID8gMSA6IDApOwogICAgICAgIGlmICgkYlByb3RMb2NrZWQgPT0gMCB8fCAkYlByb3RIaWRkZW4gPT0gMCkgewogICAgICAgICAgICAkYkZvcm1hdFByb3QgPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRiRm9ybWF0UHJvdCA9IDA7CiAgICAgICAgfQogICAgICAgIC8vIEJvcmRlcgogICAgICAgICRiQm9yZGVyTGVmdCA9ICgkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEJvcmRlcnMoKS0+Z2V0TGVmdCgpLT5nZXRDb2xvcigpLT5nZXRBUkdCKCkgPT0gUEhQRXhjZWxfU3R5bGVfQ29sb3I6OkNPTE9SX0JMQUNLCiAgICAgICAgICAgICAgICAgICAgICAgICYmICRjb25kaXRpb25hbC0+Z2V0U3R5bGUoKS0+Z2V0Qm9yZGVycygpLT5nZXRMZWZ0KCktPmdldEJvcmRlclN0eWxlKCkgPT0gUEhQRXhjZWxfU3R5bGVfQm9yZGVyOjpCT1JERVJfTk9ORSA\/IDEgOiAwKTsKICAgICAgICAkYkJvcmRlclJpZ2h0ID0gKCRjb25kaXRpb25hbC0+Z2V0U3R5bGUoKS0+Z2V0Qm9yZGVycygpLT5nZXRSaWdodCgpLT5nZXRDb2xvcigpLT5nZXRBUkdCKCkgPT0gUEhQRXhjZWxfU3R5bGVfQ29sb3I6OkNPTE9SX0JMQUNLCiAgICAgICAgICAgICAgICAgICAgICAgICYmICRjb25kaXRpb25hbC0+Z2V0U3R5bGUoKS0+Z2V0Qm9yZGVycygpLT5nZXRSaWdodCgpLT5nZXRCb3JkZXJTdHlsZSgpID09IFBIUEV4Y2VsX1N0eWxlX0JvcmRlcjo6Qk9SREVSX05PTkUgPyAxIDogMCk7CiAgICAgICAgJGJCb3JkZXJUb3AgPSAoJGNvbmRpdGlvbmFsLT5nZXRTdHlsZSgpLT5nZXRCb3JkZXJzKCktPmdldFRvcCgpLT5nZXRDb2xvcigpLT5nZXRBUkdCKCkgPT0gUEhQRXhjZWxfU3R5bGVfQ29sb3I6OkNPTE9SX0JMQUNLCiAgICAgICAgICAgICAgICAgICAgICAgICYmICRjb25kaXRpb25hbC0+Z2V0U3R5bGUoKS0+Z2V0Qm9yZGVycygpLT5nZXRUb3AoKS0+Z2V0Qm9yZGVyU3R5bGUoKSA9PSBQSFBFeGNlbF9TdHlsZV9Cb3JkZXI6OkJPUkRFUl9OT05FID8gMSA6IDApOwogICAgICAgICRiQm9yZGVyQm90dG9tID0gKCRjb25kaXRpb25hbC0+Z2V0U3R5bGUoKS0+Z2V0Qm9yZGVycygpLT5nZXRCb3R0b20oKS0+Z2V0Q29sb3IoKS0+Z2V0QVJHQigpID09IFBIUEV4Y2VsX1N0eWxlX0NvbG9yOjpDT0xPUl9CTEFDSwogICAgICAgICAgICAgICAgICAgICAgICAmJiAkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEJvcmRlcnMoKS0+Z2V0Qm90dG9tKCktPmdldEJvcmRlclN0eWxlKCkgPT0gUEhQRXhjZWxfU3R5bGVfQm9yZGVyOjpCT1JERVJfTk9ORSA\/IDEgOiAwKTsKICAgICAgICBpZiAoJGJCb3JkZXJMZWZ0ID09IDAgfHwgJGJCb3JkZXJSaWdodCA9PSAwIHx8ICRiQm9yZGVyVG9wID09IDAgfHwgJGJCb3JkZXJCb3R0b20gPT0gMCkgewogICAgICAgICAgICAkYkZvcm1hdEJvcmRlciA9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJGJGb3JtYXRCb3JkZXIgPSAwOwogICAgICAgIH0KICAgICAgICAvLyBQYXR0ZXJuCiAgICAgICAgJGJGaWxsU3R5bGUgPSAoJGNvbmRpdGlvbmFsLT5nZXRTdHlsZSgpLT5nZXRGaWxsKCktPmdldEZpbGxUeXBlKCkgPT0gbnVsbCA\/IDAgOiAxKTsKICAgICAgICAkYkZpbGxDb2xvciA9ICgkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEZpbGwoKS0+Z2V0U3RhcnRDb2xvcigpLT5nZXRBUkdCKCkgPT0gbnVsbCA\/IDAgOiAxKTsKICAgICAgICAkYkZpbGxDb2xvckJnID0gKCRjb25kaXRpb25hbC0+Z2V0U3R5bGUoKS0+Z2V0RmlsbCgpLT5nZXRFbmRDb2xvcigpLT5nZXRBUkdCKCkgPT0gbnVsbCA\/IDAgOiAxKTsKICAgICAgICBpZiAoJGJGaWxsU3R5bGUgPT0gMCB8fCAkYkZpbGxDb2xvciA9PSAwIHx8ICRiRmlsbENvbG9yQmcgPT0gMCkgewogICAgICAgICAgICAkYkZvcm1hdEZpbGwgPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRiRm9ybWF0RmlsbCA9IDA7CiAgICAgICAgfQogICAgICAgIC8vIEZvbnQKICAgICAgICBpZiAoJGNvbmRpdGlvbmFsLT5nZXRTdHlsZSgpLT5nZXRGb250KCktPmdldE5hbWUoKSAhPSBudWxsCiAgICAgICAgICAgIHx8ICRjb25kaXRpb25hbC0+Z2V0U3R5bGUoKS0+Z2V0Rm9udCgpLT5nZXRTaXplKCkgIT0gbnVsbAogICAgICAgICAgICB8fCAkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEZvbnQoKS0+Z2V0Qm9sZCgpICE9IG51bGwKICAgICAgICAgICAgfHwgJGNvbmRpdGlvbmFsLT5nZXRTdHlsZSgpLT5nZXRGb250KCktPmdldEl0YWxpYygpICE9IG51bGwKICAgICAgICAgICAgfHwgJGNvbmRpdGlvbmFsLT5nZXRTdHlsZSgpLT5nZXRGb250KCktPmdldFN1cGVyU2NyaXB0KCkgIT0gbnVsbAogICAgICAgICAgICB8fCAkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEZvbnQoKS0+Z2V0U3ViU2NyaXB0KCkgIT0gbnVsbAogICAgICAgICAgICB8fCAkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEZvbnQoKS0+Z2V0VW5kZXJsaW5lKCkgIT0gbnVsbAogICAgICAgICAgICB8fCAkY29uZGl0aW9uYWwtPmdldFN0eWxlKCktPmdldEZvbnQoKS0+Z2V0U3RyaWtldGhyb3VnaCgpICE9IG51bGwKICAgICAgICAgICAgfHwgJGNvbmRpdGlvbmFsLT5nZXRTdHlsZSgpLT5nZXRGb250KCktPmdldENvbG9yKCktPmdldEFSR0IoKSAhPSBudWxsKSB7CiAgICAgICAgICAgICRiRm9ybWF0Rm9udCA9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJGJGb3JtYXRGb250ID0gMDsKICAgICAgICB9CiAgICAgICAgLy8gQWxpZ25tZW50CiAgICAgICAgJGZsYWdzID0gMDsKICAgICAgICAkZmxhZ3MgfD0gKDEgPT0gJGJBbGlnbkh6ICAgICAgPyAweDAwMDAwMDAxIDogMCk7CiAgICAgICAgJGZsYWdzIHw9ICgxID09ICRiQWxpZ25WdCAgICAgID8gMHgwMDAwMDAwMiA6IDApOwogICAgICAgICRmbGFncyB8PSAoMSA9PSAkYkFsaWduV3JhcFR4ICA\/IDB4MDAwMDAwMDQgOiAwKTsKICAgICAgICAkZmxhZ3MgfD0gKDEgPT0gJGJUeFJvdGF0aW9uICAgPyAweDAwMDAwMDA4IDogMCk7CiAgICAgICAgLy8gSnVzdGlmeSBsYXN0IGxpbmUgZmxhZwogICAgICAgICRmbGFncyB8PSAoMSA9PSAxICAgICAgICAgICAgICA\/IDB4MDAwMDAwMTAgOiAwKTsKICAgICAgICAkZmxhZ3MgfD0gKDEgPT0gJGJJbmRlbnQgICAgICAgPyAweDAwMDAwMDIwIDogMCk7CiAgICAgICAgJGZsYWdzIHw9ICgxID09ICRiU2hyaW5rVG9GaXQgID8gMHgwMDAwMDA0MCA6IDApOwogICAgICAgIC8vIERlZmF1bHQKICAgICAgICAkZmxhZ3MgfD0gKDEgPT0gMSAgICAgICAgICAgICAgPyAweDAwMDAwMDgwIDogMCk7CiAgICAgICAgLy8gUHJvdGVjdGlvbgogICAgICAgICRmbGFncyB8PSAoMSA9PSAkYlByb3RMb2NrZWQgICA\/IDB4MDAwMDAxMDAgOiAwKTsKICAgICAgICAkZmxhZ3MgfD0gKDEgPT0gJGJQcm90SGlkZGVuICAgPyAweDAwMDAwMjAwIDogMCk7CiAgICAgICAgLy8gQm9yZGVyCiAgICAgICAgJGZsYWdzIHw9ICgxID09ICRiQm9yZGVyTGVmdCAgID8gMHgwMDAwMDQwMCA6IDApOwogICAgICAgICRmbGFncyB8PSAoMSA9PSAkYkJvcmRlclJpZ2h0ICA\/IDB4MDAwMDA4MDAgOiAwKTsKICAgICAgICAkZmxhZ3MgfD0gKDEgPT0gJGJCb3JkZXJUb3AgICAgPyAweDAwMDAxMDAwIDogMCk7CiAgICAgICAgJGZsYWdzIHw9ICgxID09ICRiQm9yZGVyQm90dG9tID8gMHgwMDAwMjAwMCA6IDApOwogICAgICAgICRmbGFncyB8PSAoMSA9PSAxICAgICAgICAgICAgICA\/IDB4MDAwMDQwMDAgOiAwKTsgLy8gVG9wIGxlZnQgdG8gQm90dG9tIHJpZ2h0IGJvcmRlcgogICAgICAgICRmbGFncyB8PSAoMSA9PSAxICAgICAgICAgICAgICA\/IDB4MDAwMDgwMDAgOiAwKTsgLy8gQm90dG9tIGxlZnQgdG8gVG9wIHJpZ2h0IGJvcmRlcgogICAgICAgIC8vIFBhdHRlcm4KICAgICAgICAkZmxhZ3MgfD0gKDEgPT0gJGJGaWxsU3R5bGUgICAgPyAweDAwMDEwMDAwIDogMCk7CiAgICAgICAgJGZsYWdzIHw9ICgxID09ICRiRmlsbENvbG9yICAgID8gMHgwMDAyMDAwMCA6IDApOwogICAgICAgICRmbGFncyB8PSAoMSA9PSAkYkZpbGxDb2xvckJnICA\/IDB4MDAwNDAwMDAgOiAwKTsKICAgICAgICAkZmxhZ3MgfD0gKDEgPT0gMSAgICAgICAgICAgICAgPyAweDAwMzgwMDAwIDogMCk7CiAgICAgICAgLy8gRm9udAogICAgICAgICRmbGFncyB8PSAoMSA9PSAkYkZvcm1hdEZvbnQgICA\/IDB4MDQwMDAwMDAgOiAwKTsKICAgICAgICAvLyBBbGlnbm1lbnQ6CiAgICAgICAgJGZsYWdzIHw9ICgxID09ICRiRm9ybWF0QWxpZ24gID8gMHgwODAwMDAwMCA6IDApOwogICAgICAgIC8vIEJvcmRlcgogICAgICAgICRmbGFncyB8PSAoMSA9PSAkYkZvcm1hdEJvcmRlciA\\/IDB4MDAwMDAwMDggOiAwKTsKICAgICAgICAgICAgJG9wdGlvbnNGbGFncyB8PSAoMSA9PSAxICAgICAgICAgICAgICAgICAgPyAweDAwMDAwMDEwIDogMCk7CiAgICAgICAgICAgICRvcHRpb25zRmxhZ3MgfD0gKDEgPT0gMCAgICAgICAgICAgICAgICAgID8gMHgwMDAwMDAyMCA6IDApOwogICAgICAgICAgICAkb3B0aW9uc0ZsYWdzIHw9ICgxID09IDEgICAgICAgICAgICAgICAgICA\",
    "size": "160405"
}