{
    "namaFile": "js\/ref_persediaan\/persediaanbarang.js",
    "lastUpdate": "2015-09-12+15:26:59.55",
    "contentFile": "dmFyIFBlcnNlZGlhYW5CYXJhbmcgPSBuZXcgRGFmdGFyT2JqMih7DQoJcHJlZml4IDogJ1BlcnNlZGlhYW5CYXJhbmcnLA0KCXVybCA6ICdwYWdlcy5waHA\\\/IikNCgkJCQkJCS8vaWYoY29uZmlybSgiTWF1IGxhbmdzdW5nID8iKSl7DQoJCQkJCQkNCgkJCQkJCQkvL1RhZ2loYW4uQmF5YXJCeUlkKHJlc3AuY29udGVudC5pZF9rdW5qdW5nYW4pDQoJCQkJCQkvL30NCgkJCQkJLy99DQoJCQkJCS8vYWxlcnQocmVzcC5jb250ZW50LmlkX2t1bmp1bmdhbik7DQoJCQkJCS8vfWVsc2V7DQoJCQkJCQkvL3pjb25maXJtKCJNYXUgbGFuZ3N1bmcgPyIpDQoJCQkJCS8vfQ0KDQoJCQkJCW1lLkFmdGVyU2ltcGFuKCk7CQ0KCQkJCX0NCgkJCQllbHNlew0KCQkJCQlhbGVydChyZXNwLmVycik7DQoJCQkJfQ0KCQkgIAl9DQoJCX0pOw0KCX0NCgkNCgkNCgkJDQp9KTsNCg==",
    "size": "20890"
}