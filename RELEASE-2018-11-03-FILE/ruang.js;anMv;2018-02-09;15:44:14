{
    "namaFile": "js\/ruang.js",
    "lastUpdate": "2018-02-09+15:44:14.28",
    "contentFile": "dmFyIFJ1YW5nUGlsaWhTa3BkID0gbmV3IFNrcGRDbHMoewoJcHJlZml4IDogJ1J1YW5nUGlsaWhTa3BkJywgZm9ybU5hbWU6J1J1YW5nUGlsaWhfRm9ybScKfSk7CnZhciBSdWFuZ1BpbGloID0gbmV3IERhZnRhck9iajIoewoJcHJlZml4IDogJ1J1YW5nUGlsaWgnLAoJdXJsIDogJ3BhZ2VzLnBocD9QZz1SdWFuZ1BpbGloJywgCglmb3JtTmFtZSA6ICdSdWFuZ1BpbGloX0Zvcm0nLAoJaWRwaWxpaDonJywKCWZtVVJVU0FOOicnLAoJZm1TS1BEOicnLAoJZm1VTklUOicnLAoJZm1TVUJVTklUOicnLAoJZm1TRUtTSTonJywKCQoKCWVsX2lkcGVnYXdhaTogJ3JlZl9pZHBlbWVnYW5nJywKCWVsX25pcDogJ25pcDEnLAoJZWxfbmFtYTogJ25hbWExJywKCWVsX2phYmF0OiAnamJ0MScsCgkKCWxvYWRpbmc6IGZ1bmN0aW9uKCl7CgkJLy9hbGVydCgnbG9hZGluZycpOwoJCXRoaXMudG9wQmFyUmVuZGVyKCk7CgkJdGhpcy5maWx0ZXJSZW5kZXIoKTsKCQl0aGlzLmRhZnRhclJlbmRlcigpOwoJCXRoaXMuc3VtSGFsUmVuZGVyKCk7CgkKCX0sCgkKCWNhcmlQZWdhd2FpOiBmdW5jdGlvbigpewoJCXZhciBtZSA9IHRoaXM7CgkJZm5DYXJpUGVnYXdhaS53aW5kb3dTaG93KCk7CQoJfSwKCQoJcGlsaWhHZWR1bmdQaWwgOiBmdW5jdGlvbigpewoJdmFyIG1lID0gdGhpczsgCgkJJC5hamF4KHsKCQkgIHVybDogJ3BhZ2VzLnBocD9QZz1ydWFuZyZ0aXBlPXBpbGloR2VkdW5nUGlsJywKCQkgIHR5cGUgOiAnUE9TVCcsCgkJICBkYXRhOiQoJyNSdWFuZ1BpbGloX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQkJCgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxJykudmFsdWUgPSByZXNwLmNvbnRlbnQucTsKCQkgIH0KCQl9KTsKCX0sCgkKCXBpbGloVXJ1c2FuUGlsIDogZnVuY3Rpb24oKXsKCXZhciBtZSA9IHRoaXM7IAoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1waWxpaFVydXNhblBpbCcsCgkJICB0eXBlIDogJ1BPU1QnLAoJCS8vICBkYXRhOiQoJyMnK3RoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAoJCSAgZGF0YTokKCcjUnVhbmdQaWxpaF9mb3JtJykuc2VyaWFsaXplKCksCgkJLy8gIGRhdGE6JCgnI1J1YW5nUGlsaWhfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCSAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCQkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRfYycpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC51bml0OwoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udF9kJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LmJpZDsKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRfZScpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC5za3A7CgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250X2UxJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LnN1YjE7CgkJICB9CgkJfSk7Cgl9LAoJCglwaWxpaEJpZGFuZ1BpbCA6IGZ1bmN0aW9uKCl7Cgl2YXIgbWUgPSB0aGlzOyAKCQkkLmFqYXgoewoJCSAgdXJsOiAncGFnZXMucGhwP1BnPXJ1YW5nJnRpcGU9cGlsaWhCaWRhbmdQaWwnLAoJCSAgdHlwZSA6ICdQT1NUJywKCQkgIGRhdGE6JCgnI1J1YW5nUGlsaWhfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCSAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCQkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRfZCcpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC5iaWQ7CgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250X2UnKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQuc2twOwoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udF9lMScpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC5zdWIxOwoJCSAgfQoJCX0pOwoJfSwKCQoJcGlsaWhTS1BEUGlsIDogZnVuY3Rpb24oKXsKCXZhciBtZSA9IHRoaXM7IAoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1waWxpaFNLUERQaWwnLAoJCSAgdHlwZSA6ICdQT1NUJywKCQkgIGRhdGE6JCgnI1J1YW5nUGlsaWhfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCSAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCQkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRfZScpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC5za3A7CgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250X2UxJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LnN1YjE7CgkJICB9CgkJfSk7Cgl9LAoJCgkKCXBpbGloVW5pdFBpbCA6IGZ1bmN0aW9uKCl7Cgl2YXIgbWUgPSB0aGlzOyAKCQkkLmFqYXgoewoJCSAgdXJsOiAncGFnZXMucGhwP1BnPXJ1YW5nJnRpcGU9cGlsaWhVbml0UGlsJywKCQkgIHR5cGUgOiAnUE9TVCcsCgkJICBkYXRhOiQoJyNSdWFuZ1BpbGloX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQkJCgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250X2UxJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LnN1YjE7CgkJCQoJCSAgfQoJCX0pOwoJfSwKCQoJcGlsaWhTdWJVbml0UGlsIDogZnVuY3Rpb24oKXsKCXZhciBtZSA9IHRoaXM7IAoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1waWxpaFN1YlVuaXRQaWwnLAoJCSAgdHlwZSA6ICdQT1NUJywKCQkgIGRhdGE6JCgnI1J1YW5nUGlsaWhfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCSAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCQkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRfZ2QnKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQudW5pdDsKCQkJCgkJICB9CgkJfSk7Cgl9LAoJCglnZXRHZWR1bmdQaWwgOiBmdW5jdGlvbigpewoJdmFyIG1lID0gdGhpczsgLy9hbGVydCgndGVzJyk7CS8vYWxlcnQodGhpcy5wcmVmaXgpOwoJCQoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1nZXRHZWR1bmdQaWwnLAoJCSAgdHlwZSA6ICdQT1NUJywKCQkgIC8vZGF0YTokKCcjYWRtaW5Gb3JtJykuc2VyaWFsaXplKCksCgkJICBkYXRhOiQoJyNSdWFuZ1BpbGloX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQkJCgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxJykudmFsdWUgPSByZXNwLmNvbnRlbnQucTsKCQkgIH0KCQl9KTsKCQoJfSwKCQoJcmVmcmVzaEdlZHVuZ1BpbCA6IGZ1bmN0aW9uKGlkX0dlZHVuZ0JhcnUpewoJdmFyIG1lID0gdGhpczsgLy9hbGVydCgndGVzJyk7CS8vYWxlcnQodGhpcy5wcmVmaXgpOwoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1yZWZyZXNoR2VkdW5nUGlsJmlkX0dlZHVuZ0JhcnU9JytpZF9HZWR1bmdCYXJ1LAoJCSAgdHlwZSA6ICdQT1NUJywKCQkgIGRhdGE6JCgnI1J1YW5nUGlsaWhfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCSAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCQkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRfZ2QnKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQudW5pdDsKCQkJbWUuZ2V0R2VkdW5nUGlsKCk7CgkJICB9CgkJfSk7Cgl9LAoJCglTaW1wYW5HZWR1bmdQaWw6IGZ1bmN0aW9uKCl7CgkJdmFyIG1lPSB0aGlzOwoJCXZhciBlcnI9Jyc7CgkJCgkJdGhpcy5PbkVycm9yQ2xvc2UgPSBmYWxzZQkKCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOwoJCXZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybXNpbXBhbktCJzsKCQlhZGRDb3ZlclBhZ2UyKGNvdmVyLDEsdHJ1ZSxmYWxzZSk7CQoJCQoJCSQuYWpheCh7CgkJCXR5cGU6J1BPU1QnLCAKCQkJZGF0YTokKCcjJyt0aGlzLnByZWZpeCsnX0tCZm9ybScpLnNlcmlhbGl6ZSgpLAoJCQl1cmw6IHRoaXMudXJsKycmdGlwZT1zaW1wYW5HZWR1bmdQaWwnLAoJCSAgCXN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkKCQkJCWRlbEVsZW0oY292ZXIpOwkJCgkJCQkKCQkJCWlmKHJlc3AuZXJyPT0nJyl7CgkJCQkJbWUucmVmcmVzaEdlZHVuZ1BpbChyZXNwLmNvbnRlbnQpOwoJCQkJCW1lLkNsb3NlMigpOwoJCQkJfWVsc2V7CgkJCQkJYWxlcnQocmVzcC5lcnIpOwoJCQkJfQoJCSAgCX0KCQl9KTsKCQkKCX0sCQoJCglCYXJ1R2VkdW5nUGlsOiBmdW5jdGlvbigpewkKCQl2YXIgbWUgPSB0aGlzOwoJCXZhciBlcnI9Jyc7CgkJdmFyIGMxID1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm1jMScpLnZhbHVlOwoJCXZhciBjID1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm1jJykudmFsdWU7CgkJdmFyIGQgPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmbWQnKS52YWx1ZTsKCQl2YXIgZSA9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZtZScpLnZhbHVlOwoJCXZhciBlMSA9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZtZTEnKS52YWx1ZTsKCQkKCQlpZiAoYzE9PScnIHwgYz09JycgfCBkPT0nJyB8IGU9PScnIHwgZTE9PScnKXsKCQkJYWxlcnQoJ0tPREUgVVJVU0FOIHx8IEtPREUgQklEQU5HIHx8IEtPREUgU0tQRCB8fCBVTklUIHx8IFNVTiBVTklUIGJlbHVtIHRlcnBpbGloICEhJyk7CgkJfWVsc2V7CgkJaWYgKGVyciA9PScnICl7CQkKCQkJdmFyIGNvdmVyID0gdGhpcy5wcmVmaXgrJ19mb3JtY292ZXJLQic7CgkJCWRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3c9J2hpZGRlbic7CgkJCWFkZENvdmVyUGFnZTIoY292ZXIsOTk5LHRydWUsZmFsc2UpOwkKCQkJJC5hamF4KHsKCQkJCXR5cGU6J1BPU1QnLCAKCQkJCWRhdGE6JCgnI1J1YW5nUGlsaWhfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCQkgIAl1cmw6IHRoaXMudXJsKycmdGlwZT1mb3JtQmFydUdlZHVuZ1BpbCcsCgkJCSAgCXN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCQkKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb3ZlcikuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50OwkJCQoJCQkJCS8vbWUuQWZ0ZXJGb3JtQmFydSgpOwoJCQkgIAl9CgkJCX0pOwoJCX1lbHNlewoJCSAJYWxlcnQoZXJyKTsKCQl9CQoJCX0KCX0sCgkKCQoJQ2xvc2UyOmZ1bmN0aW9uKCl7Ly9hbGVydCh0aGlzLmVsQ292ZXIpOwoJCXZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybWNvdmVyS0InOwoJCWlmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKSkgZGVsRWxlbShjb3Zlcik7CQkJCgkJaWYodGlwZT09bnVsbCl7CgkJCWRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3c9J2F1dG8nOwkJCQkJCQoJCX0KCX0sCgkKCWdldEdlZHVuZ180IDogZnVuY3Rpb24oKXsKCXZhciBtZSA9IHRoaXM7IC8vYWxlcnQoJ3RlcycpOwkvL2FsZXJ0KHRoaXMucHJlZml4KTsKCQkKCQkkLmFqYXgoewoJCSAgdXJsOiAncGFnZXMucGhwP1BnPXJ1YW5nJnRpcGU9Z2V0R2VkdW5nXzQnLAoJCSAgdHlwZSA6ICdQT1NUJywKCQkgIC8vZGF0YTokKCcjYWRtaW5Gb3JtJykuc2VyaWFsaXplKCksCgkJICBkYXRhOiQoJyNSdWFuZ1BpbGloX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQkJCgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxJykudmFsdWUgPSByZXNwLmNvbnRlbnQucTsKCQkgIH0KCQl9KTsKCQoJfSwKCQoJcmVmcmVzaEdlZHVuZ180IDogZnVuY3Rpb24oaWRfR2VkdW5nQmFydSl7Cgl2YXIgbWUgPSB0aGlzOyAvL2FsZXJ0KCd0ZXMnKTsJLy9hbGVydCh0aGlzLnByZWZpeCk7CgkJJC5hamF4KHsKCQkgIHVybDogJ3BhZ2VzLnBocD9QZz1ydWFuZyZ0aXBlPXJlZnJlc2hHZWR1bmdfNCZpZF9HZWR1bmdCYXJ1PScraWRfR2VkdW5nQmFydSwKCQkgIHR5cGUgOiAnUE9TVCcsCgkJICBkYXRhOiQoJyNSdWFuZ1BpbGloX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQkJCgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250X2dkJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LnVuaXQ7CgkJCW1lLmdldEdlZHVuZ180KCk7CgkJICB9CgkJfSk7Cgl9LAkKCQoJU2ltcGFuR2VkdW5nXzQ6IGZ1bmN0aW9uKCl7CgkJdmFyIG1lPSB0aGlzOwoJCXZhciBlcnI9Jyc7CgkJCgkJdGhpcy5PbkVycm9yQ2xvc2UgPSBmYWxzZQkKCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOwoJCXZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybXNpbXBhbktCJzsKCQlhZGRDb3ZlclBhZ2UyKGNvdmVyLDEsdHJ1ZSxmYWxzZSk7CQoJCQoJCSQuYWpheCh7CgkJCXR5cGU6J1BPU1QnLCAKCQkvLwkgZGF0YTokKCcjUnVhbmdfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCQlkYXRhOiQoJyMnK3RoaXMucHJlZml4KydfS0Jmb3JtJykuc2VyaWFsaXplKCksCgkJCXVybDogdGhpcy51cmwrJyZ0aXBlPXNpbXBhbkdlZHVuZ180JywKCQkgIAlzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CQkKCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCgkJCQlkZWxFbGVtKGNvdmVyKTsJCQoJCQkJCgkJCQlpZihyZXNwLmVycj09JycpewoJCQkJCW1lLnJlZnJlc2hHZWR1bmdfNChyZXNwLmNvbnRlbnQpOwoJCQkJCW1lLkNsb3NlMigpOwoJCQkJfWVsc2V7CgkJCQkJYWxlcnQocmVzcC5lcnIpOwoJCQkJfQoJCSAgCX0KCQl9KTsKCQkKCX0sCgkKCUJhcnVHZWR1bmdfNDogZnVuY3Rpb24oKXsJCgkJdmFyIG1lID0gdGhpczsKCQl2YXIgZXJyPScnOwoJCXZhciBjID1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm1jJykudmFsdWU7CgkJdmFyIGQgPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmbWQnKS52YWx1ZTsKCQl2YXIgZSA9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZtZScpLnZhbHVlOwoJCXZhciBlMSA9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZtZTEnKS52YWx1ZTsKCQkKCQlpZiAoYz09JycgfCBkPT0nJyB8IGU9PScnIHwgZTE9PScnKXsKCQkJYWxlcnQoJ0tPREUgQklEQU5HIHx8IEtPREUgU0tQRCB8fCBVTklUIHx8IFNVTiBVTklUIGJlbHVtIHRlcnBpbGloICEhJyk7CgkJfWVsc2V7CgkJaWYgKGVyciA9PScnICl7CQkKCQkJdmFyIGNvdmVyID0gdGhpcy5wcmVmaXgrJ19mb3JtY292ZXJLQic7CgkJCWRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3c9J2hpZGRlbic7CgkJCWFkZENvdmVyUGFnZTIoY292ZXIsOTk5LHRydWUsZmFsc2UpOwkKCQkJJC5hamF4KHsKCQkJCXR5cGU6J1BPU1QnLCAKCQkJCWRhdGE6JCgnI1J1YW5nUGlsaWhfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCQkgIAl1cmw6IHRoaXMudXJsKycmdGlwZT1mb3JtQmFydUdlZHVuZ180JywKCQkJICAJc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkJCQoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7CQkJCgkJCQkJLy9tZS5BZnRlckZvcm1CYXJ1KCk7CgkJCSAgCX0KCQkJfSk7CgkJfWVsc2V7CgkJIAlhbGVydChlcnIpOwoJCX0JCgkJfQoJfSwJCgkJCglwaWxpaEdlZHVuZ180IDogZnVuY3Rpb24oKXsKCXZhciBtZSA9IHRoaXM7IAoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\\/UGc9cnVhbmcmdGlwZT1waWxpaFVuaXQnLAoJCSAgdHlwZSA6ICdQT1NUJywKCQkJZGF0YTokKCcjUnVhbmdfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCSAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCQkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRfZTEnKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQuc3ViMTsKCQkJCgkJICB9CgkJfSk7Cgl9LAoJCglwaWxpaFN1YlVuaXQgOiBmdW5jdGlvbigpewoJdmFyIG1lID0gdGhpczsgCgkJJC5hamF4KHsKCQkgIHVybDogJ3BhZ2VzLnBocD9QZz1ydWFuZyZ0aXBlPXBpbGloU3ViVW5pdCcsCgkJICB0eXBlIDogJ1BPU1QnLAoJCQlkYXRhOiQoJyNSdWFuZ19mb3JtJykuc2VyaWFsaXplKCksCgkJICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CQkKCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkJCQoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udF9nZCcpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC51bml0OwoJCQkKCQkgIH0KCQl9KTsKCX0sCgkKCXBpbGloR2VkdW5nIDogZnVuY3Rpb24oKXsKCXZhciBtZSA9IHRoaXM7IAoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1waWxpaEdlZHVuZycsCgkJICB0eXBlIDogJ1BPU1QnLAoJCSAgZGF0YTokKCcjUnVhbmdfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCSAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCQkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3EnKS52YWx1ZSA9IHJlc3AuY29udGVudC5xOwoJCSAgfQoJCX0pOwoJfSwKCQoJQmFydUdlZHVuZzogZnVuY3Rpb24oKXsJCgkJdmFyIG1lID0gdGhpczsKCQl2YXIgZXJyPScnOwoJCXZhciBjMSA9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZtYzEnKS52YWx1ZTsKCQl2YXIgYyA9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZtYycpLnZhbHVlOwoJCXZhciBkID1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm1kJykudmFsdWU7CgkJdmFyIGUgPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmbWUnKS52YWx1ZTsKCQl2YXIgZTEgPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmbWUxJykudmFsdWU7CgkJCgkJaWYgKGMxPT0nJyB8IGM9PScnIHwgZD09JycgfCBlPT0nJyB8IGUxPT0nJyl7CgkJCWFsZXJ0KCdLT0RFIFVSVVNBTiB8fCBLT0RFIEJJREFORyB8fCBLT0RFIFNLUEQgfHwgVU5JVCB8fCBTVU4gVU5JVCBiZWx1bSB0ZXJwaWxpaCAhIScpOwoJCX1lbHNlewoJCWlmIChlcnIgPT0nJyApewkJCgkJCXZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybWNvdmVyS0InOwoJCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOwoJCQlhZGRDb3ZlclBhZ2UyKGNvdmVyLDk5OSx0cnVlLGZhbHNlKTsJCgkJCSQuYWpheCh7CgkJCQl0eXBlOidQT1NUJywgCgkJCQlkYXRhOiQoJyNSdWFuZ19mb3JtJykuc2VyaWFsaXplKCksCgkJCSAgCXVybDogdGhpcy51cmwrJyZ0aXBlPWZvcm1CYXJ1R2VkdW5nJywKCQkJICAJc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkJCQoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7CQkJCgkJCSAgCX0KCQkJfSk7CgkJfWVsc2V7CgkJIAlhbGVydChlcnIpOwoJCX0JCgkJfQoJfSwKCQoJU2ltcGFuRWRpdEdlZHVuZzogZnVuY3Rpb24oKXsKCQl2YXIgbWU9IHRoaXM7CQoJCXRoaXMuT25FcnJvckNsb3NlID0gZmFsc2UJCgkJZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz0naGlkZGVuJzsKCQl2YXIgY292ZXIgPSB0aGlzLnByZWZpeCsnX2Zvcm1zaW1wYW4nOwoJCWFkZENvdmVyUGFnZTIoY292ZXIsMSx0cnVlLGZhbHNlKTsJCgkJCgkJJC5hamF4KHsKCQkJdHlwZTonUE9TVCcsIAoJCS8vCWRhdGE6JCgnI1J1YW5nUGlsaWhfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCQlkYXRhOiQoJyNSdWFuZ19mb3JtJykuc2VyaWFsaXplKCksCgkJCXVybDogdGhpcy51cmwrJyZ0aXBlPXNpbXBhbkVkaXRHZWR1bmcnLAoJCSAgCXN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkKCQkJCWRlbEVsZW0oY292ZXIpOwkJCgkJCQkvL2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7CgkJCQlpZihyZXNwLmVycj09JycpewoJCQkJCWFsZXJ0KCdEYXRhIGJlcmhhc2lsIGRpc2ltcGFuJyk7CgkJCQkJbWUuQ2xvc2UoKTsKCQkJCQltZS5yZWZyZXNoTGlzdCh0cnVlKTsKCQkJCQltZS5BZnRlclNpbXBhbigpOwkKCQkJCX0KCQkJCWVsc2V7CgkJCQkJYWxlcnQocmVzcC5lcnIpOwoJCQkJfQoJCSAgCX0KCQl9KTsKCX0sCgkKCVNpbXBhbkVkaXRSdWFuZzogZnVuY3Rpb24oKXsKCQl2YXIgbWU9IHRoaXM7CQoJCXRoaXMuT25FcnJvckNsb3NlID0gZmFsc2UJCgkJZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz0naGlkZGVuJzsKCQl2YXIgY292ZXIgPSB0aGlzLnByZWZpeCsnX2Zvcm1zaW1wYW4nOwoJCWFkZENvdmVyUGFnZTIoY292ZXIsMSx0cnVlLGZhbHNlKTsJCgkJCgkJJC5hamF4KHsKCQkJdHlwZTonUE9TVCcsIAoJCS8vCWRhdGE6JCgnI1J1YW5nUGlsaWhfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCQlkYXRhOiQoJyNSdWFuZ19mb3JtJykuc2VyaWFsaXplKCksCgkJCXVybDogdGhpcy51cmwrJyZ0aXBlPXNpbXBhbkVkaXRSdWFuZycsCgkJICAJc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQoJCQkJZGVsRWxlbShjb3Zlcik7CQkKCQkJCS8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsKCQkJCWlmKHJlc3AuZXJyPT0nJyl7CgkJCQkJYWxlcnQoJ0RhdGEgYmVyaGFzaWwgZGlzaW1wYW4nKTsKCQkJCQltZS5DbG9zZSgpOwoJCQkJCW1lLnJlZnJlc2hMaXN0KHRydWUpOwoJCQkJCW1lLkFmdGVyU2ltcGFuKCk7CQoJCQkJfQoJCQkJZWxzZXsKCQkJCQlhbGVydChyZXNwLmVycik7CgkJCQl9CgkJICAJfQoJCX0pOwoJfSwKCQoJU2ltcGFuRWRpdEdlZHVuZ180OiBmdW5jdGlvbigpewoJCXZhciBtZT0gdGhpczsJCgkJdGhpcy5PbkVycm9yQ2xvc2UgPSBmYWxzZQkKCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOwoJCXZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybXNpbXBhbic7CgkJYWRkQ292ZXJQYWdlMihjb3ZlciwxLHRydWUsZmFsc2UpOwkKCQkKCQkkLmFqYXgoewoJCQl0eXBlOidQT1NUJywgCgkJCWRhdGE6JCgnI1J1YW5nX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkJdXJsOiB0aGlzLnVybCsnJnRpcGU9c2ltcGFuRWRpdEdlZHVuZ180JywKCQkgIAlzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CQkKCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCgkJCQlkZWxFbGVtKGNvdmVyKTsJCQoJCQkJLy9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb3ZlcikuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50OwoJCQkJaWYocmVzcC5lcnI9PScnKXsKCQkJCQlhbGVydCgnRGF0YSBiZXJoYXNpbCBkaXNpbXBhbicpOwoJCQkJCW1lLkNsb3NlKCk7CgkJCQkJbWUucmVmcmVzaExpc3QodHJ1ZSk7CgkJCQkJbWUuQWZ0ZXJTaW1wYW4oKTsJCgkJCQl9CgkJCQllbHNlewoJCQkJCWFsZXJ0KHJlc3AuZXJyKTsKCQkJCX0KCQkgIAl9CgkJfSk7Cgl9LAoJCglTaW1wYW5HZWR1bmc6IGZ1bmN0aW9uKCl7CgkJdmFyIG1lPSB0aGlzOwoJCXZhciBlcnI9Jyc7CgkJCgkJdGhpcy5PbkVycm9yQ2xvc2UgPSBmYWxzZQkKCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOwoJCXZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybXNpbXBhbktCJzsKCQlhZGRDb3ZlclBhZ2UyKGNvdmVyLDEsdHJ1ZSxmYWxzZSk7CQoJCQoJCSQuYWpheCh7CgkJCXR5cGU6J1BPU1QnLCAKCQkJZGF0YTokKCcjJyt0aGlzLnByZWZpeCsnX0tCZm9ybScpLnNlcmlhbGl6ZSgpLAoJCQl1cmw6IHRoaXMudXJsKycmdGlwZT1zaW1wYW5HZWR1bmcnLAoJCSAgCXN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkKCQkJCWRlbEVsZW0oY292ZXIpOwkJCgkJCQkKCQkJCWlmKHJlc3AuZXJyPT0nJyl7CgkJCQkJbWUucmVmcmVzaEdlZHVuZyhyZXNwLmNvbnRlbnQpOwoJCQkJCW1lLkNsb3NlMigpOwoJCQkJfWVsc2V7CgkJCQkJYWxlcnQocmVzcC5lcnIpOwoJCQkJfQoJCSAgCX0KCQl9KTsKCQkKCX0sCQoJCglyZWZyZXNoR2VkdW5nIDogZnVuY3Rpb24oaWRfR2VkdW5nQmFydSl7Cgl2YXIgbWUgPSB0aGlzOyAvL2FsZXJ0KCd0ZXMnKTsJLy9hbGVydCh0aGlzLnByZWZpeCk7CgkJJC5hamF4KHsKCQkgIHVybDogJ3BhZ2VzLnBocD9QZz1ydWFuZyZ0aXBlPXJlZnJlc2hHZWR1bmcmaWRfR2VkdW5nQmFydT0nK2lkX0dlZHVuZ0JhcnUsCgkJICB0eXBlIDogJ1BPU1QnLAoJCSAgZGF0YTokKCcjUnVhbmdfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCSAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCQkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRfZ2QnKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQudW5pdDsKCQkJbWUuZ2V0R2VkdW5nKCk7CgkJICB9CgkJfSk7Cgl9LAoJCglnZXRHZWR1bmcgOiBmdW5jdGlvbigpewoJdmFyIG1lID0gdGhpczsgLy9hbGVydCgndGVzJyk7CS8vYWxlcnQodGhpcy5wcmVmaXgpOwoJCQoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1nZXRHZWR1bmcnLAoJCSAgdHlwZSA6ICdQT1NUJywKCQkgIC8vZGF0YTokKCcjYWRtaW5Gb3JtJykuc2VyaWFsaXplKCksCgkJICBkYXRhOiQoJyNSdWFuZ19mb3JtJykuc2VyaWFsaXplKCksCgkJICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CQkKCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkJCQoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncScpLnZhbHVlID0gcmVzcC5jb250ZW50LnE7CgkJICB9CgkJfSk7CgkKCX0sCgkKCUNsb3NlMjpmdW5jdGlvbigpey8vYWxlcnQodGhpcy5lbENvdmVyKTsKCQl2YXIgY292ZXIgPSB0aGlzLnByZWZpeCsnX2Zvcm1jb3ZlcktCJzsKCQlpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb3ZlcikpIGRlbEVsZW0oY292ZXIpOwkJCQoJCWlmKHRpcGU9PW51bGwpewoJCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdhdXRvJzsJCQkJCQkKCQl9Cgl9LAoJCglwaWxpaEJpZGFuZ180IDogZnVuY3Rpb24oKXsKCXZhciBtZSA9IHRoaXM7IAoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1waWxpaEJpZGFuZ180JywKCQkgIHR5cGUgOiAnUE9TVCcsCgkJICBkYXRhOiQoJyNSdWFuZ19mb3JtJykuc2VyaWFsaXplKCksCgkJICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CQkKCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkJCQoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udF9kJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LmJpZDsKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRfZScpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC5za3A7CgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250X2UxJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LnN1YjE7CgkJICB9CgkJfSk7Cgl9LAoJCglwaWxpaFNLUERfNCA6IGZ1bmN0aW9uKCl7Cgl2YXIgbWUgPSB0aGlzOyAKCQkkLmFqYXgoewoJCSAgdXJsOiAncGFnZXMucGhwP1BnPXJ1YW5nJnRpcGU9cGlsaWhTS1BEXzQnLAoJCSAgdHlwZSA6ICdQT1NUJywKCQkJZGF0YTokKCcjUnVhbmdfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCSAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCQkKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRfZScpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC5za3A7CgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250X2UxJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LnN1YjE7CgkJICB9CgkJfSk7Cgl9LAoJCgkKCXBpbGloVW5pdF80IDogZnVuY3Rpb24oKXsKCXZhciBtZSA9IHRoaXM7IAoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1waWxpaFVuaXRfNCcsCgkJICB0eXBlIDogJ1BPU1QnLAoJCQlkYXRhOiQoJyNSdWFuZ19mb3JtJykuc2VyaWFsaXplKCksCgkJICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CQkKCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkJCQoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udF9lMScpLmlubmVySFRNTCA9IHJlc3AuY29udGVudC5zdWIxOwoJCSAgfQoJCX0pOwoJfSwKCQoJcGlsaWhTdWJVbml0XzQgOiBmdW5jdGlvbigpewoJdmFyIG1lID0gdGhpczsgCgkJJC5hamF4KHsKCQkgIHVybDogJ3BhZ2VzLnBocD9QZz1ydWFuZyZ0aXBlPXBpbGloU3ViVW5pdF80JywKCQkgIHR5cGUgOiAnUE9TVCcsCgkJCWRhdGE6JCgnI1J1YW5nX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQkJCgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250X2dkJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LnVuaXQ7CgkJICB9CgkJfSk7Cgl9LAoJCglwaWxpaEdlZHVuZ180IDogZnVuY3Rpb24oKXsKCXZhciBtZSA9IHRoaXM7IAoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1waWxpaEdlZHVuZ180JywKCQkgIHR5cGUgOiAnUE9TVCcsCgkJICBkYXRhOiQoJyNSdWFuZ19mb3JtJykuc2VyaWFsaXplKCksCgkJICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CQkKCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkJCQoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncScpLnZhbHVlID0gcmVzcC5jb250ZW50LnE7CgkJICB9CgkJfSk7Cgl9LAoJCglCYXJ1R2VkdW5nXzQ6IGZ1bmN0aW9uKCl7CQoJCXZhciBtZSA9IHRoaXM7CgkJdmFyIGVycj0nJzsKCQl2YXIgYyA9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZtYycpLnZhbHVlOwoJCXZhciBkID1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm1kJykudmFsdWU7CgkJdmFyIGUgPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmbWUnKS52YWx1ZTsKCQl2YXIgZTEgPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmbWUxJykudmFsdWU7CgkJCgkJaWYgKGM9PScnIHwgZD09JycgfCBlPT0nJyB8IGUxPT0nJyl7CgkJCWFsZXJ0KCdLT0RFIEJJREFORyB8fCBLT0RFIFNLUEQgfHwgVU5JVCB8fCBTVU4gVU5JVCBiZWx1bSB0ZXJwaWxpaCAhIScpOwoJCX1lbHNlewoJCWlmIChlcnIgPT0nJyApewkJCgkJCXZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybWNvdmVyS0InOwoJCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOwoJCQlhZGRDb3ZlclBhZ2UyKGNvdmVyLDk5OSx0cnVlLGZhbHNlKTsJCgkJCSQuYWpheCh7CgkJCQl0eXBlOidQT1NUJywgCgkJCQlkYXRhOiQoJyNSdWFuZ19mb3JtJykuc2VyaWFsaXplKCksCgkJCSAgCXVybDogdGhpcy51cmwrJyZ0aXBlPWZvcm1CYXJ1R2VkdW5nXzQnLAoJCQkgIAlzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CQkKCQkJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQkJCgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsJCQkKCQkJCQkvL21lLkFmdGVyRm9ybUJhcnUoKTsKCQkJICAJfQoJCQl9KTsKCQl9ZWxzZXsKCQkgCWFsZXJ0KGVycik7CgkJfQkKCQl9Cgl9LAkKCQoJU2ltcGFuR2VkdW5nXzQ6IGZ1bmN0aW9uKCl7CgkJdmFyIG1lPSB0aGlzOwoJCXZhciBlcnI9Jyc7CgkJCgkJdGhpcy5PbkVycm9yQ2xvc2UgPSBmYWxzZQkKCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOwoJCXZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybXNpbXBhbktCJzsKCQlhZGRDb3ZlclBhZ2UyKGNvdmVyLDEsdHJ1ZSxmYWxzZSk7CQoJCQoJCSQuYWpheCh7CgkJCXR5cGU6J1BPU1QnLCAKCQkvLwkgZGF0YTokKCcjUnVhbmdfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCQlkYXRhOiQoJyMnK3RoaXMucHJlZml4KydfS0Jmb3JtJykuc2VyaWFsaXplKCksCgkJCXVybDogdGhpcy51cmwrJyZ0aXBlPXNpbXBhbkdlZHVuZ180JywKCQkgIAlzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CQkKCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCgkJCQlkZWxFbGVtKGNvdmVyKTsJCQoJCQkJCgkJCQlpZihyZXNwLmVycj09JycpewoJCQkJCW1lLnJlZnJlc2hHZWR1bmdfNChyZXNwLmNvbnRlbnQpOwoJCQkJCW1lLkNsb3NlMigpOwoJCQkJfWVsc2V7CgkJCQkJYWxlcnQocmVzcC5lcnIpOwoJCQkJfQoJCSAgCX0KCQl9KTsKCQkKCX0sCgkKCVNpbXBhbkVkaXRSdWFuZ180OiBmdW5jdGlvbigpewoJCXZhciBtZT0gdGhpczsJCgkJdGhpcy5PbkVycm9yQ2xvc2UgPSBmYWxzZQkKCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOwoJCXZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybXNpbXBhbic7CgkJYWRkQ292ZXJQYWdlMihjb3ZlciwxLHRydWUsZmFsc2UpOwkKCQkKCQkkLmFqYXgoewoJCQl0eXBlOidQT1NUJywgCgkJCWRhdGE6JCgnI1J1YW5nX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkJdXJsOiB0aGlzLnVybCsnJnRpcGU9c2ltcGFuRWRpdFJ1YW5nXzQnLAoJCSAgCXN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwkKCQkJCWRlbEVsZW0oY292ZXIpOwkJCgkJCQkvL2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7CgkJCQlpZihyZXNwLmVycj09JycpewoJCQkJCWFsZXJ0KCdEYXRhIGJlcmhhc2lsIGRpc2ltcGFuJyk7CgkJCQkJbWUuQ2xvc2UoKTsKCQkJCQltZS5yZWZyZXNoTGlzdCh0cnVlKTsKCQkJCQltZS5BZnRlclNpbXBhbigpOwkKCQkJCX0KCQkJCWVsc2V7CgkJCQkJYWxlcnQocmVzcC5lcnIpOwoJCQkJfQoJCSAgCX0KCQl9KTsKCX0sCQoJCglyZWZyZXNoR2VkdW5nXzQgOiBmdW5jdGlvbihpZF9HZWR1bmdCYXJ1KXsKCXZhciBtZSA9IHRoaXM7IC8vYWxlcnQoJ3RlcycpOwkvL2FsZXJ0KHRoaXMucHJlZml4KTsKCQkkLmFqYXgoewoJCSAgdXJsOiAncGFnZXMucGhwP1BnPXJ1YW5nJnRpcGU9cmVmcmVzaEdlZHVuZ180JmlkX0dlZHVuZ0JhcnU9JytpZF9HZWR1bmdCYXJ1LAoJCSAgdHlwZSA6ICdQT1NUJywKCQkgIGRhdGE6JCgnI1J1YW5nX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQkJCgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250X2dkJykuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50LnVuaXQ7CgkJCW1lLmdldEdlZHVuZ180KCk7CgkJICB9CgkJfSk7Cgl9LAkKCQoJZ2V0R2VkdW5nXzQgOiBmdW5jdGlvbigpewoJdmFyIG1lID0gdGhpczsgLy9hbGVydCgndGVzJyk7CS8vYWxlcnQodGhpcy5wcmVmaXgpOwoJCQoJCSQuYWpheCh7CgkJICB1cmw6ICdwYWdlcy5waHA\/UGc9cnVhbmcmdGlwZT1nZXRHZWR1bmdfNCcsCgkJICB0eXBlIDogJ1BPU1QnLAoJCSAgLy9kYXRhOiQoJyNhZG1pbkZvcm0nKS5zZXJpYWxpemUoKSwKCQkgIGRhdGE6JCgnI1J1YW5nX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsJCQoJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQkJCgkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxJykudmFsdWUgPSByZXNwLmNvbnRlbnQucTsKCQkgIH0KCQl9KTsKCQoJfSwKCQoJU2ltcGFuXzQ6IGZ1bmN0aW9uKCl7CgkJdmFyIG1lPSB0aGlzOwkKCQl0aGlzLk9uRXJyb3JDbG9zZSA9IGZhbHNlCQoJCWRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3c9J2hpZGRlbic7CgkJdmFyIGNvdmVyID0gdGhpcy5wcmVmaXgrJ19mb3Jtc2ltcGFuJzsKCQlhZGRDb3ZlclBhZ2UyKGNvdmVyLDEsdHJ1ZSxmYWxzZSk7CQoJCQoJCSQuYWpheCh7CgkJCXR5cGU6J1BPU1QnLCAKCQkJZGF0YTokKCcjUnVhbmdfZm9ybScpLnNlcmlhbGl6ZSgpLAoJCQl1cmw6IHRoaXMudXJsKycmdGlwZT1zaW1wYW5fNCcsCgkJICAJc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewkJCgkJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CQoJCQkJZGVsRWxlbShjb3Zlcik7CQkKCQkJCS8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsKCQkJCWlmKHJlc3AuZXJyPT0nJyl7CgkJCQkJbWUuQ2xvc2UoKTsKCQkJCQltZS5yZWZyZXNoTGlzdCh0cnVlKQoJCQkJfWVsc2V7CgkJCQkJYWxlcnQocmVzcC5lcnIpOwoJCQkJfQoJCSAgCX0KCQl9KTsKCX0sCQkKCQoJU2ltcGFuOiBmdW5jdGlvbigpewoJCXZhciBtZT0gdGhpczsJCgkJdGhpcy5PbkVycm9yQ2xvc2UgPSBmYWxzZQkKCQlkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSdoaWRkZW4nOwoJCXZhciBjb3ZlciA9IHRoaXMucHJlZml4KydfZm9ybXNpbXBhbic7CgkJYWRkQ292ZXJQYWdlMihjb3ZlciwxLHRydWUsZmFsc2UpOwkKCQkKCQkkLmFqYXgoewoJCQl0eXBlOidQT1NUJywgCgkJCWRhdGE6JCgnI1J1YW5nX2Zvcm0nKS5zZXJpYWxpemUoKSwKCQkJdXJsOiB0aGlzLnVybCsnJnRpcGU9c2ltcGFuJywKCQkgIAlzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CQkKCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsJCgkJCQlkZWxFbGVtKGNvdmVyKTsJCQoJCQkJLy9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb3ZlcikuaW5uZXJIVE1MID0gcmVzcC5jb250ZW50OwoJCQkJaWYocmVzcC5lcnI9PScnKXsKCQkJCQltZS5DbG9zZSgpOwoJCQkJCW1lLnJlZnJlc2hMaXN0KHRydWUpCgkJCQl9ZWxzZXsKCQkJCQlhbGVydChyZXNwLmVycik7CgkJCQl9CgkJICAJfQoJCX0pOwoJfQoJCgkKfSk7",
    "size": "28848"
}