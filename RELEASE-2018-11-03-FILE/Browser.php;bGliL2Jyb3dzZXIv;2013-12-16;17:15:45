{
    "namaFile": "lib\/browser\/Browser.php",
    "lastUpdate": "2013-12-16+17:15:45.00",
    "contentFile": "\\/L2knLCR0aGlzLT5fYWdlbnQsJGF2ZXJzaW9uKTsNCgkJCSAgICAkdGhpcy0+c2V0VmVyc2lvbihzdHJfcmVwbGFjZSgncnY6JywnJywkYXZlcnNpb25bMF0pKTsNCgkJCSAgICAkdGhpcy0+c2V0QnJvd3NlcihzZWxmOjpCUk9XU0VSX01PWklMTEEpOw0KCQkJICAgIHJldHVybiB0cnVlOw0KCQkgICAgfQ0KCQkgICAgZWxzZSBpZiggc3RyaXBvcygkdGhpcy0+X2FnZW50LCdtb3ppbGxhJykgIT09IGZhbHNlICYmIHByZWdfbWF0Y2goJy9ydjpbMC05XVwuWzAtOV0vaScsJHRoaXMtPl9hZ2VudCkgJiYgc3RyaXBvcygkdGhpcy0+X2FnZW50LCduZXRzY2FwZScpID09PSBmYWxzZSApIHsNCgkJCSAgICAkYXZlcnNpb24gPSBleHBsb2RlKCcnLHN0cmlzdHIoJHRoaXMtPl9hZ2VudCwncnY6JykpOw0KCQkJICAgICR0aGlzLT5zZXRWZXJzaW9uKHN0cl9yZXBsYWNlKCdydjonLCcnLCRhdmVyc2lvblswXSkpOw0KCQkJICAgICR0aGlzLT5zZXRCcm93c2VyKHNlbGY6OkJST1dTRVJfTU9aSUxMQSk7DQoJCQkgICAgcmV0dXJuIHRydWU7DQoJCSAgICB9DQoJCSAgICBlbHNlIGlmKCBzdHJpcG9zKCR0aGlzLT5fYWdlbnQsJ21vemlsbGEnKSAhPT0gZmFsc2UgICYmIHByZWdfbWF0Y2goJy9tb3ppbGxhXC8oW14gXSopL2knLCR0aGlzLT5fYWdlbnQsJG1hdGNoZXMpICYmIHN0cmlwb3MoJHRoaXMtPl9hZ2VudCwnbmV0c2NhcGUnKSA9PT0gZmFsc2UgKSB7DQoJCQkgICAgJHRoaXMtPnNldFZlcnNpb24oJG1hdGNoZXNbMV0pOw0KCQkJICAgICR0aGlzLT5zZXRCcm93c2VyKHNlbGY6OkJST1dTRVJfTU9aSUxMQSk7DQoJCQkgICAgcmV0dXJuIHRydWU7DQoJCSAgICB9DQoJCQlyZXR1cm4gZmFsc2U7DQoJICAgIH0NCg0KCSAgICAvKioNCgkgICAgICogRGV0ZXJtaW5lIGlmIHRoZSBicm93c2VyIGlzIEx5bnggb3Igbm90IChsYXN0IHVwZGF0ZWQgMS43KQ0KCSAgICAgKiBAcmV0dXJuIGJvb2xlYW4gVHJ1ZSBpZiB0aGUgYnJvd3NlciBpcyBMeW54IG90aGVyd2lzZSBmYWxzZQ0KCSAgICAgKi8NCgkgICAgcHJvdGVjdGVkIGZ1bmN0aW9uIGNoZWNrQnJvd3Nlckx5bngoKSB7DQoJCSAgICBpZiggc3RyaXBvcygkdGhpcy0+X2FnZW50LCdseW54JykgIT09IGZhbHNlICkgew0KCQkJICAgICRhcmVzdWx0ID0gZXhwbG9kZSgnLycsc3RyaXN0cigkdGhpcy0+X2FnZW50LCdMeW54JykpOw0KCQkJICAgICRhdmVyc2lvbiA9IGV4cGxvZGUoJyAnLChpc3NldCgkYXJlc3VsdFsxXSk\",
    "size": "40606"
}