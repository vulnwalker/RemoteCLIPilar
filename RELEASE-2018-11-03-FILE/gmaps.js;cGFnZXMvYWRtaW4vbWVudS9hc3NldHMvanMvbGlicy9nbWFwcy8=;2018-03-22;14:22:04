{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/gmaps\/gmaps.js",
    "lastUpdate": "2018-03-22+14:22:04.52",
    "contentFile": "KGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHsKICBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHsKICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOwogIH0KICBlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgewogICAgZGVmaW5lKCdHTWFwcycsIFtdLCBmYWN0b3J5KTsKICB9CgogIHJvb3QuR01hcHMgPSBmYWN0b3J5KCk7Cgp9KHRoaXMsIGZ1bmN0aW9uKCkgewoKLyohCiAqIEdNYXBzLmpzIHYwLjQuMTYKICogaHR0cDovL2hwbmVvLmdpdGh1Yi5jb20vZ21hcHMvCiAqCiAqIENvcHlyaWdodCAyMDE0LCBHdXN0YXZvIExlb24KICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLgogKi8KCmlmICghKHR5cGVvZiB3aW5kb3cuZ29vZ2xlID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuZ29vZ2xlLm1hcHMpKSB7CiAgdGhyb3cgJ0dvb2dsZSBNYXBzIEFQSSBpcyByZXF1aXJlZC4gUGxlYXNlIHJlZ2lzdGVyIHRoZSBmb2xsb3dpbmcgSmF2YVNjcmlwdCBsaWJyYXJ5IGh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcy9hcGkvanM\\\/IG4gOiBNYXRoLm1heChsZW4gLSBNYXRoLmFicyhuKSwgMCk7CiAgICAgIGZvciAoOyBrIDwgbGVuOyBrKyspIHsKICAgICAgICAgIGlmIChrIGluIHQgJiYgdFtrXSA9PT0gc2VhcmNoRWxlbWVudCkgewogICAgICAgICAgICAgIHJldHVybiBrOwogICAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiAtMTsKICB9Cn0KICAKcmV0dXJuIEdNYXBzOwp9KSk7",
    "size": "57513"
}