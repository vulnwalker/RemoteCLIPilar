{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/CachedObjectStorage\/CacheBase.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "",
    "size": "10594"
}