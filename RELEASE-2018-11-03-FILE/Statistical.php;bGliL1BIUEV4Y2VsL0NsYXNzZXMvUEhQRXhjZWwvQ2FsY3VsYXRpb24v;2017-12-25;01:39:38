{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Calculation\/Statistical.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\\\/CiAgICAgICAgICAgIGlmICgoaXNfbnVtZXJpYygkYXJnKSkgJiYgKCFpc19zdHJpbmcoJGFyZykpKSB7CiAgICAgICAgICAgICAgICBpZiAoKGlzX251bGwoJHJldHVyblZhbHVlKSkgfHwgKCRhcmcgPiAkcmV0dXJuVmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgJHJldHVyblZhbHVlID0gJGFyZzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGlzX251bGwoJHJldHVyblZhbHVlKSkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICRyZXR1cm5WYWx1ZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBNQVhBCiAgICAgKgogICAgICogUmV0dXJucyB0aGUgZ3JlYXRlc3QgdmFsdWUgaW4gYSBsaXN0IG9mIGFyZ3VtZW50cywgaW5jbHVkaW5nIG51bWJlcnMsIHRleHQsIGFuZCBsb2dpY2FsIHZhbHVlcwogICAgICoKICAgICAqIEV4Y2VsIEZ1bmN0aW9uOgogICAgICogICAgICAgIE1BWEEodmFsdWUxWyx2YWx1ZTJbLCAuLi5dXSkKICAgICAqCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYwogICAgICogQGNhdGVnb3J5IFN0YXRpc3RpY2FsIEZ1bmN0aW9ucwogICAgICogQHBhcmFtICAgIG1peGVkICAgICAgICAkYXJnLC4uLiAgICAgICAgRGF0YSB2YWx1ZXMKICAgICAqIEByZXR1cm4gICAgZmxvYXQKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBNQVhBKCkKICAgIHsKICAgICAgICAkcmV0dXJuVmFsdWUgPSBudWxsOwoKICAgICAgICAvLyBMb29wIHRocm91Z2ggYXJndW1lbnRzCiAgICAgICAgJGFBcmdzID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuQXJyYXkoZnVuY19nZXRfYXJncygpKTsKICAgICAgICBmb3JlYWNoICgkYUFyZ3MgYXMgJGFyZykgewogICAgICAgICAgICAvLyBJcyBpdCBhIG51bWVyaWMgdmFsdWU\\\\/CiAgICAgICAgICAgICAgICBpZiAoKGlzX251bWVyaWMoJGFyZykpICYmICghaXNfc3RyaW5nKCRhcmcpKSkgewogICAgICAgICAgICAgICAgICAgICRzdW1tZXIgKz0gcG93KCgoJGFyZyAtICRtZWFuKSAvICRzdGREZXYpLCAzKTsKICAgICAgICAgICAgICAgICAgICArKyRjb3VudDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCRjb3VudCA+IDIpIHsKICAgICAgICAgICAgcmV0dXJuICRzdW1tZXIgKiAoJGNvdW50IC8gKCgkY291bnQtMSkgKiAoJGNvdW50LTIpKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OkRJVjAoKTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBTTE9QRQogICAgICoKICAgICAqIFJldHVybnMgdGhlIHNsb3BlIG9mIHRoZSBsaW5lYXIgcmVncmVzc2lvbiBsaW5lIHRocm91Z2ggZGF0YSBwb2ludHMgaW4ga25vd25feSdzIGFuZCBrbm93bl94J3MuCiAgICAgKgogICAgICogQHBhcmFtICAgIGFycmF5IG9mIG1peGVkICAgICAgICBEYXRhIFNlcmllcyBZCiAgICAgKiBAcGFyYW0gICAgYXJyYXkgb2YgbWl4ZWQgICAgICAgIERhdGEgU2VyaWVzIFgKICAgICAqIEByZXR1cm4gICAgZmxvYXQKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBTTE9QRSgkeVZhbHVlcywgJHhWYWx1ZXMpCiAgICB7CiAgICAgICAgaWYgKCFzZWxmOjpjaGVja1RyZW5kQXJyYXlzKCR5VmFsdWVzLCAkeFZhbHVlcykpIHsKICAgICAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6VkFMVUUoKTsKICAgICAgICB9CiAgICAgICAgJHlWYWx1ZUNvdW50ID0gY291bnQoJHlWYWx1ZXMpOwogICAgICAgICR4VmFsdWVDb3VudCA9IGNvdW50KCR4VmFsdWVzKTsKCiAgICAgICAgaWYgKCgkeVZhbHVlQ291bnQgPT0gMCkgfHwgKCR5VmFsdWVDb3VudCAhPSAkeFZhbHVlQ291bnQpKSB7CiAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6Ok5BKCk7CiAgICAgICAgfSBlbHNlaWYgKCR5VmFsdWVDb3VudCA9PSAxKSB7CiAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OkRJVjAoKTsKICAgICAgICB9CgogICAgICAgICRiZXN0Rml0TGluZWFyID0gdHJlbmRDbGFzczo6Y2FsY3VsYXRlKHRyZW5kQ2xhc3M6OlRSRU5EX0xJTkVBUiwgJHlWYWx1ZXMsICR4VmFsdWVzKTsKICAgICAgICByZXR1cm4gJGJlc3RGaXRMaW5lYXItPmdldFNsb3BlKCk7CiAgICB9CgoKICAgIC8qKgogICAgICogU01BTEwKICAgICAqCiAgICAgKiBSZXR1cm5zIHRoZSBudGggc21hbGxlc3QgdmFsdWUgaW4gYSBkYXRhIHNldC4gWW91IGNhbiB1c2UgdGhpcyBmdW5jdGlvbiB0bwogICAgICogICAgICAgIHNlbGVjdCBhIHZhbHVlIGJhc2VkIG9uIGl0cyByZWxhdGl2ZSBzdGFuZGluZy4KICAgICAqCiAgICAgKiBFeGNlbCBGdW5jdGlvbjoKICAgICAqICAgICAgICBTTUFMTCh2YWx1ZTFbLHZhbHVlMlssIC4uLl1dLGVudHJ5KQogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAY2F0ZWdvcnkgU3RhdGlzdGljYWwgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0gICAgbWl4ZWQgICAgICAgICRhcmcsLi4uICAgICAgICBEYXRhIHZhbHVlcwogICAgICogQHBhcmFtICAgIGludCAgICAgICAgICAgICRlbnRyeSAgICAgICAgICAgIFBvc2l0aW9uIChvcmRlcmVkIGZyb20gdGhlIHNtYWxsZXN0KSBpbiB0aGUgYXJyYXkgb3IgcmFuZ2Ugb2YgZGF0YSB0byByZXR1cm4KICAgICAqIEByZXR1cm4gICAgZmxvYXQKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBTTUFMTCgpCiAgICB7CiAgICAgICAgJGFBcmdzID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuQXJyYXkoZnVuY19nZXRfYXJncygpKTsKCiAgICAgICAgLy8gQ2FsY3VsYXRlCiAgICAgICAgJGVudHJ5ID0gYXJyYXlfcG9wKCRhQXJncyk7CgogICAgICAgIGlmICgoaXNfbnVtZXJpYygkZW50cnkpKSAmJiAoIWlzX3N0cmluZygkZW50cnkpKSkgewogICAgICAgICAgICAkbUFyZ3MgPSBhcnJheSgpOwogICAgICAgICAgICBmb3JlYWNoICgkYUFyZ3MgYXMgJGFyZykgewogICAgICAgICAgICAgICAgLy8gSXMgaXQgYSBudW1lcmljIHZhbHVlPwogICAgICAgICAgICAgICAgaWYgKChpc19udW1lcmljKCRhcmcpKSAmJiAoIWlzX3N0cmluZygkYXJnKSkpIHsKICAgICAgICAgICAgICAgICAgICAkbUFyZ3NbXSA9ICRhcmc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJGNvdW50ID0gc2VsZjo6Q09VTlQoJG1BcmdzKTsKICAgICAgICAgICAgJGVudHJ5ID0gZmxvb3IoLS0kZW50cnkpOwogICAgICAgICAgICBpZiAoKCRlbnRyeSA8IDApIHx8ICgkZW50cnkgPj0gJGNvdW50KSB8fCAoJGNvdW50ID09IDApKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpOYU4oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzb3J0KCRtQXJncyk7CiAgICAgICAgICAgIHJldHVybiAkbUFyZ3NbJGVudHJ5XTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6VkFMVUUoKTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBTVEFOREFSRElaRQogICAgICoKICAgICAqIFJldHVybnMgYSBub3JtYWxpemVkIHZhbHVlIGZyb20gYSBkaXN0cmlidXRpb24gY2hhcmFjdGVyaXplZCBieSBtZWFuIGFuZCBzdGFuZGFyZF9kZXYuCiAgICAgKgogICAgICogQHBhcmFtICAgIGZsb2F0ICAgICR2YWx1ZSAgICAgICAgVmFsdWUgdG8gbm9ybWFsaXplCiAgICAgKiBAcGFyYW0gICAgZmxvYXQgICAgJG1lYW4gICAgICAgIE1lYW4gVmFsdWUKICAgICAqIEBwYXJhbSAgICBmbG9hdCAgICAkc3RkRGV2ICAgICAgICBTdGFuZGFyZCBEZXZpYXRpb24KICAgICAqIEByZXR1cm4gICAgZmxvYXQgICAgU3RhbmRhcmRpemVkIHZhbHVlCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gU1RBTkRBUkRJWkUoJHZhbHVlLCAkbWVhbiwgJHN0ZERldikKICAgIHsKICAgICAgICAkdmFsdWUgID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJHZhbHVlKTsKICAgICAgICAkbWVhbiAgID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJG1lYW4pOwogICAgICAgICRzdGREZXYgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkc3RkRGV2KTsKCiAgICAgICAgaWYgKChpc19udW1lcmljKCR2YWx1ZSkpICYmIChpc19udW1lcmljKCRtZWFuKSkgJiYgKGlzX251bWVyaWMoJHN0ZERldikpKSB7CiAgICAgICAgICAgIGlmICgkc3RkRGV2IDw9IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6Ok5hTigpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAoJHZhbHVlIC0gJG1lYW4pIC8gJHN0ZERldiA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OlZBTFVFKCk7CiAgICB9CgoKICAgIC8qKgogICAgICogU1RERVYKICAgICAqCiAgICAgKiBFc3RpbWF0ZXMgc3RhbmRhcmQgZGV2aWF0aW9uIGJhc2VkIG9uIGEgc2FtcGxlLiBUaGUgc3RhbmRhcmQgZGV2aWF0aW9uIGlzIGEgbWVhc3VyZSBvZiBob3cKICAgICAqICAgICAgICB3aWRlbHkgdmFsdWVzIGFyZSBkaXNwZXJzZWQgZnJvbSB0aGUgYXZlcmFnZSB2YWx1ZSAodGhlIG1lYW4pLgogICAgICoKICAgICAqIEV4Y2VsIEZ1bmN0aW9uOgogICAgICogICAgICAgIFNUREVWKHZhbHVlMVssdmFsdWUyWywgLi4uXV0pCiAgICAgKgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKICAgICAqIEBjYXRlZ29yeSBTdGF0aXN0aWNhbCBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSAgICBtaXhlZCAgICAgICAgJGFyZywuLi4gICAgICAgIERhdGEgdmFsdWVzCiAgICAgKiBAcmV0dXJuICAgIGZsb2F0CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gU1RERVYoKQogICAgewogICAgICAgICRhQXJncyA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlbkFycmF5SW5kZXhlZChmdW5jX2dldF9hcmdzKCkpOwoKICAgICAgICAvLyBSZXR1cm4gdmFsdWUKICAgICAgICAkcmV0dXJuVmFsdWUgPSBudWxsOwoKICAgICAgICAkYU1lYW4gPSBzZWxmOjpBVkVSQUdFKCRhQXJncyk7CiAgICAgICAgaWYgKCFpc19udWxsKCRhTWVhbikpIHsKICAgICAgICAgICAgJGFDb3VudCA9IC0xOwogICAgICAgICAgICBmb3JlYWNoICgkYUFyZ3MgYXMgJGsgPT4gJGFyZykgewogICAgICAgICAgICAgICAgaWYgKChpc19ib29sKCRhcmcpKSAmJgogICAgICAgICAgICAgICAgICAgICgoIVBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6aXNDZWxsVmFsdWUoJGspKSB8fCAoUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpnZXRDb21wYXRpYmlsaXR5TW9kZSgpID09IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6Q09NUEFUSUJJTElUWV9PUEVOT0ZGSUNFKSkpIHsKICAgICAgICAgICAgICAgICAgICAkYXJnID0gKGludGVnZXIpICRhcmc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBJcyBpdCBhIG51bWVyaWMgdmFsdWU\\/CiAgICAgICAgICAgIGlmICgoaXNfbnVtZXJpYygkYXJnKSkgJiYgKCFpc19zdHJpbmcoJGFyZykpKSB7CiAgICAgICAgICAgICAgICAkc3VtbWVyQSArPSAoJGFyZyAqICRhcmcpOwogICAgICAgICAgICAgICAgJHN1bW1lckIgKz0gJGFyZzsKICAgICAgICAgICAgICAgICsrJGFDb3VudDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCRhQ291bnQgPiAxKSB7CiAgICAgICAgICAgICRzdW1tZXJBICo9ICRhQ291bnQ7CiAgICAgICAgICAgICRzdW1tZXJCICo9ICRzdW1tZXJCOwogICAgICAgICAgICAkcmV0dXJuVmFsdWUgPSAoJHN1bW1lckEgLSAkc3VtbWVyQikgLyAoJGFDb3VudCAqICgkYUNvdW50IC0gMSkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJHJldHVyblZhbHVlOwogICAgfQoKCiAgICAvKioKICAgICAqIFZBUkEKICAgICAqCiAgICAgKiBFc3RpbWF0ZXMgdmFyaWFuY2UgYmFzZWQgb24gYSBzYW1wbGUsIGluY2x1ZGluZyBudW1iZXJzLCB0ZXh0LCBhbmQgbG9naWNhbCB2YWx1ZXMKICAgICAqCiAgICAgKiBFeGNlbCBGdW5jdGlvbjoKICAgICAqICAgICAgICBWQVJBKHZhbHVlMVssdmFsdWUyWywgLi4uXV0pCiAgICAgKgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKICAgICAqIEBjYXRlZ29yeSBTdGF0aXN0aWNhbCBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSAgICBtaXhlZCAgICAgICAgJGFyZywuLi4gICAgICAgIERhdGEgdmFsdWVzCiAgICAgKiBAcmV0dXJuICAgIGZsb2F0CiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gVkFSQSgpCiAgICB7CiAgICAgICAgJHJldHVyblZhbHVlID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpESVYwKCk7CgogICAgICAgICRzdW1tZXJBID0gJHN1bW1lckIgPSAwOwoKICAgICAgICAvLyBMb29wIHRocm91Z2ggYXJndW1lbnRzCiAgICAgICAgJGFBcmdzID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuQXJyYXlJbmRleGVkKGZ1bmNfZ2V0X2FyZ3MoKSk7CiAgICAgICAgJGFDb3VudCA9IDA7CiAgICAgICAgZm9yZWFjaCAoJGFBcmdzIGFzICRrID0+ICRhcmcpIHsKICAgICAgICAgICAgaWYgKChpc19zdHJpbmcoJGFyZykpICYmCiAgICAgICAgICAgICAgICAoUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjppc1ZhbHVlKCRrKSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OlZBTFVFKCk7CiAgICAgICAgICAgIH0gZWxzZWlmICgoaXNfc3RyaW5nKCRhcmcpKSAmJgogICAgICAgICAgICAgICAgKCFQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmlzTWF0cml4VmFsdWUoJGspKSkgewogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gSXMgaXQgYSBudW1lcmljIHZhbHVlPwogICAgICAgICAgICAgICAgaWYgKChpc19udW1lcmljKCRhcmcpKSB8fCAoaXNfYm9vbCgkYXJnKSkgfHwgKChpc19zdHJpbmcoJGFyZykgJiAoJGFyZyAhPSAnJykpKSkgewogICAgICAgICAgICAgICAgICAgIGlmIChpc19ib29sKCRhcmcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRhcmcgPSAoaW50ZWdlcikgJGFyZzsKICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAoaXNfc3RyaW5nKCRhcmcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRhcmcgPSAwOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkc3VtbWVyQSArPSAoJGFyZyAqICRhcmcpOwogICAgICAgICAgICAgICAgICAgICRzdW1tZXJCICs9ICRhcmc7CiAgICAgICAgICAgICAgICAgICAgKyskYUNvdW50OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoJGFDb3VudCA+IDEpIHsKICAgICAgICAgICAgJHN1bW1lckEgKj0gJGFDb3VudDsKICAgICAgICAgICAgJHN1bW1lckIgKj0gJHN1bW1lckI7CiAgICAgICAgICAgICRyZXR1cm5WYWx1ZSA9ICgkc3VtbWVyQSAtICRzdW1tZXJCKSAvICgkYUNvdW50ICogKCRhQ291bnQgLSAxKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAkcmV0dXJuVmFsdWU7CiAgICB9CgoKICAgIC8qKgogICAgICogVkFSUAogICAgICoKICAgICAqIENhbGN1bGF0ZXMgdmFyaWFuY2UgYmFzZWQgb24gdGhlIGVudGlyZSBwb3B1bGF0aW9uCiAgICAgKgogICAgICogRXhjZWwgRnVuY3Rpb246CiAgICAgKiAgICAgICAgVkFSUCh2YWx1ZTFbLHZhbHVlMlssIC4uLl1dKQogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAY2F0ZWdvcnkgU3RhdGlzdGljYWwgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0gICAgbWl4ZWQgICAgICAgICRhcmcsLi4uICAgICAgICBEYXRhIHZhbHVlcwogICAgICogQHJldHVybiAgICBmbG9hdAogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFZBUlAoKQogICAgewogICAgICAgIC8vIFJldHVybiB2YWx1ZQogICAgICAgICRyZXR1cm5WYWx1ZSA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6RElWMCgpOwoKICAgICAgICAkc3VtbWVyQSA9ICRzdW1tZXJCID0gMDsKCiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGFyZ3VtZW50cwogICAgICAgICRhQXJncyA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlbkFycmF5KGZ1bmNfZ2V0X2FyZ3MoKSk7CiAgICAgICAgJGFDb3VudCA9IDA7CiAgICAgICAgZm9yZWFjaCAoJGFBcmdzIGFzICRhcmcpIHsKICAgICAgICAgICAgaWYgKGlzX2Jvb2woJGFyZykpIHsKICAgICAgICAgICAgICAgICRhcmcgPSAoaW50ZWdlcikgJGFyZzsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBJcyBpdCBhIG51bWVyaWMgdmFsdWU\/CiAgICAgICAgICAgIGlmICgoaXNfbnVtZXJpYygkYXJnKSkgJiYgKCFpc19zdHJpbmcoJGFyZykpKSB7CiAgICAgICAgICAgICAgICAkc3VtbWVyQSArPSAoJGFyZyAqICRhcmcpOwogICAgICAgICAgICAgICAgJHN1bW1lckIgKz0gJGFyZzsKICAgICAgICAgICAgICAgICsrJGFDb3VudDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCRhQ291bnQgPiAwKSB7CiAgICAgICAgICAgICRzdW1tZXJBICo9ICRhQ291bnQ7CiAgICAgICAgICAgICRzdW1tZXJCICo9ICRzdW1tZXJCOwogICAgICAgICAgICAkcmV0dXJuVmFsdWUgPSAoJHN1bW1lckEgLSAkc3VtbWVyQikgLyAoJGFDb3VudCAqICRhQ291bnQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJHJldHVyblZhbHVlOwogICAgfQoKCiAgICAvKioKICAgICAqIFZBUlBBCiAgICAgKgogICAgICogQ2FsY3VsYXRlcyB2YXJpYW5jZSBiYXNlZCBvbiB0aGUgZW50aXJlIHBvcHVsYXRpb24sIGluY2x1ZGluZyBudW1iZXJzLCB0ZXh0LCBhbmQgbG9naWNhbCB2YWx1ZXMKICAgICAqCiAgICAgKiBFeGNlbCBGdW5jdGlvbjoKICAgICAqICAgICAgICBWQVJQQSh2YWx1ZTFbLHZhbHVlMlssIC4uLl1dKQogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAY2F0ZWdvcnkgU3RhdGlzdGljYWwgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0gICAgbWl4ZWQgICAgICAgICRhcmcsLi4uICAgICAgICBEYXRhIHZhbHVlcwogICAgICogQHJldHVybiAgICBmbG9hdAogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFZBUlBBKCkKICAgIHsKICAgICAgICAkcmV0dXJuVmFsdWUgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OkRJVjAoKTsKCiAgICAgICAgJHN1bW1lckEgPSAkc3VtbWVyQiA9IDA7CgogICAgICAgIC8vIExvb3AgdGhyb3VnaCBhcmd1bWVudHMKICAgICAgICAkYUFyZ3MgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5BcnJheUluZGV4ZWQoZnVuY19nZXRfYXJncygpKTsKICAgICAgICAkYUNvdW50ID0gMDsKICAgICAgICBmb3JlYWNoICgkYUFyZ3MgYXMgJGsgPT4gJGFyZykgewogICAgICAgICAgICBpZiAoKGlzX3N0cmluZygkYXJnKSkgJiYKICAgICAgICAgICAgICAgIChQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmlzVmFsdWUoJGspKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6VkFMVUUoKTsKICAgICAgICAgICAgfSBlbHNlaWYgKChpc19zdHJpbmcoJGFyZykpICYmCiAgICAgICAgICAgICAgICAoIVBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6aXNNYXRyaXhWYWx1ZSgkaykpKSB7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBJcyBpdCBhIG51bWVyaWMgdmFsdWU\/CiAgICAgICAgICAgICAgICBpZiAoKGlzX251bWVyaWMoJGFyZykpIHx8IChpc19ib29sKCRhcmcpKSB8fCAoKGlzX3N0cmluZygkYXJnKSAmICgkYXJnICE9ICcnKSkpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2Jvb2woJGFyZykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGFyZyA9IChpbnRlZ2VyKSAkYXJnOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZWlmIChpc19zdHJpbmcoJGFyZykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGFyZyA9IDA7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRzdW1tZXJBICs9ICgkYXJnICogJGFyZyk7CiAgICAgICAgICAgICAgICAgICAgJHN1bW1lckIgKz0gJGFyZzsKICAgICAgICAgICAgICAgICAgICArKyRhQ291bnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgkYUNvdW50ID4gMCkgewogICAgICAgICAgICAkc3VtbWVyQSAqPSAkYUNvdW50OwogICAgICAgICAgICAkc3VtbWVyQiAqPSAkc3VtbWVyQjsKICAgICAgICAgICAgJHJldHVyblZhbHVlID0gKCRzdW1tZXJBIC0gJHN1bW1lckIpIC8gKCRhQ291bnQgKiAkYUNvdW50KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICRyZXR1cm5WYWx1ZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBXRUlCVUxMCiAgICAgKgogICAgICogUmV0dXJucyB0aGUgV2VpYnVsbCBkaXN0cmlidXRpb24uIFVzZSB0aGlzIGRpc3RyaWJ1dGlvbiBpbiByZWxpYWJpbGl0eQogICAgICogYW5hbHlzaXMsIHN1Y2ggYXMgY2FsY3VsYXRpbmcgYSBkZXZpY2UncyBtZWFuIHRpbWUgdG8gZmFpbHVyZS4KICAgICAqCiAgICAgKiBAcGFyYW0gICAgZmxvYXQgICAgICAgICR2YWx1ZQogICAgICogQHBhcmFtICAgIGZsb2F0ICAgICAgICAkYWxwaGEgICAgICAgIEFscGhhIFBhcmFtZXRlcgogICAgICogQHBhcmFtICAgIGZsb2F0ICAgICAgICAkYmV0YSAgICAgICAgQmV0YSBQYXJhbWV0ZXIKICAgICAqIEBwYXJhbSAgICBib29sZWFuICAgICAgICAkY3VtdWxhdGl2ZQogICAgICogQHJldHVybiAgICBmbG9hdAogICAgICoKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBXRUlCVUxMKCR2YWx1ZSwgJGFscGhhLCAkYmV0YSwgJGN1bXVsYXRpdmUpCiAgICB7CiAgICAgICAgJHZhbHVlID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJHZhbHVlKTsKICAgICAgICAkYWxwaGEgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkYWxwaGEpOwogICAgICAgICRiZXRhICA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlblNpbmdsZVZhbHVlKCRiZXRhKTsKCiAgICAgICAgaWYgKChpc19udW1lcmljKCR2YWx1ZSkpICYmIChpc19udW1lcmljKCRhbHBoYSkpICYmIChpc19udW1lcmljKCRiZXRhKSkpIHsKICAgICAgICAgICAgaWYgKCgkdmFsdWUgPCAwKSB8fCAoJGFscGhhIDw9IDApIHx8ICgkYmV0YSA8PSAwKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6TmFOKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKChpc19udW1lcmljKCRjdW11bGF0aXZlKSkgfHwgKGlzX2Jvb2woJGN1bXVsYXRpdmUpKSkgewogICAgICAgICAgICAgICAgaWYgKCRjdW11bGF0aXZlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgLSBleHAoMCAtIHBvdygkdmFsdWUgLyAkYmV0YSwgJGFscGhhKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAoJGFscGhhIC8gcG93KCRiZXRhLCAkYWxwaGEpKSAqIHBvdygkdmFsdWUsICRhbHBoYSAtIDEpICogZXhwKDAgLSBwb3coJHZhbHVlIC8gJGJldGEsICRhbHBoYSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OlZBTFVFKCk7CiAgICB9CgoKICAgIC8qKgogICAgICogWlRFU1QKICAgICAqCiAgICAgKiBSZXR1cm5zIHRoZSBXZWlidWxsIGRpc3RyaWJ1dGlvbi4gVXNlIHRoaXMgZGlzdHJpYnV0aW9uIGluIHJlbGlhYmlsaXR5CiAgICAgKiBhbmFseXNpcywgc3VjaCBhcyBjYWxjdWxhdGluZyBhIGRldmljZSdzIG1lYW4gdGltZSB0byBmYWlsdXJlLgogICAgICoKICAgICAqIEBwYXJhbSAgICBmbG9hdCAgICAgICAgJGRhdGFTZXQKICAgICAqIEBwYXJhbSAgICBmbG9hdCAgICAgICAgJG0wICAgICAgICBBbHBoYSBQYXJhbWV0ZXIKICAgICAqIEBwYXJhbSAgICBmbG9hdCAgICAgICAgJHNpZ21hICAgIEJldGEgUGFyYW1ldGVyCiAgICAgKiBAcGFyYW0gICAgYm9vbGVhbiAgICAgICAgJGN1bXVsYXRpdmUKICAgICAqIEByZXR1cm4gICAgZmxvYXQKICAgICAqCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gWlRFU1QoJGRhdGFTZXQsICRtMCwgJHNpZ21hID0gbnVsbCkKICAgIHsKICAgICAgICAkZGF0YVNldCA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlbkFycmF5SW5kZXhlZCgkZGF0YVNldCk7CiAgICAgICAgJG0wICAgICAgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkbTApOwogICAgICAgICRzaWdtYSAgID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJHNpZ21hKTsKCiAgICAgICAgaWYgKGlzX251bGwoJHNpZ21hKSkgewogICAgICAgICAgICAkc2lnbWEgPSBzZWxmOjpTVERFVigkZGF0YVNldCk7CiAgICAgICAgfQogICAgICAgICRuID0gY291bnQoJGRhdGFTZXQpOwoKICAgICAgICByZXR1cm4gMSAtIHNlbGY6Ok5PUk1TRElTVCgoc2VsZjo6QVZFUkFHRSgkZGF0YVNldCkgLSAkbTApIC8gKCRzaWdtYSAvIFNRUlQoJG4pKSk7CiAgICB9Cn0K",
    "size": "132522"
}