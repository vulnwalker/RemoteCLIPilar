{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Reader\/Excel5\/Escher.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKgogKiBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1X0VzY2hlcgogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQogKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgogKgogKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAgMDIxMTAtMTMwMSAgVVNBCiAqCiAqIEBjYXRlZ29yeSAgIFBIUEV4Y2VsCiAqIEBwYWNrYWdlICAgIFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDUKICogQGNvcHlyaWdodCAgQ29weXJpZ2h0IChjKSAyMDA2IC0gMjAxNSBQSFBFeGNlbCAoaHR0cDovL3d3dy5jb2RlcGxleC5jb20vUEhQRXhjZWwpCiAqIEBsaWNlbnNlICAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvbGdwbC0yLjEudHh0ICAgIExHUEwKICogQHZlcnNpb24gICAgIyNWRVJTSU9OIyMsICMjREFURSMjCiAqLwpjbGFzcyBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1X0VzY2hlcgp7CiAgICBjb25zdCBER0dDT05UQUlORVIgICAgICA9IDB4RjAwMDsKICAgIGNvbnN0IEJTVE9SRUNPTlRBSU5FUiAgID0gMHhGMDAxOwogICAgY29uc3QgREdDT05UQUlORVIgICAgICAgPSAweEYwMDI7CiAgICBjb25zdCBTUEdSQ09OVEFJTkVSICAgICA9IDB4RjAwMzsKICAgIGNvbnN0IFNQQ09OVEFJTkVSICAgICAgID0gMHhGMDA0OwogICAgY29uc3QgREdHICAgICAgICAgICAgICAgPSAweEYwMDY7CiAgICBjb25zdCBCU0UgICAgICAgICAgICAgICA9IDB4RjAwNzsKICAgIGNvbnN0IERHICAgICAgICAgICAgICAgID0gMHhGMDA4OwogICAgY29uc3QgU1BHUiAgICAgICAgICAgICAgPSAweEYwMDk7CiAgICBjb25zdCBTUCAgICAgICAgICAgICAgICA9IDB4RjAwQTsKICAgIGNvbnN0IE9QVCAgICAgICAgICAgICAgID0gMHhGMDBCOwogICAgY29uc3QgQ0xJRU5UVEVYVEJPWCAgICAgPSAweEYwMEQ7CiAgICBjb25zdCBDTElFTlRBTkNIT1IgICAgICA9IDB4RjAxMDsKICAgIGNvbnN0IENMSUVOVERBVEEgICAgICAgID0gMHhGMDExOwogICAgY29uc3QgQkxJUEpQRUcgICAgICAgICAgPSAweEYwMUQ7CiAgICBjb25zdCBCTElQUE5HICAgICAgICAgICA9IDB4RjAxRTsKICAgIGNvbnN0IFNQTElUTUVOVUNPTE9SUyAgID0gMHhGMTFFOwogICAgY29uc3QgVEVSVElBUllPUFQgICAgICAgPSAweEYxMjI7CgogICAgLyoqCiAgICAgKiBFc2NoZXIgc3RyZWFtIGRhdGEgKGJpbmFyeSkKICAgICAqCiAgICAgKiBAdmFyIHN0cmluZwogICAgICovCiAgICBwcml2YXRlICRkYXRhOwoKICAgIC8qKgogICAgICogU2l6ZSBpbiBieXRlcyBvZiB0aGUgRXNjaGVyIHN0cmVhbSBkYXRhCiAgICAgKgogICAgICogQHZhciBpbnQKICAgICAqLwogICAgcHJpdmF0ZSAkZGF0YVNpemU7CgogICAgLyoqCiAgICAgKiBDdXJyZW50IHBvc2l0aW9uIG9mIHN0cmVhbSBwb2ludGVyIGluIEVzY2hlciBzdHJlYW0gZGF0YQogICAgICoKICAgICAqIEB2YXIgaW50CiAgICAgKi8KICAgIHByaXZhdGUgJHBvczsKCiAgICAvKioKICAgICAqIFRoZSBvYmplY3QgdG8gYmUgcmV0dXJuZWQgYnkgdGhlIHJlYWRlci4gTW9kaWZpZWQgZHVyaW5nIGxvYWQuCiAgICAgKgogICAgICogQHZhciBtaXhlZAogICAgICovCiAgICBwcml2YXRlICRvYmplY3Q7CgogICAgLyoqCiAgICAgKiBDcmVhdGUgYSBuZXcgUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNV9Fc2NoZXIgaW5zdGFuY2UKICAgICAqCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9iamVjdAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJG9iamVjdCkKICAgIHsKICAgICAgICAkdGhpcy0+b2JqZWN0ID0gJG9iamVjdDsKICAgIH0KCiAgICAvKioKICAgICAqIExvYWQgRXNjaGVyIHN0cmVhbSBkYXRhLiBNYXkgYmUgYSBwYXJ0aWFsIEVzY2hlciBzdHJlYW0uCiAgICAgKgogICAgICogQHBhcmFtIHN0cmluZyAkZGF0YQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gbG9hZCgkZGF0YSkKICAgIHsKICAgICAgICAkdGhpcy0+ZGF0YSA9ICRkYXRhOwoKICAgICAgICAvLyB0b3RhbCBieXRlIHNpemUgb2YgRXhjZWwgZGF0YSAod29ya2Jvb2sgZ2xvYmFsIHN1YnN0cmVhbSArIHNoZWV0IHN1YnN0cmVhbXMpCiAgICAgICAgJHRoaXMtPmRhdGFTaXplID0gc3RybGVuKCR0aGlzLT5kYXRhKTsKCiAgICAgICAgJHRoaXMtPnBvcyA9IDA7CgogICAgICAgIC8vIFBhcnNlIEVzY2hlciBzdHJlYW0KICAgICAgICB3aGlsZSAoJHRoaXMtPnBvcyA8ICR0aGlzLT5kYXRhU2l6ZSkgewogICAgICAgICAgICAvLyBvZmZzZXQ6IDI7IHNpemU6IDI6IFJlY29yZCBUeXBlCiAgICAgICAgICAgICRmYnQgPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQyZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDIpOwoKICAgICAgICAgICAgc3dpdGNoICgkZmJ0KSB7CiAgICAgICAgICAgICAgICBjYXNlIHNlbGY6OkRHR0NPTlRBSU5FUjoKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZERnZ0NvbnRhaW5lcigpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBzZWxmOjpER0c6CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnJlYWREZ2coKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Ugc2VsZjo6QlNUT1JFQ09OVEFJTkVSOgogICAgICAgICAgICAgICAgICAgICR0aGlzLT5yZWFkQnN0b3JlQ29udGFpbmVyKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIHNlbGY6OkJTRToKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZEJTRSgpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBzZWxmOjpCTElQSlBFRzoKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZEJsaXBKUEVHKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIHNlbGY6OkJMSVBQTkc6CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnJlYWRCbGlwUE5HKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIHNlbGY6Ok9QVDoKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZE9QVCgpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBzZWxmOjpURVJUSUFSWU9QVDoKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZFRlcnRpYXJ5T1BUKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIHNlbGY6OlNQTElUTUVOVUNPTE9SUzoKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZFNwbGl0TWVudUNvbG9ycygpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBzZWxmOjpER0NPTlRBSU5FUjoKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZERnQ29udGFpbmVyKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIHNlbGY6OkRHOgogICAgICAgICAgICAgICAgICAgICR0aGlzLT5yZWFkRGcoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Ugc2VsZjo6U1BHUkNPTlRBSU5FUjoKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZFNwZ3JDb250YWluZXIoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Ugc2VsZjo6U1BDT05UQUlORVI6CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnJlYWRTcENvbnRhaW5lcigpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBzZWxmOjpTUEdSOgogICAgICAgICAgICAgICAgICAgICR0aGlzLT5yZWFkU3BncigpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBzZWxmOjpTUDoKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZFNwKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIHNlbGY6OkNMSUVOVFRFWFRCT1g6CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnJlYWRDbGllbnRUZXh0Ym94KCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIHNlbGY6OkNMSUVOVEFOQ0hPUjoKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZENsaWVudEFuY2hvcigpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBzZWxmOjpDTElFTlREQVRBOgogICAgICAgICAgICAgICAgICAgICR0aGlzLT5yZWFkQ2xpZW50RGF0YSgpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cmVhZERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICR0aGlzLT5vYmplY3Q7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWFkIGEgZ2VuZXJpYyByZWNvcmQKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWFkRGVmYXVsdCgpCiAgICB7CiAgICAgICAgLy8gb2Zmc2V0IDA7IHNpemU6IDI7IHJlY1ZlciBhbmQgcmVjSW5zdGFuY2UKICAgICAgICAkdmVySW5zdGFuY2UgPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQyZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyk7CgogICAgICAgIC8vIG9mZnNldDogMjsgc2l6ZTogMjogUmVjb3JkIFR5cGUKICAgICAgICAkZmJ0ID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50MmQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyAyKTsKCiAgICAgICAgLy8gYml0OiAwLTM7IG1hc2s6IDB4MDAwRjsgcmVjVmVyCiAgICAgICAgJHJlY1ZlciA9ICgweDAwMEYgJiAkdmVySW5zdGFuY2UpID4+IDA7CgogICAgICAgICRsZW5ndGggPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQ0ZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDQpOwogICAgICAgICRyZWNvcmREYXRhID0gc3Vic3RyKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgOCwgJGxlbmd0aCk7CgogICAgICAgIC8vIG1vdmUgc3RyZWFtIHBvaW50ZXIgdG8gbmV4dCByZWNvcmQKICAgICAgICAkdGhpcy0+cG9zICs9IDggKyAkbGVuZ3RoOwogICAgfQoKICAgIC8qKgogICAgICogUmVhZCBEZ2dDb250YWluZXIgcmVjb3JkIChEcmF3aW5nIEdyb3VwIENvbnRhaW5lcikKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWFkRGdnQ29udGFpbmVyKCkKICAgIHsKICAgICAgICAkbGVuZ3RoID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA0KTsKICAgICAgICAkcmVjb3JkRGF0YSA9IHN1YnN0cigkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDgsICRsZW5ndGgpOwoKICAgICAgICAvLyBtb3ZlIHN0cmVhbSBwb2ludGVyIHRvIG5leHQgcmVjb3JkCiAgICAgICAgJHRoaXMtPnBvcyArPSA4ICsgJGxlbmd0aDsKCiAgICAgICAgLy8gcmVjb3JkIGlzIGEgY29udGFpbmVyLCByZWFkIGNvbnRlbnRzCiAgICAgICAgJGRnZ0NvbnRhaW5lciA9IG5ldyBQSFBFeGNlbF9TaGFyZWRfRXNjaGVyX0RnZ0NvbnRhaW5lcigpOwogICAgICAgICR0aGlzLT5vYmplY3QtPnNldERnZ0NvbnRhaW5lcigkZGdnQ29udGFpbmVyKTsKICAgICAgICAkcmVhZGVyID0gbmV3IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDVfRXNjaGVyKCRkZ2dDb250YWluZXIpOwogICAgICAgICRyZWFkZXItPmxvYWQoJHJlY29yZERhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogUmVhZCBEZ2cgcmVjb3JkIChEcmF3aW5nIEdyb3VwKQogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHJlYWREZ2coKQogICAgewogICAgICAgICRsZW5ndGggPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQ0ZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDQpOwogICAgICAgICRyZWNvcmREYXRhID0gc3Vic3RyKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgOCwgJGxlbmd0aCk7CgogICAgICAgIC8vIG1vdmUgc3RyZWFtIHBvaW50ZXIgdG8gbmV4dCByZWNvcmQKICAgICAgICAkdGhpcy0+cG9zICs9IDggKyAkbGVuZ3RoOwogICAgfQoKICAgIC8qKgogICAgICogUmVhZCBCc3RvcmVDb250YWluZXIgcmVjb3JkIChCbGlwIFN0b3JlIENvbnRhaW5lcikKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWFkQnN0b3JlQ29udGFpbmVyKCkKICAgIHsKICAgICAgICAkbGVuZ3RoID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA0KTsKICAgICAgICAkcmVjb3JkRGF0YSA9IHN1YnN0cigkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDgsICRsZW5ndGgpOwoKICAgICAgICAvLyBtb3ZlIHN0cmVhbSBwb2ludGVyIHRvIG5leHQgcmVjb3JkCiAgICAgICAgJHRoaXMtPnBvcyArPSA4ICsgJGxlbmd0aDsKCiAgICAgICAgLy8gcmVjb3JkIGlzIGEgY29udGFpbmVyLCByZWFkIGNvbnRlbnRzCiAgICAgICAgJGJzdG9yZUNvbnRhaW5lciA9IG5ldyBQSFBFeGNlbF9TaGFyZWRfRXNjaGVyX0RnZ0NvbnRhaW5lcl9Cc3RvcmVDb250YWluZXIoKTsKICAgICAgICAkdGhpcy0+b2JqZWN0LT5zZXRCc3RvcmVDb250YWluZXIoJGJzdG9yZUNvbnRhaW5lcik7CiAgICAgICAgJHJlYWRlciA9IG5ldyBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1X0VzY2hlcigkYnN0b3JlQ29udGFpbmVyKTsKICAgICAgICAkcmVhZGVyLT5sb2FkKCRyZWNvcmREYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlYWQgQlNFIHJlY29yZAogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHJlYWRCU0UoKQogICAgewogICAgICAgIC8vIG9mZnNldDogMDsgc2l6ZTogMjsgcmVjVmVyIGFuZCByZWNJbnN0YW5jZQoKICAgICAgICAvLyBiaXQ6IDQtMTU7IG1hc2s6IDB4RkZGMDsgcmVjSW5zdGFuY2UKICAgICAgICAkcmVjSW5zdGFuY2UgPSAoMHhGRkYwICYgUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50MmQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MpKSA+PiA0OwoKICAgICAgICAkbGVuZ3RoID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA0KTsKICAgICAgICAkcmVjb3JkRGF0YSA9IHN1YnN0cigkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDgsICRsZW5ndGgpOwoKICAgICAgICAvLyBtb3ZlIHN0cmVhbSBwb2ludGVyIHRvIG5leHQgcmVjb3JkCiAgICAgICAgJHRoaXMtPnBvcyArPSA4ICsgJGxlbmd0aDsKCiAgICAgICAgLy8gYWRkIEJTRSB0byBCc3RvcmVDb250YWluZXIKICAgICAgICAkQlNFID0gbmV3IFBIUEV4Y2VsX1NoYXJlZF9Fc2NoZXJfRGdnQ29udGFpbmVyX0JzdG9yZUNvbnRhaW5lcl9CU0UoKTsKICAgICAgICAkdGhpcy0+b2JqZWN0LT5hZGRCU0UoJEJTRSk7CgogICAgICAgICRCU0UtPnNldEJMSVBUeXBlKCRyZWNJbnN0YW5jZSk7CgogICAgICAgIC8vIG9mZnNldDogMDsgc2l6ZTogMTsgYnRXaW4zMiAoTVNPQkxJUFRZUEUpCiAgICAgICAgJGJ0V2luMzIgPSBvcmQoJHJlY29yZERhdGFbMF0pOwoKICAgICAgICAvLyBvZmZzZXQ6IDE7IHNpemU6IDE7IGJ0V2luMzIgKE1TT0JMSVBUWVBFKQogICAgICAgICRidE1hY09TID0gb3JkKCRyZWNvcmREYXRhWzFdKTsKCiAgICAgICAgLy8gb2Zmc2V0OiAyOyBzaXplOiAxNjsgTUQ0IGRpZ2VzdAogICAgICAgICRyZ2JVaWQgPSBzdWJzdHIoJHJlY29yZERhdGEsIDIsIDE2KTsKCiAgICAgICAgLy8gb2Zmc2V0OiAxODsgc2l6ZTogMjsgdGFnCiAgICAgICAgJHRhZyA9IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDU6OmdldEludDJkKCRyZWNvcmREYXRhLCAxOCk7CgogICAgICAgIC8vIG9mZnNldDogMjA7IHNpemU6IDQ7IHNpemUgb2YgQkxJUCBpbiBieXRlcwogICAgICAgICRzaXplID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJHJlY29yZERhdGEsIDIwKTsKCiAgICAgICAgLy8gb2Zmc2V0OiAyNDsgc2l6ZTogNDsgbnVtYmVyIG9mIHJlZmVyZW5jZXMgdG8gdGhpcyBCTElQCiAgICAgICAgJGNSZWYgPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQ0ZCgkcmVjb3JkRGF0YSwgMjQpOwoKICAgICAgICAvLyBvZmZzZXQ6IDI4OyBzaXplOiA0OyBNU09GTyBmaWxlIG9mZnNldAogICAgICAgICRmb0RlbGF5ID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJHJlY29yZERhdGEsIDI4KTsKCiAgICAgICAgLy8gb2Zmc2V0OiAzMjsgc2l6ZTogMTsgdW51c2VkMQogICAgICAgICR1bnVzZWQxID0gb3JkKCRyZWNvcmREYXRhezMyfSk7CgogICAgICAgIC8vIG9mZnNldDogMzM7IHNpemU6IDE7IHNpemUgb2YgbmFtZURhdGEgaW4gYnl0ZXMgKGluY2x1ZGluZyBudWxsIHRlcm1pbmF0b3IpCiAgICAgICAgJGNiTmFtZSA9IG9yZCgkcmVjb3JkRGF0YXszM30pOwoKICAgICAgICAvLyBvZmZzZXQ6IDM0OyBzaXplOiAxOyB1bnVzZWQyCiAgICAgICAgJHVudXNlZDIgPSBvcmQoJHJlY29yZERhdGF7MzR9KTsKCiAgICAgICAgLy8gb2Zmc2V0OiAzNTsgc2l6ZTogMTsgdW51c2VkMwogICAgICAgICR1bnVzZWQzID0gb3JkKCRyZWNvcmREYXRhezM1fSk7CgogICAgICAgIC8vIG9mZnNldDogMzY7IHNpemU6ICRjYk5hbWU7IG5hbWVEYXRhCiAgICAgICAgJG5hbWVEYXRhID0gc3Vic3RyKCRyZWNvcmREYXRhLCAzNiwgJGNiTmFtZSk7CgogICAgICAgIC8vIG9mZnNldDogMzYgKyAkY2JOYW1lLCBzaXplOiB2YXI7IHRoZSBCTElQIGRhdGEKICAgICAgICAkYmxpcERhdGEgPSBzdWJzdHIoJHJlY29yZERhdGEsIDM2ICsgJGNiTmFtZSk7CgogICAgICAgIC8vIHJlY29yZCBpcyBhIGNvbnRhaW5lciwgcmVhZCBjb250ZW50cwogICAgICAgICRyZWFkZXIgPSBuZXcgUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNV9Fc2NoZXIoJEJTRSk7CiAgICAgICAgJHJlYWRlci0+bG9hZCgkYmxpcERhdGEpOwogICAgfQoKICAgIC8qKgogICAgICogUmVhZCBCbGlwSlBFRyByZWNvcmQuIEhvbGRzIHJhdyBKUEVHIGltYWdlIGRhdGEKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWFkQmxpcEpQRUcoKQogICAgewogICAgICAgIC8vIG9mZnNldDogMDsgc2l6ZTogMjsgcmVjVmVyIGFuZCByZWNJbnN0YW5jZQoKICAgICAgICAvLyBiaXQ6IDQtMTU7IG1hc2s6IDB4RkZGMDsgcmVjSW5zdGFuY2UKICAgICAgICAkcmVjSW5zdGFuY2UgPSAoMHhGRkYwICYgUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50MmQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MpKSA+PiA0OwoKICAgICAgICAkbGVuZ3RoID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA0KTsKICAgICAgICAkcmVjb3JkRGF0YSA9IHN1YnN0cigkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDgsICRsZW5ndGgpOwoKICAgICAgICAvLyBtb3ZlIHN0cmVhbSBwb2ludGVyIHRvIG5leHQgcmVjb3JkCiAgICAgICAgJHRoaXMtPnBvcyArPSA4ICsgJGxlbmd0aDsKCiAgICAgICAgJHBvcyA9IDA7CgogICAgICAgIC8vIG9mZnNldDogMDsgc2l6ZTogMTY7IHJnYlVpZDEgKE1ENCBkaWdlc3Qgb2YpCiAgICAgICAgJHJnYlVpZDEgPSBzdWJzdHIoJHJlY29yZERhdGEsIDAsIDE2KTsKICAgICAgICAkcG9zICs9IDE2OwoKICAgICAgICAvLyBvZmZzZXQ6IDE2OyBzaXplOiAxNjsgcmdiVWlkMiAoTUQ0IGRpZ2VzdCksIG9ubHkgaWYgJHJlY0luc3RhbmNlID0gMHg0NkIgb3IgMHg2RTMKICAgICAgICBpZiAoaW5fYXJyYXkoJHJlY0luc3RhbmNlLCBhcnJheSgweDA0NkIsIDB4MDZFMykpKSB7CiAgICAgICAgICAgICRyZ2JVaWQyID0gc3Vic3RyKCRyZWNvcmREYXRhLCAxNiwgMTYpOwogICAgICAgICAgICAkcG9zICs9IDE2OwogICAgICAgIH0KCiAgICAgICAgLy8gb2Zmc2V0OiB2YXI7IHNpemU6IDE7IHRhZwogICAgICAgICR0YWcgPSBvcmQoJHJlY29yZERhdGF7JHBvc30pOwogICAgICAgICRwb3MgKz0gMTsKCiAgICAgICAgLy8gb2Zmc2V0OiB2YXI7IHNpemU6IHZhcjsgdGhlIHJhdyBpbWFnZSBkYXRhCiAgICAgICAgJGRhdGEgPSBzdWJzdHIoJHJlY29yZERhdGEsICRwb3MpOwoKICAgICAgICAkYmxpcCA9IG5ldyBQSFBFeGNlbF9TaGFyZWRfRXNjaGVyX0RnZ0NvbnRhaW5lcl9Cc3RvcmVDb250YWluZXJfQlNFX0JsaXAoKTsKICAgICAgICAkYmxpcC0+c2V0RGF0YSgkZGF0YSk7CgogICAgICAgICR0aGlzLT5vYmplY3QtPnNldEJsaXAoJGJsaXApOwogICAgfQoKICAgIC8qKgogICAgICogUmVhZCBCbGlwUE5HIHJlY29yZC4gSG9sZHMgcmF3IFBORyBpbWFnZSBkYXRhCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gcmVhZEJsaXBQTkcoKQogICAgewogICAgICAgIC8vIG9mZnNldDogMDsgc2l6ZTogMjsgcmVjVmVyIGFuZCByZWNJbnN0YW5jZQoKICAgICAgICAvLyBiaXQ6IDQtMTU7IG1hc2s6IDB4RkZGMDsgcmVjSW5zdGFuY2UKICAgICAgICAkcmVjSW5zdGFuY2UgPSAoMHhGRkYwICYgUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50MmQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MpKSA+PiA0OwoKICAgICAgICAkbGVuZ3RoID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA0KTsKICAgICAgICAkcmVjb3JkRGF0YSA9IHN1YnN0cigkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDgsICRsZW5ndGgpOwoKICAgICAgICAvLyBtb3ZlIHN0cmVhbSBwb2ludGVyIHRvIG5leHQgcmVjb3JkCiAgICAgICAgJHRoaXMtPnBvcyArPSA4ICsgJGxlbmd0aDsKCiAgICAgICAgJHBvcyA9IDA7CgogICAgICAgIC8vIG9mZnNldDogMDsgc2l6ZTogMTY7IHJnYlVpZDEgKE1ENCBkaWdlc3Qgb2YpCiAgICAgICAgJHJnYlVpZDEgPSBzdWJzdHIoJHJlY29yZERhdGEsIDAsIDE2KTsKICAgICAgICAkcG9zICs9IDE2OwoKICAgICAgICAvLyBvZmZzZXQ6IDE2OyBzaXplOiAxNjsgcmdiVWlkMiAoTUQ0IGRpZ2VzdCksIG9ubHkgaWYgJHJlY0luc3RhbmNlID0gMHg0NkIgb3IgMHg2RTMKICAgICAgICBpZiAoJHJlY0luc3RhbmNlID09IDB4MDZFMSkgewogICAgICAgICAgICAkcmdiVWlkMiA9IHN1YnN0cigkcmVjb3JkRGF0YSwgMTYsIDE2KTsKICAgICAgICAgICAgJHBvcyArPSAxNjsKICAgICAgICB9CgogICAgICAgIC8vIG9mZnNldDogdmFyOyBzaXplOiAxOyB0YWcKICAgICAgICAkdGFnID0gb3JkKCRyZWNvcmREYXRheyRwb3N9KTsKICAgICAgICAkcG9zICs9IDE7CgogICAgICAgIC8vIG9mZnNldDogdmFyOyBzaXplOiB2YXI7IHRoZSByYXcgaW1hZ2UgZGF0YQogICAgICAgICRkYXRhID0gc3Vic3RyKCRyZWNvcmREYXRhLCAkcG9zKTsKCiAgICAgICAgJGJsaXAgPSBuZXcgUEhQRXhjZWxfU2hhcmVkX0VzY2hlcl9EZ2dDb250YWluZXJfQnN0b3JlQ29udGFpbmVyX0JTRV9CbGlwKCk7CiAgICAgICAgJGJsaXAtPnNldERhdGEoJGRhdGEpOwoKICAgICAgICAkdGhpcy0+b2JqZWN0LT5zZXRCbGlwKCRibGlwKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlYWQgT1BUIHJlY29yZC4gVGhpcyByZWNvcmQgbWF5IG9jY3VyIHdpdGhpbiBEZ2dDb250YWluZXIgcmVjb3JkIG9yIFNwQ29udGFpbmVyCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gcmVhZE9QVCgpCiAgICB7CiAgICAgICAgLy8gb2Zmc2V0OiAwOyBzaXplOiAyOyByZWNWZXIgYW5kIHJlY0luc3RhbmNlCgogICAgICAgIC8vIGJpdDogNC0xNTsgbWFzazogMHhGRkYwOyByZWNJbnN0YW5jZQogICAgICAgICRyZWNJbnN0YW5jZSA9ICgweEZGRjAgJiBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQyZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcykpID4+IDQ7CgogICAgICAgICRsZW5ndGggPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQ0ZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDQpOwogICAgICAgICRyZWNvcmREYXRhID0gc3Vic3RyKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgOCwgJGxlbmd0aCk7CgogICAgICAgIC8vIG1vdmUgc3RyZWFtIHBvaW50ZXIgdG8gbmV4dCByZWNvcmQKICAgICAgICAkdGhpcy0+cG9zICs9IDggKyAkbGVuZ3RoOwoKICAgICAgICAkdGhpcy0+cmVhZE9mZmljZUFydFJHRk9QVEUoJHJlY29yZERhdGEsICRyZWNJbnN0YW5jZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWFkIFRlcnRpYXJ5T1BUIHJlY29yZAogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHJlYWRUZXJ0aWFyeU9QVCgpCiAgICB7CiAgICAgICAgLy8gb2Zmc2V0OiAwOyBzaXplOiAyOyByZWNWZXIgYW5kIHJlY0luc3RhbmNlCgogICAgICAgIC8vIGJpdDogNC0xNTsgbWFzazogMHhGRkYwOyByZWNJbnN0YW5jZQogICAgICAgICRyZWNJbnN0YW5jZSA9ICgweEZGRjAgJiBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQyZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcykpID4+IDQ7CgogICAgICAgICRsZW5ndGggPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQ0ZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDQpOwogICAgICAgICRyZWNvcmREYXRhID0gc3Vic3RyKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgOCwgJGxlbmd0aCk7CgogICAgICAgIC8vIG1vdmUgc3RyZWFtIHBvaW50ZXIgdG8gbmV4dCByZWNvcmQKICAgICAgICAkdGhpcy0+cG9zICs9IDggKyAkbGVuZ3RoOwogICAgfQoKICAgIC8qKgogICAgICogUmVhZCBTcGxpdE1lbnVDb2xvcnMgcmVjb3JkCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gcmVhZFNwbGl0TWVudUNvbG9ycygpCiAgICB7CiAgICAgICAgJGxlbmd0aCA9IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDU6OmdldEludDRkKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgNCk7CiAgICAgICAgJHJlY29yZERhdGEgPSBzdWJzdHIoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA4LCAkbGVuZ3RoKTsKCiAgICAgICAgLy8gbW92ZSBzdHJlYW0gcG9pbnRlciB0byBuZXh0IHJlY29yZAogICAgICAgICR0aGlzLT5wb3MgKz0gOCArICRsZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWFkIERnQ29udGFpbmVyIHJlY29yZCAoRHJhd2luZyBDb250YWluZXIpCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gcmVhZERnQ29udGFpbmVyKCkKICAgIHsKICAgICAgICAkbGVuZ3RoID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA0KTsKICAgICAgICAkcmVjb3JkRGF0YSA9IHN1YnN0cigkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDgsICRsZW5ndGgpOwoKICAgICAgICAvLyBtb3ZlIHN0cmVhbSBwb2ludGVyIHRvIG5leHQgcmVjb3JkCiAgICAgICAgJHRoaXMtPnBvcyArPSA4ICsgJGxlbmd0aDsKCiAgICAgICAgLy8gcmVjb3JkIGlzIGEgY29udGFpbmVyLCByZWFkIGNvbnRlbnRzCiAgICAgICAgJGRnQ29udGFpbmVyID0gbmV3IFBIUEV4Y2VsX1NoYXJlZF9Fc2NoZXJfRGdDb250YWluZXIoKTsKICAgICAgICAkdGhpcy0+b2JqZWN0LT5zZXREZ0NvbnRhaW5lcigkZGdDb250YWluZXIpOwogICAgICAgICRyZWFkZXIgPSBuZXcgUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNV9Fc2NoZXIoJGRnQ29udGFpbmVyKTsKICAgICAgICAkZXNjaGVyID0gJHJlYWRlci0+bG9hZCgkcmVjb3JkRGF0YSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWFkIERnIHJlY29yZCAoRHJhd2luZykKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWFkRGcoKQogICAgewogICAgICAgICRsZW5ndGggPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQ0ZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDQpOwogICAgICAgICRyZWNvcmREYXRhID0gc3Vic3RyKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgOCwgJGxlbmd0aCk7CgogICAgICAgIC8vIG1vdmUgc3RyZWFtIHBvaW50ZXIgdG8gbmV4dCByZWNvcmQKICAgICAgICAkdGhpcy0+cG9zICs9IDggKyAkbGVuZ3RoOwogICAgfQoKICAgIC8qKgogICAgICogUmVhZCBTcGdyQ29udGFpbmVyIHJlY29yZCAoU2hhcGUgR3JvdXAgQ29udGFpbmVyKQogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHJlYWRTcGdyQ29udGFpbmVyKCkKICAgIHsKICAgICAgICAvLyBjb250ZXh0IGlzIGVpdGhlciBjb250ZXh0IERnQ29udGFpbmVyIG9yIFNwZ3JDb250YWluZXIKCiAgICAgICAgJGxlbmd0aCA9IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDU6OmdldEludDRkKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgNCk7CiAgICAgICAgJHJlY29yZERhdGEgPSBzdWJzdHIoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA4LCAkbGVuZ3RoKTsKCiAgICAgICAgLy8gbW92ZSBzdHJlYW0gcG9pbnRlciB0byBuZXh0IHJlY29yZAogICAgICAgICR0aGlzLT5wb3MgKz0gOCArICRsZW5ndGg7CgogICAgICAgIC8vIHJlY29yZCBpcyBhIGNvbnRhaW5lciwgcmVhZCBjb250ZW50cwogICAgICAgICRzcGdyQ29udGFpbmVyID0gbmV3IFBIUEV4Y2VsX1NoYXJlZF9Fc2NoZXJfRGdDb250YWluZXJfU3BnckNvbnRhaW5lcigpOwoKICAgICAgICBpZiAoJHRoaXMtPm9iamVjdCBpbnN0YW5jZW9mIFBIUEV4Y2VsX1NoYXJlZF9Fc2NoZXJfRGdDb250YWluZXIpIHsKICAgICAgICAgICAgLy8gRGdDb250YWluZXIKICAgICAgICAgICAgJHRoaXMtPm9iamVjdC0+c2V0U3BnckNvbnRhaW5lcigkc3BnckNvbnRhaW5lcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gU3BnckNvbnRhaW5lcgogICAgICAgICAgICAkdGhpcy0+b2JqZWN0LT5hZGRDaGlsZCgkc3BnckNvbnRhaW5lcik7CiAgICAgICAgfQoKICAgICAgICAkcmVhZGVyID0gbmV3IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDVfRXNjaGVyKCRzcGdyQ29udGFpbmVyKTsKICAgICAgICAkZXNjaGVyID0gJHJlYWRlci0+bG9hZCgkcmVjb3JkRGF0YSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWFkIFNwQ29udGFpbmVyIHJlY29yZCAoU2hhcGUgQ29udGFpbmVyKQogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHJlYWRTcENvbnRhaW5lcigpCiAgICB7CiAgICAgICAgJGxlbmd0aCA9IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDU6OmdldEludDRkKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgNCk7CiAgICAgICAgJHJlY29yZERhdGEgPSBzdWJzdHIoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA4LCAkbGVuZ3RoKTsKCiAgICAgICAgLy8gYWRkIHNwQ29udGFpbmVyIHRvIHNwZ3JDb250YWluZXIKICAgICAgICAkc3BDb250YWluZXIgPSBuZXcgUEhQRXhjZWxfU2hhcmVkX0VzY2hlcl9EZ0NvbnRhaW5lcl9TcGdyQ29udGFpbmVyX1NwQ29udGFpbmVyKCk7CiAgICAgICAgJHRoaXMtPm9iamVjdC0+YWRkQ2hpbGQoJHNwQ29udGFpbmVyKTsKCiAgICAgICAgLy8gbW92ZSBzdHJlYW0gcG9pbnRlciB0byBuZXh0IHJlY29yZAogICAgICAgICR0aGlzLT5wb3MgKz0gOCArICRsZW5ndGg7CgogICAgICAgIC8vIHJlY29yZCBpcyBhIGNvbnRhaW5lciwgcmVhZCBjb250ZW50cwogICAgICAgICRyZWFkZXIgPSBuZXcgUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNV9Fc2NoZXIoJHNwQ29udGFpbmVyKTsKICAgICAgICAkZXNjaGVyID0gJHJlYWRlci0+bG9hZCgkcmVjb3JkRGF0YSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWFkIFNwZ3IgcmVjb3JkIChTaGFwZSBHcm91cCkKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWFkU3BncigpCiAgICB7CiAgICAgICAgJGxlbmd0aCA9IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDU6OmdldEludDRkKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgNCk7CiAgICAgICAgJHJlY29yZERhdGEgPSBzdWJzdHIoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA4LCAkbGVuZ3RoKTsKCiAgICAgICAgLy8gbW92ZSBzdHJlYW0gcG9pbnRlciB0byBuZXh0IHJlY29yZAogICAgICAgICR0aGlzLT5wb3MgKz0gOCArICRsZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWFkIFNwIHJlY29yZCAoU2hhcGUpCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gcmVhZFNwKCkKICAgIHsKICAgICAgICAvLyBvZmZzZXQ6IDA7IHNpemU6IDI7IHJlY1ZlciBhbmQgcmVjSW5zdGFuY2UKCiAgICAgICAgLy8gYml0OiA0LTE1OyBtYXNrOiAweEZGRjA7IHJlY0luc3RhbmNlCiAgICAgICAgJHJlY0luc3RhbmNlID0gKDB4RkZGMCAmIFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDU6OmdldEludDJkKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zKSkgPj4gNDsKCiAgICAgICAgJGxlbmd0aCA9IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDU6OmdldEludDRkKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgNCk7CiAgICAgICAgJHJlY29yZERhdGEgPSBzdWJzdHIoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA4LCAkbGVuZ3RoKTsKCiAgICAgICAgLy8gbW92ZSBzdHJlYW0gcG9pbnRlciB0byBuZXh0IHJlY29yZAogICAgICAgICR0aGlzLT5wb3MgKz0gOCArICRsZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWFkIENsaWVudFRleHRib3ggcmVjb3JkCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gcmVhZENsaWVudFRleHRib3goKQogICAgewogICAgICAgIC8vIG9mZnNldDogMDsgc2l6ZTogMjsgcmVjVmVyIGFuZCByZWNJbnN0YW5jZQoKICAgICAgICAvLyBiaXQ6IDQtMTU7IG1hc2s6IDB4RkZGMDsgcmVjSW5zdGFuY2UKICAgICAgICAkcmVjSW5zdGFuY2UgPSAoMHhGRkYwICYgUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50MmQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MpKSA+PiA0OwoKICAgICAgICAkbGVuZ3RoID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA0KTsKICAgICAgICAkcmVjb3JkRGF0YSA9IHN1YnN0cigkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDgsICRsZW5ndGgpOwoKICAgICAgICAvLyBtb3ZlIHN0cmVhbSBwb2ludGVyIHRvIG5leHQgcmVjb3JkCiAgICAgICAgJHRoaXMtPnBvcyArPSA4ICsgJGxlbmd0aDsKICAgIH0KCiAgICAvKioKICAgICAqIFJlYWQgQ2xpZW50QW5jaG9yIHJlY29yZC4gVGhpcyByZWNvcmQgaG9sZHMgaW5mb3JtYXRpb24gYWJvdXQgd2hlcmUgdGhlIHNoYXBlIGlzIGFuY2hvcmVkIGluIHdvcmtzaGVldAogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHJlYWRDbGllbnRBbmNob3IoKQogICAgewogICAgICAgICRsZW5ndGggPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQ0ZCgkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDQpOwogICAgICAgICRyZWNvcmREYXRhID0gc3Vic3RyKCR0aGlzLT5kYXRhLCAkdGhpcy0+cG9zICsgOCwgJGxlbmd0aCk7CgogICAgICAgIC8vIG1vdmUgc3RyZWFtIHBvaW50ZXIgdG8gbmV4dCByZWNvcmQKICAgICAgICAkdGhpcy0+cG9zICs9IDggKyAkbGVuZ3RoOwoKICAgICAgICAvLyBvZmZzZXQ6IDI7IHNpemU6IDI7IHVwcGVyLWxlZnQgY29ybmVyIGNvbHVtbiBpbmRleCAoMC1iYXNlZCkKICAgICAgICAkYzEgPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQyZCgkcmVjb3JkRGF0YSwgMik7CgogICAgICAgIC8vIG9mZnNldDogNDsgc2l6ZTogMjsgdXBwZXItbGVmdCBjb3JuZXIgaG9yaXpvbnRhbCBvZmZzZXQgaW4gMS8xMDI0IG9mIGNvbHVtbiB3aWR0aAogICAgICAgICRzdGFydE9mZnNldFggPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQyZCgkcmVjb3JkRGF0YSwgNCk7CgogICAgICAgIC8vIG9mZnNldDogNjsgc2l6ZTogMjsgdXBwZXItbGVmdCBjb3JuZXIgcm93IGluZGV4ICgwLWJhc2VkKQogICAgICAgICRyMSA9IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDU6OmdldEludDJkKCRyZWNvcmREYXRhLCA2KTsKCiAgICAgICAgLy8gb2Zmc2V0OiA4OyBzaXplOiAyOyB1cHBlci1sZWZ0IGNvcm5lciB2ZXJ0aWNhbCBvZmZzZXQgaW4gMS8yNTYgb2Ygcm93IGhlaWdodAogICAgICAgICRzdGFydE9mZnNldFkgPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQyZCgkcmVjb3JkRGF0YSwgOCk7CgogICAgICAgIC8vIG9mZnNldDogMTA7IHNpemU6IDI7IGJvdHRvbS1yaWdodCBjb3JuZXIgY29sdW1uIGluZGV4ICgwLWJhc2VkKQogICAgICAgICRjMiA9IFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDU6OmdldEludDJkKCRyZWNvcmREYXRhLCAxMCk7CgogICAgICAgIC8vIG9mZnNldDogMTI7IHNpemU6IDI7IGJvdHRvbS1yaWdodCBjb3JuZXIgaG9yaXpvbnRhbCBvZmZzZXQgaW4gMS8xMDI0IG9mIGNvbHVtbiB3aWR0aAogICAgICAgICRlbmRPZmZzZXRYID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50MmQoJHJlY29yZERhdGEsIDEyKTsKCiAgICAgICAgLy8gb2Zmc2V0OiAxNDsgc2l6ZTogMjsgYm90dG9tLXJpZ2h0IGNvcm5lciByb3cgaW5kZXggKDAtYmFzZWQpCiAgICAgICAgJHIyID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50MmQoJHJlY29yZERhdGEsIDE0KTsKCiAgICAgICAgLy8gb2Zmc2V0OiAxNjsgc2l6ZTogMjsgYm90dG9tLXJpZ2h0IGNvcm5lciB2ZXJ0aWNhbCBvZmZzZXQgaW4gMS8yNTYgb2Ygcm93IGhlaWdodAogICAgICAgICRlbmRPZmZzZXRZID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50MmQoJHJlY29yZERhdGEsIDE2KTsKCiAgICAgICAgLy8gc2V0IHRoZSBzdGFydCBjb29yZGluYXRlcwogICAgICAgICR0aGlzLT5vYmplY3QtPnNldFN0YXJ0Q29vcmRpbmF0ZXMoUEhQRXhjZWxfQ2VsbDo6c3RyaW5nRnJvbUNvbHVtbkluZGV4KCRjMSkgLiAoJHIxICsgMSkpOwoKICAgICAgICAvLyBzZXQgdGhlIHN0YXJ0IG9mZnNldFgKICAgICAgICAkdGhpcy0+b2JqZWN0LT5zZXRTdGFydE9mZnNldFgoJHN0YXJ0T2Zmc2V0WCk7CgogICAgICAgIC8vIHNldCB0aGUgc3RhcnQgb2Zmc2V0WQogICAgICAgICR0aGlzLT5vYmplY3QtPnNldFN0YXJ0T2Zmc2V0WSgkc3RhcnRPZmZzZXRZKTsKCiAgICAgICAgLy8gc2V0IHRoZSBlbmQgY29vcmRpbmF0ZXMKICAgICAgICAkdGhpcy0+b2JqZWN0LT5zZXRFbmRDb29yZGluYXRlcyhQSFBFeGNlbF9DZWxsOjpzdHJpbmdGcm9tQ29sdW1uSW5kZXgoJGMyKSAuICgkcjIgKyAxKSk7CgogICAgICAgIC8vIHNldCB0aGUgZW5kIG9mZnNldFgKICAgICAgICAkdGhpcy0+b2JqZWN0LT5zZXRFbmRPZmZzZXRYKCRlbmRPZmZzZXRYKTsKCiAgICAgICAgLy8gc2V0IHRoZSBlbmQgb2Zmc2V0WQogICAgICAgICR0aGlzLT5vYmplY3QtPnNldEVuZE9mZnNldFkoJGVuZE9mZnNldFkpOwogICAgfQoKICAgIC8qKgogICAgICogUmVhZCBDbGllbnREYXRhIHJlY29yZAogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHJlYWRDbGllbnREYXRhKCkKICAgIHsKICAgICAgICAkbGVuZ3RoID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJHRoaXMtPmRhdGEsICR0aGlzLT5wb3MgKyA0KTsKICAgICAgICAkcmVjb3JkRGF0YSA9IHN1YnN0cigkdGhpcy0+ZGF0YSwgJHRoaXMtPnBvcyArIDgsICRsZW5ndGgpOwoKICAgICAgICAvLyBtb3ZlIHN0cmVhbSBwb2ludGVyIHRvIG5leHQgcmVjb3JkCiAgICAgICAgJHRoaXMtPnBvcyArPSA4ICsgJGxlbmd0aDsKICAgIH0KCiAgICAvKioKICAgICAqIFJlYWQgT2ZmaWNlQXJ0UkdGT1BURSB0YWJsZSBvZiBwcm9wZXJ0eS12YWx1ZSBwYWlycwogICAgICoKICAgICAqIEBwYXJhbSBzdHJpbmcgJGRhdGEgQmluYXJ5IGRhdGEKICAgICAqIEBwYXJhbSBpbnQgJG4gTnVtYmVyIG9mIHByb3BlcnRpZXMKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiByZWFkT2ZmaWNlQXJ0UkdGT1BURSgkZGF0YSwgJG4pCiAgICB7CiAgICAgICAgJHNwbGljZWRDb21wbGV4RGF0YSA9IHN1YnN0cigkZGF0YSwgNiAqICRuKTsKCiAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHByb3BlcnR5LXZhbHVlIHBhaXJzCiAgICAgICAgZm9yICgkaSA9IDA7ICRpIDwgJG47ICsrJGkpIHsKICAgICAgICAgICAgLy8gcmVhZCA2IGJ5dGVzIGF0IGEgdGltZQogICAgICAgICAgICAkZm9wdGUgPSBzdWJzdHIoJGRhdGEsIDYgKiAkaSwgNik7CgogICAgICAgICAgICAvLyBvZmZzZXQ6IDA7IHNpemU6IDI7IG9waWQKICAgICAgICAgICAgJG9waWQgPSBQSFBFeGNlbF9SZWFkZXJfRXhjZWw1OjpnZXRJbnQyZCgkZm9wdGUsIDApOwoKICAgICAgICAgICAgLy8gYml0OiAwLTEzOyBtYXNrOiAweDNGRkY7IG9waWQub3BpZAogICAgICAgICAgICAkb3BpZE9waWQgPSAoMHgzRkZGICYgJG9waWQpID4+IDA7CgogICAgICAgICAgICAvLyBiaXQ6IDE0OyBtYXNrIDB4NDAwMDsgMSA9IHZhbHVlIGluIG9wIGZpZWxkIGlzIEJMSVAgaWRlbnRpZmllcgogICAgICAgICAgICAkb3BpZEZCaWQgPSAoMHg0MDAwICYgJG9waWQpID4+IDE0OwoKICAgICAgICAgICAgLy8gYml0OiAxNTsgbWFzayAweDgwMDA7IDEgPSB0aGlzIGlzIGEgY29tcGxleCBwcm9wZXJ0eSwgb3AgZmllbGQgc3BlY2lmaWVzIHNpemUgb2YgY29tcGxleCBkYXRhCiAgICAgICAgICAgICRvcGlkRkNvbXBsZXggPSAoMHg4MDAwICYgJG9waWQpID4+IDE1OwoKICAgICAgICAgICAgLy8gb2Zmc2V0OiAyOyBzaXplOiA0OyB0aGUgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkKICAgICAgICAgICAgJG9wID0gUEhQRXhjZWxfUmVhZGVyX0V4Y2VsNTo6Z2V0SW50NGQoJGZvcHRlLCAyKTsKCiAgICAgICAgICAgIGlmICgkb3BpZEZDb21wbGV4KSB7CiAgICAgICAgICAgICAgICAkY29tcGxleERhdGEgPSBzdWJzdHIoJHNwbGljZWRDb21wbGV4RGF0YSwgMCwgJG9wKTsKICAgICAgICAgICAgICAgICRzcGxpY2VkQ29tcGxleERhdGEgPSBzdWJzdHIoJHNwbGljZWRDb21wbGV4RGF0YSwgJG9wKTsKCiAgICAgICAgICAgICAgICAvLyB3ZSBzdG9yZSBzdHJpbmcgdmFsdWUgd2l0aCBjb21wbGV4IGRhdGEKICAgICAgICAgICAgICAgICR2YWx1ZSA9ICRjb21wbGV4RGF0YTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIHdlIHN0b3JlIGludGVnZXIgdmFsdWUKICAgICAgICAgICAgICAgICR2YWx1ZSA9ICRvcDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHRoaXMtPm9iamVjdC0+c2V0T1BUKCRvcGlkT3BpZCwgJHZhbHVlKTsKICAgICAgICB9CiAgICB9Cn0K",
    "size": "21789"
}