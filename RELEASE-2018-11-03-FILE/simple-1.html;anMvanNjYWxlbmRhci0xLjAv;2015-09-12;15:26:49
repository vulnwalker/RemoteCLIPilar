{
    "namaFile": "js\/jscalendar-1.0\/simple-1.html",
    "lastUpdate": "2015-09-12+15:26:49.98",
    "contentFile": "\/IHRydWUgOiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgfSk7DQo8L3NjcmlwdD4NCg0KDQo8L2JvZHk+DQo8L2h0bWw+DQo=",
    "size": "9692"
}