{
    "namaFile": "js\/spectrum\/test\/qunit.js",
    "lastUpdate": "2017-10-27+15:21:05.15",
    "contentFile": "LyoqCiAqIFFVbml0IHYxLjEwLjAgLSBBIEphdmFTY3JpcHQgVW5pdCBUZXN0aW5nIEZyYW1ld29yawogKgogKiBodHRwOi8vcXVuaXRqcy5jb20KICoKICogQ29weXJpZ2h0IDIwMTIgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICovCgooZnVuY3Rpb24oIHdpbmRvdyApIHsKCnZhciBRVW5pdCwKICAgIGNvbmZpZywKICAgIG9uRXJyb3JGblByZXYsCiAgICB0ZXN0SWQgPSAwLAogICAgZmlsZU5hbWUgPSAoc291cmNlRnJvbVN0YWNrdHJhY2UoIDAgKSB8fCAiIiApLnJlcGxhY2UoLyg6XGQrKStcKT8vLCAiIikucmVwbGFjZSgvLitcLy8sICIiKSwKICAgIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZywKICAgIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksCiAgICAvLyBLZWVwIGEgbG9jYWwgcmVmZXJlbmNlIHRvIERhdGUgKEdILTI4MykKICAgIERhdGUgPSB3aW5kb3cuRGF0ZSwKICAgIGRlZmluZWQgPSB7CiAgICBzZXRUaW1lb3V0OiB0eXBlb2Ygd2luZG93LnNldFRpbWVvdXQgIT09ICJ1bmRlZmluZWQiLAogICAgc2Vzc2lvblN0b3JhZ2U6IChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgeCA9ICJxdW5pdC10ZXN0LXN0cmluZyI7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSggeCwgeCApOwogICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKCB4ICk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gY2F0Y2goIGUgKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9KCkpCn07CgpmdW5jdGlvbiBUZXN0KCBzZXR0aW5ncyApIHsKICAgIGV4dGVuZCggdGhpcywgc2V0dGluZ3MgKTsKICAgIHRoaXMuYXNzZXJ0aW9ucyA9IFtdOwogICAgdGhpcy50ZXN0TnVtYmVyID0gKytUZXN0LmNvdW50Owp9CgpUZXN0LmNvdW50ID0gMDsKClRlc3QucHJvdG90eXBlID0gewogICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGEsIGIsIGxpLAogICAgICAgIHRlc3RzID0gaWQoICJxdW5pdC10ZXN0cyIgKTsKCiAgICAgICAgaWYgKCB0ZXN0cyApIHsKICAgICAgICAgICAgYiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJzdHJvbmciICk7CiAgICAgICAgICAgIGIuaW5uZXJIVE1MID0gdGhpcy5uYW1lOwoKICAgICAgICAgICAgLy8gYGFgIGluaXRpYWxpemVkIGF0IHRvcCBvZiBzY29wZQogICAgICAgICAgICBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImEiICk7CiAgICAgICAgICAgIGEuaW5uZXJIVE1MID0gIlJlcnVuIjsKICAgICAgICAgICAgYS5ocmVmID0gUVVuaXQudXJsKHsgdGVzdE51bWJlcjogdGhpcy50ZXN0TnVtYmVyIH0pOwoKICAgICAgICAgICAgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAibGkiICk7CiAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKCBiICk7CiAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKCBhICk7CiAgICAgICAgICAgIGxpLmNsYXNzTmFtZSA9ICJydW5uaW5nIjsKICAgICAgICAgICAgbGkuaWQgPSB0aGlzLmlkID0gInF1bml0LXRlc3Qtb3V0cHV0IiArIHRlc3RJZCsrOwoKICAgICAgICAgICAgdGVzdHMuYXBwZW5kQ2hpbGQoIGxpICk7CiAgICAgICAgfQogICAgfSwKICAgIHNldHVwOiBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoIHRoaXMubW9kdWxlICE9PSBjb25maWcucHJldmlvdXNNb2R1bGUgKSB7CiAgICAgICAgICAgIGlmICggY29uZmlnLnByZXZpb3VzTW9kdWxlICkgewogICAgICAgICAgICAgICAgcnVuTG9nZ2luZ0NhbGxiYWNrcyggIm1vZHVsZURvbmUiLCBRVW5pdCwgewogICAgICAgICAgICAgICAgICAgIG5hbWU6IGNvbmZpZy5wcmV2aW91c01vZHVsZSwKICAgICAgICAgICAgICAgICAgICBmYWlsZWQ6IGNvbmZpZy5tb2R1bGVTdGF0cy5iYWQsCiAgICAgICAgICAgICAgICAgICAgcGFzc2VkOiBjb25maWcubW9kdWxlU3RhdHMuYWxsIC0gY29uZmlnLm1vZHVsZVN0YXRzLmJhZCwKICAgICAgICAgICAgICAgICAgICB0b3RhbDogY29uZmlnLm1vZHVsZVN0YXRzLmFsbAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uZmlnLnByZXZpb3VzTW9kdWxlID0gdGhpcy5tb2R1bGU7CiAgICAgICAgICAgIGNvbmZpZy5tb2R1bGVTdGF0cyA9IHsgYWxsOiAwLCBiYWQ6IDAgfTsKICAgICAgICAgICAgcnVuTG9nZ2luZ0NhbGxiYWNrcyggIm1vZHVsZVN0YXJ0IiwgUVVuaXQsIHsKICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubW9kdWxlCiAgICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSBpZiAoIGNvbmZpZy5hdXRvcnVuICkgewogICAgICAgICAgICBydW5Mb2dnaW5nQ2FsbGJhY2tzKCAibW9kdWxlU3RhcnQiLCBRVW5pdCwgewogICAgICAgICAgICAgICAgbmFtZTogdGhpcy5tb2R1bGUKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBjb25maWcuY3VycmVudCA9IHRoaXM7CgogICAgICAgIHRoaXMudGVzdEVudmlyb25tZW50ID0gZXh0ZW5kKHsKICAgICAgICAgICAgc2V0dXA6IGZ1bmN0aW9uKCkge30sCiAgICAgICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHt9CiAgICAgICAgfSwgdGhpcy5tb2R1bGVUZXN0RW52aXJvbm1lbnQgKTsKCiAgICAgICAgcnVuTG9nZ2luZ0NhbGxiYWNrcyggInRlc3RTdGFydCIsIFFVbml0LCB7CiAgICAgICAgICAgIG5hbWU6IHRoaXMudGVzdE5hbWUsCiAgICAgICAgICAgIG1vZHVsZTogdGhpcy5tb2R1bGUKICAgICAgICB9KTsKCiAgICAgICAgLy8gYWxsb3cgdXRpbGl0eSBmdW5jdGlvbnMgdG8gYWNjZXNzIHRoZSBjdXJyZW50IHRlc3QgZW52aXJvbm1lbnQKICAgICAgICAvLyBUT0RPIHdoeT8\/CiAgICAgICAgUVVuaXQuY3VycmVudF90ZXN0RW52aXJvbm1lbnQgPSB0aGlzLnRlc3RFbnZpcm9ubWVudDsKCiAgICAgICAgaWYgKCAhY29uZmlnLnBvbGx1dGlvbiApIHsKICAgICAgICAgICAgc2F2ZUdsb2JhbCgpOwogICAgICAgIH0KICAgICAgICBpZiAoIGNvbmZpZy5ub3RyeWNhdGNoICkgewogICAgICAgICAgICB0aGlzLnRlc3RFbnZpcm9ubWVudC5zZXR1cC5jYWxsKCB0aGlzLnRlc3RFbnZpcm9ubWVudCApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHRoaXMudGVzdEVudmlyb25tZW50LnNldHVwLmNhbGwoIHRoaXMudGVzdEVudmlyb25tZW50ICk7CiAgICAgICAgfSBjYXRjaCggZSApIHsKICAgICAgICAgICAgUVVuaXQucHVzaEZhaWx1cmUoICJTZXR1cCBmYWlsZWQgb24gIiArIHRoaXMudGVzdE5hbWUgKyAiOiAiICsgZS5tZXNzYWdlLCBleHRyYWN0U3RhY2t0cmFjZSggZSwgMSApICk7CiAgICAgICAgfQogICAgfSwKICAgIHJ1bjogZnVuY3Rpb24oKSB7CiAgICAgICAgY29uZmlnLmN1cnJlbnQgPSB0aGlzOwoKICAgICAgICB2YXIgcnVubmluZyA9IGlkKCAicXVuaXQtdGVzdHJlc3VsdCIgKTsKCiAgICAgICAgaWYgKCBydW5uaW5nICkgewogICAgICAgICAgICBydW5uaW5nLmlubmVySFRNTCA9ICJSdW5uaW5nOiA8YnIvPiIgKyB0aGlzLm5hbWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoIHRoaXMuYXN5bmMgKSB7CiAgICAgICAgICAgIFFVbml0LnN0b3AoKTsKICAgICAgICB9CgogICAgICAgIGlmICggY29uZmlnLm5vdHJ5Y2F0Y2ggKSB7CiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2suY2FsbCggdGhpcy50ZXN0RW52aXJvbm1lbnQsIFFVbml0LmFzc2VydCApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB0cnkgewogICAgICAgICAgICB0aGlzLmNhbGxiYWNrLmNhbGwoIHRoaXMudGVzdEVudmlyb25tZW50LCBRVW5pdC5hc3NlcnQgKTsKICAgICAgICB9IGNhdGNoKCBlICkgewogICAgICAgICAgICBRVW5pdC5wdXNoRmFpbHVyZSggIkRpZWQgb24gdGVzdCAjIiArICh0aGlzLmFzc2VydGlvbnMubGVuZ3RoICsgMSkgKyAiICIgKyB0aGlzLnN0YWNrICsgIjogIiArIGUubWVzc2FnZSwgZXh0cmFjdFN0YWNrdHJhY2UoIGUsIDAgKSApOwogICAgICAgICAgICAvLyBlbHNlIG5leHQgdGVzdCB3aWxsIGNhcnJ5IHRoZSByZXNwb25zaWJpbGl0eQogICAgICAgICAgICBzYXZlR2xvYmFsKCk7CgogICAgICAgICAgICAvLyBSZXN0YXJ0IHRoZSB0ZXN0cyBpZiB0aGV5J3JlIGJsb2NraW5nCiAgICAgICAgICAgIGlmICggY29uZmlnLmJsb2NraW5nICkgewogICAgICAgICAgICAgICAgUVVuaXQuc3RhcnQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICB0ZWFyZG93bjogZnVuY3Rpb24oKSB7CiAgICAgICAgY29uZmlnLmN1cnJlbnQgPSB0aGlzOwogICAgICAgIGlmICggY29uZmlnLm5vdHJ5Y2F0Y2ggKSB7CiAgICAgICAgICAgIHRoaXMudGVzdEVudmlyb25tZW50LnRlYXJkb3duLmNhbGwoIHRoaXMudGVzdEVudmlyb25tZW50ICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgdGhpcy50ZXN0RW52aXJvbm1lbnQudGVhcmRvd24uY2FsbCggdGhpcy50ZXN0RW52aXJvbm1lbnQgKTsKICAgICAgICAgICAgfSBjYXRjaCggZSApIHsKICAgICAgICAgICAgICAgIFFVbml0LnB1c2hGYWlsdXJlKCAiVGVhcmRvd24gZmFpbGVkIG9uICIgKyB0aGlzLnRlc3ROYW1lICsgIjogIiArIGUubWVzc2FnZSwgZXh0cmFjdFN0YWNrdHJhY2UoIGUsIDEgKSApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNoZWNrUG9sbHV0aW9uKCk7CiAgICB9LAogICAgZmluaXNoOiBmdW5jdGlvbigpIHsKICAgICAgICBjb25maWcuY3VycmVudCA9IHRoaXM7CiAgICAgICAgaWYgKCBjb25maWcucmVxdWlyZUV4cGVjdHMgJiYgdGhpcy5leHBlY3RlZCA9PSBudWxsICkgewogICAgICAgICAgICBRVW5pdC5wdXNoRmFpbHVyZSggIkV4cGVjdGVkIG51bWJlciBvZiBhc3NlcnRpb25zIHRvIGJlIGRlZmluZWQsIGJ1dCBleHBlY3QoKSB3YXMgbm90IGNhbGxlZC4iLCB0aGlzLnN0YWNrICk7CiAgICAgICAgfSBlbHNlIGlmICggdGhpcy5leHBlY3RlZCAhPSBudWxsICYmIHRoaXMuZXhwZWN0ZWQgIT0gdGhpcy5hc3NlcnRpb25zLmxlbmd0aCApIHsKICAgICAgICAgICAgUVVuaXQucHVzaEZhaWx1cmUoICJFeHBlY3RlZCAiICsgdGhpcy5leHBlY3RlZCArICIgYXNzZXJ0aW9ucywgYnV0ICIgKyB0aGlzLmFzc2VydGlvbnMubGVuZ3RoICsgIiB3ZXJlIHJ1biIsIHRoaXMuc3RhY2sgKTsKICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLmV4cGVjdGVkID09IG51bGwgJiYgIXRoaXMuYXNzZXJ0aW9ucy5sZW5ndGggKSB7CiAgICAgICAgICAgIFFVbml0LnB1c2hGYWlsdXJlKCAiRXhwZWN0ZWQgYXQgbGVhc3Qgb25lIGFzc2VydGlvbiwgYnV0IG5vbmUgd2VyZSBydW4gLSBjYWxsIGV4cGVjdCgwKSB0byBhY2NlcHQgemVybyBhc3NlcnRpb25zLiIsIHRoaXMuc3RhY2sgKTsKICAgICAgICB9CgogICAgICAgIHZhciBhc3NlcnRpb24sIGEsIGIsIGksIGxpLCBvbCwKICAgICAgICAgICAgdGVzdCA9IHRoaXMsCiAgICAgICAgICAgIGdvb2QgPSAwLAogICAgICAgICAgICBiYWQgPSAwLAogICAgICAgICAgICB0ZXN0cyA9IGlkKCAicXVuaXQtdGVzdHMiICk7CgogICAgICAgIGNvbmZpZy5zdGF0cy5hbGwgKz0gdGhpcy5hc3NlcnRpb25zLmxlbmd0aDsKICAgICAgICBjb25maWcubW9kdWxlU3RhdHMuYWxsICs9IHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGg7CgogICAgICAgIGlmICggdGVzdHMgKSB7CiAgICAgICAgICAgIG9sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggIm9sIiApOwoKICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCB0aGlzLmFzc2VydGlvbnMubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICBhc3NlcnRpb24gPSB0aGlzLmFzc2VydGlvbnNbaV07CgogICAgICAgICAgICAgICAgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAibGkiICk7CiAgICAgICAgICAgICAgICBsaS5jbGFzc05hbWUgPSBhc3NlcnRpb24ucmVzdWx0ID8gInBhc3MiIDogImZhaWwiOwogICAgICAgICAgICAgICAgbGkuaW5uZXJIVE1MID0gYXNzZXJ0aW9uLm1lc3NhZ2UgfHwgKCBhc3NlcnRpb24ucmVzdWx0ID8gIm9rYXkiIDogImZhaWxlZCIgKTsKICAgICAgICAgICAgICAgIG9sLmFwcGVuZENoaWxkKCBsaSApOwoKICAgICAgICAgICAgICAgIGlmICggYXNzZXJ0aW9uLnJlc3VsdCApIHsKICAgICAgICAgICAgICAgICAgICBnb29kKys7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGJhZCsrOwogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5zdGF0cy5iYWQrKzsKICAgICAgICAgICAgICAgICAgICBjb25maWcubW9kdWxlU3RhdHMuYmFkKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHN0b3JlIHJlc3VsdCB3aGVuIHBvc3NpYmxlCiAgICAgICAgICAgIGlmICggUVVuaXQuY29uZmlnLnJlb3JkZXIgJiYgZGVmaW5lZC5zZXNzaW9uU3RvcmFnZSApIHsKICAgICAgICAgICAgICAgIGlmICggYmFkICkgewogICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oICJxdW5pdC10ZXN0LSIgKyB0aGlzLm1vZHVsZSArICItIiArIHRoaXMudGVzdE5hbWUsIGJhZCApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKCAicXVuaXQtdGVzdC0iICsgdGhpcy5tb2R1bGUgKyAiLSIgKyB0aGlzLnRlc3ROYW1lICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggYmFkID09PSAwICkgewogICAgICAgICAgICAgICAgb2wuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gYGJgIGluaXRpYWxpemVkIGF0IHRvcCBvZiBzY29wZQogICAgICAgICAgICBiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggInN0cm9uZyIgKTsKICAgICAgICAgICAgYi5pbm5lckhUTUwgPSB0aGlzLm5hbWUgKyAiIDxiIGNsYXNzPSdjb3VudHMnPig8YiBjbGFzcz0nZmFpbGVkJz4iICsgYmFkICsgIjwvYj4sIDxiIGNsYXNzPSdwYXNzZWQnPiIgKyBnb29kICsgIjwvYj4sICIgKyB0aGlzLmFzc2VydGlvbnMubGVuZ3RoICsgIik8L2I+IjsKCiAgICAgICAgICAgIGFkZEV2ZW50KGIsICJjbGljayIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIG5leHQgPSBiLm5leHRTaWJsaW5nLm5leHRTaWJsaW5nLAogICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgPSBuZXh0LnN0eWxlLmRpc3BsYXk7CiAgICAgICAgICAgICAgICBuZXh0LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5ID09PSAibm9uZSIgPyAiYmxvY2siIDogIm5vbmUiOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGFkZEV2ZW50KGIsICJkYmxjbGljayIsIGZ1bmN0aW9uKCBlICkgewogICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUgJiYgZS50YXJnZXQgPyBlLnRhcmdldCA6IHdpbmRvdy5ldmVudC5zcmNFbGVtZW50OwogICAgICAgICAgICAgICAgaWYgKCB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSAic3BhbiIgfHwgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gImIiICkgewogICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cubG9jYXRpb24gJiYgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJzdHJvbmciICkgewogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IFFVbml0LnVybCh7IHRlc3ROdW1iZXI6IHRlc3QudGVzdE51bWJlciB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBgbGlgIGluaXRpYWxpemVkIGF0IHRvcCBvZiBzY29wZQogICAgICAgICAgICBsaSA9IGlkKCB0aGlzLmlkICk7CiAgICAgICAgICAgIGxpLmNsYXNzTmFtZSA9IGJhZCA\\/bm9nbG9iYWxzCiAgICAgICAgICAgIGN1cnJlbnRbIDEgXSA9IGN1cnJlbnRbIDEgXSA\\\\\/IFtdIDogby5zcGxpdCgvXHMrLyksIG4gPT09ICIiID8gW10gOiBuLnNwbGl0KC9ccysvKSApLAogICAgICAgICAgICBvU3BhY2UgPSBvLm1hdGNoKC9ccysvZyksCiAgICAgICAgICAgIG5TcGFjZSA9IG4ubWF0Y2goL1xzKy9nKTsKCiAgICAgICAgaWYgKCBvU3BhY2UgPT0gbnVsbCApIHsKICAgICAgICAgICAgb1NwYWNlID0gWyAiICIgXTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIG9TcGFjZS5wdXNoKCAiICIgKTsKICAgICAgICB9CgogICAgICAgIGlmICggblNwYWNlID09IG51bGwgKSB7CiAgICAgICAgICAgIG5TcGFjZSA9IFsgIiAiIF07CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBuU3BhY2UucHVzaCggIiAiICk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIG91dC5uLmxlbmd0aCA9PT0gMCApIHsKICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBvdXQuby5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgICAgIHN0ciArPSAiPGRlbD4iICsgb3V0Lm9baV0gKyBvU3BhY2VbaV0gKyAiPC9kZWw+IjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYgKCBvdXQublswXS50ZXh0ID09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBmb3IgKCBuID0gMDsgbiA8IG91dC5vLmxlbmd0aCAmJiBvdXQub1tuXS50ZXh0ID09IG51bGw7IG4rKyApIHsKICAgICAgICAgICAgICAgICAgICBzdHIgKz0gIjxkZWw+IiArIG91dC5vW25dICsgb1NwYWNlW25dICsgIjwvZGVsPiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgb3V0Lm4ubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICBpZiAob3V0Lm5baV0udGV4dCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgc3RyICs9ICI8aW5zPiIgKyBvdXQubltpXSArIG5TcGFjZVtpXSArICI8L2lucz4iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gYHByZWAgaW5pdGlhbGl6ZWQgYXQgdG9wIG9mIHNjb3BlCiAgICAgICAgICAgICAgICAgICAgcHJlID0gIiI7CgogICAgICAgICAgICAgICAgICAgIGZvciAoIG4gPSBvdXQubltpXS5yb3cgKyAxOyBuIDwgb3V0Lm8ubGVuZ3RoICYmIG91dC5vW25dLnRleHQgPT0gbnVsbDsgbisrICkgewogICAgICAgICAgICAgICAgICAgICAgICBwcmUgKz0gIjxkZWw+IiArIG91dC5vW25dICsgb1NwYWNlW25dICsgIjwvZGVsPiI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHN0ciArPSAiICIgKyBvdXQubltpXS50ZXh0ICsgblNwYWNlW2ldICsgcHJlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3RyOwogICAgfTsKfSgpKTsKCi8vIGZvciBDb21tb25KUyBlbnZpcm9tZW50cywgZXhwb3J0IGV2ZXJ5dGhpbmcKaWYgKCB0eXBlb2YgZXhwb3J0cyAhPT0gInVuZGVmaW5lZCIgKSB7CiAgICBleHRlbmQoZXhwb3J0cywgUVVuaXQpOwp9CgovLyBnZXQgYXQgd2hhdGV2ZXIgdGhlIGdsb2JhbCBvYmplY3QgaXMsIGxpa2Ugd2luZG93IGluIGJyb3dzZXJzCn0oIChmdW5jdGlvbigpIHtyZXR1cm4gdGhpczt9LmNhbGwoKSkgKSk7",
    "size": "64494"
}