{
    "namaFile": "lib\/PHPExcel\/changelog.txt",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "**************************************************************************************
* PHPExcel
*
* Copyright (c) 2006 - 2014 PHPExcel
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*
* @copyright  Copyright (c) 2006 - 2014 PHPExcel (http://www.codeplex.com/PHPExcel)
* @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt    LGPL
* @version    ##VERSION##, ##DATE##
**************************************************************************************


Planned for 1.8.2
- Bugfix:   (MBaker)                            - Fix to getCell() method when cell reference includes a worksheet reference
- Bugfix:   (ncrypthic)       Work Item GH-570  - Ignore inlineStr type if formula element exists
- Bugfix:   (hernst42)        Work Item GH-709  - Fixed missing renames of writeRelationShip (from _writeRelationShip)
- General:  (umpirsky)        Work Item GH-548  - Optimize vlookup() sort
- Bugfix:   (MBaker)          Work Item GH-554  - Whitespace after toRichTextObject()
- Feature:  (MBaker)                            - Initial implementation of SUMIFS() function
- Feature:  (MBaker)                            - Additional codepages
- Feature:  (Tomino2112)      Work Item GH-808  - MemoryDrawing not working in HTML writer
- General:  (rentalhost)      Work Item GH-575  - Excel 2007 Reader freezes because of conditional formatting
- Bugfix:   (vitalyrepin)     Pull Request 869  - c:max and c:min elements shall NOT be inside c:orientation elements
- General:  (sim642)          Pull Request 489  - Implement actual timezone adjustment into PHPExcel_Shared_Date::PHPToExcel


2015-04-30 (v1.8.1):
- Bugfix:   (goncons)         Work Item GH-397  - Fix for Writing an Open Document cell with non-numeric formula
- Bugfix:   (sarciszewski)    Work Item GH-329  - Avoid potential divide by zero in basedrawing
- Bugfix:   (ymaerschalck)    Work Item GH-405  - XML External Entity (XXE) Processing, different behaviour between simplexml_load_string() and simplexml_load_file().
- Bugfix:   (MBaker)                            - Fix to ensure that current cell is maintained when executing formula calculations
- Bugfix:   (MBaker)          Work Item GH-350  - Keep/set the value on Reader _loadSheetsOnly as NULL, courtesy of Restless-ET 
- Bugfix:   (MBaker)          Work Item CP18105 - Loading an Excel 2007 spreadsheet throws an "Autofilter must be set on a range of cells" exception
- Bugfix:   (MBaker)          Work Item GH-388  - Fix to autoloader registration for backward compatibility with PHP 5.2.0 not accepting the prepend flag
- Bugfix:   (MBaker)          Work Item GH-384  - DOM loadHTMLFile() failing with options flags when using PHP < 5.4.0
- Bugfix:   (MBaker)                            - Fix for percentage operator in formulae for BIFF Writer
- Bugfix:   (MBaker)                            - Fix to getStyle() call for cell object
- Bugfix:   (MBaker)                            - Discard Autofilters in Excel2007 Reader when filter range isn't a valid range
- Bugfix:   (frozenstupidity) Work Item GH-423  - Fix invalid NA return in VLOOKUP
- Bugfix:   (wiseloren)       Work Item CP21454 - "No Impact" conditional formatting fix for NumberFormat
- Bugfix:   (bobwitlox)       Work Item GH-467  - Bug in Excel2003XML reader, parsing merged cells
- Bugfix:   (MBaker)          Work Item GH-302  - Fix for CEIL() and FLOOR() when number argument is zero
- Bugfix:   (MBaker)                            - Remove cells cleanly when calling RemoveRow() or RemoveColumn()
- General:  (MBaker)                            - Small performance improvement for autosize columns
- General:  (frost-nzcr4)     Work Item GH-379  - Change the getter/setter for zeroHeight to camel case
- General:  (MBaker)          Work Item GH-394  - DefaultValueBinder is too much aggressive when converting string to numeric
- General:  (MBaker)                            - Default precalculate formulas to false for writers
- General:  (MBaker)                            - Set default Cyclic Reference behaviour to 1 to eliminate exception when using a single cyclic iteration in formulae
- General:  (MBaker)          Work Item GH-396  - Some Excel writer libraries erroneously use Codepage 21010 for UTF-16LE
- Feature:  (WiktrzGE)        Work Item GH-404  - Methods to manage most of the existing options for Chart Axis, Major Grid-lines and Minor Grid-lines
- Feature:  (frost-nzcr4)     Work Item GH-403  - ODS read/write comments in the cell
- Feature:  (CQD)             Work Item GH-389  - Additional Mac CJK codepage definitions
- Feature:  (bolovincev)      Work Item GH-269  - Update Worksheet.php getStyleByColumnAndRow() to allow a range of cells rather than just a single cell
- Feature:  (MBaker)                            - New methods added for testing cell status within merge groups
- Feature:  (cifren/MBaker)   Work Item GH-205  - Handling merge cells in HTML Reader
- Feature:  (MBaker)                            - Helper to convert basic HTML markup to a Rich Text object
- Feature:  (MBaker)                            - Improved Iterators
                                                    New Column Iterator
                                                    Support for row and column ranges
                                                    Improved handling for next/prev
- Security: (MBaker)                            - XML filescan in XML-based Readers to prevent XML Entity Expansion (XEE)
                                                    (see http://projects.webappsec.org/w/page/13247002/XML%20Entity%20Expansion for an explanation of XEE injection) attacks
                                                  Reference CVE-2015-3542 - Identification of problem courtesy of Dawid Golunski (Pentest Ltd.)

2014-03-02 (v1.8.0):
- Bugfix:   (MBaker)          Work item CP19830 - Undefined variable: fileHandle in CSV Reader
- Bugfix:   (MBaker)          Work item CP19968 - Out of memory in style/supervisor.php
- Bugfix:   (MBaker)                            - Style error with merged cells in PDF Writer
- Bugfix:   (MBaker)                            - Problem with cloning worksheets
- Bugfix:   (tavoarcila)      Work Item GH-259  - Bug fix reading Open Office files
- Bugfix:   (MBaker)          Work item CP20397 - Serious bug in absolute cell reference used in shared formula
                                                  Would also have affected insert/delete column/row
- Bugfix:   (RomanSyroeshko)  Work Item GH-267  - CHOOSE() returns "#VALUE!" if the 1st entry is chosen
- Bugfix:   (Gemorroj)        Work Item GH-268  - When duplicating styles, styles shifted by one column to the right
                                                  Fix also applied to duplicating conditional styles
- Bugfix:   (IndrekHaav)      Work Item GH-212  - Fix for formulae that reference a sheet whose name begins with a digit:
                                                  these were erroneously identified as numeric values, causing the parser to throw an undefined variable error.
- Bugfix:   (IndrekHaav)      Work Item CP16208 - Fixed undefined variable error due to $styleArray being used before it's initialised
- Bugfix:   (PowerKiKi)       Work Item GH-273  - ISTEXT() return wrong result if referencing an empty but formatted cell
- Bugfix:   (PowerKiKi)       Work Item GH-270/GH-31  - Binary comparison of strings are case insensitive
- Bugfix:   (MBaker)          Work Item GH-275  - Insert New Row/Column Before is not correctly updating formula references
- Bugfix:   (MBaker)          Work Item GH-257  - Passing an array of cells to _generateRow() in the HTML/PDF Writer causes caching problems with last cell in the range
- Bugfix:   (MBaker)          Work Item GH-193  - Fix to empty worksheet garbage collection when using cell caching
- Bugfix:   (Jazzo)           Work Item GH-248  - Excel2007 does not correctly mark rows as hidden
- Bugfix:   (Roy Shahbazian)  Work Item GH-299  - Fixed typo in Chart/Layout set/getYMode()
- Bugfix:   (EliuFlorez)      Work item GH-279  - Fatal error: Call to a member function cellExists() line: 3327 in calculation.php if referenced worksheet doesn't exist
- Bugfix:   (MBaker)          Work Item GH-290  - AdvancedValueBinder "Division by zero"-error
- Bugfix:   (MBaker)          Work Item CP20604 - Adding Sheet to Workbook Bug
- Bugfix:   (MBaker)          Work item CP20703 - Calculation engine incorrectly evaluates empty cells as #VALUE
- Bugfix:   (MBaker)          Work item CP20760 - Formula references to cell on another sheet in ODS files
- Bugfix:   (MBaker)          Work item GH321,GH158,CP17824 - LibreOffice created XLSX files results in an empty file.
- Feature:  (amerov)                            - Implementation of the Excel HLOOKUP() function
- Feature:  (MBaker)                            - Added "Quote Prefix" to style settings (Excel2007 Reader and Writer only)
- Feature:  (MBaker)                            - Added Horizontal FILL alignment for Excel5 and Excel2007 Readers/Writers, and Horizontal DISTRIBUTED alignment for Excel2007 Reader/Writer
- Feature:  (trvrnrth)        Work Item GH-261  - Add support for reading protected (RC4 encrypted) .xls files
- Feature:  (LWol)            Work Item GH-252  - Adding support for macros, Ribbon in Excel 2007
- General:  (cdhutch)         Work item CP20055 - Remove array_shift in ReferenceHelper::insertNewBefore improves column or row delete speed
- General:  (MBaker)                            - Improve stock chart handling and rendering, with help from Swashata Ghosh
- General:  (MBaker)                            - Fix to calculation properties for Excel2007 so that the opening application will only recalculate on load if it's actually required
- General:  (MBaker)                            - Modified Excel2007 Writer to default preCalculateFormulas to false
                                                  Note that autosize columns will still recalculate affected formulae internally
- General:  (dresenhista)     Work Item GH-242  - Functionality to getHighestRow() for a specified column, and getHighestColumn() for a specified row
- General:  (adamriyadi)      Work Item GH-247  - Modify PHPExcel_Reader_Excel2007 to use zipClass from PHPExcel_Settings::getZipClass()
                                                  This allows the use of PCLZip when reading for people that don't have access to ZipArchive
- General:  (infojunkie)      Work Item GH-276  - Convert properties to string in OOCalc reader
- Security: (maartenba)       Work Item GH-322  - Disable libxml external entity loading by default.
                                                  This is to prevent XML External Entity Processing (XXE) injection attacks (see http://websec.io/2012/08/27/Preventing-XEE-in-PHP.html for an explanation of XXE injection).
                                                  Reference CVE-2014-2054


2013-06-02 (v1.7.9):
- Feature:  (MBaker)    Include charts option for HTML Writer
- Feature:  (MBaker)    Added composer file
- Feature:  (MBaker)    Added getStyle() method to Cell object
- Bugfix:   (Asker)     Work item 18777  - Error in PHPEXCEL/Calculation.php script on line 2976 (stack pop check)
- Bugfix:   (MBaker)    Work item 18794  - CSV files without a file extension being identified as HTML
- Bugfix:   (AndreKR)   Work item GH-66  - Wrong check for maximum number of rows in Excel5 Writer
- Bugfix:   (MBaker)    Work item GH-67  - Cache directory for DiscISAM cache storage cannot be set
- Bugfix:   (MBaker)    Work item 17976  - Fix to Excel2007 Reader for hyperlinks with an anchor fragment (following a #), otherwise they were treated as sheet references
- Bugfix:   (MBaker)    Work item 18963  - getSheetNames() fails on numeric (floating point style) names with trailing zeroes
- Bugfix:   (MBaker)    Work item GH-130 - Single cell print area
- General:  (kea)       Work item GH-69  - Improved AdvancedValueBinder for currency
- General:  (MBaker)    Work items 17936 and 17840 - Fix for environments where there is no access to /tmp but to upload_tmp_dir
                        Provided an option to set the sys_get_temp_dir() call to use the upload_tmp_dir; though by default the standard temp directory will still be used
- General:  (amironov ) Work item GH-84  - Search style by identity in PHPExcel_Worksheet::duplicateStyle()
- General:  (karak)     Work item GH-85  - Fill SheetView IO in Excel5
- General:  (cfhay)     Work item 18958  - Memory and Speed improvements in PHPExcel_Reader_Excel5
- General:  (MBaker)    Work item GH-78  - Modify listWorksheetNames() and listWorksheetInfo to use XMLReader with streamed XML rather than SimpleXML
- General:  (dbonsch)                      Restructuring of PHPExcel Exceptions
- General:  (MBaker)    Work items 16926 and 15145 - Refactor Calculation Engine from singleton to a Multiton
                        Ensures that calculation cache is maintained independently for different workbooks
- General:  (MBaker)                       Modify cell's getCalculatedValue() method to return the content of RichText objects rather than the RichText object itself
- Bugfix:   (techhead)  Work item GH-70  - Fixed formula/formatting bug when removing rows
- Bugfix:   (alexgann)  Work item GH-63  - Fix to cellExists for non-existent namedRanges
- Bugfix:   (MBaker)    Work item 18844  - cache_in_memory_gzip "eats" last worksheet line, cache_in_memory doesn't
- Feature:  (Progi1984) Work item GH-22  - Sheet View in Excel5 Writer
- Bugfix:   (amironov)  Work item GH-82  - PHPExcel_Worksheet::getCellCollection() may not return last cached cell
- Bugfix:   (teso)      Work item 18551  - Rich Text containing UTF-8 characters creating unreadable content with Excel5 Writer
- Bugfix:   (MBaker)    Work item GH-104 - echo statements in HTML.php
- Feature:  (Progi1984) Work item GH-8/CP11704 : Conditional formatting in Excel 5 Writer
- Bugfix:   (MBaker)    Work item GH-113 - canRead() Error for GoogleDocs ODS files: in ODS files from Google Docs there is no mimetype file
- Bugfix:   (MBaker)    Work item GH-80  - "Sheet index is out of bounds." Exception
- Bugfix:   (ccorliss)  Work item GH-105 - Fixed number format fatal error
- Bugfix:   (MBaker)                     - Add DROP TABLE in destructor for SQLite and SQLite3 cache controllers
- Bugfix:   (alexgann)  Work item GH-154 - Fix merged-cell borders on HTML/PDF output
- Bugfix:   (Shanto)    Work item GH-161 - Fix: Hyperlinks break when removing rows
- Bugfix:   (neclimdul) Work item GH-166 - Fix Extra Table Row From Images and Charts


2012-10-12 (v1.7.8):
- Special:  (kkamkou)    Phar builder script to add phar file as a distribution option
- Feature:  (MBaker)     Refactor PDF Writer to allow use with a choice of PDF Rendering library
                         rather than restricting to tcPDF
                         Current options are tcPDF, mPDF, DomPDF
                         tcPDF Library has now been removed from the deployment bundle
- Feature:  (MBaker)     Initial version of HTML Reader
- Feature:  (Progi1984) & (blazzy) Work items 9605 - Implement support for AutoFilter in PHPExcel_Writer_Excel5
- Feature:  (MBaker)     Modified ERF and ERFC Engineering functions to accept Excel 2010's modified acceptance of negative arguments
- Feature:  (k1LoW)      Support SheetView `view` attribute (Excel2007)
- Feature:  (MBaker)     Excel compatibility option added for writing CSV files
                         While Excel 2010 can read CSV files with a simple UTF-8 BOM, Excel2007 and earlier require UTF-16LE encoded tab-separated files.
                         The new setExcelCompatibility(TRUE) option for the CSV Writer will generate files with this formatting for easy import into Excel2007 and below.
- Feature:  (MBaker)     Language implementations for Turkish (tr)
- Feature:  (MBaker)     Added fraction tests to advanced value binder
- Feature:  (MBaker)     Allow call to font setUnderline() for underline format to specify a simple boolean for UNDERLINE_NONE or UNDERLINE_SINGLE
- General:  (alexgann)   Add Currency detection to the Advanced Value Binder
- General:  (MBaker)     Work item 18404 - setCellValueExplicitByColumnAndRow() do not return PHPExcel_Worksheet
- General:  (MBaker)     Work item 18324 - Reader factory doesn't read anymore XLTX and XLT files
- General:  (MBaker)     Magic __toString() method added to Cell object to return raw data value as a string
- General:  (alexgann)   Add cell indent to html rendering
- General:  (Raghav1981) ZeroHeight for rows in sheet format
- Bugfix:   (cyberconte) Patch 12318 - OOCalc cells containing <text:span> inside the <text:p> tag
- Bugfix:   (schir1964)  Fix to listWorksheetInfo() method for OOCalc Reader
- Bugfix:   (MBaker)     Support for "e" (epoch) date format mask
                         Rendered as a 4-digit CE year in non-Excel outputs
- Bugfix:   (MBaker)     Work items 15799 and 18278 - Background color cell is always black when editing cell
- Bugfix:   (MBaker)     Work items 15905 and 18183 - Allow "no impact" to formats on Conditional Formatting
- Bugfix:   (wackonline) OOCalc Reader fix for NULL cells
- Bugfix:   (seltzlab)   Fix to excel2007 Chart Writer when a $plotSeriesValues is empty
- Bugfix:   (MBaker)     Various fixes to Chart handling
- Bugfix:   (MBaker)     Work item 18370 - Error loading xlsx file with column breaks
- Bugfix:   (MBaker)     OOCalc Reader now handles percentage and currency data types
- Bugfix:   (MBaker)     Work Item 18415 - mb_stripos empty delimiter
- Bugfix:   (takaakik)   Work Item 15455 - getNestingLevel() Error on Excel5 Read
- Bugfix:   (MBaker)     Fix to Excel5 Reader when cell annotations are defined before their referenced text objects
- Bugfix:   (MBaker)     OOCalc Reader modified to process number-rows-repeated
- Bugfix:   (MBaker)     Work item 18377 - Chart Title compatibility on Excel 2007
- Bugfix:   (MBaker)     Work item 18146 - Chart Refresh returning cell reference rather than values
- Bugfix:   (MBaker)     Work item 18145 - Autoshape being identified in twoCellAnchor when includeCharts is TRUE triggering load error
- Bugfix:   (MBaker)     Work item 18325 - v-type texts for series labels now recognised and parsed correctly
- Bugfix:   (wolf5x)     Work item 18492 - load file failed if the file has no extensionType
- Bugfix:   (dverspui)   Pattern fill colours in Excel2007 Style Writer
- Bugfix:   (MBaker)     Excel2007 Writer order of font style elements to conform with Excel2003 using compatibility pack
- Bugfix:   (MBaker)     Work item 18425 - Problems with $_activeSheetIndex when decreased below 0.
- Bugfix:   (MBaker)     Work item 18597 - PHPExcel_CachedObjectStorage_SQLite3::cacheMethodIsAvailable() uses class_exists - autoloader throws error
- Bugfix:   (MBaker)     Work item 18598 - Cannot access private property PHPExcel_CachedObjectStorageFactory::$_cacheStorageMethod
- Bugfix:   (MBaker)     Work item 18397 - Data titles for charts
                         PHPExcel_Chart_Layout now has methods for getting/setting switches for displaying/hiding chart data labels
- Bugfix:   (MBaker)     Discard single cell merge ranges when reading (stupid that Excel allows them in the first place)
- Bugfix:   (MBaker)     Discard hidden autoFilter named ranges


2012-05-19 (v1.7.7):
- Bugfix:   (Progi1984) Work item 8916 - Support for Rich-Text in PHPExcel_Writer_Excel5
- Bugfix:   (cyberconte) Work item 17471 - OOCalc cells contain same data bug?
- Feature:  (schir1964) listWorksheetInfo() method added to Readers... courtesy of Christopher Mullins
- Feature:  (MBaker)    Options for cell caching using Igbinary and SQLite/SQlite3.
- Feature:  (MBaker)    Additional row iterator options: allow a start row to be defined in the constructor; seek(), and prev() methods added.
- Feature:  (Progi1984) Work item 9759 - Implement document properties in Excel5 writer
- Feature:  (MBaker)    Work item 16 - Implement chart functionality (EXPERIMENTAL)
                        Initial definition of chart objects.
                        Reading Chart definitions through the Excel2007 Reader
                        Facility to render charts to images using the 3rd-party jpgraph library
                        Writing Charts using the Excel2007 Writer
- General:  (MBaker)    Fix to build to ensure that Examples are included with the documentation
- General:  (MBaker)    Reduce cell caching overhead using dirty flag to ensure that cells are only rewritten to the cache if they have actually been changed
- General:  (MBaker)    Improved memory usage in CSV Writer
- General:  (MBaker)    Improved speed and memory usage in Excel5 Writer
- General:  (MBaker)    Experimental -
                        Added getHighestDataColumn(), getHighestDataRow(), getHighestRowAndColumn() and calculateWorksheetDataDimension() methods for the worksheet that return the highest row and column that have cell records
- General:  (MBaker)    Change iterators to implement Iterator rather than extend CachingIterator, as a fix for PHP 5.4. changes in SPL
- Bugfix:   (MBaker)    Work item 15459 - Invalid cell coordinate in Autofilter for Excel2007 Writer
- Bugfix:   (MBaker)    Work item 15518 - PCLZip library issue
- Bugfix:   (MBaker)    Work item 15537 - Excel2007 Reader canRead function bug
- Bugfix:   (MBaker)    Support for Excel functions whose return can be used as either a value or as a cell reference depending on its context within a formula
- Bugfix:   (gilles06)  Work item 15707 - ini_set() call in Calculation class destructor
- Bugfix:   (MBaker)    Work item 15786 - RangeToArray strange array keys
- Bugfix:   (MBaker)    Work item 15762 - INDIRECT() function doesn't work with named ranges
- Bugfix:   (MBaker)    Locale-specific fix to text functions when passing a boolean argument instead of a string
- Bugfix:   (MBaker)    Work item 16246 - reader/CSV fails on this file
                        auto_detect_line_endings now set in CSV reader
- Bugfix:   (MBaker)    Work item 16212 - $arguments improperly used in CachedObjectStorage/PHPTemp.php
- Bugfix:   (MBaker)    Work item 16643 - Bug In Cache System (cell reference when throwing caching errors)
- Bugfix:   (MBaker)    Work item 16895 - PHP Invalid index notice on writing excel file when active sheet has been deleted
- Bugfix:   (MBaker)    Work item 16956 - External links in Excel2010 files cause Fatal error
- Bugfix:   (MBaker)    Work item 16960 - Previous calculation engine error conditions trigger cyclic reference errors
- Bugfix:   (mkopinsky) Work item 16266 - PHPExcel_Style::applyFromArray() returns null rather than style object in advanced mode
- Bugfix:   (fauvel)    Work item 16958 - Cell::getFormattedValue returns RichText object instead of string
- Bugfix:   (MBaker)    Work item 17166 - Indexed colors do not refer to Excel's indexed colors?
- Bugfix:   (MBaker)    Work item 17199 - Indexed colors should be consistent with Excel and start from 1 (current index starts at 0)
- Bugfix:   (MBaker)    Work item 17262 - Named Range definition in .xls when sheet reeference is quote wrapped
- Bugfix:   (MBaker)    Work item 17403 - duplicateStyle() method doesn't duplicate conditional formats
                                          Added an equivalent duplicateConditionalStyle() method for duplicating conditional styles
- Bugfix:   (bnr)       Work item 17501 - =sumproduct(A,B) <> =sumproduct(B,A) in xlsx
- Bugfix:   (Progi1984) Work item 8916  - Support for Rich-Text in PHPExcel_Writer_Excel5
- General:  (MBaker)    Work item 15405 - Two easy to fix Issues concerning PHPExcel_Token_Stack (l10n/UC)
- General:  (MBaker)    Work item 15461 - Locale file paths not fit for windows
- General:  (MBaker)    Work item 16643 - Add file directory as a cache option for cache_to_discISAM
- General:  (MBaker)    Work item 16923 - Datatype.php & constant TYPE_NULL
- General:  (MBaker)    Ensure use of system temp directory for all temporary work files, unless explicitly specified
- General:  (char101)   Work item 16359 - [Patch] faster stringFromColumnIndex()
- General:  (whit1206)  Work item 16028 - Fix for projects that still use old autoloaders
- General:  (atz)       Work item 17024 - Unknown codepage: 10007
                        Additional Mac codepages


2011-02-27 (v1.7.6):
- Feature:  (MBaker)  Provide option to use PCLZip as an alternative to ZipArchive.
                      This allows the writing of Excel2007 files, even without ZipArchive enabled (it does require zlib), or when php_zip is one of the buggy PHP 5.2.6 or 5.2.8 versions
                      It can be enabled using PHPExcel_Settings::setZipClass(PHPExcel_Settings::PCLZIP);
                      Note that it is not yet implemented as an alternative to ZipArchive for those Readers that are extracting from zips
- Feature:  (MBaker)  Work item 14979 - Added listWorksheetNames() method to Readers that support multiple worksheets in a workbook, allowing a user to extract a list of all the worksheet names from a file without parsing/loading the whole file.
- Feature:  (MBaker)  Speed boost and memory reduction in the Worksheet toArray() method.
- Feature:  (MBaker)  Added new rangeToArray() and namedRangeToArray() methods to the PHPExcel_Worksheet object.
                      Functionally, these are identical to the toArray() method, except that they take an additional first parameter of a Range (e.g. 'B2:C3') or a Named Range name.
                      Modified the toArray() method so that it actually uses rangeToArray().
- Feature:  (MBaker)  Added support for cell comments in the OOCalc, Gnumeric and Excel2003XML Readers, and in the Excel5 Reader
- Feature:  (MBaker)  Improved toFormattedString() handling for Currency and Accounting formats to render currency symbols
- Feature:  (MBaker)  Work Item  2346 - Implement more Excel calculation functions
                      Implemented the DAVERAGE(), DCOUNT(), DCOUNTA(), DGET(), DMAX(), DMIN(), DPRODUCT(), DSTDEV(), DSTDEVP(), DSUM(), DVAR() and DVARP() Database functions
- Bugfix:   (MBaker)  Work item 14888 - Simple =IF() formula disappears
- Bugfix:   (MBaker)  Work item 14898 - PHP Warning: preg_match(): Compilation failed: PCRE does not support \\L, \\l, \\N, \\P, \\p, \\U, \\u, or \\X
- Bugfix:   (MBaker)  Work item 14901 - VLOOKUP choking on parameters in PHPExcel.1.7.5/PHPExcel_Writer_Excel2007
- Bugfix:   (MBaker)  Work item 14973 - PHPExcel_Cell::isInRange() incorrect results - offset by one column
- Bugfix:   (MBaker)  Treat CodePage of 0 as CP1251 (for .xls files written by applications that don't set the CodePage correctly, such as Apple Numbers)
- Bugfix:   (MB)      Work item 11583 - Need method for removing autoFilter
- Bugfix:   (MBaker)  Work item 15029 - coordinateFromString throws exception for rows greater than 99,999
- Bugfix:   (MBaker)  Work item 14999 - PHPExcel Excel2007 Reader colour problems with solidfill
- Bugfix:   (MBaker)  Work item 13215 - Formatting get lost and edit a template XLSX file
- Bugfix:   (MBaker)  Work item 14029 - Excel 2007 Reader /writer lost fontcolor
- Bugfix:   (MBaker)  Work item 13374 - file that makes cells go black
- Bugfix:   (MBaker)  Minor patchfix for Excel2003XML Reader when XML is defined with a charset attribute
- Bugfix:   (MBaker)  Work item 15089 - PHPExcel_Worksheet->toArray() index problem
- Bugfix:   (MBaker)  Work item 15094 - Merge cells 'un-merge' when using an existing spreadsheet
- Bugfix:   (MBaker)  Work item 15129 - Worksheet fromArray() only working with 2-D arrays
- Bugfix:   (xkeshav) Work item 15172 - rangeToarray function modified for non-existent cells
- Bugfix:   (MBaker)  Work item 14980 - Images not getting copyied with the ->clone function
- Bugfix:   (MBaker)  Work item 11576 - AdvancedValueBinder.php: String sometimes becomes a date when it shouldn't
- Bugfix:   (MBaker)  Fix Excel5 Writer so that it only writes column dimensions for columns that are actually used rather than the full range (A to IV)
- Bugfix:   (MBaker)  Work item 15198 - FreezePane causing damaged or modified error
                      The freezePaneByColumnAndRow() method row argument should default to 1 rather than 0.
                      Default row argument for all __ByColumnAndRow() methods should be 1
- Bugfix:   (MBaker)  Work item 15121 - Column reference rather than cell reference in Print Area definition
                      Fix Excel2007 Writer to handle print areas that are defined as row or column ranges rather than just as cell ranges
- Bugfix:   (MBaker)  Reduced false positives from isDateTimeFormatCode() method by suppressing testing within quoted strings
- Bugfix:   (MBaker)  Work item 15312 - Caching and tmp partition exhaustion
- Bugfix:   (MBaker)  Work item 15308 - Writing to Variable No Longer Works. $_tmp_dir Missing in PHPExcel\PHPExcel\Shared\OLE\PPS\Root.php
- Bugfix:   (MBaker)  Work item 15379 - Named ranges with dot don't get parsed properly
- Bugfix:   (MBaker)  Work item 15096 - insertNewRowBefore fails to consistently update references
- Bugfix:   (MBaker)  "i" is not a valid character for Excel date format masks (in isDateTimeFormatCode() method)
- Bugfix:   (MKunert) Work item 15421 - PHPExcel_ReferenceHelper::insertNewBefore() is missing an 'Update worksheet: comments' section
- Bugfix:   (MBaker)  Work item 15409 - Full column/row references in named ranges not supported by updateCellReference()
- General:  (MBaker)  Improved performance (speed), for building the Shared Strings table in the Excel2007 Writer.
- General:  (MBaker)  Improved performance (speed), for PHP to Excel date conversions
- General:  (MBaker)  Enhanced SheetViews element structures in the Excel2007 Writer for frozen panes.
- General:  (MBaker)  Removed Serialized Reader/Writer as these no longer work.


2010-12-10 (v1.7.5):
- Feature:  (MBaker)    Work item 8769 - Implement Gnumeric File Format
                        Initial work on Gnumeric Reader (Worksheet Data, Document Properties and basic Formatting)
- Feature:  (MBaker)    (incorporating part of Workitem 9759) - Support for Extended Workbook Properties in Excel2007, Excel5 and OOCalc Readers; support for User-defined Workbook Properties in Excel2007 and OOCalc Readers
- Feature:  (MBaker)    Support for Extended and User-defined Workbook Properties in Excel2007 Writer
- Feature:  (MBaker)    Provided a setGenerateSheetNavigationBlock(false); option to suppress generation of the sheet navigation block when writing multiple worksheets to HTML
- Feature:  (MBaker)    Advanced Value Binder now recognises TRUE/FALSE strings (locale-specific) and converts to boolean
- Feature:  (MBaker)    Work item 14301 - PHPExcel_Worksheet->toArray() is returning truncated values
- Feature:  (MBaker)    Configure PDF Writer margins based on Excel Worksheet Margin Settings value
- Feature:  (MBaker)    Added Contiguous flag for the CSV Reader, when working with Read Filters
- Feature:  (MBaker)    Added getFormattedValue() method for cell object
- Feature:  (MBaker)    Added strictNullComparison argument to the worksheet fromArray() method
- Feature:  (MBaker)    Fix to toFormattedString() method in PHPExcel_Style_NumberFormat to handle fractions with a # code for the integer part
- Bugfix:   (MB)        Work item 14143 - NA() doesn't propagate in matrix calc - quick fix in JAMA/Matrix.php
- Bugfix:   (Progi1984) Work item 7895 - Excel5 : Formula : String constant containing double quotation mark
- Bugfix:   (Progi1984) Work item 7895 - Excel5 : Formula : Percent
- Bugfix:   (Progi1984) Work item 7895 - Excel5 : Formula : Error constant
- Bugfix:   (Progi1984) Work item 7895 - Excel5 : Formula : Concatenation operator
- Bugfix:   (MBaker)    Work item 14146 - Worksheet clone broken for CachedObjectStorage_Memory
- Bugfix:   (MBaker)    Work item 12998 - PHPExcel_Reader_Excel2007 fails when gradient fill without type is present in a file
- Bugfix:   (MBaker)    Work item 14176 - @ format for numeric strings in XLSX to CSV conversion
- Bugfix:   (MBaker)    Work item 14223 - Advanced Value Binder Not Working?
- Bugfix:   (MBaker)    Work item 14226 - unassigned object variable in PHPExcel->removeCellXfByIndex
- Bugfix:   (MBaker)    Work item 14236 - problem with getting cell values from another worksheet... (if cell doesn't exist)
- Bugfix:   (MBaker)    Work items 14260 & 14233 - Setting cell values to one char strings & Trouble reading one character string (thanks gorfou)
- Bugfix:   (MBaker)    Work item 14256 - Worksheet title exception when duplicate worksheet is being renamed but exceeds the 31 character limit
- Bugfix:   (MBaker)    Work item 14086 - Named range with sheet name that contains the $ throws exception when getting the cell
- Bugfix:   (MBaker)    Added autoloader to DefaultValueBinder and AdvancedValueBinder
- Bugfix:   (MBaker)    Modified PHPExcel_Shared_Date::isDateTimeFormatCode() to return false if format code begins with "_" or with "0 " to prevent false positives
                        These leading characters are most commonly associated with number, currency or accounting (or occasionally fraction) formats
- Bugfix:   (MBaker)    Work item 14374 - BUG : Excel5 and setReadFilter ?
- Bugfix:   (MBaker)    Work item 14425 - Wrong exception message while deleting column
- Bugfix:   (MBaker)    Work item 14679 - Formula evaluation fails with Japanese sheet refs
- Bugfix:   (MBaker)    Work item 13559 - PHPExcel_Writer_PDF does not handle cell borders correctly
- Bugfix:   (MBaker)    Work item 14831 - Style : applyFromArray() for 'allborders' not working
- Bugfix:   (MBaker)    Work item 14837 - Using $this when not in object context in Excel5 Reader
- General:  (MBaker)    Applied patch 6609 - Removes a unnecessary loop through each cell when applying conditional formatting to a range.
- General:  (MBaker)    Applied patch 7169 - Removed spurious PHP end tags (?>)
- General:  (MBaker)    Improved performance (speed) and reduced memory overheads, particularly for the Writers, but across the whole library.


2010-08-26 (v1.7.4):
- Bugfix:   (Progi1984) Work item 7895 - Excel5 : Formula : Power
- Bugfix:   (Progi1984) Work item 7895 - Excel5 : Formula : Unary plus
- Bugfix:   (Progi1984) Excel5 : Just write the Escher stream if necessary in Worksheet
- Bugfix:   (MBaker)    Work item 13433 - Syntax errors in memcache.php 1.7.3c
- Bugfix:   (MBaker)    Work item 13450 - Standard Deviation functions returning DIV/0 Error when Standard Deviation is zero
- Feature:  (MBaker)    Support for print area with several ranges in the Excel2007 reader, and improved features for editing print area with several ranges
- Feature:  (MBaker)    Work item 13769 - Improved Cell Exception Reporting
- Feature:  (MBaker)    Support for row or column ranges in the calculation engine, e.g. =SUM(C:C) or =SUM(1:2)
                        Also support in the calculation engine for absolute row or column ranges e.g. =SUM($C:$E) or =SUM($3:5)
- Bugfix:   (ET)        Work item 13455 - Picture problem with Excel 2003
- Bugfix:   (MBaker)    Work item 13484 - Wrong variable used in addExternalSheet in PHPExcel.php
- Bugfix:   (MBaker)    Work item 13515 - "Invalid cell coordinate" error when formula access data from an other sheet
- Bugfix:   (MBaker)    (related to Work item 13515) Calculation engine confusing cell range worksheet when referencing cells in a different worksheet to the formula
- Bugfix:   (MBaker)    Work item 13752 - Wrong var naming in Worksheet->garbageCollect()
- Bugfix:   (MBaker)    Work item 13764 - PHPExcel_Style_*::__clone() methods cause cloning loops?
- Bugfix:   (MBaker)    Work item 11488 - Recent builds causing problems loading xlsx files? (ZipArchive issue?)
- Bugfix:   (MBaker)    Work item 13856 - cache_to_apc causes fatal error when processing large data sets
- Bugfix:   (MBaker)    Work item 13880 - OOCalc reader misses first line if it's a 'table-header-row'
- Bugfix:   (MBaker)    Work item 14011 - using cache with copy or clone bug?
                                        Fixed $worksheet->copy() or clone $worksheet when using cache_in_memory, cache_in_memory_gzip, cache_in_memory_serialized, cache_to_discISAM, cache_to_phpTemp, cache_to_apc and cache_to_memcache;
                                        Fixed but untested when using cache_to_wincache.
- Bugfix:   (MBaker)    Fixed problems with reading Excel2007 Properties
- General:  (MB)        Applied patch 6324 - PHP Strict Standards: Non-static method PHPExcel_Shared_String::utf16_decode() should not be called statically
- General:  (MBaker)    Applied patch 6360 - Array functions were ignored when loading an existing file containing them, and as a result, they would lose their 'cse' status.
- General:  (MBaker)    Minor memory tweaks to Excel2007 Writer
- General:  (MBaker)    Modified ReferenceHelper updateFormulaReferences() method to handle updates to row and column cell ranges (including absolute references e.g. =SUM(A:$E) or =SUM($5:5), and range/cell references that reference a worksheet by name), and to provide both performance and memory improvements.
- General:  (MBaker)    Modified Excel2007 Reader so that ReferenceHelper class is instantiated only once rather than for every shared formula in a workbook.
- General:  (MBaker)    Correct handling for additional (synonym) formula tokens in Excel5 Reader
- General:  (MBaker)    Additional reading of some Excel2007 Extended Properties (Company, Manager)


2010-06-01 (v1.7.3c):
- Bugfix:   (MB)     Work item 13012 - Fatal error: Class 'ZipArchive' not found... ...Reader/Excel2007.php on line 217
- Bugfix:   (MBaker) Work item 13398 - PHPExcel_Writer_Excel2007 error after 1.7.3b


2010-05-31 (v1.7.3b):
- Bugfix:   (MBaker) Work item 12903 - Infinite loop when reading
- Bugfix:   (MB)     Work item 13381 - Wrong method chaining on PHPExcel_Worksheet class


2010-05-17 (v1.7.3):
- General:  (ET)     Applied patch 4990 (modified)
- General:  (MB)     Applied patch 5568 (modified)
- General:  (MB)     Applied patch 5943
- General:  (MB)     Work item 13042 - Upgrade build script to use Phing
- General:  (ET)     Work item 11586 - Replacing var with public/private
- General:  (MBaker) Applied Anthony's Sterling's Class Autoloader to reduce memory overhead by "Lazy Loading" of classes
- General:  (MBaker) Modification to functions that accept a date parameter to support string values containing ordinals as per Excel (English language only)
- General:  (MBaker) Modify PHPExcel_Style_NumberFormat::toFormattedString() to handle dates that fall outside of PHP's 32-bit date range
- General:  (MBaker) Applied patch 5207
- General:  (ET)     Work item 11970 - PHPExcel developer documentation: Set page margins
- Feature:  (ET)     Work item 11038 - Special characters and accents in SYLK reader
- Feature:  (MBaker) Work Item  2346 - Implement more Excel calculation functions
                     - Implemented the COUPDAYS(), COUPDAYBS(), COUPDAYSNC(), COUPNCD(), COUPPCD() and PRICE() Financial functions
                     - Implemented the N() and TYPE() Information functions
                     - Implemented the HYPERLINK() Lookup and Reference function
- Feature:  (ET)     Work item 11526 - Horizontal page break support in PHPExcel_Writer_PDF
- Feature:  (ET)     Work item 11529 - Introduce method setActiveSheetIndexByName()
- Feature:  (ET)     Work item 11550 - AdvancedValueBinder.php: Automatically wrap text when there is new line in string (ALT+"Enter")
- Feature:  (ET)     Work item 10300 - Data validation support in PHPExcel_Reader_Excel5 and PHPExcel_Writer_Excel5
- Feature:  (MB)     Work item 11616 - Improve autosize calculation
- Feature:  (MBaker) Methods to translate locale-specific function names in formulae
                     - Language implementations for Czech (cs), Danish (da), German (de), English (uk), Spanish (es), Finnish (fi), French (fr), Hungarian (hu), Italian (it), Dutch (nl), Norwegian (no), Polish (pl), Portuguese (pt), Brazilian Portuguese (pt_br), Russian (ru) and Swedish (sv)
- Feature:  (ET)     Work item 9759 - Implement document properties in Excel5 reader/writer
                     - Fixed so far for PHPExcel_Reader_Excel5
- Feature:  (ET)     Work item 11849 - Show/hide row and column headers in worksheet
- Feature:  (ET)     Work item 11919 - Can't set font on writing PDF (by key)
- Feature:  (ET)     Work item 12096 - Thousands scale (1000^n) support in PHPExcel_Style_NumberFormat::toFormattedString
- Feature:  (ET)     Work item  6911 - Implement repeating rows in PDF and HTML writer
- Feature:  (ET)     Work item 12289 - Sheet tabs in PHPExcel_Writer_HTML
- Feature:  (MB)     Work item 13041 - Add Wincache CachedObjectProvider
- Feature:  (MBaker) Configure PDF Writer paper size based on Excel Page Settings value, and provided methods to override paper size and page orientation with the writer
                     - Note PHPExcel defaults to Letter size, while the previous PDF writer enforced A4 size, so PDF writer will now default to Letter
- Feature:  (MBaker) Initial implementation of cell caching: allowing larger workbooks to be managed, but at a cost in speed
- Feature:  (MBaker) Added an identify() method to the IO Factory that identifies the reader which will be used to load a particular file without actually loading it.
- Bugfix:   (MBaker) Work item 10979 - Warning messages with INDEX function having 2 arguments
- Bugfix:   (ET)     Work item 11473 - setValue('=') should result in string instead of formula
- Bugfix:   (MBaker) Work item 11471 - method _raiseFormulaError should no be private
- Bugfix:   (ET)     Work item 11485 - Fatal error: Call to undefined function mb_substr() in ...Classes\PHPExcel\Reader\Excel5.php on line 2903
- Bugfix:   (ET)     Work item 11487 - getBold(), getItallic(), getStrikeThrough() not always working with PHPExcel_Reader_Excel2007
- Bugfix:   (ET)     Work item 11492 - AdvancedValueBinder.php not working correctly for $cell->setValue('hh:mm:ss')
- Bugfix:   (MBaker) Fixed leap year handling for the YEARFRAC() Date/Time function when basis ia 1 (Actual/actual)
- Bugfix:   (MBaker) Work item 11490 - Warning messages
                     - Calculation Engine code modified to enforce strict standards for pass by reference
- Bugfix:   (ET)     Work item 11483 - PHPExcel_Cell_AdvancedValueBinder doesnt work for dates in far future
- Bugfix:   (ET)     Work item 11528 - MSODRAWING bug with long CONTINUE record in PHPExcel_Reader_Excel5
- Bugfix:   (ET)     Work item 11571 - PHPExcel_Reader_Excel2007 reads print titles as named range when there is more than one sheet
- Bugfix:   (ET)     Work item 11561 - missing @return in phpdocblock in reader classes
- Bugfix:   (ET)     Work item 11576 - AdvancedValueBinder.php: String sometimes becomes a date when it shouldn't
- Bugfix:   (ET)     Work item 11588 - Small numbers escape treatment in PHPExcel_Style_NumberFormat::toFormattedString()
- Bugfix:   (ET)     Work item 11590 - Blank styled cells are not blank in output by HTML writer due to &nbsp;
- Bugfix:   (MBaker) Work item 11587 - Calculation engine bug: Existing, blank cell + number gives #NUM
- Bugfix:   (ET)     Work item 11608 - AutoSize only measures length of first line in cell with multiple lines (ALT+Enter)
- Bugfix:   (ET)     Work item 11608 - Fatal error running Tests/12serializedfileformat.php (PHPExcel 1.7.2)
- Bugfix:   (MBaker) Fixed various errors in the WORKDAY() and NETWORKDAYS() Date/Time functions (particularly related to holidays)
- Bugfix:   (ET)     Work item 11660 - Uncaught exception 'Exception' with message 'Valid scale is between 10 and 400.' in Classes/PHPExcel/Worksheet/SheetView.php:115
- Bugfix:   (ET)     Work item 11551 - "Unrecognized token 39 in formula" with PHPExcel_Reader_Excel5 (occuring with add-in functions)
- Bugfix:   (ET)     Work item 11668 - Excel2007 reader not reading PHPExcel_Style_Conditional::CONDITION_EXPRESSION
- Bugfix:   (MBaker) Fix to the BESSELI(), BESSELJ(), BESSELK(), BESSELY() and COMPLEX() Engineering functions to use correct default values for parameters
- Bugfix:   (MBaker) Work item 11525 - DATEVALUE function not working for pure time values + allow DATEVALUE() function to handle partial dates (e.g. "1-Jun" or "12/2010")
- Bugfix:   (MBaker) Fix for empty quoted strings in formulae
- Bugfix:   (MBaker) Trap for division by zero in Bessel functions
- Bugfix:   (MBaker) Fix to OOCalc Reader to convert semi-colon (;) argument separator in formulae to a comma (,)
- Bugfix:   (ET)     Work item 11693 - PHPExcel_Writer_Excel5_Parser cannot parse formula like =SUM(C$5:C5)
- Bugfix:   (MBaker) Fix to OOCalc Reader to handle dates that fall outside 32-bit PHP's date range
- Bugfix:   (ET)     Work item 11692 - File->sys_get_temp_dir() can fail in safe mode
- Bugfix:   (ET)     Work item 11727 - Sheet references in Excel5 writer do not work when referenced sheet title contains non-Latin symbols
- Bugfix:   (ET)     Work item 11743 - Bug in HTML writer can result in missing rows in output
- Bugfix:   (ET)     Work item 11674 - setShowGridLines(true) not working with PHPExcel_Writer_PDF
- Bugfix:   (ET)     Work item 11836 - PHPExcel_Worksheet_RowIterator initial position incorrect
- Bugfix:   (ET)     Work item 11835 - PHPExcel_Worksheet_HeaderFooterDrawing Strict Exception thrown (by jshaw86)
- Bugfix:   (ET)     Work item 11850 - Parts of worksheet lost when there are embedded charts (Excel5 reader)
- Bugfix:   (MBaker) VLOOKUP() function error when lookup value is passed as a cell reference rather than an absolute value
- Bugfix:   (ET)     Work item 12041 - First segment of Rich-Text not read correctly by PHPExcel_Reader_Excel2007
- Bugfix:   (MBaker) Work item 12048 - Fatal Error with getCell('name') when name matches the pattern for a cell reference
- Bugfix:   (ET)     Work item 12039 - excel5 writer appears to be swapping image locations
- Bugfix:   (ET)     Work item 11954 - Undefined index: host in ZipStreamWrapper.php, line 94 and line 101
- Bugfix:   (ET)     Work item 11672 - BIFF8 File Format problem (too short COLINFO record)
- Bugfix:   (ET)     Work item 12121 - Column width sometimes changed after read/write with Excel2007 reader/writer
- Bugfix:   (ET)     Work item 11964 - Worksheet.php throws a fatal error when styling is turned off via setReadDataOnly on the reader
- Bugfix:   (MBaker) Work item 11851 - Checking for Circular References in Formulae
                     - Calculation Engine code now traps for cyclic references, raising an error or throwing an exception, or allows 1 or more iterations through cyclic references, based on a configuration setting
- Bugfix:   (ET)     Work item 12244 - PNG transparency using Excel2007 writer
- Bugfix:   (ET)     Work item 12221 - Custom readfilter error when cell formulas reference excluded cells (Excel5 reader)
- Bugfix:   (ET)     Work item 12288 - Protection problem in XLS
- Bugfix:   (ET)     Work item 12300 - getColumnDimension()->setAutoSize() incorrect on cells with Number Formatting
- Bugfix:   (ET)     Work item 12378 - Notices reading Excel file with Add-in funcitons (PHPExcel_Reader_Excel5)
- Bugfix:   (ET)     Work item 12380 - Excel5 reader not reading formulas with deleted sheet references
- Bugfix:   (ET)     Work item 12404 - Named range (defined name) scope problems for in PHPExcel
- Bugfix:   (ET)     Work item 12423 - PHP Parse error: syntax error, unexpected T_PUBLIC in PHPExcel/Calculation.php on line 3482
- Bugfix:   (ET)     Work item 12505 - Named ranges don't appear in name box using Excel5 writer
- Bugfix:   (ET)     Work item 12509 - Many merged cells + autoSize column -> slows down the writer
- Bugfix:   (ET)     Work item 12539 - Incorrect fallback order comment in Shared/Strings.php ConvertEncoding()
- Bugfix:   (ET)     Work item 12538 - IBM AIX iconv() will not work, should revert to mbstring etc. instead
- Bugfix:   (ET)     Work item 12568 - Excel5 writer and mbstring functions overload
- Bugfix:   (MBaker) Work item 12672 - OFFSET needs to flattenSingleValue the $rows and $columns args
- Bugfix:   (MBaker) Work item 12546 - Formula with DMAX(): Notice: Undefined offset: 2 in ...\PHPExcel\Calculation.php on line 2365
                     - Note that the Database functions have not yet been implemented
- Bugfix:   (MBaker) Work item 12839 - Call to a member function getParent() on a non-object in Classes\\PHPExcel\\Calculation.php Title is required
- Bugfix:   (MBaker) Work item 12935 - Cyclic Reference in Formula
- Bugfix:   (MBaker) Work item 13025 - Memory error...data validation?


2010/01/11 (v1.7.2):
- General:  (ET)     Applied patch 4362
- General:  (ET)     Applied patch 4363 (modified)
- General:  (MBaker) Work item 10874 - 1.7.1 Extremely Slow - Refactored PHPExcel_Calculation_Functions::flattenArray() method and set calculation cache timer default to 2.5 seconds
- General:  (MBaker) Allow formulae to contain line breaks
- General:  (ET)     Work item 10910 - split() function deprecated in PHP 5.3.0
- General:  (ET)     sys_get_temp_dir() requires PHP 5.2.1, not PHP 5.2 [provide fallback function for PHP 5.2.0]
- General:  (MBaker) Applied patch 4640 - Implementation of the ISPMT() Financial function by Matt Groves
- General:  (MBaker) Work item 11052 - Put the example of formula with more arguments in documentation
- General:  (MBaker) Improved accuracy for the GAMMAINV() Statistical Function
- Feature:  (ET)     Work item 10409 - XFEXT record support to fix colors change from Excel5 reader, and copy/paste color change with Excel5 writer
                     - Excel5 reader reads RGB color information in XFEXT records for borders, font color and fill color
- Feature:  (MBaker) Work Item  2346 - Implement more Excel calculation functions
                     - Implemented the FVSCHEDULE(), XNPV(), IRR(), MIRR(), XIRR() and RATE() Financial functions
                     - Implemented the SUMPRODUCT() Mathematical function
                     - Implemented the ZTEST() Statistical Function
- Feature:  (ET)     Work item 10919 - Multiple print areas in one sheet
- Feature:  (ET)     Work item 10930 - Store calculated values in output by PHPExcel_Writer_Excel5
- Feature:  (ET)     Work item 10939 - Sheet protection options in Excel5 reader/writer
- Feature:  (MBaker) Modification of the COUNT(), AVERAGE(), AVERAGEA(), DEVSQ, AVEDEV(), STDEV(), STDEVA(), STDEVP(), STDEVPA(), VARA() and VARPA() SKEW() and KURT() functions to correctly handle boolean values depending on whether they're passed in as values, values within a matrix or values within a range of cells.
- Feature:  (ET)     Work item  9932 - Cell range selection
- Feature:  (MB)     Work item 10266 - Root-relative path handling
- Feature:  (ET)     Work item 11315 - Named Ranges not working with PHPExcel_Writer_Excel5
- Bugfix:   (MB)     Work item 11206 - Excel2007 Reader fails to load Apache POI generated Excel
- Bugfix:   (MB)     Work item 11154 - Number format is broken when system's thousands separator is empty
- Bugfix:   (MB)     Work item 11401 - ReferenceHelper::updateNamedFormulas throws errors if oldName is empty
- Bugfix:   (MB)     Work item 11296 - parse_url() fails to parse path to an image in xlsx
- Bugfix:   (ET)     Work item 10876 - Workaround for iconv_substr() bug in PHP 5.2.0
- Bugfix:   (ET)     Work item 10877 - 1 pixel error for image width and height with PHPExcel_Writer_Excel5
- Bugfix:   (MBaker) Fix to GEOMEAN() Statistical function
- Bugfix:   (ET)     Work item 10884 - setValue('-') and setValue('.') sets numeric 0 instead of 1-character string
- Bugfix:   (ET)     Work item 10885 - Row height sometimes much too low after read with PHPExcel_Reader_Excel5
- Bugfix:   (ET)     Work item 10888 - Diagonal border. Miscellaneous missing support.
                     - Constant PHPExcel_Style_Borders::DIAGONAL_BOTH added to support double-diagonal (cross)
                     - PHPExcel_Reader_Excel2007 not always reading diagonal borders (only recognizes 'true' and not '1')
                     - PHPExcel_Reader_Excel5 support for diagonal borders
                     - PHPExcel_Writer_Excel5 support for diagonal borders
- Bugfix:   (ET)     Work item 10894 - Session bug: Fatal error: Call to a member function bindValue() on a non-object in ...\Classes\PHPExcel\Cell.php on line 217
- Bugfix:   (ET)     Work item 10896 - Colors messed up saving twice with same instance of PHPExcel_Writer_Excel5 (regression since 1.7.0)
- Bugfix:   (ET)     Work item 10917 - Method PHPExcel_Worksheet::setDefaultStyle is not working
- Bugfix:   (ET)     Work item 10897 - PHPExcel_Reader_CSV::canRead() sometimes says false when it shouldn't
- Bugfix:   (ET)     Work item 10922 - Changes in workbook not picked up between two saves with PHPExcel_Writer_Excel2007
- Bugfix:   (ET)     Work item 10913 - Decimal and thousands separators missing in HTML and PDF output
- Bugfix:   (ET)     Work item 10936 - Notices with PHPExcel_Reader_Excel5 and named array constants
- Bugfix:   (MBaker) Work item 10938 - Calculation engine limitation on 32-bit platform with integers > 2147483647
- Bugfix:   (ET)     Work item 10959 - Shared(?) formulae containing absolute cell references not read correctly using Excel5 Reader
- Bugfix:   (MBaker) Work item 10962 - Warning messages with intersection operator involving single cell
- Bugfix:   (ET)     Work item 10980 - Infinite loop in Excel5 reader caused by zero-length string in SST
- Bugfix:   (ET)     Work item 10983 - Remove unnecessary cell sorting to improve speed by approx. 18% in HTML and PDF writers
- Bugfix:   (MBaker) Work item 10977 - Cannot read A1 cell content - OO_Reader
- Bugfix:   (ET)     Work item 11000 - Transliteration failed, invalid encoding


2009/11/02 (v1.7.1):
- General:  (ET) Work item 10687 - ereg() function deprecated in PHP 5.3.0
- General:  (MB) Work item 10739 - Writer Interface Inconsequence - setTempDir and setUseDiskCaching
- General:  (ET) Upgrade to TCPDF 4.8.009
- Feature:  (ET) Work item  7333 - Support for row and column styles (feature request)
            -   Basic implementation for Excel2007/Excel5 reader/writer
- Feature:  (ET) Work item 10459 - Hyperlink to local file in Excel5 reader/writer
- Feature:  (MB) Work item 10472 - Color Tab (Color Sheet's name)
- Feature:  (ET) Work item 10488 - Border style "double" support in PHPExcel_Writer_HTML
- Feature:  (ET) Work item 10492 - Multi-section number format support in HTML/PDF/CSV writers
- Feature:  (MBaker) - Some additional performance tweaks in the calculation engine
- Feature:  (MBaker) - Fix result of DB() and DDB() Financial functions to 2dp when in Gnumeric Compatibility mode
- Feature:  (MBaker) - Added AMORDEGRC(), AMORLINC() and COUPNUM() Financial function (no validation of parameters yet)
- Feature:  (MBaker) - Improved accuracy of TBILLEQ(), TBILLPRICE() and TBILLYIELD() Financial functions when in Excel or Gnumeric mode
- Feature:  (MBaker) - Added INDIRECT() Lookup/Reference function (only supports full addresses at the moment)
- Feature:  (MB) Work item 10498 - PHPExcel_Reader_CSV::canRead() improvements
- Feature:  (ET) Work item 10500 - Input encoding option for PHPExcel_Reader_CSV
- Feature:  (ET) Work item 10493 - Colored number format support, e.g. [Red], in HTML/PDF output
- Feature:  (ET) Work item 10559 - Color Tab (Color Sheet's name) [Excel5 reader/writer support]
- Feature:  (MBaker) Initial version of SYLK (slk) and Excel 2003 XML Readers (Cell data and basic cell formatting)
- Feature:  (MBaker) Initial version of Open Office Calc (ods) Reader (Cell data only)
- Feature:  (MBaker) Initial use of "pass by reference" in the calculation engine for ROW() and COLUMN() Lookup/Reference functions
- Feature:  (MBaker) Work item 2346 - COLUMNS() and ROWS() Lookup/Reference functions, and SUBSTITUTE() Text function
- Feature:  (ET) Work item 10502 - AdvancedValueBinder(): Re-enable zero-padded string-to-number conversion, e.g '0004' -> 4
- Feature:  (ET) Work item 10600 - Make PHP type match Excel datatype
- Feature:  (MB) Work item 10630 - Change first page number on header
- Feature:  (MB) Applied patch 3941
- Feature:  (MB,ET) Work item 10745 - Hidden sheets
- Feature:  (ET) Work item 10761 - mbstring fallback when iconv is broken
- Feature:  (MBaker) Added support for matrix/value comparisons (e.g. ={1,2;3,4}>=3 or 2<>{1,2;3,4}) - Note, can't yet handle comparison of two matrices
- Feature:  (MBaker) Improved handling for validation and error trapping in a number of functions
- Feature:  (MBaker) Improved support for fraction number formatting
- Feature:  (ET) Work item 10455 - Support Reading CSV with Byte Order Mark (BOM)
- Feature:  (ET) Work item 10860 - addExternalSheet() at specified index
- Bugfix:   (MBaker) Work item 10684 - Named range can no longer be passed to worksheet->getCell()
- Bugfix:   (ET) Work item 10455 - RichText HTML entities no longer working in PHPExcel 1.7.0
- Bugfix:   (ET) Work item  7610 - Fit-to-width value of 1 is lost after read/write of Excel2007 spreadsheet [+ support for simultaneous scale/fitToPage]
- Bugfix:   (MB) Work item 10469 - Performance issue identified by profiling
- Bugfix:   (ET) Work item 10473 - setSelectedCell is wrong
- Bugfix:   (ET) Work item 10481 - Images get squeezed/stretched with (Mac) Verdana 10 Excel files using Excel5 reader/writer
- Bugfix:   (MBaker) Work item 10482 - Error in argument count for DATEDIF() function
- Bugfix:   (MBaker) Work item 10452 - updateFormulaReferences is buggy
- Bugfix:   (MB) Work item 10485 - CellIterator returns null Cell if onlyExistingCells is set and key() is in use
- Bugfix:   (MBaker) Work item 10453 - Wrong RegEx for parsing cell references in formulas
- Bugfix:   (MB) Work item 10486 - Optimisation subverted to devastating effect if IterateOnlyExistingCells is clear
- Bugfix:   (ET) Work item 10494 - Fatal error: Uncaught exception 'Exception' with message 'Unrecognized token 6C in formula'... with PHPExcel_Reader_Excel5
- Bugfix:   (MBaker) Work item 10490 - Fractions stored as text are not treated as numbers by PHPExcel's calculation engine
- Bugfix:   (ET) Work item 10503 - AutoFit (autosize) row height not working in PHPExcel_Writer_Excel5
- Bugfix:   (MBaker) Fixed problem with null values breaking the calculation stack
- Bugfix:   (ET) Work item 10524 - Date number formats sometimes fail with PHPExcel_Style_NumberFormat::toFormattedString, e.g. [$-40047]mmmm d yyyy
- Bugfix:   (MBaker) Fixed minor problem with DATEDIFF YM calculation
- Bugfix:   (MB) Applied patch 3695
- Bugfix:   (ET) Work item 10536 - setAutosize() and Date cells not working properly
- Bugfix:   (ET) Work item 10556 - Time value hour offset in output by HTML/PDF/CSV writers (system timezone problem)
- Bugfix:   (ET) Work item 10558 - Control characters 0x14-0x1F are not treated by PHPExcel
- Bugfix:   (ET) Work item 10560 - PHPExcel_Writer_Excel5 not working when open_basedir restriction is in effect
- Bugfix:   (MBaker) Work item 10563 - IF formula calculation problem in PHPExcel 1.7.0 (string comparisons)
- Bugfix:   (MBaker) Improved CODE() Text function result for UTF-8 characters
- Bugfix:   (ET) Work item 10568 - Empty rows are collapsed with HTML/PDF writer
- Bugfix:   (ET) Work item 10569 - Gaps between rows in output by PHPExcel_Writer_PDF (Upgrading to TCPDF 4.7.003)
- Bugfix:   (ET) Work item 10575 - Problem reading formulas (Excel5 reader problem with "fake" shared formulas)
- Bugfix:   (MBaker) Work item 10588 - Error type in formula: "_raiseFormulaError message is Formula Error: An unexpected error occured"
- Bugfix:   (ET) Work item 10599 - Miscellaneous column width problems in Excel5/Excel2007 writer
- Bugfix:   (ET) Work item 10615 - Reader/Excel5 'Unrecognized token 2D in formula' in latest version
- Bugfix:   (ET) Work item 10623 - on php 5.3 PHPExcel 1.7 Excel 5 reader fails in _getNextToken, token = 2C, throws exception
- Bugfix:   (ET) Work item 10617 - Fatal error when altering styles after workbook has been saved
- Bugfix:   (ET) Work item 10661 - Images vertically stretched or squeezed when default font size is changed (PHPExcel_Writer_Excel5)
- Bugfix:   (ET) Work item 10676 - Styles not read in "manipulated" Excel2007 workbook
- Bugfix:   (ET) Work item 10059 - Windows 7 says corrupt file by PHPExcel_Writer_Excel5 when opening in Excel
- Bugfix:   (MBaker) Work item 10708 - Calculations sometimes not working with cell references to other sheets
- Bugfix:   (ET) Work item 10706 - Problem with merged cells after insertNewRowBefore()
- Bugfix:   (MBaker) Applied patch 4023
- Bugfix:   (MBaker) Fix to SUMIF() and COUNTIF() Statistical functions for when condition is a match against a string value
- Bugfix:   (ET) Work item 10721 - PHPExcel_Cell::coordinateFromString should throw exception for bad string parameter
- Bugfix:   (ET) Work item 10723 - EucrosiaUPC (Thai font) not working with PHPExcel_Writer_Excel5
- Bugfix:   (MBaker) Improved the return of calculated results when the result value is an array
- Bugfix:   (MBaker) Allow calculation engine to support Functions prefixed with @ within formulae
- Bugfix:   (MBaker) Work item 10632 - Intersection operator (space operator) fatal error with calculation engine
- Bugfix:   (ET) Work item 10742 - Chinese, Japanese, Korean characters show as squares in PDF
- Bugfix:   (ET) Work item 10756 - sheet title allows invalid characters
- Bugfix:   (ET) Work item 10757 - Sheet!$A$1 as function argument in formula causes infinite loop in Excel5 writer
- Bugfix:   (MBaker) Work item 10740 - Cell range involving name not working with calculation engine - Modified calculation parser to handle range operator (:), but doesn't currently handle worksheet references with spaces or other non-alphameric characters, or trap erroneous references
- Bugfix:   (MBaker) Work item 10798 - DATE function problem with calculation engine (says too few arguments given)
- Bugfix:   (MBaker) Work item 10799 - Blank cell can cause wrong calculated value
- Bugfix:   (MBaker) Modified ROW() and COLUMN() Lookup/Reference Functions to return an array when passed a cell range, plus some additional work on INDEX()
- Bugfix:   (ET) Work item 10817 - Images not showing in Excel 97 using PHPExcel_Writer_Excel5 (patch by Jordi Gutiérrez Hermoso)
- Bugfix:   (ET) Work item 10785 - When figures are contained in the excel sheet, Reader was stopped
- Bugfix:   (MBaker) Work item 10818 - Formulas changed after insertNewRowBefore()
- Bugfix:   (ET) Work item 10825 - Cell range row offset problem with shared formulas using PHPExcel_Reader_Excel5
- Bugfix:   (MBaker) Work item 10832 - Warning: Call-time pass-by-reference has been deprecated
- Bugfix:   (ET) Work item 10849 - Image should "Move but don't size with cells" instead of "Move and size with cells" with PHPExcel_Writer_Excel5
- Bugfix:   (ET) Work item 10856 - Opening a Excel5 generated XLS in Excel 2007 results in header/footer entry not showing on input
- Bugfix:   (ET) Work item 10859 - addExternalSheet() not returning worksheet
- Bugfix:   (MBaker) Work item 10629 - Invalid results in formulas with named ranges


2009/08/10 (v1.7.0):
- General:  (ET) Work item  9893 - Expand documentation: Number formats
- General:  (ET) Work item  9941 - Class 'PHPExcel_Cell_AdvancedValueBinder' not found
- General:  (MB) Work item  9960 - Change return type of date functions to PHPExcel_Calculation_Functions::RETURNDATE_EXCEL
- Feature:  (MBaker) - New RPN and stack-based calculation engine for improved performance of formula calculation
            -   Faster (anything between 2 and 12 times faster than the old parser, depending on the complexity and nature of the formula)
            -   Significantly more memory efficient when formulae reference cells across worksheets
            -   Correct behaviour when referencing Named Ranges that exist on several worksheets
            -   Support for Excel ^ (Exponential) and % (Percentage) operators
            -   Support for matrices within basic arithmetic formulae (e.g. ={1,2,3;4,5,6;7,8,9}/2)
            -   Better trapping/handling of NaN and infinity results (return #NUM! error)
            -   Improved handling of empty parameters for Excel functions
            -   Optional logging of calculation steps
- Feature:  (MBaker) - New calculation engine can be accessed independently of workbooks (for use as a standalone calculator)
- Feature:  (MBaker) Work Item  2346 - Implement more Excel calculation functions
            -   Initial implementation of the COUNTIF() and SUMIF() Statistical functions
            -   Added ACCRINT() Financial function
- Feature:  (MBaker) - Modifications to number format handling for dddd and ddd masks in dates, use of thousand separators even when locale only implements it for money, and basic fraction masks (0 \\",
    "size": "129048"
}