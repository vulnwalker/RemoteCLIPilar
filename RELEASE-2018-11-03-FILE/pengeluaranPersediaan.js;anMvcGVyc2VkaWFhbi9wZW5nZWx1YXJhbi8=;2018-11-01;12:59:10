{
    "namaFile": "js\/persediaan\/pengeluaran\/pengeluaranPersediaan.js",
    "lastUpdate": "2018-11-01+12:59:10.91",
    "contentFile": "dmFyIHBlbmdlbHVhcmFuUGVyc2VkaWFhbkZpbHRlclNLUEQgPSBuZXcgU2twZENscyh7CiAgcHJlZml4OiAicGVuZ2VsdWFyYW5QZXJzZWRpYWFuIiwKICBmb3JtTmFtZTogInBlbmdlbHVhcmFuUGVyc2VkaWFhbkZvcm0iLAogIHBpbGloVXJ1c2FuZnRlcjogZnVuY3Rpb24oKSB7CiAgICBwZW5nZWx1YXJhblBlcnNlZGlhYW4uZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwaWxpaEJpZGFuZ0FmdGVyOiBmdW5jdGlvbigpIHsKICAgIHBlbmdlbHVhcmFuUGVyc2VkaWFhbi5maWx0ZXJSZW5kZXIoKTsKICB9LAogIHBpbGloVW5pdEFmdGVyOiBmdW5jdGlvbigpIHsKICAgIHBlbmdlbHVhcmFuUGVyc2VkaWFhbi5maWx0ZXJSZW5kZXIoKTsKICB9LAogIHBpbGloU3ViVW5pdEFmdGVyOiBmdW5jdGlvbigpIHsKICAgIHBlbmdlbHVhcmFuUGVyc2VkaWFhbi5maWx0ZXJSZW5kZXIoKTsKICB9LAogIHBpbGloU2Vrc2lBZnRlcjogZnVuY3Rpb24oKSB7CiAgICBwZW5nZWx1YXJhblBlcnNlZGlhYW4uZmlsdGVyUmVuZGVyKCk7CiAgfQp9KTsKdmFyIHBlbmdlbHVhcmFuUGVyc2VkaWFhbiA9IG5ldyBEYWZ0YXJPYmoyKHsKCXByZWZpeCA6ICdwZW5nZWx1YXJhblBlcnNlZGlhYW4nLAoJdXJsIDogJ3BnUGVyc2VkaWFhbi5waHA\\/JykpewoJCQkJdmFyIGNvdmVyID0gdGhpcy5wcmVmaXgrJ19oYXB1c2NvdmVyJzsKCQkJCWFkZENvdmVyUGFnZTIoY292ZXIsMSx0cnVlLGZhbHNlKTsKCQkJCSQuYWpheCh7CgkJCQkJdHlwZTonUE9TVCcsCgkJCQkJZGF0YTokKCcjJyt0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKCQkJCQl1cmw6IHRoaXMudXJsKycmdGlwZT1oYXB1cycsCgkJCQkgIAlzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CgkJCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsKCQkJCQkJZGVsRWxlbShjb3Zlcik7CgkJCQkJCWlmKHJlc3AuZXJyPT0nJyl7CgkJCQkJCQltZS5BZnRlckhhcHVzKCk7CgkJCQkJCX1lbHNlewoJCQkJCQkJYWxlcnQocmVzcC5lcnIpOwoJCQkJCQl9CgoJCQkJICAJfSwKCQkJCQllcnJvcjogYWpheEVycm9yCgkJCQl9KTsKCgkJCX0KCQl9Cgl9LAoJUG9zdGluZzpmdW5jdGlvbigpewoJCXZhciBtZSA9IHRoaXM7CgkJZXJybXNnID0gdGhpcy5DZWtDaGVja2JveCgpOwoJCWlmKGVycm1zZyA9PScnKXsKCQkJdmFyIGJveCA9IHRoaXMuR2V0Q2J4Q2hlY2tlZCgpOwoKCQkJLy90aGlzLlNob3cgKCdmb3JtZWRpdCcse2lkcGxoOmJveC52YWx1ZX0sIGZhbHNlLCB0cnVlKTsKCQkJdmFyIGNvdmVyID0gdGhpcy5wcmVmaXgrJ19mb3JtY292ZXInOwoJCQlhZGRDb3ZlclBhZ2UyKGNvdmVyLDIsdHJ1ZSxmYWxzZSk7CgkJCWRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3c9J2hpZGRlbic7CgkJCSQuYWpheCh7CgkJCQl0eXBlOidQT1NUJywKCQkJCWRhdGE6JCgnIycrdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCgkJCQl1cmw6IHRoaXMudXJsKycmdGlwZT1Qb3N0aW5nJywKCQkJICAJc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewoJCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsKCQkJCQlpZiAocmVzcC5lcnIgPT0nJyl7CgkJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7CgkJCQkJCW1lLkFmdGVyRm9ybUVkaXQocmVzcCk7CgkJCQkJfWVsc2V7CgkJCQkJCWFsZXJ0KHJlc3AuZXJyKTsKCQkJCQkJZGVsRWxlbShjb3Zlcik7CgkJCQkJCWRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3c9J2F1dG8nOwoJCQkJCX0KCQkJICAJfQoJCQl9KTsKCQl9ZWxzZXsKCQkJYWxlcnQoZXJybXNnKTsKCQl9CgoJfSwKCglSZW1vdmU6ZnVuY3Rpb24oKXsKCQl2YXIgbWUgPSB0aGlzOwoJCWVycm1zZyA9IHRoaXMuQ2VrQ2hlY2tib3goKTsKCQlpZigkKCIjY21iVXJ1c2FuIikudmFsKCkgID09ICcnKXsKCQkgCWFsZXJ0KCJQaWxpaCBVcnVzYW4iKTsKCQl9ZWxzZSBpZigkKCIjY21iQmlkYW5nIikudmFsKCkgID09ICcnKXsKCQkJYWxlcnQoIlBpbGloIEJpZGFuZyIpOwoJCX1lbHNlIGlmKCQoIiNjbWJTS1BEIikudmFsKCkgID09ICcnKXsKCQkJYWxlcnQoIlBpbGloIFNLUEQiKTsKCQl9ZWxzZSBpZigkKCIjY21iVW5pdCIpLnZhbCgpICA9PSAnJyl7CgkJCWFsZXJ0KCJQaWxpaCBVbml0Iik7CgkJfWVsc2UgaWYoJCgiI2NtYlN1YlVuaXQiKS52YWwoKSAgPT0gJycpewoJCQlhbGVydCgiUGlsaWggU3ViIFVuaXQiKTsKCQl9ZWxzZXsKCQkJaWYoZXJybXNnID09JycpewoJCQkJdmFyIGJveCA9IHRoaXMuR2V0Q2J4Q2hlY2tlZCgpOwoJCQkJdmFyIHNrcGQgPSAkKCIjY21iVXJ1c2FuIikudmFsKCkrJy4nKyQoIiNjbWJCaWRhbmciKS52YWwoKSsnLicrJCgiI2NtYlNLUEQiKS52YWwoKSsnLicrJCgiI2NtYlVuaXQiKS52YWwoKSsnLicrJCgiI2NtYlN1YlVuaXQiKS52YWwoKTsKCgkJCQkkLmFqYXgoewoJCQkJICB1cmw6IHRoaXMudXJsKycmdGlwZT1SZW1vdmUnLAoJCQkJICB0eXBlIDogJ1BPU1QnLAoJCQkJICBkYXRhOiQoJyMnK3RoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAoJCQkJICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CgkJCQkJCXZhciByZXNwID0gZXZhbCgnKCcgKyBkYXRhICsgJyknKTsKCQkJCQkJaWYocmVzcC5lcnIgPT0gIiIpIHsKCQkJCQkJCXBlbmdlbHVhcmFuUGVyc2VkaWFhbi5yZWZyZXNoTGlzdCh0cnVlKTsKCQkJCQkJfWVsc2V7CgkJCQkJCQlhbGVydChyZXNwLmVycik7CgkJCQkJCX0KCgkJCQkgIH0KCQkJCX0pOwoJCQl9ZWxzZXsKCQkJCWFsZXJ0KGVycm1zZyk7CgkJCX0KCQl9Cgl9LAoKCXNlc3VhaTpmdW5jdGlvbihpZCl7CgoKCQkkLmFqYXgoewoJCQkJdHlwZTonUE9TVCcsCgkJCQlkYXRhOntpZEF3YWwgOiBpZCwKCQkJCQkgIGtvcmVrc2lWb2x1bWViYXJhbmcgOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidm9sdW1lUmVrU2VzdWFpIitpZCkudmFsdWUsCgkJCQkJICBrb3Jla3NpU2F0dWFuSGFyZ2EgOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaGFyZ2FTYXR1YW5TZXN1YWkiK2lkKS52YWx1ZQoJCQkJCSAgfSwKCQkJCXVybDogdGhpcy51cmwrJyZ0aXBlPWtvcmVrc2knLAoJCQkgIAlzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CgkJCQkJdmFyIHJlc3AgPSBldmFsKCcoJyArIGRhdGEgKyAnKScpOwoJCQkJCWlmKHJlc3AuZXJyID09ICcnKXsKCQkJCQkJcGVuZ2VsdWFyYW5QZXJzZWRpYWFuLnJlZnJlc2hMaXN0KHRydWUpOwoJCQkJCX1lbHNlewoJCQkJCQlhbGVydChyZXNwLmVycik7CgkJCQkJCWlmKHJlc3AuZXJyID09ICdUYWhhcCBLb3Jla3NpIFRhbGFoIEhhYmlzJyl7CgkJCQkJCQl3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CgkJCQkJCX0KCQkJCQl9CgoJCQkJIH0KCQkJICB9KTsKCgl9LAoJa29yZWtzaTpmdW5jdGlvbihpZCl7CgkJJCgiI3NwYW5Wb2x1bWVCYXJhbmciK2lkKS5odG1sKCI8aW5wdXQgdHlwZT0ndGV4dCcgbmFtZT0ndm9sdW1lQmFyYW5nIitpZCsiJyBpZD0ndm9sdW1lQmFyYW5nIitpZCsiJyBvbmtleXByZXNzPSdyZXR1cm4gZXZlbnQuY2hhckNvZGUgPj0gNDggJiYgZXZlbnQuY2hhckNvZGUgPD0gNTcnIG9ua2V5dXA9J3BlbmdlbHVhcmFuUGVyc2VkaWFhbi5iYW50dVZvbHVtZUJhcmFuZygiK2lkKyIpJyAgIHN0eWxlPSd0ZXh0LWFsaWduOiByaWdodDsnPiAgPHNwYW4gaWQ9J2JhbnR1Vm9sdW1lQmFyYW5nIitpZCsiJyA+PC9zcGFuPiIpOwoJCSQoIiNzcGFuU2F0dWFuSGFyZ2EiK2lkKS5odG1sKCI8aW5wdXQgdHlwZT0ndGV4dCcgbmFtZT0nc2F0dWFuSGFyZ2EiK2lkKyInIGlkPSdzYXR1YW5IYXJnYSIraWQrIicgb25rZXlwcmVzcz0ncmV0dXJuIGV2ZW50LmNoYXJDb2RlID49IDQ4ICYmIGV2ZW50LmNoYXJDb2RlIDw9IDU3JyBvbmtleXVwPSdwZW5nZWx1YXJhblBlcnNlZGlhYW4uYmFudHVTYXR1YW5IYXJnYSgiK2lkKyIpJyAgICBzdHlsZT0ndGV4dC1hbGlnbjogcmlnaHQ7Jz4gIDxzcGFuIGlkPSdiYW50dVNhdHVhbkhhcmdhIitpZCsiJyA+PC9zcGFuPiIpOwoJCSQoIiNidXR0b25TdWJtaXRLb3Jla3NpIitpZCkuaHRtbCgiPGltZyBzcmM9J2RhdGVwaWNrZXIvc2F2ZS5wbmcnIHdpZHRoPScyMHB4JyBoZWlnaD0nMjBweCcgc3R5bGU9J2N1cnNvciA6IHBvaW50ZXI7JyBvbmNsaWNrPXBlbmdlbHVhcmFuUGVyc2VkaWFhbi5zdWJtaXRLb3Jla3NpKCciK2lkKyInKTs+PC9pbWc+Jm5ic3AgICZuYnNwIDxpbWcgc3JjPSdpbWFnZXMvYWRtaW5pc3RyYXRvci9pbWFnZXMvaW52YWxpZC5wbmcnIHdpZHRoPScyMHB4JyBoZWlnaD0nMjBweCcgc3R5bGU9J2N1cnNvciA6IHBvaW50ZXI7JyBvbmNsaWNrPXBlbmdlbHVhcmFuUGVyc2VkaWFhbi5yZWZyZXNoTGlzdCh0cnVlKTs+PC9pbWc+Iik7CgkJJCgiI2FsaWduQnV0dG9uIitpZCkuYXR0cignYWxpZ24nLCdjZW50ZXInICk7Cgl9LAoJc3VibWl0S29yZWtzaTpmdW5jdGlvbihpZCkgewoKCQkJaWYoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ2b2x1bWVCYXJhbmciK2lkKS52YWx1ZSA9PSAwICl7CgkJCQlhbGVydCgiSXNpIFZvbHVtZSBCYXJhbmciKTsKCQkJfWVsc2UgaWYoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzYXR1YW5IYXJnYSIraWQpLnZhbHVlID09IDAgKXsKCQkJCWFsZXJ0KCJJc2kgU2F0dWFuIEhhcmdhIik7CgkJCX1lbHNlewoJCQkgICQuYWpheCh7CgkJCQl0eXBlOidQT1NUJywKCQkJCWRhdGE6e2lkQXdhbCA6IGlkLAoJCQkJCSAga29yZWtzaVZvbHVtZWJhcmFuZyA6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ2b2x1bWVCYXJhbmciK2lkKS52YWx1ZSwKCQkJCQkgIGtvcmVrc2lTYXR1YW5IYXJnYSA6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzYXR1YW5IYXJnYSIraWQpLnZhbHVlCgkJCQkJICB9LAoJCQkJdXJsOiB0aGlzLnVybCsnJnRpcGU9a29yZWtzaScsCgkJCSAgCXN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKCQkJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CgkJCQkJaWYocmVzcC5lcnIgPT0gJycpewoJCQkJCQlwZW5nZWx1YXJhblBlcnNlZGlhYW4ucmVmcmVzaExpc3QodHJ1ZSk7CgkJCQkJfWVsc2V7CgkJCQkJCWFsZXJ0KHJlc3AuZXJyKTsKCQkJCQkJaWYocmVzcC5lcnIgPT0gJ1RhaGFwIEtvcmVrc2kgVGFsYWggSGFiaXMnKXsKCQkJCQkJCXdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKCQkJCQkJfQoJCQkJCX0KCgkJCQkgfQoJCQkgIH0pOwoJCQl9CgoJfSwKCgliYW50dVZvbHVtZUJhcmFuZyA6IGZ1bmN0aW9uKGlkKXsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFudHVWb2x1bWVCYXJhbmcnK2lkKS5pbm5lckhUTUwgPSBwZW5nZWx1YXJhblBlcnNlZGlhYW4uZm9ybWF0Q3VycmVuY3kyKCQoIiN2b2x1bWVCYXJhbmciK2lkKS52YWwoKSk7CgkJdmFyIGhhc2lsS2FsaSA9IE51bWJlcigkKCIjdm9sdW1lQmFyYW5nIitpZCkudmFsKCkpICogTnVtYmVyKCQoIiNzYXR1YW5IYXJnYSIraWQpLnZhbCgpKSA7CgkJJCgiI3NwYW5KdW1sYWhIYXJnYSIraWQpLnRleHQocGVuZ2VsdWFyYW5QZXJzZWRpYWFuLmZvcm1hdEN1cnJlbmN5KGhhc2lsS2FsaSkpOwoJfSwKCWJhbnR1U2F0dWFuSGFyZ2EgOiBmdW5jdGlvbihpZCl7CgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhbnR1U2F0dWFuSGFyZ2EnK2lkKS5pbm5lckhUTUwgPSAgcGVuZ2VsdWFyYW5QZXJzZWRpYWFuLmZvcm1hdEN1cnJlbmN5KCQoIiNzYXR1YW5IYXJnYSIraWQpLnZhbCgpKTsKCQl2YXIgaGFzaWxLYWxpID0gTnVtYmVyKCQoIiN2b2x1bWVCYXJhbmciK2lkKS52YWwoKSkgKiBOdW1iZXIoJCgiI3NhdHVhbkhhcmdhIitpZCkudmFsKCkpIDsKCQkkKCIjc3Bhbkp1bWxhaEhhcmdhIitpZCkudGV4dChwZW5nZWx1YXJhblBlcnNlZGlhYW4uZm9ybWF0Q3VycmVuY3koaGFzaWxLYWxpKSk7Cgl9LAoKCWZvcm1hdEN1cnJlbmN5OmZ1bmN0aW9uKG51bSkgewoJCW51bSA9IG51bS50b1N0cmluZygpLnJlcGxhY2UoL1wkfFwsL2csJycpOwoJCWlmKGlzTmFOKG51bSkpCgkJbnVtID0gIjAiOwoJCXNpZ24gPSAobnVtID09IChudW0gPSBNYXRoLmFicyhudW0pKSk7CgkJbnVtID0gTWF0aC5mbG9vcihudW0qMTAwKzAuNTAwMDAwMDAwMDEpOwoJCWNlbnRzID0gbnVtJTEwMDsKCQludW0gPSBNYXRoLmZsb29yKG51bS8xMDApLnRvU3RyaW5nKCk7CgkJaWYoY2VudHM8MTApCgkJY2VudHMgPSAiMCIgKyBjZW50czsKCQlmb3IgKHZhciBpID0gMDsgaSA8IE1hdGguZmxvb3IoKG51bS5sZW5ndGgtKDEraSkpLzMpOyBpKyspCgkJbnVtID0gbnVtLnN1YnN0cmluZygwLG51bS5sZW5ndGgtKDQqaSszKSkrJy4nKwoJCW51bS5zdWJzdHJpbmcobnVtLmxlbmd0aC0oNCppKzMpKTsKCQlyZXR1cm4gKCgoc2lnbik\",
    "size": "28379"
}