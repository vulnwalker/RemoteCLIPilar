{
    "namaFile": "pages\/perencanaan_v3\/renja\/renjaAsetNew.php",
    "lastUpdate": "2018-02-20+16:55:04.80",
    "contentFile": "\/ICcnOicgV2hlcmUgJy4kS29uZGlzaTsNCiAgICANCiAgICAkZ2V0TWF4SURUYWhhcCA9IG15c3FsX2ZldGNoX2FycmF5KG15c3FsX3F1ZXJ5KCJzZWxlY3QgbWF4KGlkX3RhaGFwKSBmcm9tIHZpZXdfcmVuamEiKSk7DQogICAgJGlkVGFoYXAgPSAkZ2V0TWF4SURUYWhhcFsnbWF4KGlkX3RhaGFwKSddOw0KICAgICRxcnkgPSJzZWxlY3QgKiBmcm9tIHZpZXdfcmVuamEgJEtvbmRpc2kgb3JkZXIgYnkgdXJ1dCI7DQogICAgJGFxcnkgPSBteXNxbF9xdWVyeSgkcXJ5KTsNCiAgICANCiAgICAgICAgDQogICAgLy9NVUxBSSBIYWxhbWFuIExhcG9yYW4gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIA0KICAgICRjc3MgPSAkeGxzID8gIjxzdHlsZT4ubmZtdDUge21zby1udW1iZXItZm9ybWF0OidcQCc7fTwvc3R5bGU+IjoiPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCJjc3MvdGVtcGxhdGVfY3NzLmNzc1wiIHR5cGU9XCJ0ZXh0L2Nzc1wiIC8+IjsNCiAgICAkZ2V0SmVuaXNSZXBvcnRBc2V0ID0gbXlzcWxfZmV0Y2hfYXJyYXkobXlzcWxfcXVlcnkoIlNFTEVDVCAqIGZyb20gcmVwb3J0IHdoZXJlIHVybCA9ICckdGhpcy0+cmVwb3J0VVJMQXNldCcgIikpOw0KICAgICRnZXRKZW5pc1VrdXJhbiA9ICRnZXRKZW5pc1JlcG9ydEFzZXRbJ2plbmlzJ107DQogICAgaWYgKCRnZXRKZW5pc1VrdXJhbiA9PSAnTCcpIHsNCiAgICAgICR0ckNoaWxkID0gIjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9J2pzL3BhZ2VOdW1iZXIuanMnPjwvc2NyaXB0PiI7DQogICAgICAkd2lkdGggPSAiMzNjbSI7DQogICAgICAkaGVpZ2h0ID0gIjIxLjVjbSI7DQogICAgfWVsc2V7DQogICAgICAkdHJDaGlsZCA9ICI8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCcgc3JjPSdqcy9wYWdlTnVtYmVyMi5qcyc+PC9zY3JpcHQ+IjsNCiAgICAgICR3aWR0aCA9ICIyMS41Y20iOw0KICAgICAgJGhlaWdodCA9ICIzM2NtIjsNCiAgICB9DQogICAgJGFycmF5VGFuZGFUYW5nYW5Bc2V0ID0gZXhwbG9kZSgnOycsICRnZXRKZW5pc1JlcG9ydEFzZXRbJ3RhbmRhX3RhbmdhbiddKTsNCg0KICAgICRncmFiVXJ1c2FuID0gbXlzcWxfZmV0Y2hfYXJyYXkobXlzcWxfcXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGMxJyBhbmQgYz0nMDAnIikpOyANCiAgICAkdXJ1c2FuID0gJGMxLiIuICIuJGdyYWJVcnVzYW5bJ25tX3NrcGQnXTsNCiAgICAkZ3JhYkJpZGFuZyA9IG15c3FsX2ZldGNoX2FycmF5KG15c3FsX3F1ZXJ5KCJzZWxlY3QgKiBmcm9tIHJlZl9za3BkIHdoZXJlIGMxID0gJyRjMScgYW5kIGM9JyRjJyBhbmQgZD0nMDAnIikpOw0KICAgICRiaWRhbmcgPSAkYy4iLiAiLiRncmFiQmlkYW5nWydubV9za3BkJ107DQogICAgJGdyYWJTa3BkID0gbXlzcWxfZmV0Y2hfYXJyYXkobXlzcWxfcXVlcnkoInNlbGVjdCAqIGZyb20gcmVmX3NrcGQgd2hlcmUgYzEgPSAnJGMxJyBhbmQgYz0nJGMnIGFuZCBkPSckZCcgYW5kIGU9JzAwJyIpKTsNCiAgICAkc2twZCA9ICRncmFiU2twZFsnbm1fc2twZCddOw0KICAgIGVjaG8gDQogICAgICAiPGh0bWw+DQogICAgICA8bGluayByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJyBocmVmPSdhc3NldHMvY3NzL2Jvb3RzdHJhcC5taW4uY3NzJz4NCiAgICAgIDxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M\",
    "size": "75665"
}