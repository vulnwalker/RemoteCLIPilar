{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/multi-select\/jquery.multi-select.js",
    "lastUpdate": "2018-03-22+14:23:43.80",
    "contentFile": "\/ICRzZWxlY3RhYmxlT3B0Z3JvdXAuZmluZCgndWwnKS5jaGlsZHJlbigpLmxlbmd0aCA6IGluZGV4ICsgMTsKICAgICAgICBzZWxlY3RhYmxlTGkuaW5zZXJ0QXQoaW5kZXgsICRzZWxlY3RhYmxlT3B0Z3JvdXAuY2hpbGRyZW4oKSk7CiAgICAgICAgc2VsZWN0ZWRMaS5pbnNlcnRBdChpbmRleCwgJHNlbGVjdGlvbk9wdGdyb3VwLmNoaWxkcmVuKCkpOwogICAgICB9IGVsc2UgewogICAgICAgIGluZGV4ID0gaW5kZXggPT0gdW5kZWZpbmVkID8gdGhhdC4kc2VsZWN0YWJsZVVsLmNoaWxkcmVuKCkubGVuZ3RoIDogaW5kZXg7CgogICAgICAgIHNlbGVjdGFibGVMaS5pbnNlcnRBdChpbmRleCwgdGhhdC4kc2VsZWN0YWJsZVVsKTsKICAgICAgICBzZWxlY3RlZExpLmluc2VydEF0KGluZGV4LCB0aGF0LiRzZWxlY3Rpb25VbCk7CiAgICAgIH0KICAgIH0sCgogICAgJ2FkZE9wdGlvbicgOiBmdW5jdGlvbihvcHRpb25zKXsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwoKICAgICAgaWYgKG9wdGlvbnMudmFsdWUpIG9wdGlvbnMgPSBbb3B0aW9uc107CiAgICAgICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbihpbmRleCwgb3B0aW9uKXsKICAgICAgICBpZiAob3B0aW9uLnZhbHVlICYmIHRoYXQuJGVsZW1lbnQuZmluZCgib3B0aW9uW3ZhbHVlPSciK29wdGlvbi52YWx1ZSsiJ10iKS5sZW5ndGggPT09IDApewogICAgICAgICAgdmFyICRvcHRpb24gPSAkKCc8b3B0aW9uIHZhbHVlPSInK29wdGlvbi52YWx1ZSsnIj4nK29wdGlvbi50ZXh0Kyc8L29wdGlvbj4nKSwKICAgICAgICAgICAgICBpbmRleCA9IHBhcnNlSW50KCh0eXBlb2Ygb3B0aW9uLmluZGV4ID09PSAndW5kZWZpbmVkJyA\",
    "size": "19397"
}