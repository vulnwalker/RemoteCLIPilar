{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Reader\/Excel2007\/Chart.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKLyoqCiAqIFBIUEV4Y2VsCiAqCiAqIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwKICoKICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcgogKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlcgogKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCiAqCiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZQogKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BICAwMjExMC0xMzAxICBVU0EKICoKICogQGNhdGVnb3J5ICAgIFBIUEV4Y2VsCiAqIEBwYWNrYWdlICAgICAgICBQSFBFeGNlbF9SZWFkZXJfRXhjZWwyMDA3CiAqIEBjb3B5cmlnaHQgICAgQ29weXJpZ2h0IChjKSAyMDA2IC0gMjAxNSBQSFBFeGNlbCAoaHR0cDovL3d3dy5jb2RlcGxleC5jb20vUEhQRXhjZWwpCiAqIEBsaWNlbnNlICAgICAgICBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2xncGwtMi4xLnR4dCAgICBMR1BMCiAqIEB2ZXJzaW9uICAgICAgICAjI1ZFUlNJT04jIywgIyNEQVRFIyMKICovCgovKioKICogUEhQRXhjZWxfUmVhZGVyX0V4Y2VsMjAwN19DaGFydAogKgogKiBAY2F0ZWdvcnkgICAgUEhQRXhjZWwKICogQHBhY2thZ2UgICAgICAgIFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDIwMDcKICogQGNvcHlyaWdodCAgICBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsIChodHRwOi8vd3d3LmNvZGVwbGV4LmNvbS9QSFBFeGNlbCkKICovCmNsYXNzIFBIUEV4Y2VsX1JlYWRlcl9FeGNlbDIwMDdfQ2hhcnQKewogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gZ2V0QXR0cmlidXRlKCRjb21wb25lbnQsICRuYW1lLCAkZm9ybWF0KQogICAgewogICAgICAgICRhdHRyaWJ1dGVzID0gJGNvbXBvbmVudC0+YXR0cmlidXRlcygpOwogICAgICAgIGlmIChpc3NldCgkYXR0cmlidXRlc1skbmFtZV0pKSB7CiAgICAgICAgICAgIGlmICgkZm9ybWF0ID09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKHN0cmluZykgJGF0dHJpYnV0ZXNbJG5hbWVdOwogICAgICAgICAgICB9IGVsc2VpZiAoJGZvcm1hdCA9PSAnaW50ZWdlcicpIHsKICAgICAgICAgICAgICAgIHJldHVybiAoaW50ZWdlcikgJGF0dHJpYnV0ZXNbJG5hbWVdOwogICAgICAgICAgICB9IGVsc2VpZiAoJGZvcm1hdCA9PSAnYm9vbGVhbicpIHsKICAgICAgICAgICAgICAgIHJldHVybiAoYm9vbGVhbikgKCRhdHRyaWJ1dGVzWyRuYW1lXSA9PT0gJzAnIHx8ICRhdHRyaWJ1dGVzWyRuYW1lXSAhPT0gJ3RydWUnKSA\",
    "size": "27167"
}