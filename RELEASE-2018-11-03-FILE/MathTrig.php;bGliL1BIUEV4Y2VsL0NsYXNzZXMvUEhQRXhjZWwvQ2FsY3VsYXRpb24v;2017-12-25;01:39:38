{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Calculation\/MathTrig.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/CiAgICAgICAgICAgIGlmICgoaXNfbnVtZXJpYygkYXJnKSkgJiYgKCFpc19zdHJpbmcoJGFyZykpKSB7CiAgICAgICAgICAgICAgICAkcmV0dXJuVmFsdWUgKz0gJGFyZzsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRyZXR1cm5WYWx1ZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBTVU1JRgogICAgICoKICAgICAqIENvdW50cyB0aGUgbnVtYmVyIG9mIGNlbGxzIHRoYXQgY29udGFpbiBudW1iZXJzIHdpdGhpbiB0aGUgbGlzdCBvZiBhcmd1bWVudHMKICAgICAqCiAgICAgKiBFeGNlbCBGdW5jdGlvbjoKICAgICAqICAgICAgICBTVU1JRih2YWx1ZTFbLHZhbHVlMlssIC4uLl1dLGNvbmRpdGlvbikKICAgICAqCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYwogICAgICogQGNhdGVnb3J5IE1hdGhlbWF0aWNhbCBhbmQgVHJpZ29ub21ldHJpYyBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSAgICBtaXhlZCAgICAgICAgJGFyZywuLi4gICAgICAgIERhdGEgdmFsdWVzCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICAgICAkY29uZGl0aW9uICAgICAgICBUaGUgY3JpdGVyaWEgdGhhdCBkZWZpbmVzIHdoaWNoIGNlbGxzIHdpbGwgYmUgc3VtbWVkLgogICAgICogQHJldHVybiAgICBmbG9hdAogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFNVTUlGKCRhQXJncywgJGNvbmRpdGlvbiwgJHN1bUFyZ3MgPSBhcnJheSgpKQogICAgewogICAgICAgICRyZXR1cm5WYWx1ZSA9IDA7CgogICAgICAgICRhQXJncyA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlbkFycmF5KCRhQXJncyk7CiAgICAgICAgJHN1bUFyZ3MgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5BcnJheSgkc3VtQXJncyk7CiAgICAgICAgaWYgKGVtcHR5KCRzdW1BcmdzKSkgewogICAgICAgICAgICAkc3VtQXJncyA9ICRhQXJnczsKICAgICAgICB9CiAgICAgICAgJGNvbmRpdGlvbiA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6aWZDb25kaXRpb24oJGNvbmRpdGlvbik7CiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGFyZ3VtZW50cwogICAgICAgIGZvcmVhY2ggKCRhQXJncyBhcyAka2V5ID0+ICRhcmcpIHsKICAgICAgICAgICAgaWYgKCFpc19udW1lcmljKCRhcmcpKSB7CiAgICAgICAgICAgICAgICAkYXJnID0gc3RyX3JlcGxhY2UoJyInLCAnIiInLCAkYXJnKTsKICAgICAgICAgICAgICAgICRhcmcgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbjo6d3JhcFJlc3VsdChzdHJ0b3VwcGVyKCRhcmcpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHRlc3RDb25kaXRpb24gPSAnPScuJGFyZy4kY29uZGl0aW9uOwogICAgICAgICAgICBpZiAoUEhQRXhjZWxfQ2FsY3VsYXRpb246OmdldEluc3RhbmNlKCktPl9jYWxjdWxhdGVGb3JtdWxhVmFsdWUoJHRlc3RDb25kaXRpb24pKSB7CiAgICAgICAgICAgICAgICAvLyBJcyBpdCBhIHZhbHVlIHdpdGhpbiBvdXIgY3JpdGVyaWEKICAgICAgICAgICAgICAgICRyZXR1cm5WYWx1ZSArPSAkc3VtQXJnc1ska2V5XTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRyZXR1cm5WYWx1ZTsKICAgIH0KCgogCS8qKgoJICoJU1VNSUZTCgkgKgoJICoJQ291bnRzIHRoZSBudW1iZXIgb2YgY2VsbHMgdGhhdCBjb250YWluIG51bWJlcnMgd2l0aGluIHRoZSBsaXN0IG9mIGFyZ3VtZW50cwoJICoKCSAqCUV4Y2VsIEZ1bmN0aW9uOgoJICoJCVNVTUlGUyh2YWx1ZTFbLHZhbHVlMlssIC4uLl1dLGNvbmRpdGlvbikKCSAqCgkgKglAYWNjZXNzCXB1YmxpYwoJICoJQGNhdGVnb3J5IE1hdGhlbWF0aWNhbCBhbmQgVHJpZ29ub21ldHJpYyBGdW5jdGlvbnMKCSAqCUBwYXJhbQltaXhlZAkJJGFyZywuLi4JCURhdGEgdmFsdWVzCgkgKglAcGFyYW0Jc3RyaW5nCQkkY29uZGl0aW9uCQlUaGUgY3JpdGVyaWEgdGhhdCBkZWZpbmVzIHdoaWNoIGNlbGxzIHdpbGwgYmUgc3VtbWVkLgoJICoJQHJldHVybglmbG9hdAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFNVTUlGUygpIHsKCQkkYXJyYXlMaXN0ID0gZnVuY19nZXRfYXJncygpOwoKCQkkc3VtQXJncyA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6ZmxhdHRlbkFycmF5KGFycmF5X3NoaWZ0KCRhcnJheUxpc3QpKTsKCiAgICAgICAgd2hpbGUgKGNvdW50KCRhcnJheUxpc3QpID4gMCkgewogICAgICAgICAgICAkYUFyZ3NBcnJheVtdID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuQXJyYXkoYXJyYXlfc2hpZnQoJGFycmF5TGlzdCkpOwogICAgICAgICAgICAkY29uZGl0aW9uc1tdID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjppZkNvbmRpdGlvbihhcnJheV9zaGlmdCgkYXJyYXlMaXN0KSk7CiAgICAgICAgfQoKICAgICAgICAvLyBMb29wIHRocm91Z2ggZWFjaCBzZXQgb2YgYXJndW1lbnRzIGFuZCBjb25kaXRpb25zCiAgICAgICAgZm9yZWFjaCAoJGNvbmRpdGlvbnMgYXMgJGluZGV4ID0+ICRjb25kaXRpb24pIHsKICAgICAgICAgICAgJGFBcmdzID0gJGFBcmdzQXJyYXlbJGluZGV4XTsKICAgICAgICAgICAgJHdpbGRjYXJkID0gZmFsc2U7CiAgICAgICAgICAgIGlmICgoc3RycG9zKCRjb25kaXRpb24sICcqJykgIT09IGZhbHNlKSB8fCAoc3RycG9zKCRjb25kaXRpb24sICc\",
    "size": "48250"
}