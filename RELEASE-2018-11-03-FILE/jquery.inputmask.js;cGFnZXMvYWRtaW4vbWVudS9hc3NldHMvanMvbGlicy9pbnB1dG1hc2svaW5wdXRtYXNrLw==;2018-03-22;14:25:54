{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/inputmask\/inputmask\/jquery.inputmask.js",
    "lastUpdate": "2018-03-22+14:25:54.22",
    "contentFile": "LyohCioganF1ZXJ5LmlucHV0bWFzay5qcwoqIGh0dHA6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9qcXVlcnkuaW5wdXRtYXNrCiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxNCBSb2JpbiBIZXJib3RzCiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocCkKKiBWZXJzaW9uOiAzLjEuNDkKKi8KIWZ1bmN0aW9uKGZhY3RvcnkpIHsKICAgICJmdW5jdGlvbiIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsgImpxdWVyeSIgXSwgZmFjdG9yeSkgOiBmYWN0b3J5KGpRdWVyeSk7Cn0oZnVuY3Rpb24oJCkgewogICAgZnVuY3Rpb24gaXNJbnB1dEV2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZSkgewogICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0IiksIGV2TmFtZSA9ICJvbiIgKyBldmVudE5hbWUsIGlzU3VwcG9ydGVkID0gZXZOYW1lIGluIGVsOwogICAgICAgIHJldHVybiBpc1N1cHBvcnRlZCB8fCAoZWwuc2V0QXR0cmlidXRlKGV2TmFtZSwgInJldHVybjsiKSwgaXNTdXBwb3J0ZWQgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBlbFtldk5hbWVdKSwgCiAgICAgICAgZWwgPSBudWxsLCBpc1N1cHBvcnRlZDsKICAgIH0KICAgIGZ1bmN0aW9uIGlzSW5wdXRUeXBlU3VwcG9ydGVkKGlucHV0VHlwZSkgewogICAgICAgIHZhciBpc1N1cHBvcnRlZCA9ICJ0ZXh0IiA9PSBpbnB1dFR5cGUgfHwgInRlbCIgPT0gaW5wdXRUeXBlOwogICAgICAgIGlmICghaXNTdXBwb3J0ZWQpIHsKICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKTsKICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCJ0eXBlIiwgaW5wdXRUeXBlKSwgaXNTdXBwb3J0ZWQgPSAidGV4dCIgPT09IGVsLnR5cGUsIGVsID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkOwogICAgfQogICAgZnVuY3Rpb24gcmVzb2x2ZUFsaWFzKGFsaWFzU3RyLCBvcHRpb25zLCBvcHRzKSB7CiAgICAgICAgdmFyIGFsaWFzRGVmaW5pdGlvbiA9IG9wdHMuYWxpYXNlc1thbGlhc1N0cl07CiAgICAgICAgcmV0dXJuIGFsaWFzRGVmaW5pdGlvbiA\/IChhbGlhc0RlZmluaXRpb24uYWxpYXMgJiYgcmVzb2x2ZUFsaWFzKGFsaWFzRGVmaW5pdGlvbi5hbGlhcywgdm9pZCAwLCBvcHRzKSwgCiAgICAgICAgJC5leHRlbmQoITAsIG9wdHMsIGFsaWFzRGVmaW5pdGlvbiksICQuZXh0ZW5kKCEwLCBvcHRzLCBvcHRpb25zKSwgITApIDogITE7CiAgICB9CiAgICBmdW5jdGlvbiBnZW5lcmF0ZU1hc2tTZXQob3B0cykgewogICAgICAgIGZ1bmN0aW9uIGFuYWx5c2VNYXNrKG1hc2spIHsKICAgICAgICAgICAgZnVuY3Rpb24gbWFza1Rva2VuKGlzR3JvdXAsIGlzT3B0aW9uYWwsIGlzUXVhbnRpZmllciwgaXNBbHRlcm5hdG9yKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBbXSwgdGhpcy5pc0dyb3VwID0gaXNHcm91cCB8fCAhMSwgdGhpcy5pc09wdGlvbmFsID0gaXNPcHRpb25hbCB8fCAhMSwgCiAgICAgICAgICAgICAgICB0aGlzLmlzUXVhbnRpZmllciA9IGlzUXVhbnRpZmllciB8fCAhMSwgdGhpcy5pc0FsdGVybmF0b3IgPSBpc0FsdGVybmF0b3IgfHwgITEsIAogICAgICAgICAgICAgICAgdGhpcy5xdWFudGlmaWVyID0gewogICAgICAgICAgICAgICAgICAgIG1pbjogMSwKICAgICAgICAgICAgICAgICAgICBtYXg6IDEKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gaW5zZXJ0VGVzdERlZmluaXRpb24obXRva2VuLCBlbGVtZW50LCBwb3NpdGlvbikgewogICAgICAgICAgICAgICAgdmFyIG1hc2tkZWYgPSBvcHRzLmRlZmluaXRpb25zW2VsZW1lbnRdLCBuZXdCbG9ja01hcmtlciA9IDAgPT0gbXRva2VuLm1hdGNoZXMubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID0gdm9pZCAwICE9IHBvc2l0aW9uID8gcG9zaXRpb24gOiBtdG9rZW4ubWF0Y2hlcy5sZW5ndGgsIG1hc2tkZWYgJiYgIWVzY2FwZWQpIHsKICAgICAgICAgICAgICAgICAgICBtYXNrZGVmLnBsYWNlaG9sZGVyID0gJC5pc0Z1bmN0aW9uKG1hc2tkZWYucGxhY2Vob2xkZXIpID8gbWFza2RlZi5wbGFjZWhvbGRlci5jYWxsKHRoaXMsIG9wdHMpIDogbWFza2RlZi5wbGFjZWhvbGRlcjsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwcmV2YWxpZGF0b3JzID0gbWFza2RlZi5wcmV2YWxpZGF0b3IsIHByZXZhbGlkYXRvcnNMID0gcHJldmFsaWRhdG9ycyA\/IHByZXZhbGlkYXRvcnMubGVuZ3RoIDogMCwgaSA9IDE7IGkgPCBtYXNrZGVmLmNhcmRpbmFsaXR5OyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZhbGlkYXRvciA9IHByZXZhbGlkYXRvcnNMID49IGkgPyBwcmV2YWxpZGF0b3JzW2kgLSAxXSA6IFtdLCB2YWxpZGF0b3IgPSBwcmV2YWxpZGF0b3IudmFsaWRhdG9yLCBjYXJkaW5hbGl0eSA9IHByZXZhbGlkYXRvci5jYXJkaW5hbGl0eTsKICAgICAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiB2YWxpZGF0b3IgPyAic3RyaW5nIiA9PSB0eXBlb2YgdmFsaWRhdG9yID8gbmV3IFJlZ0V4cCh2YWxpZGF0b3IpIDogbmV3IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVzdCA9IHZhbGlkYXRvcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oKSA6IG5ldyBSZWdFeHAoIi4iKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiBjYXJkaW5hbGl0eSA\/IGNhcmRpbmFsaXR5IDogMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBtdG9rZW4uaXNPcHRpb25hbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBuZXdCbG9ja01hcmtlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbWFza2RlZi5jYXNpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hc2tkZWYucGxhY2Vob2xkZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrOiBlbGVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBtdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywgMCwgewogICAgICAgICAgICAgICAgICAgICAgICBmbjogbWFza2RlZi52YWxpZGF0b3IgPyAic3RyaW5nIiA9PSB0eXBlb2YgbWFza2RlZi52YWxpZGF0b3IgPyBuZXcgUmVnRXhwKG1hc2tkZWYudmFsaWRhdG9yKSA6IG5ldyBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVzdCA9IG1hc2tkZWYudmFsaWRhdG9yOwogICAgICAgICAgICAgICAgICAgICAgICB9KCkgOiBuZXcgUmVnRXhwKCIuIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiBtYXNrZGVmLmNhcmRpbmFsaXR5LAogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogbXRva2VuLmlzT3B0aW9uYWwsCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBuZXdCbG9ja01hcmtlciwKICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBtYXNrZGVmLmNhc2luZywKICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBtYXNrZGVmLmRlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hc2tkZWYucGxhY2Vob2xkZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2s6IGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSBtdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywgMCwgewogICAgICAgICAgICAgICAgICAgIGZuOiBudWxsLAogICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAwLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBtdG9rZW4uaXNPcHRpb25hbCwKICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogbmV3QmxvY2tNYXJrZXIsCiAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLAogICAgICAgICAgICAgICAgICAgIGRlZjogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdm9pZCAwLAogICAgICAgICAgICAgICAgICAgIG1hc2s6IGVsZW1lbnQKICAgICAgICAgICAgICAgIH0pLCBlc2NhcGVkID0gITE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgbWF0Y2gsIG0sIG9wZW5pbmdUb2tlbiwgY3VycmVudE9wZW5pbmdUb2tlbiwgYWx0ZXJuYXRvciwgbGFzdE1hdGNoLCB0b2tlbml6ZXIgPSAvKD86Wz8qK118XHtbMC05XCtcKl0rKD86LFswLTlcK1wqXSopP1x9KVw\/P3xbXi4\/KiteJHtbXSgpfFxcXSt8Li9nLCBlc2NhcGVkID0gITEsIGN1cnJlbnRUb2tlbiA9IG5ldyBtYXNrVG9rZW4oKSwgb3BlbmVuaW5ncyA9IFtdLCBtYXNrVG9rZW5zID0gW107IG1hdGNoID0gdG9rZW5pemVyLmV4ZWMobWFzayk7ICkgc3dpdGNoIChtID0gbWF0Y2hbMF0sIAogICAgICAgICAgICBtLmNoYXJBdCgwKSkgewogICAgICAgICAgICAgIGNhc2Ugb3B0cy5vcHRpb25hbG1hcmtlci5lbmQ6CiAgICAgICAgICAgICAgY2FzZSBvcHRzLmdyb3VwbWFya2VyLmVuZDoKICAgICAgICAgICAgICAgIGlmIChvcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzLnBvcCgpLCBvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSwgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKSwgCiAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5pc0FsdGVybmF0b3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLmxlbmd0aCA+IDAgPyAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpKSA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXIuc3RhcnQ6CiAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2gobmV3IG1hc2tUb2tlbighMSwgITApKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQ6CiAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2gobmV3IG1hc2tUb2tlbighMCkpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2Ugb3B0cy5xdWFudGlmaWVybWFya2VyLnN0YXJ0OgogICAgICAgICAgICAgICAgdmFyIHF1YW50aWZpZXIgPSBuZXcgbWFza1Rva2VuKCExLCAhMSwgITApOwogICAgICAgICAgICAgICAgbSA9IG0ucmVwbGFjZSgvW3t9XS9nLCAiIik7CiAgICAgICAgICAgICAgICB2YXIgbXEgPSBtLnNwbGl0KCIsIiksIG1xMCA9IGlzTmFOKG1xWzBdKSA\/IG1xWzBdIDogcGFyc2VJbnQobXFbMF0pLCBtcTEgPSAxID09IG1xLmxlbmd0aCA\/IG1xMCA6IGlzTmFOKG1xWzFdKSA\/IG1xWzFdIDogcGFyc2VJbnQobXFbMV0pOwogICAgICAgICAgICAgICAgaWYgKCgiKiIgPT0gbXExIHx8ICIrIiA9PSBtcTEpICYmIChtcTAgPSAiKiIgPT0gbXExID8gMCA6IDEpLCBxdWFudGlmaWVyLnF1YW50aWZpZXIgPSB7CiAgICAgICAgICAgICAgICAgICAgbWluOiBtcTAsCiAgICAgICAgICAgICAgICAgICAgbWF4OiBtcTEKICAgICAgICAgICAgICAgIH0sIG9wZW5lbmluZ3MubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLm1hdGNoZXM7CiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gbWF0Y2hlcy5wb3AoKSwgIW1hdGNoLmlzR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwVG9rZW4gPSBuZXcgbWFza1Rva2VuKCEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBUb2tlbi5tYXRjaGVzLnB1c2gobWF0Y2gpLCBtYXRjaCA9IGdyb3VwVG9rZW47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChtYXRjaCksIG1hdGNoZXMucHVzaChxdWFudGlmaWVyKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gY3VycmVudFRva2VuLm1hdGNoZXMucG9wKCksICFtYXRjaC5pc0dyb3VwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cFRva2VuID0gbmV3IG1hc2tUb2tlbighMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwVG9rZW4ubWF0Y2hlcy5wdXNoKG1hdGNoKSwgbWF0Y2ggPSBncm91cFRva2VuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG1hdGNoKSwgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChxdWFudGlmaWVyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIG9wdHMuZXNjYXBlQ2hhcjoKICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAhMDsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIG9wdHMuYWx0ZXJuYXRvcm1hcmtlcjoKICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MubGVuZ3RoID4gMCA\/IChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLCAKICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wb3AoKSkgOiBsYXN0TWF0Y2ggPSBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wb3AoKSwgCiAgICAgICAgICAgICAgICBsYXN0TWF0Y2guaXNBbHRlcm5hdG9yID8gb3BlbmVuaW5ncy5wdXNoKGxhc3RNYXRjaCkgOiAoYWx0ZXJuYXRvciA9IG5ldyBtYXNrVG9rZW4oITEsICExLCAhMSwgITApLCAKICAgICAgICAgICAgICAgIGFsdGVybmF0b3IubWF0Y2hlcy5wdXNoKGxhc3RNYXRjaCksIG9wZW5lbmluZ3MucHVzaChhbHRlcm5hdG9yKSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSwgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IDAgJiYgKGxhc3RNYXRjaCA9IGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlc1tjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMubGVuZ3RoIC0gMV0sIAogICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaC5pc0dyb3VwICYmIChsYXN0TWF0Y2guaXNHcm91cCA9ICExLCBpbnNlcnRUZXN0RGVmaW5pdGlvbihsYXN0TWF0Y2gsIG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQsIDApLCAKICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXN0RGVmaW5pdGlvbihsYXN0TWF0Y2gsIG9wdHMuZ3JvdXBtYXJrZXIuZW5kKSkpLCBpbnNlcnRUZXN0RGVmaW5pdGlvbihjdXJyZW50T3BlbmluZ1Rva2VuLCBtKSwgCiAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5pc0FsdGVybmF0b3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLmxlbmd0aCA+IDAgPyAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpKSA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGN1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IDAgJiYgKGxhc3RNYXRjaCA9IGN1cnJlbnRUb2tlbi5tYXRjaGVzW2N1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCAtIDFdLCAKICAgICAgICAgICAgICAgIGxhc3RNYXRjaC5pc0dyb3VwICYmIChsYXN0TWF0Y2guaXNHcm91cCA9ICExLCBpbnNlcnRUZXN0RGVmaW5pdGlvbihsYXN0TWF0Y2gsIG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQsIDApLCAKICAgICAgICAgICAgICAgIGluc2VydFRlc3REZWZpbml0aW9uKGxhc3RNYXRjaCwgb3B0cy5ncm91cG1hcmtlci5lbmQpKSksIGluc2VydFRlc3REZWZpbml0aW9uKGN1cnJlbnRUb2tlbiwgbSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IDAgJiYgKGxhc3RNYXRjaCA9IGN1cnJlbnRUb2tlbi5tYXRjaGVzW2N1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCAtIDFdLCAKICAgICAgICAgICAgbGFzdE1hdGNoLmlzR3JvdXAgJiYgKGxhc3RNYXRjaC5pc0dyb3VwID0gITEsIGluc2VydFRlc3REZWZpbml0aW9uKGxhc3RNYXRjaCwgb3B0cy5ncm91cG1hcmtlci5zdGFydCwgMCksIAogICAgICAgICAgICBpbnNlcnRUZXN0RGVmaW5pdGlvbihsYXN0TWF0Y2gsIG9wdHMuZ3JvdXBtYXJrZXIuZW5kKSksIG1hc2tUb2tlbnMucHVzaChjdXJyZW50VG9rZW4pKSwgCiAgICAgICAgICAgIG1hc2tUb2tlbnM7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlTWFzayhtYXNrLCBtZXRhZGF0YSkgewogICAgICAgICAgICBpZiAodm9pZCAwID09IG1hc2sgfHwgIiIgPT0gbWFzaykgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgICAgaWYgKDEgPT0gbWFzay5sZW5ndGggJiYgMCA9PSBvcHRzLmdyZWVkeSAmJiAwICE9IG9wdHMucmVwZWF0ICYmIChvcHRzLnBsYWNlaG9sZGVyID0gIiIpLCAKICAgICAgICAgICAgb3B0cy5yZXBlYXQgPiAwIHx8ICIqIiA9PSBvcHRzLnJlcGVhdCB8fCAiKyIgPT0gb3B0cy5yZXBlYXQpIHsKICAgICAgICAgICAgICAgIHZhciByZXBlYXRTdGFydCA9ICIqIiA9PSBvcHRzLnJlcGVhdCA\/IDAgOiAiKyIgPT0gb3B0cy5yZXBlYXQgPyAxIDogb3B0cy5yZXBlYXQ7CiAgICAgICAgICAgICAgICBtYXNrID0gb3B0cy5ncm91cG1hcmtlci5zdGFydCArIG1hc2sgKyBvcHRzLmdyb3VwbWFya2VyLmVuZCArIG9wdHMucXVhbnRpZmllcm1hcmtlci5zdGFydCArIHJlcGVhdFN0YXJ0ICsgIiwiICsgb3B0cy5yZXBlYXQgKyBvcHRzLnF1YW50aWZpZXJtYXJrZXIuZW5kOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT0gJC5pbnB1dG1hc2subWFza3NDYWNoZVttYXNrXSAmJiAoJC5pbnB1dG1hc2subWFza3NDYWNoZVttYXNrXSA9IHsKICAgICAgICAgICAgICAgIG1hc2s6IG1hc2ssCiAgICAgICAgICAgICAgICBtYXNrVG9rZW46IGFuYWx5c2VNYXNrKG1hc2spLAogICAgICAgICAgICAgICAgdmFsaWRQb3NpdGlvbnM6IHt9LAogICAgICAgICAgICAgICAgX2J1ZmZlcjogdm9pZCAwLAogICAgICAgICAgICAgICAgYnVmZmVyOiB2b2lkIDAsCiAgICAgICAgICAgICAgICB0ZXN0czoge30sCiAgICAgICAgICAgICAgICBtZXRhZGF0YTogbWV0YWRhdGEKICAgICAgICAgICAgfSksICQuZXh0ZW5kKCEwLCB7fSwgJC5pbnB1dG1hc2subWFza3NDYWNoZVttYXNrXSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHByZVByb2Nlc3NNYXNrKG1hc2spIHsKICAgICAgICAgICAgaWYgKG1hc2sgPSBtYXNrLnRvU3RyaW5nKCksIG9wdHMubnVtZXJpY0lucHV0KSB7CiAgICAgICAgICAgICAgICBtYXNrID0gbWFzay5zcGxpdCgiIikucmV2ZXJzZSgpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4ID0gMDsgbmR4IDwgbWFzay5sZW5ndGg7IG5keCsrKSBtYXNrW25keF0gPT0gb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydCA\/IG1hc2tbbmR4XSA9IG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kIDogbWFza1tuZHhdID09IG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kID8gbWFza1tuZHhdID0gb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydCA6IG1hc2tbbmR4XSA9PSBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0ID8gbWFza1tuZHhdID0gb3B0cy5ncm91cG1hcmtlci5lbmQgOiBtYXNrW25keF0gPT0gb3B0cy5ncm91cG1hcmtlci5lbmQgJiYgKG1hc2tbbmR4XSA9IG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQpOwogICAgICAgICAgICAgICAgbWFzayA9IG1hc2suam9pbigiIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG1hc2s7CiAgICAgICAgfQogICAgICAgIHZhciBtcyA9IHZvaWQgMDsKICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMubWFzaykgJiYgKG9wdHMubWFzayA9IG9wdHMubWFzay5jYWxsKHRoaXMsIG9wdHMpKSwgJC5pc0FycmF5KG9wdHMubWFzaykpIHsKICAgICAgICAgICAgaWYgKG9wdHMubWFzay5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICBvcHRzLmtlZXBTdGF0aWMgPSB2b2lkIDAgPT0gb3B0cy5rZWVwU3RhdGljID8gITAgOiBvcHRzLmtlZXBTdGF0aWM7CiAgICAgICAgICAgICAgICB2YXIgYWx0TWFzayA9ICIoIjsKICAgICAgICAgICAgICAgIHJldHVybiAkLmVhY2gob3B0cy5tYXNrLCBmdW5jdGlvbihuZHgsIG1zaykgewogICAgICAgICAgICAgICAgICAgIGFsdE1hc2subGVuZ3RoID4gMSAmJiAoYWx0TWFzayArPSAiKXwoIiksIGFsdE1hc2sgKz0gcHJlUHJvY2Vzc01hc2sodm9pZCAwID09IG1zay5tYXNrIHx8ICQuaXNGdW5jdGlvbihtc2subWFzaykgPyBtc2sgOiBtc2subWFzayk7CiAgICAgICAgICAgICAgICB9KSwgYWx0TWFzayArPSAiKSIsIGdlbmVyYXRlTWFzayhhbHRNYXNrLCBvcHRzLm1hc2spOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9wdHMubWFzayA9IG9wdHMubWFzay5wb3AoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG9wdHMubWFzayAmJiAobXMgPSB2b2lkIDAgPT0gb3B0cy5tYXNrLm1hc2sgfHwgJC5pc0Z1bmN0aW9uKG9wdHMubWFzay5tYXNrKSA\/IGdlbmVyYXRlTWFzayhwcmVQcm9jZXNzTWFzayhvcHRzLm1hc2spLCBvcHRzLm1hc2spIDogZ2VuZXJhdGVNYXNrKHByZVByb2Nlc3NNYXNrKG9wdHMubWFzay5tYXNrKSwgb3B0cy5tYXNrKSksIAogICAgICAgIG1zOwogICAgfQogICAgZnVuY3Rpb24gbWFza1Njb3BlKGFjdGlvbk9iaiwgbWFza3NldCwgb3B0cykgewogICAgICAgIGZ1bmN0aW9uIGdldE1hc2tUZW1wbGF0ZShiYXNlT25JbnB1dCwgbWluaW1hbFBvcywgaW5jbHVkZUlucHV0KSB7CiAgICAgICAgICAgIG1pbmltYWxQb3MgPSBtaW5pbWFsUG9zIHx8IDA7CiAgICAgICAgICAgIHZhciBuZHhJbnRsenIsIHRlc3QsIHRlc3RQb3MsIG1hc2tUZW1wbGF0ZSA9IFtdLCBwb3MgPSAwOwogICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICBpZiAoYmFzZU9uSW5wdXQgPT09ICEwICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGlkUG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc107CiAgICAgICAgICAgICAgICAgICAgdGVzdCA9IHZhbGlkUG9zLm1hdGNoLCBuZHhJbnRsenIgPSB2YWxpZFBvcy5sb2NhdG9yLnNsaWNlKCksIG1hc2tUZW1wbGF0ZS5wdXNoKGluY2x1ZGVJbnB1dCA9PT0gITAgPyB2YWxpZFBvcy5pbnB1dCA6IGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdCkpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAobWluaW1hbFBvcyA+IHBvcykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdFBvc2l0aW9ucyA9IGdldFRlc3RzKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IHRlc3RQb3NpdGlvbnNbMF07CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHRlc3RQb3MgPSBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHBvcyAtIDEpOwogICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoLCBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKSwgbWFza1RlbXBsYXRlLnB1c2goZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwb3MrKzsKICAgICAgICAgICAgfSB3aGlsZSAoKHZvaWQgMCA9PSBtYXhMZW5ndGggfHwgbWF4TGVuZ3RoID4gcG9zIC0gMSkgJiYgbnVsbCAhPSB0ZXN0LmZuIHx8IG51bGwgPT0gdGVzdC5mbiAmJiAiIiAhPSB0ZXN0LmRlZiB8fCBtaW5pbWFsUG9zID49IHBvcyk7CiAgICAgICAgICAgIHJldHVybiBtYXNrVGVtcGxhdGUucG9wKCksIG1hc2tUZW1wbGF0ZTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZ2V0TWFza1NldCgpIHsKICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQ7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHJlc2V0TWFza1NldChzb2Z0KSB7CiAgICAgICAgICAgIHZhciBtYXNrc2V0ID0gZ2V0TWFza1NldCgpOwogICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlciA9IHZvaWQgMCwgbWFza3NldC50ZXN0cyA9IHt9LCBzb2Z0ICE9PSAhMCAmJiAobWFza3NldC5fYnVmZmVyID0gdm9pZCAwLCAKICAgICAgICAgICAgbWFza3NldC52YWxpZFBvc2l0aW9ucyA9IHt9LCBtYXNrc2V0LnAgPSAwKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZ2V0TGFzdFZhbGlkUG9zaXRpb24oY2xvc2VzdFRvKSB7CiAgICAgICAgICAgIHZhciBtYXNrc2V0ID0gZ2V0TWFza1NldCgpLCBsYXN0VmFsaWRQb3NpdGlvbiA9IC0xLCB2YWxpZHMgPSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zOwogICAgICAgICAgICB2b2lkIDAgPT0gY2xvc2VzdFRvICYmIChjbG9zZXN0VG8gPSAtMSk7CiAgICAgICAgICAgIHZhciBiZWZvcmUgPSBsYXN0VmFsaWRQb3NpdGlvbiwgYWZ0ZXIgPSBsYXN0VmFsaWRQb3NpdGlvbjsKICAgICAgICAgICAgZm9yICh2YXIgcG9zTmR4IGluIHZhbGlkcykgewogICAgICAgICAgICAgICAgdmFyIHBzTmR4ID0gcGFyc2VJbnQocG9zTmR4KTsKICAgICAgICAgICAgICAgICgtMSA9PSBjbG9zZXN0VG8gfHwgbnVsbCAhPSB2YWxpZHNbcHNOZHhdLm1hdGNoLmZuKSAmJiAoY2xvc2VzdFRvID49IHBzTmR4ICYmIChiZWZvcmUgPSBwc05keCksIAogICAgICAgICAgICAgICAgcHNOZHggPj0gY2xvc2VzdFRvICYmIChhZnRlciA9IHBzTmR4KSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGxhc3RWYWxpZFBvc2l0aW9uID0gLTEgIT0gYmVmb3JlICYmIGNsb3Nlc3RUbyAtIGJlZm9yZSA+IDEgfHwgY2xvc2VzdFRvID4gYWZ0ZXIgPyBiZWZvcmUgOiBhZnRlcjsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gc2V0VmFsaWRQb3NpdGlvbihwb3MsIHZhbGlkVGVzdCwgZnJvbVNldFZhbGlkKSB7CiAgICAgICAgICAgIGlmIChvcHRzLmluc2VydE1vZGUgJiYgdm9pZCAwICE9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdICYmIHZvaWQgMCA9PSBmcm9tU2V0VmFsaWQpIHsKICAgICAgICAgICAgICAgIHZhciBpLCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTsKICAgICAgICAgICAgICAgIGZvciAoaSA9IHBvczsgbHZwID49IGk7IGkrKykgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTsKICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID0gdmFsaWRUZXN0OwogICAgICAgICAgICAgICAgdmFyIGosIHZhbGlkID0gITA7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSBwb3M7IGx2cCA+PSBpOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHBvc2l0aW9uc0Nsb25lW2ldOwogICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT0gdCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdnBzID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zOwogICAgICAgICAgICAgICAgICAgICAgICBqID0gIW9wdHMua2VlcFN0YXRpYyAmJiB2cHNbaV0gJiYgKHZvaWQgMCAhPSB2cHNbaSArIDFdICYmIGdldFRlc3RzKGkgKyAxLCB2cHNbaV0ubG9jYXRvci5zbGljZSgpLCBpKS5sZW5ndGggPiAxIHx8IHZvaWQgMCAhPSB2cHNbaV0uYWx0ZXJuYXRpb24pID8gaSArIDEgOiBzZWVrTmV4dChpKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gcG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24oaiwgdC5tYXRjaC5kZWYpID8gdmFsaWQgJiYgaXNWYWxpZChqLCB0LmlucHV0LCAhMCwgITApICE9PSAhMSA6IG51bGwgPT0gdC5tYXRjaC5mbjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZCkgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSByZXR1cm4gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQoITAsIHt9LCBwb3NpdGlvbnNDbG9uZSksIAogICAgICAgICAgICAgICAgITE7CiAgICAgICAgICAgIH0gZWxzZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSA9IHZhbGlkVGVzdDsKICAgICAgICAgICAgcmV0dXJuICEwOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBzdHJpcFZhbGlkUG9zaXRpb25zKHN0YXJ0LCBlbmQpIHsKICAgICAgICAgICAgdmFyIGksIHN0YXJ0UG9zID0gc3RhcnQ7CiAgICAgICAgICAgIGZvciAodm9pZCAwICE9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tzdGFydF0gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3N0YXJ0XS5pbnB1dCA9PSBvcHRzLnJhZGl4UG9pbnQgJiYgKGVuZCsrLCAKICAgICAgICAgICAgc3RhcnRQb3MrKyksIGkgPSBzdGFydFBvczsgZW5kID4gaTsgaSsrKSB2b2lkIDAgIT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldICYmIDAgIT0gb3B0cy5jYW5DbGVhclBvc2l0aW9uKGdldE1hc2tTZXQoKSwgaSwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgb3B0cykgJiYgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTsKICAgICAgICAgICAgZm9yIChpID0gZW5kOyBpIDw9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7ICkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0sIHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc3RhcnRQb3NdOwogICAgICAgICAgICAgICAgdm9pZCAwICE9IHQgJiYgdm9pZCAwID09IHMgPyAocG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24oc3RhcnRQb3MsIHQubWF0Y2guZGVmKSAmJiBpc1ZhbGlkKHN0YXJ0UG9zLCB0LmlucHV0LCAhMCkgIT09ICExICYmIChkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldLCAKICAgICAgICAgICAgICAgIGkrKyksIHN0YXJ0UG9zKyspIDogaSsrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpOwogICAgICAgICAgICBsdnAgPj0gc3RhcnQgJiYgdm9pZCAwICE9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdLmlucHV0ID09IG9wdHMucmFkaXhQb2ludCAmJiBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sIAogICAgICAgICAgICByZXNldE1hc2tTZXQoITApOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHRzdFBzKSB7CiAgICAgICAgICAgIGZvciAodmFyIHRlc3RQb3MsIHRlc3RQb3NpdGlvbnMgPSBnZXRUZXN0cyhwb3MsIG5keEludGx6ciwgdHN0UHMpLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBsdlRlc3QgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXSB8fCBnZXRUZXN0cygwKVswXSwgbHZUZXN0QWx0QXJyID0gdm9pZCAwICE9IGx2VGVzdC5hbHRlcm5hdGlvbiA\/IGx2VGVzdC5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0uc3BsaXQoIiwiKSA6IFtdLCBuZHggPSAwOyBuZHggPCB0ZXN0UG9zaXRpb25zLmxlbmd0aCAmJiAodGVzdFBvcyA9IHRlc3RQb3NpdGlvbnNbbmR4XSwgCiAgICAgICAgICAgICEob3B0cy5ncmVlZHkgfHwgdGVzdFBvcy5tYXRjaCAmJiAodGVzdFBvcy5tYXRjaC5vcHRpb25hbGl0eSA9PT0gITEgfHwgdGVzdFBvcy5tYXRjaC5uZXdCbG9ja01hcmtlciA9PT0gITEpICYmIHRlc3RQb3MubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICE9PSAhMCAmJiAodm9pZCAwID09IGx2VGVzdC5hbHRlcm5hdGlvbiB8fCB2b2lkIDAgIT0gdGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gJiYgY2hlY2tBbHRlcm5hdGlvbk1hdGNoKHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoIiwiKSwgbHZUZXN0QWx0QXJyKSkpKTsgbmR4KyspIDsKICAgICAgICAgICAgcmV0dXJuIHRlc3RQb3M7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGdldFRlc3QocG9zKSB7CiAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSA\/IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoIDogZ2V0VGVzdHMocG9zKVswXS5tYXRjaDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24ocG9zLCBkZWYpIHsKICAgICAgICAgICAgZm9yICh2YXIgdmFsaWQgPSAhMSwgdGVzdHMgPSBnZXRUZXN0cyhwb3MpLCB0bmR4ID0gMDsgdG5keCA8IHRlc3RzLmxlbmd0aDsgdG5keCsrKSBpZiAodGVzdHNbdG5keF0ubWF0Y2ggJiYgdGVzdHNbdG5keF0ubWF0Y2guZGVmID09IGRlZikgewogICAgICAgICAgICAgICAgdmFsaWQgPSAhMDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2YWxpZDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdHMocG9zLCBuZHhJbnRsenIsIHRzdFBzKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIFJlc29sdmVUZXN0RnJvbVRva2VuKG1hc2tUb2tlbiwgbmR4SW5pdGlhbGl6ZXIsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVNYXRjaChtYXRjaCwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA+IDFlNCkgcmV0dXJuIGFsZXJ0KCJqcXVlcnkuaW5wdXRtYXNrOiBUaGVyZSBpcyBwcm9iYWJseSBhbiBlcnJvciBpbiB5b3VyIG1hc2sgZGVmaW5pdGlvbiBvciBpbiB0aGUgY29kZS4gQ3JlYXRlIGFuIGlzc3VlIG9uIGdpdGh1YiB3aXRoIGFuIGV4YW1wbGUgb2YgdGhlIG1hc2sgeW91IGFyZSB1c2luZy4gIiArIGdldE1hc2tTZXQoKS5tYXNrKSwgCiAgICAgICAgICAgICAgICAgICAgITA7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RQb3MgPT0gcG9zICYmIHZvaWQgMCA9PSBtYXRjaC5tYXRjaGVzKSByZXR1cm4gbWF0Y2hlcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IG1hdGNoLAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhdG9yOiBsb29wTmR4LnJldmVyc2UoKQogICAgICAgICAgICAgICAgICAgIH0pLCAhMDsKICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9IG1hdGNoLm1hdGNoZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoLmlzR3JvdXAgJiYgcXVhbnRpZmllclJlY3Vyc2UgIT09ICEwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSBoYW5kbGVNYXRjaChtYXNrVG9rZW4ubWF0Y2hlc1t0bmR4ICsgMV0sIGxvb3BOZHgpKSByZXR1cm4gITA7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNPcHRpb25hbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsVG9rZW4gPSBtYXRjaDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9IFJlc29sdmVUZXN0RnJvbVRva2VuKG1hdGNoLCBuZHhJbml0aWFsaXplciwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhdGVzdE1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLm1hdGNoLCBpc0ZpcnN0TWF0Y2ggPSAwID09ICQuaW5BcnJheShsYXRlc3RNYXRjaCwgb3B0aW9uYWxUb2tlbi5tYXRjaGVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZpcnN0TWF0Y2ggJiYgKGluc2VydFN0b3AgPSAhMCksIHRlc3RQb3MgPSBwb3M7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNBbHRlcm5hdG9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFsdE1hdGNoZXMsIGFsdGVybmF0ZVRva2VuID0gbWF0Y2gsIG1hbHRlcm5hdGVNYXRjaGVzID0gW10sIGN1cnJlbnRNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgpLCBsb29wTmR4Q250ID0gbG9vcE5keC5sZW5ndGgsIGFsdEluZGV4ID0gbmR4SW5pdGlhbGl6ZXIubGVuZ3RoID4gMCA\\\/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcmVzdWx0LmJ1ZmZlciksIAogICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCksIGNhcmV0UG9zID0gcmVzdWx0LmNhcmV0IHx8IGNhcmV0UG9zOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlucHV0Ll92YWx1ZVNldChidWZmZXIuam9pbigiIikpLCB2b2lkIDAgIT0gY2FyZXRQb3MgJiYgY2FyZXQoaW5wdXQsIGNhcmV0UG9zKSwgCiAgICAgICAgICAgIHRyaWdnZXJJbnB1dEV2ZW50ID09PSAhMCAmJiAoc2tpcElucHV0RXZlbnQgPSAhMCwgJChpbnB1dCkudHJpZ2dlcigiaW5wdXQiKSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdCkgewogICAgICAgICAgICByZXR1cm4gdGVzdCA9IHRlc3QgfHwgZ2V0VGVzdChwb3MpLCB2b2lkIDAgIT0gdGVzdC5wbGFjZWhvbGRlciA\/IHRlc3QucGxhY2Vob2xkZXIgOiBudWxsID09IHRlc3QuZm4gPyB0ZXN0LmRlZiA6IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KHBvcyAlIG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gY2hlY2tWYWwoaW5wdXQsIHdyaXRlT3V0LCBzdHJpY3QsIG5wdHZsKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVGVtcGxhdGVNYXRjaCgpIHsKICAgICAgICAgICAgICAgIHZhciBpc01hdGNoID0gITEsIGNoYXJDb2RlTmR4ID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZShpbml0aWFsTmR4LCBzZWVrTmV4dChpbml0aWFsTmR4KSkuam9pbigiIikuaW5kZXhPZihjaGFyQ29kZXMpOwogICAgICAgICAgICAgICAgaWYgKC0xICE9IGNoYXJDb2RlTmR4ICYmICFpc01hc2soaW5pdGlhbE5keCkpIHsKICAgICAgICAgICAgICAgICAgICBpc01hdGNoID0gITA7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYnVmZmVyVGVtcGxhdGVBcnIgPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKGluaXRpYWxOZHgsIGluaXRpYWxOZHggKyBjaGFyQ29kZU5keCksIGkgPSAwOyBpIDwgYnVmZmVyVGVtcGxhdGVBcnIubGVuZ3RoOyBpKyspIGlmICgiICIgIT0gYnVmZmVyVGVtcGxhdGVBcnJbaV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaXNNYXRjaCA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gaXNNYXRjaDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IHZvaWQgMCAhPSBucHR2bCA\/IG5wdHZsLnNsaWNlKCkgOiBpbnB1dC5fdmFsdWVHZXQoKS5zcGxpdCgiIik7CiAgICAgICAgICAgIHJlc2V0TWFza1NldCgpLCBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KC0xKSwgd3JpdGVPdXQgJiYgaW5wdXQuX3ZhbHVlU2V0KCIiKTsKICAgICAgICAgICAgdmFyIHN0YXRpY0lucHV0ID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgwLCBzZWVrTmV4dCgtMSkpLmpvaW4oIiIpLCBtYXRjaGVzID0gaW5wdXRWYWx1ZS5qb2luKCIiKS5tYXRjaChuZXcgUmVnRXhwKGVzY2FwZVJlZ2V4KHN0YXRpY0lucHV0KSwgImciKSk7CiAgICAgICAgICAgIG1hdGNoZXMgJiYgbWF0Y2hlcy5sZW5ndGggPiAwICYmIGlucHV0VmFsdWUuc3BsaWNlKDAsIHN0YXRpY0lucHV0Lmxlbmd0aCAqIG1hdGNoZXMubGVuZ3RoKTsKICAgICAgICAgICAgdmFyIGNoYXJDb2RlcyA9ICIiLCBpbml0aWFsTmR4ID0gMDsKICAgICAgICAgICAgJC5lYWNoKGlucHV0VmFsdWUsIGZ1bmN0aW9uKG5keCwgY2hhckNvZGUpIHsKICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9ICQuRXZlbnQoImtleXByZXNzIik7CiAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGNoYXJDb2RlLmNoYXJDb2RlQXQoMCksIGNoYXJDb2RlcyArPSBjaGFyQ29kZTsKICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBsdlRlc3QgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXSwgbmV4dFRlc3QgPSBnZXRUZXN0VGVtcGxhdGUobHZwICsgMSwgbHZUZXN0ID8gbHZUZXN0LmxvY2F0b3Iuc2xpY2UoKSA6IHZvaWQgMCwgbHZwKTsKICAgICAgICAgICAgICAgIGlmICghaXNUZW1wbGF0ZU1hdGNoKCkgfHwgc3RyaWN0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IHN0cmljdCA\/IG5keCA6IG51bGwgPT0gbmV4dFRlc3QubWF0Y2guZm4gJiYgbmV4dFRlc3QubWF0Y2gub3B0aW9uYWxpdHkgJiYgbHZwICsgMSA8IGdldE1hc2tTZXQoKS5wID8gbHZwICsgMSA6IGdldE1hc2tTZXQoKS5wOwogICAgICAgICAgICAgICAgICAgIGtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMSwgc3RyaWN0LCBwb3MpLCBpbml0aWFsTmR4ID0gcG9zICsgMSwgCiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGVzID0gIiI7CiAgICAgICAgICAgICAgICB9IGVsc2Uga2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgITAsICExLCAhMCwgbHZwICsgMSk7CiAgICAgICAgICAgIH0pLCB3cml0ZU91dCAmJiB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksICQoaW5wdXQpLmlzKCI6Zm9jdXMiKSA\/IHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKDApKSA6IHZvaWQgMCwgJC5FdmVudCgiY2hlY2t2YWwiKSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ2V4KHN0cikgewogICAgICAgICAgICByZXR1cm4gJC5pbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzdHIpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiB1bm1hc2tlZHZhbHVlKCRpbnB1dCkgewogICAgICAgICAgICBpZiAoJGlucHV0LmRhdGEoIl9pbnB1dG1hc2siKSAmJiAhJGlucHV0Lmhhc0NsYXNzKCJoYXNEYXRlcGlja2VyIikpIHsKICAgICAgICAgICAgICAgIHZhciB1bVZhbHVlID0gW10sIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uczsKICAgICAgICAgICAgICAgIGZvciAodmFyIHBuZHggaW4gdnBzKSB2cHNbcG5keF0ubWF0Y2ggJiYgbnVsbCAhPSB2cHNbcG5keF0ubWF0Y2guZm4gJiYgdW1WYWx1ZS5wdXNoKHZwc1twbmR4XS5pbnB1dCk7CiAgICAgICAgICAgICAgICB2YXIgdW5tYXNrZWRWYWx1ZSA9IChpc1JUTCA\/IHVtVmFsdWUucmV2ZXJzZSgpIDogdW1WYWx1ZSkuam9pbigiIiksIGJ1ZmZlclZhbHVlID0gKGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkgOiBnZXRCdWZmZXIoKSkuam9pbigiIik7CiAgICAgICAgICAgICAgICByZXR1cm4gJC5pc0Z1bmN0aW9uKG9wdHMub25Vbk1hc2spICYmICh1bm1hc2tlZFZhbHVlID0gb3B0cy5vblVuTWFzay5jYWxsKCRpbnB1dCwgYnVmZmVyVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHx8IHVubWFza2VkVmFsdWUpLCAKICAgICAgICAgICAgICAgIHVubWFza2VkVmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICRpbnB1dFswXS5fdmFsdWVHZXQoKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gVHJhbnNsYXRlUG9zaXRpb24ocG9zKSB7CiAgICAgICAgICAgIGlmIChpc1JUTCAmJiAibnVtYmVyIiA9PSB0eXBlb2YgcG9zICYmICghb3B0cy5ncmVlZHkgfHwgIiIgIT0gb3B0cy5wbGFjZWhvbGRlcikpIHsKICAgICAgICAgICAgICAgIHZhciBiZmZyTGdodCA9IGdldEJ1ZmZlcigpLmxlbmd0aDsKICAgICAgICAgICAgICAgIHBvcyA9IGJmZnJMZ2h0IC0gcG9zOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwb3M7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGNhcmV0KGlucHV0LCBiZWdpbiwgZW5kKSB7CiAgICAgICAgICAgIHZhciByYW5nZSwgbnB0ID0gaW5wdXQuanF1ZXJ5ICYmIGlucHV0Lmxlbmd0aCA+IDAgPyBpbnB1dFswXSA6IGlucHV0OwogICAgICAgICAgICBpZiAoIm51bWJlciIgIT0gdHlwZW9mIGJlZ2luKSByZXR1cm4gbnB0LnNldFNlbGVjdGlvblJhbmdlID8gKGJlZ2luID0gbnB0LnNlbGVjdGlvblN0YXJ0LCAKICAgICAgICAgICAgZW5kID0gbnB0LnNlbGVjdGlvbkVuZCkgOiBkb2N1bWVudC5zZWxlY3Rpb24gJiYgZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlICYmIChyYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLCAKICAgICAgICAgICAgYmVnaW4gPSAwIC0gcmFuZ2UuZHVwbGljYXRlKCkubW92ZVN0YXJ0KCJjaGFyYWN0ZXIiLCAtMWU1KSwgZW5kID0gYmVnaW4gKyByYW5nZS50ZXh0Lmxlbmd0aCksIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBiZWdpbjogVHJhbnNsYXRlUG9zaXRpb24oYmVnaW4pLAogICAgICAgICAgICAgICAgZW5kOiBUcmFuc2xhdGVQb3NpdGlvbihlbmQpCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmIChiZWdpbiA9IFRyYW5zbGF0ZVBvc2l0aW9uKGJlZ2luKSwgZW5kID0gVHJhbnNsYXRlUG9zaXRpb24oZW5kKSwgZW5kID0gIm51bWJlciIgPT0gdHlwZW9mIGVuZCA\/IGVuZCA6IGJlZ2luLCAKICAgICAgICAgICAgJChucHQpLmlzKCI6dmlzaWJsZSIpKSB7CiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsQ2FsYyA9ICQobnB0KS5jc3MoImZvbnQtc2l6ZSIpLnJlcGxhY2UoInB4IiwgIiIpICogZW5kOwogICAgICAgICAgICAgICAgbnB0LnNjcm9sbExlZnQgPSBzY3JvbGxDYWxjID4gbnB0LnNjcm9sbFdpZHRoID8gc2Nyb2xsQ2FsYyA6IDAsIDAgPT0gb3B0cy5pbnNlcnRNb2RlICYmIGJlZ2luID09IGVuZCAmJiBlbmQrKywgCiAgICAgICAgICAgICAgICBucHQuc2V0U2VsZWN0aW9uUmFuZ2UgPyAobnB0LnNlbGVjdGlvblN0YXJ0ID0gYmVnaW4sIG5wdC5zZWxlY3Rpb25FbmQgPSBlbmQpIDogbnB0LmNyZWF0ZVRleHRSYW5nZSAmJiAocmFuZ2UgPSBucHQuY3JlYXRlVGV4dFJhbmdlKCksIAogICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UoITApLCByYW5nZS5tb3ZlRW5kKCJjaGFyYWN0ZXIiLCBlbmQpLCByYW5nZS5tb3ZlU3RhcnQoImNoYXJhY3RlciIsIGJlZ2luKSwgCiAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24ocmV0dXJuRGVmaW5pdGlvbikgewogICAgICAgICAgICB2YXIgcG9zLCB0ZXN0UG9zLCBidWZmZXIgPSBnZXRCdWZmZXIoKSwgYmwgPSBidWZmZXIubGVuZ3RoLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBwb3NpdGlvbnMgPSB7fSwgbHZUZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sIG5keEludGx6ciA9IHZvaWQgMCAhPSBsdlRlc3QgPyBsdlRlc3QubG9jYXRvci5zbGljZSgpIDogdm9pZCAwOwogICAgICAgICAgICBmb3IgKHBvcyA9IGx2cCArIDE7IHBvcyA8IGJ1ZmZlci5sZW5ndGg7IHBvcysrKSB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKSwgCiAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpLCBwb3NpdGlvbnNbcG9zXSA9ICQuZXh0ZW5kKCEwLCB7fSwgdGVzdFBvcyk7CiAgICAgICAgICAgIHZhciBsdlRlc3RBbHRBcnIgPSBsdlRlc3QgJiYgdm9pZCAwICE9IGx2VGVzdC5hbHRlcm5hdGlvbiA\/IGx2VGVzdC5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0uc3BsaXQoIiwiKSA6IFtdOwogICAgICAgICAgICBmb3IgKHBvcyA9IGJsIC0gMTsgcG9zID4gbHZwICYmICh0ZXN0UG9zID0gcG9zaXRpb25zW3Bvc10ubWF0Y2gsICh0ZXN0UG9zLm9wdGlvbmFsaXR5IHx8IHRlc3RQb3Mub3B0aW9uYWxRdWFudGlmaWVyIHx8IGx2VGVzdCAmJiB2b2lkIDAgIT0gbHZUZXN0LmFsdGVybmF0aW9uICYmIHZvaWQgMCAhPSBwb3NpdGlvbnNbcG9zXS5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gJiYgLTEgIT0gJC5pbkFycmF5KHBvc2l0aW9uc1twb3NdLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXS50b1N0cmluZygpLCBsdlRlc3RBbHRBcnIpKSAmJiBidWZmZXJbcG9zXSA9PSBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3RQb3MpKTsgcG9zLS0pIGJsLS07CiAgICAgICAgICAgIHJldHVybiByZXR1cm5EZWZpbml0aW9uID8gewogICAgICAgICAgICAgICAgbDogYmwsCiAgICAgICAgICAgICAgICBkZWY6IHBvc2l0aW9uc1tibF0gPyBwb3NpdGlvbnNbYmxdLm1hdGNoIDogdm9pZCAwCiAgICAgICAgICAgIH0gOiBibDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSB7CiAgICAgICAgICAgIGZvciAodmFyIHJsID0gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24oKSwgbG1pYiA9IGJ1ZmZlci5sZW5ndGggLSAxOyBsbWliID4gcmwgJiYgIWlzTWFzayhsbWliKTsgbG1pYi0tKSA7CiAgICAgICAgICAgIGJ1ZmZlci5zcGxpY2UocmwsIGxtaWIgKyAxIC0gcmwpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBpc0NvbXBsZXRlKGJ1ZmZlcikgewogICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMuaXNDb21wbGV0ZSkpIHJldHVybiBvcHRzLmlzQ29tcGxldGUuY2FsbCgkZWwsIGJ1ZmZlciwgb3B0cyk7CiAgICAgICAgICAgIGlmICgiKiIgPT0gb3B0cy5yZXBlYXQpIHJldHVybiB2b2lkIDA7CiAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9ICExLCBscnAgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbighMCksIGFtbCA9IHNlZWtQcmV2aW91cyhscnAubCksIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7CiAgICAgICAgICAgIGlmIChsdnAgPT0gYW1sICYmICh2b2lkIDAgPT0gbHJwLmRlZiB8fCBscnAuZGVmLm5ld0Jsb2NrTWFya2VyIHx8IGxycC5kZWYub3B0aW9uYWxRdWFudGlmaWVyKSkgewogICAgICAgICAgICAgICAgY29tcGxldGUgPSAhMDsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBhbWwgPj0gaTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2sgPSBpc01hc2soaSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2sgJiYgKHZvaWQgMCA9PSBidWZmZXJbaV0gfHwgYnVmZmVyW2ldID09IGdldFBsYWNlaG9sZGVyKGkpKSB8fCAhbWFzayAmJiBidWZmZXJbaV0gIT0gZ2V0UGxhY2Vob2xkZXIoaSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaXNTZWxlY3Rpb24oYmVnaW4sIGVuZCkgewogICAgICAgICAgICByZXR1cm4gaXNSVEwgPyBiZWdpbiAtIGVuZCA+IDEgfHwgYmVnaW4gLSBlbmQgPT0gMSAmJiBvcHRzLmluc2VydE1vZGUgOiBlbmQgLSBiZWdpbiA+IDEgfHwgZW5kIC0gYmVnaW4gPT0gMSAmJiBvcHRzLmluc2VydE1vZGU7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGluc3RhbGxFdmVudFJ1bGVyKG5wdCkgewogICAgICAgICAgICB2YXIgZXZlbnRzID0gJC5fZGF0YShucHQpLmV2ZW50czsKICAgICAgICAgICAgJC5lYWNoKGV2ZW50cywgZnVuY3Rpb24oZXZlbnRUeXBlLCBldmVudEhhbmRsZXJzKSB7CiAgICAgICAgICAgICAgICAkLmVhY2goZXZlbnRIYW5kbGVycywgZnVuY3Rpb24obmR4LCBldmVudEhhbmRsZXIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoImlucHV0bWFzayIgPT0gZXZlbnRIYW5kbGVyLm5hbWVzcGFjZSAmJiAic2V0dmFsdWUiICE9IGV2ZW50SGFuZGxlci50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZXZlbnRIYW5kbGVyLmhhbmRsZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlci5oYW5kbGVyID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkICYmICghdGhpcy5yZWFkT25seSB8fCAia2V5ZG93biIgPT0gZS50eXBlICYmIGUuY3RybEtleSAmJiA2NyA9PSBlLmtleUNvZGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImlucHV0IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNraXBJbnB1dEV2ZW50ID09PSAhMCkgcmV0dXJuIHNraXBJbnB1dEV2ZW50ID0gITEsIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAia2V5ZG93biI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBLZXlQcmVzc0V2ZW50ID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImtleXByZXNzIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNraXBLZXlQcmVzc0V2ZW50ID09PSAhMCkgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcEtleVByZXNzRXZlbnQgPSAhMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiY29tcG9zaXRpb25zdGFydCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImNvbXBvc2l0aW9udXBkYXRlIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcElucHV0RXZlbnQgPSAhMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiY29tcG9zaXRpb25lbmQiOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBwYXRjaFZhbHVlUHJvcGVydHkobnB0KSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIFBhdGNoVmFsaG9vayh0eXBlKSB7CiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09ICQudmFsSG9va3NbdHlwZV0gfHwgMSAhPSAkLnZhbEhvb2tzW3R5cGVdLmlucHV0bWFza3BhdGNoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGhvb2tHZXQgPSAkLnZhbEhvb2tzW3R5cGVdICYmICQudmFsSG9va3NbdHlwZV0uZ2V0ID8gJC52YWxIb29rc1t0eXBlXS5nZXQgOiBmdW5jdGlvbihlbGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLnZhbHVlOwogICAgICAgICAgICAgICAgICAgIH0sIHZhbGhvb2tTZXQgPSAkLnZhbEhvb2tzW3R5cGVdICYmICQudmFsSG9va3NbdHlwZV0uc2V0ID8gJC52YWxIb29rc1t0eXBlXS5zZXQgOiBmdW5jdGlvbihlbGVtLCB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS52YWx1ZSA9IHZhbHVlLCBlbGVtOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgJC52YWxIb29rc1t0eXBlXSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihlbGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGVsZW0gPSAkKGVsZW0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRlbGVtLmRhdGEoIl9pbnB1dG1hc2siKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZWxlbS5kYXRhKCJfaW5wdXRtYXNrIikub3B0cy5hdXRvVW5tYXNrKSByZXR1cm4gJGVsZW0uaW5wdXRtYXNrKCJ1bm1hc2tlZHZhbHVlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbGhvb2tHZXQoZWxlbSksIGlucHV0RGF0YSA9ICRlbGVtLmRhdGEoIl9pbnB1dG1hc2siKSwgbWFza3NldCA9IGlucHV0RGF0YS5tYXNrc2V0LCBidWZmZXJUZW1wbGF0ZSA9IG1hc2tzZXQuX2J1ZmZlcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyVGVtcGxhdGUgPSBidWZmZXJUZW1wbGF0ZSA\/IGJ1ZmZlclRlbXBsYXRlLmpvaW4oIiIpIDogIiIsIHJlc3VsdCAhPSBidWZmZXJUZW1wbGF0ZSA\/IHJlc3VsdCA6ICIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbGhvb2tHZXQoZWxlbSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oZWxlbSwgdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQsICRlbGVtID0gJChlbGVtKSwgaW5wdXREYXRhID0gJGVsZW0uZGF0YSgiX2lucHV0bWFzayIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0RGF0YSA\/IChyZXN1bHQgPSB2YWxob29rU2V0KGVsZW0sICQuaXNGdW5jdGlvbihpbnB1dERhdGEub3B0cy5vbkJlZm9yZU1hc2spID8gaW5wdXREYXRhLm9wdHMub25CZWZvcmVNYXNrLmNhbGwoZWwsIHZhbHVlLCBpbnB1dERhdGEub3B0cykgfHwgdmFsdWUgOiB2YWx1ZSksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW0udHJpZ2dlckhhbmRsZXIoInNldHZhbHVlLmlucHV0bWFzayIpKSA6IHJlc3VsdCA9IHZhbGhvb2tTZXQoZWxlbSwgdmFsdWUpLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRtYXNrcGF0Y2g6ICEwCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBnZXR0ZXIoKSB7CiAgICAgICAgICAgICAgICB2YXIgJHNlbGYgPSAkKHRoaXMpLCBpbnB1dERhdGEgPSAkKHRoaXMpLmRhdGEoIl9pbnB1dG1hc2siKTsKICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dERhdGEgPyBpbnB1dERhdGEub3B0cy5hdXRvVW5tYXNrID8gJHNlbGYuaW5wdXRtYXNrKCJ1bm1hc2tlZHZhbHVlIikgOiB2YWx1ZUdldC5jYWxsKHRoaXMpICE9IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbigiIikgPyB2YWx1ZUdldC5jYWxsKHRoaXMpIDogIiIgOiB2YWx1ZUdldC5jYWxsKHRoaXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHNldHRlcih2YWx1ZSkgewogICAgICAgICAgICAgICAgdmFyIGlucHV0RGF0YSA9ICQodGhpcykuZGF0YSgiX2lucHV0bWFzayIpOwogICAgICAgICAgICAgICAgaW5wdXREYXRhID8gKHZhbHVlU2V0LmNhbGwodGhpcywgJC5pc0Z1bmN0aW9uKGlucHV0RGF0YS5vcHRzLm9uQmVmb3JlTWFzaykgPyBpbnB1dERhdGEub3B0cy5vbkJlZm9yZU1hc2suY2FsbChlbCwgdmFsdWUsIGlucHV0RGF0YS5vcHRzKSB8fCB2YWx1ZSA6IHZhbHVlKSwgCiAgICAgICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCJzZXR2YWx1ZS5pbnB1dG1hc2siKSkgOiB2YWx1ZVNldC5jYWxsKHRoaXMsIHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBJbnN0YWxsTmF0aXZlVmFsdWVTZXRGYWxsYmFjayhucHQpIHsKICAgICAgICAgICAgICAgICQobnB0KS5iaW5kKCJtb3VzZWVudGVyLmlucHV0bWFzayIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLCBpbnB1dCA9IHRoaXMsIHZhbHVlID0gaW5wdXQuX3ZhbHVlR2V0KCk7CiAgICAgICAgICAgICAgICAgICAgIiIgIT0gdmFsdWUgJiYgdmFsdWUgIT0gZ2V0QnVmZmVyKCkuam9pbigiIikgJiYgKHRoaXMuX3ZhbHVlU2V0KCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGVsLCB2YWx1ZSwgb3B0cykgfHwgdmFsdWUgOiB2YWx1ZSksIAogICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VySGFuZGxlcigic2V0dmFsdWUuaW5wdXRtYXNrIikpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAvLyEhIHRoZSBib3VuZCBoYW5kbGVycyBhcmUgZXhlY3V0ZWQgaW4gdGhlIG9yZGVyIHRoZXkgd2hlcmUgYm91bmQKICAgICAgICAgICAgICAgIHZhciBldmVudHMgPSAkLl9kYXRhKG5wdCkuZXZlbnRzLCBoYW5kbGVycyA9IGV2ZW50cy5tb3VzZW92ZXI7CiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlcnMpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvdXJIYW5kbGVyID0gaGFuZGxlcnNbaGFuZGxlcnMubGVuZ3RoIC0gMV0sIGkgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSBoYW5kbGVyc1tpXSA9IGhhbmRsZXJzW2kgLSAxXTsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVyc1swXSA9IG91ckhhbmRsZXI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHZhbHVlR2V0LCB2YWx1ZVNldDsKICAgICAgICAgICAgaWYgKCFucHQuX3ZhbHVlR2V0KSB7CiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcikgewogICAgICAgICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobnB0LCAidmFsdWUiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRvY3VtZW50Ll9fbG9va3VwR2V0dGVyX18gJiYgbnB0Ll9fbG9va3VwR2V0dGVyX18oInZhbHVlIikgPyAodmFsdWVHZXQgPSBucHQuX19sb29rdXBHZXR0ZXJfXygidmFsdWUiKSwgCiAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IG5wdC5fX2xvb2t1cFNldHRlcl9fKCJ2YWx1ZSIpLCBucHQuX19kZWZpbmVHZXR0ZXJfXygidmFsdWUiLCBnZXR0ZXIpLCAKICAgICAgICAgICAgICAgIG5wdC5fX2RlZmluZVNldHRlcl9fKCJ2YWx1ZSIsIHNldHRlcikpIDogKHZhbHVlR2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5wdC52YWx1ZTsKICAgICAgICAgICAgICAgIH0sIHZhbHVlU2V0ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBucHQudmFsdWUgPSB2YWx1ZTsKICAgICAgICAgICAgICAgIH0sIFBhdGNoVmFsaG9vayhucHQudHlwZSksIEluc3RhbGxOYXRpdmVWYWx1ZVNldEZhbGxiYWNrKG5wdCkpLCBucHQuX3ZhbHVlR2V0ID0gZnVuY3Rpb24ob3ZlcnJ1bGVSVEwpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNSVEwgJiYgb3ZlcnJ1bGVSVEwgIT09ICEwID8gdmFsdWVHZXQuY2FsbCh0aGlzKS5zcGxpdCgiIikucmV2ZXJzZSgpLmpvaW4oIiIpIDogdmFsdWVHZXQuY2FsbCh0aGlzKTsKICAgICAgICAgICAgICAgIH0sIG5wdC5fdmFsdWVTZXQgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0LmNhbGwodGhpcywgaXNSVEwgPyB2YWx1ZS5zcGxpdCgiIikucmV2ZXJzZSgpLmpvaW4oIiIpIDogdmFsdWUpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBoYW5kbGVSZW1vdmUoaW5wdXQsIGssIHBvcykgewogICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmFsaXplKCkgewogICAgICAgICAgICAgICAgaWYgKG9wdHMua2VlcFN0YXRpYykgewogICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RBbHQsIHZhbGlkSW5wdXRzID0gW107CiAgICAgICAgICAgICAgICAgICAgZm9yIChsYXN0QWx0ID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTsgbGFzdEFsdCA+PSAwOyBsYXN0QWx0LS0pIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0uYWx0ZXJuYXRpb24pIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB2YWxpZElucHV0cy5wdXNoKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XS5pbnB1dCksIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChsYXN0QWx0ID4gMCkgZm9yICg7dmFsaWRJbnB1dHMubGVuZ3RoID4gMDsgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9ICQuRXZlbnQoImtleXByZXNzIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gdmFsaWRJbnB1dHMucG9wKCkuY2hhckNvZGVBdCgwKSwga2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgITAsICExLCAhMSwgZ2V0TWFza1NldCgpLnApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoKG9wdHMubnVtZXJpY0lucHV0IHx8IGlzUlRMKSAmJiAoayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSA\/IGsgPSAkLmlucHV0bWFzay5rZXlDb2RlLkRFTEVURSA6IGsgPT0gJC5pbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgJiYgKGsgPSAkLmlucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSksIAogICAgICAgICAgICBpc1JUTCkpIHsKICAgICAgICAgICAgICAgIHZhciBwZW5kID0gcG9zLmVuZDsKICAgICAgICAgICAgICAgIHBvcy5lbmQgPSBwb3MuYmVnaW4sIHBvcy5iZWdpbiA9IHBlbmQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSAmJiBwb3MuZW5kIC0gcG9zLmJlZ2luIDw9IDEgPyBwb3MuYmVnaW4gPSBzZWVrUHJldmlvdXMocG9zLmJlZ2luKSA6IGsgPT0gJC5pbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgJiYgcG9zLmJlZ2luID09IHBvcy5lbmQgJiYgcG9zLmVuZCsrLCAKICAgICAgICAgICAgc3RyaXBWYWxpZFBvc2l0aW9ucyhwb3MuYmVnaW4sIHBvcy5lbmQpLCBnZW5lcmFsaXplKCk7CiAgICAgICAgICAgIHZhciBmaXJzdE1hc2tlZFBvcyA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHBvcy5iZWdpbik7CiAgICAgICAgICAgIGZpcnN0TWFza2VkUG9zIDwgcG9zLmJlZ2luID8gKC0xID09IGZpcnN0TWFza2VkUG9zICYmIHJlc2V0TWFza1NldCgpLCBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGZpcnN0TWFza2VkUG9zKSkgOiBnZXRNYXNrU2V0KCkucCA9IHBvcy5iZWdpbjsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24ga2V5ZG93bkV2ZW50KGUpIHsKICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLmtleUNvZGUsIHBvcyA9IGNhcmV0KGlucHV0KTsKICAgICAgICAgICAgayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSB8fCBrID09ICQuaW5wdXRtYXNrLmtleUNvZGUuREVMRVRFIHx8IGlwaG9uZSAmJiAxMjcgPT0gayB8fCBlLmN0cmxLZXkgJiYgODggPT0gayAmJiAhaXNJbnB1dEV2ZW50U3VwcG9ydGVkKCJjdXQiKSA\/IChlLnByZXZlbnREZWZhdWx0KCksIAogICAgICAgICAgICA4OCA9PSBrICYmICh1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKCIiKSksIGhhbmRsZVJlbW92ZShpbnB1dCwgaywgcG9zKSwgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBnZXRNYXNrU2V0KCkucCwgZSwgdW5kb1ZhbHVlICE9IGdldEJ1ZmZlcigpLmpvaW4oIiIpKSwgCiAgICAgICAgICAgIGlucHV0Ll92YWx1ZUdldCgpID09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbigiIikgJiYgJGlucHV0LnRyaWdnZXIoImNsZWFyZWQiKSwgCiAgICAgICAgICAgIG9wdHMuc2hvd1Rvb2x0aXAgJiYgJGlucHV0LnByb3AoInRpdGxlIiwgZ2V0TWFza1NldCgpLm1hc2spKSA6IGsgPT0gJC5pbnB1dG1hc2sua2V5Q29kZS5FTkQgfHwgayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLlBBR0VfRE9XTiA\/IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKTsKICAgICAgICAgICAgICAgIG9wdHMuaW5zZXJ0TW9kZSB8fCBjYXJldFBvcyAhPSBnZXRNYXNrTGVuZ3RoKCkgfHwgZS5zaGlmdEtleSB8fCBjYXJldFBvcy0tLCBjYXJldChpbnB1dCwgZS5zaGlmdEtleSA\/IHBvcy5iZWdpbiA6IGNhcmV0UG9zLCBjYXJldFBvcyk7CiAgICAgICAgICAgIH0sIDApIDogayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLkhPTUUgJiYgIWUuc2hpZnRLZXkgfHwgayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLlBBR0VfVVAgPyBjYXJldChpbnB1dCwgMCwgZS5zaGlmdEtleSA\/IHBvcy5iZWdpbiA6IDApIDogb3B0cy51bmRvT25Fc2NhcGUgJiYgayA9PSAkLmlucHV0bWFzay5rZXlDb2RlLkVTQ0FQRSB8fCA5MCA9PSBrICYmIGUuY3RybEtleSA\/IChjaGVja1ZhbChpbnB1dCwgITAsICExLCB1bmRvVmFsdWUuc3BsaXQoIiIpKSwgCiAgICAgICAgICAgICRpbnB1dC5jbGljaygpKSA6IGsgIT0gJC5pbnB1dG1hc2sua2V5Q29kZS5JTlNFUlQgfHwgZS5zaGlmdEtleSB8fCBlLmN0cmxLZXkgPyAwICE9IG9wdHMuaW5zZXJ0TW9kZSB8fCBlLnNoaWZ0S2V5IHx8IChrID09ICQuaW5wdXRtYXNrLmtleUNvZGUuUklHSFQgPyBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpOwogICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGNhcmV0UG9zLmJlZ2luKTsKICAgICAgICAgICAgfSwgMCkgOiBrID09ICQuaW5wdXRtYXNrLmtleUNvZGUuTEVGVCAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpOwogICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGlzUlRMID8gY2FyZXRQb3MuYmVnaW4gKyAxIDogY2FyZXRQb3MuYmVnaW4gLSAxKTsKICAgICAgICAgICAgfSwgMCkpIDogKG9wdHMuaW5zZXJ0TW9kZSA9ICFvcHRzLmluc2VydE1vZGUsIGNhcmV0KGlucHV0LCBvcHRzLmluc2VydE1vZGUgfHwgcG9zLmJlZ2luICE9IGdldE1hc2tMZW5ndGgoKSA\/IHBvcy5iZWdpbiA6IHBvcy5iZWdpbiAtIDEpKSwgCiAgICAgICAgICAgIGlnbm9yYWJsZSA9IC0xICE9ICQuaW5BcnJheShrLCBvcHRzLmlnbm9yYWJsZXMpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBrZXlwcmVzc0V2ZW50KGUsIGNoZWNrdmFsLCB3cml0ZU91dCwgc3RyaWN0LCBuZHgpIHsKICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLndoaWNoIHx8IGUuY2hhckNvZGUgfHwgZS5rZXlDb2RlOwogICAgICAgICAgICBpZiAoIShjaGVja3ZhbCA9PT0gITAgfHwgZS5jdHJsS2V5ICYmIGUuYWx0S2V5KSAmJiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBpZ25vcmFibGUpKSByZXR1cm4gITA7CiAgICAgICAgICAgIGlmIChrKSB7CiAgICAgICAgICAgICAgICA0NiA9PSBrICYmIDAgPT0gZS5zaGlmdEtleSAmJiAiLCIgPT0gb3B0cy5yYWRpeFBvaW50ICYmIChrID0gNDQpOwogICAgICAgICAgICAgICAgdmFyIGZvcndhcmRQb3NpdGlvbiwgcG9zID0gY2hlY2t2YWwgPyB7CiAgICAgICAgICAgICAgICAgICAgYmVnaW46IG5keCwKICAgICAgICAgICAgICAgICAgICBlbmQ6IG5keAogICAgICAgICAgICAgICAgfSA6IGNhcmV0KGlucHV0KSwgYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoayksIGlzU2xjdG4gPSBpc1NlbGVjdGlvbihwb3MuYmVnaW4sIHBvcy5lbmQpOwogICAgICAgICAgICAgICAgaXNTbGN0biAmJiAoZ2V0TWFza1NldCgpLnVuZG9Qb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIAogICAgICAgICAgICAgICAgaGFuZGxlUmVtb3ZlKGlucHV0LCAkLmlucHV0bWFzay5rZXlDb2RlLkRFTEVURSwgcG9zKSwgb3B0cy5pbnNlcnRNb2RlIHx8IChvcHRzLmluc2VydE1vZGUgPSAhb3B0cy5pbnNlcnRNb2RlLCAKICAgICAgICAgICAgICAgIHNldFZhbGlkUG9zaXRpb24ocG9zLmJlZ2luLCBzdHJpY3QpLCBvcHRzLmluc2VydE1vZGUgPSAhb3B0cy5pbnNlcnRNb2RlKSwgaXNTbGN0biA9ICFvcHRzLm11bHRpKSwgCiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkud3JpdGVPdXRCdWZmZXIgPSAhMDsKICAgICAgICAgICAgICAgIHZhciBwID0gaXNSVEwgJiYgIWlzU2xjdG4gPyBwb3MuZW5kIDogcG9zLmJlZ2luLCB2YWxSZXN1bHQgPSBpc1ZhbGlkKHAsIGMsIHN0cmljdCk7CiAgICAgICAgICAgICAgICBpZiAodmFsUmVzdWx0ICE9PSAhMSkgewogICAgICAgICAgICAgICAgICAgIGlmICh2YWxSZXN1bHQgIT09ICEwICYmIChwID0gdm9pZCAwICE9IHZhbFJlc3VsdC5wb3MgPyB2YWxSZXN1bHQucG9zIDogcCwgYyA9IHZvaWQgMCAhPSB2YWxSZXN1bHQuYyA\/IHZhbFJlc3VsdC5jIDogYyksIAogICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCksIHZvaWQgMCAhPSB2YWxSZXN1bHQuY2FyZXQpIGZvcndhcmRQb3NpdGlvbiA9IHZhbFJlc3VsdC5jYXJldDsgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcndhcmRQb3NpdGlvbiA9ICFvcHRzLmtlZXBTdGF0aWMgJiYgKHZvaWQgMCAhPSB2cHNbcCArIDFdICYmIGdldFRlc3RzKHAgKyAxLCB2cHNbcF0ubG9jYXRvci5zbGljZSgpLCBwKS5sZW5ndGggPiAxIHx8IHZvaWQgMCAhPSB2cHNbcF0uYWx0ZXJuYXRpb24pID8gcCArIDEgOiBzZWVrTmV4dChwKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBmb3J3YXJkUG9zaXRpb247CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAod3JpdGVPdXQgIT09ICExKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgIGlmIChzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBvcHRzLm9uS2V5VmFsaWRhdGlvbi5jYWxsKHNlbGYsIHZhbFJlc3VsdCwgb3B0cyk7CiAgICAgICAgICAgICAgICAgICAgfSwgMCksIGdldE1hc2tTZXQoKS53cml0ZU91dEJ1ZmZlciAmJiB2YWxSZXN1bHQgIT09ICExKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgY2hlY2t2YWwgPyB2b2lkIDAgOiBvcHRzLm51bWVyaWNJbnB1dCA\/IHNlZWtQcmV2aW91cyhmb3J3YXJkUG9zaXRpb24pIDogZm9yd2FyZFBvc2l0aW9uLCBlLCBjaGVja3ZhbCAhPT0gITApLCAKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2t2YWwgIT09ICEwICYmIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBsZXRlKGJ1ZmZlcikgPT09ICEwICYmICRpbnB1dC50cmlnZ2VyKCJjb21wbGV0ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaXNTbGN0biAmJiAoZ2V0TWFza1NldCgpLmJ1ZmZlciA9IHZvaWQgMCwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gZ2V0TWFza1NldCgpLnVuZG9Qb3NpdGlvbnMpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlzU2xjdG4gJiYgKGdldE1hc2tTZXQoKS5idWZmZXIgPSB2b2lkIDAsIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9IGdldE1hc2tTZXQoKS51bmRvUG9zaXRpb25zKTsKICAgICAgICAgICAgICAgIGlmIChvcHRzLnNob3dUb29sdGlwICYmICRpbnB1dC5wcm9wKCJ0aXRsZSIsIGdldE1hc2tTZXQoKS5tYXNrKSwgY2hlY2t2YWwgJiYgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwodGhpcywgZSwgZ2V0QnVmZmVyKCksIGZvcndhcmRQb3NpdGlvbiwgb3B0cyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQucmVmcmVzaEZyb21CdWZmZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSByZXN1bHQucmVmcmVzaEZyb21CdWZmZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKHJlZnJlc2ggPT09ICEwID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCByZXN1bHQuYnVmZmVyKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCksIHJlc3VsdC5jYXJldCAmJiAoZ2V0TWFza1NldCgpLnAgPSByZXN1bHQuY2FyZXQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBrZXl1cEV2ZW50KGUpIHsKICAgICAgICAgICAgdmFyIGJ1ZmZlciA9ICgkKHRoaXMpLCBlLmtleUNvZGUsIGdldEJ1ZmZlcigpKTsKICAgICAgICAgICAgb3B0cy5vbktleVVwLmNhbGwodGhpcywgZSwgYnVmZmVyLCBvcHRzKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcGFzdGVFdmVudChlKSB7CiAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsICRpbnB1dCA9ICQoaW5wdXQpLCBpbnB1dFZhbHVlID0gaW5wdXQuX3ZhbHVlR2V0KCEwKSwgY2FyZXRQb3MgPSBjYXJldChpbnB1dCk7CiAgICAgICAgICAgIGlmICgicHJvcGVydHljaGFuZ2UiID09IGUudHlwZSAmJiBpbnB1dC5fdmFsdWVHZXQoKS5sZW5ndGggPD0gZ2V0TWFza0xlbmd0aCgpKSByZXR1cm4gITA7CiAgICAgICAgICAgIGlmICgicGFzdGUiID09IGUudHlwZSkgewogICAgICAgICAgICAgICAgdmFyIHZhbHVlQmVmb3JlQ2FyZXQgPSBpbnB1dFZhbHVlLnN1YnN0cigwLCBjYXJldFBvcy5iZWdpbiksIHZhbHVlQWZ0ZXJDYXJldCA9IGlucHV0VmFsdWUuc3Vic3RyKGNhcmV0UG9zLmVuZCwgaW5wdXRWYWx1ZS5sZW5ndGgpOwogICAgICAgICAgICAgICAgdmFsdWVCZWZvcmVDYXJldCA9PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKDAsIGNhcmV0UG9zLmJlZ2luKS5qb2luKCIiKSAmJiAodmFsdWVCZWZvcmVDYXJldCA9ICIiKSwgCiAgICAgICAgICAgICAgICB2YWx1ZUFmdGVyQ2FyZXQgPT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZShjYXJldFBvcy5lbmQpLmpvaW4oIiIpICYmICh2YWx1ZUFmdGVyQ2FyZXQgPSAiIiksIAogICAgICAgICAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGEgJiYgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSA\/IGlucHV0VmFsdWUgPSB2YWx1ZUJlZm9yZUNhcmV0ICsgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgiVGV4dCIpICsgdmFsdWVBZnRlckNhcmV0IDogZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhICYmIGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEgJiYgKGlucHV0VmFsdWUgPSB2YWx1ZUJlZm9yZUNhcmV0ICsgZS5vcmlnaW5hbEV2ZW50LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgidGV4dC9wbGFpbiIpICsgdmFsdWVBZnRlckNhcmV0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcGFzdGVWYWx1ZSA9ICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlUGFzdGUpID8gb3B0cy5vbkJlZm9yZVBhc3RlLmNhbGwoaW5wdXQsIGlucHV0VmFsdWUsIG9wdHMpIHx8IGlucHV0VmFsdWUgOiBpbnB1dFZhbHVlOwogICAgICAgICAgICByZXR1cm4gY2hlY2tWYWwoaW5wdXQsICEwLCAhMSwgaXNSVEwgPyBwYXN0ZVZhbHVlLnNwbGl0KCIiKS5yZXZlcnNlKCkgOiBwYXN0ZVZhbHVlLnNwbGl0KCIiKSksIAogICAgICAgICAgICAkaW5wdXQuY2xpY2soKSwgaXNDb21wbGV0ZShnZXRCdWZmZXIoKSkgPT09ICEwICYmICRpbnB1dC50cmlnZ2VyKCJjb21wbGV0ZSIpLCAhMTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaW5wdXRGYWxsQmFja0V2ZW50KGUpIHsKICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpczsKICAgICAgICAgICAgY2hlY2tWYWwoaW5wdXQsICEwLCAhMSksIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpID09PSAhMCAmJiAkKGlucHV0KS50cmlnZ2VyKCJjb21wbGV0ZSIpLCAKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBjb21wb3NpdGlvblN0YXJ0RXZlbnQoZSkgewogICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzOwogICAgICAgICAgICB1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKCIiKSwgKCIiID09IGNvbXBvc2l0aW9uRGF0YSB8fCAwICE9IGUub3JpZ2luYWxFdmVudC5kYXRhLmluZGV4T2YoY29tcG9zaXRpb25EYXRhKSkgJiYgKGNvbXBvc2l0aW9uQ2FyZXRQb3MgPSBjYXJldChpbnB1dCkpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBjb21wb3NpdGlvblVwZGF0ZUV2ZW50KGUpIHsKICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgY2FyZXRQb3MgPSBjb21wb3NpdGlvbkNhcmV0UG9zIHx8IGNhcmV0KGlucHV0KTsKICAgICAgICAgICAgMCA9PSBlLm9yaWdpbmFsRXZlbnQuZGF0YS5pbmRleE9mKGNvbXBvc2l0aW9uRGF0YSkgJiYgKHJlc2V0TWFza1NldCgpLCBjYXJldFBvcyA9IHsKICAgICAgICAgICAgICAgIGJlZ2luOiAwLAogICAgICAgICAgICAgICAgZW5kOiAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgbmV3RGF0YSA9IGUub3JpZ2luYWxFdmVudC5kYXRhOwogICAgICAgICAgICBjYXJldChpbnB1dCwgY2FyZXRQb3MuYmVnaW4sIGNhcmV0UG9zLmVuZCk7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3RGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gJC5FdmVudCgia2V5cHJlc3MiKTsKICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gbmV3RGF0YS5jaGFyQ29kZUF0KGkpLCBza2lwS2V5UHJlc3NFdmVudCA9ICExLCBpZ25vcmFibGUgPSAhMSwgCiAgICAgICAgICAgICAgICBrZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGZvcndhcmRQb3NpdGlvbiA9IGdldE1hc2tTZXQoKS5wOwogICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBvcHRzLm51bWVyaWNJbnB1dCA\/IHNlZWtQcmV2aW91cyhmb3J3YXJkUG9zaXRpb24pIDogZm9yd2FyZFBvc2l0aW9uKTsKICAgICAgICAgICAgfSwgMCksIGNvbXBvc2l0aW9uRGF0YSA9IGUub3JpZ2luYWxFdmVudC5kYXRhOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBjb21wb3NpdGlvbkVuZEV2ZW50KCkge30KICAgICAgICBmdW5jdGlvbiBtYXNrKGVsKSB7CiAgICAgICAgICAgIGlmICgkZWwgPSAkKGVsKSwgJGVsLmlzKCI6aW5wdXQiKSAmJiBpc0lucHV0VHlwZVN1cHBvcnRlZCgkZWwuYXR0cigidHlwZSIpKSkgewogICAgICAgICAgICAgICAgaWYgKCRlbC5kYXRhKCJfaW5wdXRtYXNrIiwgewogICAgICAgICAgICAgICAgICAgIG1hc2tzZXQ6IG1hc2tzZXQsCiAgICAgICAgICAgICAgICAgICAgb3B0czogb3B0cywKICAgICAgICAgICAgICAgICAgICBpc1JUTDogITEKICAgICAgICAgICAgICAgIH0pLCBvcHRzLnNob3dUb29sdGlwICYmICRlbC5wcm9wKCJ0aXRsZSIsIGdldE1hc2tTZXQoKS5tYXNrKSwgKCJydGwiID09IGVsLmRpciB8fCBvcHRzLnJpZ2h0QWxpZ24pICYmICRlbC5jc3MoInRleHQtYWxpZ24iLCAicmlnaHQiKSwgCiAgICAgICAgICAgICAgICAicnRsIiA9PSBlbC5kaXIgfHwgb3B0cy5udW1lcmljSW5wdXQpIHsKICAgICAgICAgICAgICAgICAgICBlbC5kaXIgPSAibHRyIiwgJGVsLnJlbW92ZUF0dHIoImRpciIpOwogICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dERhdGEgPSAkZWwuZGF0YSgiX2lucHV0bWFzayIpOwogICAgICAgICAgICAgICAgICAgIGlucHV0RGF0YS5pc1JUTCA9ICEwLCAkZWwuZGF0YSgiX2lucHV0bWFzayIsIGlucHV0RGF0YSksIGlzUlRMID0gITA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkZWwudW5iaW5kKCIuaW5wdXRtYXNrIiksICRlbC5jbG9zZXN0KCJmb3JtIikuYmluZCgic3VibWl0IiwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlICE9IGdldEJ1ZmZlcigpLmpvaW4oIiIpICYmICRlbC5jaGFuZ2UoKSwgJGVsWzBdLl92YWx1ZUdldCAmJiAkZWxbMF0uX3ZhbHVlR2V0KCkgPT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKCIiKSAmJiAkZWxbMF0uX3ZhbHVlU2V0KCIiKSwgCiAgICAgICAgICAgICAgICAgICAgb3B0cy5yZW1vdmVNYXNrT25TdWJtaXQgJiYgJGVsLmlucHV0bWFzaygicmVtb3ZlIik7CiAgICAgICAgICAgICAgICB9KS5iaW5kKCJyZXNldCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRlbC50cmlnZ2VySGFuZGxlcigic2V0dmFsdWUuaW5wdXRtYXNrIik7CiAgICAgICAgICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICAgICAgICB9KSwgJGVsLmJpbmQoIm1vdXNlZW50ZXIuaW5wdXRtYXNrIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyksIGlucHV0ID0gdGhpczsKICAgICAgICAgICAgICAgICAgICAhJGlucHV0LmlzKCI6Zm9jdXMiKSAmJiBvcHRzLnNob3dNYXNrT25Ib3ZlciAmJiBpbnB1dC5fdmFsdWVHZXQoKSAhPSBnZXRCdWZmZXIoKS5qb2luKCIiKSAmJiB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCkpOwogICAgICAgICAgICAgICAgfSkuYmluZCgiYmx1ci5pbnB1dG1hc2siLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyksIGlucHV0ID0gdGhpczsKICAgICAgICAgICAgICAgICAgICBpZiAoJGlucHV0LmRhdGEoIl9pbnB1dG1hc2siKSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnB0VmFsdWUgPSBpbnB1dC5fdmFsdWVHZXQoKSwgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RDbGljayA9ICEwLCB1bmRvVmFsdWUgIT0gYnVmZmVyLmpvaW4oIiIpICYmICgkaW5wdXQuY2hhbmdlKCksIHVuZG9WYWx1ZSA9IGJ1ZmZlci5qb2luKCIiKSksIAogICAgICAgICAgICAgICAgICAgICAgICAiIiAhPSBucHRWYWx1ZSAmJiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiAobnB0VmFsdWUgPT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKCIiKSA\/IGJ1ZmZlciA9IFtdIDogY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSksIAogICAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBsZXRlKGJ1ZmZlcikgPT09ICExICYmICgkaW5wdXQudHJpZ2dlcigiaW5jb21wbGV0ZSIpLCBvcHRzLmNsZWFySW5jb21wbGV0ZSAmJiAocmVzZXRNYXNrU2V0KCksIAogICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzID8gW10gOiBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKCkpKSwgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgdm9pZCAwLCBlKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkuYmluZCgiZm9jdXMuaW5wdXRtYXNrIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gKCQodGhpcyksIHRoaXMpLCBucHRWYWx1ZSA9IGlucHV0Ll92YWx1ZUdldCgpOwogICAgICAgICAgICAgICAgICAgIG9wdHMuc2hvd01hc2tPbkZvY3VzICYmICghb3B0cy5zaG93TWFza09uSG92ZXIgfHwgb3B0cy5zaG93TWFza09uSG92ZXIgJiYgIiIgPT0gbnB0VmFsdWUpICYmIGlucHV0Ll92YWx1ZUdldCgpICE9IGdldEJ1ZmZlcigpLmpvaW4oIiIpICYmIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpLCAKICAgICAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKCIiKTsKICAgICAgICAgICAgICAgIH0pLmJpbmQoIm1vdXNlbGVhdmUuaW5wdXRtYXNrIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyksIGlucHV0ID0gdGhpczsKICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKSwgbnB0VmFsdWUgPSBpbnB1dC5fdmFsdWVHZXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LmlzKCI6Zm9jdXMiKSB8fCBucHRWYWx1ZSA9PSAkaW5wdXQuYXR0cigicGxhY2Vob2xkZXIiKSB8fCAiIiA9PSBucHRWYWx1ZSB8fCAobnB0VmFsdWUgPT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKCIiKSA\/IGJ1ZmZlciA9IFtdIDogY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBidWZmZXIpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KS5iaW5kKCJjbGljay5pbnB1dG1hc2siLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKSwgaW5wdXQgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgIGlmICgkaW5wdXQuaXMoIjpmb2N1cyIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZENhcmV0ID0gY2FyZXQoaW5wdXQpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRDYXJldC5iZWdpbiA9PSBzZWxlY3RlZENhcmV0LmVuZCkgaWYgKG9wdHMucmFkaXhGb2N1cyAmJiAiIiAhPSBvcHRzLnJhZGl4UG9pbnQgJiYgLTEgIT0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgZ2V0QnVmZmVyKCkpICYmIChmaXJzdENsaWNrIHx8IGdldEJ1ZmZlcigpLmpvaW4oIiIpID09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbigiIikpKSBjYXJldChpbnB1dCwgJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgZ2V0QnVmZmVyKCkpKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Q2xpY2sgPSAhMTsgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xpY2tQb3NpdGlvbiA9IGlzUlRMID8gVHJhbnNsYXRlUG9zaXRpb24oc2VsZWN0ZWRDYXJldC5iZWdpbikgOiBzZWxlY3RlZENhcmV0LmJlZ2luLCBsYXN0UG9zaXRpb24gPSBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbihjbGlja1Bvc2l0aW9uKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0UG9zaXRpb24gPiBjbGlja1Bvc2l0aW9uID8gY2FyZXQoaW5wdXQsIGlzTWFzayhjbGlja1Bvc2l0aW9uKSA\/IGNsaWNrUG9zaXRpb24gOiBzZWVrTmV4dChjbGlja1Bvc2l0aW9uKSkgOiBjYXJldChpbnB1dCwgbGFzdFBvc2l0aW9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLmJpbmQoImRibGNsaWNrLmlucHV0bWFzayIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIDAsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTsKICAgICAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgICAgIH0pLmJpbmQoUGFzdGVFdmVudFR5cGUgKyAiLmlucHV0bWFzayBkcmFnZHJvcC5pbnB1dG1hc2sgZHJvcC5pbnB1dG1hc2siLCBwYXN0ZUV2ZW50KS5iaW5kKCJzZXR2YWx1ZS5pbnB1dG1hc2siLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsKGlucHV0LCAhMCwgITEpLCB1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKCIiKSwgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgfHwgb3B0cy5jbGVhckluY29tcGxldGUpICYmIGlucHV0Ll92YWx1ZUdldCgpID09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbigiIikgJiYgaW5wdXQuX3ZhbHVlU2V0KCIiKTsKICAgICAgICAgICAgICAgIH0pLmJpbmQoImN1dC5pbnB1dG1hc2siLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgc2tpcElucHV0RXZlbnQgPSAhMDsKICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgcG9zID0gY2FyZXQoaW5wdXQpOwogICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlbW92ZShpbnB1dCwgJC5pbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUsIHBvcyksIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgZ2V0TWFza1NldCgpLnAsIGUsIHVuZG9WYWx1ZSAhPSBnZXRCdWZmZXIoKS5qb2luKCIiKSksIAogICAgICAgICAgICAgICAgICAgIGlucHV0Ll92YWx1ZUdldCgpID09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbigiIikgJiYgJGlucHV0LnRyaWdnZXIoImNsZWFyZWQiKSwgCiAgICAgICAgICAgICAgICAgICAgb3B0cy5zaG93VG9vbHRpcCAmJiAkaW5wdXQucHJvcCgidGl0bGUiLCBnZXRNYXNrU2V0KCkubWFzayk7CiAgICAgICAgICAgICAgICB9KS5iaW5kKCJjb21wbGV0ZS5pbnB1dG1hc2siLCBvcHRzLm9uY29tcGxldGUpLmJpbmQoImluY29tcGxldGUuaW5wdXRtYXNrIiwgb3B0cy5vbmluY29tcGxldGUpLmJpbmQoImNsZWFyZWQuaW5wdXRtYXNrIiwgb3B0cy5vbmNsZWFyZWQpLCAKICAgICAgICAgICAgICAgICRlbC5iaW5kKCJrZXlkb3duLmlucHV0bWFzayIsIGtleWRvd25FdmVudCkuYmluZCgia2V5cHJlc3MuaW5wdXRtYXNrIiwga2V5cHJlc3NFdmVudCkuYmluZCgia2V5dXAuaW5wdXRtYXNrIiwga2V5dXBFdmVudCksIAogICAgICAgICAgICAgICAgYW5kcm9pZGZpcmVmb3ggfHwgJGVsLmJpbmQoImNvbXBvc2l0aW9uc3RhcnQuaW5wdXRtYXNrIiwgY29tcG9zaXRpb25TdGFydEV2ZW50KS5iaW5kKCJjb21wb3NpdGlvbnVwZGF0ZS5pbnB1dG1hc2siLCBjb21wb3NpdGlvblVwZGF0ZUV2ZW50KS5iaW5kKCJjb21wb3NpdGlvbmVuZC5pbnB1dG1hc2siLCBjb21wb3NpdGlvbkVuZEV2ZW50KSwgCiAgICAgICAgICAgICAgICAicGFzdGUiID09PSBQYXN0ZUV2ZW50VHlwZSAmJiAkZWwuYmluZCgiaW5wdXQuaW5wdXRtYXNrIiwgaW5wdXRGYWxsQmFja0V2ZW50KSwgcGF0Y2hWYWx1ZVByb3BlcnR5KGVsKTsKICAgICAgICAgICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChlbCwgZWwuX3ZhbHVlR2V0KCksIG9wdHMpIHx8IGVsLl92YWx1ZUdldCgpIDogZWwuX3ZhbHVlR2V0KCk7CiAgICAgICAgICAgICAgICBjaGVja1ZhbChlbCwgITAsICExLCBpbml0aWFsVmFsdWUuc3BsaXQoIiIpKTsKICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKS5zbGljZSgpOwogICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gYnVmZmVyLmpvaW4oIiIpOwogICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQ7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50OwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge30KICAgICAgICAgICAgICAgIGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gITEgJiYgb3B0cy5jbGVhckluY29tcGxldGUgJiYgcmVzZXRNYXNrU2V0KCksIG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgJiYgKGJ1ZmZlci5qb2luKCIiKSA9PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oIiIpID8gYnVmZmVyID0gW10gOiBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpKSwgCiAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihlbCwgYnVmZmVyKSwgYWN0aXZlRWxlbWVudCA9PT0gZWwgJiYgY2FyZXQoZWwsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKSwgCiAgICAgICAgICAgICAgICBpbnN0YWxsRXZlbnRSdWxlcihlbCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdmFyIHVuZG9WYWx1ZSwgY29tcG9zaXRpb25DYXJldFBvcywgY29tcG9zaXRpb25EYXRhLCAkZWwsIG1heExlbmd0aCwgaXNSVEwgPSAhMSwgc2tpcEtleVByZXNzRXZlbnQgPSAhMSwgc2tpcElucHV0RXZlbnQgPSAhMSwgaWdub3JhYmxlID0gITEsIGZpcnN0Q2xpY2sgPSAhMDsKICAgICAgICBpZiAodm9pZCAwICE9IGFjdGlvbk9iaikgc3dpdGNoIChhY3Rpb25PYmouYWN0aW9uKSB7CiAgICAgICAgICBjYXNlICJpc0NvbXBsZXRlIjoKICAgICAgICAgICAgcmV0dXJuICRlbCA9ICQoYWN0aW9uT2JqLmVsKSwgbWFza3NldCA9ICRlbC5kYXRhKCJfaW5wdXRtYXNrIikubWFza3NldCwgb3B0cyA9ICRlbC5kYXRhKCJfaW5wdXRtYXNrIikub3B0cywgCiAgICAgICAgICAgIGlzQ29tcGxldGUoYWN0aW9uT2JqLmJ1ZmZlcik7CgogICAgICAgICAgY2FzZSAidW5tYXNrZWR2YWx1ZSI6CiAgICAgICAgICAgIHJldHVybiAkZWwgPSBhY3Rpb25PYmouJGlucHV0LCBtYXNrc2V0ID0gJGVsLmRhdGEoIl9pbnB1dG1hc2siKS5tYXNrc2V0LCBvcHRzID0gJGVsLmRhdGEoIl9pbnB1dG1hc2siKS5vcHRzLCAKICAgICAgICAgICAgaXNSVEwgPSBhY3Rpb25PYmouJGlucHV0LmRhdGEoIl9pbnB1dG1hc2siKS5pc1JUTCwgdW5tYXNrZWR2YWx1ZShhY3Rpb25PYmouJGlucHV0KTsKCiAgICAgICAgICBjYXNlICJtYXNrIjoKICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbigiIiksIG1hc2soYWN0aW9uT2JqLmVsKTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAiZm9ybWF0IjoKICAgICAgICAgICAgJGVsID0gJCh7fSksICRlbC5kYXRhKCJfaW5wdXRtYXNrIiwgewogICAgICAgICAgICAgICAgbWFza3NldDogbWFza3NldCwKICAgICAgICAgICAgICAgIG9wdHM6IG9wdHMsCiAgICAgICAgICAgICAgICBpc1JUTDogb3B0cy5udW1lcmljSW5wdXQKICAgICAgICAgICAgfSksIG9wdHMubnVtZXJpY0lucHV0ICYmIChpc1JUTCA9ICEwKTsKICAgICAgICAgICAgdmFyIHZhbHVlQnVmZmVyID0gKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKCRlbCwgYWN0aW9uT2JqLnZhbHVlLCBvcHRzKSB8fCBhY3Rpb25PYmoudmFsdWUgOiBhY3Rpb25PYmoudmFsdWUpLnNwbGl0KCIiKTsKICAgICAgICAgICAgcmV0dXJuIGNoZWNrVmFsKCRlbCwgITEsICExLCBpc1JUTCA\/IHZhbHVlQnVmZmVyLnJldmVyc2UoKSA6IHZhbHVlQnVmZmVyKSwgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkgJiYgb3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwodGhpcywgdm9pZCAwLCBnZXRCdWZmZXIoKSwgMCwgb3B0cyksIAogICAgICAgICAgICBhY3Rpb25PYmoubWV0YWRhdGEgPyB7CiAgICAgICAgICAgICAgICB2YWx1ZTogaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKCIiKSA6IGdldEJ1ZmZlcigpLmpvaW4oIiIpLAogICAgICAgICAgICAgICAgbWV0YWRhdGE6ICRlbC5pbnB1dG1hc2soImdldG1ldGFkYXRhIikKICAgICAgICAgICAgfSA6IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbigiIikgOiBnZXRCdWZmZXIoKS5qb2luKCIiKTsKCiAgICAgICAgICBjYXNlICJpc1ZhbGlkIjoKICAgICAgICAgICAgJGVsID0gJCh7fSksICRlbC5kYXRhKCJfaW5wdXRtYXNrIiwgewogICAgICAgICAgICAgICAgbWFza3NldDogbWFza3NldCwKICAgICAgICAgICAgICAgIG9wdHM6IG9wdHMsCiAgICAgICAgICAgICAgICBpc1JUTDogb3B0cy5udW1lcmljSW5wdXQKICAgICAgICAgICAgfSksIG9wdHMubnVtZXJpY0lucHV0ICYmIChpc1JUTCA9ICEwKTsKICAgICAgICAgICAgdmFyIHZhbHVlQnVmZmVyID0gYWN0aW9uT2JqLnZhbHVlLnNwbGl0KCIiKTsKICAgICAgICAgICAgY2hlY2tWYWwoJGVsLCAhMSwgITAsIGlzUlRMID8gdmFsdWVCdWZmZXIucmV2ZXJzZSgpIDogdmFsdWVCdWZmZXIpOwogICAgICAgICAgICBmb3IgKHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKSwgcmwgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbigpLCBsbWliID0gYnVmZmVyLmxlbmd0aCAtIDE7IGxtaWIgPiBybCAmJiAhaXNNYXNrKGxtaWIpOyBsbWliLS0pIDsKICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5zcGxpY2UocmwsIGxtaWIgKyAxIC0gcmwpLCBpc0NvbXBsZXRlKGJ1ZmZlcikgJiYgYWN0aW9uT2JqLnZhbHVlID09IGJ1ZmZlci5qb2luKCIiKTsKCiAgICAgICAgICBjYXNlICJnZXRlbXB0eW1hc2siOgogICAgICAgICAgICByZXR1cm4gJGVsID0gJChhY3Rpb25PYmouZWwpLCBtYXNrc2V0ID0gJGVsLmRhdGEoIl9pbnB1dG1hc2siKS5tYXNrc2V0LCBvcHRzID0gJGVsLmRhdGEoIl9pbnB1dG1hc2siKS5vcHRzLCAKICAgICAgICAgICAgZ2V0QnVmZmVyVGVtcGxhdGUoKTsKCiAgICAgICAgICBjYXNlICJyZW1vdmUiOgogICAgICAgICAgICB2YXIgZWwgPSBhY3Rpb25PYmouZWw7CiAgICAgICAgICAgICRlbCA9ICQoZWwpLCBtYXNrc2V0ID0gJGVsLmRhdGEoIl9pbnB1dG1hc2siKS5tYXNrc2V0LCBvcHRzID0gJGVsLmRhdGEoIl9pbnB1dG1hc2siKS5vcHRzLCAKICAgICAgICAgICAgZWwuX3ZhbHVlU2V0KHVubWFza2VkdmFsdWUoJGVsKSksICRlbC51bmJpbmQoIi5pbnB1dG1hc2siKSwgJGVsLnJlbW92ZURhdGEoIl9pbnB1dG1hc2siKTsKICAgICAgICAgICAgdmFyIHZhbHVlUHJvcGVydHk7CiAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgKHZhbHVlUHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVsLCAidmFsdWUiKSksIAogICAgICAgICAgICB2YWx1ZVByb3BlcnR5ICYmIHZhbHVlUHJvcGVydHkuZ2V0ID8gZWwuX3ZhbHVlR2V0ICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgInZhbHVlIiwgewogICAgICAgICAgICAgICAgZ2V0OiBlbC5fdmFsdWVHZXQsCiAgICAgICAgICAgICAgICBzZXQ6IGVsLl92YWx1ZVNldAogICAgICAgICAgICB9KSA6IGRvY3VtZW50Ll9fbG9va3VwR2V0dGVyX18gJiYgZWwuX19sb29rdXBHZXR0ZXJfXygidmFsdWUiKSAmJiBlbC5fdmFsdWVHZXQgJiYgKGVsLl9fZGVmaW5lR2V0dGVyX18oInZhbHVlIiwgZWwuX3ZhbHVlR2V0KSwgCiAgICAgICAgICAgIGVsLl9fZGVmaW5lU2V0dGVyX18oInZhbHVlIiwgZWwuX3ZhbHVlU2V0KSk7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBkZWxldGUgZWwuX3ZhbHVlR2V0LCBkZWxldGUgZWwuX3ZhbHVlU2V0OwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBlbC5fdmFsdWVHZXQgPSB2b2lkIDAsIGVsLl92YWx1ZVNldCA9IHZvaWQgMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICJnZXRtZXRhZGF0YSI6CiAgICAgICAgICAgIGlmICgkZWwgPSAkKGFjdGlvbk9iai5lbCksIG1hc2tzZXQgPSAkZWwuZGF0YSgiX2lucHV0bWFzayIpLm1hc2tzZXQsIG9wdHMgPSAkZWwuZGF0YSgiX2lucHV0bWFzayIpLm9wdHMsIAogICAgICAgICAgICAkLmlzQXJyYXkobWFza3NldC5tZXRhZGF0YSkpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGFsdGVybmF0aW9uLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBmaXJzdEFsdCA9IGx2cDsgZmlyc3RBbHQgPj0gMDsgZmlyc3RBbHQtLSkgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tmaXJzdEFsdF0gJiYgdm9pZCAwICE9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tmaXJzdEFsdF0uYWx0ZXJuYXRpb24pIHsKICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGlvbiA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tmaXJzdEFsdF0uYWx0ZXJuYXRpb247CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9IGFsdGVybmF0aW9uID8gbWFza3NldC5tZXRhZGF0YVtnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXS5sb2NhdG9yW2FsdGVybmF0aW9uXV0gOiBtYXNrc2V0Lm1ldGFkYXRhWzBdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBtYXNrc2V0Lm1ldGFkYXRhOwogICAgICAgIH0KICAgIH0KICAgIGlmICh2b2lkIDAgPT09ICQuZm4uaW5wdXRtYXNrKSB7CiAgICAgICAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudCwgaXBob25lID0gbnVsbCAhPT0gdWEubWF0Y2gobmV3IFJlZ0V4cCgiaXBob25lIiwgImkiKSksIGFuZHJvaWRmaXJlZm94ID0gKG51bGwgIT09IHVhLm1hdGNoKG5ldyBSZWdFeHAoImFuZHJvaWQuKnNhZmFyaS4qIiwgImkiKSksIAogICAgICAgIG51bGwgIT09IHVhLm1hdGNoKG5ldyBSZWdFeHAoImFuZHJvaWQuKmNocm9tZS4qIiwgImkiKSksIG51bGwgIT09IHVhLm1hdGNoKG5ldyBSZWdFeHAoImFuZHJvaWQuKmZpcmVmb3guKiIsICJpIikpKSwgUGFzdGVFdmVudFR5cGUgPSAoL0tpbmRsZS9pLnRlc3QodWEpIHx8IC9TaWxrL2kudGVzdCh1YSkgfHwgL0tGVFQvaS50ZXN0KHVhKSB8fCAvS0ZPVC9pLnRlc3QodWEpIHx8IC9LRkpXQS9pLnRlc3QodWEpIHx8IC9LRkpXSS9pLnRlc3QodWEpIHx8IC9LRlNPV0kvaS50ZXN0KHVhKSB8fCAvS0ZUSFdBL2kudGVzdCh1YSkgfHwgL0tGVEhXSS9pLnRlc3QodWEpIHx8IC9LRkFQV0EvaS50ZXN0KHVhKSB8fCAvS0ZBUFdJL2kudGVzdCh1YSksIAogICAgICAgIGlzSW5wdXRFdmVudFN1cHBvcnRlZCgicGFzdGUiKSA\/ICJwYXN0ZSIgOiBpc0lucHV0RXZlbnRTdXBwb3J0ZWQoImlucHV0IikgPyAiaW5wdXQiIDogInByb3BlcnR5Y2hhbmdlIik7CiAgICAgICAgJC5pbnB1dG1hc2sgPSB7CiAgICAgICAgICAgIGRlZmF1bHRzOiB7CiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIl8iLAogICAgICAgICAgICAgICAgb3B0aW9uYWxtYXJrZXI6IHsKICAgICAgICAgICAgICAgICAgICBzdGFydDogIlsiLAogICAgICAgICAgICAgICAgICAgIGVuZDogIl0iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcXVhbnRpZmllcm1hcmtlcjogewogICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAieyIsCiAgICAgICAgICAgICAgICAgICAgZW5kOiAifSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBncm91cG1hcmtlcjogewogICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAiKCIsCiAgICAgICAgICAgICAgICAgICAgZW5kOiAiKSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhbHRlcm5hdG9ybWFya2VyOiAifCIsCiAgICAgICAgICAgICAgICBlc2NhcGVDaGFyOiAiXFwiLAogICAgICAgICAgICAgICAgbWFzazogbnVsbCwKICAgICAgICAgICAgICAgIG9uY29tcGxldGU6ICQubm9vcCwKICAgICAgICAgICAgICAgIG9uaW5jb21wbGV0ZTogJC5ub29wLAogICAgICAgICAgICAgICAgb25jbGVhcmVkOiAkLm5vb3AsCiAgICAgICAgICAgICAgICByZXBlYXQ6IDAsCiAgICAgICAgICAgICAgICBncmVlZHk6ICEwLAogICAgICAgICAgICAgICAgYXV0b1VubWFzazogITEsCiAgICAgICAgICAgICAgICByZW1vdmVNYXNrT25TdWJtaXQ6ICExLAogICAgICAgICAgICAgICAgY2xlYXJNYXNrT25Mb3N0Rm9jdXM6ICEwLAogICAgICAgICAgICAgICAgaW5zZXJ0TW9kZTogITAsCiAgICAgICAgICAgICAgICBjbGVhckluY29tcGxldGU6ICExLAogICAgICAgICAgICAgICAgYWxpYXNlczoge30sCiAgICAgICAgICAgICAgICBhbGlhczogbnVsbCwKICAgICAgICAgICAgICAgIG9uS2V5VXA6ICQubm9vcCwKICAgICAgICAgICAgICAgIG9uQmVmb3JlTWFzazogdm9pZCAwLAogICAgICAgICAgICAgICAgb25CZWZvcmVQYXN0ZTogdm9pZCAwLAogICAgICAgICAgICAgICAgb25CZWZvcmVXcml0ZTogdm9pZCAwLAogICAgICAgICAgICAgICAgb25Vbk1hc2s6IHZvaWQgMCwKICAgICAgICAgICAgICAgIHNob3dNYXNrT25Gb2N1czogITAsCiAgICAgICAgICAgICAgICBzaG93TWFza09uSG92ZXI6ICEwLAogICAgICAgICAgICAgICAgb25LZXlWYWxpZGF0aW9uOiAkLm5vb3AsCiAgICAgICAgICAgICAgICBza2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyOiAiICIsCiAgICAgICAgICAgICAgICBzaG93VG9vbHRpcDogITEsCiAgICAgICAgICAgICAgICBudW1lcmljSW5wdXQ6ICExLAogICAgICAgICAgICAgICAgcmlnaHRBbGlnbjogITEsCiAgICAgICAgICAgICAgICB1bmRvT25Fc2NhcGU6ICEwLAogICAgICAgICAgICAgICAgcmFkaXhQb2ludDogIiIsCiAgICAgICAgICAgICAgICByYWRpeEZvY3VzOiAhMSwKICAgICAgICAgICAgICAgIG5vanVtcHM6ICExLAogICAgICAgICAgICAgICAgbm9qdW1wc1RocmVzaG9sZDogMCwKICAgICAgICAgICAgICAgIGtlZXBTdGF0aWM6IHZvaWQgMCwKICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgIjkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogIlswLTldIiwKICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25TeW1ib2w6ICIqIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYTogewogICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6ICJbQS1aYS16XHUwNDEwLVx1MDQ0Zlx1MDQwMVx1MDQ1MVx4YzAtXHhmZlx4YjVdIiwKICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25TeW1ib2w6ICIqIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIioiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogIlswLTlBLVphLXpcdTA0MTAtXHUwNDRmXHUwNDAxXHUwNDUxXHhjMC1ceGZmXHhiNV0iLAogICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBpZ25vcmFibGVzOiBbIDgsIDksIDEzLCAxOSwgMjcsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDUsIDQ2LCA5MywgMTEyLCAxMTMsIDExNCwgMTE1LCAxMTYsIDExNywgMTE4LCAxMTksIDEyMCwgMTIxLCAxMjIsIDEyMyBdLAogICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogdm9pZCAwLAogICAgICAgICAgICAgICAgY2FuQ2xlYXJQb3NpdGlvbjogJC5ub29wCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGtleUNvZGU6IHsKICAgICAgICAgICAgICAgIEFMVDogMTgsCiAgICAgICAgICAgICAgICBCQUNLU1BBQ0U6IDgsCiAgICAgICAgICAgICAgICBDQVBTX0xPQ0s6IDIwLAogICAgICAgICAgICAgICAgQ09NTUE6IDE4OCwKICAgICAgICAgICAgICAgIENPTU1BTkQ6IDkxLAogICAgICAgICAgICAgICAgQ09NTUFORF9MRUZUOiA5MSwKICAgICAgICAgICAgICAgIENPTU1BTkRfUklHSFQ6IDkzLAogICAgICAgICAgICAgICAgQ09OVFJPTDogMTcsCiAgICAgICAgICAgICAgICBERUxFVEU6IDQ2LAogICAgICAgICAgICAgICAgRE9XTjogNDAsCiAgICAgICAgICAgICAgICBFTkQ6IDM1LAogICAgICAgICAgICAgICAgRU5URVI6IDEzLAogICAgICAgICAgICAgICAgRVNDQVBFOiAyNywKICAgICAgICAgICAgICAgIEhPTUU6IDM2LAogICAgICAgICAgICAgICAgSU5TRVJUOiA0NSwKICAgICAgICAgICAgICAgIExFRlQ6IDM3LAogICAgICAgICAgICAgICAgTUVOVTogOTMsCiAgICAgICAgICAgICAgICBOVU1QQURfQUREOiAxMDcsCiAgICAgICAgICAgICAgICBOVU1QQURfREVDSU1BTDogMTEwLAogICAgICAgICAgICAgICAgTlVNUEFEX0RJVklERTogMTExLAogICAgICAgICAgICAgICAgTlVNUEFEX0VOVEVSOiAxMDgsCiAgICAgICAgICAgICAgICBOVU1QQURfTVVMVElQTFk6IDEwNiwKICAgICAgICAgICAgICAgIE5VTVBBRF9TVUJUUkFDVDogMTA5LAogICAgICAgICAgICAgICAgUEFHRV9ET1dOOiAzNCwKICAgICAgICAgICAgICAgIFBBR0VfVVA6IDMzLAogICAgICAgICAgICAgICAgUEVSSU9EOiAxOTAsCiAgICAgICAgICAgICAgICBSSUdIVDogMzksCiAgICAgICAgICAgICAgICBTSElGVDogMTYsCiAgICAgICAgICAgICAgICBTUEFDRTogMzIsCiAgICAgICAgICAgICAgICBUQUI6IDksCiAgICAgICAgICAgICAgICBVUDogMzgsCiAgICAgICAgICAgICAgICBXSU5ET1dTOiA5MQogICAgICAgICAgICB9LAogICAgICAgICAgICBtYXNrc0NhY2hlOiB7fSwKICAgICAgICAgICAgZXNjYXBlUmVnZXg6IGZ1bmN0aW9uKHN0cikgewogICAgICAgICAgICAgICAgdmFyIHNwZWNpYWxzID0gWyAiLyIsICIuIiwgIioiLCAiKyIsICI\/IiwgInwiLCAiKCIsICIpIiwgIlsiLCAiXSIsICJ7IiwgIn0iLCAiXFwiIF07CiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cCgiKFxcIiArIHNwZWNpYWxzLmpvaW4oInxcXCIpICsgIikiLCAiZ2ltIiksICJcXCQxIik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZvcm1hdDogZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMsIG1ldGFkYXRhKSB7CiAgICAgICAgICAgICAgICB2YXIgb3B0cyA9ICQuZXh0ZW5kKCEwLCB7fSwgJC5pbnB1dG1hc2suZGVmYXVsdHMsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVBbGlhcyhvcHRzLmFsaWFzLCBvcHRpb25zLCBvcHRzKSwgbWFza1Njb3BlKHsKICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICJmb3JtYXQiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbWV0YWRhdGEKICAgICAgICAgICAgICAgIH0sIGdlbmVyYXRlTWFza1NldChvcHRzKSwgb3B0cyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzVmFsaWQ6IGZ1bmN0aW9uKHZhbHVlLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICB2YXIgb3B0cyA9ICQuZXh0ZW5kKCEwLCB7fSwgJC5pbnB1dG1hc2suZGVmYXVsdHMsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVBbGlhcyhvcHRzLmFsaWFzLCBvcHRpb25zLCBvcHRzKSwgbWFza1Njb3BlKHsKICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICJpc1ZhbGlkIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgIH0sIGdlbmVyYXRlTWFza1NldChvcHRzKSwgb3B0cyk7CiAgICAgICAgICAgIH0KICAgICAgICB9LCAkLmZuLmlucHV0bWFzayA9IGZ1bmN0aW9uKGZuLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIGltcG9ydEF0dHJpYnV0ZU9wdGlvbnMobnB0LCBvcHRzLCBpbXBvcnRlZE9wdGlvbnNDb250YWluZXIpIHsKICAgICAgICAgICAgICAgIHZhciAkbnB0ID0gJChucHQpOwogICAgICAgICAgICAgICAgJG5wdC5kYXRhKCJpbnB1dG1hc2stYWxpYXMiKSAmJiByZXNvbHZlQWxpYXMoJG5wdC5kYXRhKCJpbnB1dG1hc2stYWxpYXMiKSwge30sIG9wdHMpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgb3B0aW9uIGluIG9wdHMpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uRGF0YSA9ICRucHQuZGF0YSgiaW5wdXRtYXNrLSIgKyBvcHRpb24udG9Mb3dlckNhc2UoKSk7CiAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9IG9wdGlvbkRhdGEgJiYgKCJtYXNrIiA9PSBvcHRpb24gJiYgMCA9PSBvcHRpb25EYXRhLmluZGV4T2YoIlsiKSA\/IChvcHRzW29wdGlvbl0gPSBvcHRpb25EYXRhLnJlcGxhY2UoL1tcc1tcXV0vZywgIiIpLnNwbGl0KCInLCciKSwgCiAgICAgICAgICAgICAgICAgICAgb3B0c1tvcHRpb25dWzBdID0gb3B0c1tvcHRpb25dWzBdLnJlcGxhY2UoIiciLCAiIiksIG9wdHNbb3B0aW9uXVtvcHRzW29wdGlvbl0ubGVuZ3RoIC0gMV0gPSBvcHRzW29wdGlvbl1bb3B0c1tvcHRpb25dLmxlbmd0aCAtIDFdLnJlcGxhY2UoIiciLCAiIikpIDogb3B0c1tvcHRpb25dID0gImJvb2xlYW4iID09IHR5cGVvZiBvcHRpb25EYXRhID8gb3B0aW9uRGF0YSA6IG9wdGlvbkRhdGEudG9TdHJpbmcoKSwgCiAgICAgICAgICAgICAgICAgICAgaW1wb3J0ZWRPcHRpb25zQ29udGFpbmVyICYmIChpbXBvcnRlZE9wdGlvbnNDb250YWluZXJbb3B0aW9uXSA9IG9wdHNbb3B0aW9uXSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG9wdHM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIG1hc2tzZXQsIG9wdHMgPSAkLmV4dGVuZCghMCwge30sICQuaW5wdXRtYXNrLmRlZmF1bHRzLCBvcHRpb25zKTsKICAgICAgICAgICAgaWYgKCJzdHJpbmciID09IHR5cGVvZiBmbikgc3dpdGNoIChmbikgewogICAgICAgICAgICAgIGNhc2UgIm1hc2siOgogICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVBbGlhcyhvcHRzLmFsaWFzLCBvcHRpb25zLCBvcHRzKSwgbWFza3NldCA9IGdlbmVyYXRlTWFza1NldChvcHRzKSwgCiAgICAgICAgICAgICAgICB2b2lkIDAgPT0gbWFza3NldCA\/IHRoaXMgOiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgbWFza1Njb3BlKHsKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAibWFzayIsCiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiB0aGlzCiAgICAgICAgICAgICAgICAgICAgfSwgJC5leHRlbmQoITAsIHt9LCBtYXNrc2V0KSwgaW1wb3J0QXR0cmlidXRlT3B0aW9ucyh0aGlzLCBvcHRzKSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAidW5tYXNrZWR2YWx1ZSI6CiAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiAkaW5wdXQuZGF0YSgiX2lucHV0bWFzayIpID8gbWFza1Njb3BlKHsKICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICJ1bm1hc2tlZHZhbHVlIiwKICAgICAgICAgICAgICAgICAgICAkaW5wdXQ6ICRpbnB1dAogICAgICAgICAgICAgICAgfSkgOiAkaW5wdXQudmFsKCk7CgogICAgICAgICAgICAgIGNhc2UgInJlbW92ZSI6CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpOwogICAgICAgICAgICAgICAgICAgICRpbnB1dC5kYXRhKCJfaW5wdXRtYXNrIikgJiYgbWFza1Njb3BlKHsKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAicmVtb3ZlIiwKICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHRoaXMKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlICJnZXRlbXB0eW1hc2siOgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSgiX2lucHV0bWFzayIpID8gbWFza1Njb3BlKHsKICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICJnZXRlbXB0eW1hc2siLAogICAgICAgICAgICAgICAgICAgIGVsOiB0aGlzCiAgICAgICAgICAgICAgICB9KSA6ICIiOwoKICAgICAgICAgICAgICBjYXNlICJoYXNNYXNrZWRWYWx1ZSI6CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhKCJfaW5wdXRtYXNrIikgPyAhdGhpcy5kYXRhKCJfaW5wdXRtYXNrIikub3B0cy5hdXRvVW5tYXNrIDogITE7CgogICAgICAgICAgICAgIGNhc2UgImlzQ29tcGxldGUiOgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSgiX2lucHV0bWFzayIpID8gbWFza1Njb3BlKHsKICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICJpc0NvbXBsZXRlIiwKICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHRoaXNbMF0uX3ZhbHVlR2V0KCkuc3BsaXQoIiIpLAogICAgICAgICAgICAgICAgICAgIGVsOiB0aGlzCiAgICAgICAgICAgICAgICB9KSA6ICEwOwoKICAgICAgICAgICAgICBjYXNlICJnZXRtZXRhZGF0YSI6CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhKCJfaW5wdXRtYXNrIikgPyBtYXNrU2NvcGUoewogICAgICAgICAgICAgICAgICAgIGFjdGlvbjogImdldG1ldGFkYXRhIiwKICAgICAgICAgICAgICAgICAgICBlbDogdGhpcwogICAgICAgICAgICAgICAgfSkgOiB2b2lkIDA7CgogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUFsaWFzKG9wdHMuYWxpYXMsIG9wdGlvbnMsIG9wdHMpLCByZXNvbHZlQWxpYXMoZm4sIG9wdGlvbnMsIG9wdHMpIHx8IChvcHRzLm1hc2sgPSBmbiksIAogICAgICAgICAgICAgICAgbWFza3NldCA9IGdlbmVyYXRlTWFza1NldChvcHRzKSwgdm9pZCAwID09IG1hc2tzZXQgPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIG1hc2tTY29wZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogIm1hc2siLAogICAgICAgICAgICAgICAgICAgICAgICBlbDogdGhpcwogICAgICAgICAgICAgICAgICAgIH0sICQuZXh0ZW5kKCEwLCB7fSwgbWFza3NldCksIGltcG9ydEF0dHJpYnV0ZU9wdGlvbnModGhpcywgb3B0cykpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoIm9iamVjdCIgPT0gdHlwZW9mIGZuKSByZXR1cm4gb3B0cyA9ICQuZXh0ZW5kKCEwLCB7fSwgJC5pbnB1dG1hc2suZGVmYXVsdHMsIGZuKSwgCiAgICAgICAgICAgICAgICByZXNvbHZlQWxpYXMob3B0cy5hbGlhcywgZm4sIG9wdHMpLCBtYXNrc2V0ID0gZ2VuZXJhdGVNYXNrU2V0KG9wdHMpLCB2b2lkIDAgPT0gbWFza3NldCA\/IHRoaXMgOiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgbWFza1Njb3BlKHsKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAibWFzayIsCiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiB0aGlzCiAgICAgICAgICAgICAgICAgICAgfSwgJC5leHRlbmQoITAsIHt9LCBtYXNrc2V0KSwgaW1wb3J0QXR0cmlidXRlT3B0aW9ucyh0aGlzLCBvcHRzKSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT0gZm4pIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJPcHRpb25zID0gJCh0aGlzKS5hdHRyKCJkYXRhLWlucHV0bWFzayIpOwogICAgICAgICAgICAgICAgICAgIGlmIChhdHRyT3B0aW9ucyAmJiAiIiAhPSBhdHRyT3B0aW9ucykgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck9wdGlvbnMgPSBhdHRyT3B0aW9ucy5yZXBsYWNlKG5ldyBSZWdFeHAoIiciLCAiZyIpLCAnIicpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YW9wdGlvbnMgPSAkLnBhcnNlSlNPTigieyIgKyBhdHRyT3B0aW9ucyArICJ9Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKCEwLCBkYXRhb3B0aW9ucywgb3B0aW9ucyksIG9wdHMgPSAkLmV4dGVuZCghMCwge30sICQuaW5wdXRtYXNrLmRlZmF1bHRzLCBkYXRhb3B0aW9ucyksIAogICAgICAgICAgICAgICAgICAgICAgICBvcHRzID0gaW1wb3J0QXR0cmlidXRlT3B0aW9ucyh0aGlzLCBvcHRzKSwgcmVzb2x2ZUFsaWFzKG9wdHMuYWxpYXMsIGRhdGFvcHRpb25zLCBvcHRzKSwgCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuYWxpYXMgPSB2b2lkIDAsICQodGhpcykuaW5wdXRtYXNrKCJtYXNrIiwgb3B0cyk7CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHt9CiAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykuYXR0cigiZGF0YS1pbnB1dG1hc2stbWFzayIpIHx8ICQodGhpcykuYXR0cigiZGF0YS1pbnB1dG1hc2stYWxpYXMiKSkgewogICAgICAgICAgICAgICAgICAgICAgICBvcHRzID0gJC5leHRlbmQoITAsIHt9LCAkLmlucHV0bWFzay5kZWZhdWx0cywge30pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YU9wdGlvbnMgPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgb3B0cyA9IGltcG9ydEF0dHJpYnV0ZU9wdGlvbnModGhpcywgb3B0cywgZGF0YU9wdGlvbnMpLCByZXNvbHZlQWxpYXMob3B0cy5hbGlhcywgZGF0YU9wdGlvbnMsIG9wdHMpLCAKICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5hbGlhcyA9IHZvaWQgMCwgJCh0aGlzKS5pbnB1dG1hc2soIm1hc2siLCBvcHRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CiAgICByZXR1cm4gJC5mbi5pbnB1dG1hc2s7Cn0pOw==",
    "size": "81811"
}