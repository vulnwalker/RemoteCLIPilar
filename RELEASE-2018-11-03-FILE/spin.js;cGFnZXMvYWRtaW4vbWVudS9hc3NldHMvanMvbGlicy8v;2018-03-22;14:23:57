{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/spin.js\/spin.js",
    "lastUpdate": "2018-03-22+14:23:57.36",
    "contentFile": "\/ICd0cmFuc2xhdGUzZCgwLDAsMCknIDogJycsCiAgICAgICAgICBvcGFjaXR5OiBvLm9wYWNpdHksCiAgICAgICAgICBhbmltYXRpb246IHVzZUNzc0FuaW1hdGlvbnMgJiYgYWRkQW5pbWF0aW9uKG8ub3BhY2l0eSwgby50cmFpbCwgc3RhcnQgKyBpICogby5kaXJlY3Rpb24sIG8ubGluZXMpICsgJyAnICsgMS9vLnNwZWVkICsgJ3MgbGluZWFyIGluZmluaXRlJwogICAgICAgIH0pCgogICAgICAgIGlmIChvLnNoYWRvdykgaW5zKHNlZywgY3NzKGZpbGwoJyMwMDAnLCAnMCAwIDRweCAnICsgJyMwMDAnKSwge3RvcDogMisncHgnfSkpCiAgICAgICAgaW5zKGVsLCBpbnMoc2VnLCBmaWxsKGdldENvbG9yKG8uY29sb3IsIGkpLCAnMCAwIDFweCByZ2JhKDAsMCwwLC4xKScpKSkKICAgICAgfQogICAgICByZXR1cm4gZWwKICAgIH0sCgogICAgLyoqCiAgICAgKiBJbnRlcm5hbCBtZXRob2QgdGhhdCBhZGp1c3RzIHRoZSBvcGFjaXR5IG9mIGEgc2luZ2xlIGxpbmUuCiAgICAgKiBXaWxsIGJlIG92ZXJ3cml0dGVuIGluIFZNTCBmYWxsYmFjayBtb2RlIGJlbG93LgogICAgICovCiAgICBvcGFjaXR5OiBmdW5jdGlvbihlbCwgaSwgdmFsKSB7CiAgICAgIGlmIChpIDwgZWwuY2hpbGROb2Rlcy5sZW5ndGgpIGVsLmNoaWxkTm9kZXNbaV0uc3R5bGUub3BhY2l0eSA9IHZhbAogICAgfQoKICB9KQoKCiAgZnVuY3Rpb24gaW5pdFZNTCgpIHsKCiAgICAvKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIFZNTCB0YWcgKi8KICAgIGZ1bmN0aW9uIHZtbCh0YWcsIGF0dHIpIHsKICAgICAgcmV0dXJuIGNyZWF0ZUVsKCc8JyArIHRhZyArICcgeG1sbnM9InVybjpzY2hlbWFzLW1pY3Jvc29mdC5jb206dm1sIiBjbGFzcz0ic3Bpbi12bWwiPicsIGF0dHIpCiAgICB9CgogICAgLy8gTm8gQ1NTIHRyYW5zZm9ybXMgYnV0IFZNTCBzdXBwb3J0LCBhZGQgYSBDU1MgcnVsZSBmb3IgVk1MIGVsZW1lbnRzOgogICAgc2hlZXQuYWRkUnVsZSgnLnNwaW4tdm1sJywgJ2JlaGF2aW9yOnVybCgjZGVmYXVsdCNWTUwpJykKCiAgICBTcGlubmVyLnByb3RvdHlwZS5saW5lcyA9IGZ1bmN0aW9uKGVsLCBvKSB7CiAgICAgIHZhciByID0gby5sZW5ndGgrby53aWR0aAogICAgICAgICwgcyA9IDIqcgoKICAgICAgZnVuY3Rpb24gZ3JwKCkgewogICAgICAgIHJldHVybiBjc3MoCiAgICAgICAgICB2bWwoJ2dyb3VwJywgewogICAgICAgICAgICBjb29yZHNpemU6IHMgKyAnICcgKyBzLAogICAgICAgICAgICBjb29yZG9yaWdpbjogLXIgKyAnICcgKyAtcgogICAgICAgICAgfSksCiAgICAgICAgICB7IHdpZHRoOiBzLCBoZWlnaHQ6IHMgfQogICAgICAgICkKICAgICAgfQoKICAgICAgdmFyIG1hcmdpbiA9IC0oby53aWR0aCtvLmxlbmd0aCkqMiArICdweCcKICAgICAgICAsIGcgPSBjc3MoZ3JwKCksIHtwb3NpdGlvbjogJ2Fic29sdXRlJywgdG9wOiBtYXJnaW4sIGxlZnQ6IG1hcmdpbn0pCiAgICAgICAgLCBpCgogICAgICBmdW5jdGlvbiBzZWcoaSwgZHgsIGZpbHRlcikgewogICAgICAgIGlucyhnLAogICAgICAgICAgaW5zKGNzcyhncnAoKSwge3JvdGF0aW9uOiAzNjAgLyBvLmxpbmVzICogaSArICdkZWcnLCBsZWZ0OiB+fmR4fSksCiAgICAgICAgICAgIGlucyhjc3Modm1sKCdyb3VuZHJlY3QnLCB7YXJjc2l6ZTogby5jb3JuZXJzfSksIHsKICAgICAgICAgICAgICAgIHdpZHRoOiByLAogICAgICAgICAgICAgICAgaGVpZ2h0OiBvLndpZHRoLAogICAgICAgICAgICAgICAgbGVmdDogby5yYWRpdXMsCiAgICAgICAgICAgICAgICB0b3A6IC1vLndpZHRoPj4xLAogICAgICAgICAgICAgICAgZmlsdGVyOiBmaWx0ZXIKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICB2bWwoJ2ZpbGwnLCB7Y29sb3I6IGdldENvbG9yKG8uY29sb3IsIGkpLCBvcGFjaXR5OiBvLm9wYWNpdHl9KSwKICAgICAgICAgICAgICB2bWwoJ3N0cm9rZScsIHtvcGFjaXR5OiAwfSkgLy8gdHJhbnNwYXJlbnQgc3Ryb2tlIHRvIGZpeCBjb2xvciBibGVlZGluZyB1cG9uIG9wYWNpdHkgY2hhbmdlCiAgICAgICAgICAgICkKICAgICAgICAgICkKICAgICAgICApCiAgICAgIH0KCiAgICAgIGlmIChvLnNoYWRvdykKICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IG8ubGluZXM7IGkrKykKICAgICAgICAgIHNlZyhpLCAtMiwgJ3Byb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5CbHVyKHBpeGVscmFkaXVzPTIsbWFrZXNoYWRvdz0xLHNoYWRvd29wYWNpdHk9LjMpJykKCiAgICAgIGZvciAoaSA9IDE7IGkgPD0gby5saW5lczsgaSsrKSBzZWcoaSkKICAgICAgcmV0dXJuIGlucyhlbCwgZykKICAgIH0KCiAgICBTcGlubmVyLnByb3RvdHlwZS5vcGFjaXR5ID0gZnVuY3Rpb24oZWwsIGksIHZhbCwgbykgewogICAgICB2YXIgYyA9IGVsLmZpcnN0Q2hpbGQKICAgICAgbyA9IG8uc2hhZG93ICYmIG8ubGluZXMgfHwgMAogICAgICBpZiAoYyAmJiBpK28gPCBjLmNoaWxkTm9kZXMubGVuZ3RoKSB7CiAgICAgICAgYyA9IGMuY2hpbGROb2Rlc1tpK29dOyBjID0gYyAmJiBjLmZpcnN0Q2hpbGQ7IGMgPSBjICYmIGMuZmlyc3RDaGlsZAogICAgICAgIGlmIChjKSBjLm9wYWNpdHkgPSB2YWwKICAgICAgfQogICAgfQogIH0KCiAgdmFyIHByb2JlID0gY3NzKGNyZWF0ZUVsKCdncm91cCcpLCB7YmVoYXZpb3I6ICd1cmwoI2RlZmF1bHQjVk1MKSd9KQoKICBpZiAoIXZlbmRvcihwcm9iZSwgJ3RyYW5zZm9ybScpICYmIHByb2JlLmFkaikgaW5pdFZNTCgpCiAgZWxzZSB1c2VDc3NBbmltYXRpb25zID0gdmVuZG9yKHByb2JlLCAnYW5pbWF0aW9uJykKCiAgcmV0dXJuIFNwaW5uZXIKCn0pKTs=",
    "size": "10025"
}