{
    "namaFile": "pages\/perencanaan_v3\/rkbmd\/persediaanNew.php",
    "lastUpdate": "2018-04-03+13:19:10.04",
    "contentFile": "PD9waHAgDQpjbGFzcyBwZXJzZWRpYWFuTmV3T2JqICBleHRlbmRzIERhZnRhck9iajJ7DQogIHZhciAkUHJlZml4ID0gJ3BlcnNlZGlhYW5OZXcnOw0KICB2YXIgJGVsQ3VyclBhZ2U9IkhhbERlZmF1bHQiOw0KICB2YXIgJFNIT1dfQ0VLID0gVFJVRTsNCiAgdmFyICRUYmxOYW1lID0gInZpZXdfcmtibWQiOyAvL2RhZnRhcg0KICB2YXIgJFRibE5hbWVfSGFwdXMgPSAndGFiZWxfYW5nZ2FyYW4nOw0KICB2YXIgJE1heEZsdXNoID0gMTA7DQogIHZhciAkVGJsU3R5bGUgPSBhcnJheSggJ2tvcHRhYmxlJywgJ2NldGFrJywnY2V0YWsnKTsgLy9iZXJkYXNhciBtb2RlDQogIHZhciAkQ29sU3R5bGUgPSBhcnJheSggJ0dhcmlzRGFmdGFyJywgJ0dhcmlzQ2V0YWsnLCdHYXJpc0NldGFrJyk7DQogIHZhciAkS2V5RmllbGRzID0gYXJyYXkoJ2lkX2FuZ2dhcmFuJyk7DQogIHZhciAkRmllbGRTdW0gPSBhcnJheSgpOw0KICB2YXIgJFN1bVZhbHVlID0gYXJyYXkoKTsNCiAgdmFyICRGaWVsZFN1bV9DcDEgPSBhcnJheSggMTQsIDEzLCAxMyk7DQogIHZhciAkRmllbGRTdW1fQ3AyID0gYXJyYXkoIDEsIDEsIDEpOw0KICB2YXIgJGNoZWNrYm94X3Jvd3NwYW4gPSAzOw0KDQogIHZhciAkUGFnZUljb24gPSAnaW1hZ2VzL3BlcmVuY2FuYWFuX2ljby5wbmcnOw0KICB2YXIgJHBhZ2VQZXJIYWwgPScnOw0KICB2YXIgJGNldGFrX3hscz1UUlVFIDsNCiAgdmFyICRmaWxlTmFtZUV4Y2VsPSd1c3VsYW5zay54bHMnOw0KICB2YXIgJENldGFrX0p1ZHVsID0gJ0RhZnRhciBTdGFuZGFyIEtlYnV0dWhhbiBCYXJhbmcgTWFrc2ltYWwnOw0KICB2YXIgJENldGFrX01vZGU9MjsNCiAgdmFyICRDZXRha19XSURUSCA9ICczMGNtJzsNCiAgdmFyICRDZXRha19PdGhlckhUTUxIZWFkOw0KICB2YXIgJEZvcm1OYW1lID0gJ3BlcnNlZGlhYW5OZXdGb3JtJzsNCiAgdmFyICRrb2RlX3NrcGQgPSAnJzsNCiAgdmFyICRtb2R1bCA9ICJSS0JNRCI7DQogIHZhciAkamVuaXNGb3JtID0gIiI7DQogIHZhciAkdGFodW4gPSAiIjsNCiAgdmFyICRub21vclVydXQgPSAiIjsNCiAgdmFyICRqZW5pc0FuZ2dhcmFuID0gIiI7DQogIHZhciAkaWRUYWhhcCA9ICIiOw0KICB2YXIgJG5hbWFUYWhhcFRlcmFraGlyID0gIiI7DQogIHZhciAkbWFzYVRlcmFraGlyID0gIiI7DQogIHZhciAkY3VycmVudFRhaGFwID0gIiI7DQogICAgLy91bnR1ayB2aWV3DQogIHZhciAkdXJ1dFRlcmFraGlyID0gIiI7DQogIHZhciAkdXJ1dFNlYmVsdW1ueWEgPSAiIjsNCiAgdmFyICRqZW5pc0Zvcm1UZXJha2hpciA9ICIiOw0KICB2YXIgJHRhaGFwVGVyYWtoaXIgPSAiIjsNCiAgdmFyICR1c2VybmFtZSA9ICIiOw0KDQogIHZhciAkd2FqaWJWYWxpZGFzaSA9ICIiOw0KDQogIHZhciAkc3FsVmFsaWRhc2kgPSAiIjsNCg0KICB2YXIgJHByb3ZpbnNpID0gIiI7DQogIHZhciAka290YSA9ICIiOw0KICB2YXIgJHBlbmdlbG9sYUJhcmFuZyA9ICIiOw0KICB2YXIgJHBlamFiYXRQZW5nZWxvbGFCYXJhbmcgPSAiIjsNCiAgdmFyICRwZW5ndXJ1c1BlbmdlbG9sYUJhcmFuZyA9ICIiOw0KICB2YXIgJG5pcFBlbmdlbG9sYSA9ICIiOw0KICB2YXIgJG5pcFBlamFiYXQgPSAiIjsNCiAgdmFyICRuaXBQZW5ndXJ1cyA9IiI7DQoNCiAgdmFyICRzZXR0aW5nQW5nZ2FyYW4gPSAiIjsNCiAgLyp2YXIgJFBhZ2VUaXRsZSAgPSAiUktCTUQgUEVSU0VESUFBTiAkdGhpcy0+amVuaXNBbmdnYXJhbiBUQUhVTiAkdGhpcy0+dGFodW4iOw0KICB2YXIgJFBhZ2VUaXRsZSAgPSAiUktCTUQgUEVSU0VESUFBTiAkdGhpcy0+amVuaXNBbmdnYXJhbiBUQUhVTiAkdGhpcy0+dGFodW4iOyovDQogIC8vdW50dWsgdmlldw0KICB2YXIgJGtvbmRpc2lCYXJhbmcgPSAiYW5kIGYhPSAnMDEnIGFuZCBmIT0nMDInIGFuZCBmIT0nMDQnIGFuZCBmIT0nMDUnIGFuZCBmIT0nMDYnIGFuZCBmIT0nMDcnICI7DQogIHZhciAkcmVwb3J0VVJMMSA9ICJwYWdlcy5waHA\\\\/ICI8c3R5bGU+Lm5mbXQ1IHttc28tbnVtYmVyLWZvcm1hdDonXEAnO308L3N0eWxlPiI6IjxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiY3NzL3RlbXBsYXRlX2Nzcy5jc3NcIiB0eXBlPVwidGV4dC9jc3NcIiAvPiI7DQogICAgZWNobw0KICAgICAgIjxodG1sPg0KICAgICAgPGxpbmsgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2NzcycgaHJlZj0nYXNzZXRzL2Nzcy9ib290c3RyYXAubWluLmNzcyc+DQogICAgICA8bGluayByZWw9J3N0eWxlc2hlZXQnIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT0kZm9udEZhbWlseVtvcHRpb25fdmFsdWVdJz4NCiAgICAgIDxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M\/ZmFtaWx5PSRmb250TWVudWJhcltvcHRpb25fdmFsdWVdJz4NCiAgICAgIDxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M\\/Pg==",
    "size": "136084"
}