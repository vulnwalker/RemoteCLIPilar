{
    "namaFile": "js\/persediaan\/pelaporanPersediaan.js",
    "lastUpdate": "2018-09-27+16:46:51.24",
    "contentFile": "dmFyIHBlbGFwb3JhblBlcnNlZGlhYW5GaWx0ZXJTS1BEID0gbmV3IFNrcGRDbHMoewogIHByZWZpeDogInBlbGFwb3JhblBlcnNlZGlhYW4iLAogIGZvcm1OYW1lOiAicGVsYXBvcmFuUGVyc2VkaWFhbkZvcm0iLAogIHBpbGloVXJ1c2FuZnRlcjogZnVuY3Rpb24oKSB7CiAgICBwZWxhcG9yYW5QZXJzZWRpYWFuLmZpbHRlclJlbmRlcih0cnVlKTsKICB9LAogIHBpbGloQmlkYW5nQWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgcGVsYXBvcmFuUGVyc2VkaWFhbi5maWx0ZXJSZW5kZXIodHJ1ZSk7CiAgfSwKICBwaWxpaFVuaXRBZnRlcjogZnVuY3Rpb24oKSB7CiAgICBwZWxhcG9yYW5QZXJzZWRpYWFuLmZpbHRlclJlbmRlcih0cnVlKTsKICB9LAogIHBpbGloU3ViVW5pdEFmdGVyOiBmdW5jdGlvbigpIHsKICAgIHBlbGFwb3JhblBlcnNlZGlhYW4uZmlsdGVyUmVuZGVyKHRydWUpOwogIH0sCiAgcGlsaWhTZWtzaUFmdGVyOiBmdW5jdGlvbigpIHsKICAgIHBlbGFwb3JhblBlcnNlZGlhYW4uZmlsdGVyUmVuZGVyKHRydWUpOwogIH0KfSk7CnZhciBwZWxhcG9yYW5QZXJzZWRpYWFuID0gbmV3IERhZnRhck9iajIoewogIHByZWZpeDogInBlbGFwb3JhblBlcnNlZGlhYW4iLAogIHVybDogInBnUGVyc2VkaWFhbi5waHA\/UGc9cGVsYXBvcmFuUGVyc2VkaWFhbiIsCiAgZm9ybU5hbWU6ICJwZWxhcG9yYW5QZXJzZWRpYWFuRm9ybSIsCiAgcGVsYXBvcmFuUGVyc2VkaWFhbl9mb3JtOiAiMCIsIC8vZGVmYXVsdCBqcyBwZWxhcG9yYW5QZXJzZWRpYWFuCiAgbG9hZGluZzogZnVuY3Rpb24oKSB7CiAgICAvL2FsZXJ0KCdsb2FkaW5nJyk7CiAgICB0aGlzLnRvcEJhclJlbmRlcigpOwogICAgdGhpcy5maWx0ZXJSZW5kZXIoKTsKICAgIHRoaXMuZGFmdGFyUmVuZGVyKCk7CiAgICB0aGlzLnN1bUhhbFJlbmRlcigpOwogIH0sCiAgaGl0dW5nVWxhbmc6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgIGlmICgkKCIjZmlsdGVyVXJ1c2FuIikudmFsKCkgPT0gIjAwIikgewogICAgICBhbGVydCgiUGlsaWggVXJ1c2FuIik7CiAgICB9IGVsc2UgaWYgKCQoIiNmaWx0ZXJCaWRhbmciKS52YWwoKSA9PSAiMDAiKSB7CiAgICAgIGFsZXJ0KCJQaWxpaCBCaWRhbmciKTsKICAgIH0gZWxzZSBpZiAoJCgiI2ZpbHRlclNLUEQiKS52YWwoKSA9PSAiMDAiKSB7CiAgICAgIGFsZXJ0KCJQaWxpaCBTS1BEIik7CiAgICB9IGVsc2UgaWYgKCQoIiNmaWx0ZXJVbml0IikudmFsKCkgPT0gIjAwIikgewogICAgICBhbGVydCgiUGlsaWggVW5pdCIpOwogICAgfSBlbHNlIGlmICgkKCIjZmlsdGVyU3ViVW5pdCIpLnZhbCgpID09ICIwMDAiKSB7CiAgICAgIGFsZXJ0KCJQaWxpaCBTdWIgVW5pdCIpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGNvdmVyID0gdGhpcy5wcmVmaXggKyAiX2Zvcm1jb3ZlciI7CiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAiaGlkZGVuIjsKICAgICAgYWRkQ292ZXJQYWdlMihjb3ZlciwgMSwgdHJ1ZSwgZmFsc2UpOwogICAgICAkLmFqYXgoewogICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICBkYXRhOiAkKCIjIiArIHRoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogICAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9aGl0dW5nVWxhbmciLAogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICJhdXRvIjsKICAgICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgICBtZS5yZWZyZXNoTGlzdCh0cnVlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sCiAgdW5DbG9zZTogZnVuY3Rpb24odGlwZVVuQ2xvc2UpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybWNvdmVyIjsKICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAiaGlkZGVuIjsKICAgIGFkZENvdmVyUGFnZTIoY292ZXIsIDMwLCB0cnVlLCBmYWxzZSk7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCkrIiZ0aXBlVW5DbG9zZT0iK3RpcGVVbkNsb3NlLAogICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPXVuQ2xvc2UiLAogICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgZGVsRWxlbShjb3Zlcik7CiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICJhdXRvIjsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICBhbGVydCgiVW4gQ2xvc2Ugc3Vrc2VzIikKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfSwKICBmaWx0ZXJSZW5kZXJBZnRlcjogZnVuY3Rpb24oKSB7CiAgICAvLyB0aGlzLmRhZnRhclJlbmRlcigpOwogIH0sCiAgTGFwb3JhbjogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgdmFyIGNvdmVyID0gdGhpcy5wcmVmaXggKyAiX2Zvcm1jb3ZlciI7CiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICBpZiAobWUuc2F0dWFuX2Zvcm0gPT0gMCkgewogICAgICAvL2JhcnUgZGFyaSBzYXR1YW4KICAgICAgYWRkQ292ZXJQYWdlMihjb3ZlciwgMSwgdHJ1ZSwgZmFsc2UpOwogICAgfSBlbHNlIHsKICAgICAgLy9iYXJ1IGRhcmkgYmFyYW5nCiAgICAgIGFkZENvdmVyUGFnZTIoY292ZXIsIDk5OSwgdHJ1ZSwgZmFsc2UpOwogICAgfQogICAgJC5hamF4KHsKICAgICAgdHlwZTogIlBPU1QiLAogICAgICBkYXRhOiAkKCIjIiArIHRoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPUxhcG9yYW4iLAogICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVsRWxlbShjb3Zlcik7CiAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9LAogIEhpdHVuZzogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgaWYgKCQoIiNmaWx0ZXJVcnVzYW4iKS52YWwoKSA9PSAiMDAiKSB7CiAgICAgIGFsZXJ0KCJQaWxpaCBVcnVzYW4iKTsKICAgIH0gZWxzZSBpZiAoJCgiI2ZpbHRlckJpZGFuZyIpLnZhbCgpID09ICIwMCIpIHsKICAgICAgYWxlcnQoIlBpbGloIEJpZGFuZyIpOwogICAgfSBlbHNlIGlmICgkKCIjZmlsdGVyU0tQRCIpLnZhbCgpID09ICIwMCIpIHsKICAgICAgYWxlcnQoIlBpbGloIFNLUEQiKTsKICAgIH0gZWxzZSBpZiAoJCgiI2ZpbHRlclVuaXQiKS52YWwoKSA9PSAiMDAiKSB7CiAgICAgIGFsZXJ0KCJQaWxpaCBVbml0Iik7CiAgICB9IGVsc2UgaWYgKCQoIiNmaWx0ZXJTdWJVbml0IikudmFsKCkgPT0gIjAwMCIpIHsKICAgICAgYWxlcnQoIlBpbGloIFN1YiBVbml0Iik7CiAgICB9IGVsc2UgewogICAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybWNvdmVyIjsKICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICJoaWRkZW4iOwogICAgICBhZGRDb3ZlclBhZ2UyKGNvdmVyLCAxMCwgdHJ1ZSwgZmFsc2UpOwogICAgICAkLmFqYXgoewogICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICBkYXRhOiAkKCIjIiArIHRoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogICAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9SGl0dW5nIiwKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgfSwKICBDbG9zaW5nOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICBpZiAoJCgiI2ZpbHRlclVydXNhbiIpLnZhbCgpID09ICIwMCIpIHsKICAgICAgYWxlcnQoIlBpbGloIFVydXNhbiIpOwogICAgfSBlbHNlIGlmICgkKCIjZmlsdGVyQmlkYW5nIikudmFsKCkgPT0gIjAwIikgewogICAgICBhbGVydCgiUGlsaWggQmlkYW5nIik7CiAgICB9IGVsc2UgaWYgKCQoIiNmaWx0ZXJTS1BEIikudmFsKCkgPT0gIjAwIikgewogICAgICBhbGVydCgiUGlsaWggU0tQRCIpOwogICAgfSBlbHNlIGlmICgkKCIjZmlsdGVyVW5pdCIpLnZhbCgpID09ICIwMCIpIHsKICAgICAgYWxlcnQoIlBpbGloIFVuaXQiKTsKICAgIH0gZWxzZSBpZiAoJCgiI2ZpbHRlclN1YlVuaXQiKS52YWwoKSA9PSAiMDAwIikgewogICAgICBhbGVydCgiUGlsaWggU3ViIFVuaXQiKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBjb3ZlciA9IHRoaXMucHJlZml4ICsgIl9mb3JtY292ZXIiOwogICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICAgIGFkZENvdmVyUGFnZTIoY292ZXIsIDEwLCB0cnVlLCBmYWxzZSk7CiAgICAgICQuYWpheCh7CiAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1DbG9zaW5nIiwKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY292ZXIpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgICAgICBpZihyZXNwLmVyciA9PSAiRGF0YSBzdWRhaCBkaSB0dXR1cCBidWt1ICEiKXsKICAgICAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgIGlmKGNvbmZpcm0ocmVzcC5lcnIpKXsKICAgICAgICAgICAgICAgIGlmKHJlc3AuZXJyID09ICJEYXRhIHNlbWVzdGVyIHNhdHUgc3VkYWggZGkgY2xvc2luZywgYmF0YWxrYW4gY2xvc2luZyA\\/UGc9cGVsYXBvcmFuUGVyc2VkaWFhbl9pbnMmc2twZD0nK3NrcGQrIiZub21vcj0iK3Jlc3AuY29udGVudC5ub21vcjsKICAvLyAJCQkJCWFGb3JtLnRhcmdldD0nX2JsYW5rJzsKICAvLyAJCQkJCWFGb3JtLnN1Ym1pdCgpOwogIC8vIAkJCQkJYUZvcm0udGFyZ2V0PScnOwogIC8vIAkJCQl9ZWxzZXsKICAvLyAJCQkJCWFsZXJ0KHJlc3AuZXJyKTsKICAvLyAJCQkJfQoKICAvLyAJCQkgfQogIC8vIAkJfSk7CgogIC8vIAl9CgogIC8vIH0sCiAgSW5mbzogZnVuY3Rpb24oKSB7CiAgICB2YXIgYUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmZvcm1OYW1lKTsKICAgICQuYWpheCh7CiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9aHVibGEiLAogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICB2YXIga29kZVJlayA9IHJlc3AuY29udGVudC5rb2RlUmVrOwogICAgICAgICAgYUZvcm0uYWN0aW9uID0gInBnUGVyc2VkaWFhbi5waHA\/UGc9YWxva2FzaURwYSI7CiAgICAgICAgICBhRm9ybS50YXJnZXQgPSAiX2JsYW5rIjsKICAgICAgICAgIGFGb3JtLnN1Ym1pdCgpOwogICAgICAgICAgYUZvcm0udGFyZ2V0ID0gIiI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0sCiAgdW5sb2NrRmluZFJla2VuaW5nOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICBpZiAoJCgiI2NtYkplbmlzUktBRm9ybSIpLnZhbCgpID09ICIiKSB7CiAgICAgICQoIiNmaW5kUmVrZW5pbmciKS5hdHRyKCJkaXNhYmxlZCIsIHRydWUpOwogICAgfSBlbHNlIHsKICAgICAgJCgiI2ZpbmRSZWtlbmluZyIpLmF0dHIoImRpc2FibGVkIiwgZmFsc2UpOwogICAgICAkKCIjZmluZFJla2VuaW5nIikuYXR0cigKICAgICAgICAib25jbGljayIsCiAgICAgICAgInBlbGFwb3JhblBlcnNlZGlhYW4uZmluZFJla2VuaW5nKCciICsKICAgICAgICAgICQoIiNjbWJKZW5pc1JLQUZvcm0iKS52YWwoKSArCiAgICAgICAgICAiJyk7IgogICAgICApOwogICAgfQogIH0sCiAgRWRpdDogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgZXJybXNnID0gdGhpcy5DZWtDaGVja2JveCgpOwoKICAgIGlmIChlcnJtc2cgPT0gIiIpIHsKICAgICAgdmFyIGJveCA9IHRoaXMuR2V0Q2J4Q2hlY2tlZCgpOwogICAgICB2YXIgYUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmZvcm1OYW1lKTsKICAgICAgJC5hamF4KHsKICAgICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPWVkaXRUYWIiLAogICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICBkYXRhOiAkKCIjIiArIHRoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgICBhRm9ybS5hY3Rpb24gPQogICAgICAgICAgICAgICJwZ1BlcnNlZGlhYW4ucGhwP1BnPXBlbGFwb3JhblBlcnNlZGlhYW5faW5zJnNrcGQ9IiArCiAgICAgICAgICAgICAgcmVzcC5jb250ZW50LnNrcGQgKwogICAgICAgICAgICAgICImbm9tb3I9IiArCiAgICAgICAgICAgICAgcmVzcC5jb250ZW50Lm5vbW9yOwogICAgICAgICAgICBhRm9ybS50YXJnZXQgPSAiX2JsYW5rIjsKICAgICAgICAgICAgYUZvcm0uc3VibWl0KCk7CiAgICAgICAgICAgIGFGb3JtLnRhcmdldCA9ICIiOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBhbGVydChlcnJtc2cpOwogICAgfQogIH0sCgogIGJhbnR1Vm9sdW1lQmFyYW5nOiBmdW5jdGlvbihpZCkgewogICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoCiAgICAgICJiYW50dVZvbHVtZUJhcmFuZyIgKyBpZAogICAgKS5pbm5lckhUTUwgPSBwZWxhcG9yYW5QZXJzZWRpYWFuLmZvcm1hdEN1cnJlbmN5MigKICAgICAgJCgiI3ZvbHVtZUJhcmFuZyIgKyBpZCkudmFsKCkKICAgICk7CiAgICB2YXIgaGFzaWxLYWxpID0KICAgICAgTnVtYmVyKCQoIiN2b2x1bWVCYXJhbmciICsgaWQpLnZhbCgpKSAqCiAgICAgIE51bWJlcigkKCIjc2F0dWFuSGFyZ2EiICsgaWQpLnZhbCgpKTsKICAgICQoIiNzcGFuSnVtbGFoSGFyZ2EiICsgaWQpLnRleHQoCiAgICAgIHBlbGFwb3JhblBlcnNlZGlhYW4uZm9ybWF0Q3VycmVuY3koaGFzaWxLYWxpKQogICAgKTsKICB9LAogIGJhbnR1U2F0dWFuSGFyZ2E6IGZ1bmN0aW9uKGlkKSB7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgKICAgICAgImJhbnR1U2F0dWFuSGFyZ2EiICsgaWQKICAgICkuaW5uZXJIVE1MID0gcGVsYXBvcmFuUGVyc2VkaWFhbi5mb3JtYXRDdXJyZW5jeSgKICAgICAgJCgiI3NhdHVhbkhhcmdhIiArIGlkKS52YWwoKQogICAgKTsKICAgIHZhciBoYXNpbEthbGkgPQogICAgICBOdW1iZXIoJCgiI3ZvbHVtZUJhcmFuZyIgKyBpZCkudmFsKCkpICoKICAgICAgTnVtYmVyKCQoIiNzYXR1YW5IYXJnYSIgKyBpZCkudmFsKCkpOwogICAgJCgiI3NwYW5KdW1sYWhIYXJnYSIgKyBpZCkudGV4dCgKICAgICAgcGVsYXBvcmFuUGVyc2VkaWFhbi5mb3JtYXRDdXJyZW5jeShoYXNpbEthbGkpCiAgICApOwogIH0sCgogIGZvcm1hdEN1cnJlbmN5OiBmdW5jdGlvbihudW0pIHsKICAgIG51bSA9IG51bS50b1N0cmluZygpLnJlcGxhY2UoL1wkfFwsL2csICIiKTsKICAgIGlmIChpc05hTihudW0pKSBudW0gPSAiMCI7CiAgICBzaWduID0gbnVtID09IChudW0gPSBNYXRoLmFicyhudW0pKTsKICAgIG51bSA9IE1hdGguZmxvb3IobnVtICogMTAwICsgMC41MDAwMDAwMDAwMSk7CiAgICBjZW50cyA9IG51bSAlIDEwMDsKICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gMTAwKS50b1N0cmluZygpOwogICAgaWYgKGNlbnRzIDwgMTApIGNlbnRzID0gIjAiICsgY2VudHM7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE1hdGguZmxvb3IoKG51bS5sZW5ndGggLSAoMSArIGkpKSAvIDMpOyBpKyspCiAgICAgIG51bSA9CiAgICAgICAgbnVtLnN1YnN0cmluZygwLCBudW0ubGVuZ3RoIC0gKDQgKiBpICsgMykpICsKICAgICAgICAiLiIgKwogICAgICAgIG51bS5zdWJzdHJpbmcobnVtLmxlbmd0aCAtICg0ICogaSArIDMpKTsKICAgIHJldHVybiAoc2lnbiA\/ICIiIDogIi0iKSArICIiICsgbnVtICsgIiwiICsgY2VudHM7CiAgfSwKICBmb3JtYXRDdXJyZW5jeTI6IGZ1bmN0aW9uKG51bSkgewogICAgbnVtID0gbnVtLnRvU3RyaW5nKCkucmVwbGFjZSgvXCR8XCwvZywgIiIpOwogICAgaWYgKGlzTmFOKG51bSkpIG51bSA9ICIwIjsKICAgIHNpZ24gPSBudW0gPT0gKG51bSA9IE1hdGguYWJzKG51bSkpOwogICAgbnVtID0gTWF0aC5mbG9vcihudW0gKiAxMDAgKyAwLjUwMDAwMDAwMDAxKTsKICAgIGNlbnRzID0gbnVtICUgMTAwOwogICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyAxMDApLnRvU3RyaW5nKCk7CiAgICBpZiAoY2VudHMgPCAxMCkgY2VudHMgPSAiMCIgKyBjZW50czsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTWF0aC5mbG9vcigobnVtLmxlbmd0aCAtICgxICsgaSkpIC8gMyk7IGkrKykKICAgICAgbnVtID0KICAgICAgICBudW0uc3Vic3RyaW5nKDAsIG51bS5sZW5ndGggLSAoNCAqIGkgKyAzKSkgKwogICAgICAgICIuIiArCiAgICAgICAgbnVtLnN1YnN0cmluZyhudW0ubGVuZ3RoIC0gKDQgKiBpICsgMykpOwogICAgcmV0dXJuIChzaWduID8gIiIgOiAiLSIpICsgIiIgKyBudW07CiAgfSwKCiAgYmFudHU6IGZ1bmN0aW9uKCkgewogICAgJCgiI2JhbnR1IikudGV4dCgKICAgICAgIlJwLiAiICsgcGVsYXBvcmFuUGVyc2VkaWFhbi5mb3JtYXRDdXJyZW5jeSgkKCIjaGFyZ2FTYXR1YW4iKS52YWwoKSkKICAgICk7CiAgfSwKCiAgSGl0dW5nOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CgogICAgdmFyIGNvdmVyID0gdGhpcy5wcmVmaXggKyAiX2Zvcm1jb3ZlciI7CiAgICBhZGRDb3ZlclBhZ2UyKGNvdmVyLCAxLCB0cnVlLCBmYWxzZSk7CiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9SGl0dW5nIiwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvdmVyKS5pbm5lckhUTUwgPSByZXNwLmNvbnRlbnQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICJhdXRvIjsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0sCgogIGV4ZWN1dGVIaXR1bmc6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgIHZhciBjb3ZlciA9IHRoaXMucHJlZml4ICsgIl9mb3JtY292ZXJMb2FkaW5nIjsKICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAiaGlkZGVuIjsKICAgIGFkZENvdmVyUGFnZTIoY292ZXIsIDE1LCB0cnVlLCBmYWxzZSk7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5wcmVmaXggKyAiX2Zvcm0iKS5zZXJpYWxpemUoKSwKICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1leGVjdXRlSGl0dW5nIiwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgIHZhciBjb3ZlcjIgPSAicGVsYXBvcmFuUGVyc2VkaWFhbl9mb3JtY292ZXJfbG9hZCI7CiAgICAgICAgICBhZGRDb3ZlclBhZ2UyKGNvdmVyMiwgMjAsIHRydWUsIGZhbHNlKTsKICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAiaGlkZGVuIjsKICAgICAgICAgICQoIiNsb2dIaXR1bmciKS50ZXh0KCIiKTsKICAgICAgICAgIG1lLnByb3Nlc0hpdHVuZygKICAgICAgICAgICAgMCwKICAgICAgICAgICAgImJlbG9tIgogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfSwKICBleGVjdXRlQ2xvc2luZzogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgdmFyIGNvdmVyID0gdGhpcy5wcmVmaXggKyAiX2Zvcm1jb3ZlckxvYWRpbmciOwogICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICJoaWRkZW4iOwogICAgYWRkQ292ZXJQYWdlMihjb3ZlciwgMTUsIHRydWUsIGZhbHNlKTsKICAgICQuYWpheCh7CiAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgZGF0YTogJCgiIyIgKyB0aGlzLnByZWZpeCArICJfZm9ybSIpLnNlcmlhbGl6ZSgpLAogICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPWV4ZWN1dGVDbG9zaW5nIiwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgIHZhciBjb3ZlcjIgPSAicGVsYXBvcmFuUGVyc2VkaWFhbl9mb3JtY292ZXJfbG9hZCI7CiAgICAgICAgICBhZGRDb3ZlclBhZ2UyKGNvdmVyMiwgMjAsIHRydWUsIGZhbHNlKTsKICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAiaGlkZGVuIjsKICAgICAgICAgICQoIiNsb2dIaXR1bmciKS50ZXh0KCIiKTsKICAgICAgICAgIG1lLnByb3Nlc0Nsb3NpbmcoCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgICJiZWxvbSIKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0sCgogIHByb3Nlc0hpdHVuZzogZnVuY3Rpb24odXJ1dGFuLCBzdGF0dXNTZWxlc2FpKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgdmFyIGNvdmVyID0gdGhpcy5wcmVmaXggKyAiX2Zvcm1jb3ZlciI7CiAgICB2YXIgb2JqID0gSlNPTi5wYXJzZSgkKCIjYXJyYXlLb2RlQmFyYW5nIikudmFsKCkpOwogICAgaWYgKHN0YXR1c1NlbGVzYWkgIT0gIk9LIikgewogICAgICAkLmFqYXgoewogICAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgICBkYXRhOiB7CiAgICAgICAgICBub21vclBvc3Q6IHVydXRhbiwKICAgICAgICAgIGlkSGl0dW5nOiBvYmpbdXJ1dGFuXSAsCiAgICAgICAgICBqdW1sYWhEYXRhOiAkKCIjbGVuZ3RoUHJvY2Nlc3MiKS52YWwoKSwKICAgICAgICAgIC8vIGxvZ0hpdHVuZyA6ICQoIiNsb2dIaXR1bmciKS52YWwoKSwKICAgICAgICAgIGtvZGVTS1BEIDogJCgiI2tvZGVTS1BEIikudmFsKCksCiAgICAgICAgICBmaWx0ZXJQZXJpb2RlIDogJCgiI2ZpbHRlclBlcmlvZGUiKS52YWwoKSwKICAgICAgICB9LAogICAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9cHJvc2VzSGl0dW5nIiwKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICAgdXJ1dGFuID0gdXJ1dGFuICsgMTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0YXR1c3R4dCIpLnN0eWxlLndpZHRoID0KICAgICAgICAgICAgICByZXNwLmNvbnRlbnQucGVyc2VuICsgIiUiOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RhdHVzdHh0IikuaW5uZXJIVE1MID0KICAgICAgICAgICAgICByZXNwLmNvbnRlbnQucGVyc2VuICsgIiUiOwogICAgICAgICAgICAgICQoJyNsb2dIaXR1bmcnKS52YWwoJCgnI2xvZ0hpdHVuZycpLnZhbCgpKydcbicrcmVzcC5jb250ZW50LmxvZ0hpdHVuZyk7CiAgICAgICAgICAgICAgaWYocmVzcC5jb250ZW50LmlkUGVuZ2VsdWFyYW5EaXN0cmlidXNpICE9ICcnKXsKICAgICAgICAgICAgICAgICQoIiNpZFBlbmdlbHVhcmFuRGlzdHJpYnVzaSIpLnZhbCgkKCIjaWRQZW5nZWx1YXJhbkRpc3RyaWJ1c2kiKS52YWwoKSsiOyIrcmVzcC5jb250ZW50LmlkUGVuZ2VsdWFyYW5EaXN0cmlidXNpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIHRleHRBcmVhT2JqZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ0hpdHVuZycpOwogICAgICAgICAgICAgIHRleHRBcmVhT2JqZWN0LnNjcm9sbFRvcD10ZXh0QXJlYU9iamVjdC5zY3JvbGxIZWlnaHQ7CiAgICAgICAgICAgICAgbWUucHJvc2VzSGl0dW5nKAogICAgICAgICAgICAgICAgdXJ1dGFuLAogICAgICAgICAgICAgICAgcmVzcC5jb250ZW50LnN0YXR1c1NlbGVzYWksCiAgICAgICAgICAgICAgKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICAgICAgJCgnI2xvZ0hpdHVuZycpLnZhbChyZXNwLmVycik7CiAgICAgICAgICAgIGRlbEVsZW0oInBlbGFwb3JhblBlcnNlZGlhYW5fZm9ybWNvdmVyX2xvYWQiKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgaWYoJCgiI2lkUGVuZ2VsdWFyYW5EaXN0cmlidXNpIikudmFsKCkgIT0nJyl7CiAgICAgICAgcGVsYXBvcmFuUGVyc2VkaWFhbi5wcm9zZXNSZUNvdW50KDApOwogICAgICB9ZWxzZXsKICAgICAgICBhbGVydCgiSGl0dW5nIFNlbGVzYWkgISIpOwogICAgICAgIGRlbEVsZW0oInBlbGFwb3JhblBlcnNlZGlhYW5fZm9ybWNvdmVyX2xvYWQiKTsKICAgICAgfQoKCiAgICB9CiAgfSwKICBwcm9zZXNSZUNvdW50OiBmdW5jdGlvbih1cnV0YW4pIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybWNvdmVyIjsKICAgIHZhciBvYmogPSAkKCIjaWRQZW5nZWx1YXJhbkRpc3RyaWJ1c2kiKS52YWwoKS5zcGxpdCgnOycpOwogICAgaWYgKHVydXRhbiAhPSBvYmoubGVuZ3RoKSB7CiAgICAgICQuYWpheCh7CiAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgIGRhdGE6IHsKICAgICAgICAgIG5vbW9yUG9zdDogdXJ1dGFuLAogICAgICAgICAgaWRLYXJ0dVBlcnNlZGlhYW46IG9ialt1cnV0YW5dICwKICAgICAgICAgIGZpbHRlclBlcmlvZGUgOiAkKCIjZmlsdGVyUGVyaW9kZSIpLnZhbCgpLAogICAgICAgIH0sCiAgICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1wcm9zZXNSZUNvdW50IiwKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICAgdXJ1dGFuID0gdXJ1dGFuICsgMTsKICAgICAgICAgICAgICBtZS5wcm9zZXNSZUNvdW50KAogICAgICAgICAgICAgICAgdXJ1dGFuLAogICAgICAgICAgICAgICk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgICAgICQoJyNsb2dIaXR1bmcnKS52YWwocmVzcC5lcnIpOwogICAgICAgICAgICBkZWxFbGVtKCJwZWxhcG9yYW5QZXJzZWRpYWFuX2Zvcm1jb3Zlcl9sb2FkIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgICAgYWxlcnQoIkhpdHVuZyBTZWxlc2FpICEiKTsKICAgICAgICBkZWxFbGVtKCJwZWxhcG9yYW5QZXJzZWRpYWFuX2Zvcm1jb3Zlcl9sb2FkIik7CiAgICB9CiAgfSwKICBwcm9zZXNDbG9zaW5nOiBmdW5jdGlvbih1cnV0YW4sIHN0YXR1c1NlbGVzYWkpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybWNvdmVyIjsKICAgIHZhciBvYmogPSBKU09OLnBhcnNlKCQoIiNhcnJheUtvZGVCYXJhbmciKS52YWwoKSk7CiAgICBpZiAoc3RhdHVzU2VsZXNhaSAhPSAiT0siKSB7CiAgICAgICQuYWpheCh7CiAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgIGRhdGE6IHsKICAgICAgICAgIG5vbW9yUG9zdDogdXJ1dGFuLAogICAgICAgICAgaWRDbG9zaW5nOiBvYmpbdXJ1dGFuXSAsCiAgICAgICAgICBqdW1sYWhEYXRhOiAkKCIjbGVuZ3RoUHJvY2Nlc3MiKS52YWwoKSwKICAgICAgICAgIC8vIGxvZ0Nsb3NpbmcgOiAkKCIjbG9nQ2xvc2luZyIpLnZhbCgpLAogICAgICAgICAga29kZVNLUEQgOiAkKCIja29kZVNLUEQiKS52YWwoKSwKICAgICAgICAgIGZpbHRlclBlcmlvZGUgOiAkKCIjZmlsdGVyUGVyaW9kZSIpLnZhbCgpLAogICAgICAgIH0sCiAgICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1wcm9zZXNDbG9zaW5nIiwKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICAgdXJ1dGFuID0gdXJ1dGFuICsgMTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0YXR1c3R4dCIpLnN0eWxlLndpZHRoID0KICAgICAgICAgICAgICByZXNwLmNvbnRlbnQucGVyc2VuICsgIiUiOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RhdHVzdHh0IikuaW5uZXJIVE1MID0KICAgICAgICAgICAgICByZXNwLmNvbnRlbnQucGVyc2VuICsgIiUiOwogICAgICAgICAgICAgICQoJyNsb2dDbG9zaW5nJykudmFsKCQoJyNsb2dDbG9zaW5nJykudmFsKCkrJ1xuJytyZXNwLmNvbnRlbnQubG9nQ2xvc2luZyk7CiAgICAgICAgICAgICAgdmFyIHRleHRBcmVhT2JqZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ0Nsb3NpbmcnKTsKICAgICAgICAgICAgICB0ZXh0QXJlYU9iamVjdC5zY3JvbGxUb3A9dGV4dEFyZWFPYmplY3Quc2Nyb2xsSGVpZ2h0OwogICAgICAgICAgICAgIG1lLnByb3Nlc0Nsb3NpbmcoCiAgICAgICAgICAgICAgICB1cnV0YW4sCiAgICAgICAgICAgICAgICByZXNwLmNvbnRlbnQuc3RhdHVzU2VsZXNhaSwKICAgICAgICAgICAgICApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgICAgICAkKCcjbG9nQ2xvc2luZycpLnZhbChyZXNwLmVycik7CiAgICAgICAgICAgIGRlbEVsZW0oInBlbGFwb3JhblBlcnNlZGlhYW5fZm9ybWNvdmVyX2xvYWQiKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgYWxlcnQoIkNsb3NpbmcgU2VsZXNhaSAhIik7CiAgICAgIGRlbEVsZW0oInBlbGFwb3JhblBlcnNlZGlhYW5fZm9ybWNvdmVyX2xvYWQiKTsKCiAgICB9CiAgfSwKCiAgVXBkYXRlUG9zdGluZ0Jlcmhhc2lsOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5wcmVmaXggKyAiX2Zvcm0iKS5zZXJpYWxpemUoKSwKICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1CZXJoYXNpbFBvc3RpbmciLAogICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgIGlmIChyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgYWxlcnQoIkJlcmhhc2lsIE1lbXBvc3RpbmcgRGF0YSAhIik7CgogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiBteUZ1bmN0aW9uUGVyc2VuKCkgewogICAgICAgICAgICBtZS5DbG9zZSgpOwogICAgICAgICAgICBtZS5yZWZyZXNoTGlzdCgpOwogICAgICAgICAgfSwgMTExKTsKICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gbXlGdW5jdGlvblBlcnNlbigpIHsKICAgICAgICAgICAgZGVsRWxlbSgicGVsYXBvcmFuUGVyc2VkaWFhbl9mb3JtY292ZXJfbG9hZCIpOwogICAgICAgICAgfSwgNTAwKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWxlcnQocmVzcC5lcnIpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfSwKCiAgdXJ1c2FuQ2hhbmdlZDogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgJC5hamF4KHsKICAgICAgdHlwZTogIlBPU1QiLAogICAgICBkYXRhOiAkKCIjIiArIHRoaXMucHJlZml4ICsgIl9mb3JtIikuc2VyaWFsaXplKCksCiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9dXJ1c2FuQ2hhbmdlZCIsCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAkKCIjY21iQmlkYW5nIikuaHRtbChyZXNwLmNvbnRlbnQuY21iQmlkYW5nKTsKICAgICAgICAgICQoIiNjbWJTS1BEIikuaHRtbChyZXNwLmNvbnRlbnQuY21iU0tQRCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0sCiAgYmlkYW5nQ2hhbmdlZDogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOwogICAgJC5hamF4KHsKICAgICAgdHlwZTogIlBPU1QiLAogICAgICBkYXRhOiAkKCIjIiArIHRoaXMucHJlZml4ICsgIl9mb3JtIikuc2VyaWFsaXplKCksCiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9YmlkYW5nQ2hhbmdlZCIsCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAkKCIjY21iU0tQRCIpLmh0bWwocmVzcC5jb250ZW50LmNtYlNLUEQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9LAogIGdDaGFuZ2VkOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5wcmVmaXggKyAiX2Zvcm0iKS5zZXJpYWxpemUoKSwKICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1nQ2hhbmdlZCIsCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAkKCIjY21iSCIpLmh0bWwocmVzcC5jb250ZW50LmNtYkgpOwogICAgICAgICAgJCgiI2NtYkkiKS5odG1sKHJlc3AuY29udGVudC5jbWJJKTsKICAgICAgICAgICQoIiNjbWJKIikuaHRtbChyZXNwLmNvbnRlbnQuY21iSik7CiAgICAgICAgICAkKCIjY21iSjEiKS5odG1sKHJlc3AuY29udGVudC5jbWJKMSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0sCiAgaENoYW5nZWQ6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgICQuYWpheCh7CiAgICAgIHR5cGU6ICJQT1NUIiwKICAgICAgZGF0YTogJCgiIyIgKyB0aGlzLnByZWZpeCArICJfZm9ybSIpLnNlcmlhbGl6ZSgpLAogICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPWhDaGFuZ2VkIiwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICQoIiNjbWJJIikuaHRtbChyZXNwLmNvbnRlbnQuY21iSSk7CiAgICAgICAgICAkKCIjY21iSiIpLmh0bWwocmVzcC5jb250ZW50LmNtYkopOwogICAgICAgICAgJCgiI2NtYkoxIikuaHRtbChyZXNwLmNvbnRlbnQuY21iSjEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9LAogIGlDaGFuZ2VkOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5wcmVmaXggKyAiX2Zvcm0iKS5zZXJpYWxpemUoKSwKICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1pQ2hhbmdlZCIsCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAkKCIjY21iSiIpLmh0bWwocmVzcC5jb250ZW50LmNtYkopOwogICAgICAgICAgJCgiI2NtYkoxIikuaHRtbChyZXNwLmNvbnRlbnQuY21iSjEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydChyZXNwLmVycik7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9LAogIGpDaGFuZ2VkOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5wcmVmaXggKyAiX2Zvcm0iKS5zZXJpYWxpemUoKSwKICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1qQ2hhbmdlZCIsCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgaWYgKHJlc3AuZXJyID09ICIiKSB7CiAgICAgICAgICAkKCIjY21iSjEiKS5odG1sKHJlc3AuY29udGVudC5jbWJKMSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0sCiAgY291bnRUb3RhbEhhcmdhOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB2YXIgY292ZXIgPSB0aGlzLnByZWZpeCArICJfZm9ybWNvdmVyIjsKICAgIGFkZENvdmVyUGFnZTIoY292ZXIsIDEwLCB0cnVlLCBmYWxzZSk7CiAgICAkLmFqYXgoewogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9Y291bnRUb3RhbEhhcmdhIiwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgIGRlbEVsZW0oY292ZXIpOwogICAgICAgIHZhciByZXNwID0gZXZhbCgiKCIgKyBkYXRhICsgIikiKTsKICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICQoIiN0b3RhbEhhcmdhIikudGV4dChyZXNwLmNvbnRlbnQudG90YWxIYXJnYSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0KfSk7Cg==",
    "size": "29452"
}