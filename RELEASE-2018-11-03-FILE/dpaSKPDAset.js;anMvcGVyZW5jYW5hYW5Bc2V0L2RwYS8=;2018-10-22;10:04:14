{
    "namaFile": "js\/perencanaanAset\/dpa\/dpaSKPDAset.js",
    "lastUpdate": "2018-10-22+10:04:14.58",
    "contentFile": "dmFyIGRwYVNLUERBc2V0RmlsdGVyU0tQRCA9IG5ldyBTa3BkQ2xzKHsKICBwcmVmaXg6ICJkcGFTS1BEQXNldCIsCiAgZm9ybU5hbWU6ICJkcGFTS1BEQXNldEZvcm0iLAoKICBwaWxpaFVydXNhbmZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgLy8gZHBhU0tQREFzZXQucmVmcmVzaExpc3QodHJ1ZSk7CiAgICBkcGFTS1BEQXNldC5maWx0ZXJSZW5kZXIoKTsKICB9LAogIHBpbGloQmlkYW5nQWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgLy8gZHBhU0tQREFzZXQucmVmcmVzaExpc3QodHJ1ZSk7CiAgICBkcGFTS1BEQXNldC5maWx0ZXJSZW5kZXIoKTsKICB9LAogIHBpbGloVW5pdEFmdGVyOiBmdW5jdGlvbigpIHsKICAgIC8vIGRwYVNLUERBc2V0LnJlZnJlc2hMaXN0KHRydWUpOwogICAgZHBhU0tQREFzZXQuZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwaWxpaFN1YlVuaXRBZnRlcjogZnVuY3Rpb24oKSB7CiAgICAvLyBkcGFTS1BEQXNldC5yZWZyZXNoTGlzdCh0cnVlKTsKICAgIGRwYVNLUERBc2V0LmZpbHRlclJlbmRlcigpOwogIH0sCiAgcGlsaWhTZWtzaUFmdGVyOiBmdW5jdGlvbigpIHsKICAgIC8vIGRwYVNLUERBc2V0LnJlZnJlc2hMaXN0KHRydWUpOwogICAgZHBhU0tQREFzZXQuZmlsdGVyUmVuZGVyKCk7CiAgfSwKICBwcm9ncmFtQ2hhbmdlZDogZnVuY3Rpb24oKSB7CiAgICAvLyBya2FTS1BEMjIxLnJlZnJlc2hMaXN0KHRydWUpOwogICAgZHBhU0tQREFzZXQuZmlsdGVyUmVuZGVyKCk7CiAgfQp9KTsKdmFyIGRwYVNLUERBc2V0ID0gbmV3IERhZnRhck9iajIoewogIHByZWZpeDogImRwYVNLUERBc2V0IiwKICB1cmw6ICJwYWdlcy5waHA\/UGc9ZHBhU0tQREFzZXQiLAogIGZvcm1OYW1lOiAiZHBhU0tQREFzZXRGb3JtIiwKICBkcGFTS1BEQXNldF9mb3JtOiAiMCIsIC8vZGVmYXVsdCBqcyBkcGFTS1BEQXNldAogIGxvYWRpbmc6IGZ1bmN0aW9uKCkgewogICAgLy9hbGVydCgnbG9hZGluZycpOwogICAgdGhpcy50b3BCYXJSZW5kZXIoKTsKICAgIHRoaXMuZmlsdGVyUmVuZGVyKCk7CiAgICB0aGlzLmRhZnRhclJlbmRlcigpOwogICAgdGhpcy5zdW1IYWxSZW5kZXIoKTsKICB9LAogIHRvcEJhclJlbmRlcjogZnVuY3Rpb24oKXsKICAgIHZhciBtZT10aGlzOwogICAgLy9yZW5kZXIgc3VidGl0bGUKICAgICQuYWpheCh7CiAgICAgIHVybDogdGhpcy51cmwrJyZ0aXBlPXN1YnRpdGxlJywKICAgICAgdHlwZTonUE9TVCcsCiAgICAgIGRhdGE6JCgnIycrdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWUucHJlZml4KydfY29udF90aXRsZScpLmlubmVySFRNTCA9IHJlc3AuY29udGVudDsKICAgICAgICBtZS50b3BCYXJSZW5kZXJBZnRlcigpCiAgICAgIH0KICAgIH0pOwogIH0sCiAgZmlsdGVyUmVuZGVyQWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgaWYoJCgiI2ZpbHRlckJlbGFuamEiKS52YWwoKSAhPSAnJyl7CiAgICAgIHRoaXMuZmlsdGVyVG90YWxCZWxhbmphKCk7CiAgICB9ZWxzZXsKICAgICAgJCgiI3NwYW5Ub3RhbEJlbGFuamEiKS50ZXh0KCIiKTsKICAgIH0KICB9LAogIGZpbHRlclRvdGFsQmVsYW5qYTogZnVuY3Rpb24oKXsKICAgICQuYWpheCh7CiAgICAgIHVybDogdGhpcy51cmwgKyAiJnRpcGU9ZmlsdGVyVG90YWxCZWxhbmphIiwKICAgICAgdHlwZTogIlBPU1QiLAogICAgICBkYXRhOiAkKCIjIiArIHRoaXMuZm9ybU5hbWUpLnNlcmlhbGl6ZSgpLAogICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgdmFyIHJlc3AgPSBldmFsKCIoIiArIGRhdGEgKyAiKSIpOwogICAgICAgICQoIiNzcGFuVG90YWxCZWxhbmphIikudGV4dChyZXNwLmNvbnRlbnQudG90YWxCZWxhbmphKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBkZXRhaWw6IGZ1bmN0aW9uKCkgewogICAgdmFyIG1lID0gdGhpczsKICAgIGVycm1zZyA9IHRoaXMuQ2VrQ2hlY2tib3goKTsKICAgIGlmIChlcnJtc2cgPT0gIiIpIHsKICAgICAgdmFyIGJveCA9IHRoaXMuR2V0Q2J4Q2hlY2tlZCgpOwogICAgfSBlbHNlIHsKICAgICAgYWxlcnQoZXJybXNnKTsKICAgIH0KICB9LAogIGRhZnRhclJlbmRlcjogZnVuY3Rpb24oKSB7CiAgICB2YXIgbWUgPSB0aGlzOyAvL3JlbmRlciBkYWZ0YXIKICAgIGFkZENvdmVyUGFnZTIoImRhZnRhcl9jb3ZlciIsIDEsIHRydWUsIHRydWUsIHsKICAgICAgcmVuZGVyVG86IHRoaXMucHJlZml4ICsgIl9jb250X2RhZnRhciIsCiAgICAgIGltZ3NyYzogImltYWdlcy93YWl0LmdpZiIsCiAgICAgIHN0eWxlOiB7IHBvc2l0aW9uOiAiYWJzb2x1dGUiLCB0b3A6ICI1IiwgbGVmdDogIjUiIH0KICAgIH0pOwogICAgJC5hamF4KHsKICAgICAgdXJsOiB0aGlzLnVybCArICImdGlwZT1kYWZ0YXIiLAogICAgICB0eXBlOiAiUE9TVCIsCiAgICAgIGRhdGE6ICQoIiMiICsgdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWUucHJlZml4ICsgIl9jb250X2RhZnRhciIpLmlubmVySFRNTCA9CiAgICAgICAgICByZXNwLmNvbnRlbnQ7CiAgICAgICAgbWUuc3VtSGFsUmVuZGVyKCk7CiAgICAgIH0KICAgIH0pOwogIH0sCiAgY2hlY2tQYWd1SW5kaWthdGlmOiBmdW5jdGlvbigpIHsKICAgIHZhciBtZSA9IHRoaXM7CiAgICB2YXIgZXJyID0gIiI7CiAgICBpZigkKCIjZmlsdGVyVXJ1c2FuIikudmFsKCkgPT0gJzAwJyl7CiAgICAgIGVyciA9ICJQaWxpaCBVcnVzYW4iOwogICAgfWVsc2UgaWYoJCgiI2ZpbHRlckJpZGFuZyIpLnZhbCgpID09ICcwMCcpewogICAgICBlcnIgPSAiUGlsaWggQmlkYW5nIjsKICAgIH1lbHNlIGlmKCQoIiNmaWx0ZXJTS1BEIikudmFsKCkgPT0gJzAwJyl7CiAgICAgIGVyciA9ICJQaWxpaCBTS1BEIjsKICAgIH1lbHNlIGlmKCQoIiNmaWx0ZXJDb25jYXRQcm9ncmFtIikudmFsKCkgPT0gJycpewogICAgICBlcnIgPSAiUGlsaWggUHJvZ3JhbSI7CiAgICB9ZWxzZSBpZigkKCIjZmlsdGVyUSIpLnZhbCgpID09ICcnKXsKICAgICAgZXJyID0gIlBpbGloIEtlZ2lhdGFuIjsKICAgIH0KICAgIGlmKGVyciA9PSAiIil7CiAgICAgIHZhciBjb3ZlciA9IHRoaXMucHJlZml4ICsgIl9mb3JtY292ZXIiOwogICAgICBhZGRDb3ZlclBhZ2UyKGNvdmVyLCA5OTksIHRydWUsIGZhbHNlKTsKICAgICAgJC5hamF4KHsKICAgICAgICB0eXBlOiAiUE9TVCIsCiAgICAgICAgZGF0YTokKCcjJyt0aGlzLmZvcm1OYW1lKS5zZXJpYWxpemUoKSwKICAgICAgICB1cmw6IHRoaXMudXJsICsgIiZ0aXBlPWNoZWNrUGFndUluZGlrYXRpZiIsCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgZGVsRWxlbShjb3Zlcik7CiAgICAgICAgICB2YXIgcmVzcCA9IGV2YWwoIigiICsgZGF0YSArICIpIik7CiAgICAgICAgICBpZiAocmVzcC5lcnIgPT0gIiIpIHsKICAgICAgICAgICAgJCgiI2ZpbHRlclBhZ3VJbmRpa2F0aWYiKS52YWwocmVzcC5jb250ZW50LmZpbHRlclBhZ3VJbmRpa2F0aWYpOwogICAgICAgICAgICAkKCIjZmlsdGVyU2lzYVBhZ3VJbmRpa2F0aWYiKS52YWwocmVzcC5jb250ZW50LmZpbHRlclNpc2FQYWd1SW5kaWthdGlmKTsKICAgICAgICAgICAgJCgiI2ZpbHRlclRvdGFsQmVsYW5qYSIpLnZhbChyZXNwLmNvbnRlbnQuZmlsdGVyVG90YWxCZWxhbmphKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFsZXJ0KHJlc3AuZXJyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfWVsc2V7CiAgICAgIGFsZXJ0KGVycik7CiAgICB9CiAgfSwKICBCYXJ1OiBmdW5jdGlvbigpewogICAgdmFyIG1lID0gdGhpczsKCiAgCQllcnJtc2cgPSAnJzsKCiAgCQlpZigkKCIjZmlsdGVyVXJ1c2FuIikudmFsKCkgPT0gJzAwJyl7CiAgCQkJZXJybXNnID0gIlBpbGloIFVydXNhbiI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyU0tQRCIpLnZhbCgpID09ICcwMCcpewogIAkJCWVycm1zZyA9ICJQaWxpaCBCaWRhbmciOwogIAkJfWVsc2UgaWYoJCgiI2ZpbHRlclNLUEQiKS52YWwoKSA9PSAnMDAnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggU0tQRCI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyQ29uY2F0UHJvZ3JhbSIpLnZhbCgpID09ICcnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggUHJvZ3JhbSI7CiAgCQl9ZWxzZSBpZigkKCIjZmlsdGVyUSIpLnZhbCgpID09ICcnKXsKICAJCQllcnJtc2cgPSAiUGlsaWggS2VnaWF0YW4iOwogIAkJfQogIAkJaWYoZXJybXNnID09JycpewogIAkJCXZhciBtZSA9IHRoaXM7CiAgCQkJdmFyIGFGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5mb3JtTmFtZSk7CiAgCQkJJC5hamF4KHsKICAJCQkgIHVybDogdGhpcy51cmwrJyZ0aXBlPUJhcnUnLAogIAkJCSAgdHlwZSA6ICdQT1NUJywKICAJCQkgIGRhdGE6JCgnIycrdGhpcy5mb3JtTmFtZSkuc2VyaWFsaXplKCksCiAgCQkJICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgCQkJCQl2YXIgcmVzcCA9IGV2YWwoJygnICsgZGF0YSArICcpJyk7CiAgCQkJCQlpZihyZXNwLmVyciA9PSAiIikgewogICAgICAgICAgICAgICQoIiNuZXdCbGFua1BhZ2UiKS52YWwoKTsKICAJCQkJCQlhRm9ybS5hY3Rpb249ICdwYWdlcy5waHA\\",
    "size": "27976"
}