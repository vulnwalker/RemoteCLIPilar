{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Shared\/Date.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/CiAgICAgKgogICAgICogQHBhcmFtICAgICBQSFBFeGNlbF9DZWxsICAgICRwQ2VsbAogICAgICogQHJldHVybiAgICAgYm9vbGVhbgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGlzRGF0ZVRpbWUoUEhQRXhjZWxfQ2VsbCAkcENlbGwpCiAgICB7CiAgICAgICAgcmV0dXJuIHNlbGY6OmlzRGF0ZVRpbWVGb3JtYXQoCiAgICAgICAgICAgICRwQ2VsbC0+Z2V0V29ya3NoZWV0KCktPmdldFN0eWxlKAogICAgICAgICAgICAgICAgJHBDZWxsLT5nZXRDb29yZGluYXRlKCkKICAgICAgICAgICAgKS0+Z2V0TnVtYmVyRm9ybWF0KCkKICAgICAgICApOwogICAgfQoKCiAgICAvKioKICAgICAqIElzIGEgZ2l2ZW4gbnVtYmVyIGZvcm1hdCBhIGRhdGUvdGltZT8KICAgICAqCiAgICAgKiBAcGFyYW0gICAgIFBIUEV4Y2VsX1N0eWxlX051bWJlckZvcm1hdCAgICAkcEZvcm1hdAogICAgICogQHJldHVybiAgICAgYm9vbGVhbgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGlzRGF0ZVRpbWVGb3JtYXQoUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0ICRwRm9ybWF0KQogICAgewogICAgICAgIHJldHVybiBzZWxmOjppc0RhdGVUaW1lRm9ybWF0Q29kZSgkcEZvcm1hdC0+Z2V0Rm9ybWF0Q29kZSgpKTsKICAgIH0KCgogICAgcHJpdmF0ZSBzdGF0aWMgJHBvc3NpYmxlRGF0ZUZvcm1hdENoYXJhY3RlcnMgPSAnZXltZEhzJzsKCiAgICAvKioKICAgICAqIElzIGEgZ2l2ZW4gbnVtYmVyIGZvcm1hdCBjb2RlIGEgZGF0ZS90aW1lPwogICAgICoKICAgICAqIEBwYXJhbSAgICAgc3RyaW5nICAgICRwRm9ybWF0Q29kZQogICAgICogQHJldHVybiAgICAgYm9vbGVhbgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGlzRGF0ZVRpbWVGb3JtYXRDb2RlKCRwRm9ybWF0Q29kZSA9ICcnKQogICAgewogICAgICAgIGlmIChzdHJ0b2xvd2VyKCRwRm9ybWF0Q29kZSkgPT09IHN0cnRvbG93ZXIoUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0OjpGT1JNQVRfR0VORVJBTCkpIHsKICAgICAgICAgICAgLy8gICAgIkdlbmVyYWwiIGNvbnRhaW5zIGFuIGVwb2NoIGxldHRlciAnZScsIHNvIHdlIHRyYXAgZm9yIGl0IGV4cGxpY2l0bHkgaGVyZSAoY2FzZS1pbnNlbnNpdGl2ZSBjaGVjaykKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAocHJlZ19tYXRjaCgnL1swI11FWystXTAvaScsICRwRm9ybWF0Q29kZSkpIHsKICAgICAgICAgICAgLy8gICAgU2NpZW50aWZpYyBmb3JtYXQKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgLy8gU3dpdGNoIG9uIGZvcm1hdGNvZGUKICAgICAgICBzd2l0Y2ggKCRwRm9ybWF0Q29kZSkgewogICAgICAgICAgICAvLyAgICBFeHBsaWNpdGx5IGRlZmluZWQgZGF0ZSBmb3JtYXRzCiAgICAgICAgICAgIGNhc2UgUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0OjpGT1JNQVRfREFURV9ZWVlZTU1ERDoKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX1lZWVlNTUREMjoKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX0RETU1ZWVlZOgogICAgICAgICAgICBjYXNlIFBIUEV4Y2VsX1N0eWxlX051bWJlckZvcm1hdDo6Rk9STUFUX0RBVEVfRE1ZU0xBU0g6CiAgICAgICAgICAgIGNhc2UgUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0OjpGT1JNQVRfREFURV9ETVlNSU5VUzoKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX0RNTUlOVVM6CiAgICAgICAgICAgIGNhc2UgUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0OjpGT1JNQVRfREFURV9NWU1JTlVTOgogICAgICAgICAgICBjYXNlIFBIUEV4Y2VsX1N0eWxlX051bWJlckZvcm1hdDo6Rk9STUFUX0RBVEVfREFURVRJTUU6CiAgICAgICAgICAgIGNhc2UgUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0OjpGT1JNQVRfREFURV9USU1FMToKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX1RJTUUyOgogICAgICAgICAgICBjYXNlIFBIUEV4Y2VsX1N0eWxlX051bWJlckZvcm1hdDo6Rk9STUFUX0RBVEVfVElNRTM6CiAgICAgICAgICAgIGNhc2UgUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0OjpGT1JNQVRfREFURV9USU1FNDoKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX1RJTUU1OgogICAgICAgICAgICBjYXNlIFBIUEV4Y2VsX1N0eWxlX051bWJlckZvcm1hdDo6Rk9STUFUX0RBVEVfVElNRTY6CiAgICAgICAgICAgIGNhc2UgUEhQRXhjZWxfU3R5bGVfTnVtYmVyRm9ybWF0OjpGT1JNQVRfREFURV9USU1FNzoKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX1RJTUU4OgogICAgICAgICAgICBjYXNlIFBIUEV4Y2VsX1N0eWxlX051bWJlckZvcm1hdDo6Rk9STUFUX0RBVEVfWVlZWU1NRERTTEFTSDoKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX1hMU1gxNDoKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX1hMU1gxNToKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX1hMU1gxNjoKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX1hMU1gxNzoKICAgICAgICAgICAgY2FzZSBQSFBFeGNlbF9TdHlsZV9OdW1iZXJGb3JtYXQ6OkZPUk1BVF9EQVRFX1hMU1gyMjoKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgLy8gICAgVHlwaWNhbGx5IG51bWJlciwgY3VycmVuY3kgb3IgYWNjb3VudGluZyAob3Igb2NjYXNpb25hbGx5IGZyYWN0aW9uKSBmb3JtYXRzCiAgICAgICAgaWYgKChzdWJzdHIoJHBGb3JtYXRDb2RlLCAwLCAxKSA9PSAnXycpIHx8IChzdWJzdHIoJHBGb3JtYXRDb2RlLCAwLCAyKSA9PSAnMCAnKSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIC8vIFRyeSBjaGVja2luZyBmb3IgYW55IG9mIHRoZSBkYXRlIGZvcm1hdHRpbmcgY2hhcmFjdGVycyB0aGF0IGRvbid0IGFwcGVhciB3aXRoaW4gc3F1YXJlIGJyYWNlcwogICAgICAgIGlmIChwcmVnX21hdGNoKCcvKF58XF0pW15cW10qWycuc2VsZjo6JHBvc3NpYmxlRGF0ZUZvcm1hdENoYXJhY3RlcnMuJ10vaScsICRwRm9ybWF0Q29kZSkpIHsKICAgICAgICAgICAgLy8gICAgV2UgbWlnaHQgYWxzbyBoYXZlIGEgZm9ybWF0IG1hc2sgY29udGFpbmluZyBxdW90ZWQgc3RyaW5ncy4uLgogICAgICAgICAgICAvLyAgICAgICAgd2UgZG9uJ3Qgd2FudCB0byB0ZXN0IGZvciBhbnkgb2Ygb3VyIGNoYXJhY3RlcnMgd2l0aGluIHRoZSBxdW90ZWQgYmxvY2tzCiAgICAgICAgICAgIGlmIChzdHJwb3MoJHBGb3JtYXRDb2RlLCAnIicpICE9PSBmYWxzZSkgewogICAgICAgICAgICAgICAgJHNlZ01hdGNoZXIgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKGV4cGxvZGUoJyInLCAkcEZvcm1hdENvZGUpIGFzICRzdWJWYWwpIHsKICAgICAgICAgICAgICAgICAgICAvLyAgICBPbmx5IHRlc3QgaW4gYWx0ZXJuYXRlIGFycmF5IGVudHJpZXMgKHRoZSBub24tcXVvdGVkIGJsb2NrcykKICAgICAgICAgICAgICAgICAgICBpZiAoKCRzZWdNYXRjaGVyID0gISRzZWdNYXRjaGVyKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAocHJlZ19tYXRjaCgnLyhefFxdKVteXFtdKlsnLnNlbGY6OiRwb3NzaWJsZURhdGVGb3JtYXRDaGFyYWN0ZXJzLiddL2knLCAkc3ViVmFsKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgLy8gTm8gZGF0ZS4uLgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBDb252ZXJ0IGEgZGF0ZS90aW1lIHN0cmluZyB0byBFeGNlbCB0aW1lCiAgICAgKgogICAgICogQHBhcmFtICAgIHN0cmluZyAgICAkZGF0ZVZhbHVlICAgICAgICBFeGFtcGxlczogJzIwMDktMTItMzEnLCAnMjAwOS0xMi0zMSAxNTo1OScsICcyMDA5LTEyLTMxIDE1OjU5OjEwJwogICAgICogQHJldHVybiAgICBmbG9hdHxGQUxTRSAgICAgICAgRXhjZWwgZGF0ZS90aW1lIHNlcmlhbCB2YWx1ZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHN0cmluZ1RvRXhjZWwoJGRhdGVWYWx1ZSA9ICcnKQogICAgewogICAgICAgIGlmIChzdHJsZW4oJGRhdGVWYWx1ZSkgPCAyKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKCFwcmVnX21hdGNoKCcvXihcZHsxLDR9WyBcLlwvXC1dW0EtWl17Myw5fShbIFwuXC9cLV1cZHsxLDR9KT98W0EtWl17Myw5fVsgXC5cL1wtXVxkezEsNH0oWyBcLlwvXC1dXGR7MSw0fSk\/fFxkezEsNH1bIFwuXC9cLV1cZHsxLDR9KFsgXC5cL1wtXVxkezEsNH0pPykoIFxkezEsMn06XGR7MSwyfSg6XGR7MSwyfSk\/KT8kL2l1JywgJGRhdGVWYWx1ZSkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgJGRhdGVWYWx1ZU5ldyA9IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0RhdGVUaW1lOjpEQVRFVkFMVUUoJGRhdGVWYWx1ZSk7CgogICAgICAgIGlmICgkZGF0ZVZhbHVlTmV3ID09PSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OlZBTFVFKCkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgaWYgKHN0cnBvcygkZGF0ZVZhbHVlLCAnOicpICE9PSBmYWxzZSkgewogICAgICAgICAgICAkdGltZVZhbHVlID0gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRGF0ZVRpbWU6OlRJTUVWQUxVRSgkZGF0ZVZhbHVlKTsKICAgICAgICAgICAgaWYgKCR0aW1lVmFsdWUgPT09IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6VkFMVUUoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRkYXRlVmFsdWVOZXcgKz0gJHRpbWVWYWx1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICRkYXRlVmFsdWVOZXc7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb252ZXJ0cyBhIG1vbnRoIG5hbWUgKGVpdGhlciBhIGxvbmcgb3IgYSBzaG9ydCBuYW1lKSB0byBhIG1vbnRoIG51bWJlcgogICAgICoKICAgICAqIEBwYXJhbSAgICAgc3RyaW5nICAgICRtb250aCAgICBNb250aCBuYW1lIG9yIGFiYnJldmlhdGlvbgogICAgICogQHJldHVybiAgICBpbnRlZ2VyfHN0cmluZyAgICAgTW9udGggbnVtYmVyICgxIC0gMTIpLCBvciB0aGUgb3JpZ2luYWwgc3RyaW5nIGFyZ3VtZW50IGlmIGl0IGlzbid0IGEgdmFsaWQgbW9udGggbmFtZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIG1vbnRoU3RyaW5nVG9OdW1iZXIoJG1vbnRoKQogICAgewogICAgICAgICRtb250aEluZGV4ID0gMTsKICAgICAgICBmb3JlYWNoIChzZWxmOjokbW9udGhOYW1lcyBhcyAkc2hvcnRNb250aE5hbWUgPT4gJGxvbmdNb250aE5hbWUpIHsKICAgICAgICAgICAgaWYgKCgkbW9udGggPT09ICRsb25nTW9udGhOYW1lKSB8fCAoJG1vbnRoID09PSAkc2hvcnRNb250aE5hbWUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJG1vbnRoSW5kZXg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKyskbW9udGhJbmRleDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICRtb250aDsKICAgIH0KCiAgICAvKioKICAgICAqIFN0cmlwcyBhbiBvcmRpbmFsIGZyb21hIG51bWVyaWMgdmFsdWUKICAgICAqCiAgICAgKiBAcGFyYW0gICAgIHN0cmluZyAgICAkZGF5ICAgICAgRGF5IG51bWJlciB3aXRoIGFuIG9yZGluYWwKICAgICAqIEByZXR1cm4gICAgaW50ZWdlcnxzdHJpbmcgICAgICBUaGUgaW50ZWdlciB2YWx1ZSB3aXRoIGFueSBvcmRpbmFsIHN0cmlwcGVkLCBvciB0aGUgb3JpZ2luYWwgc3RyaW5nIGFyZ3VtZW50IGlmIGl0IGlzbid0IGEgdmFsaWQgbnVtZXJpYwogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGRheVN0cmluZ1RvTnVtYmVyKCRkYXkpCiAgICB7CiAgICAgICAgJHN0cmlwcGVkRGF5VmFsdWUgPSAoc3RyX3JlcGxhY2Uoc2VsZjo6JG51bWJlclN1ZmZpeGVzLCAnJywgJGRheSkpOwogICAgICAgIGlmIChpc19udW1lcmljKCRzdHJpcHBlZERheVZhbHVlKSkgewogICAgICAgICAgICByZXR1cm4gKGludGVnZXIpICRzdHJpcHBlZERheVZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJGRheTsKICAgIH0KfQo=",
    "size": "15629"
}