{
    "namaFile": "lib\/PHPExcel\/Documentation\/markdown\/Overview\/08-Recipes.md",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\/Pz8\/MzYwKD8\/Pz8oMjAxMDsyOzUpOz8\/Pz8oMjAxMDsxMjszMSk7Pz8\/Pz8\/KSc7CiRpbnRlcm5hbEZvcm11bGEgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbjo6Z2V0SW5zdGFuY2UoKS0+dHJhbnNsYXRlRm9ybXVsYVRvRW5nbGlzaCgkZm9ybXVsYSk7CiRvYmpQSFBFeGNlbC0+Z2V0QWN0aXZlU2hlZXQoKS0+c2V0Q2VsbFZhbHVlKCdCOCcsJGludGVybmFsRm9ybXVsYSk7CmBgYAoKQ3VycmVudGx5LCBmb3JtdWxhIHRyYW5zbGF0aW9uIG9ubHkgdHJhbnNsYXRlcyB0aGUgZnVuY3Rpb24gbmFtZXMsIHRoZSBjb25zdGFudHMgVFJVRSBhbmQgRkFMU0UsIGFuZCB0aGUgZnVuY3Rpb24gYXJndW1lbnQgc2VwYXJhdG9ycy4KCkF0IHByZXNlbnQsIHRoZSBmb2xsb3dpbmcgbG9jYWxlIHNldHRpbmdzIGFyZSBzdXBwb3J0ZWQ6CgogICAgTGFuZ3VhZ2UgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICB8IExvY2FsZSBDb2RlCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tCiAgICBDemVjaCAgICAgICAgICAgICAgICB8IENlxaF0aW5hICAgICAgICAgICAgICB8IGNzCiAgICBEYW5pc2ggICAgICAgICAgICAgICB8IERhbnNrICAgICAgICAgICAgICAgIHwgZGEKICAgIEdlcm1hbiAgICAgICAgICAgICAgIHwgRGV1dHNjaCAgICAgICAgICAgICAgfCBkZQogICAgU3BhbmlzaCAgICAgICAgICAgICAgfCBFc3Bhw7FvbCAgICAgICAgICAgICAgfCBlcwogICAgRmlubmlzaCAgICAgICAgICAgICAgfCBTdW9taSAgICAgICAgICAgICAgICB8IGZpCiAgICBGcmVuY2ggICAgICAgICAgICAgICB8IEZyYW7Dp2FpcyAgICAgICAgICAgICB8IGZyCiAgICBIdW5nYXJpYW4gICAgICAgICAgICB8IE1hZ3lhciAgICAgICAgICAgICAgIHwgaHUKICAgIEl0YWxpYW4gICAgICAgICAgICAgIHwgSXRhbGlhbm8gICAgICAgICAgICAgfCBpdAogICAgRHV0Y2ggICAgICAgICAgICAgICAgfCBOZWRlcmxhbmRzICAgICAgICAgICB8IG5sCiAgICBOb3J3ZWdpYW4gICAgICAgICAgICB8IE5vcnNrICAgICAgICAgICAgICAgIHwgbm8KICAgIFBvbGlzaCAgICAgICAgICAgICAgIHwgSmV6eWsgcG9sc2tpICAgICAgICAgfCBwbAogICAgUG9ydHVndWVzZSAgICAgICAgICAgfCBQb3J0dWd1w6pzICAgICAgICAgICAgfCBwdAogICAgQnJhemlsaWFuIFBvcnR1Z3Vlc2UgfCBQb3J0dWd1w6pzIEJyYXNpbGVpcm8gfCBwdF9icgogICAgUnVzc2lhbiAgICAgICAgICAgICAgfCA\/Pz8\/Pz8\/ID8\\",
    "size": "51912"
}