{
    "namaFile": "lib\/jpgraph\/jpgraph_windrose.php",
    "lastUpdate": "2013-12-16+17:18:23.00",
    "contentFile": "\/IDIgOiAxIDsKICAgICAgIAlpZiggJHRoaXMtPmlTaXplID4gMCAmJiAkdGhpcy0+aVNpemUgPCAxICkgewoJCQkkdGhpcy0+aVNpemUgKj0gbWluKCRhSW1nLT53aWR0aCwkYUltZy0+aGVpZ2h0KTsKICAgICAgIAl9CgoKICAgICAgICAkdmFsdWUgPSBuZXcgVGV4dCgpOwogICAgICAgICR2YWx1ZS0+U2V0Rm9udCgkdGhpcy0+aUZvbnRGYW1pbHksJHRoaXMtPmlGb250U3R5bGUsJHRoaXMtPmlGb250U2l6ZSokc2NhbGluZyk7CiAgICAgICAgJHZhbHVlLT5TZXRDb2xvcigkdGhpcy0+aUZvbnRDb2xvcik7CiAgICAgICAgLy8gU2V0dXAgZXh0cmEgc2l6ZSBhcm91bmQgdGhlIGdyYXBoIG5lZWRlZCBzbyB0aGF0IHRoZSBsYWJlbHMKICAgICAgICAvLyBkb2Vzbid0IGdldCBjdXQuIEZvciB0aGlzIHdlIG5lZWQgdG8gZmluZCB0aGUgbGFyZ2VzdCBsYWJlbC4KICAgICAgICAvLyBUaGUgY29kZSBiZWxvdyBnaXZlcyBhIHBvc3NpYmxlIGEgbGl0dGxlIHRvIGxhcmdlIG1hcmdpbi4gVGhlCiAgICAgICAgLy8gcmVhbGx5LCByZWFsbHkgcHJvcGVyIHdheSB3b3VsZCBiZSB0byBhY2NvdW50IGZvciB3aGF0IGFuZ2xlCiAgICAgICAgLy8gdGhlIGxhYmVsIGFyZSBhdAogICAgICAgICRuID0gY291bnQoJHRoaXMtPmlMYWJlbHMpOwogICAgICAgIGlmKCAkbiA+IDAgKSB7CiAgICAgICAgICAgICRtYXhoPTA7JG1heHc9MDsKICAgICAgICAgICAgZm9yZWFjaCgkdGhpcy0+aUxhYmVscyBhcyAka2V5ID0+ICRsYmwpIHsKICAgICAgICAgICAgICAgICR2YWx1ZS0+U2V0KCRsYmwpOwogICAgICAgICAgICAgICAgJG1heHcgPSBtYXgoJG1heHcsJHZhbHVlLT5HZXRXaWR0aCgkYUltZykpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkdmFsdWUtPlNldCgnODg4Ljg4OCcpOyAvLyBEdW1teSB2YWx1ZSB0byBnZXQgd2lkdGgvaGVpZ2h0CiAgICAgICAgICAgICRtYXh3ID0gJHZhbHVlLT5HZXRXaWR0aCgkYUltZyk7CiAgICAgICAgfQogICAgICAgIC8vIEFkZCBhbiBleHRyYSBtYXJnaW4gb2YgNTAlIHRoZSBmb250IHNpemUKICAgICAgICAkbWF4dyArPSByb3VuZCgkdGhpcy0+aUZvbnRTaXplKiRzY2FsaW5nICogMC40KSA7CgogICAgICAgICR2YWx4bWFyZyA9IDEuNSokbWF4dysyKiR0aGlzLT5pTGFiZWxNYXJnaW4qJHNjYWxpbmc7CiAgICAgICAgJHcgPSByb3VuZCgkdGhpcy0+aVNpemUqJHNjYWxpbmcgKyAkdmFseG1hcmcpOwoKICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgd2lkdGggb2YgdGhlIGxlZ2VuZCBmaXRzCiAgICAgICAgJGxlZ2VuZHdpZHRoID0gJHRoaXMtPl9TdHJva2VMZWdlbmQoJGFJbWcsMCwwLCRzY2FsaW5nLHRydWUpKzEwKiRzY2FsaW5nOwogICAgICAgICR3ID0gbWF4KCR3LCRsZWdlbmR3aWR0aCk7CgogICAgICAgIHJldHVybiAkdzsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRIZWlnaHQoJGFJbWcpIHsKCiAgICAgICAgJHNjYWxpbmcgPSAxOy8vJHRoaXMtPmlBbnRpQWxpYXMgPyAyIDogMSA7CiAgICAgICAJaWYoICR0aGlzLT5pU2l6ZSA+IDAgJiYgJHRoaXMtPmlTaXplIDwgMSApIHsKCQkJJHRoaXMtPmlTaXplICo9IG1pbigkYUltZy0+d2lkdGgsJGFJbWctPmhlaWdodCk7CiAgICAgICAJfQoKICAgICAgICAkdmFsdWUgPSBuZXcgVGV4dCgpOwogICAgICAgICR2YWx1ZS0+U2V0Rm9udCgkdGhpcy0+aUZvbnRGYW1pbHksJHRoaXMtPmlGb250U3R5bGUsJHRoaXMtPmlGb250U2l6ZSokc2NhbGluZyk7CiAgICAgICAgJHZhbHVlLT5TZXRDb2xvcigkdGhpcy0+aUZvbnRDb2xvcik7CiAgICAgICAgLy8gU2V0dXAgZXh0cmEgc2l6ZSBhcm91bmQgdGhlIGdyYXBoIG5lZWRlZCBzbyB0aGF0IHRoZSBsYWJlbHMKICAgICAgICAvLyBkb2Vzbid0IGdldCBjdXQuIEZvciB0aGlzIHdlIG5lZWQgdG8gZmluZCB0aGUgbGFyZ2VzdCBsYWJlbC4KICAgICAgICAvLyBUaGUgY29kZSBiZWxvdyBnaXZlcyBhIHBvc3NpYmxlIGEgbGl0dGxlIHRvIGxhcmdlIG1hcmdpbi4gVGhlCiAgICAgICAgLy8gcmVhbGx5LCByZWFsbHkgcHJvcGVyIHdheSB3b3VsZCBiZSB0byBhY2NvdW50IGZvciB3aGF0IGFuZ2xlCiAgICAgICAgLy8gdGhlIGxhYmVsIGFyZSBhdAogICAgICAgICRuID0gY291bnQoJHRoaXMtPmlMYWJlbHMpOwogICAgICAgIGlmKCAkbiA+IDAgKSB7CiAgICAgICAgICAgICRtYXhoPTA7JG1heHc9MDsKICAgICAgICAgICAgZm9yZWFjaCgkdGhpcy0+aUxhYmVscyBhcyAka2V5ID0+ICRsYmwpIHsKICAgICAgICAgICAgICAgICR2YWx1ZS0+U2V0KCRsYmwpOwogICAgICAgICAgICAgICAgJG1heGggPSBtYXgoJG1heGgsJHZhbHVlLT5HZXRIZWlnaHQoJGFJbWcpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJHZhbHVlLT5TZXQoJzE4MC44Jyk7IC8vIER1bW15IHZhbHVlIHRvIGdldCB3aWR0aC9oZWlnaHQKICAgICAgICAgICAgJG1heGggPSAkdmFsdWUtPkdldEhlaWdodCgkYUltZyk7CiAgICAgICAgfQogICAgICAgIC8vIEFkZCBhbiBleHRyYSBtYXJnaW4gb2YgNTAlIHRoZSBmb250IHNpemUKICAgICAgICAvLyRtYXhoICs9IHJvdW5kKCR0aGlzLT5pRm9udFNpemUqJHNjYWxpbmcgKiAwLjUpIDsKICAgICAgICAkdmFseW1hcmcgPSAyKiRtYXhoKzIqJHRoaXMtPmlMYWJlbE1hcmdpbiokc2NhbGluZzsKCiAgICAgICAgJGxlZ2VuZGhlaWdodCA9IHJvdW5kKCR0aGlzLT5sZWdlbmQtPmlTaG93ID8gMSA6IDApOwogICAgICAgICRsZWdlbmRoZWlnaHQgKj0gbWF4KCR0aGlzLT5sZWdlbmQtPmlDaXJjbGVSYWRpdXMqMiwkdGhpcy0+bGVnZW5kLT5pVHh0Rm9udFNpemUqMikrCiAgICAgICAgCQkJCSAkdGhpcy0+bGVnZW5kLT5pTWFyZ2luICsgJHRoaXMtPmxlZ2VuZC0+aUJvdHRvbU1hcmdpbiArIDI7CiAgICAgICAgJGxlZ2VuZGhlaWdodCAqPSAkc2NhbGluZzsKICAgICAgICAkaCA9IHJvdW5kKCR0aGlzLT5pU2l6ZSokc2NhbGluZyArICR2YWx5bWFyZykgKyAkbGVnZW5kaGVpZ2h0IDsKCiAgICAgICAgcmV0dXJuICRoOwogICAgfQoKICAgIGZ1bmN0aW9uIFN0cm9rZSgkYUdyYXBoKSB7CgoJCSRhSW1nID0gJGFHcmFwaC0+aW1nOwoKCQlpZiggJHRoaXMtPmlYID4gMCAmJiAkdGhpcy0+aVggPCAxICkgewoJCQkkdGhpcy0+aVggPSByb3VuZCggJGFJbWctPndpZHRoICogJHRoaXMtPmlYICkgOwoJCX0KCiAgICAgICAJaWYoICR0aGlzLT5pWSA+IDAgJiYgJHRoaXMtPmlZIDwgMSApIHsKICAgICAgIAkJJHRoaXMtPmlZID0gcm91bmQoICRhSW1nLT5oZWlnaHQgKiAkdGhpcy0+aVkgKSA7CiAgICAgICAJfQoKICAgICAgIAlpZiggJHRoaXMtPmlTaXplID4gMCAmJiAkdGhpcy0+aVNpemUgPCAxICkgewoJCQkkdGhpcy0+aVNpemUgKj0gbWluKCRhSW1nLT53aWR0aCwkYUltZy0+aGVpZ2h0KTsKICAgICAgIAl9CgogICAgICAgCWlmKCAkdGhpcy0+aUNlbnRlclNpemUgPiAwICYmICR0aGlzLT5pQ2VudGVyU2l6ZSA8IDEgKSB7CgkJCSR0aGlzLT5pQ2VudGVyU2l6ZSAqPSAkdGhpcy0+aVNpemU7CiAgICAgICAJfQoKICAgICAgICAkdGhpcy0+c2NhbGUtPkF1dG9TY2FsZSgoJHRoaXMtPmlTaXplIC0gJHRoaXMtPmlDZW50ZXJTaXplKS8yLCByb3VuZCgyLjUqJHRoaXMtPnNjYWxlLT5pRm9udFNpemUpKTsKCiAgICAgICAgJHNjYWxpbmcgPSAkdGhpcy0+aUFudGlBbGlhcyA\\/Pgo=",
    "size": "53483"
}