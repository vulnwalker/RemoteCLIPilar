{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/DataTables\/extensions\/ColVis\/js\/dataTables.colVis.js",
    "lastUpdate": "2018-03-22+14:27:29.95",
    "contentFile": "LyohIENvbFZpcyAxLjEuMQogKiDCqTIwMTAtMjAxNCBTcHJ5TWVkaWEgTHRkIC0gZGF0YXRhYmxlcy5uZXQvbGljZW5zZQogKi8KCi8qKgogKiBAc3VtbWFyeSAgICAgQ29sVmlzCiAqIEBkZXNjcmlwdGlvbiBDb250cm9scyBmb3IgY29sdW1uIHZpc2liaWxpdHkgaW4gRGF0YVRhYmxlcwogKiBAdmVyc2lvbiAgICAgMS4xLjEKICogQGZpbGUgICAgICAgIGRhdGFUYWJsZXMuY29sUmVvcmRlci5qcwogKiBAYXV0aG9yICAgICAgU3ByeU1lZGlhIEx0ZCAod3d3LnNwcnltZWRpYS5jby51aykKICogQGNvbnRhY3QgICAgIHd3dy5zcHJ5bWVkaWEuY28udWsvY29udGFjdAogKiBAY29weXJpZ2h0ICAgQ29weXJpZ2h0IDIwMTAtMjAxNCBTcHJ5TWVkaWEgTHRkLgogKgogKiBUaGlzIHNvdXJjZSBmaWxlIGlzIGZyZWUgc29mdHdhcmUsIGF2YWlsYWJsZSB1bmRlciB0aGUgZm9sbG93aW5nIGxpY2Vuc2U6CiAqICAgTUlUIGxpY2Vuc2UgLSBodHRwOi8vZGF0YXRhYmxlcy5uZXQvbGljZW5zZS9taXQKICoKICogVGhpcyBzb3VyY2UgZmlsZSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQKICogV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkKICogb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgbGljZW5zZSBmaWxlcyBmb3IgZGV0YWlscy4KICoKICogRm9yIGRldGFpbHMgcGxlYXNlIHJlZmVyIHRvOiBodHRwOi8vd3d3LmRhdGF0YWJsZXMubmV0CiAqLwoKKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkgewoKCnZhciBmYWN0b3J5ID0gZnVuY3Rpb24oICQsIERhdGFUYWJsZSApIHsKInVzZSBzdHJpY3QiOwoKLyoqCiAqIENvbFZpcyBwcm92aWRlcyBjb2x1bW4gdmlzaWJpbGl0eSBjb250cm9sIGZvciBEYXRhVGFibGVzCiAqCiAqIEBjbGFzcyBDb2xWaXMKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7b2JqZWN0fSBEYXRhVGFibGVzIHNldHRpbmdzIG9iamVjdC4gV2l0aCBEYXRhVGFibGVzIDEuMTAgdGhpcyBjYW4KICogICBhbHNvIGJlIGFuZCBBUEkgaW5zdGFuY2UsIHRhYmxlIG5vZGUsIGpRdWVyeSBjb2xsZWN0aW9uIG9yIGpRdWVyeSBzZWxlY3Rvci4KICogQHBhcmFtIHtvYmplY3R9IENvbFZpcyBjb25maWd1cmF0aW9uIG9wdGlvbnMKICovCnZhciBDb2xWaXMgPSBmdW5jdGlvbiggb0RUU2V0dGluZ3MsIG9Jbml0ICkKewoJLyogU2FudGl5IGNoZWNrIHRoYXQgd2UgYXJlIGEgbmV3IGluc3RhbmNlICovCglpZiAoICF0aGlzLkNMQVNTIHx8IHRoaXMuQ0xBU1MgIT0gIkNvbFZpcyIgKQoJewoJCWFsZXJ0KCAiV2FybmluZzogQ29sVmlzIG11c3QgYmUgaW5pdGlhbGlzZWQgd2l0aCB0aGUga2V5d29yZCAnbmV3JyIgKTsKCX0KCglpZiAoIHR5cGVvZiBvSW5pdCA9PSAndW5kZWZpbmVkJyApCgl7CgkJb0luaXQgPSB7fTsKCX0KCglpZiAoICQuZm4uZGF0YVRhYmxlLmNhbWVsVG9IdW5nYXJpYW4gKSB7CgkJJC5mbi5kYXRhVGFibGUuY2FtZWxUb0h1bmdhcmlhbiggQ29sVmlzLmRlZmF1bHRzLCBvSW5pdCApOwoJfQoKCgkvKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqCgkgKiBQdWJsaWMgY2xhc3MgdmFyaWFibGVzCgkgKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqLwoKCS8qKgoJICogQG5hbWVzcGFjZSBTZXR0aW5ncyBvYmplY3Qgd2hpY2ggY29udGFpbnMgY3VzdG9taXNhYmxlIGluZm9ybWF0aW9uIGZvcgoJICogICAgIENvbFZpcyBpbnN0YW5jZS4gQXVnbWVudGVkIGJ5IENvbFZpcy5kZWZhdWx0cwoJICovCgl0aGlzLnMgPSB7CgkJLyoqCgkJICogRGF0YVRhYmxlcyBzZXR0aW5ncyBvYmplY3QKCQkgKiAgQHByb3BlcnR5IGR0CgkJICogIEB0eXBlICAgICBPYmplY3QKCQkgKiAgQGRlZmF1bHQgIG51bGwKCQkgKi8KCQkiZHQiOiBudWxsLAoKCQkvKioKCQkgKiBDdXN0b21pc2F0aW9uIG9iamVjdAoJCSAqICBAcHJvcGVydHkgb0luaXQKCQkgKiAgQHR5cGUgICAgIE9iamVjdAoJCSAqICBAZGVmYXVsdCAgcGFzc2VkIGluCgkJICovCgkJIm9Jbml0Ijogb0luaXQsCgoJCS8qKgoJCSAqIEZsYWcgdG8gc2F5IGlmIHRoZSBjb2xsZWN0aW9uIGlzIGhpZGRlbgoJCSAqICBAcHJvcGVydHkgaGlkZGVuCgkJICogIEB0eXBlICAgICBib29sZWFuCgkJICogIEBkZWZhdWx0ICB0cnVlCgkJICovCgkJImhpZGRlbiI6IHRydWUsCgoJCS8qKgoJCSAqIFN0b3JlIHRoZSBvcmlnaW5hbCB2aXNpYmlsaXR5IHNldHRpbmdzIHNvIHRoZXkgY291bGQgYmUgcmVzdG9yZWQKCQkgKiAgQHByb3BlcnR5IGFiT3JpZ2luYWwKCQkgKiAgQHR5cGUgICAgIEFycmF5CgkJICogIEBkZWZhdWx0ICBbXQoJCSAqLwoJCSJhYk9yaWdpbmFsIjogW10KCX07CgoKCS8qKgoJICogQG5hbWVzcGFjZSBDb21tb24gYW5kIHVzZWZ1bCBET00gZWxlbWVudHMgZm9yIHRoZSBjbGFzcyBpbnN0YW5jZQoJICovCgl0aGlzLmRvbSA9IHsKCQkvKioKCQkgKiBXcmFwcGVyIGZvciB0aGUgYnV0dG9uIC0gZ2l2ZW4gYmFjayB0byBEYXRhVGFibGVzIGFzIHRoZSBub2RlIHRvIGluc2VydAoJCSAqICBAcHJvcGVydHkgd3JhcHBlcgoJCSAqICBAdHlwZSAgICAgTm9kZQoJCSAqICBAZGVmYXVsdCAgbnVsbAoJCSAqLwoJCSJ3cmFwcGVyIjogbnVsbCwKCgkJLyoqCgkJICogQWN0aXZhdGlvbiBidXR0b24KCQkgKiAgQHByb3BlcnR5IGJ1dHRvbgoJCSAqICBAdHlwZSAgICAgTm9kZQoJCSAqICBAZGVmYXVsdCAgbnVsbAoJCSAqLwoJCSJidXR0b24iOiBudWxsLAoKCQkvKioKCQkgKiBDb2xsZWN0aW9uIGxpc3Qgbm9kZQoJCSAqICBAcHJvcGVydHkgY29sbGVjdGlvbgoJCSAqICBAdHlwZSAgICAgTm9kZQoJCSAqICBAZGVmYXVsdCAgbnVsbAoJCSAqLwoJCSJjb2xsZWN0aW9uIjogbnVsbCwKCgkJLyoqCgkJICogQmFja2dyb3VuZCBub2RlIHVzZWQgZm9yIHNoYWRpbmcgdGhlIGRpc3BsYXkgYW5kIGV2ZW50IGNhcHR1cmluZwoJCSAqICBAcHJvcGVydHkgYmFja2dyb3VuZAoJCSAqICBAdHlwZSAgICAgTm9kZQoJCSAqICBAZGVmYXVsdCAgbnVsbAoJCSAqLwoJCSJiYWNrZ3JvdW5kIjogbnVsbCwKCgkJLyoqCgkJICogRWxlbWVudCB0byBwb3NpdGlvbiBvdmVyIHRoZSBhY3RpdmF0aW9uIGJ1dHRvbiB0byBjYXRjaCBtb3VzZSBldmVudHMgd2hlbiB1c2luZyBtb3VzZW92ZXIKCQkgKiAgQHByb3BlcnR5IGNhdGNoZXIKCQkgKiAgQHR5cGUgICAgIE5vZGUKCQkgKiAgQGRlZmF1bHQgIG51bGwKCQkgKi8KCQkiY2F0Y2hlciI6IG51bGwsCgoJCS8qKgoJCSAqIExpc3Qgb2YgYnV0dG9uIGVsZW1lbnRzCgkJICogIEBwcm9wZXJ0eSBidXR0b25zCgkJICogIEB0eXBlICAgICBBcnJheQoJCSAqICBAZGVmYXVsdCAgW10KCQkgKi8KCQkiYnV0dG9ucyI6IFtdLAoKCQkvKioKCQkgKiBMaXN0IG9mIGdyb3VwIGJ1dHRvbiBlbGVtZW50cwoJCSAqICBAcHJvcGVydHkgZ3JvdXBCdXR0b25zCgkJICogIEB0eXBlICAgICBBcnJheQoJCSAqICBAZGVmYXVsdCAgW10KCQkgKi8KCQkiZ3JvdXBCdXR0b25zIjogW10sCgoJCS8qKgoJCSAqIFJlc3RvcmUgYnV0dG9uCgkJICogIEBwcm9wZXJ0eSByZXN0b3JlCgkJICogIEB0eXBlICAgICBOb2RlCgkJICogIEBkZWZhdWx0ICBudWxsCgkJICovCgkJInJlc3RvcmUiOiBudWxsCgl9OwoKCS8qIFN0b3JlIGdsb2JhbCByZWZlcmVuY2UgKi8KCUNvbFZpcy5hSW5zdGFuY2VzLnB1c2goIHRoaXMgKTsKCgkvKiBDb25zdHJ1Y3RvciBsb2dpYyAqLwoJdGhpcy5zLmR0ID0gJC5mbi5kYXRhVGFibGUuQXBpID8KCQluZXcgJC5mbi5kYXRhVGFibGUuQXBpKCBvRFRTZXR0aW5ncyApLnNldHRpbmdzKClbMF0gOgoJCW9EVFNldHRpbmdzOwoKCXRoaXMuX2ZuQ29uc3RydWN0KCBvSW5pdCApOwoJcmV0dXJuIHRoaXM7Cn07CgoKCkNvbFZpcy5wcm90b3R5cGUgPSB7CgkvKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqCgkgKiBQdWJsaWMgbWV0aG9kcwoJICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi8KCgkvKioKCSAqIEdldCB0aGUgQ29sVmlzIGluc3RhbmNlJ3MgY29udHJvbCBidXR0b24gc28gaXQgY2FuIGJlIGluamVjdGVkIGludG8gdGhlCgkgKiBET00KCSAqICBAbWV0aG9kICBidXR0b24KCSAqICBAcmV0dXJucyB7bm9kZX0gQ29sVmlzIGJ1dHRvbgoJICovCglidXR0b246IGZ1bmN0aW9uICgpCgl7CgkJcmV0dXJuIHRoaXMuZG9tLndyYXBwZXI7Cgl9LAoKCS8qKgoJICogQWxpYXMgb2YgYHJlYnVpbGRgIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQoJICogIEBtZXRob2QgIGZuUmVidWlsZAoJICovCgkiZm5SZWJ1aWxkIjogZnVuY3Rpb24gKCkKCXsKCQl0aGlzLnJlYnVpbGQoKTsKCX0sCgoJLyoqCgkgKiBSZWJ1aWxkIHRoZSBsaXN0IG9mIGJ1dHRvbnMgZm9yIHRoaXMgaW5zdGFuY2UgKGkuZS4gaWYgdGhlcmUgaXMgYSBjb2x1bW4KCSAqIGhlYWRlciB1cGRhdGUpCgkgKiAgQG1ldGhvZCAgZm5SZWJ1aWxkCgkgKi8KCXJlYnVpbGQ6IGZ1bmN0aW9uICgpCgl7CgkJLyogUmVtb3ZlIHRoZSBvbGQgYnV0dG9ucyAqLwoJCWZvciAoIHZhciBpPXRoaXMuZG9tLmJ1dHRvbnMubGVuZ3RoLTEgOyBpPj0wIDsgaS0tICkgewoJCQl0aGlzLmRvbS5jb2xsZWN0aW9uLnJlbW92ZUNoaWxkKCB0aGlzLmRvbS5idXR0b25zW2ldICk7CgkJfQoJCXRoaXMuZG9tLmJ1dHRvbnMuc3BsaWNlKCAwLCB0aGlzLmRvbS5idXR0b25zLmxlbmd0aCApOwoKCQlpZiAoIHRoaXMuZG9tLnJlc3RvcmUgKSB7CgkJCXRoaXMuZG9tLnJlc3RvcmUucGFyZW50Tm9kZSggdGhpcy5kb20ucmVzdG9yZSApOwoJCX0KCgkJLyogUmUtYWRkIHRoZW0gKHRoaXMgaXMgbm90IHRoZSBvcHRpbWFsIHdheSBvZiBkb2luZyB0aGlzLCBpdCBpcyBmYXN0IGFuZCBlZmZlY3RpdmUpICovCgkJdGhpcy5fZm5BZGRHcm91cHMoKTsKCQl0aGlzLl9mbkFkZEJ1dHRvbnMoKTsKCgkJLyogVXBkYXRlIHRoZSBjaGVja2JveGVzICovCgkJdGhpcy5fZm5EcmF3Q2FsbGJhY2soKTsKCX0sCgoKCS8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICoKCSAqIFByaXZhdGUgbWV0aG9kcyAodGhleSBhcmUgb2YgY291cnNlIHB1YmxpYyBpbiBKUywgYnV0IHJlY29tbWVuZGVkIGFzIHByaXZhdGUpCgkgKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqLwoKCS8qKgoJICogQ29uc3RydWN0b3IgbG9naWMKCSAqICBAbWV0aG9kICBfZm5Db25zdHJ1Y3QKCSAqICBAcmV0dXJucyB2b2lkCgkgKiAgQHByaXZhdGUKCSAqLwoJIl9mbkNvbnN0cnVjdCI6IGZ1bmN0aW9uICggaW5pdCApCgl7CgkJdGhpcy5fZm5BcHBseUN1c3RvbWlzYXRpb24oIGluaXQgKTsKCgkJdmFyIHRoYXQgPSB0aGlzOwoJCXZhciBpLCBpTGVuOwoJCXRoaXMuZG9tLndyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCQl0aGlzLmRvbS53cmFwcGVyLmNsYXNzTmFtZSA9ICJDb2xWaXMiOwoKCQl0aGlzLmRvbS5idXR0b24gPSAkKCAnPGJ1dHRvbiAvPicsIHsKCQkJCSdjbGFzcyc6ICF0aGlzLnMuZHQuYkpVSSA\/CgkJCQkJIkNvbFZpc19CdXR0b24gQ29sVmlzX01hc3RlckJ1dHRvbiIgOgoJCQkJCSJDb2xWaXNfQnV0dG9uIENvbFZpc19NYXN0ZXJCdXR0b24gdWktYnV0dG9uIHVpLXN0YXRlLWRlZmF1bHQiCgkJCX0gKQoJCQkuYXBwZW5kKCAnPHNwYW4+Jyt0aGlzLnMuYnV0dG9uVGV4dCsnPC9zcGFuPicgKQoJCQkuYmluZCggdGhpcy5zLmFjdGl2YXRlPT0ibW91c2VvdmVyIiA\/ICJtb3VzZW92ZXIiIDogImNsaWNrIiwgZnVuY3Rpb24gKGUpIHsKCQkJCWUucHJldmVudERlZmF1bHQoKTsKCQkJCXRoYXQuX2ZuQ29sbGVjdGlvblNob3coKTsKCQkJfSApCgkJCS5hcHBlbmRUbyggdGhpcy5kb20ud3JhcHBlciApWzBdOwoKCQl0aGlzLmRvbS5jYXRjaGVyID0gdGhpcy5fZm5Eb21DYXRjaGVyKCk7CgkJdGhpcy5kb20uY29sbGVjdGlvbiA9IHRoaXMuX2ZuRG9tQ29sbGVjdGlvbigpOwoJCXRoaXMuZG9tLmJhY2tncm91bmQgPSB0aGlzLl9mbkRvbUJhY2tncm91bmQoKTsKCgkJdGhpcy5fZm5BZGRHcm91cHMoKTsKCQl0aGlzLl9mbkFkZEJ1dHRvbnMoKTsKCgkJLyogU3RvcmUgdGhlIG9yaWdpbmFsIHZpc2liaWxpdHkgaW5mb3JtYXRpb24gKi8KCQlmb3IgKCBpPTAsIGlMZW49dGhpcy5zLmR0LmFvQ29sdW1ucy5sZW5ndGggOyBpPGlMZW4gOyBpKysgKQoJCXsKCQkJdGhpcy5zLmFiT3JpZ2luYWwucHVzaCggdGhpcy5zLmR0LmFvQ29sdW1uc1tpXS5iVmlzaWJsZSApOwoJCX0KCgkJLyogVXBkYXRlIG9uIGVhY2ggZHJhdyAqLwoJCXRoaXMucy5kdC5hb0RyYXdDYWxsYmFjay5wdXNoKCB7CgkJCSJmbiI6IGZ1bmN0aW9uICgpIHsKCQkJCXRoYXQuX2ZuRHJhd0NhbGxiYWNrLmNhbGwoIHRoYXQgKTsKCQkJfSwKCQkJInNOYW1lIjogIkNvbFZpcyIKCQl9ICk7CgoJCS8qIElmIGNvbHVtbnMgYXJlIHJlb3JkZXJlZCwgdGhlbiB3ZSBuZWVkIHRvIHVwZGF0ZSBvdXIgZXhjbHVkZSBsaXN0IGFuZAoJCSAqIHJlYnVpbGQgdGhlIGRpc3BsYXllZCBsaXN0CgkJICovCgkJJCh0aGlzLnMuZHQub0luc3RhbmNlKS5iaW5kKCAnY29sdW1uLXJlb3JkZXInLCBmdW5jdGlvbiAoIGUsIG9TZXR0aW5ncywgb1Jlb3JkZXIgKSB7CgkJCWZvciAoIGk9MCwgaUxlbj10aGF0LnMuYWlFeGNsdWRlLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApIHsKCQkJCXRoYXQucy5haUV4Y2x1ZGVbaV0gPSBvUmVvcmRlci5haUludmVydE1hcHBpbmdbIHRoYXQucy5haUV4Y2x1ZGVbaV0gXTsKCQkJfQoKCQkJdmFyIG1TdG9yZSA9IHRoYXQucy5hYk9yaWdpbmFsLnNwbGljZSggb1Jlb3JkZXIuaUZyb20sIDEgKVswXTsKCQkJdGhhdC5zLmFiT3JpZ2luYWwuc3BsaWNlKCBvUmVvcmRlci5pVG8sIDAsIG1TdG9yZSApOwoKCQkJdGhhdC5mblJlYnVpbGQoKTsKCQl9ICk7CgoJCS8vIFNldCB0aGUgaW5pdGlhbCBzdGF0ZQoJCXRoaXMuX2ZuRHJhd0NhbGxiYWNrKCk7Cgl9LAoKCgkvKioKCSAqIEFwcGx5IGFueSBjdXN0b21pc2F0aW9uIHRvIHRoZSBzZXR0aW5ncyBmcm9tIHRoZSBEYXRhVGFibGVzIGluaXRpYWxpc2F0aW9uCgkgKiAgQG1ldGhvZCAgX2ZuQXBwbHlDdXN0b21pc2F0aW9uCgkgKiAgQHJldHVybnMgdm9pZAoJICogIEBwcml2YXRlCgkgKi8KCSJfZm5BcHBseUN1c3RvbWlzYXRpb24iOiBmdW5jdGlvbiAoIGluaXQgKQoJewoJCSQuZXh0ZW5kKCB0cnVlLCB0aGlzLnMsIENvbFZpcy5kZWZhdWx0cywgaW5pdCApOwoKCQkvLyBTbGlnaHRseSBtZXNzeSBvdmVybGFwIGZvciB0aGUgY2FtZWxDYXNlIG5vdGF0aW9uCgkJaWYgKCAhIHRoaXMucy5zaG93QWxsICYmIHRoaXMucy5iU2hvd0FsbCApIHsKCQkJdGhpcy5zLnNob3dBbGwgPSB0aGlzLnMuc1Nob3dBbGw7CgkJfQoKCQlpZiAoICEgdGhpcy5zLnJlc3RvcmUgJiYgdGhpcy5zLmJSZXN0b3JlICkgewoJCQl0aGlzLnMucmVzdG9yZSA9IHRoaXMucy5zUmVzdG9yZTsKCQl9CgoJCS8vIENhbWVsQ2FzZSB0byBIdW5nYXJpYW4gZm9yIHRoZSBjb2x1bW4gZ3JvdXBzIAoJCXZhciBncm91cHMgPSB0aGlzLnMuZ3JvdXBzOwoJCXZhciBodW5nYXJpYW5Hcm91cHMgPSB0aGlzLnMuYW9Hcm91cHM7CgkJaWYgKCBncm91cHMgKSB7CgkJCWZvciAoIHZhciBpPTAsIGllbj1ncm91cHMubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7CgkJCQlpZiAoIGdyb3Vwc1tpXS50aXRsZSApIHsKCQkJCQlodW5nYXJpYW5Hcm91cHNbaV0uc1RpdGxlID0gZ3JvdXBzW2ldLnRpdGxlOwoJCQkJfQoJCQkJaWYgKCBncm91cHNbaV0uY29sdW1ucyApIHsKCQkJCQlodW5nYXJpYW5Hcm91cHNbaV0uYWlDb2x1bW5zID0gZ3JvdXBzW2ldLmNvbHVtbnM7CgkJCQl9CgkJCX0KCQl9Cgl9LAoKCgkvKioKCSAqIE9uIGVhY2ggdGFibGUgZHJhdywgY2hlY2sgdGhlIHZpc2liaWxpdHkgY2hlY2tib3hlcyBhcyBuZWVkZWQuIFRoaXMgYWxsb3dzIGFueSBwcm9jZXNzIHRvCgkgKiB1cGRhdGUgdGhlIHRhYmxlJ3MgY29sdW1uIHZpc2liaWxpdHkgYW5kIENvbFZpcyB3aWxsIHN0aWxsIGJlIGFjY3VyYXRlLgoJICogIEBtZXRob2QgIF9mbkRyYXdDYWxsYmFjawoJICogIEByZXR1cm5zIHZvaWQKCSAqICBAcHJpdmF0ZQoJICovCgkiX2ZuRHJhd0NhbGxiYWNrIjogZnVuY3Rpb24gKCkKCXsKCQl2YXIgY29sdW1ucyA9IHRoaXMucy5kdC5hb0NvbHVtbnM7CgkJdmFyIGJ1dHRvbnMgPSB0aGlzLmRvbS5idXR0b25zOwoJCXZhciBncm91cHMgPSB0aGlzLnMuYW9Hcm91cHM7CgkJdmFyIGJ1dHRvbjsKCgkJZm9yICggdmFyIGk9MCwgaWVuPWJ1dHRvbnMubGVuZ3RoIDsgaTxpZW4gOyBpKysgKSB7CgkJCWJ1dHRvbiA9IGJ1dHRvbnNbaV07CgoJCQlpZiAoIGJ1dHRvbi5fX2NvbHVtbklkeCAhPT0gdW5kZWZpbmVkICkgewoJCQkJJCgnaW5wdXQnLCBidXR0b24pLnByb3AoICdjaGVja2VkJywgY29sdW1uc1sgYnV0dG9uLl9fY29sdW1uSWR4IF0uYlZpc2libGUgKTsKCQkJfQoJCX0KCgkJdmFyIGFsbFZpc2libGUgPSBmdW5jdGlvbiAoIGNvbHVtbkluZGVjZXMgKSB7CgkJCWZvciAoIHZhciBrPTAsIGtMZW49Y29sdW1uSW5kZWNlcy5sZW5ndGggOyBrPGtMZW4gOyBrKysgKQoJCQl7CgkJCQlpZiAoICBjb2x1bW5zW2NvbHVtbkluZGVjZXNba11dLmJWaXNpYmxlID09PSBmYWxzZSApIHsgcmV0dXJuIGZhbHNlOyB9CgkJCX0KCQkJcmV0dXJuIHRydWU7CgkJfTsKCQl2YXIgYWxsSGlkZGVuID0gZnVuY3Rpb24gKCBjb2x1bW5JbmRlY2VzICkgewoJCQlmb3IgKCB2YXIgbT0wICwgbUxlbj1jb2x1bW5JbmRlY2VzLmxlbmd0aCA7IG08bUxlbiA7IG0rKyApCgkJCXsKCQkJCWlmICggY29sdW1uc1tjb2x1bW5JbmRlY2VzW21dXS5iVmlzaWJsZSA9PT0gdHJ1ZSApIHsgcmV0dXJuIGZhbHNlOyB9CgkJCX0KCQkJcmV0dXJuIHRydWU7CgkJfTsKCgkJZm9yICggdmFyIGo9MCwgakxlbj1ncm91cHMubGVuZ3RoIDsgajxqTGVuIDsgaisrICkKCQl7CgkJCWlmICggYWxsVmlzaWJsZShncm91cHNbal0uYWlDb2x1bW5zKSApCgkJCXsKCQkJCSQoJ2lucHV0JywgdGhpcy5kb20uZ3JvdXBCdXR0b25zW2pdKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7CgkJCQkkKCdpbnB1dCcsIHRoaXMuZG9tLmdyb3VwQnV0dG9uc1tqXSkucHJvcCgnaW5kZXRlcm1pbmF0ZScsIGZhbHNlKTsKCQkJfQoJCQllbHNlIGlmICggYWxsSGlkZGVuKGdyb3Vwc1tqXS5haUNvbHVtbnMpICkKCQkJewoJCQkJJCgnaW5wdXQnLCB0aGlzLmRvbS5ncm91cEJ1dHRvbnNbal0pLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7CgkJCQkkKCdpbnB1dCcsIHRoaXMuZG9tLmdyb3VwQnV0dG9uc1tqXSkucHJvcCgnaW5kZXRlcm1pbmF0ZScsIGZhbHNlKTsKCQkJfQoJCQllbHNlCgkJCXsKCQkJCSQoJ2lucHV0JywgdGhpcy5kb20uZ3JvdXBCdXR0b25zW2pdKS5wcm9wKCdpbmRldGVybWluYXRlJywgdHJ1ZSk7CgkJCX0KCQl9Cgl9LAoKCgkvKioKCSAqIExvb3AgdGhyb3VnaCB0aGUgZ3JvdXBzIChwcm92aWRlZCBpbiB0aGUgc2V0dGluZ3MpIGFuZCBjcmVhdGUgYSBidXR0b24gZm9yIGVhY2guCgkgKiAgQG1ldGhvZCAgX2ZuQWRkZ3JvdXBzCgkgKiAgQHJldHVybnMgdm9pZAoJICogIEBwcml2YXRlCgkgKi8KCSJfZm5BZGRHcm91cHMiOiBmdW5jdGlvbiAoKQoJewoJCXZhciBuQnV0dG9uOwoKCQlpZiAoIHR5cGVvZiB0aGlzLnMuYW9Hcm91cHMgIT0gJ3VuZGVmaW5lZCcgKQoJCXsKCQkJZm9yICggdmFyIGk9MCwgaUxlbj10aGlzLnMuYW9Hcm91cHMubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkKCQkJewoJCQkJbkJ1dHRvbiA9IHRoaXMuX2ZuRG9tR3JvdXBCdXR0b24oIGkgKTsKCQkJCXRoaXMuZG9tLmdyb3VwQnV0dG9ucy5wdXNoKCBuQnV0dG9uICk7CgkJCQl0aGlzLmRvbS5idXR0b25zLnB1c2goIG5CdXR0b24gKTsKCQkJCXRoaXMuZG9tLmNvbGxlY3Rpb24uYXBwZW5kQ2hpbGQoIG5CdXR0b24gKTsKCQkJfQoJCX0KCX0sCgoKCS8qKgoJICogTG9vcCB0aHJvdWdoIHRoZSBjb2x1bW5zIGluIHRoZSB0YWJsZSBhbmQgYXMgYSBuZXcgYnV0dG9uIGZvciBlYWNoIG9uZS4KCSAqICBAbWV0aG9kICBfZm5BZGRCdXR0b25zCgkgKiAgQHJldHVybnMgdm9pZAoJICogIEBwcml2YXRlCgkgKi8KCSJfZm5BZGRCdXR0b25zIjogZnVuY3Rpb24gKCkKCXsKCQl2YXIKCQkJbkJ1dHRvbiwKCQkJY29sdW1ucyA9IHRoaXMucy5kdC5hb0NvbHVtbnM7CgoJCWlmICggJC5pbkFycmF5KCAnYWxsJywgdGhpcy5zLmFpRXhjbHVkZSApID09PSAtMSApIHsKCQkJZm9yICggdmFyIGk9MCwgaUxlbj1jb2x1bW5zLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApCgkJCXsKCQkJCWlmICggJC5pbkFycmF5KCBpLCB0aGlzLnMuYWlFeGNsdWRlICkgPT09IC0xICkKCQkJCXsKCQkJCQluQnV0dG9uID0gdGhpcy5fZm5Eb21Db2x1bW5CdXR0b24oIGkgKTsKCQkJCQluQnV0dG9uLl9fY29sdW1uSWR4ID0gaTsKCQkJCQl0aGlzLmRvbS5idXR0b25zLnB1c2goIG5CdXR0b24gKTsKCQkJCX0KCQkJfQoJCX0KCgkJaWYgKCB0aGlzLnMub3JkZXIgPT09ICdhbHBoYScgKSB7CgkJCXRoaXMuZG9tLmJ1dHRvbnMuc29ydCggZnVuY3Rpb24gKCBhLCBiICkgewoJCQkJdmFyIHRpdGxlQSA9IGNvbHVtbnNbIGEuX19jb2x1bW5JZHggXS5zVGl0bGU7CgkJCQl2YXIgdGl0bGVCID0gY29sdW1uc1sgYi5fX2NvbHVtbklkeCBdLnNUaXRsZTsKCgkJCQlyZXR1cm4gdGl0bGVBID09PSB0aXRsZUIgPwoJCQkJCTAgOgoJCQkJCXRpdGxlQSA8IHRpdGxlQiA\/CgkJCQkJCS0xIDoKCQkJCQkJMTsKCQkJfSApOwoJCX0KCgkJaWYgKCB0aGlzLnMucmVzdG9yZSApCgkJewoJCQluQnV0dG9uID0gdGhpcy5fZm5Eb21SZXN0b3JlQnV0dG9uKCk7CgkJCW5CdXR0b24uY2xhc3NOYW1lICs9ICIgQ29sVmlzX1Jlc3RvcmUiOwoJCQl0aGlzLmRvbS5idXR0b25zLnB1c2goIG5CdXR0b24gKTsKCQl9CgoJCWlmICggdGhpcy5zLnNob3dBbGwgKQoJCXsKCQkJbkJ1dHRvbiA9IHRoaXMuX2ZuRG9tU2hvd1hCdXR0b24oIHRoaXMucy5zaG93QWxsLCB0cnVlICk7CgkJCW5CdXR0b24uY2xhc3NOYW1lICs9ICIgQ29sVmlzX1Nob3dBbGwiOwoJCQl0aGlzLmRvbS5idXR0b25zLnB1c2goIG5CdXR0b24gKTsKCQl9CgoJCWlmICggdGhpcy5zLnNob3dOb25lICkKCQl7CgkJCW5CdXR0b24gPSB0aGlzLl9mbkRvbVNob3dYQnV0dG9uKCB0aGlzLnMuc2hvd05vbmUsIGZhbHNlICk7CgkJCW5CdXR0b24uY2xhc3NOYW1lICs9ICIgQ29sVmlzX1Nob3dOb25lIjsKCQkJdGhpcy5kb20uYnV0dG9ucy5wdXNoKCBuQnV0dG9uICk7CgkJfQoKCQkkKHRoaXMuZG9tLmNvbGxlY3Rpb24pLmFwcGVuZCggdGhpcy5kb20uYnV0dG9ucyApOwoJfSwKCgoJLyoqCgkgKiBDcmVhdGUgYSBidXR0b24gd2hpY2ggYWxsb3dzIGEgInJlc3RvcmUiIGFjdGlvbgoJICogIEBtZXRob2QgIF9mbkRvbVJlc3RvcmVCdXR0b24KCSAqICBAcmV0dXJucyB7Tm9kZX0gQ3JlYXRlZCBidXR0b24KCSAqICBAcHJpdmF0ZQoJICovCgkiX2ZuRG9tUmVzdG9yZUJ1dHRvbiI6IGZ1bmN0aW9uICgpCgl7CgkJdmFyCgkJCXRoYXQgPSB0aGlzLAoJCQlkdCA9IHRoaXMucy5kdDsKCgkJcmV0dXJuICQoCgkJCQknPGxpIGNsYXNzPSJDb2xWaXNfU3BlY2lhbCAnKyhkdC5iSlVJID8gJ3VpLWJ1dHRvbiB1aS1zdGF0ZS1kZWZhdWx0JyA6ICcnKSsnIj4nKwoJCQkJCXRoaXMucy5yZXN0b3JlKwoJCQkJJzwvbGk+JwoJCQkpCgkJCS5jbGljayggZnVuY3Rpb24gKGUpIHsKCQkJCWZvciAoIHZhciBpPTAsIGlMZW49dGhhdC5zLmFiT3JpZ2luYWwubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkKCQkJCXsKCQkJCQl0aGF0LnMuZHQub0luc3RhbmNlLmZuU2V0Q29sdW1uVmlzKCBpLCB0aGF0LnMuYWJPcmlnaW5hbFtpXSwgZmFsc2UgKTsKCQkJCX0KCQkJCXRoYXQuX2ZuQWRqdXN0T3BlblJvd3MoKTsKCQkJCXRoYXQucy5kdC5vSW5zdGFuY2UuZm5BZGp1c3RDb2x1bW5TaXppbmcoIGZhbHNlICk7CgkJCQl0aGF0LnMuZHQub0luc3RhbmNlLmZuRHJhdyggZmFsc2UgKTsKCQkJfSApWzBdOwoJfSwKCgoJLyoqCgkgKiBDcmVhdGUgYSBidXR0b24gd2hpY2ggYWxsb3dzIHNob3cgYWxsIGFuZCBzaG93IG5vZGUgYWN0aW9ucwoJICogIEBtZXRob2QgIF9mbkRvbVNob3dYQnV0dG9uCgkgKiAgQHJldHVybnMge05vZGV9IENyZWF0ZWQgYnV0dG9uCgkgKiAgQHByaXZhdGUKCSAqLwoJIl9mbkRvbVNob3dYQnV0dG9uIjogZnVuY3Rpb24gKCBzdHIsIGFjdGlvbiApCgl7CgkJdmFyCgkJCXRoYXQgPSB0aGlzLAoJCQlkdCA9IHRoaXMucy5kdDsKCgkJcmV0dXJuICQoCgkJCQknPGxpIGNsYXNzPSJDb2xWaXNfU3BlY2lhbCAnKyhkdC5iSlVJID8gJ3VpLWJ1dHRvbiB1aS1zdGF0ZS1kZWZhdWx0JyA6ICcnKSsnIj4nKwoJCQkJCXN0cisKCQkJCSc8L2xpPicKCQkJKQoJCQkuY2xpY2soIGZ1bmN0aW9uIChlKSB7CgkJCQlmb3IgKCB2YXIgaT0wLCBpTGVuPXRoYXQucy5hYk9yaWdpbmFsLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApCgkJCQl7CgkJCQkJaWYgKHRoYXQucy5haUV4Y2x1ZGUuaW5kZXhPZihpKSA9PT0gLTEpCgkJCQkJewoJCQkJCQl0aGF0LnMuZHQub0luc3RhbmNlLmZuU2V0Q29sdW1uVmlzKCBpLCBhY3Rpb24sIGZhbHNlICk7CgkJCQkJfQoJCQkJfQoJCQkJdGhhdC5fZm5BZGp1c3RPcGVuUm93cygpOwoJCQkJdGhhdC5zLmR0Lm9JbnN0YW5jZS5mbkFkanVzdENvbHVtblNpemluZyggZmFsc2UgKTsKCQkJCXRoYXQucy5kdC5vSW5zdGFuY2UuZm5EcmF3KCBmYWxzZSApOwoJCQl9IClbMF07Cgl9LAoKCgkvKioKCSAqIENyZWF0ZSB0aGUgRE9NIGZvciBhIHNob3cgLyBoaWRlIGdyb3VwIGJ1dHRvbgoJICogIEBtZXRob2QgIF9mbkRvbUdyb3VwQnV0dG9uCgkgKiAgQHBhcmFtIHtpbnR9IGkgR3JvdXAgaW4gcXVlc3Rpb24sIG9yZGVyIGJhc2VkIG9uIHRoYXQgcHJvdmlkZWQgaW4gc2V0dGluZ3MKCSAqICBAcmV0dXJucyB7Tm9kZX0gQ3JlYXRlZCBidXR0b24KCSAqICBAcHJpdmF0ZQoJICovCgkiX2ZuRG9tR3JvdXBCdXR0b24iOiBmdW5jdGlvbiAoIGkgKQoJewoJCXZhcgoJCQl0aGF0ID0gdGhpcywKCQkJZHQgPSB0aGlzLnMuZHQsCgkJCW9Hcm91cCA9IHRoaXMucy5hb0dyb3Vwc1tpXTsKCgkJcmV0dXJuICQoCgkJCQknPGxpIGNsYXNzPSJDb2xWaXNfU3BlY2lhbCAnKyhkdC5iSlVJID8gJ3VpLWJ1dHRvbiB1aS1zdGF0ZS1kZWZhdWx0JyA6ICcnKSsnIj4nKwoJCQkJCSc8bGFiZWw+JysKCQkJCQkJJzxpbnB1dCB0eXBlPSJjaGVja2JveCIgLz4nKwoJCQkJCQknPHNwYW4+JytvR3JvdXAuc1RpdGxlKyc8L3NwYW4+JysKCQkJCQknPC9sYWJlbD4nKwoJCQkJJzwvbGk+JwoJCQkpCgkJCS5jbGljayggZnVuY3Rpb24gKGUpIHsKCQkJCXZhciBzaG93SGlkZSA9ICEkKCdpbnB1dCcsIHRoaXMpLmlzKCI6Y2hlY2tlZCIpOwoJCQkJaWYgKCAgZS50YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gImxpIiApCgkJCQl7CgkJCQkJc2hvd0hpZGUgPSAhIHNob3dIaWRlOwoJCQkJfQoKCQkJCWZvciAoIHZhciBqPTAgOyBqIDwgb0dyb3VwLmFpQ29sdW1ucy5sZW5ndGggOyBqKysgKQoJCQkJewoJCQkJCXRoYXQucy5kdC5vSW5zdGFuY2UuZm5TZXRDb2x1bW5WaXMoIG9Hcm91cC5haUNvbHVtbnNbal0sIHNob3dIaWRlICk7CgkJCQl9CgkJCX0gKVswXTsKCX0sCgoKCS8qKgoJICogQ3JlYXRlIHRoZSBET00gZm9yIGEgc2hvdyAvIGhpZGUgYnV0dG9uCgkgKiAgQG1ldGhvZCAgX2ZuRG9tQ29sdW1uQnV0dG9uCgkgKiAgQHBhcmFtIHtpbnR9IGkgQ29sdW1uIGluIHF1ZXN0aW9uCgkgKiAgQHJldHVybnMge05vZGV9IENyZWF0ZWQgYnV0dG9uCgkgKiAgQHByaXZhdGUKCSAqLwoJIl9mbkRvbUNvbHVtbkJ1dHRvbiI6IGZ1bmN0aW9uICggaSApCgl7CgkJdmFyCgkJCXRoYXQgPSB0aGlzLAoJCQljb2x1bW4gPSB0aGlzLnMuZHQuYW9Db2x1bW5zW2ldLAoJCQlkdCA9IHRoaXMucy5kdDsKCgkJdmFyIHRpdGxlID0gdGhpcy5zLmZuTGFiZWw9PT1udWxsID8KCQkJY29sdW1uLnNUaXRsZSA6CgkJCXRoaXMucy5mbkxhYmVsKCBpLCBjb2x1bW4uc1RpdGxlLCBjb2x1bW4ublRoICk7CgoJCXJldHVybiAkKAoJCQkJJzxsaSAnKyhkdC5iSlVJID8gJ2NsYXNzPSJ1aS1idXR0b24gdWktc3RhdGUtZGVmYXVsdCInIDogJycpKyc+JysKCQkJCQknPGxhYmVsPicrCgkJCQkJCSc8aW5wdXQgdHlwZT0iY2hlY2tib3giIC8+JysKCQkJCQkJJzxzcGFuPicrdGl0bGUrJzwvc3Bhbj4nKwoJCQkJCSc8L2xhYmVsPicrCgkJCQknPC9saT4nCgkJCSkKCQkJLmNsaWNrKCBmdW5jdGlvbiAoZSkgewoJCQkJdmFyIHNob3dIaWRlID0gISQoJ2lucHV0JywgdGhpcykuaXMoIjpjaGVja2VkIik7CgkJCQlpZiAoICBlLnRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAibGkiICkKCQkJCXsKCQkJCQlzaG93SGlkZSA9ICEgc2hvd0hpZGU7CgkJCQl9CgoJCQkJLyogTmVlZCB0byBjb25zaWRlciB0aGUgY2FzZSB3aGVyZSB0aGUgaW5pdGlhbGlzZXIgY3JlYXRlZCBtb3JlIHRoYW4gb25lIHRhYmxlIC0gY2hhbmdlIHRoZQoJCQkJICogQVBJIGluZGV4IHRoYXQgRGF0YVRhYmxlcyBpcyB1c2luZwoJCQkJICovCgkJCQl2YXIgb2xkSW5kZXggPSAkLmZuLmRhdGFUYWJsZUV4dC5pQXBpSW5kZXg7CgkJCQkkLmZuLmRhdGFUYWJsZUV4dC5pQXBpSW5kZXggPSB0aGF0Ll9mbkRhdGFUYWJsZXNBcGlJbmRleC5jYWxsKHRoYXQpOwoKCQkJCS8vIE9wdGltaXNhdGlvbiBmb3Igc2VydmVyLXNpZGUgcHJvY2Vzc2luZyB3aGVuIHNjcm9sbGluZyAtIGRvbid0IGRvIGEgZnVsbCByZWRyYXcKCQkJCWlmICggZHQub0ZlYXR1cmVzLmJTZXJ2ZXJTaWRlICkKCQkJCXsKCQkJCQl0aGF0LnMuZHQub0luc3RhbmNlLmZuU2V0Q29sdW1uVmlzKCBpLCBzaG93SGlkZSwgZmFsc2UgKTsKCQkJCQl0aGF0LnMuZHQub0luc3RhbmNlLmZuQWRqdXN0Q29sdW1uU2l6aW5nKCBmYWxzZSApOwoJCQkJCWlmIChkdC5vU2Nyb2xsLnNYICE9PSAiIiB8fCBkdC5vU2Nyb2xsLnNZICE9PSAiIiApCgkJCQkJewoJCQkJCQl0aGF0LnMuZHQub0luc3RhbmNlLm9BcGkuX2ZuU2Nyb2xsRHJhdyggdGhhdC5zLmR0ICk7CgkJCQkJfQoJCQkJCXRoYXQuX2ZuRHJhd0NhbGxiYWNrKCk7CgkJCQl9CgkJCQllbHNlCgkJCQl7CgkJCQkJdGhhdC5zLmR0Lm9JbnN0YW5jZS5mblNldENvbHVtblZpcyggaSwgc2hvd0hpZGUgKTsKCQkJCX0KCgkJCQkkLmZuLmRhdGFUYWJsZUV4dC5pQXBpSW5kZXggPSBvbGRJbmRleDsgLyogUmVzdG9yZSAqLwoKCQkJCWlmICggZS50YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyAmJiB0aGF0LnMuZm5TdGF0ZUNoYW5nZSAhPT0gbnVsbCApCgkJCQl7CgkJCQkJdGhhdC5zLmZuU3RhdGVDaGFuZ2UuY2FsbCggdGhhdCwgaSwgc2hvd0hpZGUgKTsKCQkJCX0KCQkJfSApWzBdOwoJfSwKCgoJLyoqCgkgKiBHZXQgdGhlIHBvc2l0aW9uIGluIHRoZSBEYXRhVGFibGVzIGluc3RhbmNlIGFycmF5IG9mIHRoZSB0YWJsZSBmb3IgdGhpcwoJICogaW5zdGFuY2Ugb2YgQ29sVmlzCgkgKiAgQG1ldGhvZCAgX2ZuRGF0YVRhYmxlc0FwaUluZGV4CgkgKiAgQHJldHVybnMge2ludH0gSW5kZXgKCSAqICBAcHJpdmF0ZQoJICovCgkiX2ZuRGF0YVRhYmxlc0FwaUluZGV4IjogZnVuY3Rpb24gKCkKCXsKCQlmb3IgKCB2YXIgaT0wLCBpTGVuPXRoaXMucy5kdC5vSW5zdGFuY2UubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkKCQl7CgkJCWlmICggdGhpcy5zLmR0Lm9JbnN0YW5jZVtpXSA9PSB0aGlzLnMuZHQublRhYmxlICkKCQkJewoJCQkJcmV0dXJuIGk7CgkJCX0KCQl9CgkJcmV0dXJuIDA7Cgl9LAoKCgkvKioKCSAqIENyZWF0ZSB0aGUgZWxlbWVudCB1c2VkIHRvIGNvbnRhaW4gbGlzdCB0aGUgY29sdW1ucyAoaXQgaXMgc2hvd24gYW5kCgkgKiBoaWRkZW4gYXMgbmVlZGVkKQoJICogIEBtZXRob2QgIF9mbkRvbUNvbGxlY3Rpb24KCSAqICBAcmV0dXJucyB7Tm9kZX0gZGl2IGNvbnRhaW5lciBmb3IgdGhlIGNvbGxlY3Rpb24KCSAqICBAcHJpdmF0ZQoJICovCgkiX2ZuRG9tQ29sbGVjdGlvbiI6IGZ1bmN0aW9uICgpCgl7CgkJcmV0dXJuICQoJzx1bCAvPicsIHsKCQkJCSdjbGFzcyc6ICF0aGlzLnMuZHQuYkpVSSA\/CgkJCQkJIkNvbFZpc19jb2xsZWN0aW9uIiA6CgkJCQkJIkNvbFZpc19jb2xsZWN0aW9uIHVpLWJ1dHRvbnNldCB1aS1idXR0b25zZXQtbXVsdGkiCgkJCX0gKQoJCS5jc3MoIHsKCQkJJ2Rpc3BsYXknOiAnbm9uZScsCgkJCSdvcGFjaXR5JzogMCwKCQkJJ3Bvc2l0aW9uJzogISB0aGlzLnMuYkNzc1Bvc2l0aW9uID8KCQkJCSdhYnNvbHV0ZScgOgoJCQkJJycKCQl9IClbMF07Cgl9LAoKCgkvKioKCSAqIEFuIGVsZW1lbnQgdG8gYmUgcGxhY2VkIG9uIHRvcCBvZiB0aGUgYWN0aXZhdGUgYnV0dG9uIHRvIGNhdGNoIGV2ZW50cwoJICogIEBtZXRob2QgIF9mbkRvbUNhdGNoZXIKCSAqICBAcmV0dXJucyB7Tm9kZX0gZGl2IGNvbnRhaW5lciBmb3IgdGhlIGNvbGxlY3Rpb24KCSAqICBAcHJpdmF0ZQoJICovCgkiX2ZuRG9tQ2F0Y2hlciI6IGZ1bmN0aW9uICgpCgl7CgkJdmFyCgkJCXRoYXQgPSB0aGlzLAoJCQluQ2F0Y2hlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJCW5DYXRjaGVyLmNsYXNzTmFtZSA9ICJDb2xWaXNfY2F0Y2hlciI7CgoJCSQobkNhdGNoZXIpLmNsaWNrKCBmdW5jdGlvbiAoKSB7CgkJCXRoYXQuX2ZuQ29sbGVjdGlvbkhpZGUuY2FsbCggdGhhdCwgbnVsbCwgbnVsbCApOwoJCX0gKTsKCgkJcmV0dXJuIG5DYXRjaGVyOwoJfSwKCgoJLyoqCgkgKiBDcmVhdGUgdGhlIGVsZW1lbnQgdXNlZCB0byBzaGFkZSB0aGUgYmFja2dyb3VuZCwgYW5kIGNhcHR1cmUgaGlkZSBldmVudHMgKGl0IGlzIHNob3duIGFuZAoJICogaGlkZGVuIGFzIG5lZWRlZCkKCSAqICBAbWV0aG9kICBfZm5Eb21CYWNrZ3JvdW5kCgkgKiAgQHJldHVybnMge05vZGV9IGRpdiBjb250YWluZXIgZm9yIHRoZSBiYWNrZ3JvdW5kCgkgKiAgQHByaXZhdGUKCSAqLwoJIl9mbkRvbUJhY2tncm91bmQiOiBmdW5jdGlvbiAoKQoJewoJCXZhciB0aGF0ID0gdGhpczsKCgkJdmFyIGJhY2tncm91bmQgPSAkKCc8ZGl2PjwvZGl2PicpCgkJCS5hZGRDbGFzcyggJ0NvbFZpc19jb2xsZWN0aW9uQmFja2dyb3VuZCcgKQoJCQkuY3NzKCAnb3BhY2l0eScsIDAgKQoJCQkuY2xpY2soIGZ1bmN0aW9uICgpIHsKCQkJCXRoYXQuX2ZuQ29sbGVjdGlvbkhpZGUuY2FsbCggdGhhdCwgbnVsbCwgbnVsbCApOwoJCQl9ICk7CgoJCS8qIFdoZW4gY29uc2lkZXJpbmcgYSBtb3VzZSBvdmVyIGFjdGlvbiBmb3IgdGhlIGFjdGl2YXRpb24sIHdlIGFsc28gY29uc2lkZXIgYSBtb3VzZSBvdXQKCQkgKiB3aGljaCBpcyB0aGUgc2FtZSBhcyBhIG1vdXNlIG92ZXIgdGhlIGJhY2tncm91bmQgLSB3aXRob3V0IGFsbCB0aGUgbWVzc2luZyBhcm91bmQgb2YKCQkgKiBidWJibGluZyBldmVudHMuIFVzZSB0aGUgY2F0Y2hlciBlbGVtZW50IHRvIGF2b2lkIG1lc3NpbmcgYXJvdW5kIHdpdGggYnViYmxpbmcKCQkgKi8KCQlpZiAoIHRoaXMucy5hY3RpdmF0ZSA9PSAibW91c2VvdmVyIiApCgkJewoJCQliYWNrZ3JvdW5kLm1vdXNlb3ZlciggZnVuY3Rpb24gKCkgewoJCQkJdGhhdC5zLm92ZXJjb2xsZWN0aW9uID0gZmFsc2U7CgkJCQl0aGF0Ll9mbkNvbGxlY3Rpb25IaWRlLmNhbGwoIHRoYXQsIG51bGwsIG51bGwgKTsKCQkJfSApOwoJCX0KCgkJcmV0dXJuIGJhY2tncm91bmRbMF07Cgl9LAoKCgkvKioKCSAqIFNob3cgdGhlIHNob3cgLyBoaWRlIGxpc3QgYW5kIHRoZSBiYWNrZ3JvdW5kCgkgKiAgQG1ldGhvZCAgX2ZuQ29sbGVjdGlvblNob3cKCSAqICBAcmV0dXJucyB2b2lkCgkgKiAgQHByaXZhdGUKCSAqLwoJIl9mbkNvbGxlY3Rpb25TaG93IjogZnVuY3Rpb24gKCkKCXsKCQl2YXIgdGhhdCA9IHRoaXMsIGksIGlMZW4sIGlMZWZ0OwoJCXZhciBvUG9zID0gJCh0aGlzLmRvbS5idXR0b24pLm9mZnNldCgpOwoJCXZhciBuSGlkZGVuID0gdGhpcy5kb20uY29sbGVjdGlvbjsKCQl2YXIgbkJhY2tncm91bmQgPSB0aGlzLmRvbS5iYWNrZ3JvdW5kOwoJCXZhciBpRGl2WCA9IHBhcnNlSW50KG9Qb3MubGVmdCwgMTApOwoJCXZhciBpRGl2WSA9IHBhcnNlSW50KG9Qb3MudG9wICsgJCh0aGlzLmRvbS5idXR0b24pLm91dGVySGVpZ2h0KCksIDEwKTsKCgkJaWYgKCAhIHRoaXMucy5iQ3NzUG9zaXRpb24gKQoJCXsKCQkJbkhpZGRlbi5zdHlsZS50b3AgPSBpRGl2WSsicHgiOwoJCQluSGlkZGVuLnN0eWxlLmxlZnQgPSBpRGl2WCsicHgiOwoJCX0KCgkJJChuSGlkZGVuKS5jc3MoIHsKCQkJJ2Rpc3BsYXknOiAnYmxvY2snLAoJCQknb3BhY2l0eSc6IDAKCQl9ICk7CgoJCW5CYWNrZ3JvdW5kLnN0eWxlLmJvdHRvbSA9JzBweCc7CgkJbkJhY2tncm91bmQuc3R5bGUucmlnaHQgPSAnMHB4JzsKCgkJdmFyIG9TdHlsZSA9IHRoaXMuZG9tLmNhdGNoZXIuc3R5bGU7CgkJb1N0eWxlLmhlaWdodCA9ICQodGhpcy5kb20uYnV0dG9uKS5vdXRlckhlaWdodCgpKyJweCI7CgkJb1N0eWxlLndpZHRoID0gJCh0aGlzLmRvbS5idXR0b24pLm91dGVyV2lkdGgoKSsicHgiOwoJCW9TdHlsZS50b3AgPSBvUG9zLnRvcCsicHgiOwoJCW9TdHlsZS5sZWZ0ID0gaURpdlgrInB4IjsKCgkJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggbkJhY2tncm91bmQgKTsKCQlkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCBuSGlkZGVuICk7CgkJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggdGhpcy5kb20uY2F0Y2hlciApOwoKCQkvKiBUaGlzIHJlc3VsdHMgaW4gYSB2ZXJ5IHNtYWxsIGRlbGF5IGZvciB0aGUgZW5kIHVzZXIgYnV0IGl0IGFsbG93cyB0aGUgYW5pbWF0aW9uIHRvIGJlCgkJICogbXVjaCBzbW9vdGhlci4gSWYgeW91IGRvbid0IHdhbnQgdGhlIGFuaW1hdGlvbiwgdGhlbiB0aGUgc2V0VGltZW91dCBjYW4gYmUgcmVtb3ZlZAoJCSAqLwoJCSQobkhpZGRlbikuYW5pbWF0ZSh7Im9wYWNpdHkiOiAxfSwgdGhhdC5zLmlPdmVybGF5RmFkZSk7CgkJJChuQmFja2dyb3VuZCkuYW5pbWF0ZSh7Im9wYWNpdHkiOiAwLjF9LCB0aGF0LnMuaU92ZXJsYXlGYWRlLCAnbGluZWFyJywgZnVuY3Rpb24gKCkgewoJCQkvKiBJbiBJRTYgaWYgeW91IHNldCB0aGUgY2hlY2tlZCBhdHRyaWJ1dGUgb2YgYSBoaWRkZW4gY2hlY2tib3gsIHRoZW4gdGhpcyBpcyBub3QgdmlzdWFsbHkKCQkJICogcmVmbGVjdGVkLiBBcyBzdWNoLCB3ZSBuZWVkIHRvIGRvIGl0IGhlcmUsIG9uY2UgaXQgaXMgdmlzaWJsZS4gVW5iZWxpZXZhYmxlLgoJCQkgKi8KCQkJaWYgKCAkLmJyb3dzZXIgJiYgJC5icm93c2VyLm1zaWUgJiYgJC5icm93c2VyLnZlcnNpb24gPT0gIjYuMCIgKQoJCQl7CgkJCQl0aGF0Ll9mbkRyYXdDYWxsYmFjaygpOwoJCQl9CgkJfSk7CgoJCS8qIFZpc3VhbCBjb3JyZWN0aW9ucyB0byB0cnkgYW5kIGtlZXAgdGhlIGNvbGxlY3Rpb24gdmlzaWJsZSAqLwoJCWlmICggIXRoaXMucy5iQ3NzUG9zaXRpb24gKQoJCXsKCQkJaUxlZnQgPSAoIHRoaXMucy5zQWxpZ249PSJsZWZ0IiApID8KCQkJCWlEaXZYIDoKCQkJCWlEaXZYIC0gJChuSGlkZGVuKS5vdXRlcldpZHRoKCkgKyAkKHRoaXMuZG9tLmJ1dHRvbikub3V0ZXJXaWR0aCgpOwoKCQkJbkhpZGRlbi5zdHlsZS5sZWZ0ID0gaUxlZnQrInB4IjsKCgkJCXZhciBpRGl2V2lkdGggPSAkKG5IaWRkZW4pLm91dGVyV2lkdGgoKTsKCQkJdmFyIGlEaXZIZWlnaHQgPSAkKG5IaWRkZW4pLm91dGVySGVpZ2h0KCk7CgkJCXZhciBpRG9jV2lkdGggPSAkKGRvY3VtZW50KS53aWR0aCgpOwoKCQkJaWYgKCBpTGVmdCArIGlEaXZXaWR0aCA+IGlEb2NXaWR0aCApCgkJCXsKCQkJCW5IaWRkZW4uc3R5bGUubGVmdCA9IChpRG9jV2lkdGgtaURpdldpZHRoKSsicHgiOwoJCQl9CgkJfQoKCQl0aGlzLnMuaGlkZGVuID0gZmFsc2U7Cgl9LAoKCgkvKioKCSAqIEhpZGUgdGhlIHNob3cgLyBoaWRlIGxpc3QgYW5kIHRoZSBiYWNrZ3JvdW5kCgkgKiAgQG1ldGhvZCAgX2ZuQ29sbGVjdGlvbkhpZGUKCSAqICBAcmV0dXJucyB2b2lkCgkgKiAgQHByaXZhdGUKCSAqLwoJIl9mbkNvbGxlY3Rpb25IaWRlIjogZnVuY3Rpb24gKCAgKQoJewoJCXZhciB0aGF0ID0gdGhpczsKCgkJaWYgKCAhdGhpcy5zLmhpZGRlbiAmJiB0aGlzLmRvbS5jb2xsZWN0aW9uICE9PSBudWxsICkKCQl7CgkJCXRoaXMucy5oaWRkZW4gPSB0cnVlOwoKCQkJJCh0aGlzLmRvbS5jb2xsZWN0aW9uKS5hbmltYXRlKHsib3BhY2l0eSI6IDB9LCB0aGF0LnMuaU92ZXJsYXlGYWRlLCBmdW5jdGlvbiAoZSkgewoJCQkJdGhpcy5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQl9ICk7CgoJCQkkKHRoaXMuZG9tLmJhY2tncm91bmQpLmFuaW1hdGUoeyJvcGFjaXR5IjogMH0sIHRoYXQucy5pT3ZlcmxheUZhZGUsIGZ1bmN0aW9uIChlKSB7CgkJCQlkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKCB0aGF0LmRvbS5iYWNrZ3JvdW5kICk7CgkJCQlkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKCB0aGF0LmRvbS5jYXRjaGVyICk7CgkJCX0gKTsKCQl9Cgl9LAoKCgkvKioKCSAqIEFsdGVyIHRoZSBjb2xzcGFuIG9uIGFueSBmbk9wZW4gcm93cwoJICovCgkiX2ZuQWRqdXN0T3BlblJvd3MiOiBmdW5jdGlvbiAoKQoJewoJCXZhciBhb09wZW4gPSB0aGlzLnMuZHQuYW9PcGVuUm93czsKCQl2YXIgaVZpc2libGUgPSB0aGlzLnMuZHQub0FwaS5fZm5WaXNibGVDb2x1bW5zKCB0aGlzLnMuZHQgKTsKCgkJZm9yICggdmFyIGk9MCwgaUxlbj1hb09wZW4ubGVuZ3RoIDsgaTxpTGVuIDsgaSsrICkgewoJCQlhb09wZW5baV0ublRyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpWzBdLmNvbFNwYW4gPSBpVmlzaWJsZTsKCQl9Cgl9Cn07CgoKCgoKLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqCiAqIFN0YXRpYyBvYmplY3QgbWV0aG9kcwogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovCgovKioKICogUmVidWlsZCB0aGUgY29sbGVjdGlvbiBmb3IgYSBnaXZlbiB0YWJsZSwgb3IgYWxsIHRhYmxlcyBpZiBubyBwYXJhbWV0ZXIgZ2l2ZW4KICogIEBtZXRob2QgIENvbFZpcy5mblJlYnVpbGQKICogIEBzdGF0aWMKICogIEBwYXJhbSAgIG9iamVjdCBvVGFibGUgRGF0YVRhYmxlIGluc3RhbmNlIHRvIGNvbnNpZGVyIC0gb3B0aW9uYWwKICogIEByZXR1cm5zIHZvaWQKICovCkNvbFZpcy5mblJlYnVpbGQgPSBmdW5jdGlvbiAoIG9UYWJsZSApCnsKCXZhciBuVGFibGUgPSBudWxsOwoJaWYgKCB0eXBlb2Ygb1RhYmxlICE9ICd1bmRlZmluZWQnICkKCXsKCQluVGFibGUgPSBvVGFibGUuZm5TZXR0aW5ncygpLm5UYWJsZTsKCX0KCglmb3IgKCB2YXIgaT0wLCBpTGVuPUNvbFZpcy5hSW5zdGFuY2VzLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApCgl7CgkJaWYgKCB0eXBlb2Ygb1RhYmxlID09ICd1bmRlZmluZWQnIHx8IG5UYWJsZSA9PSBDb2xWaXMuYUluc3RhbmNlc1tpXS5zLmR0Lm5UYWJsZSApCgkJewoJCQlDb2xWaXMuYUluc3RhbmNlc1tpXS5mblJlYnVpbGQoKTsKCQl9Cgl9Cn07CgoKQ29sVmlzLmRlZmF1bHRzID0gewoJLyoqCgkgKiBNb2RlIG9mIGFjdGl2YXRpb24uIENhbiBiZSAnY2xpY2snIG9yICdtb3VzZW92ZXInCgkgKiAgQHByb3BlcnR5IGFjdGl2YXRlCgkgKiAgQHR5cGUgICAgIHN0cmluZwoJICogIEBkZWZhdWx0ICBjbGljawoJICovCglhY3RpdmU6ICdjbGljaycsCgoJLyoqCgkgKiBUZXh0IHVzZWQgZm9yIHRoZSBidXR0b24KCSAqICBAcHJvcGVydHkgYnV0dG9uVGV4dAoJICogIEB0eXBlICAgICBzdHJpbmcKCSAqICBAZGVmYXVsdCAgU2hvdyAvIGhpZGUgY29sdW1ucwoJICovCglidXR0b25UZXh0OiAnU2hvdyAvIGhpZGUgY29sdW1ucycsCgoJLyoqCgkgKiBMaXN0IG9mIGNvbHVtbnMgKGludGVnZXJzKSB3aGljaCBzaG91bGQgYmUgZXhjbHVkZWQgZnJvbSB0aGUgbGlzdAoJICogIEBwcm9wZXJ0eSBhaUV4Y2x1ZGUKCSAqICBAdHlwZSAgICAgYXJyYXkKCSAqICBAZGVmYXVsdCAgW10KCSAqLwoJYWlFeGNsdWRlOiBbXSwKCgkvKioKCSAqIFNob3cgcmVzdG9yZSBidXR0b24KCSAqICBAcHJvcGVydHkgYlJlc3RvcmUKCSAqICBAdHlwZSAgICAgYm9vbGVhbgoJICogIEBkZWZhdWx0ICBmYWxzZQoJICovCgliUmVzdG9yZTogZmFsc2UsCgoJLyoqCgkgKiBSZXN0b3JlIGJ1dHRvbiB0ZXh0CgkgKiAgQHByb3BlcnR5IHNSZXN0b3JlCgkgKiAgQHR5cGUgICAgIHN0cmluZwoJICogIEBkZWZhdWx0ICBSZXN0b3JlIG9yaWdpbmFsCgkgKi8KCXNSZXN0b3JlOiAnUmVzdG9yZSBvcmlnaW5hbCcsCgoJLyoqCgkgKiBTaG93IFNob3ctQWxsIGJ1dHRvbgoJICogIEBwcm9wZXJ0eSBiU2hvd0FsbAoJICogIEB0eXBlICAgICBib29sZWFuCgkgKiAgQGRlZmF1bHQgIGZhbHNlCgkgKi8KCWJTaG93QWxsOiBmYWxzZSwKCgkvKioKCSAqIFNob3cgQWxsIGJ1dHRvbiB0ZXh0CgkgKiAgQHByb3BlcnR5IHNTaG93QWxsCgkgKiAgQHR5cGUgICAgIHN0cmluZwoJICogIEBkZWZhdWx0ICBSZXN0b3JlIG9yaWdpbmFsCgkgKi8KCXNTaG93QWxsOiAnU2hvdyBBbGwnLAoKCS8qKgoJICogUG9zaXRpb24gb2YgdGhlIGNvbGxlY3Rpb24gbWVudSB3aGVuIHNob3duIC0gYWxpZ24gImxlZnQiIG9yICJyaWdodCIKCSAqICBAcHJvcGVydHkgc0FsaWduCgkgKiAgQHR5cGUgICAgIHN0cmluZwoJICogIEBkZWZhdWx0ICBsZWZ0CgkgKi8KCXNBbGlnbjogJ2xlZnQnLAoKCS8qKgoJICogQ2FsbGJhY2sgZnVuY3Rpb24gdG8gdGVsbCB0aGUgdXNlciB3aGVuIHRoZSBzdGF0ZSBoYXMgY2hhbmdlZAoJICogIEBwcm9wZXJ0eSBmblN0YXRlQ2hhbmdlCgkgKiAgQHR5cGUgICAgIGZ1bmN0aW9uCgkgKiAgQGRlZmF1bHQgIG51bGwKCSAqLwoJZm5TdGF0ZUNoYW5nZTogbnVsbCwKCgkvKioKCSAqIE92ZXJsYXkgYW5pbWF0aW9uIGR1cmF0aW9uIGluIG1TCgkgKiAgQHByb3BlcnR5IGlPdmVybGF5RmFkZQoJICogIEB0eXBlICAgICBpbnRlZ2VyfGZhbHNlCgkgKiAgQGRlZmF1bHQgIDUwMAoJICovCglpT3ZlcmxheUZhZGU6IDUwMCwKCgkvKioKCSAqIExhYmVsIGNhbGxiYWNrIGZvciBjb2x1bW4gbmFtZXMuIFRha2VzIHRocmVlIHBhcmFtZXRlcnM6IDEuIHRoZQoJICogY29sdW1uIGluZGV4LCAyLiB0aGUgY29sdW1uIHRpdGxlIGRldGVjdGVkIGJ5IERhdGFUYWJsZXMgYW5kIDMuIHRoZQoJICogVEggbm9kZSBmb3IgdGhlIGNvbHVtbgoJICogIEBwcm9wZXJ0eSBmbkxhYmVsCgkgKiAgQHR5cGUgICAgIGZ1bmN0aW9uCgkgKiAgQGRlZmF1bHQgIG51bGwKCSAqLwoJZm5MYWJlbDogbnVsbCwKCgkvKioKCSAqIEluZGljYXRlIGlmIHRoZSBjb2x1bW4gbGlzdCBzaG91bGQgYmUgcG9zaXRpb25lZCBieSBKYXZhc2NyaXB0LAoJICogdmlzdWFsbHkgYmVsb3cgdGhlIGJ1dHRvbiBvciBhbGxvdyBDU1MgdG8gZG8gdGhlIHBvc2l0aW9uaW5nCgkgKiAgQHByb3BlcnR5IGJDc3NQb3NpdGlvbgoJICogIEB0eXBlICAgICBib29sZWFuCgkgKiAgQGRlZmF1bHQgIGZhbHNlCgkgKi8KCWJDc3NQb3NpdGlvbjogZmFsc2UsCgoJLyoqCgkgKiBHcm91cCBidXR0b25zCgkgKiAgQHByb3BlcnR5IGFvR3JvdXBzCgkgKiAgQHR5cGUgICAgIGFycmF5CgkgKiAgQGRlZmF1bHQgIFtdCgkgKi8KCWFvR3JvdXBzOiBbXSwKCgkvKioKCSAqIEJ1dHRvbiBvcmRlcmluZyAtICdhbHBoYScgKGFscGhhYmV0aWNhbCkgb3IgJ2NvbHVtbicgKHRhYmxlIGNvbHVtbgoJICogb3JkZXIpCgkgKiAgQHByb3BlcnR5IG9yZGVyCgkgKiAgQHR5cGUgICAgIHN0cmluZwoJICogIEBkZWZhdWx0ICBjb2x1bW4KCSAqLwoJb3JkZXI6ICdjb2x1bW4nCn07CgoKCi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKgogKiBTdGF0aWMgb2JqZWN0IHByb3BlcnRpZXMKICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqLwoKLyoqCiAqIENvbGxlY3Rpb24gb2YgYWxsIENvbFZpcyBpbnN0YW5jZXMKICogIEBwcm9wZXJ0eSBDb2xWaXMuYUluc3RhbmNlcwogKiAgQHN0YXRpYwogKiAgQHR5cGUgICAgIEFycmF5CiAqICBAZGVmYXVsdCAgW10KICovCkNvbFZpcy5hSW5zdGFuY2VzID0gW107CgoKCgoKLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqCiAqIENvbnN0YW50cwogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovCgovKioKICogTmFtZSBvZiB0aGlzIGNsYXNzCiAqICBAY29uc3RhbnQgQ0xBU1MKICogIEB0eXBlICAgICBTdHJpbmcKICogIEBkZWZhdWx0ICBDb2xWaXMKICovCkNvbFZpcy5wcm90b3R5cGUuQ0xBU1MgPSAiQ29sVmlzIjsKCgovKioKICogQ29sVmlzIHZlcnNpb24KICogIEBjb25zdGFudCAgVkVSU0lPTgogKiAgQHR5cGUgICAgICBTdHJpbmcKICogIEBkZWZhdWx0ICAgU2VlIGNvZGUKICovCkNvbFZpcy5WRVJTSU9OID0gIjEuMS4xIjsKQ29sVmlzLnByb3RvdHlwZS5WRVJTSU9OID0gQ29sVmlzLlZFUlNJT047CgoKCgoKLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqCiAqIEluaXRpYWxpc2F0aW9uCiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi8KCi8qCiAqIFJlZ2lzdGVyIGEgbmV3IGZlYXR1cmUgd2l0aCBEYXRhVGFibGVzCiAqLwppZiAoIHR5cGVvZiAkLmZuLmRhdGFUYWJsZSA9PSAiZnVuY3Rpb24iICYmCiAgICAgdHlwZW9mICQuZm4uZGF0YVRhYmxlRXh0LmZuVmVyc2lvbkNoZWNrID09ICJmdW5jdGlvbiIgJiYKICAgICAkLmZuLmRhdGFUYWJsZUV4dC5mblZlcnNpb25DaGVjaygnMS43LjAnKSApCnsKCSQuZm4uZGF0YVRhYmxlRXh0LmFvRmVhdHVyZXMucHVzaCggewoJCSJmbkluaXQiOiBmdW5jdGlvbiggb0RUU2V0dGluZ3MgKSB7CgkJCXZhciBpbml0ID0gb0RUU2V0dGluZ3Mub0luaXQ7CgkJCXZhciBjb2x2aXMgPSBuZXcgQ29sVmlzKCBvRFRTZXR0aW5ncywgaW5pdC5jb2xWaXMgfHwgaW5pdC5vQ29sVmlzIHx8IHt9ICk7CgkJCXJldHVybiBjb2x2aXMuYnV0dG9uKCk7CgkJfSwKCQkiY0ZlYXR1cmUiOiAiQyIsCgkJInNGZWF0dXJlIjogIkNvbFZpcyIKCX0gKTsKfQplbHNlCnsKCWFsZXJ0KCAiV2FybmluZzogQ29sVmlzIHJlcXVpcmVzIERhdGFUYWJsZXMgMS43IG9yIGdyZWF0ZXIgLSB3d3cuZGF0YXRhYmxlcy5uZXQvZG93bmxvYWQiKTsKfQoKCi8vIE1ha2UgQ29sVmlzIGFjY2Vzc2libGUgZnJvbSB0aGUgRGF0YVRhYmxlcyBpbnN0YW5jZQokLmZuLmRhdGFUYWJsZS5Db2xWaXMgPSBDb2xWaXM7CiQuZm4uRGF0YVRhYmxlLkNvbFZpcyA9IENvbFZpczsKCgpyZXR1cm4gQ29sVmlzOwp9OyAvLyAvZmFjdG9yeQoKCi8vIERlZmluZSBhcyBhbiBBTUQgbW9kdWxlIGlmIHBvc3NpYmxlCmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkgewoJZGVmaW5lKCBbJ2pxdWVyeScsICdkYXRhdGFibGVzJ10sIGZhY3RvcnkgKTsKfQplbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkgewogICAgLy8gTm9kZS9Db21tb25KUwogICAgZmFjdG9yeSggcmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJ2RhdGF0YWJsZXMnKSApOwp9CmVsc2UgaWYgKCBqUXVlcnkgJiYgIWpRdWVyeS5mbi5kYXRhVGFibGUuQ29sVmlzICkgewoJLy8gT3RoZXJ3aXNlIHNpbXBseSBpbml0aWFsaXNlIGFzIG5vcm1hbCwgc3RvcHBpbmcgbXVsdGlwbGUgZXZhbHVhdGlvbgoJZmFjdG9yeSggalF1ZXJ5LCBqUXVlcnkuZm4uZGF0YVRhYmxlICk7Cn0KCgp9KSh3aW5kb3csIGRvY3VtZW50KTsKCg==",
    "size": "26545"
}