{
    "namaFile": "lib\/jpgraph\/jpgraph_pie3d.php",
    "lastUpdate": "2013-12-16+17:18:16.00",
    "contentFile": "\/IDIgOiAxICkgOwogICAgICAgIH0KCiAgICAgICAgLy8gQWRkIGEgc2FuaXR5IGNoZWNrIGZvciB3aWR0aAogICAgICAgIGlmKCAkd2lkdGggPCAxICkgewogICAgICAgICAgICBKcEdyYXBoRXJyb3I6OlJhaXNlTCgxNDAwNyk7Ly8oIldpZHRoIGZvciAzRCBQaWUgaXMgMC4gU3BlY2lmeSBhIHNpemUgPiAwIik7CiAgICAgICAgfQoKICAgICAgICAvLyBFc3RhYmxpc2ggYSB0aGlja25lc3MuIEJ5IGRlZmF1bHQgdGhlIHRoaWNrbmVzcyBpcyBhIGZpZnRoIG9mIHRoZQogICAgICAgIC8vIHBpZSBzbGljZSB3aWR0aCAoPXBpZSByYWRpdXMpIGJ1dCBzaW5jZSB0aGUgcGVyc3BlY3RpdmUgZGVwZW5kcwogICAgICAgIC8vIG9uIHRoZSBpbmNsaW5hdGlvbiBhbmdsZSB3ZSB1c2Ugc29tZSBoZXVyaXN0aWNzIHRvIG1ha2UgdGhlIGVkZ2UKICAgICAgICAvLyBzbGlnaHRseSB0aGlja2VyIHRoZSBsZXNzIHRoZSBhbmdsZS4KCiAgICAgICAgLy8gSGFzIHVzZXIgc3BlY2lmaWVkIGFuIGFic29sdXRlIHRoaWNrbmVzcz8gSW4gdGhhdCBjYXNlIHVzZQogICAgICAgIC8vIHRoYXQgaW5zdGVhZAoKICAgICAgICBpZiggJHRoaXMtPmlUaGlja25lc3MgKSB7CiAgICAgICAgICAgICR0aGljayA9ICR0aGlzLT5pVGhpY2tuZXNzOwogICAgICAgICAgICAkdGhpY2sgKj0gKCRhYW9wdGlvbiA9PT0gMSA\/IDIgOiAxICk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkdGhpY2sgPSAkd2lkdGgvMTI7CiAgICAgICAgfQogICAgICAgICRhID0gJHRoaXMtPmFuZ2xlOwogICAgICAgIAogICAgICAgIGlmKCAkYSA8PSAzMCApICR0aGljayAqPSAxLjY7CiAgICAgICAgZWxzZWlmKCAkYSA8PSA0MCApICR0aGljayAqPSAxLjQ7CiAgICAgICAgZWxzZWlmKCAkYSA8PSA1MCApICR0aGljayAqPSAxLjI7CiAgICAgICAgZWxzZWlmKCAkYSA8PSA2MCApICR0aGljayAqPSAxLjA7CiAgICAgICAgZWxzZWlmKCAkYSA8PSA3MCApICR0aGljayAqPSAwLjg7CiAgICAgICAgZWxzZWlmKCAkYSA8PSA4MCApICR0aGljayAqPSAwLjc7CiAgICAgICAgZWxzZSAkdGhpY2sgKj0gMC42OwoKICAgICAgICAkdGhpY2sgPSBmbG9vcigkdGhpY2spOwoKICAgICAgICBpZiggJHRoaXMtPmV4cGxvZGVfYWxsICkgewogICAgICAgICAgICBmb3IoJGk9MDsgJGkgPCAkbjsgKyskaSkKICAgICAgICAgICAgICAgICR0aGlzLT5leHBsb2RlX3JhZGl1c1skaV09JHRoaXMtPmV4cGxvZGVfcjsKICAgICAgICB9CgogICAgICAgICR0aGlzLT5QaWUzRCgkYWFvcHRpb24sJGltZywkdGhpcy0+ZGF0YSwgJGNhLCAkeGMsICR5YywgJHdpZHRoLCAkdGhpcy0+YW5nbGUsCiAgICAgICAgJHRoaWNrLCAwLjY1LCAkdGhpcy0+c3RhcnRhbmdsZSwgJHRoaXMtPmVkZ2Vjb2xvciwgJHRoaXMtPmVkZ2V3ZWlnaHQpOwoKICAgICAgICAvLyBBZGp1c3QgdGl0bGUgcG9zaXRpb24KICAgICAgICBpZiggJGFhb3B0aW9uICE9IDEgKSB7CiAgICAgICAgICAgICR0aGlzLT50aXRsZS0+U2V0UG9zKCR4YywkeWMtJHRoaXMtPnRpdGxlLT5HZXRGb250SGVpZ2h0KCRpbWcpLSR3aWR0aC8yLSR0aGlzLT50aXRsZS0+bWFyZ2luLCAgICAgICAgICJjZW50ZXIiLCJib3R0b20iKTsKICAgICAgICAgICAgJHRoaXMtPnRpdGxlLT5TdHJva2UoJGltZyk7CiAgICAgICAgfQogICAgfQoKICAgIC8vLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBQUklWQVRFIE1FVEhPRFMKCiAgICAvLyBQb3NpdGlvbiB0aGUgbGFiZWxzIG9mIGVhY2ggc2xpY2UKICAgIGZ1bmN0aW9uIFN0cm9rZUxhYmVscygkbGFiZWwsJGltZywkYSwkeHAsJHlwLCR6KSB7CiAgICAgICAgJHRoaXMtPnZhbHVlLT5oYWxpZ249ImxlZnQiOwogICAgICAgICR0aGlzLT52YWx1ZS0+dmFsaWduPSJ0b3AiOwoKICAgICAgICAvLyBQb3NpdGlvbiB0aGUgYXhpcyB0aXRsZS4KICAgICAgICAvLyBkeCwgZHkgaXMgdGhlIG9mZnNldCBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIGJvdW5kaW5nIGJveCB0aGF0IHNvcnJvdW5kcyB0aGUgdGV4dAogICAgICAgIC8vIHRoYXQgaW50ZXJzZWN0cyB3aXRoIHRoZSBleHRlbnNpb24gb2YgdGhlIGNvcnJlc3BvbmRpbmcgYXhpcy4gVGhlIGNvZGUgbG9va3MgYSBsaXR0bGUKICAgICAgICAvLyBiaXQgbWVzc3kgYnV0IHRoaXMgaXMgcmVhbGx5IHRoZSBvbmx5IHdheSBvZiBoYXZpbmcgYSByZWFzb25hYmxlIHBvc2l0aW9uIG9mIHRoZQogICAgICAgIC8vIGF4aXMgdGl0bGVzLgogICAgICAgICR0aGlzLT52YWx1ZS0+QXBwbHlGb250KCRpbWcpOwogICAgICAgICRoPSRpbWctPkdldFRleHRIZWlnaHQoJGxhYmVsKTsKICAgICAgICAvLyBGb3IgbnVtZXJpYyB2YWx1ZXMgdGhlIGZvcm1hdCBvZiB0aGUgZGlzcGxheSB2YWx1ZQogICAgICAgIC8vIG11c3QgYmUgdGFrZW4gaW50byBhY2NvdW50CiAgICAgICAgaWYoIGlzX251bWVyaWMoJGxhYmVsKSApIHsKICAgICAgICAgICAgaWYoICRsYWJlbCA+PSAwICkgewogICAgICAgICAgICAgICAgJHc9JGltZy0+R2V0VGV4dFdpZHRoKHNwcmludGYoJHRoaXMtPnZhbHVlLT5mb3JtYXQsJGxhYmVsKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkdz0kaW1nLT5HZXRUZXh0V2lkdGgoc3ByaW50ZigkdGhpcy0+dmFsdWUtPm5lZ2Zvcm1hdCwkbGFiZWwpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJHc9JGltZy0+R2V0VGV4dFdpZHRoKCRsYWJlbCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHdoaWxlKCAkYSA+IDIqTV9QSSApIHsKICAgICAgICAgICAgJGEgLT0gMipNX1BJOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZiggJGE+PTcqTV9QSS80IHx8ICRhIDw9IE1fUEkvNCApICRkeD0wOwogICAgICAgIGlmKCAkYT49TV9QSS80ICYmICRhIDw9IDMqTV9QSS80ICkgJGR4PSgkYS1NX1BJLzQpKjIvTV9QSTsKICAgICAgICBpZiggJGE+PTMqTV9QSS80ICYmICRhIDw9IDUqTV9QSS80ICkgJGR4PTE7CiAgICAgICAgaWYoICRhPj01Kk1fUEkvNCAmJiAkYSA8PSA3Kk1fUEkvNCApICRkeD0oMS0oJGEtTV9QSSo1LzQpKjIvTV9QSSk7CgogICAgICAgIGlmKCAkYT49NypNX1BJLzQgKSAkZHk9KCgkYS1NX1BJKS0zKk1fUEkvNCkqMi9NX1BJOwogICAgICAgIGlmKCAkYTw9TV9QSS80ICkgJGR5PSgxLSRhKjIvTV9QSSk7CiAgICAgICAgaWYoICRhPj1NX1BJLzQgJiYgJGEgPD0gMypNX1BJLzQgKSAkZHk9MTsKICAgICAgICBpZiggJGE+PTMqTV9QSS80ICYmICRhIDw9IDUqTV9QSS80ICkgJGR5PSgxLSgkYS0zKk1fUEkvNCkqMi9NX1BJKTsKICAgICAgICBpZiggJGE+PTUqTV9QSS80ICYmICRhIDw9IDcqTV9QSS80ICkgJGR5PTA7CgogICAgICAgICR4ID0gcm91bmQoJHhwLSRkeCokdyk7CiAgICAgICAgJHkgPSByb3VuZCgkeXAtJGR5KiRoKTsKCiAgICAgICAgLy8gTWFyayBhbmNob3IgcG9pbnQgZm9yIGRlYnVnZ2luZwogICAgICAgIC8qCiAgICAgICAgJGltZy0+U2V0Q29sb3IoJ3JlZCcpOwogICAgICAgICRpbWctPkxpbmUoJHhwLTEwLCR5cCwkeHArMTAsJHlwKTsKICAgICAgICAkaW1nLT5MaW5lKCR4cCwkeXAtMTAsJHhwLCR5cCsxMCk7CiAgICAgICAgKi8KCiAgICAgICAgJG9sZG1hcmdpbiA9ICR0aGlzLT52YWx1ZS0+bWFyZ2luOwogICAgICAgICR0aGlzLT52YWx1ZS0+bWFyZ2luPTA7CiAgICAgICAgJHRoaXMtPnZhbHVlLT5TdHJva2UoJGltZywkbGFiZWwsJHgsJHkpOwogICAgICAgICR0aGlzLT52YWx1ZS0+bWFyZ2luPSRvbGRtYXJnaW47CgogICAgfQp9IC8vIENsYXNzCgovKiBFT0YgKi8KPz4K",
    "size": "31914"
}