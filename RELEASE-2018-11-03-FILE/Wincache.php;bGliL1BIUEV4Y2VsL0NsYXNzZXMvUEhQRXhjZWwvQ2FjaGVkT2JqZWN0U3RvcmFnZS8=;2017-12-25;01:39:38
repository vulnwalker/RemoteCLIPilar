{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/CachedObjectStorage\/Wincache.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKgogKiBQSFBFeGNlbF9DYWNoZWRPYmplY3RTdG9yYWdlX1dpbmNhY2hlCiAqCiAqIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwKICoKICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcgogKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlcgogKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KICoKICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCiAqCiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZQogKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BICAwMjExMC0xMzAxICBVU0EKICoKICogQGNhdGVnb3J5ICAgUEhQRXhjZWwKICogQHBhY2thZ2UgICAgUEhQRXhjZWxfQ2FjaGVkT2JqZWN0U3RvcmFnZQogKiBAY29weXJpZ2h0ICBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsIChodHRwOi8vd3d3LmNvZGVwbGV4LmNvbS9QSFBFeGNlbCkKICogQGxpY2Vuc2UgICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9sZ3BsLTIuMS50eHQgICAgTEdQTAogKiBAdmVyc2lvbiAgICAjI1ZFUlNJT04jIywgIyNEQVRFIyMKICovCmNsYXNzIFBIUEV4Y2VsX0NhY2hlZE9iamVjdFN0b3JhZ2VfV2luY2FjaGUgZXh0ZW5kcyBQSFBFeGNlbF9DYWNoZWRPYmplY3RTdG9yYWdlX0NhY2hlQmFzZSBpbXBsZW1lbnRzIFBIUEV4Y2VsX0NhY2hlZE9iamVjdFN0b3JhZ2VfSUNhY2hlCnsKICAgIC8qKgogICAgICogUHJlZml4IHVzZWQgdG8gdW5pcXVlbHkgaWRlbnRpZnkgY2FjaGUgZGF0YSBmb3IgdGhpcyB3b3Jrc2hlZXQKICAgICAqCiAgICAgKiBAdmFyIHN0cmluZwogICAgICovCiAgICBwcml2YXRlICRjYWNoZVByZWZpeCA9IG51bGw7CgogICAgLyoqCiAgICAgKiBDYWNoZSB0aW1lb3V0CiAgICAgKgogICAgICogQHZhciBpbnRlZ2VyCiAgICAgKi8KICAgIHByaXZhdGUgJGNhY2hlVGltZSA9IDYwMDsKCgogICAgLyoqCiAgICAgKiBTdG9yZSBjZWxsIGRhdGEgaW4gY2FjaGUgZm9yIHRoZSBjdXJyZW50IGNlbGwgb2JqZWN0IGlmIGl0J3MgImRpcnR5IiwKICAgICAqICAgICBhbmQgdGhlICdudWxsaWZ5JyB0aGUgY3VycmVudCBjZWxsIG9iamVjdAogICAgICoKICAgICAqIEByZXR1cm4gICAgdm9pZAogICAgICogQHRocm93cyAgICBQSFBFeGNlbF9FeGNlcHRpb24KICAgICAqLwogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIHN0b3JlRGF0YSgpCiAgICB7CiAgICAgICAgaWYgKCR0aGlzLT5jdXJyZW50Q2VsbElzRGlydHkgJiYgIWVtcHR5KCR0aGlzLT5jdXJyZW50T2JqZWN0SUQpKSB7CiAgICAgICAgICAgICR0aGlzLT5jdXJyZW50T2JqZWN0LT5kZXRhY2goKTsKCiAgICAgICAgICAgICRvYmogPSBzZXJpYWxpemUoJHRoaXMtPmN1cnJlbnRPYmplY3QpOwogICAgICAgICAgICBpZiAod2luY2FjaGVfdWNhY2hlX2V4aXN0cygkdGhpcy0+Y2FjaGVQcmVmaXguJHRoaXMtPmN1cnJlbnRPYmplY3RJRC4nLmNhY2hlJykpIHsKICAgICAgICAgICAgICAgIGlmICghd2luY2FjaGVfdWNhY2hlX3NldCgkdGhpcy0+Y2FjaGVQcmVmaXguJHRoaXMtPmN1cnJlbnRPYmplY3RJRC4nLmNhY2hlJywgJG9iaiwgJHRoaXMtPmNhY2hlVGltZSkpIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+X19kZXN0cnVjdCgpOwogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oJ0ZhaWxlZCB0byBzdG9yZSBjZWxsICcuJHRoaXMtPmN1cnJlbnRPYmplY3RJRC4nIGluIFdpbkNhY2hlJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoIXdpbmNhY2hlX3VjYWNoZV9hZGQoJHRoaXMtPmNhY2hlUHJlZml4LiR0aGlzLT5jdXJyZW50T2JqZWN0SUQuJy5jYWNoZScsICRvYmosICR0aGlzLT5jYWNoZVRpbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPl9fZGVzdHJ1Y3QoKTsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfRXhjZXB0aW9uKCdGYWlsZWQgdG8gc3RvcmUgY2VsbCAnLiR0aGlzLT5jdXJyZW50T2JqZWN0SUQuJyBpbiBXaW5DYWNoZScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICR0aGlzLT5jdXJyZW50Q2VsbElzRGlydHkgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgICR0aGlzLT5jdXJyZW50T2JqZWN0SUQgPSAkdGhpcy0+Y3VycmVudE9iamVjdCA9IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBBZGQgb3IgVXBkYXRlIGEgY2VsbCBpbiBjYWNoZSBpZGVudGlmaWVkIGJ5IGNvb3JkaW5hdGUgYWRkcmVzcwogICAgICoKICAgICAqIEBwYXJhbSAgICBzdHJpbmcgICAgICAgICAgICAkcENvb3JkICAgICAgICBDb29yZGluYXRlIGFkZHJlc3Mgb2YgdGhlIGNlbGwgdG8gdXBkYXRlCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfQ2VsbCAgICAkY2VsbCAgICAgICAgQ2VsbCB0byB1cGRhdGUKICAgICAqIEByZXR1cm4gICAgUEhQRXhjZWxfQ2VsbAogICAgICogQHRocm93cyAgICBQSFBFeGNlbF9FeGNlcHRpb24KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGFkZENhY2hlRGF0YSgkcENvb3JkLCBQSFBFeGNlbF9DZWxsICRjZWxsKQogICAgewogICAgICAgIGlmICgoJHBDb29yZCAhPT0gJHRoaXMtPmN1cnJlbnRPYmplY3RJRCkgJiYgKCR0aGlzLT5jdXJyZW50T2JqZWN0SUQgIT09IG51bGwpKSB7CiAgICAgICAgICAgICR0aGlzLT5zdG9yZURhdGEoKTsKICAgICAgICB9CiAgICAgICAgJHRoaXMtPmNlbGxDYWNoZVskcENvb3JkXSA9IHRydWU7CgogICAgICAgICR0aGlzLT5jdXJyZW50T2JqZWN0SUQgPSAkcENvb3JkOwogICAgICAgICR0aGlzLT5jdXJyZW50T2JqZWN0ID0gJGNlbGw7CiAgICAgICAgJHRoaXMtPmN1cnJlbnRDZWxsSXNEaXJ0eSA9IHRydWU7CgogICAgICAgIHJldHVybiAkY2VsbDsKICAgIH0KCiAgICAvKioKICAgICAqIElzIGEgdmFsdWUgc2V0IGluIHRoZSBjdXJyZW50IFBIUEV4Y2VsX0NhY2hlZE9iamVjdFN0b3JhZ2VfSUNhY2hlIGZvciBhbiBpbmRleGVkIGNlbGw\/CiAgICAgKgogICAgICogQHBhcmFtICAgIHN0cmluZyAgICAgICAgJHBDb29yZCAgICAgICAgQ29vcmRpbmF0ZSBhZGRyZXNzIG9mIHRoZSBjZWxsIHRvIGNoZWNrCiAgICAgKiBAcmV0dXJuICAgIGJvb2xlYW4KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGlzRGF0YVNldCgkcENvb3JkKQogICAgewogICAgICAgIC8vICAgIENoZWNrIGlmIHRoZSByZXF1ZXN0ZWQgZW50cnkgaXMgdGhlIGN1cnJlbnQgb2JqZWN0LCBvciBleGlzdHMgaW4gdGhlIGNhY2hlCiAgICAgICAgaWYgKHBhcmVudDo6aXNEYXRhU2V0KCRwQ29vcmQpKSB7CiAgICAgICAgICAgIGlmICgkdGhpcy0+Y3VycmVudE9iamVjdElEID09ICRwQ29vcmQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vICAgIENoZWNrIGlmIHRoZSByZXF1ZXN0ZWQgZW50cnkgc3RpbGwgZXhpc3RzIGluIGNhY2hlCiAgICAgICAgICAgICRzdWNjZXNzID0gd2luY2FjaGVfdWNhY2hlX2V4aXN0cygkdGhpcy0+Y2FjaGVQcmVmaXguJHBDb29yZC4nLmNhY2hlJyk7CiAgICAgICAgICAgIGlmICgkc3VjY2VzcyA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIC8vICAgIEVudHJ5IG5vIGxvbmdlciBleGlzdHMgaW4gV2luY2FjaGUsIHNvIGNsZWFyIGl0IGZyb20gdGhlIGNhY2hlIGFycmF5CiAgICAgICAgICAgICAgICBwYXJlbnQ6OmRlbGV0ZUNhY2hlRGF0YSgkcENvb3JkKTsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oJ0NlbGwgZW50cnkgJy4kcENvb3JkLicgbm8gbG9uZ2VyIGV4aXN0cyBpbiBXaW5DYWNoZScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgoKICAgIC8qKgogICAgICogR2V0IGNlbGwgYXQgYSBzcGVjaWZpYyBjb29yZGluYXRlCiAgICAgKgogICAgICogQHBhcmFtICAgIHN0cmluZyAgICAgICAgICAgICRwQ29vcmQgICAgICAgIENvb3JkaW5hdGUgb2YgdGhlIGNlbGwKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfRXhjZXB0aW9uCiAgICAgKiBAcmV0dXJuICAgIFBIUEV4Y2VsX0NlbGwgICAgQ2VsbCB0aGF0IHdhcyBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmQKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldENhY2hlRGF0YSgkcENvb3JkKQogICAgewogICAgICAgIGlmICgkcENvb3JkID09PSAkdGhpcy0+Y3VycmVudE9iamVjdElEKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+Y3VycmVudE9iamVjdDsKICAgICAgICB9CiAgICAgICAgJHRoaXMtPnN0b3JlRGF0YSgpOwoKICAgICAgICAvLyAgICBDaGVjayBpZiB0aGUgZW50cnkgdGhhdCBoYXMgYmVlbiByZXF1ZXN0ZWQgYWN0dWFsbHkgZXhpc3RzCiAgICAgICAgJG9iaiA9IG51bGw7CiAgICAgICAgaWYgKHBhcmVudDo6aXNEYXRhU2V0KCRwQ29vcmQpKSB7CiAgICAgICAgICAgICRzdWNjZXNzID0gZmFsc2U7CiAgICAgICAgICAgICRvYmogPSB3aW5jYWNoZV91Y2FjaGVfZ2V0KCR0aGlzLT5jYWNoZVByZWZpeC4kcENvb3JkLicuY2FjaGUnLCAkc3VjY2Vzcyk7CiAgICAgICAgICAgIGlmICgkc3VjY2VzcyA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIC8vICAgIEVudHJ5IG5vIGxvbmdlciBleGlzdHMgaW4gV2luQ2FjaGUsIHNvIGNsZWFyIGl0IGZyb20gdGhlIGNhY2hlIGFycmF5CiAgICAgICAgICAgICAgICBwYXJlbnQ6OmRlbGV0ZUNhY2hlRGF0YSgkcENvb3JkKTsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oJ0NlbGwgZW50cnkgJy4kcENvb3JkLicgbm8gbG9uZ2VyIGV4aXN0cyBpbiBXaW5DYWNoZScpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gICAgUmV0dXJuIG51bGwgaWYgcmVxdWVzdGVkIGVudHJ5IGRvZXNuJ3QgZXhpc3QgaW4gY2FjaGUKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQoKICAgICAgICAvLyAgICBTZXQgY3VycmVudCBlbnRyeSB0byB0aGUgcmVxdWVzdGVkIGVudHJ5CiAgICAgICAgJHRoaXMtPmN1cnJlbnRPYmplY3RJRCA9ICRwQ29vcmQ7CiAgICAgICAgJHRoaXMtPmN1cnJlbnRPYmplY3QgPSB1bnNlcmlhbGl6ZSgkb2JqKTsKICAgICAgICAvLyAgICBSZS1hdHRhY2ggdGhpcyBhcyB0aGUgY2VsbCdzIHBhcmVudAogICAgICAgICR0aGlzLT5jdXJyZW50T2JqZWN0LT5hdHRhY2goJHRoaXMpOwoKICAgICAgICAvLyAgICBSZXR1cm4gcmVxdWVzdGVkIGVudHJ5CiAgICAgICAgcmV0dXJuICR0aGlzLT5jdXJyZW50T2JqZWN0OwogICAgfQoKCiAgICAvKioKICAgICAqIEdldCBhIGxpc3Qgb2YgYWxsIGNlbGwgYWRkcmVzc2VzIGN1cnJlbnRseSBoZWxkIGluIGNhY2hlCiAgICAgKgogICAgICogQHJldHVybiAgc3RyaW5nW10KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldENlbGxMaXN0KCkKICAgIHsKICAgICAgICBpZiAoJHRoaXMtPmN1cnJlbnRPYmplY3RJRCAhPT0gbnVsbCkgewogICAgICAgICAgICAkdGhpcy0+c3RvcmVEYXRhKCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcGFyZW50OjpnZXRDZWxsTGlzdCgpOwogICAgfQoKICAgIC8qKgogICAgICogRGVsZXRlIGEgY2VsbCBpbiBjYWNoZSBpZGVudGlmaWVkIGJ5IGNvb3JkaW5hdGUgYWRkcmVzcwogICAgICoKICAgICAqIEBwYXJhbSAgICBzdHJpbmcgICAgICAgICAgICAkcENvb3JkICAgICAgICBDb29yZGluYXRlIGFkZHJlc3Mgb2YgdGhlIGNlbGwgdG8gZGVsZXRlCiAgICAgKiBAdGhyb3dzICAgIFBIUEV4Y2VsX0V4Y2VwdGlvbgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZGVsZXRlQ2FjaGVEYXRhKCRwQ29vcmQpCiAgICB7CiAgICAgICAgLy8gICAgRGVsZXRlIHRoZSBlbnRyeSBmcm9tIFdpbmNhY2hlCiAgICAgICAgd2luY2FjaGVfdWNhY2hlX2RlbGV0ZSgkdGhpcy0+Y2FjaGVQcmVmaXguJHBDb29yZC4nLmNhY2hlJyk7CgogICAgICAgIC8vICAgIERlbGV0ZSB0aGUgZW50cnkgZnJvbSBvdXIgY2VsbCBhZGRyZXNzIGFycmF5CiAgICAgICAgcGFyZW50OjpkZWxldGVDYWNoZURhdGEoJHBDb29yZCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDbG9uZSB0aGUgY2VsbCBjb2xsZWN0aW9uCiAgICAgKgogICAgICogQHBhcmFtICAgIFBIUEV4Y2VsX1dvcmtzaGVldCAgICAkcGFyZW50ICAgICAgICBUaGUgbmV3IHdvcmtzaGVldAogICAgICogQHJldHVybiAgICB2b2lkCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBjb3B5Q2VsbENvbGxlY3Rpb24oUEhQRXhjZWxfV29ya3NoZWV0ICRwYXJlbnQpCiAgICB7CiAgICAgICAgcGFyZW50Ojpjb3B5Q2VsbENvbGxlY3Rpb24oJHBhcmVudCk7CiAgICAgICAgLy8gICAgR2V0IGEgbmV3IGlkIGZvciB0aGUgbmV3IGZpbGUgbmFtZQogICAgICAgICRiYXNlVW5pcXVlID0gJHRoaXMtPmdldFVuaXF1ZUlEKCk7CiAgICAgICAgJG5ld0NhY2hlUHJlZml4ID0gc3Vic3RyKG1kNSgkYmFzZVVuaXF1ZSksIDAsIDgpIC4gJy4nOwogICAgICAgICRjYWNoZUxpc3QgPSAkdGhpcy0+Z2V0Q2VsbExpc3QoKTsKICAgICAgICBmb3JlYWNoICgkY2FjaGVMaXN0IGFzICRjZWxsSUQpIHsKICAgICAgICAgICAgaWYgKCRjZWxsSUQgIT0gJHRoaXMtPmN1cnJlbnRPYmplY3RJRCkgewogICAgICAgICAgICAgICAgJHN1Y2Nlc3MgPSBmYWxzZTsKICAgICAgICAgICAgICAgICRvYmogPSB3aW5jYWNoZV91Y2FjaGVfZ2V0KCR0aGlzLT5jYWNoZVByZWZpeC4kY2VsbElELicuY2FjaGUnLCAkc3VjY2Vzcyk7CiAgICAgICAgICAgICAgICBpZiAoJHN1Y2Nlc3MgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gICAgRW50cnkgbm8gbG9uZ2VyIGV4aXN0cyBpbiBXaW5DYWNoZSwgc28gY2xlYXIgaXQgZnJvbSB0aGUgY2FjaGUgYXJyYXkKICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6OmRlbGV0ZUNhY2hlRGF0YSgkY2VsbElEKTsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfRXhjZXB0aW9uKCdDZWxsIGVudHJ5ICcuJGNlbGxJRC4nIG5vIGxvbmdlciBleGlzdHMgaW4gV2luY2FjaGUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICghd2luY2FjaGVfdWNhY2hlX2FkZCgkbmV3Q2FjaGVQcmVmaXguJGNlbGxJRC4nLmNhY2hlJywgJG9iaiwgJHRoaXMtPmNhY2hlVGltZSkpIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+X19kZXN0cnVjdCgpOwogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oJ0ZhaWxlZCB0byBzdG9yZSBjZWxsICcuJGNlbGxJRC4nIGluIFdpbmNhY2hlJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJHRoaXMtPmNhY2hlUHJlZml4ID0gJG5ld0NhY2hlUHJlZml4OwogICAgfQoKCiAgICAvKioKICAgICAqIENsZWFyIHRoZSBjZWxsIGNvbGxlY3Rpb24gYW5kIGRpc2Nvbm5lY3QgZnJvbSBvdXIgcGFyZW50CiAgICAgKgogICAgICogQHJldHVybiAgICB2b2lkCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiB1bnNldFdvcmtzaGVldENlbGxzKCkKICAgIHsKICAgICAgICBpZiAoIWlzX251bGwoJHRoaXMtPmN1cnJlbnRPYmplY3QpKSB7CiAgICAgICAgICAgICR0aGlzLT5jdXJyZW50T2JqZWN0LT5kZXRhY2goKTsKICAgICAgICAgICAgJHRoaXMtPmN1cnJlbnRPYmplY3QgPSAkdGhpcy0+Y3VycmVudE9iamVjdElEID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIC8vICAgIEZsdXNoIHRoZSBXaW5DYWNoZSBjYWNoZQogICAgICAgICR0aGlzLT5fX2Rlc3RydWN0KCk7CgogICAgICAgICR0aGlzLT5jZWxsQ2FjaGUgPSBhcnJheSgpOwoKICAgICAgICAvLyAgICBkZXRhY2ggb3Vyc2VsZiBmcm9tIHRoZSB3b3Jrc2hlZXQsIHNvIHRoYXQgaXQgY2FuIHRoZW4gZGVsZXRlIHRoaXMgb2JqZWN0IHN1Y2Nlc3NmdWxseQogICAgICAgICR0aGlzLT5wYXJlbnQgPSBudWxsOwogICAgfQoKICAgIC8qKgogICAgICogSW5pdGlhbGlzZSB0aGlzIG5ldyBjZWxsIGNvbGxlY3Rpb24KICAgICAqCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfV29ya3NoZWV0ICAgICRwYXJlbnQgICAgICAgIFRoZSB3b3Jrc2hlZXQgZm9yIHRoaXMgY2VsbCBjb2xsZWN0aW9uCiAgICAgKiBAcGFyYW0gICAgYXJyYXkgb2YgbWl4ZWQgICAgICAgICRhcmd1bWVudHMgICAgQWRkaXRpb25hbCBpbml0aWFsaXNhdGlvbiBhcmd1bWVudHMKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KFBIUEV4Y2VsX1dvcmtzaGVldCAkcGFyZW50LCAkYXJndW1lbnRzKQogICAgewogICAgICAgICRjYWNoZVRpbWUgICAgPSAoaXNzZXQoJGFyZ3VtZW50c1snY2FjaGVUaW1lJ10pKSAgICA\/ICRhcmd1bWVudHNbJ2NhY2hlVGltZSddICAgIDogNjAwOwoKICAgICAgICBpZiAoaXNfbnVsbCgkdGhpcy0+Y2FjaGVQcmVmaXgpKSB7CiAgICAgICAgICAgICRiYXNlVW5pcXVlID0gJHRoaXMtPmdldFVuaXF1ZUlEKCk7CiAgICAgICAgICAgICR0aGlzLT5jYWNoZVByZWZpeCA9IHN1YnN0cihtZDUoJGJhc2VVbmlxdWUpLCAwLCA4KS4nLic7CiAgICAgICAgICAgICR0aGlzLT5jYWNoZVRpbWUgPSAkY2FjaGVUaW1lOwoKICAgICAgICAgICAgcGFyZW50OjpfX2NvbnN0cnVjdCgkcGFyZW50KTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBEZXN0cm95IHRoaXMgY2VsbCBjb2xsZWN0aW9uCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2Rlc3RydWN0KCkKICAgIHsKICAgICAgICAkY2FjaGVMaXN0ID0gJHRoaXMtPmdldENlbGxMaXN0KCk7CiAgICAgICAgZm9yZWFjaCAoJGNhY2hlTGlzdCBhcyAkY2VsbElEKSB7CiAgICAgICAgICAgIHdpbmNhY2hlX3VjYWNoZV9kZWxldGUoJHRoaXMtPmNhY2hlUHJlZml4LiRjZWxsSUQuJy5jYWNoZScpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIElkZW50aWZ5IHdoZXRoZXIgdGhlIGNhY2hpbmcgbWV0aG9kIGlzIGN1cnJlbnRseSBhdmFpbGFibGUKICAgICAqIFNvbWUgbWV0aG9kcyBhcmUgZGVwZW5kZW50IG9uIHRoZSBhdmFpbGFiaWxpdHkgb2YgY2VydGFpbiBleHRlbnNpb25zIGJlaW5nIGVuYWJsZWQgaW4gdGhlIFBIUCBidWlsZAogICAgICoKICAgICAqIEByZXR1cm4gICAgYm9vbGVhbgogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGNhY2hlTWV0aG9kSXNBdmFpbGFibGUoKQogICAgewogICAgICAgIGlmICghZnVuY3Rpb25fZXhpc3RzKCd3aW5jYWNoZV91Y2FjaGVfYWRkJykpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0K",
    "size": "9945"
}