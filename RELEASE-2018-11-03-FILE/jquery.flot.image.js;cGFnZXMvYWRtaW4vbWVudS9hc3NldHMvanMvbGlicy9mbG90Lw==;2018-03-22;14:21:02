{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/flot\/jquery.flot.image.js",
    "lastUpdate": "2018-03-22+14:21:02.79",
    "contentFile": "LyogRmxvdCBwbHVnaW4gZm9yIHBsb3R0aW5nIGltYWdlcy4KCkNvcHlyaWdodCAoYykgMjAwNy0yMDE0IElPTEEgYW5kIE9sZSBMYXVyc2VuLgpMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCgpUaGUgZGF0YSBzeW50YXggaXMgWyBbIGltYWdlLCB4MSwgeTEsIHgyLCB5MiBdLCAuLi4gXSB3aGVyZSAoeDEsIHkxKSBhbmQKKHgyLCB5MikgYXJlIHdoZXJlIHlvdSBpbnRlbmQgdGhlIHR3byBvcHBvc2l0ZSBjb3JuZXJzIG9mIHRoZSBpbWFnZSB0byBlbmQgdXAKaW4gdGhlIHBsb3QuIEltYWdlIG11c3QgYmUgYSBmdWxseSBsb2FkZWQgSmF2YXNjcmlwdCBpbWFnZSAoeW91IGNhbiBtYWtlIG9uZQp3aXRoIG5ldyBJbWFnZSgpKS4gSWYgdGhlIGltYWdlIGlzIG5vdCBjb21wbGV0ZSwgaXQncyBza2lwcGVkIHdoZW4gcGxvdHRpbmcuCgpUaGVyZSBhcmUgdHdvIGhlbHBlcnMgaW5jbHVkZWQgZm9yIHJldHJpZXZpbmcgaW1hZ2VzLiBUaGUgZWFzaWVzdCB3b3JrIHRoZSB3YXkKdGhhdCB5b3UgcHV0IGluIFVSTHMgaW5zdGVhZCBvZiBpbWFnZXMgaW4gdGhlIGRhdGEsIGxpa2UgdGhpczoKCglbICJteWltYWdlLnBuZyIsIDAsIDAsIDEwLCAxMCBdCgpUaGVuIGNhbGwgJC5wbG90LmltYWdlLmxvYWREYXRhKCBkYXRhLCBvcHRpb25zLCBjYWxsYmFjayApIHdoZXJlIGRhdGEgYW5kCm9wdGlvbnMgYXJlIHRoZSBzYW1lIGFzIHlvdSBwYXNzIGluIHRvICQucGxvdC4gVGhpcyBsb2FkcyB0aGUgaW1hZ2VzLCByZXBsYWNlcwp0aGUgVVJMcyBpbiB0aGUgZGF0YSB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGltYWdlcyBhbmQgY2FsbHMgImNhbGxiYWNrIiB3aGVuCmFsbCBpbWFnZXMgYXJlIGxvYWRlZCAob3IgZmFpbGVkIGxvYWRpbmcpLiBJbiB0aGUgY2FsbGJhY2ssIHlvdSBjYW4gdGhlbiBjYWxsCiQucGxvdCB3aXRoIHRoZSBkYXRhIHNldC4gU2VlIHRoZSBpbmNsdWRlZCBleGFtcGxlLgoKQSBtb3JlIGxvdy1sZXZlbCBoZWxwZXIsICQucGxvdC5pbWFnZS5sb2FkKHVybHMsIGNhbGxiYWNrKSBpcyBhbHNvIGluY2x1ZGVkLgpHaXZlbiBhIGxpc3Qgb2YgVVJMcywgaXQgY2FsbHMgY2FsbGJhY2sgd2l0aCBhbiBvYmplY3QgbWFwcGluZyBmcm9tIFVSTCB0bwpJbWFnZSBvYmplY3Qgd2hlbiBhbGwgaW1hZ2VzIGFyZSBsb2FkZWQgb3IgaGF2ZSBmYWlsZWQgbG9hZGluZy4KClRoZSBwbHVnaW4gc3VwcG9ydHMgdGhlc2Ugb3B0aW9uczoKCglzZXJpZXM6IHsKCQlpbWFnZXM6IHsKCQkJc2hvdzogYm9vbGVhbgoJCQlhbmNob3I6ICJjb3JuZXIiIG9yICJjZW50ZXIiCgkJCWFscGhhOiBbIDAsIDEgXQoJCX0KCX0KClRoZXkgY2FuIGJlIHNwZWNpZmllZCBmb3IgYSBzcGVjaWZpYyBzZXJpZXM6CgoJJC5wbG90KCAkKCIjcGxhY2Vob2xkZXIiKSwgW3sKCQlkYXRhOiBbIC4uLiBdLAoJCWltYWdlczogeyAuLi4gfQoJXSkKCk5vdGUgdGhhdCBiZWNhdXNlIHRoZSBkYXRhIGZvcm1hdCBpcyBkaWZmZXJlbnQgZnJvbSB1c3VhbCBkYXRhIHBvaW50cywgeW91CmNhbid0IHVzZSBpbWFnZXMgd2l0aCBhbnl0aGluZyBlbHNlIGluIGEgc3BlY2lmaWMgZGF0YSBzZXJpZXMuCgpTZXR0aW5nICJhbmNob3IiIHRvICJjZW50ZXIiIGNhdXNlcyB0aGUgcGl4ZWxzIGluIHRoZSBpbWFnZSB0byBiZSBhbmNob3JlZCBhdAp0aGUgY29ybmVyIHBpeGVsIGNlbnRlcnMgaW5zaWRlIG9mIGF0IHRoZSBwaXhlbCBjb3JuZXJzLCBlZmZlY3RpdmVseSBsZXR0aW5nCmhhbGYgYSBwaXhlbCBzdGljayBvdXQgdG8gZWFjaCBzaWRlIGluIHRoZSBwbG90LgoKQSBwb3NzaWJsZSBmdXR1cmUgZGlyZWN0aW9uIGNvdWxkIGJlIHN1cHBvcnQgZm9yIHRpbGluZyBmb3IgbGFyZ2UgaW1hZ2VzIChsaWtlCkdvb2dsZSBNYXBzKS4KCiovCgooZnVuY3Rpb24gKCQpIHsKICAgIHZhciBvcHRpb25zID0gewogICAgICAgIHNlcmllczogewogICAgICAgICAgICBpbWFnZXM6IHsKICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLAogICAgICAgICAgICAgICAgYWxwaGE6IDEsCiAgICAgICAgICAgICAgICBhbmNob3I6ICJjb3JuZXIiIC8vIG9yICJjZW50ZXIiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwoKICAgICQucGxvdC5pbWFnZSA9IHt9OwoKICAgICQucGxvdC5pbWFnZS5sb2FkRGF0YUltYWdlcyA9IGZ1bmN0aW9uIChzZXJpZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIHVybHMgPSBbXSwgcG9pbnRzID0gW107CgogICAgICAgIHZhciBkZWZhdWx0U2hvdyA9IG9wdGlvbnMuc2VyaWVzLmltYWdlcy5zaG93OwogICAgICAgIAogICAgICAgICQuZWFjaChzZXJpZXMsIGZ1bmN0aW9uIChpLCBzKSB7CiAgICAgICAgICAgIGlmICghKGRlZmF1bHRTaG93IHx8IHMuaW1hZ2VzLnNob3cpKQogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKHMuZGF0YSkKICAgICAgICAgICAgICAgIHMgPSBzLmRhdGE7CgogICAgICAgICAgICAkLmVhY2gocywgZnVuY3Rpb24gKGksIHApIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcFswXSA9PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgICAgIHVybHMucHVzaChwWzBdKTsKICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgICQucGxvdC5pbWFnZS5sb2FkKHVybHMsIGZ1bmN0aW9uIChsb2FkZWRJbWFnZXMpIHsKICAgICAgICAgICAgJC5lYWNoKHBvaW50cywgZnVuY3Rpb24gKGksIHApIHsKICAgICAgICAgICAgICAgIHZhciB1cmwgPSBwWzBdOwogICAgICAgICAgICAgICAgaWYgKGxvYWRlZEltYWdlc1t1cmxdKQogICAgICAgICAgICAgICAgICAgIHBbMF0gPSBsb2FkZWRJbWFnZXNbdXJsXTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgIH0pOwogICAgfQogICAgCiAgICAkLnBsb3QuaW1hZ2UubG9hZCA9IGZ1bmN0aW9uICh1cmxzLCBjYWxsYmFjaykgewogICAgICAgIHZhciBtaXNzaW5nID0gdXJscy5sZW5ndGgsIGxvYWRlZCA9IHt9OwogICAgICAgIGlmIChtaXNzaW5nID09IDApCiAgICAgICAgICAgIGNhbGxiYWNrKHt9KTsKCiAgICAgICAgJC5lYWNoKHVybHMsIGZ1bmN0aW9uIChpLCB1cmwpIHsKICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAtLW1pc3Npbmc7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGxvYWRlZFt1cmxdID0gdGhpczsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKG1pc3NpbmcgPT0gMCkKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhsb2FkZWQpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgJCgnPGltZyAvPicpLmxvYWQoaGFuZGxlcikuZXJyb3IoaGFuZGxlcikuYXR0cignc3JjJywgdXJsKTsKICAgICAgICB9KTsKICAgIH07CiAgICAKICAgIGZ1bmN0aW9uIGRyYXdTZXJpZXMocGxvdCwgY3R4LCBzZXJpZXMpIHsKICAgICAgICB2YXIgcGxvdE9mZnNldCA9IHBsb3QuZ2V0UGxvdE9mZnNldCgpOwogICAgICAgIAogICAgICAgIGlmICghc2VyaWVzLmltYWdlcyB8fCAhc2VyaWVzLmltYWdlcy5zaG93KQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgCiAgICAgICAgdmFyIHBvaW50cyA9IHNlcmllcy5kYXRhcG9pbnRzLnBvaW50cywKICAgICAgICAgICAgcHMgPSBzZXJpZXMuZGF0YXBvaW50cy5wb2ludHNpemU7CiAgICAgICAgCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IHBzKSB7CiAgICAgICAgICAgIHZhciBpbWcgPSBwb2ludHNbaV0sCiAgICAgICAgICAgICAgICB4MSA9IHBvaW50c1tpICsgMV0sIHkxID0gcG9pbnRzW2kgKyAyXSwKICAgICAgICAgICAgICAgIHgyID0gcG9pbnRzW2kgKyAzXSwgeTIgPSBwb2ludHNbaSArIDRdLAogICAgICAgICAgICAgICAgeGF4aXMgPSBzZXJpZXMueGF4aXMsIHlheGlzID0gc2VyaWVzLnlheGlzLAogICAgICAgICAgICAgICAgdG1wOwoKICAgICAgICAgICAgLy8gYWN0dWFsbHkgd2Ugc2hvdWxkIGNoZWNrIGltZy5jb21wbGV0ZSwgYnV0IGl0CiAgICAgICAgICAgIC8vIGFwcGVhcnMgdG8gYmUgYSBzb21ld2hhdCB1bnJlbGlhYmxlIGluZGljYXRvciBpbgogICAgICAgICAgICAvLyBJRTYgKGZhbHNlIGV2ZW4gYWZ0ZXIgbG9hZCBldmVudCkKICAgICAgICAgICAgaWYgKCFpbWcgfHwgaW1nLndpZHRoIDw9IDAgfHwgaW1nLmhlaWdodCA8PSAwKQogICAgICAgICAgICAgICAgY29udGludWU7CgogICAgICAgICAgICBpZiAoeDEgPiB4MikgewogICAgICAgICAgICAgICAgdG1wID0geDI7CiAgICAgICAgICAgICAgICB4MiA9IHgxOwogICAgICAgICAgICAgICAgeDEgPSB0bXA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHkxID4geTIpIHsKICAgICAgICAgICAgICAgIHRtcCA9IHkyOwogICAgICAgICAgICAgICAgeTIgPSB5MTsKICAgICAgICAgICAgICAgIHkxID0gdG1wOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBpZiB0aGUgYW5jaG9yIGlzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIHBpeGVsLCBleHBhbmQgdGhlIAogICAgICAgICAgICAvLyBpbWFnZSBieSAxLzIgcGl4ZWwgaW4gZWFjaCBkaXJlY3Rpb24KICAgICAgICAgICAgaWYgKHNlcmllcy5pbWFnZXMuYW5jaG9yID09ICJjZW50ZXIiKSB7CiAgICAgICAgICAgICAgICB0bXAgPSAwLjUgKiAoeDIteDEpIC8gKGltZy53aWR0aCAtIDEpOwogICAgICAgICAgICAgICAgeDEgLT0gdG1wOwogICAgICAgICAgICAgICAgeDIgKz0gdG1wOwogICAgICAgICAgICAgICAgdG1wID0gMC41ICogKHkyLXkxKSAvIChpbWcuaGVpZ2h0IC0gMSk7CiAgICAgICAgICAgICAgICB5MSAtPSB0bXA7CiAgICAgICAgICAgICAgICB5MiArPSB0bXA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIGNsaXAKICAgICAgICAgICAgaWYgKHgxID09IHgyIHx8IHkxID09IHkyIHx8CiAgICAgICAgICAgICAgICB4MSA+PSB4YXhpcy5tYXggfHwgeDIgPD0geGF4aXMubWluIHx8CiAgICAgICAgICAgICAgICB5MSA+PSB5YXhpcy5tYXggfHwgeTIgPD0geWF4aXMubWluKQogICAgICAgICAgICAgICAgY29udGludWU7CgogICAgICAgICAgICB2YXIgc3gxID0gMCwgc3kxID0gMCwgc3gyID0gaW1nLndpZHRoLCBzeTIgPSBpbWcuaGVpZ2h0OwogICAgICAgICAgICBpZiAoeDEgPCB4YXhpcy5taW4pIHsKICAgICAgICAgICAgICAgIHN4MSArPSAoc3gyIC0gc3gxKSAqICh4YXhpcy5taW4gLSB4MSkgLyAoeDIgLSB4MSk7CiAgICAgICAgICAgICAgICB4MSA9IHhheGlzLm1pbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHgyID4geGF4aXMubWF4KSB7CiAgICAgICAgICAgICAgICBzeDIgKz0gKHN4MiAtIHN4MSkgKiAoeGF4aXMubWF4IC0geDIpIC8gKHgyIC0geDEpOwogICAgICAgICAgICAgICAgeDIgPSB4YXhpcy5tYXg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh5MSA8IHlheGlzLm1pbikgewogICAgICAgICAgICAgICAgc3kyICs9IChzeTEgLSBzeTIpICogKHlheGlzLm1pbiAtIHkxKSAvICh5MiAtIHkxKTsKICAgICAgICAgICAgICAgIHkxID0geWF4aXMubWluOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoeTIgPiB5YXhpcy5tYXgpIHsKICAgICAgICAgICAgICAgIHN5MSArPSAoc3kxIC0gc3kyKSAqICh5YXhpcy5tYXggLSB5MikgLyAoeTIgLSB5MSk7CiAgICAgICAgICAgICAgICB5MiA9IHlheGlzLm1heDsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgeDEgPSB4YXhpcy5wMmMoeDEpOwogICAgICAgICAgICB4MiA9IHhheGlzLnAyYyh4Mik7CiAgICAgICAgICAgIHkxID0geWF4aXMucDJjKHkxKTsKICAgICAgICAgICAgeTIgPSB5YXhpcy5wMmMoeTIpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gdGhlIHRyYW5zZm9ybWF0aW9uIG1heSBoYXZlIHN3YXBwZWQgdXMKICAgICAgICAgICAgaWYgKHgxID4geDIpIHsKICAgICAgICAgICAgICAgIHRtcCA9IHgyOwogICAgICAgICAgICAgICAgeDIgPSB4MTsKICAgICAgICAgICAgICAgIHgxID0gdG1wOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh5MSA+IHkyKSB7CiAgICAgICAgICAgICAgICB0bXAgPSB5MjsKICAgICAgICAgICAgICAgIHkyID0geTE7CiAgICAgICAgICAgICAgICB5MSA9IHRtcDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdG1wID0gY3R4Lmdsb2JhbEFscGhhOwogICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgKj0gc2VyaWVzLmltYWdlcy5hbHBoYTsKICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3gxLCBzeTEsIHN4MiAtIHN4MSwgc3kyIC0gc3kxLAogICAgICAgICAgICAgICAgICAgICAgICAgIHgxICsgcGxvdE9mZnNldC5sZWZ0LCB5MSArIHBsb3RPZmZzZXQudG9wLAogICAgICAgICAgICAgICAgICAgICAgICAgIHgyIC0geDEsIHkyIC0geTEpOwogICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSB0bXA7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHByb2Nlc3NSYXdEYXRhKHBsb3QsIHNlcmllcywgZGF0YSwgZGF0YXBvaW50cykgewogICAgICAgIGlmICghc2VyaWVzLmltYWdlcy5zaG93KQogICAgICAgICAgICByZXR1cm47CgogICAgICAgIC8vIGZvcm1hdCBpcyBJbWFnZSwgeDEsIHkxLCB4MiwgeTIgKG9wcG9zaXRlIGNvcm5lcnMpCiAgICAgICAgZGF0YXBvaW50cy5mb3JtYXQgPSBbCiAgICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUgfSwKICAgICAgICAgICAgeyB4OiB0cnVlLCBudW1iZXI6IHRydWUsIHJlcXVpcmVkOiB0cnVlIH0sCiAgICAgICAgICAgIHsgeTogdHJ1ZSwgbnVtYmVyOiB0cnVlLCByZXF1aXJlZDogdHJ1ZSB9LAogICAgICAgICAgICB7IHg6IHRydWUsIG51bWJlcjogdHJ1ZSwgcmVxdWlyZWQ6IHRydWUgfSwKICAgICAgICAgICAgeyB5OiB0cnVlLCBudW1iZXI6IHRydWUsIHJlcXVpcmVkOiB0cnVlIH0KICAgICAgICBdOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBpbml0KHBsb3QpIHsKICAgICAgICBwbG90Lmhvb2tzLnByb2Nlc3NSYXdEYXRhLnB1c2gocHJvY2Vzc1Jhd0RhdGEpOwogICAgICAgIHBsb3QuaG9va3MuZHJhd1Nlcmllcy5wdXNoKGRyYXdTZXJpZXMpOwogICAgfQogICAgCiAgICAkLnBsb3QucGx1Z2lucy5wdXNoKHsKICAgICAgICBpbml0OiBpbml0LAogICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsCiAgICAgICAgbmFtZTogJ2ltYWdlJywKICAgICAgICB2ZXJzaW9uOiAnMS4xJwogICAgfSk7Cn0pKGpRdWVyeSk7Cg==",
    "size": "7360"
}