{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Calculation.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKiBQSFBFeGNlbCByb290IGRpcmVjdG9yeSAqLwppZiAoIWRlZmluZWQoJ1BIUEVYQ0VMX1JPT1QnKSkgewogICAgLyoqCiAgICAgKiBAaWdub3JlCiAgICAgKi8KICAgIGRlZmluZSgnUEhQRVhDRUxfUk9PVCcsIGRpcm5hbWUoX19GSUxFX18pIC4gJy8uLi8nKTsKICAgIHJlcXVpcmUoUEhQRVhDRUxfUk9PVCAuICdQSFBFeGNlbC9BdXRvbG9hZGVyLnBocCcpOwp9CgppZiAoIWRlZmluZWQoJ0NBTENVTEFUSU9OX1JFR0VYUF9DRUxMUkVGJykpIHsKICAgIC8vICAgIFRlc3QgZm9yIHN1cHBvcnQgb2YgXFAgKG11bHRpYnl0ZSBvcHRpb25zKSBpbiBQQ1JFCiAgICBpZiAoZGVmaW5lZCgnUFJFR19CQURfVVRGOF9FUlJPUicpKSB7CiAgICAgICAgLy8gICAgQ2VsbCByZWZlcmVuY2UgKGNlbGwgb3IgcmFuZ2Ugb2YgY2VsbHMsIHdpdGggb3Igd2l0aG91dCBhIHNoZWV0IHJlZmVyZW5jZSkKICAgICAgICBkZWZpbmUoJ0NBTENVTEFUSU9OX1JFR0VYUF9DRUxMUkVGJywgJygoKFteXHMsISYlXlwvXCpcKzw+PS1dKil8KFwnW15cJ10qXCcpfChcIlteXCJdKlwiKSkhKT9cJD8oW2Etel17MSwzfSlcJD8oXGR7MSw3fSknKTsKICAgICAgICAvLyAgICBOYW1lZCBSYW5nZSBvZiBjZWxscwogICAgICAgIGRlZmluZSgnQ0FMQ1VMQVRJT05fUkVHRVhQX05BTUVEUkFOR0UnLCAnKCgoW15ccywhJiVeXC9cKlwrPD49LV0qKXwoXCdbXlwnXSpcJyl8KFwiW15cIl0qXCIpKSEpPyhbX0EtWl1bX0EtWjAtOVwuXSopJyk7CiAgICB9IGVsc2UgewogICAgICAgIC8vICAgIENlbGwgcmVmZXJlbmNlIChjZWxsIG9yIHJhbmdlIG9mIGNlbGxzLCB3aXRoIG9yIHdpdGhvdXQgYSBzaGVldCByZWZlcmVuY2UpCiAgICAgICAgZGVmaW5lKCdDQUxDVUxBVElPTl9SRUdFWFBfQ0VMTFJFRicsICcoKChcdyopfChcJ1teXCddKlwnKXwoXCJbXlwiXSpcIikpISk\/XCQ\/KFthLXpdezEsM30pXCQ\/KFxkKyknKTsKICAgICAgICAvLyAgICBOYW1lZCBSYW5nZSBvZiBjZWxscwogICAgICAgIGRlZmluZSgnQ0FMQ1VMQVRJT05fUkVHRVhQX05BTUVEUkFOR0UnLCAnKCgoXHcqKXwoXCcuKlwnKXwoXCIuKlwiKSkhKT8oW19BLVpdW19BLVowLTlcLl0qKScpOwogICAgfQp9CgovKioKICogUEhQRXhjZWxfQ2FsY3VsYXRpb24gKE11bHRpdG9uKQogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQogKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgogKgogKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAgMDIxMTAtMTMwMSAgVVNBCiAqCiAqIEBjYXRlZ29yeSAgIFBIUEV4Y2VsCiAqIEBwYWNrYWdlICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uCiAqIEBjb3B5cmlnaHQgIENvcHlyaWdodCAoYykgMjAwNiAtIDIwMTUgUEhQRXhjZWwgKGh0dHA6Ly93d3cuY29kZXBsZXguY29tL1BIUEV4Y2VsKQogKiBAbGljZW5zZSAgICBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2xncGwtMi4xLnR4dCAgICBMR1BMCiAqIEB2ZXJzaW9uICAgICMjVkVSU0lPTiMjLCAjI0RBVEUjIwogKi8KY2xhc3MgUEhQRXhjZWxfQ2FsY3VsYXRpb24KewogICAgLyoqIENvbnN0YW50cyAgICAgICAgICAgICAgICAqLwogICAgLyoqIFJlZ3VsYXIgRXhwcmVzc2lvbnMgICAgICAgICovCiAgICAvLyAgICBOdW1lcmljIG9wZXJhbmQKICAgIGNvbnN0IENBTENVTEFUSU9OX1JFR0VYUF9OVU1CRVIgICAgICAgID0gJ1stK10\/XGQqXC4\/XGQrKGVbLStdP1xkKyk\/JzsKICAgIC8vICAgIFN0cmluZyBvcGVyYW5kCiAgICBjb25zdCBDQUxDVUxBVElPTl9SRUdFWFBfU1RSSU5HICAgICAgICA9ICciKD86W14iXXwiIikqIic7CiAgICAvLyAgICBPcGVuaW5nIGJyYWNrZXQKICAgIGNvbnN0IENBTENVTEFUSU9OX1JFR0VYUF9PUEVOQlJBQ0UgICAgPSAnXCgnOwogICAgLy8gICAgRnVuY3Rpb24gKGFsbG93IGZvciB0aGUgb2xkIEAgc3ltYm9sIHRoYXQgY291bGQgYmUgdXNlZCB0byBwcmVmaXggYSBmdW5jdGlvbiwgYnV0IHdlJ2xsIGlnbm9yZSBpdCkKICAgIGNvbnN0IENBTENVTEFUSU9OX1JFR0VYUF9GVU5DVElPTiAgICA9ICdAPyhbQS1aXVtBLVowLTlcLl0qKVtcc10qXCgnOwogICAgLy8gICAgQ2VsbCByZWZlcmVuY2UgKGNlbGwgb3IgcmFuZ2Ugb2YgY2VsbHMsIHdpdGggb3Igd2l0aG91dCBhIHNoZWV0IHJlZmVyZW5jZSkKICAgIGNvbnN0IENBTENVTEFUSU9OX1JFR0VYUF9DRUxMUkVGICAgID0gQ0FMQ1VMQVRJT05fUkVHRVhQX0NFTExSRUY7CiAgICAvLyAgICBOYW1lZCBSYW5nZSBvZiBjZWxscwogICAgY29uc3QgQ0FMQ1VMQVRJT05fUkVHRVhQX05BTUVEUkFOR0UgICAgPSBDQUxDVUxBVElPTl9SRUdFWFBfTkFNRURSQU5HRTsKICAgIC8vICAgIEVycm9yCiAgICBjb25zdCBDQUxDVUxBVElPTl9SRUdFWFBfRVJST1IgICAgICAgID0gJ1wjW0EtWl1bQS1aMF9cL10qWyFcP10\\/JwogICAgICAgICksCiAgICAgICAgJ0NVQkVNRU1CRVInID0+IGFycmF5KAogICAgICAgICAgICAnY2F0ZWdvcnknID0+IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uOjpDQVRFR09SWV9DVUJFLAogICAgICAgICAgICAnZnVuY3Rpb25DYWxsJyA9PiAnUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpEVU1NWScsCiAgICAgICAgICAgICdhcmd1bWVudENvdW50JyA9PiAnPycKICAgICAgICApLAogICAgICAgICdDVUJFTUVNQkVSUFJPUEVSVFknID0+IGFycmF5KAogICAgICAgICAgICAnY2F0ZWdvcnknID0+IFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uOjpDQVRFR09SWV9DVUJFLAogICAgICAgICAgICAnZnVuY3Rpb25DYWxsJyA9PiAnUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpEVU1NWScsCiAgICAgICAgICAgICdhcmd1bWVudENvdW50JyA9PiAnPycKICAgICAgICApLAogICAgICAgICdDVUJFUkFOS0VETUVNQkVSJyA9PiBhcnJheSgKICAgICAgICAgICAgJ2NhdGVnb3J5JyA9PiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbjo6Q0FURUdPUllfQ1VCRSwKICAgICAgICAgICAgJ2Z1bmN0aW9uQ2FsbCcgPT4gJ1BIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6RFVNTVknLAogICAgICAgICAgICAnYXJndW1lbnRDb3VudCcgPT4gJz8nCiAgICAgICAgKSwKICAgICAgICAnQ1VCRVNFVCcgPT4gYXJyYXkoCiAgICAgICAgICAgICdjYXRlZ29yeScgPT4gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb246OkNBVEVHT1JZX0NVQkUsCiAgICAgICAgICAgICdmdW5jdGlvbkNhbGwnID0+ICdQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OkRVTU1ZJywKICAgICAgICAgICAgJ2FyZ3VtZW50Q291bnQnID0+ICc\/JwogICAgICAgICksCiAgICAgICAgJ0NVQkVTRVRDT1VOVCcgPT4gYXJyYXkoCiAgICAgICAgICAgICdjYXRlZ29yeScgPT4gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb246OkNBVEVHT1JZX0NVQkUsCiAgICAgICAgICAgICdmdW5jdGlvbkNhbGwnID0+ICdQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OkRVTU1ZJywKICAgICAgICAgICAgJ2FyZ3VtZW50Q291bnQnID0+ICc\/JwogICAgICAgICksCiAgICAgICAgJ0NVQkVWQUxVRScgPT4gYXJyYXkoCiAgICAgICAgICAgICdjYXRlZ29yeScgPT4gUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb246OkNBVEVHT1JZX0NVQkUsCiAgICAgICAgICAgICdmdW5jdGlvbkNhbGwnID0+ICdQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OkRVTU1ZJywKICAgICAgICAgICAgJ2FyZ3VtZW50Q291bnQnID0+ICc\\/W15cd1wuXSknLnByZWdfcXVvdGUoJGV4Y2VsQm9vbGVhbikuJyhbXlx3XC5dKS9VaSc7CiAgICAgICAgICAgIH0KCiAgICAgICAgfQoKICAgICAgICBpZiAoc2VsZjo6JGZ1bmN0aW9uUmVwbGFjZVRvTG9jYWxlID09PSBudWxsKSB7CiAgICAgICAgICAgIHNlbGY6OiRmdW5jdGlvblJlcGxhY2VUb0xvY2FsZSA9IGFycmF5KCk7CiAgICAgICAgICAgIGZvcmVhY2ggKGFycmF5X3ZhbHVlcyhzZWxmOjokbG9jYWxlRnVuY3Rpb25zKSBhcyAkbG9jYWxlRnVuY3Rpb25OYW1lKSB7CiAgICAgICAgICAgICAgICBzZWxmOjokZnVuY3Rpb25SZXBsYWNlVG9Mb2NhbGVbXSA9ICckMScudHJpbSgkbG9jYWxlRnVuY3Rpb25OYW1lKS4nJDInOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvcmVhY2ggKGFycmF5X3ZhbHVlcyhzZWxmOjokbG9jYWxlQm9vbGVhbikgYXMgJGxvY2FsZUJvb2xlYW4pIHsKICAgICAgICAgICAgICAgIHNlbGY6OiRmdW5jdGlvblJlcGxhY2VUb0xvY2FsZVtdID0gJyQxJy50cmltKCRsb2NhbGVCb29sZWFuKS4nJDInOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc2VsZjo6dHJhbnNsYXRlRm9ybXVsYShzZWxmOjokZnVuY3Rpb25SZXBsYWNlRnJvbUV4Y2VsLCBzZWxmOjokZnVuY3Rpb25SZXBsYWNlVG9Mb2NhbGUsICRmb3JtdWxhLCAnLCcsIHNlbGY6OiRsb2NhbGVBcmd1bWVudFNlcGFyYXRvcik7CiAgICB9CgoKICAgIHByaXZhdGUgc3RhdGljICRmdW5jdGlvblJlcGxhY2VGcm9tTG9jYWxlID0gbnVsbDsKICAgIHByaXZhdGUgc3RhdGljICRmdW5jdGlvblJlcGxhY2VUb0V4Y2VsICAgID0gbnVsbDsKCiAgICBwdWJsaWMgZnVuY3Rpb24gX3RyYW5zbGF0ZUZvcm11bGFUb0VuZ2xpc2goJGZvcm11bGEpCiAgICB7CiAgICAgICAgaWYgKHNlbGY6OiRmdW5jdGlvblJlcGxhY2VGcm9tTG9jYWxlID09PSBudWxsKSB7CiAgICAgICAgICAgIHNlbGY6OiRmdW5jdGlvblJlcGxhY2VGcm9tTG9jYWxlID0gYXJyYXkoKTsKICAgICAgICAgICAgZm9yZWFjaCAoYXJyYXlfdmFsdWVzKHNlbGY6OiRsb2NhbGVGdW5jdGlvbnMpIGFzICRsb2NhbGVGdW5jdGlvbk5hbWUpIHsKICAgICAgICAgICAgICAgIHNlbGY6OiRmdW5jdGlvblJlcGxhY2VGcm9tTG9jYWxlW10gPSAnLyhAP1teXHdcLl0pJy5wcmVnX3F1b3RlKCRsb2NhbGVGdW5jdGlvbk5hbWUpLicoW1xzXSpcKCkvVWknOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvcmVhY2ggKGFycmF5X3ZhbHVlcyhzZWxmOjokbG9jYWxlQm9vbGVhbikgYXMgJGV4Y2VsQm9vbGVhbikgewogICAgICAgICAgICAgICAgc2VsZjo6JGZ1bmN0aW9uUmVwbGFjZUZyb21Mb2NhbGVbXSA9ICcvKEA\\/CiAgICAgICAgLy8gSXMgdGhlIHZhbHVlIHByZXNlbnQgaW4gY2FsY3VsYXRpb24gY2FjaGU\/CiAgICAgICAgJHRoaXMtPl9kZWJ1Z0xvZy0+d3JpdGVEZWJ1Z0xvZygnVGVzdGluZyBjYWNoZSB2YWx1ZSBmb3IgY2VsbCAnLCAkY2VsbFJlZmVyZW5jZSk7CiAgICAgICAgaWYgKCgkdGhpcy0+Y2FsY3VsYXRpb25DYWNoZUVuYWJsZWQpICYmIChpc3NldCgkdGhpcy0+Y2FsY3VsYXRpb25DYWNoZVskY2VsbFJlZmVyZW5jZV0pKSkgewogICAgICAgICAgICAkdGhpcy0+X2RlYnVnTG9nLT53cml0ZURlYnVnTG9nKCdSZXRyaWV2aW5nIHZhbHVlIGZvciBjZWxsICcsICRjZWxsUmVmZXJlbmNlLCAnIGZyb20gY2FjaGUnKTsKICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBjYWNoZWQgcmVzdWx0CiAgICAgICAgICAgICRjZWxsVmFsdWUgPSAkdGhpcy0+Y2FsY3VsYXRpb25DYWNoZVskY2VsbFJlZmVyZW5jZV07CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHNhdmVWYWx1ZVRvQ2FjaGUoJGNlbGxSZWZlcmVuY2UsICRjZWxsVmFsdWUpCiAgICB7CiAgICAgICAgaWYgKCR0aGlzLT5jYWxjdWxhdGlvbkNhY2hlRW5hYmxlZCkgewogICAgICAgICAgICAkdGhpcy0+Y2FsY3VsYXRpb25DYWNoZVskY2VsbFJlZmVyZW5jZV0gPSAkY2VsbFZhbHVlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFBhcnNlIGEgY2VsbCBmb3JtdWxhIGFuZCBjYWxjdWxhdGUgaXRzIHZhbHVlCiAgICAgKgogICAgICogQHBhcmFtICAgIHN0cmluZyAgICAgICAgICAgICRmb3JtdWxhICAgIFRoZSBmb3JtdWxhIHRvIHBhcnNlIGFuZCBjYWxjdWxhdGUKICAgICAqIEBwYXJhbSAgICBzdHJpbmcgICAgICAgICAgICAkY2VsbElEICAgICAgICBUaGUgSUQgKGUuZy4gQTMpIG9mIHRoZSBjZWxsIHRoYXQgd2UgYXJlIGNhbGN1bGF0aW5nCiAgICAgKiBAcGFyYW0gICAgUEhQRXhjZWxfQ2VsbCAgICAkcENlbGwgICAgICAgIENlbGwgdG8gY2FsY3VsYXRlCiAgICAgKiBAcmV0dXJuICAgIG1peGVkCiAgICAgKiBAdGhyb3dzICAgIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0V4Y2VwdGlvbgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX2NhbGN1bGF0ZUZvcm11bGFWYWx1ZSgkZm9ybXVsYSwgJGNlbGxJRCA9IG51bGwsIFBIUEV4Y2VsX0NlbGwgJHBDZWxsID0gbnVsbCkKICAgIHsKICAgICAgICAkY2VsbFZhbHVlID0gbnVsbDsKCiAgICAgICAgLy8gICAgQmFzaWMgdmFsaWRhdGlvbiB0aGF0IHRoaXMgaXMgaW5kZWVkIGEgZm9ybXVsYQogICAgICAgIC8vICAgIFdlIHNpbXBseSByZXR1cm4gdGhlIGNlbGwgdmFsdWUgaWYgbm90CiAgICAgICAgJGZvcm11bGEgPSB0cmltKCRmb3JtdWxhKTsKICAgICAgICBpZiAoJGZvcm11bGF7MH0gIT0gJz0nKSB7CiAgICAgICAgICAgIHJldHVybiBzZWxmOjp3cmFwUmVzdWx0KCRmb3JtdWxhKTsKICAgICAgICB9CiAgICAgICAgJGZvcm11bGEgPSBsdHJpbShzdWJzdHIoJGZvcm11bGEsIDEpKTsKICAgICAgICBpZiAoIWlzc2V0KCRmb3JtdWxhezB9KSkgewogICAgICAgICAgICByZXR1cm4gc2VsZjo6d3JhcFJlc3VsdCgkZm9ybXVsYSk7CiAgICAgICAgfQoKICAgICAgICAkcENlbGxQYXJlbnQgPSAoJHBDZWxsICE9PSBudWxsKSA\\\/ICdUcnVlJyA6ICdGYWxzZScpLlBIUF9FT0w7Ci8vdmFyX2R1bXAoJG1hdGNoKTsKCiAgICAgICAgICAgIGlmICgkb3BDaGFyYWN0ZXIgPT0gJy0nICYmICEkZXhwZWN0aW5nT3BlcmF0b3IpIHsgICAgICAgICAgICAgICAgLy8gICAgSXMgaXQgYSBuZWdhdGlvbiBpbnN0ZWFkIG9mIGEgbWludXM\/Ci8vZWNobyAnRWxlbWVudCBpcyBhIE5lZ2F0aW9uIG9wZXJhdG9yJywgUEhQX0VPTDsKICAgICAgICAgICAgICAgICRzdGFjay0+cHVzaCgnVW5hcnkgT3BlcmF0b3InLCAnficpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBQdXQgYSBuZWdhdGlvbiBvbiB0aGUgc3RhY2sKICAgICAgICAgICAgICAgICsrJGluZGV4OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgYW5kIGRyb3AgdGhlIG5lZ2F0aW9uIHN5bWJvbAogICAgICAgICAgICB9IGVsc2VpZiAoJG9wQ2hhcmFjdGVyID09ICclJyAmJiAkZXhwZWN0aW5nT3BlcmF0b3IpIHsKLy9lY2hvICdFbGVtZW50IGlzIGEgUGVyY2VudGFnZSBvcGVyYXRvcicsIFBIUF9FT0w7CiAgICAgICAgICAgICAgICAkc3RhY2stPnB1c2goJ1VuYXJ5IE9wZXJhdG9yJywgJyUnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgUHV0IGEgcGVyY2VudGFnZSBvbiB0aGUgc3RhY2sKICAgICAgICAgICAgICAgICsrJGluZGV4OwogICAgICAgICAgICB9IGVsc2VpZiAoJG9wQ2hhcmFjdGVyID09ICcrJyAmJiAhJGV4cGVjdGluZ09wZXJhdG9yKSB7ICAgICAgICAgICAgLy8gICAgUG9zaXRpdmUgKHVuYXJ5IHBsdXMgcmF0aGVyIHRoYW4gYmluYXJ5IG9wZXJhdG9yIHBsdXMpIGNhbiBiZSBkaXNjYXJkZWQ\/Ci8vZWNobyAnRWxlbWVudCBpcyBhIFBvc2l0aXZlIG51bWJlciwgbm90IFBsdXMgb3BlcmF0b3InLCBQSFBfRU9MOwogICAgICAgICAgICAgICAgKyskaW5kZXg7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIERyb3AgdGhlIHJlZHVuZGFudCBwbHVzIHN5bWJvbAogICAgICAgICAgICB9IGVsc2VpZiAoKCgkb3BDaGFyYWN0ZXIgPT0gJ34nKSB8fCAoJG9wQ2hhcmFjdGVyID09ICd8JykpICYmICghJGlzT3BlcmFuZE9yRnVuY3Rpb24pKSB7ICAgIC8vICAgIFdlIGhhdmUgdG8gZXhwbGljaXRseSBkZW55IGEgdGlsZGUgb3IgcGlwZSwgYmVjYXVzZSB0aGV5IGFyZSBsZWdhbAogICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5yYWlzZUZvcm11bGFFcnJvcigiRm9ybXVsYSBFcnJvcjogSWxsZWdhbCBjaGFyYWN0ZXIgJ34nIik7ICAgICAgICAgICAgICAgIC8vICAgICAgICBvbiB0aGUgc3RhY2sgYnV0IG5vdCBpbiB0aGUgaW5wdXQgZXhwcmVzc2lvbgoKICAgICAgICAgICAgfSBlbHNlaWYgKChpc3NldChzZWxmOjokb3BlcmF0b3JzWyRvcENoYXJhY3Rlcl0pIG9yICRpc09wZXJhbmRPckZ1bmN0aW9uKSAmJiAkZXhwZWN0aW5nT3BlcmF0b3IpIHsgICAgLy8gICAgQXJlIHdlIHB1dHRpbmcgYW4gb3BlcmF0b3Igb24gdGhlIHN0YWNrPwovL2VjaG8gJ0VsZW1lbnQgd2l0aCB2YWx1ZSAnLiRvcENoYXJhY3Rlci4nIGlzIGFuIE9wZXJhdG9yJywgUEhQX0VPTDsKICAgICAgICAgICAgICAgIHdoaWxlICgkc3RhY2stPmNvdW50KCkgPiAwICYmCiAgICAgICAgICAgICAgICAgICAgKCRvMiA9ICRzdGFjay0+bGFzdCgpKSAmJgogICAgICAgICAgICAgICAgICAgIGlzc2V0KHNlbGY6OiRvcGVyYXRvcnNbJG8yWyd2YWx1ZSddXSkgJiYKICAgICAgICAgICAgICAgICAgICBAKHNlbGY6OiRvcGVyYXRvckFzc29jaWF0aXZpdHlbJG9wQ2hhcmFjdGVyXSA\\/ICRwQ2VsbFBhcmVudC0+Z2V0SGlnaGVzdFJvdygpIDogMTA0ODU3NjsgICAgICAgIC8vICAgIE1heCAxLDA0OCw1NzYgcm93cyBmb3IgRXhjZWwyMDA3CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb3V0cHV0W2NvdW50KCRvdXRwdXQpLTFdWyd2YWx1ZSddID0gJHJhbmdlV1MxLnN0cnRvdXBwZXIoJHN0YXJ0Um93Q29sUmVmKS4nMSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdmFsID0gJHJhbmdlV1MyLiR2YWwuJGVuZFJvd0NvbFJlZjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJGxvY2FsZUNvbnN0YW50ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRvcENoYXJhY3RlciA9PSAnIicpIHsKLy8gICAgICAgICAgICAgICAgICAgICAgICBlY2hvICdFbGVtZW50IGlzIGEgU3RyaW5nPGJyIC8+JzsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgVW5Fc2NhcGUgYW55IHF1b3RlcyB3aXRoaW4gdGhlIHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAkdmFsID0gc2VsZjo6d3JhcFJlc3VsdChzdHJfcmVwbGFjZSgnIiInLCAnIicsIHNlbGY6OnVud3JhcFJlc3VsdCgkdmFsKSkpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZWlmIChpc19udW1lcmljKCR2YWwpKSB7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnRWxlbWVudCBpcyBhIE51bWJlcjxiciAvPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoc3RycG9zKCR2YWwsICcuJykgIT09IGZhbHNlKSB8fCAoc3RyaXBvcygkdmFsLCAnZScpICE9PSBmYWxzZSkgfHwgKCR2YWwgPiBQSFBfSU5UX01BWCkgfHwgKCR2YWwgPCAtUEhQX0lOVF9NQVgpKSB7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJ0Nhc3RpbmcgJy4kdmFsLicgdG8gZmxvYXQ8YnIgLz4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZhbCA9IChmbG9hdCkgJHZhbDsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnQ2FzdGluZyAnLiR2YWwuJyB0byBpbnRlZ2VyPGJyIC8+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2YWwgPSAoaW50ZWdlcikgJHZhbDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZWlmIChpc3NldChzZWxmOjokZXhjZWxDb25zdGFudHNbdHJpbShzdHJ0b3VwcGVyKCR2YWwpKV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRleGNlbENvbnN0YW50ID0gdHJpbShzdHJ0b3VwcGVyKCR2YWwpKTsKLy8gICAgICAgICAgICAgICAgICAgICAgICBlY2hvICdFbGVtZW50ICcuJGV4Y2VsQ29uc3RhbnQuJyBpcyBhbiBFeGNlbCBDb25zdGFudDxiciAvPic7CiAgICAgICAgICAgICAgICAgICAgICAgICR2YWwgPSBzZWxmOjokZXhjZWxDb25zdGFudHNbJGV4Y2VsQ29uc3RhbnRdOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZWlmICgoJGxvY2FsZUNvbnN0YW50ID0gYXJyYXlfc2VhcmNoKHRyaW0oc3RydG91cHBlcigkdmFsKSksIHNlbGY6OiRsb2NhbGVCb29sZWFuKSkgIT09IGZhbHNlKSB7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnRWxlbWVudCAnLiRsb2NhbGVDb25zdGFudC4nIGlzIGFuIEV4Y2VsIENvbnN0YW50PGJyIC8+JzsKICAgICAgICAgICAgICAgICAgICAgICAgJHZhbCA9IHNlbGY6OiRleGNlbENvbnN0YW50c1skbG9jYWxlQ29uc3RhbnRdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkZGV0YWlscyA9IGFycmF5KCd0eXBlJyA9PiAnVmFsdWUnLCAndmFsdWUnID0+ICR2YWwsICdyZWZlcmVuY2UnID0+IG51bGwpOwogICAgICAgICAgICAgICAgICAgIGlmICgkbG9jYWxlQ29uc3RhbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGRldGFpbHNbJ2xvY2FsZVZhbHVlJ10gPSAkbG9jYWxlQ29uc3RhbnQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRvdXRwdXRbXSA9ICRkZXRhaWxzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGluZGV4ICs9ICRsZW5ndGg7CgogICAgICAgICAgICB9IGVsc2VpZiAoJG9wQ2hhcmFjdGVyID09ICckJykgeyAgICAvLyBhYnNvbHV0ZSByb3cgb3IgY29sdW1uIHJhbmdlCiAgICAgICAgICAgICAgICArKyRpbmRleDsKICAgICAgICAgICAgfSBlbHNlaWYgKCRvcENoYXJhY3RlciA9PSAnKScpIHsgICAgLy8gbWlzY2VsbGFuZW91cyBlcnJvciBjaGVja2luZwogICAgICAgICAgICAgICAgaWYgKCRleHBlY3RpbmdPcGVyYW5kKSB7CiAgICAgICAgICAgICAgICAgICAgJG91dHB1dFtdID0gYXJyYXkoJ3R5cGUnID0+ICdOVUxMIFZhbHVlJywgJ3ZhbHVlJyA9PiBzZWxmOjokZXhjZWxDb25zdGFudHNbJ05VTEwnXSwgJ3JlZmVyZW5jZScgPT4gbnVsbCk7CiAgICAgICAgICAgICAgICAgICAgJGV4cGVjdGluZ09wZXJhbmQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAkZXhwZWN0aW5nT3BlcmF0b3IgPSB0cnVlOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPnJhaXNlRm9ybXVsYUVycm9yKCJGb3JtdWxhIEVycm9yOiBVbmV4cGVjdGVkICcpJyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2VpZiAoaXNzZXQoc2VsZjo6JG9wZXJhdG9yc1skb3BDaGFyYWN0ZXJdKSAmJiAhJGV4cGVjdGluZ09wZXJhdG9yKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPnJhaXNlRm9ybXVsYUVycm9yKCJGb3JtdWxhIEVycm9yOiBVbmV4cGVjdGVkIG9wZXJhdG9yICckb3BDaGFyYWN0ZXInIik7CiAgICAgICAgICAgIH0gZWxzZSB7ICAgIC8vIEkgZG9uJ3QgZXZlbiB3YW50IHRvIGtub3cgd2hhdCB5b3UgZGlkIHRvIGdldCBoZXJlCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPnJhaXNlRm9ybXVsYUVycm9yKCJGb3JtdWxhIEVycm9yOiBBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VyZWQiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyAgICBUZXN0IGZvciBlbmQgb2YgZm9ybXVsYSBzdHJpbmcKICAgICAgICAgICAgaWYgKCRpbmRleCA9PSBzdHJsZW4oJGZvcm11bGEpKSB7CiAgICAgICAgICAgICAgICAvLyAgICBEaWQgd2UgZW5kIHdpdGggYW4gb3BlcmF0b3I\/LgogICAgICAgICAgICAgICAgLy8gICAgT25seSB2YWxpZCBmb3IgdGhlICUgdW5hcnkgb3BlcmF0b3IKICAgICAgICAgICAgICAgIGlmICgoaXNzZXQoc2VsZjo6JG9wZXJhdG9yc1skb3BDaGFyYWN0ZXJdKSkgJiYgKCRvcENoYXJhY3RlciAhPSAnJScpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5yYWlzZUZvcm11bGFFcnJvcigiRm9ybXVsYSBFcnJvcjogT3BlcmF0b3IgJyRvcENoYXJhY3RlcicgaGFzIG5vIG9wZXJhbmRzIik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vICAgIElnbm9yZSB3aGl0ZSBzcGFjZQogICAgICAgICAgICB3aGlsZSAoKCRmb3JtdWxheyRpbmRleH0gPT0gIlxuIikgfHwgKCRmb3JtdWxheyRpbmRleH0gPT0gIlxyIikpIHsKICAgICAgICAgICAgICAgICsrJGluZGV4OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkZm9ybXVsYXskaW5kZXh9ID09ICcgJykgewogICAgICAgICAgICAgICAgd2hpbGUgKCRmb3JtdWxheyRpbmRleH0gPT0gJyAnKSB7CiAgICAgICAgICAgICAgICAgICAgKyskaW5kZXg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyAgICBJZiB3ZSdyZSBleHBlY3RpbmcgYW4gb3BlcmF0b3IsIGJ1dCBvbmx5IGhhdmUgYSBzcGFjZSBiZXR3ZWVuIHRoZSBwcmV2aW91cyBhbmQgbmV4dCBvcGVyYW5kcyAoYW5kIGJvdGggYXJlCiAgICAgICAgICAgICAgICAvLyAgICAgICAgQ2VsbCBSZWZlcmVuY2VzKSB0aGVuIHdlIGhhdmUgYW4gSU5URVJTRUNUSU9OIG9wZXJhdG9yCi8vICAgICAgICAgICAgICAgIGVjaG8gJ1Bvc3NpYmxlIEludGVyc2VjdCBPcGVyYXRvcjxiciAvPic7CiAgICAgICAgICAgICAgICBpZiAoKCRleHBlY3RpbmdPcGVyYXRvcikgJiYgKHByZWdfbWF0Y2goJy9eJy5zZWxmOjpDQUxDVUxBVElPTl9SRUdFWFBfQ0VMTFJFRi4nLiovVWknLCBzdWJzdHIoJGZvcm11bGEsICRpbmRleCksICRtYXRjaCkpICYmCiAgICAgICAgICAgICAgICAgICAgKCRvdXRwdXRbY291bnQoJG91dHB1dCktMV1bJ3R5cGUnXSA9PSAnQ2VsbCBSZWZlcmVuY2UnKSkgewovLyAgICAgICAgICAgICAgICAgICAgZWNobyAnRWxlbWVudCBpcyBhbiBJbnRlcnNlY3QgT3BlcmF0b3I8YnIgLz4nOwogICAgICAgICAgICAgICAgICAgIHdoaWxlICgkc3RhY2stPmNvdW50KCkgPiAwICYmCiAgICAgICAgICAgICAgICAgICAgICAgICgkbzIgPSAkc3RhY2stPmxhc3QoKSkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgaXNzZXQoc2VsZjo6JG9wZXJhdG9yc1skbzJbJ3ZhbHVlJ11dKSAmJgogICAgICAgICAgICAgICAgICAgICAgICBAKHNlbGY6OiRvcGVyYXRvckFzc29jaWF0aXZpdHlbJG9wQ2hhcmFjdGVyXSA\/IHNlbGY6OiRvcGVyYXRvclByZWNlZGVuY2VbJG9wQ2hhcmFjdGVyXSA8IHNlbGY6OiRvcGVyYXRvclByZWNlZGVuY2VbJG8yWyd2YWx1ZSddXSA6IHNlbGY6OiRvcGVyYXRvclByZWNlZGVuY2VbJG9wQ2hhcmFjdGVyXSA8PSBzZWxmOjokb3BlcmF0b3JQcmVjZWRlbmNlWyRvMlsndmFsdWUnXV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRvdXRwdXRbXSA9ICRzdGFjay0+cG9wKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBTd2FwIG9wZXJhbmRzIGFuZCBoaWdoZXIgcHJlY2VkZW5jZSBvcGVyYXRvcnMgZnJvbSB0aGUgc3RhY2sgdG8gdGhlIG91dHB1dAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkc3RhY2stPnB1c2goJ0JpbmFyeSBPcGVyYXRvcicsICd8Jyk7ICAgIC8vICAgIFB1dCBhbiBJbnRlcnNlY3QgT3BlcmF0b3Igb24gdGhlIHN0YWNrCiAgICAgICAgICAgICAgICAgICAgJGV4cGVjdGluZ09wZXJhdG9yID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHdoaWxlICgoJG9wID0gJHN0YWNrLT5wb3AoKSkgIT09IG51bGwpIHsgICAgLy8gcG9wIGV2ZXJ5dGhpbmcgb2ZmIHRoZSBzdGFjayBhbmQgcHVzaCBvbnRvIG91dHB1dAogICAgICAgICAgICBpZiAoKGlzX2FycmF5KCRvcCkgJiYgJG9wWyd2YWx1ZSddID09ICcoJykgfHwgKCRvcCA9PT0gJygnKSkgewogICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5yYWlzZUZvcm11bGFFcnJvcigiRm9ybXVsYSBFcnJvcjogRXhwZWN0aW5nICcpJyIpOyAgICAvLyBpZiB0aGVyZSBhcmUgYW55IG9wZW5pbmcgYnJhY2VzIG9uIHRoZSBzdGFjaywgdGhlbiBicmFjZXMgd2VyZSB1bmJhbGFuY2VkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJG91dHB1dFtdID0gJG9wOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJG91dHB1dDsKICAgIH0KCgogICAgcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gZGF0YVRlc3RSZWZlcmVuY2UoJiRvcGVyYW5kRGF0YSkKICAgIHsKICAgICAgICAkb3BlcmFuZCA9ICRvcGVyYW5kRGF0YVsndmFsdWUnXTsKICAgICAgICBpZiAoKCRvcGVyYW5kRGF0YVsncmVmZXJlbmNlJ10gPT09IG51bGwpICYmIChpc19hcnJheSgkb3BlcmFuZCkpKSB7CiAgICAgICAgICAgICRyS2V5cyA9IGFycmF5X2tleXMoJG9wZXJhbmQpOwogICAgICAgICAgICAkcm93S2V5ID0gYXJyYXlfc2hpZnQoJHJLZXlzKTsKICAgICAgICAgICAgJGNLZXlzID0gYXJyYXlfa2V5cyhhcnJheV9rZXlzKCRvcGVyYW5kWyRyb3dLZXldKSk7CiAgICAgICAgICAgICRjb2xLZXkgPSBhcnJheV9zaGlmdCgkY0tleXMpOwogICAgICAgICAgICBpZiAoY3R5cGVfdXBwZXIoJGNvbEtleSkpIHsKICAgICAgICAgICAgICAgICRvcGVyYW5kRGF0YVsncmVmZXJlbmNlJ10gPSAkY29sS2V5LiRyb3dLZXk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuICRvcGVyYW5kOwogICAgfQoKICAgIC8vIGV2YWx1YXRlIHBvc3RmaXggbm90YXRpb24KICAgIHByaXZhdGUgZnVuY3Rpb24gcHJvY2Vzc1Rva2VuU3RhY2soJHRva2VucywgJGNlbGxJRCA9IG51bGwsIFBIUEV4Y2VsX0NlbGwgJHBDZWxsID0gbnVsbCkKICAgIHsKICAgICAgICBpZiAoJHRva2VucyA9PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICAvLyAgICBJZiB3ZSdyZSB1c2luZyBjZWxsIGNhY2hpbmcsIHRoZW4gJHBDZWxsIG1heSB3ZWxsIGJlIGZsdXNoZWQgYmFjayB0byB0aGUgY2FjaGUgKHdoaWNoIGRldGFjaGVzIHRoZSBwYXJlbnQgY2VsbCBjb2xsZWN0aW9uKSwKICAgICAgICAvLyAgICAgICAgc28gd2Ugc3RvcmUgdGhlIHBhcmVudCBjZWxsIGNvbGxlY3Rpb24gc28gdGhhdCB3ZSBjYW4gcmUtYXR0YWNoIGl0IHdoZW4gbmVjZXNzYXJ5CiAgICAgICAgJHBDZWxsV29ya3NoZWV0ID0gKCRwQ2VsbCAhPT0gbnVsbCkgPyAkcENlbGwtPmdldFdvcmtzaGVldCgpIDogbnVsbDsKICAgICAgICAkcENlbGxQYXJlbnQgPSAoJHBDZWxsICE9PSBudWxsKSA\\\\/CiAgICAgICAgICAgICRuYW1lZFJhbmdlID0gUEhQRXhjZWxfTmFtZWRSYW5nZTo6cmVzb2x2ZVJhbmdlKCRwUmFuZ2UsICRwU2hlZXQpOwogICAgICAgICAgICBpZiAoJG5hbWVkUmFuZ2UgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICRwU2hlZXQgPSAkbmFtZWRSYW5nZS0+Z2V0V29ya3NoZWV0KCk7Ci8vICAgICAgICAgICAgICAgIGVjaG8gJ05hbWVkIFJhbmdlICcuJHBSYW5nZS4nICgnOwogICAgICAgICAgICAgICAgJHBSYW5nZSA9ICRuYW1lZFJhbmdlLT5nZXRSYW5nZSgpOwogICAgICAgICAgICAgICAgJHNwbGl0UmFuZ2UgPSBQSFBFeGNlbF9DZWxsOjpzcGxpdFJhbmdlKCRwUmFuZ2UpOwogICAgICAgICAgICAgICAgLy8gICAgQ29udmVydCByb3cgYW5kIGNvbHVtbiByZWZlcmVuY2VzCiAgICAgICAgICAgICAgICBpZiAoY3R5cGVfYWxwaGEoJHNwbGl0UmFuZ2VbMF1bMF0pKSB7CiAgICAgICAgICAgICAgICAgICAgJHBSYW5nZSA9ICRzcGxpdFJhbmdlWzBdWzBdIC4gJzE6JyAuICRzcGxpdFJhbmdlWzBdWzFdIC4gJG5hbWVkUmFuZ2UtPmdldFdvcmtzaGVldCgpLT5nZXRIaWdoZXN0Um93KCk7CiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoY3R5cGVfZGlnaXQoJHNwbGl0UmFuZ2VbMF1bMF0pKSB7CiAgICAgICAgICAgICAgICAgICAgJHBSYW5nZSA9ICdBJyAuICRzcGxpdFJhbmdlWzBdWzBdIC4gJzonIC4gJG5hbWVkUmFuZ2UtPmdldFdvcmtzaGVldCgpLT5nZXRIaWdoZXN0Q29sdW1uKCkgLiAkc3BsaXRSYW5nZVswXVsxXTsKICAgICAgICAgICAgICAgIH0KLy8gICAgICAgICAgICAgICAgZWNobyAkcFJhbmdlLicpIGlzIGluIHNoZWV0ICcuJG5hbWVkUmFuZ2UtPmdldFdvcmtzaGVldCgpLT5nZXRUaXRsZSgpLic8YnIgLz4nOwoKLy8gICAgICAgICAgICAgICAgaWYgKCRwU2hlZXQtPmdldFRpdGxlKCkgIT0gJG5hbWVkUmFuZ2UtPmdldFdvcmtzaGVldCgpLT5nZXRUaXRsZSgpKSB7Ci8vICAgICAgICAgICAgICAgICAgICBpZiAoISRuYW1lZFJhbmdlLT5nZXRMb2NhbE9ubHkoKSkgewovLyAgICAgICAgICAgICAgICAgICAgICAgICRwU2hlZXQgPSAkbmFtZWRSYW5nZS0+Z2V0V29ya3NoZWV0KCk7Ci8vICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewovLyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcmV0dXJuVmFsdWU7Ci8vICAgICAgICAgICAgICAgICAgICB9Ci8vICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OlJFRigpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBFeHRyYWN0IHJhbmdlCiAgICAgICAgICAgICRhUmVmZXJlbmNlcyA9IFBIUEV4Y2VsX0NlbGw6OmV4dHJhY3RBbGxDZWxsUmVmZXJlbmNlc0luUmFuZ2UoJHBSYW5nZSk7Ci8vICAgICAgICAgICAgdmFyX2R1bXAoJGFSZWZlcmVuY2VzKTsKICAgICAgICAgICAgaWYgKCFpc3NldCgkYVJlZmVyZW5jZXNbMV0pKSB7CiAgICAgICAgICAgICAgICAvLyAgICBTaW5nbGUgY2VsbCAob3Igc2luZ2xlIGNvbHVtbiBvciByb3cpIGluIHJhbmdlCiAgICAgICAgICAgICAgICBsaXN0KCRjdXJyZW50Q29sLCAkY3VycmVudFJvdykgPSBQSFBFeGNlbF9DZWxsOjpjb29yZGluYXRlRnJvbVN0cmluZygkYVJlZmVyZW5jZXNbMF0pOwogICAgICAgICAgICAgICAgJGNlbGxWYWx1ZSA9IG51bGw7CiAgICAgICAgICAgICAgICBpZiAoJHBTaGVldC0+Y2VsbEV4aXN0cygkYVJlZmVyZW5jZXNbMF0pKSB7CiAgICAgICAgICAgICAgICAgICAgJHJldHVyblZhbHVlWyRjdXJyZW50Um93XVskY3VycmVudENvbF0gPSAkcFNoZWV0LT5nZXRDZWxsKCRhUmVmZXJlbmNlc1swXSktPmdldENhbGN1bGF0ZWRWYWx1ZSgkcmVzZXRMb2cpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkcmV0dXJuVmFsdWVbJGN1cnJlbnRSb3ddWyRjdXJyZW50Q29sXSA9IG51bGw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGNlbGwgZGF0YSBmb3IgYWxsIGNlbGxzIGluIHRoZSByYW5nZQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJGFSZWZlcmVuY2VzIGFzICRyZWZlcmVuY2UpIHsKICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHJhbmdlCiAgICAgICAgICAgICAgICAgICAgbGlzdCgkY3VycmVudENvbCwgJGN1cnJlbnRSb3cpID0gUEhQRXhjZWxfQ2VsbDo6Y29vcmRpbmF0ZUZyb21TdHJpbmcoJHJlZmVyZW5jZSk7Ci8vICAgICAgICAgICAgICAgICAgICBlY2hvICdOQU1FRCBSQU5HRTogJGN1cnJlbnRDb2w9Jy4kY3VycmVudENvbC4nICRjdXJyZW50Um93PScuJGN1cnJlbnRSb3cuJzxiciAvPic7CiAgICAgICAgICAgICAgICAgICAgJGNlbGxWYWx1ZSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRwU2hlZXQtPmNlbGxFeGlzdHMoJHJlZmVyZW5jZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHJldHVyblZhbHVlWyRjdXJyZW50Um93XVskY3VycmVudENvbF0gPSAkcFNoZWV0LT5nZXRDZWxsKCRyZWZlcmVuY2UpLT5nZXRDYWxjdWxhdGVkVmFsdWUoJHJlc2V0TG9nKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkcmV0dXJuVmFsdWVbJGN1cnJlbnRSb3ddWyRjdXJyZW50Q29sXSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9Ci8vICAgICAgICAgICAgICAgIHByaW50X3IoJHJldHVyblZhbHVlKTsKLy8gICAgICAgICAgICBlY2hvICc8YnIgLz4nOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRyZXR1cm5WYWx1ZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBJcyBhIHNwZWNpZmljIGZ1bmN0aW9uIGltcGxlbWVudGVkPwogICAgICoKICAgICAqIEBwYXJhbSAgICBzdHJpbmcgICAgJHBGdW5jdGlvbiAgICBGdW5jdGlvbiBOYW1lCiAgICAgKiBAcmV0dXJuICAgIGJvb2xlYW4KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGlzSW1wbGVtZW50ZWQoJHBGdW5jdGlvbiA9ICcnKQogICAgewogICAgICAgICRwRnVuY3Rpb24gPSBzdHJ0b3VwcGVyKCRwRnVuY3Rpb24pOwogICAgICAgIGlmIChpc3NldChzZWxmOjokUEhQRXhjZWxGdW5jdGlvbnNbJHBGdW5jdGlvbl0pKSB7CiAgICAgICAgICAgIHJldHVybiAoc2VsZjo6JFBIUEV4Y2VsRnVuY3Rpb25zWyRwRnVuY3Rpb25dWydmdW5jdGlvbkNhbGwnXSAhPSAnUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpEVU1NWScpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgoKICAgIC8qKgogICAgICogR2V0IGEgbGlzdCBvZiBhbGwgaW1wbGVtZW50ZWQgZnVuY3Rpb25zIGFzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIG9iamVjdHMKICAgICAqCiAgICAgKiBAcmV0dXJuICAgIGFycmF5IG9mIFBIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBsaXN0RnVuY3Rpb25zKCkKICAgIHsKICAgICAgICAkcmV0dXJuVmFsdWUgPSBhcnJheSgpOwoKICAgICAgICBmb3JlYWNoIChzZWxmOjokUEhQRXhjZWxGdW5jdGlvbnMgYXMgJGZ1bmN0aW9uTmFtZSA9PiAkZnVuY3Rpb24pIHsKICAgICAgICAgICAgaWYgKCRmdW5jdGlvblsnZnVuY3Rpb25DYWxsJ10gIT0gJ1BIUEV4Y2VsX0NhbGN1bGF0aW9uX0Z1bmN0aW9uczo6RFVNTVknKSB7CiAgICAgICAgICAgICAgICAkcmV0dXJuVmFsdWVbJGZ1bmN0aW9uTmFtZV0gPSBuZXcgUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb24oCiAgICAgICAgICAgICAgICAgICAgJGZ1bmN0aW9uWydjYXRlZ29yeSddLAogICAgICAgICAgICAgICAgICAgICRmdW5jdGlvbk5hbWUsCiAgICAgICAgICAgICAgICAgICAgJGZ1bmN0aW9uWydmdW5jdGlvbkNhbGwnXQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRyZXR1cm5WYWx1ZTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBHZXQgYSBsaXN0IG9mIGFsbCBFeGNlbCBmdW5jdGlvbiBuYW1lcwogICAgICoKICAgICAqIEByZXR1cm4gICAgYXJyYXkKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGxpc3RBbGxGdW5jdGlvbk5hbWVzKCkKICAgIHsKICAgICAgICByZXR1cm4gYXJyYXlfa2V5cyhzZWxmOjokUEhQRXhjZWxGdW5jdGlvbnMpOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IGEgbGlzdCBvZiBpbXBsZW1lbnRlZCBFeGNlbCBmdW5jdGlvbiBuYW1lcwogICAgICoKICAgICAqIEByZXR1cm4gICAgYXJyYXkKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGxpc3RGdW5jdGlvbk5hbWVzKCkKICAgIHsKICAgICAgICAkcmV0dXJuVmFsdWUgPSBhcnJheSgpOwogICAgICAgIGZvcmVhY2ggKHNlbGY6OiRQSFBFeGNlbEZ1bmN0aW9ucyBhcyAkZnVuY3Rpb25OYW1lID0+ICRmdW5jdGlvbikgewogICAgICAgICAgICBpZiAoJGZ1bmN0aW9uWydmdW5jdGlvbkNhbGwnXSAhPSAnUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpEVU1NWScpIHsKICAgICAgICAgICAgICAgICRyZXR1cm5WYWx1ZVtdID0gJGZ1bmN0aW9uTmFtZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRyZXR1cm5WYWx1ZTsKICAgIH0KfQo=",
    "size": "202013"
}