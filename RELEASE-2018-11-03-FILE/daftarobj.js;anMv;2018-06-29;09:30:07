{
    "namaFile": "js\/daftarobj.js",
    "lastUpdate": "2018-06-29+09:30:07.05",
    "contentFile": "DQpmdW5jdGlvbiBnZW5SYW5kb21IZXhhNCgpIHsNCgkvL2dlbmVyYXRlIHJhbmRvbSBoZXhhIDQgZGlnaXQNCiAgCXJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKQ0KICAgIAkudG9TdHJpbmcoMTYpDQogICAgCS5zdWJzdHJpbmcoMSk7DQp9DQoNCmZ1bmN0aW9uIGdlblNlc3Npb25JRCgpew0KCS8vZ2VuIHJhbmRvbSB1bmlrIGlkIDogY3VycmVudGRhdGUgXyBoZXhhIDEyIGRpZ2l0DQoJdmFyIGN1cnJlbnRkYXRlID0gbmV3IERhdGUoKTsNCgl2YXIgZGF0ZXRpbWUgPSAoJzAnK2N1cnJlbnRkYXRlLmdldERhdGUoKS50b1N0cmluZygpKS5zbGljZSgtMikNCiAgICAgICAgICAgICAgICArKCcwJysgKGN1cnJlbnRkYXRlLmdldE1vbnRoKCkrMSkudG9TdHJpbmcoKSkuc2xpY2UoLTIpDQogICAgICAgICAgICAgICAgKyBjdXJyZW50ZGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkNCiAgICAgICAgICAgICAgICArKCcwJysgY3VycmVudGRhdGUuZ2V0SG91cnMoKS50b1N0cmluZygpKS5zbGljZSgtMikNCiAgICAgICAgICAgICAgICArKCcwJysgY3VycmVudGRhdGUuZ2V0TWludXRlcygpLnRvU3RyaW5nKCkpLnNsaWNlKC0yKQ0KICAgICAgICAgICAgICAgICsoJzAnKyBjdXJyZW50ZGF0ZS5nZXRTZWNvbmRzKCkudG9TdHJpbmcoKSkuc2xpY2UoLTIpOw0KDQoJcmV0dXJuIGRhdGV0aW1lKydfJysgZ2VuUmFuZG9tSGV4YTQoKSsgZ2VuUmFuZG9tSGV4YTQoKSsgZ2VuUmFuZG9tSGV4YTQoKTsNCn0NCg0KZnVuY3Rpb24gZG93bmxvYWRGaWxlKGRhdGEsIGZpbGVOYW1lKSB7DQogICAgICAgIHZhciBjc3ZEYXRhID0gZGF0YTsNCiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbIGNzdkRhdGEgXSwgew0KICAgICAgICAgICAgdHlwZSA6ICJhcHBsaWNhdGlvbi9jc3Y7Y2hhcnNldD11dGYtODsiDQogICAgICAgIH0pOw0KDQogICAgICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZUJsb2IpIHsNCiAgICAgICAgICAgIC8vIEZPUiBJRSBCUk9XU0VSDQogICAgICAgICAgICBuYXZpZ2F0b3IubXNTYXZlQmxvYihibG9iLCBmaWxlTmFtZSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAvLyBGT1IgT1RIRVIgQlJPV1NFUlMNCiAgICAgICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOw0KICAgICAgICAgICAgdmFyIGNzdlVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7DQogICAgICAgICAgICBsaW5rLmhyZWYgPSBjc3ZVcmw7DQogICAgICAgICAgICBsaW5rLnN0eWxlID0gInZpc2liaWxpdHk6aGlkZGVuIjsNCiAgICAgICAgICAgIGxpbmsuZG93bmxvYWQgPSBmaWxlTmFtZTsNCiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7DQogICAgICAgICAgICBsaW5rLmNsaWNrKCk7DQogICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmspOw0KICAgICAgICB9DQp9DQoNCnZhciB0YWJsZVRvRXhjZWwgPSAoDQpmdW5jdGlvbigpIHsNCiAgLy9wYXJhbWV0ZXIgZGl2L3RhYmxlIElEICwgd29ya3NoZWV0IG5hbWUNCiAgdmFyIHVyaSA9ICdkYXRhOmFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbDtiYXNlNjQsJywNCg0KCXRlbXBsYXRlID0gJzxodG1sIHhtbG5zOm89InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZSIgeG1sbnM6eD0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6ZXhjZWwiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwIj48aGVhZD48IS0tW2lmIGd0ZSBtc28gOV0+PHhtbD48eDpFeGNlbFdvcmtib29rPjx4OkV4Y2VsV29ya3NoZWV0cz48eDpFeGNlbFdvcmtzaGVldD48eDpOYW1lPnt3b3Jrc2hlZXR9PC94Ok5hbWU+PHg6V29ya3NoZWV0T3B0aW9ucz48eDpEaXNwbGF5R3JpZGxpbmVzLz48L3g6V29ya3NoZWV0T3B0aW9ucz48L3g6RXhjZWxXb3Jrc2hlZXQ+PC94OkV4Y2VsV29ya3NoZWV0cz48L3g6RXhjZWxXb3JrYm9vaz48L3htbD48IVtlbmRpZl0tLT48L2hlYWQ+PGJvZHk+PHRhYmxlPnt0YWJsZX08L3RhYmxlPjwvYm9keT48L2h0bWw+JywNCg0KCWJhc2U2NCA9IGZ1bmN0aW9uKHMpIHsNCgkJcmV0dXJuIHdpbmRvdy5idG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzKSkpDQoJfSwNCg0KCWZvcm1hdCA9IGZ1bmN0aW9uKHMsIGMpIHsNCgkJcmV0dXJuIHMucmVwbGFjZSgveyhcdyspfS9nLCBmdW5jdGlvbihtLCBwKSB7IHJldHVybiBjW3BdOyB9KQ0KCX0NCg0KCXJldHVybiBmdW5jdGlvbih0YWJsZSwgbmFtZSkgew0KCSAgICBpZiAoIXRhYmxlLm5vZGVUeXBlKSB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYmxlKQ0KDQoNCg0KDQoJICAgIHZhciBjdHggPSB7d29ya3NoZWV0OiBuYW1lIHx8ICdXb3Jrc2hlZXQnLCB0YWJsZTogdGFibGUuaW5uZXJIVE1MfQ0KDQoJCS8vcmV0dXJuIHVyaSArIGJhc2U2NChmb3JtYXQodGVtcGxhdGUsIGN0eCkpDQoNCgkJdmFyIGJsb2IgPSBuZXcgQmxvYihbIGZvcm1hdCh0ZW1wbGF0ZSwgY3R4KSBdLCB7DQogICAgICAgICAgIC8vIHR5cGUgOiAiZGF0YTphcHBsaWNhdGlvbi92bmQubXMtZXhjZWw7YmFzZTY0OyINCiAgICAgICAJCXR5cGUgOiAiZGF0YTphcHBsaWNhdGlvbi92bmQubXMtZXhjZWw7Ig0KICAgICAgICB9KTsNCgkJcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7DQogIAl9DQp9DQopKCkNCg0KdmFyIHRhYmxlVG9FeGNlbF8gPSAoDQpmdW5jdGlvbigpIHsNCiAgLy9wYXJhbWV0ZXIgZGl2L3RhYmxlIElEICwgd29ya3NoZWV0IG5hbWUNCiAgdmFyIHVyaSA9ICdkYXRhOmFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbDtiYXNlNjQsJywNCg0KCXRlbXBsYXRlID0gJzxodG1sIHhtbG5zOm89InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZSIgeG1sbnM6eD0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6ZXhjZWwiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwIj48aGVhZD48IS0tW2lmIGd0ZSBtc28gOV0+PHhtbD48eDpFeGNlbFdvcmtib29rPjx4OkV4Y2VsV29ya3NoZWV0cz48eDpFeGNlbFdvcmtzaGVldD48eDpOYW1lPnt3b3Jrc2hlZXR9PC94Ok5hbWU+PHg6V29ya3NoZWV0T3B0aW9ucz48eDpEaXNwbGF5R3JpZGxpbmVzLz48L3g6V29ya3NoZWV0T3B0aW9ucz48L3g6RXhjZWxXb3Jrc2hlZXQ+PC94OkV4Y2VsV29ya3NoZWV0cz48L3g6RXhjZWxXb3JrYm9vaz48L3htbD48IVtlbmRpZl0tLT48L2hlYWQ+PGJvZHk+PHRhYmxlPnt0YWJsZX08L3RhYmxlPjwvYm9keT48L2h0bWw+JywNCg0KCWJhc2U2NCA9IGZ1bmN0aW9uKHMpIHsNCgkJcmV0dXJuIHdpbmRvdy5idG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzKSkpDQoJfSwNCg0KCWZvcm1hdCA9IGZ1bmN0aW9uKHMsIGMpIHsNCgkJcmV0dXJuIHMucmVwbGFjZSgveyhcdyspfS9nLCBmdW5jdGlvbihtLCBwKSB7IHJldHVybiBjW3BdOyB9KQ0KCX0NCg0KCXJldHVybiBmdW5jdGlvbih0YWJsZSwgbmFtZSkgew0KCSAgICBpZiAoIXRhYmxlLm5vZGVUeXBlKSB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYmxlKQ0KDQoNCg0KDQoJICAgIHZhciBjdHggPSB7d29ya3NoZWV0OiBuYW1lIHx8ICdXb3Jrc2hlZXQnLCB0YWJsZTogdGFibGUuaW5uZXJIVE1MfQ0KICAgIAkvL3dpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJpICsgYmFzZTY0KGZvcm1hdCh0ZW1wbGF0ZSwgY3R4KSkNCgkJcmV0dXJuIHVyaSArIGJhc2U2NChmb3JtYXQodGVtcGxhdGUsIGN0eCkpDQogIAl9DQp9DQopKCkNCg0KZnVuY3Rpb24gcmVwbGFjZUFsbChzdHIsIGZpbmQsIHJlcGxhY2UpIHsNCgkgIHJldHVybiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKGZpbmQsICdnJyksIHJlcGxhY2UpOw0KfQ0KDQpmdW5jdGlvbiBhamF4RXJyb3IocmVxdWVzdCwgdHlwZSwgZXJyb3JUaHJvd24pDQp7DQoJdmFyIG1lc3NhZ2UgPSAiUHJvc2VzIGdhZ2FsISBNb2hvbiBkaXVsYW5nIGtlbWJhbGkuXG4iOw0KCXN3aXRjaCAodHlwZSkgew0KCQljYXNlICd0aW1lb3V0JzoNCgkJCW1lc3NhZ2UgKz0gIlRoZSByZXF1ZXN0IHRpbWVkIG91dC4iOw0KCQkJYnJlYWs7DQoJCWNhc2UgJ25vdG1vZGlmaWVkJzoNCgkJCW1lc3NhZ2UgKz0gIlRoZSByZXF1ZXN0IHdhcyBub3QgbW9kaWZpZWQgYnV0IHdhcyBub3QgcmV0cmlldmVkIGZyb20gdGhlIGNhY2hlLiI7DQoJCQlicmVhazsNCgkJY2FzZSAncGFyc2VyZXJyb3InOg0KCQkJbWVzc2FnZSArPSAiWE1ML0pzb24gZm9ybWF0IGlzIGJhZC4iOw0KCQkJYnJlYWs7DQoJCWRlZmF1bHQ6DQoJCQltZXNzYWdlICs9ICJIVFRQIEVycm9yICgiICsgcmVxdWVzdC5zdGF0dXMgKyAiICIgKyByZXF1ZXN0LnN0YXR1c1RleHQgKyAiKS4iOw0KCX0NCgltZXNzYWdlICs9ICJcbiI7DQpjb25zb2xlLmxvZyhtZXNzYWdlKTsNCgkvL2FsZXJ0KG1lc3NhZ2UpOw0KfQ0KDQpmb3JtYXRSdXBpYWg9ZnVuY3Rpb24ob2JqZWssIHNlcGFyYXRvcikgew0KCSAgYSA9IG9iamVrLnZhbHVlOw0KCSAgLy9iID0gYS5yZXBsYWNlKC9bXlxkLyxdL2csIiIpOw0KCSAgYiA9IGEucmVwbGFjZSgvW15cZF0vZywiIik7DQoJICBjID0gIiI7DQoJICBwYW5qYW5nID0gYi5sZW5ndGg7DQoJICBqID0gMDsNCgkgIGZvciAoaSA9IHBhbmphbmc7IGkgPiAwOyBpLS0pIHsNCgkgICAgaiA9IGogKyAxOw0KCSAgICBpZiAoKChqICUgMykgPT0gMSkgJiYgKGogIT0gMSkpIHsNCgkgICAgICBjID0gYi5zdWJzdHIoaS0xLDEpICsgc2VwYXJhdG9yICsgYzsNCgkgICAgfSBlbHNlIHsNCgkgICAgICBjID0gYi5zdWJzdHIoaS0xLDEpICsgYzsNCgkgICAgfQ0KCSAgfQ0KCSAgb2JqZWsudmFsdWUgPSBjOw0KICAgfQ0KDQpmb3JtYXROdW1iZXIgPSBmdW5jdGlvbihudW0sYywgZCwgdCl7DQp2YXIgbiA9IG51bSwNCiAgICBjID0gaXNOYU4oYyA9IE1hdGguYWJzKGMpKSA\/IDIgOiBjLA0KICAgIGQgPSBkID09IHVuZGVmaW5lZCA\/ICIuIiA6IGQsDQogICAgdCA9IHQgPT0gdW5kZWZpbmVkID8gIiwiIDogdCwNCiAgICBzID0gbiA8IDAgPyAiLSIgOiAiIiwNCiAgICBpID0gcGFyc2VJbnQobiA9IE1hdGguYWJzKCtuIHx8IDApLnRvRml4ZWQoYykpICsgIiIsDQogICAgaiA9IChqID0gaS5sZW5ndGgpID4gMyA\",
    "size": "28907"
}