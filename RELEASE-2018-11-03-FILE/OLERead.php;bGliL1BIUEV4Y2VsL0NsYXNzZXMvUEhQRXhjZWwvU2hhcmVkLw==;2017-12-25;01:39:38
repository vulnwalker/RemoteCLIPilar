{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Shared\/OLERead.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "",
    "size": "11244"
}