{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/ReferenceHelper.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKgogKiBQSFBFeGNlbF9SZWZlcmVuY2VIZWxwZXIgKFNpbmdsZXRvbikKICoKICogQ29weXJpZ2h0IChjKSAyMDA2IC0gMjAxNSBQSFBFeGNlbAogKgogKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yCiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyCiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgogKgogKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSBHTlUKICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KICoKICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgIDAyMTEwLTEzMDEgIFVTQQogKgogKiBAY2F0ZWdvcnkgICBQSFBFeGNlbAogKiBAcGFja2FnZSAgICBQSFBFeGNlbAogKiBAY29weXJpZ2h0ICBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsIChodHRwOi8vd3d3LmNvZGVwbGV4LmNvbS9QSFBFeGNlbCkKICogQGxpY2Vuc2UgICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9sZ3BsLTIuMS50eHQgICAgTEdQTAogKiBAdmVyc2lvbiAgICAjI1ZFUlNJT04jIywgIyNEQVRFIyMKICovCmNsYXNzIFBIUEV4Y2VsX1JlZmVyZW5jZUhlbHBlcgp7CiAgICAvKiogICAgQ29uc3RhbnRzICAgICAgICAgICAgICAgICovCiAgICAvKiogICAgUmVndWxhciBFeHByZXNzaW9ucyAgICAgICovCiAgICBjb25zdCBSRUZIRUxQRVJfUkVHRVhQX0NFTExSRUYgICAgICA9ICcoKFx3KnxcJ1teIV0qXCcpISk\/KD88IVs6YS16XCRdKShcJD9bYS16XXsxLDN9XCQ\/XGQrKSg\/PVteOiFcZFwnXSknOwogICAgY29uc3QgUkVGSEVMUEVSX1JFR0VYUF9DRUxMUkFOR0UgICAgPSAnKChcdyp8XCdbXiFdKlwnKSEpPyhcJD9bYS16XXsxLDN9XCQ\/XGQrKTooXCQ\/W2Etel17MSwzfVwkP1xkKyknOwogICAgY29uc3QgUkVGSEVMUEVSX1JFR0VYUF9ST1dSQU5HRSAgICAgPSAnKChcdyp8XCdbXiFdKlwnKSEpPyhcJD9cZCspOihcJD9cZCspJzsKICAgIGNvbnN0IFJFRkhFTFBFUl9SRUdFWFBfQ09MUkFOR0UgICAgID0gJygoXHcqfFwnW14hXSpcJykhKT8oXCQ\/W2Etel17MSwzfSk6KFwkP1thLXpdezEsM30pJzsKCiAgICAvKioKICAgICAqIEluc3RhbmNlIG9mIHRoaXMgY2xhc3MKICAgICAqCiAgICAgKiBAdmFyIFBIUEV4Y2VsX1JlZmVyZW5jZUhlbHBlcgogICAgICovCiAgICBwcml2YXRlIHN0YXRpYyAkaW5zdGFuY2U7CgogICAgLyoqCiAgICAgKiBHZXQgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcwogICAgICoKICAgICAqIEByZXR1cm4gUEhQRXhjZWxfUmVmZXJlbmNlSGVscGVyCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0SW5zdGFuY2UoKQogICAgewogICAgICAgIGlmICghaXNzZXQoc2VsZjo6JGluc3RhbmNlKSB8fCAoc2VsZjo6JGluc3RhbmNlID09PSBudWxsKSkgewogICAgICAgICAgICBzZWxmOjokaW5zdGFuY2UgPSBuZXcgUEhQRXhjZWxfUmVmZXJlbmNlSGVscGVyKCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc2VsZjo6JGluc3RhbmNlOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlIGEgbmV3IFBIUEV4Y2VsX1JlZmVyZW5jZUhlbHBlcgogICAgICovCiAgICBwcm90ZWN0ZWQgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQogICAgewogICAgfQoKICAgIC8qKgogICAgICogQ29tcGFyZSB0d28gY29sdW1uIGFkZHJlc3NlcwogICAgICogSW50ZW5kZWQgZm9yIHVzZSBhcyBhIENhbGxiYWNrIGZ1bmN0aW9uIGZvciBzb3J0aW5nIGNvbHVtbiBhZGRyZXNzZXMgYnkgY29sdW1uCiAgICAgKgogICAgICogQHBhcmFtICAgc3RyaW5nICAgJGEgIEZpcnN0IGNvbHVtbiB0byB0ZXN0IChlLmcuICdBQScpCiAgICAgKiBAcGFyYW0gICBzdHJpbmcgICAkYiAgU2Vjb25kIGNvbHVtbiB0byB0ZXN0IChlLmcuICdaJykKICAgICAqIEByZXR1cm4gIGludGVnZXIKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjb2x1bW5Tb3J0KCRhLCAkYikKICAgIHsKICAgICAgICByZXR1cm4gc3RyY2FzZWNtcChzdHJsZW4oJGEpIC4gJGEsIHN0cmxlbigkYikgLiAkYik7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb21wYXJlIHR3byBjb2x1bW4gYWRkcmVzc2VzCiAgICAgKiBJbnRlbmRlZCBmb3IgdXNlIGFzIGEgQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHJldmVyc2Ugc29ydGluZyBjb2x1bW4gYWRkcmVzc2VzIGJ5IGNvbHVtbgogICAgICoKICAgICAqIEBwYXJhbSAgIHN0cmluZyAgICRhICBGaXJzdCBjb2x1bW4gdG8gdGVzdCAoZS5nLiAnQUEnKQogICAgICogQHBhcmFtICAgc3RyaW5nICAgJGIgIFNlY29uZCBjb2x1bW4gdG8gdGVzdCAoZS5nLiAnWicpCiAgICAgKiBAcmV0dXJuICBpbnRlZ2VyCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY29sdW1uUmV2ZXJzZVNvcnQoJGEsICRiKQogICAgewogICAgICAgIHJldHVybiAxIC0gc3RyY2FzZWNtcChzdHJsZW4oJGEpIC4gJGEsIHN0cmxlbigkYikgLiAkYik7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb21wYXJlIHR3byBjZWxsIGFkZHJlc3NlcwogICAgICogSW50ZW5kZWQgZm9yIHVzZSBhcyBhIENhbGxiYWNrIGZ1bmN0aW9uIGZvciBzb3J0aW5nIGNlbGwgYWRkcmVzc2VzIGJ5IGNvbHVtbiBhbmQgcm93CiAgICAgKgogICAgICogQHBhcmFtICAgc3RyaW5nICAgJGEgIEZpcnN0IGNlbGwgdG8gdGVzdCAoZS5nLiAnQUExJykKICAgICAqIEBwYXJhbSAgIHN0cmluZyAgICRiICBTZWNvbmQgY2VsbCB0byB0ZXN0IChlLmcuICdaMScpCiAgICAgKiBAcmV0dXJuICBpbnRlZ2VyCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY2VsbFNvcnQoJGEsICRiKQogICAgewogICAgICAgIHNzY2FuZigkYSwgJyVbQS1aXSVkJywgJGFjLCAkYXIpOwogICAgICAgIHNzY2FuZigkYiwgJyVbQS1aXSVkJywgJGJjLCAkYnIpOwoKICAgICAgICBpZiAoJGFyID09ICRicikgewogICAgICAgICAgICByZXR1cm4gc3RyY2FzZWNtcChzdHJsZW4oJGFjKSAuICRhYywgc3RybGVuKCRiYykgLiAkYmMpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gKCRhciA8ICRicikgPyAtMSA6IDE7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb21wYXJlIHR3byBjZWxsIGFkZHJlc3NlcwogICAgICogSW50ZW5kZWQgZm9yIHVzZSBhcyBhIENhbGxiYWNrIGZ1bmN0aW9uIGZvciBzb3J0aW5nIGNlbGwgYWRkcmVzc2VzIGJ5IGNvbHVtbiBhbmQgcm93CiAgICAgKgogICAgICogQHBhcmFtICAgc3RyaW5nICAgJGEgIEZpcnN0IGNlbGwgdG8gdGVzdCAoZS5nLiAnQUExJykKICAgICAqIEBwYXJhbSAgIHN0cmluZyAgICRiICBTZWNvbmQgY2VsbCB0byB0ZXN0IChlLmcuICdaMScpCiAgICAgKiBAcmV0dXJuICBpbnRlZ2VyCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY2VsbFJldmVyc2VTb3J0KCRhLCAkYikKICAgIHsKICAgICAgICBzc2NhbmYoJGEsICclW0EtWl0lZCcsICRhYywgJGFyKTsKICAgICAgICBzc2NhbmYoJGIsICclW0EtWl0lZCcsICRiYywgJGJyKTsKCiAgICAgICAgaWYgKCRhciA9PSAkYnIpIHsKICAgICAgICAgICAgcmV0dXJuIDEgLSBzdHJjYXNlY21wKHN0cmxlbigkYWMpIC4gJGFjLCBzdHJsZW4oJGJjKSAuICRiYyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAoJGFyIDwgJGJyKSA\\/IHVrc29ydCgkYUh5cGVybGlua0NvbGxlY3Rpb24sIGFycmF5KCdQSFBFeGNlbF9SZWZlcmVuY2VIZWxwZXInLCdjZWxsUmV2ZXJzZVNvcnQnKSkgOiB1a3NvcnQoJGFIeXBlcmxpbmtDb2xsZWN0aW9uLCBhcnJheSgnUEhQRXhjZWxfUmVmZXJlbmNlSGVscGVyJywnY2VsbFNvcnQnKSk7CgogICAgICAgIGZvcmVhY2ggKCRhSHlwZXJsaW5rQ29sbGVjdGlvbiBhcyAka2V5ID0+ICR2YWx1ZSkgewogICAgICAgICAgICAkbmV3UmVmZXJlbmNlID0gJHRoaXMtPnVwZGF0ZUNlbGxSZWZlcmVuY2UoJGtleSwgJHBCZWZvcmUsICRwTnVtQ29scywgJHBOdW1Sb3dzKTsKICAgICAgICAgICAgaWYgKCRrZXkgIT0gJG5ld1JlZmVyZW5jZSkgewogICAgICAgICAgICAgICAgJHBTaGVldC0+c2V0SHlwZXJsaW5rKCRuZXdSZWZlcmVuY2UsICR2YWx1ZSk7CiAgICAgICAgICAgICAgICAkcFNoZWV0LT5zZXRIeXBlcmxpbmsoJGtleSwgbnVsbCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBVcGRhdGUgZGF0YSB2YWxpZGF0aW9ucyB3aGVuIGluc2VydGluZy9kZWxldGluZyByb3dzL2NvbHVtbnMKICAgICAqCiAgICAgKiBAcGFyYW0gICBQSFBFeGNlbF9Xb3Jrc2hlZXQgICRwU2hlZXQgICAgICAgICAgICAgVGhlIHdvcmtzaGVldCB0aGF0IHdlJ3JlIGVkaXRpbmcKICAgICAqIEBwYXJhbSAgIHN0cmluZyAgICAgICAgICAgICAgJHBCZWZvcmUgICAgICAgICAgICBJbnNlcnQvRGVsZXRlIGJlZm9yZSB0aGlzIGNlbGwgYWRkcmVzcyAoZS5nLiAnQTEnKQogICAgICogQHBhcmFtICAgaW50ZWdlciAgICAgICAgICAgICAkYmVmb3JlQ29sdW1uSW5kZXggIEluZGV4IG51bWJlciBvZiB0aGUgY29sdW1uIHdlJ3JlIGluc2VydGluZy9kZWxldGluZyBiZWZvcmUKICAgICAqIEBwYXJhbSAgIGludGVnZXIgICAgICAgICAgICAgJHBOdW1Db2xzICAgICAgICAgICBOdW1iZXIgb2YgY29sdW1ucyB0byBpbnNlcnQvZGVsZXRlIChuZWdhdGl2ZSB2YWx1ZXMgaW5kaWNhdGUgZGVsZXRpb24pCiAgICAgKiBAcGFyYW0gICBpbnRlZ2VyICAgICAgICAgICAgICRiZWZvcmVSb3cgICAgICAgICAgTnVtYmVyIG9mIHRoZSByb3cgd2UncmUgaW5zZXJ0aW5nL2RlbGV0aW5nIGJlZm9yZQogICAgICogQHBhcmFtICAgaW50ZWdlciAgICAgICAgICAgICAkcE51bVJvd3MgICAgICAgICAgIE51bWJlciBvZiByb3dzIHRvIGluc2VydC9kZWxldGUgKG5lZ2F0aXZlIHZhbHVlcyBpbmRpY2F0ZSBkZWxldGlvbikKICAgICAqLwogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIGFkanVzdERhdGFWYWxpZGF0aW9ucygkcFNoZWV0LCAkcEJlZm9yZSwgJGJlZm9yZUNvbHVtbkluZGV4LCAkcE51bUNvbHMsICRiZWZvcmVSb3csICRwTnVtUm93cykKICAgIHsKICAgICAgICAkYURhdGFWYWxpZGF0aW9uQ29sbGVjdGlvbiA9ICRwU2hlZXQtPmdldERhdGFWYWxpZGF0aW9uQ29sbGVjdGlvbigpOwogICAgICAgICgkcE51bUNvbHMgPiAwIHx8ICRwTnVtUm93cyA+IDApID8gdWtzb3J0KCRhRGF0YVZhbGlkYXRpb25Db2xsZWN0aW9uLCBhcnJheSgnUEhQRXhjZWxfUmVmZXJlbmNlSGVscGVyJywnY2VsbFJldmVyc2VTb3J0JykpIDogdWtzb3J0KCRhRGF0YVZhbGlkYXRpb25Db2xsZWN0aW9uLCBhcnJheSgnUEhQRXhjZWxfUmVmZXJlbmNlSGVscGVyJywnY2VsbFNvcnQnKSk7CiAgICAgICAgCiAgICAgICAgZm9yZWFjaCAoJGFEYXRhVmFsaWRhdGlvbkNvbGxlY3Rpb24gYXMgJGtleSA9PiAkdmFsdWUpIHsKICAgICAgICAgICAgJG5ld1JlZmVyZW5jZSA9ICR0aGlzLT51cGRhdGVDZWxsUmVmZXJlbmNlKCRrZXksICRwQmVmb3JlLCAkcE51bUNvbHMsICRwTnVtUm93cyk7CiAgICAgICAgICAgIGlmICgka2V5ICE9ICRuZXdSZWZlcmVuY2UpIHsKICAgICAgICAgICAgICAgICRwU2hlZXQtPnNldERhdGFWYWxpZGF0aW9uKCRuZXdSZWZlcmVuY2UsICR2YWx1ZSk7CiAgICAgICAgICAgICAgICAkcFNoZWV0LT5zZXREYXRhVmFsaWRhdGlvbigka2V5LCBudWxsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFVwZGF0ZSBtZXJnZWQgY2VsbHMgd2hlbiBpbnNlcnRpbmcvZGVsZXRpbmcgcm93cy9jb2x1bW5zCiAgICAgKgogICAgICogQHBhcmFtICAgUEhQRXhjZWxfV29ya3NoZWV0ICAkcFNoZWV0ICAgICAgICAgICAgIFRoZSB3b3Jrc2hlZXQgdGhhdCB3ZSdyZSBlZGl0aW5nCiAgICAgKiBAcGFyYW0gICBzdHJpbmcgICAgICAgICAgICAgICRwQmVmb3JlICAgICAgICAgICAgSW5zZXJ0L0RlbGV0ZSBiZWZvcmUgdGhpcyBjZWxsIGFkZHJlc3MgKGUuZy4gJ0ExJykKICAgICAqIEBwYXJhbSAgIGludGVnZXIgICAgICAgICAgICAgJGJlZm9yZUNvbHVtbkluZGV4ICBJbmRleCBudW1iZXIgb2YgdGhlIGNvbHVtbiB3ZSdyZSBpbnNlcnRpbmcvZGVsZXRpbmcgYmVmb3JlCiAgICAgKiBAcGFyYW0gICBpbnRlZ2VyICAgICAgICAgICAgICRwTnVtQ29scyAgICAgICAgICAgTnVtYmVyIG9mIGNvbHVtbnMgdG8gaW5zZXJ0L2RlbGV0ZSAobmVnYXRpdmUgdmFsdWVzIGluZGljYXRlIGRlbGV0aW9uKQogICAgICogQHBhcmFtICAgaW50ZWdlciAgICAgICAgICAgICAkYmVmb3JlUm93ICAgICAgICAgIE51bWJlciBvZiB0aGUgcm93IHdlJ3JlIGluc2VydGluZy9kZWxldGluZyBiZWZvcmUKICAgICAqIEBwYXJhbSAgIGludGVnZXIgICAgICAgICAgICAgJHBOdW1Sb3dzICAgICAgICAgICBOdW1iZXIgb2Ygcm93cyB0byBpbnNlcnQvZGVsZXRlIChuZWdhdGl2ZSB2YWx1ZXMgaW5kaWNhdGUgZGVsZXRpb24pCiAgICAgKi8KICAgIHByb3RlY3RlZCBmdW5jdGlvbiBhZGp1c3RNZXJnZUNlbGxzKCRwU2hlZXQsICRwQmVmb3JlLCAkYmVmb3JlQ29sdW1uSW5kZXgsICRwTnVtQ29scywgJGJlZm9yZVJvdywgJHBOdW1Sb3dzKQogICAgewogICAgICAgICRhTWVyZ2VDZWxscyA9ICRwU2hlZXQtPmdldE1lcmdlQ2VsbHMoKTsKICAgICAgICAkYU5ld01lcmdlQ2VsbHMgPSBhcnJheSgpOyAvLyB0aGUgbmV3IGFycmF5IG9mIGFsbCBtZXJnZSBjZWxscwogICAgICAgIGZvcmVhY2ggKCRhTWVyZ2VDZWxscyBhcyAka2V5ID0+ICYkdmFsdWUpIHsKICAgICAgICAgICAgJG5ld1JlZmVyZW5jZSA9ICR0aGlzLT51cGRhdGVDZWxsUmVmZXJlbmNlKCRrZXksICRwQmVmb3JlLCAkcE51bUNvbHMsICRwTnVtUm93cyk7CiAgICAgICAgICAgICRhTmV3TWVyZ2VDZWxsc1skbmV3UmVmZXJlbmNlXSA9ICRuZXdSZWZlcmVuY2U7CiAgICAgICAgfQogICAgICAgICRwU2hlZXQtPnNldE1lcmdlQ2VsbHMoJGFOZXdNZXJnZUNlbGxzKTsgLy8gcmVwbGFjZSB0aGUgbWVyZ2UgY2VsbHMgYXJyYXkKICAgIH0KCiAgICAvKioKICAgICAqIFVwZGF0ZSBwcm90ZWN0ZWQgY2VsbHMgd2hlbiBpbnNlcnRpbmcvZGVsZXRpbmcgcm93cy9jb2x1bW5zCiAgICAgKgogICAgICogQHBhcmFtICAgUEhQRXhjZWxfV29ya3NoZWV0ICAkcFNoZWV0ICAgICAgICAgICAgIFRoZSB3b3Jrc2hlZXQgdGhhdCB3ZSdyZSBlZGl0aW5nCiAgICAgKiBAcGFyYW0gICBzdHJpbmcgICAgICAgICAgICAgICRwQmVmb3JlICAgICAgICAgICAgSW5zZXJ0L0RlbGV0ZSBiZWZvcmUgdGhpcyBjZWxsIGFkZHJlc3MgKGUuZy4gJ0ExJykKICAgICAqIEBwYXJhbSAgIGludGVnZXIgICAgICAgICAgICAgJGJlZm9yZUNvbHVtbkluZGV4ICBJbmRleCBudW1iZXIgb2YgdGhlIGNvbHVtbiB3ZSdyZSBpbnNlcnRpbmcvZGVsZXRpbmcgYmVmb3JlCiAgICAgKiBAcGFyYW0gICBpbnRlZ2VyICAgICAgICAgICAgICRwTnVtQ29scyAgICAgICAgICAgTnVtYmVyIG9mIGNvbHVtbnMgdG8gaW5zZXJ0L2RlbGV0ZSAobmVnYXRpdmUgdmFsdWVzIGluZGljYXRlIGRlbGV0aW9uKQogICAgICogQHBhcmFtICAgaW50ZWdlciAgICAgICAgICAgICAkYmVmb3JlUm93ICAgICAgICAgIE51bWJlciBvZiB0aGUgcm93IHdlJ3JlIGluc2VydGluZy9kZWxldGluZyBiZWZvcmUKICAgICAqIEBwYXJhbSAgIGludGVnZXIgICAgICAgICAgICAgJHBOdW1Sb3dzICAgICAgICAgICBOdW1iZXIgb2Ygcm93cyB0byBpbnNlcnQvZGVsZXRlIChuZWdhdGl2ZSB2YWx1ZXMgaW5kaWNhdGUgZGVsZXRpb24pCiAgICAgKi8KICAgIHByb3RlY3RlZCBmdW5jdGlvbiBhZGp1c3RQcm90ZWN0ZWRDZWxscygkcFNoZWV0LCAkcEJlZm9yZSwgJGJlZm9yZUNvbHVtbkluZGV4LCAkcE51bUNvbHMsICRiZWZvcmVSb3csICRwTnVtUm93cykKICAgIHsKICAgICAgICAkYVByb3RlY3RlZENlbGxzID0gJHBTaGVldC0+Z2V0UHJvdGVjdGVkQ2VsbHMoKTsKICAgICAgICAoJHBOdW1Db2xzID4gMCB8fCAkcE51bVJvd3MgPiAwKSA\\\/PCFcZFwkXCEpJy5wcmVnX3F1b3RlKCRmcm9tU3RyaW5nKS4nKD8hXGQpL2knOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrJGFkanVzdENvdW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gICAgU2VhcmNoIGZvciBjb2x1bW4gcmFuZ2VzIChlLmcuICdTaGVldDEnIUM6RSBvciBDOkUpIHdpdGggb3Igd2l0aG91dCAkIGFic29sdXRlcyAoZS5nLiAkQzpFKQogICAgICAgICAgICAgICAgJG1hdGNoQ291bnQgPSBwcmVnX21hdGNoX2FsbCgnLycuc2VsZjo6UkVGSEVMUEVSX1JFR0VYUF9DT0xSQU5HRS4nL2knLCAnICcuJGZvcm11bGFCbG9jay4nICcsICRtYXRjaGVzLCBQUkVHX1NFVF9PUkRFUik7CiAgICAgICAgICAgICAgICBpZiAoJG1hdGNoQ291bnQgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJG1hdGNoZXMgYXMgJG1hdGNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRmcm9tU3RyaW5nID0gKCRtYXRjaFsyXSA+ICcnKSA\/ICRtYXRjaFsyXS4nIScgOiAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgJGZyb21TdHJpbmcgLj0gJG1hdGNoWzNdLic6Jy4kbWF0Y2hbNF07CiAgICAgICAgICAgICAgICAgICAgICAgICRtb2RpZmllZDMgPSBzdWJzdHIoJHRoaXMtPnVwZGF0ZUNlbGxSZWZlcmVuY2UoJG1hdGNoWzNdLickMScsICRwQmVmb3JlLCAkcE51bUNvbHMsICRwTnVtUm93cyksIDAsIC0yKTsKICAgICAgICAgICAgICAgICAgICAgICAgJG1vZGlmaWVkNCA9IHN1YnN0cigkdGhpcy0+dXBkYXRlQ2VsbFJlZmVyZW5jZSgkbWF0Y2hbNF0uJyQxJywgJHBCZWZvcmUsICRwTnVtQ29scywgJHBOdW1Sb3dzKSwgMCwgLTIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRtYXRjaFszXS4nOicuJG1hdGNoWzRdICE9PSAkbW9kaWZpZWQzLic6Jy4kbW9kaWZpZWQ0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCRtYXRjaFsyXSA9PSAnJykgfHwgKHRyaW0oJG1hdGNoWzJdLCAiJyIpID09ICRzaGVldE5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRvU3RyaW5nID0gKCRtYXRjaFsyXSA+ICcnKSA\/ICRtYXRjaFsyXS4nIScgOiAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdG9TdHJpbmcgLj0gJG1vZGlmaWVkMy4nOicuJG1vZGlmaWVkNDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBNYXggd29ya3NoZWV0IHNpemUgaXMgMSwwNDgsNTc2IHJvd3MgYnkgMTYsMzg0IGNvbHVtbnMgaW4gRXhjZWwgMjAwNywgc28gb3VyIGFkanVzdG1lbnRzIG5lZWQgdG8gYmUgYXQgbGVhc3Qgb25lIGRpZ2l0IG1vcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29sdW1uID0gUEhQRXhjZWxfQ2VsbDo6Y29sdW1uSW5kZXhGcm9tU3RyaW5nKHRyaW0oJG1hdGNoWzNdLCAnJCcpKSArIDEwMDAwMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm93ID0gMTAwMDAwMDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxJbmRleCA9ICRjb2x1bW4uJHJvdzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5ld0NlbGxUb2tlbnNbJGNlbGxJbmRleF0gPSBwcmVnX3F1b3RlKCR0b1N0cmluZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxUb2tlbnNbJGNlbGxJbmRleF0gPSAnLyg\/PCFbQS1aXCRcIV0pJy5wcmVnX3F1b3RlKCRmcm9tU3RyaW5nKS4nKD8hW0EtWl0pL2knOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrJGFkanVzdENvdW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gICAgU2VhcmNoIGZvciBjZWxsIHJhbmdlcyAoZS5nLiAnU2hlZXQxJyFBMzpDNSBvciBBMzpDNSkgd2l0aCBvciB3aXRob3V0ICQgYWJzb2x1dGVzIChlLmcuICRBMTpDJDUpCiAgICAgICAgICAgICAgICAkbWF0Y2hDb3VudCA9IHByZWdfbWF0Y2hfYWxsKCcvJy5zZWxmOjpSRUZIRUxQRVJfUkVHRVhQX0NFTExSQU5HRS4nL2knLCAnICcuJGZvcm11bGFCbG9jay4nICcsICRtYXRjaGVzLCBQUkVHX1NFVF9PUkRFUik7CiAgICAgICAgICAgICAgICBpZiAoJG1hdGNoQ291bnQgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJG1hdGNoZXMgYXMgJG1hdGNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRmcm9tU3RyaW5nID0gKCRtYXRjaFsyXSA+ICcnKSA\/ICRtYXRjaFsyXS4nIScgOiAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgJGZyb21TdHJpbmcgLj0gJG1hdGNoWzNdLic6Jy4kbWF0Y2hbNF07CiAgICAgICAgICAgICAgICAgICAgICAgICRtb2RpZmllZDMgPSAkdGhpcy0+dXBkYXRlQ2VsbFJlZmVyZW5jZSgkbWF0Y2hbM10sICRwQmVmb3JlLCAkcE51bUNvbHMsICRwTnVtUm93cyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRtb2RpZmllZDQgPSAkdGhpcy0+dXBkYXRlQ2VsbFJlZmVyZW5jZSgkbWF0Y2hbNF0sICRwQmVmb3JlLCAkcE51bUNvbHMsICRwTnVtUm93cyk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJG1hdGNoWzNdLiRtYXRjaFs0XSAhPT0gJG1vZGlmaWVkMy4kbW9kaWZpZWQ0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCRtYXRjaFsyXSA9PSAnJykgfHwgKHRyaW0oJG1hdGNoWzJdLCAiJyIpID09ICRzaGVldE5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRvU3RyaW5nID0gKCRtYXRjaFsyXSA+ICcnKSA\/ICRtYXRjaFsyXS4nIScgOiAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdG9TdHJpbmcgLj0gJG1vZGlmaWVkMy4nOicuJG1vZGlmaWVkNDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0KCRjb2x1bW4sICRyb3cpID0gUEhQRXhjZWxfQ2VsbDo6Y29vcmRpbmF0ZUZyb21TdHJpbmcoJG1hdGNoWzNdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBNYXggd29ya3NoZWV0IHNpemUgaXMgMSwwNDgsNTc2IHJvd3MgYnkgMTYsMzg0IGNvbHVtbnMgaW4gRXhjZWwgMjAwNywgc28gb3VyIGFkanVzdG1lbnRzIG5lZWQgdG8gYmUgYXQgbGVhc3Qgb25lIGRpZ2l0IG1vcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29sdW1uID0gUEhQRXhjZWxfQ2VsbDo6Y29sdW1uSW5kZXhGcm9tU3RyaW5nKHRyaW0oJGNvbHVtbiwgJyQnKSkgKyAxMDAwMDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvdyA9IHRyaW0oJHJvdywgJyQnKSArIDEwMDAwMDAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZWxsSW5kZXggPSAkY29sdW1uLiRyb3c7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRuZXdDZWxsVG9rZW5zWyRjZWxsSW5kZXhdID0gcHJlZ19xdW90ZSgkdG9TdHJpbmcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZWxsVG9rZW5zWyRjZWxsSW5kZXhdID0gJy8oPzwhW0EtWl1cJFwhKScucHJlZ19xdW90ZSgkZnJvbVN0cmluZykuJyg\/IVxkKS9pJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArKyRhZGp1c3RDb3VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vICAgIFNlYXJjaCBmb3IgY2VsbCByZWZlcmVuY2VzIChlLmcuICdTaGVldDEnIUEzIG9yIEM1KSB3aXRoIG9yIHdpdGhvdXQgJCBhYnNvbHV0ZXMgKGUuZy4gJEExIG9yIEMkNSkKICAgICAgICAgICAgICAgICRtYXRjaENvdW50ID0gcHJlZ19tYXRjaF9hbGwoJy8nLnNlbGY6OlJFRkhFTFBFUl9SRUdFWFBfQ0VMTFJFRi4nL2knLCAnICcuJGZvcm11bGFCbG9jay4nICcsICRtYXRjaGVzLCBQUkVHX1NFVF9PUkRFUik7CgogICAgICAgICAgICAgICAgaWYgKCRtYXRjaENvdW50ID4gMCkgewogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRtYXRjaGVzIGFzICRtYXRjaCkgewogICAgICAgICAgICAgICAgICAgICAgICAkZnJvbVN0cmluZyA9ICgkbWF0Y2hbMl0gPiAnJykgPyAkbWF0Y2hbMl0uJyEnIDogJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICRmcm9tU3RyaW5nIC49ICRtYXRjaFszXTsKCiAgICAgICAgICAgICAgICAgICAgICAgICRtb2RpZmllZDMgPSAkdGhpcy0+dXBkYXRlQ2VsbFJlZmVyZW5jZSgkbWF0Y2hbM10sICRwQmVmb3JlLCAkcE51bUNvbHMsICRwTnVtUm93cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkbWF0Y2hbM10gIT09ICRtb2RpZmllZDMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJG1hdGNoWzJdID09ICcnKSB8fCAodHJpbSgkbWF0Y2hbMl0sICInIikgPT0gJHNoZWV0TmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdG9TdHJpbmcgPSAoJG1hdGNoWzJdID4gJycpID8gJG1hdGNoWzJdLichJyA6ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0b1N0cmluZyAuPSAkbW9kaWZpZWQzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QoJGNvbHVtbiwgJHJvdykgPSBQSFBFeGNlbF9DZWxsOjpjb29yZGluYXRlRnJvbVN0cmluZygkbWF0Y2hbM10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIE1heCB3b3Jrc2hlZXQgc2l6ZSBpcyAxLDA0OCw1NzYgcm93cyBieSAxNiwzODQgY29sdW1ucyBpbiBFeGNlbCAyMDA3LCBzbyBvdXIgYWRqdXN0bWVudHMgbmVlZCB0byBiZSBhdCBsZWFzdCBvbmUgZGlnaXQgbW9yZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb2x1bW4gPSBQSFBFeGNlbF9DZWxsOjpjb2x1bW5JbmRleEZyb21TdHJpbmcodHJpbSgkY29sdW1uLCAnJCcpKSArIDEwMDAwMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm93ID0gdHJpbSgkcm93LCAnJCcpICsgMTAwMDAwMDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGxJbmRleCA9ICRyb3cgLiAkY29sdW1uOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbmV3Q2VsbFRva2Vuc1skY2VsbEluZGV4XSA9IHByZWdfcXVvdGUoJHRvU3RyaW5nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2VsbFRva2Vuc1skY2VsbEluZGV4XSA9ICcvKD88IVtBLVpcJFwhXSknLnByZWdfcXVvdGUoJGZyb21TdHJpbmcpLicoPyFcZCkvaSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyskYWRqdXN0Q291bnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJGFkanVzdENvdW50ID4gMCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkcE51bUNvbHMgPiAwIHx8ICRwTnVtUm93cyA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAga3Jzb3J0KCRjZWxsVG9rZW5zKTsKICAgICAgICAgICAgICAgICAgICAgICAga3Jzb3J0KCRuZXdDZWxsVG9rZW5zKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBrc29ydCgkY2VsbFRva2Vucyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGtzb3J0KCRuZXdDZWxsVG9rZW5zKTsKICAgICAgICAgICAgICAgICAgICB9ICAgLy8gIFVwZGF0ZSBjZWxsIHJlZmVyZW5jZXMgaW4gdGhlIGZvcm11bGEKICAgICAgICAgICAgICAgICAgICAkZm9ybXVsYUJsb2NrID0gc3RyX3JlcGxhY2UoJ1xcJywgJycsIHByZWdfcmVwbGFjZSgkY2VsbFRva2VucywgJG5ld0NlbGxUb2tlbnMsICRmb3JtdWxhQmxvY2spKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB1bnNldCgkZm9ybXVsYUJsb2NrKTsKCiAgICAgICAgLy8gICAgVGhlbiByZWJ1aWxkIHRoZSBmb3JtdWxhIHN0cmluZwogICAgICAgIHJldHVybiBpbXBsb2RlKCciJywgJGZvcm11bGFCbG9ja3MpOwogICAgfQoKICAgIC8qKgogICAgICogVXBkYXRlIGNlbGwgcmVmZXJlbmNlCiAgICAgKgogICAgICogQHBhcmFtICAgIHN0cmluZyAgICAkcENlbGxSYW5nZSAgICAgICAgICAgIENlbGwgcmFuZ2UKICAgICAqIEBwYXJhbSAgICBpbnQgICAgICAgICRwQmVmb3JlICAgICAgICAgICAgSW5zZXJ0IGJlZm9yZSB0aGlzIG9uZQogICAgICogQHBhcmFtICAgIGludCAgICAgICAgJHBOdW1Db2xzICAgICAgICAgICAgTnVtYmVyIG9mIGNvbHVtbnMgdG8gaW5jcmVtZW50CiAgICAgKiBAcGFyYW0gICAgaW50ICAgICAgICAkcE51bVJvd3MgICAgICAgICAgICBOdW1iZXIgb2Ygcm93cyB0byBpbmNyZW1lbnQKICAgICAqIEByZXR1cm4gICAgc3RyaW5nICAgIFVwZGF0ZWQgY2VsbCByYW5nZQogICAgICogQHRocm93cyAgICBQSFBFeGNlbF9FeGNlcHRpb24KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHVwZGF0ZUNlbGxSZWZlcmVuY2UoJHBDZWxsUmFuZ2UgPSAnQTEnLCAkcEJlZm9yZSA9ICdBMScsICRwTnVtQ29scyA9IDAsICRwTnVtUm93cyA9IDApCiAgICB7CiAgICAgICAgLy8gSXMgaXQgaW4gYW5vdGhlciB3b3Jrc2hlZXQ\/IFdpbGwgbm90IGhhdmUgdG8gdXBkYXRlIGFueXRoaW5nLgogICAgICAgIGlmIChzdHJwb3MoJHBDZWxsUmFuZ2UsICIhIikgIT09IGZhbHNlKSB7CiAgICAgICAgICAgIHJldHVybiAkcENlbGxSYW5nZTsKICAgICAgICAvLyBJcyBpdCBhIHJhbmdlIG9yIGEgc2luZ2xlIGNlbGw\/CiAgICAgICAgfSBlbHNlaWYgKHN0cnBvcygkcENlbGxSYW5nZSwgJzonKSA9PT0gZmFsc2UgJiYgc3RycG9zKCRwQ2VsbFJhbmdlLCAnLCcpID09PSBmYWxzZSkgewogICAgICAgICAgICAvLyBTaW5nbGUgY2VsbAogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnVwZGF0ZVNpbmdsZUNlbGxSZWZlcmVuY2UoJHBDZWxsUmFuZ2UsICRwQmVmb3JlLCAkcE51bUNvbHMsICRwTnVtUm93cyk7CiAgICAgICAgfSBlbHNlaWYgKHN0cnBvcygkcENlbGxSYW5nZSwgJzonKSAhPT0gZmFsc2UgfHwgc3RycG9zKCRwQ2VsbFJhbmdlLCAnLCcpICE9PSBmYWxzZSkgewogICAgICAgICAgICAvLyBSYW5nZQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnVwZGF0ZUNlbGxSYW5nZSgkcENlbGxSYW5nZSwgJHBCZWZvcmUsICRwTnVtQ29scywgJHBOdW1Sb3dzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBSZXR1cm4gb3JpZ2luYWwKICAgICAgICAgICAgcmV0dXJuICRwQ2VsbFJhbmdlOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFVwZGF0ZSBuYW1lZCBmb3JtdWxhcyAoaS5lLiBjb250YWluaW5nIHdvcmtzaGVldCByZWZlcmVuY2VzIC8gbmFtZWQgcmFuZ2VzKQogICAgICoKICAgICAqIEBwYXJhbSBQSFBFeGNlbCAkcFBocEV4Y2VsICAgIE9iamVjdCB0byB1cGRhdGUKICAgICAqIEBwYXJhbSBzdHJpbmcgJG9sZE5hbWUgICAgICAgIE9sZCBuYW1lIChuYW1lIHRvIHJlcGxhY2UpCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuZXdOYW1lICAgICAgICBOZXcgbmFtZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gdXBkYXRlTmFtZWRGb3JtdWxhcyhQSFBFeGNlbCAkcFBocEV4Y2VsLCAkb2xkTmFtZSA9ICcnLCAkbmV3TmFtZSA9ICcnKQogICAgewogICAgICAgIGlmICgkb2xkTmFtZSA9PSAnJykgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBmb3JlYWNoICgkcFBocEV4Y2VsLT5nZXRXb3Jrc2hlZXRJdGVyYXRvcigpIGFzICRzaGVldCkgewogICAgICAgICAgICBmb3JlYWNoICgkc2hlZXQtPmdldENlbGxDb2xsZWN0aW9uKGZhbHNlKSBhcyAkY2VsbElEKSB7CiAgICAgICAgICAgICAgICAkY2VsbCA9ICRzaGVldC0+Z2V0Q2VsbCgkY2VsbElEKTsKICAgICAgICAgICAgICAgIGlmICgoJGNlbGwgIT09IG51bGwpICYmICgkY2VsbC0+Z2V0RGF0YVR5cGUoKSA9PSBQSFBFeGNlbF9DZWxsX0RhdGFUeXBlOjpUWVBFX0ZPUk1VTEEpKSB7CiAgICAgICAgICAgICAgICAgICAgJGZvcm11bGEgPSAkY2VsbC0+Z2V0VmFsdWUoKTsKICAgICAgICAgICAgICAgICAgICBpZiAoc3RycG9zKCRmb3JtdWxhLCAkb2xkTmFtZSkgIT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRmb3JtdWxhID0gc3RyX3JlcGxhY2UoIiciIC4gJG9sZE5hbWUgLiAiJyEiLCAiJyIgLiAkbmV3TmFtZSAuICInISIsICRmb3JtdWxhKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGZvcm11bGEgPSBzdHJfcmVwbGFjZSgkb2xkTmFtZSAuICIhIiwgJG5ld05hbWUgLiAiISIsICRmb3JtdWxhKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGNlbGwtPnNldFZhbHVlRXhwbGljaXQoJGZvcm11bGEsIFBIUEV4Y2VsX0NlbGxfRGF0YVR5cGU6OlRZUEVfRk9STVVMQSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogVXBkYXRlIGNlbGwgcmFuZ2UKICAgICAqCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICRwQ2VsbFJhbmdlICAgICAgICAgICAgQ2VsbCByYW5nZSAgICAoZS5nLiAnQjI6RDQnLCAnQjpDJyBvciAnMjozJykKICAgICAqIEBwYXJhbSAgICBpbnQgICAgICAgICRwQmVmb3JlICAgICAgICAgICAgSW5zZXJ0IGJlZm9yZSB0aGlzIG9uZQogICAgICogQHBhcmFtICAgIGludCAgICAgICAgJHBOdW1Db2xzICAgICAgICAgICAgTnVtYmVyIG9mIGNvbHVtbnMgdG8gaW5jcmVtZW50CiAgICAgKiBAcGFyYW0gICAgaW50ICAgICAgICAkcE51bVJvd3MgICAgICAgICAgICBOdW1iZXIgb2Ygcm93cyB0byBpbmNyZW1lbnQKICAgICAqIEByZXR1cm4gICAgc3RyaW5nICAgIFVwZGF0ZWQgY2VsbCByYW5nZQogICAgICogQHRocm93cyAgICBQSFBFeGNlbF9FeGNlcHRpb24KICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiB1cGRhdGVDZWxsUmFuZ2UoJHBDZWxsUmFuZ2UgPSAnQTE6QTEnLCAkcEJlZm9yZSA9ICdBMScsICRwTnVtQ29scyA9IDAsICRwTnVtUm93cyA9IDApCiAgICB7CiAgICAgICAgaWYgKHN0cnBvcygkcENlbGxSYW5nZSwgJzonKSAhPT0gZmFsc2UgfHwgc3RycG9zKCRwQ2VsbFJhbmdlLCAnLCcpICE9PSBmYWxzZSkgewogICAgICAgICAgICAvLyBVcGRhdGUgcmFuZ2UKICAgICAgICAgICAgJHJhbmdlID0gUEhQRXhjZWxfQ2VsbDo6c3BsaXRSYW5nZSgkcENlbGxSYW5nZSk7CiAgICAgICAgICAgICRpYyA9IGNvdW50KCRyYW5nZSk7CiAgICAgICAgICAgIGZvciAoJGkgPSAwOyAkaSA8ICRpYzsgKyskaSkgewogICAgICAgICAgICAgICAgJGpjID0gY291bnQoJHJhbmdlWyRpXSk7CiAgICAgICAgICAgICAgICBmb3IgKCRqID0gMDsgJGogPCAkamM7ICsrJGopIHsKICAgICAgICAgICAgICAgICAgICBpZiAoY3R5cGVfYWxwaGEoJHJhbmdlWyRpXVskal0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRyID0gUEhQRXhjZWxfQ2VsbDo6Y29vcmRpbmF0ZUZyb21TdHJpbmcoJHRoaXMtPnVwZGF0ZVNpbmdsZUNlbGxSZWZlcmVuY2UoJHJhbmdlWyRpXVskal0uJzEnLCAkcEJlZm9yZSwgJHBOdW1Db2xzLCAkcE51bVJvd3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHJhbmdlWyRpXVskal0gPSAkclswXTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAoY3R5cGVfZGlnaXQoJHJhbmdlWyRpXVskal0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRyID0gUEhQRXhjZWxfQ2VsbDo6Y29vcmRpbmF0ZUZyb21TdHJpbmcoJHRoaXMtPnVwZGF0ZVNpbmdsZUNlbGxSZWZlcmVuY2UoJ0EnLiRyYW5nZVskaV1bJGpdLCAkcEJlZm9yZSwgJHBOdW1Db2xzLCAkcE51bVJvd3MpKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHJhbmdlWyRpXVskal0gPSAkclsxXTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkcmFuZ2VbJGldWyRqXSA9ICR0aGlzLT51cGRhdGVTaW5nbGVDZWxsUmVmZXJlbmNlKCRyYW5nZVskaV1bJGpdLCAkcEJlZm9yZSwgJHBOdW1Db2xzLCAkcE51bVJvd3MpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gUmVjcmVhdGUgcmFuZ2Ugc3RyaW5nCiAgICAgICAgICAgIHJldHVybiBQSFBFeGNlbF9DZWxsOjpidWlsZFJhbmdlKCRyYW5nZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX0V4Y2VwdGlvbigiT25seSBjZWxsIHJhbmdlcyBtYXkgYmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kLiIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFVwZGF0ZSBzaW5nbGUgY2VsbCByZWZlcmVuY2UKICAgICAqCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICRwQ2VsbFJlZmVyZW5jZSAgICAgICAgU2luZ2xlIGNlbGwgcmVmZXJlbmNlCiAgICAgKiBAcGFyYW0gICAgaW50ICAgICAgICAkcEJlZm9yZSAgICAgICAgICAgIEluc2VydCBiZWZvcmUgdGhpcyBvbmUKICAgICAqIEBwYXJhbSAgICBpbnQgICAgICAgICRwTnVtQ29scyAgICAgICAgICAgIE51bWJlciBvZiBjb2x1bW5zIHRvIGluY3JlbWVudAogICAgICogQHBhcmFtICAgIGludCAgICAgICAgJHBOdW1Sb3dzICAgICAgICAgICAgTnVtYmVyIG9mIHJvd3MgdG8gaW5jcmVtZW50CiAgICAgKiBAcmV0dXJuICAgIHN0cmluZyAgICBVcGRhdGVkIGNlbGwgcmVmZXJlbmNlCiAgICAgKiBAdGhyb3dzICAgIFBIUEV4Y2VsX0V4Y2VwdGlvbgogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHVwZGF0ZVNpbmdsZUNlbGxSZWZlcmVuY2UoJHBDZWxsUmVmZXJlbmNlID0gJ0ExJywgJHBCZWZvcmUgPSAnQTEnLCAkcE51bUNvbHMgPSAwLCAkcE51bVJvd3MgPSAwKQogICAgewogICAgICAgIGlmIChzdHJwb3MoJHBDZWxsUmVmZXJlbmNlLCAnOicpID09PSBmYWxzZSAmJiBzdHJwb3MoJHBDZWxsUmVmZXJlbmNlLCAnLCcpID09PSBmYWxzZSkgewogICAgICAgICAgICAvLyBHZXQgY29vcmRpbmF0ZXMgb2YgJHBCZWZvcmUKICAgICAgICAgICAgbGlzdCgkYmVmb3JlQ29sdW1uLCAkYmVmb3JlUm93KSA9IFBIUEV4Y2VsX0NlbGw6OmNvb3JkaW5hdGVGcm9tU3RyaW5nKCRwQmVmb3JlKTsKCiAgICAgICAgICAgIC8vIEdldCBjb29yZGluYXRlcyBvZiAkcENlbGxSZWZlcmVuY2UKICAgICAgICAgICAgbGlzdCgkbmV3Q29sdW1uLCAkbmV3Um93KSA9IFBIUEV4Y2VsX0NlbGw6OmNvb3JkaW5hdGVGcm9tU3RyaW5nKCRwQ2VsbFJlZmVyZW5jZSk7CgogICAgICAgICAgICAvLyBWZXJpZnkgd2hpY2ggcGFydHMgc2hvdWxkIGJlIHVwZGF0ZWQKICAgICAgICAgICAgJHVwZGF0ZUNvbHVtbiA9ICgoJG5ld0NvbHVtbnswfSAhPSAnJCcpICYmICgkYmVmb3JlQ29sdW1uezB9ICE9ICckJykgJiYgKFBIUEV4Y2VsX0NlbGw6OmNvbHVtbkluZGV4RnJvbVN0cmluZygkbmV3Q29sdW1uKSA+PSBQSFBFeGNlbF9DZWxsOjpjb2x1bW5JbmRleEZyb21TdHJpbmcoJGJlZm9yZUNvbHVtbikpKTsKICAgICAgICAgICAgJHVwZGF0ZVJvdyA9ICgoJG5ld1Jvd3swfSAhPSAnJCcpICYmICgkYmVmb3JlUm93ezB9ICE9ICckJykgJiYgJG5ld1JvdyA+PSAkYmVmb3JlUm93KTsKCiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgY29sdW1uIHJlZmVyZW5jZQogICAgICAgICAgICBpZiAoJHVwZGF0ZUNvbHVtbikgewogICAgICAgICAgICAgICAgJG5ld0NvbHVtbiAgICA9IFBIUEV4Y2VsX0NlbGw6OnN0cmluZ0Zyb21Db2x1bW5JbmRleChQSFBFeGNlbF9DZWxsOjpjb2x1bW5JbmRleEZyb21TdHJpbmcoJG5ld0NvbHVtbikgLSAxICsgJHBOdW1Db2xzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyByb3cgcmVmZXJlbmNlCiAgICAgICAgICAgIGlmICgkdXBkYXRlUm93KSB7CiAgICAgICAgICAgICAgICAkbmV3Um93ICAgID0gJG5ld1JvdyArICRwTnVtUm93czsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gUmV0dXJuIG5ldyByZWZlcmVuY2UKICAgICAgICAgICAgcmV0dXJuICRuZXdDb2x1bW4gLiAkbmV3Um93OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9FeGNlcHRpb24oIk9ubHkgc2luZ2xlIGNlbGwgcmVmZXJlbmNlcyBtYXkgYmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kLiIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIF9fY2xvbmUgaW1wbGVtZW50YXRpb24uIENsb25pbmcgc2hvdWxkIG5vdCBiZSBhbGxvd2VkIGluIGEgU2luZ2xldG9uIQogICAgICoKICAgICAqIEB0aHJvd3MgICAgUEhQRXhjZWxfRXhjZXB0aW9uCiAgICAgKi8KICAgIGZpbmFsIHB1YmxpYyBmdW5jdGlvbiBfX2Nsb25lKCkKICAgIHsKICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfRXhjZXB0aW9uKCJDbG9uaW5nIGEgU2luZ2xldG9uIGlzIG5vdCBhbGxvd2VkISIpOwogICAgfQp9Cg==",
    "size": "47539"
}