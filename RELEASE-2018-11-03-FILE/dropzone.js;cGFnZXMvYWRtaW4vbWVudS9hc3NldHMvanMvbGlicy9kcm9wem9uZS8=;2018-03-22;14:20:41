{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/dropzone\/dropzone.js",
    "lastUpdate": "2018-03-22+14:20:41.56",
    "contentFile": "Ci8qCiAqCiAqIE1vcmUgaW5mbyBhdCBbd3d3LmRyb3B6b25lanMuY29tXShodHRwOi8vd3d3LmRyb3B6b25lanMuY29tKQogKgogKiBDb3B5cmlnaHQgKGMpIDIwMTIsIE1hdGlhcyBNZW5vCiAqCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwogKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgogKgogKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgogKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KICoKICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQogKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4KICogVEhFIFNPRlRXQVJFLgogKgogKi8KCihmdW5jdGlvbigpIHsKICB2YXIgRHJvcHpvbmUsIEVtaXR0ZXIsIGNhbWVsaXplLCBjb250ZW50TG9hZGVkLCBkZXRlY3RWZXJ0aWNhbFNxdWFzaCwgZHJhd0ltYWdlSU9TRml4LCBub29wLCB3aXRob3V0LAogICAgX19zbGljZSA9IFtdLnNsaWNlLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgbm9vcCA9IGZ1bmN0aW9uKCkge307CgogIEVtaXR0ZXIgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBFbWl0dGVyKCkge30KCiAgICBFbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gRW1pdHRlci5wcm90b3R5cGUub247CgogICAgRW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbihldmVudCwgZm4pIHsKICAgICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9OwogICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrc1tldmVudF0pIHsKICAgICAgICB0aGlzLl9jYWxsYmFja3NbZXZlbnRdID0gW107CiAgICAgIH0KICAgICAgdGhpcy5fY2FsbGJhY2tzW2V2ZW50XS5wdXNoKGZuKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKICAgIEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MsIGNhbGxiYWNrLCBjYWxsYmFja3MsIGV2ZW50LCBfaSwgX2xlbjsKICAgICAgZXZlbnQgPSBhcmd1bWVudHNbMF0sIGFyZ3MgPSAyIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBfX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IFtdOwogICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307CiAgICAgIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1tldmVudF07CiAgICAgIGlmIChjYWxsYmFja3MpIHsKICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFja3NbX2ldOwogICAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0aGlzOwogICAgfTsKCiAgICBFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IEVtaXR0ZXIucHJvdG90eXBlLm9mZjsKCiAgICBFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBFbWl0dGVyLnByb3RvdHlwZS5vZmY7CgogICAgRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IEVtaXR0ZXIucHJvdG90eXBlLm9mZjsKCiAgICBFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbihldmVudCwgZm4pIHsKICAgICAgdmFyIGNhbGxiYWNrLCBjYWxsYmFja3MsIGksIF9pLCBfbGVuOwogICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrcyB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0ge307CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0KICAgICAgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzW2V2ZW50XTsKICAgICAgaWYgKCFjYWxsYmFja3MpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgewogICAgICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CiAgICAgIGZvciAoaSA9IF9pID0gMCwgX2xlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IF9pIDwgX2xlbjsgaSA9ICsrX2kpIHsKICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXTsKICAgICAgICBpZiAoY2FsbGJhY2sgPT09IGZuKSB7CiAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0aGlzOwogICAgfTsKCiAgICByZXR1cm4gRW1pdHRlcjsKCiAgfSkoKTsKCiAgRHJvcHpvbmUgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICB2YXIgZXh0ZW5kLCByZXNvbHZlT3B0aW9uOwoKICAgIF9fZXh0ZW5kcyhEcm9wem9uZSwgX3N1cGVyKTsKCiAgICBEcm9wem9uZS5wcm90b3R5cGUuRW1pdHRlciA9IEVtaXR0ZXI7CgoKICAgIC8qCiAgICBUaGlzIGlzIGEgbGlzdCBvZiBhbGwgYXZhaWxhYmxlIGV2ZW50cyB5b3UgY2FuIHJlZ2lzdGVyIG9uIGEgZHJvcHpvbmUgb2JqZWN0LgogICAgCiAgICBZb3UgY2FuIHJlZ2lzdGVyIGFuIGV2ZW50IGhhbmRsZXIgbGlrZSB0aGlzOgogICAgCiAgICAgICAgZHJvcHpvbmUub24oImRyYWdFbnRlciIsIGZ1bmN0aW9uKCkgeyB9KTsKICAgICAqLwoKICAgIERyb3B6b25lLnByb3RvdHlwZS5ldmVudHMgPSBbImRyb3AiLCAiZHJhZ3N0YXJ0IiwgImRyYWdlbmQiLCAiZHJhZ2VudGVyIiwgImRyYWdvdmVyIiwgImRyYWdsZWF2ZSIsICJhZGRlZGZpbGUiLCAicmVtb3ZlZGZpbGUiLCAidGh1bWJuYWlsIiwgImVycm9yIiwgImVycm9ybXVsdGlwbGUiLCAicHJvY2Vzc2luZyIsICJwcm9jZXNzaW5nbXVsdGlwbGUiLCAidXBsb2FkcHJvZ3Jlc3MiLCAidG90YWx1cGxvYWRwcm9ncmVzcyIsICJzZW5kaW5nIiwgInNlbmRpbmdtdWx0aXBsZSIsICJzdWNjZXNzIiwgInN1Y2Nlc3NtdWx0aXBsZSIsICJjYW5jZWxlZCIsICJjYW5jZWxlZG11bHRpcGxlIiwgImNvbXBsZXRlIiwgImNvbXBsZXRlbXVsdGlwbGUiLCAicmVzZXQiLCAibWF4ZmlsZXNleGNlZWRlZCIsICJtYXhmaWxlc3JlYWNoZWQiLCAicXVldWVjb21wbGV0ZSJdOwoKICAgIERyb3B6b25lLnByb3RvdHlwZS5kZWZhdWx0T3B0aW9ucyA9IHsKICAgICAgdXJsOiBudWxsLAogICAgICBtZXRob2Q6ICJwb3N0IiwKICAgICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZSwKICAgICAgcGFyYWxsZWxVcGxvYWRzOiAyLAogICAgICB1cGxvYWRNdWx0aXBsZTogZmFsc2UsCiAgICAgIG1heEZpbGVzaXplOiAyNTYsCiAgICAgIHBhcmFtTmFtZTogImZpbGUiLAogICAgICBjcmVhdGVJbWFnZVRodW1ibmFpbHM6IHRydWUsCiAgICAgIG1heFRodW1ibmFpbEZpbGVzaXplOiAxMCwKICAgICAgdGh1bWJuYWlsV2lkdGg6IDEyMCwKICAgICAgdGh1bWJuYWlsSGVpZ2h0OiAxMjAsCiAgICAgIGZpbGVzaXplQmFzZTogMTAwMCwKICAgICAgbWF4RmlsZXM6IG51bGwsCiAgICAgIGZpbGVzaXplQmFzZTogMTAwMCwKICAgICAgcGFyYW1zOiB7fSwKICAgICAgY2xpY2thYmxlOiB0cnVlLAogICAgICBpZ25vcmVIaWRkZW5GaWxlczogdHJ1ZSwKICAgICAgYWNjZXB0ZWRGaWxlczogbnVsbCwKICAgICAgYWNjZXB0ZWRNaW1lVHlwZXM6IG51bGwsCiAgICAgIGF1dG9Qcm9jZXNzUXVldWU6IHRydWUsCiAgICAgIGF1dG9RdWV1ZTogdHJ1ZSwKICAgICAgYWRkUmVtb3ZlTGlua3M6IGZhbHNlLAogICAgICBwcmV2aWV3c0NvbnRhaW5lcjogbnVsbCwKICAgICAgY2FwdHVyZTogbnVsbCwKICAgICAgZGljdERlZmF1bHRNZXNzYWdlOiAiRHJvcCBmaWxlcyBoZXJlIHRvIHVwbG9hZCIsCiAgICAgIGRpY3RGYWxsYmFja01lc3NhZ2U6ICJZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBkcmFnJ24nZHJvcCBmaWxlIHVwbG9hZHMuIiwKICAgICAgZGljdEZhbGxiYWNrVGV4dDogIlBsZWFzZSB1c2UgdGhlIGZhbGxiYWNrIGZvcm0gYmVsb3cgdG8gdXBsb2FkIHlvdXIgZmlsZXMgbGlrZSBpbiB0aGUgb2xkZW4gZGF5cy4iLAogICAgICBkaWN0RmlsZVRvb0JpZzogIkZpbGUgaXMgdG9vIGJpZyAoe3tmaWxlc2l6ZX19TWlCKS4gTWF4IGZpbGVzaXplOiB7e21heEZpbGVzaXplfX1NaUIuIiwKICAgICAgZGljdEludmFsaWRGaWxlVHlwZTogIllvdSBjYW4ndCB1cGxvYWQgZmlsZXMgb2YgdGhpcyB0eXBlLiIsCiAgICAgIGRpY3RSZXNwb25zZUVycm9yOiAiU2VydmVyIHJlc3BvbmRlZCB3aXRoIHt7c3RhdHVzQ29kZX19IGNvZGUuIiwKICAgICAgZGljdENhbmNlbFVwbG9hZDogIkNhbmNlbCB1cGxvYWQiLAogICAgICBkaWN0Q2FuY2VsVXBsb2FkQ29uZmlybWF0aW9uOiAiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNhbmNlbCB0aGlzIHVwbG9hZD8iLAogICAgICBkaWN0UmVtb3ZlRmlsZTogIlJlbW92ZSBmaWxlIiwKICAgICAgZGljdFJlbW92ZUZpbGVDb25maXJtYXRpb246IG51bGwsCiAgICAgIGRpY3RNYXhGaWxlc0V4Y2VlZGVkOiAiWW91IGNhbiBub3QgdXBsb2FkIGFueSBtb3JlIGZpbGVzLiIsCiAgICAgIGFjY2VwdDogZnVuY3Rpb24oZmlsZSwgZG9uZSkgewogICAgICAgIHJldHVybiBkb25lKCk7CiAgICAgIH0sCiAgICAgIGluaXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBub29wOwogICAgICB9LAogICAgICBmb3JjZUZhbGxiYWNrOiBmYWxzZSwKICAgICAgZmFsbGJhY2s6IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBjaGlsZCwgbWVzc2FnZUVsZW1lbnQsIHNwYW4sIF9pLCBfbGVuLCBfcmVmOwogICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSAiIiArIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgKyAiIGR6LWJyb3dzZXItbm90LXN1cHBvcnRlZCI7CiAgICAgICAgX3JlZiA9IHRoaXMuZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZGl2Iik7CiAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgICBjaGlsZCA9IF9yZWZbX2ldOwogICAgICAgICAgaWYgKC8oXnwgKWR6LW1lc3NhZ2UoJHwgKS8udGVzdChjaGlsZC5jbGFzc05hbWUpKSB7CiAgICAgICAgICAgIG1lc3NhZ2VFbGVtZW50ID0gY2hpbGQ7CiAgICAgICAgICAgIGNoaWxkLmNsYXNzTmFtZSA9ICJkei1tZXNzYWdlIjsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICghbWVzc2FnZUVsZW1lbnQpIHsKICAgICAgICAgIG1lc3NhZ2VFbGVtZW50ID0gRHJvcHpvbmUuY3JlYXRlRWxlbWVudCgiPGRpdiBjbGFzcz1cImR6LW1lc3NhZ2VcIj48c3Bhbj48L3NwYW4+PC9kaXY+Iik7CiAgICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQobWVzc2FnZUVsZW1lbnQpOwogICAgICAgIH0KICAgICAgICBzcGFuID0gbWVzc2FnZUVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNwYW4iKVswXTsKICAgICAgICBpZiAoc3BhbikgewogICAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IHRoaXMub3B0aW9ucy5kaWN0RmFsbGJhY2tNZXNzYWdlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZ2V0RmFsbGJhY2tGb3JtKCkpOwogICAgICB9LAogICAgICByZXNpemU6IGZ1bmN0aW9uKGZpbGUpIHsKICAgICAgICB2YXIgaW5mbywgc3JjUmF0aW8sIHRyZ1JhdGlvOwogICAgICAgIGluZm8gPSB7CiAgICAgICAgICBzcmNYOiAwLAogICAgICAgICAgc3JjWTogMCwKICAgICAgICAgIHNyY1dpZHRoOiBmaWxlLndpZHRoLAogICAgICAgICAgc3JjSGVpZ2h0OiBmaWxlLmhlaWdodAogICAgICAgIH07CiAgICAgICAgc3JjUmF0aW8gPSBmaWxlLndpZHRoIC8gZmlsZS5oZWlnaHQ7CiAgICAgICAgaW5mby5vcHRXaWR0aCA9IHRoaXMub3B0aW9ucy50aHVtYm5haWxXaWR0aDsKICAgICAgICBpbmZvLm9wdEhlaWdodCA9IHRoaXMub3B0aW9ucy50aHVtYm5haWxIZWlnaHQ7CiAgICAgICAgaWYgKChpbmZvLm9wdFdpZHRoID09IG51bGwpICYmIChpbmZvLm9wdEhlaWdodCA9PSBudWxsKSkgewogICAgICAgICAgaW5mby5vcHRXaWR0aCA9IGluZm8uc3JjV2lkdGg7CiAgICAgICAgICBpbmZvLm9wdEhlaWdodCA9IGluZm8uc3JjSGVpZ2h0OwogICAgICAgIH0gZWxzZSBpZiAoaW5mby5vcHRXaWR0aCA9PSBudWxsKSB7CiAgICAgICAgICBpbmZvLm9wdFdpZHRoID0gc3JjUmF0aW8gKiBpbmZvLm9wdEhlaWdodDsKICAgICAgICB9IGVsc2UgaWYgKGluZm8ub3B0SGVpZ2h0ID09IG51bGwpIHsKICAgICAgICAgIGluZm8ub3B0SGVpZ2h0ID0gKDEgLyBzcmNSYXRpbykgKiBpbmZvLm9wdFdpZHRoOwogICAgICAgIH0KICAgICAgICB0cmdSYXRpbyA9IGluZm8ub3B0V2lkdGggLyBpbmZvLm9wdEhlaWdodDsKICAgICAgICBpZiAoZmlsZS5oZWlnaHQgPCBpbmZvLm9wdEhlaWdodCB8fCBmaWxlLndpZHRoIDwgaW5mby5vcHRXaWR0aCkgewogICAgICAgICAgaW5mby50cmdIZWlnaHQgPSBpbmZvLnNyY0hlaWdodDsKICAgICAgICAgIGluZm8udHJnV2lkdGggPSBpbmZvLnNyY1dpZHRoOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoc3JjUmF0aW8gPiB0cmdSYXRpbykgewogICAgICAgICAgICBpbmZvLnNyY0hlaWdodCA9IGZpbGUuaGVpZ2h0OwogICAgICAgICAgICBpbmZvLnNyY1dpZHRoID0gaW5mby5zcmNIZWlnaHQgKiB0cmdSYXRpbzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGluZm8uc3JjV2lkdGggPSBmaWxlLndpZHRoOwogICAgICAgICAgICBpbmZvLnNyY0hlaWdodCA9IGluZm8uc3JjV2lkdGggLyB0cmdSYXRpbzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaW5mby5zcmNYID0gKGZpbGUud2lkdGggLSBpbmZvLnNyY1dpZHRoKSAvIDI7CiAgICAgICAgaW5mby5zcmNZID0gKGZpbGUuaGVpZ2h0IC0gaW5mby5zcmNIZWlnaHQpIC8gMjsKICAgICAgICByZXR1cm4gaW5mbzsKICAgICAgfSwKCiAgICAgIC8qCiAgICAgIFRob3NlIGZ1bmN0aW9ucyByZWdpc3RlciB0aGVtc2VsdmVzIHRvIHRoZSBldmVudHMgb24gaW5pdCBhbmQgaGFuZGxlIGFsbAogICAgICB0aGUgdXNlciBpbnRlcmZhY2Ugc3BlY2lmaWMgc3R1ZmYuIE92ZXJ3cml0aW5nIHRoZW0gd29uJ3QgYnJlYWsgdGhlIHVwbG9hZAogICAgICBidXQgY2FuIGJyZWFrIHRoZSB3YXkgaXQncyBkaXNwbGF5ZWQuCiAgICAgIFlvdSBjYW4gb3ZlcndyaXRlIHRoZW0gaWYgeW91IGRvbid0IGxpa2UgdGhlIGRlZmF1bHQgYmVoYXZpb3IuIElmIHlvdSBqdXN0CiAgICAgIHdhbnQgdG8gYWRkIGFuIGFkZGl0aW9uYWwgZXZlbnQgaGFuZGxlciwgcmVnaXN0ZXIgaXQgb24gdGhlIGRyb3B6b25lIG9iamVjdAogICAgICBhbmQgZG9uJ3Qgb3ZlcndyaXRlIHRob3NlIG9wdGlvbnMuCiAgICAgICAqLwogICAgICBkcm9wOiBmdW5jdGlvbihlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCJkei1kcmFnLWhvdmVyIik7CiAgICAgIH0sCiAgICAgIGRyYWdzdGFydDogbm9vcCwKICAgICAgZHJhZ2VuZDogZnVuY3Rpb24oZSkgewogICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgiZHotZHJhZy1ob3ZlciIpOwogICAgICB9LAogICAgICBkcmFnZW50ZXI6IGZ1bmN0aW9uKGUpIHsKICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoImR6LWRyYWctaG92ZXIiKTsKICAgICAgfSwKICAgICAgZHJhZ292ZXI6IGZ1bmN0aW9uKGUpIHsKICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoImR6LWRyYWctaG92ZXIiKTsKICAgICAgfSwKICAgICAgZHJhZ2xlYXZlOiBmdW5jdGlvbihlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCJkei1kcmFnLWhvdmVyIik7CiAgICAgIH0sCiAgICAgIHBhc3RlOiBub29wLAogICAgICByZXNldDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCJkei1zdGFydGVkIik7CiAgICAgIH0sCiAgICAgIGFkZGVkZmlsZTogZnVuY3Rpb24oZmlsZSkgewogICAgICAgIHZhciBub2RlLCByZW1vdmVGaWxlRXZlbnQsIHJlbW92ZUxpbmssIF9pLCBfaiwgX2ssIF9sZW4sIF9sZW4xLCBfbGVuMiwgX3JlZiwgX3JlZjEsIF9yZWYyLCBfcmVzdWx0czsKICAgICAgICBpZiAodGhpcy5lbGVtZW50ID09PSB0aGlzLnByZXZpZXdzQ29udGFpbmVyKSB7CiAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZHotc3RhcnRlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5wcmV2aWV3c0NvbnRhaW5lcikgewogICAgICAgICAgZmlsZS5wcmV2aWV3RWxlbWVudCA9IERyb3B6b25lLmNyZWF0ZUVsZW1lbnQodGhpcy5vcHRpb25zLnByZXZpZXdUZW1wbGF0ZS50cmltKCkpOwogICAgICAgICAgZmlsZS5wcmV2aWV3VGVtcGxhdGUgPSBmaWxlLnByZXZpZXdFbGVtZW50OwogICAgICAgICAgdGhpcy5wcmV2aWV3c0NvbnRhaW5lci5hcHBlbmRDaGlsZChmaWxlLnByZXZpZXdFbGVtZW50KTsKICAgICAgICAgIF9yZWYgPSBmaWxlLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltkYXRhLWR6LW5hbWVdIik7CiAgICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgICAgbm9kZSA9IF9yZWZbX2ldOwogICAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gZmlsZS5uYW1lOwogICAgICAgICAgfQogICAgICAgICAgX3JlZjEgPSBmaWxlLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltkYXRhLWR6LXNpemVdIik7CiAgICAgICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBfcmVmMS5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHsKICAgICAgICAgICAgbm9kZSA9IF9yZWYxW19qXTsKICAgICAgICAgICAgbm9kZS5pbm5lckhUTUwgPSB0aGlzLmZpbGVzaXplKGZpbGUuc2l6ZSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFkZFJlbW92ZUxpbmtzKSB7CiAgICAgICAgICAgIGZpbGUuX3JlbW92ZUxpbmsgPSBEcm9wem9uZS5jcmVhdGVFbGVtZW50KCI8YSBjbGFzcz1cImR6LXJlbW92ZVwiIGhyZWY9XCJqYXZhc2NyaXB0OnVuZGVmaW5lZDtcIiBkYXRhLWR6LXJlbW92ZT4iICsgdGhpcy5vcHRpb25zLmRpY3RSZW1vdmVGaWxlICsgIjwvYT4iKTsKICAgICAgICAgICAgZmlsZS5wcmV2aWV3RWxlbWVudC5hcHBlbmRDaGlsZChmaWxlLl9yZW1vdmVMaW5rKTsKICAgICAgICAgIH0KICAgICAgICAgIHJlbW92ZUZpbGVFdmVudCA9IChmdW5jdGlvbihfdGhpcykgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgIGlmIChmaWxlLnN0YXR1cyA9PT0gRHJvcHpvbmUuVVBMT0FESU5HKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gRHJvcHpvbmUuY29uZmlybShfdGhpcy5vcHRpb25zLmRpY3RDYW5jZWxVcGxvYWRDb25maXJtYXRpb24sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3ZlRmlsZShmaWxlKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kaWN0UmVtb3ZlRmlsZUNvbmZpcm1hdGlvbikgewogICAgICAgICAgICAgICAgICByZXR1cm4gRHJvcHpvbmUuY29uZmlybShfdGhpcy5vcHRpb25zLmRpY3RSZW1vdmVGaWxlQ29uZmlybWF0aW9uLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3ZlRmlsZShmaWxlKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3ZlRmlsZShmaWxlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICB9KSh0aGlzKTsKICAgICAgICAgIF9yZWYyID0gZmlsZS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCJbZGF0YS1kei1yZW1vdmVdIik7CiAgICAgICAgICBfcmVzdWx0cyA9IFtdOwogICAgICAgICAgZm9yIChfayA9IDAsIF9sZW4yID0gX3JlZjIubGVuZ3RoOyBfayA8IF9sZW4yOyBfaysrKSB7CiAgICAgICAgICAgIHJlbW92ZUxpbmsgPSBfcmVmMltfa107CiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2gocmVtb3ZlTGluay5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIHJlbW92ZUZpbGVFdmVudCkpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcmVtb3ZlZGZpbGU6IGZ1bmN0aW9uKGZpbGUpIHsKICAgICAgICB2YXIgX3JlZjsKICAgICAgICBpZiAoZmlsZS5wcmV2aWV3RWxlbWVudCkgewogICAgICAgICAgaWYgKChfcmVmID0gZmlsZS5wcmV2aWV3RWxlbWVudCkgIT0gbnVsbCkgewogICAgICAgICAgICBfcmVmLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZmlsZS5wcmV2aWV3RWxlbWVudCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLl91cGRhdGVNYXhGaWxlc1JlYWNoZWRDbGFzcygpOwogICAgICB9LAogICAgICB0aHVtYm5haWw6IGZ1bmN0aW9uKGZpbGUsIGRhdGFVcmwpIHsKICAgICAgICB2YXIgdGh1bWJuYWlsRWxlbWVudCwgX2ksIF9sZW4sIF9yZWY7CiAgICAgICAgaWYgKGZpbGUucHJldmlld0VsZW1lbnQpIHsKICAgICAgICAgIGZpbGUucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgiZHotZmlsZS1wcmV2aWV3Iik7CiAgICAgICAgICBfcmVmID0gZmlsZS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCJbZGF0YS1kei10aHVtYm5haWxdIik7CiAgICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgICAgdGh1bWJuYWlsRWxlbWVudCA9IF9yZWZbX2ldOwogICAgICAgICAgICB0aHVtYm5haWxFbGVtZW50LmFsdCA9IGZpbGUubmFtZTsKICAgICAgICAgICAgdGh1bWJuYWlsRWxlbWVudC5zcmMgPSBkYXRhVXJsOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoKChmdW5jdGlvbihfdGhpcykgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZpbGUucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZHotaW1hZ2UtcHJldmlldyIpOwogICAgICAgICAgICB9OwogICAgICAgICAgfSkodGhpcykpLCAxKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGVycm9yOiBmdW5jdGlvbihmaWxlLCBtZXNzYWdlKSB7CiAgICAgICAgdmFyIG5vZGUsIF9pLCBfbGVuLCBfcmVmLCBfcmVzdWx0czsKICAgICAgICBpZiAoZmlsZS5wcmV2aWV3RWxlbWVudCkgewogICAgICAgICAgZmlsZS5wcmV2aWV3RWxlbWVudC5jbGFzc0xpc3QuYWRkKCJkei1lcnJvciIpOwogICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSAiU3RyaW5nIiAmJiBtZXNzYWdlLmVycm9yKSB7CiAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLmVycm9yOwogICAgICAgICAgfQogICAgICAgICAgX3JlZiA9IGZpbGUucHJldmlld0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgiW2RhdGEtZHotZXJyb3JtZXNzYWdlXSIpOwogICAgICAgICAgX3Jlc3VsdHMgPSBbXTsKICAgICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgICAgICBub2RlID0gX3JlZltfaV07CiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2gobm9kZS50ZXh0Q29udGVudCA9IG1lc3NhZ2UpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZXJyb3JtdWx0aXBsZTogbm9vcCwKICAgICAgcHJvY2Vzc2luZzogZnVuY3Rpb24oZmlsZSkgewogICAgICAgIGlmIChmaWxlLnByZXZpZXdFbGVtZW50KSB7CiAgICAgICAgICBmaWxlLnByZXZpZXdFbGVtZW50LmNsYXNzTGlzdC5hZGQoImR6LXByb2Nlc3NpbmciKTsKICAgICAgICAgIGlmIChmaWxlLl9yZW1vdmVMaW5rKSB7CiAgICAgICAgICAgIHJldHVybiBmaWxlLl9yZW1vdmVMaW5rLnRleHRDb250ZW50ID0gdGhpcy5vcHRpb25zLmRpY3RDYW5jZWxVcGxvYWQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBwcm9jZXNzaW5nbXVsdGlwbGU6IG5vb3AsCiAgICAgIHVwbG9hZHByb2dyZXNzOiBmdW5jdGlvbihmaWxlLCBwcm9ncmVzcywgYnl0ZXNTZW50KSB7CiAgICAgICAgdmFyIG5vZGUsIF9pLCBfbGVuLCBfcmVmLCBfcmVzdWx0czsKICAgICAgICBpZiAoZmlsZS5wcmV2aWV3RWxlbWVudCkgewogICAgICAgICAgX3JlZiA9IGZpbGUucHJldmlld0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgiW2RhdGEtZHotdXBsb2FkcHJvZ3Jlc3NdIik7CiAgICAgICAgICBfcmVzdWx0cyA9IFtdOwogICAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgICAgIG5vZGUgPSBfcmVmW19pXTsKICAgICAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT09ICdQUk9HUkVTUycpIHsKICAgICAgICAgICAgICBfcmVzdWx0cy5wdXNoKG5vZGUudmFsdWUgPSBwcm9ncmVzcyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgX3Jlc3VsdHMucHVzaChub2RlLnN0eWxlLndpZHRoID0gIiIgKyBwcm9ncmVzcyArICIlIik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBfcmVzdWx0czsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHRvdGFsdXBsb2FkcHJvZ3Jlc3M6IG5vb3AsCiAgICAgIHNlbmRpbmc6IG5vb3AsCiAgICAgIHNlbmRpbmdtdWx0aXBsZTogbm9vcCwKICAgICAgc3VjY2VzczogZnVuY3Rpb24oZmlsZSkgewogICAgICAgIGlmIChmaWxlLnByZXZpZXdFbGVtZW50KSB7CiAgICAgICAgICByZXR1cm4gZmlsZS5wcmV2aWV3RWxlbWVudC5jbGFzc0xpc3QuYWRkKCJkei1zdWNjZXNzIik7CiAgICAgICAgfQogICAgICB9LAogICAgICBzdWNjZXNzbXVsdGlwbGU6IG5vb3AsCiAgICAgIGNhbmNlbGVkOiBmdW5jdGlvbihmaWxlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgiZXJyb3IiLCBmaWxlLCAiVXBsb2FkIGNhbmNlbGVkLiIpOwogICAgICB9LAogICAgICBjYW5jZWxlZG11bHRpcGxlOiBub29wLAogICAgICBjb21wbGV0ZTogZnVuY3Rpb24oZmlsZSkgewogICAgICAgIGlmIChmaWxlLl9yZW1vdmVMaW5rKSB7CiAgICAgICAgICBmaWxlLl9yZW1vdmVMaW5rLnRleHRDb250ZW50ID0gdGhpcy5vcHRpb25zLmRpY3RSZW1vdmVGaWxlOwogICAgICAgIH0KICAgICAgICBpZiAoZmlsZS5wcmV2aWV3RWxlbWVudCkgewogICAgICAgICAgcmV0dXJuIGZpbGUucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZHotY29tcGxldGUiKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGNvbXBsZXRlbXVsdGlwbGU6IG5vb3AsCiAgICAgIG1heGZpbGVzZXhjZWVkZWQ6IG5vb3AsCiAgICAgIG1heGZpbGVzcmVhY2hlZDogbm9vcCwKICAgICAgcXVldWVjb21wbGV0ZTogbm9vcCwKICAgICAgcHJldmlld1RlbXBsYXRlOiAiPGRpdiBjbGFzcz1cImR6LXByZXZpZXcgZHotZmlsZS1wcmV2aWV3XCI+XG4gIDxkaXYgY2xhc3M9XCJkei1pbWFnZVwiPjxpbWcgZGF0YS1kei10aHVtYm5haWwgLz48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImR6LWRldGFpbHNcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZHotc2l6ZVwiPjxzcGFuIGRhdGEtZHotc2l6ZT48L3NwYW4+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImR6LWZpbGVuYW1lXCI+PHNwYW4gZGF0YS1kei1uYW1lPjwvc3Bhbj48L2Rpdj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJkei1wcm9ncmVzc1wiPjxzcGFuIGNsYXNzPVwiZHotdXBsb2FkXCIgZGF0YS1kei11cGxvYWRwcm9ncmVzcz48L3NwYW4+PC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJkei1lcnJvci1tZXNzYWdlXCI+PHNwYW4gZGF0YS1kei1lcnJvcm1lc3NhZ2U+PC9zcGFuPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiZHotc3VjY2Vzcy1tYXJrXCI+XG4gICAgPHN2ZyB3aWR0aD1cIjU0cHhcIiBoZWlnaHQ9XCI1NHB4XCIgdmlld0JveD1cIjAgMCA1NCA1NFwiIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeG1sbnM6c2tldGNoPVwiaHR0cDovL3d3dy5ib2hlbWlhbmNvZGluZy5jb20vc2tldGNoL25zXCI+XG4gICAgICA8dGl0bGU+Q2hlY2s8L3RpdGxlPlxuICAgICAgPGRlZnM+PC9kZWZzPlxuICAgICAgPGcgaWQ9XCJQYWdlLTFcIiBzdHJva2U9XCJub25lXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIHNrZXRjaDp0eXBlPVwiTVNQYWdlXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjMuNSwzMS44NDMxNDU4IEwxNy41ODUyNDE5LDI1LjkyODM4NzcgQzE2LjAyNDgyNTMsMjQuMzY3OTcxMSAxMy40OTEwMjk0LDI0LjM2NjgzNSAxMS45Mjg5MzIyLDI1LjkyODkzMjIgQzEwLjM3MDAxMzYsMjcuNDg3ODUwOCAxMC4zNjY1OTEyLDMwLjAyMzQ0NTUgMTEuOTI4Mzg3NywzMS41ODUyNDE5IEwyMC40MTQ3NTgxLDQwLjA3MTYxMjMgQzIwLjUxMzM5OTksNDAuMTcwMjU0MSAyMC42MTU5MzE1LDQwLjI2MjY2NDkgMjAuNzIxODYxNSw0MC4zNDg4NDM1IEMyMi4yODM1NjY5LDQxLjg3MjU2NTEgMjQuNzk0MjM0LDQxLjg2MjYyMDIgMjYuMzQ2MTU2NCw0MC4zMTA2OTc4IEw0My4zMTA2OTc4LDIzLjM0NjE1NjQgQzQ0Ljg3NzEwMjEsMjEuNzc5NzUyMSA0NC44NzU4MDU3LDE5LjI0ODM4ODcgNDMuMzEzNzA4NSwxNy42ODYyOTE1IEM0MS43NTQ3ODk5LDE2LjEyNzM3MjkgMzkuMjE3NjAzNSwxNi4xMjU1NDIyIDM3LjY1Mzg0MzYsMTcuNjg5MzAyMiBMMjMuNSwzMS44NDMxNDU4IFogTTI3LDUzIEM0MS4zNTk0MDM1LDUzIDUzLDQxLjM1OTQwMzUgNTMsMjcgQzUzLDEyLjY0MDU5NjUgNDEuMzU5NDAzNSwxIDI3LDEgQzEyLjY0MDU5NjUsMSAxLDEyLjY0MDU5NjUgMSwyNyBDMSw0MS4zNTk0MDM1IDEyLjY0MDU5NjUsNTMgMjcsNTMgWlwiIGlkPVwiT3ZhbC0yXCIgc3Ryb2tlLW9wYWNpdHk9XCIwLjE5ODc5NDE1OFwiIHN0cm9rZT1cIiM3NDc0NzRcIiBmaWxsLW9wYWNpdHk9XCIwLjgxNjUxOTQ3NVwiIGZpbGw9XCIjRkZGRkZGXCIgc2tldGNoOnR5cGU9XCJNU1NoYXBlR3JvdXBcIj48L3BhdGg+XG4gICAgICA8L2c+XG4gICAgPC9zdmc+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiZHotZXJyb3ItbWFya1wiPlxuICAgIDxzdmcgd2lkdGg9XCI1NHB4XCIgaGVpZ2h0PVwiNTRweFwiIHZpZXdCb3g9XCIwIDAgNTQgNTRcIiB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhtbG5zOnNrZXRjaD1cImh0dHA6Ly93d3cuYm9oZW1pYW5jb2RpbmcuY29tL3NrZXRjaC9uc1wiPlxuICAgICAgPHRpdGxlPkVycm9yPC90aXRsZT5cbiAgICAgIDxkZWZzPjwvZGVmcz5cbiAgICAgIDxnIGlkPVwiUGFnZS0xXCIgc3Ryb2tlPVwibm9uZVwiIHN0cm9rZS13aWR0aD1cIjFcIiBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBza2V0Y2g6dHlwZT1cIk1TUGFnZVwiPlxuICAgICAgICA8ZyBpZD1cIkNoZWNrLSstT3ZhbC0yXCIgc2tldGNoOnR5cGU9XCJNU0xheWVyR3JvdXBcIiBzdHJva2U9XCIjNzQ3NDc0XCIgc3Ryb2tlLW9wYWNpdHk9XCIwLjE5ODc5NDE1OFwiIGZpbGw9XCIjRkZGRkZGXCIgZmlsbC1vcGFjaXR5PVwiMC44MTY1MTk0NzVcIj5cbiAgICAgICAgICA8cGF0aCBkPVwiTTMyLjY1Njg1NDIsMjkgTDM4LjMxMDY5NzgsMjMuMzQ2MTU2NCBDMzkuODc3MTAyMSwyMS43Nzk3NTIxIDM5Ljg3NTgwNTcsMTkuMjQ4Mzg4NyAzOC4zMTM3MDg1LDE3LjY4NjI5MTUgQzM2Ljc1NDc4OTksMTYuMTI3MzcyOSAzNC4yMTc2MDM1LDE2LjEyNTU0MjIgMzIuNjUzODQzNiwxNy42ODkzMDIyIEwyNywyMy4zNDMxNDU4IEwyMS4zNDYxNTY0LDE3LjY4OTMwMjIgQzE5Ljc4MjM5NjUsMTYuMTI1NTQyMiAxNy4yNDUyMTAxLDE2LjEyNzM3MjkgMTUuNjg2MjkxNSwxNy42ODYyOTE1IEMxNC4xMjQxOTQzLDE5LjI0ODM4ODcgMTQuMTIyODk3OSwyMS43Nzk3NTIxIDE1LjY4OTMwMjIsMjMuMzQ2MTU2NCBMMjEuMzQzMTQ1OCwyOSBMMTUuNjg5MzAyMiwzNC42NTM4NDM2IEMxNC4xMjI4OTc5LDM2LjIyMDI0NzkgMTQuMTI0MTk0MywzOC43NTE2MTEzIDE1LjY4NjI5MTUsNDAuMzEzNzA4NSBDMTcuMjQ1MjEwMSw0MS44NzI2MjcxIDE5Ljc4MjM5NjUsNDEuODc0NDU3OCAyMS4zNDYxNTY0LDQwLjMxMDY5NzggTDI3LDM0LjY1Njg1NDIgTDMyLjY1Mzg0MzYsNDAuMzEwNjk3OCBDMzQuMjE3NjAzNSw0MS44NzQ0NTc4IDM2Ljc1NDc4OTksNDEuODcyNjI3MSAzOC4zMTM3MDg1LDQwLjMxMzcwODUgQzM5Ljg3NTgwNTcsMzguNzUxNjExMyAzOS44NzcxMDIxLDM2LjIyMDI0NzkgMzguMzEwNjk3OCwzNC42NTM4NDM2IEwzMi42NTY4NTQyLDI5IFogTTI3LDUzIEM0MS4zNTk0MDM1LDUzIDUzLDQxLjM1OTQwMzUgNTMsMjcgQzUzLDEyLjY0MDU5NjUgNDEuMzU5NDAzNSwxIDI3LDEgQzEyLjY0MDU5NjUsMSAxLDEyLjY0MDU5NjUgMSwyNyBDMSw0MS4zNTk0MDM1IDEyLjY0MDU5NjUsNTMgMjcsNTMgWlwiIGlkPVwiT3ZhbC0yXCIgc2tldGNoOnR5cGU9XCJNU1NoYXBlR3JvdXBcIj48L3BhdGg+XG4gICAgICAgIDwvZz5cbiAgICAgIDwvZz5cbiAgICA8L3N2Zz5cbiAgPC9kaXY+XG48L2Rpdj4iCiAgICB9OwoKICAgIGV4dGVuZCA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIga2V5LCBvYmplY3QsIG9iamVjdHMsIHRhcmdldCwgdmFsLCBfaSwgX2xlbjsKICAgICAgdGFyZ2V0ID0gYXJndW1lbnRzWzBdLCBvYmplY3RzID0gMiA8PSBhcmd1bWVudHMubGVuZ3RoID8gX19zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBbXTsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBvYmplY3RzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgb2JqZWN0ID0gb2JqZWN0c1tfaV07CiAgICAgICAgZm9yIChrZXkgaW4gb2JqZWN0KSB7CiAgICAgICAgICB2YWwgPSBvYmplY3Rba2V5XTsKICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdGFyZ2V0OwogICAgfTsKCiAgICBmdW5jdGlvbiBEcm9wem9uZShlbGVtZW50LCBvcHRpb25zKSB7CiAgICAgIHZhciBlbGVtZW50T3B0aW9ucywgZmFsbGJhY2ssIF9yZWY7CiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7CiAgICAgIHRoaXMudmVyc2lvbiA9IERyb3B6b25lLnZlcnNpb247CiAgICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMucHJldmlld1RlbXBsYXRlID0gdGhpcy5kZWZhdWx0T3B0aW9ucy5wcmV2aWV3VGVtcGxhdGUucmVwbGFjZSgvXG4qL2csICIiKTsKICAgICAgdGhpcy5jbGlja2FibGVFbGVtZW50cyA9IFtdOwogICAgICB0aGlzLmxpc3RlbmVycyA9IFtdOwogICAgICB0aGlzLmZpbGVzID0gW107CiAgICAgIGlmICh0eXBlb2YgdGhpcy5lbGVtZW50ID09PSAic3RyaW5nIikgewogICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5lbGVtZW50KTsKICAgICAgfQogICAgICBpZiAoISh0aGlzLmVsZW1lbnQgJiYgKHRoaXMuZWxlbWVudC5ub2RlVHlwZSAhPSBudWxsKSkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgZHJvcHpvbmUgZWxlbWVudC4iKTsKICAgICAgfQogICAgICBpZiAodGhpcy5lbGVtZW50LmRyb3B6b25lKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJEcm9wem9uZSBhbHJlYWR5IGF0dGFjaGVkLiIpOwogICAgICB9CiAgICAgIERyb3B6b25lLmluc3RhbmNlcy5wdXNoKHRoaXMpOwogICAgICB0aGlzLmVsZW1lbnQuZHJvcHpvbmUgPSB0aGlzOwogICAgICBlbGVtZW50T3B0aW9ucyA9IChfcmVmID0gRHJvcHpvbmUub3B0aW9uc0ZvckVsZW1lbnQodGhpcy5lbGVtZW50KSkgIT0gbnVsbCA\\\/IF9yZWYgOiAwLCAoX3JlZjEgPSByZXNpemVJbmZvLnNyY1kpICE9IG51bGwgPyBfcmVmMSA6IDAsIHJlc2l6ZUluZm8uc3JjV2lkdGgsIHJlc2l6ZUluZm8uc3JjSGVpZ2h0LCAoX3JlZjIgPSByZXNpemVJbmZvLnRyZ1gpICE9IG51bGwgPyBfcmVmMiA6IDAsIChfcmVmMyA9IHJlc2l6ZUluZm8udHJnWSkgIT0gbnVsbCA\\/IF9yZWYgOiB4aHI7CiAgICAgIHByb2dyZXNzT2JqLm9ucHJvZ3Jlc3MgPSB1cGRhdGVQcm9ncmVzczsKICAgICAgaGVhZGVycyA9IHsKICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICJDYWNoZS1Db250cm9sIjogIm5vLWNhY2hlIiwKICAgICAgICAiWC1SZXF1ZXN0ZWQtV2l0aCI6ICJYTUxIdHRwUmVxdWVzdCIKICAgICAgfTsKICAgICAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJzKSB7CiAgICAgICAgZXh0ZW5kKGhlYWRlcnMsIHRoaXMub3B0aW9ucy5oZWFkZXJzKTsKICAgICAgfQogICAgICBmb3IgKGhlYWRlck5hbWUgaW4gaGVhZGVycykgewogICAgICAgIGhlYWRlclZhbHVlID0gaGVhZGVyc1toZWFkZXJOYW1lXTsKICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXJOYW1lLCBoZWFkZXJWYWx1ZSk7CiAgICAgIH0KICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTsKICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYXJhbXMpIHsKICAgICAgICBfcmVmMSA9IHRoaXMub3B0aW9ucy5wYXJhbXM7CiAgICAgICAgZm9yIChrZXkgaW4gX3JlZjEpIHsKICAgICAgICAgIHZhbHVlID0gX3JlZjFba2V5XTsKICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gZmlsZXMubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7CiAgICAgICAgZmlsZSA9IGZpbGVzW19qXTsKICAgICAgICB0aGlzLmVtaXQoInNlbmRpbmciLCBmaWxlLCB4aHIsIGZvcm1EYXRhKTsKICAgICAgfQogICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZE11bHRpcGxlKSB7CiAgICAgICAgdGhpcy5lbWl0KCJzZW5kaW5nbXVsdGlwbGUiLCBmaWxlcywgeGhyLCBmb3JtRGF0YSk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuZWxlbWVudC50YWdOYW1lID09PSAiRk9STSIpIHsKICAgICAgICBfcmVmMiA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCJpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCwgYnV0dG9uIik7CiAgICAgICAgZm9yIChfayA9IDAsIF9sZW4yID0gX3JlZjIubGVuZ3RoOyBfayA8IF9sZW4yOyBfaysrKSB7CiAgICAgICAgICBpbnB1dCA9IF9yZWYyW19rXTsKICAgICAgICAgIGlucHV0TmFtZSA9IGlucHV0LmdldEF0dHJpYnV0ZSgibmFtZSIpOwogICAgICAgICAgaW5wdXRUeXBlID0gaW5wdXQuZ2V0QXR0cmlidXRlKCJ0eXBlIik7CiAgICAgICAgICBpZiAoaW5wdXQudGFnTmFtZSA9PT0gIlNFTEVDVCIgJiYgaW5wdXQuaGFzQXR0cmlidXRlKCJtdWx0aXBsZSIpKSB7CiAgICAgICAgICAgIF9yZWYzID0gaW5wdXQub3B0aW9uczsKICAgICAgICAgICAgZm9yIChfbCA9IDAsIF9sZW4zID0gX3JlZjMubGVuZ3RoOyBfbCA8IF9sZW4zOyBfbCsrKSB7CiAgICAgICAgICAgICAgb3B0aW9uID0gX3JlZjNbX2xdOwogICAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChpbnB1dE5hbWUsIG9wdGlvbi52YWx1ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKCFpbnB1dFR5cGUgfHwgKChfcmVmNCA9IGlucHV0VHlwZS50b0xvd2VyQ2FzZSgpKSAhPT0gImNoZWNrYm94IiAmJiBfcmVmNCAhPT0gInJhZGlvIikgfHwgaW5wdXQuY2hlY2tlZCkgewogICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoaW5wdXROYW1lLCBpbnB1dC52YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGZvciAoaSA9IF9tID0gMCwgX3JlZjUgPSBmaWxlcy5sZW5ndGggLSAxOyAwIDw9IF9yZWY1ID8gX20gPD0gX3JlZjUgOiBfbSA+PSBfcmVmNTsgaSA9IDAgPD0gX3JlZjUgPyArK19tIDogLS1fbSkgewogICAgICAgIGZvcm1EYXRhLmFwcGVuZCh0aGlzLl9nZXRQYXJhbU5hbWUoaSksIGZpbGVzW2ldLCBmaWxlc1tpXS5uYW1lKTsKICAgICAgfQogICAgICByZXR1cm4geGhyLnNlbmQoZm9ybURhdGEpOwogICAgfTsKCiAgICBEcm9wem9uZS5wcm90b3R5cGUuX2ZpbmlzaGVkID0gZnVuY3Rpb24oZmlsZXMsIHJlc3BvbnNlVGV4dCwgZSkgewogICAgICB2YXIgZmlsZSwgX2ksIF9sZW47CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gZmlsZXMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICBmaWxlID0gZmlsZXNbX2ldOwogICAgICAgIGZpbGUuc3RhdHVzID0gRHJvcHpvbmUuU1VDQ0VTUzsKICAgICAgICB0aGlzLmVtaXQoInN1Y2Nlc3MiLCBmaWxlLCByZXNwb25zZVRleHQsIGUpOwogICAgICAgIHRoaXMuZW1pdCgiY29tcGxldGUiLCBmaWxlKTsKICAgICAgfQogICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZE11bHRpcGxlKSB7CiAgICAgICAgdGhpcy5lbWl0KCJzdWNjZXNzbXVsdGlwbGUiLCBmaWxlcywgcmVzcG9uc2VUZXh0LCBlKTsKICAgICAgICB0aGlzLmVtaXQoImNvbXBsZXRlbXVsdGlwbGUiLCBmaWxlcyk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUHJvY2Vzc1F1ZXVlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1F1ZXVlKCk7CiAgICAgIH0KICAgIH07CgogICAgRHJvcHpvbmUucHJvdG90eXBlLl9lcnJvclByb2Nlc3NpbmcgPSBmdW5jdGlvbihmaWxlcywgbWVzc2FnZSwgeGhyKSB7CiAgICAgIHZhciBmaWxlLCBfaSwgX2xlbjsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBmaWxlcy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIGZpbGUgPSBmaWxlc1tfaV07CiAgICAgICAgZmlsZS5zdGF0dXMgPSBEcm9wem9uZS5FUlJPUjsKICAgICAgICB0aGlzLmVtaXQoImVycm9yIiwgZmlsZSwgbWVzc2FnZSwgeGhyKTsKICAgICAgICB0aGlzLmVtaXQoImNvbXBsZXRlIiwgZmlsZSk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGxvYWRNdWx0aXBsZSkgewogICAgICAgIHRoaXMuZW1pdCgiZXJyb3JtdWx0aXBsZSIsIGZpbGVzLCBtZXNzYWdlLCB4aHIpOwogICAgICAgIHRoaXMuZW1pdCgiY29tcGxldGVtdWx0aXBsZSIsIGZpbGVzKTsKICAgICAgfQogICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Qcm9jZXNzUXVldWUpIHsKICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzUXVldWUoKTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gRHJvcHpvbmU7CgogIH0pKEVtaXR0ZXIpOwoKICBEcm9wem9uZS52ZXJzaW9uID0gIjQuMC4wIjsKCiAgRHJvcHpvbmUub3B0aW9ucyA9IHt9OwoKICBEcm9wem9uZS5vcHRpb25zRm9yRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgiaWQiKSkgewogICAgICByZXR1cm4gRHJvcHpvbmUub3B0aW9uc1tjYW1lbGl6ZShlbGVtZW50LmdldEF0dHJpYnV0ZSgiaWQiKSldOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0KICB9OwoKICBEcm9wem9uZS5pbnN0YW5jZXMgPSBbXTsKCiAgRHJvcHpvbmUuZm9yRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gInN0cmluZyIpIHsKICAgICAgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudCk7CiAgICB9CiAgICBpZiAoKGVsZW1lbnQgIT0gbnVsbCA\/IGVsZW1lbnQuZHJvcHpvbmUgOiB2b2lkIDApID09IG51bGwpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJObyBEcm9wem9uZSBmb3VuZCBmb3IgZ2l2ZW4gZWxlbWVudC4gVGhpcyBpcyBwcm9iYWJseSBiZWNhdXNlIHlvdSdyZSB0cnlpbmcgdG8gYWNjZXNzIGl0IGJlZm9yZSBEcm9wem9uZSBoYWQgdGhlIHRpbWUgdG8gaW5pdGlhbGl6ZS4gVXNlIHRoZSBgaW5pdGAgb3B0aW9uIHRvIHNldHVwIGFueSBhZGRpdGlvbmFsIG9ic2VydmVycyBvbiB5b3VyIERyb3B6b25lLiIpOwogICAgfQogICAgcmV0dXJuIGVsZW1lbnQuZHJvcHpvbmU7CiAgfTsKCiAgRHJvcHpvbmUuYXV0b0Rpc2NvdmVyID0gdHJ1ZTsKCiAgRHJvcHpvbmUuZGlzY292ZXIgPSBmdW5jdGlvbigpIHsKICAgIHZhciBjaGVja0VsZW1lbnRzLCBkcm9wem9uZSwgZHJvcHpvbmVzLCBfaSwgX2xlbiwgX3Jlc3VsdHM7CiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCkgewogICAgICBkcm9wem9uZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIuZHJvcHpvbmUiKTsKICAgIH0gZWxzZSB7CiAgICAgIGRyb3B6b25lcyA9IFtdOwogICAgICBjaGVja0VsZW1lbnRzID0gZnVuY3Rpb24oZWxlbWVudHMpIHsKICAgICAgICB2YXIgZWwsIF9pLCBfbGVuLCBfcmVzdWx0czsKICAgICAgICBfcmVzdWx0cyA9IFtdOwogICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gZWxlbWVudHMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgIGVsID0gZWxlbWVudHNbX2ldOwogICAgICAgICAgaWYgKC8oXnwgKWRyb3B6b25lKCR8ICkvLnRlc3QoZWwuY2xhc3NOYW1lKSkgewogICAgICAgICAgICBfcmVzdWx0cy5wdXNoKGRyb3B6b25lcy5wdXNoKGVsKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfcmVzdWx0cy5wdXNoKHZvaWQgMCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBfcmVzdWx0czsKICAgICAgfTsKICAgICAgY2hlY2tFbGVtZW50cyhkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZGl2IikpOwogICAgICBjaGVja0VsZW1lbnRzKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJmb3JtIikpOwogICAgfQogICAgX3Jlc3VsdHMgPSBbXTsKICAgIGZvciAoX2kgPSAwLCBfbGVuID0gZHJvcHpvbmVzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgIGRyb3B6b25lID0gZHJvcHpvbmVzW19pXTsKICAgICAgaWYgKERyb3B6b25lLm9wdGlvbnNGb3JFbGVtZW50KGRyb3B6b25lKSAhPT0gZmFsc2UpIHsKICAgICAgICBfcmVzdWx0cy5wdXNoKG5ldyBEcm9wem9uZShkcm9wem9uZSkpOwogICAgICB9IGVsc2UgewogICAgICAgIF9yZXN1bHRzLnB1c2godm9pZCAwKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIF9yZXN1bHRzOwogIH07CgogIERyb3B6b25lLmJsYWNrbGlzdGVkQnJvd3NlcnMgPSBbL29wZXJhLipNYWNpbnRvc2guKnZlcnNpb25cLzEyL2ldOwoKICBEcm9wem9uZS5pc0Jyb3dzZXJTdXBwb3J0ZWQgPSBmdW5jdGlvbigpIHsKICAgIHZhciBjYXBhYmxlQnJvd3NlciwgcmVnZXgsIF9pLCBfbGVuLCBfcmVmOwogICAgY2FwYWJsZUJyb3dzZXIgPSB0cnVlOwogICAgaWYgKHdpbmRvdy5GaWxlICYmIHdpbmRvdy5GaWxlUmVhZGVyICYmIHdpbmRvdy5GaWxlTGlzdCAmJiB3aW5kb3cuQmxvYiAmJiB3aW5kb3cuRm9ybURhdGEgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcikgewogICAgICBpZiAoISgiY2xhc3NMaXN0IiBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIikpKSB7CiAgICAgICAgY2FwYWJsZUJyb3dzZXIgPSBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBfcmVmID0gRHJvcHpvbmUuYmxhY2tsaXN0ZWRCcm93c2VyczsKICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgIHJlZ2V4ID0gX3JlZltfaV07CiAgICAgICAgICBpZiAocmVnZXgudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkgewogICAgICAgICAgICBjYXBhYmxlQnJvd3NlciA9IGZhbHNlOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNhcGFibGVCcm93c2VyID0gZmFsc2U7CiAgICB9CiAgICByZXR1cm4gY2FwYWJsZUJyb3dzZXI7CiAgfTsKCiAgd2l0aG91dCA9IGZ1bmN0aW9uKGxpc3QsIHJlamVjdGVkSXRlbSkgewogICAgdmFyIGl0ZW0sIF9pLCBfbGVuLCBfcmVzdWx0czsKICAgIF9yZXN1bHRzID0gW107CiAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGxpc3QubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgaXRlbSA9IGxpc3RbX2ldOwogICAgICBpZiAoaXRlbSAhPT0gcmVqZWN0ZWRJdGVtKSB7CiAgICAgICAgX3Jlc3VsdHMucHVzaChpdGVtKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIF9yZXN1bHRzOwogIH07CgogIGNhbWVsaXplID0gZnVuY3Rpb24oc3RyKSB7CiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcLV9dKFx3KS9nLCBmdW5jdGlvbihtYXRjaCkgewogICAgICByZXR1cm4gbWF0Y2guY2hhckF0KDEpLnRvVXBwZXJDYXNlKCk7CiAgICB9KTsKICB9OwoKICBEcm9wem9uZS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24oc3RyaW5nKSB7CiAgICB2YXIgZGl2OwogICAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICBkaXYuaW5uZXJIVE1MID0gc3RyaW5nOwogICAgcmV0dXJuIGRpdi5jaGlsZE5vZGVzWzBdOwogIH07CgogIERyb3B6b25lLmVsZW1lbnRJbnNpZGUgPSBmdW5jdGlvbihlbGVtZW50LCBjb250YWluZXIpIHsKICAgIGlmIChlbGVtZW50ID09PSBjb250YWluZXIpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICB3aGlsZSAoZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkgewogICAgICBpZiAoZWxlbWVudCA9PT0gY29udGFpbmVyKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9OwoKICBEcm9wem9uZS5nZXRFbGVtZW50ID0gZnVuY3Rpb24oZWwsIG5hbWUpIHsKICAgIHZhciBlbGVtZW50OwogICAgaWYgKHR5cGVvZiBlbCA9PT0gInN0cmluZyIpIHsKICAgICAgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpOwogICAgfSBlbHNlIGlmIChlbC5ub2RlVHlwZSAhPSBudWxsKSB7CiAgICAgIGVsZW1lbnQgPSBlbDsKICAgIH0KICAgIGlmIChlbGVtZW50ID09IG51bGwpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIGAiICsgbmFtZSArICJgIG9wdGlvbiBwcm92aWRlZC4gUGxlYXNlIHByb3ZpZGUgYSBDU1Mgc2VsZWN0b3Igb3IgYSBwbGFpbiBIVE1MIGVsZW1lbnQuIik7CiAgICB9CiAgICByZXR1cm4gZWxlbWVudDsKICB9OwoKICBEcm9wem9uZS5nZXRFbGVtZW50cyA9IGZ1bmN0aW9uKGVscywgbmFtZSkgewogICAgdmFyIGUsIGVsLCBlbGVtZW50cywgX2ksIF9qLCBfbGVuLCBfbGVuMSwgX3JlZjsKICAgIGlmIChlbHMgaW5zdGFuY2VvZiBBcnJheSkgewogICAgICBlbGVtZW50cyA9IFtdOwogICAgICB0cnkgewogICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gZWxzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgICBlbCA9IGVsc1tfaV07CiAgICAgICAgICBlbGVtZW50cy5wdXNoKHRoaXMuZ2V0RWxlbWVudChlbCwgbmFtZSkpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoX2Vycm9yKSB7CiAgICAgICAgZSA9IF9lcnJvcjsKICAgICAgICBlbGVtZW50cyA9IG51bGw7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAodHlwZW9mIGVscyA9PT0gInN0cmluZyIpIHsKICAgICAgZWxlbWVudHMgPSBbXTsKICAgICAgX3JlZiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxzKTsKICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gX3JlZi5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHsKICAgICAgICBlbCA9IF9yZWZbX2pdOwogICAgICAgIGVsZW1lbnRzLnB1c2goZWwpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGVscy5ub2RlVHlwZSAhPSBudWxsKSB7CiAgICAgIGVsZW1lbnRzID0gW2Vsc107CiAgICB9CiAgICBpZiAoISgoZWxlbWVudHMgIT0gbnVsbCkgJiYgZWxlbWVudHMubGVuZ3RoKSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgYCIgKyBuYW1lICsgImAgb3B0aW9uIHByb3ZpZGVkLiBQbGVhc2UgcHJvdmlkZSBhIENTUyBzZWxlY3RvciwgYSBwbGFpbiBIVE1MIGVsZW1lbnQgb3IgYSBsaXN0IG9mIHRob3NlLiIpOwogICAgfQogICAgcmV0dXJuIGVsZW1lbnRzOwogIH07CgogIERyb3B6b25lLmNvbmZpcm0gPSBmdW5jdGlvbihxdWVzdGlvbiwgYWNjZXB0ZWQsIHJlamVjdGVkKSB7CiAgICBpZiAod2luZG93LmNvbmZpcm0ocXVlc3Rpb24pKSB7CiAgICAgIHJldHVybiBhY2NlcHRlZCgpOwogICAgfSBlbHNlIGlmIChyZWplY3RlZCAhPSBudWxsKSB7CiAgICAgIHJldHVybiByZWplY3RlZCgpOwogICAgfQogIH07CgogIERyb3B6b25lLmlzVmFsaWRGaWxlID0gZnVuY3Rpb24oZmlsZSwgYWNjZXB0ZWRGaWxlcykgewogICAgdmFyIGJhc2VNaW1lVHlwZSwgbWltZVR5cGUsIHZhbGlkVHlwZSwgX2ksIF9sZW47CiAgICBpZiAoIWFjY2VwdGVkRmlsZXMpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBhY2NlcHRlZEZpbGVzID0gYWNjZXB0ZWRGaWxlcy5zcGxpdCgiLCIpOwogICAgbWltZVR5cGUgPSBmaWxlLnR5cGU7CiAgICBiYXNlTWltZVR5cGUgPSBtaW1lVHlwZS5yZXBsYWNlKC9cLy4qJC8sICIiKTsKICAgIGZvciAoX2kgPSAwLCBfbGVuID0gYWNjZXB0ZWRGaWxlcy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICB2YWxpZFR5cGUgPSBhY2NlcHRlZEZpbGVzW19pXTsKICAgICAgdmFsaWRUeXBlID0gdmFsaWRUeXBlLnRyaW0oKTsKICAgICAgaWYgKHZhbGlkVHlwZS5jaGFyQXQoMCkgPT09ICIuIikgewogICAgICAgIGlmIChmaWxlLm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHZhbGlkVHlwZS50b0xvd2VyQ2FzZSgpLCBmaWxlLm5hbWUubGVuZ3RoIC0gdmFsaWRUeXBlLmxlbmd0aCkgIT09IC0xKSB7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoL1wvXCokLy50ZXN0KHZhbGlkVHlwZSkpIHsKICAgICAgICBpZiAoYmFzZU1pbWVUeXBlID09PSB2YWxpZFR5cGUucmVwbGFjZSgvXC8uKiQvLCAiIikpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAobWltZVR5cGUgPT09IHZhbGlkVHlwZSkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfTsKCiAgaWYgKHR5cGVvZiBqUXVlcnkgIT09ICJ1bmRlZmluZWQiICYmIGpRdWVyeSAhPT0gbnVsbCkgewogICAgalF1ZXJ5LmZuLmRyb3B6b25lID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBuZXcgRHJvcHpvbmUodGhpcywgb3B0aW9ucyk7CiAgICAgIH0pOwogICAgfTsKICB9CgogIGlmICh0eXBlb2YgbW9kdWxlICE9PSAidW5kZWZpbmVkIiAmJiBtb2R1bGUgIT09IG51bGwpIHsKICAgIG1vZHVsZS5leHBvcnRzID0gRHJvcHpvbmU7CiAgfSBlbHNlIHsKICAgIHdpbmRvdy5Ecm9wem9uZSA9IERyb3B6b25lOwogIH0KCiAgRHJvcHpvbmUuQURERUQgPSAiYWRkZWQiOwoKICBEcm9wem9uZS5RVUVVRUQgPSAicXVldWVkIjsKCiAgRHJvcHpvbmUuQUNDRVBURUQgPSBEcm9wem9uZS5RVUVVRUQ7CgogIERyb3B6b25lLlVQTE9BRElORyA9ICJ1cGxvYWRpbmciOwoKICBEcm9wem9uZS5QUk9DRVNTSU5HID0gRHJvcHpvbmUuVVBMT0FESU5HOwoKICBEcm9wem9uZS5DQU5DRUxFRCA9ICJjYW5jZWxlZCI7CgogIERyb3B6b25lLkVSUk9SID0gImVycm9yIjsKCiAgRHJvcHpvbmUuU1VDQ0VTUyA9ICJzdWNjZXNzIjsKCgogIC8qCiAgCiAgQnVnZml4IGZvciBpT1MgNiBhbmQgNwogIFNvdXJjZTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMTkyOTA5OS9odG1sNS1jYW52YXMtZHJhd2ltYWdlLXJhdGlvLWJ1Zy1pb3MKICBiYXNlZCBvbiB0aGUgd29yayBvZiBodHRwczovL2dpdGh1Yi5jb20vc3RvbWl0YS9pb3MtaW1hZ2VmaWxlLW1lZ2FwaXhlbAogICAqLwoKICBkZXRlY3RWZXJ0aWNhbFNxdWFzaCA9IGZ1bmN0aW9uKGltZykgewogICAgdmFyIGFscGhhLCBjYW52YXMsIGN0eCwgZGF0YSwgZXksIGloLCBpdywgcHksIHJhdGlvLCBzeTsKICAgIGl3ID0gaW1nLm5hdHVyYWxXaWR0aDsKICAgIGloID0gaW1nLm5hdHVyYWxIZWlnaHQ7CiAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgIGNhbnZhcy53aWR0aCA9IDE7CiAgICBjYW52YXMuaGVpZ2h0ID0gaWg7CiAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgiMmQiKTsKICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwKTsKICAgIGRhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIDEsIGloKS5kYXRhOwogICAgc3kgPSAwOwogICAgZXkgPSBpaDsKICAgIHB5ID0gaWg7CiAgICB3aGlsZSAocHkgPiBzeSkgewogICAgICBhbHBoYSA9IGRhdGFbKHB5IC0gMSkgKiA0ICsgM107CiAgICAgIGlmIChhbHBoYSA9PT0gMCkgewogICAgICAgIGV5ID0gcHk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3kgPSBweTsKICAgICAgfQogICAgICBweSA9IChleSArIHN5KSA+PiAxOwogICAgfQogICAgcmF0aW8gPSBweSAvIGloOwogICAgaWYgKHJhdGlvID09PSAwKSB7CiAgICAgIHJldHVybiAxOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHJhdGlvOwogICAgfQogIH07CgogIGRyYXdJbWFnZUlPU0ZpeCA9IGZ1bmN0aW9uKGN0eCwgaW1nLCBzeCwgc3ksIHN3LCBzaCwgZHgsIGR5LCBkdywgZGgpIHsKICAgIHZhciB2ZXJ0U3F1YXNoUmF0aW87CiAgICB2ZXJ0U3F1YXNoUmF0aW8gPSBkZXRlY3RWZXJ0aWNhbFNxdWFzaChpbWcpOwogICAgcmV0dXJuIGN0eC5kcmF3SW1hZ2UoaW1nLCBzeCwgc3ksIHN3LCBzaCwgZHgsIGR5LCBkdywgZGggLyB2ZXJ0U3F1YXNoUmF0aW8pOwogIH07CgoKICAvKgogICAqIGNvbnRlbnRsb2FkZWQuanMKICAgKgogICAqIEF1dGhvcjogRGllZ28gUGVyaW5pIChkaWVnby5wZXJpbmkgYXQgZ21haWwuY29tKQogICAqIFN1bW1hcnk6IGNyb3NzLWJyb3dzZXIgd3JhcHBlciBmb3IgRE9NQ29udGVudExvYWRlZAogICAqIFVwZGF0ZWQ6IDIwMTAxMDIwCiAgICogTGljZW5zZTogTUlUCiAgICogVmVyc2lvbjogMS4yCiAgICoKICAgKiBVUkw6CiAgICogaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0NvbnRlbnRMb2FkZWQvCiAgICogaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0NvbnRlbnRMb2FkZWQvTUlULUxJQ0VOU0UKICAgKi8KCiAgY29udGVudExvYWRlZCA9IGZ1bmN0aW9uKHdpbiwgZm4pIHsKICAgIHZhciBhZGQsIGRvYywgZG9uZSwgaW5pdCwgcG9sbCwgcHJlLCByZW0sIHJvb3QsIHRvcDsKICAgIGRvbmUgPSBmYWxzZTsKICAgIHRvcCA9IHRydWU7CiAgICBkb2MgPSB3aW4uZG9jdW1lbnQ7CiAgICByb290ID0gZG9jLmRvY3VtZW50RWxlbWVudDsKICAgIGFkZCA9IChkb2MuYWRkRXZlbnRMaXN0ZW5lciA\/ICJhZGRFdmVudExpc3RlbmVyIiA6ICJhdHRhY2hFdmVudCIpOwogICAgcmVtID0gKGRvYy5hZGRFdmVudExpc3RlbmVyID8gInJlbW92ZUV2ZW50TGlzdGVuZXIiIDogImRldGFjaEV2ZW50Iik7CiAgICBwcmUgPSAoZG9jLmFkZEV2ZW50TGlzdGVuZXIgPyAiIiA6ICJvbiIpOwogICAgaW5pdCA9IGZ1bmN0aW9uKGUpIHsKICAgICAgaWYgKGUudHlwZSA9PT0gInJlYWR5c3RhdGVjaGFuZ2UiICYmIGRvYy5yZWFkeVN0YXRlICE9PSAiY29tcGxldGUiKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIChlLnR5cGUgPT09ICJsb2FkIiA\/IHdpbiA6IGRvYylbcmVtXShwcmUgKyBlLnR5cGUsIGluaXQsIGZhbHNlKTsKICAgICAgaWYgKCFkb25lICYmIChkb25lID0gdHJ1ZSkpIHsKICAgICAgICByZXR1cm4gZm4uY2FsbCh3aW4sIGUudHlwZSB8fCBlKTsKICAgICAgfQogICAgfTsKICAgIHBvbGwgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGU7CiAgICAgIHRyeSB7CiAgICAgICAgcm9vdC5kb1Njcm9sbCgibGVmdCIpOwogICAgICB9IGNhdGNoIChfZXJyb3IpIHsKICAgICAgICBlID0gX2Vycm9yOwogICAgICAgIHNldFRpbWVvdXQocG9sbCwgNTApOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICByZXR1cm4gaW5pdCgicG9sbCIpOwogICAgfTsKICAgIGlmIChkb2MucmVhZHlTdGF0ZSAhPT0gImNvbXBsZXRlIikgewogICAgICBpZiAoZG9jLmNyZWF0ZUV2ZW50T2JqZWN0ICYmIHJvb3QuZG9TY3JvbGwpIHsKICAgICAgICB0cnkgewogICAgICAgICAgdG9wID0gIXdpbi5mcmFtZUVsZW1lbnQ7CiAgICAgICAgfSBjYXRjaCAoX2Vycm9yKSB7fQogICAgICAgIGlmICh0b3ApIHsKICAgICAgICAgIHBvbGwoKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgZG9jW2FkZF0ocHJlICsgIkRPTUNvbnRlbnRMb2FkZWQiLCBpbml0LCBmYWxzZSk7CiAgICAgIGRvY1thZGRdKHByZSArICJyZWFkeXN0YXRlY2hhbmdlIiwgaW5pdCwgZmFsc2UpOwogICAgICByZXR1cm4gd2luW2FkZF0ocHJlICsgImxvYWQiLCBpbml0LCBmYWxzZSk7CiAgICB9CiAgfTsKCiAgRHJvcHpvbmUuX2F1dG9EaXNjb3ZlckZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7CiAgICBpZiAoRHJvcHpvbmUuYXV0b0Rpc2NvdmVyKSB7CiAgICAgIHJldHVybiBEcm9wem9uZS5kaXNjb3ZlcigpOwogICAgfQogIH07CgogIGNvbnRlbnRMb2FkZWQod2luZG93LCBEcm9wem9uZS5fYXV0b0Rpc2NvdmVyRnVuY3Rpb24pOwoKfSkuY2FsbCh0aGlzKTsK",
    "size": "62820"
}