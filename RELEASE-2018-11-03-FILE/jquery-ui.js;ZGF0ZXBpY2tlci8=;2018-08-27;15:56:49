{
    "namaFile": "datepicker\/jquery-ui.js",
    "lastUpdate": "2018-08-27+15:56:49.97",
    "contentFile": "\/CgoJCQkJLy8gRWxlbWVudCB3aXRoaW4gdGhlIGRvY3VtZW50CgkJCQllbGVtZW50Lm93bmVyRG9jdW1lbnQgOgoKCQkJCS8vIEVsZW1lbnQgaXMgd2luZG93IG9yIGRvY3VtZW50CgkJCQllbGVtZW50LmRvY3VtZW50IHx8IGVsZW1lbnQgKTsKCQkJdGhpcy53aW5kb3cgPSAkKCB0aGlzLmRvY3VtZW50WyAwIF0uZGVmYXVsdFZpZXcgfHwgdGhpcy5kb2N1bWVudFsgMCBdLnBhcmVudFdpbmRvdyApOwoJCX0KCgkJdGhpcy5vcHRpb25zID0gJC53aWRnZXQuZXh0ZW5kKCB7fSwKCQkJdGhpcy5vcHRpb25zLAoJCQl0aGlzLl9nZXRDcmVhdGVPcHRpb25zKCksCgkJCW9wdGlvbnMgKTsKCgkJdGhpcy5fY3JlYXRlKCk7CgoJCWlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkICkgewoJCQl0aGlzLl9zZXRPcHRpb25EaXNhYmxlZCggdGhpcy5vcHRpb25zLmRpc2FibGVkICk7CgkJfQoKCQl0aGlzLl90cmlnZ2VyKCAiY3JlYXRlIiwgbnVsbCwgdGhpcy5fZ2V0Q3JlYXRlRXZlbnREYXRhKCkgKTsKCQl0aGlzLl9pbml0KCk7Cgl9LAoKCV9nZXRDcmVhdGVPcHRpb25zOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4ge307Cgl9LAoKCV9nZXRDcmVhdGVFdmVudERhdGE6ICQubm9vcCwKCglfY3JlYXRlOiAkLm5vb3AsCgoJX2luaXQ6ICQubm9vcCwKCglkZXN0cm95OiBmdW5jdGlvbigpIHsKCQl2YXIgdGhhdCA9IHRoaXM7CgoJCXRoaXMuX2Rlc3Ryb3koKTsKCQkkLmVhY2goIHRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXAsIGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCQl0aGF0Ll9yZW1vdmVDbGFzcyggdmFsdWUsIGtleSApOwoJCX0gKTsKCgkJLy8gV2UgY2FuIHByb2JhYmx5IHJlbW92ZSB0aGUgdW5iaW5kIGNhbGxzIGluIDIuMAoJCS8vIGFsbCBldmVudCBiaW5kaW5ncyBzaG91bGQgZ28gdGhyb3VnaCB0aGlzLl9vbigpCgkJdGhpcy5lbGVtZW50CgkJCS5vZmYoIHRoaXMuZXZlbnROYW1lc3BhY2UgKQoJCQkucmVtb3ZlRGF0YSggdGhpcy53aWRnZXRGdWxsTmFtZSApOwoJCXRoaXMud2lkZ2V0KCkKCQkJLm9mZiggdGhpcy5ldmVudE5hbWVzcGFjZSApCgkJCS5yZW1vdmVBdHRyKCAiYXJpYS1kaXNhYmxlZCIgKTsKCgkJLy8gQ2xlYW4gdXAgZXZlbnRzIGFuZCBzdGF0ZXMKCQl0aGlzLmJpbmRpbmdzLm9mZiggdGhpcy5ldmVudE5hbWVzcGFjZSApOwoJfSwKCglfZGVzdHJveTogJC5ub29wLAoKCXdpZGdldDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZWxlbWVudDsKCX0sCgoJb3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKCQl2YXIgb3B0aW9ucyA9IGtleTsKCQl2YXIgcGFydHM7CgkJdmFyIGN1ck9wdGlvbjsKCQl2YXIgaTsKCgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAwICkgewoKCQkJLy8gRG9uJ3QgcmV0dXJuIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBoYXNoCgkJCXJldHVybiAkLndpZGdldC5leHRlbmQoIHt9LCB0aGlzLm9wdGlvbnMgKTsKCQl9CgoJCWlmICggdHlwZW9mIGtleSA9PT0gInN0cmluZyIgKSB7CgoJCQkvLyBIYW5kbGUgbmVzdGVkIGtleXMsIGUuZy4sICJmb28uYmFyIiA9PiB7IGZvbzogeyBiYXI6IF9fXyB9IH0KCQkJb3B0aW9ucyA9IHt9OwoJCQlwYXJ0cyA9IGtleS5zcGxpdCggIi4iICk7CgkJCWtleSA9IHBhcnRzLnNoaWZ0KCk7CgkJCWlmICggcGFydHMubGVuZ3RoICkgewoJCQkJY3VyT3B0aW9uID0gb3B0aW9uc1sga2V5IF0gPSAkLndpZGdldC5leHRlbmQoIHt9LCB0aGlzLm9wdGlvbnNbIGtleSBdICk7CgkJCQlmb3IgKCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKyApIHsKCQkJCQljdXJPcHRpb25bIHBhcnRzWyBpIF0gXSA9IGN1ck9wdGlvblsgcGFydHNbIGkgXSBdIHx8IHt9OwoJCQkJCWN1ck9wdGlvbiA9IGN1ck9wdGlvblsgcGFydHNbIGkgXSBdOwoJCQkJfQoJCQkJa2V5ID0gcGFydHMucG9wKCk7CgkJCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgKSB7CgkJCQkJcmV0dXJuIGN1ck9wdGlvblsga2V5IF0gPT09IHVuZGVmaW5lZCA\/IG51bGwgOiBjdXJPcHRpb25bIGtleSBdOwoJCQkJfQoJCQkJY3VyT3B0aW9uWyBrZXkgXSA9IHZhbHVlOwoJCQl9IGVsc2UgewoJCQkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAxICkgewoJCQkJCXJldHVybiB0aGlzLm9wdGlvbnNbIGtleSBdID09PSB1bmRlZmluZWQgPyBudWxsIDogdGhpcy5vcHRpb25zWyBrZXkgXTsKCQkJCX0KCQkJCW9wdGlvbnNbIGtleSBdID0gdmFsdWU7CgkJCX0KCQl9CgoJCXRoaXMuX3NldE9wdGlvbnMoIG9wdGlvbnMgKTsKCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCV9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQl2YXIga2V5OwoKCQlmb3IgKCBrZXkgaW4gb3B0aW9ucyApIHsKCQkJdGhpcy5fc2V0T3B0aW9uKCBrZXksIG9wdGlvbnNbIGtleSBdICk7CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJaWYgKCBrZXkgPT09ICJjbGFzc2VzIiApIHsKCQkJdGhpcy5fc2V0T3B0aW9uQ2xhc3NlcyggdmFsdWUgKTsKCQl9CgoJCXRoaXMub3B0aW9uc1sga2V5IF0gPSB2YWx1ZTsKCgkJaWYgKCBrZXkgPT09ICJkaXNhYmxlZCIgKSB7CgkJCXRoaXMuX3NldE9wdGlvbkRpc2FibGVkKCB2YWx1ZSApOwoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9LAoKCV9zZXRPcHRpb25DbGFzc2VzOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJdmFyIGNsYXNzS2V5LCBlbGVtZW50cywgY3VycmVudEVsZW1lbnRzOwoKCQlmb3IgKCBjbGFzc0tleSBpbiB2YWx1ZSApIHsKCQkJY3VycmVudEVsZW1lbnRzID0gdGhpcy5jbGFzc2VzRWxlbWVudExvb2t1cFsgY2xhc3NLZXkgXTsKCQkJaWYgKCB2YWx1ZVsgY2xhc3NLZXkgXSA9PT0gdGhpcy5vcHRpb25zLmNsYXNzZXNbIGNsYXNzS2V5IF0gfHwKCQkJCQkhY3VycmVudEVsZW1lbnRzIHx8CgkJCQkJIWN1cnJlbnRFbGVtZW50cy5sZW5ndGggKSB7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJLy8gV2UgYXJlIGRvaW5nIHRoaXMgdG8gY3JlYXRlIGEgbmV3IGpRdWVyeSBvYmplY3QgYmVjYXVzZSB0aGUgX3JlbW92ZUNsYXNzKCkgY2FsbAoJCQkvLyBvbiB0aGUgbmV4dCBsaW5lIGlzIGdvaW5nIHRvIGRlc3Ryb3kgdGhlIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBlbGVtZW50cyBiZWluZwoJCQkvLyB0cmFja2VkLiBXZSBuZWVkIHRvIHNhdmUgYSBjb3B5IG9mIHRoaXMgY29sbGVjdGlvbiBzbyB0aGF0IHdlIGNhbiBhZGQgdGhlIG5ldyBjbGFzc2VzCgkJCS8vIGJlbG93LgoJCQllbGVtZW50cyA9ICQoIGN1cnJlbnRFbGVtZW50cy5nZXQoKSApOwoJCQl0aGlzLl9yZW1vdmVDbGFzcyggY3VycmVudEVsZW1lbnRzLCBjbGFzc0tleSApOwoKCQkJLy8gV2UgZG9uJ3QgdXNlIF9hZGRDbGFzcygpIGhlcmUsIGJlY2F1c2UgdGhhdCB1c2VzIHRoaXMub3B0aW9ucy5jbGFzc2VzCgkJCS8vIGZvciBnZW5lcmF0aW5nIHRoZSBzdHJpbmcgb2YgY2xhc3Nlcy4gV2Ugd2FudCB0byB1c2UgdGhlIHZhbHVlIHBhc3NlZCBpbiBmcm9tCgkJCS8vIF9zZXRPcHRpb24oKSwgdGhpcyBpcyB0aGUgbmV3IHZhbHVlIG9mIHRoZSBjbGFzc2VzIG9wdGlvbiB3aGljaCB3YXMgcGFzc2VkIHRvCgkJCS8vIF9zZXRPcHRpb24oKS4gV2UgcGFzcyB0aGlzIHZhbHVlIGRpcmVjdGx5IHRvIF9jbGFzc2VzKCkuCgkJCWVsZW1lbnRzLmFkZENsYXNzKCB0aGlzLl9jbGFzc2VzKCB7CgkJCQllbGVtZW50OiBlbGVtZW50cywKCQkJCWtleXM6IGNsYXNzS2V5LAoJCQkJY2xhc3NlczogdmFsdWUsCgkJCQlhZGQ6IHRydWUKCQkJfSApICk7CgkJfQoJfSwKCglfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl0aGlzLl90b2dnbGVDbGFzcyggdGhpcy53aWRnZXQoKSwgdGhpcy53aWRnZXRGdWxsTmFtZSArICItZGlzYWJsZWQiLCBudWxsLCAhIXZhbHVlICk7CgoJCS8vIElmIHRoZSB3aWRnZXQgaXMgYmVjb21pbmcgZGlzYWJsZWQsIHRoZW4gbm90aGluZyBpcyBpbnRlcmFjdGl2ZQoJCWlmICggdmFsdWUgKSB7CgkJCXRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmhvdmVyYWJsZSwgbnVsbCwgInVpLXN0YXRlLWhvdmVyIiApOwoJCQl0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5mb2N1c2FibGUsIG51bGwsICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCQl9Cgl9LAoKCWVuYWJsZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoIHsgZGlzYWJsZWQ6IGZhbHNlIH0gKTsKCX0sCgoJZGlzYWJsZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoIHsgZGlzYWJsZWQ6IHRydWUgfSApOwoJfSwKCglfY2xhc3NlczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJdmFyIGZ1bGwgPSBbXTsKCQl2YXIgdGhhdCA9IHRoaXM7CgoJCW9wdGlvbnMgPSAkLmV4dGVuZCggewoJCQllbGVtZW50OiB0aGlzLmVsZW1lbnQsCgkJCWNsYXNzZXM6IHRoaXMub3B0aW9ucy5jbGFzc2VzIHx8IHt9CgkJfSwgb3B0aW9ucyApOwoKCQlmdW5jdGlvbiBwcm9jZXNzQ2xhc3NTdHJpbmcoIGNsYXNzZXMsIGNoZWNrT3B0aW9uICkgewoJCQl2YXIgY3VycmVudCwgaTsKCQkJZm9yICggaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrICkgewoJCQkJY3VycmVudCA9IHRoYXQuY2xhc3Nlc0VsZW1lbnRMb29rdXBbIGNsYXNzZXNbIGkgXSBdIHx8ICQoKTsKCQkJCWlmICggb3B0aW9ucy5hZGQgKSB7CgkJCQkJY3VycmVudCA9ICQoICQudW5pcXVlKCBjdXJyZW50LmdldCgpLmNvbmNhdCggb3B0aW9ucy5lbGVtZW50LmdldCgpICkgKSApOwoJCQkJfSBlbHNlIHsKCQkJCQljdXJyZW50ID0gJCggY3VycmVudC5ub3QoIG9wdGlvbnMuZWxlbWVudCApLmdldCgpICk7CgkJCQl9CgkJCQl0aGF0LmNsYXNzZXNFbGVtZW50TG9va3VwWyBjbGFzc2VzWyBpIF0gXSA9IGN1cnJlbnQ7CgkJCQlmdWxsLnB1c2goIGNsYXNzZXNbIGkgXSApOwoJCQkJaWYgKCBjaGVja09wdGlvbiAmJiBvcHRpb25zLmNsYXNzZXNbIGNsYXNzZXNbIGkgXSBdICkgewoJCQkJCWZ1bGwucHVzaCggb3B0aW9ucy5jbGFzc2VzWyBjbGFzc2VzWyBpIF0gXSApOwoJCQkJfQoJCQl9CgkJfQoKCQl0aGlzLl9vbiggb3B0aW9ucy5lbGVtZW50LCB7CgkJCSJyZW1vdmUiOiAiX3VudHJhY2tDbGFzc2VzRWxlbWVudCIKCQl9ICk7CgoJCWlmICggb3B0aW9ucy5rZXlzICkgewoJCQlwcm9jZXNzQ2xhc3NTdHJpbmcoIG9wdGlvbnMua2V5cy5tYXRjaCggL1xTKy9nICkgfHwgW10sIHRydWUgKTsKCQl9CgkJaWYgKCBvcHRpb25zLmV4dHJhICkgewoJCQlwcm9jZXNzQ2xhc3NTdHJpbmcoIG9wdGlvbnMuZXh0cmEubWF0Y2goIC9cUysvZyApIHx8IFtdICk7CgkJfQoKCQlyZXR1cm4gZnVsbC5qb2luKCAiICIgKTsKCX0sCgoJX3VudHJhY2tDbGFzc2VzRWxlbWVudDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciB0aGF0ID0gdGhpczsKCQkkLmVhY2goIHRoYXQuY2xhc3Nlc0VsZW1lbnRMb29rdXAsIGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCQlpZiAoICQuaW5BcnJheSggZXZlbnQudGFyZ2V0LCB2YWx1ZSApICE9PSAtMSApIHsKCQkJCXRoYXQuY2xhc3Nlc0VsZW1lbnRMb29rdXBbIGtleSBdID0gJCggdmFsdWUubm90KCBldmVudC50YXJnZXQgKS5nZXQoKSApOwoJCQl9CgkJfSApOwoJfSwKCglfcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCBlbGVtZW50LCBrZXlzLCBleHRyYSApIHsKCQlyZXR1cm4gdGhpcy5fdG9nZ2xlQ2xhc3MoIGVsZW1lbnQsIGtleXMsIGV4dHJhLCBmYWxzZSApOwoJfSwKCglfYWRkQ2xhc3M6IGZ1bmN0aW9uKCBlbGVtZW50LCBrZXlzLCBleHRyYSApIHsKCQlyZXR1cm4gdGhpcy5fdG9nZ2xlQ2xhc3MoIGVsZW1lbnQsIGtleXMsIGV4dHJhLCB0cnVlICk7Cgl9LAoKCV90b2dnbGVDbGFzczogZnVuY3Rpb24oIGVsZW1lbnQsIGtleXMsIGV4dHJhLCBhZGQgKSB7CgkJYWRkID0gKCB0eXBlb2YgYWRkID09PSAiYm9vbGVhbiIgKSA\/IGFkZCA6IGV4dHJhOwoJCXZhciBzaGlmdCA9ICggdHlwZW9mIGVsZW1lbnQgPT09ICJzdHJpbmciIHx8IGVsZW1lbnQgPT09IG51bGwgKSwKCQkJb3B0aW9ucyA9IHsKCQkJCWV4dHJhOiBzaGlmdCA\/IGtleXMgOiBleHRyYSwKCQkJCWtleXM6IHNoaWZ0ID8gZWxlbWVudCA6IGtleXMsCgkJCQllbGVtZW50OiBzaGlmdCA\/IHRoaXMuZWxlbWVudCA6IGVsZW1lbnQsCgkJCQlhZGQ6IGFkZAoJCQl9OwoJCW9wdGlvbnMuZWxlbWVudC50b2dnbGVDbGFzcyggdGhpcy5fY2xhc3Nlcyggb3B0aW9ucyApLCBhZGQgKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJX29uOiBmdW5jdGlvbiggc3VwcHJlc3NEaXNhYmxlZENoZWNrLCBlbGVtZW50LCBoYW5kbGVycyApIHsKCQl2YXIgZGVsZWdhdGVFbGVtZW50OwoJCXZhciBpbnN0YW5jZSA9IHRoaXM7CgoJCS8vIE5vIHN1cHByZXNzRGlzYWJsZWRDaGVjayBmbGFnLCBzaHVmZmxlIGFyZ3VtZW50cwoJCWlmICggdHlwZW9mIHN1cHByZXNzRGlzYWJsZWRDaGVjayAhPT0gImJvb2xlYW4iICkgewoJCQloYW5kbGVycyA9IGVsZW1lbnQ7CgkJCWVsZW1lbnQgPSBzdXBwcmVzc0Rpc2FibGVkQ2hlY2s7CgkJCXN1cHByZXNzRGlzYWJsZWRDaGVjayA9IGZhbHNlOwoJCX0KCgkJLy8gTm8gZWxlbWVudCBhcmd1bWVudCwgc2h1ZmZsZSBhbmQgdXNlIHRoaXMuZWxlbWVudAoJCWlmICggIWhhbmRsZXJzICkgewoJCQloYW5kbGVycyA9IGVsZW1lbnQ7CgkJCWVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7CgkJCWRlbGVnYXRlRWxlbWVudCA9IHRoaXMud2lkZ2V0KCk7CgkJfSBlbHNlIHsKCQkJZWxlbWVudCA9IGRlbGVnYXRlRWxlbWVudCA9ICQoIGVsZW1lbnQgKTsKCQkJdGhpcy5iaW5kaW5ncyA9IHRoaXMuYmluZGluZ3MuYWRkKCBlbGVtZW50ICk7CgkJfQoKCQkkLmVhY2goIGhhbmRsZXJzLCBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXIgKSB7CgkJCWZ1bmN0aW9uIGhhbmRsZXJQcm94eSgpIHsKCgkJCQkvLyBBbGxvdyB3aWRnZXRzIHRvIGN1c3RvbWl6ZSB0aGUgZGlzYWJsZWQgaGFuZGxpbmcKCQkJCS8vIC0gZGlzYWJsZWQgYXMgYW4gYXJyYXkgaW5zdGVhZCBvZiBib29sZWFuCgkJCQkvLyAtIGRpc2FibGVkIGNsYXNzIGFzIG1ldGhvZCBmb3IgZGlzYWJsaW5nIGluZGl2aWR1YWwgcGFydHMKCQkJCWlmICggIXN1cHByZXNzRGlzYWJsZWRDaGVjayAmJgoJCQkJCQkoIGluc3RhbmNlLm9wdGlvbnMuZGlzYWJsZWQgPT09IHRydWUgfHwKCQkJCQkJJCggdGhpcyApLmhhc0NsYXNzKCAidWktc3RhdGUtZGlzYWJsZWQiICkgKSApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgkJCQlyZXR1cm4gKCB0eXBlb2YgaGFuZGxlciA9PT0gInN0cmluZyIgPyBpbnN0YW5jZVsgaGFuZGxlciBdIDogaGFuZGxlciApCgkJCQkJLmFwcGx5KCBpbnN0YW5jZSwgYXJndW1lbnRzICk7CgkJCX0KCgkJCS8vIENvcHkgdGhlIGd1aWQgc28gZGlyZWN0IHVuYmluZGluZyB3b3JrcwoJCQlpZiAoIHR5cGVvZiBoYW5kbGVyICE9PSAic3RyaW5nIiApIHsKCQkJCWhhbmRsZXJQcm94eS5ndWlkID0gaGFuZGxlci5ndWlkID0KCQkJCQloYW5kbGVyLmd1aWQgfHwgaGFuZGxlclByb3h5Lmd1aWQgfHwgJC5ndWlkKys7CgkJCX0KCgkJCXZhciBtYXRjaCA9IGV2ZW50Lm1hdGNoKCAvXihbXHc6LV0qKVxzKiguKikkLyApOwoJCQl2YXIgZXZlbnROYW1lID0gbWF0Y2hbIDEgXSArIGluc3RhbmNlLmV2ZW50TmFtZXNwYWNlOwoJCQl2YXIgc2VsZWN0b3IgPSBtYXRjaFsgMiBdOwoKCQkJaWYgKCBzZWxlY3RvciApIHsKCQkJCWRlbGVnYXRlRWxlbWVudC5vbiggZXZlbnROYW1lLCBzZWxlY3RvciwgaGFuZGxlclByb3h5ICk7CgkJCX0gZWxzZSB7CgkJCQllbGVtZW50Lm9uKCBldmVudE5hbWUsIGhhbmRsZXJQcm94eSApOwoJCQl9CgkJfSApOwoJfSwKCglfb2ZmOiBmdW5jdGlvbiggZWxlbWVudCwgZXZlbnROYW1lICkgewoJCWV2ZW50TmFtZSA9ICggZXZlbnROYW1lIHx8ICIiICkuc3BsaXQoICIgIiApLmpvaW4oIHRoaXMuZXZlbnROYW1lc3BhY2UgKyAiICIgKSArCgkJCXRoaXMuZXZlbnROYW1lc3BhY2U7CgkJZWxlbWVudC5vZmYoIGV2ZW50TmFtZSApLm9mZiggZXZlbnROYW1lICk7CgoJCS8vIENsZWFyIHRoZSBzdGFjayB0byBhdm9pZCBtZW1vcnkgbGVha3MgKCMxMDA1NikKCQl0aGlzLmJpbmRpbmdzID0gJCggdGhpcy5iaW5kaW5ncy5ub3QoIGVsZW1lbnQgKS5nZXQoKSApOwoJCXRoaXMuZm9jdXNhYmxlID0gJCggdGhpcy5mb2N1c2FibGUubm90KCBlbGVtZW50ICkuZ2V0KCkgKTsKCQl0aGlzLmhvdmVyYWJsZSA9ICQoIHRoaXMuaG92ZXJhYmxlLm5vdCggZWxlbWVudCApLmdldCgpICk7Cgl9LAoKCV9kZWxheTogZnVuY3Rpb24oIGhhbmRsZXIsIGRlbGF5ICkgewoJCWZ1bmN0aW9uIGhhbmRsZXJQcm94eSgpIHsKCQkJcmV0dXJuICggdHlwZW9mIGhhbmRsZXIgPT09ICJzdHJpbmciID8gaW5zdGFuY2VbIGhhbmRsZXIgXSA6IGhhbmRsZXIgKQoJCQkJLmFwcGx5KCBpbnN0YW5jZSwgYXJndW1lbnRzICk7CgkJfQoJCXZhciBpbnN0YW5jZSA9IHRoaXM7CgkJcmV0dXJuIHNldFRpbWVvdXQoIGhhbmRsZXJQcm94eSwgZGVsYXkgfHwgMCApOwoJfSwKCglfaG92ZXJhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl0aGlzLmhvdmVyYWJsZSA9IHRoaXMuaG92ZXJhYmxlLmFkZCggZWxlbWVudCApOwoJCXRoaXMuX29uKCBlbGVtZW50LCB7CgkJCW1vdXNlZW50ZXI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCXRoaXMuX2FkZENsYXNzKCAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICksIG51bGwsICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQkJfSwKCQkJbW91c2VsZWF2ZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJdGhpcy5fcmVtb3ZlQ2xhc3MoICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKSwgbnVsbCwgInVpLXN0YXRlLWhvdmVyIiApOwoJCQl9CgkJfSApOwoJfSwKCglfZm9jdXNhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl0aGlzLmZvY3VzYWJsZSA9IHRoaXMuZm9jdXNhYmxlLmFkZCggZWxlbWVudCApOwoJCXRoaXMuX29uKCBlbGVtZW50LCB7CgkJCWZvY3VzaW46IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCXRoaXMuX2FkZENsYXNzKCAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICksIG51bGwsICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCQkJfSwKCQkJZm9jdXNvdXQ6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCXRoaXMuX3JlbW92ZUNsYXNzKCAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICksIG51bGwsICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCQkJfQoJCX0gKTsKCX0sCgoJX3RyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgZGF0YSApIHsKCQl2YXIgcHJvcCwgb3JpZzsKCQl2YXIgY2FsbGJhY2sgPSB0aGlzLm9wdGlvbnNbIHR5cGUgXTsKCgkJZGF0YSA9IGRhdGEgfHwge307CgkJZXZlbnQgPSAkLkV2ZW50KCBldmVudCApOwoJCWV2ZW50LnR5cGUgPSAoIHR5cGUgPT09IHRoaXMud2lkZ2V0RXZlbnRQcmVmaXggPwoJCQl0eXBlIDoKCQkJdGhpcy53aWRnZXRFdmVudFByZWZpeCArIHR5cGUgKS50b0xvd2VyQ2FzZSgpOwoKCQkvLyBUaGUgb3JpZ2luYWwgZXZlbnQgbWF5IGNvbWUgZnJvbSBhbnkgZWxlbWVudAoJCS8vIHNvIHdlIG5lZWQgdG8gcmVzZXQgdGhlIHRhcmdldCBvbiB0aGUgbmV3IGV2ZW50CgkJZXZlbnQudGFyZ2V0ID0gdGhpcy5lbGVtZW50WyAwIF07CgoJCS8vIENvcHkgb3JpZ2luYWwgZXZlbnQgcHJvcGVydGllcyBvdmVyIHRvIHRoZSBuZXcgZXZlbnQKCQlvcmlnID0gZXZlbnQub3JpZ2luYWxFdmVudDsKCQlpZiAoIG9yaWcgKSB7CgkJCWZvciAoIHByb3AgaW4gb3JpZyApIHsKCQkJCWlmICggISggcHJvcCBpbiBldmVudCApICkgewoJCQkJCWV2ZW50WyBwcm9wIF0gPSBvcmlnWyBwcm9wIF07CgkJCQl9CgkJCX0KCQl9CgoJCXRoaXMuZWxlbWVudC50cmlnZ2VyKCBldmVudCwgZGF0YSApOwoJCXJldHVybiAhKCAkLmlzRnVuY3Rpb24oIGNhbGxiYWNrICkgJiYKCQkJY2FsbGJhY2suYXBwbHkoIHRoaXMuZWxlbWVudFsgMCBdLCBbIGV2ZW50IF0uY29uY2F0KCBkYXRhICkgKSA9PT0gZmFsc2UgfHwKCQkJZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKTsKCX0KfTsKCiQuZWFjaCggeyBzaG93OiAiZmFkZUluIiwgaGlkZTogImZhZGVPdXQiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIGRlZmF1bHRFZmZlY3QgKSB7CgkkLldpZGdldC5wcm90b3R5cGVbICJfIiArIG1ldGhvZCBdID0gZnVuY3Rpb24oIGVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrICkgewoJCWlmICggdHlwZW9mIG9wdGlvbnMgPT09ICJzdHJpbmciICkgewoJCQlvcHRpb25zID0geyBlZmZlY3Q6IG9wdGlvbnMgfTsKCQl9CgoJCXZhciBoYXNPcHRpb25zOwoJCXZhciBlZmZlY3ROYW1lID0gIW9wdGlvbnMgPwoJCQltZXRob2QgOgoJCQlvcHRpb25zID09PSB0cnVlIHx8IHR5cGVvZiBvcHRpb25zID09PSAibnVtYmVyIiA\/CgkJCQlkZWZhdWx0RWZmZWN0IDoKCQkJCW9wdGlvbnMuZWZmZWN0IHx8IGRlZmF1bHRFZmZlY3Q7CgoJCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoJCWlmICggdHlwZW9mIG9wdGlvbnMgPT09ICJudW1iZXIiICkgewoJCQlvcHRpb25zID0geyBkdXJhdGlvbjogb3B0aW9ucyB9OwoJCX0KCgkJaGFzT3B0aW9ucyA9ICEkLmlzRW1wdHlPYmplY3QoIG9wdGlvbnMgKTsKCQlvcHRpb25zLmNvbXBsZXRlID0gY2FsbGJhY2s7CgoJCWlmICggb3B0aW9ucy5kZWxheSApIHsKCQkJZWxlbWVudC5kZWxheSggb3B0aW9ucy5kZWxheSApOwoJCX0KCgkJaWYgKCBoYXNPcHRpb25zICYmICQuZWZmZWN0cyAmJiAkLmVmZmVjdHMuZWZmZWN0WyBlZmZlY3ROYW1lIF0gKSB7CgkJCWVsZW1lbnRbIG1ldGhvZCBdKCBvcHRpb25zICk7CgkJfSBlbHNlIGlmICggZWZmZWN0TmFtZSAhPT0gbWV0aG9kICYmIGVsZW1lbnRbIGVmZmVjdE5hbWUgXSApIHsKCQkJZWxlbWVudFsgZWZmZWN0TmFtZSBdKCBvcHRpb25zLmR1cmF0aW9uLCBvcHRpb25zLmVhc2luZywgY2FsbGJhY2sgKTsKCQl9IGVsc2UgewoJCQllbGVtZW50LnF1ZXVlKCBmdW5jdGlvbiggbmV4dCApIHsKCQkJCSQoIHRoaXMgKVsgbWV0aG9kIF0oKTsKCQkJCWlmICggY2FsbGJhY2sgKSB7CgkJCQkJY2FsbGJhY2suY2FsbCggZWxlbWVudFsgMCBdICk7CgkJCQl9CgkJCQluZXh0KCk7CgkJCX0gKTsKCQl9Cgl9Owp9ICk7Cgp2YXIgd2lkZ2V0ID0gJC53aWRnZXQ7CgoKLyohCiAqIGpRdWVyeSBVSSBQb3NpdGlvbiAxLjEyLjEKICogaHR0cDovL2pxdWVyeXVpLmNvbQogKgogKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICoKICogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vcG9zaXRpb24vCiAqLwoKLy8+PmxhYmVsOiBQb3NpdGlvbgovLz4+Z3JvdXA6IENvcmUKLy8+PmRlc2NyaXB0aW9uOiBQb3NpdGlvbnMgZWxlbWVudHMgcmVsYXRpdmUgdG8gb3RoZXIgZWxlbWVudHMuCi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9wb3NpdGlvbi8KLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL3Bvc2l0aW9uLwoKCiggZnVuY3Rpb24oKSB7CnZhciBjYWNoZWRTY3JvbGxiYXJXaWR0aCwKCW1heCA9IE1hdGgubWF4LAoJYWJzID0gTWF0aC5hYnMsCglyaG9yaXpvbnRhbCA9IC9sZWZ0fGNlbnRlcnxyaWdodC8sCglydmVydGljYWwgPSAvdG9wfGNlbnRlcnxib3R0b20vLAoJcm9mZnNldCA9IC9bXCtcLV1cZCsoXC5bXGRdKyk\/JT8vLAoJcnBvc2l0aW9uID0gL15cdysvLAoJcnBlcmNlbnQgPSAvJSQvLAoJX3Bvc2l0aW9uID0gJC5mbi5wb3NpdGlvbjsKCmZ1bmN0aW9uIGdldE9mZnNldHMoIG9mZnNldHMsIHdpZHRoLCBoZWlnaHQgKSB7CglyZXR1cm4gWwoJCXBhcnNlRmxvYXQoIG9mZnNldHNbIDAgXSApICogKCBycGVyY2VudC50ZXN0KCBvZmZzZXRzWyAwIF0gKSA\/IHdpZHRoIC8gMTAwIDogMSApLAoJCXBhcnNlRmxvYXQoIG9mZnNldHNbIDEgXSApICogKCBycGVyY2VudC50ZXN0KCBvZmZzZXRzWyAxIF0gKSA\/IGhlaWdodCAvIDEwMCA6IDEgKQoJXTsKfQoKZnVuY3Rpb24gcGFyc2VDc3MoIGVsZW1lbnQsIHByb3BlcnR5ICkgewoJcmV0dXJuIHBhcnNlSW50KCAkLmNzcyggZWxlbWVudCwgcHJvcGVydHkgKSwgMTAgKSB8fCAwOwp9CgpmdW5jdGlvbiBnZXREaW1lbnNpb25zKCBlbGVtICkgewoJdmFyIHJhdyA9IGVsZW1bIDAgXTsKCWlmICggcmF3Lm5vZGVUeXBlID09PSA5ICkgewoJCXJldHVybiB7CgkJCXdpZHRoOiBlbGVtLndpZHRoKCksCgkJCWhlaWdodDogZWxlbS5oZWlnaHQoKSwKCQkJb2Zmc2V0OiB7IHRvcDogMCwgbGVmdDogMCB9CgkJfTsKCX0KCWlmICggJC5pc1dpbmRvdyggcmF3ICkgKSB7CgkJcmV0dXJuIHsKCQkJd2lkdGg6IGVsZW0ud2lkdGgoKSwKCQkJaGVpZ2h0OiBlbGVtLmhlaWdodCgpLAoJCQlvZmZzZXQ6IHsgdG9wOiBlbGVtLnNjcm9sbFRvcCgpLCBsZWZ0OiBlbGVtLnNjcm9sbExlZnQoKSB9CgkJfTsKCX0KCWlmICggcmF3LnByZXZlbnREZWZhdWx0ICkgewoJCXJldHVybiB7CgkJCXdpZHRoOiAwLAoJCQloZWlnaHQ6IDAsCgkJCW9mZnNldDogeyB0b3A6IHJhdy5wYWdlWSwgbGVmdDogcmF3LnBhZ2VYIH0KCQl9OwoJfQoJcmV0dXJuIHsKCQl3aWR0aDogZWxlbS5vdXRlcldpZHRoKCksCgkJaGVpZ2h0OiBlbGVtLm91dGVySGVpZ2h0KCksCgkJb2Zmc2V0OiBlbGVtLm9mZnNldCgpCgl9Owp9CgokLnBvc2l0aW9uID0gewoJc2Nyb2xsYmFyV2lkdGg6IGZ1bmN0aW9uKCkgewoJCWlmICggY2FjaGVkU2Nyb2xsYmFyV2lkdGggIT09IHVuZGVmaW5lZCApIHsKCQkJcmV0dXJuIGNhY2hlZFNjcm9sbGJhcldpZHRoOwoJCX0KCQl2YXIgdzEsIHcyLAoJCQlkaXYgPSAkKCAiPGRpdiAiICsKCQkJCSJzdHlsZT0nZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDo1MHB4O2hlaWdodDo1MHB4O292ZXJmbG93OmhpZGRlbjsnPiIgKwoJCQkJIjxkaXYgc3R5bGU9J2hlaWdodDoxMDBweDt3aWR0aDphdXRvOyc+PC9kaXY+PC9kaXY+IiApLAoJCQlpbm5lckRpdiA9IGRpdi5jaGlsZHJlbigpWyAwIF07CgoJCSQoICJib2R5IiApLmFwcGVuZCggZGl2ICk7CgkJdzEgPSBpbm5lckRpdi5vZmZzZXRXaWR0aDsKCQlkaXYuY3NzKCAib3ZlcmZsb3ciLCAic2Nyb2xsIiApOwoKCQl3MiA9IGlubmVyRGl2Lm9mZnNldFdpZHRoOwoKCQlpZiAoIHcxID09PSB3MiApIHsKCQkJdzIgPSBkaXZbIDAgXS5jbGllbnRXaWR0aDsKCQl9CgoJCWRpdi5yZW1vdmUoKTsKCgkJcmV0dXJuICggY2FjaGVkU2Nyb2xsYmFyV2lkdGggPSB3MSAtIHcyICk7Cgl9LAoJZ2V0U2Nyb2xsSW5mbzogZnVuY3Rpb24oIHdpdGhpbiApIHsKCQl2YXIgb3ZlcmZsb3dYID0gd2l0aGluLmlzV2luZG93IHx8IHdpdGhpbi5pc0RvY3VtZW50ID8gIiIgOgoJCQkJd2l0aGluLmVsZW1lbnQuY3NzKCAib3ZlcmZsb3cteCIgKSwKCQkJb3ZlcmZsb3dZID0gd2l0aGluLmlzV2luZG93IHx8IHdpdGhpbi5pc0RvY3VtZW50ID8gIiIgOgoJCQkJd2l0aGluLmVsZW1lbnQuY3NzKCAib3ZlcmZsb3cteSIgKSwKCQkJaGFzT3ZlcmZsb3dYID0gb3ZlcmZsb3dYID09PSAic2Nyb2xsIiB8fAoJCQkJKCBvdmVyZmxvd1ggPT09ICJhdXRvIiAmJiB3aXRoaW4ud2lkdGggPCB3aXRoaW4uZWxlbWVudFsgMCBdLnNjcm9sbFdpZHRoICksCgkJCWhhc092ZXJmbG93WSA9IG92ZXJmbG93WSA9PT0gInNjcm9sbCIgfHwKCQkJCSggb3ZlcmZsb3dZID09PSAiYXV0byIgJiYgd2l0aGluLmhlaWdodCA8IHdpdGhpbi5lbGVtZW50WyAwIF0uc2Nyb2xsSGVpZ2h0ICk7CgkJcmV0dXJuIHsKCQkJd2lkdGg6IGhhc092ZXJmbG93WSA\/ICQucG9zaXRpb24uc2Nyb2xsYmFyV2lkdGgoKSA6IDAsCgkJCWhlaWdodDogaGFzT3ZlcmZsb3dYID8gJC5wb3NpdGlvbi5zY3JvbGxiYXJXaWR0aCgpIDogMAoJCX07Cgl9LAoJZ2V0V2l0aGluSW5mbzogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJdmFyIHdpdGhpbkVsZW1lbnQgPSAkKCBlbGVtZW50IHx8IHdpbmRvdyApLAoJCQlpc1dpbmRvdyA9ICQuaXNXaW5kb3coIHdpdGhpbkVsZW1lbnRbIDAgXSApLAoJCQlpc0RvY3VtZW50ID0gISF3aXRoaW5FbGVtZW50WyAwIF0gJiYgd2l0aGluRWxlbWVudFsgMCBdLm5vZGVUeXBlID09PSA5LAoJCQloYXNPZmZzZXQgPSAhaXNXaW5kb3cgJiYgIWlzRG9jdW1lbnQ7CgkJcmV0dXJuIHsKCQkJZWxlbWVudDogd2l0aGluRWxlbWVudCwKCQkJaXNXaW5kb3c6IGlzV2luZG93LAoJCQlpc0RvY3VtZW50OiBpc0RvY3VtZW50LAoJCQlvZmZzZXQ6IGhhc09mZnNldCA\/ICQoIGVsZW1lbnQgKS5vZmZzZXQoKSA6IHsgbGVmdDogMCwgdG9wOiAwIH0sCgkJCXNjcm9sbExlZnQ6IHdpdGhpbkVsZW1lbnQuc2Nyb2xsTGVmdCgpLAoJCQlzY3JvbGxUb3A6IHdpdGhpbkVsZW1lbnQuc2Nyb2xsVG9wKCksCgkJCXdpZHRoOiB3aXRoaW5FbGVtZW50Lm91dGVyV2lkdGgoKSwKCQkJaGVpZ2h0OiB3aXRoaW5FbGVtZW50Lm91dGVySGVpZ2h0KCkKCQl9OwoJfQp9OwoKJC5mbi5wb3NpdGlvbiA9IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJaWYgKCAhb3B0aW9ucyB8fCAhb3B0aW9ucy5vZiApIHsKCQlyZXR1cm4gX3Bvc2l0aW9uLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCX0KCgkvLyBNYWtlIGEgY29weSwgd2UgZG9uJ3Qgd2FudCB0byBtb2RpZnkgYXJndW1lbnRzCglvcHRpb25zID0gJC5leHRlbmQoIHt9LCBvcHRpb25zICk7CgoJdmFyIGF0T2Zmc2V0LCB0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0LCB0YXJnZXRPZmZzZXQsIGJhc2VQb3NpdGlvbiwgZGltZW5zaW9ucywKCQl0YXJnZXQgPSAkKCBvcHRpb25zLm9mICksCgkJd2l0aGluID0gJC5wb3NpdGlvbi5nZXRXaXRoaW5JbmZvKCBvcHRpb25zLndpdGhpbiApLAoJCXNjcm9sbEluZm8gPSAkLnBvc2l0aW9uLmdldFNjcm9sbEluZm8oIHdpdGhpbiApLAoJCWNvbGxpc2lvbiA9ICggb3B0aW9ucy5jb2xsaXNpb24gfHwgImZsaXAiICkuc3BsaXQoICIgIiApLAoJCW9mZnNldHMgPSB7fTsKCglkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyggdGFyZ2V0ICk7CglpZiAoIHRhcmdldFsgMCBdLnByZXZlbnREZWZhdWx0ICkgewoKCQkvLyBGb3JjZSBsZWZ0IHRvcCB0byBhbGxvdyBmbGlwcGluZwoJCW9wdGlvbnMuYXQgPSAibGVmdCB0b3AiOwoJfQoJdGFyZ2V0V2lkdGggPSBkaW1lbnNpb25zLndpZHRoOwoJdGFyZ2V0SGVpZ2h0ID0gZGltZW5zaW9ucy5oZWlnaHQ7Cgl0YXJnZXRPZmZzZXQgPSBkaW1lbnNpb25zLm9mZnNldDsKCgkvLyBDbG9uZSB0byByZXVzZSBvcmlnaW5hbCB0YXJnZXRPZmZzZXQgbGF0ZXIKCWJhc2VQb3NpdGlvbiA9ICQuZXh0ZW5kKCB7fSwgdGFyZ2V0T2Zmc2V0ICk7CgoJLy8gRm9yY2UgbXkgYW5kIGF0IHRvIGhhdmUgdmFsaWQgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgcG9zaXRpb25zCgkvLyBpZiBhIHZhbHVlIGlzIG1pc3Npbmcgb3IgaW52YWxpZCwgaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2VudGVyCgkkLmVhY2goIFsgIm15IiwgImF0IiBdLCBmdW5jdGlvbigpIHsKCQl2YXIgcG9zID0gKCBvcHRpb25zWyB0aGlzIF0gfHwgIiIgKS5zcGxpdCggIiAiICksCgkJCWhvcml6b250YWxPZmZzZXQsCgkJCXZlcnRpY2FsT2Zmc2V0OwoKCQlpZiAoIHBvcy5sZW5ndGggPT09IDEgKSB7CgkJCXBvcyA9IHJob3Jpem9udGFsLnRlc3QoIHBvc1sgMCBdICkgPwoJCQkJcG9zLmNvbmNhdCggWyAiY2VudGVyIiBdICkgOgoJCQkJcnZlcnRpY2FsLnRlc3QoIHBvc1sgMCBdICkgPwoJCQkJCVsgImNlbnRlciIgXS5jb25jYXQoIHBvcyApIDoKCQkJCQlbICJjZW50ZXIiLCAiY2VudGVyIiBdOwoJCX0KCQlwb3NbIDAgXSA9IHJob3Jpem9udGFsLnRlc3QoIHBvc1sgMCBdICkgPyBwb3NbIDAgXSA6ICJjZW50ZXIiOwoJCXBvc1sgMSBdID0gcnZlcnRpY2FsLnRlc3QoIHBvc1sgMSBdICkgPyBwb3NbIDEgXSA6ICJjZW50ZXIiOwoKCQkvLyBDYWxjdWxhdGUgb2Zmc2V0cwoJCWhvcml6b250YWxPZmZzZXQgPSByb2Zmc2V0LmV4ZWMoIHBvc1sgMCBdICk7CgkJdmVydGljYWxPZmZzZXQgPSByb2Zmc2V0LmV4ZWMoIHBvc1sgMSBdICk7CgkJb2Zmc2V0c1sgdGhpcyBdID0gWwoJCQlob3Jpem9udGFsT2Zmc2V0ID8gaG9yaXpvbnRhbE9mZnNldFsgMCBdIDogMCwKCQkJdmVydGljYWxPZmZzZXQgPyB2ZXJ0aWNhbE9mZnNldFsgMCBdIDogMAoJCV07CgoJCS8vIFJlZHVjZSB0byBqdXN0IHRoZSBwb3NpdGlvbnMgd2l0aG91dCB0aGUgb2Zmc2V0cwoJCW9wdGlvbnNbIHRoaXMgXSA9IFsKCQkJcnBvc2l0aW9uLmV4ZWMoIHBvc1sgMCBdIClbIDAgXSwKCQkJcnBvc2l0aW9uLmV4ZWMoIHBvc1sgMSBdIClbIDAgXQoJCV07Cgl9ICk7CgoJLy8gTm9ybWFsaXplIGNvbGxpc2lvbiBvcHRpb24KCWlmICggY29sbGlzaW9uLmxlbmd0aCA9PT0gMSApIHsKCQljb2xsaXNpb25bIDEgXSA9IGNvbGxpc2lvblsgMCBdOwoJfQoKCWlmICggb3B0aW9ucy5hdFsgMCBdID09PSAicmlnaHQiICkgewoJCWJhc2VQb3NpdGlvbi5sZWZ0ICs9IHRhcmdldFdpZHRoOwoJfSBlbHNlIGlmICggb3B0aW9ucy5hdFsgMCBdID09PSAiY2VudGVyIiApIHsKCQliYXNlUG9zaXRpb24ubGVmdCArPSB0YXJnZXRXaWR0aCAvIDI7Cgl9CgoJaWYgKCBvcHRpb25zLmF0WyAxIF0gPT09ICJib3R0b20iICkgewoJCWJhc2VQb3NpdGlvbi50b3AgKz0gdGFyZ2V0SGVpZ2h0OwoJfSBlbHNlIGlmICggb3B0aW9ucy5hdFsgMSBdID09PSAiY2VudGVyIiApIHsKCQliYXNlUG9zaXRpb24udG9wICs9IHRhcmdldEhlaWdodCAvIDI7Cgl9CgoJYXRPZmZzZXQgPSBnZXRPZmZzZXRzKCBvZmZzZXRzLmF0LCB0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0ICk7CgliYXNlUG9zaXRpb24ubGVmdCArPSBhdE9mZnNldFsgMCBdOwoJYmFzZVBvc2l0aW9uLnRvcCArPSBhdE9mZnNldFsgMSBdOwoKCXJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkgewoJCXZhciBjb2xsaXNpb25Qb3NpdGlvbiwgdXNpbmcsCgkJCWVsZW0gPSAkKCB0aGlzICksCgkJCWVsZW1XaWR0aCA9IGVsZW0ub3V0ZXJXaWR0aCgpLAoJCQllbGVtSGVpZ2h0ID0gZWxlbS5vdXRlckhlaWdodCgpLAoJCQltYXJnaW5MZWZ0ID0gcGFyc2VDc3MoIHRoaXMsICJtYXJnaW5MZWZ0IiApLAoJCQltYXJnaW5Ub3AgPSBwYXJzZUNzcyggdGhpcywgIm1hcmdpblRvcCIgKSwKCQkJY29sbGlzaW9uV2lkdGggPSBlbGVtV2lkdGggKyBtYXJnaW5MZWZ0ICsgcGFyc2VDc3MoIHRoaXMsICJtYXJnaW5SaWdodCIgKSArCgkJCQlzY3JvbGxJbmZvLndpZHRoLAoJCQljb2xsaXNpb25IZWlnaHQgPSBlbGVtSGVpZ2h0ICsgbWFyZ2luVG9wICsgcGFyc2VDc3MoIHRoaXMsICJtYXJnaW5Cb3R0b20iICkgKwoJCQkJc2Nyb2xsSW5mby5oZWlnaHQsCgkJCXBvc2l0aW9uID0gJC5leHRlbmQoIHt9LCBiYXNlUG9zaXRpb24gKSwKCQkJbXlPZmZzZXQgPSBnZXRPZmZzZXRzKCBvZmZzZXRzLm15LCBlbGVtLm91dGVyV2lkdGgoKSwgZWxlbS5vdXRlckhlaWdodCgpICk7CgoJCWlmICggb3B0aW9ucy5teVsgMCBdID09PSAicmlnaHQiICkgewoJCQlwb3NpdGlvbi5sZWZ0IC09IGVsZW1XaWR0aDsKCQl9IGVsc2UgaWYgKCBvcHRpb25zLm15WyAwIF0gPT09ICJjZW50ZXIiICkgewoJCQlwb3NpdGlvbi5sZWZ0IC09IGVsZW1XaWR0aCAvIDI7CgkJfQoKCQlpZiAoIG9wdGlvbnMubXlbIDEgXSA9PT0gImJvdHRvbSIgKSB7CgkJCXBvc2l0aW9uLnRvcCAtPSBlbGVtSGVpZ2h0OwoJCX0gZWxzZSBpZiAoIG9wdGlvbnMubXlbIDEgXSA9PT0gImNlbnRlciIgKSB7CgkJCXBvc2l0aW9uLnRvcCAtPSBlbGVtSGVpZ2h0IC8gMjsKCQl9CgoJCXBvc2l0aW9uLmxlZnQgKz0gbXlPZmZzZXRbIDAgXTsKCQlwb3NpdGlvbi50b3AgKz0gbXlPZmZzZXRbIDEgXTsKCgkJY29sbGlzaW9uUG9zaXRpb24gPSB7CgkJCW1hcmdpbkxlZnQ6IG1hcmdpbkxlZnQsCgkJCW1hcmdpblRvcDogbWFyZ2luVG9wCgkJfTsKCgkJJC5lYWNoKCBbICJsZWZ0IiwgInRvcCIgXSwgZnVuY3Rpb24oIGksIGRpciApIHsKCQkJaWYgKCAkLnVpLnBvc2l0aW9uWyBjb2xsaXNpb25bIGkgXSBdICkgewoJCQkJJC51aS5wb3NpdGlvblsgY29sbGlzaW9uWyBpIF0gXVsgZGlyIF0oIHBvc2l0aW9uLCB7CgkJCQkJdGFyZ2V0V2lkdGg6IHRhcmdldFdpZHRoLAoJCQkJCXRhcmdldEhlaWdodDogdGFyZ2V0SGVpZ2h0LAoJCQkJCWVsZW1XaWR0aDogZWxlbVdpZHRoLAoJCQkJCWVsZW1IZWlnaHQ6IGVsZW1IZWlnaHQsCgkJCQkJY29sbGlzaW9uUG9zaXRpb246IGNvbGxpc2lvblBvc2l0aW9uLAoJCQkJCWNvbGxpc2lvbldpZHRoOiBjb2xsaXNpb25XaWR0aCwKCQkJCQljb2xsaXNpb25IZWlnaHQ6IGNvbGxpc2lvbkhlaWdodCwKCQkJCQlvZmZzZXQ6IFsgYXRPZmZzZXRbIDAgXSArIG15T2Zmc2V0WyAwIF0sIGF0T2Zmc2V0IFsgMSBdICsgbXlPZmZzZXRbIDEgXSBdLAoJCQkJCW15OiBvcHRpb25zLm15LAoJCQkJCWF0OiBvcHRpb25zLmF0LAoJCQkJCXdpdGhpbjogd2l0aGluLAoJCQkJCWVsZW06IGVsZW0KCQkJCX0gKTsKCQkJfQoJCX0gKTsKCgkJaWYgKCBvcHRpb25zLnVzaW5nICkgewoKCQkJLy8gQWRkcyBmZWVkYmFjayBhcyBzZWNvbmQgYXJndW1lbnQgdG8gdXNpbmcgY2FsbGJhY2ssIGlmIHByZXNlbnQKCQkJdXNpbmcgPSBmdW5jdGlvbiggcHJvcHMgKSB7CgkJCQl2YXIgbGVmdCA9IHRhcmdldE9mZnNldC5sZWZ0IC0gcG9zaXRpb24ubGVmdCwKCQkJCQlyaWdodCA9IGxlZnQgKyB0YXJnZXRXaWR0aCAtIGVsZW1XaWR0aCwKCQkJCQl0b3AgPSB0YXJnZXRPZmZzZXQudG9wIC0gcG9zaXRpb24udG9wLAoJCQkJCWJvdHRvbSA9IHRvcCArIHRhcmdldEhlaWdodCAtIGVsZW1IZWlnaHQsCgkJCQkJZmVlZGJhY2sgPSB7CgkJCQkJCXRhcmdldDogewoJCQkJCQkJZWxlbWVudDogdGFyZ2V0LAoJCQkJCQkJbGVmdDogdGFyZ2V0T2Zmc2V0LmxlZnQsCgkJCQkJCQl0b3A6IHRhcmdldE9mZnNldC50b3AsCgkJCQkJCQl3aWR0aDogdGFyZ2V0V2lkdGgsCgkJCQkJCQloZWlnaHQ6IHRhcmdldEhlaWdodAoJCQkJCQl9LAoJCQkJCQllbGVtZW50OiB7CgkJCQkJCQllbGVtZW50OiBlbGVtLAoJCQkJCQkJbGVmdDogcG9zaXRpb24ubGVmdCwKCQkJCQkJCXRvcDogcG9zaXRpb24udG9wLAoJCQkJCQkJd2lkdGg6IGVsZW1XaWR0aCwKCQkJCQkJCWhlaWdodDogZWxlbUhlaWdodAoJCQkJCQl9LAoJCQkJCQlob3Jpem9udGFsOiByaWdodCA8IDAgPyAibGVmdCIgOiBsZWZ0ID4gMCA\/ICJyaWdodCIgOiAiY2VudGVyIiwKCQkJCQkJdmVydGljYWw6IGJvdHRvbSA8IDAgPyAidG9wIiA6IHRvcCA+IDAgPyAiYm90dG9tIiA6ICJtaWRkbGUiCgkJCQkJfTsKCQkJCWlmICggdGFyZ2V0V2lkdGggPCBlbGVtV2lkdGggJiYgYWJzKCBsZWZ0ICsgcmlnaHQgKSA8IHRhcmdldFdpZHRoICkgewoJCQkJCWZlZWRiYWNrLmhvcml6b250YWwgPSAiY2VudGVyIjsKCQkJCX0KCQkJCWlmICggdGFyZ2V0SGVpZ2h0IDwgZWxlbUhlaWdodCAmJiBhYnMoIHRvcCArIGJvdHRvbSApIDwgdGFyZ2V0SGVpZ2h0ICkgewoJCQkJCWZlZWRiYWNrLnZlcnRpY2FsID0gIm1pZGRsZSI7CgkJCQl9CgkJCQlpZiAoIG1heCggYWJzKCBsZWZ0ICksIGFicyggcmlnaHQgKSApID4gbWF4KCBhYnMoIHRvcCApLCBhYnMoIGJvdHRvbSApICkgKSB7CgkJCQkJZmVlZGJhY2suaW1wb3J0YW50ID0gImhvcml6b250YWwiOwoJCQkJfSBlbHNlIHsKCQkJCQlmZWVkYmFjay5pbXBvcnRhbnQgPSAidmVydGljYWwiOwoJCQkJfQoJCQkJb3B0aW9ucy51c2luZy5jYWxsKCB0aGlzLCBwcm9wcywgZmVlZGJhY2sgKTsKCQkJfTsKCQl9CgoJCWVsZW0ub2Zmc2V0KCAkLmV4dGVuZCggcG9zaXRpb24sIHsgdXNpbmc6IHVzaW5nIH0gKSApOwoJfSApOwp9OwoKJC51aS5wb3NpdGlvbiA9IHsKCWZpdDogewoJCWxlZnQ6IGZ1bmN0aW9uKCBwb3NpdGlvbiwgZGF0YSApIHsKCQkJdmFyIHdpdGhpbiA9IGRhdGEud2l0aGluLAoJCQkJd2l0aGluT2Zmc2V0ID0gd2l0aGluLmlzV2luZG93ID8gd2l0aGluLnNjcm9sbExlZnQgOiB3aXRoaW4ub2Zmc2V0LmxlZnQsCgkJCQlvdXRlcldpZHRoID0gd2l0aGluLndpZHRoLAoJCQkJY29sbGlzaW9uUG9zTGVmdCA9IHBvc2l0aW9uLmxlZnQgLSBkYXRhLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpbkxlZnQsCgkJCQlvdmVyTGVmdCA9IHdpdGhpbk9mZnNldCAtIGNvbGxpc2lvblBvc0xlZnQsCgkJCQlvdmVyUmlnaHQgPSBjb2xsaXNpb25Qb3NMZWZ0ICsgZGF0YS5jb2xsaXNpb25XaWR0aCAtIG91dGVyV2lkdGggLSB3aXRoaW5PZmZzZXQsCgkJCQluZXdPdmVyUmlnaHQ7CgoJCQkvLyBFbGVtZW50IGlzIHdpZGVyIHRoYW4gd2l0aGluCgkJCWlmICggZGF0YS5jb2xsaXNpb25XaWR0aCA+IG91dGVyV2lkdGggKSB7CgoJCQkJLy8gRWxlbWVudCBpcyBpbml0aWFsbHkgb3ZlciB0aGUgbGVmdCBzaWRlIG9mIHdpdGhpbgoJCQkJaWYgKCBvdmVyTGVmdCA+IDAgJiYgb3ZlclJpZ2h0IDw9IDAgKSB7CgkJCQkJbmV3T3ZlclJpZ2h0ID0gcG9zaXRpb24ubGVmdCArIG92ZXJMZWZ0ICsgZGF0YS5jb2xsaXNpb25XaWR0aCAtIG91dGVyV2lkdGggLQoJCQkJCQl3aXRoaW5PZmZzZXQ7CgkJCQkJcG9zaXRpb24ubGVmdCArPSBvdmVyTGVmdCAtIG5ld092ZXJSaWdodDsKCgkJCQkvLyBFbGVtZW50IGlzIGluaXRpYWxseSBvdmVyIHJpZ2h0IHNpZGUgb2Ygd2l0aGluCgkJCQl9IGVsc2UgaWYgKCBvdmVyUmlnaHQgPiAwICYmIG92ZXJMZWZ0IDw9IDAgKSB7CgkJCQkJcG9zaXRpb24ubGVmdCA9IHdpdGhpbk9mZnNldDsKCgkJCQkvLyBFbGVtZW50IGlzIGluaXRpYWxseSBvdmVyIGJvdGggbGVmdCBhbmQgcmlnaHQgc2lkZXMgb2Ygd2l0aGluCgkJCQl9IGVsc2UgewoJCQkJCWlmICggb3ZlckxlZnQgPiBvdmVyUmlnaHQgKSB7CgkJCQkJCXBvc2l0aW9uLmxlZnQgPSB3aXRoaW5PZmZzZXQgKyBvdXRlcldpZHRoIC0gZGF0YS5jb2xsaXNpb25XaWR0aDsKCQkJCQl9IGVsc2UgewoJCQkJCQlwb3NpdGlvbi5sZWZ0ID0gd2l0aGluT2Zmc2V0OwoJCQkJCX0KCQkJCX0KCgkJCS8vIFRvbyBmYXIgbGVmdCAtPiBhbGlnbiB3aXRoIGxlZnQgZWRnZQoJCQl9IGVsc2UgaWYgKCBvdmVyTGVmdCA+IDAgKSB7CgkJCQlwb3NpdGlvbi5sZWZ0ICs9IG92ZXJMZWZ0OwoKCQkJLy8gVG9vIGZhciByaWdodCAtPiBhbGlnbiB3aXRoIHJpZ2h0IGVkZ2UKCQkJfSBlbHNlIGlmICggb3ZlclJpZ2h0ID4gMCApIHsKCQkJCXBvc2l0aW9uLmxlZnQgLT0gb3ZlclJpZ2h0OwoKCQkJLy8gQWRqdXN0IGJhc2VkIG9uIHBvc2l0aW9uIGFuZCBtYXJnaW4KCQkJfSBlbHNlIHsKCQkJCXBvc2l0aW9uLmxlZnQgPSBtYXgoIHBvc2l0aW9uLmxlZnQgLSBjb2xsaXNpb25Qb3NMZWZ0LCBwb3NpdGlvbi5sZWZ0ICk7CgkJCX0KCQl9LAoJCXRvcDogZnVuY3Rpb24oIHBvc2l0aW9uLCBkYXRhICkgewoJCQl2YXIgd2l0aGluID0gZGF0YS53aXRoaW4sCgkJCQl3aXRoaW5PZmZzZXQgPSB3aXRoaW4uaXNXaW5kb3cgPyB3aXRoaW4uc2Nyb2xsVG9wIDogd2l0aGluLm9mZnNldC50b3AsCgkJCQlvdXRlckhlaWdodCA9IGRhdGEud2l0aGluLmhlaWdodCwKCQkJCWNvbGxpc2lvblBvc1RvcCA9IHBvc2l0aW9uLnRvcCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luVG9wLAoJCQkJb3ZlclRvcCA9IHdpdGhpbk9mZnNldCAtIGNvbGxpc2lvblBvc1RvcCwKCQkJCW92ZXJCb3R0b20gPSBjb2xsaXNpb25Qb3NUb3AgKyBkYXRhLmNvbGxpc2lvbkhlaWdodCAtIG91dGVySGVpZ2h0IC0gd2l0aGluT2Zmc2V0LAoJCQkJbmV3T3ZlckJvdHRvbTsKCgkJCS8vIEVsZW1lbnQgaXMgdGFsbGVyIHRoYW4gd2l0aGluCgkJCWlmICggZGF0YS5jb2xsaXNpb25IZWlnaHQgPiBvdXRlckhlaWdodCApIHsKCgkJCQkvLyBFbGVtZW50IGlzIGluaXRpYWxseSBvdmVyIHRoZSB0b3Agb2Ygd2l0aGluCgkJCQlpZiAoIG92ZXJUb3AgPiAwICYmIG92ZXJCb3R0b20gPD0gMCApIHsKCQkJCQluZXdPdmVyQm90dG9tID0gcG9zaXRpb24udG9wICsgb3ZlclRvcCArIGRhdGEuY29sbGlzaW9uSGVpZ2h0IC0gb3V0ZXJIZWlnaHQgLQoJCQkJCQl3aXRoaW5PZmZzZXQ7CgkJCQkJcG9zaXRpb24udG9wICs9IG92ZXJUb3AgLSBuZXdPdmVyQm90dG9tOwoKCQkJCS8vIEVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgYm90dG9tIG9mIHdpdGhpbgoJCQkJfSBlbHNlIGlmICggb3ZlckJvdHRvbSA+IDAgJiYgb3ZlclRvcCA8PSAwICkgewoJCQkJCXBvc2l0aW9uLnRvcCA9IHdpdGhpbk9mZnNldDsKCgkJCQkvLyBFbGVtZW50IGlzIGluaXRpYWxseSBvdmVyIGJvdGggdG9wIGFuZCBib3R0b20gb2Ygd2l0aGluCgkJCQl9IGVsc2UgewoJCQkJCWlmICggb3ZlclRvcCA+IG92ZXJCb3R0b20gKSB7CgkJCQkJCXBvc2l0aW9uLnRvcCA9IHdpdGhpbk9mZnNldCArIG91dGVySGVpZ2h0IC0gZGF0YS5jb2xsaXNpb25IZWlnaHQ7CgkJCQkJfSBlbHNlIHsKCQkJCQkJcG9zaXRpb24udG9wID0gd2l0aGluT2Zmc2V0OwoJCQkJCX0KCQkJCX0KCgkJCS8vIFRvbyBmYXIgdXAgLT4gYWxpZ24gd2l0aCB0b3AKCQkJfSBlbHNlIGlmICggb3ZlclRvcCA+IDAgKSB7CgkJCQlwb3NpdGlvbi50b3AgKz0gb3ZlclRvcDsKCgkJCS8vIFRvbyBmYXIgZG93biAtPiBhbGlnbiB3aXRoIGJvdHRvbSBlZGdlCgkJCX0gZWxzZSBpZiAoIG92ZXJCb3R0b20gPiAwICkgewoJCQkJcG9zaXRpb24udG9wIC09IG92ZXJCb3R0b207CgoJCQkvLyBBZGp1c3QgYmFzZWQgb24gcG9zaXRpb24gYW5kIG1hcmdpbgoJCQl9IGVsc2UgewoJCQkJcG9zaXRpb24udG9wID0gbWF4KCBwb3NpdGlvbi50b3AgLSBjb2xsaXNpb25Qb3NUb3AsIHBvc2l0aW9uLnRvcCApOwoJCQl9CgkJfQoJfSwKCWZsaXA6IHsKCQlsZWZ0OiBmdW5jdGlvbiggcG9zaXRpb24sIGRhdGEgKSB7CgkJCXZhciB3aXRoaW4gPSBkYXRhLndpdGhpbiwKCQkJCXdpdGhpbk9mZnNldCA9IHdpdGhpbi5vZmZzZXQubGVmdCArIHdpdGhpbi5zY3JvbGxMZWZ0LAoJCQkJb3V0ZXJXaWR0aCA9IHdpdGhpbi53aWR0aCwKCQkJCW9mZnNldExlZnQgPSB3aXRoaW4uaXNXaW5kb3cgPyB3aXRoaW4uc2Nyb2xsTGVmdCA6IHdpdGhpbi5vZmZzZXQubGVmdCwKCQkJCWNvbGxpc2lvblBvc0xlZnQgPSBwb3NpdGlvbi5sZWZ0IC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0LAoJCQkJb3ZlckxlZnQgPSBjb2xsaXNpb25Qb3NMZWZ0IC0gb2Zmc2V0TGVmdCwKCQkJCW92ZXJSaWdodCA9IGNvbGxpc2lvblBvc0xlZnQgKyBkYXRhLmNvbGxpc2lvbldpZHRoIC0gb3V0ZXJXaWR0aCAtIG9mZnNldExlZnQsCgkJCQlteU9mZnNldCA9IGRhdGEubXlbIDAgXSA9PT0gImxlZnQiID8KCQkJCQktZGF0YS5lbGVtV2lkdGggOgoJCQkJCWRhdGEubXlbIDAgXSA9PT0gInJpZ2h0IiA\/CgkJCQkJCWRhdGEuZWxlbVdpZHRoIDoKCQkJCQkJMCwKCQkJCWF0T2Zmc2V0ID0gZGF0YS5hdFsgMCBdID09PSAibGVmdCIgPwoJCQkJCWRhdGEudGFyZ2V0V2lkdGggOgoJCQkJCWRhdGEuYXRbIDAgXSA9PT0gInJpZ2h0IiA\/CgkJCQkJCS1kYXRhLnRhcmdldFdpZHRoIDoKCQkJCQkJMCwKCQkJCW9mZnNldCA9IC0yICogZGF0YS5vZmZzZXRbIDAgXSwKCQkJCW5ld092ZXJSaWdodCwKCQkJCW5ld092ZXJMZWZ0OwoKCQkJaWYgKCBvdmVyTGVmdCA8IDAgKSB7CgkJCQluZXdPdmVyUmlnaHQgPSBwb3NpdGlvbi5sZWZ0ICsgbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldCArIGRhdGEuY29sbGlzaW9uV2lkdGggLQoJCQkJCW91dGVyV2lkdGggLSB3aXRoaW5PZmZzZXQ7CgkJCQlpZiAoIG5ld092ZXJSaWdodCA8IDAgfHwgbmV3T3ZlclJpZ2h0IDwgYWJzKCBvdmVyTGVmdCApICkgewoJCQkJCXBvc2l0aW9uLmxlZnQgKz0gbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldDsKCQkJCX0KCQkJfSBlbHNlIGlmICggb3ZlclJpZ2h0ID4gMCApIHsKCQkJCW5ld092ZXJMZWZ0ID0gcG9zaXRpb24ubGVmdCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luTGVmdCArIG15T2Zmc2V0ICsKCQkJCQlhdE9mZnNldCArIG9mZnNldCAtIG9mZnNldExlZnQ7CgkJCQlpZiAoIG5ld092ZXJMZWZ0ID4gMCB8fCBhYnMoIG5ld092ZXJMZWZ0ICkgPCBvdmVyUmlnaHQgKSB7CgkJCQkJcG9zaXRpb24ubGVmdCArPSBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0OwoJCQkJfQoJCQl9CgkJfSwKCQl0b3A6IGZ1bmN0aW9uKCBwb3NpdGlvbiwgZGF0YSApIHsKCQkJdmFyIHdpdGhpbiA9IGRhdGEud2l0aGluLAoJCQkJd2l0aGluT2Zmc2V0ID0gd2l0aGluLm9mZnNldC50b3AgKyB3aXRoaW4uc2Nyb2xsVG9wLAoJCQkJb3V0ZXJIZWlnaHQgPSB3aXRoaW4uaGVpZ2h0LAoJCQkJb2Zmc2V0VG9wID0gd2l0aGluLmlzV2luZG93ID8gd2l0aGluLnNjcm9sbFRvcCA6IHdpdGhpbi5vZmZzZXQudG9wLAoJCQkJY29sbGlzaW9uUG9zVG9wID0gcG9zaXRpb24udG9wIC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5Ub3AsCgkJCQlvdmVyVG9wID0gY29sbGlzaW9uUG9zVG9wIC0gb2Zmc2V0VG9wLAoJCQkJb3ZlckJvdHRvbSA9IGNvbGxpc2lvblBvc1RvcCArIGRhdGEuY29sbGlzaW9uSGVpZ2h0IC0gb3V0ZXJIZWlnaHQgLSBvZmZzZXRUb3AsCgkJCQl0b3AgPSBkYXRhLm15WyAxIF0gPT09ICJ0b3AiLAoJCQkJbXlPZmZzZXQgPSB0b3AgPwoJCQkJCS1kYXRhLmVsZW1IZWlnaHQgOgoJCQkJCWRhdGEubXlbIDEgXSA9PT0gImJvdHRvbSIgPwoJCQkJCQlkYXRhLmVsZW1IZWlnaHQgOgoJCQkJCQkwLAoJCQkJYXRPZmZzZXQgPSBkYXRhLmF0WyAxIF0gPT09ICJ0b3AiID8KCQkJCQlkYXRhLnRhcmdldEhlaWdodCA6CgkJCQkJZGF0YS5hdFsgMSBdID09PSAiYm90dG9tIiA\/CgkJCQkJCS1kYXRhLnRhcmdldEhlaWdodCA6CgkJCQkJCTAsCgkJCQlvZmZzZXQgPSAtMiAqIGRhdGEub2Zmc2V0WyAxIF0sCgkJCQluZXdPdmVyVG9wLAoJCQkJbmV3T3ZlckJvdHRvbTsKCQkJaWYgKCBvdmVyVG9wIDwgMCApIHsKCQkJCW5ld092ZXJCb3R0b20gPSBwb3NpdGlvbi50b3AgKyBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0ICsgZGF0YS5jb2xsaXNpb25IZWlnaHQgLQoJCQkJCW91dGVySGVpZ2h0IC0gd2l0aGluT2Zmc2V0OwoJCQkJaWYgKCBuZXdPdmVyQm90dG9tIDwgMCB8fCBuZXdPdmVyQm90dG9tIDwgYWJzKCBvdmVyVG9wICkgKSB7CgkJCQkJcG9zaXRpb24udG9wICs9IG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQ7CgkJCQl9CgkJCX0gZWxzZSBpZiAoIG92ZXJCb3R0b20gPiAwICkgewoJCQkJbmV3T3ZlclRvcCA9IHBvc2l0aW9uLnRvcCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luVG9wICsgbXlPZmZzZXQgKyBhdE9mZnNldCArCgkJCQkJb2Zmc2V0IC0gb2Zmc2V0VG9wOwoJCQkJaWYgKCBuZXdPdmVyVG9wID4gMCB8fCBhYnMoIG5ld092ZXJUb3AgKSA8IG92ZXJCb3R0b20gKSB7CgkJCQkJcG9zaXRpb24udG9wICs9IG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQ7CgkJCQl9CgkJCX0KCQl9Cgl9LAoJZmxpcGZpdDogewoJCWxlZnQ6IGZ1bmN0aW9uKCkgewoJCQkkLnVpLnBvc2l0aW9uLmZsaXAubGVmdC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCSQudWkucG9zaXRpb24uZml0LmxlZnQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCX0sCgkJdG9wOiBmdW5jdGlvbigpIHsKCQkJJC51aS5wb3NpdGlvbi5mbGlwLnRvcC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCSQudWkucG9zaXRpb24uZml0LnRvcC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJfQoJfQp9OwoKfSApKCk7Cgp2YXIgcG9zaXRpb24gPSAkLnVpLnBvc2l0aW9uOwoKCi8qIQogKiBqUXVlcnkgVUkgOmRhdGEgMS4xMi4xCiAqIGh0dHA6Ly9qcXVlcnl1aS5jb20KICoKICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqLwoKLy8+PmxhYmVsOiA6ZGF0YSBTZWxlY3RvcgovLz4+Z3JvdXA6IENvcmUKLy8+PmRlc2NyaXB0aW9uOiBTZWxlY3RzIGVsZW1lbnRzIHdoaWNoIGhhdmUgZGF0YSBzdG9yZWQgdW5kZXIgdGhlIHNwZWNpZmllZCBrZXkuCi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9kYXRhLXNlbGVjdG9yLwoKCnZhciBkYXRhID0gJC5leHRlbmQoICQuZXhwclsgIjoiIF0sIHsKCWRhdGE6ICQuZXhwci5jcmVhdGVQc2V1ZG8gPwoJCSQuZXhwci5jcmVhdGVQc2V1ZG8oIGZ1bmN0aW9uKCBkYXRhTmFtZSApIHsKCQkJcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJcmV0dXJuICEhJC5kYXRhKCBlbGVtLCBkYXRhTmFtZSApOwoJCQl9OwoJCX0gKSA6CgoJCS8vIFN1cHBvcnQ6IGpRdWVyeSA8MS44CgkJZnVuY3Rpb24oIGVsZW0sIGksIG1hdGNoICkgewoJCQlyZXR1cm4gISEkLmRhdGEoIGVsZW0sIG1hdGNoWyAzIF0gKTsKCQl9Cn0gKTsKCi8qIQogKiBqUXVlcnkgVUkgRGlzYWJsZSBTZWxlY3Rpb24gMS4xMi4xCiAqIGh0dHA6Ly9qcXVlcnl1aS5jb20KICoKICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqLwoKLy8+PmxhYmVsOiBkaXNhYmxlU2VsZWN0aW9uCi8vPj5ncm91cDogQ29yZQovLz4+ZGVzY3JpcHRpb246IERpc2FibGUgc2VsZWN0aW9uIG9mIHRleHQgY29udGVudCB3aXRoaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLgovLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZGlzYWJsZVNlbGVjdGlvbi8KCi8vIFRoaXMgZmlsZSBpcyBkZXByZWNhdGVkCgoKdmFyIGRpc2FibGVTZWxlY3Rpb24gPSAkLmZuLmV4dGVuZCggewoJZGlzYWJsZVNlbGVjdGlvbjogKCBmdW5jdGlvbigpIHsKCQl2YXIgZXZlbnRUeXBlID0gIm9uc2VsZWN0c3RhcnQiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICkgPwoJCQkic2VsZWN0c3RhcnQiIDoKCQkJIm1vdXNlZG93biI7CgoJCXJldHVybiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuIHRoaXMub24oIGV2ZW50VHlwZSArICIudWktZGlzYWJsZVNlbGVjdGlvbiIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCX0gKTsKCQl9OwoJfSApKCksCgoJZW5hYmxlU2VsZWN0aW9uOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5vZmYoICIudWktZGlzYWJsZVNlbGVjdGlvbiIgKTsKCX0KfSApOwoKCi8qIQogKiBqUXVlcnkgVUkgRWZmZWN0cyAxLjEyLjEKICogaHR0cDovL2pxdWVyeXVpLmNvbQogKgogKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICovCgovLz4+bGFiZWw6IEVmZmVjdHMgQ29yZQovLz4+Z3JvdXA6IEVmZmVjdHMKLy8ganNjczpkaXNhYmxlIG1heGltdW1MaW5lTGVuZ3RoCi8vPj5kZXNjcmlwdGlvbjogRXh0ZW5kcyB0aGUgaW50ZXJuYWwgalF1ZXJ5IGVmZmVjdHMuIEluY2x1ZGVzIG1vcnBoaW5nIGFuZCBlYXNpbmcuIFJlcXVpcmVkIGJ5IGFsbCBvdGhlciBlZmZlY3RzLgovLyBqc2NzOmVuYWJsZSBtYXhpbXVtTGluZUxlbmd0aAovLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vY2F0ZWdvcnkvZWZmZWN0cy1jb3JlLwovLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0LwoKCgp2YXIgZGF0YVNwYWNlID0gInVpLWVmZmVjdHMtIiwKCWRhdGFTcGFjZVN0eWxlID0gInVpLWVmZmVjdHMtc3R5bGUiLAoJZGF0YVNwYWNlQW5pbWF0ZWQgPSAidWktZWZmZWN0cy1hbmltYXRlZCIsCgoJLy8gQ3JlYXRlIGEgbG9jYWwgalF1ZXJ5IGJlY2F1c2UgalF1ZXJ5IENvbG9yIHJlbGllcyBvbiBpdCBhbmQgdGhlCgkvLyBnbG9iYWwgbWF5IG5vdCBleGlzdCB3aXRoIEFNRCBhbmQgYSBjdXN0b20gYnVpbGQgKCMxMDE5OSkKCWpRdWVyeSA9ICQ7CgokLmVmZmVjdHMgPSB7CgllZmZlY3Q6IHt9Cn07CgovKiEKICogalF1ZXJ5IENvbG9yIEFuaW1hdGlvbnMgdjIuMS4yCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LWNvbG9yCiAqCiAqIENvcHlyaWdodCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqCiAqIERhdGU6IFdlZCBKYW4gMTYgMDg6NDc6MDkgMjAxMyAtMDYwMAogKi8KKCBmdW5jdGlvbiggalF1ZXJ5LCB1bmRlZmluZWQgKSB7CgoJdmFyIHN0ZXBIb29rcyA9ICJiYWNrZ3JvdW5kQ29sb3IgYm9yZGVyQm90dG9tQ29sb3IgYm9yZGVyTGVmdENvbG9yIGJvcmRlclJpZ2h0Q29sb3IgIiArCgkJImJvcmRlclRvcENvbG9yIGNvbG9yIGNvbHVtblJ1bGVDb2xvciBvdXRsaW5lQ29sb3IgdGV4dERlY29yYXRpb25Db2xvciB0ZXh0RW1waGFzaXNDb2xvciIsCgoJLy8gUGx1c2VxdWFscyB0ZXN0IGZvciArPSAxMDAgLT0gMTAwCglycGx1c2VxdWFscyA9IC9eKFtcLStdKT1ccyooXGQrXC4\/XGQqKS8sCgoJLy8gQSBzZXQgb2YgUkUncyB0aGF0IGNhbiBtYXRjaCBzdHJpbmdzIGFuZCBnZW5lcmF0ZSBjb2xvciB0dXBsZXMuCglzdHJpbmdQYXJzZXJzID0gWyB7CgkJCXJlOiAvcmdiYT9cKFxzKihcZHsxLDN9KVxzKixccyooXGR7MSwzfSlccyosXHMqKFxkezEsM30pXHMqKD86LFxzKihcZD8oPzpcLlxkKyk\/KVxzKik\/XCkvLAoJCQlwYXJzZTogZnVuY3Rpb24oIGV4ZWNSZXN1bHQgKSB7CgkJCQlyZXR1cm4gWwoJCQkJCWV4ZWNSZXN1bHRbIDEgXSwKCQkJCQlleGVjUmVzdWx0WyAyIF0sCgkJCQkJZXhlY1Jlc3VsdFsgMyBdLAoJCQkJCWV4ZWNSZXN1bHRbIDQgXQoJCQkJXTsKCQkJfQoJCX0sIHsKCQkJcmU6IC9yZ2JhP1woXHMqKFxkKyg\/OlwuXGQrKT8pXCVccyosXHMqKFxkKyg\/OlwuXGQrKT8pXCVccyosXHMqKFxkKyg\/OlwuXGQrKT8pXCVccyooPzosXHMqKFxkPyg\/OlwuXGQrKT8pXHMqKT9cKS8sCgkJCXBhcnNlOiBmdW5jdGlvbiggZXhlY1Jlc3VsdCApIHsKCQkJCXJldHVybiBbCgkJCQkJZXhlY1Jlc3VsdFsgMSBdICogMi41NSwKCQkJCQlleGVjUmVzdWx0WyAyIF0gKiAyLjU1LAoJCQkJCWV4ZWNSZXN1bHRbIDMgXSAqIDIuNTUsCgkJCQkJZXhlY1Jlc3VsdFsgNCBdCgkJCQldOwoJCQl9CgkJfSwgewoKCQkJLy8gVGhpcyByZWdleCBpZ25vcmVzIEEtRiBiZWNhdXNlIGl0J3MgY29tcGFyZWQgYWdhaW5zdCBhbiBhbHJlYWR5IGxvd2VyY2FzZWQgc3RyaW5nCgkJCXJlOiAvIyhbYS1mMC05XXsyfSkoW2EtZjAtOV17Mn0pKFthLWYwLTldezJ9KS8sCgkJCXBhcnNlOiBmdW5jdGlvbiggZXhlY1Jlc3VsdCApIHsKCQkJCXJldHVybiBbCgkJCQkJcGFyc2VJbnQoIGV4ZWNSZXN1bHRbIDEgXSwgMTYgKSwKCQkJCQlwYXJzZUludCggZXhlY1Jlc3VsdFsgMiBdLCAxNiApLAoJCQkJCXBhcnNlSW50KCBleGVjUmVzdWx0WyAzIF0sIDE2ICkKCQkJCV07CgkJCX0KCQl9LCB7CgoJCQkvLyBUaGlzIHJlZ2V4IGlnbm9yZXMgQS1GIGJlY2F1c2UgaXQncyBjb21wYXJlZCBhZ2FpbnN0IGFuIGFscmVhZHkgbG93ZXJjYXNlZCBzdHJpbmcKCQkJcmU6IC8jKFthLWYwLTldKShbYS1mMC05XSkoW2EtZjAtOV0pLywKCQkJcGFyc2U6IGZ1bmN0aW9uKCBleGVjUmVzdWx0ICkgewoJCQkJcmV0dXJuIFsKCQkJCQlwYXJzZUludCggZXhlY1Jlc3VsdFsgMSBdICsgZXhlY1Jlc3VsdFsgMSBdLCAxNiApLAoJCQkJCXBhcnNlSW50KCBleGVjUmVzdWx0WyAyIF0gKyBleGVjUmVzdWx0WyAyIF0sIDE2ICksCgkJCQkJcGFyc2VJbnQoIGV4ZWNSZXN1bHRbIDMgXSArIGV4ZWNSZXN1bHRbIDMgXSwgMTYgKQoJCQkJXTsKCQkJfQoJCX0sIHsKCQkJcmU6IC9oc2xhP1woXHMqKFxkKyg\/OlwuXGQrKT8pXHMqLFxzKihcZCsoPzpcLlxkKyk\/KVwlXHMqLFxzKihcZCsoPzpcLlxkKyk\/KVwlXHMqKD86LFxzKihcZD8oPzpcLlxkKyk\/KVxzKik\/XCkvLAoJCQlzcGFjZTogImhzbGEiLAoJCQlwYXJzZTogZnVuY3Rpb24oIGV4ZWNSZXN1bHQgKSB7CgkJCQlyZXR1cm4gWwoJCQkJCWV4ZWNSZXN1bHRbIDEgXSwKCQkJCQlleGVjUmVzdWx0WyAyIF0gLyAxMDAsCgkJCQkJZXhlY1Jlc3VsdFsgMyBdIC8gMTAwLAoJCQkJCWV4ZWNSZXN1bHRbIDQgXQoJCQkJXTsKCQkJfQoJCX0gXSwKCgkvLyBKUXVlcnkuQ29sb3IoICkKCWNvbG9yID0galF1ZXJ5LkNvbG9yID0gZnVuY3Rpb24oIGNvbG9yLCBncmVlbiwgYmx1ZSwgYWxwaGEgKSB7CgkJcmV0dXJuIG5ldyBqUXVlcnkuQ29sb3IuZm4ucGFyc2UoIGNvbG9yLCBncmVlbiwgYmx1ZSwgYWxwaGEgKTsKCX0sCglzcGFjZXMgPSB7CgkJcmdiYTogewoJCQlwcm9wczogewoJCQkJcmVkOiB7CgkJCQkJaWR4OiAwLAoJCQkJCXR5cGU6ICJieXRlIgoJCQkJfSwKCQkJCWdyZWVuOiB7CgkJCQkJaWR4OiAxLAoJCQkJCXR5cGU6ICJieXRlIgoJCQkJfSwKCQkJCWJsdWU6IHsKCQkJCQlpZHg6IDIsCgkJCQkJdHlwZTogImJ5dGUiCgkJCQl9CgkJCX0KCQl9LAoKCQloc2xhOiB7CgkJCXByb3BzOiB7CgkJCQlodWU6IHsKCQkJCQlpZHg6IDAsCgkJCQkJdHlwZTogImRlZ3JlZXMiCgkJCQl9LAoJCQkJc2F0dXJhdGlvbjogewoJCQkJCWlkeDogMSwKCQkJCQl0eXBlOiAicGVyY2VudCIKCQkJCX0sCgkJCQlsaWdodG5lc3M6IHsKCQkJCQlpZHg6IDIsCgkJCQkJdHlwZTogInBlcmNlbnQiCgkJCQl9CgkJCX0KCQl9Cgl9LAoJcHJvcFR5cGVzID0gewoJCSJieXRlIjogewoJCQlmbG9vcjogdHJ1ZSwKCQkJbWF4OiAyNTUKCQl9LAoJCSJwZXJjZW50IjogewoJCQltYXg6IDEKCQl9LAoJCSJkZWdyZWVzIjogewoJCQltb2Q6IDM2MCwKCQkJZmxvb3I6IHRydWUKCQl9Cgl9LAoJc3VwcG9ydCA9IGNvbG9yLnN1cHBvcnQgPSB7fSwKCgkvLyBFbGVtZW50IGZvciBzdXBwb3J0IHRlc3RzCglzdXBwb3J0RWxlbSA9IGpRdWVyeSggIjxwPiIgKVsgMCBdLAoKCS8vIENvbG9ycyA9IGpRdWVyeS5Db2xvci5uYW1lcwoJY29sb3JzLAoKCS8vIExvY2FsIGFsaWFzZXMgb2YgZnVuY3Rpb25zIGNhbGxlZCBvZnRlbgoJZWFjaCA9IGpRdWVyeS5lYWNoOwoKLy8gRGV0ZXJtaW5lIHJnYmEgc3VwcG9ydCBpbW1lZGlhdGVseQpzdXBwb3J0RWxlbS5zdHlsZS5jc3NUZXh0ID0gImJhY2tncm91bmQtY29sb3I6cmdiYSgxLDEsMSwuNSkiOwpzdXBwb3J0LnJnYmEgPSBzdXBwb3J0RWxlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IuaW5kZXhPZiggInJnYmEiICkgPiAtMTsKCi8vIERlZmluZSBjYWNoZSBuYW1lIGFuZCBhbHBoYSBwcm9wZXJ0aWVzCi8vIGZvciByZ2JhIGFuZCBoc2xhIHNwYWNlcwplYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkgewoJc3BhY2UuY2FjaGUgPSAiXyIgKyBzcGFjZU5hbWU7CglzcGFjZS5wcm9wcy5hbHBoYSA9IHsKCQlpZHg6IDMsCgkJdHlwZTogInBlcmNlbnQiLAoJCWRlZjogMQoJfTsKfSApOwoKZnVuY3Rpb24gY2xhbXAoIHZhbHVlLCBwcm9wLCBhbGxvd0VtcHR5ICkgewoJdmFyIHR5cGUgPSBwcm9wVHlwZXNbIHByb3AudHlwZSBdIHx8IHt9OwoKCWlmICggdmFsdWUgPT0gbnVsbCApIHsKCQlyZXR1cm4gKCBhbGxvd0VtcHR5IHx8ICFwcm9wLmRlZiApID8gbnVsbCA6IHByb3AuZGVmOwoJfQoKCS8vIH5+IGlzIGFuIHNob3J0IHdheSBvZiBkb2luZyBmbG9vciBmb3IgcG9zaXRpdmUgbnVtYmVycwoJdmFsdWUgPSB0eXBlLmZsb29yID8gfn52YWx1ZSA6IHBhcnNlRmxvYXQoIHZhbHVlICk7CgoJLy8gSUUgd2lsbCBwYXNzIGluIGVtcHR5IHN0cmluZ3MgYXMgdmFsdWUgZm9yIGFscGhhLAoJLy8gd2hpY2ggd2lsbCBoaXQgdGhpcyBjYXNlCglpZiAoIGlzTmFOKCB2YWx1ZSApICkgewoJCXJldHVybiBwcm9wLmRlZjsKCX0KCglpZiAoIHR5cGUubW9kICkgewoKCQkvLyBXZSBhZGQgbW9kIGJlZm9yZSBtb2RkaW5nIHRvIG1ha2Ugc3VyZSB0aGF0IG5lZ2F0aXZlcyB2YWx1ZXMKCQkvLyBnZXQgY29udmVydGVkIHByb3Blcmx5OiAtMTAgLT4gMzUwCgkJcmV0dXJuICggdmFsdWUgKyB0eXBlLm1vZCApICUgdHlwZS5tb2Q7Cgl9CgoJLy8gRm9yIG5vdyBhbGwgcHJvcGVydHkgdHlwZXMgd2l0aG91dCBtb2QgaGF2ZSBtaW4gYW5kIG1heAoJcmV0dXJuIDAgPiB2YWx1ZSA\/IDAgOiB0eXBlLm1heCA8IHZhbHVlID8gdHlwZS5tYXggOiB2YWx1ZTsKfQoKZnVuY3Rpb24gc3RyaW5nUGFyc2UoIHN0cmluZyApIHsKCXZhciBpbnN0ID0gY29sb3IoKSwKCQlyZ2JhID0gaW5zdC5fcmdiYSA9IFtdOwoKCXN0cmluZyA9IHN0cmluZy50b0xvd2VyQ2FzZSgpOwoKCWVhY2goIHN0cmluZ1BhcnNlcnMsIGZ1bmN0aW9uKCBpLCBwYXJzZXIgKSB7CgkJdmFyIHBhcnNlZCwKCQkJbWF0Y2ggPSBwYXJzZXIucmUuZXhlYyggc3RyaW5nICksCgkJCXZhbHVlcyA9IG1hdGNoICYmIHBhcnNlci5wYXJzZSggbWF0Y2ggKSwKCQkJc3BhY2VOYW1lID0gcGFyc2VyLnNwYWNlIHx8ICJyZ2JhIjsKCgkJaWYgKCB2YWx1ZXMgKSB7CgkJCXBhcnNlZCA9IGluc3RbIHNwYWNlTmFtZSBdKCB2YWx1ZXMgKTsKCgkJCS8vIElmIHRoaXMgd2FzIGFuIHJnYmEgcGFyc2UgdGhlIGFzc2lnbm1lbnQgbWlnaHQgaGFwcGVuIHR3aWNlCgkJCS8vIG9oIHdlbGwuLi4uCgkJCWluc3RbIHNwYWNlc1sgc3BhY2VOYW1lIF0uY2FjaGUgXSA9IHBhcnNlZFsgc3BhY2VzWyBzcGFjZU5hbWUgXS5jYWNoZSBdOwoJCQlyZ2JhID0gaW5zdC5fcmdiYSA9IHBhcnNlZC5fcmdiYTsKCgkJCS8vIEV4aXQgZWFjaCggc3RyaW5nUGFyc2VycyApIGhlcmUgYmVjYXVzZSB3ZSBtYXRjaGVkCgkJCXJldHVybiBmYWxzZTsKCQl9Cgl9ICk7CgoJLy8gRm91bmQgYSBzdHJpbmdQYXJzZXIgdGhhdCBoYW5kbGVkIGl0CglpZiAoIHJnYmEubGVuZ3RoICkgewoKCQkvLyBJZiB0aGlzIGNhbWUgZnJvbSBhIHBhcnNlZCBzdHJpbmcsIGZvcmNlICJ0cmFuc3BhcmVudCIgd2hlbiBhbHBoYSBpcyAwCgkJLy8gY2hyb21lLCAoYW5kIG1heWJlIG90aGVycykgcmV0dXJuICJ0cmFuc3BhcmVudCIgYXMgcmdiYSgwLDAsMCwwKQoJCWlmICggcmdiYS5qb2luKCkgPT09ICIwLDAsMCwwIiApIHsKCQkJalF1ZXJ5LmV4dGVuZCggcmdiYSwgY29sb3JzLnRyYW5zcGFyZW50ICk7CgkJfQoJCXJldHVybiBpbnN0OwoJfQoKCS8vIE5hbWVkIGNvbG9ycwoJcmV0dXJuIGNvbG9yc1sgc3RyaW5nIF07Cn0KCmNvbG9yLmZuID0galF1ZXJ5LmV4dGVuZCggY29sb3IucHJvdG90eXBlLCB7CglwYXJzZTogZnVuY3Rpb24oIHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhICkgewoJCWlmICggcmVkID09PSB1bmRlZmluZWQgKSB7CgkJCXRoaXMuX3JnYmEgPSBbIG51bGwsIG51bGwsIG51bGwsIG51bGwgXTsKCQkJcmV0dXJuIHRoaXM7CgkJfQoJCWlmICggcmVkLmpxdWVyeSB8fCByZWQubm9kZVR5cGUgKSB7CgkJCXJlZCA9IGpRdWVyeSggcmVkICkuY3NzKCBncmVlbiApOwoJCQlncmVlbiA9IHVuZGVmaW5lZDsKCQl9CgoJCXZhciBpbnN0ID0gdGhpcywKCQkJdHlwZSA9IGpRdWVyeS50eXBlKCByZWQgKSwKCQkJcmdiYSA9IHRoaXMuX3JnYmEgPSBbXTsKCgkJLy8gTW9yZSB0aGFuIDEgYXJndW1lbnQgc3BlY2lmaWVkIC0gYXNzdW1lICggcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEgKQoJCWlmICggZ3JlZW4gIT09IHVuZGVmaW5lZCApIHsKCQkJcmVkID0gWyByZWQsIGdyZWVuLCBibHVlLCBhbHBoYSBdOwoJCQl0eXBlID0gImFycmF5IjsKCQl9CgoJCWlmICggdHlwZSA9PT0gInN0cmluZyIgKSB7CgkJCXJldHVybiB0aGlzLnBhcnNlKCBzdHJpbmdQYXJzZSggcmVkICkgfHwgY29sb3JzLl9kZWZhdWx0ICk7CgkJfQoKCQlpZiAoIHR5cGUgPT09ICJhcnJheSIgKSB7CgkJCWVhY2goIHNwYWNlcy5yZ2JhLnByb3BzLCBmdW5jdGlvbigga2V5LCBwcm9wICkgewoJCQkJcmdiYVsgcHJvcC5pZHggXSA9IGNsYW1wKCByZWRbIHByb3AuaWR4IF0sIHByb3AgKTsKCQkJfSApOwoJCQlyZXR1cm4gdGhpczsKCQl9CgoJCWlmICggdHlwZSA9PT0gIm9iamVjdCIgKSB7CgkJCWlmICggcmVkIGluc3RhbmNlb2YgY29sb3IgKSB7CgkJCQllYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkgewoJCQkJCWlmICggcmVkWyBzcGFjZS5jYWNoZSBdICkgewoJCQkJCQlpbnN0WyBzcGFjZS5jYWNoZSBdID0gcmVkWyBzcGFjZS5jYWNoZSBdLnNsaWNlKCk7CgkJCQkJfQoJCQkJfSApOwoJCQl9IGVsc2UgewoJCQkJZWFjaCggc3BhY2VzLCBmdW5jdGlvbiggc3BhY2VOYW1lLCBzcGFjZSApIHsKCQkJCQl2YXIgY2FjaGUgPSBzcGFjZS5jYWNoZTsKCQkJCQllYWNoKCBzcGFjZS5wcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHsKCgkJCQkJCS8vIElmIHRoZSBjYWNoZSBkb2Vzbid0IGV4aXN0LCBhbmQgd2Uga25vdyBob3cgdG8gY29udmVydAoJCQkJCQlpZiAoICFpbnN0WyBjYWNoZSBdICYmIHNwYWNlLnRvICkgewoKCQkJCQkJCS8vIElmIHRoZSB2YWx1ZSB3YXMgbnVsbCwgd2UgZG9uJ3QgbmVlZCB0byBjb3B5IGl0CgkJCQkJCQkvLyBpZiB0aGUga2V5IHdhcyBhbHBoYSwgd2UgZG9uJ3QgbmVlZCB0byBjb3B5IGl0IGVpdGhlcgoJCQkJCQkJaWYgKCBrZXkgPT09ICJhbHBoYSIgfHwgcmVkWyBrZXkgXSA9PSBudWxsICkgewoJCQkJCQkJCXJldHVybjsKCQkJCQkJCX0KCQkJCQkJCWluc3RbIGNhY2hlIF0gPSBzcGFjZS50byggaW5zdC5fcmdiYSApOwoJCQkJCQl9CgoJCQkJCQkvLyBUaGlzIGlzIHRoZSBvbmx5IGNhc2Ugd2hlcmUgd2UgYWxsb3cgbnVsbHMgZm9yIEFMTCBwcm9wZXJ0aWVzLgoJCQkJCQkvLyBjYWxsIGNsYW1wIHdpdGggYWx3YXlzQWxsb3dFbXB0eQoJCQkJCQlpbnN0WyBjYWNoZSBdWyBwcm9wLmlkeCBdID0gY2xhbXAoIHJlZFsga2V5IF0sIHByb3AsIHRydWUgKTsKCQkJCQl9ICk7CgoJCQkJCS8vIEV2ZXJ5dGhpbmcgZGVmaW5lZCBidXQgYWxwaGE\/CgkJCQkJaWYgKCBpbnN0WyBjYWNoZSBdICYmCgkJCQkJCQlqUXVlcnkuaW5BcnJheSggbnVsbCwgaW5zdFsgY2FjaGUgXS5zbGljZSggMCwgMyApICkgPCAwICkgewoKCQkJCQkJLy8gVXNlIHRoZSBkZWZhdWx0IG9mIDEKCQkJCQkJaW5zdFsgY2FjaGUgXVsgMyBdID0gMTsKCQkJCQkJaWYgKCBzcGFjZS5mcm9tICkgewoJCQkJCQkJaW5zdC5fcmdiYSA9IHNwYWNlLmZyb20oIGluc3RbIGNhY2hlIF0gKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0gKTsKCQkJfQoJCQlyZXR1cm4gdGhpczsKCQl9Cgl9LAoJaXM6IGZ1bmN0aW9uKCBjb21wYXJlICkgewoJCXZhciBpcyA9IGNvbG9yKCBjb21wYXJlICksCgkJCXNhbWUgPSB0cnVlLAoJCQlpbnN0ID0gdGhpczsKCgkJZWFjaCggc3BhY2VzLCBmdW5jdGlvbiggXywgc3BhY2UgKSB7CgkJCXZhciBsb2NhbENhY2hlLAoJCQkJaXNDYWNoZSA9IGlzWyBzcGFjZS5jYWNoZSBdOwoJCQlpZiAoIGlzQ2FjaGUgKSB7CgkJCQlsb2NhbENhY2hlID0gaW5zdFsgc3BhY2UuY2FjaGUgXSB8fCBzcGFjZS50byAmJiBzcGFjZS50byggaW5zdC5fcmdiYSApIHx8IFtdOwoJCQkJZWFjaCggc3BhY2UucHJvcHMsIGZ1bmN0aW9uKCBfLCBwcm9wICkgewoJCQkJCWlmICggaXNDYWNoZVsgcHJvcC5pZHggXSAhPSBudWxsICkgewoJCQkJCQlzYW1lID0gKCBpc0NhY2hlWyBwcm9wLmlkeCBdID09PSBsb2NhbENhY2hlWyBwcm9wLmlkeCBdICk7CgkJCQkJCXJldHVybiBzYW1lOwoJCQkJCX0KCQkJCX0gKTsKCQkJfQoJCQlyZXR1cm4gc2FtZTsKCQl9ICk7CgkJcmV0dXJuIHNhbWU7Cgl9LAoJX3NwYWNlOiBmdW5jdGlvbigpIHsKCQl2YXIgdXNlZCA9IFtdLAoJCQlpbnN0ID0gdGhpczsKCQllYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkgewoJCQlpZiAoIGluc3RbIHNwYWNlLmNhY2hlIF0gKSB7CgkJCQl1c2VkLnB1c2goIHNwYWNlTmFtZSApOwoJCQl9CgkJfSApOwoJCXJldHVybiB1c2VkLnBvcCgpOwoJfSwKCXRyYW5zaXRpb246IGZ1bmN0aW9uKCBvdGhlciwgZGlzdGFuY2UgKSB7CgkJdmFyIGVuZCA9IGNvbG9yKCBvdGhlciApLAoJCQlzcGFjZU5hbWUgPSBlbmQuX3NwYWNlKCksCgkJCXNwYWNlID0gc3BhY2VzWyBzcGFjZU5hbWUgXSwKCQkJc3RhcnRDb2xvciA9IHRoaXMuYWxwaGEoKSA9PT0gMCA\/IGNvbG9yKCAidHJhbnNwYXJlbnQiICkgOiB0aGlzLAoJCQlzdGFydCA9IHN0YXJ0Q29sb3JbIHNwYWNlLmNhY2hlIF0gfHwgc3BhY2UudG8oIHN0YXJ0Q29sb3IuX3JnYmEgKSwKCQkJcmVzdWx0ID0gc3RhcnQuc2xpY2UoKTsKCgkJZW5kID0gZW5kWyBzcGFjZS5jYWNoZSBdOwoJCWVhY2goIHNwYWNlLnByb3BzLCBmdW5jdGlvbigga2V5LCBwcm9wICkgewoJCQl2YXIgaW5kZXggPSBwcm9wLmlkeCwKCQkJCXN0YXJ0VmFsdWUgPSBzdGFydFsgaW5kZXggXSwKCQkJCWVuZFZhbHVlID0gZW5kWyBpbmRleCBdLAoJCQkJdHlwZSA9IHByb3BUeXBlc1sgcHJvcC50eXBlIF0gfHwge307CgoJCQkvLyBJZiBudWxsLCBkb24ndCBvdmVycmlkZSBzdGFydCB2YWx1ZQoJCQlpZiAoIGVuZFZhbHVlID09PSBudWxsICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBJZiBudWxsIC0gdXNlIGVuZAoJCQlpZiAoIHN0YXJ0VmFsdWUgPT09IG51bGwgKSB7CgkJCQlyZXN1bHRbIGluZGV4IF0gPSBlbmRWYWx1ZTsKCQkJfSBlbHNlIHsKCQkJCWlmICggdHlwZS5tb2QgKSB7CgkJCQkJaWYgKCBlbmRWYWx1ZSAtIHN0YXJ0VmFsdWUgPiB0eXBlLm1vZCAvIDIgKSB7CgkJCQkJCXN0YXJ0VmFsdWUgKz0gdHlwZS5tb2Q7CgkJCQkJfSBlbHNlIGlmICggc3RhcnRWYWx1ZSAtIGVuZFZhbHVlID4gdHlwZS5tb2QgLyAyICkgewoJCQkJCQlzdGFydFZhbHVlIC09IHR5cGUubW9kOwoJCQkJCX0KCQkJCX0KCQkJCXJlc3VsdFsgaW5kZXggXSA9IGNsYW1wKCAoIGVuZFZhbHVlIC0gc3RhcnRWYWx1ZSApICogZGlzdGFuY2UgKyBzdGFydFZhbHVlLCBwcm9wICk7CgkJCX0KCQl9ICk7CgkJcmV0dXJuIHRoaXNbIHNwYWNlTmFtZSBdKCByZXN1bHQgKTsKCX0sCglibGVuZDogZnVuY3Rpb24oIG9wYXF1ZSApIHsKCgkJLy8gSWYgd2UgYXJlIGFscmVhZHkgb3BhcXVlIC0gcmV0dXJuIG91cnNlbGYKCQlpZiAoIHRoaXMuX3JnYmFbIDMgXSA9PT0gMSApIHsKCQkJcmV0dXJuIHRoaXM7CgkJfQoKCQl2YXIgcmdiID0gdGhpcy5fcmdiYS5zbGljZSgpLAoJCQlhID0gcmdiLnBvcCgpLAoJCQlibGVuZCA9IGNvbG9yKCBvcGFxdWUgKS5fcmdiYTsKCgkJcmV0dXJuIGNvbG9yKCBqUXVlcnkubWFwKCByZ2IsIGZ1bmN0aW9uKCB2LCBpICkgewoJCQlyZXR1cm4gKCAxIC0gYSApICogYmxlbmRbIGkgXSArIGEgKiB2OwoJCX0gKSApOwoJfSwKCXRvUmdiYVN0cmluZzogZnVuY3Rpb24oKSB7CgkJdmFyIHByZWZpeCA9ICJyZ2JhKCIsCgkJCXJnYmEgPSBqUXVlcnkubWFwKCB0aGlzLl9yZ2JhLCBmdW5jdGlvbiggdiwgaSApIHsKCQkJCXJldHVybiB2ID09IG51bGwgPyAoIGkgPiAyID8gMSA6IDAgKSA6IHY7CgkJCX0gKTsKCgkJaWYgKCByZ2JhWyAzIF0gPT09IDEgKSB7CgkJCXJnYmEucG9wKCk7CgkJCXByZWZpeCA9ICJyZ2IoIjsKCQl9CgoJCXJldHVybiBwcmVmaXggKyByZ2JhLmpvaW4oKSArICIpIjsKCX0sCgl0b0hzbGFTdHJpbmc6IGZ1bmN0aW9uKCkgewoJCXZhciBwcmVmaXggPSAiaHNsYSgiLAoJCQloc2xhID0galF1ZXJ5Lm1hcCggdGhpcy5oc2xhKCksIGZ1bmN0aW9uKCB2LCBpICkgewoJCQkJaWYgKCB2ID09IG51bGwgKSB7CgkJCQkJdiA9IGkgPiAyID8gMSA6IDA7CgkJCQl9CgoJCQkJLy8gQ2F0Y2ggMSBhbmQgMgoJCQkJaWYgKCBpICYmIGkgPCAzICkgewoJCQkJCXYgPSBNYXRoLnJvdW5kKCB2ICogMTAwICkgKyAiJSI7CgkJCQl9CgkJCQlyZXR1cm4gdjsKCQkJfSApOwoKCQlpZiAoIGhzbGFbIDMgXSA9PT0gMSApIHsKCQkJaHNsYS5wb3AoKTsKCQkJcHJlZml4ID0gImhzbCgiOwoJCX0KCQlyZXR1cm4gcHJlZml4ICsgaHNsYS5qb2luKCkgKyAiKSI7Cgl9LAoJdG9IZXhTdHJpbmc6IGZ1bmN0aW9uKCBpbmNsdWRlQWxwaGEgKSB7CgkJdmFyIHJnYmEgPSB0aGlzLl9yZ2JhLnNsaWNlKCksCgkJCWFscGhhID0gcmdiYS5wb3AoKTsKCgkJaWYgKCBpbmNsdWRlQWxwaGEgKSB7CgkJCXJnYmEucHVzaCggfn4oIGFscGhhICogMjU1ICkgKTsKCQl9CgoJCXJldHVybiAiIyIgKyBqUXVlcnkubWFwKCByZ2JhLCBmdW5jdGlvbiggdiApIHsKCgkJCS8vIERlZmF1bHQgdG8gMCB3aGVuIG51bGxzIGV4aXN0CgkJCXYgPSAoIHYgfHwgMCApLnRvU3RyaW5nKCAxNiApOwoJCQlyZXR1cm4gdi5sZW5ndGggPT09IDEgPyAiMCIgKyB2IDogdjsKCQl9ICkuam9pbiggIiIgKTsKCX0sCgl0b1N0cmluZzogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuX3JnYmFbIDMgXSA9PT0gMCA\/ICJ0cmFuc3BhcmVudCIgOiB0aGlzLnRvUmdiYVN0cmluZygpOwoJfQp9ICk7CmNvbG9yLmZuLnBhcnNlLnByb3RvdHlwZSA9IGNvbG9yLmZuOwoKLy8gSHNsYSBjb252ZXJzaW9ucyBhZGFwdGVkIGZyb206Ci8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvbWFhc2hhYWNrL3NvdXJjZS9icm93c2UvcGFja2FnZXMvZ3JhcGhpY3MvdHJ1bmsvc3JjL2dyYXBoaWNzL2NvbG9ycy9IVUUyUkdCLmFzP3I9NTAyMQoKZnVuY3Rpb24gaHVlMnJnYiggcCwgcSwgaCApIHsKCWggPSAoIGggKyAxICkgJSAxOwoJaWYgKCBoICogNiA8IDEgKSB7CgkJcmV0dXJuIHAgKyAoIHEgLSBwICkgKiBoICogNjsKCX0KCWlmICggaCAqIDIgPCAxICkgewoJCXJldHVybiBxOwoJfQoJaWYgKCBoICogMyA8IDIgKSB7CgkJcmV0dXJuIHAgKyAoIHEgLSBwICkgKiAoICggMiAvIDMgKSAtIGggKSAqIDY7Cgl9CglyZXR1cm4gcDsKfQoKc3BhY2VzLmhzbGEudG8gPSBmdW5jdGlvbiggcmdiYSApIHsKCWlmICggcmdiYVsgMCBdID09IG51bGwgfHwgcmdiYVsgMSBdID09IG51bGwgfHwgcmdiYVsgMiBdID09IG51bGwgKSB7CgkJcmV0dXJuIFsgbnVsbCwgbnVsbCwgbnVsbCwgcmdiYVsgMyBdIF07Cgl9Cgl2YXIgciA9IHJnYmFbIDAgXSAvIDI1NSwKCQlnID0gcmdiYVsgMSBdIC8gMjU1LAoJCWIgPSByZ2JhWyAyIF0gLyAyNTUsCgkJYSA9IHJnYmFbIDMgXSwKCQltYXggPSBNYXRoLm1heCggciwgZywgYiApLAoJCW1pbiA9IE1hdGgubWluKCByLCBnLCBiICksCgkJZGlmZiA9IG1heCAtIG1pbiwKCQlhZGQgPSBtYXggKyBtaW4sCgkJbCA9IGFkZCAqIDAuNSwKCQloLCBzOwoKCWlmICggbWluID09PSBtYXggKSB7CgkJaCA9IDA7Cgl9IGVsc2UgaWYgKCByID09PSBtYXggKSB7CgkJaCA9ICggNjAgKiAoIGcgLSBiICkgLyBkaWZmICkgKyAzNjA7Cgl9IGVsc2UgaWYgKCBnID09PSBtYXggKSB7CgkJaCA9ICggNjAgKiAoIGIgLSByICkgLyBkaWZmICkgKyAxMjA7Cgl9IGVsc2UgewoJCWggPSAoIDYwICogKCByIC0gZyApIC8gZGlmZiApICsgMjQwOwoJfQoKCS8vIENocm9tYSAoZGlmZikgPT0gMCBtZWFucyBncmV5c2NhbGUgd2hpY2gsIGJ5IGRlZmluaXRpb24sIHNhdHVyYXRpb24gPSAwJQoJLy8gb3RoZXJ3aXNlLCBzYXR1cmF0aW9uIGlzIGJhc2VkIG9uIHRoZSByYXRpbyBvZiBjaHJvbWEgKGRpZmYpIHRvIGxpZ2h0bmVzcyAoYWRkKQoJaWYgKCBkaWZmID09PSAwICkgewoJCXMgPSAwOwoJfSBlbHNlIGlmICggbCA8PSAwLjUgKSB7CgkJcyA9IGRpZmYgLyBhZGQ7Cgl9IGVsc2UgewoJCXMgPSBkaWZmIC8gKCAyIC0gYWRkICk7Cgl9CglyZXR1cm4gWyBNYXRoLnJvdW5kKCBoICkgJSAzNjAsIHMsIGwsIGEgPT0gbnVsbCA\/IDEgOiBhIF07Cn07CgpzcGFjZXMuaHNsYS5mcm9tID0gZnVuY3Rpb24oIGhzbGEgKSB7CglpZiAoIGhzbGFbIDAgXSA9PSBudWxsIHx8IGhzbGFbIDEgXSA9PSBudWxsIHx8IGhzbGFbIDIgXSA9PSBudWxsICkgewoJCXJldHVybiBbIG51bGwsIG51bGwsIG51bGwsIGhzbGFbIDMgXSBdOwoJfQoJdmFyIGggPSBoc2xhWyAwIF0gLyAzNjAsCgkJcyA9IGhzbGFbIDEgXSwKCQlsID0gaHNsYVsgMiBdLAoJCWEgPSBoc2xhWyAzIF0sCgkJcSA9IGwgPD0gMC41ID8gbCAqICggMSArIHMgKSA6IGwgKyBzIC0gbCAqIHMsCgkJcCA9IDIgKiBsIC0gcTsKCglyZXR1cm4gWwoJCU1hdGgucm91bmQoIGh1ZTJyZ2IoIHAsIHEsIGggKyAoIDEgLyAzICkgKSAqIDI1NSApLAoJCU1hdGgucm91bmQoIGh1ZTJyZ2IoIHAsIHEsIGggKSAqIDI1NSApLAoJCU1hdGgucm91bmQoIGh1ZTJyZ2IoIHAsIHEsIGggLSAoIDEgLyAzICkgKSAqIDI1NSApLAoJCWEKCV07Cn07CgplYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkgewoJdmFyIHByb3BzID0gc3BhY2UucHJvcHMsCgkJY2FjaGUgPSBzcGFjZS5jYWNoZSwKCQl0byA9IHNwYWNlLnRvLAoJCWZyb20gPSBzcGFjZS5mcm9tOwoKCS8vIE1ha2VzIHJnYmEoKSBhbmQgaHNsYSgpCgljb2xvci5mblsgc3BhY2VOYW1lIF0gPSBmdW5jdGlvbiggdmFsdWUgKSB7CgoJCS8vIEdlbmVyYXRlIGEgY2FjaGUgZm9yIHRoaXMgc3BhY2UgaWYgaXQgZG9lc24ndCBleGlzdAoJCWlmICggdG8gJiYgIXRoaXNbIGNhY2hlIF0gKSB7CgkJCXRoaXNbIGNhY2hlIF0gPSB0byggdGhpcy5fcmdiYSApOwoJCX0KCQlpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7CgkJCXJldHVybiB0aGlzWyBjYWNoZSBdLnNsaWNlKCk7CgkJfQoKCQl2YXIgcmV0LAoJCQl0eXBlID0galF1ZXJ5LnR5cGUoIHZhbHVlICksCgkJCWFyciA9ICggdHlwZSA9PT0gImFycmF5IiB8fCB0eXBlID09PSAib2JqZWN0IiApID8gdmFsdWUgOiBhcmd1bWVudHMsCgkJCWxvY2FsID0gdGhpc1sgY2FjaGUgXS5zbGljZSgpOwoKCQllYWNoKCBwcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHsKCQkJdmFyIHZhbCA9IGFyclsgdHlwZSA9PT0gIm9iamVjdCIgPyBrZXkgOiBwcm9wLmlkeCBdOwoJCQlpZiAoIHZhbCA9PSBudWxsICkgewoJCQkJdmFsID0gbG9jYWxbIHByb3AuaWR4IF07CgkJCX0KCQkJbG9jYWxbIHByb3AuaWR4IF0gPSBjbGFtcCggdmFsLCBwcm9wICk7CgkJfSApOwoKCQlpZiAoIGZyb20gKSB7CgkJCXJldCA9IGNvbG9yKCBmcm9tKCBsb2NhbCApICk7CgkJCXJldFsgY2FjaGUgXSA9IGxvY2FsOwoJCQlyZXR1cm4gcmV0OwoJCX0gZWxzZSB7CgkJCXJldHVybiBjb2xvciggbG9jYWwgKTsKCQl9Cgl9OwoKCS8vIE1ha2VzIHJlZCgpIGdyZWVuKCkgYmx1ZSgpIGFscGhhKCkgaHVlKCkgc2F0dXJhdGlvbigpIGxpZ2h0bmVzcygpCgllYWNoKCBwcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHsKCgkJLy8gQWxwaGEgaXMgaW5jbHVkZWQgaW4gbW9yZSB0aGFuIG9uZSBzcGFjZQoJCWlmICggY29sb3IuZm5bIGtleSBdICkgewoJCQlyZXR1cm47CgkJfQoJCWNvbG9yLmZuWyBrZXkgXSA9IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQkJdmFyIHZ0eXBlID0galF1ZXJ5LnR5cGUoIHZhbHVlICksCgkJCQlmbiA9ICgga2V5ID09PSAiYWxwaGEiID8gKCB0aGlzLl9oc2xhID8gImhzbGEiIDogInJnYmEiICkgOiBzcGFjZU5hbWUgKSwKCQkJCWxvY2FsID0gdGhpc1sgZm4gXSgpLAoJCQkJY3VyID0gbG9jYWxbIHByb3AuaWR4IF0sCgkJCQltYXRjaDsKCgkJCWlmICggdnR5cGUgPT09ICJ1bmRlZmluZWQiICkgewoJCQkJcmV0dXJuIGN1cjsKCQkJfQoKCQkJaWYgKCB2dHlwZSA9PT0gImZ1bmN0aW9uIiApIHsKCQkJCXZhbHVlID0gdmFsdWUuY2FsbCggdGhpcywgY3VyICk7CgkJCQl2dHlwZSA9IGpRdWVyeS50eXBlKCB2YWx1ZSApOwoJCQl9CgkJCWlmICggdmFsdWUgPT0gbnVsbCAmJiBwcm9wLmVtcHR5ICkgewoJCQkJcmV0dXJuIHRoaXM7CgkJCX0KCQkJaWYgKCB2dHlwZSA9PT0gInN0cmluZyIgKSB7CgkJCQltYXRjaCA9IHJwbHVzZXF1YWxzLmV4ZWMoIHZhbHVlICk7CgkJCQlpZiAoIG1hdGNoICkgewoJCQkJCXZhbHVlID0gY3VyICsgcGFyc2VGbG9hdCggbWF0Y2hbIDIgXSApICogKCBtYXRjaFsgMSBdID09PSAiKyIgPyAxIDogLTEgKTsKCQkJCX0KCQkJfQoJCQlsb2NhbFsgcHJvcC5pZHggXSA9IHZhbHVlOwoJCQlyZXR1cm4gdGhpc1sgZm4gXSggbG9jYWwgKTsKCQl9OwoJfSApOwp9ICk7CgovLyBBZGQgY3NzSG9vayBhbmQgLmZ4LnN0ZXAgZnVuY3Rpb24gZm9yIGVhY2ggbmFtZWQgaG9vay4KLy8gYWNjZXB0IGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBwcm9wZXJ0aWVzCmNvbG9yLmhvb2sgPSBmdW5jdGlvbiggaG9vayApIHsKCXZhciBob29rcyA9IGhvb2suc3BsaXQoICIgIiApOwoJZWFjaCggaG9va3MsIGZ1bmN0aW9uKCBpLCBob29rICkgewoJCWpRdWVyeS5jc3NIb29rc1sgaG9vayBdID0gewoJCQlzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKCQkJCXZhciBwYXJzZWQsIGN1ckVsZW0sCgkJCQkJYmFja2dyb3VuZENvbG9yID0gIiI7CgoJCQkJaWYgKCB2YWx1ZSAhPT0gInRyYW5zcGFyZW50IiAmJiAoIGpRdWVyeS50eXBlKCB2YWx1ZSApICE9PSAic3RyaW5nIiB8fAoJCQkJCQkoIHBhcnNlZCA9IHN0cmluZ1BhcnNlKCB2YWx1ZSApICkgKSApIHsKCQkJCQl2YWx1ZSA9IGNvbG9yKCBwYXJzZWQgfHwgdmFsdWUgKTsKCQkJCQlpZiAoICFzdXBwb3J0LnJnYmEgJiYgdmFsdWUuX3JnYmFbIDMgXSAhPT0gMSApIHsKCQkJCQkJY3VyRWxlbSA9IGhvb2sgPT09ICJiYWNrZ3JvdW5kQ29sb3IiID8gZWxlbS5wYXJlbnROb2RlIDogZWxlbTsKCQkJCQkJd2hpbGUgKAoJCQkJCQkJKCBiYWNrZ3JvdW5kQ29sb3IgPT09ICIiIHx8IGJhY2tncm91bmRDb2xvciA9PT0gInRyYW5zcGFyZW50IiApICYmCgkJCQkJCQljdXJFbGVtICYmIGN1ckVsZW0uc3R5bGUKCQkJCQkJKSB7CgkJCQkJCQl0cnkgewoJCQkJCQkJCWJhY2tncm91bmRDb2xvciA9IGpRdWVyeS5jc3MoIGN1ckVsZW0sICJiYWNrZ3JvdW5kQ29sb3IiICk7CgkJCQkJCQkJY3VyRWxlbSA9IGN1ckVsZW0ucGFyZW50Tm9kZTsKCQkJCQkJCX0gY2F0Y2ggKCBlICkgewoJCQkJCQkJfQoJCQkJCQl9CgoJCQkJCQl2YWx1ZSA9IHZhbHVlLmJsZW5kKCBiYWNrZ3JvdW5kQ29sb3IgJiYgYmFja2dyb3VuZENvbG9yICE9PSAidHJhbnNwYXJlbnQiID8KCQkJCQkJCWJhY2tncm91bmRDb2xvciA6CgkJCQkJCQkiX2RlZmF1bHQiICk7CgkJCQkJfQoKCQkJCQl2YWx1ZSA9IHZhbHVlLnRvUmdiYVN0cmluZygpOwoJCQkJfQoJCQkJdHJ5IHsKCQkJCQllbGVtLnN0eWxlWyBob29rIF0gPSB2YWx1ZTsKCQkJCX0gY2F0Y2ggKCBlICkgewoKCQkJCQkvLyBXcmFwcGVkIHRvIHByZXZlbnQgSUUgZnJvbSB0aHJvd2luZyBlcnJvcnMgb24gImludmFsaWQiIHZhbHVlcyBsaWtlCgkJCQkJLy8gJ2F1dG8nIG9yICdpbmhlcml0JwoJCQkJfQoJCQl9CgkJfTsKCQlqUXVlcnkuZnguc3RlcFsgaG9vayBdID0gZnVuY3Rpb24oIGZ4ICkgewoJCQlpZiAoICFmeC5jb2xvckluaXQgKSB7CgkJCQlmeC5zdGFydCA9IGNvbG9yKCBmeC5lbGVtLCBob29rICk7CgkJCQlmeC5lbmQgPSBjb2xvciggZnguZW5kICk7CgkJCQlmeC5jb2xvckluaXQgPSB0cnVlOwoJCQl9CgkJCWpRdWVyeS5jc3NIb29rc1sgaG9vayBdLnNldCggZnguZWxlbSwgZnguc3RhcnQudHJhbnNpdGlvbiggZnguZW5kLCBmeC5wb3MgKSApOwoJCX07Cgl9ICk7Cgp9OwoKY29sb3IuaG9vayggc3RlcEhvb2tzICk7CgpqUXVlcnkuY3NzSG9va3MuYm9yZGVyQ29sb3IgPSB7CglleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl2YXIgZXhwYW5kZWQgPSB7fTsKCgkJZWFjaCggWyAiVG9wIiwgIlJpZ2h0IiwgIkJvdHRvbSIsICJMZWZ0IiBdLCBmdW5jdGlvbiggaSwgcGFydCApIHsKCQkJZXhwYW5kZWRbICJib3JkZXIiICsgcGFydCArICJDb2xvciIgXSA9IHZhbHVlOwoJCX0gKTsKCQlyZXR1cm4gZXhwYW5kZWQ7Cgl9Cn07CgovLyBCYXNpYyBjb2xvciBuYW1lcyBvbmx5LgovLyBVc2FnZSBvZiBhbnkgb2YgdGhlIG90aGVyIGNvbG9yIG5hbWVzIHJlcXVpcmVzIGFkZGluZyB5b3Vyc2VsZiBvciBpbmNsdWRpbmcKLy8ganF1ZXJ5LmNvbG9yLnN2Zy1uYW1lcy5qcy4KY29sb3JzID0galF1ZXJ5LkNvbG9yLm5hbWVzID0gewoKCS8vIDQuMS4gQmFzaWMgY29sb3Iga2V5d29yZHMKCWFxdWE6ICIjMDBmZmZmIiwKCWJsYWNrOiAiIzAwMDAwMCIsCglibHVlOiAiIzAwMDBmZiIsCglmdWNoc2lhOiAiI2ZmMDBmZiIsCglncmF5OiAiIzgwODA4MCIsCglncmVlbjogIiMwMDgwMDAiLAoJbGltZTogIiMwMGZmMDAiLAoJbWFyb29uOiAiIzgwMDAwMCIsCgluYXZ5OiAiIzAwMDA4MCIsCglvbGl2ZTogIiM4MDgwMDAiLAoJcHVycGxlOiAiIzgwMDA4MCIsCglyZWQ6ICIjZmYwMDAwIiwKCXNpbHZlcjogIiNjMGMwYzAiLAoJdGVhbDogIiMwMDgwODAiLAoJd2hpdGU6ICIjZmZmZmZmIiwKCXllbGxvdzogIiNmZmZmMDAiLAoKCS8vIDQuMi4zLiAidHJhbnNwYXJlbnQiIGNvbG9yIGtleXdvcmQKCXRyYW5zcGFyZW50OiBbIG51bGwsIG51bGwsIG51bGwsIDAgXSwKCglfZGVmYXVsdDogIiNmZmZmZmYiCn07Cgp9ICkoIGpRdWVyeSApOwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBDTEFTUyBBTklNQVRJT05TICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KKCBmdW5jdGlvbigpIHsKCnZhciBjbGFzc0FuaW1hdGlvbkFjdGlvbnMgPSBbICJhZGQiLCAicmVtb3ZlIiwgInRvZ2dsZSIgXSwKCXNob3J0aGFuZFN0eWxlcyA9IHsKCQlib3JkZXI6IDEsCgkJYm9yZGVyQm90dG9tOiAxLAoJCWJvcmRlckNvbG9yOiAxLAoJCWJvcmRlckxlZnQ6IDEsCgkJYm9yZGVyUmlnaHQ6IDEsCgkJYm9yZGVyVG9wOiAxLAoJCWJvcmRlcldpZHRoOiAxLAoJCW1hcmdpbjogMSwKCQlwYWRkaW5nOiAxCgl9OwoKJC5lYWNoKAoJWyAiYm9yZGVyTGVmdFN0eWxlIiwgImJvcmRlclJpZ2h0U3R5bGUiLCAiYm9yZGVyQm90dG9tU3R5bGUiLCAiYm9yZGVyVG9wU3R5bGUiIF0sCglmdW5jdGlvbiggXywgcHJvcCApIHsKCQkkLmZ4LnN0ZXBbIHByb3AgXSA9IGZ1bmN0aW9uKCBmeCApIHsKCQkJaWYgKCBmeC5lbmQgIT09ICJub25lIiAmJiAhZnguc2V0QXR0ciB8fCBmeC5wb3MgPT09IDEgJiYgIWZ4LnNldEF0dHIgKSB7CgkJCQlqUXVlcnkuc3R5bGUoIGZ4LmVsZW0sIHByb3AsIGZ4LmVuZCApOwoJCQkJZnguc2V0QXR0ciA9IHRydWU7CgkJCX0KCQl9OwoJfQopOwoKZnVuY3Rpb24gZ2V0RWxlbWVudFN0eWxlcyggZWxlbSApIHsKCXZhciBrZXksIGxlbiwKCQlzdHlsZSA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA\/CgkJCWVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICkgOgoJCQllbGVtLmN1cnJlbnRTdHlsZSwKCQlzdHlsZXMgPSB7fTsKCglpZiAoIHN0eWxlICYmIHN0eWxlLmxlbmd0aCAmJiBzdHlsZVsgMCBdICYmIHN0eWxlWyBzdHlsZVsgMCBdIF0gKSB7CgkJbGVuID0gc3R5bGUubGVuZ3RoOwoJCXdoaWxlICggbGVuLS0gKSB7CgkJCWtleSA9IHN0eWxlWyBsZW4gXTsKCQkJaWYgKCB0eXBlb2Ygc3R5bGVbIGtleSBdID09PSAic3RyaW5nIiApIHsKCQkJCXN0eWxlc1sgJC5jYW1lbENhc2UoIGtleSApIF0gPSBzdHlsZVsga2V5IF07CgkJCX0KCQl9CgoJLy8gU3VwcG9ydDogT3BlcmEsIElFIDw5Cgl9IGVsc2UgewoJCWZvciAoIGtleSBpbiBzdHlsZSApIHsKCQkJaWYgKCB0eXBlb2Ygc3R5bGVbIGtleSBdID09PSAic3RyaW5nIiApIHsKCQkJCXN0eWxlc1sga2V5IF0gPSBzdHlsZVsga2V5IF07CgkJCX0KCQl9Cgl9CgoJcmV0dXJuIHN0eWxlczsKfQoKZnVuY3Rpb24gc3R5bGVEaWZmZXJlbmNlKCBvbGRTdHlsZSwgbmV3U3R5bGUgKSB7Cgl2YXIgZGlmZiA9IHt9LAoJCW5hbWUsIHZhbHVlOwoKCWZvciAoIG5hbWUgaW4gbmV3U3R5bGUgKSB7CgkJdmFsdWUgPSBuZXdTdHlsZVsgbmFtZSBdOwoJCWlmICggb2xkU3R5bGVbIG5hbWUgXSAhPT0gdmFsdWUgKSB7CgkJCWlmICggIXNob3J0aGFuZFN0eWxlc1sgbmFtZSBdICkgewoJCQkJaWYgKCAkLmZ4LnN0ZXBbIG5hbWUgXSB8fCAhaXNOYU4oIHBhcnNlRmxvYXQoIHZhbHVlICkgKSApIHsKCQkJCQlkaWZmWyBuYW1lIF0gPSB2YWx1ZTsKCQkJCX0KCQkJfQoJCX0KCX0KCglyZXR1cm4gZGlmZjsKfQoKLy8gU3VwcG9ydDogalF1ZXJ5IDwxLjgKaWYgKCAhJC5mbi5hZGRCYWNrICkgewoJJC5mbi5hZGRCYWNrID0gZnVuY3Rpb24oIHNlbGVjdG9yICkgewoJCXJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA\/CgkJCXRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yICkKCQkpOwoJfTsKfQoKJC5lZmZlY3RzLmFuaW1hdGVDbGFzcyA9IGZ1bmN0aW9uKCB2YWx1ZSwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2sgKSB7Cgl2YXIgbyA9ICQuc3BlZWQoIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrICk7CgoJcmV0dXJuIHRoaXMucXVldWUoIGZ1bmN0aW9uKCkgewoJCXZhciBhbmltYXRlZCA9ICQoIHRoaXMgKSwKCQkJYmFzZUNsYXNzID0gYW5pbWF0ZWQuYXR0ciggImNsYXNzIiApIHx8ICIiLAoJCQlhcHBseUNsYXNzQ2hhbmdlLAoJCQlhbGxBbmltYXRpb25zID0gby5jaGlsZHJlbiA\/IGFuaW1hdGVkLmZpbmQoICIqIiApLmFkZEJhY2soKSA6IGFuaW1hdGVkOwoKCQkvLyBNYXAgdGhlIGFuaW1hdGVkIG9iamVjdHMgdG8gc3RvcmUgdGhlIG9yaWdpbmFsIHN0eWxlcy4KCQlhbGxBbmltYXRpb25zID0gYWxsQW5pbWF0aW9ucy5tYXAoIGZ1bmN0aW9uKCkgewoJCQl2YXIgZWwgPSAkKCB0aGlzICk7CgkJCXJldHVybiB7CgkJCQllbDogZWwsCgkJCQlzdGFydDogZ2V0RWxlbWVudFN0eWxlcyggdGhpcyApCgkJCX07CgkJfSApOwoKCQkvLyBBcHBseSBjbGFzcyBjaGFuZ2UKCQlhcHBseUNsYXNzQ2hhbmdlID0gZnVuY3Rpb24oKSB7CgkJCSQuZWFjaCggY2xhc3NBbmltYXRpb25BY3Rpb25zLCBmdW5jdGlvbiggaSwgYWN0aW9uICkgewoJCQkJaWYgKCB2YWx1ZVsgYWN0aW9uIF0gKSB7CgkJCQkJYW5pbWF0ZWRbIGFjdGlvbiArICJDbGFzcyIgXSggdmFsdWVbIGFjdGlvbiBdICk7CgkJCQl9CgkJCX0gKTsKCQl9OwoJCWFwcGx5Q2xhc3NDaGFuZ2UoKTsKCgkJLy8gTWFwIGFsbCBhbmltYXRlZCBvYmplY3RzIGFnYWluIC0gY2FsY3VsYXRlIG5ldyBzdHlsZXMgYW5kIGRpZmYKCQlhbGxBbmltYXRpb25zID0gYWxsQW5pbWF0aW9ucy5tYXAoIGZ1bmN0aW9uKCkgewoJCQl0aGlzLmVuZCA9IGdldEVsZW1lbnRTdHlsZXMoIHRoaXMuZWxbIDAgXSApOwoJCQl0aGlzLmRpZmYgPSBzdHlsZURpZmZlcmVuY2UoIHRoaXMuc3RhcnQsIHRoaXMuZW5kICk7CgkJCXJldHVybiB0aGlzOwoJCX0gKTsKCgkJLy8gQXBwbHkgb3JpZ2luYWwgY2xhc3MKCQlhbmltYXRlZC5hdHRyKCAiY2xhc3MiLCBiYXNlQ2xhc3MgKTsKCgkJLy8gTWFwIGFsbCBhbmltYXRlZCBvYmplY3RzIGFnYWluIC0gdGhpcyB0aW1lIGNvbGxlY3RpbmcgYSBwcm9taXNlCgkJYWxsQW5pbWF0aW9ucyA9IGFsbEFuaW1hdGlvbnMubWFwKCBmdW5jdGlvbigpIHsKCQkJdmFyIHN0eWxlSW5mbyA9IHRoaXMsCgkJCQlkZmQgPSAkLkRlZmVycmVkKCksCgkJCQlvcHRzID0gJC5leHRlbmQoIHt9LCBvLCB7CgkJCQkJcXVldWU6IGZhbHNlLAoJCQkJCWNvbXBsZXRlOiBmdW5jdGlvbigpIHsKCQkJCQkJZGZkLnJlc29sdmUoIHN0eWxlSW5mbyApOwoJCQkJCX0KCQkJCX0gKTsKCgkJCXRoaXMuZWwuYW5pbWF0ZSggdGhpcy5kaWZmLCBvcHRzICk7CgkJCXJldHVybiBkZmQucHJvbWlzZSgpOwoJCX0gKTsKCgkJLy8gT25jZSBhbGwgYW5pbWF0aW9ucyBoYXZlIGNvbXBsZXRlZDoKCQkkLndoZW4uYXBwbHkoICQsIGFsbEFuaW1hdGlvbnMuZ2V0KCkgKS5kb25lKCBmdW5jdGlvbigpIHsKCgkJCS8vIFNldCB0aGUgZmluYWwgY2xhc3MKCQkJYXBwbHlDbGFzc0NoYW5nZSgpOwoKCQkJLy8gRm9yIGVhY2ggYW5pbWF0ZWQgZWxlbWVudCwKCQkJLy8gY2xlYXIgYWxsIGNzcyBwcm9wZXJ0aWVzIHRoYXQgd2VyZSBhbmltYXRlZAoJCQkkLmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oKSB7CgkJCQl2YXIgZWwgPSB0aGlzLmVsOwoJCQkJJC5lYWNoKCB0aGlzLmRpZmYsIGZ1bmN0aW9uKCBrZXkgKSB7CgkJCQkJZWwuY3NzKCBrZXksICIiICk7CgkJCQl9ICk7CgkJCX0gKTsKCgkJCS8vIFRoaXMgaXMgZ3Vhcm50ZWVkIHRvIGJlIHRoZXJlIGlmIHlvdSB1c2UgalF1ZXJ5LnNwZWVkKCkKCQkJLy8gaXQgYWxzbyBoYW5kbGVzIGRlcXVldWluZyB0aGUgbmV4dCBhbmltLi4uCgkJCW8uY29tcGxldGUuY2FsbCggYW5pbWF0ZWRbIDAgXSApOwoJCX0gKTsKCX0gKTsKfTsKCiQuZm4uZXh0ZW5kKCB7CglhZGRDbGFzczogKCBmdW5jdGlvbiggb3JpZyApIHsKCQlyZXR1cm4gZnVuY3Rpb24oIGNsYXNzTmFtZXMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkgewoJCQlyZXR1cm4gc3BlZWQgPwoJCQkJJC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKCB0aGlzLAoJCQkJCXsgYWRkOiBjbGFzc05hbWVzIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkgOgoJCQkJb3JpZy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJfTsKCX0gKSggJC5mbi5hZGRDbGFzcyApLAoKCXJlbW92ZUNsYXNzOiAoIGZ1bmN0aW9uKCBvcmlnICkgewoJCXJldHVybiBmdW5jdGlvbiggY2xhc3NOYW1lcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7CgkJCXJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA\/CgkJCQkkLmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwoIHRoaXMsCgkJCQkJeyByZW1vdmU6IGNsYXNzTmFtZXMgfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSA6CgkJCQlvcmlnLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQl9OwoJfSApKCAkLmZuLnJlbW92ZUNsYXNzICksCgoJdG9nZ2xlQ2xhc3M6ICggZnVuY3Rpb24oIG9yaWcgKSB7CgkJcmV0dXJuIGZ1bmN0aW9uKCBjbGFzc05hbWVzLCBmb3JjZSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7CgkJCWlmICggdHlwZW9mIGZvcmNlID09PSAiYm9vbGVhbiIgfHwgZm9yY2UgPT09IHVuZGVmaW5lZCApIHsKCQkJCWlmICggIXNwZWVkICkgewoKCQkJCQkvLyBXaXRob3V0IHNwZWVkIHBhcmFtZXRlcgoJCQkJCXJldHVybiBvcmlnLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJCX0gZWxzZSB7CgkJCQkJcmV0dXJuICQuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCggdGhpcywKCQkJCQkJKCBmb3JjZSA\/IHsgYWRkOiBjbGFzc05hbWVzIH0gOiB7IHJlbW92ZTogY2xhc3NOYW1lcyB9ICksCgkJCQkJCXNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7CgkJCQl9CgkJCX0gZWxzZSB7CgoJCQkJLy8gV2l0aG91dCBmb3JjZSBwYXJhbWV0ZXIKCQkJCXJldHVybiAkLmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwoIHRoaXMsCgkJCQkJeyB0b2dnbGU6IGNsYXNzTmFtZXMgfSwgZm9yY2UsIHNwZWVkLCBlYXNpbmcgKTsKCQkJfQoJCX07Cgl9ICkoICQuZm4udG9nZ2xlQ2xhc3MgKSwKCglzd2l0Y2hDbGFzczogZnVuY3Rpb24oIHJlbW92ZSwgYWRkLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHsKCQlyZXR1cm4gJC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKCB0aGlzLCB7CgkJCWFkZDogYWRkLAoJCQlyZW1vdmU6IHJlbW92ZQoJCX0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7Cgl9Cn0gKTsKCn0gKSgpOwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVGRkVDVFMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiggZnVuY3Rpb24oKSB7CgppZiAoICQuZXhwciAmJiAkLmV4cHIuZmlsdGVycyAmJiAkLmV4cHIuZmlsdGVycy5hbmltYXRlZCApIHsKCSQuZXhwci5maWx0ZXJzLmFuaW1hdGVkID0gKCBmdW5jdGlvbiggb3JpZyApIHsKCQlyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXJldHVybiAhISQoIGVsZW0gKS5kYXRhKCBkYXRhU3BhY2VBbmltYXRlZCApIHx8IG9yaWcoIGVsZW0gKTsKCQl9OwoJfSApKCAkLmV4cHIuZmlsdGVycy5hbmltYXRlZCApOwp9CgppZiAoICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSApIHsKCSQuZXh0ZW5kKCAkLmVmZmVjdHMsIHsKCgkJLy8gU2F2ZXMgYSBzZXQgb2YgcHJvcGVydGllcyBpbiBhIGRhdGEgc3RvcmFnZQoJCXNhdmU6IGZ1bmN0aW9uKCBlbGVtZW50LCBzZXQgKSB7CgkJCXZhciBpID0gMCwgbGVuZ3RoID0gc2V0Lmxlbmd0aDsKCQkJZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCQlpZiAoIHNldFsgaSBdICE9PSBudWxsICkgewoJCQkJCWVsZW1lbnQuZGF0YSggZGF0YVNwYWNlICsgc2V0WyBpIF0sIGVsZW1lbnRbIDAgXS5zdHlsZVsgc2V0WyBpIF0gXSApOwoJCQkJfQoJCQl9CgkJfSwKCgkJLy8gUmVzdG9yZXMgYSBzZXQgb2YgcHJldmlvdXNseSBzYXZlZCBwcm9wZXJ0aWVzIGZyb20gYSBkYXRhIHN0b3JhZ2UKCQlyZXN0b3JlOiBmdW5jdGlvbiggZWxlbWVudCwgc2V0ICkgewoJCQl2YXIgdmFsLCBpID0gMCwgbGVuZ3RoID0gc2V0Lmxlbmd0aDsKCQkJZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCQlpZiAoIHNldFsgaSBdICE9PSBudWxsICkgewoJCQkJCXZhbCA9IGVsZW1lbnQuZGF0YSggZGF0YVNwYWNlICsgc2V0WyBpIF0gKTsKCQkJCQllbGVtZW50LmNzcyggc2V0WyBpIF0sIHZhbCApOwoJCQkJfQoJCQl9CgkJfSwKCgkJc2V0TW9kZTogZnVuY3Rpb24oIGVsLCBtb2RlICkgewoJCQlpZiAoIG1vZGUgPT09ICJ0b2dnbGUiICkgewoJCQkJbW9kZSA9IGVsLmlzKCAiOmhpZGRlbiIgKSA\/ICJzaG93IiA6ICJoaWRlIjsKCQkJfQoJCQlyZXR1cm4gbW9kZTsKCQl9LAoKCQkvLyBXcmFwcyB0aGUgZWxlbWVudCBhcm91bmQgYSB3cmFwcGVyIHRoYXQgY29waWVzIHBvc2l0aW9uIHByb3BlcnRpZXMKCQljcmVhdGVXcmFwcGVyOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCgkJCS8vIElmIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgd3JhcHBlZCwgcmV0dXJuIGl0CgkJCWlmICggZWxlbWVudC5wYXJlbnQoKS5pcyggIi51aS1lZmZlY3RzLXdyYXBwZXIiICkgKSB7CgkJCQlyZXR1cm4gZWxlbWVudC5wYXJlbnQoKTsKCQkJfQoKCQkJLy8gV3JhcCB0aGUgZWxlbWVudAoJCQl2YXIgcHJvcHMgPSB7CgkJCQkJd2lkdGg6IGVsZW1lbnQub3V0ZXJXaWR0aCggdHJ1ZSApLAoJCQkJCWhlaWdodDogZWxlbWVudC5vdXRlckhlaWdodCggdHJ1ZSApLAoJCQkJCSJmbG9hdCI6IGVsZW1lbnQuY3NzKCAiZmxvYXQiICkKCQkJCX0sCgkJCQl3cmFwcGVyID0gJCggIjxkaXY+PC9kaXY+IiApCgkJCQkJLmFkZENsYXNzKCAidWktZWZmZWN0cy13cmFwcGVyIiApCgkJCQkJLmNzcyggewoJCQkJCQlmb250U2l6ZTogIjEwMCUiLAoJCQkJCQliYWNrZ3JvdW5kOiAidHJhbnNwYXJlbnQiLAoJCQkJCQlib3JkZXI6ICJub25lIiwKCQkJCQkJbWFyZ2luOiAwLAoJCQkJCQlwYWRkaW5nOiAwCgkJCQkJfSApLAoKCQkJCS8vIFN0b3JlIHRoZSBzaXplIGluIGNhc2Ugd2lkdGgvaGVpZ2h0IGFyZSBkZWZpbmVkIGluICUgLSBGaXhlcyAjNTI0NQoJCQkJc2l6ZSA9IHsKCQkJCQl3aWR0aDogZWxlbWVudC53aWR0aCgpLAoJCQkJCWhlaWdodDogZWxlbWVudC5oZWlnaHQoKQoJCQkJfSwKCQkJCWFjdGl2ZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7CgoJCQkvLyBTdXBwb3J0OiBGaXJlZm94CgkJCS8vIEZpcmVmb3ggaW5jb3JyZWN0bHkgZXhwb3NlcyBhbm9ueW1vdXMgY29udGVudAoJCQkvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NjE2NjQKCQkJdHJ5IHsKCQkJCWFjdGl2ZS5pZDsKCQkJfSBjYXRjaCAoIGUgKSB7CgkJCQlhY3RpdmUgPSBkb2N1bWVudC5ib2R5OwoJCQl9CgoJCQllbGVtZW50LndyYXAoIHdyYXBwZXIgKTsKCgkJCS8vIEZpeGVzICM3NTk1IC0gRWxlbWVudHMgbG9zZSBmb2N1cyB3aGVuIHdyYXBwZWQuCgkJCWlmICggZWxlbWVudFsgMCBdID09PSBhY3RpdmUgfHwgJC5jb250YWlucyggZWxlbWVudFsgMCBdLCBhY3RpdmUgKSApIHsKCQkJCSQoIGFjdGl2ZSApLnRyaWdnZXIoICJmb2N1cyIgKTsKCQkJfQoKCQkJLy8gSG90Zml4IGZvciBqUXVlcnkgMS40IHNpbmNlIHNvbWUgY2hhbmdlIGluIHdyYXAoKSBzZWVtcyB0byBhY3R1YWxseQoJCQkvLyBsb3NlIHRoZSByZWZlcmVuY2UgdG8gdGhlIHdyYXBwZWQgZWxlbWVudAoJCQl3cmFwcGVyID0gZWxlbWVudC5wYXJlbnQoKTsKCgkJCS8vIFRyYW5zZmVyIHBvc2l0aW9uaW5nIHByb3BlcnRpZXMgdG8gdGhlIHdyYXBwZXIKCQkJaWYgKCBlbGVtZW50LmNzcyggInBvc2l0aW9uIiApID09PSAic3RhdGljIiApIHsKCQkJCXdyYXBwZXIuY3NzKCB7IHBvc2l0aW9uOiAicmVsYXRpdmUiIH0gKTsKCQkJCWVsZW1lbnQuY3NzKCB7IHBvc2l0aW9uOiAicmVsYXRpdmUiIH0gKTsKCQkJfSBlbHNlIHsKCQkJCSQuZXh0ZW5kKCBwcm9wcywgewoJCQkJCXBvc2l0aW9uOiBlbGVtZW50LmNzcyggInBvc2l0aW9uIiApLAoJCQkJCXpJbmRleDogZWxlbWVudC5jc3MoICJ6LWluZGV4IiApCgkJCQl9ICk7CgkJCQkkLmVhY2goIFsgInRvcCIsICJsZWZ0IiwgImJvdHRvbSIsICJyaWdodCIgXSwgZnVuY3Rpb24oIGksIHBvcyApIHsKCQkJCQlwcm9wc1sgcG9zIF0gPSBlbGVtZW50LmNzcyggcG9zICk7CgkJCQkJaWYgKCBpc05hTiggcGFyc2VJbnQoIHByb3BzWyBwb3MgXSwgMTAgKSApICkgewoJCQkJCQlwcm9wc1sgcG9zIF0gPSAiYXV0byI7CgkJCQkJfQoJCQkJfSApOwoJCQkJZWxlbWVudC5jc3MoIHsKCQkJCQlwb3NpdGlvbjogInJlbGF0aXZlIiwKCQkJCQl0b3A6IDAsCgkJCQkJbGVmdDogMCwKCQkJCQlyaWdodDogImF1dG8iLAoJCQkJCWJvdHRvbTogImF1dG8iCgkJCQl9ICk7CgkJCX0KCQkJZWxlbWVudC5jc3MoIHNpemUgKTsKCgkJCXJldHVybiB3cmFwcGVyLmNzcyggcHJvcHMgKS5zaG93KCk7CgkJfSwKCgkJcmVtb3ZlV3JhcHBlcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJCXZhciBhY3RpdmUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50OwoKCQkJaWYgKCBlbGVtZW50LnBhcmVudCgpLmlzKCAiLnVpLWVmZmVjdHMtd3JhcHBlciIgKSApIHsKCQkJCWVsZW1lbnQucGFyZW50KCkucmVwbGFjZVdpdGgoIGVsZW1lbnQgKTsKCgkJCQkvLyBGaXhlcyAjNzU5NSAtIEVsZW1lbnRzIGxvc2UgZm9jdXMgd2hlbiB3cmFwcGVkLgoJCQkJaWYgKCBlbGVtZW50WyAwIF0gPT09IGFjdGl2ZSB8fCAkLmNvbnRhaW5zKCBlbGVtZW50WyAwIF0sIGFjdGl2ZSApICkgewoJCQkJCSQoIGFjdGl2ZSApLnRyaWdnZXIoICJmb2N1cyIgKTsKCQkJCX0KCQkJfQoKCQkJcmV0dXJuIGVsZW1lbnQ7CgkJfQoJfSApOwp9CgokLmV4dGVuZCggJC5lZmZlY3RzLCB7Cgl2ZXJzaW9uOiAiMS4xMi4xIiwKCglkZWZpbmU6IGZ1bmN0aW9uKCBuYW1lLCBtb2RlLCBlZmZlY3QgKSB7CgkJaWYgKCAhZWZmZWN0ICkgewoJCQllZmZlY3QgPSBtb2RlOwoJCQltb2RlID0gImVmZmVjdCI7CgkJfQoKCQkkLmVmZmVjdHMuZWZmZWN0WyBuYW1lIF0gPSBlZmZlY3Q7CgkJJC5lZmZlY3RzLmVmZmVjdFsgbmFtZSBdLm1vZGUgPSBtb2RlOwoKCQlyZXR1cm4gZWZmZWN0OwoJfSwKCglzY2FsZWREaW1lbnNpb25zOiBmdW5jdGlvbiggZWxlbWVudCwgcGVyY2VudCwgZGlyZWN0aW9uICkgewoJCWlmICggcGVyY2VudCA9PT0gMCApIHsKCQkJcmV0dXJuIHsKCQkJCWhlaWdodDogMCwKCQkJCXdpZHRoOiAwLAoJCQkJb3V0ZXJIZWlnaHQ6IDAsCgkJCQlvdXRlcldpZHRoOiAwCgkJCX07CgkJfQoKCQl2YXIgeCA9IGRpcmVjdGlvbiAhPT0gImhvcml6b250YWwiID8gKCAoIHBlcmNlbnQgfHwgMTAwICkgLyAxMDAgKSA6IDEsCgkJCXkgPSBkaXJlY3Rpb24gIT09ICJ2ZXJ0aWNhbCIgPyAoICggcGVyY2VudCB8fCAxMDAgKSAvIDEwMCApIDogMTsKCgkJcmV0dXJuIHsKCQkJaGVpZ2h0OiBlbGVtZW50LmhlaWdodCgpICogeSwKCQkJd2lkdGg6IGVsZW1lbnQud2lkdGgoKSAqIHgsCgkJCW91dGVySGVpZ2h0OiBlbGVtZW50Lm91dGVySGVpZ2h0KCkgKiB5LAoJCQlvdXRlcldpZHRoOiBlbGVtZW50Lm91dGVyV2lkdGgoKSAqIHgKCQl9OwoKCX0sCgoJY2xpcFRvQm94OiBmdW5jdGlvbiggYW5pbWF0aW9uICkgewoJCXJldHVybiB7CgkJCXdpZHRoOiBhbmltYXRpb24uY2xpcC5yaWdodCAtIGFuaW1hdGlvbi5jbGlwLmxlZnQsCgkJCWhlaWdodDogYW5pbWF0aW9uLmNsaXAuYm90dG9tIC0gYW5pbWF0aW9uLmNsaXAudG9wLAoJCQlsZWZ0OiBhbmltYXRpb24uY2xpcC5sZWZ0LAoJCQl0b3A6IGFuaW1hdGlvbi5jbGlwLnRvcAoJCX07Cgl9LAoKCS8vIEluamVjdHMgcmVjZW50bHkgcXVldWVkIGZ1bmN0aW9ucyB0byBiZSBmaXJzdCBpbiBsaW5lIChhZnRlciAiaW5wcm9ncmVzcyIpCgl1bnNoaWZ0OiBmdW5jdGlvbiggZWxlbWVudCwgcXVldWVMZW5ndGgsIGNvdW50ICkgewoJCXZhciBxdWV1ZSA9IGVsZW1lbnQucXVldWUoKTsKCgkJaWYgKCBxdWV1ZUxlbmd0aCA+IDEgKSB7CgkJCXF1ZXVlLnNwbGljZS5hcHBseSggcXVldWUsCgkJCQlbIDEsIDAgXS5jb25jYXQoIHF1ZXVlLnNwbGljZSggcXVldWVMZW5ndGgsIGNvdW50ICkgKSApOwoJCX0KCQllbGVtZW50LmRlcXVldWUoKTsKCX0sCgoJc2F2ZVN0eWxlOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQllbGVtZW50LmRhdGEoIGRhdGFTcGFjZVN0eWxlLCBlbGVtZW50WyAwIF0uc3R5bGUuY3NzVGV4dCApOwoJfSwKCglyZXN0b3JlU3R5bGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkgewoJCWVsZW1lbnRbIDAgXS5zdHlsZS5jc3NUZXh0ID0gZWxlbWVudC5kYXRhKCBkYXRhU3BhY2VTdHlsZSApIHx8ICIiOwoJCWVsZW1lbnQucmVtb3ZlRGF0YSggZGF0YVNwYWNlU3R5bGUgKTsKCX0sCgoJbW9kZTogZnVuY3Rpb24oIGVsZW1lbnQsIG1vZGUgKSB7CgkJdmFyIGhpZGRlbiA9IGVsZW1lbnQuaXMoICI6aGlkZGVuIiApOwoKCQlpZiAoIG1vZGUgPT09ICJ0b2dnbGUiICkgewoJCQltb2RlID0gaGlkZGVuID8gInNob3ciIDogImhpZGUiOwoJCX0KCQlpZiAoIGhpZGRlbiA\/IG1vZGUgPT09ICJoaWRlIiA6IG1vZGUgPT09ICJzaG93IiApIHsKCQkJbW9kZSA9ICJub25lIjsKCQl9CgkJcmV0dXJuIG1vZGU7Cgl9LAoKCS8vIFRyYW5zbGF0ZXMgYSBbdG9wLGxlZnRdIGFycmF5IGludG8gYSBiYXNlbGluZSB2YWx1ZQoJZ2V0QmFzZWxpbmU6IGZ1bmN0aW9uKCBvcmlnaW4sIG9yaWdpbmFsICkgewoJCXZhciB5LCB4OwoKCQlzd2l0Y2ggKCBvcmlnaW5bIDAgXSApIHsKCQljYXNlICJ0b3AiOgoJCQl5ID0gMDsKCQkJYnJlYWs7CgkJY2FzZSAibWlkZGxlIjoKCQkJeSA9IDAuNTsKCQkJYnJlYWs7CgkJY2FzZSAiYm90dG9tIjoKCQkJeSA9IDE7CgkJCWJyZWFrOwoJCWRlZmF1bHQ6CgkJCXkgPSBvcmlnaW5bIDAgXSAvIG9yaWdpbmFsLmhlaWdodDsKCQl9CgoJCXN3aXRjaCAoIG9yaWdpblsgMSBdICkgewoJCWNhc2UgImxlZnQiOgoJCQl4ID0gMDsKCQkJYnJlYWs7CgkJY2FzZSAiY2VudGVyIjoKCQkJeCA9IDAuNTsKCQkJYnJlYWs7CgkJY2FzZSAicmlnaHQiOgoJCQl4ID0gMTsKCQkJYnJlYWs7CgkJZGVmYXVsdDoKCQkJeCA9IG9yaWdpblsgMSBdIC8gb3JpZ2luYWwud2lkdGg7CgkJfQoKCQlyZXR1cm4gewoJCQl4OiB4LAoJCQl5OiB5CgkJfTsKCX0sCgoJLy8gQ3JlYXRlcyBhIHBsYWNlaG9sZGVyIGVsZW1lbnQgc28gdGhhdCB0aGUgb3JpZ2luYWwgZWxlbWVudCBjYW4gYmUgbWFkZSBhYnNvbHV0ZQoJY3JlYXRlUGxhY2Vob2xkZXI6IGZ1bmN0aW9uKCBlbGVtZW50ICkgewoJCXZhciBwbGFjZWhvbGRlciwKCQkJY3NzUG9zaXRpb24gPSBlbGVtZW50LmNzcyggInBvc2l0aW9uIiApLAoJCQlwb3NpdGlvbiA9IGVsZW1lbnQucG9zaXRpb24oKTsKCgkJLy8gTG9jayBpbiBtYXJnaW5zIGZpcnN0IHRvIGFjY291bnQgZm9yIGZvcm0gZWxlbWVudHMsIHdoaWNoCgkJLy8gd2lsbCBjaGFuZ2UgbWFyZ2luIGlmIHlvdSBleHBsaWNpdGx5IHNldCBoZWlnaHQKCQkvLyBzZWU6IGh0dHA6Ly9qc2ZpZGRsZS5uZXQvSlpTTXQvMy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEwNzM4MAoJCS8vIFN1cHBvcnQ6IFNhZmFyaQoJCWVsZW1lbnQuY3NzKCB7CgkJCW1hcmdpblRvcDogZWxlbWVudC5jc3MoICJtYXJnaW5Ub3AiICksCgkJCW1hcmdpbkJvdHRvbTogZWxlbWVudC5jc3MoICJtYXJnaW5Cb3R0b20iICksCgkJCW1hcmdpbkxlZnQ6IGVsZW1lbnQuY3NzKCAibWFyZ2luTGVmdCIgKSwKCQkJbWFyZ2luUmlnaHQ6IGVsZW1lbnQuY3NzKCAibWFyZ2luUmlnaHQiICkKCQl9ICkKCQkub3V0ZXJXaWR0aCggZWxlbWVudC5vdXRlcldpZHRoKCkgKQoJCS5vdXRlckhlaWdodCggZWxlbWVudC5vdXRlckhlaWdodCgpICk7CgoJCWlmICggL14oc3RhdGljfHJlbGF0aXZlKS8udGVzdCggY3NzUG9zaXRpb24gKSApIHsKCQkJY3NzUG9zaXRpb24gPSAiYWJzb2x1dGUiOwoKCQkJcGxhY2Vob2xkZXIgPSAkKCAiPCIgKyBlbGVtZW50WyAwIF0ubm9kZU5hbWUgKyAiPiIgKS5pbnNlcnRBZnRlciggZWxlbWVudCApLmNzcyggewoKCQkJCS8vIENvbnZlcnQgaW5saW5lIHRvIGlubGluZSBibG9jayB0byBhY2NvdW50IGZvciBpbmxpbmUgZWxlbWVudHMKCQkJCS8vIHRoYXQgdHVybiB0byBpbmxpbmUgYmxvY2sgYmFzZWQgb24gY29udGVudCAobGlrZSBpbWcpCgkJCQlkaXNwbGF5OiAvXihpbmxpbmV8cnVieSkvLnRlc3QoIGVsZW1lbnQuY3NzKCAiZGlzcGxheSIgKSApID8KCQkJCQkiaW5saW5lLWJsb2NrIiA6CgkJCQkJImJsb2NrIiwKCQkJCXZpc2liaWxpdHk6ICJoaWRkZW4iLAoKCQkJCS8vIE1hcmdpbnMgbmVlZCB0byBiZSBzZXQgdG8gYWNjb3VudCBmb3IgbWFyZ2luIGNvbGxhcHNlCgkJCQltYXJnaW5Ub3A6IGVsZW1lbnQuY3NzKCAibWFyZ2luVG9wIiApLAoJCQkJbWFyZ2luQm90dG9tOiBlbGVtZW50LmNzcyggIm1hcmdpbkJvdHRvbSIgKSwKCQkJCW1hcmdpbkxlZnQ6IGVsZW1lbnQuY3NzKCAibWFyZ2luTGVmdCIgKSwKCQkJCW1hcmdpblJpZ2h0OiBlbGVtZW50LmNzcyggIm1hcmdpblJpZ2h0IiApLAoJCQkJImZsb2F0IjogZWxlbWVudC5jc3MoICJmbG9hdCIgKQoJCQl9ICkKCQkJLm91dGVyV2lkdGgoIGVsZW1lbnQub3V0ZXJXaWR0aCgpICkKCQkJLm91dGVySGVpZ2h0KCBlbGVtZW50Lm91dGVySGVpZ2h0KCkgKQoJCQkuYWRkQ2xhc3MoICJ1aS1lZmZlY3RzLXBsYWNlaG9sZGVyIiApOwoKCQkJZWxlbWVudC5kYXRhKCBkYXRhU3BhY2UgKyAicGxhY2Vob2xkZXIiLCBwbGFjZWhvbGRlciApOwoJCX0KCgkJZWxlbWVudC5jc3MoIHsKCQkJcG9zaXRpb246IGNzc1Bvc2l0aW9uLAoJCQlsZWZ0OiBwb3NpdGlvbi5sZWZ0LAoJCQl0b3A6IHBvc2l0aW9uLnRvcAoJCX0gKTsKCgkJcmV0dXJuIHBsYWNlaG9sZGVyOwoJfSwKCglyZW1vdmVQbGFjZWhvbGRlcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJdmFyIGRhdGFLZXkgPSBkYXRhU3BhY2UgKyAicGxhY2Vob2xkZXIiLAoJCQkJcGxhY2Vob2xkZXIgPSBlbGVtZW50LmRhdGEoIGRhdGFLZXkgKTsKCgkJaWYgKCBwbGFjZWhvbGRlciApIHsKCQkJcGxhY2Vob2xkZXIucmVtb3ZlKCk7CgkJCWVsZW1lbnQucmVtb3ZlRGF0YSggZGF0YUtleSApOwoJCX0KCX0sCgoJLy8gUmVtb3ZlcyBhIHBsYWNlaG9sZGVyIGlmIGl0IGV4aXN0cyBhbmQgcmVzdG9yZXMKCS8vIHByb3BlcnRpZXMgdGhhdCB3ZXJlIG1vZGlmaWVkIGR1cmluZyBwbGFjZWhvbGRlciBjcmVhdGlvbgoJY2xlYW5VcDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJJC5lZmZlY3RzLnJlc3RvcmVTdHlsZSggZWxlbWVudCApOwoJCSQuZWZmZWN0cy5yZW1vdmVQbGFjZWhvbGRlciggZWxlbWVudCApOwoJfSwKCglzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiggZWxlbWVudCwgbGlzdCwgZmFjdG9yLCB2YWx1ZSApIHsKCQl2YWx1ZSA9IHZhbHVlIHx8IHt9OwoJCSQuZWFjaCggbGlzdCwgZnVuY3Rpb24oIGksIHggKSB7CgkJCXZhciB1bml0ID0gZWxlbWVudC5jc3NVbml0KCB4ICk7CgkJCWlmICggdW5pdFsgMCBdID4gMCApIHsKCQkJCXZhbHVlWyB4IF0gPSB1bml0WyAwIF0gKiBmYWN0b3IgKyB1bml0WyAxIF07CgkJCX0KCQl9ICk7CgkJcmV0dXJuIHZhbHVlOwoJfQp9ICk7CgovLyBSZXR1cm4gYW4gZWZmZWN0IG9wdGlvbnMgb2JqZWN0IGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVyczoKZnVuY3Rpb24gX25vcm1hbGl6ZUFyZ3VtZW50cyggZWZmZWN0LCBvcHRpb25zLCBzcGVlZCwgY2FsbGJhY2sgKSB7CgoJLy8gQWxsb3cgcGFzc2luZyBhbGwgb3B0aW9ucyBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyCglpZiAoICQuaXNQbGFpbk9iamVjdCggZWZmZWN0ICkgKSB7CgkJb3B0aW9ucyA9IGVmZmVjdDsKCQllZmZlY3QgPSBlZmZlY3QuZWZmZWN0OwoJfQoKCS8vIENvbnZlcnQgdG8gYW4gb2JqZWN0CgllZmZlY3QgPSB7IGVmZmVjdDogZWZmZWN0IH07CgoJLy8gQ2F0Y2ggKGVmZmVjdCwgbnVsbCwgLi4uKQoJaWYgKCBvcHRpb25zID09IG51bGwgKSB7CgkJb3B0aW9ucyA9IHt9OwoJfQoKCS8vIENhdGNoIChlZmZlY3QsIGNhbGxiYWNrKQoJaWYgKCAkLmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHsKCQljYWxsYmFjayA9IG9wdGlvbnM7CgkJc3BlZWQgPSBudWxsOwoJCW9wdGlvbnMgPSB7fTsKCX0KCgkvLyBDYXRjaCAoZWZmZWN0LCBzcGVlZCwgPykKCWlmICggdHlwZW9mIG9wdGlvbnMgPT09ICJudW1iZXIiIHx8ICQuZnguc3BlZWRzWyBvcHRpb25zIF0gKSB7CgkJY2FsbGJhY2sgPSBzcGVlZDsKCQlzcGVlZCA9IG9wdGlvbnM7CgkJb3B0aW9ucyA9IHt9OwoJfQoKCS8vIENhdGNoIChlZmZlY3QsIG9wdGlvbnMsIGNhbGxiYWNrKQoJaWYgKCAkLmlzRnVuY3Rpb24oIHNwZWVkICkgKSB7CgkJY2FsbGJhY2sgPSBzcGVlZDsKCQlzcGVlZCA9IG51bGw7Cgl9CgoJLy8gQWRkIG9wdGlvbnMgdG8gZWZmZWN0CglpZiAoIG9wdGlvbnMgKSB7CgkJJC5leHRlbmQoIGVmZmVjdCwgb3B0aW9ucyApOwoJfQoKCXNwZWVkID0gc3BlZWQgfHwgb3B0aW9ucy5kdXJhdGlvbjsKCWVmZmVjdC5kdXJhdGlvbiA9ICQuZngub2ZmID8gMCA6CgkJdHlwZW9mIHNwZWVkID09PSAibnVtYmVyIiA\/IHNwZWVkIDoKCQlzcGVlZCBpbiAkLmZ4LnNwZWVkcyA\/ICQuZnguc3BlZWRzWyBzcGVlZCBdIDoKCQkkLmZ4LnNwZWVkcy5fZGVmYXVsdDsKCgllZmZlY3QuY29tcGxldGUgPSBjYWxsYmFjayB8fCBvcHRpb25zLmNvbXBsZXRlOwoKCXJldHVybiBlZmZlY3Q7Cn0KCmZ1bmN0aW9uIHN0YW5kYXJkQW5pbWF0aW9uT3B0aW9uKCBvcHRpb24gKSB7CgoJLy8gVmFsaWQgc3RhbmRhcmQgc3BlZWRzIChub3RoaW5nLCBudW1iZXIsIG5hbWVkIHNwZWVkKQoJaWYgKCAhb3B0aW9uIHx8IHR5cGVvZiBvcHRpb24gPT09ICJudW1iZXIiIHx8ICQuZnguc3BlZWRzWyBvcHRpb24gXSApIHsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvLyBJbnZhbGlkIHN0cmluZ3MgLSB0cmVhdCBhcyAibm9ybWFsIiBzcGVlZAoJaWYgKCB0eXBlb2Ygb3B0aW9uID09PSAic3RyaW5nIiAmJiAhJC5lZmZlY3RzLmVmZmVjdFsgb3B0aW9uIF0gKSB7CgkJcmV0dXJuIHRydWU7Cgl9CgoJLy8gQ29tcGxldGUgY2FsbGJhY2sKCWlmICggJC5pc0Z1bmN0aW9uKCBvcHRpb24gKSApIHsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvLyBPcHRpb25zIGhhc2ggKGJ1dCBub3QgbmFtaW5nIGFuIGVmZmVjdCkKCWlmICggdHlwZW9mIG9wdGlvbiA9PT0gIm9iamVjdCIgJiYgIW9wdGlvbi5lZmZlY3QgKSB7CgkJcmV0dXJuIHRydWU7Cgl9CgoJLy8gRGlkbid0IG1hdGNoIGFueSBzdGFuZGFyZCBBUEkKCXJldHVybiBmYWxzZTsKfQoKJC5mbi5leHRlbmQoIHsKCWVmZmVjdDogZnVuY3Rpb24oIC8qIGVmZmVjdCwgb3B0aW9ucywgc3BlZWQsIGNhbGxiYWNrICovICkgewoJCXZhciBhcmdzID0gX25vcm1hbGl6ZUFyZ3VtZW50cy5hcHBseSggdGhpcywgYXJndW1lbnRzICksCgkJCWVmZmVjdE1ldGhvZCA9ICQuZWZmZWN0cy5lZmZlY3RbIGFyZ3MuZWZmZWN0IF0sCgkJCWRlZmF1bHRNb2RlID0gZWZmZWN0TWV0aG9kLm1vZGUsCgkJCXF1ZXVlID0gYXJncy5xdWV1ZSwKCQkJcXVldWVOYW1lID0gcXVldWUgfHwgImZ4IiwKCQkJY29tcGxldGUgPSBhcmdzLmNvbXBsZXRlLAoJCQltb2RlID0gYXJncy5tb2RlLAoJCQltb2RlcyA9IFtdLAoJCQlwcmVmaWx0ZXIgPSBmdW5jdGlvbiggbmV4dCApIHsKCQkJCXZhciBlbCA9ICQoIHRoaXMgKSwKCQkJCQlub3JtYWxpemVkTW9kZSA9ICQuZWZmZWN0cy5tb2RlKCBlbCwgbW9kZSApIHx8IGRlZmF1bHRNb2RlOwoKCQkJCS8vIFNlbnRpbmVsIGZvciBkdWNrLXB1bmNoaW5nIHRoZSA6YW5pbWF0ZWQgcHN1ZWRvLXNlbGVjdG9yCgkJCQllbC5kYXRhKCBkYXRhU3BhY2VBbmltYXRlZCwgdHJ1ZSApOwoKCQkJCS8vIFNhdmUgZWZmZWN0IG1vZGUgZm9yIGxhdGVyIHVzZSwKCQkJCS8vIHdlIGNhbid0IGp1c3QgY2FsbCAkLmVmZmVjdHMubW9kZSBhZ2FpbiBsYXRlciwKCQkJCS8vIGFzIHRoZSAuc2hvdygpIGJlbG93IGRlc3Ryb3lzIHRoZSBpbml0aWFsIHN0YXRlCgkJCQltb2Rlcy5wdXNoKCBub3JtYWxpemVkTW9kZSApOwoKCQkJCS8vIFNlZSAkLnVpQmFja0NvbXBhdCBpbnNpZGUgb2YgcnVuKCkgZm9yIHJlbW92YWwgb2YgZGVmYXVsdE1vZGUgaW4gMS4xMwoJCQkJaWYgKCBkZWZhdWx0TW9kZSAmJiAoIG5vcm1hbGl6ZWRNb2RlID09PSAic2hvdyIgfHwKCQkJCQkJKCBub3JtYWxpemVkTW9kZSA9PT0gZGVmYXVsdE1vZGUgJiYgbm9ybWFsaXplZE1vZGUgPT09ICJoaWRlIiApICkgKSB7CgkJCQkJZWwuc2hvdygpOwoJCQkJfQoKCQkJCWlmICggIWRlZmF1bHRNb2RlIHx8IG5vcm1hbGl6ZWRNb2RlICE9PSAibm9uZSIgKSB7CgkJCQkJJC5lZmZlY3RzLnNhdmVTdHlsZSggZWwgKTsKCQkJCX0KCgkJCQlpZiAoICQuaXNGdW5jdGlvbiggbmV4dCApICkgewoJCQkJCW5leHQoKTsKCQkJCX0KCQkJfTsKCgkJaWYgKCAkLmZ4Lm9mZiB8fCAhZWZmZWN0TWV0aG9kICkgewoKCQkJLy8gRGVsZWdhdGUgdG8gdGhlIG9yaWdpbmFsIG1ldGhvZCAoZS5nLiwgLnNob3coKSkgaWYgcG9zc2libGUKCQkJaWYgKCBtb2RlICkgewoJCQkJcmV0dXJuIHRoaXNbIG1vZGUgXSggYXJncy5kdXJhdGlvbiwgY29tcGxldGUgKTsKCQkJfSBlbHNlIHsKCQkJCXJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkgewoJCQkJCWlmICggY29tcGxldGUgKSB7CgkJCQkJCWNvbXBsZXRlLmNhbGwoIHRoaXMgKTsKCQkJCQl9CgkJCQl9ICk7CgkJCX0KCQl9CgoJCWZ1bmN0aW9uIHJ1biggbmV4dCApIHsKCQkJdmFyIGVsZW0gPSAkKCB0aGlzICk7CgoJCQlmdW5jdGlvbiBjbGVhbnVwKCkgewoJCQkJZWxlbS5yZW1vdmVEYXRhKCBkYXRhU3BhY2VBbmltYXRlZCApOwoKCQkJCSQuZWZmZWN0cy5jbGVhblVwKCBlbGVtICk7CgoJCQkJaWYgKCBhcmdzLm1vZGUgPT09ICJoaWRlIiApIHsKCQkJCQllbGVtLmhpZGUoKTsKCQkJCX0KCgkJCQlkb25lKCk7CgkJCX0KCgkJCWZ1bmN0aW9uIGRvbmUoKSB7CgkJCQlpZiAoICQuaXNGdW5jdGlvbiggY29tcGxldGUgKSApIHsKCQkJCQljb21wbGV0ZS5jYWxsKCBlbGVtWyAwIF0gKTsKCQkJCX0KCgkJCQlpZiAoICQuaXNGdW5jdGlvbiggbmV4dCApICkgewoJCQkJCW5leHQoKTsKCQkJCX0KCQkJfQoKCQkJLy8gT3ZlcnJpZGUgbW9kZSBvcHRpb24gb24gYSBwZXIgZWxlbWVudCBiYXNpcywKCQkJLy8gYXMgdG9nZ2xlIGNhbiBiZSBlaXRoZXIgc2hvdyBvciBoaWRlIGRlcGVuZGluZyBvbiBlbGVtZW50IHN0YXRlCgkJCWFyZ3MubW9kZSA9IG1vZGVzLnNoaWZ0KCk7CgoJCQlpZiAoICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSAmJiAhZGVmYXVsdE1vZGUgKSB7CgkJCQlpZiAoIGVsZW0uaXMoICI6aGlkZGVuIiApID8gbW9kZSA9PT0gImhpZGUiIDogbW9kZSA9PT0gInNob3ciICkgewoKCQkJCQkvLyBDYWxsIHRoZSBjb3JlIG1ldGhvZCB0byB0cmFjayAib2xkZGlzcGxheSIgcHJvcGVybHkKCQkJCQllbGVtWyBtb2RlIF0oKTsKCQkJCQlkb25lKCk7CgkJCQl9IGVsc2UgewoJCQkJCWVmZmVjdE1ldGhvZC5jYWxsKCBlbGVtWyAwIF0sIGFyZ3MsIGRvbmUgKTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCWlmICggYXJncy5tb2RlID09PSAibm9uZSIgKSB7CgoJCQkJCS8vIENhbGwgdGhlIGNvcmUgbWV0aG9kIHRvIHRyYWNrICJvbGRkaXNwbGF5IiBwcm9wZXJseQoJCQkJCWVsZW1bIG1vZGUgXSgpOwoJCQkJCWRvbmUoKTsKCQkJCX0gZWxzZSB7CgkJCQkJZWZmZWN0TWV0aG9kLmNhbGwoIGVsZW1bIDAgXSwgYXJncywgY2xlYW51cCApOwoJCQkJfQoJCQl9CgkJfQoKCQkvLyBSdW4gcHJlZmlsdGVyIG9uIGFsbCBlbGVtZW50cyBmaXJzdCB0byBlbnN1cmUgdGhhdAoJCS8vIGFueSBzaG93aW5nIG9yIGhpZGluZyBoYXBwZW5zIGJlZm9yZSBwbGFjZWhvbGRlciBjcmVhdGlvbiwKCQkvLyB3aGljaCBlbnN1cmVzIHRoYXQgYW55IGxheW91dCBjaGFuZ2VzIGFyZSBjb3JyZWN0bHkgY2FwdHVyZWQuCgkJcmV0dXJuIHF1ZXVlID09PSBmYWxzZSA\/CgkJCXRoaXMuZWFjaCggcHJlZmlsdGVyICkuZWFjaCggcnVuICkgOgoJCQl0aGlzLnF1ZXVlKCBxdWV1ZU5hbWUsIHByZWZpbHRlciApLnF1ZXVlKCBxdWV1ZU5hbWUsIHJ1biApOwoJfSwKCglzaG93OiAoIGZ1bmN0aW9uKCBvcmlnICkgewoJCXJldHVybiBmdW5jdGlvbiggb3B0aW9uICkgewoJCQlpZiAoIHN0YW5kYXJkQW5pbWF0aW9uT3B0aW9uKCBvcHRpb24gKSApIHsKCQkJCXJldHVybiBvcmlnLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJfSBlbHNlIHsKCQkJCXZhciBhcmdzID0gX25vcm1hbGl6ZUFyZ3VtZW50cy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCQlhcmdzLm1vZGUgPSAic2hvdyI7CgkJCQlyZXR1cm4gdGhpcy5lZmZlY3QuY2FsbCggdGhpcywgYXJncyApOwoJCQl9CgkJfTsKCX0gKSggJC5mbi5zaG93ICksCgoJaGlkZTogKCBmdW5jdGlvbiggb3JpZyApIHsKCQlyZXR1cm4gZnVuY3Rpb24oIG9wdGlvbiApIHsKCQkJaWYgKCBzdGFuZGFyZEFuaW1hdGlvbk9wdGlvbiggb3B0aW9uICkgKSB7CgkJCQlyZXR1cm4gb3JpZy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCX0gZWxzZSB7CgkJCQl2YXIgYXJncyA9IF9ub3JtYWxpemVBcmd1bWVudHMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQkJYXJncy5tb2RlID0gImhpZGUiOwoJCQkJcmV0dXJuIHRoaXMuZWZmZWN0LmNhbGwoIHRoaXMsIGFyZ3MgKTsKCQkJfQoJCX07Cgl9ICkoICQuZm4uaGlkZSApLAoKCXRvZ2dsZTogKCBmdW5jdGlvbiggb3JpZyApIHsKCQlyZXR1cm4gZnVuY3Rpb24oIG9wdGlvbiApIHsKCQkJaWYgKCBzdGFuZGFyZEFuaW1hdGlvbk9wdGlvbiggb3B0aW9uICkgfHwgdHlwZW9mIG9wdGlvbiA9PT0gImJvb2xlYW4iICkgewoJCQkJcmV0dXJuIG9yaWcuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQl9IGVsc2UgewoJCQkJdmFyIGFyZ3MgPSBfbm9ybWFsaXplQXJndW1lbnRzLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJCWFyZ3MubW9kZSA9ICJ0b2dnbGUiOwoJCQkJcmV0dXJuIHRoaXMuZWZmZWN0LmNhbGwoIHRoaXMsIGFyZ3MgKTsKCQkJfQoJCX07Cgl9ICkoICQuZm4udG9nZ2xlICksCgoJY3NzVW5pdDogZnVuY3Rpb24oIGtleSApIHsKCQl2YXIgc3R5bGUgPSB0aGlzLmNzcygga2V5ICksCgkJCXZhbCA9IFtdOwoKCQkkLmVhY2goIFsgImVtIiwgInB4IiwgIiUiLCAicHQiIF0sIGZ1bmN0aW9uKCBpLCB1bml0ICkgewoJCQlpZiAoIHN0eWxlLmluZGV4T2YoIHVuaXQgKSA+IDAgKSB7CgkJCQl2YWwgPSBbIHBhcnNlRmxvYXQoIHN0eWxlICksIHVuaXQgXTsKCQkJfQoJCX0gKTsKCQlyZXR1cm4gdmFsOwoJfSwKCgljc3NDbGlwOiBmdW5jdGlvbiggY2xpcE9iaiApIHsKCQlpZiAoIGNsaXBPYmogKSB7CgkJCXJldHVybiB0aGlzLmNzcyggImNsaXAiLCAicmVjdCgiICsgY2xpcE9iai50b3AgKyAicHggIiArIGNsaXBPYmoucmlnaHQgKyAicHggIiArCgkJCQljbGlwT2JqLmJvdHRvbSArICJweCAiICsgY2xpcE9iai5sZWZ0ICsgInB4KSIgKTsKCQl9CgkJcmV0dXJuIHBhcnNlQ2xpcCggdGhpcy5jc3MoICJjbGlwIiApLCB0aGlzICk7Cgl9LAoKCXRyYW5zZmVyOiBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHsKCQl2YXIgZWxlbWVudCA9ICQoIHRoaXMgKSwKCQkJdGFyZ2V0ID0gJCggb3B0aW9ucy50byApLAoJCQl0YXJnZXRGaXhlZCA9IHRhcmdldC5jc3MoICJwb3NpdGlvbiIgKSA9PT0gImZpeGVkIiwKCQkJYm9keSA9ICQoICJib2R5IiApLAoJCQlmaXhUb3AgPSB0YXJnZXRGaXhlZCA\/IGJvZHkuc2Nyb2xsVG9wKCkgOiAwLAoJCQlmaXhMZWZ0ID0gdGFyZ2V0Rml4ZWQgPyBib2R5LnNjcm9sbExlZnQoKSA6IDAsCgkJCWVuZFBvc2l0aW9uID0gdGFyZ2V0Lm9mZnNldCgpLAoJCQlhbmltYXRpb24gPSB7CgkJCQl0b3A6IGVuZFBvc2l0aW9uLnRvcCAtIGZpeFRvcCwKCQkJCWxlZnQ6IGVuZFBvc2l0aW9uLmxlZnQgLSBmaXhMZWZ0LAoJCQkJaGVpZ2h0OiB0YXJnZXQuaW5uZXJIZWlnaHQoKSwKCQkJCXdpZHRoOiB0YXJnZXQuaW5uZXJXaWR0aCgpCgkJCX0sCgkJCXN0YXJ0UG9zaXRpb24gPSBlbGVtZW50Lm9mZnNldCgpLAoJCQl0cmFuc2ZlciA9ICQoICI8ZGl2IGNsYXNzPSd1aS1lZmZlY3RzLXRyYW5zZmVyJz48L2Rpdj4iICkKCQkJCS5hcHBlbmRUbyggImJvZHkiICkKCQkJCS5hZGRDbGFzcyggb3B0aW9ucy5jbGFzc05hbWUgKQoJCQkJLmNzcyggewoJCQkJCXRvcDogc3RhcnRQb3NpdGlvbi50b3AgLSBmaXhUb3AsCgkJCQkJbGVmdDogc3RhcnRQb3NpdGlvbi5sZWZ0IC0gZml4TGVmdCwKCQkJCQloZWlnaHQ6IGVsZW1lbnQuaW5uZXJIZWlnaHQoKSwKCQkJCQl3aWR0aDogZWxlbWVudC5pbm5lcldpZHRoKCksCgkJCQkJcG9zaXRpb246IHRhcmdldEZpeGVkID8gImZpeGVkIiA6ICJhYnNvbHV0ZSIKCQkJCX0gKQoJCQkJLmFuaW1hdGUoIGFuaW1hdGlvbiwgb3B0aW9ucy5kdXJhdGlvbiwgb3B0aW9ucy5lYXNpbmcsIGZ1bmN0aW9uKCkgewoJCQkJCXRyYW5zZmVyLnJlbW92ZSgpOwoJCQkJCWlmICggJC5pc0Z1bmN0aW9uKCBkb25lICkgKSB7CgkJCQkJCWRvbmUoKTsKCQkJCQl9CgkJCQl9ICk7Cgl9Cn0gKTsKCmZ1bmN0aW9uIHBhcnNlQ2xpcCggc3RyLCBlbGVtZW50ICkgewoJCXZhciBvdXRlcldpZHRoID0gZWxlbWVudC5vdXRlcldpZHRoKCksCgkJCW91dGVySGVpZ2h0ID0gZWxlbWVudC5vdXRlckhlaWdodCgpLAoJCQljbGlwUmVnZXggPSAvXnJlY3RcKCgtP1xkKlwuP1xkKnB4fC0\/XGQrJXxhdXRvKSw\/XHMqKC0\/XGQqXC4\/XGQqcHh8LT9cZCslfGF1dG8pLD9ccyooLT9cZCpcLj9cZCpweHwtP1xkKyV8YXV0byksP1xzKigtP1xkKlwuP1xkKnB4fC0\/XGQrJXxhdXRvKVwpJC8sCgkJCXZhbHVlcyA9IGNsaXBSZWdleC5leGVjKCBzdHIgKSB8fCBbICIiLCAwLCBvdXRlcldpZHRoLCBvdXRlckhlaWdodCwgMCBdOwoKCQlyZXR1cm4gewoJCQl0b3A6IHBhcnNlRmxvYXQoIHZhbHVlc1sgMSBdICkgfHwgMCwKCQkJcmlnaHQ6IHZhbHVlc1sgMiBdID09PSAiYXV0byIgPyBvdXRlcldpZHRoIDogcGFyc2VGbG9hdCggdmFsdWVzWyAyIF0gKSwKCQkJYm90dG9tOiB2YWx1ZXNbIDMgXSA9PT0gImF1dG8iID8gb3V0ZXJIZWlnaHQgOiBwYXJzZUZsb2F0KCB2YWx1ZXNbIDMgXSApLAoJCQlsZWZ0OiBwYXJzZUZsb2F0KCB2YWx1ZXNbIDQgXSApIHx8IDAKCQl9Owp9CgokLmZ4LnN0ZXAuY2xpcCA9IGZ1bmN0aW9uKCBmeCApIHsKCWlmICggIWZ4LmNsaXBJbml0ICkgewoJCWZ4LnN0YXJ0ID0gJCggZnguZWxlbSApLmNzc0NsaXAoKTsKCQlpZiAoIHR5cGVvZiBmeC5lbmQgPT09ICJzdHJpbmciICkgewoJCQlmeC5lbmQgPSBwYXJzZUNsaXAoIGZ4LmVuZCwgZnguZWxlbSApOwoJCX0KCQlmeC5jbGlwSW5pdCA9IHRydWU7Cgl9CgoJJCggZnguZWxlbSApLmNzc0NsaXAoIHsKCQl0b3A6IGZ4LnBvcyAqICggZnguZW5kLnRvcCAtIGZ4LnN0YXJ0LnRvcCApICsgZnguc3RhcnQudG9wLAoJCXJpZ2h0OiBmeC5wb3MgKiAoIGZ4LmVuZC5yaWdodCAtIGZ4LnN0YXJ0LnJpZ2h0ICkgKyBmeC5zdGFydC5yaWdodCwKCQlib3R0b206IGZ4LnBvcyAqICggZnguZW5kLmJvdHRvbSAtIGZ4LnN0YXJ0LmJvdHRvbSApICsgZnguc3RhcnQuYm90dG9tLAoJCWxlZnQ6IGZ4LnBvcyAqICggZnguZW5kLmxlZnQgLSBmeC5zdGFydC5sZWZ0ICkgKyBmeC5zdGFydC5sZWZ0Cgl9ICk7Cn07Cgp9ICkoKTsKCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFQVNJTkcgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgooIGZ1bmN0aW9uKCkgewoKLy8gQmFzZWQgb24gZWFzaW5nIGVxdWF0aW9ucyBmcm9tIFJvYmVydCBQZW5uZXIgKGh0dHA6Ly93d3cucm9iZXJ0cGVubmVyLmNvbS9lYXNpbmcpCgp2YXIgYmFzZUVhc2luZ3MgPSB7fTsKCiQuZWFjaCggWyAiUXVhZCIsICJDdWJpYyIsICJRdWFydCIsICJRdWludCIsICJFeHBvIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKCWJhc2VFYXNpbmdzWyBuYW1lIF0gPSBmdW5jdGlvbiggcCApIHsKCQlyZXR1cm4gTWF0aC5wb3coIHAsIGkgKyAyICk7Cgl9Owp9ICk7CgokLmV4dGVuZCggYmFzZUVhc2luZ3MsIHsKCVNpbmU6IGZ1bmN0aW9uKCBwICkgewoJCXJldHVybiAxIC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJIC8gMiApOwoJfSwKCUNpcmM6IGZ1bmN0aW9uKCBwICkgewoJCXJldHVybiAxIC0gTWF0aC5zcXJ0KCAxIC0gcCAqIHAgKTsKCX0sCglFbGFzdGljOiBmdW5jdGlvbiggcCApIHsKCQlyZXR1cm4gcCA9PT0gMCB8fCBwID09PSAxID8gcCA6CgkJCS1NYXRoLnBvdyggMiwgOCAqICggcCAtIDEgKSApICogTWF0aC5zaW4oICggKCBwIC0gMSApICogODAgLSA3LjUgKSAqIE1hdGguUEkgLyAxNSApOwoJfSwKCUJhY2s6IGZ1bmN0aW9uKCBwICkgewoJCXJldHVybiBwICogcCAqICggMyAqIHAgLSAyICk7Cgl9LAoJQm91bmNlOiBmdW5jdGlvbiggcCApIHsKCQl2YXIgcG93MiwKCQkJYm91bmNlID0gNDsKCgkJd2hpbGUgKCBwIDwgKCAoIHBvdzIgPSBNYXRoLnBvdyggMiwgLS1ib3VuY2UgKSApIC0gMSApIC8gMTEgKSB7fQoJCXJldHVybiAxIC8gTWF0aC5wb3coIDQsIDMgLSBib3VuY2UgKSAtIDcuNTYyNSAqIE1hdGgucG93KCAoIHBvdzIgKiAzIC0gMiApIC8gMjIgLSBwLCAyICk7Cgl9Cn0gKTsKCiQuZWFjaCggYmFzZUVhc2luZ3MsIGZ1bmN0aW9uKCBuYW1lLCBlYXNlSW4gKSB7CgkkLmVhc2luZ1sgImVhc2VJbiIgKyBuYW1lIF0gPSBlYXNlSW47CgkkLmVhc2luZ1sgImVhc2VPdXQiICsgbmFtZSBdID0gZnVuY3Rpb24oIHAgKSB7CgkJcmV0dXJuIDEgLSBlYXNlSW4oIDEgLSBwICk7Cgl9OwoJJC5lYXNpbmdbICJlYXNlSW5PdXQiICsgbmFtZSBdID0gZnVuY3Rpb24oIHAgKSB7CgkJcmV0dXJuIHAgPCAwLjUgPwoJCQllYXNlSW4oIHAgKiAyICkgLyAyIDoKCQkJMSAtIGVhc2VJbiggcCAqIC0yICsgMiApIC8gMjsKCX07Cn0gKTsKCn0gKSgpOwoKdmFyIGVmZmVjdCA9ICQuZWZmZWN0czsKCgovKiEKICogalF1ZXJ5IFVJIEVmZmVjdHMgQmxpbmQgMS4xMi4xCiAqIGh0dHA6Ly9qcXVlcnl1aS5jb20KICoKICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqLwoKLy8+PmxhYmVsOiBCbGluZCBFZmZlY3QKLy8+Pmdyb3VwOiBFZmZlY3RzCi8vPj5kZXNjcmlwdGlvbjogQmxpbmRzIHRoZSBlbGVtZW50LgovLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vYmxpbmQtZWZmZWN0LwovLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0LwoKCgp2YXIgZWZmZWN0c0VmZmVjdEJsaW5kID0gJC5lZmZlY3RzLmRlZmluZSggImJsaW5kIiwgImhpZGUiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHsKCXZhciBtYXAgPSB7CgkJCXVwOiBbICJib3R0b20iLCAidG9wIiBdLAoJCQl2ZXJ0aWNhbDogWyAiYm90dG9tIiwgInRvcCIgXSwKCQkJZG93bjogWyAidG9wIiwgImJvdHRvbSIgXSwKCQkJbGVmdDogWyAicmlnaHQiLCAibGVmdCIgXSwKCQkJaG9yaXpvbnRhbDogWyAicmlnaHQiLCAibGVmdCIgXSwKCQkJcmlnaHQ6IFsgImxlZnQiLCAicmlnaHQiIF0KCQl9LAoJCWVsZW1lbnQgPSAkKCB0aGlzICksCgkJZGlyZWN0aW9uID0gb3B0aW9ucy5kaXJlY3Rpb24gfHwgInVwIiwKCQlzdGFydCA9IGVsZW1lbnQuY3NzQ2xpcCgpLAoJCWFuaW1hdGUgPSB7IGNsaXA6ICQuZXh0ZW5kKCB7fSwgc3RhcnQgKSB9LAoJCXBsYWNlaG9sZGVyID0gJC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKCBlbGVtZW50ICk7CgoJYW5pbWF0ZS5jbGlwWyBtYXBbIGRpcmVjdGlvbiBdWyAwIF0gXSA9IGFuaW1hdGUuY2xpcFsgbWFwWyBkaXJlY3Rpb24gXVsgMSBdIF07CgoJaWYgKCBvcHRpb25zLm1vZGUgPT09ICJzaG93IiApIHsKCQllbGVtZW50LmNzc0NsaXAoIGFuaW1hdGUuY2xpcCApOwoJCWlmICggcGxhY2Vob2xkZXIgKSB7CgkJCXBsYWNlaG9sZGVyLmNzcyggJC5lZmZlY3RzLmNsaXBUb0JveCggYW5pbWF0ZSApICk7CgkJfQoKCQlhbmltYXRlLmNsaXAgPSBzdGFydDsKCX0KCglpZiAoIHBsYWNlaG9sZGVyICkgewoJCXBsYWNlaG9sZGVyLmFuaW1hdGUoICQuZWZmZWN0cy5jbGlwVG9Cb3goIGFuaW1hdGUgKSwgb3B0aW9ucy5kdXJhdGlvbiwgb3B0aW9ucy5lYXNpbmcgKTsKCX0KCgllbGVtZW50LmFuaW1hdGUoIGFuaW1hdGUsIHsKCQlxdWV1ZTogZmFsc2UsCgkJZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sCgkJZWFzaW5nOiBvcHRpb25zLmVhc2luZywKCQljb21wbGV0ZTogZG9uZQoJfSApOwp9ICk7CgoKLyohCiAqIGpRdWVyeSBVSSBFZmZlY3RzIEJvdW5jZSAxLjEyLjEKICogaHR0cDovL2pxdWVyeXVpLmNvbQogKgogKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICovCgovLz4+bGFiZWw6IEJvdW5jZSBFZmZlY3QKLy8+Pmdyb3VwOiBFZmZlY3RzCi8vPj5kZXNjcmlwdGlvbjogQm91bmNlcyBhbiBlbGVtZW50IGhvcml6b250YWxseSBvciB2ZXJ0aWNhbGx5IG4gdGltZXMuCi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9ib3VuY2UtZWZmZWN0LwovLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0LwoKCgp2YXIgZWZmZWN0c0VmZmVjdEJvdW5jZSA9ICQuZWZmZWN0cy5kZWZpbmUoICJib3VuY2UiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHsKCXZhciB1cEFuaW0sIGRvd25BbmltLCByZWZWYWx1ZSwKCQllbGVtZW50ID0gJCggdGhpcyApLAoKCQkvLyBEZWZhdWx0czoKCQltb2RlID0gb3B0aW9ucy5tb2RlLAoJCWhpZGUgPSBtb2RlID09PSAiaGlkZSIsCgkJc2hvdyA9IG1vZGUgPT09ICJzaG93IiwKCQlkaXJlY3Rpb24gPSBvcHRpb25zLmRpcmVjdGlvbiB8fCAidXAiLAoJCWRpc3RhbmNlID0gb3B0aW9ucy5kaXN0YW5jZSwKCQl0aW1lcyA9IG9wdGlvbnMudGltZXMgfHwgNSwKCgkJLy8gTnVtYmVyIG9mIGludGVybmFsIGFuaW1hdGlvbnMKCQlhbmltcyA9IHRpbWVzICogMiArICggc2hvdyB8fCBoaWRlID8gMSA6IDAgKSwKCQlzcGVlZCA9IG9wdGlvbnMuZHVyYXRpb24gLyBhbmltcywKCQllYXNpbmcgPSBvcHRpb25zLmVhc2luZywKCgkJLy8gVXRpbGl0eToKCQlyZWYgPSAoIGRpcmVjdGlvbiA9PT0gInVwIiB8fCBkaXJlY3Rpb24gPT09ICJkb3duIiApID8gInRvcCIgOiAibGVmdCIsCgkJbW90aW9uID0gKCBkaXJlY3Rpb24gPT09ICJ1cCIgfHwgZGlyZWN0aW9uID09PSAibGVmdCIgKSwKCQlpID0gMCwKCgkJcXVldWVsZW4gPSBlbGVtZW50LnF1ZXVlKCkubGVuZ3RoOwoKCSQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlciggZWxlbWVudCApOwoKCXJlZlZhbHVlID0gZWxlbWVudC5jc3MoIHJlZiApOwoKCS8vIERlZmF1bHQgZGlzdGFuY2UgZm9yIHRoZSBCSUdHRVNUIGJvdW5jZSBpcyB0aGUgb3V0ZXIgRGlzdGFuY2UgLyAzCglpZiAoICFkaXN0YW5jZSApIHsKCQlkaXN0YW5jZSA9IGVsZW1lbnRbIHJlZiA9PT0gInRvcCIgPyAib3V0ZXJIZWlnaHQiIDogIm91dGVyV2lkdGgiIF0oKSAvIDM7Cgl9CgoJaWYgKCBzaG93ICkgewoJCWRvd25BbmltID0geyBvcGFjaXR5OiAxIH07CgkJZG93bkFuaW1bIHJlZiBdID0gcmVmVmFsdWU7CgoJCS8vIElmIHdlIGFyZSBzaG93aW5nLCBmb3JjZSBvcGFjaXR5IDAgYW5kIHNldCB0aGUgaW5pdGlhbCBwb3NpdGlvbgoJCS8vIHRoZW4gZG8gdGhlICJmaXJzdCIgYW5pbWF0aW9uCgkJZWxlbWVudAoJCQkuY3NzKCAib3BhY2l0eSIsIDAgKQoJCQkuY3NzKCByZWYsIG1vdGlvbiA\/IC1kaXN0YW5jZSAqIDIgOiBkaXN0YW5jZSAqIDIgKQoJCQkuYW5pbWF0ZSggZG93bkFuaW0sIHNwZWVkLCBlYXNpbmcgKTsKCX0KCgkvLyBTdGFydCBhdCB0aGUgc21hbGxlc3QgZGlzdGFuY2UgaWYgd2UgYXJlIGhpZGluZwoJaWYgKCBoaWRlICkgewoJCWRpc3RhbmNlID0gZGlzdGFuY2UgLyBNYXRoLnBvdyggMiwgdGltZXMgLSAxICk7Cgl9CgoJZG93bkFuaW0gPSB7fTsKCWRvd25BbmltWyByZWYgXSA9IHJlZlZhbHVlOwoKCS8vIEJvdW5jZXMgdXAvZG93bi9sZWZ0L3JpZ2h0IHRoZW4gYmFjayB0byAwIC0tIHRpbWVzICogMiBhbmltYXRpb25zIGhhcHBlbiBoZXJlCglmb3IgKCA7IGkgPCB0aW1lczsgaSsrICkgewoJCXVwQW5pbSA9IHt9OwoJCXVwQW5pbVsgcmVmIF0gPSAoIG1vdGlvbiA\/ICItPSIgOiAiKz0iICkgKyBkaXN0YW5jZTsKCgkJZWxlbWVudAoJCQkuYW5pbWF0ZSggdXBBbmltLCBzcGVlZCwgZWFzaW5nICkKCQkJLmFuaW1hdGUoIGRvd25BbmltLCBzcGVlZCwgZWFzaW5nICk7CgoJCWRpc3RhbmNlID0gaGlkZSA\/IGRpc3RhbmNlICogMiA6IGRpc3RhbmNlIC8gMjsKCX0KCgkvLyBMYXN0IEJvdW5jZSB3aGVuIEhpZGluZwoJaWYgKCBoaWRlICkgewoJCXVwQW5pbSA9IHsgb3BhY2l0eTogMCB9OwoJCXVwQW5pbVsgcmVmIF0gPSAoIG1vdGlvbiA\/ICItPSIgOiAiKz0iICkgKyBkaXN0YW5jZTsKCgkJZWxlbWVudC5hbmltYXRlKCB1cEFuaW0sIHNwZWVkLCBlYXNpbmcgKTsKCX0KCgllbGVtZW50LnF1ZXVlKCBkb25lICk7CgoJJC5lZmZlY3RzLnVuc2hpZnQoIGVsZW1lbnQsIHF1ZXVlbGVuLCBhbmltcyArIDEgKTsKfSApOwoKCi8qIQogKiBqUXVlcnkgVUkgRWZmZWN0cyBDbGlwIDEuMTIuMQogKiBodHRwOi8vanF1ZXJ5dWkuY29tCiAqCiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzCiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKi8KCi8vPj5sYWJlbDogQ2xpcCBFZmZlY3QKLy8+Pmdyb3VwOiBFZmZlY3RzCi8vPj5kZXNjcmlwdGlvbjogQ2xpcHMgdGhlIGVsZW1lbnQgb24gYW5kIG9mZiBsaWtlIGFuIG9sZCBUVi4KLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2NsaXAtZWZmZWN0LwovLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0LwoKCgp2YXIgZWZmZWN0c0VmZmVjdENsaXAgPSAkLmVmZmVjdHMuZGVmaW5lKCAiY2xpcCIsICJoaWRlIiwgZnVuY3Rpb24oIG9wdGlvbnMsIGRvbmUgKSB7Cgl2YXIgc3RhcnQsCgkJYW5pbWF0ZSA9IHt9LAoJCWVsZW1lbnQgPSAkKCB0aGlzICksCgkJZGlyZWN0aW9uID0gb3B0aW9ucy5kaXJlY3Rpb24gfHwgInZlcnRpY2FsIiwKCQlib3RoID0gZGlyZWN0aW9uID09PSAiYm90aCIsCgkJaG9yaXpvbnRhbCA9IGJvdGggfHwgZGlyZWN0aW9uID09PSAiaG9yaXpvbnRhbCIsCgkJdmVydGljYWwgPSBib3RoIHx8IGRpcmVjdGlvbiA9PT0gInZlcnRpY2FsIjsKCglzdGFydCA9IGVsZW1lbnQuY3NzQ2xpcCgpOwoJYW5pbWF0ZS5jbGlwID0gewoJCXRvcDogdmVydGljYWwgPyAoIHN0YXJ0LmJvdHRvbSAtIHN0YXJ0LnRvcCApIC8gMiA6IHN0YXJ0LnRvcCwKCQlyaWdodDogaG9yaXpvbnRhbCA\/ICggc3RhcnQucmlnaHQgLSBzdGFydC5sZWZ0ICkgLyAyIDogc3RhcnQucmlnaHQsCgkJYm90dG9tOiB2ZXJ0aWNhbCA\/ICggc3RhcnQuYm90dG9tIC0gc3RhcnQudG9wICkgLyAyIDogc3RhcnQuYm90dG9tLAoJCWxlZnQ6IGhvcml6b250YWwgPyAoIHN0YXJ0LnJpZ2h0IC0gc3RhcnQubGVmdCApIC8gMiA6IHN0YXJ0LmxlZnQKCX07CgoJJC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKCBlbGVtZW50ICk7CgoJaWYgKCBvcHRpb25zLm1vZGUgPT09ICJzaG93IiApIHsKCQllbGVtZW50LmNzc0NsaXAoIGFuaW1hdGUuY2xpcCApOwoJCWFuaW1hdGUuY2xpcCA9IHN0YXJ0OwoJfQoKCWVsZW1lbnQuYW5pbWF0ZSggYW5pbWF0ZSwgewoJCXF1ZXVlOiBmYWxzZSwKCQlkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbiwKCQllYXNpbmc6IG9wdGlvbnMuZWFzaW5nLAoJCWNvbXBsZXRlOiBkb25lCgl9ICk7Cgp9ICk7CgoKLyohCiAqIGpRdWVyeSBVSSBFZmZlY3RzIERyb3AgMS4xMi4xCiAqIGh0dHA6Ly9qcXVlcnl1aS5jb20KICoKICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqLwoKLy8+PmxhYmVsOiBEcm9wIEVmZmVjdAovLz4+Z3JvdXA6IEVmZmVjdHMKLy8+PmRlc2NyaXB0aW9uOiBNb3ZlcyBhbiBlbGVtZW50IGluIG9uZSBkaXJlY3Rpb24gYW5kIGhpZGVzIGl0IGF0IHRoZSBzYW1lIHRpbWUuCi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9kcm9wLWVmZmVjdC8KLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2VmZmVjdC8KCgoKdmFyIGVmZmVjdHNFZmZlY3REcm9wID0gJC5lZmZlY3RzLmRlZmluZSggImRyb3AiLCAiaGlkZSIsIGZ1bmN0aW9uKCBvcHRpb25zLCBkb25lICkgewoKCXZhciBkaXN0YW5jZSwKCQllbGVtZW50ID0gJCggdGhpcyApLAoJCW1vZGUgPSBvcHRpb25zLm1vZGUsCgkJc2hvdyA9IG1vZGUgPT09ICJzaG93IiwKCQlkaXJlY3Rpb24gPSBvcHRpb25zLmRpcmVjdGlvbiB8fCAibGVmdCIsCgkJcmVmID0gKCBkaXJlY3Rpb24gPT09ICJ1cCIgfHwgZGlyZWN0aW9uID09PSAiZG93biIgKSA\/ICJ0b3AiIDogImxlZnQiLAoJCW1vdGlvbiA9ICggZGlyZWN0aW9uID09PSAidXAiIHx8IGRpcmVjdGlvbiA9PT0gImxlZnQiICkgPyAiLT0iIDogIis9IiwKCQlvcHBvc2l0ZU1vdGlvbiA9ICggbW90aW9uID09PSAiKz0iICkgPyAiLT0iIDogIis9IiwKCQlhbmltYXRpb24gPSB7CgkJCW9wYWNpdHk6IDAKCQl9OwoKCSQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlciggZWxlbWVudCApOwoKCWRpc3RhbmNlID0gb3B0aW9ucy5kaXN0YW5jZSB8fAoJCWVsZW1lbnRbIHJlZiA9PT0gInRvcCIgPyAib3V0ZXJIZWlnaHQiIDogIm91dGVyV2lkdGgiIF0oIHRydWUgKSAvIDI7CgoJYW5pbWF0aW9uWyByZWYgXSA9IG1vdGlvbiArIGRpc3RhbmNlOwoKCWlmICggc2hvdyApIHsKCQllbGVtZW50LmNzcyggYW5pbWF0aW9uICk7CgoJCWFuaW1hdGlvblsgcmVmIF0gPSBvcHBvc2l0ZU1vdGlvbiArIGRpc3RhbmNlOwoJCWFuaW1hdGlvbi5vcGFjaXR5ID0gMTsKCX0KCgkvLyBBbmltYXRlCgllbGVtZW50LmFuaW1hdGUoIGFuaW1hdGlvbiwgewoJCXF1ZXVlOiBmYWxzZSwKCQlkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbiwKCQllYXNpbmc6IG9wdGlvbnMuZWFzaW5nLAoJCWNvbXBsZXRlOiBkb25lCgl9ICk7Cn0gKTsKCgovKiEKICogalF1ZXJ5IFVJIEVmZmVjdHMgRXhwbG9kZSAxLjEyLjEKICogaHR0cDovL2pxdWVyeXVpLmNvbQogKgogKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICovCgovLz4+bGFiZWw6IEV4cGxvZGUgRWZmZWN0Ci8vPj5ncm91cDogRWZmZWN0cwovLyBqc2NzOmRpc2FibGUgbWF4aW11bUxpbmVMZW5ndGgKLy8+PmRlc2NyaXB0aW9uOiBFeHBsb2RlcyBhbiBlbGVtZW50IGluIGFsbCBkaXJlY3Rpb25zIGludG8gbiBwaWVjZXMuIEltcGxvZGVzIGFuIGVsZW1lbnQgdG8gaXRzIG9yaWdpbmFsIHdob2xlbmVzcy4KLy8ganNjczplbmFibGUgbWF4aW11bUxpbmVMZW5ndGgKLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2V4cGxvZGUtZWZmZWN0LwovLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0LwoKCgp2YXIgZWZmZWN0c0VmZmVjdEV4cGxvZGUgPSAkLmVmZmVjdHMuZGVmaW5lKCAiZXhwbG9kZSIsICJoaWRlIiwgZnVuY3Rpb24oIG9wdGlvbnMsIGRvbmUgKSB7CgoJdmFyIGksIGosIGxlZnQsIHRvcCwgbXgsIG15LAoJCXJvd3MgPSBvcHRpb25zLnBpZWNlcyA\/IE1hdGgucm91bmQoIE1hdGguc3FydCggb3B0aW9ucy5waWVjZXMgKSApIDogMywKCQljZWxscyA9IHJvd3MsCgkJZWxlbWVudCA9ICQoIHRoaXMgKSwKCQltb2RlID0gb3B0aW9ucy5tb2RlLAoJCXNob3cgPSBtb2RlID09PSAic2hvdyIsCgoJCS8vIFNob3cgYW5kIHRoZW4gdmlzaWJpbGl0eTpoaWRkZW4gdGhlIGVsZW1lbnQgYmVmb3JlIGNhbGN1bGF0aW5nIG9mZnNldAoJCW9mZnNldCA9IGVsZW1lbnQuc2hvdygpLmNzcyggInZpc2liaWxpdHkiLCAiaGlkZGVuIiApLm9mZnNldCgpLAoKCQkvLyBXaWR0aCBhbmQgaGVpZ2h0IG9mIGEgcGllY2UKCQl3aWR0aCA9IE1hdGguY2VpbCggZWxlbWVudC5vdXRlcldpZHRoKCkgLyBjZWxscyApLAoJCWhlaWdodCA9IE1hdGguY2VpbCggZWxlbWVudC5vdXRlckhlaWdodCgpIC8gcm93cyApLAoJCXBpZWNlcyA9IFtdOwoKCS8vIENoaWxkcmVuIGFuaW1hdGUgY29tcGxldGU6CglmdW5jdGlvbiBjaGlsZENvbXBsZXRlKCkgewoJCXBpZWNlcy5wdXNoKCB0aGlzICk7CgkJaWYgKCBwaWVjZXMubGVuZ3RoID09PSByb3dzICogY2VsbHMgKSB7CgkJCWFuaW1Db21wbGV0ZSgpOwoJCX0KCX0KCgkvLyBDbG9uZSB0aGUgZWxlbWVudCBmb3IgZWFjaCByb3cgYW5kIGNlbGwuCglmb3IgKCBpID0gMDsgaSA8IHJvd3M7IGkrKyApIHsgLy8gPT09PgoJCXRvcCA9IG9mZnNldC50b3AgKyBpICogaGVpZ2h0OwoJCW15ID0gaSAtICggcm93cyAtIDEgKSAvIDI7CgoJCWZvciAoIGogPSAwOyBqIDwgY2VsbHM7IGorKyApIHsgLy8gfHx8CgkJCWxlZnQgPSBvZmZzZXQubGVmdCArIGogKiB3aWR0aDsKCQkJbXggPSBqIC0gKCBjZWxscyAtIDEgKSAvIDI7CgoJCQkvLyBDcmVhdGUgYSBjbG9uZSBvZiB0aGUgbm93IGhpZGRlbiBtYWluIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGFic29sdXRlIHBvc2l0aW9uZWQKCQkJLy8gd2l0aGluIGEgd3JhcHBlciBkaXYgb2ZmIHRoZSAtbGVmdCBhbmQgLXRvcCBlcXVhbCB0byBzaXplIG9mIG91ciBwaWVjZXMKCQkJZWxlbWVudAoJCQkJLmNsb25lKCkKCQkJCS5hcHBlbmRUbyggImJvZHkiICkKCQkJCS53cmFwKCAiPGRpdj48L2Rpdj4iICkKCQkJCS5jc3MoIHsKCQkJCQlwb3NpdGlvbjogImFic29sdXRlIiwKCQkJCQl2aXNpYmlsaXR5OiAidmlzaWJsZSIsCgkJCQkJbGVmdDogLWogKiB3aWR0aCwKCQkJCQl0b3A6IC1pICogaGVpZ2h0CgkJCQl9ICkKCgkJCQkvLyBTZWxlY3QgdGhlIHdyYXBwZXIgLSBtYWtlIGl0IG92ZXJmbG93OiBoaWRkZW4gYW5kIGFic29sdXRlIHBvc2l0aW9uZWQgYmFzZWQgb24KCQkJCS8vIHdoZXJlIHRoZSBvcmlnaW5hbCB3YXMgbG9jYXRlZCArbGVmdCBhbmQgK3RvcCBlcXVhbCB0byB0aGUgc2l6ZSBvZiBwaWVjZXMKCQkJCS5wYXJlbnQoKQoJCQkJCS5hZGRDbGFzcyggInVpLWVmZmVjdHMtZXhwbG9kZSIgKQoJCQkJCS5jc3MoIHsKCQkJCQkJcG9zaXRpb246ICJhYnNvbHV0ZSIsCgkJCQkJCW92ZXJmbG93OiAiaGlkZGVuIiwKCQkJCQkJd2lkdGg6IHdpZHRoLAoJCQkJCQloZWlnaHQ6IGhlaWdodCwKCQkJCQkJbGVmdDogbGVmdCArICggc2hvdyA\/IG14ICogd2lkdGggOiAwICksCgkJCQkJCXRvcDogdG9wICsgKCBzaG93ID8gbXkgKiBoZWlnaHQgOiAwICksCgkJCQkJCW9wYWNpdHk6IHNob3cgPyAwIDogMQoJCQkJCX0gKQoJCQkJCS5hbmltYXRlKCB7CgkJCQkJCWxlZnQ6IGxlZnQgKyAoIHNob3cgPyAwIDogbXggKiB3aWR0aCApLAoJCQkJCQl0b3A6IHRvcCArICggc2hvdyA\/IDAgOiBteSAqIGhlaWdodCApLAoJCQkJCQlvcGFjaXR5OiBzaG93ID8gMSA6IDAKCQkJCQl9LCBvcHRpb25zLmR1cmF0aW9uIHx8IDUwMCwgb3B0aW9ucy5lYXNpbmcsIGNoaWxkQ29tcGxldGUgKTsKCQl9Cgl9CgoJZnVuY3Rpb24gYW5pbUNvbXBsZXRlKCkgewoJCWVsZW1lbnQuY3NzKCB7CgkJCXZpc2liaWxpdHk6ICJ2aXNpYmxlIgoJCX0gKTsKCQkkKCBwaWVjZXMgKS5yZW1vdmUoKTsKCQlkb25lKCk7Cgl9Cn0gKTsKCgovKiEKICogalF1ZXJ5IFVJIEVmZmVjdHMgRmFkZSAxLjEyLjEKICogaHR0cDovL2pxdWVyeXVpLmNvbQogKgogKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICovCgovLz4+bGFiZWw6IEZhZGUgRWZmZWN0Ci8vPj5ncm91cDogRWZmZWN0cwovLz4+ZGVzY3JpcHRpb246IEZhZGVzIHRoZSBlbGVtZW50LgovLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZmFkZS1lZmZlY3QvCi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9lZmZlY3QvCgoKCnZhciBlZmZlY3RzRWZmZWN0RmFkZSA9ICQuZWZmZWN0cy5kZWZpbmUoICJmYWRlIiwgInRvZ2dsZSIsIGZ1bmN0aW9uKCBvcHRpb25zLCBkb25lICkgewoJdmFyIHNob3cgPSBvcHRpb25zLm1vZGUgPT09ICJzaG93IjsKCgkkKCB0aGlzICkKCQkuY3NzKCAib3BhY2l0eSIsIHNob3cgPyAwIDogMSApCgkJLmFuaW1hdGUoIHsKCQkJb3BhY2l0eTogc2hvdyA\/IDEgOiAwCgkJfSwgewoJCQlxdWV1ZTogZmFsc2UsCgkJCWR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLAoJCQllYXNpbmc6IG9wdGlvbnMuZWFzaW5nLAoJCQljb21wbGV0ZTogZG9uZQoJCX0gKTsKfSApOwoKCi8qIQogKiBqUXVlcnkgVUkgRWZmZWN0cyBGb2xkIDEuMTIuMQogKiBodHRwOi8vanF1ZXJ5dWkuY29tCiAqCiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzCiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKi8KCi8vPj5sYWJlbDogRm9sZCBFZmZlY3QKLy8+Pmdyb3VwOiBFZmZlY3RzCi8vPj5kZXNjcmlwdGlvbjogRm9sZHMgYW4gZWxlbWVudCBmaXJzdCBob3Jpem9udGFsbHkgYW5kIHRoZW4gdmVydGljYWxseS4KLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2ZvbGQtZWZmZWN0LwovLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0LwoKCgp2YXIgZWZmZWN0c0VmZmVjdEZvbGQgPSAkLmVmZmVjdHMuZGVmaW5lKCAiZm9sZCIsICJoaWRlIiwgZnVuY3Rpb24oIG9wdGlvbnMsIGRvbmUgKSB7CgoJLy8gQ3JlYXRlIGVsZW1lbnQKCXZhciBlbGVtZW50ID0gJCggdGhpcyApLAoJCW1vZGUgPSBvcHRpb25zLm1vZGUsCgkJc2hvdyA9IG1vZGUgPT09ICJzaG93IiwKCQloaWRlID0gbW9kZSA9PT0gImhpZGUiLAoJCXNpemUgPSBvcHRpb25zLnNpemUgfHwgMTUsCgkJcGVyY2VudCA9IC8oWzAtOV0rKSUvLmV4ZWMoIHNpemUgKSwKCQlob3JpekZpcnN0ID0gISFvcHRpb25zLmhvcml6Rmlyc3QsCgkJcmVmID0gaG9yaXpGaXJzdCA\/IFsgInJpZ2h0IiwgImJvdHRvbSIgXSA6IFsgImJvdHRvbSIsICJyaWdodCIgXSwKCQlkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24gLyAyLAoKCQlwbGFjZWhvbGRlciA9ICQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlciggZWxlbWVudCApLAoKCQlzdGFydCA9IGVsZW1lbnQuY3NzQ2xpcCgpLAoJCWFuaW1hdGlvbjEgPSB7IGNsaXA6ICQuZXh0ZW5kKCB7fSwgc3RhcnQgKSB9LAoJCWFuaW1hdGlvbjIgPSB7IGNsaXA6ICQuZXh0ZW5kKCB7fSwgc3RhcnQgKSB9LAoKCQlkaXN0YW5jZSA9IFsgc3RhcnRbIHJlZlsgMCBdIF0sIHN0YXJ0WyByZWZbIDEgXSBdIF0sCgoJCXF1ZXVlbGVuID0gZWxlbWVudC5xdWV1ZSgpLmxlbmd0aDsKCglpZiAoIHBlcmNlbnQgKSB7CgkJc2l6ZSA9IHBhcnNlSW50KCBwZXJjZW50WyAxIF0sIDEwICkgLyAxMDAgKiBkaXN0YW5jZVsgaGlkZSA\\/IDAgOiAxMDAgKSApLAoKCQluZXdPcHRpb25zID0gJC5leHRlbmQoIHRydWUsIHsKCQkJZnJvbTogJC5lZmZlY3RzLnNjYWxlZERpbWVuc2lvbnMoIGVsICksCgkJCXRvOiAkLmVmZmVjdHMuc2NhbGVkRGltZW5zaW9ucyggZWwsIHBlcmNlbnQsIG9wdGlvbnMuZGlyZWN0aW9uIHx8ICJib3RoIiApLAoJCQlvcmlnaW46IG9wdGlvbnMub3JpZ2luIHx8IFsgIm1pZGRsZSIsICJjZW50ZXIiIF0KCQl9LCBvcHRpb25zICk7CgoJLy8gRmFkZSBvcHRpb24gdG8gc3VwcG9ydCBwdWZmCglpZiAoIG9wdGlvbnMuZmFkZSApIHsKCQluZXdPcHRpb25zLmZyb20ub3BhY2l0eSA9IDE7CgkJbmV3T3B0aW9ucy50by5vcGFjaXR5ID0gMDsKCX0KCgkkLmVmZmVjdHMuZWZmZWN0LnNpemUuY2FsbCggdGhpcywgbmV3T3B0aW9ucywgZG9uZSApOwp9ICk7CgoKLyohCiAqIGpRdWVyeSBVSSBFZmZlY3RzIFB1ZmYgMS4xMi4xCiAqIGh0dHA6Ly9qcXVlcnl1aS5jb20KICoKICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqLwoKLy8+PmxhYmVsOiBQdWZmIEVmZmVjdAovLz4+Z3JvdXA6IEVmZmVjdHMKLy8+PmRlc2NyaXB0aW9uOiBDcmVhdGVzIGEgcHVmZiBlZmZlY3QgYnkgc2NhbGluZyB0aGUgZWxlbWVudCB1cCBhbmQgaGlkaW5nIGl0IGF0IHRoZSBzYW1lIHRpbWUuCi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9wdWZmLWVmZmVjdC8KLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2VmZmVjdC8KCgoKdmFyIGVmZmVjdHNFZmZlY3RQdWZmID0gJC5lZmZlY3RzLmRlZmluZSggInB1ZmYiLCAiaGlkZSIsIGZ1bmN0aW9uKCBvcHRpb25zLCBkb25lICkgewoJdmFyIG5ld09wdGlvbnMgPSAkLmV4dGVuZCggdHJ1ZSwge30sIG9wdGlvbnMsIHsKCQlmYWRlOiB0cnVlLAoJCXBlcmNlbnQ6IHBhcnNlSW50KCBvcHRpb25zLnBlcmNlbnQsIDEwICkgfHwgMTUwCgl9ICk7CgoJJC5lZmZlY3RzLmVmZmVjdC5zY2FsZS5jYWxsKCB0aGlzLCBuZXdPcHRpb25zLCBkb25lICk7Cn0gKTsKCgovKiEKICogalF1ZXJ5IFVJIEVmZmVjdHMgUHVsc2F0ZSAxLjEyLjEKICogaHR0cDovL2pxdWVyeXVpLmNvbQogKgogKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICovCgovLz4+bGFiZWw6IFB1bHNhdGUgRWZmZWN0Ci8vPj5ncm91cDogRWZmZWN0cwovLz4+ZGVzY3JpcHRpb246IFB1bHNhdGVzIGFuIGVsZW1lbnQgbiB0aW1lcyBieSBjaGFuZ2luZyB0aGUgb3BhY2l0eSB0byB6ZXJvIGFuZCBiYWNrLgovLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vcHVsc2F0ZS1lZmZlY3QvCi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9lZmZlY3QvCgoKCnZhciBlZmZlY3RzRWZmZWN0UHVsc2F0ZSA9ICQuZWZmZWN0cy5kZWZpbmUoICJwdWxzYXRlIiwgInNob3ciLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHsKCXZhciBlbGVtZW50ID0gJCggdGhpcyApLAoJCW1vZGUgPSBvcHRpb25zLm1vZGUsCgkJc2hvdyA9IG1vZGUgPT09ICJzaG93IiwKCQloaWRlID0gbW9kZSA9PT0gImhpZGUiLAoJCXNob3doaWRlID0gc2hvdyB8fCBoaWRlLAoKCQkvLyBTaG93aW5nIG9yIGhpZGluZyBsZWF2ZXMgb2ZmIHRoZSAibGFzdCIgYW5pbWF0aW9uCgkJYW5pbXMgPSAoICggb3B0aW9ucy50aW1lcyB8fCA1ICkgKiAyICkgKyAoIHNob3doaWRlID8gMSA6IDAgKSwKCQlkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24gLyBhbmltcywKCQlhbmltYXRlVG8gPSAwLAoJCWkgPSAxLAoJCXF1ZXVlbGVuID0gZWxlbWVudC5xdWV1ZSgpLmxlbmd0aDsKCglpZiAoIHNob3cgfHwgIWVsZW1lbnQuaXMoICI6dmlzaWJsZSIgKSApIHsKCQllbGVtZW50LmNzcyggIm9wYWNpdHkiLCAwICkuc2hvdygpOwoJCWFuaW1hdGVUbyA9IDE7Cgl9CgoJLy8gQW5pbXMgLSAxIG9wYWNpdHkgInRvZ2dsZXMiCglmb3IgKCA7IGkgPCBhbmltczsgaSsrICkgewoJCWVsZW1lbnQuYW5pbWF0ZSggeyBvcGFjaXR5OiBhbmltYXRlVG8gfSwgZHVyYXRpb24sIG9wdGlvbnMuZWFzaW5nICk7CgkJYW5pbWF0ZVRvID0gMSAtIGFuaW1hdGVUbzsKCX0KCgllbGVtZW50LmFuaW1hdGUoIHsgb3BhY2l0eTogYW5pbWF0ZVRvIH0sIGR1cmF0aW9uLCBvcHRpb25zLmVhc2luZyApOwoKCWVsZW1lbnQucXVldWUoIGRvbmUgKTsKCgkkLmVmZmVjdHMudW5zaGlmdCggZWxlbWVudCwgcXVldWVsZW4sIGFuaW1zICsgMSApOwp9ICk7CgoKLyohCiAqIGpRdWVyeSBVSSBFZmZlY3RzIFNoYWtlIDEuMTIuMQogKiBodHRwOi8vanF1ZXJ5dWkuY29tCiAqCiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzCiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKi8KCi8vPj5sYWJlbDogU2hha2UgRWZmZWN0Ci8vPj5ncm91cDogRWZmZWN0cwovLz4+ZGVzY3JpcHRpb246IFNoYWtlcyBhbiBlbGVtZW50IGhvcml6b250YWxseSBvciB2ZXJ0aWNhbGx5IG4gdGltZXMuCi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9zaGFrZS1lZmZlY3QvCi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9lZmZlY3QvCgoKCnZhciBlZmZlY3RzRWZmZWN0U2hha2UgPSAkLmVmZmVjdHMuZGVmaW5lKCAic2hha2UiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHsKCgl2YXIgaSA9IDEsCgkJZWxlbWVudCA9ICQoIHRoaXMgKSwKCQlkaXJlY3Rpb24gPSBvcHRpb25zLmRpcmVjdGlvbiB8fCAibGVmdCIsCgkJZGlzdGFuY2UgPSBvcHRpb25zLmRpc3RhbmNlIHx8IDIwLAoJCXRpbWVzID0gb3B0aW9ucy50aW1lcyB8fCAzLAoJCWFuaW1zID0gdGltZXMgKiAyICsgMSwKCQlzcGVlZCA9IE1hdGgucm91bmQoIG9wdGlvbnMuZHVyYXRpb24gLyBhbmltcyApLAoJCXJlZiA9ICggZGlyZWN0aW9uID09PSAidXAiIHx8IGRpcmVjdGlvbiA9PT0gImRvd24iICkgPyAidG9wIiA6ICJsZWZ0IiwKCQlwb3NpdGl2ZU1vdGlvbiA9ICggZGlyZWN0aW9uID09PSAidXAiIHx8IGRpcmVjdGlvbiA9PT0gImxlZnQiICksCgkJYW5pbWF0aW9uID0ge30sCgkJYW5pbWF0aW9uMSA9IHt9LAoJCWFuaW1hdGlvbjIgPSB7fSwKCgkJcXVldWVsZW4gPSBlbGVtZW50LnF1ZXVlKCkubGVuZ3RoOwoKCSQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlciggZWxlbWVudCApOwoKCS8vIEFuaW1hdGlvbgoJYW5pbWF0aW9uWyByZWYgXSA9ICggcG9zaXRpdmVNb3Rpb24gPyAiLT0iIDogIis9IiApICsgZGlzdGFuY2U7CglhbmltYXRpb24xWyByZWYgXSA9ICggcG9zaXRpdmVNb3Rpb24gPyAiKz0iIDogIi09IiApICsgZGlzdGFuY2UgKiAyOwoJYW5pbWF0aW9uMlsgcmVmIF0gPSAoIHBvc2l0aXZlTW90aW9uID8gIi09IiA6ICIrPSIgKSArIGRpc3RhbmNlICogMjsKCgkvLyBBbmltYXRlCgllbGVtZW50LmFuaW1hdGUoIGFuaW1hdGlvbiwgc3BlZWQsIG9wdGlvbnMuZWFzaW5nICk7CgoJLy8gU2hha2VzCglmb3IgKCA7IGkgPCB0aW1lczsgaSsrICkgewoJCWVsZW1lbnQKCQkJLmFuaW1hdGUoIGFuaW1hdGlvbjEsIHNwZWVkLCBvcHRpb25zLmVhc2luZyApCgkJCS5hbmltYXRlKCBhbmltYXRpb24yLCBzcGVlZCwgb3B0aW9ucy5lYXNpbmcgKTsKCX0KCgllbGVtZW50CgkJLmFuaW1hdGUoIGFuaW1hdGlvbjEsIHNwZWVkLCBvcHRpb25zLmVhc2luZyApCgkJLmFuaW1hdGUoIGFuaW1hdGlvbiwgc3BlZWQgLyAyLCBvcHRpb25zLmVhc2luZyApCgkJLnF1ZXVlKCBkb25lICk7CgoJJC5lZmZlY3RzLnVuc2hpZnQoIGVsZW1lbnQsIHF1ZXVlbGVuLCBhbmltcyArIDEgKTsKfSApOwoKCi8qIQogKiBqUXVlcnkgVUkgRWZmZWN0cyBTbGlkZSAxLjEyLjEKICogaHR0cDovL2pxdWVyeXVpLmNvbQogKgogKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICovCgovLz4+bGFiZWw6IFNsaWRlIEVmZmVjdAovLz4+Z3JvdXA6IEVmZmVjdHMKLy8+PmRlc2NyaXB0aW9uOiBTbGlkZXMgYW4gZWxlbWVudCBpbiBhbmQgb3V0IG9mIHRoZSB2aWV3cG9ydC4KLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3NsaWRlLWVmZmVjdC8KLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2VmZmVjdC8KCgoKdmFyIGVmZmVjdHNFZmZlY3RTbGlkZSA9ICQuZWZmZWN0cy5kZWZpbmUoICJzbGlkZSIsICJzaG93IiwgZnVuY3Rpb24oIG9wdGlvbnMsIGRvbmUgKSB7Cgl2YXIgc3RhcnRDbGlwLCBzdGFydFJlZiwKCQllbGVtZW50ID0gJCggdGhpcyApLAoJCW1hcCA9IHsKCQkJdXA6IFsgImJvdHRvbSIsICJ0b3AiIF0sCgkJCWRvd246IFsgInRvcCIsICJib3R0b20iIF0sCgkJCWxlZnQ6IFsgInJpZ2h0IiwgImxlZnQiIF0sCgkJCXJpZ2h0OiBbICJsZWZ0IiwgInJpZ2h0IiBdCgkJfSwKCQltb2RlID0gb3B0aW9ucy5tb2RlLAoJCWRpcmVjdGlvbiA9IG9wdGlvbnMuZGlyZWN0aW9uIHx8ICJsZWZ0IiwKCQlyZWYgPSAoIGRpcmVjdGlvbiA9PT0gInVwIiB8fCBkaXJlY3Rpb24gPT09ICJkb3duIiApID8gInRvcCIgOiAibGVmdCIsCgkJcG9zaXRpdmVNb3Rpb24gPSAoIGRpcmVjdGlvbiA9PT0gInVwIiB8fCBkaXJlY3Rpb24gPT09ICJsZWZ0IiApLAoJCWRpc3RhbmNlID0gb3B0aW9ucy5kaXN0YW5jZSB8fAoJCQllbGVtZW50WyByZWYgPT09ICJ0b3AiID8gIm91dGVySGVpZ2h0IiA6ICJvdXRlcldpZHRoIiBdKCB0cnVlICksCgkJYW5pbWF0aW9uID0ge307CgoJJC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKCBlbGVtZW50ICk7CgoJc3RhcnRDbGlwID0gZWxlbWVudC5jc3NDbGlwKCk7CglzdGFydFJlZiA9IGVsZW1lbnQucG9zaXRpb24oKVsgcmVmIF07CgoJLy8gRGVmaW5lIGhpZGUgYW5pbWF0aW9uCglhbmltYXRpb25bIHJlZiBdID0gKCBwb3NpdGl2ZU1vdGlvbiA\\\/IHRoaXMuaGVhZGVycy5lcSggc2VsZWN0b3IgKSA6ICQoKTsKCX0sCgoJX3NldHVwRXZlbnRzOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIGV2ZW50cyA9IHsKCQkJa2V5ZG93bjogIl9rZXlkb3duIgoJCX07CgkJaWYgKCBldmVudCApIHsKCQkJJC5lYWNoKCBldmVudC5zcGxpdCggIiAiICksIGZ1bmN0aW9uKCBpbmRleCwgZXZlbnROYW1lICkgewoJCQkJZXZlbnRzWyBldmVudE5hbWUgXSA9ICJfZXZlbnRIYW5kbGVyIjsKCQkJfSApOwoJCX0KCgkJdGhpcy5fb2ZmKCB0aGlzLmhlYWRlcnMuYWRkKCB0aGlzLmhlYWRlcnMubmV4dCgpICkgKTsKCQl0aGlzLl9vbiggdGhpcy5oZWFkZXJzLCBldmVudHMgKTsKCQl0aGlzLl9vbiggdGhpcy5oZWFkZXJzLm5leHQoKSwgeyBrZXlkb3duOiAiX3BhbmVsS2V5RG93biIgfSApOwoJCXRoaXMuX2hvdmVyYWJsZSggdGhpcy5oZWFkZXJzICk7CgkJdGhpcy5fZm9jdXNhYmxlKCB0aGlzLmhlYWRlcnMgKTsKCX0sCgoJX2V2ZW50SGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBhY3RpdmVDaGlsZHJlbiwgY2xpY2tlZENoaWxkcmVuLAoJCQlvcHRpb25zID0gdGhpcy5vcHRpb25zLAoJCQlhY3RpdmUgPSB0aGlzLmFjdGl2ZSwKCQkJY2xpY2tlZCA9ICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKSwKCQkJY2xpY2tlZElzQWN0aXZlID0gY2xpY2tlZFsgMCBdID09PSBhY3RpdmVbIDAgXSwKCQkJY29sbGFwc2luZyA9IGNsaWNrZWRJc0FjdGl2ZSAmJiBvcHRpb25zLmNvbGxhcHNpYmxlLAoJCQl0b1Nob3cgPSBjb2xsYXBzaW5nID8gJCgpIDogY2xpY2tlZC5uZXh0KCksCgkJCXRvSGlkZSA9IGFjdGl2ZS5uZXh0KCksCgkJCWV2ZW50RGF0YSA9IHsKCQkJCW9sZEhlYWRlcjogYWN0aXZlLAoJCQkJb2xkUGFuZWw6IHRvSGlkZSwKCQkJCW5ld0hlYWRlcjogY29sbGFwc2luZyA\\\/ICJwcmV2QWxsIiA6ICJuZXh0QWxsIiBdKCAiLnVpLW1lbnUtaXRlbSIgKQoJCQkJCS5lcSggLTEgKTsKCQkJfSBlbHNlIHsKCQkJCW5leHQgPSB0aGlzLmFjdGl2ZQoJCQkJCVsgZGlyZWN0aW9uICsgIkFsbCIgXSggIi51aS1tZW51LWl0ZW0iICkKCQkJCQkuZXEoIDAgKTsKCQkJfQoJCX0KCQlpZiAoICFuZXh0IHx8ICFuZXh0Lmxlbmd0aCB8fCAhdGhpcy5hY3RpdmUgKSB7CgkJCW5leHQgPSB0aGlzLmFjdGl2ZU1lbnUuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zIClbIGZpbHRlciBdKCk7CgkJfQoKCQl0aGlzLmZvY3VzKCBldmVudCwgbmV4dCApOwoJfSwKCgluZXh0UGFnZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBpdGVtLCBiYXNlLCBoZWlnaHQ7CgoJCWlmICggIXRoaXMuYWN0aXZlICkgewoJCQl0aGlzLm5leHQoIGV2ZW50ICk7CgkJCXJldHVybjsKCQl9CgkJaWYgKCB0aGlzLmlzTGFzdEl0ZW0oKSApIHsKCQkJcmV0dXJuOwoJCX0KCQlpZiAoIHRoaXMuX2hhc1Njcm9sbCgpICkgewoJCQliYXNlID0gdGhpcy5hY3RpdmUub2Zmc2V0KCkudG9wOwoJCQloZWlnaHQgPSB0aGlzLmVsZW1lbnQuaGVpZ2h0KCk7CgkJCXRoaXMuYWN0aXZlLm5leHRBbGwoICIudWktbWVudS1pdGVtIiApLmVhY2goIGZ1bmN0aW9uKCkgewoJCQkJaXRlbSA9ICQoIHRoaXMgKTsKCQkJCXJldHVybiBpdGVtLm9mZnNldCgpLnRvcCAtIGJhc2UgLSBoZWlnaHQgPCAwOwoJCQl9ICk7CgoJCQl0aGlzLmZvY3VzKCBldmVudCwgaXRlbSApOwoJCX0gZWxzZSB7CgkJCXRoaXMuZm9jdXMoIGV2ZW50LCB0aGlzLmFjdGl2ZU1lbnUuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zICkKCQkJCVsgIXRoaXMuYWN0aXZlID8gImZpcnN0IiA6ICJsYXN0IiBdKCkgKTsKCQl9Cgl9LAoKCXByZXZpb3VzUGFnZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBpdGVtLCBiYXNlLCBoZWlnaHQ7CgkJaWYgKCAhdGhpcy5hY3RpdmUgKSB7CgkJCXRoaXMubmV4dCggZXZlbnQgKTsKCQkJcmV0dXJuOwoJCX0KCQlpZiAoIHRoaXMuaXNGaXJzdEl0ZW0oKSApIHsKCQkJcmV0dXJuOwoJCX0KCQlpZiAoIHRoaXMuX2hhc1Njcm9sbCgpICkgewoJCQliYXNlID0gdGhpcy5hY3RpdmUub2Zmc2V0KCkudG9wOwoJCQloZWlnaHQgPSB0aGlzLmVsZW1lbnQuaGVpZ2h0KCk7CgkJCXRoaXMuYWN0aXZlLnByZXZBbGwoICIudWktbWVudS1pdGVtIiApLmVhY2goIGZ1bmN0aW9uKCkgewoJCQkJaXRlbSA9ICQoIHRoaXMgKTsKCQkJCXJldHVybiBpdGVtLm9mZnNldCgpLnRvcCAtIGJhc2UgKyBoZWlnaHQgPiAwOwoJCQl9ICk7CgoJCQl0aGlzLmZvY3VzKCBldmVudCwgaXRlbSApOwoJCX0gZWxzZSB7CgkJCXRoaXMuZm9jdXMoIGV2ZW50LCB0aGlzLmFjdGl2ZU1lbnUuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zICkuZmlyc3QoKSApOwoJCX0KCX0sCgoJX2hhc1Njcm9sbDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpIDwgdGhpcy5lbGVtZW50LnByb3AoICJzY3JvbGxIZWlnaHQiICk7Cgl9LAoKCXNlbGVjdDogZnVuY3Rpb24oIGV2ZW50ICkgewoKCQkvLyBUT0RPOiBJdCBzaG91bGQgbmV2ZXIgYmUgcG9zc2libGUgdG8gbm90IGhhdmUgYW4gYWN0aXZlIGl0ZW0gYXQgdGhpcwoJCS8vIHBvaW50LCBidXQgdGhlIHRlc3RzIGRvbid0IHRyaWdnZXIgbW91c2VlbnRlciBiZWZvcmUgY2xpY2suCgkJdGhpcy5hY3RpdmUgPSB0aGlzLmFjdGl2ZSB8fCAkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCAiLnVpLW1lbnUtaXRlbSIgKTsKCQl2YXIgdWkgPSB7IGl0ZW06IHRoaXMuYWN0aXZlIH07CgkJaWYgKCAhdGhpcy5hY3RpdmUuaGFzKCAiLnVpLW1lbnUiICkubGVuZ3RoICkgewoJCQl0aGlzLmNvbGxhcHNlQWxsKCBldmVudCwgdHJ1ZSApOwoJCX0KCQl0aGlzLl90cmlnZ2VyKCAic2VsZWN0IiwgZXZlbnQsIHVpICk7Cgl9LAoKCV9maWx0ZXJNZW51SXRlbXM6IGZ1bmN0aW9uKCBjaGFyYWN0ZXIgKSB7CgkJdmFyIGVzY2FwZWRDaGFyYWN0ZXIgPSBjaGFyYWN0ZXIucmVwbGFjZSggL1tcLVxbXF17fSgpKis\/LixcXFxeJHwjXHNdL2csICJcXCQmIiApLAoJCQlyZWdleCA9IG5ldyBSZWdFeHAoICJeIiArIGVzY2FwZWRDaGFyYWN0ZXIsICJpIiApOwoKCQlyZXR1cm4gdGhpcy5hY3RpdmVNZW51CgkJCS5maW5kKCB0aGlzLm9wdGlvbnMuaXRlbXMgKQoKCQkJCS8vIE9ubHkgbWF0Y2ggb24gaXRlbXMsIG5vdCBkaXZpZGVycyBvciBvdGhlciBjb250ZW50ICgjMTA1NzEpCgkJCQkuZmlsdGVyKCAiLnVpLW1lbnUtaXRlbSIgKQoJCQkJCS5maWx0ZXIoIGZ1bmN0aW9uKCkgewoJCQkJCQlyZXR1cm4gcmVnZXgudGVzdCgKCQkJCQkJCSQudHJpbSggJCggdGhpcyApLmNoaWxkcmVuKCAiLnVpLW1lbnUtaXRlbS13cmFwcGVyIiApLnRleHQoKSApICk7CgkJCQkJfSApOwoJfQp9ICk7CgoKLyohCiAqIGpRdWVyeSBVSSBBdXRvY29tcGxldGUgMS4xMi4xCiAqIGh0dHA6Ly9qcXVlcnl1aS5jb20KICoKICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqLwoKLy8+PmxhYmVsOiBBdXRvY29tcGxldGUKLy8+Pmdyb3VwOiBXaWRnZXRzCi8vPj5kZXNjcmlwdGlvbjogTGlzdHMgc3VnZ2VzdGVkIHdvcmRzIGFzIHRoZSB1c2VyIGlzIHR5cGluZy4KLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2F1dG9jb21wbGV0ZS8KLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2F1dG9jb21wbGV0ZS8KLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2NvcmUuY3NzCi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9hdXRvY29tcGxldGUuY3NzCi8vPj5jc3MudGhlbWU6IC4uLy4uL3RoZW1lcy9iYXNlL3RoZW1lLmNzcwoKCgokLndpZGdldCggInVpLmF1dG9jb21wbGV0ZSIsIHsKCXZlcnNpb246ICIxLjEyLjEiLAoJZGVmYXVsdEVsZW1lbnQ6ICI8aW5wdXQ+IiwKCW9wdGlvbnM6IHsKCQlhcHBlbmRUbzogbnVsbCwKCQlhdXRvRm9jdXM6IGZhbHNlLAoJCWRlbGF5OiAzMDAsCgkJbWluTGVuZ3RoOiAxLAoJCXBvc2l0aW9uOiB7CgkJCW15OiAibGVmdCB0b3AiLAoJCQlhdDogImxlZnQgYm90dG9tIiwKCQkJY29sbGlzaW9uOiAibm9uZSIKCQl9LAoJCXNvdXJjZTogbnVsbCwKCgkJLy8gQ2FsbGJhY2tzCgkJY2hhbmdlOiBudWxsLAoJCWNsb3NlOiBudWxsLAoJCWZvY3VzOiBudWxsLAoJCW9wZW46IG51bGwsCgkJcmVzcG9uc2U6IG51bGwsCgkJc2VhcmNoOiBudWxsLAoJCXNlbGVjdDogbnVsbAoJfSwKCglyZXF1ZXN0SW5kZXg6IDAsCglwZW5kaW5nOiAwLAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoKCQkvLyBTb21lIGJyb3dzZXJzIG9ubHkgcmVwZWF0IGtleWRvd24gZXZlbnRzLCBub3Qga2V5cHJlc3MgZXZlbnRzLAoJCS8vIHNvIHdlIHVzZSB0aGUgc3VwcHJlc3NLZXlQcmVzcyBmbGFnIHRvIGRldGVybWluZSBpZiB3ZSd2ZSBhbHJlYWR5CgkJLy8gaGFuZGxlZCB0aGUga2V5ZG93biBldmVudC4gIzcyNjkKCQkvLyBVbmZvcnR1bmF0ZWx5IHRoZSBjb2RlIGZvciAmIGluIGtleXByZXNzIGlzIHRoZSBzYW1lIGFzIHRoZSB1cCBhcnJvdywKCQkvLyBzbyB3ZSB1c2UgdGhlIHN1cHByZXNzS2V5UHJlc3NSZXBlYXQgZmxhZyB0byBhdm9pZCBoYW5kbGluZyBrZXlwcmVzcwoJCS8vIGV2ZW50cyB3aGVuIHdlIGtub3cgdGhlIGtleWRvd24gZXZlbnQgd2FzIHVzZWQgdG8gbW9kaWZ5IHRoZQoJCS8vIHNlYXJjaCB0ZXJtLiAjNzc5OQoJCXZhciBzdXBwcmVzc0tleVByZXNzLCBzdXBwcmVzc0tleVByZXNzUmVwZWF0LCBzdXBwcmVzc0lucHV0LAoJCQlub2RlTmFtZSA9IHRoaXMuZWxlbWVudFsgMCBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksCgkJCWlzVGV4dGFyZWEgPSBub2RlTmFtZSA9PT0gInRleHRhcmVhIiwKCQkJaXNJbnB1dCA9IG5vZGVOYW1lID09PSAiaW5wdXQiOwoKCQkvLyBUZXh0YXJlYXMgYXJlIGFsd2F5cyBtdWx0aS1saW5lCgkJLy8gSW5wdXRzIGFyZSBhbHdheXMgc2luZ2xlLWxpbmUsIGV2ZW4gaWYgaW5zaWRlIGEgY29udGVudEVkaXRhYmxlIGVsZW1lbnQKCQkvLyBJRSBhbHNvIHRyZWF0cyBpbnB1dHMgYXMgY29udGVudEVkaXRhYmxlCgkJLy8gQWxsIG90aGVyIGVsZW1lbnQgdHlwZXMgYXJlIGRldGVybWluZWQgYnkgd2hldGhlciBvciBub3QgdGhleSdyZSBjb250ZW50RWRpdGFibGUKCQl0aGlzLmlzTXVsdGlMaW5lID0gaXNUZXh0YXJlYSB8fCAhaXNJbnB1dCAmJiB0aGlzLl9pc0NvbnRlbnRFZGl0YWJsZSggdGhpcy5lbGVtZW50ICk7CgoJCXRoaXMudmFsdWVNZXRob2QgPSB0aGlzLmVsZW1lbnRbIGlzVGV4dGFyZWEgfHwgaXNJbnB1dCA\\/IHZhbHVlIDogdGhpcy5fdmFsdWUoKTsKCgkJLy8gQWx3YXlzIHNhdmUgdGhlIGFjdHVhbCB2YWx1ZSwgbm90IHRoZSBvbmUgcGFzc2VkIGFzIGFuIGFyZ3VtZW50CgkJdGhpcy50ZXJtID0gdGhpcy5fdmFsdWUoKTsKCgkJaWYgKCB2YWx1ZS5sZW5ndGggPCB0aGlzLm9wdGlvbnMubWluTGVuZ3RoICkgewoJCQlyZXR1cm4gdGhpcy5jbG9zZSggZXZlbnQgKTsKCQl9CgoJCWlmICggdGhpcy5fdHJpZ2dlciggInNlYXJjaCIsIGV2ZW50ICkgPT09IGZhbHNlICkgewoJCQlyZXR1cm47CgkJfQoKCQlyZXR1cm4gdGhpcy5fc2VhcmNoKCB2YWx1ZSApOwoJfSwKCglfc2VhcmNoOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJdGhpcy5wZW5kaW5nKys7CgkJdGhpcy5fYWRkQ2xhc3MoICJ1aS1hdXRvY29tcGxldGUtbG9hZGluZyIgKTsKCQl0aGlzLmNhbmNlbFNlYXJjaCA9IGZhbHNlOwoKCQl0aGlzLnNvdXJjZSggeyB0ZXJtOiB2YWx1ZSB9LCB0aGlzLl9yZXNwb25zZSgpICk7Cgl9LAoKCV9yZXNwb25zZTogZnVuY3Rpb24oKSB7CgkJdmFyIGluZGV4ID0gKyt0aGlzLnJlcXVlc3RJbmRleDsKCgkJcmV0dXJuICQucHJveHkoIGZ1bmN0aW9uKCBjb250ZW50ICkgewoJCQlpZiAoIGluZGV4ID09PSB0aGlzLnJlcXVlc3RJbmRleCApIHsKCQkJCXRoaXMuX19yZXNwb25zZSggY29udGVudCApOwoJCQl9CgoJCQl0aGlzLnBlbmRpbmctLTsKCQkJaWYgKCAhdGhpcy5wZW5kaW5nICkgewoJCQkJdGhpcy5fcmVtb3ZlQ2xhc3MoICJ1aS1hdXRvY29tcGxldGUtbG9hZGluZyIgKTsKCQkJfQoJCX0sIHRoaXMgKTsKCX0sCgoJX19yZXNwb25zZTogZnVuY3Rpb24oIGNvbnRlbnQgKSB7CgkJaWYgKCBjb250ZW50ICkgewoJCQljb250ZW50ID0gdGhpcy5fbm9ybWFsaXplKCBjb250ZW50ICk7CgkJfQoJCXRoaXMuX3RyaWdnZXIoICJyZXNwb25zZSIsIG51bGwsIHsgY29udGVudDogY29udGVudCB9ICk7CgkJaWYgKCAhdGhpcy5vcHRpb25zLmRpc2FibGVkICYmIGNvbnRlbnQgJiYgY29udGVudC5sZW5ndGggJiYgIXRoaXMuY2FuY2VsU2VhcmNoICkgewoJCQl0aGlzLl9zdWdnZXN0KCBjb250ZW50ICk7CgkJCXRoaXMuX3RyaWdnZXIoICJvcGVuIiApOwoJCX0gZWxzZSB7CgoJCQkvLyB1c2UgLl9jbG9zZSgpIGluc3RlYWQgb2YgLmNsb3NlKCkgc28gd2UgZG9uJ3QgY2FuY2VsIGZ1dHVyZSBzZWFyY2hlcwoJCQl0aGlzLl9jbG9zZSgpOwoJCX0KCX0sCgoJY2xvc2U6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl0aGlzLmNhbmNlbFNlYXJjaCA9IHRydWU7CgkJdGhpcy5fY2xvc2UoIGV2ZW50ICk7Cgl9LAoKCV9jbG9zZTogZnVuY3Rpb24oIGV2ZW50ICkgewoKCQkvLyBSZW1vdmUgdGhlIGhhbmRsZXIgdGhhdCBjbG9zZXMgdGhlIG1lbnUgb24gb3V0c2lkZSBjbGlja3MKCQl0aGlzLl9vZmYoIHRoaXMuZG9jdW1lbnQsICJtb3VzZWRvd24iICk7CgoJCWlmICggdGhpcy5tZW51LmVsZW1lbnQuaXMoICI6dmlzaWJsZSIgKSApIHsKCQkJdGhpcy5tZW51LmVsZW1lbnQuaGlkZSgpOwoJCQl0aGlzLm1lbnUuYmx1cigpOwoJCQl0aGlzLmlzTmV3TWVudSA9IHRydWU7CgkJCXRoaXMuX3RyaWdnZXIoICJjbG9zZSIsIGV2ZW50ICk7CgkJfQoJfSwKCglfY2hhbmdlOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJaWYgKCB0aGlzLnByZXZpb3VzICE9PSB0aGlzLl92YWx1ZSgpICkgewoJCQl0aGlzLl90cmlnZ2VyKCAiY2hhbmdlIiwgZXZlbnQsIHsgaXRlbTogdGhpcy5zZWxlY3RlZEl0ZW0gfSApOwoJCX0KCX0sCgoJX25vcm1hbGl6ZTogZnVuY3Rpb24oIGl0ZW1zICkgewoKCQkvLyBhc3N1bWUgYWxsIGl0ZW1zIGhhdmUgdGhlIHJpZ2h0IGZvcm1hdCB3aGVuIHRoZSBmaXJzdCBpdGVtIGlzIGNvbXBsZXRlCgkJaWYgKCBpdGVtcy5sZW5ndGggJiYgaXRlbXNbIDAgXS5sYWJlbCAmJiBpdGVtc1sgMCBdLnZhbHVlICkgewoJCQlyZXR1cm4gaXRlbXM7CgkJfQoJCXJldHVybiAkLm1hcCggaXRlbXMsIGZ1bmN0aW9uKCBpdGVtICkgewoJCQlpZiAoIHR5cGVvZiBpdGVtID09PSAic3RyaW5nIiApIHsKCQkJCXJldHVybiB7CgkJCQkJbGFiZWw6IGl0ZW0sCgkJCQkJdmFsdWU6IGl0ZW0KCQkJCX07CgkJCX0KCQkJcmV0dXJuICQuZXh0ZW5kKCB7fSwgaXRlbSwgewoJCQkJbGFiZWw6IGl0ZW0ubGFiZWwgfHwgaXRlbS52YWx1ZSwKCQkJCXZhbHVlOiBpdGVtLnZhbHVlIHx8IGl0ZW0ubGFiZWwKCQkJfSApOwoJCX0gKTsKCX0sCgoJX3N1Z2dlc3Q6IGZ1bmN0aW9uKCBpdGVtcyApIHsKCQl2YXIgdWwgPSB0aGlzLm1lbnUuZWxlbWVudC5lbXB0eSgpOwoJCXRoaXMuX3JlbmRlck1lbnUoIHVsLCBpdGVtcyApOwoJCXRoaXMuaXNOZXdNZW51ID0gdHJ1ZTsKCQl0aGlzLm1lbnUucmVmcmVzaCgpOwoKCQkvLyBTaXplIGFuZCBwb3NpdGlvbiBtZW51CgkJdWwuc2hvdygpOwoJCXRoaXMuX3Jlc2l6ZU1lbnUoKTsKCQl1bC5wb3NpdGlvbiggJC5leHRlbmQoIHsKCQkJb2Y6IHRoaXMuZWxlbWVudAoJCX0sIHRoaXMub3B0aW9ucy5wb3NpdGlvbiApICk7CgoJCWlmICggdGhpcy5vcHRpb25zLmF1dG9Gb2N1cyApIHsKCQkJdGhpcy5tZW51Lm5leHQoKTsKCQl9CgoJCS8vIExpc3RlbiBmb3IgaW50ZXJhY3Rpb25zIG91dHNpZGUgb2YgdGhlIHdpZGdldCAoIzY2NDIpCgkJdGhpcy5fb24oIHRoaXMuZG9jdW1lbnQsIHsKCQkJbW91c2Vkb3duOiAiX2Nsb3NlT25DbGlja091dHNpZGUiCgkJfSApOwoJfSwKCglfcmVzaXplTWVudTogZnVuY3Rpb24oKSB7CgkJdmFyIHVsID0gdGhpcy5tZW51LmVsZW1lbnQ7CgkJdWwub3V0ZXJXaWR0aCggTWF0aC5tYXgoCgoJCQkvLyBGaXJlZm94IHdyYXBzIGxvbmcgdGV4dCAocG9zc2libHkgYSByb3VuZGluZyBidWcpCgkJCS8vIHNvIHdlIGFkZCAxcHggdG8gYXZvaWQgdGhlIHdyYXBwaW5nICgjNzUxMykKCQkJdWwud2lkdGgoICIiICkub3V0ZXJXaWR0aCgpICsgMSwKCQkJdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKQoJCSkgKTsKCX0sCgoJX3JlbmRlck1lbnU6IGZ1bmN0aW9uKCB1bCwgaXRlbXMgKSB7CgkJdmFyIHRoYXQgPSB0aGlzOwoJCSQuZWFjaCggaXRlbXMsIGZ1bmN0aW9uKCBpbmRleCwgaXRlbSApIHsKCQkJdGhhdC5fcmVuZGVySXRlbURhdGEoIHVsLCBpdGVtICk7CgkJfSApOwoJfSwKCglfcmVuZGVySXRlbURhdGE6IGZ1bmN0aW9uKCB1bCwgaXRlbSApIHsKCQlyZXR1cm4gdGhpcy5fcmVuZGVySXRlbSggdWwsIGl0ZW0gKS5kYXRhKCAidWktYXV0b2NvbXBsZXRlLWl0ZW0iLCBpdGVtICk7Cgl9LAoKCV9yZW5kZXJJdGVtOiBmdW5jdGlvbiggdWwsIGl0ZW0gKSB7CgkJcmV0dXJuICQoICI8bGk+IiApCgkJCS5hcHBlbmQoICQoICI8ZGl2PiIgKS50ZXh0KCBpdGVtLmxhYmVsICkgKQoJCQkuYXBwZW5kVG8oIHVsICk7Cgl9LAoKCV9tb3ZlOiBmdW5jdGlvbiggZGlyZWN0aW9uLCBldmVudCApIHsKCQlpZiAoICF0aGlzLm1lbnUuZWxlbWVudC5pcyggIjp2aXNpYmxlIiApICkgewoJCQl0aGlzLnNlYXJjaCggbnVsbCwgZXZlbnQgKTsKCQkJcmV0dXJuOwoJCX0KCQlpZiAoIHRoaXMubWVudS5pc0ZpcnN0SXRlbSgpICYmIC9ecHJldmlvdXMvLnRlc3QoIGRpcmVjdGlvbiApIHx8CgkJCQl0aGlzLm1lbnUuaXNMYXN0SXRlbSgpICYmIC9ebmV4dC8udGVzdCggZGlyZWN0aW9uICkgKSB7CgoJCQlpZiAoICF0aGlzLmlzTXVsdGlMaW5lICkgewoJCQkJdGhpcy5fdmFsdWUoIHRoaXMudGVybSApOwoJCQl9CgoJCQl0aGlzLm1lbnUuYmx1cigpOwoJCQlyZXR1cm47CgkJfQoJCXRoaXMubWVudVsgZGlyZWN0aW9uIF0oIGV2ZW50ICk7Cgl9LAoKCXdpZGdldDogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMubWVudS5lbGVtZW50OwoJfSwKCglfdmFsdWU6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLnZhbHVlTWV0aG9kLmFwcGx5KCB0aGlzLmVsZW1lbnQsIGFyZ3VtZW50cyApOwoJfSwKCglfa2V5RXZlbnQ6IGZ1bmN0aW9uKCBrZXlFdmVudCwgZXZlbnQgKSB7CgkJaWYgKCAhdGhpcy5pc011bHRpTGluZSB8fCB0aGlzLm1lbnUuZWxlbWVudC5pcyggIjp2aXNpYmxlIiApICkgewoJCQl0aGlzLl9tb3ZlKCBrZXlFdmVudCwgZXZlbnQgKTsKCgkJCS8vIFByZXZlbnRzIG1vdmluZyBjdXJzb3IgdG8gYmVnaW5uaW5nL2VuZCBvZiB0aGUgdGV4dCBmaWVsZCBpbiBzb21lIGJyb3dzZXJzCgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJfQoJfSwKCgkvLyBTdXBwb3J0OiBDaHJvbWUgPD01MAoJLy8gV2Ugc2hvdWxkIGJlIGFibGUgdG8ganVzdCB1c2UgdGhpcy5lbGVtZW50LnByb3AoICJpc0NvbnRlbnRFZGl0YWJsZSIgKQoJLy8gYnV0IGhpZGRlbiBlbGVtZW50cyBhbHdheXMgcmVwb3J0IGZhbHNlIGluIENocm9tZS4KCS8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zMTMwODIKCV9pc0NvbnRlbnRFZGl0YWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJaWYgKCAhZWxlbWVudC5sZW5ndGggKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCXZhciBlZGl0YWJsZSA9IGVsZW1lbnQucHJvcCggImNvbnRlbnRFZGl0YWJsZSIgKTsKCgkJaWYgKCBlZGl0YWJsZSA9PT0gImluaGVyaXQiICkgewoJCSAgcmV0dXJuIHRoaXMuX2lzQ29udGVudEVkaXRhYmxlKCBlbGVtZW50LnBhcmVudCgpICk7CgkJfQoKCQlyZXR1cm4gZWRpdGFibGUgPT09ICJ0cnVlIjsKCX0KfSApOwoKJC5leHRlbmQoICQudWkuYXV0b2NvbXBsZXRlLCB7Cgllc2NhcGVSZWdleDogZnVuY3Rpb24oIHZhbHVlICkgewoJCXJldHVybiB2YWx1ZS5yZXBsYWNlKCAvW1wtXFtcXXt9KCkqKz8uLFxcXF4kfCNcc10vZywgIlxcJCYiICk7Cgl9LAoJZmlsdGVyOiBmdW5jdGlvbiggYXJyYXksIHRlcm0gKSB7CgkJdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCAkLnVpLmF1dG9jb21wbGV0ZS5lc2NhcGVSZWdleCggdGVybSApLCAiaSIgKTsKCQlyZXR1cm4gJC5ncmVwKCBhcnJheSwgZnVuY3Rpb24oIHZhbHVlICkgewoJCQlyZXR1cm4gbWF0Y2hlci50ZXN0KCB2YWx1ZS5sYWJlbCB8fCB2YWx1ZS52YWx1ZSB8fCB2YWx1ZSApOwoJCX0gKTsKCX0KfSApOwoKLy8gTGl2ZSByZWdpb24gZXh0ZW5zaW9uLCBhZGRpbmcgYSBgbWVzc2FnZXNgIG9wdGlvbgovLyBOT1RFOiBUaGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBBUEkuIFdlIGFyZSBzdGlsbCBpbnZlc3RpZ2F0aW5nCi8vIGEgZnVsbCBzb2x1dGlvbiBmb3Igc3RyaW5nIG1hbmlwdWxhdGlvbiBhbmQgaW50ZXJuYXRpb25hbGl6YXRpb24uCiQud2lkZ2V0KCAidWkuYXV0b2NvbXBsZXRlIiwgJC51aS5hdXRvY29tcGxldGUsIHsKCW9wdGlvbnM6IHsKCQltZXNzYWdlczogewoJCQlub1Jlc3VsdHM6ICJObyBzZWFyY2ggcmVzdWx0cy4iLAoJCQlyZXN1bHRzOiBmdW5jdGlvbiggYW1vdW50ICkgewoJCQkJcmV0dXJuIGFtb3VudCArICggYW1vdW50ID4gMSA\/ICIgcmVzdWx0cyBhcmUiIDogIiByZXN1bHQgaXMiICkgKwoJCQkJCSIgYXZhaWxhYmxlLCB1c2UgdXAgYW5kIGRvd24gYXJyb3cga2V5cyB0byBuYXZpZ2F0ZS4iOwoJCQl9CgkJfQoJfSwKCglfX3Jlc3BvbnNlOiBmdW5jdGlvbiggY29udGVudCApIHsKCQl2YXIgbWVzc2FnZTsKCQl0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTsKCQlpZiAoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCB8fCB0aGlzLmNhbmNlbFNlYXJjaCApIHsKCQkJcmV0dXJuOwoJCX0KCQlpZiAoIGNvbnRlbnQgJiYgY29udGVudC5sZW5ndGggKSB7CgkJCW1lc3NhZ2UgPSB0aGlzLm9wdGlvbnMubWVzc2FnZXMucmVzdWx0cyggY29udGVudC5sZW5ndGggKTsKCQl9IGVsc2UgewoJCQltZXNzYWdlID0gdGhpcy5vcHRpb25zLm1lc3NhZ2VzLm5vUmVzdWx0czsKCQl9CgkJdGhpcy5saXZlUmVnaW9uLmNoaWxkcmVuKCkuaGlkZSgpOwoJCSQoICI8ZGl2PiIgKS50ZXh0KCBtZXNzYWdlICkuYXBwZW5kVG8oIHRoaXMubGl2ZVJlZ2lvbiApOwoJfQp9ICk7Cgp2YXIgd2lkZ2V0c0F1dG9jb21wbGV0ZSA9ICQudWkuYXV0b2NvbXBsZXRlOwoKCi8qIQogKiBqUXVlcnkgVUkgQ29udHJvbGdyb3VwIDEuMTIuMQogKiBodHRwOi8vanF1ZXJ5dWkuY29tCiAqCiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzCiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKi8KCi8vPj5sYWJlbDogQ29udHJvbGdyb3VwCi8vPj5ncm91cDogV2lkZ2V0cwovLz4+ZGVzY3JpcHRpb246IFZpc3VhbGx5IGdyb3VwcyBmb3JtIGNvbnRyb2wgd2lkZ2V0cwovLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vY29udHJvbGdyb3VwLwovLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vY29udHJvbGdyb3VwLwovLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3MKLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2NvbnRyb2xncm91cC5jc3MKLy8+PmNzcy50aGVtZTogLi4vLi4vdGhlbWVzL2Jhc2UvdGhlbWUuY3NzCgoKdmFyIGNvbnRyb2xncm91cENvcm5lclJlZ2V4ID0gL3VpLWNvcm5lci0oW2Etel0pezIsNn0vZzsKCnZhciB3aWRnZXRzQ29udHJvbGdyb3VwID0gJC53aWRnZXQoICJ1aS5jb250cm9sZ3JvdXAiLCB7Cgl2ZXJzaW9uOiAiMS4xMi4xIiwKCWRlZmF1bHRFbGVtZW50OiAiPGRpdj4iLAoJb3B0aW9uczogewoJCWRpcmVjdGlvbjogImhvcml6b250YWwiLAoJCWRpc2FibGVkOiBudWxsLAoJCW9ubHlWaXNpYmxlOiB0cnVlLAoJCWl0ZW1zOiB7CgkJCSJidXR0b24iOiAiaW5wdXRbdHlwZT1idXR0b25dLCBpbnB1dFt0eXBlPXN1Ym1pdF0sIGlucHV0W3R5cGU9cmVzZXRdLCBidXR0b24sIGEiLAoJCQkiY29udHJvbGdyb3VwTGFiZWwiOiAiLnVpLWNvbnRyb2xncm91cC1sYWJlbCIsCgkJCSJjaGVja2JveHJhZGlvIjogImlucHV0W3R5cGU9J2NoZWNrYm94J10sIGlucHV0W3R5cGU9J3JhZGlvJ10iLAoJCQkic2VsZWN0bWVudSI6ICJzZWxlY3QiLAoJCQkic3Bpbm5lciI6ICIudWktc3Bpbm5lci1pbnB1dCIKCQl9Cgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX2VuaGFuY2UoKTsKCX0sCgoJLy8gVG8gc3VwcG9ydCB0aGUgZW5oYW5jZWQgb3B0aW9uIGluIGpRdWVyeSBNb2JpbGUsIHdlIGlzb2xhdGUgRE9NIG1hbmlwdWxhdGlvbgoJX2VuaGFuY2U6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC5hdHRyKCAicm9sZSIsICJ0b29sYmFyIiApOwoJCXRoaXMucmVmcmVzaCgpOwoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdGhpcy5fY2FsbENoaWxkTWV0aG9kKCAiZGVzdHJveSIgKTsKCQl0aGlzLmNoaWxkV2lkZ2V0cy5yZW1vdmVEYXRhKCAidWktY29udHJvbGdyb3VwLWRhdGEiICk7CgkJdGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoICJyb2xlIiApOwoJCWlmICggdGhpcy5vcHRpb25zLml0ZW1zLmNvbnRyb2xncm91cExhYmVsICkgewoJCQl0aGlzLmVsZW1lbnQKCQkJCS5maW5kKCB0aGlzLm9wdGlvbnMuaXRlbXMuY29udHJvbGdyb3VwTGFiZWwgKQoJCQkJLmZpbmQoICIudWktY29udHJvbGdyb3VwLWxhYmVsLWNvbnRlbnRzIiApCgkJCQkuY29udGVudHMoKS51bndyYXAoKTsKCQl9Cgl9LAoKCV9pbml0V2lkZ2V0czogZnVuY3Rpb24oKSB7CgkJdmFyIHRoYXQgPSB0aGlzLAoJCQljaGlsZFdpZGdldHMgPSBbXTsKCgkJLy8gRmlyc3Qgd2UgaXRlcmF0ZSBvdmVyIGVhY2ggb2YgdGhlIGl0ZW1zIG9wdGlvbnMKCQkkLmVhY2goIHRoaXMub3B0aW9ucy5pdGVtcywgZnVuY3Rpb24oIHdpZGdldCwgc2VsZWN0b3IgKSB7CgkJCXZhciBsYWJlbHM7CgkJCXZhciBvcHRpb25zID0ge307CgoJCQkvLyBNYWtlIHN1cmUgdGhlIHdpZGdldCBoYXMgYSBzZWxlY3RvciBzZXQKCQkJaWYgKCAhc2VsZWN0b3IgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCWlmICggd2lkZ2V0ID09PSAiY29udHJvbGdyb3VwTGFiZWwiICkgewoJCQkJbGFiZWxzID0gdGhhdC5lbGVtZW50LmZpbmQoIHNlbGVjdG9yICk7CgkJCQlsYWJlbHMuZWFjaCggZnVuY3Rpb24oKSB7CgkJCQkJdmFyIGVsZW1lbnQgPSAkKCB0aGlzICk7CgoJCQkJCWlmICggZWxlbWVudC5jaGlsZHJlbiggIi51aS1jb250cm9sZ3JvdXAtbGFiZWwtY29udGVudHMiICkubGVuZ3RoICkgewoJCQkJCQlyZXR1cm47CgkJCQkJfQoJCQkJCWVsZW1lbnQuY29udGVudHMoKQoJCQkJCQkud3JhcEFsbCggIjxzcGFuIGNsYXNzPSd1aS1jb250cm9sZ3JvdXAtbGFiZWwtY29udGVudHMnPjwvc3Bhbj4iICk7CgkJCQl9ICk7CgkJCQl0aGF0Ll9hZGRDbGFzcyggbGFiZWxzLCBudWxsLCAidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLXN0YXRlLWRlZmF1bHQiICk7CgkJCQljaGlsZFdpZGdldHMgPSBjaGlsZFdpZGdldHMuY29uY2F0KCBsYWJlbHMuZ2V0KCkgKTsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gTWFrZSBzdXJlIHRoZSB3aWRnZXQgYWN0dWFsbHkgZXhpc3RzCgkJCWlmICggISQuZm5bIHdpZGdldCBdICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBXZSBhc3N1bWUgZXZlcnl0aGluZyBpcyBpbiB0aGUgbWlkZGxlIHRvIHN0YXJ0IGJlY2F1c2Ugd2UgY2FuJ3QgZGV0ZXJtaW5lCgkJCS8vIGZpcnN0IC8gbGFzdCBlbGVtZW50cyB1bnRpbCBhbGwgZW5oYW5jbWVudHMgYXJlIGRvbmUuCgkJCWlmICggdGhhdFsgIl8iICsgd2lkZ2V0ICsgIk9wdGlvbnMiIF0gKSB7CgkJCQlvcHRpb25zID0gdGhhdFsgIl8iICsgd2lkZ2V0ICsgIk9wdGlvbnMiIF0oICJtaWRkbGUiICk7CgkJCX0gZWxzZSB7CgkJCQlvcHRpb25zID0geyBjbGFzc2VzOiB7fSB9OwoJCQl9CgoJCQkvLyBGaW5kIGluc3RhbmNlcyBvZiB0aGlzIHdpZGdldCBpbnNpZGUgY29udHJvbGdyb3VwIGFuZCBpbml0IHRoZW0KCQkJdGhhdC5lbGVtZW50CgkJCQkuZmluZCggc2VsZWN0b3IgKQoJCQkJLmVhY2goIGZ1bmN0aW9uKCkgewoJCQkJCXZhciBlbGVtZW50ID0gJCggdGhpcyApOwoJCQkJCXZhciBpbnN0YW5jZSA9IGVsZW1lbnRbIHdpZGdldCBdKCAiaW5zdGFuY2UiICk7CgoJCQkJCS8vIFdlIG5lZWQgdG8gY2xvbmUgdGhlIGRlZmF1bHQgb3B0aW9ucyBmb3IgdGhpcyB0eXBlIG9mIHdpZGdldCB0byBhdm9pZAoJCQkJCS8vIHBvbGx1dGluZyB0aGUgdmFyaWFibGUgb3B0aW9ucyB3aGljaCBoYXMgYSB3aWRlciBzY29wZSB0aGFuIGEgc2luZ2xlIHdpZGdldC4KCQkJCQl2YXIgaW5zdGFuY2VPcHRpb25zID0gJC53aWRnZXQuZXh0ZW5kKCB7fSwgb3B0aW9ucyApOwoKCQkJCQkvLyBJZiB0aGUgYnV0dG9uIGlzIHRoZSBjaGlsZCBvZiBhIHNwaW5uZXIgaWdub3JlIGl0CgkJCQkJLy8gVE9ETzogRmluZCBhIG1vcmUgZ2VuZXJpYyBzb2x1dGlvbgoJCQkJCWlmICggd2lkZ2V0ID09PSAiYnV0dG9uIiAmJiBlbGVtZW50LnBhcmVudCggIi51aS1zcGlubmVyIiApLmxlbmd0aCApIHsKCQkJCQkJcmV0dXJuOwoJCQkJCX0KCgkJCQkJLy8gQ3JlYXRlIHRoZSB3aWRnZXQgaWYgaXQgZG9lc24ndCBleGlzdAoJCQkJCWlmICggIWluc3RhbmNlICkgewoJCQkJCQlpbnN0YW5jZSA9IGVsZW1lbnRbIHdpZGdldCBdKClbIHdpZGdldCBdKCAiaW5zdGFuY2UiICk7CgkJCQkJfQoJCQkJCWlmICggaW5zdGFuY2UgKSB7CgkJCQkJCWluc3RhbmNlT3B0aW9ucy5jbGFzc2VzID0KCQkJCQkJCXRoYXQuX3Jlc29sdmVDbGFzc2VzVmFsdWVzKCBpbnN0YW5jZU9wdGlvbnMuY2xhc3NlcywgaW5zdGFuY2UgKTsKCQkJCQl9CgkJCQkJZWxlbWVudFsgd2lkZ2V0IF0oIGluc3RhbmNlT3B0aW9ucyApOwoKCQkJCQkvLyBTdG9yZSBhbiBpbnN0YW5jZSBvZiB0aGUgY29udHJvbGdyb3VwIHRvIGJlIGFibGUgdG8gcmVmZXJlbmNlCgkJCQkJLy8gZnJvbSB0aGUgb3V0ZXJtb3N0IGVsZW1lbnQgZm9yIGNoYW5naW5nIG9wdGlvbnMgYW5kIHJlZnJlc2gKCQkJCQl2YXIgd2lkZ2V0RWxlbWVudCA9IGVsZW1lbnRbIHdpZGdldCBdKCAid2lkZ2V0IiApOwoJCQkJCSQuZGF0YSggd2lkZ2V0RWxlbWVudFsgMCBdLCAidWktY29udHJvbGdyb3VwLWRhdGEiLAoJCQkJCQlpbnN0YW5jZSA\/IGluc3RhbmNlIDogZWxlbWVudFsgd2lkZ2V0IF0oICJpbnN0YW5jZSIgKSApOwoKCQkJCQljaGlsZFdpZGdldHMucHVzaCggd2lkZ2V0RWxlbWVudFsgMCBdICk7CgkJCQl9ICk7CgkJfSApOwoKCQl0aGlzLmNoaWxkV2lkZ2V0cyA9ICQoICQudW5pcXVlKCBjaGlsZFdpZGdldHMgKSApOwoJCXRoaXMuX2FkZENsYXNzKCB0aGlzLmNoaWxkV2lkZ2V0cywgInVpLWNvbnRyb2xncm91cC1pdGVtIiApOwoJfSwKCglfY2FsbENoaWxkTWV0aG9kOiBmdW5jdGlvbiggbWV0aG9kICkgewoJCXRoaXMuY2hpbGRXaWRnZXRzLmVhY2goIGZ1bmN0aW9uKCkgewoJCQl2YXIgZWxlbWVudCA9ICQoIHRoaXMgKSwKCQkJCWRhdGEgPSBlbGVtZW50LmRhdGEoICJ1aS1jb250cm9sZ3JvdXAtZGF0YSIgKTsKCQkJaWYgKCBkYXRhICYmIGRhdGFbIG1ldGhvZCBdICkgewoJCQkJZGF0YVsgbWV0aG9kIF0oKTsKCQkJfQoJCX0gKTsKCX0sCgoJX3VwZGF0ZUNvcm5lckNsYXNzOiBmdW5jdGlvbiggZWxlbWVudCwgcG9zaXRpb24gKSB7CgkJdmFyIHJlbW92ZSA9ICJ1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20gdWktY29ybmVyLWxlZnQgdWktY29ybmVyLXJpZ2h0IHVpLWNvcm5lci1hbGwiOwoJCXZhciBhZGQgPSB0aGlzLl9idWlsZFNpbXBsZU9wdGlvbnMoIHBvc2l0aW9uLCAibGFiZWwiICkuY2xhc3Nlcy5sYWJlbDsKCgkJdGhpcy5fcmVtb3ZlQ2xhc3MoIGVsZW1lbnQsIG51bGwsIHJlbW92ZSApOwoJCXRoaXMuX2FkZENsYXNzKCBlbGVtZW50LCBudWxsLCBhZGQgKTsKCX0sCgoJX2J1aWxkU2ltcGxlT3B0aW9uczogZnVuY3Rpb24oIHBvc2l0aW9uLCBrZXkgKSB7CgkJdmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gPT09ICJ2ZXJ0aWNhbCI7CgkJdmFyIHJlc3VsdCA9IHsKCQkJY2xhc3Nlczoge30KCQl9OwoJCXJlc3VsdC5jbGFzc2VzWyBrZXkgXSA9IHsKCQkJIm1pZGRsZSI6ICIiLAoJCQkiZmlyc3QiOiAidWktY29ybmVyLSIgKyAoIGRpcmVjdGlvbiA\/ICJ0b3AiIDogImxlZnQiICksCgkJCSJsYXN0IjogInVpLWNvcm5lci0iICsgKCBkaXJlY3Rpb24gPyAiYm90dG9tIiA6ICJyaWdodCIgKSwKCQkJIm9ubHkiOiAidWktY29ybmVyLWFsbCIKCQl9WyBwb3NpdGlvbiBdOwoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCglfc3Bpbm5lck9wdGlvbnM6IGZ1bmN0aW9uKCBwb3NpdGlvbiApIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMuX2J1aWxkU2ltcGxlT3B0aW9ucyggcG9zaXRpb24sICJ1aS1zcGlubmVyIiApOwoKCQlvcHRpb25zLmNsYXNzZXNbICJ1aS1zcGlubmVyLXVwIiBdID0gIiI7CgkJb3B0aW9ucy5jbGFzc2VzWyAidWktc3Bpbm5lci1kb3duIiBdID0gIiI7CgoJCXJldHVybiBvcHRpb25zOwoJfSwKCglfYnV0dG9uT3B0aW9uczogZnVuY3Rpb24oIHBvc2l0aW9uICkgewoJCXJldHVybiB0aGlzLl9idWlsZFNpbXBsZU9wdGlvbnMoIHBvc2l0aW9uLCAidWktYnV0dG9uIiApOwoJfSwKCglfY2hlY2tib3hyYWRpb09wdGlvbnM6IGZ1bmN0aW9uKCBwb3NpdGlvbiApIHsKCQlyZXR1cm4gdGhpcy5fYnVpbGRTaW1wbGVPcHRpb25zKCBwb3NpdGlvbiwgInVpLWNoZWNrYm94cmFkaW8tbGFiZWwiICk7Cgl9LAoKCV9zZWxlY3RtZW51T3B0aW9uczogZnVuY3Rpb24oIHBvc2l0aW9uICkgewoJCXZhciBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAidmVydGljYWwiOwoJCXJldHVybiB7CgkJCXdpZHRoOiBkaXJlY3Rpb24gPyAiYXV0byIgOiBmYWxzZSwKCQkJY2xhc3NlczogewoJCQkJbWlkZGxlOiB7CgkJCQkJInVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW4iOiAiIiwKCQkJCQkidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkIjogIiIKCQkJCX0sCgkJCQlmaXJzdDogewoJCQkJCSJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1vcGVuIjogInVpLWNvcm5lci0iICsgKCBkaXJlY3Rpb24gPyAidG9wIiA6ICJ0bCIgKSwKCQkJCQkidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkIjogInVpLWNvcm5lci0iICsgKCBkaXJlY3Rpb24gPyAidG9wIiA6ICJsZWZ0IiApCgkJCQl9LAoJCQkJbGFzdDogewoJCQkJCSJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1vcGVuIjogZGlyZWN0aW9uID8gIiIgOiAidWktY29ybmVyLXRyIiwKCQkJCQkidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkIjogInVpLWNvcm5lci0iICsgKCBkaXJlY3Rpb24gPyAiYm90dG9tIiA6ICJyaWdodCIgKQoJCQkJfSwKCQkJCW9ubHk6IHsKCQkJCQkidWktc2VsZWN0bWVudS1idXR0b24tb3BlbiI6ICJ1aS1jb3JuZXItdG9wIiwKCQkJCQkidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkIjogInVpLWNvcm5lci1hbGwiCgkJCQl9CgoJCQl9WyBwb3NpdGlvbiBdCgkJfTsKCX0sCgoJX3Jlc29sdmVDbGFzc2VzVmFsdWVzOiBmdW5jdGlvbiggY2xhc3NlcywgaW5zdGFuY2UgKSB7CgkJdmFyIHJlc3VsdCA9IHt9OwoJCSQuZWFjaCggY2xhc3NlcywgZnVuY3Rpb24oIGtleSApIHsKCQkJdmFyIGN1cnJlbnQgPSBpbnN0YW5jZS5vcHRpb25zLmNsYXNzZXNbIGtleSBdIHx8ICIiOwoJCQljdXJyZW50ID0gJC50cmltKCBjdXJyZW50LnJlcGxhY2UoIGNvbnRyb2xncm91cENvcm5lclJlZ2V4LCAiIiApICk7CgkJCXJlc3VsdFsga2V5IF0gPSAoIGN1cnJlbnQgKyAiICIgKyBjbGFzc2VzWyBrZXkgXSApLnJlcGxhY2UoIC9ccysvZywgIiAiICk7CgkJfSApOwoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCV9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCWlmICgga2V5ID09PSAiZGlyZWN0aW9uIiApIHsKCQkJdGhpcy5fcmVtb3ZlQ2xhc3MoICJ1aS1jb250cm9sZ3JvdXAtIiArIHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gKTsKCQl9CgoJCXRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7CgkJaWYgKCBrZXkgPT09ICJkaXNhYmxlZCIgKSB7CgkJCXRoaXMuX2NhbGxDaGlsZE1ldGhvZCggdmFsdWUgPyAiZGlzYWJsZSIgOiAiZW5hYmxlIiApOwoJCQlyZXR1cm47CgkJfQoKCQl0aGlzLnJlZnJlc2goKTsKCX0sCgoJcmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJdmFyIGNoaWxkcmVuLAoJCQl0aGF0ID0gdGhpczsKCgkJdGhpcy5fYWRkQ2xhc3MoICJ1aS1jb250cm9sZ3JvdXAgdWktY29udHJvbGdyb3VwLSIgKyB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uICk7CgoJCWlmICggdGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gImhvcml6b250YWwiICkgewoJCQl0aGlzLl9hZGRDbGFzcyggbnVsbCwgInVpLWhlbHBlci1jbGVhcmZpeCIgKTsKCQl9CgkJdGhpcy5faW5pdFdpZGdldHMoKTsKCgkJY2hpbGRyZW4gPSB0aGlzLmNoaWxkV2lkZ2V0czsKCgkJLy8gV2UgZmlsdGVyIGhlcmUgYmVjYXVzZSB3ZSBuZWVkIHRvIHRyYWNrIGFsbCBjaGlsZFdpZGdldHMgbm90IGp1c3QgdGhlIHZpc2libGUgb25lcwoJCWlmICggdGhpcy5vcHRpb25zLm9ubHlWaXNpYmxlICkgewoJCQljaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlciggIjp2aXNpYmxlIiApOwoJCX0KCgkJaWYgKCBjaGlsZHJlbi5sZW5ndGggKSB7CgoJCQkvLyBXZSBkbyB0aGlzIGxhc3QgYmVjYXVzZSB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBhbGwgZW5oYW5jbWVudCBpcyBkb25lCgkJCS8vIGJlZm9yZSBkZXRlcm1pbmluZyBmaXJzdCBhbmQgbGFzdAoJCQkkLmVhY2goIFsgImZpcnN0IiwgImxhc3QiIF0sIGZ1bmN0aW9uKCBpbmRleCwgdmFsdWUgKSB7CgkJCQl2YXIgaW5zdGFuY2UgPSBjaGlsZHJlblsgdmFsdWUgXSgpLmRhdGEoICJ1aS1jb250cm9sZ3JvdXAtZGF0YSIgKTsKCgkJCQlpZiAoIGluc3RhbmNlICYmIHRoYXRbICJfIiArIGluc3RhbmNlLndpZGdldE5hbWUgKyAiT3B0aW9ucyIgXSApIHsKCQkJCQl2YXIgb3B0aW9ucyA9IHRoYXRbICJfIiArIGluc3RhbmNlLndpZGdldE5hbWUgKyAiT3B0aW9ucyIgXSgKCQkJCQkJY2hpbGRyZW4ubGVuZ3RoID09PSAxID8gIm9ubHkiIDogdmFsdWUKCQkJCQkpOwoJCQkJCW9wdGlvbnMuY2xhc3NlcyA9IHRoYXQuX3Jlc29sdmVDbGFzc2VzVmFsdWVzKCBvcHRpb25zLmNsYXNzZXMsIGluc3RhbmNlICk7CgkJCQkJaW5zdGFuY2UuZWxlbWVudFsgaW5zdGFuY2Uud2lkZ2V0TmFtZSBdKCBvcHRpb25zICk7CgkJCQl9IGVsc2UgewoJCQkJCXRoYXQuX3VwZGF0ZUNvcm5lckNsYXNzKCBjaGlsZHJlblsgdmFsdWUgXSgpLCB2YWx1ZSApOwoJCQkJfQoJCQl9ICk7CgoJCQkvLyBGaW5hbGx5IGNhbGwgdGhlIHJlZnJlc2ggbWV0aG9kIG9uIGVhY2ggb2YgdGhlIGNoaWxkIHdpZGdldHMuCgkJCXRoaXMuX2NhbGxDaGlsZE1ldGhvZCggInJlZnJlc2giICk7CgkJfQoJfQp9ICk7CgovKiEKICogalF1ZXJ5IFVJIENoZWNrYm94cmFkaW8gMS4xMi4xCiAqIGh0dHA6Ly9qcXVlcnl1aS5jb20KICoKICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqLwoKLy8+PmxhYmVsOiBDaGVja2JveHJhZGlvCi8vPj5ncm91cDogV2lkZ2V0cwovLz4+ZGVzY3JpcHRpb246IEVuaGFuY2VzIGEgZm9ybSB3aXRoIG11bHRpcGxlIHRoZW1lYWJsZSBjaGVja2JveGVzIG9yIHJhZGlvIGJ1dHRvbnMuCi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9jaGVja2JveHJhZGlvLwovLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vY2hlY2tib3hyYWRpby8KLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2NvcmUuY3NzCi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9idXR0b24uY3NzCi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9jaGVja2JveHJhZGlvLmNzcwovLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3MKCgoKJC53aWRnZXQoICJ1aS5jaGVja2JveHJhZGlvIiwgWyAkLnVpLmZvcm1SZXNldE1peGluLCB7Cgl2ZXJzaW9uOiAiMS4xMi4xIiwKCW9wdGlvbnM6IHsKCQlkaXNhYmxlZDogbnVsbCwKCQlsYWJlbDogbnVsbCwKCQlpY29uOiB0cnVlLAoJCWNsYXNzZXM6IHsKCQkJInVpLWNoZWNrYm94cmFkaW8tbGFiZWwiOiAidWktY29ybmVyLWFsbCIsCgkJCSJ1aS1jaGVja2JveHJhZGlvLWljb24iOiAidWktY29ybmVyLWFsbCIKCQl9Cgl9LAoKCV9nZXRDcmVhdGVPcHRpb25zOiBmdW5jdGlvbigpIHsKCQl2YXIgZGlzYWJsZWQsIGxhYmVsczsKCQl2YXIgdGhhdCA9IHRoaXM7CgkJdmFyIG9wdGlvbnMgPSB0aGlzLl9zdXBlcigpIHx8IHt9OwoKCQkvLyBXZSByZWFkIHRoZSB0eXBlIGhlcmUsIGJlY2F1c2UgaXQgbWFrZXMgbW9yZSBzZW5zZSB0byB0aHJvdyBhIGVsZW1lbnQgdHlwZSBlcnJvciBmaXJzdCwKCQkvLyByYXRoZXIgdGhlbiB0aGUgZXJyb3IgZm9yIGxhY2sgb2YgYSBsYWJlbC4gT2Z0ZW4gaWYgaXRzIHRoZSB3cm9uZyB0eXBlLCBpdAoJCS8vIHdvbid0IGhhdmUgYSBsYWJlbCAoZS5nLiBjYWxsaW5nIG9uIGEgZGl2LCBidG4sIGV0YykKCQl0aGlzLl9yZWFkVHlwZSgpOwoKCQlsYWJlbHMgPSB0aGlzLmVsZW1lbnQubGFiZWxzKCk7CgoJCS8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBsYWJlbHMsIHVzZSB0aGUgbGFzdCBvbmUKCQl0aGlzLmxhYmVsID0gJCggbGFiZWxzWyBsYWJlbHMubGVuZ3RoIC0gMSBdICk7CgkJaWYgKCAhdGhpcy5sYWJlbC5sZW5ndGggKSB7CgkJCSQuZXJyb3IoICJObyBsYWJlbCBmb3VuZCBmb3IgY2hlY2tib3hyYWRpbyB3aWRnZXQiICk7CgkJfQoKCQl0aGlzLm9yaWdpbmFsTGFiZWwgPSAiIjsKCgkJLy8gV2UgbmVlZCB0byBnZXQgdGhlIGxhYmVsIHRleHQgYnV0IHRoaXMgbWF5IGFsc28gbmVlZCB0byBtYWtlIHN1cmUgaXQgZG9lcyBub3QgY29udGFpbiB0aGUKCQkvLyBpbnB1dCBpdHNlbGYuCgkJdGhpcy5sYWJlbC5jb250ZW50cygpLm5vdCggdGhpcy5lbGVtZW50WyAwIF0gKS5lYWNoKCBmdW5jdGlvbigpIHsKCgkJCS8vIFRoZSBsYWJlbCBjb250ZW50cyBjb3VsZCBiZSB0ZXh0LCBodG1sLCBvciBhIG1peC4gV2UgY29uY2F0IGVhY2ggZWxlbWVudCB0byBnZXQgYQoJCQkvLyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGxhYmVsLCB3aXRob3V0IHRoZSBpbnB1dCBhcyBwYXJ0IG9mIGl0LgoJCQl0aGF0Lm9yaWdpbmFsTGFiZWwgKz0gdGhpcy5ub2RlVHlwZSA9PT0gMyA\\/IHRoaXMuZWxlbWVudC52YWwoKSA6IHRoaXMuZWxlbWVudC5odG1sKCk7CgkJaWYgKCB0aGlzLm9yaWdpbmFsTGFiZWwgKSB7CgkJCW9wdGlvbnMubGFiZWwgPSB0aGlzLm9yaWdpbmFsTGFiZWw7CgkJfQoKCQlyZXR1cm4gb3B0aW9uczsKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJaWYgKCAhdGhpcy5vcHRpb24uc2hvd0xhYmVsICYgIXRoaXMub3B0aW9ucy5pY29uICkgewoJCQl0aGlzLm9wdGlvbnMuc2hvd0xhYmVsID0gdHJ1ZTsKCQl9CgoJCS8vIFdlIGhhdmUgdG8gY2hlY2sgdGhlIG9wdGlvbiBhZ2FpbiBoZXJlIGV2ZW4gdGhvdWdoIHdlIGRpZCBpbiBfZ2V0Q3JlYXRlT3B0aW9ucywKCQkvLyBiZWNhdXNlIG51bGwgbWF5IGhhdmUgYmVlbiBwYXNzZWQgb24gaW5pdCB3aGljaCB3b3VsZCBvdmVycmlkZSB3aGF0IHdhcyBzZXQgaW4KCQkvLyBfZ2V0Q3JlYXRlT3B0aW9ucwoJCWlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkID09IG51bGwgKSB7CgkJCXRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IHRoaXMuZWxlbWVudFsgMCBdLmRpc2FibGVkIHx8IGZhbHNlOwoJCX0KCgkJdGhpcy5oYXNUaXRsZSA9ICEhdGhpcy5lbGVtZW50LmF0dHIoICJ0aXRsZSIgKTsKCgkJLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBsYWJlbCBuZWVkcyB0byBiZSBzZXQgb3IgaWYgaXRzIGFscmVhZHkgY29ycmVjdAoJCWlmICggdGhpcy5vcHRpb25zLmxhYmVsICYmIHRoaXMub3B0aW9ucy5sYWJlbCAhPT0gdGhpcy5vcmlnaW5hbExhYmVsICkgewoJCQlpZiAoIHRoaXMuaXNJbnB1dCApIHsKCQkJCXRoaXMuZWxlbWVudC52YWwoIHRoaXMub3B0aW9ucy5sYWJlbCApOwoJCQl9IGVsc2UgewoJCQkJdGhpcy5lbGVtZW50Lmh0bWwoIHRoaXMub3B0aW9ucy5sYWJlbCApOwoJCQl9CgkJfQoJCXRoaXMuX2FkZENsYXNzKCAidWktYnV0dG9uIiwgInVpLXdpZGdldCIgKTsKCQl0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIHRoaXMub3B0aW9ucy5kaXNhYmxlZCApOwoJCXRoaXMuX2VuaGFuY2UoKTsKCgkJaWYgKCB0aGlzLmVsZW1lbnQuaXMoICJhIiApICkgewoJCQl0aGlzLl9vbiggewoJCQkJImtleXVwIjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCWlmICggZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLlNQQUNFICkgewoJCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKCQkJCQkJLy8gU3VwcG9ydDogUGhhbnRvbUpTIDw9IDEuOSwgSUUgOCBPbmx5CgkJCQkJCS8vIElmIGEgbmF0aXZlIGNsaWNrIGlzIGF2YWlsYWJsZSB1c2UgaXQgc28gd2UgYWN0dWFsbHkgY2F1c2UgbmF2aWdhdGlvbgoJCQkJCQkvLyBvdGhlcndpc2UganVzdCB0cmlnZ2VyIGEgY2xpY2sgZXZlbnQKCQkJCQkJaWYgKCB0aGlzLmVsZW1lbnRbIDAgXS5jbGljayApIHsKCQkJCQkJCXRoaXMuZWxlbWVudFsgMCBdLmNsaWNrKCk7CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQl0aGlzLmVsZW1lbnQudHJpZ2dlciggImNsaWNrIiApOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9ICk7CgkJfQoJfSwKCglfZW5oYW5jZTogZnVuY3Rpb24oKSB7CgkJaWYgKCAhdGhpcy5lbGVtZW50LmlzKCAiYnV0dG9uIiApICkgewoJCQl0aGlzLmVsZW1lbnQuYXR0ciggInJvbGUiLCAiYnV0dG9uIiApOwoJCX0KCgkJaWYgKCB0aGlzLm9wdGlvbnMuaWNvbiApIHsKCQkJdGhpcy5fdXBkYXRlSWNvbiggImljb24iLCB0aGlzLm9wdGlvbnMuaWNvbiApOwoJCQl0aGlzLl91cGRhdGVUb29sdGlwKCk7CgkJfQoJfSwKCglfdXBkYXRlVG9vbHRpcDogZnVuY3Rpb24oKSB7CgkJdGhpcy50aXRsZSA9IHRoaXMuZWxlbWVudC5hdHRyKCAidGl0bGUiICk7CgoJCWlmICggIXRoaXMub3B0aW9ucy5zaG93TGFiZWwgJiYgIXRoaXMudGl0bGUgKSB7CgkJCXRoaXMuZWxlbWVudC5hdHRyKCAidGl0bGUiLCB0aGlzLm9wdGlvbnMubGFiZWwgKTsKCQl9Cgl9LAoKCV91cGRhdGVJY29uOiBmdW5jdGlvbiggb3B0aW9uLCB2YWx1ZSApIHsKCQl2YXIgaWNvbiA9IG9wdGlvbiAhPT0gImljb25Qb3NpdGlvbiIsCgkJCXBvc2l0aW9uID0gaWNvbiA\/IHRoaXMub3B0aW9ucy5pY29uUG9zaXRpb24gOiB2YWx1ZSwKCQkJZGlzcGxheUJsb2NrID0gcG9zaXRpb24gPT09ICJ0b3AiIHx8IHBvc2l0aW9uID09PSAiYm90dG9tIjsKCgkJLy8gQ3JlYXRlIGljb24KCQlpZiAoICF0aGlzLmljb24gKSB7CgkJCXRoaXMuaWNvbiA9ICQoICI8c3Bhbj4iICk7CgoJCQl0aGlzLl9hZGRDbGFzcyggdGhpcy5pY29uLCAidWktYnV0dG9uLWljb24iLCAidWktaWNvbiIgKTsKCgkJCWlmICggIXRoaXMub3B0aW9ucy5zaG93TGFiZWwgKSB7CgkJCQl0aGlzLl9hZGRDbGFzcyggInVpLWJ1dHRvbi1pY29uLW9ubHkiICk7CgkJCX0KCQl9IGVsc2UgaWYgKCBpY29uICkgewoKCQkJLy8gSWYgd2UgYXJlIHVwZGF0aW5nIHRoZSBpY29uIHJlbW92ZSB0aGUgb2xkIGljb24gY2xhc3MKCQkJdGhpcy5fcmVtb3ZlQ2xhc3MoIHRoaXMuaWNvbiwgbnVsbCwgdGhpcy5vcHRpb25zLmljb24gKTsKCQl9CgoJCS8vIElmIHdlIGFyZSB1cGRhdGluZyB0aGUgaWNvbiBhZGQgdGhlIG5ldyBpY29uIGNsYXNzCgkJaWYgKCBpY29uICkgewoJCQl0aGlzLl9hZGRDbGFzcyggdGhpcy5pY29uLCBudWxsLCB2YWx1ZSApOwoJCX0KCgkJdGhpcy5fYXR0YWNoSWNvbiggcG9zaXRpb24gKTsKCgkJLy8gSWYgdGhlIGljb24gaXMgb24gdG9wIG9yIGJvdHRvbSB3ZSBuZWVkIHRvIGFkZCB0aGUgdWktd2lkZ2V0LWljb24tYmxvY2sgY2xhc3MgYW5kIHJlbW92ZQoJCS8vIHRoZSBpY29uU3BhY2UgaWYgdGhlcmUgaXMgb25lLgoJCWlmICggZGlzcGxheUJsb2NrICkgewoJCQl0aGlzLl9hZGRDbGFzcyggdGhpcy5pY29uLCBudWxsLCAidWktd2lkZ2V0LWljb24tYmxvY2siICk7CgkJCWlmICggdGhpcy5pY29uU3BhY2UgKSB7CgkJCQl0aGlzLmljb25TcGFjZS5yZW1vdmUoKTsKCQkJfQoJCX0gZWxzZSB7CgoJCQkvLyBQb3NpdGlvbiBpcyBiZWdpbm5pbmcgb3IgZW5kIHNvIHJlbW92ZSB0aGUgdWktd2lkZ2V0LWljb24tYmxvY2sgY2xhc3MgYW5kIGFkZCB0aGUKCQkJLy8gc3BhY2UgaWYgaXQgZG9lcyBub3QgZXhpc3QKCQkJaWYgKCAhdGhpcy5pY29uU3BhY2UgKSB7CgkJCQl0aGlzLmljb25TcGFjZSA9ICQoICI8c3Bhbj4gPC9zcGFuPiIgKTsKCQkJCXRoaXMuX2FkZENsYXNzKCB0aGlzLmljb25TcGFjZSwgInVpLWJ1dHRvbi1pY29uLXNwYWNlIiApOwoJCQl9CgkJCXRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmljb24sIG51bGwsICJ1aS13aWdldC1pY29uLWJsb2NrIiApOwoJCQl0aGlzLl9hdHRhY2hJY29uU3BhY2UoIHBvc2l0aW9uICk7CgkJfQoJfSwKCglfZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoICJyb2xlIiApOwoKCQlpZiAoIHRoaXMuaWNvbiApIHsKCQkJdGhpcy5pY29uLnJlbW92ZSgpOwoJCX0KCQlpZiAoIHRoaXMuaWNvblNwYWNlICkgewoJCQl0aGlzLmljb25TcGFjZS5yZW1vdmUoKTsKCQl9CgkJaWYgKCAhdGhpcy5oYXNUaXRsZSApIHsKCQkJdGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoICJ0aXRsZSIgKTsKCQl9Cgl9LAoKCV9hdHRhY2hJY29uU3BhY2U6IGZ1bmN0aW9uKCBpY29uUG9zaXRpb24gKSB7CgkJdGhpcy5pY29uWyAvXig\/OmVuZHxib3R0b20pLy50ZXN0KCBpY29uUG9zaXRpb24gKSA\/ICJiZWZvcmUiIDogImFmdGVyIiBdKCB0aGlzLmljb25TcGFjZSApOwoJfSwKCglfYXR0YWNoSWNvbjogZnVuY3Rpb24oIGljb25Qb3NpdGlvbiApIHsKCQl0aGlzLmVsZW1lbnRbIC9eKD86ZW5kfGJvdHRvbSkvLnRlc3QoIGljb25Qb3NpdGlvbiApID8gImFwcGVuZCIgOiAicHJlcGVuZCIgXSggdGhpcy5pY29uICk7Cgl9LAoKCV9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHsKCQl2YXIgbmV3U2hvd0xhYmVsID0gb3B0aW9ucy5zaG93TGFiZWwgPT09IHVuZGVmaW5lZCA\\/CgkJCQkkKCAiPGltZy8+IiApLmFkZENsYXNzKCB0aGlzLl90cmlnZ2VyQ2xhc3MgKS4KCQkJCQlhdHRyKCB7IHNyYzogYnV0dG9uSW1hZ2UsIGFsdDogYnV0dG9uVGV4dCwgdGl0bGU6IGJ1dHRvblRleHQgfSApIDoKCQkJCSQoICI8YnV0dG9uIHR5cGU9J2J1dHRvbic+PC9idXR0b24+IiApLmFkZENsYXNzKCB0aGlzLl90cmlnZ2VyQ2xhc3MgKS4KCQkJCQlodG1sKCAhYnV0dG9uSW1hZ2UgPyBidXR0b25UZXh0IDogJCggIjxpbWcvPiIgKS5hdHRyKAoJCQkJCXsgc3JjOmJ1dHRvbkltYWdlLCBhbHQ6YnV0dG9uVGV4dCwgdGl0bGU6YnV0dG9uVGV4dCB9ICkgKSApOwoJCQlpbnB1dFsgaXNSVEwgPyAiYmVmb3JlIiA6ICJhZnRlciIgXSggaW5zdC50cmlnZ2VyICk7CgkJCWluc3QudHJpZ2dlci5vbiggImNsaWNrIiwgZnVuY3Rpb24oKSB7CgkJCQlpZiAoICQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgJiYgJC5kYXRlcGlja2VyLl9sYXN0SW5wdXQgPT09IGlucHV0WyAwIF0gKSB7CgkJCQkJJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpOwoJCQkJfSBlbHNlIGlmICggJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyAmJiAkLmRhdGVwaWNrZXIuX2xhc3RJbnB1dCAhPT0gaW5wdXRbIDAgXSApIHsKCQkJCQkkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7CgkJCQkJJC5kYXRlcGlja2VyLl9zaG93RGF0ZXBpY2tlciggaW5wdXRbIDAgXSApOwoJCQkJfSBlbHNlIHsKCQkJCQkkLmRhdGVwaWNrZXIuX3Nob3dEYXRlcGlja2VyKCBpbnB1dFsgMCBdICk7CgkJCQl9CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0gKTsKCQl9Cgl9LAoKCS8qIEFwcGx5IHRoZSBtYXhpbXVtIGxlbmd0aCBmb3IgdGhlIGRhdGUgZm9ybWF0LiAqLwoJX2F1dG9TaXplOiBmdW5jdGlvbiggaW5zdCApIHsKCQlpZiAoIHRoaXMuX2dldCggaW5zdCwgImF1dG9TaXplIiApICYmICFpbnN0LmlubGluZSApIHsKCQkJdmFyIGZpbmRNYXgsIG1heCwgbWF4SSwgaSwKCQkJCWRhdGUgPSBuZXcgRGF0ZSggMjAwOSwgMTIgLSAxLCAyMCApLCAvLyBFbnN1cmUgZG91YmxlIGRpZ2l0cwoJCQkJZGF0ZUZvcm1hdCA9IHRoaXMuX2dldCggaW5zdCwgImRhdGVGb3JtYXQiICk7CgoJCQlpZiAoIGRhdGVGb3JtYXQubWF0Y2goIC9bRE1dLyApICkgewoJCQkJZmluZE1heCA9IGZ1bmN0aW9uKCBuYW1lcyApIHsKCQkJCQltYXggPSAwOwoJCQkJCW1heEkgPSAwOwoJCQkJCWZvciAoIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKysgKSB7CgkJCQkJCWlmICggbmFtZXNbIGkgXS5sZW5ndGggPiBtYXggKSB7CgkJCQkJCQltYXggPSBuYW1lc1sgaSBdLmxlbmd0aDsKCQkJCQkJCW1heEkgPSBpOwoJCQkJCQl9CgkJCQkJfQoJCQkJCXJldHVybiBtYXhJOwoJCQkJfTsKCQkJCWRhdGUuc2V0TW9udGgoIGZpbmRNYXgoIHRoaXMuX2dldCggaW5zdCwgKCBkYXRlRm9ybWF0Lm1hdGNoKCAvTU0vICkgPwoJCQkJCSJtb250aE5hbWVzIiA6ICJtb250aE5hbWVzU2hvcnQiICkgKSApICk7CgkJCQlkYXRlLnNldERhdGUoIGZpbmRNYXgoIHRoaXMuX2dldCggaW5zdCwgKCBkYXRlRm9ybWF0Lm1hdGNoKCAvREQvICkgPwoJCQkJCSJkYXlOYW1lcyIgOiAiZGF5TmFtZXNTaG9ydCIgKSApICkgKyAyMCAtIGRhdGUuZ2V0RGF5KCkgKTsKCQkJfQoJCQlpbnN0LmlucHV0LmF0dHIoICJzaXplIiwgdGhpcy5fZm9ybWF0RGF0ZSggaW5zdCwgZGF0ZSApLmxlbmd0aCApOwoJCX0KCX0sCgoJLyogQXR0YWNoIGFuIGlubGluZSBkYXRlIHBpY2tlciB0byBhIGRpdi4gKi8KCV9pbmxpbmVEYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0LCBpbnN0ICkgewoJCXZhciBkaXZTcGFuID0gJCggdGFyZ2V0ICk7CgkJaWYgKCBkaXZTcGFuLmhhc0NsYXNzKCB0aGlzLm1hcmtlckNsYXNzTmFtZSApICkgewoJCQlyZXR1cm47CgkJfQoJCWRpdlNwYW4uYWRkQ2xhc3MoIHRoaXMubWFya2VyQ2xhc3NOYW1lICkuYXBwZW5kKCBpbnN0LmRwRGl2ICk7CgkJJC5kYXRhKCB0YXJnZXQsICJkYXRlcGlja2VyIiwgaW5zdCApOwoJCXRoaXMuX3NldERhdGUoIGluc3QsIHRoaXMuX2dldERlZmF1bHREYXRlKCBpbnN0ICksIHRydWUgKTsKCQl0aGlzLl91cGRhdGVEYXRlcGlja2VyKCBpbnN0ICk7CgkJdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKCBpbnN0ICk7CgoJCS8vSWYgZGlzYWJsZWQgb3B0aW9uIGlzIHRydWUsIGRpc2FibGUgdGhlIGRhdGVwaWNrZXIgYmVmb3JlIHNob3dpbmcgaXQgKHNlZSB0aWNrZXQgIzU2NjUpCgkJaWYgKCBpbnN0LnNldHRpbmdzLmRpc2FibGVkICkgewoJCQl0aGlzLl9kaXNhYmxlRGF0ZXBpY2tlciggdGFyZ2V0ICk7CgkJfQoKCQkvLyBTZXQgZGlzcGxheTpibG9jayBpbiBwbGFjZSBvZiBpbnN0LmRwRGl2LnNob3coKSB3aGljaCB3b24ndCB3b3JrIG9uIGRpc2Nvbm5lY3RlZCBlbGVtZW50cwoJCS8vIGh0dHA6Ly9idWdzLmpxdWVyeXVpLmNvbS90aWNrZXQvNzU1MiAtIEEgRGF0ZXBpY2tlciBjcmVhdGVkIG9uIGEgZGV0YWNoZWQgZGl2IGhhcyB6ZXJvIGhlaWdodAoJCWluc3QuZHBEaXYuY3NzKCAiZGlzcGxheSIsICJibG9jayIgKTsKCX0sCgoJLyogUG9wLXVwIHRoZSBkYXRlIHBpY2tlciBpbiBhICJkaWFsb2ciIGJveC4KCSAqIEBwYXJhbSAgaW5wdXQgZWxlbWVudCAtIGlnbm9yZWQKCSAqIEBwYXJhbSAgZGF0ZQlzdHJpbmcgb3IgRGF0ZSAtIHRoZSBpbml0aWFsIGRhdGUgdG8gZGlzcGxheQoJICogQHBhcmFtICBvblNlbGVjdCAgZnVuY3Rpb24gLSB0aGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgZGF0ZSBpcyBzZWxlY3RlZAoJICogQHBhcmFtICBzZXR0aW5ncyAgb2JqZWN0IC0gdXBkYXRlIHRoZSBkaWFsb2cgZGF0ZSBwaWNrZXIgaW5zdGFuY2UncyBzZXR0aW5ncyAoYW5vbnltb3VzIG9iamVjdCkKCSAqIEBwYXJhbSAgcG9zIGludFsyXSAtIGNvb3JkaW5hdGVzIGZvciB0aGUgZGlhbG9nJ3MgcG9zaXRpb24gd2l0aGluIHRoZSBzY3JlZW4gb3IKCSAqCQkJCQlldmVudCAtIHdpdGggeC95IGNvb3JkaW5hdGVzIG9yCgkgKgkJCQkJbGVhdmUgZW1wdHkgZm9yIGRlZmF1bHQgKHNjcmVlbiBjZW50cmUpCgkgKiBAcmV0dXJuIHRoZSBtYW5hZ2VyIG9iamVjdAoJICovCglfZGlhbG9nRGF0ZXBpY2tlcjogZnVuY3Rpb24oIGlucHV0LCBkYXRlLCBvblNlbGVjdCwgc2V0dGluZ3MsIHBvcyApIHsKCQl2YXIgaWQsIGJyb3dzZXJXaWR0aCwgYnJvd3NlckhlaWdodCwgc2Nyb2xsWCwgc2Nyb2xsWSwKCQkJaW5zdCA9IHRoaXMuX2RpYWxvZ0luc3Q7IC8vIGludGVybmFsIGluc3RhbmNlCgoJCWlmICggIWluc3QgKSB7CgkJCXRoaXMudXVpZCArPSAxOwoJCQlpZCA9ICJkcCIgKyB0aGlzLnV1aWQ7CgkJCXRoaXMuX2RpYWxvZ0lucHV0ID0gJCggIjxpbnB1dCB0eXBlPSd0ZXh0JyBpZD0nIiArIGlkICsKCQkJCSInIHN0eWxlPSdwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTEwMHB4OyB3aWR0aDogMHB4OycvPiIgKTsKCQkJdGhpcy5fZGlhbG9nSW5wdXQub24oICJrZXlkb3duIiwgdGhpcy5fZG9LZXlEb3duICk7CgkJCSQoICJib2R5IiApLmFwcGVuZCggdGhpcy5fZGlhbG9nSW5wdXQgKTsKCQkJaW5zdCA9IHRoaXMuX2RpYWxvZ0luc3QgPSB0aGlzLl9uZXdJbnN0KCB0aGlzLl9kaWFsb2dJbnB1dCwgZmFsc2UgKTsKCQkJaW5zdC5zZXR0aW5ncyA9IHt9OwoJCQkkLmRhdGEoIHRoaXMuX2RpYWxvZ0lucHV0WyAwIF0sICJkYXRlcGlja2VyIiwgaW5zdCApOwoJCX0KCQlkYXRlcGlja2VyX2V4dGVuZFJlbW92ZSggaW5zdC5zZXR0aW5ncywgc2V0dGluZ3MgfHwge30gKTsKCQlkYXRlID0gKCBkYXRlICYmIGRhdGUuY29uc3RydWN0b3IgPT09IERhdGUgPyB0aGlzLl9mb3JtYXREYXRlKCBpbnN0LCBkYXRlICkgOiBkYXRlICk7CgkJdGhpcy5fZGlhbG9nSW5wdXQudmFsKCBkYXRlICk7CgoJCXRoaXMuX3BvcyA9ICggcG9zID8gKCBwb3MubGVuZ3RoID8gcG9zIDogWyBwb3MucGFnZVgsIHBvcy5wYWdlWSBdICkgOiBudWxsICk7CgkJaWYgKCAhdGhpcy5fcG9zICkgewoJCQlicm93c2VyV2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7CgkJCWJyb3dzZXJIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0OwoJCQlzY3JvbGxYID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0OwoJCQlzY3JvbGxZID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDsKCQkJdGhpcy5fcG9zID0gLy8gc2hvdWxkIHVzZSBhY3R1YWwgd2lkdGgvaGVpZ2h0IGJlbG93CgkJCQlbICggYnJvd3NlcldpZHRoIC8gMiApIC0gMTAwICsgc2Nyb2xsWCwgKCBicm93c2VySGVpZ2h0IC8gMiApIC0gMTUwICsgc2Nyb2xsWSBdOwoJCX0KCgkJLy8gTW92ZSBpbnB1dCBvbiBzY3JlZW4gZm9yIGZvY3VzLCBidXQgaGlkZGVuIGJlaGluZCBkaWFsb2cKCQl0aGlzLl9kaWFsb2dJbnB1dC5jc3MoICJsZWZ0IiwgKCB0aGlzLl9wb3NbIDAgXSArIDIwICkgKyAicHgiICkuY3NzKCAidG9wIiwgdGhpcy5fcG9zWyAxIF0gKyAicHgiICk7CgkJaW5zdC5zZXR0aW5ncy5vblNlbGVjdCA9IG9uU2VsZWN0OwoJCXRoaXMuX2luRGlhbG9nID0gdHJ1ZTsKCQl0aGlzLmRwRGl2LmFkZENsYXNzKCB0aGlzLl9kaWFsb2dDbGFzcyApOwoJCXRoaXMuX3Nob3dEYXRlcGlja2VyKCB0aGlzLl9kaWFsb2dJbnB1dFsgMCBdICk7CgkJaWYgKCAkLmJsb2NrVUkgKSB7CgkJCSQuYmxvY2tVSSggdGhpcy5kcERpdiApOwoJCX0KCQkkLmRhdGEoIHRoaXMuX2RpYWxvZ0lucHV0WyAwIF0sICJkYXRlcGlja2VyIiwgaW5zdCApOwoJCXJldHVybiB0aGlzOwoJfSwKCgkvKiBEZXRhY2ggYSBkYXRlcGlja2VyIGZyb20gaXRzIGNvbnRyb2wuCgkgKiBAcGFyYW0gIHRhcmdldAllbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuCgkgKi8KCV9kZXN0cm95RGF0ZXBpY2tlcjogZnVuY3Rpb24oIHRhcmdldCApIHsKCQl2YXIgbm9kZU5hbWUsCgkJCSR0YXJnZXQgPSAkKCB0YXJnZXQgKSwKCQkJaW5zdCA9ICQuZGF0YSggdGFyZ2V0LCAiZGF0ZXBpY2tlciIgKTsKCgkJaWYgKCAhJHRhcmdldC5oYXNDbGFzcyggdGhpcy5tYXJrZXJDbGFzc05hbWUgKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJbm9kZU5hbWUgPSB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCQkkLnJlbW92ZURhdGEoIHRhcmdldCwgImRhdGVwaWNrZXIiICk7CgkJaWYgKCBub2RlTmFtZSA9PT0gImlucHV0IiApIHsKCQkJaW5zdC5hcHBlbmQucmVtb3ZlKCk7CgkJCWluc3QudHJpZ2dlci5yZW1vdmUoKTsKCQkJJHRhcmdldC5yZW1vdmVDbGFzcyggdGhpcy5tYXJrZXJDbGFzc05hbWUgKS4KCQkJCW9mZiggImZvY3VzIiwgdGhpcy5fc2hvd0RhdGVwaWNrZXIgKS4KCQkJCW9mZiggImtleWRvd24iLCB0aGlzLl9kb0tleURvd24gKS4KCQkJCW9mZiggImtleXByZXNzIiwgdGhpcy5fZG9LZXlQcmVzcyApLgoJCQkJb2ZmKCAia2V5dXAiLCB0aGlzLl9kb0tleVVwICk7CgkJfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJkaXYiIHx8IG5vZGVOYW1lID09PSAic3BhbiIgKSB7CgkJCSR0YXJnZXQucmVtb3ZlQ2xhc3MoIHRoaXMubWFya2VyQ2xhc3NOYW1lICkuZW1wdHkoKTsKCQl9CgoJCWlmICggZGF0ZXBpY2tlcl9pbnN0QWN0aXZlID09PSBpbnN0ICkgewoJCQlkYXRlcGlja2VyX2luc3RBY3RpdmUgPSBudWxsOwoJCX0KCX0sCgoJLyogRW5hYmxlIHRoZSBkYXRlIHBpY2tlciB0byBhIGpRdWVyeSBzZWxlY3Rpb24uCgkgKiBAcGFyYW0gIHRhcmdldAllbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuCgkgKi8KCV9lbmFibGVEYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0ICkgewoJCXZhciBub2RlTmFtZSwgaW5saW5lLAoJCQkkdGFyZ2V0ID0gJCggdGFyZ2V0ICksCgkJCWluc3QgPSAkLmRhdGEoIHRhcmdldCwgImRhdGVwaWNrZXIiICk7CgoJCWlmICggISR0YXJnZXQuaGFzQ2xhc3MoIHRoaXMubWFya2VyQ2xhc3NOYW1lICkgKSB7CgkJCXJldHVybjsKCQl9CgoJCW5vZGVOYW1lID0gdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CgkJaWYgKCBub2RlTmFtZSA9PT0gImlucHV0IiApIHsKCQkJdGFyZ2V0LmRpc2FibGVkID0gZmFsc2U7CgkJCWluc3QudHJpZ2dlci5maWx0ZXIoICJidXR0b24iICkuCgkJCQllYWNoKCBmdW5jdGlvbigpIHsgdGhpcy5kaXNhYmxlZCA9IGZhbHNlOyB9ICkuZW5kKCkuCgkJCQlmaWx0ZXIoICJpbWciICkuY3NzKCB7IG9wYWNpdHk6ICIxLjAiLCBjdXJzb3I6ICIiIH0gKTsKCQl9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gImRpdiIgfHwgbm9kZU5hbWUgPT09ICJzcGFuIiApIHsKCQkJaW5saW5lID0gJHRhcmdldC5jaGlsZHJlbiggIi4iICsgdGhpcy5faW5saW5lQ2xhc3MgKTsKCQkJaW5saW5lLmNoaWxkcmVuKCkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1kaXNhYmxlZCIgKTsKCQkJaW5saW5lLmZpbmQoICJzZWxlY3QudWktZGF0ZXBpY2tlci1tb250aCwgc2VsZWN0LnVpLWRhdGVwaWNrZXIteWVhciIgKS4KCQkJCXByb3AoICJkaXNhYmxlZCIsIGZhbHNlICk7CgkJfQoJCXRoaXMuX2Rpc2FibGVkSW5wdXRzID0gJC5tYXAoIHRoaXMuX2Rpc2FibGVkSW5wdXRzLAoJCQlmdW5jdGlvbiggdmFsdWUgKSB7IHJldHVybiAoIHZhbHVlID09PSB0YXJnZXQgPyBudWxsIDogdmFsdWUgKTsgfSApOyAvLyBkZWxldGUgZW50cnkKCX0sCgoJLyogRGlzYWJsZSB0aGUgZGF0ZSBwaWNrZXIgdG8gYSBqUXVlcnkgc2VsZWN0aW9uLgoJICogQHBhcmFtICB0YXJnZXQJZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhbgoJICovCglfZGlzYWJsZURhdGVwaWNrZXI6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7CgkJdmFyIG5vZGVOYW1lLCBpbmxpbmUsCgkJCSR0YXJnZXQgPSAkKCB0YXJnZXQgKSwKCQkJaW5zdCA9ICQuZGF0YSggdGFyZ2V0LCAiZGF0ZXBpY2tlciIgKTsKCgkJaWYgKCAhJHRhcmdldC5oYXNDbGFzcyggdGhpcy5tYXJrZXJDbGFzc05hbWUgKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJbm9kZU5hbWUgPSB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCQlpZiAoIG5vZGVOYW1lID09PSAiaW5wdXQiICkgewoJCQl0YXJnZXQuZGlzYWJsZWQgPSB0cnVlOwoJCQlpbnN0LnRyaWdnZXIuZmlsdGVyKCAiYnV0dG9uIiApLgoJCQkJZWFjaCggZnVuY3Rpb24oKSB7IHRoaXMuZGlzYWJsZWQgPSB0cnVlOyB9ICkuZW5kKCkuCgkJCQlmaWx0ZXIoICJpbWciICkuY3NzKCB7IG9wYWNpdHk6ICIwLjUiLCBjdXJzb3I6ICJkZWZhdWx0IiB9ICk7CgkJfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJkaXYiIHx8IG5vZGVOYW1lID09PSAic3BhbiIgKSB7CgkJCWlubGluZSA9ICR0YXJnZXQuY2hpbGRyZW4oICIuIiArIHRoaXMuX2lubGluZUNsYXNzICk7CgkJCWlubGluZS5jaGlsZHJlbigpLmFkZENsYXNzKCAidWktc3RhdGUtZGlzYWJsZWQiICk7CgkJCWlubGluZS5maW5kKCAic2VsZWN0LnVpLWRhdGVwaWNrZXItbW9udGgsIHNlbGVjdC51aS1kYXRlcGlja2VyLXllYXIiICkuCgkJCQlwcm9wKCAiZGlzYWJsZWQiLCB0cnVlICk7CgkJfQoJCXRoaXMuX2Rpc2FibGVkSW5wdXRzID0gJC5tYXAoIHRoaXMuX2Rpc2FibGVkSW5wdXRzLAoJCQlmdW5jdGlvbiggdmFsdWUgKSB7IHJldHVybiAoIHZhbHVlID09PSB0YXJnZXQgPyBudWxsIDogdmFsdWUgKTsgfSApOyAvLyBkZWxldGUgZW50cnkKCQl0aGlzLl9kaXNhYmxlZElucHV0c1sgdGhpcy5fZGlzYWJsZWRJbnB1dHMubGVuZ3RoIF0gPSB0YXJnZXQ7Cgl9LAoKCS8qIElzIHRoZSBmaXJzdCBmaWVsZCBpbiBhIGpRdWVyeSBjb2xsZWN0aW9uIGRpc2FibGVkIGFzIGEgZGF0ZXBpY2tlcj8KCSAqIEBwYXJhbSAgdGFyZ2V0CWVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAqIEByZXR1cm4gYm9vbGVhbiAtIHRydWUgaWYgZGlzYWJsZWQsIGZhbHNlIGlmIGVuYWJsZWQKCSAqLwoJX2lzRGlzYWJsZWREYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0ICkgewoJCWlmICggIXRhcmdldCApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLl9kaXNhYmxlZElucHV0cy5sZW5ndGg7IGkrKyApIHsKCQkJaWYgKCB0aGlzLl9kaXNhYmxlZElucHV0c1sgaSBdID09PSB0YXJnZXQgKSB7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCS8qIFJldHJpZXZlIHRoZSBpbnN0YW5jZSBkYXRhIGZvciB0aGUgdGFyZ2V0IGNvbnRyb2wuCgkgKiBAcGFyYW0gIHRhcmdldCAgZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhbgoJICogQHJldHVybiAgb2JqZWN0IC0gdGhlIGFzc29jaWF0ZWQgaW5zdGFuY2UgZGF0YQoJICogQHRocm93cyAgZXJyb3IgaWYgYSBqUXVlcnkgcHJvYmxlbSBnZXR0aW5nIGRhdGEKCSAqLwoJX2dldEluc3Q6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7CgkJdHJ5IHsKCQkJcmV0dXJuICQuZGF0YSggdGFyZ2V0LCAiZGF0ZXBpY2tlciIgKTsKCQl9CgkJY2F0Y2ggKCBlcnIgKSB7CgkJCXRocm93ICJNaXNzaW5nIGluc3RhbmNlIGRhdGEgZm9yIHRoaXMgZGF0ZXBpY2tlciI7CgkJfQoJfSwKCgkvKiBVcGRhdGUgb3IgcmV0cmlldmUgdGhlIHNldHRpbmdzIGZvciBhIGRhdGUgcGlja2VyIGF0dGFjaGVkIHRvIGFuIGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uLgoJICogQHBhcmFtICB0YXJnZXQgIGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAqIEBwYXJhbSAgbmFtZQlvYmplY3QgLSB0aGUgbmV3IHNldHRpbmdzIHRvIHVwZGF0ZSBvcgoJICoJCQkJc3RyaW5nIC0gdGhlIG5hbWUgb2YgdGhlIHNldHRpbmcgdG8gY2hhbmdlIG9yIHJldHJpZXZlLAoJICoJCQkJd2hlbiByZXRyaWV2aW5nIGFsc28gImFsbCIgZm9yIGFsbCBpbnN0YW5jZSBzZXR0aW5ncyBvcgoJICoJCQkJImRlZmF1bHRzIiBmb3IgYWxsIGdsb2JhbCBkZWZhdWx0cwoJICogQHBhcmFtICB2YWx1ZSAgIGFueSAtIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBzZXR0aW5nCgkgKgkJCQkob21pdCBpZiBhYm92ZSBpcyBhbiBvYmplY3Qgb3IgdG8gcmV0cmlldmUgYSB2YWx1ZSkKCSAqLwoJX29wdGlvbkRhdGVwaWNrZXI6IGZ1bmN0aW9uKCB0YXJnZXQsIG5hbWUsIHZhbHVlICkgewoJCXZhciBzZXR0aW5ncywgZGF0ZSwgbWluRGF0ZSwgbWF4RGF0ZSwKCQkJaW5zdCA9IHRoaXMuX2dldEluc3QoIHRhcmdldCApOwoKCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIG5hbWUgPT09ICJzdHJpbmciICkgewoJCQlyZXR1cm4gKCBuYW1lID09PSAiZGVmYXVsdHMiID8gJC5leHRlbmQoIHt9LCAkLmRhdGVwaWNrZXIuX2RlZmF1bHRzICkgOgoJCQkJKCBpbnN0ID8gKCBuYW1lID09PSAiYWxsIiA\/ICQuZXh0ZW5kKCB7fSwgaW5zdC5zZXR0aW5ncyApIDoKCQkJCXRoaXMuX2dldCggaW5zdCwgbmFtZSApICkgOiBudWxsICkgKTsKCQl9CgoJCXNldHRpbmdzID0gbmFtZSB8fCB7fTsKCQlpZiAoIHR5cGVvZiBuYW1lID09PSAic3RyaW5nIiApIHsKCQkJc2V0dGluZ3MgPSB7fTsKCQkJc2V0dGluZ3NbIG5hbWUgXSA9IHZhbHVlOwoJCX0KCgkJaWYgKCBpbnN0ICkgewoJCQlpZiAoIHRoaXMuX2N1ckluc3QgPT09IGluc3QgKSB7CgkJCQl0aGlzLl9oaWRlRGF0ZXBpY2tlcigpOwoJCQl9CgoJCQlkYXRlID0gdGhpcy5fZ2V0RGF0ZURhdGVwaWNrZXIoIHRhcmdldCwgdHJ1ZSApOwoJCQltaW5EYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZSggaW5zdCwgIm1pbiIgKTsKCQkJbWF4RGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoIGluc3QsICJtYXgiICk7CgkJCWRhdGVwaWNrZXJfZXh0ZW5kUmVtb3ZlKCBpbnN0LnNldHRpbmdzLCBzZXR0aW5ncyApOwoKCQkJLy8gcmVmb3JtYXQgdGhlIG9sZCBtaW5EYXRlL21heERhdGUgdmFsdWVzIGlmIGRhdGVGb3JtYXQgY2hhbmdlcyBhbmQgYSBuZXcgbWluRGF0ZS9tYXhEYXRlIGlzbid0IHByb3ZpZGVkCgkJCWlmICggbWluRGF0ZSAhPT0gbnVsbCAmJiBzZXR0aW5ncy5kYXRlRm9ybWF0ICE9PSB1bmRlZmluZWQgJiYgc2V0dGluZ3MubWluRGF0ZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJaW5zdC5zZXR0aW5ncy5taW5EYXRlID0gdGhpcy5fZm9ybWF0RGF0ZSggaW5zdCwgbWluRGF0ZSApOwoJCQl9CgkJCWlmICggbWF4RGF0ZSAhPT0gbnVsbCAmJiBzZXR0aW5ncy5kYXRlRm9ybWF0ICE9PSB1bmRlZmluZWQgJiYgc2V0dGluZ3MubWF4RGF0ZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJaW5zdC5zZXR0aW5ncy5tYXhEYXRlID0gdGhpcy5fZm9ybWF0RGF0ZSggaW5zdCwgbWF4RGF0ZSApOwoJCQl9CgkJCWlmICggImRpc2FibGVkIiBpbiBzZXR0aW5ncyApIHsKCQkJCWlmICggc2V0dGluZ3MuZGlzYWJsZWQgKSB7CgkJCQkJdGhpcy5fZGlzYWJsZURhdGVwaWNrZXIoIHRhcmdldCApOwoJCQkJfSBlbHNlIHsKCQkJCQl0aGlzLl9lbmFibGVEYXRlcGlja2VyKCB0YXJnZXQgKTsKCQkJCX0KCQkJfQoJCQl0aGlzLl9hdHRhY2htZW50cyggJCggdGFyZ2V0ICksIGluc3QgKTsKCQkJdGhpcy5fYXV0b1NpemUoIGluc3QgKTsKCQkJdGhpcy5fc2V0RGF0ZSggaW5zdCwgZGF0ZSApOwoJCQl0aGlzLl91cGRhdGVBbHRlcm5hdGUoIGluc3QgKTsKCQkJdGhpcy5fdXBkYXRlRGF0ZXBpY2tlciggaW5zdCApOwoJCX0KCX0sCgoJLy8gQ2hhbmdlIG1ldGhvZCBkZXByZWNhdGVkCglfY2hhbmdlRGF0ZXBpY2tlcjogZnVuY3Rpb24oIHRhcmdldCwgbmFtZSwgdmFsdWUgKSB7CgkJdGhpcy5fb3B0aW9uRGF0ZXBpY2tlciggdGFyZ2V0LCBuYW1lLCB2YWx1ZSApOwoJfSwKCgkvKiBSZWRyYXcgdGhlIGRhdGUgcGlja2VyIGF0dGFjaGVkIHRvIGFuIGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uLgoJICogQHBhcmFtICB0YXJnZXQgIGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAqLwoJX3JlZnJlc2hEYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0ICkgewoJCXZhciBpbnN0ID0gdGhpcy5fZ2V0SW5zdCggdGFyZ2V0ICk7CgkJaWYgKCBpbnN0ICkgewoJCQl0aGlzLl91cGRhdGVEYXRlcGlja2VyKCBpbnN0ICk7CgkJfQoJfSwKCgkvKiBTZXQgdGhlIGRhdGVzIGZvciBhIGpRdWVyeSBzZWxlY3Rpb24uCgkgKiBAcGFyYW0gIHRhcmdldCBlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuCgkgKiBAcGFyYW0gIGRhdGUJRGF0ZSAtIHRoZSBuZXcgZGF0ZQoJICovCglfc2V0RGF0ZURhdGVwaWNrZXI6IGZ1bmN0aW9uKCB0YXJnZXQsIGRhdGUgKSB7CgkJdmFyIGluc3QgPSB0aGlzLl9nZXRJbnN0KCB0YXJnZXQgKTsKCQlpZiAoIGluc3QgKSB7CgkJCXRoaXMuX3NldERhdGUoIGluc3QsIGRhdGUgKTsKCQkJdGhpcy5fdXBkYXRlRGF0ZXBpY2tlciggaW5zdCApOwoJCQl0aGlzLl91cGRhdGVBbHRlcm5hdGUoIGluc3QgKTsKCQl9Cgl9LAoKCS8qIEdldCB0aGUgZGF0ZShzKSBmb3IgdGhlIGZpcnN0IGVudHJ5IGluIGEgalF1ZXJ5IHNlbGVjdGlvbi4KCSAqIEBwYXJhbSAgdGFyZ2V0IGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW4KCSAqIEBwYXJhbSAgbm9EZWZhdWx0IGJvb2xlYW4gLSB0cnVlIGlmIG5vIGRlZmF1bHQgZGF0ZSBpcyB0byBiZSB1c2VkCgkgKiBAcmV0dXJuIERhdGUgLSB0aGUgY3VycmVudCBkYXRlCgkgKi8KCV9nZXREYXRlRGF0ZXBpY2tlcjogZnVuY3Rpb24oIHRhcmdldCwgbm9EZWZhdWx0ICkgewoJCXZhciBpbnN0ID0gdGhpcy5fZ2V0SW5zdCggdGFyZ2V0ICk7CgkJaWYgKCBpbnN0ICYmICFpbnN0LmlubGluZSApIHsKCQkJdGhpcy5fc2V0RGF0ZUZyb21GaWVsZCggaW5zdCwgbm9EZWZhdWx0ICk7CgkJfQoJCXJldHVybiAoIGluc3QgPyB0aGlzLl9nZXREYXRlKCBpbnN0ICkgOiBudWxsICk7Cgl9LAoKCS8qIEhhbmRsZSBrZXlzdHJva2VzLiAqLwoJX2RvS2V5RG93bjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBvblNlbGVjdCwgZGF0ZVN0ciwgc2VsLAoJCQlpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KCBldmVudC50YXJnZXQgKSwKCQkJaGFuZGxlZCA9IHRydWUsCgkJCWlzUlRMID0gaW5zdC5kcERpdi5pcyggIi51aS1kYXRlcGlja2VyLXJ0bCIgKTsKCgkJaW5zdC5fa2V5RXZlbnQgPSB0cnVlOwoJCWlmICggJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyApIHsKCQkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQkJCWNhc2UgOTogJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpOwoJCQkJCQloYW5kbGVkID0gZmFsc2U7CgkJCQkJCWJyZWFrOyAvLyBoaWRlIG9uIHRhYiBvdXQKCQkJCWNhc2UgMTM6IHNlbCA9ICQoICJ0ZC4iICsgJC5kYXRlcGlja2VyLl9kYXlPdmVyQ2xhc3MgKyAiOm5vdCguIiArCgkJCQkJCQkJCSQuZGF0ZXBpY2tlci5fY3VycmVudENsYXNzICsgIikiLCBpbnN0LmRwRGl2ICk7CgkJCQkJCWlmICggc2VsWyAwIF0gKSB7CgkJCQkJCQkkLmRhdGVwaWNrZXIuX3NlbGVjdERheSggZXZlbnQudGFyZ2V0LCBpbnN0LnNlbGVjdGVkTW9udGgsIGluc3Quc2VsZWN0ZWRZZWFyLCBzZWxbIDAgXSApOwoJCQkJCQl9CgoJCQkJCQlvblNlbGVjdCA9ICQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCAib25TZWxlY3QiICk7CgkJCQkJCWlmICggb25TZWxlY3QgKSB7CgkJCQkJCQlkYXRlU3RyID0gJC5kYXRlcGlja2VyLl9mb3JtYXREYXRlKCBpbnN0ICk7CgoJCQkJCQkJLy8gVHJpZ2dlciBjdXN0b20gY2FsbGJhY2sKCQkJCQkJCW9uU2VsZWN0LmFwcGx5KCAoIGluc3QuaW5wdXQgPyBpbnN0LmlucHV0WyAwIF0gOiBudWxsICksIFsgZGF0ZVN0ciwgaW5zdCBdICk7CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQkkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7CgkJCQkJCX0KCgkJCQkJCXJldHVybiBmYWxzZTsgLy8gZG9uJ3Qgc3VibWl0IHRoZSBmb3JtCgkJCQljYXNlIDI3OiAkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7CgkJCQkJCWJyZWFrOyAvLyBoaWRlIG9uIGVzY2FwZQoJCQkJY2FzZSAzMzogJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKCBldmVudC50YXJnZXQsICggZXZlbnQuY3RybEtleSA\/CgkJCQkJCQktJC5kYXRlcGlja2VyLl9nZXQoIGluc3QsICJzdGVwQmlnTW9udGhzIiApIDoKCQkJCQkJCS0kLmRhdGVwaWNrZXIuX2dldCggaW5zdCwgInN0ZXBNb250aHMiICkgKSwgIk0iICk7CgkJCQkJCWJyZWFrOyAvLyBwcmV2aW91cyBtb250aC95ZWFyIG9uIHBhZ2UgdXAvKyBjdHJsCgkJCQljYXNlIDM0OiAkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoIGV2ZW50LnRhcmdldCwgKCBldmVudC5jdHJsS2V5ID8KCQkJCQkJCSskLmRhdGVwaWNrZXIuX2dldCggaW5zdCwgInN0ZXBCaWdNb250aHMiICkgOgoJCQkJCQkJKyQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCAic3RlcE1vbnRocyIgKSApLCAiTSIgKTsKCQkJCQkJYnJlYWs7IC8vIG5leHQgbW9udGgveWVhciBvbiBwYWdlIGRvd24vKyBjdHJsCgkJCQljYXNlIDM1OiBpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSApIHsKCQkJCQkJCSQuZGF0ZXBpY2tlci5fY2xlYXJEYXRlKCBldmVudC50YXJnZXQgKTsKCQkJCQkJfQoJCQkJCQloYW5kbGVkID0gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5OwoJCQkJCQlicmVhazsgLy8gY2xlYXIgb24gY3RybCBvciBjb21tYW5kICtlbmQKCQkJCWNhc2UgMzY6IGlmICggZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5ICkgewoJCQkJCQkJJC5kYXRlcGlja2VyLl9nb3RvVG9kYXkoIGV2ZW50LnRhcmdldCApOwoJCQkJCQl9CgkJCQkJCWhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7CgkJCQkJCWJyZWFrOyAvLyBjdXJyZW50IG9uIGN0cmwgb3IgY29tbWFuZCAraG9tZQoJCQkJY2FzZSAzNzogaWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgKSB7CgkJCQkJCQkkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoIGV2ZW50LnRhcmdldCwgKCBpc1JUTCA\/ICsxIDogLTEgKSwgIkQiICk7CgkJCQkJCX0KCQkJCQkJaGFuZGxlZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTsKCgkJCQkJCS8vIC0xIGRheSBvbiBjdHJsIG9yIGNvbW1hbmQgK2xlZnQKCQkJCQkJaWYgKCBldmVudC5vcmlnaW5hbEV2ZW50LmFsdEtleSApIHsKCQkJCQkJCSQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZSggZXZlbnQudGFyZ2V0LCAoIGV2ZW50LmN0cmxLZXkgPwoJCQkJCQkJCS0kLmRhdGVwaWNrZXIuX2dldCggaW5zdCwgInN0ZXBCaWdNb250aHMiICkgOgoJCQkJCQkJCS0kLmRhdGVwaWNrZXIuX2dldCggaW5zdCwgInN0ZXBNb250aHMiICkgKSwgIk0iICk7CgkJCQkJCX0KCgkJCQkJCS8vIG5leHQgbW9udGgveWVhciBvbiBhbHQgK2xlZnQgb24gTWFjCgkJCQkJCWJyZWFrOwoJCQkJY2FzZSAzODogaWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgKSB7CgkJCQkJCQkkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoIGV2ZW50LnRhcmdldCwgLTcsICJEIiApOwoJCQkJCQl9CgkJCQkJCWhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7CgkJCQkJCWJyZWFrOyAvLyAtMSB3ZWVrIG9uIGN0cmwgb3IgY29tbWFuZCArdXAKCQkJCWNhc2UgMzk6IGlmICggZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5ICkgewoJCQkJCQkJJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKCBldmVudC50YXJnZXQsICggaXNSVEwgPyAtMSA6ICsxICksICJEIiApOwoJCQkJCQl9CgkJCQkJCWhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7CgoJCQkJCQkvLyArMSBkYXkgb24gY3RybCBvciBjb21tYW5kICtyaWdodAoJCQkJCQlpZiAoIGV2ZW50Lm9yaWdpbmFsRXZlbnQuYWx0S2V5ICkgewoJCQkJCQkJJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKCBldmVudC50YXJnZXQsICggZXZlbnQuY3RybEtleSA\/CgkJCQkJCQkJKyQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCAic3RlcEJpZ01vbnRocyIgKSA6CgkJCQkJCQkJKyQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCAic3RlcE1vbnRocyIgKSApLCAiTSIgKTsKCQkJCQkJfQoKCQkJCQkJLy8gbmV4dCBtb250aC95ZWFyIG9uIGFsdCArcmlnaHQKCQkJCQkJYnJlYWs7CgkJCQljYXNlIDQwOiBpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSApIHsKCQkJCQkJCSQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZSggZXZlbnQudGFyZ2V0LCArNywgIkQiICk7CgkJCQkJCX0KCQkJCQkJaGFuZGxlZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTsKCQkJCQkJYnJlYWs7IC8vICsxIHdlZWsgb24gY3RybCBvciBjb21tYW5kICtkb3duCgkJCQlkZWZhdWx0OiBoYW5kbGVkID0gZmFsc2U7CgkJCX0KCQl9IGVsc2UgaWYgKCBldmVudC5rZXlDb2RlID09PSAzNiAmJiBldmVudC5jdHJsS2V5ICkgeyAvLyBkaXNwbGF5IHRoZSBkYXRlIHBpY2tlciBvbiBjdHJsK2hvbWUKCQkJJC5kYXRlcGlja2VyLl9zaG93RGF0ZXBpY2tlciggdGhpcyApOwoJCX0gZWxzZSB7CgkJCWhhbmRsZWQgPSBmYWxzZTsKCQl9CgoJCWlmICggaGFuZGxlZCApIHsKCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CgkJfQoJfSwKCgkvKiBGaWx0ZXIgZW50ZXJlZCBjaGFyYWN0ZXJzIC0gYmFzZWQgb24gZGF0ZSBmb3JtYXQuICovCglfZG9LZXlQcmVzczogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBjaGFycywgY2hyLAoJCQlpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KCBldmVudC50YXJnZXQgKTsKCgkJaWYgKCAkLmRhdGVwaWNrZXIuX2dldCggaW5zdCwgImNvbnN0cmFpbklucHV0IiApICkgewoJCQljaGFycyA9ICQuZGF0ZXBpY2tlci5fcG9zc2libGVDaGFycyggJC5kYXRlcGlja2VyLl9nZXQoIGluc3QsICJkYXRlRm9ybWF0IiApICk7CgkJCWNociA9IFN0cmluZy5mcm9tQ2hhckNvZGUoIGV2ZW50LmNoYXJDb2RlID09IG51bGwgPyBldmVudC5rZXlDb2RlIDogZXZlbnQuY2hhckNvZGUgKTsKCQkJcmV0dXJuIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCAoIGNociA8ICIgIiB8fCAhY2hhcnMgfHwgY2hhcnMuaW5kZXhPZiggY2hyICkgPiAtMSApOwoJCX0KCX0sCgoJLyogU3luY2hyb25pc2UgbWFudWFsIGVudHJ5IGFuZCBmaWVsZC9hbHRlcm5hdGUgZmllbGQuICovCglfZG9LZXlVcDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBkYXRlLAoJCQlpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KCBldmVudC50YXJnZXQgKTsKCgkJaWYgKCBpbnN0LmlucHV0LnZhbCgpICE9PSBpbnN0Lmxhc3RWYWwgKSB7CgkJCXRyeSB7CgkJCQlkYXRlID0gJC5kYXRlcGlja2VyLnBhcnNlRGF0ZSggJC5kYXRlcGlja2VyLl9nZXQoIGluc3QsICJkYXRlRm9ybWF0IiApLAoJCQkJCSggaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXQudmFsKCkgOiBudWxsICksCgkJCQkJJC5kYXRlcGlja2VyLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKSApOwoKCQkJCWlmICggZGF0ZSApIHsgLy8gb25seSBpZiB2YWxpZAoJCQkJCSQuZGF0ZXBpY2tlci5fc2V0RGF0ZUZyb21GaWVsZCggaW5zdCApOwoJCQkJCSQuZGF0ZXBpY2tlci5fdXBkYXRlQWx0ZXJuYXRlKCBpbnN0ICk7CgkJCQkJJC5kYXRlcGlja2VyLl91cGRhdGVEYXRlcGlja2VyKCBpbnN0ICk7CgkJCQl9CgkJCX0KCQkJY2F0Y2ggKCBlcnIgKSB7CgkJCX0KCQl9CgkJcmV0dXJuIHRydWU7Cgl9LAoKCS8qIFBvcC11cCB0aGUgZGF0ZSBwaWNrZXIgZm9yIGEgZ2l2ZW4gaW5wdXQgZmllbGQuCgkgKiBJZiBmYWxzZSByZXR1cm5lZCBmcm9tIGJlZm9yZVNob3cgZXZlbnQgaGFuZGxlciBkbyBub3Qgc2hvdy4KCSAqIEBwYXJhbSAgaW5wdXQgIGVsZW1lbnQgLSB0aGUgaW5wdXQgZmllbGQgYXR0YWNoZWQgdG8gdGhlIGRhdGUgcGlja2VyIG9yCgkgKgkJCQkJZXZlbnQgLSBpZiB0cmlnZ2VyZWQgYnkgZm9jdXMKCSAqLwoJX3Nob3dEYXRlcGlja2VyOiBmdW5jdGlvbiggaW5wdXQgKSB7CgkJaW5wdXQgPSBpbnB1dC50YXJnZXQgfHwgaW5wdXQ7CgkJaWYgKCBpbnB1dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAiaW5wdXQiICkgeyAvLyBmaW5kIGZyb20gYnV0dG9uL2ltYWdlIHRyaWdnZXIKCQkJaW5wdXQgPSAkKCAiaW5wdXQiLCBpbnB1dC5wYXJlbnROb2RlIClbIDAgXTsKCQl9CgoJCWlmICggJC5kYXRlcGlja2VyLl9pc0Rpc2FibGVkRGF0ZXBpY2tlciggaW5wdXQgKSB8fCAkLmRhdGVwaWNrZXIuX2xhc3RJbnB1dCA9PT0gaW5wdXQgKSB7IC8vIGFscmVhZHkgaGVyZQoJCQlyZXR1cm47CgkJfQoKCQl2YXIgaW5zdCwgYmVmb3JlU2hvdywgYmVmb3JlU2hvd1NldHRpbmdzLCBpc0ZpeGVkLAoJCQlvZmZzZXQsIHNob3dBbmltLCBkdXJhdGlvbjsKCgkJaW5zdCA9ICQuZGF0ZXBpY2tlci5fZ2V0SW5zdCggaW5wdXQgKTsKCQlpZiAoICQuZGF0ZXBpY2tlci5fY3VySW5zdCAmJiAkLmRhdGVwaWNrZXIuX2N1ckluc3QgIT09IGluc3QgKSB7CgkJCSQuZGF0ZXBpY2tlci5fY3VySW5zdC5kcERpdi5zdG9wKCB0cnVlLCB0cnVlICk7CgkJCWlmICggaW5zdCAmJiAkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICkgewoJCQkJJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlciggJC5kYXRlcGlja2VyLl9jdXJJbnN0LmlucHV0WyAwIF0gKTsKCQkJfQoJCX0KCgkJYmVmb3JlU2hvdyA9ICQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCAiYmVmb3JlU2hvdyIgKTsKCQliZWZvcmVTaG93U2V0dGluZ3MgPSBiZWZvcmVTaG93ID8gYmVmb3JlU2hvdy5hcHBseSggaW5wdXQsIFsgaW5wdXQsIGluc3QgXSApIDoge307CgkJaWYgKCBiZWZvcmVTaG93U2V0dGluZ3MgPT09IGZhbHNlICkgewoJCQlyZXR1cm47CgkJfQoJCWRhdGVwaWNrZXJfZXh0ZW5kUmVtb3ZlKCBpbnN0LnNldHRpbmdzLCBiZWZvcmVTaG93U2V0dGluZ3MgKTsKCgkJaW5zdC5sYXN0VmFsID0gbnVsbDsKCQkkLmRhdGVwaWNrZXIuX2xhc3RJbnB1dCA9IGlucHV0OwoJCSQuZGF0ZXBpY2tlci5fc2V0RGF0ZUZyb21GaWVsZCggaW5zdCApOwoKCQlpZiAoICQuZGF0ZXBpY2tlci5faW5EaWFsb2cgKSB7IC8vIGhpZGUgY3Vyc29yCgkJCWlucHV0LnZhbHVlID0gIiI7CgkJfQoJCWlmICggISQuZGF0ZXBpY2tlci5fcG9zICkgeyAvLyBwb3NpdGlvbiBiZWxvdyBpbnB1dAoJCQkkLmRhdGVwaWNrZXIuX3BvcyA9ICQuZGF0ZXBpY2tlci5fZmluZFBvcyggaW5wdXQgKTsKCQkJJC5kYXRlcGlja2VyLl9wb3NbIDEgXSArPSBpbnB1dC5vZmZzZXRIZWlnaHQ7IC8vIGFkZCB0aGUgaGVpZ2h0CgkJfQoKCQlpc0ZpeGVkID0gZmFsc2U7CgkJJCggaW5wdXQgKS5wYXJlbnRzKCkuZWFjaCggZnVuY3Rpb24oKSB7CgkJCWlzRml4ZWQgfD0gJCggdGhpcyApLmNzcyggInBvc2l0aW9uIiApID09PSAiZml4ZWQiOwoJCQlyZXR1cm4gIWlzRml4ZWQ7CgkJfSApOwoKCQlvZmZzZXQgPSB7IGxlZnQ6ICQuZGF0ZXBpY2tlci5fcG9zWyAwIF0sIHRvcDogJC5kYXRlcGlja2VyLl9wb3NbIDEgXSB9OwoJCSQuZGF0ZXBpY2tlci5fcG9zID0gbnVsbDsKCgkJLy90byBhdm9pZCBmbGFzaGVzIG9uIEZpcmVmb3gKCQlpbnN0LmRwRGl2LmVtcHR5KCk7CgoJCS8vIGRldGVybWluZSBzaXppbmcgb2Zmc2NyZWVuCgkJaW5zdC5kcERpdi5jc3MoIHsgcG9zaXRpb246ICJhYnNvbHV0ZSIsIGRpc3BsYXk6ICJibG9jayIsIHRvcDogIi0xMDAwcHgiIH0gKTsKCQkkLmRhdGVwaWNrZXIuX3VwZGF0ZURhdGVwaWNrZXIoIGluc3QgKTsKCgkJLy8gZml4IHdpZHRoIGZvciBkeW5hbWljIG51bWJlciBvZiBkYXRlIHBpY2tlcnMKCQkvLyBhbmQgYWRqdXN0IHBvc2l0aW9uIGJlZm9yZSBzaG93aW5nCgkJb2Zmc2V0ID0gJC5kYXRlcGlja2VyLl9jaGVja09mZnNldCggaW5zdCwgb2Zmc2V0LCBpc0ZpeGVkICk7CgkJaW5zdC5kcERpdi5jc3MoIHsgcG9zaXRpb246ICggJC5kYXRlcGlja2VyLl9pbkRpYWxvZyAmJiAkLmJsb2NrVUkgPwoJCQkic3RhdGljIiA6ICggaXNGaXhlZCA\/ICJmaXhlZCIgOiAiYWJzb2x1dGUiICkgKSwgZGlzcGxheTogIm5vbmUiLAoJCQlsZWZ0OiBvZmZzZXQubGVmdCArICJweCIsIHRvcDogb2Zmc2V0LnRvcCArICJweCIgfSApOwoKCQlpZiAoICFpbnN0LmlubGluZSApIHsKCQkJc2hvd0FuaW0gPSAkLmRhdGVwaWNrZXIuX2dldCggaW5zdCwgInNob3dBbmltIiApOwoJCQlkdXJhdGlvbiA9ICQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCAiZHVyYXRpb24iICk7CgkJCWluc3QuZHBEaXYuY3NzKCAiei1pbmRleCIsIGRhdGVwaWNrZXJfZ2V0WmluZGV4KCAkKCBpbnB1dCApICkgKyAxICk7CgkJCSQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgPSB0cnVlOwoKCQkJaWYgKCAkLmVmZmVjdHMgJiYgJC5lZmZlY3RzLmVmZmVjdFsgc2hvd0FuaW0gXSApIHsKCQkJCWluc3QuZHBEaXYuc2hvdyggc2hvd0FuaW0sICQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCAic2hvd09wdGlvbnMiICksIGR1cmF0aW9uICk7CgkJCX0gZWxzZSB7CgkJCQlpbnN0LmRwRGl2WyBzaG93QW5pbSB8fCAic2hvdyIgXSggc2hvd0FuaW0gPyBkdXJhdGlvbiA6IG51bGwgKTsKCQkJfQoKCQkJaWYgKCAkLmRhdGVwaWNrZXIuX3Nob3VsZEZvY3VzSW5wdXQoIGluc3QgKSApIHsKCQkJCWluc3QuaW5wdXQudHJpZ2dlciggImZvY3VzIiApOwoJCQl9CgoJCQkkLmRhdGVwaWNrZXIuX2N1ckluc3QgPSBpbnN0OwoJCX0KCX0sCgoJLyogR2VuZXJhdGUgdGhlIGRhdGUgcGlja2VyIGNvbnRlbnQuICovCglfdXBkYXRlRGF0ZXBpY2tlcjogZnVuY3Rpb24oIGluc3QgKSB7CgkJdGhpcy5tYXhSb3dzID0gNDsgLy9SZXNldCB0aGUgbWF4IG51bWJlciBvZiByb3dzIGJlaW5nIGRpc3BsYXllZCAoc2VlICM3MDQzKQoJCWRhdGVwaWNrZXJfaW5zdEFjdGl2ZSA9IGluc3Q7IC8vIGZvciBkZWxlZ2F0ZSBob3ZlciBldmVudHMKCQlpbnN0LmRwRGl2LmVtcHR5KCkuYXBwZW5kKCB0aGlzLl9nZW5lcmF0ZUhUTUwoIGluc3QgKSApOwoJCXRoaXMuX2F0dGFjaEhhbmRsZXJzKCBpbnN0ICk7CgoJCXZhciBvcmlneWVhcnNodG1sLAoJCQludW1Nb250aHMgPSB0aGlzLl9nZXROdW1iZXJPZk1vbnRocyggaW5zdCApLAoJCQljb2xzID0gbnVtTW9udGhzWyAxIF0sCgkJCXdpZHRoID0gMTcsCgkJCWFjdGl2ZUNlbGwgPSBpbnN0LmRwRGl2LmZpbmQoICIuIiArIHRoaXMuX2RheU92ZXJDbGFzcyArICIgYSIgKTsKCgkJaWYgKCBhY3RpdmVDZWxsLmxlbmd0aCA+IDAgKSB7CgkJCWRhdGVwaWNrZXJfaGFuZGxlTW91c2VvdmVyLmFwcGx5KCBhY3RpdmVDZWxsLmdldCggMCApICk7CgkJfQoKCQlpbnN0LmRwRGl2LnJlbW92ZUNsYXNzKCAidWktZGF0ZXBpY2tlci1tdWx0aS0yIHVpLWRhdGVwaWNrZXItbXVsdGktMyB1aS1kYXRlcGlja2VyLW11bHRpLTQiICkud2lkdGgoICIiICk7CgkJaWYgKCBjb2xzID4gMSApIHsKCQkJaW5zdC5kcERpdi5hZGRDbGFzcyggInVpLWRhdGVwaWNrZXItbXVsdGktIiArIGNvbHMgKS5jc3MoICJ3aWR0aCIsICggd2lkdGggKiBjb2xzICkgKyAiZW0iICk7CgkJfQoJCWluc3QuZHBEaXZbICggbnVtTW9udGhzWyAwIF0gIT09IDEgfHwgbnVtTW9udGhzWyAxIF0gIT09IDEgPyAiYWRkIiA6ICJyZW1vdmUiICkgKwoJCQkiQ2xhc3MiIF0oICJ1aS1kYXRlcGlja2VyLW11bHRpIiApOwoJCWluc3QuZHBEaXZbICggdGhpcy5fZ2V0KCBpbnN0LCAiaXNSVEwiICkgPyAiYWRkIiA6ICJyZW1vdmUiICkgKwoJCQkiQ2xhc3MiIF0oICJ1aS1kYXRlcGlja2VyLXJ0bCIgKTsKCgkJaWYgKCBpbnN0ID09PSAkLmRhdGVwaWNrZXIuX2N1ckluc3QgJiYgJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyAmJiAkLmRhdGVwaWNrZXIuX3Nob3VsZEZvY3VzSW5wdXQoIGluc3QgKSApIHsKCQkJaW5zdC5pbnB1dC50cmlnZ2VyKCAiZm9jdXMiICk7CgkJfQoKCQkvLyBEZWZmZXJlZCByZW5kZXIgb2YgdGhlIHllYXJzIHNlbGVjdCAodG8gYXZvaWQgZmxhc2hlcyBvbiBGaXJlZm94KQoJCWlmICggaW5zdC55ZWFyc2h0bWwgKSB7CgkJCW9yaWd5ZWFyc2h0bWwgPSBpbnN0LnllYXJzaHRtbDsKCQkJc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgoJCQkJLy9hc3N1cmUgdGhhdCBpbnN0LnllYXJzaHRtbCBkaWRuJ3QgY2hhbmdlLgoJCQkJaWYgKCBvcmlneWVhcnNodG1sID09PSBpbnN0LnllYXJzaHRtbCAmJiBpbnN0LnllYXJzaHRtbCApIHsKCQkJCQlpbnN0LmRwRGl2LmZpbmQoICJzZWxlY3QudWktZGF0ZXBpY2tlci15ZWFyOmZpcnN0IiApLnJlcGxhY2VXaXRoKCBpbnN0LnllYXJzaHRtbCApOwoJCQkJfQoJCQkJb3JpZ3llYXJzaHRtbCA9IGluc3QueWVhcnNodG1sID0gbnVsbDsKCQkJfSwgMCApOwoJCX0KCX0sCgoJLy8gIzY2OTQgLSBkb24ndCBmb2N1cyB0aGUgaW5wdXQgaWYgaXQncyBhbHJlYWR5IGZvY3VzZWQKCS8vIHRoaXMgYnJlYWtzIHRoZSBjaGFuZ2UgZXZlbnQgaW4gSUUKCS8vIFN1cHBvcnQ6IElFIGFuZCBqUXVlcnkgPDEuOQoJX3Nob3VsZEZvY3VzSW5wdXQ6IGZ1bmN0aW9uKCBpbnN0ICkgewoJCXJldHVybiBpbnN0LmlucHV0ICYmIGluc3QuaW5wdXQuaXMoICI6dmlzaWJsZSIgKSAmJiAhaW5zdC5pbnB1dC5pcyggIjpkaXNhYmxlZCIgKSAmJiAhaW5zdC5pbnB1dC5pcyggIjpmb2N1cyIgKTsKCX0sCgoJLyogQ2hlY2sgcG9zaXRpb25pbmcgdG8gcmVtYWluIG9uIHNjcmVlbi4gKi8KCV9jaGVja09mZnNldDogZnVuY3Rpb24oIGluc3QsIG9mZnNldCwgaXNGaXhlZCApIHsKCQl2YXIgZHBXaWR0aCA9IGluc3QuZHBEaXYub3V0ZXJXaWR0aCgpLAoJCQlkcEhlaWdodCA9IGluc3QuZHBEaXYub3V0ZXJIZWlnaHQoKSwKCQkJaW5wdXRXaWR0aCA9IGluc3QuaW5wdXQgPyBpbnN0LmlucHV0Lm91dGVyV2lkdGgoKSA6IDAsCgkJCWlucHV0SGVpZ2h0ID0gaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXQub3V0ZXJIZWlnaHQoKSA6IDAsCgkJCXZpZXdXaWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCArICggaXNGaXhlZCA\/IDAgOiAkKCBkb2N1bWVudCApLnNjcm9sbExlZnQoKSApLAoJCQl2aWV3SGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCArICggaXNGaXhlZCA\/IDAgOiAkKCBkb2N1bWVudCApLnNjcm9sbFRvcCgpICk7CgoJCW9mZnNldC5sZWZ0IC09ICggdGhpcy5fZ2V0KCBpbnN0LCAiaXNSVEwiICkgPyAoIGRwV2lkdGggLSBpbnB1dFdpZHRoICkgOiAwICk7CgkJb2Zmc2V0LmxlZnQgLT0gKCBpc0ZpeGVkICYmIG9mZnNldC5sZWZ0ID09PSBpbnN0LmlucHV0Lm9mZnNldCgpLmxlZnQgKSA\/ICQoIGRvY3VtZW50ICkuc2Nyb2xsTGVmdCgpIDogMDsKCQlvZmZzZXQudG9wIC09ICggaXNGaXhlZCAmJiBvZmZzZXQudG9wID09PSAoIGluc3QuaW5wdXQub2Zmc2V0KCkudG9wICsgaW5wdXRIZWlnaHQgKSApID8gJCggZG9jdW1lbnQgKS5zY3JvbGxUb3AoKSA6IDA7CgoJCS8vIE5vdyBjaGVjayBpZiBkYXRlcGlja2VyIGlzIHNob3dpbmcgb3V0c2lkZSB3aW5kb3cgdmlld3BvcnQgLSBtb3ZlIHRvIGEgYmV0dGVyIHBsYWNlIGlmIHNvLgoJCW9mZnNldC5sZWZ0IC09IE1hdGgubWluKCBvZmZzZXQubGVmdCwgKCBvZmZzZXQubGVmdCArIGRwV2lkdGggPiB2aWV3V2lkdGggJiYgdmlld1dpZHRoID4gZHBXaWR0aCApID8KCQkJTWF0aC5hYnMoIG9mZnNldC5sZWZ0ICsgZHBXaWR0aCAtIHZpZXdXaWR0aCApIDogMCApOwoJCW9mZnNldC50b3AgLT0gTWF0aC5taW4oIG9mZnNldC50b3AsICggb2Zmc2V0LnRvcCArIGRwSGVpZ2h0ID4gdmlld0hlaWdodCAmJiB2aWV3SGVpZ2h0ID4gZHBIZWlnaHQgKSA\/CgkJCU1hdGguYWJzKCBkcEhlaWdodCArIGlucHV0SGVpZ2h0ICkgOiAwICk7CgoJCXJldHVybiBvZmZzZXQ7Cgl9LAoKCS8qIEZpbmQgYW4gb2JqZWN0J3MgcG9zaXRpb24gb24gdGhlIHNjcmVlbi4gKi8KCV9maW5kUG9zOiBmdW5jdGlvbiggb2JqICkgewoJCXZhciBwb3NpdGlvbiwKCQkJaW5zdCA9IHRoaXMuX2dldEluc3QoIG9iaiApLAoJCQlpc1JUTCA9IHRoaXMuX2dldCggaW5zdCwgImlzUlRMIiApOwoKCQl3aGlsZSAoIG9iaiAmJiAoIG9iai50eXBlID09PSAiaGlkZGVuIiB8fCBvYmoubm9kZVR5cGUgIT09IDEgfHwgJC5leHByLmZpbHRlcnMuaGlkZGVuKCBvYmogKSApICkgewoJCQlvYmogPSBvYmpbIGlzUlRMID8gInByZXZpb3VzU2libGluZyIgOiAibmV4dFNpYmxpbmciIF07CgkJfQoKCQlwb3NpdGlvbiA9ICQoIG9iaiApLm9mZnNldCgpOwoJCXJldHVybiBbIHBvc2l0aW9uLmxlZnQsIHBvc2l0aW9uLnRvcCBdOwoJfSwKCgkvKiBIaWRlIHRoZSBkYXRlIHBpY2tlciBmcm9tIHZpZXcuCgkgKiBAcGFyYW0gIGlucHV0ICBlbGVtZW50IC0gdGhlIGlucHV0IGZpZWxkIGF0dGFjaGVkIHRvIHRoZSBkYXRlIHBpY2tlcgoJICovCglfaGlkZURhdGVwaWNrZXI6IGZ1bmN0aW9uKCBpbnB1dCApIHsKCQl2YXIgc2hvd0FuaW0sIGR1cmF0aW9uLCBwb3N0UHJvY2Vzcywgb25DbG9zZSwKCQkJaW5zdCA9IHRoaXMuX2N1ckluc3Q7CgoJCWlmICggIWluc3QgfHwgKCBpbnB1dCAmJiBpbnN0ICE9PSAkLmRhdGEoIGlucHV0LCAiZGF0ZXBpY2tlciIgKSApICkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAoIHRoaXMuX2RhdGVwaWNrZXJTaG93aW5nICkgewoJCQlzaG93QW5pbSA9IHRoaXMuX2dldCggaW5zdCwgInNob3dBbmltIiApOwoJCQlkdXJhdGlvbiA9IHRoaXMuX2dldCggaW5zdCwgImR1cmF0aW9uIiApOwoJCQlwb3N0UHJvY2VzcyA9IGZ1bmN0aW9uKCkgewoJCQkJJC5kYXRlcGlja2VyLl90aWR5RGlhbG9nKCBpbnN0ICk7CgkJCX07CgoJCQkvLyBERVBSRUNBVEVEOiBhZnRlciBCQyBmb3IgMS44LnggJC5lZmZlY3RzWyBzaG93QW5pbSBdIGlzIG5vdCBuZWVkZWQKCQkJaWYgKCAkLmVmZmVjdHMgJiYgKCAkLmVmZmVjdHMuZWZmZWN0WyBzaG93QW5pbSBdIHx8ICQuZWZmZWN0c1sgc2hvd0FuaW0gXSApICkgewoJCQkJaW5zdC5kcERpdi5oaWRlKCBzaG93QW5pbSwgJC5kYXRlcGlja2VyLl9nZXQoIGluc3QsICJzaG93T3B0aW9ucyIgKSwgZHVyYXRpb24sIHBvc3RQcm9jZXNzICk7CgkJCX0gZWxzZSB7CgkJCQlpbnN0LmRwRGl2WyAoIHNob3dBbmltID09PSAic2xpZGVEb3duIiA\/ICJzbGlkZVVwIiA6CgkJCQkJKCBzaG93QW5pbSA9PT0gImZhZGVJbiIgPyAiZmFkZU91dCIgOiAiaGlkZSIgKSApIF0oICggc2hvd0FuaW0gPyBkdXJhdGlvbiA6IG51bGwgKSwgcG9zdFByb2Nlc3MgKTsKCQkJfQoKCQkJaWYgKCAhc2hvd0FuaW0gKSB7CgkJCQlwb3N0UHJvY2VzcygpOwoJCQl9CgkJCXRoaXMuX2RhdGVwaWNrZXJTaG93aW5nID0gZmFsc2U7CgoJCQlvbkNsb3NlID0gdGhpcy5fZ2V0KCBpbnN0LCAib25DbG9zZSIgKTsKCQkJaWYgKCBvbkNsb3NlICkgewoJCQkJb25DbG9zZS5hcHBseSggKCBpbnN0LmlucHV0ID8gaW5zdC5pbnB1dFsgMCBdIDogbnVsbCApLCBbICggaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXQudmFsKCkgOiAiIiApLCBpbnN0IF0gKTsKCQkJfQoKCQkJdGhpcy5fbGFzdElucHV0ID0gbnVsbDsKCQkJaWYgKCB0aGlzLl9pbkRpYWxvZyApIHsKCQkJCXRoaXMuX2RpYWxvZ0lucHV0LmNzcyggeyBwb3NpdGlvbjogImFic29sdXRlIiwgbGVmdDogIjAiLCB0b3A6ICItMTAwcHgiIH0gKTsKCQkJCWlmICggJC5ibG9ja1VJICkgewoJCQkJCSQudW5ibG9ja1VJKCk7CgkJCQkJJCggImJvZHkiICkuYXBwZW5kKCB0aGlzLmRwRGl2ICk7CgkJCQl9CgkJCX0KCQkJdGhpcy5faW5EaWFsb2cgPSBmYWxzZTsKCQl9Cgl9LAoKCS8qIFRpZHkgdXAgYWZ0ZXIgYSBkaWFsb2cgZGlzcGxheS4gKi8KCV90aWR5RGlhbG9nOiBmdW5jdGlvbiggaW5zdCApIHsKCQlpbnN0LmRwRGl2LnJlbW92ZUNsYXNzKCB0aGlzLl9kaWFsb2dDbGFzcyApLm9mZiggIi51aS1kYXRlcGlja2VyLWNhbGVuZGFyIiApOwoJfSwKCgkvKiBDbG9zZSBkYXRlIHBpY2tlciBpZiBjbGlja2VkIGVsc2V3aGVyZS4gKi8KCV9jaGVja0V4dGVybmFsQ2xpY2s6IGZ1bmN0aW9uKCBldmVudCApIHsKCQlpZiAoICEkLmRhdGVwaWNrZXIuX2N1ckluc3QgKSB7CgkJCXJldHVybjsKCQl9CgoJCXZhciAkdGFyZ2V0ID0gJCggZXZlbnQudGFyZ2V0ICksCgkJCWluc3QgPSAkLmRhdGVwaWNrZXIuX2dldEluc3QoICR0YXJnZXRbIDAgXSApOwoKCQlpZiAoICggKCAkdGFyZ2V0WyAwIF0uaWQgIT09ICQuZGF0ZXBpY2tlci5fbWFpbkRpdklkICYmCgkJCQkkdGFyZ2V0LnBhcmVudHMoICIjIiArICQuZGF0ZXBpY2tlci5fbWFpbkRpdklkICkubGVuZ3RoID09PSAwICYmCgkJCQkhJHRhcmdldC5oYXNDbGFzcyggJC5kYXRlcGlja2VyLm1hcmtlckNsYXNzTmFtZSApICYmCgkJCQkhJHRhcmdldC5jbG9zZXN0KCAiLiIgKyAkLmRhdGVwaWNrZXIuX3RyaWdnZXJDbGFzcyApLmxlbmd0aCAmJgoJCQkJJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyAmJiAhKCAkLmRhdGVwaWNrZXIuX2luRGlhbG9nICYmICQuYmxvY2tVSSApICkgKSB8fAoJCQkoICR0YXJnZXQuaGFzQ2xhc3MoICQuZGF0ZXBpY2tlci5tYXJrZXJDbGFzc05hbWUgKSAmJiAkLmRhdGVwaWNrZXIuX2N1ckluc3QgIT09IGluc3QgKSApIHsKCQkJCSQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTsKCQl9Cgl9LAoKCS8qIEFkanVzdCBvbmUgb2YgdGhlIGRhdGUgc3ViLWZpZWxkcy4gKi8KCV9hZGp1c3REYXRlOiBmdW5jdGlvbiggaWQsIG9mZnNldCwgcGVyaW9kICkgewoJCXZhciB0YXJnZXQgPSAkKCBpZCApLAoJCQlpbnN0ID0gdGhpcy5fZ2V0SW5zdCggdGFyZ2V0WyAwIF0gKTsKCgkJaWYgKCB0aGlzLl9pc0Rpc2FibGVkRGF0ZXBpY2tlciggdGFyZ2V0WyAwIF0gKSApIHsKCQkJcmV0dXJuOwoJCX0KCQl0aGlzLl9hZGp1c3RJbnN0RGF0ZSggaW5zdCwgb2Zmc2V0ICsKCQkJKCBwZXJpb2QgPT09ICJNIiA\/IHRoaXMuX2dldCggaW5zdCwgInNob3dDdXJyZW50QXRQb3MiICkgOiAwICksIC8vIHVuZG8gcG9zaXRpb25pbmcKCQkJcGVyaW9kICk7CgkJdGhpcy5fdXBkYXRlRGF0ZXBpY2tlciggaW5zdCApOwoJfSwKCgkvKiBBY3Rpb24gZm9yIGN1cnJlbnQgbGluay4gKi8KCV9nb3RvVG9kYXk6IGZ1bmN0aW9uKCBpZCApIHsKCQl2YXIgZGF0ZSwKCQkJdGFyZ2V0ID0gJCggaWQgKSwKCQkJaW5zdCA9IHRoaXMuX2dldEluc3QoIHRhcmdldFsgMCBdICk7CgoJCWlmICggdGhpcy5fZ2V0KCBpbnN0LCAiZ290b0N1cnJlbnQiICkgJiYgaW5zdC5jdXJyZW50RGF5ICkgewoJCQlpbnN0LnNlbGVjdGVkRGF5ID0gaW5zdC5jdXJyZW50RGF5OwoJCQlpbnN0LmRyYXdNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCA9IGluc3QuY3VycmVudE1vbnRoOwoJCQlpbnN0LmRyYXdZZWFyID0gaW5zdC5zZWxlY3RlZFllYXIgPSBpbnN0LmN1cnJlbnRZZWFyOwoJCX0gZWxzZSB7CgkJCWRhdGUgPSBuZXcgRGF0ZSgpOwoJCQlpbnN0LnNlbGVjdGVkRGF5ID0gZGF0ZS5nZXREYXRlKCk7CgkJCWluc3QuZHJhd01vbnRoID0gaW5zdC5zZWxlY3RlZE1vbnRoID0gZGF0ZS5nZXRNb250aCgpOwoJCQlpbnN0LmRyYXdZZWFyID0gaW5zdC5zZWxlY3RlZFllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7CgkJfQoJCXRoaXMuX25vdGlmeUNoYW5nZSggaW5zdCApOwoJCXRoaXMuX2FkanVzdERhdGUoIHRhcmdldCApOwoJfSwKCgkvKiBBY3Rpb24gZm9yIHNlbGVjdGluZyBhIG5ldyBtb250aC95ZWFyLiAqLwoJX3NlbGVjdE1vbnRoWWVhcjogZnVuY3Rpb24oIGlkLCBzZWxlY3QsIHBlcmlvZCApIHsKCQl2YXIgdGFyZ2V0ID0gJCggaWQgKSwKCQkJaW5zdCA9IHRoaXMuX2dldEluc3QoIHRhcmdldFsgMCBdICk7CgoJCWluc3RbICJzZWxlY3RlZCIgKyAoIHBlcmlvZCA9PT0gIk0iID8gIk1vbnRoIiA6ICJZZWFyIiApIF0gPQoJCWluc3RbICJkcmF3IiArICggcGVyaW9kID09PSAiTSIgPyAiTW9udGgiIDogIlllYXIiICkgXSA9CgkJCXBhcnNlSW50KCBzZWxlY3Qub3B0aW9uc1sgc2VsZWN0LnNlbGVjdGVkSW5kZXggXS52YWx1ZSwgMTAgKTsKCgkJdGhpcy5fbm90aWZ5Q2hhbmdlKCBpbnN0ICk7CgkJdGhpcy5fYWRqdXN0RGF0ZSggdGFyZ2V0ICk7Cgl9LAoKCS8qIEFjdGlvbiBmb3Igc2VsZWN0aW5nIGEgZGF5LiAqLwoJX3NlbGVjdERheTogZnVuY3Rpb24oIGlkLCBtb250aCwgeWVhciwgdGQgKSB7CgkJdmFyIGluc3QsCgkJCXRhcmdldCA9ICQoIGlkICk7CgoJCWlmICggJCggdGQgKS5oYXNDbGFzcyggdGhpcy5fdW5zZWxlY3RhYmxlQ2xhc3MgKSB8fCB0aGlzLl9pc0Rpc2FibGVkRGF0ZXBpY2tlciggdGFyZ2V0WyAwIF0gKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJaW5zdCA9IHRoaXMuX2dldEluc3QoIHRhcmdldFsgMCBdICk7CgkJaW5zdC5zZWxlY3RlZERheSA9IGluc3QuY3VycmVudERheSA9ICQoICJhIiwgdGQgKS5odG1sKCk7CgkJaW5zdC5zZWxlY3RlZE1vbnRoID0gaW5zdC5jdXJyZW50TW9udGggPSBtb250aDsKCQlpbnN0LnNlbGVjdGVkWWVhciA9IGluc3QuY3VycmVudFllYXIgPSB5ZWFyOwoJCXRoaXMuX3NlbGVjdERhdGUoIGlkLCB0aGlzLl9mb3JtYXREYXRlKCBpbnN0LAoJCQlpbnN0LmN1cnJlbnREYXksIGluc3QuY3VycmVudE1vbnRoLCBpbnN0LmN1cnJlbnRZZWFyICkgKTsKCX0sCgoJLyogRXJhc2UgdGhlIGlucHV0IGZpZWxkIGFuZCBoaWRlIHRoZSBkYXRlIHBpY2tlci4gKi8KCV9jbGVhckRhdGU6IGZ1bmN0aW9uKCBpZCApIHsKCQl2YXIgdGFyZ2V0ID0gJCggaWQgKTsKCQl0aGlzLl9zZWxlY3REYXRlKCB0YXJnZXQsICIiICk7Cgl9LAoKCS8qIFVwZGF0ZSB0aGUgaW5wdXQgZmllbGQgd2l0aCB0aGUgc2VsZWN0ZWQgZGF0ZS4gKi8KCV9zZWxlY3REYXRlOiBmdW5jdGlvbiggaWQsIGRhdGVTdHIgKSB7CgkJdmFyIG9uU2VsZWN0LAoJCQl0YXJnZXQgPSAkKCBpZCApLAoJCQlpbnN0ID0gdGhpcy5fZ2V0SW5zdCggdGFyZ2V0WyAwIF0gKTsKCgkJZGF0ZVN0ciA9ICggZGF0ZVN0ciAhPSBudWxsID8gZGF0ZVN0ciA6IHRoaXMuX2Zvcm1hdERhdGUoIGluc3QgKSApOwoJCWlmICggaW5zdC5pbnB1dCApIHsKCQkJaW5zdC5pbnB1dC52YWwoIGRhdGVTdHIgKTsKCQl9CgkJdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKCBpbnN0ICk7CgoJCW9uU2VsZWN0ID0gdGhpcy5fZ2V0KCBpbnN0LCAib25TZWxlY3QiICk7CgkJaWYgKCBvblNlbGVjdCApIHsKCQkJb25TZWxlY3QuYXBwbHkoICggaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXRbIDAgXSA6IG51bGwgKSwgWyBkYXRlU3RyLCBpbnN0IF0gKTsgIC8vIHRyaWdnZXIgY3VzdG9tIGNhbGxiYWNrCgkJfSBlbHNlIGlmICggaW5zdC5pbnB1dCApIHsKCQkJaW5zdC5pbnB1dC50cmlnZ2VyKCAiY2hhbmdlIiApOyAvLyBmaXJlIHRoZSBjaGFuZ2UgZXZlbnQKCQl9CgoJCWlmICggaW5zdC5pbmxpbmUgKSB7CgkJCXRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoIGluc3QgKTsKCQl9IGVsc2UgewoJCQl0aGlzLl9oaWRlRGF0ZXBpY2tlcigpOwoJCQl0aGlzLl9sYXN0SW5wdXQgPSBpbnN0LmlucHV0WyAwIF07CgkJCWlmICggdHlwZW9mKCBpbnN0LmlucHV0WyAwIF0gKSAhPT0gIm9iamVjdCIgKSB7CgkJCQlpbnN0LmlucHV0LnRyaWdnZXIoICJmb2N1cyIgKTsgLy8gcmVzdG9yZSBmb2N1cwoJCQl9CgkJCXRoaXMuX2xhc3RJbnB1dCA9IG51bGw7CgkJfQoJfSwKCgkvKiBVcGRhdGUgYW55IGFsdGVybmF0ZSBmaWVsZCB0byBzeW5jaHJvbmlzZSB3aXRoIHRoZSBtYWluIGZpZWxkLiAqLwoJX3VwZGF0ZUFsdGVybmF0ZTogZnVuY3Rpb24oIGluc3QgKSB7CgkJdmFyIGFsdEZvcm1hdCwgZGF0ZSwgZGF0ZVN0ciwKCQkJYWx0RmllbGQgPSB0aGlzLl9nZXQoIGluc3QsICJhbHRGaWVsZCIgKTsKCgkJaWYgKCBhbHRGaWVsZCApIHsgLy8gdXBkYXRlIGFsdGVybmF0ZSBmaWVsZCB0b28KCQkJYWx0Rm9ybWF0ID0gdGhpcy5fZ2V0KCBpbnN0LCAiYWx0Rm9ybWF0IiApIHx8IHRoaXMuX2dldCggaW5zdCwgImRhdGVGb3JtYXQiICk7CgkJCWRhdGUgPSB0aGlzLl9nZXREYXRlKCBpbnN0ICk7CgkJCWRhdGVTdHIgPSB0aGlzLmZvcm1hdERhdGUoIGFsdEZvcm1hdCwgZGF0ZSwgdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKCBpbnN0ICkgKTsKCQkJJCggYWx0RmllbGQgKS52YWwoIGRhdGVTdHIgKTsKCQl9Cgl9LAoKCS8qIFNldCBhcyBiZWZvcmVTaG93RGF5IGZ1bmN0aW9uIHRvIHByZXZlbnQgc2VsZWN0aW9uIG9mIHdlZWtlbmRzLgoJICogQHBhcmFtICBkYXRlICBEYXRlIC0gdGhlIGRhdGUgdG8gY3VzdG9taXNlCgkgKiBAcmV0dXJuIFtib29sZWFuLCBzdHJpbmddIC0gaXMgdGhpcyBkYXRlIHNlbGVjdGFibGU\/LCB3aGF0IGlzIGl0cyBDU1MgY2xhc3M\/CgkgKi8KCW5vV2Vla2VuZHM6IGZ1bmN0aW9uKCBkYXRlICkgewoJCXZhciBkYXkgPSBkYXRlLmdldERheSgpOwoJCXJldHVybiBbICggZGF5ID4gMCAmJiBkYXkgPCA2ICksICIiIF07Cgl9LAoKCS8qIFNldCBhcyBjYWxjdWxhdGVXZWVrIHRvIGRldGVybWluZSB0aGUgd2VlayBvZiB0aGUgeWVhciBiYXNlZCBvbiB0aGUgSVNPIDg2MDEgZGVmaW5pdGlvbi4KCSAqIEBwYXJhbSAgZGF0ZSAgRGF0ZSAtIHRoZSBkYXRlIHRvIGdldCB0aGUgd2VlayBmb3IKCSAqIEByZXR1cm4gIG51bWJlciAtIHRoZSBudW1iZXIgb2YgdGhlIHdlZWsgd2l0aGluIHRoZSB5ZWFyIHRoYXQgY29udGFpbnMgdGhpcyBkYXRlCgkgKi8KCWlzbzg2MDFXZWVrOiBmdW5jdGlvbiggZGF0ZSApIHsKCQl2YXIgdGltZSwKCQkJY2hlY2tEYXRlID0gbmV3IERhdGUoIGRhdGUuZ2V0VGltZSgpICk7CgoJCS8vIEZpbmQgVGh1cnNkYXkgb2YgdGhpcyB3ZWVrIHN0YXJ0aW5nIG9uIE1vbmRheQoJCWNoZWNrRGF0ZS5zZXREYXRlKCBjaGVja0RhdGUuZ2V0RGF0ZSgpICsgNCAtICggY2hlY2tEYXRlLmdldERheSgpIHx8IDcgKSApOwoKCQl0aW1lID0gY2hlY2tEYXRlLmdldFRpbWUoKTsKCQljaGVja0RhdGUuc2V0TW9udGgoIDAgKTsgLy8gQ29tcGFyZSB3aXRoIEphbiAxCgkJY2hlY2tEYXRlLnNldERhdGUoIDEgKTsKCQlyZXR1cm4gTWF0aC5mbG9vciggTWF0aC5yb3VuZCggKCB0aW1lIC0gY2hlY2tEYXRlICkgLyA4NjQwMDAwMCApIC8gNyApICsgMTsKCX0sCgoJLyogUGFyc2UgYSBzdHJpbmcgdmFsdWUgaW50byBhIGRhdGUgb2JqZWN0LgoJICogU2VlIGZvcm1hdERhdGUgYmVsb3cgZm9yIHRoZSBwb3NzaWJsZSBmb3JtYXRzLgoJICoKCSAqIEBwYXJhbSAgZm9ybWF0IHN0cmluZyAtIHRoZSBleHBlY3RlZCBmb3JtYXQgb2YgdGhlIGRhdGUKCSAqIEBwYXJhbSAgdmFsdWUgc3RyaW5nIC0gdGhlIGRhdGUgaW4gdGhlIGFib3ZlIGZvcm1hdAoJICogQHBhcmFtICBzZXR0aW5ncyBPYmplY3QgLSBhdHRyaWJ1dGVzIGluY2x1ZGU6CgkgKgkJCQkJc2hvcnRZZWFyQ3V0b2ZmICBudW1iZXIgLSB0aGUgY3V0b2ZmIHllYXIgZm9yIGRldGVybWluaW5nIHRoZSBjZW50dXJ5IChvcHRpb25hbCkKCSAqCQkJCQlkYXlOYW1lc1Nob3J0CXN0cmluZ1s3XSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBkYXlzIGZyb20gU3VuZGF5IChvcHRpb25hbCkKCSAqCQkJCQlkYXlOYW1lcwkJc3RyaW5nWzddIC0gbmFtZXMgb2YgdGhlIGRheXMgZnJvbSBTdW5kYXkgKG9wdGlvbmFsKQoJICoJCQkJCW1vbnRoTmFtZXNTaG9ydCBzdHJpbmdbMTJdIC0gYWJicmV2aWF0ZWQgbmFtZXMgb2YgdGhlIG1vbnRocyAob3B0aW9uYWwpCgkgKgkJCQkJbW9udGhOYW1lcwkJc3RyaW5nWzEyXSAtIG5hbWVzIG9mIHRoZSBtb250aHMgKG9wdGlvbmFsKQoJICogQHJldHVybiAgRGF0ZSAtIHRoZSBleHRyYWN0ZWQgZGF0ZSB2YWx1ZSBvciBudWxsIGlmIHZhbHVlIGlzIGJsYW5rCgkgKi8KCXBhcnNlRGF0ZTogZnVuY3Rpb24oIGZvcm1hdCwgdmFsdWUsIHNldHRpbmdzICkgewoJCWlmICggZm9ybWF0ID09IG51bGwgfHwgdmFsdWUgPT0gbnVsbCApIHsKCQkJdGhyb3cgIkludmFsaWQgYXJndW1lbnRzIjsKCQl9CgoJCXZhbHVlID0gKCB0eXBlb2YgdmFsdWUgPT09ICJvYmplY3QiID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlICsgIiIgKTsKCQlpZiAoIHZhbHVlID09PSAiIiApIHsKCQkJcmV0dXJuIG51bGw7CgkJfQoKCQl2YXIgaUZvcm1hdCwgZGltLCBleHRyYSwKCQkJaVZhbHVlID0gMCwKCQkJc2hvcnRZZWFyQ3V0b2ZmVGVtcCA9ICggc2V0dGluZ3MgPyBzZXR0aW5ncy5zaG9ydFllYXJDdXRvZmYgOiBudWxsICkgfHwgdGhpcy5fZGVmYXVsdHMuc2hvcnRZZWFyQ3V0b2ZmLAoJCQlzaG9ydFllYXJDdXRvZmYgPSAoIHR5cGVvZiBzaG9ydFllYXJDdXRvZmZUZW1wICE9PSAic3RyaW5nIiA\/IHNob3J0WWVhckN1dG9mZlRlbXAgOgoJCQkJbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpICUgMTAwICsgcGFyc2VJbnQoIHNob3J0WWVhckN1dG9mZlRlbXAsIDEwICkgKSwKCQkJZGF5TmFtZXNTaG9ydCA9ICggc2V0dGluZ3MgPyBzZXR0aW5ncy5kYXlOYW1lc1Nob3J0IDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzU2hvcnQsCgkJCWRheU5hbWVzID0gKCBzZXR0aW5ncyA\/IHNldHRpbmdzLmRheU5hbWVzIDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzLAoJCQltb250aE5hbWVzU2hvcnQgPSAoIHNldHRpbmdzID8gc2V0dGluZ3MubW9udGhOYW1lc1Nob3J0IDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXNTaG9ydCwKCQkJbW9udGhOYW1lcyA9ICggc2V0dGluZ3MgPyBzZXR0aW5ncy5tb250aE5hbWVzIDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXMsCgkJCXllYXIgPSAtMSwKCQkJbW9udGggPSAtMSwKCQkJZGF5ID0gLTEsCgkJCWRveSA9IC0xLAoJCQlsaXRlcmFsID0gZmFsc2UsCgkJCWRhdGUsCgoJCQkvLyBDaGVjayB3aGV0aGVyIGEgZm9ybWF0IGNoYXJhY3RlciBpcyBkb3VibGVkCgkJCWxvb2tBaGVhZCA9IGZ1bmN0aW9uKCBtYXRjaCApIHsKCQkJCXZhciBtYXRjaGVzID0gKCBpRm9ybWF0ICsgMSA8IGZvcm1hdC5sZW5ndGggJiYgZm9ybWF0LmNoYXJBdCggaUZvcm1hdCArIDEgKSA9PT0gbWF0Y2ggKTsKCQkJCWlmICggbWF0Y2hlcyApIHsKCQkJCQlpRm9ybWF0Kys7CgkJCQl9CgkJCQlyZXR1cm4gbWF0Y2hlczsKCQkJfSwKCgkJCS8vIEV4dHJhY3QgYSBudW1iZXIgZnJvbSB0aGUgc3RyaW5nIHZhbHVlCgkJCWdldE51bWJlciA9IGZ1bmN0aW9uKCBtYXRjaCApIHsKCQkJCXZhciBpc0RvdWJsZWQgPSBsb29rQWhlYWQoIG1hdGNoICksCgkJCQkJc2l6ZSA9ICggbWF0Y2ggPT09ICJAIiA\/IDE0IDogKCBtYXRjaCA9PT0gIiEiID8gMjAgOgoJCQkJCSggbWF0Y2ggPT09ICJ5IiAmJiBpc0RvdWJsZWQgPyA0IDogKCBtYXRjaCA9PT0gIm8iID8gMyA6IDIgKSApICkgKSwKCQkJCQltaW5TaXplID0gKCBtYXRjaCA9PT0gInkiID8gc2l6ZSA6IDEgKSwKCQkJCQlkaWdpdHMgPSBuZXcgUmVnRXhwKCAiXlxcZHsiICsgbWluU2l6ZSArICIsIiArIHNpemUgKyAifSIgKSwKCQkJCQludW0gPSB2YWx1ZS5zdWJzdHJpbmcoIGlWYWx1ZSApLm1hdGNoKCBkaWdpdHMgKTsKCQkJCWlmICggIW51bSApIHsKCQkJCQl0aHJvdyAiTWlzc2luZyBudW1iZXIgYXQgcG9zaXRpb24gIiArIGlWYWx1ZTsKCQkJCX0KCQkJCWlWYWx1ZSArPSBudW1bIDAgXS5sZW5ndGg7CgkJCQlyZXR1cm4gcGFyc2VJbnQoIG51bVsgMCBdLCAxMCApOwoJCQl9LAoKCQkJLy8gRXh0cmFjdCBhIG5hbWUgZnJvbSB0aGUgc3RyaW5nIHZhbHVlIGFuZCBjb252ZXJ0IHRvIGFuIGluZGV4CgkJCWdldE5hbWUgPSBmdW5jdGlvbiggbWF0Y2gsIHNob3J0TmFtZXMsIGxvbmdOYW1lcyApIHsKCQkJCXZhciBpbmRleCA9IC0xLAoJCQkJCW5hbWVzID0gJC5tYXAoIGxvb2tBaGVhZCggbWF0Y2ggKSA\/IGxvbmdOYW1lcyA6IHNob3J0TmFtZXMsIGZ1bmN0aW9uKCB2LCBrICkgewoJCQkJCQlyZXR1cm4gWyBbIGssIHYgXSBdOwoJCQkJCX0gKS5zb3J0KCBmdW5jdGlvbiggYSwgYiApIHsKCQkJCQkJcmV0dXJuIC0oIGFbIDEgXS5sZW5ndGggLSBiWyAxIF0ubGVuZ3RoICk7CgkJCQkJfSApOwoKCQkJCSQuZWFjaCggbmFtZXMsIGZ1bmN0aW9uKCBpLCBwYWlyICkgewoJCQkJCXZhciBuYW1lID0gcGFpclsgMSBdOwoJCQkJCWlmICggdmFsdWUuc3Vic3RyKCBpVmFsdWUsIG5hbWUubGVuZ3RoICkudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpICkgewoJCQkJCQlpbmRleCA9IHBhaXJbIDAgXTsKCQkJCQkJaVZhbHVlICs9IG5hbWUubGVuZ3RoOwoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfQoJCQkJfSApOwoJCQkJaWYgKCBpbmRleCAhPT0gLTEgKSB7CgkJCQkJcmV0dXJuIGluZGV4ICsgMTsKCQkJCX0gZWxzZSB7CgkJCQkJdGhyb3cgIlVua25vd24gbmFtZSBhdCBwb3NpdGlvbiAiICsgaVZhbHVlOwoJCQkJfQoJCQl9LAoKCQkJLy8gQ29uZmlybSB0aGF0IGEgbGl0ZXJhbCBjaGFyYWN0ZXIgbWF0Y2hlcyB0aGUgc3RyaW5nIHZhbHVlCgkJCWNoZWNrTGl0ZXJhbCA9IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCB2YWx1ZS5jaGFyQXQoIGlWYWx1ZSApICE9PSBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICkgKSB7CgkJCQkJdGhyb3cgIlVuZXhwZWN0ZWQgbGl0ZXJhbCBhdCBwb3NpdGlvbiAiICsgaVZhbHVlOwoJCQkJfQoJCQkJaVZhbHVlKys7CgkJCX07CgoJCWZvciAoIGlGb3JtYXQgPSAwOyBpRm9ybWF0IDwgZm9ybWF0Lmxlbmd0aDsgaUZvcm1hdCsrICkgewoJCQlpZiAoIGxpdGVyYWwgKSB7CgkJCQlpZiAoIGZvcm1hdC5jaGFyQXQoIGlGb3JtYXQgKSA9PT0gIiciICYmICFsb29rQWhlYWQoICInIiApICkgewoJCQkJCWxpdGVyYWwgPSBmYWxzZTsKCQkJCX0gZWxzZSB7CgkJCQkJY2hlY2tMaXRlcmFsKCk7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQlzd2l0Y2ggKCBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICkgKSB7CgkJCQkJY2FzZSAiZCI6CgkJCQkJCWRheSA9IGdldE51bWJlciggImQiICk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgIkQiOgoJCQkJCQlnZXROYW1lKCAiRCIsIGRheU5hbWVzU2hvcnQsIGRheU5hbWVzICk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgIm8iOgoJCQkJCQlkb3kgPSBnZXROdW1iZXIoICJvIiApOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICJtIjoKCQkJCQkJbW9udGggPSBnZXROdW1iZXIoICJtIiApOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICJNIjoKCQkJCQkJbW9udGggPSBnZXROYW1lKCAiTSIsIG1vbnRoTmFtZXNTaG9ydCwgbW9udGhOYW1lcyApOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICJ5IjoKCQkJCQkJeWVhciA9IGdldE51bWJlciggInkiICk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgIkAiOgoJCQkJCQlkYXRlID0gbmV3IERhdGUoIGdldE51bWJlciggIkAiICkgKTsKCQkJCQkJeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTsKCQkJCQkJbW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxOwoJCQkJCQlkYXkgPSBkYXRlLmdldERhdGUoKTsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAiISI6CgkJCQkJCWRhdGUgPSBuZXcgRGF0ZSggKCBnZXROdW1iZXIoICIhIiApIC0gdGhpcy5fdGlja3NUbzE5NzAgKSAvIDEwMDAwICk7CgkJCQkJCXllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7CgkJCQkJCW1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTsKCQkJCQkJZGF5ID0gZGF0ZS5nZXREYXRlKCk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgIiciOgoJCQkJCQlpZiAoIGxvb2tBaGVhZCggIiciICkgKSB7CgkJCQkJCQljaGVja0xpdGVyYWwoKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCWxpdGVyYWwgPSB0cnVlOwoJCQkJCQl9CgkJCQkJCWJyZWFrOwoJCQkJCWRlZmF1bHQ6CgkJCQkJCWNoZWNrTGl0ZXJhbCgpOwoJCQkJfQoJCQl9CgkJfQoKCQlpZiAoIGlWYWx1ZSA8IHZhbHVlLmxlbmd0aCApIHsKCQkJZXh0cmEgPSB2YWx1ZS5zdWJzdHIoIGlWYWx1ZSApOwoJCQlpZiAoICEvXlxzKy8udGVzdCggZXh0cmEgKSApIHsKCQkJCXRocm93ICJFeHRyYS91bnBhcnNlZCBjaGFyYWN0ZXJzIGZvdW5kIGluIGRhdGU6ICIgKyBleHRyYTsKCQkJfQoJCX0KCgkJaWYgKCB5ZWFyID09PSAtMSApIHsKCQkJeWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTsKCQl9IGVsc2UgaWYgKCB5ZWFyIDwgMTAwICkgewoJCQl5ZWFyICs9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAtIG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAlIDEwMCArCgkJCQkoIHllYXIgPD0gc2hvcnRZZWFyQ3V0b2ZmID8gMCA6IC0xMDAgKTsKCQl9CgoJCWlmICggZG95ID4gLTEgKSB7CgkJCW1vbnRoID0gMTsKCQkJZGF5ID0gZG95OwoJCQlkbyB7CgkJCQlkaW0gPSB0aGlzLl9nZXREYXlzSW5Nb250aCggeWVhciwgbW9udGggLSAxICk7CgkJCQlpZiAoIGRheSA8PSBkaW0gKSB7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCQltb250aCsrOwoJCQkJZGF5IC09IGRpbTsKCQkJfSB3aGlsZSAoIHRydWUgKTsKCQl9CgoJCWRhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggbmV3IERhdGUoIHllYXIsIG1vbnRoIC0gMSwgZGF5ICkgKTsKCQlpZiAoIGRhdGUuZ2V0RnVsbFllYXIoKSAhPT0geWVhciB8fCBkYXRlLmdldE1vbnRoKCkgKyAxICE9PSBtb250aCB8fCBkYXRlLmdldERhdGUoKSAhPT0gZGF5ICkgewoJCQl0aHJvdyAiSW52YWxpZCBkYXRlIjsgLy8gRS5nLiAzMS8wMi8wMAoJCX0KCQlyZXR1cm4gZGF0ZTsKCX0sCgoJLyogU3RhbmRhcmQgZGF0ZSBmb3JtYXRzLiAqLwoJQVRPTTogInl5LW1tLWRkIiwgLy8gUkZDIDMzMzkgKElTTyA4NjAxKQoJQ09PS0lFOiAiRCwgZGQgTSB5eSIsCglJU09fODYwMTogInl5LW1tLWRkIiwKCVJGQ184MjI6ICJELCBkIE0geSIsCglSRkNfODUwOiAiREQsIGRkLU0teSIsCglSRkNfMTAzNjogIkQsIGQgTSB5IiwKCVJGQ18xMTIzOiAiRCwgZCBNIHl5IiwKCVJGQ18yODIyOiAiRCwgZCBNIHl5IiwKCVJTUzogIkQsIGQgTSB5IiwgLy8gUkZDIDgyMgoJVElDS1M6ICIhIiwKCVRJTUVTVEFNUDogIkAiLAoJVzNDOiAieXktbW0tZGQiLCAvLyBJU08gODYwMQoKCV90aWNrc1RvMTk3MDogKCAoICggMTk3MCAtIDEgKSAqIDM2NSArIE1hdGguZmxvb3IoIDE5NzAgLyA0ICkgLSBNYXRoLmZsb29yKCAxOTcwIC8gMTAwICkgKwoJCU1hdGguZmxvb3IoIDE5NzAgLyA0MDAgKSApICogMjQgKiA2MCAqIDYwICogMTAwMDAwMDAgKSwKCgkvKiBGb3JtYXQgYSBkYXRlIG9iamVjdCBpbnRvIGEgc3RyaW5nIHZhbHVlLgoJICogVGhlIGZvcm1hdCBjYW4gYmUgY29tYmluYXRpb25zIG9mIHRoZSBmb2xsb3dpbmc6CgkgKiBkICAtIGRheSBvZiBtb250aCAobm8gbGVhZGluZyB6ZXJvKQoJICogZGQgLSBkYXkgb2YgbW9udGggKHR3byBkaWdpdCkKCSAqIG8gIC0gZGF5IG9mIHllYXIgKG5vIGxlYWRpbmcgemVyb3MpCgkgKiBvbyAtIGRheSBvZiB5ZWFyICh0aHJlZSBkaWdpdCkKCSAqIEQgIC0gZGF5IG5hbWUgc2hvcnQKCSAqIEREIC0gZGF5IG5hbWUgbG9uZwoJICogbSAgLSBtb250aCBvZiB5ZWFyIChubyBsZWFkaW5nIHplcm8pCgkgKiBtbSAtIG1vbnRoIG9mIHllYXIgKHR3byBkaWdpdCkKCSAqIE0gIC0gbW9udGggbmFtZSBzaG9ydAoJICogTU0gLSBtb250aCBuYW1lIGxvbmcKCSAqIHkgIC0geWVhciAodHdvIGRpZ2l0KQoJICogeXkgLSB5ZWFyIChmb3VyIGRpZ2l0KQoJICogQCAtIFVuaXggdGltZXN0YW1wIChtcyBzaW5jZSAwMS8wMS8xOTcwKQoJICogISAtIFdpbmRvd3MgdGlja3MgKDEwMG5zIHNpbmNlIDAxLzAxLzAwMDEpCgkgKiAiLi4uIiAtIGxpdGVyYWwgdGV4dAoJICogJycgLSBzaW5nbGUgcXVvdGUKCSAqCgkgKiBAcGFyYW0gIGZvcm1hdCBzdHJpbmcgLSB0aGUgZGVzaXJlZCBmb3JtYXQgb2YgdGhlIGRhdGUKCSAqIEBwYXJhbSAgZGF0ZSBEYXRlIC0gdGhlIGRhdGUgdmFsdWUgdG8gZm9ybWF0CgkgKiBAcGFyYW0gIHNldHRpbmdzIE9iamVjdCAtIGF0dHJpYnV0ZXMgaW5jbHVkZToKCSAqCQkJCQlkYXlOYW1lc1Nob3J0CXN0cmluZ1s3XSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBkYXlzIGZyb20gU3VuZGF5IChvcHRpb25hbCkKCSAqCQkJCQlkYXlOYW1lcwkJc3RyaW5nWzddIC0gbmFtZXMgb2YgdGhlIGRheXMgZnJvbSBTdW5kYXkgKG9wdGlvbmFsKQoJICoJCQkJCW1vbnRoTmFtZXNTaG9ydCBzdHJpbmdbMTJdIC0gYWJicmV2aWF0ZWQgbmFtZXMgb2YgdGhlIG1vbnRocyAob3B0aW9uYWwpCgkgKgkJCQkJbW9udGhOYW1lcwkJc3RyaW5nWzEyXSAtIG5hbWVzIG9mIHRoZSBtb250aHMgKG9wdGlvbmFsKQoJICogQHJldHVybiAgc3RyaW5nIC0gdGhlIGRhdGUgaW4gdGhlIGFib3ZlIGZvcm1hdAoJICovCglmb3JtYXREYXRlOiBmdW5jdGlvbiggZm9ybWF0LCBkYXRlLCBzZXR0aW5ncyApIHsKCQlpZiAoICFkYXRlICkgewoJCQlyZXR1cm4gIiI7CgkJfQoKCQl2YXIgaUZvcm1hdCwKCQkJZGF5TmFtZXNTaG9ydCA9ICggc2V0dGluZ3MgPyBzZXR0aW5ncy5kYXlOYW1lc1Nob3J0IDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzU2hvcnQsCgkJCWRheU5hbWVzID0gKCBzZXR0aW5ncyA\/IHNldHRpbmdzLmRheU5hbWVzIDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzLAoJCQltb250aE5hbWVzU2hvcnQgPSAoIHNldHRpbmdzID8gc2V0dGluZ3MubW9udGhOYW1lc1Nob3J0IDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXNTaG9ydCwKCQkJbW9udGhOYW1lcyA9ICggc2V0dGluZ3MgPyBzZXR0aW5ncy5tb250aE5hbWVzIDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXMsCgoJCQkvLyBDaGVjayB3aGV0aGVyIGEgZm9ybWF0IGNoYXJhY3RlciBpcyBkb3VibGVkCgkJCWxvb2tBaGVhZCA9IGZ1bmN0aW9uKCBtYXRjaCApIHsKCQkJCXZhciBtYXRjaGVzID0gKCBpRm9ybWF0ICsgMSA8IGZvcm1hdC5sZW5ndGggJiYgZm9ybWF0LmNoYXJBdCggaUZvcm1hdCArIDEgKSA9PT0gbWF0Y2ggKTsKCQkJCWlmICggbWF0Y2hlcyApIHsKCQkJCQlpRm9ybWF0Kys7CgkJCQl9CgkJCQlyZXR1cm4gbWF0Y2hlczsKCQkJfSwKCgkJCS8vIEZvcm1hdCBhIG51bWJlciwgd2l0aCBsZWFkaW5nIHplcm8gaWYgbmVjZXNzYXJ5CgkJCWZvcm1hdE51bWJlciA9IGZ1bmN0aW9uKCBtYXRjaCwgdmFsdWUsIGxlbiApIHsKCQkJCXZhciBudW0gPSAiIiArIHZhbHVlOwoJCQkJaWYgKCBsb29rQWhlYWQoIG1hdGNoICkgKSB7CgkJCQkJd2hpbGUgKCBudW0ubGVuZ3RoIDwgbGVuICkgewoJCQkJCQludW0gPSAiMCIgKyBudW07CgkJCQkJfQoJCQkJfQoJCQkJcmV0dXJuIG51bTsKCQkJfSwKCgkJCS8vIEZvcm1hdCBhIG5hbWUsIHNob3J0IG9yIGxvbmcgYXMgcmVxdWVzdGVkCgkJCWZvcm1hdE5hbWUgPSBmdW5jdGlvbiggbWF0Y2gsIHZhbHVlLCBzaG9ydE5hbWVzLCBsb25nTmFtZXMgKSB7CgkJCQlyZXR1cm4gKCBsb29rQWhlYWQoIG1hdGNoICkgPyBsb25nTmFtZXNbIHZhbHVlIF0gOiBzaG9ydE5hbWVzWyB2YWx1ZSBdICk7CgkJCX0sCgkJCW91dHB1dCA9ICIiLAoJCQlsaXRlcmFsID0gZmFsc2U7CgoJCWlmICggZGF0ZSApIHsKCQkJZm9yICggaUZvcm1hdCA9IDA7IGlGb3JtYXQgPCBmb3JtYXQubGVuZ3RoOyBpRm9ybWF0KysgKSB7CgkJCQlpZiAoIGxpdGVyYWwgKSB7CgkJCQkJaWYgKCBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICkgPT09ICInIiAmJiAhbG9va0FoZWFkKCAiJyIgKSApIHsKCQkJCQkJbGl0ZXJhbCA9IGZhbHNlOwoJCQkJCX0gZWxzZSB7CgkJCQkJCW91dHB1dCArPSBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICk7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlzd2l0Y2ggKCBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICkgKSB7CgkJCQkJCWNhc2UgImQiOgoJCQkJCQkJb3V0cHV0ICs9IGZvcm1hdE51bWJlciggImQiLCBkYXRlLmdldERhdGUoKSwgMiApOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgIkQiOgoJCQkJCQkJb3V0cHV0ICs9IGZvcm1hdE5hbWUoICJEIiwgZGF0ZS5nZXREYXkoKSwgZGF5TmFtZXNTaG9ydCwgZGF5TmFtZXMgKTsKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICJvIjoKCQkJCQkJCW91dHB1dCArPSBmb3JtYXROdW1iZXIoICJvIiwKCQkJCQkJCQlNYXRoLnJvdW5kKCAoIG5ldyBEYXRlKCBkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkgKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZSggZGF0ZS5nZXRGdWxsWWVhcigpLCAwLCAwICkuZ2V0VGltZSgpICkgLyA4NjQwMDAwMCApLCAzICk7CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAibSI6CgkJCQkJCQlvdXRwdXQgKz0gZm9ybWF0TnVtYmVyKCAibSIsIGRhdGUuZ2V0TW9udGgoKSArIDEsIDIgKTsKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICJNIjoKCQkJCQkJCW91dHB1dCArPSBmb3JtYXROYW1lKCAiTSIsIGRhdGUuZ2V0TW9udGgoKSwgbW9udGhOYW1lc1Nob3J0LCBtb250aE5hbWVzICk7CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAieSI6CgkJCQkJCQlvdXRwdXQgKz0gKCBsb29rQWhlYWQoICJ5IiApID8gZGF0ZS5nZXRGdWxsWWVhcigpIDoKCQkJCQkJCQkoIGRhdGUuZ2V0RnVsbFllYXIoKSAlIDEwMCA8IDEwID8gIjAiIDogIiIgKSArIGRhdGUuZ2V0RnVsbFllYXIoKSAlIDEwMCApOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgIkAiOgoJCQkJCQkJb3V0cHV0ICs9IGRhdGUuZ2V0VGltZSgpOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgIiEiOgoJCQkJCQkJb3V0cHV0ICs9IGRhdGUuZ2V0VGltZSgpICogMTAwMDAgKyB0aGlzLl90aWNrc1RvMTk3MDsKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICInIjoKCQkJCQkJCWlmICggbG9va0FoZWFkKCAiJyIgKSApIHsKCQkJCQkJCQlvdXRwdXQgKz0gIiciOwoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQlsaXRlcmFsID0gdHJ1ZTsKCQkJCQkJCX0KCQkJCQkJCWJyZWFrOwoJCQkJCQlkZWZhdWx0OgoJCQkJCQkJb3V0cHV0ICs9IGZvcm1hdC5jaGFyQXQoIGlGb3JtYXQgKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuIG91dHB1dDsKCX0sCgoJLyogRXh0cmFjdCBhbGwgcG9zc2libGUgY2hhcmFjdGVycyBmcm9tIHRoZSBkYXRlIGZvcm1hdC4gKi8KCV9wb3NzaWJsZUNoYXJzOiBmdW5jdGlvbiggZm9ybWF0ICkgewoJCXZhciBpRm9ybWF0LAoJCQljaGFycyA9ICIiLAoJCQlsaXRlcmFsID0gZmFsc2UsCgoJCQkvLyBDaGVjayB3aGV0aGVyIGEgZm9ybWF0IGNoYXJhY3RlciBpcyBkb3VibGVkCgkJCWxvb2tBaGVhZCA9IGZ1bmN0aW9uKCBtYXRjaCApIHsKCQkJCXZhciBtYXRjaGVzID0gKCBpRm9ybWF0ICsgMSA8IGZvcm1hdC5sZW5ndGggJiYgZm9ybWF0LmNoYXJBdCggaUZvcm1hdCArIDEgKSA9PT0gbWF0Y2ggKTsKCQkJCWlmICggbWF0Y2hlcyApIHsKCQkJCQlpRm9ybWF0Kys7CgkJCQl9CgkJCQlyZXR1cm4gbWF0Y2hlczsKCQkJfTsKCgkJZm9yICggaUZvcm1hdCA9IDA7IGlGb3JtYXQgPCBmb3JtYXQubGVuZ3RoOyBpRm9ybWF0KysgKSB7CgkJCWlmICggbGl0ZXJhbCApIHsKCQkJCWlmICggZm9ybWF0LmNoYXJBdCggaUZvcm1hdCApID09PSAiJyIgJiYgIWxvb2tBaGVhZCggIiciICkgKSB7CgkJCQkJbGl0ZXJhbCA9IGZhbHNlOwoJCQkJfSBlbHNlIHsKCQkJCQljaGFycyArPSBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICk7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQlzd2l0Y2ggKCBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICkgKSB7CgkJCQkJY2FzZSAiZCI6IGNhc2UgIm0iOiBjYXNlICJ5IjogY2FzZSAiQCI6CgkJCQkJCWNoYXJzICs9ICIwMTIzNDU2Nzg5IjsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAiRCI6IGNhc2UgIk0iOgoJCQkJCQlyZXR1cm4gbnVsbDsgLy8gQWNjZXB0IGFueXRoaW5nCgkJCQkJY2FzZSAiJyI6CgkJCQkJCWlmICggbG9va0FoZWFkKCAiJyIgKSApIHsKCQkJCQkJCWNoYXJzICs9ICInIjsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCWxpdGVyYWwgPSB0cnVlOwoJCQkJCQl9CgkJCQkJCWJyZWFrOwoJCQkJCWRlZmF1bHQ6CgkJCQkJCWNoYXJzICs9IGZvcm1hdC5jaGFyQXQoIGlGb3JtYXQgKTsKCQkJCX0KCQkJfQoJCX0KCQlyZXR1cm4gY2hhcnM7Cgl9LAoKCS8qIEdldCBhIHNldHRpbmcgdmFsdWUsIGRlZmF1bHRpbmcgaWYgbmVjZXNzYXJ5LiAqLwoJX2dldDogZnVuY3Rpb24oIGluc3QsIG5hbWUgKSB7CgkJcmV0dXJuIGluc3Quc2V0dGluZ3NbIG5hbWUgXSAhPT0gdW5kZWZpbmVkID8KCQkJaW5zdC5zZXR0aW5nc1sgbmFtZSBdIDogdGhpcy5fZGVmYXVsdHNbIG5hbWUgXTsKCX0sCgoJLyogUGFyc2UgZXhpc3RpbmcgZGF0ZSBhbmQgaW5pdGlhbGlzZSBkYXRlIHBpY2tlci4gKi8KCV9zZXREYXRlRnJvbUZpZWxkOiBmdW5jdGlvbiggaW5zdCwgbm9EZWZhdWx0ICkgewoJCWlmICggaW5zdC5pbnB1dC52YWwoKSA9PT0gaW5zdC5sYXN0VmFsICkgewoJCQlyZXR1cm47CgkJfQoKCQl2YXIgZGF0ZUZvcm1hdCA9IHRoaXMuX2dldCggaW5zdCwgImRhdGVGb3JtYXQiICksCgkJCWRhdGVzID0gaW5zdC5sYXN0VmFsID0gaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXQudmFsKCkgOiBudWxsLAoJCQlkZWZhdWx0RGF0ZSA9IHRoaXMuX2dldERlZmF1bHREYXRlKCBpbnN0ICksCgkJCWRhdGUgPSBkZWZhdWx0RGF0ZSwKCQkJc2V0dGluZ3MgPSB0aGlzLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKTsKCgkJdHJ5IHsKCQkJZGF0ZSA9IHRoaXMucGFyc2VEYXRlKCBkYXRlRm9ybWF0LCBkYXRlcywgc2V0dGluZ3MgKSB8fCBkZWZhdWx0RGF0ZTsKCQl9IGNhdGNoICggZXZlbnQgKSB7CgkJCWRhdGVzID0gKCBub0RlZmF1bHQgPyAiIiA6IGRhdGVzICk7CgkJfQoJCWluc3Quc2VsZWN0ZWREYXkgPSBkYXRlLmdldERhdGUoKTsKCQlpbnN0LmRyYXdNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCA9IGRhdGUuZ2V0TW9udGgoKTsKCQlpbnN0LmRyYXdZZWFyID0gaW5zdC5zZWxlY3RlZFllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7CgkJaW5zdC5jdXJyZW50RGF5ID0gKCBkYXRlcyA\/IGRhdGUuZ2V0RGF0ZSgpIDogMCApOwoJCWluc3QuY3VycmVudE1vbnRoID0gKCBkYXRlcyA\/IGRhdGUuZ2V0TW9udGgoKSA6IDAgKTsKCQlpbnN0LmN1cnJlbnRZZWFyID0gKCBkYXRlcyA\/IGRhdGUuZ2V0RnVsbFllYXIoKSA6IDAgKTsKCQl0aGlzLl9hZGp1c3RJbnN0RGF0ZSggaW5zdCApOwoJfSwKCgkvKiBSZXRyaWV2ZSB0aGUgZGVmYXVsdCBkYXRlIHNob3duIG9uIG9wZW5pbmcuICovCglfZ2V0RGVmYXVsdERhdGU6IGZ1bmN0aW9uKCBpbnN0ICkgewoJCXJldHVybiB0aGlzLl9yZXN0cmljdE1pbk1heCggaW5zdCwKCQkJdGhpcy5fZGV0ZXJtaW5lRGF0ZSggaW5zdCwgdGhpcy5fZ2V0KCBpbnN0LCAiZGVmYXVsdERhdGUiICksIG5ldyBEYXRlKCkgKSApOwoJfSwKCgkvKiBBIGRhdGUgbWF5IGJlIHNwZWNpZmllZCBhcyBhbiBleGFjdCB2YWx1ZSBvciBhIHJlbGF0aXZlIG9uZS4gKi8KCV9kZXRlcm1pbmVEYXRlOiBmdW5jdGlvbiggaW5zdCwgZGF0ZSwgZGVmYXVsdERhdGUgKSB7CgkJdmFyIG9mZnNldE51bWVyaWMgPSBmdW5jdGlvbiggb2Zmc2V0ICkgewoJCQkJdmFyIGRhdGUgPSBuZXcgRGF0ZSgpOwoJCQkJZGF0ZS5zZXREYXRlKCBkYXRlLmdldERhdGUoKSArIG9mZnNldCApOwoJCQkJcmV0dXJuIGRhdGU7CgkJCX0sCgkJCW9mZnNldFN0cmluZyA9IGZ1bmN0aW9uKCBvZmZzZXQgKSB7CgkJCQl0cnkgewoJCQkJCXJldHVybiAkLmRhdGVwaWNrZXIucGFyc2VEYXRlKCAkLmRhdGVwaWNrZXIuX2dldCggaW5zdCwgImRhdGVGb3JtYXQiICksCgkJCQkJCW9mZnNldCwgJC5kYXRlcGlja2VyLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKSApOwoJCQkJfQoJCQkJY2F0Y2ggKCBlICkgewoKCQkJCQkvLyBJZ25vcmUKCQkJCX0KCgkJCQl2YXIgZGF0ZSA9ICggb2Zmc2V0LnRvTG93ZXJDYXNlKCkubWF0Y2goIC9eYy8gKSA\/CgkJCQkJJC5kYXRlcGlja2VyLl9nZXREYXRlKCBpbnN0ICkgOiBudWxsICkgfHwgbmV3IERhdGUoKSwKCQkJCQl5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpLAoJCQkJCW1vbnRoID0gZGF0ZS5nZXRNb250aCgpLAoJCQkJCWRheSA9IGRhdGUuZ2V0RGF0ZSgpLAoJCQkJCXBhdHRlcm4gPSAvKFsrXC1dP1swLTldKylccyooZHxEfHd8V3xtfE18eXxZKT8vZywKCQkJCQltYXRjaGVzID0gcGF0dGVybi5leGVjKCBvZmZzZXQgKTsKCgkJCQl3aGlsZSAoIG1hdGNoZXMgKSB7CgkJCQkJc3dpdGNoICggbWF0Y2hlc1sgMiBdIHx8ICJkIiApIHsKCQkJCQkJY2FzZSAiZCIgOiBjYXNlICJEIiA6CgkJCQkJCQlkYXkgKz0gcGFyc2VJbnQoIG1hdGNoZXNbIDEgXSwgMTAgKTsgYnJlYWs7CgkJCQkJCWNhc2UgInciIDogY2FzZSAiVyIgOgoJCQkJCQkJZGF5ICs9IHBhcnNlSW50KCBtYXRjaGVzWyAxIF0sIDEwICkgKiA3OyBicmVhazsKCQkJCQkJY2FzZSAibSIgOiBjYXNlICJNIiA6CgkJCQkJCQltb250aCArPSBwYXJzZUludCggbWF0Y2hlc1sgMSBdLCAxMCApOwoJCQkJCQkJZGF5ID0gTWF0aC5taW4oIGRheSwgJC5kYXRlcGlja2VyLl9nZXREYXlzSW5Nb250aCggeWVhciwgbW9udGggKSApOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgInkiOiBjYXNlICJZIiA6CgkJCQkJCQl5ZWFyICs9IHBhcnNlSW50KCBtYXRjaGVzWyAxIF0sIDEwICk7CgkJCQkJCQlkYXkgPSBNYXRoLm1pbiggZGF5LCAkLmRhdGVwaWNrZXIuX2dldERheXNJbk1vbnRoKCB5ZWFyLCBtb250aCApICk7CgkJCQkJCQlicmVhazsKCQkJCQl9CgkJCQkJbWF0Y2hlcyA9IHBhdHRlcm4uZXhlYyggb2Zmc2V0ICk7CgkJCQl9CgkJCQlyZXR1cm4gbmV3IERhdGUoIHllYXIsIG1vbnRoLCBkYXkgKTsKCQkJfSwKCQkJbmV3RGF0ZSA9ICggZGF0ZSA9PSBudWxsIHx8IGRhdGUgPT09ICIiID8gZGVmYXVsdERhdGUgOiAoIHR5cGVvZiBkYXRlID09PSAic3RyaW5nIiA\/IG9mZnNldFN0cmluZyggZGF0ZSApIDoKCQkJCSggdHlwZW9mIGRhdGUgPT09ICJudW1iZXIiID8gKCBpc05hTiggZGF0ZSApID8gZGVmYXVsdERhdGUgOiBvZmZzZXROdW1lcmljKCBkYXRlICkgKSA6IG5ldyBEYXRlKCBkYXRlLmdldFRpbWUoKSApICkgKSApOwoKCQluZXdEYXRlID0gKCBuZXdEYXRlICYmIG5ld0RhdGUudG9TdHJpbmcoKSA9PT0gIkludmFsaWQgRGF0ZSIgPyBkZWZhdWx0RGF0ZSA6IG5ld0RhdGUgKTsKCQlpZiAoIG5ld0RhdGUgKSB7CgkJCW5ld0RhdGUuc2V0SG91cnMoIDAgKTsKCQkJbmV3RGF0ZS5zZXRNaW51dGVzKCAwICk7CgkJCW5ld0RhdGUuc2V0U2Vjb25kcyggMCApOwoJCQluZXdEYXRlLnNldE1pbGxpc2Vjb25kcyggMCApOwoJCX0KCQlyZXR1cm4gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoIG5ld0RhdGUgKTsKCX0sCgoJLyogSGFuZGxlIHN3aXRjaCB0by9mcm9tIGRheWxpZ2h0IHNhdmluZy4KCSAqIEhvdXJzIG1heSBiZSBub24temVybyBvbiBkYXlsaWdodCBzYXZpbmcgY3V0LW92ZXI6CgkgKiA+IDEyIHdoZW4gbWlkbmlnaHQgY2hhbmdlb3ZlciwgYnV0IHRoZW4gY2Fubm90IGdlbmVyYXRlCgkgKiBtaWRuaWdodCBkYXRldGltZSwgc28ganVtcCB0byAxQU0sIG90aGVyd2lzZSByZXNldC4KCSAqIEBwYXJhbSAgZGF0ZSAgKERhdGUpIHRoZSBkYXRlIHRvIGNoZWNrCgkgKiBAcmV0dXJuICAoRGF0ZSkgdGhlIGNvcnJlY3RlZCBkYXRlCgkgKi8KCV9kYXlsaWdodFNhdmluZ0FkanVzdDogZnVuY3Rpb24oIGRhdGUgKSB7CgkJaWYgKCAhZGF0ZSApIHsKCQkJcmV0dXJuIG51bGw7CgkJfQoJCWRhdGUuc2V0SG91cnMoIGRhdGUuZ2V0SG91cnMoKSA+IDEyID8gZGF0ZS5nZXRIb3VycygpICsgMiA6IDAgKTsKCQlyZXR1cm4gZGF0ZTsKCX0sCgoJLyogU2V0IHRoZSBkYXRlKHMpIGRpcmVjdGx5LiAqLwoJX3NldERhdGU6IGZ1bmN0aW9uKCBpbnN0LCBkYXRlLCBub0NoYW5nZSApIHsKCQl2YXIgY2xlYXIgPSAhZGF0ZSwKCQkJb3JpZ01vbnRoID0gaW5zdC5zZWxlY3RlZE1vbnRoLAoJCQlvcmlnWWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyLAoJCQluZXdEYXRlID0gdGhpcy5fcmVzdHJpY3RNaW5NYXgoIGluc3QsIHRoaXMuX2RldGVybWluZURhdGUoIGluc3QsIGRhdGUsIG5ldyBEYXRlKCkgKSApOwoKCQlpbnN0LnNlbGVjdGVkRGF5ID0gaW5zdC5jdXJyZW50RGF5ID0gbmV3RGF0ZS5nZXREYXRlKCk7CgkJaW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBpbnN0LmN1cnJlbnRNb250aCA9IG5ld0RhdGUuZ2V0TW9udGgoKTsKCQlpbnN0LmRyYXdZZWFyID0gaW5zdC5zZWxlY3RlZFllYXIgPSBpbnN0LmN1cnJlbnRZZWFyID0gbmV3RGF0ZS5nZXRGdWxsWWVhcigpOwoJCWlmICggKCBvcmlnTW9udGggIT09IGluc3Quc2VsZWN0ZWRNb250aCB8fCBvcmlnWWVhciAhPT0gaW5zdC5zZWxlY3RlZFllYXIgKSAmJiAhbm9DaGFuZ2UgKSB7CgkJCXRoaXMuX25vdGlmeUNoYW5nZSggaW5zdCApOwoJCX0KCQl0aGlzLl9hZGp1c3RJbnN0RGF0ZSggaW5zdCApOwoJCWlmICggaW5zdC5pbnB1dCApIHsKCQkJaW5zdC5pbnB1dC52YWwoIGNsZWFyID8gIiIgOiB0aGlzLl9mb3JtYXREYXRlKCBpbnN0ICkgKTsKCQl9Cgl9LAoKCS8qIFJldHJpZXZlIHRoZSBkYXRlKHMpIGRpcmVjdGx5LiAqLwoJX2dldERhdGU6IGZ1bmN0aW9uKCBpbnN0ICkgewoJCXZhciBzdGFydERhdGUgPSAoICFpbnN0LmN1cnJlbnRZZWFyIHx8ICggaW5zdC5pbnB1dCAmJiBpbnN0LmlucHV0LnZhbCgpID09PSAiIiApID8gbnVsbCA6CgkJCXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCBuZXcgRGF0ZSgKCQkJaW5zdC5jdXJyZW50WWVhciwgaW5zdC5jdXJyZW50TW9udGgsIGluc3QuY3VycmVudERheSApICkgKTsKCQkJcmV0dXJuIHN0YXJ0RGF0ZTsKCX0sCgoJLyogQXR0YWNoIHRoZSBvbnh4eCBoYW5kbGVycy4gIFRoZXNlIGFyZSBkZWNsYXJlZCBzdGF0aWNhbGx5IHNvCgkgKiB0aGV5IHdvcmsgd2l0aCBzdGF0aWMgY29kZSB0cmFuc2Zvcm1lcnMgbGlrZSBDYWphLgoJICovCglfYXR0YWNoSGFuZGxlcnM6IGZ1bmN0aW9uKCBpbnN0ICkgewoJCXZhciBzdGVwTW9udGhzID0gdGhpcy5fZ2V0KCBpbnN0LCAic3RlcE1vbnRocyIgKSwKCQkJaWQgPSAiIyIgKyBpbnN0LmlkLnJlcGxhY2UoIC9cXFxcL2csICJcXCIgKTsKCQlpbnN0LmRwRGl2LmZpbmQoICJbZGF0YS1oYW5kbGVyXSIgKS5tYXAoIGZ1bmN0aW9uKCkgewoJCQl2YXIgaGFuZGxlciA9IHsKCQkJCXByZXY6IGZ1bmN0aW9uKCkgewoJCQkJCSQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZSggaWQsIC1zdGVwTW9udGhzLCAiTSIgKTsKCQkJCX0sCgkJCQluZXh0OiBmdW5jdGlvbigpIHsKCQkJCQkkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoIGlkLCArc3RlcE1vbnRocywgIk0iICk7CgkJCQl9LAoJCQkJaGlkZTogZnVuY3Rpb24oKSB7CgkJCQkJJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpOwoJCQkJfSwKCQkJCXRvZGF5OiBmdW5jdGlvbigpIHsKCQkJCQkkLmRhdGVwaWNrZXIuX2dvdG9Ub2RheSggaWQgKTsKCQkJCX0sCgkJCQlzZWxlY3REYXk6IGZ1bmN0aW9uKCkgewoJCQkJCSQuZGF0ZXBpY2tlci5fc2VsZWN0RGF5KCBpZCwgK3RoaXMuZ2V0QXR0cmlidXRlKCAiZGF0YS1tb250aCIgKSwgK3RoaXMuZ2V0QXR0cmlidXRlKCAiZGF0YS15ZWFyIiApLCB0aGlzICk7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfSwKCQkJCXNlbGVjdE1vbnRoOiBmdW5jdGlvbigpIHsKCQkJCQkkLmRhdGVwaWNrZXIuX3NlbGVjdE1vbnRoWWVhciggaWQsIHRoaXMsICJNIiApOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0sCgkJCQlzZWxlY3RZZWFyOiBmdW5jdGlvbigpIHsKCQkJCQkkLmRhdGVwaWNrZXIuX3NlbGVjdE1vbnRoWWVhciggaWQsIHRoaXMsICJZIiApOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfTsKCQkJJCggdGhpcyApLm9uKCB0aGlzLmdldEF0dHJpYnV0ZSggImRhdGEtZXZlbnQiICksIGhhbmRsZXJbIHRoaXMuZ2V0QXR0cmlidXRlKCAiZGF0YS1oYW5kbGVyIiApIF0gKTsKCQl9ICk7Cgl9LAoKCS8qIEdlbmVyYXRlIHRoZSBIVE1MIGZvciB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZGF0ZSBwaWNrZXIuICovCglfZ2VuZXJhdGVIVE1MOiBmdW5jdGlvbiggaW5zdCApIHsKCQl2YXIgbWF4RHJhdywgcHJldlRleHQsIHByZXYsIG5leHRUZXh0LCBuZXh0LCBjdXJyZW50VGV4dCwgZ290b0RhdGUsCgkJCWNvbnRyb2xzLCBidXR0b25QYW5lbCwgZmlyc3REYXksIHNob3dXZWVrLCBkYXlOYW1lcywgZGF5TmFtZXNNaW4sCgkJCW1vbnRoTmFtZXMsIG1vbnRoTmFtZXNTaG9ydCwgYmVmb3JlU2hvd0RheSwgc2hvd090aGVyTW9udGhzLAoJCQlzZWxlY3RPdGhlck1vbnRocywgZGVmYXVsdERhdGUsIGh0bWwsIGRvdywgcm93LCBncm91cCwgY29sLCBzZWxlY3RlZERhdGUsCgkJCWNvcm5lckNsYXNzLCBjYWxlbmRlciwgdGhlYWQsIGRheSwgZGF5c0luTW9udGgsIGxlYWREYXlzLCBjdXJSb3dzLCBudW1Sb3dzLAoJCQlwcmludERhdGUsIGRSb3csIHRib2R5LCBkYXlTZXR0aW5ncywgb3RoZXJNb250aCwgdW5zZWxlY3RhYmxlLAoJCQl0ZW1wRGF0ZSA9IG5ldyBEYXRlKCksCgkJCXRvZGF5ID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoCgkJCQluZXcgRGF0ZSggdGVtcERhdGUuZ2V0RnVsbFllYXIoKSwgdGVtcERhdGUuZ2V0TW9udGgoKSwgdGVtcERhdGUuZ2V0RGF0ZSgpICkgKSwgLy8gY2xlYXIgdGltZQoJCQlpc1JUTCA9IHRoaXMuX2dldCggaW5zdCwgImlzUlRMIiApLAoJCQlzaG93QnV0dG9uUGFuZWwgPSB0aGlzLl9nZXQoIGluc3QsICJzaG93QnV0dG9uUGFuZWwiICksCgkJCWhpZGVJZk5vUHJldk5leHQgPSB0aGlzLl9nZXQoIGluc3QsICJoaWRlSWZOb1ByZXZOZXh0IiApLAoJCQluYXZpZ2F0aW9uQXNEYXRlRm9ybWF0ID0gdGhpcy5fZ2V0KCBpbnN0LCAibmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCIgKSwKCQkJbnVtTW9udGhzID0gdGhpcy5fZ2V0TnVtYmVyT2ZNb250aHMoIGluc3QgKSwKCQkJc2hvd0N1cnJlbnRBdFBvcyA9IHRoaXMuX2dldCggaW5zdCwgInNob3dDdXJyZW50QXRQb3MiICksCgkJCXN0ZXBNb250aHMgPSB0aGlzLl9nZXQoIGluc3QsICJzdGVwTW9udGhzIiApLAoJCQlpc011bHRpTW9udGggPSAoIG51bU1vbnRoc1sgMCBdICE9PSAxIHx8IG51bU1vbnRoc1sgMSBdICE9PSAxICksCgkJCWN1cnJlbnREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoICggIWluc3QuY3VycmVudERheSA\/IG5ldyBEYXRlKCA5OTk5LCA5LCA5ICkgOgoJCQkJbmV3IERhdGUoIGluc3QuY3VycmVudFllYXIsIGluc3QuY3VycmVudE1vbnRoLCBpbnN0LmN1cnJlbnREYXkgKSApICksCgkJCW1pbkRhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKCBpbnN0LCAibWluIiApLAoJCQltYXhEYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZSggaW5zdCwgIm1heCIgKSwKCQkJZHJhd01vbnRoID0gaW5zdC5kcmF3TW9udGggLSBzaG93Q3VycmVudEF0UG9zLAoJCQlkcmF3WWVhciA9IGluc3QuZHJhd1llYXI7CgoJCWlmICggZHJhd01vbnRoIDwgMCApIHsKCQkJZHJhd01vbnRoICs9IDEyOwoJCQlkcmF3WWVhci0tOwoJCX0KCQlpZiAoIG1heERhdGUgKSB7CgkJCW1heERyYXcgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggbmV3IERhdGUoIG1heERhdGUuZ2V0RnVsbFllYXIoKSwKCQkJCW1heERhdGUuZ2V0TW9udGgoKSAtICggbnVtTW9udGhzWyAwIF0gKiBudW1Nb250aHNbIDEgXSApICsgMSwgbWF4RGF0ZS5nZXREYXRlKCkgKSApOwoJCQltYXhEcmF3ID0gKCBtaW5EYXRlICYmIG1heERyYXcgPCBtaW5EYXRlID8gbWluRGF0ZSA6IG1heERyYXcgKTsKCQkJd2hpbGUgKCB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggbmV3IERhdGUoIGRyYXdZZWFyLCBkcmF3TW9udGgsIDEgKSApID4gbWF4RHJhdyApIHsKCQkJCWRyYXdNb250aC0tOwoJCQkJaWYgKCBkcmF3TW9udGggPCAwICkgewoJCQkJCWRyYXdNb250aCA9IDExOwoJCQkJCWRyYXdZZWFyLS07CgkJCQl9CgkJCX0KCQl9CgkJaW5zdC5kcmF3TW9udGggPSBkcmF3TW9udGg7CgkJaW5zdC5kcmF3WWVhciA9IGRyYXdZZWFyOwoKCQlwcmV2VGV4dCA9IHRoaXMuX2dldCggaW5zdCwgInByZXZUZXh0IiApOwoJCXByZXZUZXh0ID0gKCAhbmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCA\/IHByZXZUZXh0IDogdGhpcy5mb3JtYXREYXRlKCBwcmV2VGV4dCwKCQkJdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoIG5ldyBEYXRlKCBkcmF3WWVhciwgZHJhd01vbnRoIC0gc3RlcE1vbnRocywgMSApICksCgkJCXRoaXMuX2dldEZvcm1hdENvbmZpZyggaW5zdCApICkgKTsKCgkJcHJldiA9ICggdGhpcy5fY2FuQWRqdXN0TW9udGgoIGluc3QsIC0xLCBkcmF3WWVhciwgZHJhd01vbnRoICkgPwoJCQkiPGEgY2xhc3M9J3VpLWRhdGVwaWNrZXItcHJldiB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J3ByZXYnIGRhdGEtZXZlbnQ9J2NsaWNrJyIgKwoJCQkiIHRpdGxlPSciICsgcHJldlRleHQgKyAiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS0iICsgKCBpc1JUTCA\/ICJlIiA6ICJ3IiApICsgIic+IiArIHByZXZUZXh0ICsgIjwvc3Bhbj48L2E+IiA6CgkJCSggaGlkZUlmTm9QcmV2TmV4dCA\/ICIiIDogIjxhIGNsYXNzPSd1aS1kYXRlcGlja2VyLXByZXYgdWktY29ybmVyLWFsbCB1aS1zdGF0ZS1kaXNhYmxlZCcgdGl0bGU9JyIgKyBwcmV2VGV4dCArICInPjxzcGFuIGNsYXNzPSd1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLSIgKyAoIGlzUlRMID8gImUiIDogInciICkgKyAiJz4iICsgcHJldlRleHQgKyAiPC9zcGFuPjwvYT4iICkgKTsKCgkJbmV4dFRleHQgPSB0aGlzLl9nZXQoIGluc3QsICJuZXh0VGV4dCIgKTsKCQluZXh0VGV4dCA9ICggIW5hdmlnYXRpb25Bc0RhdGVGb3JtYXQgPyBuZXh0VGV4dCA6IHRoaXMuZm9ybWF0RGF0ZSggbmV4dFRleHQsCgkJCXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCBuZXcgRGF0ZSggZHJhd1llYXIsIGRyYXdNb250aCArIHN0ZXBNb250aHMsIDEgKSApLAoJCQl0aGlzLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKSApICk7CgoJCW5leHQgPSAoIHRoaXMuX2NhbkFkanVzdE1vbnRoKCBpbnN0LCArMSwgZHJhd1llYXIsIGRyYXdNb250aCApID8KCQkJIjxhIGNsYXNzPSd1aS1kYXRlcGlja2VyLW5leHQgdWktY29ybmVyLWFsbCcgZGF0YS1oYW5kbGVyPSduZXh0JyBkYXRhLWV2ZW50PSdjbGljayciICsKCQkJIiB0aXRsZT0nIiArIG5leHRUZXh0ICsgIic+PHNwYW4gY2xhc3M9J3VpLWljb24gdWktaWNvbi1jaXJjbGUtdHJpYW5nbGUtIiArICggaXNSVEwgPyAidyIgOiAiZSIgKSArICInPiIgKyBuZXh0VGV4dCArICI8L3NwYW4+PC9hPiIgOgoJCQkoIGhpZGVJZk5vUHJldk5leHQgPyAiIiA6ICI8YSBjbGFzcz0ndWktZGF0ZXBpY2tlci1uZXh0IHVpLWNvcm5lci1hbGwgdWktc3RhdGUtZGlzYWJsZWQnIHRpdGxlPSciICsgbmV4dFRleHQgKyAiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS0iICsgKCBpc1JUTCA\/ICJ3IiA6ICJlIiApICsgIic+IiArIG5leHRUZXh0ICsgIjwvc3Bhbj48L2E+IiApICk7CgoJCWN1cnJlbnRUZXh0ID0gdGhpcy5fZ2V0KCBpbnN0LCAiY3VycmVudFRleHQiICk7CgkJZ290b0RhdGUgPSAoIHRoaXMuX2dldCggaW5zdCwgImdvdG9DdXJyZW50IiApICYmIGluc3QuY3VycmVudERheSA\/IGN1cnJlbnREYXRlIDogdG9kYXkgKTsKCQljdXJyZW50VGV4dCA9ICggIW5hdmlnYXRpb25Bc0RhdGVGb3JtYXQgPyBjdXJyZW50VGV4dCA6CgkJCXRoaXMuZm9ybWF0RGF0ZSggY3VycmVudFRleHQsIGdvdG9EYXRlLCB0aGlzLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKSApICk7CgoJCWNvbnRyb2xzID0gKCAhaW5zdC5pbmxpbmUgPyAiPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSd1aS1kYXRlcGlja2VyLWNsb3NlIHVpLXN0YXRlLWRlZmF1bHQgdWktcHJpb3JpdHktcHJpbWFyeSB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J2hpZGUnIGRhdGEtZXZlbnQ9J2NsaWNrJz4iICsKCQkJdGhpcy5fZ2V0KCBpbnN0LCAiY2xvc2VUZXh0IiApICsgIjwvYnV0dG9uPiIgOiAiIiApOwoKCQlidXR0b25QYW5lbCA9ICggc2hvd0J1dHRvblBhbmVsICkgPyAiPGRpdiBjbGFzcz0ndWktZGF0ZXBpY2tlci1idXR0b25wYW5lIHVpLXdpZGdldC1jb250ZW50Jz4iICsgKCBpc1JUTCA\/IGNvbnRyb2xzIDogIiIgKSArCgkJCSggdGhpcy5faXNJblJhbmdlKCBpbnN0LCBnb3RvRGF0ZSApID8gIjxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0ndWktZGF0ZXBpY2tlci1jdXJyZW50IHVpLXN0YXRlLWRlZmF1bHQgdWktcHJpb3JpdHktc2Vjb25kYXJ5IHVpLWNvcm5lci1hbGwnIGRhdGEtaGFuZGxlcj0ndG9kYXknIGRhdGEtZXZlbnQ9J2NsaWNrJyIgKwoJCQkiPiIgKyBjdXJyZW50VGV4dCArICI8L2J1dHRvbj4iIDogIiIgKSArICggaXNSVEwgPyAiIiA6IGNvbnRyb2xzICkgKyAiPC9kaXY+IiA6ICIiOwoKCQlmaXJzdERheSA9IHBhcnNlSW50KCB0aGlzLl9nZXQoIGluc3QsICJmaXJzdERheSIgKSwgMTAgKTsKCQlmaXJzdERheSA9ICggaXNOYU4oIGZpcnN0RGF5ICkgPyAwIDogZmlyc3REYXkgKTsKCgkJc2hvd1dlZWsgPSB0aGlzLl9nZXQoIGluc3QsICJzaG93V2VlayIgKTsKCQlkYXlOYW1lcyA9IHRoaXMuX2dldCggaW5zdCwgImRheU5hbWVzIiApOwoJCWRheU5hbWVzTWluID0gdGhpcy5fZ2V0KCBpbnN0LCAiZGF5TmFtZXNNaW4iICk7CgkJbW9udGhOYW1lcyA9IHRoaXMuX2dldCggaW5zdCwgIm1vbnRoTmFtZXMiICk7CgkJbW9udGhOYW1lc1Nob3J0ID0gdGhpcy5fZ2V0KCBpbnN0LCAibW9udGhOYW1lc1Nob3J0IiApOwoJCWJlZm9yZVNob3dEYXkgPSB0aGlzLl9nZXQoIGluc3QsICJiZWZvcmVTaG93RGF5IiApOwoJCXNob3dPdGhlck1vbnRocyA9IHRoaXMuX2dldCggaW5zdCwgInNob3dPdGhlck1vbnRocyIgKTsKCQlzZWxlY3RPdGhlck1vbnRocyA9IHRoaXMuX2dldCggaW5zdCwgInNlbGVjdE90aGVyTW9udGhzIiApOwoJCWRlZmF1bHREYXRlID0gdGhpcy5fZ2V0RGVmYXVsdERhdGUoIGluc3QgKTsKCQlodG1sID0gIiI7CgoJCWZvciAoIHJvdyA9IDA7IHJvdyA8IG51bU1vbnRoc1sgMCBdOyByb3crKyApIHsKCQkJZ3JvdXAgPSAiIjsKCQkJdGhpcy5tYXhSb3dzID0gNDsKCQkJZm9yICggY29sID0gMDsgY29sIDwgbnVtTW9udGhzWyAxIF07IGNvbCsrICkgewoJCQkJc2VsZWN0ZWREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoIG5ldyBEYXRlKCBkcmF3WWVhciwgZHJhd01vbnRoLCBpbnN0LnNlbGVjdGVkRGF5ICkgKTsKCQkJCWNvcm5lckNsYXNzID0gIiB1aS1jb3JuZXItYWxsIjsKCQkJCWNhbGVuZGVyID0gIiI7CgkJCQlpZiAoIGlzTXVsdGlNb250aCApIHsKCQkJCQljYWxlbmRlciArPSAiPGRpdiBjbGFzcz0ndWktZGF0ZXBpY2tlci1ncm91cCI7CgkJCQkJaWYgKCBudW1Nb250aHNbIDEgXSA+IDEgKSB7CgkJCQkJCXN3aXRjaCAoIGNvbCApIHsKCQkJCQkJCWNhc2UgMDogY2FsZW5kZXIgKz0gIiB1aS1kYXRlcGlja2VyLWdyb3VwLWZpcnN0IjsKCQkJCQkJCQljb3JuZXJDbGFzcyA9ICIgdWktY29ybmVyLSIgKyAoIGlzUlRMID8gInJpZ2h0IiA6ICJsZWZ0IiApOyBicmVhazsKCQkJCQkJCWNhc2UgbnVtTW9udGhzWyAxIF0gLSAxOiBjYWxlbmRlciArPSAiIHVpLWRhdGVwaWNrZXItZ3JvdXAtbGFzdCI7CgkJCQkJCQkJY29ybmVyQ2xhc3MgPSAiIHVpLWNvcm5lci0iICsgKCBpc1JUTCA\/ICJsZWZ0IiA6ICJyaWdodCIgKTsgYnJlYWs7CgkJCQkJCQlkZWZhdWx0OiBjYWxlbmRlciArPSAiIHVpLWRhdGVwaWNrZXItZ3JvdXAtbWlkZGxlIjsgY29ybmVyQ2xhc3MgPSAiIjsgYnJlYWs7CgkJCQkJCX0KCQkJCQl9CgkJCQkJY2FsZW5kZXIgKz0gIic+IjsKCQkJCX0KCQkJCWNhbGVuZGVyICs9ICI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLWhlYWRlciB1aS13aWRnZXQtaGVhZGVyIHVpLWhlbHBlci1jbGVhcmZpeCIgKyBjb3JuZXJDbGFzcyArICInPiIgKwoJCQkJCSggL2FsbHxsZWZ0Ly50ZXN0KCBjb3JuZXJDbGFzcyApICYmIHJvdyA9PT0gMCA\/ICggaXNSVEwgPyBuZXh0IDogcHJldiApIDogIiIgKSArCgkJCQkJKCAvYWxsfHJpZ2h0Ly50ZXN0KCBjb3JuZXJDbGFzcyApICYmIHJvdyA9PT0gMCA\/ICggaXNSVEwgPyBwcmV2IDogbmV4dCApIDogIiIgKSArCgkJCQkJdGhpcy5fZ2VuZXJhdGVNb250aFllYXJIZWFkZXIoIGluc3QsIGRyYXdNb250aCwgZHJhd1llYXIsIG1pbkRhdGUsIG1heERhdGUsCgkJCQkJcm93ID4gMCB8fCBjb2wgPiAwLCBtb250aE5hbWVzLCBtb250aE5hbWVzU2hvcnQgKSArIC8vIGRyYXcgbW9udGggaGVhZGVycwoJCQkJCSI8L2Rpdj48dGFibGUgY2xhc3M9J3VpLWRhdGVwaWNrZXItY2FsZW5kYXInPjx0aGVhZD4iICsKCQkJCQkiPHRyPiI7CgkJCQl0aGVhZCA9ICggc2hvd1dlZWsgPyAiPHRoIGNsYXNzPSd1aS1kYXRlcGlja2VyLXdlZWstY29sJz4iICsgdGhpcy5fZ2V0KCBpbnN0LCAid2Vla0hlYWRlciIgKSArICI8L3RoPiIgOiAiIiApOwoJCQkJZm9yICggZG93ID0gMDsgZG93IDwgNzsgZG93KysgKSB7IC8vIGRheXMgb2YgdGhlIHdlZWsKCQkJCQlkYXkgPSAoIGRvdyArIGZpcnN0RGF5ICkgJSA3OwoJCQkJCXRoZWFkICs9ICI8dGggc2NvcGU9J2NvbCciICsgKCAoIGRvdyArIGZpcnN0RGF5ICsgNiApICUgNyA+PSA1ID8gIiBjbGFzcz0ndWktZGF0ZXBpY2tlci13ZWVrLWVuZCciIDogIiIgKSArICI+IiArCgkJCQkJCSI8c3BhbiB0aXRsZT0nIiArIGRheU5hbWVzWyBkYXkgXSArICInPiIgKyBkYXlOYW1lc01pblsgZGF5IF0gKyAiPC9zcGFuPjwvdGg+IjsKCQkJCX0KCQkJCWNhbGVuZGVyICs9IHRoZWFkICsgIjwvdHI+PC90aGVhZD48dGJvZHk+IjsKCQkJCWRheXNJbk1vbnRoID0gdGhpcy5fZ2V0RGF5c0luTW9udGgoIGRyYXdZZWFyLCBkcmF3TW9udGggKTsKCQkJCWlmICggZHJhd1llYXIgPT09IGluc3Quc2VsZWN0ZWRZZWFyICYmIGRyYXdNb250aCA9PT0gaW5zdC5zZWxlY3RlZE1vbnRoICkgewoJCQkJCWluc3Quc2VsZWN0ZWREYXkgPSBNYXRoLm1pbiggaW5zdC5zZWxlY3RlZERheSwgZGF5c0luTW9udGggKTsKCQkJCX0KCQkJCWxlYWREYXlzID0gKCB0aGlzLl9nZXRGaXJzdERheU9mTW9udGgoIGRyYXdZZWFyLCBkcmF3TW9udGggKSAtIGZpcnN0RGF5ICsgNyApICUgNzsKCQkJCWN1clJvd3MgPSBNYXRoLmNlaWwoICggbGVhZERheXMgKyBkYXlzSW5Nb250aCApIC8gNyApOyAvLyBjYWxjdWxhdGUgdGhlIG51bWJlciBvZiByb3dzIHRvIGdlbmVyYXRlCgkJCQludW1Sb3dzID0gKCBpc011bHRpTW9udGggPyB0aGlzLm1heFJvd3MgPiBjdXJSb3dzID8gdGhpcy5tYXhSb3dzIDogY3VyUm93cyA6IGN1clJvd3MgKTsgLy9JZiBtdWx0aXBsZSBtb250aHMsIHVzZSB0aGUgaGlnaGVyIG51bWJlciBvZiByb3dzIChzZWUgIzcwNDMpCgkJCQl0aGlzLm1heFJvd3MgPSBudW1Sb3dzOwoJCQkJcHJpbnREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoIG5ldyBEYXRlKCBkcmF3WWVhciwgZHJhd01vbnRoLCAxIC0gbGVhZERheXMgKSApOwoJCQkJZm9yICggZFJvdyA9IDA7IGRSb3cgPCBudW1Sb3dzOyBkUm93KysgKSB7IC8vIGNyZWF0ZSBkYXRlIHBpY2tlciByb3dzCgkJCQkJY2FsZW5kZXIgKz0gIjx0cj4iOwoJCQkJCXRib2R5ID0gKCAhc2hvd1dlZWsgPyAiIiA6ICI8dGQgY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1jb2wnPiIgKwoJCQkJCQl0aGlzLl9nZXQoIGluc3QsICJjYWxjdWxhdGVXZWVrIiApKCBwcmludERhdGUgKSArICI8L3RkPiIgKTsKCQkJCQlmb3IgKCBkb3cgPSAwOyBkb3cgPCA3OyBkb3crKyApIHsgLy8gY3JlYXRlIGRhdGUgcGlja2VyIGRheXMKCQkJCQkJZGF5U2V0dGluZ3MgPSAoIGJlZm9yZVNob3dEYXkgPwoJCQkJCQkJYmVmb3JlU2hvd0RheS5hcHBseSggKCBpbnN0LmlucHV0ID8gaW5zdC5pbnB1dFsgMCBdIDogbnVsbCApLCBbIHByaW50RGF0ZSBdICkgOiBbIHRydWUsICIiIF0gKTsKCQkJCQkJb3RoZXJNb250aCA9ICggcHJpbnREYXRlLmdldE1vbnRoKCkgIT09IGRyYXdNb250aCApOwoJCQkJCQl1bnNlbGVjdGFibGUgPSAoIG90aGVyTW9udGggJiYgIXNlbGVjdE90aGVyTW9udGhzICkgfHwgIWRheVNldHRpbmdzWyAwIF0gfHwKCQkJCQkJCSggbWluRGF0ZSAmJiBwcmludERhdGUgPCBtaW5EYXRlICkgfHwgKCBtYXhEYXRlICYmIHByaW50RGF0ZSA+IG1heERhdGUgKTsKCQkJCQkJdGJvZHkgKz0gIjx0ZCBjbGFzcz0nIiArCgkJCQkJCQkoICggZG93ICsgZmlyc3REYXkgKyA2ICkgJSA3ID49IDUgPyAiIHVpLWRhdGVwaWNrZXItd2Vlay1lbmQiIDogIiIgKSArIC8vIGhpZ2hsaWdodCB3ZWVrZW5kcwoJCQkJCQkJKCBvdGhlck1vbnRoID8gIiB1aS1kYXRlcGlja2VyLW90aGVyLW1vbnRoIiA6ICIiICkgKyAvLyBoaWdobGlnaHQgZGF5cyBmcm9tIG90aGVyIG1vbnRocwoJCQkJCQkJKCAoIHByaW50RGF0ZS5nZXRUaW1lKCkgPT09IHNlbGVjdGVkRGF0ZS5nZXRUaW1lKCkgJiYgZHJhd01vbnRoID09PSBpbnN0LnNlbGVjdGVkTW9udGggJiYgaW5zdC5fa2V5RXZlbnQgKSB8fCAvLyB1c2VyIHByZXNzZWQga2V5CgkJCQkJCQkoIGRlZmF1bHREYXRlLmdldFRpbWUoKSA9PT0gcHJpbnREYXRlLmdldFRpbWUoKSAmJiBkZWZhdWx0RGF0ZS5nZXRUaW1lKCkgPT09IHNlbGVjdGVkRGF0ZS5nZXRUaW1lKCkgKSA\/CgoJCQkJCQkJLy8gb3IgZGVmYXVsdERhdGUgaXMgY3VycmVudCBwcmludGVkRGF0ZSBhbmQgZGVmYXVsdERhdGUgaXMgc2VsZWN0ZWREYXRlCgkJCQkJCQkiICIgKyB0aGlzLl9kYXlPdmVyQ2xhc3MgOiAiIiApICsgLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGRheQoJCQkJCQkJKCB1bnNlbGVjdGFibGUgPyAiICIgKyB0aGlzLl91bnNlbGVjdGFibGVDbGFzcyArICIgdWktc3RhdGUtZGlzYWJsZWQiIDogIiIgKSArICAvLyBoaWdobGlnaHQgdW5zZWxlY3RhYmxlIGRheXMKCQkJCQkJCSggb3RoZXJNb250aCAmJiAhc2hvd090aGVyTW9udGhzID8gIiIgOiAiICIgKyBkYXlTZXR0aW5nc1sgMSBdICsgLy8gaGlnaGxpZ2h0IGN1c3RvbSBkYXRlcwoJCQkJCQkJKCBwcmludERhdGUuZ2V0VGltZSgpID09PSBjdXJyZW50RGF0ZS5nZXRUaW1lKCkgPyAiICIgKyB0aGlzLl9jdXJyZW50Q2xhc3MgOiAiIiApICsgLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGRheQoJCQkJCQkJKCBwcmludERhdGUuZ2V0VGltZSgpID09PSB0b2RheS5nZXRUaW1lKCkgPyAiIHVpLWRhdGVwaWNrZXItdG9kYXkiIDogIiIgKSApICsgIiciICsgLy8gaGlnaGxpZ2h0IHRvZGF5IChpZiBkaWZmZXJlbnQpCgkJCQkJCQkoICggIW90aGVyTW9udGggfHwgc2hvd090aGVyTW9udGhzICkgJiYgZGF5U2V0dGluZ3NbIDIgXSA\/ICIgdGl0bGU9JyIgKyBkYXlTZXR0aW5nc1sgMiBdLnJlcGxhY2UoIC8nL2csICImIzM5OyIgKSArICInIiA6ICIiICkgKyAvLyBjZWxsIHRpdGxlCgkJCQkJCQkoIHVuc2VsZWN0YWJsZSA\/ICIiIDogIiBkYXRhLWhhbmRsZXI9J3NlbGVjdERheScgZGF0YS1ldmVudD0nY2xpY2snIGRhdGEtbW9udGg9JyIgKyBwcmludERhdGUuZ2V0TW9udGgoKSArICInIGRhdGEteWVhcj0nIiArIHByaW50RGF0ZS5nZXRGdWxsWWVhcigpICsgIiciICkgKyAiPiIgKyAvLyBhY3Rpb25zCgkJCQkJCQkoIG90aGVyTW9udGggJiYgIXNob3dPdGhlck1vbnRocyA\/ICImI3hhMDsiIDogLy8gZGlzcGxheSBmb3Igb3RoZXIgbW9udGhzCgkJCQkJCQkoIHVuc2VsZWN0YWJsZSA\/ICI8c3BhbiBjbGFzcz0ndWktc3RhdGUtZGVmYXVsdCc+IiArIHByaW50RGF0ZS5nZXREYXRlKCkgKyAiPC9zcGFuPiIgOiAiPGEgY2xhc3M9J3VpLXN0YXRlLWRlZmF1bHQiICsKCQkJCQkJCSggcHJpbnREYXRlLmdldFRpbWUoKSA9PT0gdG9kYXkuZ2V0VGltZSgpID8gIiB1aS1zdGF0ZS1oaWdobGlnaHQiIDogIiIgKSArCgkJCQkJCQkoIHByaW50RGF0ZS5nZXRUaW1lKCkgPT09IGN1cnJlbnREYXRlLmdldFRpbWUoKSA\/ICIgdWktc3RhdGUtYWN0aXZlIiA6ICIiICkgKyAvLyBoaWdobGlnaHQgc2VsZWN0ZWQgZGF5CgkJCQkJCQkoIG90aGVyTW9udGggPyAiIHVpLXByaW9yaXR5LXNlY29uZGFyeSIgOiAiIiApICsgLy8gZGlzdGluZ3Vpc2ggZGF0ZXMgZnJvbSBvdGhlciBtb250aHMKCQkJCQkJCSInIGhyZWY9JyMnPiIgKyBwcmludERhdGUuZ2V0RGF0ZSgpICsgIjwvYT4iICkgKSArICI8L3RkPiI7IC8vIGRpc3BsYXkgc2VsZWN0YWJsZSBkYXRlCgkJCQkJCXByaW50RGF0ZS5zZXREYXRlKCBwcmludERhdGUuZ2V0RGF0ZSgpICsgMSApOwoJCQkJCQlwcmludERhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggcHJpbnREYXRlICk7CgkJCQkJfQoJCQkJCWNhbGVuZGVyICs9IHRib2R5ICsgIjwvdHI+IjsKCQkJCX0KCQkJCWRyYXdNb250aCsrOwoJCQkJaWYgKCBkcmF3TW9udGggPiAxMSApIHsKCQkJCQlkcmF3TW9udGggPSAwOwoJCQkJCWRyYXdZZWFyKys7CgkJCQl9CgkJCQljYWxlbmRlciArPSAiPC90Ym9keT48L3RhYmxlPiIgKyAoIGlzTXVsdGlNb250aCA\/ICI8L2Rpdj4iICsKCQkJCQkJCSggKCBudW1Nb250aHNbIDAgXSA+IDAgJiYgY29sID09PSBudW1Nb250aHNbIDEgXSAtIDEgKSA\/ICI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLXJvdy1icmVhayc+PC9kaXY+IiA6ICIiICkgOiAiIiApOwoJCQkJZ3JvdXAgKz0gY2FsZW5kZXI7CgkJCX0KCQkJaHRtbCArPSBncm91cDsKCQl9CgkJaHRtbCArPSBidXR0b25QYW5lbDsKCQlpbnN0Ll9rZXlFdmVudCA9IGZhbHNlOwoJCXJldHVybiBodG1sOwoJfSwKCgkvKiBHZW5lcmF0ZSB0aGUgbW9udGggYW5kIHllYXIgaGVhZGVyLiAqLwoJX2dlbmVyYXRlTW9udGhZZWFySGVhZGVyOiBmdW5jdGlvbiggaW5zdCwgZHJhd01vbnRoLCBkcmF3WWVhciwgbWluRGF0ZSwgbWF4RGF0ZSwKCQkJc2Vjb25kYXJ5LCBtb250aE5hbWVzLCBtb250aE5hbWVzU2hvcnQgKSB7CgoJCXZhciBpbk1pblllYXIsIGluTWF4WWVhciwgbW9udGgsIHllYXJzLCB0aGlzWWVhciwgZGV0ZXJtaW5lWWVhciwgeWVhciwgZW5kWWVhciwKCQkJY2hhbmdlTW9udGggPSB0aGlzLl9nZXQoIGluc3QsICJjaGFuZ2VNb250aCIgKSwKCQkJY2hhbmdlWWVhciA9IHRoaXMuX2dldCggaW5zdCwgImNoYW5nZVllYXIiICksCgkJCVRhbXBpbFRhaHVuID0gdGhpcy5fZ2V0KCBpbnN0LCAiVGFtcGlsVGFodW4iICksCgkJCXNob3dNb250aEFmdGVyWWVhciA9IHRoaXMuX2dldCggaW5zdCwgInNob3dNb250aEFmdGVyWWVhciIgKSwKCQkJaHRtbCA9ICI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLXRpdGxlJz4iLAoJCQltb250aEh0bWwgPSAiIjsKCgkJLy8gTW9udGggc2VsZWN0aW9uCgkJaWYgKCBzZWNvbmRhcnkgfHwgIWNoYW5nZU1vbnRoICkgewoJCQltb250aEh0bWwgKz0gIjxzcGFuIGNsYXNzPSd1aS1kYXRlcGlja2VyLW1vbnRoJz4iICsgbW9udGhOYW1lc1sgZHJhd01vbnRoIF0gKyAiPC9zcGFuPiI7CgkJfSBlbHNlIHsKCQkJaW5NaW5ZZWFyID0gKCBtaW5EYXRlICYmIG1pbkRhdGUuZ2V0RnVsbFllYXIoKSA9PT0gZHJhd1llYXIgKTsKCQkJaW5NYXhZZWFyID0gKCBtYXhEYXRlICYmIG1heERhdGUuZ2V0RnVsbFllYXIoKSA9PT0gZHJhd1llYXIgKTsKCQkJbW9udGhIdG1sICs9ICI8c2VsZWN0IGNsYXNzPSd1aS1kYXRlcGlja2VyLW1vbnRoJyBkYXRhLWhhbmRsZXI9J3NlbGVjdE1vbnRoJyBkYXRhLWV2ZW50PSdjaGFuZ2UnPiI7CgkJCWZvciAoIG1vbnRoID0gMDsgbW9udGggPCAxMjsgbW9udGgrKyApIHsKCQkJCWlmICggKCAhaW5NaW5ZZWFyIHx8IG1vbnRoID49IG1pbkRhdGUuZ2V0TW9udGgoKSApICYmICggIWluTWF4WWVhciB8fCBtb250aCA8PSBtYXhEYXRlLmdldE1vbnRoKCkgKSApIHsKCQkJCQltb250aEh0bWwgKz0gIjxvcHRpb24gdmFsdWU9JyIgKyBtb250aCArICInIiArCgkJCQkJCSggbW9udGggPT09IGRyYXdNb250aCA\/ICIgc2VsZWN0ZWQ9J3NlbGVjdGVkJyIgOiAiIiApICsKCQkJCQkJIj4iICsgbW9udGhOYW1lc1Nob3J0WyBtb250aCBdICsgIjwvb3B0aW9uPiI7CgkJCQl9CgkJCX0KCQkJbW9udGhIdG1sICs9ICI8L3NlbGVjdD4iOwoJCX0KCgkJaWYgKCAhc2hvd01vbnRoQWZ0ZXJZZWFyICkgewoJCQlodG1sICs9IG1vbnRoSHRtbCArICggc2Vjb25kYXJ5IHx8ICEoIGNoYW5nZU1vbnRoICYmIGNoYW5nZVllYXIgKSA\/ICImI3hhMDsiIDogIiIgKTsKCQl9CgoJCS8vIFllYXIgc2VsZWN0aW9uCgkJaWYgKCAhaW5zdC55ZWFyc2h0bWwgKSB7CgkJCWluc3QueWVhcnNodG1sID0gIiI7CgkJCWlmICggc2Vjb25kYXJ5IHx8ICFjaGFuZ2VZZWFyKSB7CgkJCQlVbnR1a0RyYXdZZWFyID0gVGFtcGlsVGFodW4gPT0gZmFsc2U\/IiI6ZHJhd1llYXI7CQkJCQoJCQkJaHRtbCArPSAiPHNwYW4gY2xhc3M9J3VpLWRhdGVwaWNrZXIteWVhcic+IiArIFVudHVrRHJhd1llYXIgKyAiPC9zcGFuPiI7CgkJCX1lbHNlIHsKCgkJCQkvLyBkZXRlcm1pbmUgcmFuZ2Ugb2YgeWVhcnMgdG8gZGlzcGxheQoJCQkJeWVhcnMgPSB0aGlzLl9nZXQoIGluc3QsICJ5ZWFyUmFuZ2UiICkuc3BsaXQoICI6IiApOwoJCQkJdGhpc1llYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7CgkJCQlkZXRlcm1pbmVZZWFyID0gZnVuY3Rpb24oIHZhbHVlICkgewoJCQkJCXZhciB5ZWFyID0gKCB2YWx1ZS5tYXRjaCggL2NbK1wtXS4qLyApID8gZHJhd1llYXIgKyBwYXJzZUludCggdmFsdWUuc3Vic3RyaW5nKCAxICksIDEwICkgOgoJCQkJCQkoIHZhbHVlLm1hdGNoKCAvWytcLV0uKi8gKSA\/IHRoaXNZZWFyICsgcGFyc2VJbnQoIHZhbHVlLCAxMCApIDoKCQkJCQkJcGFyc2VJbnQoIHZhbHVlLCAxMCApICkgKTsKCQkJCQlyZXR1cm4gKCBpc05hTiggeWVhciApID8gdGhpc1llYXIgOiB5ZWFyICk7CgkJCQl9OwoJCQkJeWVhciA9IGRldGVybWluZVllYXIoIHllYXJzWyAwIF0gKTsKCQkJCWVuZFllYXIgPSBNYXRoLm1heCggeWVhciwgZGV0ZXJtaW5lWWVhciggeWVhcnNbIDEgXSB8fCAiIiApICk7CgkJCQl5ZWFyID0gKCBtaW5EYXRlID8gTWF0aC5tYXgoIHllYXIsIG1pbkRhdGUuZ2V0RnVsbFllYXIoKSApIDogeWVhciApOwoJCQkJZW5kWWVhciA9ICggbWF4RGF0ZSA\/IE1hdGgubWluKCBlbmRZZWFyLCBtYXhEYXRlLmdldEZ1bGxZZWFyKCkgKSA6IGVuZFllYXIgKTsKCQkJCWluc3QueWVhcnNodG1sICs9ICI8c2VsZWN0IGNsYXNzPSd1aS1kYXRlcGlja2VyLXllYXInIGRhdGEtaGFuZGxlcj0nc2VsZWN0WWVhcicgZGF0YS1ldmVudD0nY2hhbmdlJz4iOwoJCQkJZm9yICggOyB5ZWFyIDw9IGVuZFllYXI7IHllYXIrKyApIHsKCQkJCQlpbnN0LnllYXJzaHRtbCArPSAiPG9wdGlvbiB2YWx1ZT0nIiArIHllYXIgKyAiJyIgKwoJCQkJCQkoIHllYXIgPT09IGRyYXdZZWFyID8gIiBzZWxlY3RlZD0nc2VsZWN0ZWQnIiA6ICIiICkgKwoJCQkJCQkiPiIgKyB5ZWFyICsgIjwvb3B0aW9uPiI7CgkJCQl9CgkJCQlpbnN0LnllYXJzaHRtbCArPSAiPC9zZWxlY3Q+IjsKCgkJCQlodG1sICs9IGluc3QueWVhcnNodG1sOwoJCQkJaW5zdC55ZWFyc2h0bWwgPSBudWxsOwoJCQl9CgkJfQoKCQlodG1sICs9IHRoaXMuX2dldCggaW5zdCwgInllYXJTdWZmaXgiICk7CgkJaWYgKCBzaG93TW9udGhBZnRlclllYXIgKSB7CgkJCWh0bWwgKz0gKCBzZWNvbmRhcnkgfHwgISggY2hhbmdlTW9udGggJiYgY2hhbmdlWWVhciApID8gIiYjeGEwOyIgOiAiIiApICsgbW9udGhIdG1sOwoJCX0KCQlodG1sICs9ICI8L2Rpdj4iOyAvLyBDbG9zZSBkYXRlcGlja2VyX2hlYWRlcgoJCXJldHVybiBodG1sOwoJfSwKCgkvKiBBZGp1c3Qgb25lIG9mIHRoZSBkYXRlIHN1Yi1maWVsZHMuICovCglfYWRqdXN0SW5zdERhdGU6IGZ1bmN0aW9uKCBpbnN0LCBvZmZzZXQsIHBlcmlvZCApIHsKCQl2YXIgeWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyICsgKCBwZXJpb2QgPT09ICJZIiA\/IG9mZnNldCA6IDAgKSwKCQkJbW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggKyAoIHBlcmlvZCA9PT0gIk0iID8gb2Zmc2V0IDogMCApLAoJCQlkYXkgPSBNYXRoLm1pbiggaW5zdC5zZWxlY3RlZERheSwgdGhpcy5fZ2V0RGF5c0luTW9udGgoIHllYXIsIG1vbnRoICkgKSArICggcGVyaW9kID09PSAiRCIgPyBvZmZzZXQgOiAwICksCgkJCWRhdGUgPSB0aGlzLl9yZXN0cmljdE1pbk1heCggaW5zdCwgdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoIG5ldyBEYXRlKCB5ZWFyLCBtb250aCwgZGF5ICkgKSApOwoKCQlpbnN0LnNlbGVjdGVkRGF5ID0gZGF0ZS5nZXREYXRlKCk7CgkJaW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBkYXRlLmdldE1vbnRoKCk7CgkJaW5zdC5kcmF3WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpOwoJCWlmICggcGVyaW9kID09PSAiTSIgfHwgcGVyaW9kID09PSAiWSIgKSB7CgkJCXRoaXMuX25vdGlmeUNoYW5nZSggaW5zdCApOwoJCX0KCX0sCgoJLyogRW5zdXJlIGEgZGF0ZSBpcyB3aXRoaW4gYW55IG1pbi9tYXggYm91bmRzLiAqLwoJX3Jlc3RyaWN0TWluTWF4OiBmdW5jdGlvbiggaW5zdCwgZGF0ZSApIHsKCQl2YXIgbWluRGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoIGluc3QsICJtaW4iICksCgkJCW1heERhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKCBpbnN0LCAibWF4IiApLAoJCQluZXdEYXRlID0gKCBtaW5EYXRlICYmIGRhdGUgPCBtaW5EYXRlID8gbWluRGF0ZSA6IGRhdGUgKTsKCQlyZXR1cm4gKCBtYXhEYXRlICYmIG5ld0RhdGUgPiBtYXhEYXRlID8gbWF4RGF0ZSA6IG5ld0RhdGUgKTsKCX0sCgoJLyogTm90aWZ5IGNoYW5nZSBvZiBtb250aC95ZWFyLiAqLwoJX25vdGlmeUNoYW5nZTogZnVuY3Rpb24oIGluc3QgKSB7CgkJdmFyIG9uQ2hhbmdlID0gdGhpcy5fZ2V0KCBpbnN0LCAib25DaGFuZ2VNb250aFllYXIiICk7CgkJaWYgKCBvbkNoYW5nZSApIHsKCQkJb25DaGFuZ2UuYXBwbHkoICggaW5zdC5pbnB1dCA\/IGluc3QuaW5wdXRbIDAgXSA6IG51bGwgKSwKCQkJCVsgaW5zdC5zZWxlY3RlZFllYXIsIGluc3Quc2VsZWN0ZWRNb250aCArIDEsIGluc3QgXSApOwoJCX0KCX0sCgoJLyogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgbW9udGhzIHRvIHNob3cuICovCglfZ2V0TnVtYmVyT2ZNb250aHM6IGZ1bmN0aW9uKCBpbnN0ICkgewoJCXZhciBudW1Nb250aHMgPSB0aGlzLl9nZXQoIGluc3QsICJudW1iZXJPZk1vbnRocyIgKTsKCQlyZXR1cm4gKCBudW1Nb250aHMgPT0gbnVsbCA\/IFsgMSwgMSBdIDogKCB0eXBlb2YgbnVtTW9udGhzID09PSAibnVtYmVyIiA\/IFsgMSwgbnVtTW9udGhzIF0gOiBudW1Nb250aHMgKSApOwoJfSwKCgkvKiBEZXRlcm1pbmUgdGhlIGN1cnJlbnQgbWF4aW11bSBkYXRlIC0gZW5zdXJlIG5vIHRpbWUgY29tcG9uZW50cyBhcmUgc2V0LiAqLwoJX2dldE1pbk1heERhdGU6IGZ1bmN0aW9uKCBpbnN0LCBtaW5NYXggKSB7CgkJcmV0dXJuIHRoaXMuX2RldGVybWluZURhdGUoIGluc3QsIHRoaXMuX2dldCggaW5zdCwgbWluTWF4ICsgIkRhdGUiICksIG51bGwgKTsKCX0sCgoJLyogRmluZCB0aGUgbnVtYmVyIG9mIGRheXMgaW4gYSBnaXZlbiBtb250aC4gKi8KCV9nZXREYXlzSW5Nb250aDogZnVuY3Rpb24oIHllYXIsIG1vbnRoICkgewoJCXJldHVybiAzMiAtIHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCBuZXcgRGF0ZSggeWVhciwgbW9udGgsIDMyICkgKS5nZXREYXRlKCk7Cgl9LAoKCS8qIEZpbmQgdGhlIGRheSBvZiB0aGUgd2VlayBvZiB0aGUgZmlyc3Qgb2YgYSBtb250aC4gKi8KCV9nZXRGaXJzdERheU9mTW9udGg6IGZ1bmN0aW9uKCB5ZWFyLCBtb250aCApIHsKCQlyZXR1cm4gbmV3IERhdGUoIHllYXIsIG1vbnRoLCAxICkuZ2V0RGF5KCk7Cgl9LAoKCS8qIERldGVybWluZXMgaWYgd2Ugc2hvdWxkIGFsbG93IGEgIm5leHQvcHJldiIgbW9udGggZGlzcGxheSBjaGFuZ2UuICovCglfY2FuQWRqdXN0TW9udGg6IGZ1bmN0aW9uKCBpbnN0LCBvZmZzZXQsIGN1clllYXIsIGN1ck1vbnRoICkgewoJCXZhciBudW1Nb250aHMgPSB0aGlzLl9nZXROdW1iZXJPZk1vbnRocyggaW5zdCApLAoJCQlkYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoIG5ldyBEYXRlKCBjdXJZZWFyLAoJCQljdXJNb250aCArICggb2Zmc2V0IDwgMCA\/IG9mZnNldCA6IG51bU1vbnRoc1sgMCBdICogbnVtTW9udGhzWyAxIF0gKSwgMSApICk7CgoJCWlmICggb2Zmc2V0IDwgMCApIHsKCQkJZGF0ZS5zZXREYXRlKCB0aGlzLl9nZXREYXlzSW5Nb250aCggZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKSApOwoJCX0KCQlyZXR1cm4gdGhpcy5faXNJblJhbmdlKCBpbnN0LCBkYXRlICk7Cgl9LAoKCS8qIElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBhY2NlcHRlZCByYW5nZT8gKi8KCV9pc0luUmFuZ2U6IGZ1bmN0aW9uKCBpbnN0LCBkYXRlICkgewoJCXZhciB5ZWFyU3BsaXQsIGN1cnJlbnRZZWFyLAoJCQltaW5EYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZSggaW5zdCwgIm1pbiIgKSwKCQkJbWF4RGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoIGluc3QsICJtYXgiICksCgkJCW1pblllYXIgPSBudWxsLAoJCQltYXhZZWFyID0gbnVsbCwKCQkJeWVhcnMgPSB0aGlzLl9nZXQoIGluc3QsICJ5ZWFyUmFuZ2UiICk7CgkJCWlmICggeWVhcnMgKSB7CgkJCQl5ZWFyU3BsaXQgPSB5ZWFycy5zcGxpdCggIjoiICk7CgkJCQljdXJyZW50WWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTsKCQkJCW1pblllYXIgPSBwYXJzZUludCggeWVhclNwbGl0WyAwIF0sIDEwICk7CgkJCQltYXhZZWFyID0gcGFyc2VJbnQoIHllYXJTcGxpdFsgMSBdLCAxMCApOwoJCQkJaWYgKCB5ZWFyU3BsaXRbIDAgXS5tYXRjaCggL1srXC1dLiovICkgKSB7CgkJCQkJbWluWWVhciArPSBjdXJyZW50WWVhcjsKCQkJCX0KCQkJCWlmICggeWVhclNwbGl0WyAxIF0ubWF0Y2goIC9bK1wtXS4qLyApICkgewoJCQkJCW1heFllYXIgKz0gY3VycmVudFllYXI7CgkJCQl9CgkJCX0KCgkJcmV0dXJuICggKCAhbWluRGF0ZSB8fCBkYXRlLmdldFRpbWUoKSA+PSBtaW5EYXRlLmdldFRpbWUoKSApICYmCgkJCSggIW1heERhdGUgfHwgZGF0ZS5nZXRUaW1lKCkgPD0gbWF4RGF0ZS5nZXRUaW1lKCkgKSAmJgoJCQkoICFtaW5ZZWFyIHx8IGRhdGUuZ2V0RnVsbFllYXIoKSA+PSBtaW5ZZWFyICkgJiYKCQkJKCAhbWF4WWVhciB8fCBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gbWF4WWVhciApICk7Cgl9LAoKCS8qIFByb3ZpZGUgdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yIGZvcm1hdHRpbmcvcGFyc2luZy4gKi8KCV9nZXRGb3JtYXRDb25maWc6IGZ1bmN0aW9uKCBpbnN0ICkgewoJCXZhciBzaG9ydFllYXJDdXRvZmYgPSB0aGlzLl9nZXQoIGluc3QsICJzaG9ydFllYXJDdXRvZmYiICk7CgkJc2hvcnRZZWFyQ3V0b2ZmID0gKCB0eXBlb2Ygc2hvcnRZZWFyQ3V0b2ZmICE9PSAic3RyaW5nIiA\/IHNob3J0WWVhckN1dG9mZiA6CgkJCW5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAlIDEwMCArIHBhcnNlSW50KCBzaG9ydFllYXJDdXRvZmYsIDEwICkgKTsKCQlyZXR1cm4geyBzaG9ydFllYXJDdXRvZmY6IHNob3J0WWVhckN1dG9mZiwKCQkJZGF5TmFtZXNTaG9ydDogdGhpcy5fZ2V0KCBpbnN0LCAiZGF5TmFtZXNTaG9ydCIgKSwgZGF5TmFtZXM6IHRoaXMuX2dldCggaW5zdCwgImRheU5hbWVzIiApLAoJCQltb250aE5hbWVzU2hvcnQ6IHRoaXMuX2dldCggaW5zdCwgIm1vbnRoTmFtZXNTaG9ydCIgKSwgbW9udGhOYW1lczogdGhpcy5fZ2V0KCBpbnN0LCAibW9udGhOYW1lcyIgKSB9OwoJfSwKCgkvKiBGb3JtYXQgdGhlIGdpdmVuIGRhdGUgZm9yIGRpc3BsYXkuICovCglfZm9ybWF0RGF0ZTogZnVuY3Rpb24oIGluc3QsIGRheSwgbW9udGgsIHllYXIgKSB7CgkJaWYgKCAhZGF5ICkgewoJCQlpbnN0LmN1cnJlbnREYXkgPSBpbnN0LnNlbGVjdGVkRGF5OwoJCQlpbnN0LmN1cnJlbnRNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aDsKCQkJaW5zdC5jdXJyZW50WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyOwoJCX0KCQl2YXIgZGF0ZSA9ICggZGF5ID8gKCB0eXBlb2YgZGF5ID09PSAib2JqZWN0IiA\/IGRheSA6CgkJCXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCBuZXcgRGF0ZSggeWVhciwgbW9udGgsIGRheSApICkgKSA6CgkJCXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCBuZXcgRGF0ZSggaW5zdC5jdXJyZW50WWVhciwgaW5zdC5jdXJyZW50TW9udGgsIGluc3QuY3VycmVudERheSApICkgKTsKCQlyZXR1cm4gdGhpcy5mb3JtYXREYXRlKCB0aGlzLl9nZXQoIGluc3QsICJkYXRlRm9ybWF0IiApLCBkYXRlLCB0aGlzLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKSApOwoJfQp9ICk7CgovKgogKiBCaW5kIGhvdmVyIGV2ZW50cyBmb3IgZGF0ZXBpY2tlciBlbGVtZW50cy4KICogRG9uZSB2aWEgZGVsZWdhdGUgc28gdGhlIGJpbmRpbmcgb25seSBvY2N1cnMgb25jZSBpbiB0aGUgbGlmZXRpbWUgb2YgdGhlIHBhcmVudCBkaXYuCiAqIEdsb2JhbCBkYXRlcGlja2VyX2luc3RBY3RpdmUsIHNldCBieSBfdXBkYXRlRGF0ZXBpY2tlciBhbGxvd3MgdGhlIGhhbmRsZXJzIHRvIGZpbmQgdGhlaXIgd2F5IGJhY2sgdG8gdGhlIGFjdGl2ZSBwaWNrZXIuCiAqLwpmdW5jdGlvbiBkYXRlcGlja2VyX2JpbmRIb3ZlciggZHBEaXYgKSB7Cgl2YXIgc2VsZWN0b3IgPSAiYnV0dG9uLCAudWktZGF0ZXBpY2tlci1wcmV2LCAudWktZGF0ZXBpY2tlci1uZXh0LCAudWktZGF0ZXBpY2tlci1jYWxlbmRhciB0ZCBhIjsKCXJldHVybiBkcERpdi5vbiggIm1vdXNlb3V0Iiwgc2VsZWN0b3IsIGZ1bmN0aW9uKCkgewoJCQkkKCB0aGlzICkucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQkJaWYgKCB0aGlzLmNsYXNzTmFtZS5pbmRleE9mKCAidWktZGF0ZXBpY2tlci1wcmV2IiApICE9PSAtMSApIHsKCQkJCSQoIHRoaXMgKS5yZW1vdmVDbGFzcyggInVpLWRhdGVwaWNrZXItcHJldi1ob3ZlciIgKTsKCQkJfQoJCQlpZiAoIHRoaXMuY2xhc3NOYW1lLmluZGV4T2YoICJ1aS1kYXRlcGlja2VyLW5leHQiICkgIT09IC0xICkgewoJCQkJJCggdGhpcyApLnJlbW92ZUNsYXNzKCAidWktZGF0ZXBpY2tlci1uZXh0LWhvdmVyIiApOwoJCQl9CgkJfSApCgkJLm9uKCAibW91c2VvdmVyIiwgc2VsZWN0b3IsIGRhdGVwaWNrZXJfaGFuZGxlTW91c2VvdmVyICk7Cn0KCmZ1bmN0aW9uIGRhdGVwaWNrZXJfaGFuZGxlTW91c2VvdmVyKCkgewoJaWYgKCAhJC5kYXRlcGlja2VyLl9pc0Rpc2FibGVkRGF0ZXBpY2tlciggZGF0ZXBpY2tlcl9pbnN0QWN0aXZlLmlubGluZSA\\/CgkJCQl0aGlzLmVsZW1lbnRbIDAgXS5wYXJlbnROb2RlIDoKCQkJCW8uYXBwZW5kVG8gKSApOwoJCX0KCgkJLy8gSHR0cDovL2J1Z3MuanF1ZXJ5dWkuY29tL3RpY2tldC85NDQ2CgkJLy8gYSBoZWxwZXIgZnVuY3Rpb24gY2FuIHJldHVybiB0aGUgb3JpZ2luYWwgZWxlbWVudAoJCS8vIHdoaWNoIHdvdWxkbid0IGhhdmUgYmVlbiBzZXQgdG8gcmVsYXRpdmUgaW4gX2NyZWF0ZQoJCWlmICggaGVscGVySXNGdW5jdGlvbiAmJiBoZWxwZXJbIDAgXSA9PT0gdGhpcy5lbGVtZW50WyAwIF0gKSB7CgkJCXRoaXMuX3NldFBvc2l0aW9uUmVsYXRpdmUoKTsKCQl9CgoJCWlmICggaGVscGVyWyAwIF0gIT09IHRoaXMuZWxlbWVudFsgMCBdICYmCgkJCQkhKCAvKGZpeGVkfGFic29sdXRlKS8gKS50ZXN0KCBoZWxwZXIuY3NzKCAicG9zaXRpb24iICkgKSApIHsKCQkJaGVscGVyLmNzcyggInBvc2l0aW9uIiwgImFic29sdXRlIiApOwoJCX0KCgkJcmV0dXJuIGhlbHBlcjsKCgl9LAoKCV9zZXRQb3NpdGlvblJlbGF0aXZlOiBmdW5jdGlvbigpIHsKCQlpZiAoICEoIC9eKD86cnxhfGYpLyApLnRlc3QoIHRoaXMuZWxlbWVudC5jc3MoICJwb3NpdGlvbiIgKSApICkgewoJCQl0aGlzLmVsZW1lbnRbIDAgXS5zdHlsZS5wb3NpdGlvbiA9ICJyZWxhdGl2ZSI7CgkJfQoJfSwKCglfYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcjogZnVuY3Rpb24oIG9iaiApIHsKCQlpZiAoIHR5cGVvZiBvYmogPT09ICJzdHJpbmciICkgewoJCQlvYmogPSBvYmouc3BsaXQoICIgIiApOwoJCX0KCQlpZiAoICQuaXNBcnJheSggb2JqICkgKSB7CgkJCW9iaiA9IHsgbGVmdDogK29ialsgMCBdLCB0b3A6ICtvYmpbIDEgXSB8fCAwIH07CgkJfQoJCWlmICggImxlZnQiIGluIG9iaiApIHsKCQkJdGhpcy5vZmZzZXQuY2xpY2subGVmdCA9IG9iai5sZWZ0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7CgkJfQoJCWlmICggInJpZ2h0IiBpbiBvYmogKSB7CgkJCXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gb2JqLnJpZ2h0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7CgkJfQoJCWlmICggInRvcCIgaW4gb2JqICkgewoJCQl0aGlzLm9mZnNldC5jbGljay50b3AgPSBvYmoudG9wICsgdGhpcy5tYXJnaW5zLnRvcDsKCQl9CgkJaWYgKCAiYm90dG9tIiBpbiBvYmogKSB7CgkJCXRoaXMub2Zmc2V0LmNsaWNrLnRvcCA9IHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gb2JqLmJvdHRvbSArIHRoaXMubWFyZ2lucy50b3A7CgkJfQoJfSwKCglfaXNSb290Tm9kZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJcmV0dXJuICggLyhodG1sfGJvZHkpL2kgKS50ZXN0KCBlbGVtZW50LnRhZ05hbWUgKSB8fCBlbGVtZW50ID09PSB0aGlzLmRvY3VtZW50WyAwIF07Cgl9LAoKCV9nZXRQYXJlbnRPZmZzZXQ6IGZ1bmN0aW9uKCkgewoKCQkvL0dldCB0aGUgb2Zmc2V0UGFyZW50IGFuZCBjYWNoZSBpdHMgcG9zaXRpb24KCQl2YXIgcG8gPSB0aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKSwKCQkJZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50WyAwIF07CgoJCS8vIFRoaXMgaXMgYSBzcGVjaWFsIGNhc2Ugd2hlcmUgd2UgbmVlZCB0byBtb2RpZnkgYSBvZmZzZXQgY2FsY3VsYXRlZCBvbiBzdGFydCwgc2luY2UgdGhlCgkJLy8gZm9sbG93aW5nIGhhcHBlbmVkOgoJCS8vIDEuIFRoZSBwb3NpdGlvbiBvZiB0aGUgaGVscGVyIGlzIGFic29sdXRlLCBzbyBpdCdzIHBvc2l0aW9uIGlzIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlCgkJLy8gbmV4dCBwb3NpdGlvbmVkIHBhcmVudAoJCS8vIDIuIFRoZSBhY3R1YWwgb2Zmc2V0IHBhcmVudCBpcyBhIGNoaWxkIG9mIHRoZSBzY3JvbGwgcGFyZW50LCBhbmQgdGhlIHNjcm9sbCBwYXJlbnQgaXNuJ3QKCQkvLyB0aGUgZG9jdW1lbnQsIHdoaWNoIG1lYW5zIHRoYXQgdGhlIHNjcm9sbCBpcyBpbmNsdWRlZCBpbiB0aGUgaW5pdGlhbCBjYWxjdWxhdGlvbiBvZiB0aGUKCQkvLyBvZmZzZXQgb2YgdGhlIHBhcmVudCwgYW5kIG5ldmVyIHJlY2FsY3VsYXRlZCB1cG9uIGRyYWcKCQlpZiAoIHRoaXMuY3NzUG9zaXRpb24gPT09ICJhYnNvbHV0ZSIgJiYgdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSAhPT0gZG9jdW1lbnQgJiYKCQkJCSQuY29udGFpbnMoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0sIHRoaXMub2Zmc2V0UGFyZW50WyAwIF0gKSApIHsKCQkJcG8ubGVmdCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk7CgkJCXBvLnRvcCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKTsKCQl9CgoJCWlmICggdGhpcy5faXNSb290Tm9kZSggdGhpcy5vZmZzZXRQYXJlbnRbIDAgXSApICkgewoJCQlwbyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07CgkJfQoKCQlyZXR1cm4gewoJCQl0b3A6IHBvLnRvcCArICggcGFyc2VJbnQoIHRoaXMub2Zmc2V0UGFyZW50LmNzcyggImJvcmRlclRvcFdpZHRoIiApLCAxMCApIHx8IDAgKSwKCQkJbGVmdDogcG8ubGVmdCArICggcGFyc2VJbnQoIHRoaXMub2Zmc2V0UGFyZW50LmNzcyggImJvcmRlckxlZnRXaWR0aCIgKSwgMTAgKSB8fCAwICkKCQl9OwoKCX0sCgoJX2dldFJlbGF0aXZlT2Zmc2V0OiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMuY3NzUG9zaXRpb24gIT09ICJyZWxhdGl2ZSIgKSB7CgkJCXJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9OwoJCX0KCgkJdmFyIHAgPSB0aGlzLmVsZW1lbnQucG9zaXRpb24oKSwKCQkJc2Nyb2xsSXNSb290Tm9kZSA9IHRoaXMuX2lzUm9vdE5vZGUoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gKTsKCgkJcmV0dXJuIHsKCQkJdG9wOiBwLnRvcCAtICggcGFyc2VJbnQoIHRoaXMuaGVscGVyLmNzcyggInRvcCIgKSwgMTAgKSB8fCAwICkgKwoJCQkJKCAhc2Nyb2xsSXNSb290Tm9kZSA\/IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDogMCApLAoJCQlsZWZ0OiBwLmxlZnQgLSAoIHBhcnNlSW50KCB0aGlzLmhlbHBlci5jc3MoICJsZWZ0IiApLCAxMCApIHx8IDAgKSArCgkJCQkoICFzY3JvbGxJc1Jvb3ROb2RlID8gdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIDogMCApCgkJfTsKCgl9LAoKCV9jYWNoZU1hcmdpbnM6IGZ1bmN0aW9uKCkgewoJCXRoaXMubWFyZ2lucyA9IHsKCQkJbGVmdDogKCBwYXJzZUludCggdGhpcy5lbGVtZW50LmNzcyggIm1hcmdpbkxlZnQiICksIDEwICkgfHwgMCApLAoJCQl0b3A6ICggcGFyc2VJbnQoIHRoaXMuZWxlbWVudC5jc3MoICJtYXJnaW5Ub3AiICksIDEwICkgfHwgMCApLAoJCQlyaWdodDogKCBwYXJzZUludCggdGhpcy5lbGVtZW50LmNzcyggIm1hcmdpblJpZ2h0IiApLCAxMCApIHx8IDAgKSwKCQkJYm90dG9tOiAoIHBhcnNlSW50KCB0aGlzLmVsZW1lbnQuY3NzKCAibWFyZ2luQm90dG9tIiApLCAxMCApIHx8IDAgKQoJCX07Cgl9LAoKCV9jYWNoZUhlbHBlclByb3BvcnRpb25zOiBmdW5jdGlvbigpIHsKCQl0aGlzLmhlbHBlclByb3BvcnRpb25zID0gewoJCQl3aWR0aDogdGhpcy5oZWxwZXIub3V0ZXJXaWR0aCgpLAoJCQloZWlnaHQ6IHRoaXMuaGVscGVyLm91dGVySGVpZ2h0KCkKCQl9OwoJfSwKCglfc2V0Q29udGFpbm1lbnQ6IGZ1bmN0aW9uKCkgewoKCQl2YXIgaXNVc2VyU2Nyb2xsYWJsZSwgYywgY2UsCgkJCW8gPSB0aGlzLm9wdGlvbnMsCgkJCWRvY3VtZW50ID0gdGhpcy5kb2N1bWVudFsgMCBdOwoKCQl0aGlzLnJlbGF0aXZlQ29udGFpbmVyID0gbnVsbDsKCgkJaWYgKCAhby5jb250YWlubWVudCApIHsKCQkJdGhpcy5jb250YWlubWVudCA9IG51bGw7CgkJCXJldHVybjsKCQl9CgoJCWlmICggby5jb250YWlubWVudCA9PT0gIndpbmRvdyIgKSB7CgkJCXRoaXMuY29udGFpbm1lbnQgPSBbCgkJCQkkKCB3aW5kb3cgKS5zY3JvbGxMZWZ0KCkgLSB0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0IC0gdGhpcy5vZmZzZXQucGFyZW50LmxlZnQsCgkJCQkkKCB3aW5kb3cgKS5zY3JvbGxUb3AoKSAtIHRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAtIHRoaXMub2Zmc2V0LnBhcmVudC50b3AsCgkJCQkkKCB3aW5kb3cgKS5zY3JvbGxMZWZ0KCkgKyAkKCB3aW5kb3cgKS53aWR0aCgpIC0KCQkJCQl0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gdGhpcy5tYXJnaW5zLmxlZnQsCgkJCQkkKCB3aW5kb3cgKS5zY3JvbGxUb3AoKSArCgkJCQkJKCAkKCB3aW5kb3cgKS5oZWlnaHQoKSB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0ICkgLQoJCQkJCXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcAoJCQldOwoJCQlyZXR1cm47CgkJfQoKCQlpZiAoIG8uY29udGFpbm1lbnQgPT09ICJkb2N1bWVudCIgKSB7CgkJCXRoaXMuY29udGFpbm1lbnQgPSBbCgkJCQkwLAoJCQkJMCwKCQkJCSQoIGRvY3VtZW50ICkud2lkdGgoKSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSB0aGlzLm1hcmdpbnMubGVmdCwKCQkJCSggJCggZG9jdW1lbnQgKS5oZWlnaHQoKSB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0ICkgLQoJCQkJCXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcAoJCQldOwoJCQlyZXR1cm47CgkJfQoKCQlpZiAoIG8uY29udGFpbm1lbnQuY29uc3RydWN0b3IgPT09IEFycmF5ICkgewoJCQl0aGlzLmNvbnRhaW5tZW50ID0gby5jb250YWlubWVudDsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCBvLmNvbnRhaW5tZW50ID09PSAicGFyZW50IiApIHsKCQkJby5jb250YWlubWVudCA9IHRoaXMuaGVscGVyWyAwIF0ucGFyZW50Tm9kZTsKCQl9CgoJCWMgPSAkKCBvLmNvbnRhaW5tZW50ICk7CgkJY2UgPSBjWyAwIF07CgoJCWlmICggIWNlICkgewoJCQlyZXR1cm47CgkJfQoKCQlpc1VzZXJTY3JvbGxhYmxlID0gLyhzY3JvbGx8YXV0bykvLnRlc3QoIGMuY3NzKCAib3ZlcmZsb3ciICkgKTsKCgkJdGhpcy5jb250YWlubWVudCA9IFsKCQkJKCBwYXJzZUludCggYy5jc3MoICJib3JkZXJMZWZ0V2lkdGgiICksIDEwICkgfHwgMCApICsKCQkJCSggcGFyc2VJbnQoIGMuY3NzKCAicGFkZGluZ0xlZnQiICksIDEwICkgfHwgMCApLAoJCQkoIHBhcnNlSW50KCBjLmNzcyggImJvcmRlclRvcFdpZHRoIiApLCAxMCApIHx8IDAgKSArCgkJCQkoIHBhcnNlSW50KCBjLmNzcyggInBhZGRpbmdUb3AiICksIDEwICkgfHwgMCApLAoJCQkoIGlzVXNlclNjcm9sbGFibGUgPyBNYXRoLm1heCggY2Uuc2Nyb2xsV2lkdGgsIGNlLm9mZnNldFdpZHRoICkgOiBjZS5vZmZzZXRXaWR0aCApIC0KCQkJCSggcGFyc2VJbnQoIGMuY3NzKCAiYm9yZGVyUmlnaHRXaWR0aCIgKSwgMTAgKSB8fCAwICkgLQoJCQkJKCBwYXJzZUludCggYy5jc3MoICJwYWRkaW5nUmlnaHQiICksIDEwICkgfHwgMCApIC0KCQkJCXRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLQoJCQkJdGhpcy5tYXJnaW5zLmxlZnQgLQoJCQkJdGhpcy5tYXJnaW5zLnJpZ2h0LAoJCQkoIGlzVXNlclNjcm9sbGFibGUgPyBNYXRoLm1heCggY2Uuc2Nyb2xsSGVpZ2h0LCBjZS5vZmZzZXRIZWlnaHQgKSA6IGNlLm9mZnNldEhlaWdodCApIC0KCQkJCSggcGFyc2VJbnQoIGMuY3NzKCAiYm9yZGVyQm90dG9tV2lkdGgiICksIDEwICkgfHwgMCApIC0KCQkJCSggcGFyc2VJbnQoIGMuY3NzKCAicGFkZGluZ0JvdHRvbSIgKSwgMTAgKSB8fCAwICkgLQoJCQkJdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLQoJCQkJdGhpcy5tYXJnaW5zLnRvcCAtCgkJCQl0aGlzLm1hcmdpbnMuYm90dG9tCgkJXTsKCQl0aGlzLnJlbGF0aXZlQ29udGFpbmVyID0gYzsKCX0sCgoJX2NvbnZlcnRQb3NpdGlvblRvOiBmdW5jdGlvbiggZCwgcG9zICkgewoKCQlpZiAoICFwb3MgKSB7CgkJCXBvcyA9IHRoaXMucG9zaXRpb247CgkJfQoKCQl2YXIgbW9kID0gZCA9PT0gImFic29sdXRlIiA\/IDEgOiAtMSwKCQkJc2Nyb2xsSXNSb290Tm9kZSA9IHRoaXMuX2lzUm9vdE5vZGUoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gKTsKCgkJcmV0dXJuIHsKCQkJdG9wOiAoCgoJCQkJLy8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uCgkJCQlwb3MudG9wCSsKCgkJCQkvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnQKCQkJCXRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAqIG1vZCArCgoJCQkJLy8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcikKCQkJCXRoaXMub2Zmc2V0LnBhcmVudC50b3AgKiBtb2QgLQoJCQkJKCAoIHRoaXMuY3NzUG9zaXRpb24gPT09ICJmaXhlZCIgPwoJCQkJCS10aGlzLm9mZnNldC5zY3JvbGwudG9wIDoKCQkJCQkoIHNjcm9sbElzUm9vdE5vZGUgPyAwIDogdGhpcy5vZmZzZXQuc2Nyb2xsLnRvcCApICkgKiBtb2QgKQoJCQkpLAoJCQlsZWZ0OiAoCgoJCQkJLy8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uCgkJCQlwb3MubGVmdCArCgoJCQkJLy8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50CgkJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0ICogbW9kICsKCgkJCQkvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKQoJCQkJdGhpcy5vZmZzZXQucGFyZW50LmxlZnQgKiBtb2QJLQoJCQkJKCAoIHRoaXMuY3NzUG9zaXRpb24gPT09ICJmaXhlZCIgPwoJCQkJCS10aGlzLm9mZnNldC5zY3JvbGwubGVmdCA6CgkJCQkJKCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHRoaXMub2Zmc2V0LnNjcm9sbC5sZWZ0ICkgKSAqIG1vZCApCgkJCSkKCQl9OwoKCX0sCgoJX2dlbmVyYXRlUG9zaXRpb246IGZ1bmN0aW9uKCBldmVudCwgY29uc3RyYWluUG9zaXRpb24gKSB7CgoJCXZhciBjb250YWlubWVudCwgY28sIHRvcCwgbGVmdCwKCQkJbyA9IHRoaXMub3B0aW9ucywKCQkJc2Nyb2xsSXNSb290Tm9kZSA9IHRoaXMuX2lzUm9vdE5vZGUoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gKSwKCQkJcGFnZVggPSBldmVudC5wYWdlWCwKCQkJcGFnZVkgPSBldmVudC5wYWdlWTsKCgkJLy8gQ2FjaGUgdGhlIHNjcm9sbAoJCWlmICggIXNjcm9sbElzUm9vdE5vZGUgfHwgIXRoaXMub2Zmc2V0LnNjcm9sbCApIHsKCQkJdGhpcy5vZmZzZXQuc2Nyb2xsID0gewoJCQkJdG9wOiB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSwKCQkJCWxlZnQ6IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKQoJCQl9OwoJCX0KCgkJLyoKCQkgKiAtIFBvc2l0aW9uIGNvbnN0cmFpbmluZyAtCgkJICogQ29uc3RyYWluIHRoZSBwb3NpdGlvbiB0byBhIG1peCBvZiBncmlkLCBjb250YWlubWVudC4KCQkgKi8KCgkJLy8gSWYgd2UgYXJlIG5vdCBkcmFnZ2luZyB5ZXQsIHdlIHdvbid0IGNoZWNrIGZvciBvcHRpb25zCgkJaWYgKCBjb25zdHJhaW5Qb3NpdGlvbiApIHsKCQkJaWYgKCB0aGlzLmNvbnRhaW5tZW50ICkgewoJCQkJaWYgKCB0aGlzLnJlbGF0aXZlQ29udGFpbmVyICkgewoJCQkJCWNvID0gdGhpcy5yZWxhdGl2ZUNvbnRhaW5lci5vZmZzZXQoKTsKCQkJCQljb250YWlubWVudCA9IFsKCQkJCQkJdGhpcy5jb250YWlubWVudFsgMCBdICsgY28ubGVmdCwKCQkJCQkJdGhpcy5jb250YWlubWVudFsgMSBdICsgY28udG9wLAoJCQkJCQl0aGlzLmNvbnRhaW5tZW50WyAyIF0gKyBjby5sZWZ0LAoJCQkJCQl0aGlzLmNvbnRhaW5tZW50WyAzIF0gKyBjby50b3AKCQkJCQldOwoJCQkJfSBlbHNlIHsKCQkJCQljb250YWlubWVudCA9IHRoaXMuY29udGFpbm1lbnQ7CgkJCQl9CgoJCQkJaWYgKCBldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPCBjb250YWlubWVudFsgMCBdICkgewoJCQkJCXBhZ2VYID0gY29udGFpbm1lbnRbIDAgXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ7CgkJCQl9CgkJCQlpZiAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDwgY29udGFpbm1lbnRbIDEgXSApIHsKCQkJCQlwYWdlWSA9IGNvbnRhaW5tZW50WyAxIF0gKyB0aGlzLm9mZnNldC5jbGljay50b3A7CgkJCQl9CgkJCQlpZiAoIGV2ZW50LnBhZ2VYIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA+IGNvbnRhaW5tZW50WyAyIF0gKSB7CgkJCQkJcGFnZVggPSBjb250YWlubWVudFsgMiBdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdDsKCQkJCX0KCQkJCWlmICggZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiBjb250YWlubWVudFsgMyBdICkgewoJCQkJCXBhZ2VZID0gY29udGFpbm1lbnRbIDMgXSArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcDsKCQkJCX0KCQkJfQoKCQkJaWYgKCBvLmdyaWQgKSB7CgoJCQkJLy9DaGVjayBmb3IgZ3JpZCBlbGVtZW50cyBzZXQgdG8gMCB0byBwcmV2ZW50IGRpdmlkZSBieSAwIGVycm9yIGNhdXNpbmcgaW52YWxpZAoJCQkJLy8gYXJndW1lbnQgZXJyb3JzIGluIElFIChzZWUgdGlja2V0ICM2OTUwKQoJCQkJdG9wID0gby5ncmlkWyAxIF0gPyB0aGlzLm9yaWdpbmFsUGFnZVkgKyBNYXRoLnJvdW5kKCAoIHBhZ2VZIC0KCQkJCQl0aGlzLm9yaWdpbmFsUGFnZVkgKSAvIG8uZ3JpZFsgMSBdICkgKiBvLmdyaWRbIDEgXSA6IHRoaXMub3JpZ2luYWxQYWdlWTsKCQkJCXBhZ2VZID0gY29udGFpbm1lbnQgPyAoICggdG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID49IGNvbnRhaW5tZW50WyAxIF0gfHwKCQkJCQl0b3AgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiBjb250YWlubWVudFsgMyBdICkgPwoJCQkJCQl0b3AgOgoJCQkJCQkoICggdG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID49IGNvbnRhaW5tZW50WyAxIF0gKSA\/CgkJCQkJCQl0b3AgLSBvLmdyaWRbIDEgXSA6IHRvcCArIG8uZ3JpZFsgMSBdICkgKSA6IHRvcDsKCgkJCQlsZWZ0ID0gby5ncmlkWyAwIF0gPyB0aGlzLm9yaWdpbmFsUGFnZVggKwoJCQkJCU1hdGgucm91bmQoICggcGFnZVggLSB0aGlzLm9yaWdpbmFsUGFnZVggKSAvIG8uZ3JpZFsgMCBdICkgKiBvLmdyaWRbIDAgXSA6CgkJCQkJdGhpcy5vcmlnaW5hbFBhZ2VYOwoJCQkJcGFnZVggPSBjb250YWlubWVudCA\/ICggKCBsZWZ0IC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA+PSBjb250YWlubWVudFsgMCBdIHx8CgkJCQkJbGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPiBjb250YWlubWVudFsgMiBdICkgPwoJCQkJCQlsZWZ0IDoKCQkJCQkJKCAoIGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID49IGNvbnRhaW5tZW50WyAwIF0gKSA\\\/ICJSaWdodCIgOiAiTGVmdCIgXS5qb2luKCAiIiApOwoKCQkJCQl0YXJnZXQuY3NzKCBwYWRQb3MsIHBhZFdyYXBwZXIgKTsKCgkJCQkJdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKTsKCQkJCX0KCgkJCQl0aGlzLl9oYW5kbGVzID0gdGhpcy5faGFuZGxlcy5hZGQoIHRoaXMuaGFuZGxlc1sgaSBdICk7CgkJCX0KCQl9OwoKCQkvLyBUT0RPOiBtYWtlIHJlbmRlckF4aXMgYSBwcm90b3R5cGUgZnVuY3Rpb24KCQl0aGlzLl9yZW5kZXJBeGlzKCB0aGlzLmVsZW1lbnQgKTsKCgkJdGhpcy5faGFuZGxlcyA9IHRoaXMuX2hhbmRsZXMuYWRkKCB0aGlzLmVsZW1lbnQuZmluZCggIi51aS1yZXNpemFibGUtaGFuZGxlIiApICk7CgkJdGhpcy5faGFuZGxlcy5kaXNhYmxlU2VsZWN0aW9uKCk7CgoJCXRoaXMuX2hhbmRsZXMub24oICJtb3VzZW92ZXIiLCBmdW5jdGlvbigpIHsKCQkJaWYgKCAhdGhhdC5yZXNpemluZyApIHsKCQkJCWlmICggdGhpcy5jbGFzc05hbWUgKSB7CgkJCQkJYXhpcyA9IHRoaXMuY2xhc3NOYW1lLm1hdGNoKCAvdWktcmVzaXphYmxlLShzZXxzd3xuZXxud3xufGV8c3x3KS9pICk7CgkJCQl9CgkJCQl0aGF0LmF4aXMgPSBheGlzICYmIGF4aXNbIDEgXSA\/IGF4aXNbIDEgXSA6ICJzZSI7CgkJCX0KCQl9ICk7CgoJCWlmICggby5hdXRvSGlkZSApIHsKCQkJdGhpcy5faGFuZGxlcy5oaWRlKCk7CgkJCXRoaXMuX2FkZENsYXNzKCAidWktcmVzaXphYmxlLWF1dG9oaWRlIiApOwoJCX0KCX0sCgoJX3JlbW92ZUhhbmRsZXM6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX2hhbmRsZXMucmVtb3ZlKCk7Cgl9LAoKCV9tb3VzZUNhcHR1cmU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgaSwgaGFuZGxlLAoJCQljYXB0dXJlID0gZmFsc2U7CgoJCWZvciAoIGkgaW4gdGhpcy5oYW5kbGVzICkgewoJCQloYW5kbGUgPSAkKCB0aGlzLmhhbmRsZXNbIGkgXSApWyAwIF07CgkJCWlmICggaGFuZGxlID09PSBldmVudC50YXJnZXQgfHwgJC5jb250YWlucyggaGFuZGxlLCBldmVudC50YXJnZXQgKSApIHsKCQkJCWNhcHR1cmUgPSB0cnVlOwoJCQl9CgkJfQoKCQlyZXR1cm4gIXRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiBjYXB0dXJlOwoJfSwKCglfbW91c2VTdGFydDogZnVuY3Rpb24oIGV2ZW50ICkgewoKCQl2YXIgY3VybGVmdCwgY3VydG9wLCBjdXJzb3IsCgkJCW8gPSB0aGlzLm9wdGlvbnMsCgkJCWVsID0gdGhpcy5lbGVtZW50OwoKCQl0aGlzLnJlc2l6aW5nID0gdHJ1ZTsKCgkJdGhpcy5fcmVuZGVyUHJveHkoKTsKCgkJY3VybGVmdCA9IHRoaXMuX251bSggdGhpcy5oZWxwZXIuY3NzKCAibGVmdCIgKSApOwoJCWN1cnRvcCA9IHRoaXMuX251bSggdGhpcy5oZWxwZXIuY3NzKCAidG9wIiApICk7CgoJCWlmICggby5jb250YWlubWVudCApIHsKCQkJY3VybGVmdCArPSAkKCBvLmNvbnRhaW5tZW50ICkuc2Nyb2xsTGVmdCgpIHx8IDA7CgkJCWN1cnRvcCArPSAkKCBvLmNvbnRhaW5tZW50ICkuc2Nyb2xsVG9wKCkgfHwgMDsKCQl9CgoJCXRoaXMub2Zmc2V0ID0gdGhpcy5oZWxwZXIub2Zmc2V0KCk7CgkJdGhpcy5wb3NpdGlvbiA9IHsgbGVmdDogY3VybGVmdCwgdG9wOiBjdXJ0b3AgfTsKCgkJdGhpcy5zaXplID0gdGhpcy5faGVscGVyID8gewoJCQkJd2lkdGg6IHRoaXMuaGVscGVyLndpZHRoKCksCgkJCQloZWlnaHQ6IHRoaXMuaGVscGVyLmhlaWdodCgpCgkJCX0gOiB7CgkJCQl3aWR0aDogZWwud2lkdGgoKSwKCQkJCWhlaWdodDogZWwuaGVpZ2h0KCkKCQkJfTsKCgkJdGhpcy5vcmlnaW5hbFNpemUgPSB0aGlzLl9oZWxwZXIgPyB7CgkJCQl3aWR0aDogZWwub3V0ZXJXaWR0aCgpLAoJCQkJaGVpZ2h0OiBlbC5vdXRlckhlaWdodCgpCgkJCX0gOiB7CgkJCQl3aWR0aDogZWwud2lkdGgoKSwKCQkJCWhlaWdodDogZWwuaGVpZ2h0KCkKCQkJfTsKCgkJdGhpcy5zaXplRGlmZiA9IHsKCQkJd2lkdGg6IGVsLm91dGVyV2lkdGgoKSAtIGVsLndpZHRoKCksCgkJCWhlaWdodDogZWwub3V0ZXJIZWlnaHQoKSAtIGVsLmhlaWdodCgpCgkJfTsKCgkJdGhpcy5vcmlnaW5hbFBvc2l0aW9uID0geyBsZWZ0OiBjdXJsZWZ0LCB0b3A6IGN1cnRvcCB9OwoJCXRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uID0geyBsZWZ0OiBldmVudC5wYWdlWCwgdG9wOiBldmVudC5wYWdlWSB9OwoKCQl0aGlzLmFzcGVjdFJhdGlvID0gKCB0eXBlb2Ygby5hc3BlY3RSYXRpbyA9PT0gIm51bWJlciIgKSA\\/IDAgOiB0aGF0LnNpemVEaWZmLndpZHRoLAoJCQlzdHlsZSA9IHsKCQkJCXdpZHRoOiAoIHRoYXQuc2l6ZS53aWR0aCAtIHNvZmZzZXR3ICksCgkJCQloZWlnaHQ6ICggdGhhdC5zaXplLmhlaWdodCAtIHNvZmZzZXRoICkKCQkJfSwKCQkJbGVmdCA9ICggcGFyc2VGbG9hdCggdGhhdC5lbGVtZW50LmNzcyggImxlZnQiICkgKSArCgkJCQkoIHRoYXQucG9zaXRpb24ubGVmdCAtIHRoYXQub3JpZ2luYWxQb3NpdGlvbi5sZWZ0ICkgKSB8fCBudWxsLAoJCQl0b3AgPSAoIHBhcnNlRmxvYXQoIHRoYXQuZWxlbWVudC5jc3MoICJ0b3AiICkgKSArCgkJCQkoIHRoYXQucG9zaXRpb24udG9wIC0gdGhhdC5vcmlnaW5hbFBvc2l0aW9uLnRvcCApICkgfHwgbnVsbDsKCgkJdGhhdC5lbGVtZW50LmFuaW1hdGUoCgkJCSQuZXh0ZW5kKCBzdHlsZSwgdG9wICYmIGxlZnQgPyB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0IH0gOiB7fSApLCB7CgkJCQlkdXJhdGlvbjogby5hbmltYXRlRHVyYXRpb24sCgkJCQllYXNpbmc6IG8uYW5pbWF0ZUVhc2luZywKCQkJCXN0ZXA6IGZ1bmN0aW9uKCkgewoKCQkJCQl2YXIgZGF0YSA9IHsKCQkJCQkJd2lkdGg6IHBhcnNlRmxvYXQoIHRoYXQuZWxlbWVudC5jc3MoICJ3aWR0aCIgKSApLAoJCQkJCQloZWlnaHQ6IHBhcnNlRmxvYXQoIHRoYXQuZWxlbWVudC5jc3MoICJoZWlnaHQiICkgKSwKCQkJCQkJdG9wOiBwYXJzZUZsb2F0KCB0aGF0LmVsZW1lbnQuY3NzKCAidG9wIiApICksCgkJCQkJCWxlZnQ6IHBhcnNlRmxvYXQoIHRoYXQuZWxlbWVudC5jc3MoICJsZWZ0IiApICkKCQkJCQl9OwoKCQkJCQlpZiAoIHByICYmIHByLmxlbmd0aCApIHsKCQkJCQkJJCggcHJbIDAgXSApLmNzcyggeyB3aWR0aDogZGF0YS53aWR0aCwgaGVpZ2h0OiBkYXRhLmhlaWdodCB9ICk7CgkJCQkJfQoKCQkJCQkvLyBQcm9wYWdhdGluZyByZXNpemUsIGFuZCB1cGRhdGluZyB2YWx1ZXMgZm9yIGVhY2ggYW5pbWF0aW9uIHN0ZXAKCQkJCQl0aGF0Ll91cGRhdGVDYWNoZSggZGF0YSApOwoJCQkJCXRoYXQuX3Byb3BhZ2F0ZSggInJlc2l6ZSIsIGV2ZW50ICk7CgoJCQkJfQoJCQl9CgkJKTsKCX0KCn0gKTsKCiQudWkucGx1Z2luLmFkZCggInJlc2l6YWJsZSIsICJjb250YWlubWVudCIsIHsKCglzdGFydDogZnVuY3Rpb24oKSB7CgkJdmFyIGVsZW1lbnQsIHAsIGNvLCBjaCwgY3csIHdpZHRoLCBoZWlnaHQsCgkJCXRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCAiaW5zdGFuY2UiICksCgkJCW8gPSB0aGF0Lm9wdGlvbnMsCgkJCWVsID0gdGhhdC5lbGVtZW50LAoJCQlvYyA9IG8uY29udGFpbm1lbnQsCgkJCWNlID0gKCBvYyBpbnN0YW5jZW9mICQgKSA\/CgkJCQlvYy5nZXQoIDAgKSA6CgkJCQkoIC9wYXJlbnQvLnRlc3QoIG9jICkgKSA\/IGVsLnBhcmVudCgpLmdldCggMCApIDogb2M7CgoJCWlmICggIWNlICkgewoJCQlyZXR1cm47CgkJfQoKCQl0aGF0LmNvbnRhaW5lckVsZW1lbnQgPSAkKCBjZSApOwoKCQlpZiAoIC9kb2N1bWVudC8udGVzdCggb2MgKSB8fCBvYyA9PT0gZG9jdW1lbnQgKSB7CgkJCXRoYXQuY29udGFpbmVyT2Zmc2V0ID0gewoJCQkJbGVmdDogMCwKCQkJCXRvcDogMAoJCQl9OwoJCQl0aGF0LmNvbnRhaW5lclBvc2l0aW9uID0gewoJCQkJbGVmdDogMCwKCQkJCXRvcDogMAoJCQl9OwoKCQkJdGhhdC5wYXJlbnREYXRhID0gewoJCQkJZWxlbWVudDogJCggZG9jdW1lbnQgKSwKCQkJCWxlZnQ6IDAsCgkJCQl0b3A6IDAsCgkJCQl3aWR0aDogJCggZG9jdW1lbnQgKS53aWR0aCgpLAoJCQkJaGVpZ2h0OiAkKCBkb2N1bWVudCApLmhlaWdodCgpIHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQKCQkJfTsKCQl9IGVsc2UgewoJCQllbGVtZW50ID0gJCggY2UgKTsKCQkJcCA9IFtdOwoJCQkkKCBbICJUb3AiLCAiUmlnaHQiLCAiTGVmdCIsICJCb3R0b20iIF0gKS5lYWNoKCBmdW5jdGlvbiggaSwgbmFtZSApIHsKCQkJCXBbIGkgXSA9IHRoYXQuX251bSggZWxlbWVudC5jc3MoICJwYWRkaW5nIiArIG5hbWUgKSApOwoJCQl9ICk7CgoJCQl0aGF0LmNvbnRhaW5lck9mZnNldCA9IGVsZW1lbnQub2Zmc2V0KCk7CgkJCXRoYXQuY29udGFpbmVyUG9zaXRpb24gPSBlbGVtZW50LnBvc2l0aW9uKCk7CgkJCXRoYXQuY29udGFpbmVyU2l6ZSA9IHsKCQkJCWhlaWdodDogKCBlbGVtZW50LmlubmVySGVpZ2h0KCkgLSBwWyAzIF0gKSwKCQkJCXdpZHRoOiAoIGVsZW1lbnQuaW5uZXJXaWR0aCgpIC0gcFsgMSBdICkKCQkJfTsKCgkJCWNvID0gdGhhdC5jb250YWluZXJPZmZzZXQ7CgkJCWNoID0gdGhhdC5jb250YWluZXJTaXplLmhlaWdodDsKCQkJY3cgPSB0aGF0LmNvbnRhaW5lclNpemUud2lkdGg7CgkJCXdpZHRoID0gKCB0aGF0Ll9oYXNTY3JvbGwgKCBjZSwgImxlZnQiICkgPyBjZS5zY3JvbGxXaWR0aCA6IGN3ICk7CgkJCWhlaWdodCA9ICggdGhhdC5faGFzU2Nyb2xsICggY2UgKSA\/IGNlLnNjcm9sbEhlaWdodCA6IGNoICkgOwoKCQkJdGhhdC5wYXJlbnREYXRhID0gewoJCQkJZWxlbWVudDogY2UsCgkJCQlsZWZ0OiBjby5sZWZ0LAoJCQkJdG9wOiBjby50b3AsCgkJCQl3aWR0aDogd2lkdGgsCgkJCQloZWlnaHQ6IGhlaWdodAoJCQl9OwoJCX0KCX0sCgoJcmVzaXplOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIHdvc2V0LCBob3NldCwgaXNQYXJlbnQsIGlzT2Zmc2V0UmVsYXRpdmUsCgkJCXRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCAiaW5zdGFuY2UiICksCgkJCW8gPSB0aGF0Lm9wdGlvbnMsCgkJCWNvID0gdGhhdC5jb250YWluZXJPZmZzZXQsCgkJCWNwID0gdGhhdC5wb3NpdGlvbiwKCQkJcFJhdGlvID0gdGhhdC5fYXNwZWN0UmF0aW8gfHwgZXZlbnQuc2hpZnRLZXksCgkJCWNvcCA9IHsKCQkJCXRvcDogMCwKCQkJCWxlZnQ6IDAKCQkJfSwKCQkJY2UgPSB0aGF0LmNvbnRhaW5lckVsZW1lbnQsCgkJCWNvbnRpbnVlUmVzaXplID0gdHJ1ZTsKCgkJaWYgKCBjZVsgMCBdICE9PSBkb2N1bWVudCAmJiAoIC9zdGF0aWMvICkudGVzdCggY2UuY3NzKCAicG9zaXRpb24iICkgKSApIHsKCQkJY29wID0gY287CgkJfQoKCQlpZiAoIGNwLmxlZnQgPCAoIHRoYXQuX2hlbHBlciA\/IGNvLmxlZnQgOiAwICkgKSB7CgkJCXRoYXQuc2l6ZS53aWR0aCA9IHRoYXQuc2l6ZS53aWR0aCArCgkJCQkoIHRoYXQuX2hlbHBlciA\/CgkJCQkJKCB0aGF0LnBvc2l0aW9uLmxlZnQgLSBjby5sZWZ0ICkgOgoJCQkJCSggdGhhdC5wb3NpdGlvbi5sZWZ0IC0gY29wLmxlZnQgKSApOwoKCQkJaWYgKCBwUmF0aW8gKSB7CgkJCQl0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5zaXplLndpZHRoIC8gdGhhdC5hc3BlY3RSYXRpbzsKCQkJCWNvbnRpbnVlUmVzaXplID0gZmFsc2U7CgkJCX0KCQkJdGhhdC5wb3NpdGlvbi5sZWZ0ID0gby5oZWxwZXIgPyBjby5sZWZ0IDogMDsKCQl9CgoJCWlmICggY3AudG9wIDwgKCB0aGF0Ll9oZWxwZXIgPyBjby50b3AgOiAwICkgKSB7CgkJCXRoYXQuc2l6ZS5oZWlnaHQgPSB0aGF0LnNpemUuaGVpZ2h0ICsKCQkJCSggdGhhdC5faGVscGVyID8KCQkJCQkoIHRoYXQucG9zaXRpb24udG9wIC0gY28udG9wICkgOgoJCQkJCXRoYXQucG9zaXRpb24udG9wICk7CgoJCQlpZiAoIHBSYXRpbyApIHsKCQkJCXRoYXQuc2l6ZS53aWR0aCA9IHRoYXQuc2l6ZS5oZWlnaHQgKiB0aGF0LmFzcGVjdFJhdGlvOwoJCQkJY29udGludWVSZXNpemUgPSBmYWxzZTsKCQkJfQoJCQl0aGF0LnBvc2l0aW9uLnRvcCA9IHRoYXQuX2hlbHBlciA\/IGNvLnRvcCA6IDA7CgkJfQoKCQlpc1BhcmVudCA9IHRoYXQuY29udGFpbmVyRWxlbWVudC5nZXQoIDAgKSA9PT0gdGhhdC5lbGVtZW50LnBhcmVudCgpLmdldCggMCApOwoJCWlzT2Zmc2V0UmVsYXRpdmUgPSAvcmVsYXRpdmV8YWJzb2x1dGUvLnRlc3QoIHRoYXQuY29udGFpbmVyRWxlbWVudC5jc3MoICJwb3NpdGlvbiIgKSApOwoKCQlpZiAoIGlzUGFyZW50ICYmIGlzT2Zmc2V0UmVsYXRpdmUgKSB7CgkJCXRoYXQub2Zmc2V0LmxlZnQgPSB0aGF0LnBhcmVudERhdGEubGVmdCArIHRoYXQucG9zaXRpb24ubGVmdDsKCQkJdGhhdC5vZmZzZXQudG9wID0gdGhhdC5wYXJlbnREYXRhLnRvcCArIHRoYXQucG9zaXRpb24udG9wOwoJCX0gZWxzZSB7CgkJCXRoYXQub2Zmc2V0LmxlZnQgPSB0aGF0LmVsZW1lbnQub2Zmc2V0KCkubGVmdDsKCQkJdGhhdC5vZmZzZXQudG9wID0gdGhhdC5lbGVtZW50Lm9mZnNldCgpLnRvcDsKCQl9CgoJCXdvc2V0ID0gTWF0aC5hYnMoIHRoYXQuc2l6ZURpZmYud2lkdGggKwoJCQkoIHRoYXQuX2hlbHBlciA\/CgkJCQl0aGF0Lm9mZnNldC5sZWZ0IC0gY29wLmxlZnQgOgoJCQkJKCB0aGF0Lm9mZnNldC5sZWZ0IC0gY28ubGVmdCApICkgKTsKCgkJaG9zZXQgPSBNYXRoLmFicyggdGhhdC5zaXplRGlmZi5oZWlnaHQgKwoJCQkoIHRoYXQuX2hlbHBlciA\/CgkJCQl0aGF0Lm9mZnNldC50b3AgLSBjb3AudG9wIDoKCQkJCSggdGhhdC5vZmZzZXQudG9wIC0gY28udG9wICkgKSApOwoKCQlpZiAoIHdvc2V0ICsgdGhhdC5zaXplLndpZHRoID49IHRoYXQucGFyZW50RGF0YS53aWR0aCApIHsKCQkJdGhhdC5zaXplLndpZHRoID0gdGhhdC5wYXJlbnREYXRhLndpZHRoIC0gd29zZXQ7CgkJCWlmICggcFJhdGlvICkgewoJCQkJdGhhdC5zaXplLmhlaWdodCA9IHRoYXQuc2l6ZS53aWR0aCAvIHRoYXQuYXNwZWN0UmF0aW87CgkJCQljb250aW51ZVJlc2l6ZSA9IGZhbHNlOwoJCQl9CgkJfQoKCQlpZiAoIGhvc2V0ICsgdGhhdC5zaXplLmhlaWdodCA+PSB0aGF0LnBhcmVudERhdGEuaGVpZ2h0ICkgewoJCQl0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5wYXJlbnREYXRhLmhlaWdodCAtIGhvc2V0OwoJCQlpZiAoIHBSYXRpbyApIHsKCQkJCXRoYXQuc2l6ZS53aWR0aCA9IHRoYXQuc2l6ZS5oZWlnaHQgKiB0aGF0LmFzcGVjdFJhdGlvOwoJCQkJY29udGludWVSZXNpemUgPSBmYWxzZTsKCQkJfQoJCX0KCgkJaWYgKCAhY29udGludWVSZXNpemUgKSB7CgkJCXRoYXQucG9zaXRpb24ubGVmdCA9IHRoYXQucHJldlBvc2l0aW9uLmxlZnQ7CgkJCXRoYXQucG9zaXRpb24udG9wID0gdGhhdC5wcmV2UG9zaXRpb24udG9wOwoJCQl0aGF0LnNpemUud2lkdGggPSB0aGF0LnByZXZTaXplLndpZHRoOwoJCQl0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5wcmV2U2l6ZS5oZWlnaHQ7CgkJfQoJfSwKCglzdG9wOiBmdW5jdGlvbigpIHsKCQl2YXIgdGhhdCA9ICQoIHRoaXMgKS5yZXNpemFibGUoICJpbnN0YW5jZSIgKSwKCQkJbyA9IHRoYXQub3B0aW9ucywKCQkJY28gPSB0aGF0LmNvbnRhaW5lck9mZnNldCwKCQkJY29wID0gdGhhdC5jb250YWluZXJQb3NpdGlvbiwKCQkJY2UgPSB0aGF0LmNvbnRhaW5lckVsZW1lbnQsCgkJCWhlbHBlciA9ICQoIHRoYXQuaGVscGVyICksCgkJCWhvID0gaGVscGVyLm9mZnNldCgpLAoJCQl3ID0gaGVscGVyLm91dGVyV2lkdGgoKSAtIHRoYXQuc2l6ZURpZmYud2lkdGgsCgkJCWggPSBoZWxwZXIub3V0ZXJIZWlnaHQoKSAtIHRoYXQuc2l6ZURpZmYuaGVpZ2h0OwoKCQlpZiAoIHRoYXQuX2hlbHBlciAmJiAhby5hbmltYXRlICYmICggL3JlbGF0aXZlLyApLnRlc3QoIGNlLmNzcyggInBvc2l0aW9uIiApICkgKSB7CgkJCSQoIHRoaXMgKS5jc3MoIHsKCQkJCWxlZnQ6IGhvLmxlZnQgLSBjb3AubGVmdCAtIGNvLmxlZnQsCgkJCQl3aWR0aDogdywKCQkJCWhlaWdodDogaAoJCQl9ICk7CgkJfQoKCQlpZiAoIHRoYXQuX2hlbHBlciAmJiAhby5hbmltYXRlICYmICggL3N0YXRpYy8gKS50ZXN0KCBjZS5jc3MoICJwb3NpdGlvbiIgKSApICkgewoJCQkkKCB0aGlzICkuY3NzKCB7CgkJCQlsZWZ0OiBoby5sZWZ0IC0gY29wLmxlZnQgLSBjby5sZWZ0LAoJCQkJd2lkdGg6IHcsCgkJCQloZWlnaHQ6IGgKCQkJfSApOwoJCX0KCX0KfSApOwoKJC51aS5wbHVnaW4uYWRkKCAicmVzaXphYmxlIiwgImFsc29SZXNpemUiLCB7CgoJc3RhcnQ6IGZ1bmN0aW9uKCkgewoJCXZhciB0aGF0ID0gJCggdGhpcyApLnJlc2l6YWJsZSggImluc3RhbmNlIiApLAoJCQlvID0gdGhhdC5vcHRpb25zOwoKCQkkKCBvLmFsc29SZXNpemUgKS5lYWNoKCBmdW5jdGlvbigpIHsKCQkJdmFyIGVsID0gJCggdGhpcyApOwoJCQllbC5kYXRhKCAidWktcmVzaXphYmxlLWFsc29yZXNpemUiLCB7CgkJCQl3aWR0aDogcGFyc2VGbG9hdCggZWwud2lkdGgoKSApLCBoZWlnaHQ6IHBhcnNlRmxvYXQoIGVsLmhlaWdodCgpICksCgkJCQlsZWZ0OiBwYXJzZUZsb2F0KCBlbC5jc3MoICJsZWZ0IiApICksIHRvcDogcGFyc2VGbG9hdCggZWwuY3NzKCAidG9wIiApICkKCQkJfSApOwoJCX0gKTsKCX0sCgoJcmVzaXplOiBmdW5jdGlvbiggZXZlbnQsIHVpICkgewoJCXZhciB0aGF0ID0gJCggdGhpcyApLnJlc2l6YWJsZSggImluc3RhbmNlIiApLAoJCQlvID0gdGhhdC5vcHRpb25zLAoJCQlvcyA9IHRoYXQub3JpZ2luYWxTaXplLAoJCQlvcCA9IHRoYXQub3JpZ2luYWxQb3NpdGlvbiwKCQkJZGVsdGEgPSB7CgkJCQloZWlnaHQ6ICggdGhhdC5zaXplLmhlaWdodCAtIG9zLmhlaWdodCApIHx8IDAsCgkJCQl3aWR0aDogKCB0aGF0LnNpemUud2lkdGggLSBvcy53aWR0aCApIHx8IDAsCgkJCQl0b3A6ICggdGhhdC5wb3NpdGlvbi50b3AgLSBvcC50b3AgKSB8fCAwLAoJCQkJbGVmdDogKCB0aGF0LnBvc2l0aW9uLmxlZnQgLSBvcC5sZWZ0ICkgfHwgMAoJCQl9OwoKCQkJJCggby5hbHNvUmVzaXplICkuZWFjaCggZnVuY3Rpb24oKSB7CgkJCQl2YXIgZWwgPSAkKCB0aGlzICksIHN0YXJ0ID0gJCggdGhpcyApLmRhdGEoICJ1aS1yZXNpemFibGUtYWxzb3Jlc2l6ZSIgKSwgc3R5bGUgPSB7fSwKCQkJCQljc3MgPSBlbC5wYXJlbnRzKCB1aS5vcmlnaW5hbEVsZW1lbnRbIDAgXSApLmxlbmd0aCA\\/CgkJCQl7IGNsaWNrOiBwcm9wcywgdGV4dDogbmFtZSB9IDoKCQkJCXByb3BzOwoKCQkJLy8gRGVmYXVsdCB0byBhIG5vbi1zdWJtaXR0aW5nIGJ1dHRvbgoJCQlwcm9wcyA9ICQuZXh0ZW5kKCB7IHR5cGU6ICJidXR0b24iIH0sIHByb3BzICk7CgoJCQkvLyBDaGFuZ2UgdGhlIGNvbnRleHQgZm9yIHRoZSBjbGljayBjYWxsYmFjayB0byBiZSB0aGUgbWFpbiBlbGVtZW50CgkJCWNsaWNrID0gcHJvcHMuY2xpY2s7CgkJCWJ1dHRvbk9wdGlvbnMgPSB7CgkJCQlpY29uOiBwcm9wcy5pY29uLAoJCQkJaWNvblBvc2l0aW9uOiBwcm9wcy5pY29uUG9zaXRpb24sCgkJCQlzaG93TGFiZWw6IHByb3BzLnNob3dMYWJlbCwKCgkJCQkvLyBEZXByZWNhdGVkIG9wdGlvbnMKCQkJCWljb25zOiBwcm9wcy5pY29ucywKCQkJCXRleHQ6IHByb3BzLnRleHQKCQkJfTsKCgkJCWRlbGV0ZSBwcm9wcy5jbGljazsKCQkJZGVsZXRlIHByb3BzLmljb247CgkJCWRlbGV0ZSBwcm9wcy5pY29uUG9zaXRpb247CgkJCWRlbGV0ZSBwcm9wcy5zaG93TGFiZWw7CgoJCQkvLyBEZXByZWNhdGVkIG9wdGlvbnMKCQkJZGVsZXRlIHByb3BzLmljb25zOwoJCQlpZiAoIHR5cGVvZiBwcm9wcy50ZXh0ID09PSAiYm9vbGVhbiIgKSB7CgkJCQlkZWxldGUgcHJvcHMudGV4dDsKCQkJfQoKCQkJJCggIjxidXR0b24+PC9idXR0b24+IiwgcHJvcHMgKQoJCQkJLmJ1dHRvbiggYnV0dG9uT3B0aW9ucyApCgkJCQkuYXBwZW5kVG8oIHRoYXQudWlCdXR0b25TZXQgKQoJCQkJLm9uKCAiY2xpY2siLCBmdW5jdGlvbigpIHsKCQkJCQljbGljay5hcHBseSggdGhhdC5lbGVtZW50WyAwIF0sIGFyZ3VtZW50cyApOwoJCQkJfSApOwoJCX0gKTsKCQl0aGlzLl9hZGRDbGFzcyggdGhpcy51aURpYWxvZywgInVpLWRpYWxvZy1idXR0b25zIiApOwoJCXRoaXMudWlEaWFsb2dCdXR0b25QYW5lLmFwcGVuZFRvKCB0aGlzLnVpRGlhbG9nICk7Cgl9LAoKCV9tYWtlRHJhZ2dhYmxlOiBmdW5jdGlvbigpIHsKCQl2YXIgdGhhdCA9IHRoaXMsCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgoJCWZ1bmN0aW9uIGZpbHRlcmVkVWkoIHVpICkgewoJCQlyZXR1cm4gewoJCQkJcG9zaXRpb246IHVpLnBvc2l0aW9uLAoJCQkJb2Zmc2V0OiB1aS5vZmZzZXQKCQkJfTsKCQl9CgoJCXRoaXMudWlEaWFsb2cuZHJhZ2dhYmxlKCB7CgkJCWNhbmNlbDogIi51aS1kaWFsb2ctY29udGVudCwgLnVpLWRpYWxvZy10aXRsZWJhci1jbG9zZSIsCgkJCWhhbmRsZTogIi51aS1kaWFsb2ctdGl0bGViYXIiLAoJCQljb250YWlubWVudDogImRvY3VtZW50IiwKCQkJc3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7CgkJCQl0aGF0Ll9hZGRDbGFzcyggJCggdGhpcyApLCAidWktZGlhbG9nLWRyYWdnaW5nIiApOwoJCQkJdGhhdC5fYmxvY2tGcmFtZXMoKTsKCQkJCXRoYXQuX3RyaWdnZXIoICJkcmFnU3RhcnQiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApOwoJCQl9LAoJCQlkcmFnOiBmdW5jdGlvbiggZXZlbnQsIHVpICkgewoJCQkJdGhhdC5fdHJpZ2dlciggImRyYWciLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApOwoJCQl9LAoJCQlzdG9wOiBmdW5jdGlvbiggZXZlbnQsIHVpICkgewoJCQkJdmFyIGxlZnQgPSB1aS5vZmZzZXQubGVmdCAtIHRoYXQuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpLAoJCQkJCXRvcCA9IHVpLm9mZnNldC50b3AgLSB0aGF0LmRvY3VtZW50LnNjcm9sbFRvcCgpOwoKCQkJCW9wdGlvbnMucG9zaXRpb24gPSB7CgkJCQkJbXk6ICJsZWZ0IHRvcCIsCgkJCQkJYXQ6ICJsZWZ0IiArICggbGVmdCA+PSAwID8gIisiIDogIiIgKSArIGxlZnQgKyAiICIgKwoJCQkJCQkidG9wIiArICggdG9wID49IDAgPyAiKyIgOiAiIiApICsgdG9wLAoJCQkJCW9mOiB0aGF0LndpbmRvdwoJCQkJfTsKCQkJCXRoYXQuX3JlbW92ZUNsYXNzKCAkKCB0aGlzICksICJ1aS1kaWFsb2ctZHJhZ2dpbmciICk7CgkJCQl0aGF0Ll91bmJsb2NrRnJhbWVzKCk7CgkJCQl0aGF0Ll90cmlnZ2VyKCAiZHJhZ1N0b3AiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApOwoJCQl9CgkJfSApOwoJfSwKCglfbWFrZVJlc2l6YWJsZTogZnVuY3Rpb24oKSB7CgkJdmFyIHRoYXQgPSB0aGlzLAoJCQlvcHRpb25zID0gdGhpcy5vcHRpb25zLAoJCQloYW5kbGVzID0gb3B0aW9ucy5yZXNpemFibGUsCgoJCQkvLyAudWktcmVzaXphYmxlIGhhcyBwb3NpdGlvbjogcmVsYXRpdmUgZGVmaW5lZCBpbiB0aGUgc3R5bGVzaGVldAoJCQkvLyBidXQgZGlhbG9ncyBoYXZlIHRvIHVzZSBhYnNvbHV0ZSBvciBmaXhlZCBwb3NpdGlvbmluZwoJCQlwb3NpdGlvbiA9IHRoaXMudWlEaWFsb2cuY3NzKCAicG9zaXRpb24iICksCgkJCXJlc2l6ZUhhbmRsZXMgPSB0eXBlb2YgaGFuZGxlcyA9PT0gInN0cmluZyIgPwoJCQkJaGFuZGxlcyA6CgkJCQkibixlLHMsdyxzZSxzdyxuZSxudyI7CgoJCWZ1bmN0aW9uIGZpbHRlcmVkVWkoIHVpICkgewoJCQlyZXR1cm4gewoJCQkJb3JpZ2luYWxQb3NpdGlvbjogdWkub3JpZ2luYWxQb3NpdGlvbiwKCQkJCW9yaWdpbmFsU2l6ZTogdWkub3JpZ2luYWxTaXplLAoJCQkJcG9zaXRpb246IHVpLnBvc2l0aW9uLAoJCQkJc2l6ZTogdWkuc2l6ZQoJCQl9OwoJCX0KCgkJdGhpcy51aURpYWxvZy5yZXNpemFibGUoIHsKCQkJY2FuY2VsOiAiLnVpLWRpYWxvZy1jb250ZW50IiwKCQkJY29udGFpbm1lbnQ6ICJkb2N1bWVudCIsCgkJCWFsc29SZXNpemU6IHRoaXMuZWxlbWVudCwKCQkJbWF4V2lkdGg6IG9wdGlvbnMubWF4V2lkdGgsCgkJCW1heEhlaWdodDogb3B0aW9ucy5tYXhIZWlnaHQsCgkJCW1pbldpZHRoOiBvcHRpb25zLm1pbldpZHRoLAoJCQltaW5IZWlnaHQ6IHRoaXMuX21pbkhlaWdodCgpLAoJCQloYW5kbGVzOiByZXNpemVIYW5kbGVzLAoJCQlzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHsKCQkJCXRoYXQuX2FkZENsYXNzKCAkKCB0aGlzICksICJ1aS1kaWFsb2ctcmVzaXppbmciICk7CgkJCQl0aGF0Ll9ibG9ja0ZyYW1lcygpOwoJCQkJdGhhdC5fdHJpZ2dlciggInJlc2l6ZVN0YXJ0IiwgZXZlbnQsIGZpbHRlcmVkVWkoIHVpICkgKTsKCQkJfSwKCQkJcmVzaXplOiBmdW5jdGlvbiggZXZlbnQsIHVpICkgewoJCQkJdGhhdC5fdHJpZ2dlciggInJlc2l6ZSIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7CgkJCX0sCgkJCXN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7CgkJCQl2YXIgb2Zmc2V0ID0gdGhhdC51aURpYWxvZy5vZmZzZXQoKSwKCQkJCQlsZWZ0ID0gb2Zmc2V0LmxlZnQgLSB0aGF0LmRvY3VtZW50LnNjcm9sbExlZnQoKSwKCQkJCQl0b3AgPSBvZmZzZXQudG9wIC0gdGhhdC5kb2N1bWVudC5zY3JvbGxUb3AoKTsKCgkJCQlvcHRpb25zLmhlaWdodCA9IHRoYXQudWlEaWFsb2cuaGVpZ2h0KCk7CgkJCQlvcHRpb25zLndpZHRoID0gdGhhdC51aURpYWxvZy53aWR0aCgpOwoJCQkJb3B0aW9ucy5wb3NpdGlvbiA9IHsKCQkJCQlteTogImxlZnQgdG9wIiwKCQkJCQlhdDogImxlZnQiICsgKCBsZWZ0ID49IDAgPyAiKyIgOiAiIiApICsgbGVmdCArICIgIiArCgkJCQkJCSJ0b3AiICsgKCB0b3AgPj0gMCA\\\/CgkJCQkJImlzb3V0IiA6CgkJCQkJKCBpbnRlcnNlY3RzICYmICF0aGlzLmlzb3ZlciA\/ICJpc292ZXIiIDogbnVsbCApOwoJCQlpZiAoICFjICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQlpZiAoIHRoaXMub3B0aW9ucy5ncmVlZHkgKSB7CgoJCQkJLy8gZmluZCBkcm9wcGFibGUgcGFyZW50cyB3aXRoIHNhbWUgc2NvcGUKCQkJCXNjb3BlID0gdGhpcy5vcHRpb25zLnNjb3BlOwoJCQkJcGFyZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudHMoICI6ZGF0YSh1aS1kcm9wcGFibGUpIiApLmZpbHRlciggZnVuY3Rpb24oKSB7CgkJCQkJcmV0dXJuICQoIHRoaXMgKS5kcm9wcGFibGUoICJpbnN0YW5jZSIgKS5vcHRpb25zLnNjb3BlID09PSBzY29wZTsKCQkJCX0gKTsKCgkJCQlpZiAoIHBhcmVudC5sZW5ndGggKSB7CgkJCQkJcGFyZW50SW5zdGFuY2UgPSAkKCBwYXJlbnRbIDAgXSApLmRyb3BwYWJsZSggImluc3RhbmNlIiApOwoJCQkJCXBhcmVudEluc3RhbmNlLmdyZWVkeUNoaWxkID0gKCBjID09PSAiaXNvdmVyIiApOwoJCQkJfQoJCQl9CgoJCQkvLyBXZSBqdXN0IG1vdmVkIGludG8gYSBncmVlZHkgY2hpbGQKCQkJaWYgKCBwYXJlbnRJbnN0YW5jZSAmJiBjID09PSAiaXNvdmVyIiApIHsKCQkJCXBhcmVudEluc3RhbmNlLmlzb3ZlciA9IGZhbHNlOwoJCQkJcGFyZW50SW5zdGFuY2UuaXNvdXQgPSB0cnVlOwoJCQkJcGFyZW50SW5zdGFuY2UuX291dC5jYWxsKCBwYXJlbnRJbnN0YW5jZSwgZXZlbnQgKTsKCQkJfQoKCQkJdGhpc1sgYyBdID0gdHJ1ZTsKCQkJdGhpc1sgYyA9PT0gImlzb3V0IiA\/ICJpc292ZXIiIDogImlzb3V0IiBdID0gZmFsc2U7CgkJCXRoaXNbIGMgPT09ICJpc292ZXIiID8gIl9vdmVyIiA6ICJfb3V0IiBdLmNhbGwoIHRoaXMsIGV2ZW50ICk7CgoJCQkvLyBXZSBqdXN0IG1vdmVkIG91dCBvZiBhIGdyZWVkeSBjaGlsZAoJCQlpZiAoIHBhcmVudEluc3RhbmNlICYmIGMgPT09ICJpc291dCIgKSB7CgkJCQlwYXJlbnRJbnN0YW5jZS5pc291dCA9IGZhbHNlOwoJCQkJcGFyZW50SW5zdGFuY2UuaXNvdmVyID0gdHJ1ZTsKCQkJCXBhcmVudEluc3RhbmNlLl9vdmVyLmNhbGwoIHBhcmVudEluc3RhbmNlLCBldmVudCApOwoJCQl9CgkJfSApOwoKCX0sCglkcmFnU3RvcDogZnVuY3Rpb24oIGRyYWdnYWJsZSwgZXZlbnQgKSB7CgkJZHJhZ2dhYmxlLmVsZW1lbnQucGFyZW50c1VudGlsKCAiYm9keSIgKS5vZmYoICJzY3JvbGwuZHJvcHBhYmxlIiApOwoKCQkvLyBDYWxsIHByZXBhcmVPZmZzZXRzIG9uZSBmaW5hbCB0aW1lIHNpbmNlIElFIGRvZXMgbm90IGZpcmUgcmV0dXJuIHNjcm9sbCBldmVudHMgd2hlbgoJCS8vIG92ZXJmbG93IHdhcyBjYXVzZWQgYnkgZHJhZyAoc2VlICM1MDAzKQoJCWlmICggIWRyYWdnYWJsZS5vcHRpb25zLnJlZnJlc2hQb3NpdGlvbnMgKSB7CgkJCSQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKCBkcmFnZ2FibGUsIGV2ZW50ICk7CgkJfQoJfQp9OwoKLy8gREVQUkVDQVRFRAovLyBUT0RPOiBzd2l0Y2ggcmV0dXJuIGJhY2sgdG8gd2lkZ2V0IGRlY2xhcmF0aW9uIGF0IHRvcCBvZiBmaWxlIHdoZW4gdGhpcyBpcyByZW1vdmVkCmlmICggJC51aUJhY2tDb21wYXQgIT09IGZhbHNlICkgewoKCS8vIEJhY2tjb21wYXQgZm9yIGFjdGl2ZUNsYXNzIGFuZCBob3ZlckNsYXNzIG9wdGlvbnMKCSQud2lkZ2V0KCAidWkuZHJvcHBhYmxlIiwgJC51aS5kcm9wcGFibGUsIHsKCQlvcHRpb25zOiB7CgkJCWhvdmVyQ2xhc3M6IGZhbHNlLAoJCQlhY3RpdmVDbGFzczogZmFsc2UKCQl9LAoJCV9hZGRBY3RpdmVDbGFzczogZnVuY3Rpb24oKSB7CgkJCXRoaXMuX3N1cGVyKCk7CgkJCWlmICggdGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzICkgewoJCQkJdGhpcy5lbGVtZW50LmFkZENsYXNzKCB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MgKTsKCQkJfQoJCX0sCgkJX3JlbW92ZUFjdGl2ZUNsYXNzOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fc3VwZXIoKTsKCQkJaWYgKCB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MgKSB7CgkJCQl0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoIHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyApOwoJCQl9CgkJfSwKCQlfYWRkSG92ZXJDbGFzczogZnVuY3Rpb24oKSB7CgkJCXRoaXMuX3N1cGVyKCk7CgkJCWlmICggdGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MgKSB7CgkJCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoIHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzICk7CgkJCX0KCQl9LAoJCV9yZW1vdmVIb3ZlckNsYXNzOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5fc3VwZXIoKTsKCQkJaWYgKCB0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyApIHsKCQkJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggdGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MgKTsKCQkJfQoJCX0KCX0gKTsKfQoKdmFyIHdpZGdldHNEcm9wcGFibGUgPSAkLnVpLmRyb3BwYWJsZTsKCgovKiEKICogalF1ZXJ5IFVJIFByb2dyZXNzYmFyIDEuMTIuMQogKiBodHRwOi8vanF1ZXJ5dWkuY29tCiAqCiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzCiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKi8KCi8vPj5sYWJlbDogUHJvZ3Jlc3NiYXIKLy8+Pmdyb3VwOiBXaWRnZXRzCi8vIGpzY3M6ZGlzYWJsZSBtYXhpbXVtTGluZUxlbmd0aAovLz4+ZGVzY3JpcHRpb246IERpc3BsYXlzIGEgc3RhdHVzIGluZGljYXRvciBmb3IgbG9hZGluZyBzdGF0ZSwgc3RhbmRhcmQgcGVyY2VudGFnZSwgYW5kIG90aGVyIHByb2dyZXNzIGluZGljYXRvcnMuCi8vIGpzY3M6ZW5hYmxlIG1heGltdW1MaW5lTGVuZ3RoCi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9wcm9ncmVzc2Jhci8KLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL3Byb2dyZXNzYmFyLwovLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3MKLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL3Byb2dyZXNzYmFyLmNzcwovLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3MKCgoKdmFyIHdpZGdldHNQcm9ncmVzc2JhciA9ICQud2lkZ2V0KCAidWkucHJvZ3Jlc3NiYXIiLCB7Cgl2ZXJzaW9uOiAiMS4xMi4xIiwKCW9wdGlvbnM6IHsKCQljbGFzc2VzOiB7CgkJCSJ1aS1wcm9ncmVzc2JhciI6ICJ1aS1jb3JuZXItYWxsIiwKCQkJInVpLXByb2dyZXNzYmFyLXZhbHVlIjogInVpLWNvcm5lci1sZWZ0IiwKCQkJInVpLXByb2dyZXNzYmFyLWNvbXBsZXRlIjogInVpLWNvcm5lci1yaWdodCIKCQl9LAoJCW1heDogMTAwLAoJCXZhbHVlOiAwLAoKCQljaGFuZ2U6IG51bGwsCgkJY29tcGxldGU6IG51bGwKCX0sCgoJbWluOiAwLAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoKCQkvLyBDb25zdHJhaW4gaW5pdGlhbCB2YWx1ZQoJCXRoaXMub2xkVmFsdWUgPSB0aGlzLm9wdGlvbnMudmFsdWUgPSB0aGlzLl9jb25zdHJhaW5lZFZhbHVlKCk7CgoJCXRoaXMuZWxlbWVudC5hdHRyKCB7CgoJCQkvLyBPbmx5IHNldCBzdGF0aWMgdmFsdWVzOyBhcmlhLXZhbHVlbm93IGFuZCBhcmlhLXZhbHVlbWF4IGFyZQoJCQkvLyBzZXQgaW5zaWRlIF9yZWZyZXNoVmFsdWUoKQoJCQlyb2xlOiAicHJvZ3Jlc3NiYXIiLAoJCQkiYXJpYS12YWx1ZW1pbiI6IHRoaXMubWluCgkJfSApOwoJCXRoaXMuX2FkZENsYXNzKCAidWktcHJvZ3Jlc3NiYXIiLCAidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IiApOwoKCQl0aGlzLnZhbHVlRGl2ID0gJCggIjxkaXY+IiApLmFwcGVuZFRvKCB0aGlzLmVsZW1lbnQgKTsKCQl0aGlzLl9hZGRDbGFzcyggdGhpcy52YWx1ZURpdiwgInVpLXByb2dyZXNzYmFyLXZhbHVlIiwgInVpLXdpZGdldC1oZWFkZXIiICk7CgkJdGhpcy5fcmVmcmVzaFZhbHVlKCk7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQucmVtb3ZlQXR0ciggInJvbGUgYXJpYS12YWx1ZW1pbiBhcmlhLXZhbHVlbWF4IGFyaWEtdmFsdWVub3ciICk7CgoJCXRoaXMudmFsdWVEaXYucmVtb3ZlKCk7Cgl9LAoKCXZhbHVlOiBmdW5jdGlvbiggbmV3VmFsdWUgKSB7CgkJaWYgKCBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQlyZXR1cm4gdGhpcy5vcHRpb25zLnZhbHVlOwoJCX0KCgkJdGhpcy5vcHRpb25zLnZhbHVlID0gdGhpcy5fY29uc3RyYWluZWRWYWx1ZSggbmV3VmFsdWUgKTsKCQl0aGlzLl9yZWZyZXNoVmFsdWUoKTsKCX0sCgoJX2NvbnN0cmFpbmVkVmFsdWU6IGZ1bmN0aW9uKCBuZXdWYWx1ZSApIHsKCQlpZiAoIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgKSB7CgkJCW5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLnZhbHVlOwoJCX0KCgkJdGhpcy5pbmRldGVybWluYXRlID0gbmV3VmFsdWUgPT09IGZhbHNlOwoKCQkvLyBTYW5pdGl6ZSB2YWx1ZQoJCWlmICggdHlwZW9mIG5ld1ZhbHVlICE9PSAibnVtYmVyIiApIHsKCQkJbmV3VmFsdWUgPSAwOwoJCX0KCgkJcmV0dXJuIHRoaXMuaW5kZXRlcm1pbmF0ZSA\/IGZhbHNlIDoKCQkJTWF0aC5taW4oIHRoaXMub3B0aW9ucy5tYXgsIE1hdGgubWF4KCB0aGlzLm1pbiwgbmV3VmFsdWUgKSApOwoJfSwKCglfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgoJCS8vIEVuc3VyZSAidmFsdWUiIG9wdGlvbiBpcyBzZXQgYWZ0ZXIgb3RoZXIgdmFsdWVzIChsaWtlIG1heCkKCQl2YXIgdmFsdWUgPSBvcHRpb25zLnZhbHVlOwoJCWRlbGV0ZSBvcHRpb25zLnZhbHVlOwoKCQl0aGlzLl9zdXBlciggb3B0aW9ucyApOwoKCQl0aGlzLm9wdGlvbnMudmFsdWUgPSB0aGlzLl9jb25zdHJhaW5lZFZhbHVlKCB2YWx1ZSApOwoJCXRoaXMuX3JlZnJlc2hWYWx1ZSgpOwoJfSwKCglfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKCQlpZiAoIGtleSA9PT0gIm1heCIgKSB7CgoJCQkvLyBEb24ndCBhbGxvdyBhIG1heCBsZXNzIHRoYW4gbWluCgkJCXZhbHVlID0gTWF0aC5tYXgoIHRoaXMubWluLCB2YWx1ZSApOwoJCX0KCQl0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApOwoJfSwKCglfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQl0aGlzLl9zdXBlciggdmFsdWUgKTsKCgkJdGhpcy5lbGVtZW50LmF0dHIoICJhcmlhLWRpc2FibGVkIiwgdmFsdWUgKTsKCQl0aGlzLl90b2dnbGVDbGFzcyggbnVsbCwgInVpLXN0YXRlLWRpc2FibGVkIiwgISF2YWx1ZSApOwoJfSwKCglfcGVyY2VudGFnZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuaW5kZXRlcm1pbmF0ZSA\/CgkJCTEwMCA6CgkJCTEwMCAqICggdGhpcy5vcHRpb25zLnZhbHVlIC0gdGhpcy5taW4gKSAvICggdGhpcy5vcHRpb25zLm1heCAtIHRoaXMubWluICk7Cgl9LAoKCV9yZWZyZXNoVmFsdWU6IGZ1bmN0aW9uKCkgewoJCXZhciB2YWx1ZSA9IHRoaXMub3B0aW9ucy52YWx1ZSwKCQkJcGVyY2VudGFnZSA9IHRoaXMuX3BlcmNlbnRhZ2UoKTsKCgkJdGhpcy52YWx1ZURpdgoJCQkudG9nZ2xlKCB0aGlzLmluZGV0ZXJtaW5hdGUgfHwgdmFsdWUgPiB0aGlzLm1pbiApCgkJCS53aWR0aCggcGVyY2VudGFnZS50b0ZpeGVkKCAwICkgKyAiJSIgKTsKCgkJdGhpcwoJCQkuX3RvZ2dsZUNsYXNzKCB0aGlzLnZhbHVlRGl2LCAidWktcHJvZ3Jlc3NiYXItY29tcGxldGUiLCBudWxsLAoJCQkJdmFsdWUgPT09IHRoaXMub3B0aW9ucy5tYXggKQoJCQkuX3RvZ2dsZUNsYXNzKCAidWktcHJvZ3Jlc3NiYXItaW5kZXRlcm1pbmF0ZSIsIG51bGwsIHRoaXMuaW5kZXRlcm1pbmF0ZSApOwoKCQlpZiAoIHRoaXMuaW5kZXRlcm1pbmF0ZSApIHsKCQkJdGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoICJhcmlhLXZhbHVlbm93IiApOwoJCQlpZiAoICF0aGlzLm92ZXJsYXlEaXYgKSB7CgkJCQl0aGlzLm92ZXJsYXlEaXYgPSAkKCAiPGRpdj4iICkuYXBwZW5kVG8oIHRoaXMudmFsdWVEaXYgKTsKCQkJCXRoaXMuX2FkZENsYXNzKCB0aGlzLm92ZXJsYXlEaXYsICJ1aS1wcm9ncmVzc2Jhci1vdmVybGF5IiApOwoJCQl9CgkJfSBlbHNlIHsKCQkJdGhpcy5lbGVtZW50LmF0dHIoIHsKCQkJCSJhcmlhLXZhbHVlbWF4IjogdGhpcy5vcHRpb25zLm1heCwKCQkJCSJhcmlhLXZhbHVlbm93IjogdmFsdWUKCQkJfSApOwoJCQlpZiAoIHRoaXMub3ZlcmxheURpdiApIHsKCQkJCXRoaXMub3ZlcmxheURpdi5yZW1vdmUoKTsKCQkJCXRoaXMub3ZlcmxheURpdiA9IG51bGw7CgkJCX0KCQl9CgoJCWlmICggdGhpcy5vbGRWYWx1ZSAhPT0gdmFsdWUgKSB7CgkJCXRoaXMub2xkVmFsdWUgPSB2YWx1ZTsKCQkJdGhpcy5fdHJpZ2dlciggImNoYW5nZSIgKTsKCQl9CgkJaWYgKCB2YWx1ZSA9PT0gdGhpcy5vcHRpb25zLm1heCApIHsKCQkJdGhpcy5fdHJpZ2dlciggImNvbXBsZXRlIiApOwoJCX0KCX0KfSApOwoKCi8qIQogKiBqUXVlcnkgVUkgU2VsZWN0YWJsZSAxLjEyLjEKICogaHR0cDovL2pxdWVyeXVpLmNvbQogKgogKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycwogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICovCgovLz4+bGFiZWw6IFNlbGVjdGFibGUKLy8+Pmdyb3VwOiBJbnRlcmFjdGlvbnMKLy8+PmRlc2NyaXB0aW9uOiBBbGxvd3MgZ3JvdXBzIG9mIGVsZW1lbnRzIHRvIGJlIHNlbGVjdGVkIHdpdGggdGhlIG1vdXNlLgovLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vc2VsZWN0YWJsZS8KLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL3NlbGVjdGFibGUvCi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9zZWxlY3RhYmxlLmNzcwoKCgp2YXIgd2lkZ2V0c1NlbGVjdGFibGUgPSAkLndpZGdldCggInVpLnNlbGVjdGFibGUiLCAkLnVpLm1vdXNlLCB7Cgl2ZXJzaW9uOiAiMS4xMi4xIiwKCW9wdGlvbnM6IHsKCQlhcHBlbmRUbzogImJvZHkiLAoJCWF1dG9SZWZyZXNoOiB0cnVlLAoJCWRpc3RhbmNlOiAwLAoJCWZpbHRlcjogIioiLAoJCXRvbGVyYW5jZTogInRvdWNoIiwKCgkJLy8gQ2FsbGJhY2tzCgkJc2VsZWN0ZWQ6IG51bGwsCgkJc2VsZWN0aW5nOiBudWxsLAoJCXN0YXJ0OiBudWxsLAoJCXN0b3A6IG51bGwsCgkJdW5zZWxlY3RlZDogbnVsbCwKCQl1bnNlbGVjdGluZzogbnVsbAoJfSwKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciB0aGF0ID0gdGhpczsKCgkJdGhpcy5fYWRkQ2xhc3MoICJ1aS1zZWxlY3RhYmxlIiApOwoKCQl0aGlzLmRyYWdnZWQgPSBmYWxzZTsKCgkJLy8gQ2FjaGUgc2VsZWN0ZWUgY2hpbGRyZW4gYmFzZWQgb24gZmlsdGVyCgkJdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24oKSB7CgkJCXRoYXQuZWxlbWVudFBvcyA9ICQoIHRoYXQuZWxlbWVudFsgMCBdICkub2Zmc2V0KCk7CgkJCXRoYXQuc2VsZWN0ZWVzID0gJCggdGhhdC5vcHRpb25zLmZpbHRlciwgdGhhdC5lbGVtZW50WyAwIF0gKTsKCQkJdGhhdC5fYWRkQ2xhc3MoIHRoYXQuc2VsZWN0ZWVzLCAidWktc2VsZWN0ZWUiICk7CgkJCXRoYXQuc2VsZWN0ZWVzLmVhY2goIGZ1bmN0aW9uKCkgewoJCQkJdmFyICR0aGlzID0gJCggdGhpcyApLAoJCQkJCXNlbGVjdGVlT2Zmc2V0ID0gJHRoaXMub2Zmc2V0KCksCgkJCQkJcG9zID0gewoJCQkJCQlsZWZ0OiBzZWxlY3RlZU9mZnNldC5sZWZ0IC0gdGhhdC5lbGVtZW50UG9zLmxlZnQsCgkJCQkJCXRvcDogc2VsZWN0ZWVPZmZzZXQudG9wIC0gdGhhdC5lbGVtZW50UG9zLnRvcAoJCQkJCX07CgkJCQkkLmRhdGEoIHRoaXMsICJzZWxlY3RhYmxlLWl0ZW0iLCB7CgkJCQkJZWxlbWVudDogdGhpcywKCQkJCQkkZWxlbWVudDogJHRoaXMsCgkJCQkJbGVmdDogcG9zLmxlZnQsCgkJCQkJdG9wOiBwb3MudG9wLAoJCQkJCXJpZ2h0OiBwb3MubGVmdCArICR0aGlzLm91dGVyV2lkdGgoKSwKCQkJCQlib3R0b206IHBvcy50b3AgKyAkdGhpcy5vdXRlckhlaWdodCgpLAoJCQkJCXN0YXJ0c2VsZWN0ZWQ6IGZhbHNlLAoJCQkJCXNlbGVjdGVkOiAkdGhpcy5oYXNDbGFzcyggInVpLXNlbGVjdGVkIiApLAoJCQkJCXNlbGVjdGluZzogJHRoaXMuaGFzQ2xhc3MoICJ1aS1zZWxlY3RpbmciICksCgkJCQkJdW5zZWxlY3Rpbmc6ICR0aGlzLmhhc0NsYXNzKCAidWktdW5zZWxlY3RpbmciICkKCQkJCX0gKTsKCQkJfSApOwoJCX07CgkJdGhpcy5yZWZyZXNoKCk7CgoJCXRoaXMuX21vdXNlSW5pdCgpOwoKCQl0aGlzLmhlbHBlciA9ICQoICI8ZGl2PiIgKTsKCQl0aGlzLl9hZGRDbGFzcyggdGhpcy5oZWxwZXIsICJ1aS1zZWxlY3RhYmxlLWhlbHBlciIgKTsKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCXRoaXMuc2VsZWN0ZWVzLnJlbW92ZURhdGEoICJzZWxlY3RhYmxlLWl0ZW0iICk7CgkJdGhpcy5fbW91c2VEZXN0cm95KCk7Cgl9LAoKCV9tb3VzZVN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIHRoYXQgPSB0aGlzLAoJCQlvcHRpb25zID0gdGhpcy5vcHRpb25zOwoKCQl0aGlzLm9wb3MgPSBbIGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSBdOwoJCXRoaXMuZWxlbWVudFBvcyA9ICQoIHRoaXMuZWxlbWVudFsgMCBdICkub2Zmc2V0KCk7CgoJCWlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkICkgewoJCQlyZXR1cm47CgkJfQoKCQl0aGlzLnNlbGVjdGVlcyA9ICQoIG9wdGlvbnMuZmlsdGVyLCB0aGlzLmVsZW1lbnRbIDAgXSApOwoKCQl0aGlzLl90cmlnZ2VyKCAic3RhcnQiLCBldmVudCApOwoKCQkkKCBvcHRpb25zLmFwcGVuZFRvICkuYXBwZW5kKCB0aGlzLmhlbHBlciApOwoKCQkvLyBwb3NpdGlvbiBoZWxwZXIgKGxhc3NvKQoJCXRoaXMuaGVscGVyLmNzcyggewoJCQkibGVmdCI6IGV2ZW50LnBhZ2VYLAoJCQkidG9wIjogZXZlbnQucGFnZVksCgkJCSJ3aWR0aCI6IDAsCgkJCSJoZWlnaHQiOiAwCgkJfSApOwoKCQlpZiAoIG9wdGlvbnMuYXV0b1JlZnJlc2ggKSB7CgkJCXRoaXMucmVmcmVzaCgpOwoJCX0KCgkJdGhpcy5zZWxlY3RlZXMuZmlsdGVyKCAiLnVpLXNlbGVjdGVkIiApLmVhY2goIGZ1bmN0aW9uKCkgewoJCQl2YXIgc2VsZWN0ZWUgPSAkLmRhdGEoIHRoaXMsICJzZWxlY3RhYmxlLWl0ZW0iICk7CgkJCXNlbGVjdGVlLnN0YXJ0c2VsZWN0ZWQgPSB0cnVlOwoJCQlpZiAoICFldmVudC5tZXRhS2V5ICYmICFldmVudC5jdHJsS2V5ICkgewoJCQkJdGhhdC5fcmVtb3ZlQ2xhc3MoIHNlbGVjdGVlLiRlbGVtZW50LCAidWktc2VsZWN0ZWQiICk7CgkJCQlzZWxlY3RlZS5zZWxlY3RlZCA9IGZhbHNlOwoJCQkJdGhhdC5fYWRkQ2xhc3MoIHNlbGVjdGVlLiRlbGVtZW50LCAidWktdW5zZWxlY3RpbmciICk7CgkJCQlzZWxlY3RlZS51bnNlbGVjdGluZyA9IHRydWU7CgoJCQkJLy8gc2VsZWN0YWJsZSBVTlNFTEVDVElORyBjYWxsYmFjawoJCQkJdGhhdC5fdHJpZ2dlciggInVuc2VsZWN0aW5nIiwgZXZlbnQsIHsKCQkJCQl1bnNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudAoJCQkJfSApOwoJCQl9CgkJfSApOwoKCQkkKCBldmVudC50YXJnZXQgKS5wYXJlbnRzKCkuYWRkQmFjaygpLmVhY2goIGZ1bmN0aW9uKCkgewoJCQl2YXIgZG9TZWxlY3QsCgkJCQlzZWxlY3RlZSA9ICQuZGF0YSggdGhpcywgInNlbGVjdGFibGUtaXRlbSIgKTsKCQkJaWYgKCBzZWxlY3RlZSApIHsKCQkJCWRvU2VsZWN0ID0gKCAhZXZlbnQubWV0YUtleSAmJiAhZXZlbnQuY3RybEtleSApIHx8CgkJCQkJIXNlbGVjdGVlLiRlbGVtZW50Lmhhc0NsYXNzKCAidWktc2VsZWN0ZWQiICk7CgkJCQl0aGF0Ll9yZW1vdmVDbGFzcyggc2VsZWN0ZWUuJGVsZW1lbnQsIGRvU2VsZWN0ID8gInVpLXVuc2VsZWN0aW5nIiA6ICJ1aS1zZWxlY3RlZCIgKQoJCQkJCS5fYWRkQ2xhc3MoIHNlbGVjdGVlLiRlbGVtZW50LCBkb1NlbGVjdCA\\/IHsgbGVmdDogMCwgdG9wOiAwIH0gOiB7CgkJCWxlZnQ6IGV2ZW50LnBhZ2VYIC0gb2Zmc2V0LmxlZnQgLSAoIGNsb3Nlc3RIYW5kbGUud2lkdGgoKSAvIDIgKSwKCQkJdG9wOiBldmVudC5wYWdlWSAtIG9mZnNldC50b3AgLQoJCQkJKCBjbG9zZXN0SGFuZGxlLmhlaWdodCgpIC8gMiApIC0KCQkJCSggcGFyc2VJbnQoIGNsb3Nlc3RIYW5kbGUuY3NzKCAiYm9yZGVyVG9wV2lkdGgiICksIDEwICkgfHwgMCApIC0KCQkJCSggcGFyc2VJbnQoIGNsb3Nlc3RIYW5kbGUuY3NzKCAiYm9yZGVyQm90dG9tV2lkdGgiICksIDEwICkgfHwgMCApICsKCQkJCSggcGFyc2VJbnQoIGNsb3Nlc3RIYW5kbGUuY3NzKCAibWFyZ2luVG9wIiApLCAxMCApIHx8IDAgKQoJCX07CgoJCWlmICggIXRoaXMuaGFuZGxlcy5oYXNDbGFzcyggInVpLXN0YXRlLWhvdmVyIiApICkgewoJCQl0aGlzLl9zbGlkZSggZXZlbnQsIGluZGV4LCBub3JtVmFsdWUgKTsKCQl9CgkJdGhpcy5fYW5pbWF0ZU9mZiA9IHRydWU7CgkJcmV0dXJuIHRydWU7Cgl9LAoKCV9tb3VzZVN0YXJ0OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdHJ1ZTsKCX0sCgoJX21vdXNlRHJhZzogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXZhciBwb3NpdGlvbiA9IHsgeDogZXZlbnQucGFnZVgsIHk6IGV2ZW50LnBhZ2VZIH0sCgkJCW5vcm1WYWx1ZSA9IHRoaXMuX25vcm1WYWx1ZUZyb21Nb3VzZSggcG9zaXRpb24gKTsKCgkJdGhpcy5fc2xpZGUoIGV2ZW50LCB0aGlzLl9oYW5kbGVJbmRleCwgbm9ybVZhbHVlICk7CgoJCXJldHVybiBmYWxzZTsKCX0sCgoJX21vdXNlU3RvcDogZnVuY3Rpb24oIGV2ZW50ICkgewoJCXRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmhhbmRsZXMsIG51bGwsICJ1aS1zdGF0ZS1hY3RpdmUiICk7CgkJdGhpcy5fbW91c2VTbGlkaW5nID0gZmFsc2U7CgoJCXRoaXMuX3N0b3AoIGV2ZW50LCB0aGlzLl9oYW5kbGVJbmRleCApOwoJCXRoaXMuX2NoYW5nZSggZXZlbnQsIHRoaXMuX2hhbmRsZUluZGV4ICk7CgoJCXRoaXMuX2hhbmRsZUluZGV4ID0gbnVsbDsKCQl0aGlzLl9jbGlja09mZnNldCA9IG51bGw7CgkJdGhpcy5fYW5pbWF0ZU9mZiA9IGZhbHNlOwoKCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCV9kZXRlY3RPcmllbnRhdGlvbjogZnVuY3Rpb24oKSB7CgkJdGhpcy5vcmllbnRhdGlvbiA9ICggdGhpcy5vcHRpb25zLm9yaWVudGF0aW9uID09PSAidmVydGljYWwiICkgPyAidmVydGljYWwiIDogImhvcml6b250YWwiOwoJfSwKCglfbm9ybVZhbHVlRnJvbU1vdXNlOiBmdW5jdGlvbiggcG9zaXRpb24gKSB7CgkJdmFyIHBpeGVsVG90YWwsCgkJCXBpeGVsTW91c2UsCgkJCXBlcmNlbnRNb3VzZSwKCQkJdmFsdWVUb3RhbCwKCQkJdmFsdWVNb3VzZTsKCgkJaWYgKCB0aGlzLm9yaWVudGF0aW9uID09PSAiaG9yaXpvbnRhbCIgKSB7CgkJCXBpeGVsVG90YWwgPSB0aGlzLmVsZW1lbnRTaXplLndpZHRoOwoJCQlwaXhlbE1vdXNlID0gcG9zaXRpb24ueCAtIHRoaXMuZWxlbWVudE9mZnNldC5sZWZ0IC0KCQkJCSggdGhpcy5fY2xpY2tPZmZzZXQgPyB0aGlzLl9jbGlja09mZnNldC5sZWZ0IDogMCApOwoJCX0gZWxzZSB7CgkJCXBpeGVsVG90YWwgPSB0aGlzLmVsZW1lbnRTaXplLmhlaWdodDsKCQkJcGl4ZWxNb3VzZSA9IHBvc2l0aW9uLnkgLSB0aGlzLmVsZW1lbnRPZmZzZXQudG9wIC0KCQkJCSggdGhpcy5fY2xpY2tPZmZzZXQgPyB0aGlzLl9jbGlja09mZnNldC50b3AgOiAwICk7CgkJfQoKCQlwZXJjZW50TW91c2UgPSAoIHBpeGVsTW91c2UgLyBwaXhlbFRvdGFsICk7CgkJaWYgKCBwZXJjZW50TW91c2UgPiAxICkgewoJCQlwZXJjZW50TW91c2UgPSAxOwoJCX0KCQlpZiAoIHBlcmNlbnRNb3VzZSA8IDAgKSB7CgkJCXBlcmNlbnRNb3VzZSA9IDA7CgkJfQoJCWlmICggdGhpcy5vcmllbnRhdGlvbiA9PT0gInZlcnRpY2FsIiApIHsKCQkJcGVyY2VudE1vdXNlID0gMSAtIHBlcmNlbnRNb3VzZTsKCQl9CgoJCXZhbHVlVG90YWwgPSB0aGlzLl92YWx1ZU1heCgpIC0gdGhpcy5fdmFsdWVNaW4oKTsKCQl2YWx1ZU1vdXNlID0gdGhpcy5fdmFsdWVNaW4oKSArIHBlcmNlbnRNb3VzZSAqIHZhbHVlVG90YWw7CgoJCXJldHVybiB0aGlzLl90cmltQWxpZ25WYWx1ZSggdmFsdWVNb3VzZSApOwoJfSwKCglfdWlIYXNoOiBmdW5jdGlvbiggaW5kZXgsIHZhbHVlLCB2YWx1ZXMgKSB7CgkJdmFyIHVpSGFzaCA9IHsKCQkJaGFuZGxlOiB0aGlzLmhhbmRsZXNbIGluZGV4IF0sCgkJCWhhbmRsZUluZGV4OiBpbmRleCwKCQkJdmFsdWU6IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHRoaXMudmFsdWUoKQoJCX07CgoJCWlmICggdGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKSApIHsKCQkJdWlIYXNoLnZhbHVlID0gdmFsdWUgIT09IHVuZGVmaW5lZCA\/IHZhbHVlIDogdGhpcy52YWx1ZXMoIGluZGV4ICk7CgkJCXVpSGFzaC52YWx1ZXMgPSB2YWx1ZXMgfHwgdGhpcy52YWx1ZXMoKTsKCQl9CgoJCXJldHVybiB1aUhhc2g7Cgl9LAoKCV9oYXNNdWx0aXBsZVZhbHVlczogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMub3B0aW9ucy52YWx1ZXMgJiYgdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGg7Cgl9LAoKCV9zdGFydDogZnVuY3Rpb24oIGV2ZW50LCBpbmRleCApIHsKCQlyZXR1cm4gdGhpcy5fdHJpZ2dlciggInN0YXJ0IiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggaW5kZXggKSApOwoJfSwKCglfc2xpZGU6IGZ1bmN0aW9uKCBldmVudCwgaW5kZXgsIG5ld1ZhbCApIHsKCQl2YXIgYWxsb3dlZCwgb3RoZXJWYWwsCgkJCWN1cnJlbnRWYWx1ZSA9IHRoaXMudmFsdWUoKSwKCQkJbmV3VmFsdWVzID0gdGhpcy52YWx1ZXMoKTsKCgkJaWYgKCB0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpICkgewoJCQlvdGhlclZhbCA9IHRoaXMudmFsdWVzKCBpbmRleCA\/IDAgOiAxICk7CgkJCWN1cnJlbnRWYWx1ZSA9IHRoaXMudmFsdWVzKCBpbmRleCApOwoKCQkJaWYgKCB0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCA9PT0gMiAmJiB0aGlzLm9wdGlvbnMucmFuZ2UgPT09IHRydWUgKSB7CgkJCQluZXdWYWwgPSAgaW5kZXggPT09IDAgPyBNYXRoLm1pbiggb3RoZXJWYWwsIG5ld1ZhbCApIDogTWF0aC5tYXgoIG90aGVyVmFsLCBuZXdWYWwgKTsKCQkJfQoKCQkJbmV3VmFsdWVzWyBpbmRleCBdID0gbmV3VmFsOwoJCX0KCgkJaWYgKCBuZXdWYWwgPT09IGN1cnJlbnRWYWx1ZSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJYWxsb3dlZCA9IHRoaXMuX3RyaWdnZXIoICJzbGlkZSIsIGV2ZW50LCB0aGlzLl91aUhhc2goIGluZGV4LCBuZXdWYWwsIG5ld1ZhbHVlcyApICk7CgoJCS8vIEEgc2xpZGUgY2FuIGJlIGNhbmNlbGVkIGJ5IHJldHVybmluZyBmYWxzZSBmcm9tIHRoZSBzbGlkZSBjYWxsYmFjawoJCWlmICggYWxsb3dlZCA9PT0gZmFsc2UgKSB7CgkJCXJldHVybjsKCQl9CgoJCWlmICggdGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKSApIHsKCQkJdGhpcy52YWx1ZXMoIGluZGV4LCBuZXdWYWwgKTsKCQl9IGVsc2UgewoJCQl0aGlzLnZhbHVlKCBuZXdWYWwgKTsKCQl9Cgl9LAoKCV9zdG9wOiBmdW5jdGlvbiggZXZlbnQsIGluZGV4ICkgewoJCXRoaXMuX3RyaWdnZXIoICJzdG9wIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggaW5kZXggKSApOwoJfSwKCglfY2hhbmdlOiBmdW5jdGlvbiggZXZlbnQsIGluZGV4ICkgewoJCWlmICggIXRoaXMuX2tleVNsaWRpbmcgJiYgIXRoaXMuX21vdXNlU2xpZGluZyApIHsKCgkJCS8vc3RvcmUgdGhlIGxhc3QgY2hhbmdlZCB2YWx1ZSBpbmRleCBmb3IgcmVmZXJlbmNlIHdoZW4gaGFuZGxlcyBvdmVybGFwCgkJCXRoaXMuX2xhc3RDaGFuZ2VkVmFsdWUgPSBpbmRleDsKCQkJdGhpcy5fdHJpZ2dlciggImNoYW5nZSIsIGV2ZW50LCB0aGlzLl91aUhhc2goIGluZGV4ICkgKTsKCQl9Cgl9LAoKCXZhbHVlOiBmdW5jdGlvbiggbmV3VmFsdWUgKSB7CgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoICkgewoJCQl0aGlzLm9wdGlvbnMudmFsdWUgPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggbmV3VmFsdWUgKTsKCQkJdGhpcy5fcmVmcmVzaFZhbHVlKCk7CgkJCXRoaXMuX2NoYW5nZSggbnVsbCwgMCApOwoJCQlyZXR1cm47CgkJfQoKCQlyZXR1cm4gdGhpcy5fdmFsdWUoKTsKCX0sCgoJdmFsdWVzOiBmdW5jdGlvbiggaW5kZXgsIG5ld1ZhbHVlICkgewoJCXZhciB2YWxzLAoJCQluZXdWYWx1ZXMsCgkJCWk7CgoJCWlmICggYXJndW1lbnRzLmxlbmd0aCA+IDEgKSB7CgkJCXRoaXMub3B0aW9ucy52YWx1ZXNbIGluZGV4IF0gPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggbmV3VmFsdWUgKTsKCQkJdGhpcy5fcmVmcmVzaFZhbHVlKCk7CgkJCXRoaXMuX2NoYW5nZSggbnVsbCwgaW5kZXggKTsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoICkgewoJCQlpZiAoICQuaXNBcnJheSggYXJndW1lbnRzWyAwIF0gKSApIHsKCQkJCXZhbHMgPSB0aGlzLm9wdGlvbnMudmFsdWVzOwoJCQkJbmV3VmFsdWVzID0gYXJndW1lbnRzWyAwIF07CgkJCQlmb3IgKCBpID0gMDsgaSA8IHZhbHMubGVuZ3RoOyBpICs9IDEgKSB7CgkJCQkJdmFsc1sgaSBdID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoIG5ld1ZhbHVlc1sgaSBdICk7CgkJCQkJdGhpcy5fY2hhbmdlKCBudWxsLCBpICk7CgkJCQl9CgkJCQl0aGlzLl9yZWZyZXNoVmFsdWUoKTsKCQkJfSBlbHNlIHsKCQkJCWlmICggdGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKSApIHsKCQkJCQlyZXR1cm4gdGhpcy5fdmFsdWVzKCBpbmRleCApOwoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gdGhpcy52YWx1ZSgpOwoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJcmV0dXJuIHRoaXMuX3ZhbHVlcygpOwoJCX0KCX0sCgoJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJdmFyIGksCgkJCXZhbHNMZW5ndGggPSAwOwoKCQlpZiAoIGtleSA9PT0gInJhbmdlIiAmJiB0aGlzLm9wdGlvbnMucmFuZ2UgPT09IHRydWUgKSB7CgkJCWlmICggdmFsdWUgPT09ICJtaW4iICkgewoJCQkJdGhpcy5vcHRpb25zLnZhbHVlID0gdGhpcy5fdmFsdWVzKCAwICk7CgkJCQl0aGlzLm9wdGlvbnMudmFsdWVzID0gbnVsbDsKCQkJfSBlbHNlIGlmICggdmFsdWUgPT09ICJtYXgiICkgewoJCQkJdGhpcy5vcHRpb25zLnZhbHVlID0gdGhpcy5fdmFsdWVzKCB0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCAtIDEgKTsKCQkJCXRoaXMub3B0aW9ucy52YWx1ZXMgPSBudWxsOwoJCQl9CgkJfQoKCQlpZiAoICQuaXNBcnJheSggdGhpcy5vcHRpb25zLnZhbHVlcyApICkgewoJCQl2YWxzTGVuZ3RoID0gdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGg7CgkJfQoKCQl0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApOwoKCQlzd2l0Y2ggKCBrZXkgKSB7CgkJCWNhc2UgIm9yaWVudGF0aW9uIjoKCQkJCXRoaXMuX2RldGVjdE9yaWVudGF0aW9uKCk7CgkJCQl0aGlzLl9yZW1vdmVDbGFzcyggInVpLXNsaWRlci1ob3Jpem9udGFsIHVpLXNsaWRlci12ZXJ0aWNhbCIgKQoJCQkJCS5fYWRkQ2xhc3MoICJ1aS1zbGlkZXItIiArIHRoaXMub3JpZW50YXRpb24gKTsKCQkJCXRoaXMuX3JlZnJlc2hWYWx1ZSgpOwoJCQkJaWYgKCB0aGlzLm9wdGlvbnMucmFuZ2UgKSB7CgkJCQkJdGhpcy5fcmVmcmVzaFJhbmdlKCB2YWx1ZSApOwoJCQkJfQoKCQkJCS8vIFJlc2V0IHBvc2l0aW9uaW5nIGZyb20gcHJldmlvdXMgb3JpZW50YXRpb24KCQkJCXRoaXMuaGFuZGxlcy5jc3MoIHZhbHVlID09PSAiaG9yaXpvbnRhbCIgPyAiYm90dG9tIiA6ICJsZWZ0IiwgIiIgKTsKCQkJCWJyZWFrOwoJCQljYXNlICJ2YWx1ZSI6CgkJCQl0aGlzLl9hbmltYXRlT2ZmID0gdHJ1ZTsKCQkJCXRoaXMuX3JlZnJlc2hWYWx1ZSgpOwoJCQkJdGhpcy5fY2hhbmdlKCBudWxsLCAwICk7CgkJCQl0aGlzLl9hbmltYXRlT2ZmID0gZmFsc2U7CgkJCQlicmVhazsKCQkJY2FzZSAidmFsdWVzIjoKCQkJCXRoaXMuX2FuaW1hdGVPZmYgPSB0cnVlOwoJCQkJdGhpcy5fcmVmcmVzaFZhbHVlKCk7CgoJCQkJLy8gU3RhcnQgZnJvbSB0aGUgbGFzdCBoYW5kbGUgdG8gcHJldmVudCB1bnJlYWNoYWJsZSBoYW5kbGVzICgjOTA0NikKCQkJCWZvciAoIGkgPSB2YWxzTGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7CgkJCQkJdGhpcy5fY2hhbmdlKCBudWxsLCBpICk7CgkJCQl9CgkJCQl0aGlzLl9hbmltYXRlT2ZmID0gZmFsc2U7CgkJCQlicmVhazsKCQkJY2FzZSAic3RlcCI6CgkJCWNhc2UgIm1pbiI6CgkJCWNhc2UgIm1heCI6CgkJCQl0aGlzLl9hbmltYXRlT2ZmID0gdHJ1ZTsKCQkJCXRoaXMuX2NhbGN1bGF0ZU5ld01heCgpOwoJCQkJdGhpcy5fcmVmcmVzaFZhbHVlKCk7CgkJCQl0aGlzLl9hbmltYXRlT2ZmID0gZmFsc2U7CgkJCQlicmVhazsKCQkJY2FzZSAicmFuZ2UiOgoJCQkJdGhpcy5fYW5pbWF0ZU9mZiA9IHRydWU7CgkJCQl0aGlzLl9yZWZyZXNoKCk7CgkJCQl0aGlzLl9hbmltYXRlT2ZmID0gZmFsc2U7CgkJCQlicmVhazsKCQl9Cgl9LAoKCV9zZXRPcHRpb25EaXNhYmxlZDogZnVuY3Rpb24oIHZhbHVlICkgewoJCXRoaXMuX3N1cGVyKCB2YWx1ZSApOwoKCQl0aGlzLl90b2dnbGVDbGFzcyggbnVsbCwgInVpLXN0YXRlLWRpc2FibGVkIiwgISF2YWx1ZSApOwoJfSwKCgkvL2ludGVybmFsIHZhbHVlIGdldHRlcgoJLy8gX3ZhbHVlKCkgcmV0dXJucyB2YWx1ZSB0cmltbWVkIGJ5IG1pbiBhbmQgbWF4LCBhbGlnbmVkIGJ5IHN0ZXAKCV92YWx1ZTogZnVuY3Rpb24oKSB7CgkJdmFyIHZhbCA9IHRoaXMub3B0aW9ucy52YWx1ZTsKCQl2YWwgPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggdmFsICk7CgoJCXJldHVybiB2YWw7Cgl9LAoKCS8vaW50ZXJuYWwgdmFsdWVzIGdldHRlcgoJLy8gX3ZhbHVlcygpIHJldHVybnMgYXJyYXkgb2YgdmFsdWVzIHRyaW1tZWQgYnkgbWluIGFuZCBtYXgsIGFsaWduZWQgYnkgc3RlcAoJLy8gX3ZhbHVlcyggaW5kZXggKSByZXR1cm5zIHNpbmdsZSB2YWx1ZSB0cmltbWVkIGJ5IG1pbiBhbmQgbWF4LCBhbGlnbmVkIGJ5IHN0ZXAKCV92YWx1ZXM6IGZ1bmN0aW9uKCBpbmRleCApIHsKCQl2YXIgdmFsLAoJCQl2YWxzLAoJCQlpOwoKCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7CgkJCXZhbCA9IHRoaXMub3B0aW9ucy52YWx1ZXNbIGluZGV4IF07CgkJCXZhbCA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCB2YWwgKTsKCgkJCXJldHVybiB2YWw7CgkJfSBlbHNlIGlmICggdGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKSApIHsKCgkJCS8vIC5zbGljZSgpIGNyZWF0ZXMgYSBjb3B5IG9mIHRoZSBhcnJheQoJCQkvLyB0aGlzIGNvcHkgZ2V0cyB0cmltbWVkIGJ5IG1pbiBhbmQgbWF4IGFuZCB0aGVuIHJldHVybmVkCgkJCXZhbHMgPSB0aGlzLm9wdGlvbnMudmFsdWVzLnNsaWNlKCk7CgkJCWZvciAoIGkgPSAwOyBpIDwgdmFscy5sZW5ndGg7IGkgKz0gMSApIHsKCQkJCXZhbHNbIGkgXSA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCB2YWxzWyBpIF0gKTsKCQkJfQoKCQkJcmV0dXJuIHZhbHM7CgkJfSBlbHNlIHsKCQkJcmV0dXJuIFtdOwoJCX0KCX0sCgoJLy8gUmV0dXJucyB0aGUgc3RlcC1hbGlnbmVkIHZhbHVlIHRoYXQgdmFsIGlzIGNsb3Nlc3QgdG8sIGJldHdlZW4gKGluY2x1c2l2ZSkgbWluIGFuZCBtYXgKCV90cmltQWxpZ25WYWx1ZTogZnVuY3Rpb24oIHZhbCApIHsKCQlpZiAoIHZhbCA8PSB0aGlzLl92YWx1ZU1pbigpICkgewoJCQlyZXR1cm4gdGhpcy5fdmFsdWVNaW4oKTsKCQl9CgkJaWYgKCB2YWwgPj0gdGhpcy5fdmFsdWVNYXgoKSApIHsKCQkJcmV0dXJuIHRoaXMuX3ZhbHVlTWF4KCk7CgkJfQoJCXZhciBzdGVwID0gKCB0aGlzLm9wdGlvbnMuc3RlcCA+IDAgKSA\/IHRoaXMub3B0aW9ucy5zdGVwIDogMSwKCQkJdmFsTW9kU3RlcCA9ICggdmFsIC0gdGhpcy5fdmFsdWVNaW4oKSApICUgc3RlcCwKCQkJYWxpZ25WYWx1ZSA9IHZhbCAtIHZhbE1vZFN0ZXA7CgoJCWlmICggTWF0aC5hYnMoIHZhbE1vZFN0ZXAgKSAqIDIgPj0gc3RlcCApIHsKCQkJYWxpZ25WYWx1ZSArPSAoIHZhbE1vZFN0ZXAgPiAwICkgPyBzdGVwIDogKCAtc3RlcCApOwoJCX0KCgkJLy8gU2luY2UgSmF2YVNjcmlwdCBoYXMgcHJvYmxlbXMgd2l0aCBsYXJnZSBmbG9hdHMsIHJvdW5kCgkJLy8gdGhlIGZpbmFsIHZhbHVlIHRvIDUgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50IChzZWUgIzQxMjQpCgkJcmV0dXJuIHBhcnNlRmxvYXQoIGFsaWduVmFsdWUudG9GaXhlZCggNSApICk7Cgl9LAoKCV9jYWxjdWxhdGVOZXdNYXg6IGZ1bmN0aW9uKCkgewoJCXZhciBtYXggPSB0aGlzLm9wdGlvbnMubWF4LAoJCQltaW4gPSB0aGlzLl92YWx1ZU1pbigpLAoJCQlzdGVwID0gdGhpcy5vcHRpb25zLnN0ZXAsCgkJCWFib3ZlTWluID0gTWF0aC5yb3VuZCggKCBtYXggLSBtaW4gKSAvIHN0ZXAgKSAqIHN0ZXA7CgkJbWF4ID0gYWJvdmVNaW4gKyBtaW47CgkJaWYgKCBtYXggPiB0aGlzLm9wdGlvbnMubWF4ICkgewoKCQkJLy9JZiBtYXggaXMgbm90IGRpdmlzaWJsZSBieSBzdGVwLCByb3VuZGluZyBvZmYgbWF5IGluY3JlYXNlIGl0cyB2YWx1ZQoJCQltYXggLT0gc3RlcDsKCQl9CgkJdGhpcy5tYXggPSBwYXJzZUZsb2F0KCBtYXgudG9GaXhlZCggdGhpcy5fcHJlY2lzaW9uKCkgKSApOwoJfSwKCglfcHJlY2lzaW9uOiBmdW5jdGlvbigpIHsKCQl2YXIgcHJlY2lzaW9uID0gdGhpcy5fcHJlY2lzaW9uT2YoIHRoaXMub3B0aW9ucy5zdGVwICk7CgkJaWYgKCB0aGlzLm9wdGlvbnMubWluICE9PSBudWxsICkgewoJCQlwcmVjaXNpb24gPSBNYXRoLm1heCggcHJlY2lzaW9uLCB0aGlzLl9wcmVjaXNpb25PZiggdGhpcy5vcHRpb25zLm1pbiApICk7CgkJfQoJCXJldHVybiBwcmVjaXNpb247Cgl9LAoKCV9wcmVjaXNpb25PZjogZnVuY3Rpb24oIG51bSApIHsKCQl2YXIgc3RyID0gbnVtLnRvU3RyaW5nKCksCgkJCWRlY2ltYWwgPSBzdHIuaW5kZXhPZiggIi4iICk7CgkJcmV0dXJuIGRlY2ltYWwgPT09IC0xID8gMCA6IHN0ci5sZW5ndGggLSBkZWNpbWFsIC0gMTsKCX0sCgoJX3ZhbHVlTWluOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5vcHRpb25zLm1pbjsKCX0sCgoJX3ZhbHVlTWF4OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5tYXg7Cgl9LAoKCV9yZWZyZXNoUmFuZ2U6IGZ1bmN0aW9uKCBvcmllbnRhdGlvbiApIHsKCQlpZiAoIG9yaWVudGF0aW9uID09PSAidmVydGljYWwiICkgewoJCQl0aGlzLnJhbmdlLmNzcyggeyAid2lkdGgiOiAiIiwgImxlZnQiOiAiIiB9ICk7CgkJfQoJCWlmICggb3JpZW50YXRpb24gPT09ICJob3Jpem9udGFsIiApIHsKCQkJdGhpcy5yYW5nZS5jc3MoIHsgImhlaWdodCI6ICIiLCAiYm90dG9tIjogIiIgfSApOwoJCX0KCX0sCgoJX3JlZnJlc2hWYWx1ZTogZnVuY3Rpb24oKSB7CgkJdmFyIGxhc3RWYWxQZXJjZW50LCB2YWxQZXJjZW50LCB2YWx1ZSwgdmFsdWVNaW4sIHZhbHVlTWF4LAoJCQlvUmFuZ2UgPSB0aGlzLm9wdGlvbnMucmFuZ2UsCgkJCW8gPSB0aGlzLm9wdGlvbnMsCgkJCXRoYXQgPSB0aGlzLAoJCQlhbmltYXRlID0gKCAhdGhpcy5fYW5pbWF0ZU9mZiApID8gby5hbmltYXRlIDogZmFsc2UsCgkJCV9zZXQgPSB7fTsKCgkJaWYgKCB0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpICkgewoJCQl0aGlzLmhhbmRsZXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7CgkJCQl2YWxQZXJjZW50ID0gKCB0aGF0LnZhbHVlcyggaSApIC0gdGhhdC5fdmFsdWVNaW4oKSApIC8gKCB0aGF0Ll92YWx1ZU1heCgpIC0KCQkJCQl0aGF0Ll92YWx1ZU1pbigpICkgKiAxMDA7CgkJCQlfc2V0WyB0aGF0Lm9yaWVudGF0aW9uID09PSAiaG9yaXpvbnRhbCIgPyAibGVmdCIgOiAiYm90dG9tIiBdID0gdmFsUGVyY2VudCArICIlIjsKCQkJCSQoIHRoaXMgKS5zdG9wKCAxLCAxIClbIGFuaW1hdGUgPyAiYW5pbWF0ZSIgOiAiY3NzIiBdKCBfc2V0LCBvLmFuaW1hdGUgKTsKCQkJCWlmICggdGhhdC5vcHRpb25zLnJhbmdlID09PSB0cnVlICkgewoJCQkJCWlmICggdGhhdC5vcmllbnRhdGlvbiA9PT0gImhvcml6b250YWwiICkgewoJCQkJCQlpZiAoIGkgPT09IDAgKSB7CgkJCQkJCQl0aGF0LnJhbmdlLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA\/ICJhbmltYXRlIiA6ICJjc3MiIF0oIHsKCQkJCQkJCQlsZWZ0OiB2YWxQZXJjZW50ICsgIiUiCgkJCQkJCQl9LCBvLmFuaW1hdGUgKTsKCQkJCQkJfQoJCQkJCQlpZiAoIGkgPT09IDEgKSB7CgkJCQkJCQl0aGF0LnJhbmdlWyBhbmltYXRlID8gImFuaW1hdGUiIDogImNzcyIgXSggewoJCQkJCQkJCXdpZHRoOiAoIHZhbFBlcmNlbnQgLSBsYXN0VmFsUGVyY2VudCApICsgIiUiCgkJCQkJCQl9LCB7CgkJCQkJCQkJcXVldWU6IGZhbHNlLAoJCQkJCQkJCWR1cmF0aW9uOiBvLmFuaW1hdGUKCQkJCQkJCX0gKTsKCQkJCQkJfQoJCQkJCX0gZWxzZSB7CgkJCQkJCWlmICggaSA9PT0gMCApIHsKCQkJCQkJCXRoYXQucmFuZ2Uuc3RvcCggMSwgMSApWyBhbmltYXRlID8gImFuaW1hdGUiIDogImNzcyIgXSggewoJCQkJCQkJCWJvdHRvbTogKCB2YWxQZXJjZW50ICkgKyAiJSIKCQkJCQkJCX0sIG8uYW5pbWF0ZSApOwoJCQkJCQl9CgkJCQkJCWlmICggaSA9PT0gMSApIHsKCQkJCQkJCXRoYXQucmFuZ2VbIGFuaW1hdGUgPyAiYW5pbWF0ZSIgOiAiY3NzIiBdKCB7CgkJCQkJCQkJaGVpZ2h0OiAoIHZhbFBlcmNlbnQgLSBsYXN0VmFsUGVyY2VudCApICsgIiUiCgkJCQkJCQl9LCB7CgkJCQkJCQkJcXVldWU6IGZhbHNlLAoJCQkJCQkJCWR1cmF0aW9uOiBvLmFuaW1hdGUKCQkJCQkJCX0gKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJCWxhc3RWYWxQZXJjZW50ID0gdmFsUGVyY2VudDsKCQkJfSApOwoJCX0gZWxzZSB7CgkJCXZhbHVlID0gdGhpcy52YWx1ZSgpOwoJCQl2YWx1ZU1pbiA9IHRoaXMuX3ZhbHVlTWluKCk7CgkJCXZhbHVlTWF4ID0gdGhpcy5fdmFsdWVNYXgoKTsKCQkJdmFsUGVyY2VudCA9ICggdmFsdWVNYXggIT09IHZhbHVlTWluICkgPwoJCQkJCSggdmFsdWUgLSB2YWx1ZU1pbiApIC8gKCB2YWx1ZU1heCAtIHZhbHVlTWluICkgKiAxMDAgOgoJCQkJCTA7CgkJCV9zZXRbIHRoaXMub3JpZW50YXRpb24gPT09ICJob3Jpem9udGFsIiA\/ICJsZWZ0IiA6ICJib3R0b20iIF0gPSB2YWxQZXJjZW50ICsgIiUiOwoJCQl0aGlzLmhhbmRsZS5zdG9wKCAxLCAxIClbIGFuaW1hdGUgPyAiYW5pbWF0ZSIgOiAiY3NzIiBdKCBfc2V0LCBvLmFuaW1hdGUgKTsKCgkJCWlmICggb1JhbmdlID09PSAibWluIiAmJiB0aGlzLm9yaWVudGF0aW9uID09PSAiaG9yaXpvbnRhbCIgKSB7CgkJCQl0aGlzLnJhbmdlLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA\/ICJhbmltYXRlIiA6ICJjc3MiIF0oIHsKCQkJCQl3aWR0aDogdmFsUGVyY2VudCArICIlIgoJCQkJfSwgby5hbmltYXRlICk7CgkJCX0KCQkJaWYgKCBvUmFuZ2UgPT09ICJtYXgiICYmIHRoaXMub3JpZW50YXRpb24gPT09ICJob3Jpem9udGFsIiApIHsKCQkJCXRoaXMucmFuZ2Uuc3RvcCggMSwgMSApWyBhbmltYXRlID8gImFuaW1hdGUiIDogImNzcyIgXSggewoJCQkJCXdpZHRoOiAoIDEwMCAtIHZhbFBlcmNlbnQgKSArICIlIgoJCQkJfSwgby5hbmltYXRlICk7CgkJCX0KCQkJaWYgKCBvUmFuZ2UgPT09ICJtaW4iICYmIHRoaXMub3JpZW50YXRpb24gPT09ICJ2ZXJ0aWNhbCIgKSB7CgkJCQl0aGlzLnJhbmdlLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA\\/ICJkb3duIiA6ICJ1cCI7CgoJCQkJaWYgKCB0aGlzLm9wdGlvbnMudG9sZXJhbmNlID09PSAicG9pbnRlciIgfHwgdGhpcy5faW50ZXJzZWN0c1dpdGhTaWRlcyggaXRlbSApICkgewoJCQkJCXRoaXMuX3JlYXJyYW5nZSggZXZlbnQsIGl0ZW0gKTsKCQkJCX0gZWxzZSB7CgkJCQkJYnJlYWs7CgkJCQl9CgoJCQkJdGhpcy5fdHJpZ2dlciggImNoYW5nZSIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSApOwoJCQkJYnJlYWs7CgkJCX0KCQl9CgoJCS8vUG9zdCBldmVudHMgdG8gY29udGFpbmVycwoJCXRoaXMuX2NvbnRhY3RDb250YWluZXJzKCBldmVudCApOwoKCQkvL0ludGVyY29ubmVjdCB3aXRoIGRyb3BwYWJsZXMKCQlpZiAoICQudWkuZGRtYW5hZ2VyICkgewoJCQkkLnVpLmRkbWFuYWdlci5kcmFnKCB0aGlzLCBldmVudCApOwoJCX0KCgkJLy9DYWxsIGNhbGxiYWNrcwoJCXRoaXMuX3RyaWdnZXIoICJzb3J0IiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpICk7CgoJCXRoaXMubGFzdFBvc2l0aW9uQWJzID0gdGhpcy5wb3NpdGlvbkFiczsKCQlyZXR1cm4gZmFsc2U7CgoJfSwKCglfbW91c2VTdG9wOiBmdW5jdGlvbiggZXZlbnQsIG5vUHJvcGFnYXRpb24gKSB7CgoJCWlmICggIWV2ZW50ICkgewoJCQlyZXR1cm47CgkJfQoKCQkvL0lmIHdlIGFyZSB1c2luZyBkcm9wcGFibGVzLCBpbmZvcm0gdGhlIG1hbmFnZXIgYWJvdXQgdGhlIGRyb3AKCQlpZiAoICQudWkuZGRtYW5hZ2VyICYmICF0aGlzLm9wdGlvbnMuZHJvcEJlaGF2aW91ciApIHsKCQkJJC51aS5kZG1hbmFnZXIuZHJvcCggdGhpcywgZXZlbnQgKTsKCQl9CgoJCWlmICggdGhpcy5vcHRpb25zLnJldmVydCApIHsKCQkJdmFyIHRoYXQgPSB0aGlzLAoJCQkJY3VyID0gdGhpcy5wbGFjZWhvbGRlci5vZmZzZXQoKSwKCQkJCWF4aXMgPSB0aGlzLm9wdGlvbnMuYXhpcywKCQkJCWFuaW1hdGlvbiA9IHt9OwoKCQkJaWYgKCAhYXhpcyB8fCBheGlzID09PSAieCIgKSB7CgkJCQlhbmltYXRpb24ubGVmdCA9IGN1ci5sZWZ0IC0gdGhpcy5vZmZzZXQucGFyZW50LmxlZnQgLSB0aGlzLm1hcmdpbnMubGVmdCArCgkJCQkJKCB0aGlzLm9mZnNldFBhcmVudFsgMCBdID09PSB0aGlzLmRvY3VtZW50WyAwIF0uYm9keSA\/CgkJCQkJCTAgOgoJCQkJCQl0aGlzLm9mZnNldFBhcmVudFsgMCBdLnNjcm9sbExlZnQKCQkJCQkpOwoJCQl9CgkJCWlmICggIWF4aXMgfHwgYXhpcyA9PT0gInkiICkgewoJCQkJYW5pbWF0aW9uLnRvcCA9IGN1ci50b3AgLSB0aGlzLm9mZnNldC5wYXJlbnQudG9wIC0gdGhpcy5tYXJnaW5zLnRvcCArCgkJCQkJKCB0aGlzLm9mZnNldFBhcmVudFsgMCBdID09PSB0aGlzLmRvY3VtZW50WyAwIF0uYm9keSA\/CgkJCQkJCTAgOgoJCQkJCQl0aGlzLm9mZnNldFBhcmVudFsgMCBdLnNjcm9sbFRvcAoJCQkJCSk7CgkJCX0KCQkJdGhpcy5yZXZlcnRpbmcgPSB0cnVlOwoJCQkkKCB0aGlzLmhlbHBlciApLmFuaW1hdGUoCgkJCQlhbmltYXRpb24sCgkJCQlwYXJzZUludCggdGhpcy5vcHRpb25zLnJldmVydCwgMTAgKSB8fCA1MDAsCgkJCQlmdW5jdGlvbigpIHsKCQkJCQl0aGF0Ll9jbGVhciggZXZlbnQgKTsKCQkJCX0KCQkJKTsKCQl9IGVsc2UgewoJCQl0aGlzLl9jbGVhciggZXZlbnQsIG5vUHJvcGFnYXRpb24gKTsKCQl9CgoJCXJldHVybiBmYWxzZTsKCgl9LAoKCWNhbmNlbDogZnVuY3Rpb24oKSB7CgoJCWlmICggdGhpcy5kcmFnZ2luZyApIHsKCgkJCXRoaXMuX21vdXNlVXAoIG5ldyAkLkV2ZW50KCAibW91c2V1cCIsIHsgdGFyZ2V0OiBudWxsIH0gKSApOwoKCQkJaWYgKCB0aGlzLm9wdGlvbnMuaGVscGVyID09PSAib3JpZ2luYWwiICkgewoJCQkJdGhpcy5jdXJyZW50SXRlbS5jc3MoIHRoaXMuX3N0b3JlZENTUyApOwoJCQkJdGhpcy5fcmVtb3ZlQ2xhc3MoIHRoaXMuY3VycmVudEl0ZW0sICJ1aS1zb3J0YWJsZS1oZWxwZXIiICk7CgkJCX0gZWxzZSB7CgkJCQl0aGlzLmN1cnJlbnRJdGVtLnNob3coKTsKCQkJfQoKCQkJLy9Qb3N0IGRlYWN0aXZhdGluZyBldmVudHMgdG8gY29udGFpbmVycwoJCQlmb3IgKCB2YXIgaSA9IHRoaXMuY29udGFpbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHsKCQkJCXRoaXMuY29udGFpbmVyc1sgaSBdLl90cmlnZ2VyKCAiZGVhY3RpdmF0ZSIsIG51bGwsIHRoaXMuX3VpSGFzaCggdGhpcyApICk7CgkJCQlpZiAoIHRoaXMuY29udGFpbmVyc1sgaSBdLmNvbnRhaW5lckNhY2hlLm92ZXIgKSB7CgkJCQkJdGhpcy5jb250YWluZXJzWyBpIF0uX3RyaWdnZXIoICJvdXQiLCBudWxsLCB0aGlzLl91aUhhc2goIHRoaXMgKSApOwoJCQkJCXRoaXMuY29udGFpbmVyc1sgaSBdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAwOwoJCQkJfQoJCQl9CgoJCX0KCgkJaWYgKCB0aGlzLnBsYWNlaG9sZGVyICkgewoKCQkJLy8kKHRoaXMucGxhY2Vob2xkZXJbMF0pLnJlbW92ZSgpOyB3b3VsZCBoYXZlIGJlZW4gdGhlIGpRdWVyeSB3YXkgLSB1bmZvcnR1bmF0ZWx5LAoJCQkvLyBpdCB1bmJpbmRzIEFMTCBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgbm9kZSEKCQkJaWYgKCB0aGlzLnBsYWNlaG9sZGVyWyAwIF0ucGFyZW50Tm9kZSApIHsKCQkJCXRoaXMucGxhY2Vob2xkZXJbIDAgXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLnBsYWNlaG9sZGVyWyAwIF0gKTsKCQkJfQoJCQlpZiAoIHRoaXMub3B0aW9ucy5oZWxwZXIgIT09ICJvcmlnaW5hbCIgJiYgdGhpcy5oZWxwZXIgJiYKCQkJCQl0aGlzLmhlbHBlclsgMCBdLnBhcmVudE5vZGUgKSB7CgkJCQl0aGlzLmhlbHBlci5yZW1vdmUoKTsKCQkJfQoKCQkJJC5leHRlbmQoIHRoaXMsIHsKCQkJCWhlbHBlcjogbnVsbCwKCQkJCWRyYWdnaW5nOiBmYWxzZSwKCQkJCXJldmVydGluZzogZmFsc2UsCgkJCQlfbm9GaW5hbFNvcnQ6IG51bGwKCQkJfSApOwoKCQkJaWYgKCB0aGlzLmRvbVBvc2l0aW9uLnByZXYgKSB7CgkJCQkkKCB0aGlzLmRvbVBvc2l0aW9uLnByZXYgKS5hZnRlciggdGhpcy5jdXJyZW50SXRlbSApOwoJCQl9IGVsc2UgewoJCQkJJCggdGhpcy5kb21Qb3NpdGlvbi5wYXJlbnQgKS5wcmVwZW5kKCB0aGlzLmN1cnJlbnRJdGVtICk7CgkJCX0KCQl9CgoJCXJldHVybiB0aGlzOwoKCX0sCgoJc2VyaWFsaXplOiBmdW5jdGlvbiggbyApIHsKCgkJdmFyIGl0ZW1zID0gdGhpcy5fZ2V0SXRlbXNBc2pRdWVyeSggbyAmJiBvLmNvbm5lY3RlZCApLAoJCQlzdHIgPSBbXTsKCQlvID0gbyB8fCB7fTsKCgkJJCggaXRlbXMgKS5lYWNoKCBmdW5jdGlvbigpIHsKCQkJdmFyIHJlcyA9ICggJCggby5pdGVtIHx8IHRoaXMgKS5hdHRyKCBvLmF0dHJpYnV0ZSB8fCAiaWQiICkgfHwgIiIgKQoJCQkJLm1hdGNoKCBvLmV4cHJlc3Npb24gfHwgKCAvKC4rKVtcLT1fXSguKykvICkgKTsKCQkJaWYgKCByZXMgKSB7CgkJCQlzdHIucHVzaCgKCQkJCQkoIG8ua2V5IHx8IHJlc1sgMSBdICsgIltdIiApICsKCQkJCQkiPSIgKyAoIG8ua2V5ICYmIG8uZXhwcmVzc2lvbiA\/IHJlc1sgMSBdIDogcmVzWyAyIF0gKSApOwoJCQl9CgkJfSApOwoKCQlpZiAoICFzdHIubGVuZ3RoICYmIG8ua2V5ICkgewoJCQlzdHIucHVzaCggby5rZXkgKyAiPSIgKTsKCQl9CgoJCXJldHVybiBzdHIuam9pbiggIiYiICk7CgoJfSwKCgl0b0FycmF5OiBmdW5jdGlvbiggbyApIHsKCgkJdmFyIGl0ZW1zID0gdGhpcy5fZ2V0SXRlbXNBc2pRdWVyeSggbyAmJiBvLmNvbm5lY3RlZCApLAoJCQlyZXQgPSBbXTsKCgkJbyA9IG8gfHwge307CgoJCWl0ZW1zLmVhY2goIGZ1bmN0aW9uKCkgewoJCQlyZXQucHVzaCggJCggby5pdGVtIHx8IHRoaXMgKS5hdHRyKCBvLmF0dHJpYnV0ZSB8fCAiaWQiICkgfHwgIiIgKTsKCQl9ICk7CgkJcmV0dXJuIHJldDsKCgl9LAoKCS8qIEJlIGNhcmVmdWwgd2l0aCB0aGUgZm9sbG93aW5nIGNvcmUgZnVuY3Rpb25zICovCglfaW50ZXJzZWN0c1dpdGg6IGZ1bmN0aW9uKCBpdGVtICkgewoKCQl2YXIgeDEgPSB0aGlzLnBvc2l0aW9uQWJzLmxlZnQsCgkJCXgyID0geDEgKyB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLAoJCQl5MSA9IHRoaXMucG9zaXRpb25BYnMudG9wLAoJCQl5MiA9IHkxICsgdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsCgkJCWwgPSBpdGVtLmxlZnQsCgkJCXIgPSBsICsgaXRlbS53aWR0aCwKCQkJdCA9IGl0ZW0udG9wLAoJCQliID0gdCArIGl0ZW0uaGVpZ2h0LAoJCQlkeUNsaWNrID0gdGhpcy5vZmZzZXQuY2xpY2sudG9wLAoJCQlkeENsaWNrID0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCwKCQkJaXNPdmVyRWxlbWVudEhlaWdodCA9ICggdGhpcy5vcHRpb25zLmF4aXMgPT09ICJ4IiApIHx8ICggKCB5MSArIGR5Q2xpY2sgKSA+IHQgJiYKCQkJCSggeTEgKyBkeUNsaWNrICkgPCBiICksCgkJCWlzT3ZlckVsZW1lbnRXaWR0aCA9ICggdGhpcy5vcHRpb25zLmF4aXMgPT09ICJ5IiApIHx8ICggKCB4MSArIGR4Q2xpY2sgKSA+IGwgJiYKCQkJCSggeDEgKyBkeENsaWNrICkgPCByICksCgkJCWlzT3ZlckVsZW1lbnQgPSBpc092ZXJFbGVtZW50SGVpZ2h0ICYmIGlzT3ZlckVsZW1lbnRXaWR0aDsKCgkJaWYgKCB0aGlzLm9wdGlvbnMudG9sZXJhbmNlID09PSAicG9pbnRlciIgfHwKCQkJdGhpcy5vcHRpb25zLmZvcmNlUG9pbnRlckZvckNvbnRhaW5lcnMgfHwKCQkJKCB0aGlzLm9wdGlvbnMudG9sZXJhbmNlICE9PSAicG9pbnRlciIgJiYKCQkJCXRoaXMuaGVscGVyUHJvcG9ydGlvbnNbIHRoaXMuZmxvYXRpbmcgPyAid2lkdGgiIDogImhlaWdodCIgXSA+CgkJCQlpdGVtWyB0aGlzLmZsb2F0aW5nID8gIndpZHRoIiA6ICJoZWlnaHQiIF0gKQoJCSkgewoJCQlyZXR1cm4gaXNPdmVyRWxlbWVudDsKCQl9IGVsc2UgewoKCQkJcmV0dXJuICggbCA8IHgxICsgKCB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMiApICYmIC8vIFJpZ2h0IEhhbGYKCQkJCXgyIC0gKCB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMiApIDwgciAmJiAvLyBMZWZ0IEhhbGYKCQkJCXQgPCB5MSArICggdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLyAyICkgJiYgLy8gQm90dG9tIEhhbGYKCQkJCXkyIC0gKCB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAvIDIgKSA8IGIgKTsgLy8gVG9wIEhhbGYKCgkJfQoJfSwKCglfaW50ZXJzZWN0c1dpdGhQb2ludGVyOiBmdW5jdGlvbiggaXRlbSApIHsKCQl2YXIgdmVydGljYWxEaXJlY3Rpb24sIGhvcml6b250YWxEaXJlY3Rpb24sCgkJCWlzT3ZlckVsZW1lbnRIZWlnaHQgPSAoIHRoaXMub3B0aW9ucy5heGlzID09PSAieCIgKSB8fAoJCQkJdGhpcy5faXNPdmVyQXhpcygKCQkJCQl0aGlzLnBvc2l0aW9uQWJzLnRvcCArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCwgaXRlbS50b3AsIGl0ZW0uaGVpZ2h0ICksCgkJCWlzT3ZlckVsZW1lbnRXaWR0aCA9ICggdGhpcy5vcHRpb25zLmF4aXMgPT09ICJ5IiApIHx8CgkJCQl0aGlzLl9pc092ZXJBeGlzKAoJCQkJCXRoaXMucG9zaXRpb25BYnMubGVmdCArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQsIGl0ZW0ubGVmdCwgaXRlbS53aWR0aCApLAoJCQlpc092ZXJFbGVtZW50ID0gaXNPdmVyRWxlbWVudEhlaWdodCAmJiBpc092ZXJFbGVtZW50V2lkdGg7CgoJCWlmICggIWlzT3ZlckVsZW1lbnQgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCXZlcnRpY2FsRGlyZWN0aW9uID0gdGhpcy5fZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uKCk7CgkJaG9yaXpvbnRhbERpcmVjdGlvbiA9IHRoaXMuX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uKCk7CgoJCXJldHVybiB0aGlzLmZsb2F0aW5nID8KCQkJKCAoIGhvcml6b250YWxEaXJlY3Rpb24gPT09ICJyaWdodCIgfHwgdmVydGljYWxEaXJlY3Rpb24gPT09ICJkb3duIiApID8gMiA6IDEgKQoJCQk6ICggdmVydGljYWxEaXJlY3Rpb24gJiYgKCB2ZXJ0aWNhbERpcmVjdGlvbiA9PT0gImRvd24iID8gMiA6IDEgKSApOwoKCX0sCgoJX2ludGVyc2VjdHNXaXRoU2lkZXM6IGZ1bmN0aW9uKCBpdGVtICkgewoKCQl2YXIgaXNPdmVyQm90dG9tSGFsZiA9IHRoaXMuX2lzT3ZlckF4aXMoIHRoaXMucG9zaXRpb25BYnMudG9wICsKCQkJCXRoaXMub2Zmc2V0LmNsaWNrLnRvcCwgaXRlbS50b3AgKyAoIGl0ZW0uaGVpZ2h0IC8gMiApLCBpdGVtLmhlaWdodCApLAoJCQlpc092ZXJSaWdodEhhbGYgPSB0aGlzLl9pc092ZXJBeGlzKCB0aGlzLnBvc2l0aW9uQWJzLmxlZnQgKwoJCQkJdGhpcy5vZmZzZXQuY2xpY2subGVmdCwgaXRlbS5sZWZ0ICsgKCBpdGVtLndpZHRoIC8gMiApLCBpdGVtLndpZHRoICksCgkJCXZlcnRpY2FsRGlyZWN0aW9uID0gdGhpcy5fZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uKCksCgkJCWhvcml6b250YWxEaXJlY3Rpb24gPSB0aGlzLl9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbigpOwoKCQlpZiAoIHRoaXMuZmxvYXRpbmcgJiYgaG9yaXpvbnRhbERpcmVjdGlvbiApIHsKCQkJcmV0dXJuICggKCBob3Jpem9udGFsRGlyZWN0aW9uID09PSAicmlnaHQiICYmIGlzT3ZlclJpZ2h0SGFsZiApIHx8CgkJCQkoIGhvcml6b250YWxEaXJlY3Rpb24gPT09ICJsZWZ0IiAmJiAhaXNPdmVyUmlnaHRIYWxmICkgKTsKCQl9IGVsc2UgewoJCQlyZXR1cm4gdmVydGljYWxEaXJlY3Rpb24gJiYgKCAoIHZlcnRpY2FsRGlyZWN0aW9uID09PSAiZG93biIgJiYgaXNPdmVyQm90dG9tSGFsZiApIHx8CgkJCQkoIHZlcnRpY2FsRGlyZWN0aW9uID09PSAidXAiICYmICFpc092ZXJCb3R0b21IYWxmICkgKTsKCQl9CgoJfSwKCglfZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uOiBmdW5jdGlvbigpIHsKCQl2YXIgZGVsdGEgPSB0aGlzLnBvc2l0aW9uQWJzLnRvcCAtIHRoaXMubGFzdFBvc2l0aW9uQWJzLnRvcDsKCQlyZXR1cm4gZGVsdGEgIT09IDAgJiYgKCBkZWx0YSA+IDAgPyAiZG93biIgOiAidXAiICk7Cgl9LAoKCV9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbjogZnVuY3Rpb24oKSB7CgkJdmFyIGRlbHRhID0gdGhpcy5wb3NpdGlvbkFicy5sZWZ0IC0gdGhpcy5sYXN0UG9zaXRpb25BYnMubGVmdDsKCQlyZXR1cm4gZGVsdGEgIT09IDAgJiYgKCBkZWx0YSA+IDAgPyAicmlnaHQiIDogImxlZnQiICk7Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCBldmVudCApIHsKCQl0aGlzLl9yZWZyZXNoSXRlbXMoIGV2ZW50ICk7CgkJdGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCk7CgkJdGhpcy5yZWZyZXNoUG9zaXRpb25zKCk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCV9jb25uZWN0V2l0aDogZnVuY3Rpb24oKSB7CgkJdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgkJcmV0dXJuIG9wdGlvbnMuY29ubmVjdFdpdGguY29uc3RydWN0b3IgPT09IFN0cmluZyA\/CgkJCVsgb3B0aW9ucy5jb25uZWN0V2l0aCBdIDoKCQkJb3B0aW9ucy5jb25uZWN0V2l0aDsKCX0sCgoJX2dldEl0ZW1zQXNqUXVlcnk6IGZ1bmN0aW9uKCBjb25uZWN0ZWQgKSB7CgoJCXZhciBpLCBqLCBjdXIsIGluc3QsCgkJCWl0ZW1zID0gW10sCgkJCXF1ZXJpZXMgPSBbXSwKCQkJY29ubmVjdFdpdGggPSB0aGlzLl9jb25uZWN0V2l0aCgpOwoKCQlpZiAoIGNvbm5lY3RXaXRoICYmIGNvbm5lY3RlZCApIHsKCQkJZm9yICggaSA9IGNvbm5lY3RXaXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkgewoJCQkJY3VyID0gJCggY29ubmVjdFdpdGhbIGkgXSwgdGhpcy5kb2N1bWVudFsgMCBdICk7CgkJCQlmb3IgKCBqID0gY3VyLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tICkgewoJCQkJCWluc3QgPSAkLmRhdGEoIGN1clsgaiBdLCB0aGlzLndpZGdldEZ1bGxOYW1lICk7CgkJCQkJaWYgKCBpbnN0ICYmIGluc3QgIT09IHRoaXMgJiYgIWluc3Qub3B0aW9ucy5kaXNhYmxlZCApIHsKCQkJCQkJcXVlcmllcy5wdXNoKCBbICQuaXNGdW5jdGlvbiggaW5zdC5vcHRpb25zLml0ZW1zICkgPwoJCQkJCQkJaW5zdC5vcHRpb25zLml0ZW1zLmNhbGwoIGluc3QuZWxlbWVudCApIDoKCQkJCQkJCSQoIGluc3Qub3B0aW9ucy5pdGVtcywgaW5zdC5lbGVtZW50ICkKCQkJCQkJCQkubm90KCAiLnVpLXNvcnRhYmxlLWhlbHBlciIgKQoJCQkJCQkJCS5ub3QoICIudWktc29ydGFibGUtcGxhY2Vob2xkZXIiICksIGluc3QgXSApOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJcXVlcmllcy5wdXNoKCBbICQuaXNGdW5jdGlvbiggdGhpcy5vcHRpb25zLml0ZW1zICkgPwoJCQl0aGlzLm9wdGlvbnMuaXRlbXMKCQkJCS5jYWxsKCB0aGlzLmVsZW1lbnQsIG51bGwsIHsgb3B0aW9uczogdGhpcy5vcHRpb25zLCBpdGVtOiB0aGlzLmN1cnJlbnRJdGVtIH0gKSA6CgkJCSQoIHRoaXMub3B0aW9ucy5pdGVtcywgdGhpcy5lbGVtZW50ICkKCQkJCS5ub3QoICIudWktc29ydGFibGUtaGVscGVyIiApCgkJCQkubm90KCAiLnVpLXNvcnRhYmxlLXBsYWNlaG9sZGVyIiApLCB0aGlzIF0gKTsKCgkJZnVuY3Rpb24gYWRkSXRlbXMoKSB7CgkJCWl0ZW1zLnB1c2goIHRoaXMgKTsKCQl9CgkJZm9yICggaSA9IHF1ZXJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7CgkJCXF1ZXJpZXNbIGkgXVsgMCBdLmVhY2goIGFkZEl0ZW1zICk7CgkJfQoKCQlyZXR1cm4gJCggaXRlbXMgKTsKCgl9LAoKCV9yZW1vdmVDdXJyZW50c0Zyb21JdGVtczogZnVuY3Rpb24oKSB7CgoJCXZhciBsaXN0ID0gdGhpcy5jdXJyZW50SXRlbS5maW5kKCAiOmRhdGEoIiArIHRoaXMud2lkZ2V0TmFtZSArICItaXRlbSkiICk7CgoJCXRoaXMuaXRlbXMgPSAkLmdyZXAoIHRoaXMuaXRlbXMsIGZ1bmN0aW9uKCBpdGVtICkgewoJCQlmb3IgKCB2YXIgaiA9IDA7IGogPCBsaXN0Lmxlbmd0aDsgaisrICkgewoJCQkJaWYgKCBsaXN0WyBqIF0gPT09IGl0ZW0uaXRlbVsgMCBdICkgewoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gdHJ1ZTsKCQl9ICk7CgoJfSwKCglfcmVmcmVzaEl0ZW1zOiBmdW5jdGlvbiggZXZlbnQgKSB7CgoJCXRoaXMuaXRlbXMgPSBbXTsKCQl0aGlzLmNvbnRhaW5lcnMgPSBbIHRoaXMgXTsKCgkJdmFyIGksIGosIGN1ciwgaW5zdCwgdGFyZ2V0RGF0YSwgX3F1ZXJpZXMsIGl0ZW0sIHF1ZXJpZXNMZW5ndGgsCgkJCWl0ZW1zID0gdGhpcy5pdGVtcywKCQkJcXVlcmllcyA9IFsgWyAkLmlzRnVuY3Rpb24oIHRoaXMub3B0aW9ucy5pdGVtcyApID8KCQkJCXRoaXMub3B0aW9ucy5pdGVtcy5jYWxsKCB0aGlzLmVsZW1lbnRbIDAgXSwgZXZlbnQsIHsgaXRlbTogdGhpcy5jdXJyZW50SXRlbSB9ICkgOgoJCQkJJCggdGhpcy5vcHRpb25zLml0ZW1zLCB0aGlzLmVsZW1lbnQgKSwgdGhpcyBdIF0sCgkJCWNvbm5lY3RXaXRoID0gdGhpcy5fY29ubmVjdFdpdGgoKTsKCgkJLy9TaG91bGRuJ3QgYmUgcnVuIHRoZSBmaXJzdCB0aW1lIHRocm91Z2ggZHVlIHRvIG1hc3NpdmUgc2xvdy1kb3duCgkJaWYgKCBjb25uZWN0V2l0aCAmJiB0aGlzLnJlYWR5ICkgewoJCQlmb3IgKCBpID0gY29ubmVjdFdpdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7CgkJCQljdXIgPSAkKCBjb25uZWN0V2l0aFsgaSBdLCB0aGlzLmRvY3VtZW50WyAwIF0gKTsKCQkJCWZvciAoIGogPSBjdXIubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0gKSB7CgkJCQkJaW5zdCA9ICQuZGF0YSggY3VyWyBqIF0sIHRoaXMud2lkZ2V0RnVsbE5hbWUgKTsKCQkJCQlpZiAoIGluc3QgJiYgaW5zdCAhPT0gdGhpcyAmJiAhaW5zdC5vcHRpb25zLmRpc2FibGVkICkgewoJCQkJCQlxdWVyaWVzLnB1c2goIFsgJC5pc0Z1bmN0aW9uKCBpbnN0Lm9wdGlvbnMuaXRlbXMgKSA\/CgkJCQkJCQlpbnN0Lm9wdGlvbnMuaXRlbXMKCQkJCQkJCQkuY2FsbCggaW5zdC5lbGVtZW50WyAwIF0sIGV2ZW50LCB7IGl0ZW06IHRoaXMuY3VycmVudEl0ZW0gfSApIDoKCQkJCQkJCSQoIGluc3Qub3B0aW9ucy5pdGVtcywgaW5zdC5lbGVtZW50ICksIGluc3QgXSApOwoJCQkJCQl0aGlzLmNvbnRhaW5lcnMucHVzaCggaW5zdCApOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJZm9yICggaSA9IHF1ZXJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7CgkJCXRhcmdldERhdGEgPSBxdWVyaWVzWyBpIF1bIDEgXTsKCQkJX3F1ZXJpZXMgPSBxdWVyaWVzWyBpIF1bIDAgXTsKCgkJCWZvciAoIGogPSAwLCBxdWVyaWVzTGVuZ3RoID0gX3F1ZXJpZXMubGVuZ3RoOyBqIDwgcXVlcmllc0xlbmd0aDsgaisrICkgewoJCQkJaXRlbSA9ICQoIF9xdWVyaWVzWyBqIF0gKTsKCgkJCQkvLyBEYXRhIGZvciB0YXJnZXQgY2hlY2tpbmcgKG1vdXNlIG1hbmFnZXIpCgkJCQlpdGVtLmRhdGEoIHRoaXMud2lkZ2V0TmFtZSArICItaXRlbSIsIHRhcmdldERhdGEgKTsKCgkJCQlpdGVtcy5wdXNoKCB7CgkJCQkJaXRlbTogaXRlbSwKCQkJCQlpbnN0YW5jZTogdGFyZ2V0RGF0YSwKCQkJCQl3aWR0aDogMCwgaGVpZ2h0OiAwLAoJCQkJCWxlZnQ6IDAsIHRvcDogMAoJCQkJfSApOwoJCQl9CgkJfQoKCX0sCgoJcmVmcmVzaFBvc2l0aW9uczogZnVuY3Rpb24oIGZhc3QgKSB7CgoJCS8vIERldGVybWluZSB3aGV0aGVyIGl0ZW1zIGFyZSBiZWluZyBkaXNwbGF5ZWQgaG9yaXpvbnRhbGx5CgkJdGhpcy5mbG9hdGluZyA9IHRoaXMuaXRlbXMubGVuZ3RoID8KCQkJdGhpcy5vcHRpb25zLmF4aXMgPT09ICJ4IiB8fCB0aGlzLl9pc0Zsb2F0aW5nKCB0aGlzLml0ZW1zWyAwIF0uaXRlbSApIDoKCQkJZmFsc2U7CgoJCS8vVGhpcyBoYXMgdG8gYmUgcmVkb25lIGJlY2F1c2UgZHVlIHRvIHRoZSBpdGVtIGJlaW5nIG1vdmVkIG91dC9pbnRvIHRoZSBvZmZzZXRQYXJlbnQsCgkJLy8gdGhlIG9mZnNldFBhcmVudCdzIHBvc2l0aW9uIHdpbGwgY2hhbmdlCgkJaWYgKCB0aGlzLm9mZnNldFBhcmVudCAmJiB0aGlzLmhlbHBlciApIHsKCQkJdGhpcy5vZmZzZXQucGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCk7CgkJfQoKCQl2YXIgaSwgaXRlbSwgdCwgcDsKCgkJZm9yICggaSA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7CgkJCWl0ZW0gPSB0aGlzLml0ZW1zWyBpIF07CgoJCQkvL1dlIGlnbm9yZSBjYWxjdWxhdGluZyBwb3NpdGlvbnMgb2YgYWxsIGNvbm5lY3RlZCBjb250YWluZXJzIHdoZW4gd2UncmUgbm90IG92ZXIgdGhlbQoJCQlpZiAoIGl0ZW0uaW5zdGFuY2UgIT09IHRoaXMuY3VycmVudENvbnRhaW5lciAmJiB0aGlzLmN1cnJlbnRDb250YWluZXIgJiYKCQkJCQlpdGVtLml0ZW1bIDAgXSAhPT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICkgewoJCQkJY29udGludWU7CgkJCX0KCgkJCXQgPSB0aGlzLm9wdGlvbnMudG9sZXJhbmNlRWxlbWVudCA\\/CgkJCQkkKCBvLmhlbHBlci5hcHBseSggdGhpcy5lbGVtZW50WyAwIF0sIFsgZXZlbnQsIHRoaXMuY3VycmVudEl0ZW0gXSApICkgOgoJCQkJKCBvLmhlbHBlciA9PT0gImNsb25lIiA\/IHRoaXMuY3VycmVudEl0ZW0uY2xvbmUoKSA6IHRoaXMuY3VycmVudEl0ZW0gKTsKCgkJLy9BZGQgdGhlIGhlbHBlciB0byB0aGUgRE9NIGlmIHRoYXQgZGlkbid0IGhhcHBlbiBhbHJlYWR5CgkJaWYgKCAhaGVscGVyLnBhcmVudHMoICJib2R5IiApLmxlbmd0aCApIHsKCQkJJCggby5hcHBlbmRUbyAhPT0gInBhcmVudCIgPwoJCQkJby5hcHBlbmRUbyA6CgkJCQl0aGlzLmN1cnJlbnRJdGVtWyAwIF0ucGFyZW50Tm9kZSApWyAwIF0uYXBwZW5kQ2hpbGQoIGhlbHBlclsgMCBdICk7CgkJfQoKCQlpZiAoIGhlbHBlclsgMCBdID09PSB0aGlzLmN1cnJlbnRJdGVtWyAwIF0gKSB7CgkJCXRoaXMuX3N0b3JlZENTUyA9IHsKCQkJCXdpZHRoOiB0aGlzLmN1cnJlbnRJdGVtWyAwIF0uc3R5bGUud2lkdGgsCgkJCQloZWlnaHQ6IHRoaXMuY3VycmVudEl0ZW1bIDAgXS5zdHlsZS5oZWlnaHQsCgkJCQlwb3NpdGlvbjogdGhpcy5jdXJyZW50SXRlbS5jc3MoICJwb3NpdGlvbiIgKSwKCQkJCXRvcDogdGhpcy5jdXJyZW50SXRlbS5jc3MoICJ0b3AiICksCgkJCQlsZWZ0OiB0aGlzLmN1cnJlbnRJdGVtLmNzcyggImxlZnQiICkKCQkJfTsKCQl9CgoJCWlmICggIWhlbHBlclsgMCBdLnN0eWxlLndpZHRoIHx8IG8uZm9yY2VIZWxwZXJTaXplICkgewoJCQloZWxwZXIud2lkdGgoIHRoaXMuY3VycmVudEl0ZW0ud2lkdGgoKSApOwoJCX0KCQlpZiAoICFoZWxwZXJbIDAgXS5zdHlsZS5oZWlnaHQgfHwgby5mb3JjZUhlbHBlclNpemUgKSB7CgkJCWhlbHBlci5oZWlnaHQoIHRoaXMuY3VycmVudEl0ZW0uaGVpZ2h0KCkgKTsKCQl9CgoJCXJldHVybiBoZWxwZXI7CgoJfSwKCglfYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcjogZnVuY3Rpb24oIG9iaiApIHsKCQlpZiAoIHR5cGVvZiBvYmogPT09ICJzdHJpbmciICkgewoJCQlvYmogPSBvYmouc3BsaXQoICIgIiApOwoJCX0KCQlpZiAoICQuaXNBcnJheSggb2JqICkgKSB7CgkJCW9iaiA9IHsgbGVmdDogK29ialsgMCBdLCB0b3A6ICtvYmpbIDEgXSB8fCAwIH07CgkJfQoJCWlmICggImxlZnQiIGluIG9iaiApIHsKCQkJdGhpcy5vZmZzZXQuY2xpY2subGVmdCA9IG9iai5sZWZ0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7CgkJfQoJCWlmICggInJpZ2h0IiBpbiBvYmogKSB7CgkJCXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gb2JqLnJpZ2h0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7CgkJfQoJCWlmICggInRvcCIgaW4gb2JqICkgewoJCQl0aGlzLm9mZnNldC5jbGljay50b3AgPSBvYmoudG9wICsgdGhpcy5tYXJnaW5zLnRvcDsKCQl9CgkJaWYgKCAiYm90dG9tIiBpbiBvYmogKSB7CgkJCXRoaXMub2Zmc2V0LmNsaWNrLnRvcCA9IHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gb2JqLmJvdHRvbSArIHRoaXMubWFyZ2lucy50b3A7CgkJfQoJfSwKCglfZ2V0UGFyZW50T2Zmc2V0OiBmdW5jdGlvbigpIHsKCgkJLy9HZXQgdGhlIG9mZnNldFBhcmVudCBhbmQgY2FjaGUgaXRzIHBvc2l0aW9uCgkJdGhpcy5vZmZzZXRQYXJlbnQgPSB0aGlzLmhlbHBlci5vZmZzZXRQYXJlbnQoKTsKCQl2YXIgcG8gPSB0aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKTsKCgkJLy8gVGhpcyBpcyBhIHNwZWNpYWwgY2FzZSB3aGVyZSB3ZSBuZWVkIHRvIG1vZGlmeSBhIG9mZnNldCBjYWxjdWxhdGVkIG9uIHN0YXJ0LCBzaW5jZSB0aGUKCQkvLyBmb2xsb3dpbmcgaGFwcGVuZWQ6CgkJLy8gMS4gVGhlIHBvc2l0aW9uIG9mIHRoZSBoZWxwZXIgaXMgYWJzb2x1dGUsIHNvIGl0J3MgcG9zaXRpb24gaXMgY2FsY3VsYXRlZCBiYXNlZCBvbiB0aGUKCQkvLyBuZXh0IHBvc2l0aW9uZWQgcGFyZW50CgkJLy8gMi4gVGhlIGFjdHVhbCBvZmZzZXQgcGFyZW50IGlzIGEgY2hpbGQgb2YgdGhlIHNjcm9sbCBwYXJlbnQsIGFuZCB0aGUgc2Nyb2xsIHBhcmVudCBpc24ndAoJCS8vIHRoZSBkb2N1bWVudCwgd2hpY2ggbWVhbnMgdGhhdCB0aGUgc2Nyb2xsIGlzIGluY2x1ZGVkIGluIHRoZSBpbml0aWFsIGNhbGN1bGF0aW9uIG9mIHRoZQoJCS8vIG9mZnNldCBvZiB0aGUgcGFyZW50LCBhbmQgbmV2ZXIgcmVjYWxjdWxhdGVkIHVwb24gZHJhZwoJCWlmICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gImFic29sdXRlIiAmJiB0aGlzLnNjcm9sbFBhcmVudFsgMCBdICE9PSB0aGlzLmRvY3VtZW50WyAwIF0gJiYKCQkJCSQuY29udGFpbnMoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0sIHRoaXMub2Zmc2V0UGFyZW50WyAwIF0gKSApIHsKCQkJcG8ubGVmdCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk7CgkJCXBvLnRvcCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKTsKCQl9CgoJCS8vIFRoaXMgbmVlZHMgdG8gYmUgYWN0dWFsbHkgZG9uZSBmb3IgYWxsIGJyb3dzZXJzLCBzaW5jZSBwYWdlWC9wYWdlWSBpbmNsdWRlcyB0aGlzCgkJLy8gaW5mb3JtYXRpb24gd2l0aCBhbiB1Z2x5IElFIGZpeAoJCWlmICggdGhpcy5vZmZzZXRQYXJlbnRbIDAgXSA9PT0gdGhpcy5kb2N1bWVudFsgMCBdLmJvZHkgfHwKCQkJCSggdGhpcy5vZmZzZXRQYXJlbnRbIDAgXS50YWdOYW1lICYmCgkJCQl0aGlzLm9mZnNldFBhcmVudFsgMCBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gImh0bWwiICYmICQudWkuaWUgKSApIHsKCQkJcG8gPSB7IHRvcDogMCwgbGVmdDogMCB9OwoJCX0KCgkJcmV0dXJuIHsKCQkJdG9wOiBwby50b3AgKyAoIHBhcnNlSW50KCB0aGlzLm9mZnNldFBhcmVudC5jc3MoICJib3JkZXJUb3BXaWR0aCIgKSwgMTAgKSB8fCAwICksCgkJCWxlZnQ6IHBvLmxlZnQgKyAoIHBhcnNlSW50KCB0aGlzLm9mZnNldFBhcmVudC5jc3MoICJib3JkZXJMZWZ0V2lkdGgiICksIDEwICkgfHwgMCApCgkJfTsKCgl9LAoKCV9nZXRSZWxhdGl2ZU9mZnNldDogZnVuY3Rpb24oKSB7CgoJCWlmICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gInJlbGF0aXZlIiApIHsKCQkJdmFyIHAgPSB0aGlzLmN1cnJlbnRJdGVtLnBvc2l0aW9uKCk7CgkJCXJldHVybiB7CgkJCQl0b3A6IHAudG9wIC0gKCBwYXJzZUludCggdGhpcy5oZWxwZXIuY3NzKCAidG9wIiApLCAxMCApIHx8IDAgKSArCgkJCQkJdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCksCgkJCQlsZWZ0OiBwLmxlZnQgLSAoIHBhcnNlSW50KCB0aGlzLmhlbHBlci5jc3MoICJsZWZ0IiApLCAxMCApIHx8IDAgKSArCgkJCQkJdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpCgkJCX07CgkJfSBlbHNlIHsKCQkJcmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07CgkJfQoKCX0sCgoJX2NhY2hlTWFyZ2luczogZnVuY3Rpb24oKSB7CgkJdGhpcy5tYXJnaW5zID0gewoJCQlsZWZ0OiAoIHBhcnNlSW50KCB0aGlzLmN1cnJlbnRJdGVtLmNzcyggIm1hcmdpbkxlZnQiICksIDEwICkgfHwgMCApLAoJCQl0b3A6ICggcGFyc2VJbnQoIHRoaXMuY3VycmVudEl0ZW0uY3NzKCAibWFyZ2luVG9wIiApLCAxMCApIHx8IDAgKQoJCX07Cgl9LAoKCV9jYWNoZUhlbHBlclByb3BvcnRpb25zOiBmdW5jdGlvbigpIHsKCQl0aGlzLmhlbHBlclByb3BvcnRpb25zID0gewoJCQl3aWR0aDogdGhpcy5oZWxwZXIub3V0ZXJXaWR0aCgpLAoJCQloZWlnaHQ6IHRoaXMuaGVscGVyLm91dGVySGVpZ2h0KCkKCQl9OwoJfSwKCglfc2V0Q29udGFpbm1lbnQ6IGZ1bmN0aW9uKCkgewoKCQl2YXIgY2UsIGNvLCBvdmVyLAoJCQlvID0gdGhpcy5vcHRpb25zOwoJCWlmICggby5jb250YWlubWVudCA9PT0gInBhcmVudCIgKSB7CgkJCW8uY29udGFpbm1lbnQgPSB0aGlzLmhlbHBlclsgMCBdLnBhcmVudE5vZGU7CgkJfQoJCWlmICggby5jb250YWlubWVudCA9PT0gImRvY3VtZW50IiB8fCBvLmNvbnRhaW5tZW50ID09PSAid2luZG93IiApIHsKCQkJdGhpcy5jb250YWlubWVudCA9IFsKCQkJCTAgLSB0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0IC0gdGhpcy5vZmZzZXQucGFyZW50LmxlZnQsCgkJCQkwIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC0gdGhpcy5vZmZzZXQucGFyZW50LnRvcCwKCQkJCW8uY29udGFpbm1lbnQgPT09ICJkb2N1bWVudCIgPwoJCQkJCXRoaXMuZG9jdW1lbnQud2lkdGgoKSA6CgkJCQkJdGhpcy53aW5kb3cud2lkdGgoKSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSB0aGlzLm1hcmdpbnMubGVmdCwKCQkJCSggby5jb250YWlubWVudCA9PT0gImRvY3VtZW50IiA\/CgkJCQkJKCB0aGlzLmRvY3VtZW50LmhlaWdodCgpIHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQgKSA6CgkJCQkJdGhpcy53aW5kb3cuaGVpZ2h0KCkgfHwgdGhpcy5kb2N1bWVudFsgMCBdLmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQKCQkJCSkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIHRoaXMubWFyZ2lucy50b3AKCQkJXTsKCQl9CgoJCWlmICggISggL14oZG9jdW1lbnR8d2luZG93fHBhcmVudCkkLyApLnRlc3QoIG8uY29udGFpbm1lbnQgKSApIHsKCQkJY2UgPSAkKCBvLmNvbnRhaW5tZW50IClbIDAgXTsKCQkJY28gPSAkKCBvLmNvbnRhaW5tZW50ICkub2Zmc2V0KCk7CgkJCW92ZXIgPSAoICQoIGNlICkuY3NzKCAib3ZlcmZsb3ciICkgIT09ICJoaWRkZW4iICk7CgoJCQl0aGlzLmNvbnRhaW5tZW50ID0gWwoJCQkJY28ubGVmdCArICggcGFyc2VJbnQoICQoIGNlICkuY3NzKCAiYm9yZGVyTGVmdFdpZHRoIiApLCAxMCApIHx8IDAgKSArCgkJCQkJKCBwYXJzZUludCggJCggY2UgKS5jc3MoICJwYWRkaW5nTGVmdCIgKSwgMTAgKSB8fCAwICkgLSB0aGlzLm1hcmdpbnMubGVmdCwKCQkJCWNvLnRvcCArICggcGFyc2VJbnQoICQoIGNlICkuY3NzKCAiYm9yZGVyVG9wV2lkdGgiICksIDEwICkgfHwgMCApICsKCQkJCQkoIHBhcnNlSW50KCAkKCBjZSApLmNzcyggInBhZGRpbmdUb3AiICksIDEwICkgfHwgMCApIC0gdGhpcy5tYXJnaW5zLnRvcCwKCQkJCWNvLmxlZnQgKyAoIG92ZXIgPyBNYXRoLm1heCggY2Uuc2Nyb2xsV2lkdGgsIGNlLm9mZnNldFdpZHRoICkgOiBjZS5vZmZzZXRXaWR0aCApIC0KCQkJCQkoIHBhcnNlSW50KCAkKCBjZSApLmNzcyggImJvcmRlckxlZnRXaWR0aCIgKSwgMTAgKSB8fCAwICkgLQoJCQkJCSggcGFyc2VJbnQoICQoIGNlICkuY3NzKCAicGFkZGluZ1JpZ2h0IiApLCAxMCApIHx8IDAgKSAtCgkJCQkJdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LAoJCQkJY28udG9wICsgKCBvdmVyID8gTWF0aC5tYXgoIGNlLnNjcm9sbEhlaWdodCwgY2Uub2Zmc2V0SGVpZ2h0ICkgOiBjZS5vZmZzZXRIZWlnaHQgKSAtCgkJCQkJKCBwYXJzZUludCggJCggY2UgKS5jc3MoICJib3JkZXJUb3BXaWR0aCIgKSwgMTAgKSB8fCAwICkgLQoJCQkJCSggcGFyc2VJbnQoICQoIGNlICkuY3NzKCAicGFkZGluZ0JvdHRvbSIgKSwgMTAgKSB8fCAwICkgLQoJCQkJCXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcAoJCQldOwoJCX0KCgl9LAoKCV9jb252ZXJ0UG9zaXRpb25UbzogZnVuY3Rpb24oIGQsIHBvcyApIHsKCgkJaWYgKCAhcG9zICkgewoJCQlwb3MgPSB0aGlzLnBvc2l0aW9uOwoJCX0KCQl2YXIgbW9kID0gZCA9PT0gImFic29sdXRlIiA\/IDEgOiAtMSwKCQkJc2Nyb2xsID0gdGhpcy5jc3NQb3NpdGlvbiA9PT0gImFic29sdXRlIiAmJgoJCQkJISggdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSAhPT0gdGhpcy5kb2N1bWVudFsgMCBdICYmCgkJCQkkLmNvbnRhaW5zKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdLCB0aGlzLm9mZnNldFBhcmVudFsgMCBdICkgKSA\/CgkJCQkJdGhpcy5vZmZzZXRQYXJlbnQgOgoJCQkJCXRoaXMuc2Nyb2xsUGFyZW50LAoJCQlzY3JvbGxJc1Jvb3ROb2RlID0gKCAvKGh0bWx8Ym9keSkvaSApLnRlc3QoIHNjcm9sbFsgMCBdLnRhZ05hbWUgKTsKCgkJcmV0dXJuIHsKCQkJdG9wOiAoCgoJCQkJLy8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uCgkJCQlwb3MudG9wCSsKCgkJCQkvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnQKCQkJCXRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAqIG1vZCArCgoJCQkJLy8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcikKCQkJCXRoaXMub2Zmc2V0LnBhcmVudC50b3AgKiBtb2QgLQoJCQkJKCAoIHRoaXMuY3NzUG9zaXRpb24gPT09ICJmaXhlZCIgPwoJCQkJCS10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSA6CgkJCQkJKCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxUb3AoKSApICkgKiBtb2QgKQoJCQkpLAoJCQlsZWZ0OiAoCgoJCQkJLy8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uCgkJCQlwb3MubGVmdCArCgoJCQkJLy8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50CgkJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0ICogbW9kICsKCgkJCQkvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKQoJCQkJdGhpcy5vZmZzZXQucGFyZW50LmxlZnQgKiBtb2QJLQoJCQkJKCAoIHRoaXMuY3NzUG9zaXRpb24gPT09ICJmaXhlZCIgPwoJCQkJCS10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgOiBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6CgkJCQkJc2Nyb2xsLnNjcm9sbExlZnQoKSApICogbW9kICkKCQkJKQoJCX07CgoJfSwKCglfZ2VuZXJhdGVQb3NpdGlvbjogZnVuY3Rpb24oIGV2ZW50ICkgewoKCQl2YXIgdG9wLCBsZWZ0LAoJCQlvID0gdGhpcy5vcHRpb25zLAoJCQlwYWdlWCA9IGV2ZW50LnBhZ2VYLAoJCQlwYWdlWSA9IGV2ZW50LnBhZ2VZLAoJCQlzY3JvbGwgPSB0aGlzLmNzc1Bvc2l0aW9uID09PSAiYWJzb2x1dGUiICYmCgkJCQkhKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdICE9PSB0aGlzLmRvY3VtZW50WyAwIF0gJiYKCQkJCSQuY29udGFpbnMoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0sIHRoaXMub2Zmc2V0UGFyZW50WyAwIF0gKSApID8KCQkJCQl0aGlzLm9mZnNldFBhcmVudCA6CgkJCQkJdGhpcy5zY3JvbGxQYXJlbnQsCgkJCQlzY3JvbGxJc1Jvb3ROb2RlID0gKCAvKGh0bWx8Ym9keSkvaSApLnRlc3QoIHNjcm9sbFsgMCBdLnRhZ05hbWUgKTsKCgkJLy8gVGhpcyBpcyBhbm90aGVyIHZlcnkgd2VpcmQgc3BlY2lhbCBjYXNlIHRoYXQgb25seSBoYXBwZW5zIGZvciByZWxhdGl2ZSBlbGVtZW50czoKCQkvLyAxLiBJZiB0aGUgY3NzIHBvc2l0aW9uIGlzIHJlbGF0aXZlCgkJLy8gMi4gYW5kIHRoZSBzY3JvbGwgcGFyZW50IGlzIHRoZSBkb2N1bWVudCBvciBzaW1pbGFyIHRvIHRoZSBvZmZzZXQgcGFyZW50CgkJLy8gd2UgaGF2ZSB0byByZWZyZXNoIHRoZSByZWxhdGl2ZSBvZmZzZXQgZHVyaW5nIHRoZSBzY3JvbGwgc28gdGhlcmUgYXJlIG5vIGp1bXBzCgkJaWYgKCB0aGlzLmNzc1Bvc2l0aW9uID09PSAicmVsYXRpdmUiICYmICEoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gIT09IHRoaXMuZG9jdW1lbnRbIDAgXSAmJgoJCQkJdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSAhPT0gdGhpcy5vZmZzZXRQYXJlbnRbIDAgXSApICkgewoJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZSA9IHRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KCk7CgkJfQoKCQkvKgoJCSAqIC0gUG9zaXRpb24gY29uc3RyYWluaW5nIC0KCQkgKiBDb25zdHJhaW4gdGhlIHBvc2l0aW9uIHRvIGEgbWl4IG9mIGdyaWQsIGNvbnRhaW5tZW50LgoJCSAqLwoKCQlpZiAoIHRoaXMub3JpZ2luYWxQb3NpdGlvbiApIHsgLy9JZiB3ZSBhcmUgbm90IGRyYWdnaW5nIHlldCwgd2Ugd29uJ3QgY2hlY2sgZm9yIG9wdGlvbnMKCgkJCWlmICggdGhpcy5jb250YWlubWVudCApIHsKCQkJCWlmICggZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0IDwgdGhpcy5jb250YWlubWVudFsgMCBdICkgewoJCQkJCXBhZ2VYID0gdGhpcy5jb250YWlubWVudFsgMCBdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdDsKCQkJCX0KCQkJCWlmICggZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPCB0aGlzLmNvbnRhaW5tZW50WyAxIF0gKSB7CgkJCQkJcGFnZVkgPSB0aGlzLmNvbnRhaW5tZW50WyAxIF0gKyB0aGlzLm9mZnNldC5jbGljay50b3A7CgkJCQl9CgkJCQlpZiAoIGV2ZW50LnBhZ2VYIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA+IHRoaXMuY29udGFpbm1lbnRbIDIgXSApIHsKCQkJCQlwYWdlWCA9IHRoaXMuY29udGFpbm1lbnRbIDIgXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ7CgkJCQl9CgkJCQlpZiAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID4gdGhpcy5jb250YWlubWVudFsgMyBdICkgewoJCQkJCXBhZ2VZID0gdGhpcy5jb250YWlubWVudFsgMyBdICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wOwoJCQkJfQoJCQl9CgoJCQlpZiAoIG8uZ3JpZCApIHsKCQkJCXRvcCA9IHRoaXMub3JpZ2luYWxQYWdlWSArIE1hdGgucm91bmQoICggcGFnZVkgLSB0aGlzLm9yaWdpbmFsUGFnZVkgKSAvCgkJCQkJby5ncmlkWyAxIF0gKSAqIG8uZ3JpZFsgMSBdOwoJCQkJcGFnZVkgPSB0aGlzLmNvbnRhaW5tZW50ID8KCQkJCQkoICggdG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID49IHRoaXMuY29udGFpbm1lbnRbIDEgXSAmJgoJCQkJCQl0b3AgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPD0gdGhpcy5jb250YWlubWVudFsgMyBdICkgPwoJCQkJCQkJdG9wIDoKCQkJCQkJCSggKCB0b3AgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPj0gdGhpcy5jb250YWlubWVudFsgMSBdICkgPwoJCQkJCQkJCXRvcCAtIG8uZ3JpZFsgMSBdIDogdG9wICsgby5ncmlkWyAxIF0gKSApIDoKCQkJCQkJCQl0b3A7CgoJCQkJbGVmdCA9IHRoaXMub3JpZ2luYWxQYWdlWCArIE1hdGgucm91bmQoICggcGFnZVggLSB0aGlzLm9yaWdpbmFsUGFnZVggKSAvCgkJCQkJby5ncmlkWyAwIF0gKSAqIG8uZ3JpZFsgMCBdOwoJCQkJcGFnZVggPSB0aGlzLmNvbnRhaW5tZW50ID8KCQkJCQkoICggbGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPj0gdGhpcy5jb250YWlubWVudFsgMCBdICYmCgkJCQkJCWxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0IDw9IHRoaXMuY29udGFpbm1lbnRbIDIgXSApID8KCQkJCQkJCWxlZnQgOgoJCQkJCQkJKCAoIGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID49IHRoaXMuY29udGFpbm1lbnRbIDAgXSApID8KCQkJCQkJCQlsZWZ0IC0gby5ncmlkWyAwIF0gOiBsZWZ0ICsgby5ncmlkWyAwIF0gKSApIDoKCQkJCQkJCQlsZWZ0OwoJCQl9CgoJCX0KCgkJcmV0dXJuIHsKCQkJdG9wOiAoCgoJCQkJLy8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uCgkJCQlwYWdlWSAtCgoJCQkJLy8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudCkKCQkJCXRoaXMub2Zmc2V0LmNsaWNrLnRvcCAtCgoJCQkJLy8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50CgkJCQl0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AgLQoKCQkJCS8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpCgkJCQl0aGlzLm9mZnNldC5wYXJlbnQudG9wICsKCQkJCSggKCB0aGlzLmNzc1Bvc2l0aW9uID09PSAiZml4ZWQiID8KCQkJCQktdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCkgOgoJCQkJCSggc2Nyb2xsSXNSb290Tm9kZSA\/IDAgOiBzY3JvbGwuc2Nyb2xsVG9wKCkgKSApICkKCQkJKSwKCQkJbGVmdDogKAoKCQkJCS8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvbgoJCQkJcGFnZVggLQoKCQkJCS8vIENsaWNrIG9mZnNldCAocmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQpCgkJCQl0aGlzLm9mZnNldC5jbGljay5sZWZ0IC0KCgkJCQkvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnQKCQkJCXRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgLQoKCQkJCS8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpCgkJCQl0aGlzLm9mZnNldC5wYXJlbnQubGVmdCArCgkJCQkoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gImZpeGVkIiA\/CgkJCQkJLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKSA6CgkJCQkJc2Nyb2xsSXNSb290Tm9kZSA\/IDAgOiBzY3JvbGwuc2Nyb2xsTGVmdCgpICkgKQoJCQkpCgkJfTsKCgl9LAoKCV9yZWFycmFuZ2U6IGZ1bmN0aW9uKCBldmVudCwgaSwgYSwgaGFyZFJlZnJlc2ggKSB7CgoJCWEgPyBhWyAwIF0uYXBwZW5kQ2hpbGQoIHRoaXMucGxhY2Vob2xkZXJbIDAgXSApIDoKCQkJaS5pdGVtWyAwIF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIHRoaXMucGxhY2Vob2xkZXJbIDAgXSwKCQkJCSggdGhpcy5kaXJlY3Rpb24gPT09ICJkb3duIiA\/IGkuaXRlbVsgMCBdIDogaS5pdGVtWyAwIF0ubmV4dFNpYmxpbmcgKSApOwoKCQkvL1ZhcmlvdXMgdGhpbmdzIGRvbmUgaGVyZSB0byBpbXByb3ZlIHRoZSBwZXJmb3JtYW5jZToKCQkvLyAxLiB3ZSBjcmVhdGUgYSBzZXRUaW1lb3V0LCB0aGF0IGNhbGxzIHJlZnJlc2hQb3NpdGlvbnMKCQkvLyAyLiBvbiB0aGUgaW5zdGFuY2UsIHdlIGhhdmUgYSBjb3VudGVyIHZhcmlhYmxlLCB0aGF0IGdldCdzIGhpZ2hlciBhZnRlciBldmVyeSBhcHBlbmQKCQkvLyAzLiBvbiB0aGUgbG9jYWwgc2NvcGUsIHdlIGNvcHkgdGhlIGNvdW50ZXIgdmFyaWFibGUsIGFuZCBjaGVjayBpbiB0aGUgdGltZW91dCwKCQkvLyBpZiBpdCdzIHN0aWxsIHRoZSBzYW1lCgkJLy8gNC4gdGhpcyBsZXRzIG9ubHkgdGhlIGxhc3QgYWRkaXRpb24gdG8gdGhlIHRpbWVvdXQgc3RhY2sgdGhyb3VnaAoJCXRoaXMuY291bnRlciA9IHRoaXMuY291bnRlciA\/ICsrdGhpcy5jb3VudGVyIDogMTsKCQl2YXIgY291bnRlciA9IHRoaXMuY291bnRlcjsKCgkJdGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkgewoJCQlpZiAoIGNvdW50ZXIgPT09IHRoaXMuY291bnRlciApIHsKCgkJCQkvL1ByZWNvbXB1dGUgYWZ0ZXIgZWFjaCBET00gaW5zZXJ0aW9uLCBOT1Qgb24gbW91c2Vtb3ZlCgkJCQl0aGlzLnJlZnJlc2hQb3NpdGlvbnMoICFoYXJkUmVmcmVzaCApOwoJCQl9CgkJfSApOwoKCX0sCgoJX2NsZWFyOiBmdW5jdGlvbiggZXZlbnQsIG5vUHJvcGFnYXRpb24gKSB7CgoJCXRoaXMucmV2ZXJ0aW5nID0gZmFsc2U7CgoJCS8vIFdlIGRlbGF5IGFsbCBldmVudHMgdGhhdCBoYXZlIHRvIGJlIHRyaWdnZXJlZCB0byBhZnRlciB0aGUgcG9pbnQgd2hlcmUgdGhlIHBsYWNlaG9sZGVyCgkJLy8gaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZXZlcnl0aGluZyBlbHNlIG5vcm1hbGl6ZWQgYWdhaW4KCQl2YXIgaSwKCQkJZGVsYXllZFRyaWdnZXJzID0gW107CgoJCS8vIFdlIGZpcnN0IGhhdmUgdG8gdXBkYXRlIHRoZSBkb20gcG9zaXRpb24gb2YgdGhlIGFjdHVhbCBjdXJyZW50SXRlbQoJCS8vIE5vdGU6IGRvbid0IGRvIGl0IGlmIHRoZSBjdXJyZW50IGl0ZW0gaXMgYWxyZWFkeSByZW1vdmVkIChieSBhIHVzZXIpLCBvciBpdCBnZXRzCgkJLy8gcmVhcHBlbmRlZCAoc2VlICM0MDg4KQoJCWlmICggIXRoaXMuX25vRmluYWxTb3J0ICYmIHRoaXMuY3VycmVudEl0ZW0ucGFyZW50KCkubGVuZ3RoICkgewoJCQl0aGlzLnBsYWNlaG9sZGVyLmJlZm9yZSggdGhpcy5jdXJyZW50SXRlbSApOwoJCX0KCQl0aGlzLl9ub0ZpbmFsU29ydCA9IG51bGw7CgoJCWlmICggdGhpcy5oZWxwZXJbIDAgXSA9PT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICkgewoJCQlmb3IgKCBpIGluIHRoaXMuX3N0b3JlZENTUyApIHsKCQkJCWlmICggdGhpcy5fc3RvcmVkQ1NTWyBpIF0gPT09ICJhdXRvIiB8fCB0aGlzLl9zdG9yZWRDU1NbIGkgXSA9PT0gInN0YXRpYyIgKSB7CgkJCQkJdGhpcy5fc3RvcmVkQ1NTWyBpIF0gPSAiIjsKCQkJCX0KCQkJfQoJCQl0aGlzLmN1cnJlbnRJdGVtLmNzcyggdGhpcy5fc3RvcmVkQ1NTICk7CgkJCXRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmN1cnJlbnRJdGVtLCAidWktc29ydGFibGUtaGVscGVyIiApOwoJCX0gZWxzZSB7CgkJCXRoaXMuY3VycmVudEl0ZW0uc2hvdygpOwoJCX0KCgkJaWYgKCB0aGlzLmZyb21PdXRzaWRlICYmICFub1Byb3BhZ2F0aW9uICkgewoJCQlkZWxheWVkVHJpZ2dlcnMucHVzaCggZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJdGhpcy5fdHJpZ2dlciggInJlY2VpdmUiLCBldmVudCwgdGhpcy5fdWlIYXNoKCB0aGlzLmZyb21PdXRzaWRlICkgKTsKCQkJfSApOwoJCX0KCQlpZiAoICggdGhpcy5mcm9tT3V0c2lkZSB8fAoJCQkJdGhpcy5kb21Qb3NpdGlvbi5wcmV2ICE9PQoJCQkJdGhpcy5jdXJyZW50SXRlbS5wcmV2KCkubm90KCAiLnVpLXNvcnRhYmxlLWhlbHBlciIgKVsgMCBdIHx8CgkJCQl0aGlzLmRvbVBvc2l0aW9uLnBhcmVudCAhPT0gdGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKVsgMCBdICkgJiYgIW5vUHJvcGFnYXRpb24gKSB7CgoJCQkvLyBUcmlnZ2VyIHVwZGF0ZSBjYWxsYmFjayBpZiB0aGUgRE9NIHBvc2l0aW9uIGhhcyBjaGFuZ2VkCgkJCWRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQl0aGlzLl90cmlnZ2VyKCAidXBkYXRlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpICk7CgkJCX0gKTsKCQl9CgoJCS8vIENoZWNrIGlmIHRoZSBpdGVtcyBDb250YWluZXIgaGFzIENoYW5nZWQgYW5kIHRyaWdnZXIgYXBwcm9wcmlhdGUKCQkvLyBldmVudHMuCgkJaWYgKCB0aGlzICE9PSB0aGlzLmN1cnJlbnRDb250YWluZXIgKSB7CgkJCWlmICggIW5vUHJvcGFnYXRpb24gKSB7CgkJCQlkZWxheWVkVHJpZ2dlcnMucHVzaCggZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCXRoaXMuX3RyaWdnZXIoICJyZW1vdmUiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkgKTsKCQkJCX0gKTsKCQkJCWRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCAoIGZ1bmN0aW9uKCBjICkgewoJCQkJCXJldHVybiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJCWMuX3RyaWdnZXIoICJyZWNlaXZlIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggdGhpcyApICk7CgkJCQkJfTsKCQkJCX0gKS5jYWxsKCB0aGlzLCB0aGlzLmN1cnJlbnRDb250YWluZXIgKSApOwoJCQkJZGVsYXllZFRyaWdnZXJzLnB1c2goICggZnVuY3Rpb24oIGMgKSB7CgkJCQkJcmV0dXJuIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQkJYy5fdHJpZ2dlciggInVwZGF0ZSIsIGV2ZW50LCB0aGlzLl91aUhhc2goIHRoaXMgKSApOwoJCQkJCX07CgkJCQl9ICkuY2FsbCggdGhpcywgdGhpcy5jdXJyZW50Q29udGFpbmVyICkgKTsKCQkJfQoJCX0KCgkJLy9Qb3N0IGV2ZW50cyB0byBjb250YWluZXJzCgkJZnVuY3Rpb24gZGVsYXlFdmVudCggdHlwZSwgaW5zdGFuY2UsIGNvbnRhaW5lciApIHsKCQkJcmV0dXJuIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWNvbnRhaW5lci5fdHJpZ2dlciggdHlwZSwgZXZlbnQsIGluc3RhbmNlLl91aUhhc2goIGluc3RhbmNlICkgKTsKCQkJfTsKCQl9CgkJZm9yICggaSA9IHRoaXMuY29udGFpbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHsKCQkJaWYgKCAhbm9Qcm9wYWdhdGlvbiApIHsKCQkJCWRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCBkZWxheUV2ZW50KCAiZGVhY3RpdmF0ZSIsIHRoaXMsIHRoaXMuY29udGFpbmVyc1sgaSBdICkgKTsKCQkJfQoJCQlpZiAoIHRoaXMuY29udGFpbmVyc1sgaSBdLmNvbnRhaW5lckNhY2hlLm92ZXIgKSB7CgkJCQlkZWxheWVkVHJpZ2dlcnMucHVzaCggZGVsYXlFdmVudCggIm91dCIsIHRoaXMsIHRoaXMuY29udGFpbmVyc1sgaSBdICkgKTsKCQkJCXRoaXMuY29udGFpbmVyc1sgaSBdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAwOwoJCQl9CgkJfQoKCQkvL0RvIHdoYXQgd2FzIG9yaWdpbmFsbHkgaW4gcGx1Z2lucwoJCWlmICggdGhpcy5zdG9yZWRDdXJzb3IgKSB7CgkJCXRoaXMuZG9jdW1lbnQuZmluZCggImJvZHkiICkuY3NzKCAiY3Vyc29yIiwgdGhpcy5zdG9yZWRDdXJzb3IgKTsKCQkJdGhpcy5zdG9yZWRTdHlsZXNoZWV0LnJlbW92ZSgpOwoJCX0KCQlpZiAoIHRoaXMuX3N0b3JlZE9wYWNpdHkgKSB7CgkJCXRoaXMuaGVscGVyLmNzcyggIm9wYWNpdHkiLCB0aGlzLl9zdG9yZWRPcGFjaXR5ICk7CgkJfQoJCWlmICggdGhpcy5fc3RvcmVkWkluZGV4ICkgewoJCQl0aGlzLmhlbHBlci5jc3MoICJ6SW5kZXgiLCB0aGlzLl9zdG9yZWRaSW5kZXggPT09ICJhdXRvIiA\\/CgkJLy8gc2hvdWxkbid0IHdlIGp1c3Qgc3RvcCB0aGUgcmVwZWF0ZXIgYW5kIHdhaXQgdW50aWwgbW91c2V1cCBiZWZvcmUKCQkvLyB3ZSB0cmlnZ2VyIHRoZSBzdG9wIGV2ZW50PwoJCSJtb3VzZWxlYXZlIC51aS1zcGlubmVyLWJ1dHRvbiI6ICJfc3RvcCIKCX0sCgoJLy8gU3VwcG9ydCBtb2JpbGUgZW5oYW5jZWQgb3B0aW9uIGFuZCBtYWtlIGJhY2tjb21wYXQgbW9yZSBzYW5lCglfZW5oYW5jZTogZnVuY3Rpb24oKSB7CgkJdGhpcy51aVNwaW5uZXIgPSB0aGlzLmVsZW1lbnQKCQkJLmF0dHIoICJhdXRvY29tcGxldGUiLCAib2ZmIiApCgkJCS53cmFwKCAiPHNwYW4+IiApCgkJCS5wYXJlbnQoKQoKCQkJCS8vIEFkZCBidXR0b25zCgkJCQkuYXBwZW5kKAoJCQkJCSI8YT48L2E+PGE+PC9hPiIKCQkJCSk7Cgl9LAoKCV9kcmF3OiBmdW5jdGlvbigpIHsKCQl0aGlzLl9lbmhhbmNlKCk7CgoJCXRoaXMuX2FkZENsYXNzKCB0aGlzLnVpU3Bpbm5lciwgInVpLXNwaW5uZXIiLCAidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IiApOwoJCXRoaXMuX2FkZENsYXNzKCAidWktc3Bpbm5lci1pbnB1dCIgKTsKCgkJdGhpcy5lbGVtZW50LmF0dHIoICJyb2xlIiwgInNwaW5idXR0b24iICk7CgoJCS8vIEJ1dHRvbiBiaW5kaW5ncwoJCXRoaXMuYnV0dG9ucyA9IHRoaXMudWlTcGlubmVyLmNoaWxkcmVuKCAiYSIgKQoJCQkuYXR0ciggInRhYkluZGV4IiwgLTEgKQoJCQkuYXR0ciggImFyaWEtaGlkZGVuIiwgdHJ1ZSApCgkJCS5idXR0b24oIHsKCQkJCWNsYXNzZXM6IHsKCQkJCQkidWktYnV0dG9uIjogIiIKCQkJCX0KCQkJfSApOwoKCQkvLyBUT0RPOiBSaWdodCBub3cgYnV0dG9uIGRvZXMgbm90IHN1cHBvcnQgY2xhc3NlcyB0aGlzIGlzIGFscmVhZHkgdXBkYXRlZCBpbiBidXR0b24gUFIKCQl0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5idXR0b25zLCAidWktY29ybmVyLWFsbCIgKTsKCgkJdGhpcy5fYWRkQ2xhc3MoIHRoaXMuYnV0dG9ucy5maXJzdCgpLCAidWktc3Bpbm5lci1idXR0b24gdWktc3Bpbm5lci11cCIgKTsKCQl0aGlzLl9hZGRDbGFzcyggdGhpcy5idXR0b25zLmxhc3QoKSwgInVpLXNwaW5uZXItYnV0dG9uIHVpLXNwaW5uZXItZG93biIgKTsKCQl0aGlzLmJ1dHRvbnMuZmlyc3QoKS5idXR0b24oIHsKCQkJImljb24iOiB0aGlzLm9wdGlvbnMuaWNvbnMudXAsCgkJCSJzaG93TGFiZWwiOiBmYWxzZQoJCX0gKTsKCQl0aGlzLmJ1dHRvbnMubGFzdCgpLmJ1dHRvbiggewoJCQkiaWNvbiI6IHRoaXMub3B0aW9ucy5pY29ucy5kb3duLAoJCQkic2hvd0xhYmVsIjogZmFsc2UKCQl9ICk7CgoJCS8vIElFIDYgZG9lc24ndCB1bmRlcnN0YW5kIGhlaWdodDogNTAlIGZvciB0aGUgYnV0dG9ucwoJCS8vIHVubGVzcyB0aGUgd3JhcHBlciBoYXMgYW4gZXhwbGljaXQgaGVpZ2h0CgkJaWYgKCB0aGlzLmJ1dHRvbnMuaGVpZ2h0KCkgPiBNYXRoLmNlaWwoIHRoaXMudWlTcGlubmVyLmhlaWdodCgpICogMC41ICkgJiYKCQkJCXRoaXMudWlTcGlubmVyLmhlaWdodCgpID4gMCApIHsKCQkJdGhpcy51aVNwaW5uZXIuaGVpZ2h0KCB0aGlzLnVpU3Bpbm5lci5oZWlnaHQoKSApOwoJCX0KCX0sCgoJX2tleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJa2V5Q29kZSA9ICQudWkua2V5Q29kZTsKCgkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQljYXNlIGtleUNvZGUuVVA6CgkJCXRoaXMuX3JlcGVhdCggbnVsbCwgMSwgZXZlbnQgKTsKCQkJcmV0dXJuIHRydWU7CgkJY2FzZSBrZXlDb2RlLkRPV046CgkJCXRoaXMuX3JlcGVhdCggbnVsbCwgLTEsIGV2ZW50ICk7CgkJCXJldHVybiB0cnVlOwoJCWNhc2Uga2V5Q29kZS5QQUdFX1VQOgoJCQl0aGlzLl9yZXBlYXQoIG51bGwsIG9wdGlvbnMucGFnZSwgZXZlbnQgKTsKCQkJcmV0dXJuIHRydWU7CgkJY2FzZSBrZXlDb2RlLlBBR0VfRE9XTjoKCQkJdGhpcy5fcmVwZWF0KCBudWxsLCAtb3B0aW9ucy5wYWdlLCBldmVudCApOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgoJCXJldHVybiBmYWxzZTsKCX0sCgoJX3N0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJaWYgKCAhdGhpcy5zcGlubmluZyAmJiB0aGlzLl90cmlnZ2VyKCAic3RhcnQiLCBldmVudCApID09PSBmYWxzZSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJaWYgKCAhdGhpcy5jb3VudGVyICkgewoJCQl0aGlzLmNvdW50ZXIgPSAxOwoJCX0KCQl0aGlzLnNwaW5uaW5nID0gdHJ1ZTsKCQlyZXR1cm4gdHJ1ZTsKCX0sCgoJX3JlcGVhdDogZnVuY3Rpb24oIGksIHN0ZXBzLCBldmVudCApIHsKCQlpID0gaSB8fCA1MDA7CgoJCWNsZWFyVGltZW91dCggdGhpcy50aW1lciApOwoJCXRoaXMudGltZXIgPSB0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7CgkJCXRoaXMuX3JlcGVhdCggNDAsIHN0ZXBzLCBldmVudCApOwoJCX0sIGkgKTsKCgkJdGhpcy5fc3Bpbiggc3RlcHMgKiB0aGlzLm9wdGlvbnMuc3RlcCwgZXZlbnQgKTsKCX0sCgoJX3NwaW46IGZ1bmN0aW9uKCBzdGVwLCBldmVudCApIHsKCQl2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCkgfHwgMDsKCgkJaWYgKCAhdGhpcy5jb3VudGVyICkgewoJCQl0aGlzLmNvdW50ZXIgPSAxOwoJCX0KCgkJdmFsdWUgPSB0aGlzLl9hZGp1c3RWYWx1ZSggdmFsdWUgKyBzdGVwICogdGhpcy5faW5jcmVtZW50KCB0aGlzLmNvdW50ZXIgKSApOwoKCQlpZiAoICF0aGlzLnNwaW5uaW5nIHx8IHRoaXMuX3RyaWdnZXIoICJzcGluIiwgZXZlbnQsIHsgdmFsdWU6IHZhbHVlIH0gKSAhPT0gZmFsc2UgKSB7CgkJCXRoaXMuX3ZhbHVlKCB2YWx1ZSApOwoJCQl0aGlzLmNvdW50ZXIrKzsKCQl9Cgl9LAoKCV9pbmNyZW1lbnQ6IGZ1bmN0aW9uKCBpICkgewoJCXZhciBpbmNyZW1lbnRhbCA9IHRoaXMub3B0aW9ucy5pbmNyZW1lbnRhbDsKCgkJaWYgKCBpbmNyZW1lbnRhbCApIHsKCQkJcmV0dXJuICQuaXNGdW5jdGlvbiggaW5jcmVtZW50YWwgKSA\/CgkJCQlpbmNyZW1lbnRhbCggaSApIDoKCQkJCU1hdGguZmxvb3IoIGkgKiBpICogaSAvIDUwMDAwIC0gaSAqIGkgLyA1MDAgKyAxNyAqIGkgLyAyMDAgKyAxICk7CgkJfQoKCQlyZXR1cm4gMTsKCX0sCgoJX3ByZWNpc2lvbjogZnVuY3Rpb24oKSB7CgkJdmFyIHByZWNpc2lvbiA9IHRoaXMuX3ByZWNpc2lvbk9mKCB0aGlzLm9wdGlvbnMuc3RlcCApOwoJCWlmICggdGhpcy5vcHRpb25zLm1pbiAhPT0gbnVsbCApIHsKCQkJcHJlY2lzaW9uID0gTWF0aC5tYXgoIHByZWNpc2lvbiwgdGhpcy5fcHJlY2lzaW9uT2YoIHRoaXMub3B0aW9ucy5taW4gKSApOwoJCX0KCQlyZXR1cm4gcHJlY2lzaW9uOwoJfSwKCglfcHJlY2lzaW9uT2Y6IGZ1bmN0aW9uKCBudW0gKSB7CgkJdmFyIHN0ciA9IG51bS50b1N0cmluZygpLAoJCQlkZWNpbWFsID0gc3RyLmluZGV4T2YoICIuIiApOwoJCXJldHVybiBkZWNpbWFsID09PSAtMSA\\/ICQoKSA6IHRoaXMuX2dldFBhbmVsRm9yVGFiKCB0aGlzLmFjdGl2ZSApCgkJfTsKCX0sCgoJX3RhYktleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHsKCQl2YXIgZm9jdXNlZFRhYiA9ICQoICQudWkuc2FmZUFjdGl2ZUVsZW1lbnQoIHRoaXMuZG9jdW1lbnRbIDAgXSApICkuY2xvc2VzdCggImxpIiApLAoJCQlzZWxlY3RlZEluZGV4ID0gdGhpcy50YWJzLmluZGV4KCBmb2N1c2VkVGFiICksCgkJCWdvaW5nRm9yd2FyZCA9IHRydWU7CgoJCWlmICggdGhpcy5faGFuZGxlUGFnZU5hdiggZXZlbnQgKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQljYXNlICQudWkua2V5Q29kZS5SSUdIVDoKCQljYXNlICQudWkua2V5Q29kZS5ET1dOOgoJCQlzZWxlY3RlZEluZGV4Kys7CgkJCWJyZWFrOwoJCWNhc2UgJC51aS5rZXlDb2RlLlVQOgoJCWNhc2UgJC51aS5rZXlDb2RlLkxFRlQ6CgkJCWdvaW5nRm9yd2FyZCA9IGZhbHNlOwoJCQlzZWxlY3RlZEluZGV4LS07CgkJCWJyZWFrOwoJCWNhc2UgJC51aS5rZXlDb2RlLkVORDoKCQkJc2VsZWN0ZWRJbmRleCA9IHRoaXMuYW5jaG9ycy5sZW5ndGggLSAxOwoJCQlicmVhazsKCQljYXNlICQudWkua2V5Q29kZS5IT01FOgoJCQlzZWxlY3RlZEluZGV4ID0gMDsKCQkJYnJlYWs7CgkJY2FzZSAkLnVpLmtleUNvZGUuU1BBQ0U6CgoJCQkvLyBBY3RpdmF0ZSBvbmx5LCBubyBjb2xsYXBzaW5nCgkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCWNsZWFyVGltZW91dCggdGhpcy5hY3RpdmF0aW5nICk7CgkJCXRoaXMuX2FjdGl2YXRlKCBzZWxlY3RlZEluZGV4ICk7CgkJCXJldHVybjsKCQljYXNlICQudWkua2V5Q29kZS5FTlRFUjoKCgkJCS8vIFRvZ2dsZSAoY2FuY2VsIGRlbGF5ZWQgYWN0aXZhdGlvbiwgYWxsb3cgY29sbGFwc2luZykKCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJY2xlYXJUaW1lb3V0KCB0aGlzLmFjdGl2YXRpbmcgKTsKCgkJCS8vIERldGVybWluZSBpZiB3ZSBzaG91bGQgY29sbGFwc2Ugb3IgYWN0aXZhdGUKCQkJdGhpcy5fYWN0aXZhdGUoIHNlbGVjdGVkSW5kZXggPT09IHRoaXMub3B0aW9ucy5hY3RpdmUgPyBmYWxzZSA6IHNlbGVjdGVkSW5kZXggKTsKCQkJcmV0dXJuOwoJCWRlZmF1bHQ6CgkJCXJldHVybjsKCQl9CgoJCS8vIEZvY3VzIHRoZSBhcHByb3ByaWF0ZSB0YWIsIGJhc2VkIG9uIHdoaWNoIGtleSB3YXMgcHJlc3NlZAoJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJY2xlYXJUaW1lb3V0KCB0aGlzLmFjdGl2YXRpbmcgKTsKCQlzZWxlY3RlZEluZGV4ID0gdGhpcy5fZm9jdXNOZXh0VGFiKCBzZWxlY3RlZEluZGV4LCBnb2luZ0ZvcndhcmQgKTsKCgkJLy8gTmF2aWdhdGluZyB3aXRoIGNvbnRyb2wvY29tbWFuZCBrZXkgd2lsbCBwcmV2ZW50IGF1dG9tYXRpYyBhY3RpdmF0aW9uCgkJaWYgKCAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQubWV0YUtleSApIHsKCgkJCS8vIFVwZGF0ZSBhcmlhLXNlbGVjdGVkIGltbWVkaWF0ZWx5IHNvIHRoYXQgQVQgdGhpbmsgdGhlIHRhYiBpcyBhbHJlYWR5IHNlbGVjdGVkLgoJCQkvLyBPdGhlcndpc2UgQVQgbWF5IGNvbmZ1c2UgdGhlIHVzZXIgYnkgc3RhdGluZyB0aGF0IHRoZXkgbmVlZCB0byBhY3RpdmF0ZSB0aGUgdGFiLAoJCQkvLyBidXQgdGhlIHRhYiB3aWxsIGFscmVhZHkgYmUgYWN0aXZhdGVkIGJ5IHRoZSB0aW1lIHRoZSBhbm5vdW5jZW1lbnQgZmluaXNoZXMuCgkJCWZvY3VzZWRUYWIuYXR0ciggImFyaWEtc2VsZWN0ZWQiLCAiZmFsc2UiICk7CgkJCXRoaXMudGFicy5lcSggc2VsZWN0ZWRJbmRleCApLmF0dHIoICJhcmlhLXNlbGVjdGVkIiwgInRydWUiICk7CgoJCQl0aGlzLmFjdGl2YXRpbmcgPSB0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7CgkJCQl0aGlzLm9wdGlvbiggImFjdGl2ZSIsIHNlbGVjdGVkSW5kZXggKTsKCQkJfSwgdGhpcy5kZWxheSApOwoJCX0KCX0sCgoJX3BhbmVsS2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCWlmICggdGhpcy5faGFuZGxlUGFnZU5hdiggZXZlbnQgKSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gQ3RybCt1cCBtb3ZlcyBmb2N1cyB0byB0aGUgY3VycmVudCB0YWIKCQlpZiAoIGV2ZW50LmN0cmxLZXkgJiYgZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLlVQICkgewoJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQl0aGlzLmFjdGl2ZS50cmlnZ2VyKCAiZm9jdXMiICk7CgkJfQoJfSwKCgkvLyBBbHQrcGFnZSB1cC9kb3duIG1vdmVzIGZvY3VzIHRvIHRoZSBwcmV2aW91cy9uZXh0IHRhYiAoYW5kIGFjdGl2YXRlcykKCV9oYW5kbGVQYWdlTmF2OiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJaWYgKCBldmVudC5hbHRLZXkgJiYgZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLlBBR0VfVVAgKSB7CgkJCXRoaXMuX2FjdGl2YXRlKCB0aGlzLl9mb2N1c05leHRUYWIoIHRoaXMub3B0aW9ucy5hY3RpdmUgLSAxLCBmYWxzZSApICk7CgkJCXJldHVybiB0cnVlOwoJCX0KCQlpZiAoIGV2ZW50LmFsdEtleSAmJiBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuUEFHRV9ET1dOICkgewoJCQl0aGlzLl9hY3RpdmF0ZSggdGhpcy5fZm9jdXNOZXh0VGFiKCB0aGlzLm9wdGlvbnMuYWN0aXZlICsgMSwgdHJ1ZSApICk7CgkJCXJldHVybiB0cnVlOwoJCX0KCX0sCgoJX2ZpbmROZXh0VGFiOiBmdW5jdGlvbiggaW5kZXgsIGdvaW5nRm9yd2FyZCApIHsKCQl2YXIgbGFzdFRhYkluZGV4ID0gdGhpcy50YWJzLmxlbmd0aCAtIDE7CgoJCWZ1bmN0aW9uIGNvbnN0cmFpbigpIHsKCQkJaWYgKCBpbmRleCA+IGxhc3RUYWJJbmRleCApIHsKCQkJCWluZGV4ID0gMDsKCQkJfQoJCQlpZiAoIGluZGV4IDwgMCApIHsKCQkJCWluZGV4ID0gbGFzdFRhYkluZGV4OwoJCQl9CgkJCXJldHVybiBpbmRleDsKCQl9CgoJCXdoaWxlICggJC5pbkFycmF5KCBjb25zdHJhaW4oKSwgdGhpcy5vcHRpb25zLmRpc2FibGVkICkgIT09IC0xICkgewoJCQlpbmRleCA9IGdvaW5nRm9yd2FyZCA\/IGluZGV4ICsgMSA6IGluZGV4IC0gMTsKCQl9CgoJCXJldHVybiBpbmRleDsKCX0sCgoJX2ZvY3VzTmV4dFRhYjogZnVuY3Rpb24oIGluZGV4LCBnb2luZ0ZvcndhcmQgKSB7CgkJaW5kZXggPSB0aGlzLl9maW5kTmV4dFRhYiggaW5kZXgsIGdvaW5nRm9yd2FyZCApOwoJCXRoaXMudGFicy5lcSggaW5kZXggKS50cmlnZ2VyKCAiZm9jdXMiICk7CgkJcmV0dXJuIGluZGV4OwoJfSwKCglfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKCQlpZiAoIGtleSA9PT0gImFjdGl2ZSIgKSB7CgoJCQkvLyBfYWN0aXZhdGUoKSB3aWxsIGhhbmRsZSBpbnZhbGlkIHZhbHVlcyBhbmQgdXBkYXRlIHRoaXMub3B0aW9ucwoJCQl0aGlzLl9hY3RpdmF0ZSggdmFsdWUgKTsKCQkJcmV0dXJuOwoJCX0KCgkJdGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTsKCgkJaWYgKCBrZXkgPT09ICJjb2xsYXBzaWJsZSIgKSB7CgkJCXRoaXMuX3RvZ2dsZUNsYXNzKCAidWktdGFicy1jb2xsYXBzaWJsZSIsIG51bGwsIHZhbHVlICk7CgoJCQkvLyBTZXR0aW5nIGNvbGxhcHNpYmxlOiBmYWxzZSB3aGlsZSBjb2xsYXBzZWQ7IG9wZW4gZmlyc3QgcGFuZWwKCQkJaWYgKCAhdmFsdWUgJiYgdGhpcy5vcHRpb25zLmFjdGl2ZSA9PT0gZmFsc2UgKSB7CgkJCQl0aGlzLl9hY3RpdmF0ZSggMCApOwoJCQl9CgkJfQoKCQlpZiAoIGtleSA9PT0gImV2ZW50IiApIHsKCQkJdGhpcy5fc2V0dXBFdmVudHMoIHZhbHVlICk7CgkJfQoKCQlpZiAoIGtleSA9PT0gImhlaWdodFN0eWxlIiApIHsKCQkJdGhpcy5fc2V0dXBIZWlnaHRTdHlsZSggdmFsdWUgKTsKCQl9Cgl9LAoKCV9zYW5pdGl6ZVNlbGVjdG9yOiBmdW5jdGlvbiggaGFzaCApIHsKCQlyZXR1cm4gaGFzaCA\\/IGZhbHNlIDogdGhpcy50YWJzLmluZGV4KCB0YWIgKTsKCgkJdGhpcy5hY3RpdmUgPSBjbGlja2VkSXNBY3RpdmUgPyAkKCkgOiB0YWI7CgkJaWYgKCB0aGlzLnhociApIHsKCQkJdGhpcy54aHIuYWJvcnQoKTsKCQl9CgoJCWlmICggIXRvSGlkZS5sZW5ndGggJiYgIXRvU2hvdy5sZW5ndGggKSB7CgkJCSQuZXJyb3IoICJqUXVlcnkgVUkgVGFiczogTWlzbWF0Y2hpbmcgZnJhZ21lbnQgaWRlbnRpZmllci4iICk7CgkJfQoKCQlpZiAoIHRvU2hvdy5sZW5ndGggKSB7CgkJCXRoaXMubG9hZCggdGhpcy50YWJzLmluZGV4KCB0YWIgKSwgZXZlbnQgKTsKCQl9CgkJdGhpcy5fdG9nZ2xlKCBldmVudCwgZXZlbnREYXRhICk7Cgl9LAoKCS8vIEhhbmRsZXMgc2hvdy9oaWRlIGZvciBzZWxlY3RpbmcgdGFicwoJX3RvZ2dsZTogZnVuY3Rpb24oIGV2ZW50LCBldmVudERhdGEgKSB7CgkJdmFyIHRoYXQgPSB0aGlzLAoJCQl0b1Nob3cgPSBldmVudERhdGEubmV3UGFuZWwsCgkJCXRvSGlkZSA9IGV2ZW50RGF0YS5vbGRQYW5lbDsKCgkJdGhpcy5ydW5uaW5nID0gdHJ1ZTsKCgkJZnVuY3Rpb24gY29tcGxldGUoKSB7CgkJCXRoYXQucnVubmluZyA9IGZhbHNlOwoJCQl0aGF0Ll90cmlnZ2VyKCAiYWN0aXZhdGUiLCBldmVudCwgZXZlbnREYXRhICk7CgkJfQoKCQlmdW5jdGlvbiBzaG93KCkgewoJCQl0aGF0Ll9hZGRDbGFzcyggZXZlbnREYXRhLm5ld1RhYi5jbG9zZXN0KCAibGkiICksICJ1aS10YWJzLWFjdGl2ZSIsICJ1aS1zdGF0ZS1hY3RpdmUiICk7CgoJCQlpZiAoIHRvU2hvdy5sZW5ndGggJiYgdGhhdC5vcHRpb25zLnNob3cgKSB7CgkJCQl0aGF0Ll9zaG93KCB0b1Nob3csIHRoYXQub3B0aW9ucy5zaG93LCBjb21wbGV0ZSApOwoJCQl9IGVsc2UgewoJCQkJdG9TaG93LnNob3coKTsKCQkJCWNvbXBsZXRlKCk7CgkJCX0KCQl9CgoJCS8vIFN0YXJ0IG91dCBieSBoaWRpbmcsIHRoZW4gc2hvd2luZywgdGhlbiBjb21wbGV0aW5nCgkJaWYgKCB0b0hpZGUubGVuZ3RoICYmIHRoaXMub3B0aW9ucy5oaWRlICkgewoJCQl0aGlzLl9oaWRlKCB0b0hpZGUsIHRoaXMub3B0aW9ucy5oaWRlLCBmdW5jdGlvbigpIHsKCQkJCXRoYXQuX3JlbW92ZUNsYXNzKCBldmVudERhdGEub2xkVGFiLmNsb3Nlc3QoICJsaSIgKSwKCQkJCQkidWktdGFicy1hY3RpdmUiLCAidWktc3RhdGUtYWN0aXZlIiApOwoJCQkJc2hvdygpOwoJCQl9ICk7CgkJfSBlbHNlIHsKCQkJdGhpcy5fcmVtb3ZlQ2xhc3MoIGV2ZW50RGF0YS5vbGRUYWIuY2xvc2VzdCggImxpIiApLAoJCQkJInVpLXRhYnMtYWN0aXZlIiwgInVpLXN0YXRlLWFjdGl2ZSIgKTsKCQkJdG9IaWRlLmhpZGUoKTsKCQkJc2hvdygpOwoJCX0KCgkJdG9IaWRlLmF0dHIoICJhcmlhLWhpZGRlbiIsICJ0cnVlIiApOwoJCWV2ZW50RGF0YS5vbGRUYWIuYXR0ciggewoJCQkiYXJpYS1zZWxlY3RlZCI6ICJmYWxzZSIsCgkJCSJhcmlhLWV4cGFuZGVkIjogImZhbHNlIgoJCX0gKTsKCgkJLy8gSWYgd2UncmUgc3dpdGNoaW5nIHRhYnMsIHJlbW92ZSB0aGUgb2xkIHRhYiBmcm9tIHRoZSB0YWIgb3JkZXIuCgkJLy8gSWYgd2UncmUgb3BlbmluZyBmcm9tIGNvbGxhcHNlZCBzdGF0ZSwgcmVtb3ZlIHRoZSBwcmV2aW91cyB0YWIgZnJvbSB0aGUgdGFiIG9yZGVyLgoJCS8vIElmIHdlJ3JlIGNvbGxhcHNpbmcsIHRoZW4ga2VlcCB0aGUgY29sbGFwc2luZyB0YWIgaW4gdGhlIHRhYiBvcmRlci4KCQlpZiAoIHRvU2hvdy5sZW5ndGggJiYgdG9IaWRlLmxlbmd0aCApIHsKCQkJZXZlbnREYXRhLm9sZFRhYi5hdHRyKCAidGFiSW5kZXgiLCAtMSApOwoJCX0gZWxzZSBpZiAoIHRvU2hvdy5sZW5ndGggKSB7CgkJCXRoaXMudGFicy5maWx0ZXIoIGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICQoIHRoaXMgKS5hdHRyKCAidGFiSW5kZXgiICkgPT09IDA7CgkJCX0gKQoJCQkJLmF0dHIoICJ0YWJJbmRleCIsIC0xICk7CgkJfQoKCQl0b1Nob3cuYXR0ciggImFyaWEtaGlkZGVuIiwgImZhbHNlIiApOwoJCWV2ZW50RGF0YS5uZXdUYWIuYXR0ciggewoJCQkiYXJpYS1zZWxlY3RlZCI6ICJ0cnVlIiwKCQkJImFyaWEtZXhwYW5kZWQiOiAidHJ1ZSIsCgkJCXRhYkluZGV4OiAwCgkJfSApOwoJfSwKCglfYWN0aXZhdGU6IGZ1bmN0aW9uKCBpbmRleCApIHsKCQl2YXIgYW5jaG9yLAoJCQlhY3RpdmUgPSB0aGlzLl9maW5kQWN0aXZlKCBpbmRleCApOwoKCQkvLyBUcnlpbmcgdG8gYWN0aXZhdGUgdGhlIGFscmVhZHkgYWN0aXZlIHBhbmVsCgkJaWYgKCBhY3RpdmVbIDAgXSA9PT0gdGhpcy5hY3RpdmVbIDAgXSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gVHJ5aW5nIHRvIGNvbGxhcHNlLCBzaW11bGF0ZSBhIGNsaWNrIG9uIHRoZSBjdXJyZW50IGFjdGl2ZSBoZWFkZXIKCQlpZiAoICFhY3RpdmUubGVuZ3RoICkgewoJCQlhY3RpdmUgPSB0aGlzLmFjdGl2ZTsKCQl9CgoJCWFuY2hvciA9IGFjdGl2ZS5maW5kKCAiLnVpLXRhYnMtYW5jaG9yIiApWyAwIF07CgkJdGhpcy5fZXZlbnRIYW5kbGVyKCB7CgkJCXRhcmdldDogYW5jaG9yLAoJCQljdXJyZW50VGFyZ2V0OiBhbmNob3IsCgkJCXByZXZlbnREZWZhdWx0OiAkLm5vb3AKCQl9ICk7Cgl9LAoKCV9maW5kQWN0aXZlOiBmdW5jdGlvbiggaW5kZXggKSB7CgkJcmV0dXJuIGluZGV4ID09PSBmYWxzZSA\/ICQoKSA6IHRoaXMudGFicy5lcSggaW5kZXggKTsKCX0sCgoJX2dldEluZGV4OiBmdW5jdGlvbiggaW5kZXggKSB7CgoJCS8vIG1ldGEtZnVuY3Rpb24gdG8gZ2l2ZSB1c2VycyBvcHRpb24gdG8gcHJvdmlkZSBhIGhyZWYgc3RyaW5nIGluc3RlYWQgb2YgYSBudW1lcmljYWwgaW5kZXguCgkJaWYgKCB0eXBlb2YgaW5kZXggPT09ICJzdHJpbmciICkgewoJCQlpbmRleCA9IHRoaXMuYW5jaG9ycy5pbmRleCggdGhpcy5hbmNob3JzLmZpbHRlciggIltocmVmJD0nIiArCgkJCQkkLnVpLmVzY2FwZVNlbGVjdG9yKCBpbmRleCApICsgIiddIiApICk7CgkJfQoKCQlyZXR1cm4gaW5kZXg7Cgl9LAoKCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQlpZiAoIHRoaXMueGhyICkgewoJCQl0aGlzLnhoci5hYm9ydCgpOwoJCX0KCgkJdGhpcy50YWJsaXN0CgkJCS5yZW1vdmVBdHRyKCAicm9sZSIgKQoJCQkub2ZmKCB0aGlzLmV2ZW50TmFtZXNwYWNlICk7CgoJCXRoaXMuYW5jaG9ycwoJCQkucmVtb3ZlQXR0ciggInJvbGUgdGFiSW5kZXgiICkKCQkJLnJlbW92ZVVuaXF1ZUlkKCk7CgoJCXRoaXMudGFicy5hZGQoIHRoaXMucGFuZWxzICkuZWFjaCggZnVuY3Rpb24oKSB7CgkJCWlmICggJC5kYXRhKCB0aGlzLCAidWktdGFicy1kZXN0cm95IiApICkgewoJCQkJJCggdGhpcyApLnJlbW92ZSgpOwoJCQl9IGVsc2UgewoJCQkJJCggdGhpcyApLnJlbW92ZUF0dHIoICJyb2xlIHRhYkluZGV4ICIgKwoJCQkJCSJhcmlhLWxpdmUgYXJpYS1idXN5IGFyaWEtc2VsZWN0ZWQgYXJpYS1sYWJlbGxlZGJ5IGFyaWEtaGlkZGVuIGFyaWEtZXhwYW5kZWQiICk7CgkJCX0KCQl9ICk7CgoJCXRoaXMudGFicy5lYWNoKCBmdW5jdGlvbigpIHsKCQkJdmFyIGxpID0gJCggdGhpcyApLAoJCQkJcHJldiA9IGxpLmRhdGEoICJ1aS10YWJzLWFyaWEtY29udHJvbHMiICk7CgkJCWlmICggcHJldiApIHsKCQkJCWxpCgkJCQkJLmF0dHIoICJhcmlhLWNvbnRyb2xzIiwgcHJldiApCgkJCQkJLnJlbW92ZURhdGEoICJ1aS10YWJzLWFyaWEtY29udHJvbHMiICk7CgkJCX0gZWxzZSB7CgkJCQlsaS5yZW1vdmVBdHRyKCAiYXJpYS1jb250cm9scyIgKTsKCQkJfQoJCX0gKTsKCgkJdGhpcy5wYW5lbHMuc2hvdygpOwoKCQlpZiAoIHRoaXMub3B0aW9ucy5oZWlnaHRTdHlsZSAhPT0gImNvbnRlbnQiICkgewoJCQl0aGlzLnBhbmVscy5jc3MoICJoZWlnaHQiLCAiIiApOwoJCX0KCX0sCgoJZW5hYmxlOiBmdW5jdGlvbiggaW5kZXggKSB7CgkJdmFyIGRpc2FibGVkID0gdGhpcy5vcHRpb25zLmRpc2FibGVkOwoJCWlmICggZGlzYWJsZWQgPT09IGZhbHNlICkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAoIGluZGV4ID09PSB1bmRlZmluZWQgKSB7CgkJCWRpc2FibGVkID0gZmFsc2U7CgkJfSBlbHNlIHsKCQkJaW5kZXggPSB0aGlzLl9nZXRJbmRleCggaW5kZXggKTsKCQkJaWYgKCAkLmlzQXJyYXkoIGRpc2FibGVkICkgKSB7CgkJCQlkaXNhYmxlZCA9ICQubWFwKCBkaXNhYmxlZCwgZnVuY3Rpb24oIG51bSApIHsKCQkJCQlyZXR1cm4gbnVtICE9PSBpbmRleCA\\/IGV2ZW50LmN1cnJlbnRUYXJnZXQgOiB0aGlzLmVsZW1lbnQgKSwKCQkJdG9vbHRpcERhdGEgPSB0aGlzLl9maW5kKCB0YXJnZXQgKTsKCgkJLy8gVGhlIHRvb2x0aXAgbWF5IGFscmVhZHkgYmUgY2xvc2VkCgkJaWYgKCAhdG9vbHRpcERhdGEgKSB7CgoJCQkvLyBXZSBzZXQgdWktdG9vbHRpcC1vcGVuIGltbWVkaWF0ZWx5IHVwb24gb3BlbiAoaW4gb3BlbigpKSwgYnV0IG9ubHkgc2V0IHRoZQoJCQkvLyBhZGRpdGlvbmFsIGRhdGEgb25jZSB0aGVyZSdzIGFjdHVhbGx5IGNvbnRlbnQgdG8gc2hvdyAoaW4gX29wZW4oKSkuIFNvIGV2ZW4gaWYgdGhlCgkJCS8vIHRvb2x0aXAgZG9lc24ndCBoYXZlIGZ1bGwgZGF0YSwgd2UgYWx3YXlzIHJlbW92ZSB1aS10b29sdGlwLW9wZW4gaW4gY2FzZSB3ZSdyZSBpbgoJCQkvLyB0aGUgcGVyaW9kIGJldHdlZW4gb3BlbigpIGFuZCBfb3BlbigpLgoJCQl0YXJnZXQucmVtb3ZlRGF0YSggInVpLXRvb2x0aXAtb3BlbiIgKTsKCQkJcmV0dXJuOwoJCX0KCgkJdG9vbHRpcCA9IHRvb2x0aXBEYXRhLnRvb2x0aXA7CgoJCS8vIERpc2FibGluZyBjbG9zZXMgdGhlIHRvb2x0aXAsIHNvIHdlIG5lZWQgdG8gdHJhY2sgd2hlbiB3ZSdyZSBjbG9zaW5nCgkJLy8gdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCBpbiBjYXNlIHRoZSB0b29sdGlwIGJlY29tZXMgZGlzYWJsZWQgb24gY2xvc2UKCQlpZiAoIHRvb2x0aXBEYXRhLmNsb3NpbmcgKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIENsZWFyIHRoZSBpbnRlcnZhbCBmb3IgZGVsYXllZCB0cmFja2luZyB0b29sdGlwcwoJCWNsZWFySW50ZXJ2YWwoIHRoaXMuZGVsYXllZFNob3cgKTsKCgkJLy8gT25seSBzZXQgdGl0bGUgaWYgd2UgaGFkIG9uZSBiZWZvcmUgKHNlZSBjb21tZW50IGluIF9vcGVuKCkpCgkJLy8gSWYgdGhlIHRpdGxlIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZCBzaW5jZSBvcGVuKCksIGRvbid0IHJlc3RvcmUKCQlpZiAoIHRhcmdldC5kYXRhKCAidWktdG9vbHRpcC10aXRsZSIgKSAmJiAhdGFyZ2V0LmF0dHIoICJ0aXRsZSIgKSApIHsKCQkJdGFyZ2V0LmF0dHIoICJ0aXRsZSIsIHRhcmdldC5kYXRhKCAidWktdG9vbHRpcC10aXRsZSIgKSApOwoJCX0KCgkJdGhpcy5fcmVtb3ZlRGVzY3JpYmVkQnkoIHRhcmdldCApOwoKCQl0b29sdGlwRGF0YS5oaWRpbmcgPSB0cnVlOwoJCXRvb2x0aXAuc3RvcCggdHJ1ZSApOwoJCXRoaXMuX2hpZGUoIHRvb2x0aXAsIHRoaXMub3B0aW9ucy5oaWRlLCBmdW5jdGlvbigpIHsKCQkJdGhhdC5fcmVtb3ZlVG9vbHRpcCggJCggdGhpcyApICk7CgkJfSApOwoKCQl0YXJnZXQucmVtb3ZlRGF0YSggInVpLXRvb2x0aXAtb3BlbiIgKTsKCQl0aGlzLl9vZmYoIHRhcmdldCwgIm1vdXNlbGVhdmUgZm9jdXNvdXQga2V5dXAiICk7CgoJCS8vIFJlbW92ZSAncmVtb3ZlJyBiaW5kaW5nIG9ubHkgb24gZGVsZWdhdGVkIHRhcmdldHMKCQlpZiAoIHRhcmdldFsgMCBdICE9PSB0aGlzLmVsZW1lbnRbIDAgXSApIHsKCQkJdGhpcy5fb2ZmKCB0YXJnZXQsICJyZW1vdmUiICk7CgkJfQoJCXRoaXMuX29mZiggdGhpcy5kb2N1bWVudCwgIm1vdXNlbW92ZSIgKTsKCgkJaWYgKCBldmVudCAmJiBldmVudC50eXBlID09PSAibW91c2VsZWF2ZSIgKSB7CgkJCSQuZWFjaCggdGhpcy5wYXJlbnRzLCBmdW5jdGlvbiggaWQsIHBhcmVudCApIHsKCQkJCSQoIHBhcmVudC5lbGVtZW50ICkuYXR0ciggInRpdGxlIiwgcGFyZW50LnRpdGxlICk7CgkJCQlkZWxldGUgdGhhdC5wYXJlbnRzWyBpZCBdOwoJCQl9ICk7CgkJfQoKCQl0b29sdGlwRGF0YS5jbG9zaW5nID0gdHJ1ZTsKCQl0aGlzLl90cmlnZ2VyKCAiY2xvc2UiLCBldmVudCwgeyB0b29sdGlwOiB0b29sdGlwIH0gKTsKCQlpZiAoICF0b29sdGlwRGF0YS5oaWRpbmcgKSB7CgkJCXRvb2x0aXBEYXRhLmNsb3NpbmcgPSBmYWxzZTsKCQl9Cgl9LAoKCV90b29sdGlwOiBmdW5jdGlvbiggZWxlbWVudCApIHsKCQl2YXIgdG9vbHRpcCA9ICQoICI8ZGl2PiIgKS5hdHRyKCAicm9sZSIsICJ0b29sdGlwIiApLAoJCQljb250ZW50ID0gJCggIjxkaXY+IiApLmFwcGVuZFRvKCB0b29sdGlwICksCgkJCWlkID0gdG9vbHRpcC51bmlxdWVJZCgpLmF0dHIoICJpZCIgKTsKCgkJdGhpcy5fYWRkQ2xhc3MoIGNvbnRlbnQsICJ1aS10b29sdGlwLWNvbnRlbnQiICk7CgkJdGhpcy5fYWRkQ2xhc3MoIHRvb2x0aXAsICJ1aS10b29sdGlwIiwgInVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCIgKTsKCgkJdG9vbHRpcC5hcHBlbmRUbyggdGhpcy5fYXBwZW5kVG8oIGVsZW1lbnQgKSApOwoKCQlyZXR1cm4gdGhpcy50b29sdGlwc1sgaWQgXSA9IHsKCQkJZWxlbWVudDogZWxlbWVudCwKCQkJdG9vbHRpcDogdG9vbHRpcAoJCX07Cgl9LAoKCV9maW5kOiBmdW5jdGlvbiggdGFyZ2V0ICkgewoJCXZhciBpZCA9IHRhcmdldC5kYXRhKCAidWktdG9vbHRpcC1pZCIgKTsKCQlyZXR1cm4gaWQgPyB0aGlzLnRvb2x0aXBzWyBpZCBdIDogbnVsbDsKCX0sCgoJX3JlbW92ZVRvb2x0aXA6IGZ1bmN0aW9uKCB0b29sdGlwICkgewoJCXRvb2x0aXAucmVtb3ZlKCk7CgkJZGVsZXRlIHRoaXMudG9vbHRpcHNbIHRvb2x0aXAuYXR0ciggImlkIiApIF07Cgl9LAoKCV9hcHBlbmRUbzogZnVuY3Rpb24oIHRhcmdldCApIHsKCQl2YXIgZWxlbWVudCA9IHRhcmdldC5jbG9zZXN0KCAiLnVpLWZyb250LCBkaWFsb2ciICk7CgoJCWlmICggIWVsZW1lbnQubGVuZ3RoICkgewoJCQllbGVtZW50ID0gdGhpcy5kb2N1bWVudFsgMCBdLmJvZHk7CgkJfQoKCQlyZXR1cm4gZWxlbWVudDsKCX0sCgoJX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkgewoJCXZhciB0aGF0ID0gdGhpczsKCgkJLy8gQ2xvc2Ugb3BlbiB0b29sdGlwcwoJCSQuZWFjaCggdGhpcy50b29sdGlwcywgZnVuY3Rpb24oIGlkLCB0b29sdGlwRGF0YSApIHsKCgkJCS8vIERlbGVnYXRlIHRvIGNsb3NlIG1ldGhvZCB0byBoYW5kbGUgY29tbW9uIGNsZWFudXAKCQkJdmFyIGV2ZW50ID0gJC5FdmVudCggImJsdXIiICksCgkJCQllbGVtZW50ID0gdG9vbHRpcERhdGEuZWxlbWVudDsKCQkJZXZlbnQudGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldCA9IGVsZW1lbnRbIDAgXTsKCQkJdGhhdC5jbG9zZSggZXZlbnQsIHRydWUgKTsKCgkJCS8vIFJlbW92ZSBpbW1lZGlhdGVseTsgZGVzdHJveWluZyBhbiBvcGVuIHRvb2x0aXAgZG9lc24ndCB1c2UgdGhlCgkJCS8vIGhpZGUgYW5pbWF0aW9uCgkJCSQoICIjIiArIGlkICkucmVtb3ZlKCk7CgoJCQkvLyBSZXN0b3JlIHRoZSB0aXRsZQoJCQlpZiAoIGVsZW1lbnQuZGF0YSggInVpLXRvb2x0aXAtdGl0bGUiICkgKSB7CgoJCQkJLy8gSWYgdGhlIHRpdGxlIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZCBzaW5jZSBvcGVuKCksIGRvbid0IHJlc3RvcmUKCQkJCWlmICggIWVsZW1lbnQuYXR0ciggInRpdGxlIiApICkgewoJCQkJCWVsZW1lbnQuYXR0ciggInRpdGxlIiwgZWxlbWVudC5kYXRhKCAidWktdG9vbHRpcC10aXRsZSIgKSApOwoJCQkJfQoJCQkJZWxlbWVudC5yZW1vdmVEYXRhKCAidWktdG9vbHRpcC10aXRsZSIgKTsKCQkJfQoJCX0gKTsKCQl0aGlzLmxpdmVSZWdpb24ucmVtb3ZlKCk7Cgl9Cn0gKTsKCi8vIERFUFJFQ0FURUQKLy8gVE9ETzogU3dpdGNoIHJldHVybiBiYWNrIHRvIHdpZGdldCBkZWNsYXJhdGlvbiBhdCB0b3Agb2YgZmlsZSB3aGVuIHRoaXMgaXMgcmVtb3ZlZAppZiAoICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSApIHsKCgkvLyBCYWNrY29tcGF0IGZvciB0b29sdGlwQ2xhc3Mgb3B0aW9uCgkkLndpZGdldCggInVpLnRvb2x0aXAiLCAkLnVpLnRvb2x0aXAsIHsKCQlvcHRpb25zOiB7CgkJCXRvb2x0aXBDbGFzczogbnVsbAoJCX0sCgkJX3Rvb2x0aXA6IGZ1bmN0aW9uKCkgewoJCQl2YXIgdG9vbHRpcERhdGEgPSB0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTsKCQkJaWYgKCB0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzICkgewoJCQkJdG9vbHRpcERhdGEudG9vbHRpcC5hZGRDbGFzcyggdGhpcy5vcHRpb25zLnRvb2x0aXBDbGFzcyApOwoJCQl9CgkJCXJldHVybiB0b29sdGlwRGF0YTsKCQl9Cgl9ICk7Cn0KCnZhciB3aWRnZXRzVG9vbHRpcCA9ICQudWkudG9vbHRpcDsKCgoKCn0pKTs=",
    "size": "520916"
}