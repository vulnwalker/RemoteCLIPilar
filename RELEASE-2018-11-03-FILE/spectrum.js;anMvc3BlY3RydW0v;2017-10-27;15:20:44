{
    "namaFile": "js\/spectrum\/spectrum.js",
    "lastUpdate": "2017-10-27+15:20:44.02",
    "contentFile": "Ly8gU3BlY3RydW0gQ29sb3JwaWNrZXIgdjEuOC4wCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZ3JpbnMvc3BlY3RydW0KLy8gQXV0aG9yOiBCcmlhbiBHcmluc3RlYWQKLy8gTGljZW5zZTogTUlUCgooZnVuY3Rpb24gKGZhY3RvcnkpIHsKICAgICJ1c2Ugc3RyaWN0IjsKCiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7IC8vIEFNRAogICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTsKICAgIH0KICAgIGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09ICJvYmplY3QiICYmIHR5cGVvZiBtb2R1bGUgPT0gIm9iamVjdCIpIHsgLy8gQ29tbW9uSlMKICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpOwogICAgfQogICAgZWxzZSB7IC8vIEJyb3dzZXIKICAgICAgICBmYWN0b3J5KGpRdWVyeSk7CiAgICB9Cn0pKGZ1bmN0aW9uKCQsIHVuZGVmaW5lZCkgewogICAgInVzZSBzdHJpY3QiOwoKICAgIHZhciBkZWZhdWx0T3B0cyA9IHsKCiAgICAgICAgLy8gQ2FsbGJhY2tzCiAgICAgICAgYmVmb3JlU2hvdzogbm9vcCwKICAgICAgICBtb3ZlOiBub29wLAogICAgICAgIGNoYW5nZTogbm9vcCwKICAgICAgICBzaG93OiBub29wLAogICAgICAgIGhpZGU6IG5vb3AsCgogICAgICAgIC8vIE9wdGlvbnMKICAgICAgICBjb2xvcjogZmFsc2UsCiAgICAgICAgZmxhdDogZmFsc2UsCiAgICAgICAgc2hvd0lucHV0OiBmYWxzZSwKICAgICAgICBhbGxvd0VtcHR5OiBmYWxzZSwKICAgICAgICBzaG93QnV0dG9uczogdHJ1ZSwKICAgICAgICBjbGlja291dEZpcmVzQ2hhbmdlOiB0cnVlLAogICAgICAgIHNob3dJbml0aWFsOiBmYWxzZSwKICAgICAgICBzaG93UGFsZXR0ZTogZmFsc2UsCiAgICAgICAgc2hvd1BhbGV0dGVPbmx5OiBmYWxzZSwKICAgICAgICBoaWRlQWZ0ZXJQYWxldHRlU2VsZWN0OiBmYWxzZSwKICAgICAgICB0b2dnbGVQYWxldHRlT25seTogZmFsc2UsCiAgICAgICAgc2hvd1NlbGVjdGlvblBhbGV0dGU6IHRydWUsCiAgICAgICAgbG9jYWxTdG9yYWdlS2V5OiBmYWxzZSwKICAgICAgICBhcHBlbmRUbzogImJvZHkiLAogICAgICAgIG1heFNlbGVjdGlvblNpemU6IDcsCiAgICAgICAgY2FuY2VsVGV4dDogImNhbmNlbCIsCiAgICAgICAgY2hvb3NlVGV4dDogImNob29zZSIsCiAgICAgICAgdG9nZ2xlUGFsZXR0ZU1vcmVUZXh0OiAibW9yZSIsCiAgICAgICAgdG9nZ2xlUGFsZXR0ZUxlc3NUZXh0OiAibGVzcyIsCiAgICAgICAgY2xlYXJUZXh0OiAiQ2xlYXIgQ29sb3IgU2VsZWN0aW9uIiwKICAgICAgICBub0NvbG9yU2VsZWN0ZWRUZXh0OiAiTm8gQ29sb3IgU2VsZWN0ZWQiLAogICAgICAgIHByZWZlcnJlZEZvcm1hdDogZmFsc2UsCiAgICAgICAgY2xhc3NOYW1lOiAiIiwgLy8gRGVwcmVjYXRlZCAtIHVzZSBjb250YWluZXJDbGFzc05hbWUgYW5kIHJlcGxhY2VyQ2xhc3NOYW1lIGluc3RlYWQuCiAgICAgICAgY29udGFpbmVyQ2xhc3NOYW1lOiAiIiwKICAgICAgICByZXBsYWNlckNsYXNzTmFtZTogIiIsCiAgICAgICAgc2hvd0FscGhhOiBmYWxzZSwKICAgICAgICB0aGVtZTogInNwLWxpZ2h0IiwKICAgICAgICBwYWxldHRlOiBbWyIjZmZmZmZmIiwgIiMwMDAwMDAiLCAiI2ZmMDAwMCIsICIjZmY4MDAwIiwgIiNmZmZmMDAiLCAiIzAwODAwMCIsICIjMDAwMGZmIiwgIiM0YjAwODIiLCAiIzk0MDBkMyJdXSwKICAgICAgICBzZWxlY3Rpb25QYWxldHRlOiBbXSwKICAgICAgICBkaXNhYmxlZDogZmFsc2UsCiAgICAgICAgb2Zmc2V0OiBudWxsCiAgICB9LAogICAgc3BlY3RydW1zID0gW10sCiAgICBJRSA9ICEhL21zaWUvaS5leGVjKCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCApLAogICAgcmdiYVN1cHBvcnQgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgZnVuY3Rpb24gY29udGFpbnMoIHN0ciwgc3Vic3RyICkgewogICAgICAgICAgICByZXR1cm4gISF+KCcnICsgc3RyKS5pbmRleE9mKHN1YnN0cik7CiAgICAgICAgfQoKICAgICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIHZhciBzdHlsZSA9IGVsZW0uc3R5bGU7CiAgICAgICAgc3R5bGUuY3NzVGV4dCA9ICdiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjUpJzsKICAgICAgICByZXR1cm4gY29udGFpbnMoc3R5bGUuYmFja2dyb3VuZENvbG9yLCAncmdiYScpIHx8IGNvbnRhaW5zKHN0eWxlLmJhY2tncm91bmRDb2xvciwgJ2hzbGEnKTsKICAgIH0pKCksCiAgICByZXBsYWNlSW5wdXQgPSBbCiAgICAgICAgIjxkaXYgY2xhc3M9J3NwLXJlcGxhY2VyJz4iLAogICAgICAgICAgICAiPGRpdiBjbGFzcz0nc3AtcHJldmlldyc+PGRpdiBjbGFzcz0nc3AtcHJldmlldy1pbm5lcic+PC9kaXY+PC9kaXY+IiwKICAgICAgICAgICAgIjxkaXYgY2xhc3M9J3NwLWRkJz4mIzk2NjA7PC9kaXY+IiwKICAgICAgICAiPC9kaXY+IgogICAgXS5qb2luKCcnKSwKICAgIG1hcmt1cCA9IChmdW5jdGlvbiAoKSB7CgogICAgICAgIC8vIElFIGRvZXMgbm90IHN1cHBvcnQgZ3JhZGllbnRzIHdpdGggbXVsdGlwbGUgc3RvcHMsIHNvIHdlIG5lZWQgdG8gc2ltdWxhdGUKICAgICAgICAvLyAgdGhhdCBmb3IgdGhlIHJhaW5ib3cgc2xpZGVyIHdpdGggOCBkaXZzIHRoYXQgZWFjaCBoYXZlIGEgc2luZ2xlIGdyYWRpZW50CiAgICAgICAgdmFyIGdyYWRpZW50Rml4ID0gIiI7CiAgICAgICAgaWYgKElFKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IDY7IGkrKykgewogICAgICAgICAgICAgICAgZ3JhZGllbnRGaXggKz0gIjxkaXYgY2xhc3M9J3NwLSIgKyBpICsgIic+PC9kaXY+IjsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgIjxkaXYgY2xhc3M9J3NwLWNvbnRhaW5lciBzcC1oaWRkZW4nPiIsCiAgICAgICAgICAgICAgICAiPGRpdiBjbGFzcz0nc3AtcGFsZXR0ZS1jb250YWluZXInPiIsCiAgICAgICAgICAgICAgICAgICAgIjxkaXYgY2xhc3M9J3NwLXBhbGV0dGUgc3AtdGh1bWIgc3AtY2YnPjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICAgIjxkaXYgY2xhc3M9J3NwLXBhbGV0dGUtYnV0dG9uLWNvbnRhaW5lciBzcC1jZic+IiwKICAgICAgICAgICAgICAgICAgICAgICAgIjxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0nc3AtcGFsZXR0ZS10b2dnbGUnPjwvYnV0dG9uPiIsCiAgICAgICAgICAgICAgICAgICAgIjwvZGl2PiIsCiAgICAgICAgICAgICAgICAiPC9kaXY+IiwKICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSdzcC1waWNrZXItY29udGFpbmVyJz4iLAogICAgICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSdzcC10b3Agc3AtY2YnPiIsCiAgICAgICAgICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSdzcC1maWxsJz48L2Rpdj4iLAogICAgICAgICAgICAgICAgICAgICAgICAiPGRpdiBjbGFzcz0nc3AtdG9wLWlubmVyJz4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjxkaXYgY2xhc3M9J3NwLWNvbG9yJz4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSdzcC1zYXQnPiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSdzcC12YWwnPiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPGRpdiBjbGFzcz0nc3AtZHJhZ2dlcic+PC9kaXY+IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPC9kaXY+IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSdzcC1jbGVhciBzcC1jbGVhci1kaXNwbGF5Jz4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPGRpdiBjbGFzcz0nc3AtaHVlJz4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSdzcC1zbGlkZXInPjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRGaXgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPC9kaXY+IiwKICAgICAgICAgICAgICAgICAgICAgICAgIjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSdzcC1hbHBoYSc+PGRpdiBjbGFzcz0nc3AtYWxwaGEtaW5uZXInPjxkaXYgY2xhc3M9J3NwLWFscGhhLWhhbmRsZSc+PC9kaXY+PC9kaXY+PC9kaXY+IiwKICAgICAgICAgICAgICAgICAgICAiPC9kaXY+IiwKICAgICAgICAgICAgICAgICAgICAiPGRpdiBjbGFzcz0nc3AtaW5wdXQtY29udGFpbmVyIHNwLWNmJz4iLAogICAgICAgICAgICAgICAgICAgICAgICAiPGlucHV0IGNsYXNzPSdzcC1pbnB1dCcgdHlwZT0ndGV4dCcgc3BlbGxjaGVjaz0nZmFsc2UnICAvPiIsCiAgICAgICAgICAgICAgICAgICAgIjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICAgIjxkaXYgY2xhc3M9J3NwLWluaXRpYWwgc3AtdGh1bWIgc3AtY2YnPjwvZGl2PiIsCiAgICAgICAgICAgICAgICAgICAgIjxkaXYgY2xhc3M9J3NwLWJ1dHRvbi1jb250YWluZXIgc3AtY2YnPiIsCiAgICAgICAgICAgICAgICAgICAgICAgICI8YSBjbGFzcz0nc3AtY2FuY2VsJyBocmVmPScjJz48L2E+IiwKICAgICAgICAgICAgICAgICAgICAgICAgIjxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0nc3AtY2hvb3NlJz48L2J1dHRvbj4iLAogICAgICAgICAgICAgICAgICAgICI8L2Rpdj4iLAogICAgICAgICAgICAgICAgIjwvZGl2PiIsCiAgICAgICAgICAgICI8L2Rpdj4iCiAgICAgICAgXS5qb2luKCIiKTsKICAgIH0pKCk7CgogICAgZnVuY3Rpb24gcGFsZXR0ZVRlbXBsYXRlIChwLCBjb2xvciwgY2xhc3NOYW1lLCBvcHRzKSB7CiAgICAgICAgdmFyIGh0bWwgPSBbXTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBwW2ldOwogICAgICAgICAgICBpZihjdXJyZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgdGlueSA9IHRpbnljb2xvcihjdXJyZW50KTsKICAgICAgICAgICAgICAgIHZhciBjID0gdGlueS50b0hzbCgpLmwgPCAwLjUgPyAic3AtdGh1bWItZWwgc3AtdGh1bWItZGFyayIgOiAic3AtdGh1bWItZWwgc3AtdGh1bWItbGlnaHQiOwogICAgICAgICAgICAgICAgYyArPSAodGlueWNvbG9yLmVxdWFscyhjb2xvciwgY3VycmVudCkpID8gIiBzcC10aHVtYi1hY3RpdmUiIDogIiI7CiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkU3RyaW5nID0gdGlueS50b1N0cmluZyhvcHRzLnByZWZlcnJlZEZvcm1hdCB8fCAicmdiIik7CiAgICAgICAgICAgICAgICB2YXIgc3dhdGNoU3R5bGUgPSByZ2JhU3VwcG9ydCA\/ICgiYmFja2dyb3VuZC1jb2xvcjoiICsgdGlueS50b1JnYlN0cmluZygpKSA6ICJmaWx0ZXI6IiArIHRpbnkudG9GaWx0ZXIoKTsKICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHNwYW4gdGl0bGU9IicgKyBmb3JtYXR0ZWRTdHJpbmcgKyAnIiBkYXRhLWNvbG9yPSInICsgdGlueS50b1JnYlN0cmluZygpICsgJyIgY2xhc3M9IicgKyBjICsgJyI+PHNwYW4gY2xhc3M9InNwLXRodW1iLWlubmVyIiBzdHlsZT0iJyArIHN3YXRjaFN0eWxlICsgJzsiIC8+PC9zcGFuPicpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIGNscyA9ICdzcC1jbGVhci1kaXNwbGF5JzsKICAgICAgICAgICAgICAgIGh0bWwucHVzaCgkKCc8ZGl2IC8+JykKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuIGRhdGEtY29sb3I9IiIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7IiBjbGFzcz0iJyArIGNscyArICciPjwvc3Bhbj4nKQogICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndGl0bGUnLCBvcHRzLm5vQ29sb3JTZWxlY3RlZFRleHQpCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIC5odG1sKCkKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuICI8ZGl2IGNsYXNzPSdzcC1jZiAiICsgY2xhc3NOYW1lICsgIic+IiArIGh0bWwuam9pbignJykgKyAiPC9kaXY+IjsKICAgIH0KCiAgICBmdW5jdGlvbiBoaWRlQWxsKCkgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BlY3RydW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChzcGVjdHJ1bXNbaV0pIHsKICAgICAgICAgICAgICAgIHNwZWN0cnVtc1tpXS5oaWRlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaW5zdGFuY2VPcHRpb25zKG8sIGNhbGxiYWNrQ29udGV4dCkgewogICAgICAgIHZhciBvcHRzID0gJC5leHRlbmQoe30sIGRlZmF1bHRPcHRzLCBvKTsKICAgICAgICBvcHRzLmNhbGxiYWNrcyA9IHsKICAgICAgICAgICAgJ21vdmUnOiBiaW5kKG9wdHMubW92ZSwgY2FsbGJhY2tDb250ZXh0KSwKICAgICAgICAgICAgJ2NoYW5nZSc6IGJpbmQob3B0cy5jaGFuZ2UsIGNhbGxiYWNrQ29udGV4dCksCiAgICAgICAgICAgICdzaG93JzogYmluZChvcHRzLnNob3csIGNhbGxiYWNrQ29udGV4dCksCiAgICAgICAgICAgICdoaWRlJzogYmluZChvcHRzLmhpZGUsIGNhbGxiYWNrQ29udGV4dCksCiAgICAgICAgICAgICdiZWZvcmVTaG93JzogYmluZChvcHRzLmJlZm9yZVNob3csIGNhbGxiYWNrQ29udGV4dCkKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb3B0czsKICAgIH0KCiAgICBmdW5jdGlvbiBzcGVjdHJ1bShlbGVtZW50LCBvKSB7CgogICAgICAgIHZhciBvcHRzID0gaW5zdGFuY2VPcHRpb25zKG8sIGVsZW1lbnQpLAogICAgICAgICAgICBmbGF0ID0gb3B0cy5mbGF0LAogICAgICAgICAgICBzaG93U2VsZWN0aW9uUGFsZXR0ZSA9IG9wdHMuc2hvd1NlbGVjdGlvblBhbGV0dGUsCiAgICAgICAgICAgIGxvY2FsU3RvcmFnZUtleSA9IG9wdHMubG9jYWxTdG9yYWdlS2V5LAogICAgICAgICAgICB0aGVtZSA9IG9wdHMudGhlbWUsCiAgICAgICAgICAgIGNhbGxiYWNrcyA9IG9wdHMuY2FsbGJhY2tzLAogICAgICAgICAgICByZXNpemUgPSB0aHJvdHRsZShyZWZsb3csIDEwKSwKICAgICAgICAgICAgdmlzaWJsZSA9IGZhbHNlLAogICAgICAgICAgICBpc0RyYWdnaW5nID0gZmFsc2UsCiAgICAgICAgICAgIGRyYWdXaWR0aCA9IDAsCiAgICAgICAgICAgIGRyYWdIZWlnaHQgPSAwLAogICAgICAgICAgICBkcmFnSGVscGVySGVpZ2h0ID0gMCwKICAgICAgICAgICAgc2xpZGVIZWlnaHQgPSAwLAogICAgICAgICAgICBzbGlkZVdpZHRoID0gMCwKICAgICAgICAgICAgYWxwaGFXaWR0aCA9IDAsCiAgICAgICAgICAgIGFscGhhU2xpZGVIZWxwZXJXaWR0aCA9IDAsCiAgICAgICAgICAgIHNsaWRlSGVscGVySGVpZ2h0ID0gMCwKICAgICAgICAgICAgY3VycmVudEh1ZSA9IDAsCiAgICAgICAgICAgIGN1cnJlbnRTYXR1cmF0aW9uID0gMCwKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gMCwKICAgICAgICAgICAgY3VycmVudEFscGhhID0gMSwKICAgICAgICAgICAgcGFsZXR0ZSA9IFtdLAogICAgICAgICAgICBwYWxldHRlQXJyYXkgPSBbXSwKICAgICAgICAgICAgcGFsZXR0ZUxvb2t1cCA9IHt9LAogICAgICAgICAgICBzZWxlY3Rpb25QYWxldHRlID0gb3B0cy5zZWxlY3Rpb25QYWxldHRlLnNsaWNlKDApLAogICAgICAgICAgICBtYXhTZWxlY3Rpb25TaXplID0gb3B0cy5tYXhTZWxlY3Rpb25TaXplLAogICAgICAgICAgICBkcmFnZ2luZ0NsYXNzID0gInNwLWRyYWdnaW5nIiwKICAgICAgICAgICAgc2hpZnRNb3ZlbWVudERpcmVjdGlvbiA9IG51bGw7CgogICAgICAgIHZhciBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQsCiAgICAgICAgICAgIGJvZHkgPSBkb2MuYm9keSwKICAgICAgICAgICAgYm91bmRFbGVtZW50ID0gJChlbGVtZW50KSwKICAgICAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSwKICAgICAgICAgICAgY29udGFpbmVyID0gJChtYXJrdXAsIGRvYykuYWRkQ2xhc3ModGhlbWUpLAogICAgICAgICAgICBwaWNrZXJDb250YWluZXIgPSBjb250YWluZXIuZmluZCgiLnNwLXBpY2tlci1jb250YWluZXIiKSwKICAgICAgICAgICAgZHJhZ2dlciA9IGNvbnRhaW5lci5maW5kKCIuc3AtY29sb3IiKSwKICAgICAgICAgICAgZHJhZ0hlbHBlciA9IGNvbnRhaW5lci5maW5kKCIuc3AtZHJhZ2dlciIpLAogICAgICAgICAgICBzbGlkZXIgPSBjb250YWluZXIuZmluZCgiLnNwLWh1ZSIpLAogICAgICAgICAgICBzbGlkZUhlbHBlciA9IGNvbnRhaW5lci5maW5kKCIuc3Atc2xpZGVyIiksCiAgICAgICAgICAgIGFscGhhU2xpZGVySW5uZXIgPSBjb250YWluZXIuZmluZCgiLnNwLWFscGhhLWlubmVyIiksCiAgICAgICAgICAgIGFscGhhU2xpZGVyID0gY29udGFpbmVyLmZpbmQoIi5zcC1hbHBoYSIpLAogICAgICAgICAgICBhbHBoYVNsaWRlSGVscGVyID0gY29udGFpbmVyLmZpbmQoIi5zcC1hbHBoYS1oYW5kbGUiKSwKICAgICAgICAgICAgdGV4dElucHV0ID0gY29udGFpbmVyLmZpbmQoIi5zcC1pbnB1dCIpLAogICAgICAgICAgICBwYWxldHRlQ29udGFpbmVyID0gY29udGFpbmVyLmZpbmQoIi5zcC1wYWxldHRlIiksCiAgICAgICAgICAgIGluaXRpYWxDb2xvckNvbnRhaW5lciA9IGNvbnRhaW5lci5maW5kKCIuc3AtaW5pdGlhbCIpLAogICAgICAgICAgICBjYW5jZWxCdXR0b24gPSBjb250YWluZXIuZmluZCgiLnNwLWNhbmNlbCIpLAogICAgICAgICAgICBjbGVhckJ1dHRvbiA9IGNvbnRhaW5lci5maW5kKCIuc3AtY2xlYXIiKSwKICAgICAgICAgICAgY2hvb3NlQnV0dG9uID0gY29udGFpbmVyLmZpbmQoIi5zcC1jaG9vc2UiKSwKICAgICAgICAgICAgdG9nZ2xlQnV0dG9uID0gY29udGFpbmVyLmZpbmQoIi5zcC1wYWxldHRlLXRvZ2dsZSIpLAogICAgICAgICAgICBpc0lucHV0ID0gYm91bmRFbGVtZW50LmlzKCJpbnB1dCIpLAogICAgICAgICAgICBpc0lucHV0VHlwZUNvbG9yID0gaXNJbnB1dCAmJiBib3VuZEVsZW1lbnQuYXR0cigidHlwZSIpID09PSAiY29sb3IiICYmIGlucHV0VHlwZUNvbG9yU3VwcG9ydCgpLAogICAgICAgICAgICBzaG91bGRSZXBsYWNlID0gaXNJbnB1dCAmJiAhZmxhdCwKICAgICAgICAgICAgcmVwbGFjZXIgPSAoc2hvdWxkUmVwbGFjZSkgPyAkKHJlcGxhY2VJbnB1dCkuYWRkQ2xhc3ModGhlbWUpLmFkZENsYXNzKG9wdHMuY2xhc3NOYW1lKS5hZGRDbGFzcyhvcHRzLnJlcGxhY2VyQ2xhc3NOYW1lKSA6ICQoW10pLAogICAgICAgICAgICBvZmZzZXRFbGVtZW50ID0gKHNob3VsZFJlcGxhY2UpID8gcmVwbGFjZXIgOiBib3VuZEVsZW1lbnQsCiAgICAgICAgICAgIHByZXZpZXdFbGVtZW50ID0gcmVwbGFjZXIuZmluZCgiLnNwLXByZXZpZXctaW5uZXIiKSwKICAgICAgICAgICAgaW5pdGlhbENvbG9yID0gb3B0cy5jb2xvciB8fCAoaXNJbnB1dCAmJiBib3VuZEVsZW1lbnQudmFsKCkpLAogICAgICAgICAgICBjb2xvck9uU2hvdyA9IGZhbHNlLAogICAgICAgICAgICBjdXJyZW50UHJlZmVycmVkRm9ybWF0ID0gb3B0cy5wcmVmZXJyZWRGb3JtYXQsCiAgICAgICAgICAgIGNsaWNrb3V0RmlyZXNDaGFuZ2UgPSAhb3B0cy5zaG93QnV0dG9ucyB8fCBvcHRzLmNsaWNrb3V0RmlyZXNDaGFuZ2UsCiAgICAgICAgICAgIGlzRW1wdHkgPSAhaW5pdGlhbENvbG9yLAogICAgICAgICAgICBhbGxvd0VtcHR5ID0gb3B0cy5hbGxvd0VtcHR5ICYmICFpc0lucHV0VHlwZUNvbG9yOwoKICAgICAgICBmdW5jdGlvbiBhcHBseU9wdGlvbnMoKSB7CgogICAgICAgICAgICBpZiAob3B0cy5zaG93UGFsZXR0ZU9ubHkpIHsKICAgICAgICAgICAgICAgIG9wdHMuc2hvd1BhbGV0dGUgPSB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0b2dnbGVCdXR0b24udGV4dChvcHRzLnNob3dQYWxldHRlT25seSA\/IG9wdHMudG9nZ2xlUGFsZXR0ZU1vcmVUZXh0IDogb3B0cy50b2dnbGVQYWxldHRlTGVzc1RleHQpOwoKICAgICAgICAgICAgaWYgKG9wdHMucGFsZXR0ZSkgewogICAgICAgICAgICAgICAgcGFsZXR0ZSA9IG9wdHMucGFsZXR0ZS5zbGljZSgwKTsKICAgICAgICAgICAgICAgIHBhbGV0dGVBcnJheSA9ICQuaXNBcnJheShwYWxldHRlWzBdKSA\/IHBhbGV0dGUgOiBbcGFsZXR0ZV07CiAgICAgICAgICAgICAgICBwYWxldHRlTG9va3VwID0ge307CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhbGV0dGVBcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFsZXR0ZUFycmF5W2ldLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZ2IgPSB0aW55Y29sb3IocGFsZXR0ZUFycmF5W2ldW2pdKS50b1JnYlN0cmluZygpOwogICAgICAgICAgICAgICAgICAgICAgICBwYWxldHRlTG9va3VwW3JnYl0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29udGFpbmVyLnRvZ2dsZUNsYXNzKCJzcC1mbGF0IiwgZmxhdCk7CiAgICAgICAgICAgIGNvbnRhaW5lci50b2dnbGVDbGFzcygic3AtaW5wdXQtZGlzYWJsZWQiLCAhb3B0cy5zaG93SW5wdXQpOwogICAgICAgICAgICBjb250YWluZXIudG9nZ2xlQ2xhc3MoInNwLWFscGhhLWVuYWJsZWQiLCBvcHRzLnNob3dBbHBoYSk7CiAgICAgICAgICAgIGNvbnRhaW5lci50b2dnbGVDbGFzcygic3AtY2xlYXItZW5hYmxlZCIsIGFsbG93RW1wdHkpOwogICAgICAgICAgICBjb250YWluZXIudG9nZ2xlQ2xhc3MoInNwLWJ1dHRvbnMtZGlzYWJsZWQiLCAhb3B0cy5zaG93QnV0dG9ucyk7CiAgICAgICAgICAgIGNvbnRhaW5lci50b2dnbGVDbGFzcygic3AtcGFsZXR0ZS1idXR0b25zLWRpc2FibGVkIiwgIW9wdHMudG9nZ2xlUGFsZXR0ZU9ubHkpOwogICAgICAgICAgICBjb250YWluZXIudG9nZ2xlQ2xhc3MoInNwLXBhbGV0dGUtZGlzYWJsZWQiLCAhb3B0cy5zaG93UGFsZXR0ZSk7CiAgICAgICAgICAgIGNvbnRhaW5lci50b2dnbGVDbGFzcygic3AtcGFsZXR0ZS1vbmx5Iiwgb3B0cy5zaG93UGFsZXR0ZU9ubHkpOwogICAgICAgICAgICBjb250YWluZXIudG9nZ2xlQ2xhc3MoInNwLWluaXRpYWwtZGlzYWJsZWQiLCAhb3B0cy5zaG93SW5pdGlhbCk7CiAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcyhvcHRzLmNsYXNzTmFtZSkuYWRkQ2xhc3Mob3B0cy5jb250YWluZXJDbGFzc05hbWUpOwoKICAgICAgICAgICAgcmVmbG93KCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkgewoKICAgICAgICAgICAgaWYgKElFKSB7CiAgICAgICAgICAgICAgICBjb250YWluZXIuZmluZCgiKjpub3QoaW5wdXQpIikuYXR0cigidW5zZWxlY3RhYmxlIiwgIm9uIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFwcGx5T3B0aW9ucygpOwoKICAgICAgICAgICAgaWYgKHNob3VsZFJlcGxhY2UpIHsKICAgICAgICAgICAgICAgIGJvdW5kRWxlbWVudC5hZnRlcihyZXBsYWNlcikuaGlkZSgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIWFsbG93RW1wdHkpIHsKICAgICAgICAgICAgICAgIGNsZWFyQnV0dG9uLmhpZGUoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGZsYXQpIHsKICAgICAgICAgICAgICAgIGJvdW5kRWxlbWVudC5hZnRlcihjb250YWluZXIpLmhpZGUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKCiAgICAgICAgICAgICAgICB2YXIgYXBwZW5kVG8gPSBvcHRzLmFwcGVuZFRvID09PSAicGFyZW50IiA\/IGJvdW5kRWxlbWVudC5wYXJlbnQoKSA6ICQob3B0cy5hcHBlbmRUbyk7CiAgICAgICAgICAgICAgICBpZiAoYXBwZW5kVG8ubGVuZ3RoICE9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVG8gPSAkKCJib2R5Iik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgYXBwZW5kVG8uYXBwZW5kKGNvbnRhaW5lcik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHVwZGF0ZVNlbGVjdGlvblBhbGV0dGVGcm9tU3RvcmFnZSgpOwoKICAgICAgICAgICAgb2Zmc2V0RWxlbWVudC5iaW5kKCJjbGljay5zcGVjdHJ1bSB0b3VjaHN0YXJ0LnNwZWN0cnVtIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGlmICghZGlzYWJsZWQpIHsKICAgICAgICAgICAgICAgICAgICB0b2dnbGUoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwoKICAgICAgICAgICAgICAgIGlmICghJChlLnRhcmdldCkuaXMoImlucHV0IikpIHsKICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYoYm91bmRFbGVtZW50LmlzKCI6ZGlzYWJsZWQiKSB8fCAob3B0cy5kaXNhYmxlZCA9PT0gdHJ1ZSkpIHsKICAgICAgICAgICAgICAgIGRpc2FibGUoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gUHJldmVudCBjbGlja3MgZnJvbSBidWJibGluZyB1cCB0byBkb2N1bWVudC4gIFRoaXMgd291bGQgY2F1c2UgaXQgdG8gYmUgaGlkZGVuLgogICAgICAgICAgICBjb250YWluZXIuY2xpY2soc3RvcFByb3BhZ2F0aW9uKTsKCiAgICAgICAgICAgIC8vIEhhbmRsZSB1c2VyIHR5cGVkIGlucHV0CiAgICAgICAgICAgIHRleHRJbnB1dC5jaGFuZ2Uoc2V0RnJvbVRleHRJbnB1dCk7CiAgICAgICAgICAgIHRleHRJbnB1dC5iaW5kKCJwYXN0ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoc2V0RnJvbVRleHRJbnB1dCwgMSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB0ZXh0SW5wdXQua2V5ZG93bihmdW5jdGlvbiAoZSkgeyBpZiAoZS5rZXlDb2RlID09IDEzKSB7IHNldEZyb21UZXh0SW5wdXQoKTsgfSB9KTsKCiAgICAgICAgICAgIGNhbmNlbEJ1dHRvbi50ZXh0KG9wdHMuY2FuY2VsVGV4dCk7CiAgICAgICAgICAgIGNhbmNlbEJ1dHRvbi5iaW5kKCJjbGljay5zcGVjdHJ1bSIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgcmV2ZXJ0KCk7CiAgICAgICAgICAgICAgICBoaWRlKCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2xlYXJCdXR0b24uYXR0cigidGl0bGUiLCBvcHRzLmNsZWFyVGV4dCk7CiAgICAgICAgICAgIGNsZWFyQnV0dG9uLmJpbmQoImNsaWNrLnNwZWN0cnVtIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICBpc0VtcHR5ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIG1vdmUoKTsKCiAgICAgICAgICAgICAgICBpZihmbGF0KSB7CiAgICAgICAgICAgICAgICAgICAgLy9mb3IgdGhlIGZsYXQgc3R5bGUsIHRoaXMgaXMgYSBjaGFuZ2UgZXZlbnQKICAgICAgICAgICAgICAgICAgICB1cGRhdGVPcmlnaW5hbElucHV0KHRydWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNob29zZUJ1dHRvbi50ZXh0KG9wdHMuY2hvb3NlVGV4dCk7CiAgICAgICAgICAgIGNob29zZUJ1dHRvbi5iaW5kKCJjbGljay5zcGVjdHJ1bSIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICAgICAgICAgIGlmIChJRSAmJiB0ZXh0SW5wdXQuaXMoIjpmb2N1cyIpKSB7CiAgICAgICAgICAgICAgICAgICAgdGV4dElucHV0LnRyaWdnZXIoJ2NoYW5nZScpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKCkpIHsKICAgICAgICAgICAgICAgICAgICB1cGRhdGVPcmlnaW5hbElucHV0KHRydWUpOwogICAgICAgICAgICAgICAgICAgIGhpZGUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB0b2dnbGVCdXR0b24udGV4dChvcHRzLnNob3dQYWxldHRlT25seSA\\\/CiAgICAgICAgICAgICAgImhzbCgiICArIGggKyAiLCAiICsgcyArICIlLCAiICsgbCArICIlKSIgOgogICAgICAgICAgICAgICJoc2xhKCIgKyBoICsgIiwgIiArIHMgKyAiJSwgIiArIGwgKyAiJSwgIisgdGhpcy5fcm91bmRBICsgIikiOwogICAgICAgIH0sCiAgICAgICAgdG9IZXg6IGZ1bmN0aW9uKGFsbG93M0NoYXIpIHsKICAgICAgICAgICAgcmV0dXJuIHJnYlRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIGFsbG93M0NoYXIpOwogICAgICAgIH0sCiAgICAgICAgdG9IZXhTdHJpbmc6IGZ1bmN0aW9uKGFsbG93M0NoYXIpIHsKICAgICAgICAgICAgcmV0dXJuICcjJyArIHRoaXMudG9IZXgoYWxsb3czQ2hhcik7CiAgICAgICAgfSwKICAgICAgICB0b0hleDg6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gcmdiYVRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRoaXMuX2EpOwogICAgICAgIH0sCiAgICAgICAgdG9IZXg4U3RyaW5nOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICcjJyArIHRoaXMudG9IZXg4KCk7CiAgICAgICAgfSwKICAgICAgICB0b1JnYjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB7IHI6IG1hdGhSb3VuZCh0aGlzLl9yKSwgZzogbWF0aFJvdW5kKHRoaXMuX2cpLCBiOiBtYXRoUm91bmQodGhpcy5fYiksIGE6IHRoaXMuX2EgfTsKICAgICAgICB9LAogICAgICAgIHRvUmdiU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9hID09IDEpID8KICAgICAgICAgICAgICAicmdiKCIgICsgbWF0aFJvdW5kKHRoaXMuX3IpICsgIiwgIiArIG1hdGhSb3VuZCh0aGlzLl9nKSArICIsICIgKyBtYXRoUm91bmQodGhpcy5fYikgKyAiKSIgOgogICAgICAgICAgICAgICJyZ2JhKCIgKyBtYXRoUm91bmQodGhpcy5fcikgKyAiLCAiICsgbWF0aFJvdW5kKHRoaXMuX2cpICsgIiwgIiArIG1hdGhSb3VuZCh0aGlzLl9iKSArICIsICIgKyB0aGlzLl9yb3VuZEEgKyAiKSI7CiAgICAgICAgfSwKICAgICAgICB0b1BlcmNlbnRhZ2VSZ2I6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4geyByOiBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9yLCAyNTUpICogMTAwKSArICIlIiwgZzogbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fZywgMjU1KSAqIDEwMCkgKyAiJSIsIGI6IG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2IsIDI1NSkgKiAxMDApICsgIiUiLCBhOiB0aGlzLl9hIH07CiAgICAgICAgfSwKICAgICAgICB0b1BlcmNlbnRhZ2VSZ2JTdHJpbmc6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHRoaXMuX2EgPT0gMSkgPwogICAgICAgICAgICAgICJyZ2IoIiAgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9yLCAyNTUpICogMTAwKSArICIlLCAiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fZywgMjU1KSAqIDEwMCkgKyAiJSwgIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2IsIDI1NSkgKiAxMDApICsgIiUpIiA6CiAgICAgICAgICAgICAgInJnYmEoIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX3IsIDI1NSkgKiAxMDApICsgIiUsICIgKyBtYXRoUm91bmQoYm91bmQwMSh0aGlzLl9nLCAyNTUpICogMTAwKSArICIlLCAiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fYiwgMjU1KSAqIDEwMCkgKyAiJSwgIiArIHRoaXMuX3JvdW5kQSArICIpIjsKICAgICAgICB9LAogICAgICAgIHRvTmFtZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICh0aGlzLl9hID09PSAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gInRyYW5zcGFyZW50IjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRoaXMuX2EgPCAxKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBoZXhOYW1lc1tyZ2JUb0hleCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iLCB0cnVlKV0gfHwgZmFsc2U7CiAgICAgICAgfSwKICAgICAgICB0b0ZpbHRlcjogZnVuY3Rpb24oc2Vjb25kQ29sb3IpIHsKICAgICAgICAgICAgdmFyIGhleDhTdHJpbmcgPSAnIycgKyByZ2JhVG9IZXgodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYiwgdGhpcy5fYSk7CiAgICAgICAgICAgIHZhciBzZWNvbmRIZXg4U3RyaW5nID0gaGV4OFN0cmluZzsKICAgICAgICAgICAgdmFyIGdyYWRpZW50VHlwZSA9IHRoaXMuX2dyYWRpZW50VHlwZSA\\\/XFxkKlxcLlxcZCslPyI7CgogICAgICAgIC8vIEFsbG93IHBvc2l0aXZlL25lZ2F0aXZlIGludGVnZXIvbnVtYmVyLiAgRG9uJ3QgY2FwdHVyZSB0aGUgZWl0aGVyL29yLCBqdXN0IHRoZSBlbnRpcmUgb3V0Y29tZS4KICAgICAgICB2YXIgQ1NTX1VOSVQgPSAiKD86IiArIENTU19OVU1CRVIgKyAiKXwoPzoiICsgQ1NTX0lOVEVHRVIgKyAiKSI7CgogICAgICAgIC8vIEFjdHVhbCBtYXRjaGluZy4KICAgICAgICAvLyBQYXJlbnRoZXNlcyBhbmQgY29tbWFzIGFyZSBvcHRpb25hbCwgYnV0IG5vdCByZXF1aXJlZC4KICAgICAgICAvLyBXaGl0ZXNwYWNlIGNhbiB0YWtlIHRoZSBwbGFjZSBvZiBjb21tYXMgb3Igb3BlbmluZyBwYXJlbgogICAgICAgIHZhciBQRVJNSVNTSVZFX01BVENIMyA9ICJbXFxzfFxcKF0rKCIgKyBDU1NfVU5JVCArICIpWyx8XFxzXSsoIiArIENTU19VTklUICsgIilbLHxcXHNdKygiICsgQ1NTX1VOSVQgKyAiKVxccypcXCk\/IjsKICAgICAgICB2YXIgUEVSTUlTU0lWRV9NQVRDSDQgPSAiW1xcc3xcXChdKygiICsgQ1NTX1VOSVQgKyAiKVssfFxcc10rKCIgKyBDU1NfVU5JVCArICIpWyx8XFxzXSsoIiArIENTU19VTklUICsgIilbLHxcXHNdKygiICsgQ1NTX1VOSVQgKyAiKVxccypcXCk\/IjsKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmdiOiBuZXcgUmVnRXhwKCJyZ2IiICsgUEVSTUlTU0lWRV9NQVRDSDMpLAogICAgICAgICAgICByZ2JhOiBuZXcgUmVnRXhwKCJyZ2JhIiArIFBFUk1JU1NJVkVfTUFUQ0g0KSwKICAgICAgICAgICAgaHNsOiBuZXcgUmVnRXhwKCJoc2wiICsgUEVSTUlTU0lWRV9NQVRDSDMpLAogICAgICAgICAgICBoc2xhOiBuZXcgUmVnRXhwKCJoc2xhIiArIFBFUk1JU1NJVkVfTUFUQ0g0KSwKICAgICAgICAgICAgaHN2OiBuZXcgUmVnRXhwKCJoc3YiICsgUEVSTUlTU0lWRV9NQVRDSDMpLAogICAgICAgICAgICBoc3ZhOiBuZXcgUmVnRXhwKCJoc3ZhIiArIFBFUk1JU1NJVkVfTUFUQ0g0KSwKICAgICAgICAgICAgaGV4MzogL14oWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLywKICAgICAgICAgICAgaGV4NjogL14oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkLywKICAgICAgICAgICAgaGV4ODogL14oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC8KICAgICAgICB9OwogICAgfSkoKTsKCiAgICAvLyBgc3RyaW5nSW5wdXRUb09iamVjdGAKICAgIC8vIFBlcm1pc3NpdmUgc3RyaW5nIHBhcnNpbmcuICBUYWtlIGluIGEgbnVtYmVyIG9mIGZvcm1hdHMsIGFuZCBvdXRwdXQgYW4gb2JqZWN0CiAgICAvLyBiYXNlZCBvbiBkZXRlY3RlZCBmb3JtYXQuICBSZXR1cm5zIGB7IHIsIGcsIGIgfWAgb3IgYHsgaCwgcywgbCB9YCBvciBgeyBoLCBzLCB2fWAKICAgIGZ1bmN0aW9uIHN0cmluZ0lucHV0VG9PYmplY3QoY29sb3IpIHsKCiAgICAgICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKHRyaW1MZWZ0LCcnKS5yZXBsYWNlKHRyaW1SaWdodCwgJycpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgdmFyIG5hbWVkID0gZmFsc2U7CiAgICAgICAgaWYgKG5hbWVzW2NvbG9yXSkgewogICAgICAgICAgICBjb2xvciA9IG5hbWVzW2NvbG9yXTsKICAgICAgICAgICAgbmFtZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChjb2xvciA9PSAndHJhbnNwYXJlbnQnKSB7CiAgICAgICAgICAgIHJldHVybiB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDAsIGZvcm1hdDogIm5hbWUiIH07CiAgICAgICAgfQoKICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggc3RyaW5nIGlucHV0IHVzaW5nIHJlZ3VsYXIgZXhwcmVzc2lvbnMuCiAgICAgICAgLy8gS2VlcCBtb3N0IG9mIHRoZSBudW1iZXIgYm91bmRpbmcgb3V0IG9mIHRoaXMgZnVuY3Rpb24gLSBkb24ndCB3b3JyeSBhYm91dCBbMCwxXSBvciBbMCwxMDBdIG9yIFswLDM2MF0KICAgICAgICAvLyBKdXN0IHJldHVybiBhbiBvYmplY3QgYW5kIGxldCB0aGUgY29udmVyc2lvbiBmdW5jdGlvbnMgaGFuZGxlIHRoYXQuCiAgICAgICAgLy8gVGhpcyB3YXkgdGhlIHJlc3VsdCB3aWxsIGJlIHRoZSBzYW1lIHdoZXRoZXIgdGhlIHRpbnljb2xvciBpcyBpbml0aWFsaXplZCB3aXRoIHN0cmluZyBvciBvYmplY3QuCiAgICAgICAgdmFyIG1hdGNoOwogICAgICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5yZ2IuZXhlYyhjb2xvcikpKSB7CiAgICAgICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10gfTsKICAgICAgICB9CiAgICAgICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLnJnYmEuZXhlYyhjb2xvcikpKSB7CiAgICAgICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07CiAgICAgICAgfQogICAgICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc2wuZXhlYyhjb2xvcikpKSB7CiAgICAgICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10gfTsKICAgICAgICB9CiAgICAgICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzbGEuZXhlYyhjb2xvcikpKSB7CiAgICAgICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07CiAgICAgICAgfQogICAgICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc3YuZXhlYyhjb2xvcikpKSB7CiAgICAgICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10gfTsKICAgICAgICB9CiAgICAgICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzdmEuZXhlYyhjb2xvcikpKSB7CiAgICAgICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07CiAgICAgICAgfQogICAgICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXg4LmV4ZWMoY29sb3IpKSkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgYTogY29udmVydEhleFRvRGVjaW1hbChtYXRjaFsxXSksCiAgICAgICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0pLAogICAgICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdKSwKICAgICAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFs0XSksCiAgICAgICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gIm5hbWUiIDogImhleDgiCiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXg2LmV4ZWMoY29sb3IpKSkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdKSwKICAgICAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSksCiAgICAgICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10pLAogICAgICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA\/ICJuYW1lIiA6ICJoZXgiCiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXgzLmV4ZWMoY29sb3IpKSkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdICsgJycgKyBtYXRjaFsxXSksCiAgICAgICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0gKyAnJyArIG1hdGNoWzJdKSwKICAgICAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSArICcnICsgbWF0Y2hbM10pLAogICAgICAgICAgICAgICAgZm9ybWF0OiBuYW1lZCA\/ICJuYW1lIiA6ICJoZXgiCiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgd2luZG93LnRpbnljb2xvciA9IHRpbnljb2xvcjsKICAgIH0pKCk7CgogICAgJChmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCQuZm4uc3BlY3RydW0ubG9hZCkgewogICAgICAgICAgICAkLmZuLnNwZWN0cnVtLnByb2Nlc3NOYXRpdmVDb2xvcklucHV0cygpOwogICAgICAgIH0KICAgIH0pOwoKfSk7Cg==",
    "size": "79270"
}