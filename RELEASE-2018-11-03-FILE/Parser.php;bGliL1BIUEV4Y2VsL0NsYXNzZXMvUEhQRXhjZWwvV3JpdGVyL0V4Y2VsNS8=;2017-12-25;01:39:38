{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Writer\/Excel5\/Parser.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKgogKiBQSFBFeGNlbF9Xcml0ZXJfRXhjZWw1X1BhcnNlcgogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVQogKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgogKgogKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAgMDIxMTAtMTMwMSAgVVNBCiAqCiAqIEBjYXRlZ29yeSAgIFBIUEV4Y2VsCiAqIEBwYWNrYWdlICAgIFBIUEV4Y2VsX1dyaXRlcl9FeGNlbDUKICogQGNvcHlyaWdodCAgQ29weXJpZ2h0IChjKSAyMDA2IC0gMjAxNSBQSFBFeGNlbCAoaHR0cDovL3d3dy5jb2RlcGxleC5jb20vUEhQRXhjZWwpCiAqIEBsaWNlbnNlICAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvbGdwbC0yLjEudHh0ICAgIExHUEwKICogQHZlcnNpb24gICAgIyNWRVJTSU9OIyMsICMjREFURSMjCiAqLwoKLy8gT3JpZ2luYWwgZmlsZSBoZWFkZXIgb2YgUEVBUjo6U3ByZWFkc2hlZXRfRXhjZWxfV3JpdGVyX1BhcnNlciAodXNlZCBhcyB0aGUgYmFzZSBmb3IgdGhpcyBjbGFzcyk6Ci8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vICogIENsYXNzIGZvciBwYXJzaW5nIEV4Y2VsIGZvcm11bGFzCi8vICoKLy8gKiAgTGljZW5zZSBJbmZvcm1hdGlvbjoKLy8gKgovLyAqICAgIFNwcmVhZHNoZWV0X0V4Y2VsX1dyaXRlcjogIEEgbGlicmFyeSBmb3IgZ2VuZXJhdGluZyBFeGNlbCBTcHJlYWRzaGVldHMKLy8gKiAgICBDb3B5cmlnaHQgKGMpIDIwMDItMjAwMyBYYXZpZXIgTm9ndWVyIHhub2d1ZXJAcmV6ZWJyYS5jb20KLy8gKgovLyAqICAgIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKLy8gKiAgICBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCi8vICogICAgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyCi8vICogICAgdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCi8vICoKLy8gKiAgICBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKLy8gKiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgovLyAqICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCi8vICogICAgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KLy8gKgovLyAqICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKLy8gKiAgICBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCi8vICogICAgRm91bmRhdGlvbiwgSW5jLiwgNTkgVGVtcGxlIFBsYWNlLCBTdWl0ZSAzMzAsIEJvc3RvbiwgTUEgIDAyMTExLTEzMDcgIFVTQQovLyAqLwpjbGFzcyBQSFBFeGNlbF9Xcml0ZXJfRXhjZWw1X1BhcnNlcgp7CiAgICAvKiogICAgQ29uc3RhbnRzICAgICAgICAgICAgICAgICovCiAgICAvLyBTaGVldCB0aXRsZSBpbiB1bnF1b3RlZCBmb3JtCiAgICAvLyBJbnZhbGlkIHNoZWV0IHRpdGxlIGNoYXJhY3RlcnMgY2Fubm90IG9jY3VyIGluIHRoZSBzaGVldCB0aXRsZToKICAgIC8vICAgICAgICAgKjovXD9bXQogICAgLy8gTW9yZW92ZXIsIHRoZXJlIGFyZSB2YWxpZCBzaGVldCB0aXRsZSBjaGFyYWN0ZXJzIHRoYXQgY2Fubm90IG9jY3VyIGluIHVucXVvdGVkIGZvcm0gKHRoZXJlIG1heSBiZSBtb3JlPykKICAgIC8vICstJSAnXiY8Pj0sOyMoKSJ7fQogICAgY29uc3QgUkVHRVhfU0hFRVRfVElUTEVfVU5RVU9URUQgPSAnW15cKlw6XC9cXFxcXD9cW1xdXCtcLVwlIFxcXCdcXlwmXDxcPlw9XCxcO1wjXChcKVwiXHtcfV0rJzsKCiAgICAvLyBTaGVldCB0aXRsZSBpbiBxdW90ZWQgZm9ybSAod2l0aG91dCBzdXJyb3VuZGluZyBxdW90ZXMpCiAgICAvLyBJbnZhbGlkIHNoZWV0IHRpdGxlIGNoYXJhY3RlcnMgY2Fubm90IG9jY3VyIGluIHRoZSBzaGVldCB0aXRsZToKICAgIC8vICo6L1w\\/W0EtWmEtel0pXCQ\/KFxkKykkLycsICR0b2tlbikpIHsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5jb252ZXJ0UmVmMmQoJHRva2VuKTsKCiAgICAgICAgLy8gbWF0Y2ggZXh0ZXJuYWwgcmVmZXJlbmNlcyBsaWtlIFNoZWV0MSFBMSBvciBTaGVldDE6U2hlZXQyIUExIG9yIFNoZWV0MSEkQSQxIG9yIFNoZWV0MTpTaGVldDIhJEEkMQogICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCIvXiIgLiBzZWxmOjpSRUdFWF9TSEVFVF9USVRMRV9VTlFVT1RFRCAuICIoXDoiIC4gc2VsZjo6UkVHRVhfU0hFRVRfVElUTEVfVU5RVU9URUQgLiAiKT9cIVxcJD9bQS1JYS1pXT9bQS1aYS16XVxcJD8oXGQrKSQvdSIsICR0b2tlbikpIHsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5jb252ZXJ0UmVmM2QoJHRva2VuKTsKCiAgICAgICAgLy8gbWF0Y2ggZXh0ZXJuYWwgcmVmZXJlbmNlcyBsaWtlICdTaGVldDEnIUExIG9yICdTaGVldDE6U2hlZXQyJyFBMSBvciAnU2hlZXQxJyEkQSQxIG9yICdTaGVldDE6U2hlZXQyJyEkQSQxCiAgICAgICAgfSBlbHNlaWYgKHByZWdfbWF0Y2goIi9eJyIgLiBzZWxmOjpSRUdFWF9TSEVFVF9USVRMRV9RVU9URUQgLiAiKFw6IiAuIHNlbGY6OlJFR0VYX1NIRUVUX1RJVExFX1FVT1RFRCAuICIpPydcIVxcJD9bQS1JYS1pXT9bQS1aYS16XVxcJD8oXGQrKSQvdSIsICR0b2tlbikpIHsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5jb252ZXJ0UmVmM2QoJHRva2VuKTsKCiAgICAgICAgLy8gbWF0Y2ggcmFuZ2VzIGxpa2UgQTE6QjIgb3IgJEEkMTokQiQyCiAgICAgICAgfSBlbHNlaWYgKHByZWdfbWF0Y2goJy9eKFwkKT9bQS1JYS1pXT9bQS1aYS16XShcJCk\/KFxkKylcOihcJCk\/W0EtSWEtaV0\/W0EtWmEtel0oXCQpPyhcZCspJC8nLCAkdG9rZW4pKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+Y29udmVydFJhbmdlMmQoJHRva2VuKTsKCiAgICAgICAgLy8gbWF0Y2ggZXh0ZXJuYWwgcmFuZ2VzIGxpa2UgU2hlZXQxIUExOkIyIG9yIFNoZWV0MTpTaGVldDIhQTE6QjIgb3IgU2hlZXQxISRBJDE6JEIkMiBvciBTaGVldDE6U2hlZXQyISRBJDE6JEIkMgogICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCIvXiIgLiBzZWxmOjpSRUdFWF9TSEVFVF9USVRMRV9VTlFVT1RFRCAuICIoXDoiIC4gc2VsZjo6UkVHRVhfU0hFRVRfVElUTEVfVU5RVU9URUQgLiAiKT9cIVxcJD8oW0EtSWEtaV0\/W0EtWmEtel0pP1xcJD8oXGQrKVw6XFwkPyhbQS1JYS1pXT9bQS1aYS16XSk\/XFwkPyhcZCspJC91IiwgJHRva2VuKSkgewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmNvbnZlcnRSYW5nZTNkKCR0b2tlbik7CgogICAgICAgIC8vIG1hdGNoIGV4dGVybmFsIHJhbmdlcyBsaWtlICdTaGVldDEnIUExOkIyIG9yICdTaGVldDE6U2hlZXQyJyFBMTpCMiBvciAnU2hlZXQxJyEkQSQxOiRCJDIgb3IgJ1NoZWV0MTpTaGVldDInISRBJDE6JEIkMgogICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCIvXiciIC4gc2VsZjo6UkVHRVhfU0hFRVRfVElUTEVfUVVPVEVEIC4gIihcOiIgLiBzZWxmOjpSRUdFWF9TSEVFVF9USVRMRV9RVU9URUQgLiAiKT8nXCFcXCQ\/KFtBLUlhLWldP1tBLVphLXpdKT9cXCQ\/KFxkKylcOlxcJD8oW0EtSWEtaV0\/W0EtWmEtel0pP1xcJD8oXGQrKSQvdSIsICR0b2tlbikpIHsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5jb252ZXJ0UmFuZ2UzZCgkdG9rZW4pOwoKICAgICAgICAvLyBvcGVyYXRvcnMgKGluY2x1ZGluZyBwYXJlbnRoZXNlcykKICAgICAgICB9IGVsc2VpZiAoaXNzZXQoJHRoaXMtPnB0Z1skdG9rZW5dKSkgewogICAgICAgICAgICByZXR1cm4gcGFjaygiQyIsICR0aGlzLT5wdGdbJHRva2VuXSk7CgogICAgICAgIC8vIG1hdGNoIGVycm9yIGNvZGVzCiAgICAgICAgfSBlbHNlaWYgKHByZWdfbWF0Y2goIi9eI1tBLVowXC9dezMsNX1bIT9dezF9JC8iLCAkdG9rZW4pIG9yICR0b2tlbiA9PSAnI04vQScpIHsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5jb252ZXJ0RXJyb3IoJHRva2VuKTsKCiAgICAgICAgLy8gY29tbWVudGVkIHNvIGFyZ3VtZW50IG51bWJlciBjYW4gYmUgcHJvY2Vzc2VkIGNvcnJlY3RseS4gU2VlIHRvUmV2ZXJzZVBvbGlzaCgpLgogICAgICAgIC8qZWxzZWlmIChwcmVnX21hdGNoKCIvW0EtWjAtOVx4YzAtXHhkY1wuXSsvIiwgJHRva2VuKSkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybigkdGhpcy0+Y29udmVydEZ1bmN0aW9uKCR0b2tlbiwgJHRoaXMtPl9mdW5jX2FyZ3MpKTsKICAgICAgICB9Ki8KCiAgICAgICAgLy8gaWYgaXQncyBhbiBhcmd1bWVudCwgaWdub3JlIHRoZSB0b2tlbiAodGhlIGFyZ3VtZW50IHJlbWFpbnMpCiAgICAgICAgfSBlbHNlaWYgKCR0b2tlbiA9PSAnYXJnJykgewogICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgfQoKICAgICAgICAvLyBUT0RPOiB1c2UgcmVhbCBlcnJvciBjb2RlcwogICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9Xcml0ZXJfRXhjZXB0aW9uKCJVbmtub3duIHRva2VuICR0b2tlbiIpOwogICAgfQoKICAgIC8qKgogICAgICogQ29udmVydCBhIG51bWJlciB0b2tlbiB0byBwdGdJbnQgb3IgcHRnTnVtCiAgICAgKgogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG51bSBhbiBpbnRlZ2VyIG9yIGRvdWJsZSBmb3IgY29udmVyc2lvbiB0byBpdHMgcHRnIHZhbHVlCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gY29udmVydE51bWJlcigkbnVtKQogICAgewogICAgICAgIC8vIEludGVnZXIgaW4gdGhlIHJhbmdlIDAuLjIqKjE2LTEKICAgICAgICBpZiAoKHByZWdfbWF0Y2goIi9eXGQrJC8iLCAkbnVtKSkgYW5kICgkbnVtIDw9IDY1NTM1KSkgewogICAgICAgICAgICByZXR1cm4gcGFjaygiQ3YiLCAkdGhpcy0+cHRnWydwdGdJbnQnXSwgJG51bSk7CiAgICAgICAgfSBlbHNlIHsgLy8gQSBmbG9hdAogICAgICAgICAgICBpZiAoUEhQRXhjZWxfV3JpdGVyX0V4Y2VsNV9CSUZGd3JpdGVyOjpnZXRCeXRlT3JkZXIoKSkgeyAvLyBpZiBpdCdzIEJpZyBFbmRpYW4KICAgICAgICAgICAgICAgICRudW0gPSBzdHJyZXYoJG51bSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHBhY2soIkNkIiwgJHRoaXMtPnB0Z1sncHRnTnVtJ10sICRudW0pOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIENvbnZlcnQgYSBzdHJpbmcgdG9rZW4gdG8gcHRnU3RyCiAgICAgKgogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKiBAcGFyYW0gc3RyaW5nICRzdHJpbmcgQSBzdHJpbmcgZm9yIGNvbnZlcnNpb24gdG8gaXRzIHB0ZyB2YWx1ZS4KICAgICAqIEByZXR1cm4gbWl4ZWQgdGhlIGNvbnZlcnRlZCB0b2tlbiBvbiBzdWNjZXNzCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gY29udmVydFN0cmluZygkc3RyaW5nKQogICAgewogICAgICAgIC8vIGNob3AgYXdheSBiZWdnaW5pbmcgYW5kIGVuZGluZyBxdW90ZXMKICAgICAgICAkc3RyaW5nID0gc3Vic3RyKCRzdHJpbmcsIDEsIHN0cmxlbigkc3RyaW5nKSAtIDIpOwogICAgICAgIGlmIChzdHJsZW4oJHN0cmluZykgPiAyNTUpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX1dyaXRlcl9FeGNlcHRpb24oIlN0cmluZyBpcyB0b28gbG9uZyIpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHBhY2soJ0MnLCAkdGhpcy0+cHRnWydwdGdTdHInXSkgLiBQSFBFeGNlbF9TaGFyZWRfU3RyaW5nOjpVVEY4dG9CSUZGOFVuaWNvZGVTaG9ydCgkc3RyaW5nKTsKICAgIH0KCiAgICAvKioKICAgICAqIENvbnZlcnQgYSBmdW5jdGlvbiB0byBhIHB0Z0Z1bmMgb3IgcHRnRnVuY1ZhclYgZGVwZW5kaW5nIG9uIHRoZSBudW1iZXIgb2YKICAgICAqIGFyZ3MgdGhhdCBpdCB0YWtlcy4KICAgICAqCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEBwYXJhbSBzdHJpbmcgICR0b2tlbiAgICBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gZm9yIGNvbnZlcnRpb24gdG8gcHRnIHZhbHVlLgogICAgICogQHBhcmFtIGludGVnZXIgJG51bV9hcmdzIFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRoZSBmdW5jdGlvbiByZWNlaXZlcy4KICAgICAqIEByZXR1cm4gc3RyaW5nIFRoZSBwYWNrZWQgcHRnIGZvciB0aGUgZnVuY3Rpb24KICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiBjb252ZXJ0RnVuY3Rpb24oJHRva2VuLCAkbnVtX2FyZ3MpCiAgICB7CiAgICAgICAgJGFyZ3MgICAgID0gJHRoaXMtPmZ1bmN0aW9uc1skdG9rZW5dWzFdOwovLyAgICAgICAgJHZvbGF0aWxlID0gJHRoaXMtPmZ1bmN0aW9uc1skdG9rZW5dWzNdOwoKICAgICAgICAvLyBGaXhlZCBudW1iZXIgb2YgYXJncyBlZy4gVElNRSgkaSwgJGosICRrKS4KICAgICAgICBpZiAoJGFyZ3MgPj0gMCkgewogICAgICAgICAgICByZXR1cm4gcGFjaygiQ3YiLCAkdGhpcy0+cHRnWydwdGdGdW5jViddLCAkdGhpcy0+ZnVuY3Rpb25zWyR0b2tlbl1bMF0pOwogICAgICAgIH0KICAgICAgICAvLyBWYXJpYWJsZSBudW1iZXIgb2YgYXJncyBlZy4gU1VNKCRpLCAkaiwgJGssIC4uKS4KICAgICAgICBpZiAoJGFyZ3MgPT0gLTEpIHsKICAgICAgICAgICAgcmV0dXJuIHBhY2soIkNDdiIsICR0aGlzLT5wdGdbJ3B0Z0Z1bmNWYXJWJ10sICRudW1fYXJncywgJHRoaXMtPmZ1bmN0aW9uc1skdG9rZW5dWzBdKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBDb252ZXJ0IGFuIEV4Y2VsIHJhbmdlIHN1Y2ggYXMgQTE6RDQgdG8gYSBwdGdSZWZWLgogICAgICoKICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICogQHBhcmFtIHN0cmluZyAgICAkcmFuZ2UgICAgQW4gRXhjZWwgcmFuZ2UgaW4gdGhlIEExOkEyCiAgICAgKiBAcGFyYW0gaW50ICAgICAgICAkY2xhc3MKICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiBjb252ZXJ0UmFuZ2UyZCgkcmFuZ2UsICRjbGFzcyA9IDApCiAgICB7CgogICAgICAgIC8vIFRPRE86IHBvc3NpYmxlIGNsYXNzIHZhbHVlIDAsMSwyIGNoZWNrIEZvcm11bGEucG0KICAgICAgICAvLyBTcGxpdCB0aGUgcmFuZ2UgaW50byAyIGNlbGwgcmVmcwogICAgICAgIGlmIChwcmVnX21hdGNoKCcvXihcJCk\/KFtBLUlhLWldP1tBLVphLXpdKShcJCk\/KFxkKylcOihcJCk\/KFtBLUlhLWldP1tBLVphLXpdKShcJCk\/KFxkKykkLycsICRyYW5nZSkpIHsKICAgICAgICAgICAgbGlzdCgkY2VsbDEsICRjZWxsMikgPSBleHBsb2RlKCc6JywgJHJhbmdlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBUT0RPOiB1c2UgcmVhbCBlcnJvciBjb2RlcwogICAgICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfV3JpdGVyX0V4Y2VwdGlvbigiVW5rbm93biByYW5nZSBzZXBhcmF0b3IiKTsKICAgICAgICB9CgogICAgICAgIC8vIENvbnZlcnQgdGhlIGNlbGwgcmVmZXJlbmNlcwogICAgICAgIGxpc3QoJHJvdzEsICRjb2wxKSA9ICR0aGlzLT5jZWxsVG9QYWNrZWRSb3djb2woJGNlbGwxKTsKICAgICAgICBsaXN0KCRyb3cyLCAkY29sMikgPSAkdGhpcy0+Y2VsbFRvUGFja2VkUm93Y29sKCRjZWxsMik7CgogICAgICAgIC8vIFRoZSBwdGcgdmFsdWUgZGVwZW5kcyBvbiB0aGUgY2xhc3Mgb2YgdGhlIHB0Zy4KICAgICAgICBpZiAoJGNsYXNzID09IDApIHsKICAgICAgICAgICAgJHB0Z0FyZWEgPSBwYWNrKCJDIiwgJHRoaXMtPnB0Z1sncHRnQXJlYSddKTsKICAgICAgICB9IGVsc2VpZiAoJGNsYXNzID09IDEpIHsKICAgICAgICAgICAgJHB0Z0FyZWEgPSBwYWNrKCJDIiwgJHRoaXMtPnB0Z1sncHRnQXJlYVYnXSk7CiAgICAgICAgfSBlbHNlaWYgKCRjbGFzcyA9PSAyKSB7CiAgICAgICAgICAgICRwdGdBcmVhID0gcGFjaygiQyIsICR0aGlzLT5wdGdbJ3B0Z0FyZWFBJ10pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIFRPRE86IHVzZSByZWFsIGVycm9yIGNvZGVzCiAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9Xcml0ZXJfRXhjZXB0aW9uKCJVbmtub3duIGNsYXNzICRjbGFzcyIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJHB0Z0FyZWEgLiAkcm93MSAuICRyb3cyIC4gJGNvbDEuICRjb2wyOwogICAgfQoKICAgIC8qKgogICAgICogQ29udmVydCBhbiBFeGNlbCAzZCByYW5nZSBzdWNoIGFzICJTaGVldDEhQTE6RDQiIG9yICJTaGVldDE6U2hlZXQyIUExOkQ0IiB0bwogICAgICogYSBwdGdBcmVhM2QuCiAgICAgKgogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKiBAcGFyYW0gc3RyaW5nICR0b2tlbiBBbiBFeGNlbCByYW5nZSBpbiB0aGUgU2hlZXQxIUExOkEyIGZvcm1hdC4KICAgICAqIEByZXR1cm4gbWl4ZWQgVGhlIHBhY2tlZCBwdGdBcmVhM2QgdG9rZW4gb24gc3VjY2Vzcy4KICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiBjb252ZXJ0UmFuZ2UzZCgkdG9rZW4pCiAgICB7Ci8vICAgICAgICAkY2xhc3MgPSAwOyAvLyBmb3JtdWxhcyBsaWtlIFNoZWV0MSEkQSQxOiRBJDIgaW4gbGlzdCB0eXBlIGRhdGEgdmFsaWRhdGlvbiBuZWVkIHRoaXMgY2xhc3MgKDB4M0IpCgogICAgICAgIC8vIFNwbGl0IHRoZSByZWYgYXQgdGhlICEgc3ltYm9sCiAgICAgICAgbGlzdCgkZXh0X3JlZiwgJHJhbmdlKSA9IGV4cGxvZGUoJyEnLCAkdG9rZW4pOwoKICAgICAgICAvLyBDb252ZXJ0IHRoZSBleHRlcm5hbCByZWZlcmVuY2UgcGFydCAoZGlmZmVyZW50IGZvciBCSUZGOCkKICAgICAgICAkZXh0X3JlZiA9ICR0aGlzLT5nZXRSZWZJbmRleCgkZXh0X3JlZik7CgogICAgICAgIC8vIFNwbGl0IHRoZSByYW5nZSBpbnRvIDIgY2VsbCByZWZzCiAgICAgICAgbGlzdCgkY2VsbDEsICRjZWxsMikgPSBleHBsb2RlKCc6JywgJHJhbmdlKTsKCiAgICAgICAgLy8gQ29udmVydCB0aGUgY2VsbCByZWZlcmVuY2VzCiAgICAgICAgaWYgKHByZWdfbWF0Y2goIi9eKFxcJCk\/W0EtSWEtaV0\/W0EtWmEtel0oXFwkKT8oXGQrKSQvIiwgJGNlbGwxKSkgewogICAgICAgICAgICBsaXN0KCRyb3cxLCAkY29sMSkgPSAkdGhpcy0+Y2VsbFRvUGFja2VkUm93Y29sKCRjZWxsMSk7CiAgICAgICAgICAgIGxpc3QoJHJvdzIsICRjb2wyKSA9ICR0aGlzLT5jZWxsVG9QYWNrZWRSb3djb2woJGNlbGwyKTsKICAgICAgICB9IGVsc2UgeyAvLyBJdCdzIGEgcm93cyByYW5nZSAobGlrZSAyNjoyNykKICAgICAgICAgICAgIGxpc3QoJHJvdzEsICRjb2wxLCAkcm93MiwgJGNvbDIpID0gJHRoaXMtPnJhbmdlVG9QYWNrZWRSYW5nZSgkY2VsbDEuJzonLiRjZWxsMik7CiAgICAgICAgfQoKICAgICAgICAvLyBUaGUgcHRnIHZhbHVlIGRlcGVuZHMgb24gdGhlIGNsYXNzIG9mIHRoZSBwdGcuCi8vICAgICAgICBpZiAoJGNsYXNzID09IDApIHsKICAgICAgICAgICAgJHB0Z0FyZWEgPSBwYWNrKCJDIiwgJHRoaXMtPnB0Z1sncHRnQXJlYTNkJ10pOwovLyAgICAgICAgfSBlbHNlaWYgKCRjbGFzcyA9PSAxKSB7Ci8vICAgICAgICAgICAgJHB0Z0FyZWEgPSBwYWNrKCJDIiwgJHRoaXMtPnB0Z1sncHRnQXJlYTNkViddKTsKLy8gICAgICAgIH0gZWxzZWlmICgkY2xhc3MgPT0gMikgewovLyAgICAgICAgICAgICRwdGdBcmVhID0gcGFjaygiQyIsICR0aGlzLT5wdGdbJ3B0Z0FyZWEzZEEnXSk7Ci8vICAgICAgICB9IGVsc2UgewovLyAgICAgICAgICAgIHRocm93IG5ldyBQSFBFeGNlbF9Xcml0ZXJfRXhjZXB0aW9uKCJVbmtub3duIGNsYXNzICRjbGFzcyIpOwovLyAgICAgICAgfQoKICAgICAgICByZXR1cm4gJHB0Z0FyZWEgLiAkZXh0X3JlZiAuICRyb3cxIC4gJHJvdzIgLiAkY29sMS4gJGNvbDI7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb252ZXJ0IGFuIEV4Y2VsIHJlZmVyZW5jZSBzdWNoIGFzIEExLCAkQjIsIEMkMyBvciAkRCQ0IHRvIGEgcHRnUmVmVi4KICAgICAqCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEBwYXJhbSBzdHJpbmcgJGNlbGwgQW4gRXhjZWwgY2VsbCByZWZlcmVuY2UKICAgICAqIEByZXR1cm4gc3RyaW5nIFRoZSBjZWxsIGluIHBhY2tlZCgpIGZvcm1hdCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHB0ZwogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIGNvbnZlcnRSZWYyZCgkY2VsbCkKICAgIHsKLy8gICAgICAgICRjbGFzcyA9IDI7IC8vIGFzIGZhciBhcyBJIGtub3csIHRoaXMgaXMgbWFnaWNrLgoKICAgICAgICAvLyBDb252ZXJ0IHRoZSBjZWxsIHJlZmVyZW5jZQogICAgICAgICRjZWxsX2FycmF5ID0gJHRoaXMtPmNlbGxUb1BhY2tlZFJvd2NvbCgkY2VsbCk7CiAgICAgICAgbGlzdCgkcm93LCAkY29sKSA9ICRjZWxsX2FycmF5OwoKICAgICAgICAvLyBUaGUgcHRnIHZhbHVlIGRlcGVuZHMgb24gdGhlIGNsYXNzIG9mIHRoZSBwdGcuCi8vICAgICAgICBpZiAoJGNsYXNzID09IDApIHsKLy8gICAgICAgICAgICAkcHRnUmVmID0gcGFjaygiQyIsICR0aGlzLT5wdGdbJ3B0Z1JlZiddKTsKLy8gICAgICAgIH0gZWxzZWlmICgkY2xhc3MgPT0gMSkgewovLyAgICAgICAgICAgICRwdGdSZWYgPSBwYWNrKCJDIiwgJHRoaXMtPnB0Z1sncHRnUmVmViddKTsKLy8gICAgICAgIH0gZWxzZWlmICgkY2xhc3MgPT0gMikgewogICAgICAgICAgICAkcHRnUmVmID0gcGFjaygiQyIsICR0aGlzLT5wdGdbJ3B0Z1JlZkEnXSk7Ci8vICAgICAgICB9IGVsc2UgewovLyAgICAgICAgICAgIC8vIFRPRE86IHVzZSByZWFsIGVycm9yIGNvZGVzCi8vICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX1dyaXRlcl9FeGNlcHRpb24oIlVua25vd24gY2xhc3MgJGNsYXNzIik7Ci8vICAgICAgICB9CiAgICAgICAgcmV0dXJuICRwdGdSZWYuJHJvdy4kY29sOwogICAgfQoKICAgIC8qKgogICAgICogQ29udmVydCBhbiBFeGNlbCAzZCByZWZlcmVuY2Ugc3VjaCBhcyAiU2hlZXQxIUExIiBvciAiU2hlZXQxOlNoZWV0MiFBMSIgdG8gYQogICAgICogcHRnUmVmM2QuCiAgICAgKgogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKiBAcGFyYW0gc3RyaW5nICRjZWxsIEFuIEV4Y2VsIGNlbGwgcmVmZXJlbmNlCiAgICAgKiBAcmV0dXJuIG1peGVkIFRoZSBwYWNrZWQgcHRnUmVmM2QgdG9rZW4gb24gc3VjY2Vzcy4KICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiBjb252ZXJ0UmVmM2QoJGNlbGwpCiAgICB7Ci8vICAgICAgICAkY2xhc3MgPSAyOyAvLyBhcyBmYXIgYXMgSSBrbm93LCB0aGlzIGlzIG1hZ2ljay4KCiAgICAgICAgLy8gU3BsaXQgdGhlIHJlZiBhdCB0aGUgISBzeW1ib2wKICAgICAgICBsaXN0KCRleHRfcmVmLCAkY2VsbCkgPSBleHBsb2RlKCchJywgJGNlbGwpOwoKICAgICAgICAvLyBDb252ZXJ0IHRoZSBleHRlcm5hbCByZWZlcmVuY2UgcGFydCAoZGlmZmVyZW50IGZvciBCSUZGOCkKICAgICAgICAkZXh0X3JlZiA9ICR0aGlzLT5nZXRSZWZJbmRleCgkZXh0X3JlZik7CgogICAgICAgIC8vIENvbnZlcnQgdGhlIGNlbGwgcmVmZXJlbmNlIHBhcnQKICAgICAgICBsaXN0KCRyb3csICRjb2wpID0gJHRoaXMtPmNlbGxUb1BhY2tlZFJvd2NvbCgkY2VsbCk7CgogICAgICAgIC8vIFRoZSBwdGcgdmFsdWUgZGVwZW5kcyBvbiB0aGUgY2xhc3Mgb2YgdGhlIHB0Zy4KLy8gICAgICAgIGlmICgkY2xhc3MgPT0gMCkgewovLyAgICAgICAgICAgICRwdGdSZWYgPSBwYWNrKCJDIiwgJHRoaXMtPnB0Z1sncHRnUmVmM2QnXSk7Ci8vICAgICAgICB9IGVsc2VpZiAoJGNsYXNzID09IDEpIHsKLy8gICAgICAgICAgICAkcHRnUmVmID0gcGFjaygiQyIsICR0aGlzLT5wdGdbJ3B0Z1JlZjNkViddKTsKLy8gICAgICAgIH0gZWxzZWlmICgkY2xhc3MgPT0gMikgewogICAgICAgICAgICAkcHRnUmVmID0gcGFjaygiQyIsICR0aGlzLT5wdGdbJ3B0Z1JlZjNkQSddKTsKLy8gICAgICAgIH0gZWxzZSB7Ci8vICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX1dyaXRlcl9FeGNlcHRpb24oIlVua25vd24gY2xhc3MgJGNsYXNzIik7Ci8vICAgICAgICB9CgogICAgICAgIHJldHVybiAkcHRnUmVmIC4gJGV4dF9yZWYuICRyb3cgLiAkY29sOwogICAgfQoKICAgIC8qKgogICAgICogQ29udmVydCBhbiBlcnJvciBjb2RlIHRvIGEgcHRnRXJyCiAgICAgKgogICAgICogQGFjY2VzcyAgICBwcml2YXRlCiAgICAgKiBAcGFyYW0gICAgc3RyaW5nICAgICRlcnJvckNvZGUgICAgVGhlIGVycm9yIGNvZGUgZm9yIGNvbnZlcnNpb24gdG8gaXRzIHB0ZyB2YWx1ZQogICAgICogQHJldHVybiAgICBzdHJpbmcgICAgICAgICAgICAgICAgVGhlIGVycm9yIGNvZGUgcHRnRXJyCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gY29udmVydEVycm9yKCRlcnJvckNvZGUpCiAgICB7CiAgICAgICAgc3dpdGNoICgkZXJyb3JDb2RlKSB7CiAgICAgICAgICAgIGNhc2UgJyNOVUxMISc6CiAgICAgICAgICAgICAgICByZXR1cm4gcGFjaygiQyIsIDB4MDApOwogICAgICAgICAgICBjYXNlICcjRElWLzAhJzoKICAgICAgICAgICAgICAgIHJldHVybiBwYWNrKCJDIiwgMHgwNyk7CiAgICAgICAgICAgIGNhc2UgJyNWQUxVRSEnOgogICAgICAgICAgICAgICAgcmV0dXJuIHBhY2soIkMiLCAweDBGKTsKICAgICAgICAgICAgY2FzZSAnI1JFRiEnOgogICAgICAgICAgICAgICAgcmV0dXJuIHBhY2soIkMiLCAweDE3KTsKICAgICAgICAgICAgY2FzZSAnI05BTUU\\/W0EtWl0pKFwkKT8oXGQrKS8nLCAkY2VsbCwgJG1hdGNoKTsKICAgICAgICAvLyByZXR1cm4gYWJzb2x1dGUgY29sdW1uIGlmIHRoZXJlIGlzIGEgJCBpbiB0aGUgcmVmCiAgICAgICAgJGNvbF9yZWwgPSBlbXB0eSgkbWF0Y2hbMV0pID8gMSA6IDA7CiAgICAgICAgJGNvbF9yZWYgPSAkbWF0Y2hbMl07CiAgICAgICAgJHJvd19yZWwgPSBlbXB0eSgkbWF0Y2hbM10pID8gMSA6IDA7CiAgICAgICAgJHJvdyAgICAgPSAkbWF0Y2hbNF07CgogICAgICAgIC8vIENvbnZlcnQgYmFzZTI2IGNvbHVtbiBzdHJpbmcgdG8gYSBudW1iZXIuCiAgICAgICAgJGV4cG4gPSBzdHJsZW4oJGNvbF9yZWYpIC0gMTsKICAgICAgICAkY29sICA9IDA7CiAgICAgICAgJGNvbF9yZWZfbGVuZ3RoID0gc3RybGVuKCRjb2xfcmVmKTsKICAgICAgICBmb3IgKCRpID0gMDsgJGkgPCAkY29sX3JlZl9sZW5ndGg7ICsrJGkpIHsKICAgICAgICAgICAgJGNvbCArPSAob3JkKCRjb2xfcmVmeyRpfSkgLSA2NCkgKiBwb3coMjYsICRleHBuKTsKICAgICAgICAgICAgLS0kZXhwbjsKICAgICAgICB9CgogICAgICAgIC8vIENvbnZlcnQgMS1pbmRleCB0byB6ZXJvLWluZGV4CiAgICAgICAgLS0kcm93OwogICAgICAgIC0tJGNvbDsKCiAgICAgICAgcmV0dXJuIGFycmF5KCRyb3csICRjb2wsICRyb3dfcmVsLCAkY29sX3JlbCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBBZHZhbmNlIHRvIHRoZSBuZXh0IHZhbGlkIHRva2VuLgogICAgICoKICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkdmFuY2UoKQogICAgewogICAgICAgICRpID0gJHRoaXMtPmN1cnJlbnRDaGFyYWN0ZXI7CiAgICAgICAgJGZvcm11bGFfbGVuZ3RoID0gc3RybGVuKCR0aGlzLT5mb3JtdWxhKTsKICAgICAgICAvLyBlYXQgdXAgd2hpdGUgc3BhY2VzCiAgICAgICAgaWYgKCRpIDwgJGZvcm11bGFfbGVuZ3RoKSB7CiAgICAgICAgICAgIHdoaWxlICgkdGhpcy0+Zm9ybXVsYXskaX0gPT0gIiAiKSB7CiAgICAgICAgICAgICAgICArKyRpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJGkgPCAoJGZvcm11bGFfbGVuZ3RoIC0gMSkpIHsKICAgICAgICAgICAgICAgICR0aGlzLT5sb29rQWhlYWQgPSAkdGhpcy0+Zm9ybXVsYXskaSsxfTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkdG9rZW4gPSAnJzsKICAgICAgICB9CgogICAgICAgIHdoaWxlICgkaSA8ICRmb3JtdWxhX2xlbmd0aCkgewogICAgICAgICAgICAkdG9rZW4gLj0gJHRoaXMtPmZvcm11bGF7JGl9OwoKICAgICAgICAgICAgaWYgKCRpIDwgKCRmb3JtdWxhX2xlbmd0aCAtIDEpKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+bG9va0FoZWFkID0gJHRoaXMtPmZvcm11bGF7JGkrMX07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+bG9va0FoZWFkID0gJyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkdGhpcy0+bWF0Y2goJHRva2VuKSAhPSAnJykgewogICAgICAgICAgICAgICAgLy9pZiAoJGkgPCBzdHJsZW4oJHRoaXMtPmZvcm11bGEpIC0gMSkgewogICAgICAgICAgICAgICAgLy8gICAgJHRoaXMtPmxvb2tBaGVhZCA9ICR0aGlzLT5mb3JtdWxheyRpKzF9OwogICAgICAgICAgICAgICAgLy99CiAgICAgICAgICAgICAgICAkdGhpcy0+Y3VycmVudENoYXJhY3RlciA9ICRpICsgMTsKICAgICAgICAgICAgICAgICR0aGlzLT5jdXJyZW50VG9rZW4gPSAkdG9rZW47CiAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRpIDwgKCRmb3JtdWxhX2xlbmd0aCAtIDIpKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+bG9va0FoZWFkID0gJHRoaXMtPmZvcm11bGF7JGkrMn07CiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIHdlIHJ1biBvdXQgb2YgY2hhcmFjdGVycyBsb29rQWhlYWQgYmVjb21lcyBlbXB0eQogICAgICAgICAgICAgICAgJHRoaXMtPmxvb2tBaGVhZCA9ICcnOwogICAgICAgICAgICB9CiAgICAgICAgICAgICsrJGk7CiAgICAgICAgfQogICAgICAgIC8vZGllKCJMZXhpY2FsIGVycm9yICIuJHRoaXMtPmN1cnJlbnRDaGFyYWN0ZXIpOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGl0J3MgYSB2YWxpZCB0b2tlbi4KICAgICAqCiAgICAgKiBAYWNjZXNzIHByaXZhdGUKICAgICAqIEBwYXJhbSBtaXhlZCAkdG9rZW4gVGhlIHRva2VuIHRvIGNoZWNrLgogICAgICogQHJldHVybiBtaXhlZCAgICAgICBUaGUgY2hlY2tlZCB0b2tlbiBvciBmYWxzZSBvbiBmYWlsdXJlCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gbWF0Y2goJHRva2VuKQogICAgewogICAgICAgIHN3aXRjaCAoJHRva2VuKSB7CiAgICAgICAgICAgIGNhc2UgIisiOgogICAgICAgICAgICBjYXNlICItIjoKICAgICAgICAgICAgY2FzZSAiKiI6CiAgICAgICAgICAgIGNhc2UgIi8iOgogICAgICAgICAgICBjYXNlICIoIjoKICAgICAgICAgICAgY2FzZSAiKSI6CiAgICAgICAgICAgIGNhc2UgIiwiOgogICAgICAgICAgICBjYXNlICI7IjoKICAgICAgICAgICAgY2FzZSAiPj0iOgogICAgICAgICAgICBjYXNlICI8PSI6CiAgICAgICAgICAgIGNhc2UgIj0iOgogICAgICAgICAgICBjYXNlICI8PiI6CiAgICAgICAgICAgIGNhc2UgIl4iOgogICAgICAgICAgICBjYXNlICImIjoKICAgICAgICAgICAgY2FzZSAiJSI6CiAgICAgICAgICAgICAgICByZXR1cm4gJHRva2VuOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIj4iOgogICAgICAgICAgICAgICAgaWYgKCR0aGlzLT5sb29rQWhlYWQgPT0gJz0nKSB7IC8vIGl0J3MgYSBHRSB0b2tlbgogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuICR0b2tlbjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICI8IjoKICAgICAgICAgICAgICAgIC8vIGl0J3MgYSBMRSBvciBhIE5FIHRva2VuCiAgICAgICAgICAgICAgICBpZiAoKCR0aGlzLT5sb29rQWhlYWQgPT0gJz0nKSBvciAoJHRoaXMtPmxvb2tBaGVhZCA9PSAnPicpKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gJHRva2VuOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAvLyBpZiBpdCdzIGEgcmVmZXJlbmNlIEExIG9yICRBJDEgb3IgJEExIG9yIEEkMQogICAgICAgICAgICAgICAgaWYgKHByZWdfbWF0Y2goJy9eXCQ\/W0EtSWEtaV0\/W0EtWmEtel1cJD9bMC05XSskLycsICR0b2tlbikgYW5kICFwcmVnX21hdGNoKCIvWzAtOV0vIiwgJHRoaXMtPmxvb2tBaGVhZCkgYW5kICgkdGhpcy0+bG9va0FoZWFkICE9ICc6JykgYW5kICgkdGhpcy0+bG9va0FoZWFkICE9ICcuJykgYW5kICgkdGhpcy0+bG9va0FoZWFkICE9ICchJykpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHRva2VuOwogICAgICAgICAgICAgICAgfSBlbHNlaWYgKHByZWdfbWF0Y2goIi9eIiAuIHNlbGY6OlJFR0VYX1NIRUVUX1RJVExFX1VOUVVPVEVEIC4gIihcOiIgLiBzZWxmOjpSRUdFWF9TSEVFVF9USVRMRV9VTlFVT1RFRCAuICIpP1whXFwkP1tBLUlhLWldP1tBLVphLXpdXFwkP1swLTldKyQvdSIsICR0b2tlbikgYW5kICFwcmVnX21hdGNoKCIvWzAtOV0vIiwgJHRoaXMtPmxvb2tBaGVhZCkgYW5kICgkdGhpcy0+bG9va0FoZWFkICE9ICc6JykgYW5kICgkdGhpcy0+bG9va0FoZWFkICE9ICcuJykpIHsKICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIGFuIGV4dGVybmFsIHJlZmVyZW5jZSAoU2hlZXQxIUExIG9yIFNoZWV0MTpTaGVldDIhQTEgb3IgU2hlZXQxISRBJDEgb3IgU2hlZXQxOlNoZWV0MiEkQSQxKQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkdG9rZW47CiAgICAgICAgICAgICAgICB9IGVsc2VpZiAocHJlZ19tYXRjaCgiL14nIiAuIHNlbGY6OlJFR0VYX1NIRUVUX1RJVExFX1FVT1RFRCAuICIoXDoiIC4gc2VsZjo6UkVHRVhfU0hFRVRfVElUTEVfUVVPVEVEIC4gIik\/J1whXFwkP1tBLUlhLWldP1tBLVphLXpdXFwkP1swLTldKyQvdSIsICR0b2tlbikgYW5kICFwcmVnX21hdGNoKCIvWzAtOV0vIiwgJHRoaXMtPmxvb2tBaGVhZCkgYW5kICgkdGhpcy0+bG9va0FoZWFkICE9ICc6JykgYW5kICgkdGhpcy0+bG9va0FoZWFkICE9ICcuJykpIHsKICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIGFuIGV4dGVybmFsIHJlZmVyZW5jZSAoJ1NoZWV0MSchQTEgb3IgJ1NoZWV0MTpTaGVldDInIUExIG9yICdTaGVldDEnISRBJDEgb3IgJ1NoZWV0MTpTaGVldDInISRBJDEpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0b2tlbjsKICAgICAgICAgICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCcvXihcJCk\/W0EtSWEtaV0\/W0EtWmEtel0oXCQpP1swLTldKzooXCQpP1tBLUlhLWldP1tBLVphLXpdKFwkKT9bMC05XSskLycsICR0b2tlbikgJiYgIXByZWdfbWF0Y2goIi9bMC05XS8iLCAkdGhpcy0+bG9va0FoZWFkKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGlmIGl0J3MgYSByYW5nZSBBMTpBMiBvciAkQSQxOiRBJDIKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHRva2VuOwogICAgICAgICAgICAgICAgfSBlbHNlaWYgKHByZWdfbWF0Y2goIi9eIiAuIHNlbGY6OlJFR0VYX1NIRUVUX1RJVExFX1VOUVVPVEVEIC4gIihcOiIgLiBzZWxmOjpSRUdFWF9TSEVFVF9USVRMRV9VTlFVT1RFRCAuICIpP1whXFwkPyhbQS1JYS1pXT9bQS1aYS16XSk\/XFwkP1swLTldKzpcXCQ\/KFtBLUlhLWldP1tBLVphLXpdKT9cXCQ\/WzAtOV0rJC91IiwgJHRva2VuKSBhbmQgIXByZWdfbWF0Y2goIi9bMC05XS8iLCAkdGhpcy0+bG9va0FoZWFkKSkgewogICAgICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgYW4gZXh0ZXJuYWwgcmFuZ2UgbGlrZSBTaGVldDEhQTE6QjIgb3IgU2hlZXQxOlNoZWV0MiFBMTpCMiBvciBTaGVldDEhJEEkMTokQiQyIG9yIFNoZWV0MTpTaGVldDIhJEEkMTokQiQyCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0b2tlbjsKICAgICAgICAgICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCIvXiciIC4gc2VsZjo6UkVHRVhfU0hFRVRfVElUTEVfUVVPVEVEIC4gIihcOiIgLiBzZWxmOjpSRUdFWF9TSEVFVF9USVRMRV9RVU9URUQgLiAiKT8nXCFcXCQ\/KFtBLUlhLWldP1tBLVphLXpdKT9cXCQ\/WzAtOV0rOlxcJD8oW0EtSWEtaV0\/W0EtWmEtel0pP1xcJD9bMC05XSskL3UiLCAkdG9rZW4pIGFuZCAhcHJlZ19tYXRjaCgiL1swLTldLyIsICR0aGlzLT5sb29rQWhlYWQpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQncyBhbiBleHRlcm5hbCByYW5nZSBsaWtlICdTaGVldDEnIUExOkIyIG9yICdTaGVldDE6U2hlZXQyJyFBMTpCMiBvciAnU2hlZXQxJyEkQSQxOiRCJDIgb3IgJ1NoZWV0MTpTaGVldDInISRBJDE6JEIkMgogICAgICAgICAgICAgICAgICAgIHJldHVybiAkdG9rZW47CiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoaXNfbnVtZXJpYygkdG9rZW4pIGFuZCAoIWlzX251bWVyaWMoJHRva2VuLiR0aGlzLT5sb29rQWhlYWQpIG9yICgkdGhpcy0+bG9va0FoZWFkID09ICcnKSkgYW5kICgkdGhpcy0+bG9va0FoZWFkICE9ICchJykgYW5kICgkdGhpcy0+bG9va0FoZWFkICE9ICc6JykpIHsKICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIGEgbnVtYmVyIChjaGVjayB0aGF0IGl0J3Mgbm90IGEgc2hlZXQgbmFtZSBvciByYW5nZSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHRva2VuOwogICAgICAgICAgICAgICAgfSBlbHNlaWYgKHByZWdfbWF0Y2goIi9cIihbXlwiXXxcIlwiKXswLDI1NX1cIi8iLCAkdG9rZW4pIGFuZCAkdGhpcy0+bG9va0FoZWFkICE9ICciJyBhbmQgKHN1YnN0cl9jb3VudCgkdG9rZW4sICciJyklMiA9PSAwKSkgewogICAgICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgYSBzdHJpbmcgKG9mIG1heGltdW0gMjU1IGNoYXJhY3RlcnMpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0b2tlbjsKICAgICAgICAgICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCIvXiNbQS1aMFwvXXszLDV9WyE\/XXsxfSQvIiwgJHRva2VuKSBvciAkdG9rZW4gPT0gJyNOL0EnKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQncyBhbiBlcnJvciBjb2RlCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0b2tlbjsKICAgICAgICAgICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCIvXltBLVowLTlceGMwLVx4ZGNcLl0rJC9pIiwgJHRva2VuKSBhbmQgKCR0aGlzLT5sb29rQWhlYWQgPT0gIigiKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGlmIGl0J3MgYSBmdW5jdGlvbiBjYWxsCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0b2tlbjsKICAgICAgICAgICAgICAgIH0gZWxzZWlmIChzdWJzdHIoJHRva2VuLCAtMSkgPT0gJyknKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gICAgSXQncyBhbiBhcmd1bWVudCBvZiBzb21lIGRlc2NyaXB0aW9uIChlLmcuIGEgbmFtZWQgcmFuZ2UpLAogICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBwcmVjaXNlIG5hdHVyZSB5ZXQgdG8gYmUgZGV0ZXJtaW5lZAogICAgICAgICAgICAgICAgICAgIHJldHVybiAkdG9rZW47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogVGhlIHBhcnNpbmcgbWV0aG9kLiBJdCBwYXJzZXMgYSBmb3JtdWxhLgogICAgICoKICAgICAqIEBhY2Nlc3MgcHVibGljCiAgICAgKiBAcGFyYW0gc3RyaW5nICRmb3JtdWxhIFRoZSBmb3JtdWxhIHRvIHBhcnNlLCB3aXRob3V0IHRoZSBpbml0aWFsIGVxdWFsCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gKD0pLgogICAgICogQHJldHVybiBtaXhlZCB0cnVlIG9uIHN1Y2Nlc3MKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHBhcnNlKCRmb3JtdWxhKQogICAgewogICAgICAgICR0aGlzLT5jdXJyZW50Q2hhcmFjdGVyID0gMDsKICAgICAgICAkdGhpcy0+Zm9ybXVsYSAgICAgID0gJGZvcm11bGE7CiAgICAgICAgJHRoaXMtPmxvb2tBaGVhZCAgICA9IGlzc2V0KCRmb3JtdWxhezF9KSA\\/W0EtSWEtaV0\/W0EtWmEtel1cJD9bMC05XSskLycsICR0aGlzLT5jdXJyZW50VG9rZW4pKSB7CiAgICAgICAgICAgICRyZXN1bHQgPSAkdGhpcy0+Y3JlYXRlVHJlZSgkdGhpcy0+Y3VycmVudFRva2VuLCAnJywgJycpOwogICAgICAgICAgICAkdGhpcy0+YWR2YW5jZSgpOwogICAgICAgICAgICByZXR1cm4gJHJlc3VsdDsKICAgICAgICB9IGVsc2VpZiAocHJlZ19tYXRjaCgiL14iIC4gc2VsZjo6UkVHRVhfU0hFRVRfVElUTEVfVU5RVU9URUQgLiAiKFw6IiAuIHNlbGY6OlJFR0VYX1NIRUVUX1RJVExFX1VOUVVPVEVEIC4gIik\/XCFcXCQ\/W0EtSWEtaV0\/W0EtWmEtel1cXCQ\/WzAtOV0rJC91IiwgJHRoaXMtPmN1cnJlbnRUb2tlbikpIHsKICAgICAgICAgICAgLy8gSWYgaXQncyBhbiBleHRlcm5hbCByZWZlcmVuY2UgKFNoZWV0MSFBMSBvciBTaGVldDE6U2hlZXQyIUExIG9yIFNoZWV0MSEkQSQxIG9yIFNoZWV0MTpTaGVldDIhJEEkMSkKICAgICAgICAgICAgJHJlc3VsdCA9ICR0aGlzLT5jcmVhdGVUcmVlKCR0aGlzLT5jdXJyZW50VG9rZW4sICcnLCAnJyk7CiAgICAgICAgICAgICR0aGlzLT5hZHZhbmNlKCk7CiAgICAgICAgICAgIHJldHVybiAkcmVzdWx0OwogICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCIvXiciIC4gc2VsZjo6UkVHRVhfU0hFRVRfVElUTEVfUVVPVEVEIC4gIihcOiIgLiBzZWxmOjpSRUdFWF9TSEVFVF9USVRMRV9RVU9URUQgLiAiKT8nXCFcXCQ\/W0EtSWEtaV0\/W0EtWmEtel1cXCQ\/WzAtOV0rJC91IiwgJHRoaXMtPmN1cnJlbnRUb2tlbikpIHsKICAgICAgICAgICAgLy8gSWYgaXQncyBhbiBleHRlcm5hbCByZWZlcmVuY2UgKCdTaGVldDEnIUExIG9yICdTaGVldDE6U2hlZXQyJyFBMSBvciAnU2hlZXQxJyEkQSQxIG9yICdTaGVldDE6U2hlZXQyJyEkQSQxKQogICAgICAgICAgICAkcmVzdWx0ID0gJHRoaXMtPmNyZWF0ZVRyZWUoJHRoaXMtPmN1cnJlbnRUb2tlbiwgJycsICcnKTsKICAgICAgICAgICAgJHRoaXMtPmFkdmFuY2UoKTsKICAgICAgICAgICAgcmV0dXJuICRyZXN1bHQ7CiAgICAgICAgfSBlbHNlaWYgKHByZWdfbWF0Y2goJy9eKFwkKT9bQS1JYS1pXT9bQS1aYS16XShcJCk\/WzAtOV0rOihcJCk\/W0EtSWEtaV0\/W0EtWmEtel0oXCQpP1swLTldKyQvJywgJHRoaXMtPmN1cnJlbnRUb2tlbikgb3IKICAgICAgICAgICAgICAgIHByZWdfbWF0Y2goJy9eKFwkKT9bQS1JYS1pXT9bQS1aYS16XShcJCk\/WzAtOV0rXC5cLihcJCk\/W0EtSWEtaV0\/W0EtWmEtel0oXCQpP1swLTldKyQvJywgJHRoaXMtPmN1cnJlbnRUb2tlbikpIHsKICAgICAgICAgICAgLy8gaWYgaXQncyBhIHJhbmdlIEExOkIyIG9yICRBJDE6JEIkMgogICAgICAgICAgICAvLyBtdXN0IGJlIGFuIGVycm9yPwogICAgICAgICAgICAkcmVzdWx0ID0gJHRoaXMtPmNyZWF0ZVRyZWUoJHRoaXMtPmN1cnJlbnRUb2tlbiwgJycsICcnKTsKICAgICAgICAgICAgJHRoaXMtPmFkdmFuY2UoKTsKICAgICAgICAgICAgcmV0dXJuICRyZXN1bHQ7CiAgICAgICAgfSBlbHNlaWYgKHByZWdfbWF0Y2goIi9eIiAuIHNlbGY6OlJFR0VYX1NIRUVUX1RJVExFX1VOUVVPVEVEIC4gIihcOiIgLiBzZWxmOjpSRUdFWF9TSEVFVF9USVRMRV9VTlFVT1RFRCAuICIpP1whXFwkPyhbQS1JYS1pXT9bQS1aYS16XSk\/XFwkP1swLTldKzpcXCQ\/KFtBLUlhLWldP1tBLVphLXpdKT9cXCQ\/WzAtOV0rJC91IiwgJHRoaXMtPmN1cnJlbnRUb2tlbikpIHsKICAgICAgICAgICAgLy8gSWYgaXQncyBhbiBleHRlcm5hbCByYW5nZSAoU2hlZXQxIUExOkIyIG9yIFNoZWV0MTpTaGVldDIhQTE6QjIgb3IgU2hlZXQxISRBJDE6JEIkMiBvciBTaGVldDE6U2hlZXQyISRBJDE6JEIkMikKICAgICAgICAgICAgLy8gbXVzdCBiZSBhbiBlcnJvcj8KICAgICAgICAgICAgLy8kcmVzdWx0ID0gJHRoaXMtPmN1cnJlbnRUb2tlbjsKICAgICAgICAgICAgJHJlc3VsdCA9ICR0aGlzLT5jcmVhdGVUcmVlKCR0aGlzLT5jdXJyZW50VG9rZW4sICcnLCAnJyk7CiAgICAgICAgICAgICR0aGlzLT5hZHZhbmNlKCk7CiAgICAgICAgICAgIHJldHVybiAkcmVzdWx0OwogICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCIvXiciIC4gc2VsZjo6UkVHRVhfU0hFRVRfVElUTEVfUVVPVEVEIC4gIihcOiIgLiBzZWxmOjpSRUdFWF9TSEVFVF9USVRMRV9RVU9URUQgLiAiKT8nXCFcXCQ\/KFtBLUlhLWldP1tBLVphLXpdKT9cXCQ\/WzAtOV0rOlxcJD8oW0EtSWEtaV0\/W0EtWmEtel0pP1xcJD9bMC05XSskL3UiLCAkdGhpcy0+Y3VycmVudFRva2VuKSkgewogICAgICAgICAgICAvLyBJZiBpdCdzIGFuIGV4dGVybmFsIHJhbmdlICgnU2hlZXQxJyFBMTpCMiBvciAnU2hlZXQxJyFBMTpCMiBvciAnU2hlZXQxJyEkQSQxOiRCJDIgb3IgJ1NoZWV0MSchJEEkMTokQiQyKQogICAgICAgICAgICAvLyBtdXN0IGJlIGFuIGVycm9yPwogICAgICAgICAgICAvLyRyZXN1bHQgPSAkdGhpcy0+Y3VycmVudFRva2VuOwogICAgICAgICAgICAkcmVzdWx0ID0gJHRoaXMtPmNyZWF0ZVRyZWUoJHRoaXMtPmN1cnJlbnRUb2tlbiwgJycsICcnKTsKICAgICAgICAgICAgJHRoaXMtPmFkdmFuY2UoKTsKICAgICAgICAgICAgcmV0dXJuICRyZXN1bHQ7CiAgICAgICAgfSBlbHNlaWYgKGlzX251bWVyaWMoJHRoaXMtPmN1cnJlbnRUb2tlbikpIHsKICAgICAgICAgICAgLy8gSWYgaXQncyBhIG51bWJlciBvciBhIHBlcmNlbnQKICAgICAgICAgICAgaWYgKCR0aGlzLT5sb29rQWhlYWQgPT0gJyUnKSB7CiAgICAgICAgICAgICAgICAkcmVzdWx0ID0gJHRoaXMtPmNyZWF0ZVRyZWUoJ3B0Z1BlcmNlbnQnLCAkdGhpcy0+Y3VycmVudFRva2VuLCAnJyk7CiAgICAgICAgICAgICAgICAkdGhpcy0+YWR2YW5jZSgpOyAgLy8gU2tpcCB0aGUgcGVyY2VudGFnZSBvcGVyYXRvciBvbmNlIHdlJ3ZlIHByZS1idWlsdCB0aGF0IHRyZWUKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRyZXN1bHQgPSAkdGhpcy0+Y3JlYXRlVHJlZSgkdGhpcy0+Y3VycmVudFRva2VuLCAnJywgJycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICR0aGlzLT5hZHZhbmNlKCk7CiAgICAgICAgICAgIHJldHVybiAkcmVzdWx0OwogICAgICAgIH0gZWxzZWlmIChwcmVnX21hdGNoKCIvXltBLVowLTlceGMwLVx4ZGNcLl0rJC9pIiwgJHRoaXMtPmN1cnJlbnRUb2tlbikpIHsKICAgICAgICAgICAgLy8gaWYgaXQncyBhIGZ1bmN0aW9uIGNhbGwKICAgICAgICAgICAgJHJlc3VsdCA9ICR0aGlzLT5mdW5jKCk7CiAgICAgICAgICAgIHJldHVybiAkcmVzdWx0OwogICAgICAgIH0KICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfV3JpdGVyX0V4Y2VwdGlvbigiU3ludGF4IGVycm9yOiAiLiR0aGlzLT5jdXJyZW50VG9rZW4uIiwgbG9va2FoZWFkOiAiLiR0aGlzLT5sb29rQWhlYWQuIiwgY3VycmVudCBjaGFyOiAiLiR0aGlzLT5jdXJyZW50Q2hhcmFjdGVyKTsKICAgIH0KCiAgICAvKioKICAgICAqIEl0IHBhcnNlcyBhIGZ1bmN0aW9uIGNhbGwuIEl0IGFzc3VtZXMgdGhlIGZvbGxvd2luZyBydWxlOgogICAgICogRnVuYyAtPiAoIEV4cHIgWyxFeHByXSogKQogICAgICoKICAgICAqIEBhY2Nlc3MgcHJpdmF0ZQogICAgICogQHJldHVybiBtaXhlZCBUaGUgcGFyc2VkIHB0ZydkIHRyZWUgb24gc3VjY2VzcwogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIGZ1bmMoKQogICAgewogICAgICAgICRudW1fYXJncyA9IDA7IC8vIG51bWJlciBvZiBhcmd1bWVudHMgcmVjZWl2ZWQKICAgICAgICAkZnVuY3Rpb24gPSBzdHJ0b3VwcGVyKCR0aGlzLT5jdXJyZW50VG9rZW4pOwogICAgICAgICRyZXN1bHQgICA9ICcnOyAvLyBpbml0aWFsaXplIHJlc3VsdAogICAgICAgICR0aGlzLT5hZHZhbmNlKCk7CiAgICAgICAgJHRoaXMtPmFkdmFuY2UoKTsgICAgICAgICAvLyBlYXQgdGhlICIoIgogICAgICAgIHdoaWxlICgkdGhpcy0+Y3VycmVudFRva2VuICE9ICcpJykgewogICAgICAgIC8qKi8KICAgICAgICAgICAgaWYgKCRudW1fYXJncyA+IDApIHsKICAgICAgICAgICAgICAgIGlmICgkdGhpcy0+Y3VycmVudFRva2VuID09ICIsIiB8fCAkdGhpcy0+Y3VycmVudFRva2VuID09ICI7IikgewogICAgICAgICAgICAgICAgICAgICR0aGlzLT5hZHZhbmNlKCk7ICAvLyBlYXQgdGhlICIsIiBvciAiOyIKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX1dyaXRlcl9FeGNlcHRpb24oIlN5bnRheCBlcnJvcjogY29tbWEgZXhwZWN0ZWQgaW4gZnVuY3Rpb24gJGZ1bmN0aW9uLCBhcmcgI3skbnVtX2FyZ3N9Iik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkcmVzdWx0MiA9ICR0aGlzLT5jb25kaXRpb24oKTsKICAgICAgICAgICAgICAgICRyZXN1bHQgPSAkdGhpcy0+Y3JlYXRlVHJlZSgnYXJnJywgJHJlc3VsdCwgJHJlc3VsdDIpOwogICAgICAgICAgICB9IGVsc2UgeyAvLyBmaXJzdCBhcmd1bWVudAogICAgICAgICAgICAgICAgJHJlc3VsdDIgPSAkdGhpcy0+Y29uZGl0aW9uKCk7CiAgICAgICAgICAgICAgICAkcmVzdWx0ID0gJHRoaXMtPmNyZWF0ZVRyZWUoJ2FyZycsICcnLCAkcmVzdWx0Mik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKyskbnVtX2FyZ3M7CiAgICAgICAgfQogICAgICAgIGlmICghaXNzZXQoJHRoaXMtPmZ1bmN0aW9uc1skZnVuY3Rpb25dKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgUEhQRXhjZWxfV3JpdGVyX0V4Y2VwdGlvbigiRnVuY3Rpb24gJGZ1bmN0aW9uKCkgZG9lc24ndCBleGlzdCIpOwogICAgICAgIH0KICAgICAgICAkYXJncyA9ICR0aGlzLT5mdW5jdGlvbnNbJGZ1bmN0aW9uXVsxXTsKICAgICAgICAvLyBJZiBmaXhlZCBudW1iZXIgb2YgYXJncyBlZy4gVElNRSgkaSwgJGosICRrKS4gQ2hlY2sgdGhhdCB0aGUgbnVtYmVyIG9mIGFyZ3MgaXMgdmFsaWQuCiAgICAgICAgaWYgKCgkYXJncyA+PSAwKSBhbmQgKCRhcmdzICE9ICRudW1fYXJncykpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFBIUEV4Y2VsX1dyaXRlcl9FeGNlcHRpb24oIkluY29ycmVjdCBudW1iZXIgb2YgYXJndW1lbnRzIGluIGZ1bmN0aW9uICRmdW5jdGlvbigpICIpOwogICAgICAgIH0KCiAgICAgICAgJHJlc3VsdCA9ICR0aGlzLT5jcmVhdGVUcmVlKCRmdW5jdGlvbiwgJHJlc3VsdCwgJG51bV9hcmdzKTsKICAgICAgICAkdGhpcy0+YWR2YW5jZSgpOyAgICAgICAgIC8vIGVhdCB0aGUgIikiCiAgICAgICAgcmV0dXJuICRyZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgdHJlZS4gSW4gZmFjdCBhbiBhcnJheSB3aGljaCBtYXkgaGF2ZSBvbmUgb3IgdHdvIGFycmF5cyAoc3ViLXRyZWVzKQogICAgICogYXMgZWxlbWVudHMuCiAgICAgKgogICAgICogQGFjY2VzcyBwcml2YXRlCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGlzIG5vZGUuCiAgICAgKiBAcGFyYW0gbWl4ZWQgJGxlZnQgIFRoZSBsZWZ0IGFycmF5IChzdWItdHJlZSkgb3IgYSBmaW5hbCBub2RlLgogICAgICogQHBhcmFtIG1peGVkICRyaWdodCBUaGUgcmlnaHQgYXJyYXkgKHN1Yi10cmVlKSBvciBhIGZpbmFsIG5vZGUuCiAgICAgKiBAcmV0dXJuIGFycmF5IEEgdHJlZQogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIGNyZWF0ZVRyZWUoJHZhbHVlLCAkbGVmdCwgJHJpZ2h0KQogICAgewogICAgICAgIHJldHVybiBhcnJheSgndmFsdWUnID0+ICR2YWx1ZSwgJ2xlZnQnID0+ICRsZWZ0LCAncmlnaHQnID0+ICRyaWdodCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBCdWlsZHMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgdHJlZSBpbiByZXZlcnNlIHBvbGlzaCBub3RhdGlvbiAoV2hhdCB5b3UKICAgICAqIHdvdWxkIHVzZSBpbiBhIEhQIGNhbGN1bGF0b3Igc3RhY2spLgogICAgICogVGhlIGZvbGxvd2luZyB0cmVlOgogICAgICoKICAgICAqICAgICsKICAgICAqICAgLyBcCiAgICAgKiAgMiAgIDMKICAgICAqCiAgICAgKiBwcm9kdWNlczogIjIzKyIKICAgICAqCiAgICAgKiBUaGUgZm9sbG93aW5nIHRyZWU6CiAgICAgKgogICAgICogICAgKwogICAgICogICAvIFwKICAgICAqICAzICAgKgogICAgICogICAgIC8gXAogICAgICogICAgNiAgIEExCiAgICAgKgogICAgICogcHJvZHVjZXM6ICIzNkExKisiCiAgICAgKgogICAgICogSW4gZmFjdCBhbGwgb3BlcmFuZHMsIGZ1bmN0aW9ucywgcmVmZXJlbmNlcywgZXRjLi4uIGFyZSB3cml0dGVuIGFzIHB0ZydzCiAgICAgKgogICAgICogQGFjY2VzcyBwdWJsaWMKICAgICAqIEBwYXJhbSBhcnJheSAkdHJlZSBUaGUgb3B0aW9uYWwgdHJlZSB0byBjb252ZXJ0LgogICAgICogQHJldHVybiBzdHJpbmcgVGhlIHRyZWUgaW4gcmV2ZXJzZSBwb2xpc2ggbm90YXRpb24KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHRvUmV2ZXJzZVBvbGlzaCgkdHJlZSA9IGFycmF5KCkpCiAgICB7CiAgICAgICAgJHBvbGlzaCA9ICIiOyAvLyB0aGUgc3RyaW5nIHdlIGFyZSBnb2luZyB0byByZXR1cm4KICAgICAgICBpZiAoZW1wdHkoJHRyZWUpKSB7IC8vIElmIGl0J3MgdGhlIGZpcnN0IGNhbGwgdXNlIHBhcnNlVHJlZQogICAgICAgICAgICAkdHJlZSA9ICR0aGlzLT5wYXJzZVRyZWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoaXNfYXJyYXkoJHRyZWVbJ2xlZnQnXSkpIHsKICAgICAgICAgICAgJGNvbnZlcnRlZF90cmVlID0gJHRoaXMtPnRvUmV2ZXJzZVBvbGlzaCgkdHJlZVsnbGVmdCddKTsKICAgICAgICAgICAgJHBvbGlzaCAuPSAkY29udmVydGVkX3RyZWU7CiAgICAgICAgfSBlbHNlaWYgKCR0cmVlWydsZWZ0J10gIT0gJycpIHsgLy8gSXQncyBhIGZpbmFsIG5vZGUKICAgICAgICAgICAgJGNvbnZlcnRlZF90cmVlID0gJHRoaXMtPmNvbnZlcnQoJHRyZWVbJ2xlZnQnXSk7CiAgICAgICAgICAgICRwb2xpc2ggLj0gJGNvbnZlcnRlZF90cmVlOwogICAgICAgIH0KICAgICAgICBpZiAoaXNfYXJyYXkoJHRyZWVbJ3JpZ2h0J10pKSB7CiAgICAgICAgICAgICRjb252ZXJ0ZWRfdHJlZSA9ICR0aGlzLT50b1JldmVyc2VQb2xpc2goJHRyZWVbJ3JpZ2h0J10pOwogICAgICAgICAgICAkcG9saXNoIC49ICRjb252ZXJ0ZWRfdHJlZTsKICAgICAgICB9IGVsc2VpZiAoJHRyZWVbJ3JpZ2h0J10gIT0gJycpIHsgLy8gSXQncyBhIGZpbmFsIG5vZGUKICAgICAgICAgICAgJGNvbnZlcnRlZF90cmVlID0gJHRoaXMtPmNvbnZlcnQoJHRyZWVbJ3JpZ2h0J10pOwogICAgICAgICAgICAkcG9saXNoIC49ICRjb252ZXJ0ZWRfdHJlZTsKICAgICAgICB9CiAgICAgICAgLy8gaWYgaXQncyBhIGZ1bmN0aW9uIGNvbnZlcnQgaXQgaGVyZSAoc28gd2UgY2FuIHNldCBpdCdzIGFyZ3VtZW50cykKICAgICAgICBpZiAocHJlZ19tYXRjaCgiL15bQS1aMC05XHhjMC1ceGRjXC5dKyQvIiwgJHRyZWVbJ3ZhbHVlJ10pIGFuZAogICAgICAgICAgICAhcHJlZ19tYXRjaCgnL14oW0EtSWEtaV0\/W0EtWmEtel0pKFxkKykkLycsICR0cmVlWyd2YWx1ZSddKSBhbmQKICAgICAgICAgICAgIXByZWdfbWF0Y2goIi9eW0EtSWEtaV0\/W0EtWmEtel0oXGQrKVwuXC5bQS1JYS1pXT9bQS1aYS16XShcZCspJC8iLCAkdHJlZVsndmFsdWUnXSkgYW5kCiAgICAgICAgICAgICFpc19udW1lcmljKCR0cmVlWyd2YWx1ZSddKSBhbmQKICAgICAgICAgICAgIWlzc2V0KCR0aGlzLT5wdGdbJHRyZWVbJ3ZhbHVlJ11dKSkgewogICAgICAgICAgICAvLyBsZWZ0IHN1YnRyZWUgZm9yIGEgZnVuY3Rpb24gaXMgYWx3YXlzIGFuIGFycmF5LgogICAgICAgICAgICBpZiAoJHRyZWVbJ2xlZnQnXSAhPSAnJykgewogICAgICAgICAgICAgICAgJGxlZnRfdHJlZSA9ICR0aGlzLT50b1JldmVyc2VQb2xpc2goJHRyZWVbJ2xlZnQnXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkbGVmdF90cmVlID0gJyc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gYWRkIGl0J3MgbGVmdCBzdWJ0cmVlIGFuZCByZXR1cm4uCiAgICAgICAgICAgIHJldHVybiAkbGVmdF90cmVlLiR0aGlzLT5jb252ZXJ0RnVuY3Rpb24oJHRyZWVbJ3ZhbHVlJ10sICR0cmVlWydyaWdodCddKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkY29udmVydGVkX3RyZWUgPSAkdGhpcy0+Y29udmVydCgkdHJlZVsndmFsdWUnXSk7CiAgICAgICAgfQogICAgICAgICRwb2xpc2ggLj0gJGNvbnZlcnRlZF90cmVlOwogICAgICAgIHJldHVybiAkcG9saXNoOwogICAgfQp9Cg==",
    "size": "65992"
}