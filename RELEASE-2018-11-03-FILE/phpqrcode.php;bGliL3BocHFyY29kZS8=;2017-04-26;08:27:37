{
    "namaFile": "lib\/phpqrcode\/phpqrcode.php",
    "lastUpdate": "2017-04-26+08:27:37.62",
    "contentFile": "PD9waHANCg0KLyoNCiAqIFBIUCBRUiBDb2RlIGVuY29kZXINCiAqDQogKiBUaGlzIGZpbGUgY29udGFpbnMgTUVSR0VEIHZlcnNpb24gb2YgUEhQIFFSIENvZGUgbGlicmFyeS4NCiAqIEl0IHdhcyBhdXRvLWdlbmVyYXRlZCBmcm9tIGZ1bGwgdmVyc2lvbiBmb3IgeW91ciBjb252ZW5pZW5jZS4NCiAqDQogKiBUaGlzIG1lcmdlZCB2ZXJzaW9uIHdhcyBjb25maWd1cmVkIHRvIG5vdCByZXF1cmUgYW55IGV4dGVybmFsIGZpbGVzLA0KICogd2l0aCBkaXNhYmxlZCBjYWNoZSwgZXJyb3IgbG9naW5nIGFuZCB3ZWtlciBidXQgZmFzdGVyIG1hc2sgbWF0Y2hpbmcuDQogKiBJZiB5b3UgbmVlZCB0dW5lIGl0IHVwIHBsZWFzZSB1c2Ugbm9uLW1lcmdlZCB2ZXJzaW9uLg0KICoNCiAqIEZvciBmdWxsIHZlcnNpb24sIGRvY3VtZW50YXRpb24sIGV4YW1wbGVzIG9mIHVzZSBwbGVhc2UgdmlzaXQ6DQogKg0KICogICAgaHR0cDovL3BocHFyY29kZS5zb3VyY2Vmb3JnZS5uZXQvDQogKiAgICBodHRwczovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy9waHBxcmNvZGUvDQogKg0KICogUEhQIFFSIENvZGUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgTEdQTCAzDQogKiBDb3B5cmlnaHQgKEMpIDIwMTAgRG9taW5payBEemllbmlhIDxkZWx0YWxhYiBhdCBwb2N6dGEgZG90IGZtPg0KICoNCiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3INCiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMNCiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlcg0KICogdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvciBhbnkgbGF0ZXIgdmVyc2lvbi4NCiAqDQogKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwNCiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mDQogKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VDQogKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KICoNCiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMNCiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUNCiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQQ0KICovDQogDQogCgovKgogKiBWZXJzaW9uOiAxLjEuNAogKiBCdWlsZDogMjAxMDEwMDcyMQogKi8KCgoKLy8tLS0tIHFyY29uc3QucGhwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCg0KDQovKg0KICogUEhQIFFSIENvZGUgZW5jb2Rlcg0KICoNCiAqIENvbW1vbiBjb25zdGFudHMNCiAqDQogKiBCYXNlZCBvbiBsaWJxcmVuY29kZSBDIGxpYnJhcnkgZGlzdHJpYnV0ZWQgdW5kZXIgTEdQTCAyLjENCiAqIENvcHlyaWdodCAoQykgMjAwNiwgMjAwNywgMjAwOCwgMjAwOSBLZW50YXJvIEZ1a3VjaGkgPGZ1a3VjaGlAbWVnYXVpLm5ldD4NCiAqDQogKiBQSFAgUVIgQ29kZSBpcyBkaXN0cmlidXRlZCB1bmRlciBMR1BMIDMNCiAqIENvcHlyaWdodCAoQykgMjAxMCBEb21pbmlrIER6aWVuaWEgPGRlbHRhbGFiIGF0IHBvY3p0YSBkb3QgZm0+DQogKg0KICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcg0KICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYw0KICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyDQogKiB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yIGFueSBsYXRlciB2ZXJzaW9uLg0KICoNCiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLA0KICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YNCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUNCiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuDQogKg0KICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYw0KICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZQ0KICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3QsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBDQogKi8NCiANCgkvLyBFbmNvZGluZyBtb2Rlcw0KCSANCglkZWZpbmUoJ1FSX01PREVfTlVMJywgLTEpOw0KCWRlZmluZSgnUVJfTU9ERV9OVU0nLCAwKTsNCglkZWZpbmUoJ1FSX01PREVfQU4nLCAxKTsNCglkZWZpbmUoJ1FSX01PREVfOCcsIDIpOw0KCWRlZmluZSgnUVJfTU9ERV9LQU5KSScsIDMpOw0KCWRlZmluZSgnUVJfTU9ERV9TVFJVQ1RVUkUnLCA0KTsNCg0KCS8vIExldmVscyBvZiBlcnJvciBjb3JyZWN0aW9uLg0KDQoJZGVmaW5lKCdRUl9FQ0xFVkVMX0wnLCAwKTsNCglkZWZpbmUoJ1FSX0VDTEVWRUxfTScsIDEpOw0KCWRlZmluZSgnUVJfRUNMRVZFTF9RJywgMik7DQoJZGVmaW5lKCdRUl9FQ0xFVkVMX0gnLCAzKTsNCgkNCgkvLyBTdXBwb3J0ZWQgb3V0cHV0IGZvcm1hdHMNCgkNCglkZWZpbmUoJ1FSX0ZPUk1BVF9URVhUJywgMCk7DQoJZGVmaW5lKCdRUl9GT1JNQVRfUE5HJywgIDEpOw0KCQ0KCWNsYXNzIHFyc3RyIHsNCgkJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBzZXQoJiRzcmN0YWIsICR4LCAkeSwgJHJlcGwsICRyZXBsTGVuID0gZmFsc2UpIHsNCgkJCSRzcmN0YWJbJHldID0gc3Vic3RyX3JlcGxhY2UoJHNyY3RhYlskeV0sICgkcmVwbExlbiAhPT0gZmFsc2UpP3N1YnN0cigkcmVwbCwwLCRyZXBsTGVuKTokcmVwbCwgJHgsICgkcmVwbExlbiAhPT0gZmFsc2UpPyRyZXBsTGVuOnN0cmxlbigkcmVwbCkpOw0KCQl9DQoJfQkKCgoKLy8tLS0tIG1lcmdlZF9jb25maWcucGhwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCg0KLyoNCiAqIFBIUCBRUiBDb2RlIGVuY29kZXINCiAqDQogKiBDb25maWcgZmlsZSwgdHVuZWQtdXAgZm9yIG1lcmdlZCB2ZXJpb24NCiAqLw0KICAgICANCiAgICBkZWZpbmUoJ1FSX0NBQ0hFQUJMRScsIGZhbHNlKTsgICAgICAgLy8gdXNlIGNhY2hlIC0gbW9yZSBkaXNrIHJlYWRzIGJ1dCBsZXNzIENQVSBwb3dlciwgbWFza3MgYW5kIGZvcm1hdCB0ZW1wbGF0ZXMgYXJlIHN0b3JlZCB0aGVyZQ0KICAgIGRlZmluZSgnUVJfQ0FDSEVfRElSJywgZmFsc2UpOyAgICAgICAvLyB1c2VkIHdoZW4gUVJfQ0FDSEVBQkxFID09PSB0cnVlDQogICAgZGVmaW5lKCdRUl9MT0dfRElSJywgZmFsc2UpOyAgICAgICAgIC8vIGRlZmF1bHQgZXJyb3IgbG9ncyBkaXIgICANCiAgICANCiAgICBkZWZpbmUoJ1FSX0ZJTkRfQkVTVF9NQVNLJywgdHJ1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRydWUsIGVzdGltYXRlcyBiZXN0IG1hc2sgKHNwZWMuIGRlZmF1bHQsIGJ1dCBleHRyZW1hbGx5IHNsb3c7IHNldCB0byBmYWxzZSB0byBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBib29zdCBidXQgKHByb3BhYmx5KSB3b3JzdCBxdWFsaXR5IGNvZGUNCiAgICBkZWZpbmUoJ1FSX0ZJTkRfRlJPTV9SQU5ET00nLCAyKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZmFsc2UsIGNoZWNrcyBhbGwgbWFza3MgYXZhaWxhYmxlLCBvdGhlcndpc2UgdmFsdWUgdGVsbHMgY291bnQgb2YgbWFza3MgbmVlZCB0byBiZSBjaGVja2VkLCBtYXNrIGlkIGFyZSBnb3QgcmFuZG9tbHkNCiAgICBkZWZpbmUoJ1FSX0RFRkFVTFRfTUFTSycsIDIpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gUVJfRklORF9CRVNUX01BU0sgPT09IGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgIGRlZmluZSgnUVJfUE5HX01BWElNVU1fU0laRScsICAxMDI0KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF4aW11bSBhbGxvd2VkIHBuZyBpbWFnZSB3aWR0aCAoaW4gcGl4ZWxzKSwgdHVuZSB0byBtYWtlIHN1cmUgR0QgYW5kIFBIUCBjYW4gaGFuZGxlIHN1Y2ggYmlnIGltYWdlcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCgoKLy8tLS0tIHFydG9vbHMucGhwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCg0KLyoNCiAqIFBIUCBRUiBDb2RlIGVuY29kZXINCiAqDQogKiBUb29sc2V0LCBoYW5keSBhbmQgZGVidWcgdXRpbGl0ZXMuDQogKg0KICogUEhQIFFSIENvZGUgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgTEdQTCAzDQogKiBDb3B5cmlnaHQgKEMpIDIwMTAgRG9taW5payBEemllbmlhIDxkZWx0YWxhYiBhdCBwb2N6dGEgZG90IGZtPg0KICoNCiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3INCiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMNCiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlcg0KICogdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvciBhbnkgbGF0ZXIgdmVyc2lvbi4NCiAqDQogKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwNCiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mDQogKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VDQogKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KICoNCiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMNCiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUNCiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQQ0KICovDQoNCiAgICBjbGFzcyBRUnRvb2xzIHsNCiAgICANCiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYmluYXJpemUoJGZyYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICAkbGVuID0gY291bnQoJGZyYW1lKTsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRmcmFtZSBhcyAmJGZyYW1lTGluZSkgew0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGZvcigkaT0wOyAkaTwkbGVuOyAkaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICRmcmFtZUxpbmVbJGldID0gKG9yZCgkZnJhbWVMaW5lWyRpXSkmMSk\/JzEnOicwJzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldHVybiAkZnJhbWU7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHRjcGRmQmFyY29kZUFycmF5KCRjb2RlLCAkbW9kZSA9ICdRUixMJywgJHRjUGRmVmVyc2lvbiA9ICc0LjUuMDM3JykNCiAgICAgICAgew0KICAgICAgICAgICAgJGJhcmNvZGVfYXJyYXkgPSBhcnJheSgpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZiAoIWlzX2FycmF5KCRtb2RlKSkNCiAgICAgICAgICAgICAgICAkbW9kZSA9IGV4cGxvZGUoJywnLCAkbW9kZSk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAkZWNjTGV2ZWwgPSAnTCc7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICBpZiAoY291bnQoJG1vZGUpID4gMSkgew0KICAgICAgICAgICAgICAgICRlY2NMZXZlbCA9ICRtb2RlWzFdOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgJHFyVGFiID0gUVJjb2RlOjp0ZXh0KCRjb2RlLCBmYWxzZSwgJGVjY0xldmVsKTsNCiAgICAgICAgICAgICRzaXplID0gY291bnQoJHFyVGFiKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICRiYXJjb2RlX2FycmF5WydudW1fcm93cyddID0gJHNpemU7DQogICAgICAgICAgICAkYmFyY29kZV9hcnJheVsnbnVtX2NvbHMnXSA9ICRzaXplOw0KICAgICAgICAgICAgJGJhcmNvZGVfYXJyYXlbJ2Jjb2RlJ10gPSBhcnJheSgpOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgZm9yZWFjaCAoJHFyVGFiIGFzICRsaW5lKSB7DQogICAgICAgICAgICAgICAgJGFyckFkZCA9IGFycmF5KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaChzdHJfc3BsaXQoJGxpbmUpIGFzICRjaGFyKQ0KICAgICAgICAgICAgICAgICAgICAkYXJyQWRkW10gPSAoJGNoYXI9PScxJyk\\/cGhwDQogICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwcmU+PHR0Pjxici8gPjxici8gPjxici8gPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyc7DQogICAgICAgICAgICAgICAgICAgIGVjaG8gam9pbigiPGJyLyA+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IiwgJGZyYW1lKTsNCiAgICAgICAgICAgICAgICAgICAgZWNobyAnPC90dD48L3ByZT48YnIvID48YnIvID48YnIvID48YnIvID48YnIvID48YnIvID4nOw0KICAgICAgICAgICAgDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJGZyYW1lIGFzICYkZnJhbWVMaW5lKSB7DQogICAgICAgICAgICAgICAgICAgICRmcmFtZUxpbmUgPSBqb2luKCc8c3BhbiBjbGFzcz0ibSI+Jm5ic3A7PC9zcGFuPicsICBleHBsb2RlKCJceGMwIiwgJGZyYW1lTGluZSkpOw0KICAgICAgICAgICAgICAgICAgICAkZnJhbWVMaW5lID0gam9pbignPHNwYW4gY2xhc3M9Im0iPiYjOTYxODs8L3NwYW4+JywgZXhwbG9kZSgiXHhjMSIsICRmcmFtZUxpbmUpKTsNCiAgICAgICAgICAgICAgICAgICAgJGZyYW1lTGluZSA9IGpvaW4oJzxzcGFuIGNsYXNzPSJwIj4mbmJzcDs8L3NwYW4+JywgIGV4cGxvZGUoIlx4YTAiLCAkZnJhbWVMaW5lKSk7DQogICAgICAgICAgICAgICAgICAgICRmcmFtZUxpbmUgPSBqb2luKCc8c3BhbiBjbGFzcz0icCI+JiM5NjE4Ozwvc3Bhbj4nLCBleHBsb2RlKCJceGExIiwgJGZyYW1lTGluZSkpOw0KICAgICAgICAgICAgICAgICAgICAkZnJhbWVMaW5lID0gam9pbignPHNwYW4gY2xhc3M9InMiPiYjOTY3MTs8L3NwYW4+JywgZXhwbG9kZSgiXHg4NCIsICRmcmFtZUxpbmUpKTsgLy9mb3JtYXQgMA0KICAgICAgICAgICAgICAgICAgICAkZnJhbWVMaW5lID0gam9pbignPHNwYW4gY2xhc3M9InMiPiYjOTY3MDs8L3NwYW4+JywgZXhwbG9kZSgiXHg4NSIsICRmcmFtZUxpbmUpKTsgLy9mb3JtYXQgMQ0KICAgICAgICAgICAgICAgICAgICAkZnJhbWVMaW5lID0gam9pbignPHNwYW4gY2xhc3M9IngiPiYjOTc2Mjs8L3NwYW4+JywgZXhwbG9kZSgiXHg4MSIsICRmcmFtZUxpbmUpKTsgLy9zcGVjaWFsIGJpdA0KICAgICAgICAgICAgICAgICAgICAkZnJhbWVMaW5lID0gam9pbignPHNwYW4gY2xhc3M9ImMiPiZuYnNwOzwvc3Bhbj4nLCAgZXhwbG9kZSgiXHg5MCIsICRmcmFtZUxpbmUpKTsgLy9jbG9jayAwDQogICAgICAgICAgICAgICAgICAgICRmcmFtZUxpbmUgPSBqb2luKCc8c3BhbiBjbGFzcz0iYyI+JiM5NzE5Ozwvc3Bhbj4nLCBleHBsb2RlKCJceDkxIiwgJGZyYW1lTGluZSkpOyAvL2Nsb2NrIDENCiAgICAgICAgICAgICAgICAgICAgJGZyYW1lTGluZSA9IGpvaW4oJzxzcGFuIGNsYXNzPSJmIj4mbmJzcDs8L3NwYW4+JywgIGV4cGxvZGUoIlx4ODgiLCAkZnJhbWVMaW5lKSk7IC8vdmVyc2lvbg0KICAgICAgICAgICAgICAgICAgICAkZnJhbWVMaW5lID0gam9pbignPHNwYW4gY2xhc3M9ImYiPiYjOTYxODs8L3NwYW4+JywgZXhwbG9kZSgiXHg4OSIsICRmcmFtZUxpbmUpKTsgLy92ZXJzaW9uDQogICAgICAgICAgICAgICAgICAgICRmcmFtZUxpbmUgPSBqb2luKCcmIzk4MzA7JywgZXhwbG9kZSgiXHgwMSIsICRmcmFtZUxpbmUpKTsNCiAgICAgICAgICAgICAgICAgICAgJGZyYW1lTGluZSA9IGpvaW4oJyYjODkwMTsnLCBleHBsb2RlKCJcMCIsICRmcmFtZUxpbmUpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICA8c3R5bGU+DQogICAgICAgICAgICAgICAgICAgIC5wIHsgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93OyB9DQogICAgICAgICAgICAgICAgICAgIC5tIHsgYmFja2dyb3VuZC1jb2xvcjogIzAwRkYwMDsgfQ0KICAgICAgICAgICAgICAgICAgICAucyB7IGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDA7IH0NCiAgICAgICAgICAgICAgICAgICAgLmMgeyBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhOyB9DQogICAgICAgICAgICAgICAgICAgIC54IHsgYmFja2dyb3VuZC1jb2xvcjogcGluazsgfQ0KICAgICAgICAgICAgICAgICAgICAuZiB7IGJhY2tncm91bmQtY29sb3I6IGdvbGQ7IH0NCiAgICAgICAgICAgICAgICA8L3N0eWxlPg0KICAgICAgICAgICAgICAgIDw\\",
    "size": "121780"
}