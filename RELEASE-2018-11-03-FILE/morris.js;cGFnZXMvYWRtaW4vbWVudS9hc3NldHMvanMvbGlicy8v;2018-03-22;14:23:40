{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/morris.js\/morris.js",
    "lastUpdate": "2018-03-22+14:23:40.87",
    "contentFile": "LyogQGxpY2Vuc2UKbW9ycmlzLmpzIHYwLjUuMApDb3B5cmlnaHQgMjAxNCBPbGx5IFNtaXRoIEFsbCByaWdodHMgcmVzZXJ2ZWQuCkxpY2Vuc2VkIHVuZGVyIHRoZSBCU0QtMi1DbGF1c2UgTGljZW5zZS4KKi8KCgooZnVuY3Rpb24oKSB7CiAgdmFyICQsIE1vcnJpcywgbWludXRlc1NwZWNIZWxwZXIsIHNlY29uZHNTcGVjSGVscGVyLAogICAgX19zbGljZSA9IFtdLnNsaWNlLAogICAgX19iaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sCiAgICBfX2luZGV4T2YgPSBbXS5pbmRleE9mIHx8IGZ1bmN0aW9uKGl0ZW0pIHsgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykgeyBpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHJldHVybiBpOyB9IHJldHVybiAtMTsgfTsKCiAgTW9ycmlzID0gd2luZG93Lk1vcnJpcyA9IHt9OwoKICAkID0galF1ZXJ5OwoKICBNb3JyaXMuRXZlbnRFbWl0dGVyID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge30KCiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikgewogICAgICBpZiAodGhpcy5oYW5kbGVycyA9PSBudWxsKSB7CiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9OwogICAgICB9CiAgICAgIGlmICh0aGlzLmhhbmRsZXJzW25hbWVdID09IG51bGwpIHsKICAgICAgICB0aGlzLmhhbmRsZXJzW25hbWVdID0gW107CiAgICAgIH0KICAgICAgdGhpcy5oYW5kbGVyc1tuYW1lXS5wdXNoKGhhbmRsZXIpOwogICAgICByZXR1cm4gdGhpczsKICAgIH07CgogICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5maXJlID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBhcmdzLCBoYW5kbGVyLCBuYW1lLCBfaSwgX2xlbiwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIG5hbWUgPSBhcmd1bWVudHNbMF0sIGFyZ3MgPSAyIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBfX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IFtdOwogICAgICBpZiAoKHRoaXMuaGFuZGxlcnMgIT0gbnVsbCkgJiYgKHRoaXMuaGFuZGxlcnNbbmFtZV0gIT0gbnVsbCkpIHsKICAgICAgICBfcmVmID0gdGhpcy5oYW5kbGVyc1tuYW1lXTsKICAgICAgICBfcmVzdWx0cyA9IFtdOwogICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgICAgaGFuZGxlciA9IF9yZWZbX2ldOwogICAgICAgICAgX3Jlc3VsdHMucHVzaChoYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3MpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBFdmVudEVtaXR0ZXI7CgogIH0pKCk7CgogIE1vcnJpcy5jb21tYXMgPSBmdW5jdGlvbihudW0pIHsKICAgIHZhciBhYnNudW0sIGludG51bSwgcmV0LCBzdHJhYnNudW07CiAgICBpZiAobnVtICE9IG51bGwpIHsKICAgICAgcmV0ID0gbnVtIDwgMCA\/ICItIiA6ICIiOwogICAgICBhYnNudW0gPSBNYXRoLmFicyhudW0pOwogICAgICBpbnRudW0gPSBNYXRoLmZsb29yKGFic251bSkudG9GaXhlZCgwKTsKICAgICAgcmV0ICs9IGludG51bS5yZXBsYWNlKC8oPz0oPzpcZHszfSkrJCkoPyFeKS9nLCAnLCcpOwogICAgICBzdHJhYnNudW0gPSBhYnNudW0udG9TdHJpbmcoKTsKICAgICAgaWYgKHN0cmFic251bS5sZW5ndGggPiBpbnRudW0ubGVuZ3RoKSB7CiAgICAgICAgcmV0ICs9IHN0cmFic251bS5zbGljZShpbnRudW0ubGVuZ3RoKTsKICAgICAgfQogICAgICByZXR1cm4gcmV0OwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuICctJzsKICAgIH0KICB9OwoKICBNb3JyaXMucGFkMiA9IGZ1bmN0aW9uKG51bWJlcikgewogICAgcmV0dXJuIChudW1iZXIgPCAxMCA\/ICcwJyA6ICcnKSArIG51bWJlcjsKICB9OwoKICBNb3JyaXMuR3JpZCA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhHcmlkLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIEdyaWQob3B0aW9ucykgewogICAgICB0aGlzLnJlc2l6ZUhhbmRsZXIgPSBfX2JpbmQodGhpcy5yZXNpemVIYW5kbGVyLCB0aGlzKTsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmVsZW1lbnQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgdGhpcy5lbCA9ICQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9ucy5lbGVtZW50KSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5lbCA9ICQob3B0aW9ucy5lbGVtZW50KTsKICAgICAgfQogICAgICBpZiAoKHRoaXMuZWwgPT0gbnVsbCkgfHwgdGhpcy5lbC5sZW5ndGggPT09IDApIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkdyYXBoIGNvbnRhaW5lciBlbGVtZW50IG5vdCBmb3VuZCIpOwogICAgICB9CiAgICAgIGlmICh0aGlzLmVsLmNzcygncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHsKICAgICAgICB0aGlzLmVsLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTsKICAgICAgfQogICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5ncmlkRGVmYXVsdHMsIHRoaXMuZGVmYXVsdHMgfHwge30sIG9wdGlvbnMpOwogICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy51bml0cyA9PT0gJ3N0cmluZycpIHsKICAgICAgICB0aGlzLm9wdGlvbnMucG9zdFVuaXRzID0gb3B0aW9ucy51bml0czsKICAgICAgfQogICAgICB0aGlzLnJhcGhhZWwgPSBuZXcgUmFwaGFlbCh0aGlzLmVsWzBdKTsKICAgICAgdGhpcy5lbGVtZW50V2lkdGggPSBudWxsOwogICAgICB0aGlzLmVsZW1lbnRIZWlnaHQgPSBudWxsOwogICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7CiAgICAgIHRoaXMuc2VsZWN0RnJvbSA9IG51bGw7CiAgICAgIGlmICh0aGlzLmluaXQpIHsKICAgICAgICB0aGlzLmluaXQoKTsKICAgICAgfQogICAgICB0aGlzLnNldERhdGEodGhpcy5vcHRpb25zLmRhdGEpOwogICAgICB0aGlzLmVsLmJpbmQoJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGV2dCkgewogICAgICAgIHZhciBsZWZ0LCBvZmZzZXQsIHJpZ2h0LCB3aWR0aCwgeDsKICAgICAgICBvZmZzZXQgPSBfdGhpcy5lbC5vZmZzZXQoKTsKICAgICAgICB4ID0gZXZ0LnBhZ2VYIC0gb2Zmc2V0LmxlZnQ7CiAgICAgICAgaWYgKF90aGlzLnNlbGVjdEZyb20pIHsKICAgICAgICAgIGxlZnQgPSBfdGhpcy5kYXRhW190aGlzLmhpdFRlc3QoTWF0aC5taW4oeCwgX3RoaXMuc2VsZWN0RnJvbSkpXS5feDsKICAgICAgICAgIHJpZ2h0ID0gX3RoaXMuZGF0YVtfdGhpcy5oaXRUZXN0KE1hdGgubWF4KHgsIF90aGlzLnNlbGVjdEZyb20pKV0uX3g7CiAgICAgICAgICB3aWR0aCA9IHJpZ2h0IC0gbGVmdDsKICAgICAgICAgIHJldHVybiBfdGhpcy5zZWxlY3Rpb25SZWN0LmF0dHIoewogICAgICAgICAgICB4OiBsZWZ0LAogICAgICAgICAgICB3aWR0aDogd2lkdGgKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMuZmlyZSgnaG92ZXJtb3ZlJywgeCwgZXZ0LnBhZ2VZIC0gb2Zmc2V0LnRvcCk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdGhpcy5lbC5iaW5kKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgaWYgKF90aGlzLnNlbGVjdEZyb20pIHsKICAgICAgICAgIF90aGlzLnNlbGVjdGlvblJlY3QuaGlkZSgpOwogICAgICAgICAgX3RoaXMuc2VsZWN0RnJvbSA9IG51bGw7CiAgICAgICAgfQogICAgICAgIHJldHVybiBfdGhpcy5maXJlKCdob3Zlcm91dCcpOwogICAgICB9KTsKICAgICAgdGhpcy5lbC5iaW5kKCd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCcsIGZ1bmN0aW9uKGV2dCkgewogICAgICAgIHZhciBvZmZzZXQsIHRvdWNoOwogICAgICAgIHRvdWNoID0gZXZ0Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXSB8fCBldnQub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXTsKICAgICAgICBvZmZzZXQgPSBfdGhpcy5lbC5vZmZzZXQoKTsKICAgICAgICByZXR1cm4gX3RoaXMuZmlyZSgnaG92ZXJtb3ZlJywgdG91Y2gucGFnZVggLSBvZmZzZXQubGVmdCwgdG91Y2gucGFnZVkgLSBvZmZzZXQudG9wKTsKICAgICAgfSk7CiAgICAgIHRoaXMuZWwuYmluZCgnY2xpY2snLCBmdW5jdGlvbihldnQpIHsKICAgICAgICB2YXIgb2Zmc2V0OwogICAgICAgIG9mZnNldCA9IF90aGlzLmVsLm9mZnNldCgpOwogICAgICAgIHJldHVybiBfdGhpcy5maXJlKCdncmlkY2xpY2snLCBldnQucGFnZVggLSBvZmZzZXQubGVmdCwgZXZ0LnBhZ2VZIC0gb2Zmc2V0LnRvcCk7CiAgICAgIH0pOwogICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlU2VsZWN0KSB7CiAgICAgICAgdGhpcy5zZWxlY3Rpb25SZWN0ID0gdGhpcy5yYXBoYWVsLnJlY3QoMCwgMCwgMCwgdGhpcy5lbC5pbm5lckhlaWdodCgpKS5hdHRyKHsKICAgICAgICAgIGZpbGw6IHRoaXMub3B0aW9ucy5yYW5nZVNlbGVjdENvbG9yLAogICAgICAgICAgc3Ryb2tlOiBmYWxzZQogICAgICAgIH0pLnRvQmFjaygpLmhpZGUoKTsKICAgICAgICB0aGlzLmVsLmJpbmQoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgdmFyIG9mZnNldDsKICAgICAgICAgIG9mZnNldCA9IF90aGlzLmVsLm9mZnNldCgpOwogICAgICAgICAgcmV0dXJuIF90aGlzLnN0YXJ0UmFuZ2UoZXZ0LnBhZ2VYIC0gb2Zmc2V0LmxlZnQpOwogICAgICAgIH0pOwogICAgICAgIHRoaXMuZWwuYmluZCgnbW91c2V1cCcsIGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgdmFyIG9mZnNldDsKICAgICAgICAgIG9mZnNldCA9IF90aGlzLmVsLm9mZnNldCgpOwogICAgICAgICAgX3RoaXMuZW5kUmFuZ2UoZXZ0LnBhZ2VYIC0gb2Zmc2V0LmxlZnQpOwogICAgICAgICAgcmV0dXJuIF90aGlzLmZpcmUoJ2hvdmVybW92ZScsIGV2dC5wYWdlWCAtIG9mZnNldC5sZWZ0LCBldnQucGFnZVkgLSBvZmZzZXQudG9wKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICBpZiAodGhpcy5vcHRpb25zLnJlc2l6ZSkgewogICAgICAgICQod2luZG93KS5iaW5kKCdyZXNpemUnLCBmdW5jdGlvbihldnQpIHsKICAgICAgICAgIGlmIChfdGhpcy50aW1lb3V0SWQgIT0gbnVsbCkgewogICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXRJZCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gX3RoaXMudGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoX3RoaXMucmVzaXplSGFuZGxlciwgMTAwKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICB0aGlzLmVsLmNzcygnLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yJywgJ3JnYmEoMCwwLDAsMCknKTsKICAgICAgaWYgKHRoaXMucG9zdEluaXQpIHsKICAgICAgICB0aGlzLnBvc3RJbml0KCk7CiAgICAgIH0KICAgIH0KCiAgICBHcmlkLnByb3RvdHlwZS5ncmlkRGVmYXVsdHMgPSB7CiAgICAgIGRhdGVGb3JtYXQ6IG51bGwsCiAgICAgIGF4ZXM6IHRydWUsCiAgICAgIGdyaWQ6IHRydWUsCiAgICAgIGdyaWRMaW5lQ29sb3I6ICcjYWFhJywKICAgICAgZ3JpZFN0cm9rZVdpZHRoOiAwLjUsCiAgICAgIGdyaWRUZXh0Q29sb3I6ICcjODg4JywKICAgICAgZ3JpZFRleHRTaXplOiAxMiwKICAgICAgZ3JpZFRleHRGYW1pbHk6ICdzYW5zLXNlcmlmJywKICAgICAgZ3JpZFRleHRXZWlnaHQ6ICdub3JtYWwnLAogICAgICBoaWRlSG92ZXI6IGZhbHNlLAogICAgICB5TGFiZWxGb3JtYXQ6IG51bGwsCiAgICAgIHhMYWJlbEFuZ2xlOiAwLAogICAgICBudW1MaW5lczogNSwKICAgICAgcGFkZGluZzogMjUsCiAgICAgIHBhcnNlVGltZTogdHJ1ZSwKICAgICAgcG9zdFVuaXRzOiAnJywKICAgICAgcHJlVW5pdHM6ICcnLAogICAgICB5bWF4OiAnYXV0bycsCiAgICAgIHltaW46ICdhdXRvIDAnLAogICAgICBnb2FsczogW10sCiAgICAgIGdvYWxTdHJva2VXaWR0aDogMS4wLAogICAgICBnb2FsTGluZUNvbG9yczogWycjNjY2NjMzJywgJyM5OTk5NjYnLCAnI2NjNjY2NicsICcjNjYzMzMzJ10sCiAgICAgIGV2ZW50czogW10sCiAgICAgIGV2ZW50U3Ryb2tlV2lkdGg6IDEuMCwKICAgICAgZXZlbnRMaW5lQ29sb3JzOiBbJyMwMDVhMDQnLCAnI2NjZmZiYicsICcjM2E1ZjBiJywgJyMwMDU1MDInXSwKICAgICAgcmFuZ2VTZWxlY3Q6IG51bGwsCiAgICAgIHJhbmdlU2VsZWN0Q29sb3I6ICcjZWVmJywKICAgICAgcmVzaXplOiBmYWxzZQogICAgfTsKCiAgICBHcmlkLnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24oZGF0YSwgcmVkcmF3KSB7CiAgICAgIHZhciBlLCBpZHgsIGluZGV4LCBtYXhHb2FsLCBtaW5Hb2FsLCByZXQsIHJvdywgc3RlcCwgdG90YWwsIHksIHlrZXksIHltYXgsIHltaW4sIHl2YWwsIF9yZWY7CiAgICAgIGlmIChyZWRyYXcgPT0gbnVsbCkgewogICAgICAgIHJlZHJhdyA9IHRydWU7CiAgICAgIH0KICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSBkYXRhOwogICAgICBpZiAoKGRhdGEgPT0gbnVsbCkgfHwgZGF0YS5sZW5ndGggPT09IDApIHsKICAgICAgICB0aGlzLmRhdGEgPSBbXTsKICAgICAgICB0aGlzLnJhcGhhZWwuY2xlYXIoKTsKICAgICAgICBpZiAodGhpcy5ob3ZlciAhPSBudWxsKSB7CiAgICAgICAgICB0aGlzLmhvdmVyLmhpZGUoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHltYXggPSB0aGlzLmN1bXVsYXRpdmUgPyAwIDogbnVsbDsKICAgICAgeW1pbiA9IHRoaXMuY3VtdWxhdGl2ZSA\\/IF9pIDwgX3JlZjIgOiBfaSA+IF9yZWYyOyBpID0gMCA8PSBfcmVmMiA\/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgICAgICAgX3Jlc3VsdHMucHVzaCh0aGlzLm1lYXN1cmVUZXh0KHRoaXMuZGF0YVtpXS50ZXh0LCAtdGhpcy5vcHRpb25zLnhMYWJlbEFuZ2xlKS5oZWlnaHQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBfcmVzdWx0czsKICAgICAgICAgIH0pLmNhbGwodGhpcyk7CiAgICAgICAgICB0aGlzLmJvdHRvbSAtPSBNYXRoLm1heC5hcHBseShNYXRoLCBib3R0b21PZmZzZXRzKTsKICAgICAgICB9CiAgICAgICAgdGhpcy53aWR0aCA9IE1hdGgubWF4KDEsIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQpOwogICAgICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5tYXgoMSwgdGhpcy5ib3R0b20gLSB0aGlzLnRvcCk7CiAgICAgICAgdGhpcy5keCA9IHRoaXMud2lkdGggLyAodGhpcy54bWF4IC0gdGhpcy54bWluKTsKICAgICAgICB0aGlzLmR5ID0gdGhpcy5oZWlnaHQgLyAodGhpcy55bWF4IC0gdGhpcy55bWluKTsKICAgICAgICBpZiAodGhpcy5jYWxjKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5jYWxjKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIEdyaWQucHJvdG90eXBlLnRyYW5zWSA9IGZ1bmN0aW9uKHkpIHsKICAgICAgcmV0dXJuIHRoaXMuYm90dG9tIC0gKHkgLSB0aGlzLnltaW4pICogdGhpcy5keTsKICAgIH07CgogICAgR3JpZC5wcm90b3R5cGUudHJhbnNYID0gZnVuY3Rpb24oeCkgewogICAgICBpZiAodGhpcy5kYXRhLmxlbmd0aCA9PT0gMSkgewogICAgICAgIHJldHVybiAodGhpcy5sZWZ0ICsgdGhpcy5yaWdodCkgLyAyOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLmxlZnQgKyAoeCAtIHRoaXMueG1pbikgKiB0aGlzLmR4OwogICAgICB9CiAgICB9OwoKICAgIEdyaWQucHJvdG90eXBlLnJlZHJhdyA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLnJhcGhhZWwuY2xlYXIoKTsKICAgICAgdGhpcy5fY2FsYygpOwogICAgICB0aGlzLmRyYXdHcmlkKCk7CiAgICAgIHRoaXMuZHJhd0dvYWxzKCk7CiAgICAgIHRoaXMuZHJhd0V2ZW50cygpOwogICAgICBpZiAodGhpcy5kcmF3KSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZHJhdygpOwogICAgICB9CiAgICB9OwoKICAgIEdyaWQucHJvdG90eXBlLm1lYXN1cmVUZXh0ID0gZnVuY3Rpb24odGV4dCwgYW5nbGUpIHsKICAgICAgdmFyIHJldCwgdHQ7CiAgICAgIGlmIChhbmdsZSA9PSBudWxsKSB7CiAgICAgICAgYW5nbGUgPSAwOwogICAgICB9CiAgICAgIHR0ID0gdGhpcy5yYXBoYWVsLnRleHQoMTAwLCAxMDAsIHRleHQpLmF0dHIoJ2ZvbnQtc2l6ZScsIHRoaXMub3B0aW9ucy5ncmlkVGV4dFNpemUpLmF0dHIoJ2ZvbnQtZmFtaWx5JywgdGhpcy5vcHRpb25zLmdyaWRUZXh0RmFtaWx5KS5hdHRyKCdmb250LXdlaWdodCcsIHRoaXMub3B0aW9ucy5ncmlkVGV4dFdlaWdodCkucm90YXRlKGFuZ2xlKTsKICAgICAgcmV0ID0gdHQuZ2V0QkJveCgpOwogICAgICB0dC5yZW1vdmUoKTsKICAgICAgcmV0dXJuIHJldDsKICAgIH07CgogICAgR3JpZC5wcm90b3R5cGUueUF4aXNGb3JtYXQgPSBmdW5jdGlvbihsYWJlbCkgewogICAgICByZXR1cm4gdGhpcy55TGFiZWxGb3JtYXQobGFiZWwpOwogICAgfTsKCiAgICBHcmlkLnByb3RvdHlwZS55TGFiZWxGb3JtYXQgPSBmdW5jdGlvbihsYWJlbCkgewogICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy55TGFiZWxGb3JtYXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnlMYWJlbEZvcm1hdChsYWJlbCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICIiICsgdGhpcy5vcHRpb25zLnByZVVuaXRzICsgKE1vcnJpcy5jb21tYXMobGFiZWwpKSArIHRoaXMub3B0aW9ucy5wb3N0VW5pdHM7CiAgICAgIH0KICAgIH07CgogICAgR3JpZC5wcm90b3R5cGUuZHJhd0dyaWQgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGxpbmVZLCB5LCBfaSwgX2xlbiwgX3JlZiwgX3JlZjEsIF9yZWYyLCBfcmVzdWx0czsKICAgICAgaWYgKHRoaXMub3B0aW9ucy5ncmlkID09PSBmYWxzZSAmJiAoKF9yZWYgPSB0aGlzLm9wdGlvbnMuYXhlcykgIT09IHRydWUgJiYgX3JlZiAhPT0gJ2JvdGgnICYmIF9yZWYgIT09ICd5JykpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgX3JlZjEgPSB0aGlzLmdyaWQ7CiAgICAgIF9yZXN1bHRzID0gW107CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICBsaW5lWSA9IF9yZWYxW19pXTsKICAgICAgICB5ID0gdGhpcy50cmFuc1kobGluZVkpOwogICAgICAgIGlmICgoX3JlZjIgPSB0aGlzLm9wdGlvbnMuYXhlcykgPT09IHRydWUgfHwgX3JlZjIgPT09ICdib3RoJyB8fCBfcmVmMiA9PT0gJ3knKSB7CiAgICAgICAgICB0aGlzLmRyYXdZQXhpc0xhYmVsKHRoaXMubGVmdCAtIHRoaXMub3B0aW9ucy5wYWRkaW5nIC8gMiwgeSwgdGhpcy55QXhpc0Zvcm1hdChsaW5lWSkpOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5vcHRpb25zLmdyaWQpIHsKICAgICAgICAgIF9yZXN1bHRzLnB1c2godGhpcy5kcmF3R3JpZExpbmUoIk0iICsgdGhpcy5sZWZ0ICsgIiwiICsgeSArICJIIiArICh0aGlzLmxlZnQgKyB0aGlzLndpZHRoKSkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfcmVzdWx0cy5wdXNoKHZvaWQgMCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBfcmVzdWx0czsKICAgIH07CgogICAgR3JpZC5wcm90b3R5cGUuZHJhd0dvYWxzID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBjb2xvciwgZ29hbCwgaSwgX2ksIF9sZW4sIF9yZWYsIF9yZXN1bHRzOwogICAgICBfcmVmID0gdGhpcy5vcHRpb25zLmdvYWxzOwogICAgICBfcmVzdWx0cyA9IFtdOwogICAgICBmb3IgKGkgPSBfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBpID0gKytfaSkgewogICAgICAgIGdvYWwgPSBfcmVmW2ldOwogICAgICAgIGNvbG9yID0gdGhpcy5vcHRpb25zLmdvYWxMaW5lQ29sb3JzW2kgJSB0aGlzLm9wdGlvbnMuZ29hbExpbmVDb2xvcnMubGVuZ3RoXTsKICAgICAgICBfcmVzdWx0cy5wdXNoKHRoaXMuZHJhd0dvYWwoZ29hbCwgY29sb3IpKTsKICAgICAgfQogICAgICByZXR1cm4gX3Jlc3VsdHM7CiAgICB9OwoKICAgIEdyaWQucHJvdG90eXBlLmRyYXdFdmVudHMgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNvbG9yLCBldmVudCwgaSwgX2ksIF9sZW4sIF9yZWYsIF9yZXN1bHRzOwogICAgICBfcmVmID0gdGhpcy5ldmVudHM7CiAgICAgIF9yZXN1bHRzID0gW107CiAgICAgIGZvciAoaSA9IF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IGkgPSArK19pKSB7CiAgICAgICAgZXZlbnQgPSBfcmVmW2ldOwogICAgICAgIGNvbG9yID0gdGhpcy5vcHRpb25zLmV2ZW50TGluZUNvbG9yc1tpICUgdGhpcy5vcHRpb25zLmV2ZW50TGluZUNvbG9ycy5sZW5ndGhdOwogICAgICAgIF9yZXN1bHRzLnB1c2godGhpcy5kcmF3RXZlbnQoZXZlbnQsIGNvbG9yKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgfTsKCiAgICBHcmlkLnByb3RvdHlwZS5kcmF3R29hbCA9IGZ1bmN0aW9uKGdvYWwsIGNvbG9yKSB7CiAgICAgIHJldHVybiB0aGlzLnJhcGhhZWwucGF0aCgiTSIgKyB0aGlzLmxlZnQgKyAiLCIgKyAodGhpcy50cmFuc1koZ29hbCkpICsgIkgiICsgdGhpcy5yaWdodCkuYXR0cignc3Ryb2tlJywgY29sb3IpLmF0dHIoJ3N0cm9rZS13aWR0aCcsIHRoaXMub3B0aW9ucy5nb2FsU3Ryb2tlV2lkdGgpOwogICAgfTsKCiAgICBHcmlkLnByb3RvdHlwZS5kcmF3RXZlbnQgPSBmdW5jdGlvbihldmVudCwgY29sb3IpIHsKICAgICAgcmV0dXJuIHRoaXMucmFwaGFlbC5wYXRoKCJNIiArICh0aGlzLnRyYW5zWChldmVudCkpICsgIiwiICsgdGhpcy5ib3R0b20gKyAiViIgKyB0aGlzLnRvcCkuYXR0cignc3Ryb2tlJywgY29sb3IpLmF0dHIoJ3N0cm9rZS13aWR0aCcsIHRoaXMub3B0aW9ucy5ldmVudFN0cm9rZVdpZHRoKTsKICAgIH07CgogICAgR3JpZC5wcm90b3R5cGUuZHJhd1lBeGlzTGFiZWwgPSBmdW5jdGlvbih4UG9zLCB5UG9zLCB0ZXh0KSB7CiAgICAgIHJldHVybiB0aGlzLnJhcGhhZWwudGV4dCh4UG9zLCB5UG9zLCB0ZXh0KS5hdHRyKCdmb250LXNpemUnLCB0aGlzLm9wdGlvbnMuZ3JpZFRleHRTaXplKS5hdHRyKCdmb250LWZhbWlseScsIHRoaXMub3B0aW9ucy5ncmlkVGV4dEZhbWlseSkuYXR0cignZm9udC13ZWlnaHQnLCB0aGlzLm9wdGlvbnMuZ3JpZFRleHRXZWlnaHQpLmF0dHIoJ2ZpbGwnLCB0aGlzLm9wdGlvbnMuZ3JpZFRleHRDb2xvcikuYXR0cigndGV4dC1hbmNob3InLCAnZW5kJyk7CiAgICB9OwoKICAgIEdyaWQucHJvdG90eXBlLmRyYXdHcmlkTGluZSA9IGZ1bmN0aW9uKHBhdGgpIHsKICAgICAgcmV0dXJuIHRoaXMucmFwaGFlbC5wYXRoKHBhdGgpLmF0dHIoJ3N0cm9rZScsIHRoaXMub3B0aW9ucy5ncmlkTGluZUNvbG9yKS5hdHRyKCdzdHJva2Utd2lkdGgnLCB0aGlzLm9wdGlvbnMuZ3JpZFN0cm9rZVdpZHRoKTsKICAgIH07CgogICAgR3JpZC5wcm90b3R5cGUuc3RhcnRSYW5nZSA9IGZ1bmN0aW9uKHgpIHsKICAgICAgdGhpcy5ob3Zlci5oaWRlKCk7CiAgICAgIHRoaXMuc2VsZWN0RnJvbSA9IHg7CiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvblJlY3QuYXR0cih7CiAgICAgICAgeDogeCwKICAgICAgICB3aWR0aDogMAogICAgICB9KS5zaG93KCk7CiAgICB9OwoKICAgIEdyaWQucHJvdG90eXBlLmVuZFJhbmdlID0gZnVuY3Rpb24oeCkgewogICAgICB2YXIgZW5kLCBzdGFydDsKICAgICAgaWYgKHRoaXMuc2VsZWN0RnJvbSkgewogICAgICAgIHN0YXJ0ID0gTWF0aC5taW4odGhpcy5zZWxlY3RGcm9tLCB4KTsKICAgICAgICBlbmQgPSBNYXRoLm1heCh0aGlzLnNlbGVjdEZyb20sIHgpOwogICAgICAgIHRoaXMub3B0aW9ucy5yYW5nZVNlbGVjdC5jYWxsKHRoaXMuZWwsIHsKICAgICAgICAgIHN0YXJ0OiB0aGlzLmRhdGFbdGhpcy5oaXRUZXN0KHN0YXJ0KV0ueCwKICAgICAgICAgIGVuZDogdGhpcy5kYXRhW3RoaXMuaGl0VGVzdChlbmQpXS54CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0RnJvbSA9IG51bGw7CiAgICAgIH0KICAgIH07CgogICAgR3JpZC5wcm90b3R5cGUucmVzaXplSGFuZGxlciA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7CiAgICAgIHRoaXMucmFwaGFlbC5zZXRTaXplKHRoaXMuZWwud2lkdGgoKSwgdGhpcy5lbC5oZWlnaHQoKSk7CiAgICAgIHJldHVybiB0aGlzLnJlZHJhdygpOwogICAgfTsKCiAgICByZXR1cm4gR3JpZDsKCiAgfSkoTW9ycmlzLkV2ZW50RW1pdHRlcik7CgogIE1vcnJpcy5wYXJzZURhdGUgPSBmdW5jdGlvbihkYXRlKSB7CiAgICB2YXIgaXNlY3MsIG0sIG1zZWNzLCBuLCBvLCBvZmZzZXRtaW5zLCBwLCBxLCByLCByZXQsIHNlY3M7CiAgICBpZiAodHlwZW9mIGRhdGUgPT09ICdudW1iZXInKSB7CiAgICAgIHJldHVybiBkYXRlOwogICAgfQogICAgbSA9IGRhdGUubWF0Y2goL14oXGQrKSBRKFxkKSQvKTsKICAgIG4gPSBkYXRlLm1hdGNoKC9eKFxkKyktKFxkKykkLyk7CiAgICBvID0gZGF0ZS5tYXRjaCgvXihcZCspLShcZCspLShcZCspJC8pOwogICAgcCA9IGRhdGUubWF0Y2goL14oXGQrKSBXKFxkKykkLyk7CiAgICBxID0gZGF0ZS5tYXRjaCgvXihcZCspLShcZCspLShcZCspWyBUXShcZCspOihcZCspKFp8KFsrLV0pKFxkXGQpOj8oXGRcZCkpPyQvKTsKICAgIHIgPSBkYXRlLm1hdGNoKC9eKFxkKyktKFxkKyktKFxkKylbIFRdKFxkKyk6KFxkKyk6KFxkKyhcLlxkKyk\/KShafChbKy1dKShcZFxkKTo\\/IHRoaXMub3B0aW9ucy5zbW9vdGggOiAoX3JlZjEgPSB0aGlzLm9wdGlvbnMueWtleXNbaV0sIF9faW5kZXhPZi5jYWxsKHRoaXMub3B0aW9ucy5zbW9vdGgsIF9yZWYxKSA+PSAwKTsKICAgICAgICAgIGNvb3JkcyA9IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIF9qLCBfbGVuLCBfcmVmMiwgX3Jlc3VsdHMxOwogICAgICAgICAgICBfcmVmMiA9IHRoaXMuZGF0YTsKICAgICAgICAgICAgX3Jlc3VsdHMxID0gW107CiAgICAgICAgICAgIGZvciAoX2ogPSAwLCBfbGVuID0gX3JlZjIubGVuZ3RoOyBfaiA8IF9sZW47IF9qKyspIHsKICAgICAgICAgICAgICByID0gX3JlZjJbX2pdOwogICAgICAgICAgICAgIGlmIChyLl95W2ldICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIF9yZXN1bHRzMS5wdXNoKHsKICAgICAgICAgICAgICAgICAgeDogci5feCwKICAgICAgICAgICAgICAgICAgeTogci5feVtpXQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBfcmVzdWx0czE7CiAgICAgICAgICB9KS5jYWxsKHRoaXMpOwogICAgICAgICAgaWYgKGNvb3Jkcy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goTW9ycmlzLkxpbmUuY3JlYXRlUGF0aChjb29yZHMsIHNtb290aCwgdGhpcy5ib3R0b20pKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2gobnVsbCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBfcmVzdWx0czsKICAgICAgfSkuY2FsbCh0aGlzKTsKICAgIH07CgogICAgTGluZS5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgX3JlZjsKICAgICAgaWYgKChfcmVmID0gdGhpcy5vcHRpb25zLmF4ZXMpID09PSB0cnVlIHx8IF9yZWYgPT09ICdib3RoJyB8fCBfcmVmID09PSAneCcpIHsKICAgICAgICB0aGlzLmRyYXdYQXhpcygpOwogICAgICB9CiAgICAgIHRoaXMuZHJhd1NlcmllcygpOwogICAgICBpZiAodGhpcy5vcHRpb25zLmhpZGVIb3ZlciA9PT0gZmFsc2UpIHsKICAgICAgICByZXR1cm4gdGhpcy5kaXNwbGF5SG92ZXJGb3JSb3codGhpcy5kYXRhLmxlbmd0aCAtIDEpOwogICAgICB9CiAgICB9OwoKICAgIExpbmUucHJvdG90eXBlLmRyYXdYQXhpcyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgZHJhd0xhYmVsLCBsLCBsYWJlbHMsIHByZXZBbmdsZU1hcmdpbiwgcHJldkxhYmVsTWFyZ2luLCByb3csIHlwb3MsIF9pLCBfbGVuLCBfcmVzdWx0cywKICAgICAgICBfdGhpcyA9IHRoaXM7CiAgICAgIHlwb3MgPSB0aGlzLmJvdHRvbSArIHRoaXMub3B0aW9ucy5wYWRkaW5nIC8gMjsKICAgICAgcHJldkxhYmVsTWFyZ2luID0gbnVsbDsKICAgICAgcHJldkFuZ2xlTWFyZ2luID0gbnVsbDsKICAgICAgZHJhd0xhYmVsID0gZnVuY3Rpb24obGFiZWxUZXh0LCB4cG9zKSB7CiAgICAgICAgdmFyIGxhYmVsLCBsYWJlbEJveCwgbWFyZ2luLCBvZmZzZXQsIHRleHRCb3g7CiAgICAgICAgbGFiZWwgPSBfdGhpcy5kcmF3WEF4aXNMYWJlbChfdGhpcy50cmFuc1goeHBvcyksIHlwb3MsIGxhYmVsVGV4dCk7CiAgICAgICAgdGV4dEJveCA9IGxhYmVsLmdldEJCb3goKTsKICAgICAgICBsYWJlbC50cmFuc2Zvcm0oInIiICsgKC1fdGhpcy5vcHRpb25zLnhMYWJlbEFuZ2xlKSk7CiAgICAgICAgbGFiZWxCb3ggPSBsYWJlbC5nZXRCQm94KCk7CiAgICAgICAgbGFiZWwudHJhbnNmb3JtKCJ0MCwiICsgKGxhYmVsQm94LmhlaWdodCAvIDIpICsgIi4uLiIpOwogICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnhMYWJlbEFuZ2xlICE9PSAwKSB7CiAgICAgICAgICBvZmZzZXQgPSAtMC41ICogdGV4dEJveC53aWR0aCAqIE1hdGguY29zKF90aGlzLm9wdGlvbnMueExhYmVsQW5nbGUgKiBNYXRoLlBJIC8gMTgwLjApOwogICAgICAgICAgbGFiZWwudHJhbnNmb3JtKCJ0IiArIG9mZnNldCArICIsMC4uLiIpOwogICAgICAgIH0KICAgICAgICBsYWJlbEJveCA9IGxhYmVsLmdldEJCb3goKTsKICAgICAgICBpZiAoKChwcmV2TGFiZWxNYXJnaW4gPT0gbnVsbCkgfHwgcHJldkxhYmVsTWFyZ2luID49IGxhYmVsQm94LnggKyBsYWJlbEJveC53aWR0aCB8fCAocHJldkFuZ2xlTWFyZ2luICE9IG51bGwpICYmIHByZXZBbmdsZU1hcmdpbiA+PSBsYWJlbEJveC54KSAmJiBsYWJlbEJveC54ID49IDAgJiYgKGxhYmVsQm94LnggKyBsYWJlbEJveC53aWR0aCkgPCBfdGhpcy5lbC53aWR0aCgpKSB7CiAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy54TGFiZWxBbmdsZSAhPT0gMCkgewogICAgICAgICAgICBtYXJnaW4gPSAxLjI1ICogX3RoaXMub3B0aW9ucy5ncmlkVGV4dFNpemUgLyBNYXRoLnNpbihfdGhpcy5vcHRpb25zLnhMYWJlbEFuZ2xlICogTWF0aC5QSSAvIDE4MC4wKTsKICAgICAgICAgICAgcHJldkFuZ2xlTWFyZ2luID0gbGFiZWxCb3gueCAtIG1hcmdpbjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBwcmV2TGFiZWxNYXJnaW4gPSBsYWJlbEJveC54IC0gX3RoaXMub3B0aW9ucy54TGFiZWxNYXJnaW47CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBsYWJlbC5yZW1vdmUoKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFyc2VUaW1lKSB7CiAgICAgICAgaWYgKHRoaXMuZGF0YS5sZW5ndGggPT09IDEgJiYgdGhpcy5vcHRpb25zLnhMYWJlbHMgPT09ICdhdXRvJykgewogICAgICAgICAgbGFiZWxzID0gW1t0aGlzLmRhdGFbMF0ubGFiZWwsIHRoaXMuZGF0YVswXS54XV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGxhYmVscyA9IE1vcnJpcy5sYWJlbFNlcmllcyh0aGlzLnhtaW4sIHRoaXMueG1heCwgdGhpcy53aWR0aCwgdGhpcy5vcHRpb25zLnhMYWJlbHMsIHRoaXMub3B0aW9ucy54TGFiZWxGb3JtYXQpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBsYWJlbHMgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgX2ksIF9sZW4sIF9yZWYsIF9yZXN1bHRzOwogICAgICAgICAgX3JlZiA9IHRoaXMuZGF0YTsKICAgICAgICAgIF9yZXN1bHRzID0gW107CiAgICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgICAgcm93ID0gX3JlZltfaV07CiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goW3Jvdy5sYWJlbCwgcm93LnhdKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBfcmVzdWx0czsKICAgICAgICB9KS5jYWxsKHRoaXMpOwogICAgICB9CiAgICAgIGxhYmVscy5yZXZlcnNlKCk7CiAgICAgIF9yZXN1bHRzID0gW107CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gbGFiZWxzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgbCA9IGxhYmVsc1tfaV07CiAgICAgICAgX3Jlc3VsdHMucHVzaChkcmF3TGFiZWwobFswXSwgbFsxXSkpOwogICAgICB9CiAgICAgIHJldHVybiBfcmVzdWx0czsKICAgIH07CgogICAgTGluZS5wcm90b3R5cGUuZHJhd1NlcmllcyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgaSwgX2ksIF9qLCBfcmVmLCBfcmVmMSwgX3Jlc3VsdHM7CiAgICAgIHRoaXMuc2VyaWVzUG9pbnRzID0gW107CiAgICAgIGZvciAoaSA9IF9pID0gX3JlZiA9IHRoaXMub3B0aW9ucy55a2V5cy5sZW5ndGggLSAxOyBfcmVmIDw9IDAgPyBfaSA8PSAwIDogX2kgPj0gMDsgaSA9IF9yZWYgPD0gMCA\/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgdGhpcy5fZHJhd0xpbmVGb3IoaSk7CiAgICAgIH0KICAgICAgX3Jlc3VsdHMgPSBbXTsKICAgICAgZm9yIChpID0gX2ogPSBfcmVmMSA9IHRoaXMub3B0aW9ucy55a2V5cy5sZW5ndGggLSAxOyBfcmVmMSA8PSAwID8gX2ogPD0gMCA6IF9qID49IDA7IGkgPSBfcmVmMSA8PSAwID8gKytfaiA6IC0tX2opIHsKICAgICAgICBfcmVzdWx0cy5wdXNoKHRoaXMuX2RyYXdQb2ludEZvcihpKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgfTsKCiAgICBMaW5lLnByb3RvdHlwZS5fZHJhd1BvaW50Rm9yID0gZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgdmFyIGNpcmNsZSwgcm93LCBfaSwgX2xlbiwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIHRoaXMuc2VyaWVzUG9pbnRzW2luZGV4XSA9IFtdOwogICAgICBfcmVmID0gdGhpcy5kYXRhOwogICAgICBfcmVzdWx0cyA9IFtdOwogICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICByb3cgPSBfcmVmW19pXTsKICAgICAgICBjaXJjbGUgPSBudWxsOwogICAgICAgIGlmIChyb3cuX3lbaW5kZXhdICE9IG51bGwpIHsKICAgICAgICAgIGNpcmNsZSA9IHRoaXMuZHJhd0xpbmVQb2ludChyb3cuX3gsIHJvdy5feVtpbmRleF0sIHRoaXMuY29sb3JGb3Iocm93LCBpbmRleCwgJ3BvaW50JyksIGluZGV4KTsKICAgICAgICB9CiAgICAgICAgX3Jlc3VsdHMucHVzaCh0aGlzLnNlcmllc1BvaW50c1tpbmRleF0ucHVzaChjaXJjbGUpKTsKICAgICAgfQogICAgICByZXR1cm4gX3Jlc3VsdHM7CiAgICB9OwoKICAgIExpbmUucHJvdG90eXBlLl9kcmF3TGluZUZvciA9IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgIHZhciBwYXRoOwogICAgICBwYXRoID0gdGhpcy5wYXRoc1tpbmRleF07CiAgICAgIGlmIChwYXRoICE9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZHJhd0xpbmVQYXRoKHBhdGgsIHRoaXMuY29sb3JGb3IobnVsbCwgaW5kZXgsICdsaW5lJyksIGluZGV4KTsKICAgICAgfQogICAgfTsKCiAgICBMaW5lLmNyZWF0ZVBhdGggPSBmdW5jdGlvbihjb29yZHMsIHNtb290aCwgYm90dG9tKSB7CiAgICAgIHZhciBjb29yZCwgZywgZ3JhZHMsIGksIGl4LCBsZywgcGF0aCwgcHJldkNvb3JkLCB4MSwgeDIsIHkxLCB5MiwgX2ksIF9sZW47CiAgICAgIHBhdGggPSAiIjsKICAgICAgaWYgKHNtb290aCkgewogICAgICAgIGdyYWRzID0gTW9ycmlzLkxpbmUuZ3JhZGllbnRzKGNvb3Jkcyk7CiAgICAgIH0KICAgICAgcHJldkNvb3JkID0gewogICAgICAgIHk6IG51bGwKICAgICAgfTsKICAgICAgZm9yIChpID0gX2kgPSAwLCBfbGVuID0gY29vcmRzLmxlbmd0aDsgX2kgPCBfbGVuOyBpID0gKytfaSkgewogICAgICAgIGNvb3JkID0gY29vcmRzW2ldOwogICAgICAgIGlmIChjb29yZC55ICE9IG51bGwpIHsKICAgICAgICAgIGlmIChwcmV2Q29vcmQueSAhPSBudWxsKSB7CiAgICAgICAgICAgIGlmIChzbW9vdGgpIHsKICAgICAgICAgICAgICBnID0gZ3JhZHNbaV07CiAgICAgICAgICAgICAgbGcgPSBncmFkc1tpIC0gMV07CiAgICAgICAgICAgICAgaXggPSAoY29vcmQueCAtIHByZXZDb29yZC54KSAvIDQ7CiAgICAgICAgICAgICAgeDEgPSBwcmV2Q29vcmQueCArIGl4OwogICAgICAgICAgICAgIHkxID0gTWF0aC5taW4oYm90dG9tLCBwcmV2Q29vcmQueSArIGl4ICogbGcpOwogICAgICAgICAgICAgIHgyID0gY29vcmQueCAtIGl4OwogICAgICAgICAgICAgIHkyID0gTWF0aC5taW4oYm90dG9tLCBjb29yZC55IC0gaXggKiBnKTsKICAgICAgICAgICAgICBwYXRoICs9ICJDIiArIHgxICsgIiwiICsgeTEgKyAiLCIgKyB4MiArICIsIiArIHkyICsgIiwiICsgY29vcmQueCArICIsIiArIGNvb3JkLnk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcGF0aCArPSAiTCIgKyBjb29yZC54ICsgIiwiICsgY29vcmQueTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKCFzbW9vdGggfHwgKGdyYWRzW2ldICE9IG51bGwpKSB7CiAgICAgICAgICAgICAgcGF0aCArPSAiTSIgKyBjb29yZC54ICsgIiwiICsgY29vcmQueTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBwcmV2Q29vcmQgPSBjb29yZDsKICAgICAgfQogICAgICByZXR1cm4gcGF0aDsKICAgIH07CgogICAgTGluZS5ncmFkaWVudHMgPSBmdW5jdGlvbihjb29yZHMpIHsKICAgICAgdmFyIGNvb3JkLCBncmFkLCBpLCBuZXh0Q29vcmQsIHByZXZDb29yZCwgX2ksIF9sZW4sIF9yZXN1bHRzOwogICAgICBncmFkID0gZnVuY3Rpb24oYSwgYikgewogICAgICAgIHJldHVybiAoYS55IC0gYi55KSAvIChhLnggLSBiLngpOwogICAgICB9OwogICAgICBfcmVzdWx0cyA9IFtdOwogICAgICBmb3IgKGkgPSBfaSA9IDAsIF9sZW4gPSBjb29yZHMubGVuZ3RoOyBfaSA8IF9sZW47IGkgPSArK19pKSB7CiAgICAgICAgY29vcmQgPSBjb29yZHNbaV07CiAgICAgICAgaWYgKGNvb3JkLnkgIT0gbnVsbCkgewogICAgICAgICAgbmV4dENvb3JkID0gY29vcmRzW2kgKyAxXSB8fCB7CiAgICAgICAgICAgIHk6IG51bGwKICAgICAgICAgIH07CiAgICAgICAgICBwcmV2Q29vcmQgPSBjb29yZHNbaSAtIDFdIHx8IHsKICAgICAgICAgICAgeTogbnVsbAogICAgICAgICAgfTsKICAgICAgICAgIGlmICgocHJldkNvb3JkLnkgIT0gbnVsbCkgJiYgKG5leHRDb29yZC55ICE9IG51bGwpKSB7CiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goZ3JhZChwcmV2Q29vcmQsIG5leHRDb29yZCkpOwogICAgICAgICAgfSBlbHNlIGlmIChwcmV2Q29vcmQueSAhPSBudWxsKSB7CiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goZ3JhZChwcmV2Q29vcmQsIGNvb3JkKSk7CiAgICAgICAgICB9IGVsc2UgaWYgKG5leHRDb29yZC55ICE9IG51bGwpIHsKICAgICAgICAgICAgX3Jlc3VsdHMucHVzaChncmFkKGNvb3JkLCBuZXh0Q29vcmQpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2gobnVsbCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF9yZXN1bHRzLnB1c2gobnVsbCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBfcmVzdWx0czsKICAgIH07CgogICAgTGluZS5wcm90b3R5cGUuaGlsaWdodCA9IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgIHZhciBpLCBfaSwgX2osIF9yZWYsIF9yZWYxOwogICAgICBpZiAodGhpcy5wcmV2SGlsaWdodCAhPT0gbnVsbCAmJiB0aGlzLnByZXZIaWxpZ2h0ICE9PSBpbmRleCkgewogICAgICAgIGZvciAoaSA9IF9pID0gMCwgX3JlZiA9IHRoaXMuc2VyaWVzUG9pbnRzLmxlbmd0aCAtIDE7IDAgPD0gX3JlZiA\/IF9pIDw9IF9yZWYgOiBfaSA+PSBfcmVmOyBpID0gMCA8PSBfcmVmID8gKytfaSA6IC0tX2kpIHsKICAgICAgICAgIGlmICh0aGlzLnNlcmllc1BvaW50c1tpXVt0aGlzLnByZXZIaWxpZ2h0XSkgewogICAgICAgICAgICB0aGlzLnNlcmllc1BvaW50c1tpXVt0aGlzLnByZXZIaWxpZ2h0XS5hbmltYXRlKHRoaXMucG9pbnRTaHJpbmtTZXJpZXMoaSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoaW5kZXggIT09IG51bGwgJiYgdGhpcy5wcmV2SGlsaWdodCAhPT0gaW5kZXgpIHsKICAgICAgICBmb3IgKGkgPSBfaiA9IDAsIF9yZWYxID0gdGhpcy5zZXJpZXNQb2ludHMubGVuZ3RoIC0gMTsgMCA8PSBfcmVmMSA\\\",
    "size": "66047"
}