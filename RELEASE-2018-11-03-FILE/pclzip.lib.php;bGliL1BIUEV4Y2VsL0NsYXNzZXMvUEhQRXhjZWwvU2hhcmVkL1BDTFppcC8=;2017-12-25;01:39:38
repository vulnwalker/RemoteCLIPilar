{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Shared\/PCLZip\/pclzip.lib.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "\\\/ICR2X3NpemUgOiBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFKTsKICAgICAgICAgICAgJHZfYnVmZmVyID0gZnJlYWQoJHBfYXJjaGl2ZV90b19hZGQtPnppcF9mZCwgJHZfcmVhZF9zaXplKTsKICAgICAgICAgICAgQGZ3cml0ZSgkdl96aXBfdGVtcF9mZCwgJHZfYnVmZmVyLCAkdl9yZWFkX3NpemUpOwogICAgICAgICAgICAkdl9zaXplIC09ICR2X3JlYWRfc2l6ZTsKICAgICAgICB9CgogICAgICAgIC8vIC0tLS0tIFN0b3JlIHRoZSBvZmZzZXQgb2YgdGhlIGNlbnRyYWwgZGlyCiAgICAgICAgJHZfb2Zmc2V0ID0gQGZ0ZWxsKCR2X3ppcF90ZW1wX2ZkKTsKCiAgICAgICAgLy8gLS0tLS0gQ29weSB0aGUgYmxvY2sgb2YgZmlsZSBoZWFkZXJzIGZyb20gdGhlIG9sZCBhcmNoaXZlCiAgICAgICAgJHZfc2l6ZSA9ICR2X2NlbnRyYWxfZGlyWydzaXplJ107CiAgICAgICAgd2hpbGUgKCR2X3NpemUgIT0gMCkgewogICAgICAgICAgICAkdl9yZWFkX3NpemUgPSAoJHZfc2l6ZSA8IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUgPyAkdl9zaXplIDogUENMWklQX1JFQURfQkxPQ0tfU0laRSk7CiAgICAgICAgICAgICR2X2J1ZmZlciA9IEBmcmVhZCgkdGhpcy0+emlwX2ZkLCAkdl9yZWFkX3NpemUpOwogICAgICAgICAgICBAZndyaXRlKCR2X3ppcF90ZW1wX2ZkLCAkdl9idWZmZXIsICR2X3JlYWRfc2l6ZSk7CiAgICAgICAgICAgICR2X3NpemUgLT0gJHZfcmVhZF9zaXplOwogICAgICAgIH0KCiAgICAgICAgLy8gLS0tLS0gQ29weSB0aGUgYmxvY2sgb2YgZmlsZSBoZWFkZXJzIGZyb20gdGhlIGFyY2hpdmVfdG9fYWRkCiAgICAgICAgJHZfc2l6ZSA9ICR2X2NlbnRyYWxfZGlyX3RvX2FkZFsnc2l6ZSddOwogICAgICAgIHdoaWxlICgkdl9zaXplICE9IDApIHsKICAgICAgICAgICAgJHZfcmVhZF9zaXplID0gKCR2X3NpemUgPCBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFID8gJHZfc2l6ZSA6IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUpOwogICAgICAgICAgICAkdl9idWZmZXIgPSBAZnJlYWQoJHBfYXJjaGl2ZV90b19hZGQtPnppcF9mZCwgJHZfcmVhZF9zaXplKTsKICAgICAgICAgICAgQGZ3cml0ZSgkdl96aXBfdGVtcF9mZCwgJHZfYnVmZmVyLCAkdl9yZWFkX3NpemUpOwogICAgICAgICAgICAkdl9zaXplIC09ICR2X3JlYWRfc2l6ZTsKICAgICAgICB9CgogICAgICAgIC8vIC0tLS0tIE1lcmdlIHRoZSBmaWxlIGNvbW1lbnRzCiAgICAgICAgJHZfY29tbWVudCA9ICR2X2NlbnRyYWxfZGlyWydjb21tZW50J10uJyAnLiR2X2NlbnRyYWxfZGlyX3RvX2FkZFsnY29tbWVudCddOwoKICAgICAgICAvLyAtLS0tLSBDYWxjdWxhdGUgdGhlIHNpemUgb2YgdGhlIChuZXcpIGNlbnRyYWwgaGVhZGVyCiAgICAgICAgJHZfc2l6ZSA9IEBmdGVsbCgkdl96aXBfdGVtcF9mZCktJHZfb2Zmc2V0OwoKICAgICAgICAvLyAtLS0tLSBTd2FwIHRoZSBmaWxlIGRlc2NyaXB0b3IKICAgICAgICAvLyBIZXJlIGlzIGEgdHJpY2sgOiBJIHN3YXAgdGhlIHRlbXBvcmFyeSBmZCB3aXRoIHRoZSB6aXAgZmQsIGluIG9yZGVyIHRvIHVzZQogICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBvbiB0aGUgdGVtcG9yYXJ5IGZpbCBhbmQgbm90IHRoZSByZWFsIGFyY2hpdmUgZmQKICAgICAgICAkdl9zd2FwID0gJHRoaXMtPnppcF9mZDsKICAgICAgICAkdGhpcy0+emlwX2ZkID0gJHZfemlwX3RlbXBfZmQ7CiAgICAgICAgJHZfemlwX3RlbXBfZmQgPSAkdl9zd2FwOwoKICAgICAgICAvLyAtLS0tLSBDcmVhdGUgdGhlIGNlbnRyYWwgZGlyIGZvb3RlcgogICAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZXcml0ZUNlbnRyYWxIZWFkZXIoJHZfY2VudHJhbF9kaXJbJ2VudHJpZXMnXSskdl9jZW50cmFsX2Rpcl90b19hZGRbJ2VudHJpZXMnXSwgJHZfc2l6ZSwgJHZfb2Zmc2V0LCAkdl9jb21tZW50KSkgIT0gMSkgewogICAgICAgICAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsKICAgICAgICAgICAgJHBfYXJjaGl2ZV90b19hZGQtPnByaXZDbG9zZUZkKCk7CiAgICAgICAgICAgIEBmY2xvc2UoJHZfemlwX3RlbXBfZmQpOwogICAgICAgICAgICAkdGhpcy0+emlwX2ZkID0gbnVsbDsKCiAgICAgICAgICAgIC8vIC0tLS0tIFJlc2V0IHRoZSBmaWxlIGxpc3QKICAgICAgICAgICAgdW5zZXQoJHZfaGVhZGVyX2xpc3QpOwoKICAgICAgICAgICAgLy8gLS0tLS0gUmV0dXJuCiAgICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQ7CiAgICAgICAgfQoKICAgICAgICAvLyAtLS0tLSBTd2FwIGJhY2sgdGhlIGZpbGUgZGVzY3JpcHRvcgogICAgICAgICR2X3N3YXAgPSAkdGhpcy0+emlwX2ZkOwogICAgICAgICR0aGlzLT56aXBfZmQgPSAkdl96aXBfdGVtcF9mZDsKICAgICAgICAkdl96aXBfdGVtcF9mZCA9ICR2X3N3YXA7CgogICAgICAgIC8vIC0tLS0tIENsb3NlCiAgICAgICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7CiAgICAgICAgJHBfYXJjaGl2ZV90b19hZGQtPnByaXZDbG9zZUZkKCk7CgogICAgICAgIC8vIC0tLS0tIENsb3NlIHRoZSB0ZW1wb3JhcnkgZmlsZQogICAgICAgIEBmY2xvc2UoJHZfemlwX3RlbXBfZmQpOwoKICAgICAgICAvLyAtLS0tLSBEZWxldGUgdGhlIHppcCBmaWxlCiAgICAgICAgLy8gVEJDIDogSSBzaG91bGQgdGVzdCB0aGUgcmVzdWx0IC4uLgogICAgICAgIEB1bmxpbmsoJHRoaXMtPnppcG5hbWUpOwoKICAgICAgICAvLyAtLS0tLSBSZW5hbWUgdGhlIHRlbXBvcmFyeSBmaWxlCiAgICAgICAgLy8gVEJDIDogSSBzaG91bGQgdGVzdCB0aGUgcmVzdWx0IC4uLgogICAgICAgIC8vQHJlbmFtZSgkdl96aXBfdGVtcF9uYW1lLCAkdGhpcy0+emlwbmFtZSk7CiAgICAgICAgUGNsWmlwVXRpbFJlbmFtZSgkdl96aXBfdGVtcF9uYW1lLCAkdGhpcy0+emlwbmFtZSk7CgogICAgICAgIC8vIC0tLS0tIFJldHVybgogICAgICAgIHJldHVybiAkdl9yZXN1bHQ7CiAgICB9CiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBGdW5jdGlvbiA6IHByaXZEdXBsaWNhdGUoKQogICAgLy8gRGVzY3JpcHRpb24gOgogICAgLy8gUGFyYW1ldGVycyA6CiAgICAvLyBSZXR1cm4gVmFsdWVzIDoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBwdWJsaWMgZnVuY3Rpb24gcHJpdkR1cGxpY2F0ZSgkcF9hcmNoaXZlX2ZpbGVuYW1lKQogICAgewogICAgICAgICR2X3Jlc3VsdD0xOwoKICAgICAgICAvLyAtLS0tLSBMb29rIGlmIHRoZSAkcF9hcmNoaXZlX2ZpbGVuYW1lIGV4aXN0cwogICAgICAgIGlmICghaXNfZmlsZSgkcF9hcmNoaXZlX2ZpbGVuYW1lKSkgewogICAgICAgICAgICAvLyAtLS0tLSBOb3RoaW5nIHRvIGR1cGxpY2F0ZSwgc28gZHVwbGljYXRlIGlzIGEgc3VjY2Vzcy4KICAgICAgICAgICAgJHZfcmVzdWx0ID0gMTsKCiAgICAgICAgICAgIC8vIC0tLS0tIFJldHVybgogICAgICAgICAgICByZXR1cm4gJHZfcmVzdWx0OwogICAgICAgIH0KCiAgICAgICAgLy8gLS0tLS0gT3BlbiB0aGUgemlwIGZpbGUKICAgICAgICBpZiAoKCR2X3Jlc3VsdD0kdGhpcy0+cHJpdk9wZW5GZCgnd2InKSkgIT0gMSkgewogICAgICAgICAgICAvLyAtLS0tLSBSZXR1cm4KICAgICAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsKICAgICAgICB9CgogICAgICAgIC8vIC0tLS0tIE9wZW4gdGhlIHRlbXBvcmFyeSBmaWxlIGluIHdyaXRlIG1vZGUKICAgICAgICBpZiAoKCR2X3ppcF90ZW1wX2ZkID0gQGZvcGVuKCRwX2FyY2hpdmVfZmlsZW5hbWUsICdyYicpKSA9PSAwKSB7CiAgICAgICAgICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOwoKICAgICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9SRUFEX09QRU5fRkFJTCwgJ1VuYWJsZSB0byBvcGVuIGFyY2hpdmUgZmlsZSBcJycuJHBfYXJjaGl2ZV9maWxlbmFtZS4nXCcgaW4gYmluYXJ5IHdyaXRlIG1vZGUnKTsKCiAgICAgICAgICAgIC8vIC0tLS0tIFJldHVybgogICAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsKICAgICAgICB9CgogICAgICAgIC8vIC0tLS0tIENvcHkgdGhlIGZpbGVzIGZyb20gdGhlIGFyY2hpdmUgdG8gdGhlIHRlbXBvcmFyeSBmaWxlCiAgICAgICAgLy8gVEJDIDogSGVyZSBJIHNob3VsZCBiZXR0ZXIgYXBwZW5kIHRoZSBmaWxlIGFuZCBnbyBiYWNrIHRvIGVyYXNlIHRoZSBjZW50cmFsIGRpcgogICAgICAgICR2X3NpemUgPSBmaWxlc2l6ZSgkcF9hcmNoaXZlX2ZpbGVuYW1lKTsKICAgICAgICB3aGlsZSAoJHZfc2l6ZSAhPSAwKSB7CiAgICAgICAgICAgICR2X3JlYWRfc2l6ZSA9ICgkdl9zaXplIDwgUENMWklQX1JFQURfQkxPQ0tfU0laRSA\/ICR2X3NpemUgOiBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFKTsKICAgICAgICAgICAgJHZfYnVmZmVyID0gZnJlYWQoJHZfemlwX3RlbXBfZmQsICR2X3JlYWRfc2l6ZSk7CiAgICAgICAgICAgIEBmd3JpdGUoJHRoaXMtPnppcF9mZCwgJHZfYnVmZmVyLCAkdl9yZWFkX3NpemUpOwogICAgICAgICAgICAkdl9zaXplIC09ICR2X3JlYWRfc2l6ZTsKICAgICAgICB9CgogICAgICAgIC8vIC0tLS0tIENsb3NlCiAgICAgICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7CgogICAgICAgIC8vIC0tLS0tIENsb3NlIHRoZSB0ZW1wb3JhcnkgZmlsZQogICAgICAgIEBmY2xvc2UoJHZfemlwX3RlbXBfZmQpOwoKICAgICAgICAvLyAtLS0tLSBSZXR1cm4KICAgICAgICByZXR1cm4gJHZfcmVzdWx0OwogICAgfQogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLy8gRnVuY3Rpb24gOiBwcml2RXJyb3JMb2coKQogICAgLy8gRGVzY3JpcHRpb24gOgogICAgLy8gUGFyYW1ldGVycyA6CiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgcHVibGljIGZ1bmN0aW9uIHByaXZFcnJvckxvZygkcF9lcnJvcl9jb2RlID0gMCwgJHBfZXJyb3Jfc3RyaW5nID0gJycpCiAgICB7CiAgICAgICAgaWYgKFBDTFpJUF9FUlJPUl9FWFRFUk5BTCA9PSAxKSB7CiAgICAgICAgICAgIFBjbEVycm9yKCRwX2Vycm9yX2NvZGUsICRwX2Vycm9yX3N0cmluZyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHRoaXMtPmVycm9yX2NvZGUgPSAkcF9lcnJvcl9jb2RlOwogICAgICAgICAgICAkdGhpcy0+ZXJyb3Jfc3RyaW5nID0gJHBfZXJyb3Jfc3RyaW5nOwogICAgICAgIH0KICAgIH0KICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC8vIEZ1bmN0aW9uIDogcHJpdkVycm9yUmVzZXQoKQogICAgLy8gRGVzY3JpcHRpb24gOgogICAgLy8gUGFyYW1ldGVycyA6CiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgcHVibGljIGZ1bmN0aW9uIHByaXZFcnJvclJlc2V0KCkKICAgIHsKICAgICAgICBpZiAoUENMWklQX0VSUk9SX0VYVEVSTkFMID09IDEpIHsKICAgICAgICAgICAgUGNsRXJyb3JSZXNldCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICR0aGlzLT5lcnJvcl9jb2RlID0gMDsKICAgICAgICAgICAgJHRoaXMtPmVycm9yX3N0cmluZyA9ICcnOwogICAgICAgIH0KICAgIH0KICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC8vIEZ1bmN0aW9uIDogcHJpdkRpc2FibGVNYWdpY1F1b3RlcygpCiAgICAvLyBEZXNjcmlwdGlvbiA6CiAgICAvLyBQYXJhbWV0ZXJzIDoKICAgIC8vIFJldHVybiBWYWx1ZXMgOgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIHB1YmxpYyBmdW5jdGlvbiBwcml2RGlzYWJsZU1hZ2ljUXVvdGVzKCkKICAgIHsKICAgICAgICAkdl9yZXN1bHQ9MTsKCiAgICAgICAgLy8gLS0tLS0gTG9vayBpZiBmdW5jdGlvbiBleGlzdHMKICAgICAgICBpZiAoKCFmdW5jdGlvbl9leGlzdHMoImdldF9tYWdpY19xdW90ZXNfcnVudGltZSIpKSB8fCAoIWZ1bmN0aW9uX2V4aXN0cygic2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lIikpKSB7CiAgICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQ7CiAgICAgICAgfQoKICAgICAgICAvLyAtLS0tLSBMb29rIGlmIGFscmVhZHkgZG9uZQogICAgICAgIGlmICgkdGhpcy0+bWFnaWNfcXVvdGVzX3N0YXR1cyAhPSAtMSkgewogICAgICAgICAgICByZXR1cm4gJHZfcmVzdWx0OwogICAgICAgIH0KCiAgICAgICAgLy8gLS0tLS0gR2V0IGFuZCBtZW1vcml6ZSB0aGUgbWFnaWNfcXVvdGUgdmFsdWUKICAgICAgICAkdGhpcy0+bWFnaWNfcXVvdGVzX3N0YXR1cyA9IEBnZXRfbWFnaWNfcXVvdGVzX3J1bnRpbWUoKTsKCiAgICAgICAgLy8gLS0tLS0gRGlzYWJsZSBtYWdpY19xdW90ZXMKICAgICAgICBpZiAoJHRoaXMtPm1hZ2ljX3F1b3Rlc19zdGF0dXMgPT0gMSkgewogICAgICAgICAgICBAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApOwogICAgICAgIH0KCiAgICAgICAgLy8gLS0tLS0gUmV0dXJuCiAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsKICAgIH0KICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC8vIEZ1bmN0aW9uIDogcHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKQogICAgLy8gRGVzY3JpcHRpb24gOgogICAgLy8gUGFyYW1ldGVycyA6CiAgICAvLyBSZXR1cm4gVmFsdWVzIDoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBwdWJsaWMgZnVuY3Rpb24gcHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKQogICAgewogICAgICAgICR2X3Jlc3VsdD0xOwoKICAgICAgICAvLyAtLS0tLSBMb29rIGlmIGZ1bmN0aW9uIGV4aXN0cwogICAgICAgIGlmICgoIWZ1bmN0aW9uX2V4aXN0cygiZ2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lIikpIHx8ICghZnVuY3Rpb25fZXhpc3RzKCJzZXRfbWFnaWNfcXVvdGVzX3J1bnRpbWUiKSkpIHsKICAgICAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsKICAgICAgICB9CgogICAgICAgIC8vIC0tLS0tIExvb2sgaWYgc29tZXRoaW5nIHRvIGRvCiAgICAgICAgaWYgKCR0aGlzLT5tYWdpY19xdW90ZXNfc3RhdHVzICE9IC0xKSB7CiAgICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQ7CiAgICAgICAgfQoKICAgICAgICAvLyAtLS0tLSBTd2FwIGJhY2sgbWFnaWNfcXVvdGVzCiAgICAgICAgaWYgKCR0aGlzLT5tYWdpY19xdW90ZXNfc3RhdHVzID09IDEpIHsKICAgICAgICAgICAgQHNldF9tYWdpY19xdW90ZXNfcnVudGltZSgkdGhpcy0+bWFnaWNfcXVvdGVzX3N0YXR1cyk7CiAgICAgICAgfQoKICAgICAgICAvLyAtLS0tLSBSZXR1cm4KICAgICAgICByZXR1cm4gJHZfcmVzdWx0OwogICAgfQogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KfQovLyBFbmQgb2YgY2xhc3MKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIEZ1bmN0aW9uIDogUGNsWmlwVXRpbFBhdGhSZWR1Y3Rpb24oKQovLyBEZXNjcmlwdGlvbiA6Ci8vIFBhcmFtZXRlcnMgOgovLyBSZXR1cm4gVmFsdWVzIDoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KZnVuY3Rpb24gUGNsWmlwVXRpbFBhdGhSZWR1Y3Rpb24oJHBfZGlyKQp7CiAgICAkdl9yZXN1bHQgPSAiIjsKCiAgICAvLyAtLS0tLSBMb29rIGZvciBub3QgZW1wdHkgcGF0aAogICAgaWYgKCRwX2RpciAhPSAiIikgewogICAgICAgIC8vIC0tLS0tIEV4cGxvZGUgcGF0aCBieSBkaXJlY3RvcnkgbmFtZXMKICAgICAgICAkdl9saXN0ID0gZXhwbG9kZSgiLyIsICRwX2Rpcik7CgogICAgICAgIC8vIC0tLS0tIFN0dWR5IGRpcmVjdG9yaWVzIGZyb20gbGFzdCB0byBmaXJzdAogICAgICAgICR2X3NraXAgPSAwOwogICAgICAgIGZvciAoJGk9c2l6ZW9mKCR2X2xpc3QpLTE7ICRpPj0wOyAkaS0tKSB7CiAgICAgICAgICAgIC8vIC0tLS0tIExvb2sgZm9yIGN1cnJlbnQgcGF0aAogICAgICAgICAgICBpZiAoJHZfbGlzdFskaV0gPT0gIi4iKSB7CiAgICAgICAgICAgICAgICAvLyAtLS0tLSBJZ25vcmUgdGhpcyBkaXJlY3RvcnkKICAgICAgICAgICAgICAgIC8vIFNob3VsZCBiZSB0aGUgZmlyc3QgJGk9MCwgYnV0IG5vIGNoZWNrIGlzIGRvbmUKICAgICAgICAgICAgfSBlbHNlaWYgKCR2X2xpc3RbJGldID09ICIuLiIpIHsKICAgICAgICAgICAgICAgICR2X3NraXArKzsKICAgICAgICAgICAgfSBlbHNlaWYgKCR2X2xpc3RbJGldID09ICIiKSB7CiAgICAgICAgICAgICAgICAvLyAtLS0tLSBGaXJzdCAnLycgaS5lLiByb290IHNsYXNoCiAgICAgICAgICAgICAgICBpZiAoJGkgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICR2X3Jlc3VsdCA9ICIvIi4kdl9yZXN1bHQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKCR2X3NraXAgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0tLS0tIEl0IGlzIGFuIGludmFsaWQgcGF0aCwgc28gdGhlIHBhdGggaXMgbm90IG1vZGlmaWVkCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRCQwogICAgICAgICAgICAgICAgICAgICAgICAkdl9yZXN1bHQgPSAkcF9kaXI7CiAgICAgICAgICAgICAgICAgICAgICAgICR2X3NraXAgPSAwOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZWlmICgkaSA9PSAoc2l6ZW9mKCR2X2xpc3QpLTEpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gLS0tLS0gTGFzdCAnLycgaS5lLiBpbmRpY2F0ZXMgYSBkaXJlY3RvcnkKICAgICAgICAgICAgICAgICAgICAkdl9yZXN1bHQgPSAkdl9saXN0WyRpXTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gLS0tLS0gRG91YmxlICcvJyBpbnNpZGUgdGhlIHBhdGgKICAgICAgICAgICAgICAgICAgICAvLyAtLS0tLSBJZ25vcmUgb25seSB0aGUgZG91YmxlICcvLycgaW4gcGF0aCwKICAgICAgICAgICAgICAgICAgICAvLyBidXQgbm90IHRoZSBmaXJzdCBhbmQgbGFzdCAnLycKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIC0tLS0tIExvb2sgZm9yIGl0ZW0gdG8gc2tpcAogICAgICAgICAgICAgICAgaWYgKCR2X3NraXAgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgJHZfc2tpcC0tOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkdl9yZXN1bHQgPSAkdl9saXN0WyRpXS4oJGkhPShzaXplb2YoJHZfbGlzdCktMSk\/Ii8iLiR2X3Jlc3VsdDoiIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIC0tLS0tIExvb2sgZm9yIHNraXAKICAgICAgICBpZiAoJHZfc2tpcCA+IDApIHsKICAgICAgICAgICAgd2hpbGUgKCR2X3NraXAgPiAwKSB7CiAgICAgICAgICAgICAgICAkdl9yZXN1bHQgPSAnLi4vJy4kdl9yZXN1bHQ7CiAgICAgICAgICAgICAgICAkdl9za2lwLS07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy8gLS0tLS0gUmV0dXJuCiAgICByZXR1cm4gJHZfcmVzdWx0Owp9Ci8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyBGdW5jdGlvbiA6IFBjbFppcFV0aWxQYXRoSW5jbHVzaW9uKCkKLy8gRGVzY3JpcHRpb24gOgovLyAgICAgVGhpcyBmdW5jdGlvbiBpbmRpY2F0ZXMgaWYgdGhlIHBhdGggJHBfcGF0aCBpcyB1bmRlciB0aGUgJHBfZGlyIHRyZWUuIE9yLAovLyAgICAgc2FpZCBpbiBhbiBvdGhlciB3YXksIGlmIHRoZSBmaWxlIG9yIHN1Yi1kaXIgJHBfcGF0aCBpcyBpbnNpZGUgdGhlIGRpcgovLyAgICAgJHBfZGlyLgovLyAgICAgVGhlIGZ1bmN0aW9uIGluZGljYXRlcyBhbHNvIGlmIHRoZSBwYXRoIGlzIGV4YWN0bHkgdGhlIHNhbWUgYXMgdGhlIGRpci4KLy8gICAgIFRoaXMgZnVuY3Rpb24gc3VwcG9ydHMgcGF0aCB3aXRoIGR1cGxpY2F0ZWQgJy8nIGxpa2UgJy8vJywgYnV0IGRvZXMgbm90Ci8vICAgICBzdXBwb3J0ICcuJyBvciAnLi4nIHN0YXRlbWVudHMuCi8vIFBhcmFtZXRlcnMgOgovLyBSZXR1cm4gVmFsdWVzIDoKLy8gICAgIDAgaWYgJHBfcGF0aCBpcyBub3QgaW5zaWRlIGRpcmVjdG9yeSAkcF9kaXIKLy8gICAgIDEgaWYgJHBfcGF0aCBpcyBpbnNpZGUgZGlyZWN0b3J5ICRwX2RpcgovLyAgICAgMiBpZiAkcF9wYXRoIGlzIGV4YWN0bHkgdGhlIHNhbWUgYXMgJHBfZGlyCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCmZ1bmN0aW9uIFBjbFppcFV0aWxQYXRoSW5jbHVzaW9uKCRwX2RpciwgJHBfcGF0aCkKewogICAgJHZfcmVzdWx0ID0gMTsKCiAgICAvLyAtLS0tLSBMb29rIGZvciBwYXRoIGJlZ2lubmluZyBieSAuLwogICAgaWYgKCgkcF9kaXIgPT0gJy4nKSB8fCAoKHN0cmxlbigkcF9kaXIpID49MikgJiYgKHN1YnN0cigkcF9kaXIsIDAsIDIpID09ICcuLycpKSkgewogICAgICAgICRwX2RpciA9IFBjbFppcFV0aWxUcmFuc2xhdGVXaW5QYXRoKGdldGN3ZCgpLCBmYWxzZSkuJy8nLnN1YnN0cigkcF9kaXIsIDEpOwogICAgfQogICAgaWYgKCgkcF9wYXRoID09ICcuJykgfHwgKChzdHJsZW4oJHBfcGF0aCkgPj0yKSAmJiAoc3Vic3RyKCRwX3BhdGgsIDAsIDIpID09ICcuLycpKSkgewogICAgICAgICRwX3BhdGggPSBQY2xaaXBVdGlsVHJhbnNsYXRlV2luUGF0aChnZXRjd2QoKSwgZmFsc2UpLicvJy5zdWJzdHIoJHBfcGF0aCwgMSk7CiAgICB9CgogICAgLy8gLS0tLS0gRXhwbG9kZSBkaXIgYW5kIHBhdGggYnkgZGlyZWN0b3J5IHNlcGFyYXRvcgogICAgJHZfbGlzdF9kaXIgPSBleHBsb2RlKCIvIiwgJHBfZGlyKTsKICAgICR2X2xpc3RfZGlyX3NpemUgPSBzaXplb2YoJHZfbGlzdF9kaXIpOwogICAgJHZfbGlzdF9wYXRoID0gZXhwbG9kZSgiLyIsICRwX3BhdGgpOwogICAgJHZfbGlzdF9wYXRoX3NpemUgPSBzaXplb2YoJHZfbGlzdF9wYXRoKTsKCiAgICAvLyAtLS0tLSBTdHVkeSBkaXJlY3RvcmllcyBwYXRocwogICAgJGkgPSAwOwogICAgJGogPSAwOwogICAgd2hpbGUgKCgkaSA8ICR2X2xpc3RfZGlyX3NpemUpICYmICgkaiA8ICR2X2xpc3RfcGF0aF9zaXplKSAmJiAoJHZfcmVzdWx0KSkgewogICAgICAgIC8vIC0tLS0tIExvb2sgZm9yIGVtcHR5IGRpciAocGF0aCByZWR1Y3Rpb24pCiAgICAgICAgaWYgKCR2X2xpc3RfZGlyWyRpXSA9PSAnJykgewogICAgICAgICAgICAkaSsrOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaWYgKCR2X2xpc3RfcGF0aFskal0gPT0gJycpIHsKICAgICAgICAgICAgJGorKzsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyAtLS0tLSBDb21wYXJlIHRoZSBpdGVtcwogICAgICAgIGlmICgoJHZfbGlzdF9kaXJbJGldICE9ICR2X2xpc3RfcGF0aFskal0pICYmICgkdl9saXN0X2RpclskaV0gIT0gJycpICYmICgkdl9saXN0X3BhdGhbJGpdICE9ICcnKSkgewogICAgICAgICAgICAkdl9yZXN1bHQgPSAwOwogICAgICAgIH0KCiAgICAgICAgLy8gLS0tLS0gTmV4dCBpdGVtcwogICAgICAgICRpKys7CiAgICAgICAgJGorKzsKICAgIH0KCiAgICAvLyAtLS0tLSBMb29rIGlmIGV2ZXJ5dGhpbmcgc2VlbXMgdG8gYmUgdGhlIHNhbWUKICAgIGlmICgkdl9yZXN1bHQpIHsKICAgICAgICAvLyAtLS0tLSBTa2lwIGFsbCB0aGUgZW1wdHkgaXRlbXMKICAgICAgICB3aGlsZSAoKCRqIDwgJHZfbGlzdF9wYXRoX3NpemUpICYmICgkdl9saXN0X3BhdGhbJGpdID09ICcnKSkgewogICAgICAgICAgICAkaisrOwogICAgICAgIH0KICAgICAgICB3aGlsZSAoKCRpIDwgJHZfbGlzdF9kaXJfc2l6ZSkgJiYgKCR2X2xpc3RfZGlyWyRpXSA9PSAnJykpIHsKICAgICAgICAgICAgJGkrKzsKICAgICAgICB9CgogICAgICAgIGlmICgoJGkgPj0gJHZfbGlzdF9kaXJfc2l6ZSkgJiYgKCRqID49ICR2X2xpc3RfcGF0aF9zaXplKSkgewogICAgICAgICAgICAvLyAtLS0tLSBUaGVyZSBhcmUgZXhhY3RseSB0aGUgc2FtZQogICAgICAgICAgICAkdl9yZXN1bHQgPSAyOwogICAgICAgIH0gZWxzZWlmICgkaSA8ICR2X2xpc3RfZGlyX3NpemUpIHsKICAgICAgICAgICAgLy8gLS0tLS0gVGhlIHBhdGggaXMgc2hvcnRlciB0aGFuIHRoZSBkaXIKICAgICAgICAgICAgJHZfcmVzdWx0ID0gMDsKICAgICAgICB9CiAgICB9CgogICAgLy8gLS0tLS0gUmV0dXJuCiAgICByZXR1cm4gJHZfcmVzdWx0Owp9Ci8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyBGdW5jdGlvbiA6IFBjbFppcFV0aWxDb3B5QmxvY2soKQovLyBEZXNjcmlwdGlvbiA6Ci8vIFBhcmFtZXRlcnMgOgovLyAgICAgJHBfbW9kZSA6IHJlYWQvd3JpdGUgY29tcHJlc3Npb24gbW9kZQovLyAgICAgICAgICAgICAgICAgICAgICAgICAwIDogc3JjICYgZGVzdCBub3JtYWwKLy8gICAgICAgICAgICAgICAgICAgICAgICAgMSA6IHNyYyBnemlwLCBkZXN0IG5vcm1hbAovLyAgICAgICAgICAgICAgICAgICAgICAgICAyIDogc3JjIG5vcm1hbCwgZGVzdCBnemlwCi8vICAgICAgICAgICAgICAgICAgICAgICAgIDMgOiBzcmMgJiBkZXN0IGd6aXAKLy8gUmV0dXJuIFZhbHVlcyA6Ci8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCmZ1bmN0aW9uIFBjbFppcFV0aWxDb3B5QmxvY2soJHBfc3JjLCAkcF9kZXN0LCAkcF9zaXplLCAkcF9tb2RlID0gMCkKewogICAgJHZfcmVzdWx0ID0gMTsKCiAgICBpZiAoJHBfbW9kZT09MCkgewogICAgICAgIHdoaWxlICgkcF9zaXplICE9IDApIHsKICAgICAgICAgICAgJHZfcmVhZF9zaXplID0gKCRwX3NpemUgPCBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFID8gJHBfc2l6ZSA6IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUpOwogICAgICAgICAgICAkdl9idWZmZXIgPSBAZnJlYWQoJHBfc3JjLCAkdl9yZWFkX3NpemUpOwogICAgICAgICAgICBAZndyaXRlKCRwX2Rlc3QsICR2X2J1ZmZlciwgJHZfcmVhZF9zaXplKTsKICAgICAgICAgICAgJHBfc2l6ZSAtPSAkdl9yZWFkX3NpemU7CiAgICAgICAgfQogICAgfSBlbHNlaWYgKCRwX21vZGU9PTEpIHsKICAgICAgICB3aGlsZSAoJHBfc2l6ZSAhPSAwKSB7CiAgICAgICAgICAgICR2X3JlYWRfc2l6ZSA9ICgkcF9zaXplIDwgUENMWklQX1JFQURfQkxPQ0tfU0laRSA\/ICRwX3NpemUgOiBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFKTsKICAgICAgICAgICAgJHZfYnVmZmVyID0gQGd6cmVhZCgkcF9zcmMsICR2X3JlYWRfc2l6ZSk7CiAgICAgICAgICAgIEBmd3JpdGUoJHBfZGVzdCwgJHZfYnVmZmVyLCAkdl9yZWFkX3NpemUpOwogICAgICAgICAgICAkcF9zaXplIC09ICR2X3JlYWRfc2l6ZTsKICAgICAgICB9CiAgICB9IGVsc2VpZiAoJHBfbW9kZT09MikgewogICAgICAgIHdoaWxlICgkcF9zaXplICE9IDApIHsKICAgICAgICAgICAgJHZfcmVhZF9zaXplID0gKCRwX3NpemUgPCBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFID8gJHBfc2l6ZSA6IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUpOwogICAgICAgICAgICAkdl9idWZmZXIgPSBAZnJlYWQoJHBfc3JjLCAkdl9yZWFkX3NpemUpOwogICAgICAgICAgICBAZ3p3cml0ZSgkcF9kZXN0LCAkdl9idWZmZXIsICR2X3JlYWRfc2l6ZSk7CiAgICAgICAgICAgICRwX3NpemUgLT0gJHZfcmVhZF9zaXplOwogICAgICAgIH0KICAgIH0gZWxzZWlmICgkcF9tb2RlPT0zKSB7CiAgICAgICAgd2hpbGUgKCRwX3NpemUgIT0gMCkgewogICAgICAgICAgICAkdl9yZWFkX3NpemUgPSAoJHBfc2l6ZSA8IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUgPyAkcF9zaXplIDogUENMWklQX1JFQURfQkxPQ0tfU0laRSk7CiAgICAgICAgICAgICR2X2J1ZmZlciA9IEBnenJlYWQoJHBfc3JjLCAkdl9yZWFkX3NpemUpOwogICAgICAgICAgICBAZ3p3cml0ZSgkcF9kZXN0LCAkdl9idWZmZXIsICR2X3JlYWRfc2l6ZSk7CiAgICAgICAgICAgICRwX3NpemUgLT0gJHZfcmVhZF9zaXplOwogICAgICAgIH0KICAgIH0KCiAgICAvLyAtLS0tLSBSZXR1cm4KICAgIHJldHVybiAkdl9yZXN1bHQ7Cn0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIEZ1bmN0aW9uIDogUGNsWmlwVXRpbFJlbmFtZSgpCi8vIERlc2NyaXB0aW9uIDoKLy8gICAgIFRoaXMgZnVuY3Rpb24gdHJpZXMgdG8gZG8gYSBzaW1wbGUgcmVuYW1lKCkgZnVuY3Rpb24uIElmIGl0IGZhaWxzLCBpdAovLyAgICAgdHJpZXMgdG8gY29weSB0aGUgJHBfc3JjIGZpbGUgaW4gYSBuZXcgJHBfZGVzdCBmaWxlIGFuZCB0aGVuIHVubGluayB0aGUKLy8gICAgIGZpcnN0IG9uZS4KLy8gUGFyYW1ldGVycyA6Ci8vICAgICAkcF9zcmMgOiBPbGQgZmlsZW5hbWUKLy8gICAgICRwX2Rlc3QgOiBOZXcgZmlsZW5hbWUKLy8gUmV0dXJuIFZhbHVlcyA6Ci8vICAgICAxIG9uIHN1Y2Nlc3MsIDAgb24gZmFpbHVyZS4KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KZnVuY3Rpb24gUGNsWmlwVXRpbFJlbmFtZSgkcF9zcmMsICRwX2Rlc3QpCnsKICAgICR2X3Jlc3VsdCA9IDE7CgogICAgLy8gLS0tLS0gVHJ5IHRvIHJlbmFtZSB0aGUgZmlsZXMKICAgIGlmICghQHJlbmFtZSgkcF9zcmMsICRwX2Rlc3QpKSB7CiAgICAgICAgLy8gLS0tLS0gVHJ5IHRvIGNvcHkgJiB1bmxpbmsgdGhlIHNyYwogICAgICAgIGlmICghQGNvcHkoJHBfc3JjLCAkcF9kZXN0KSkgewogICAgICAgICAgICAkdl9yZXN1bHQgPSAwOwogICAgICAgIH0gZWxzZWlmICghQHVubGluaygkcF9zcmMpKSB7CiAgICAgICAgICAgICR2X3Jlc3VsdCA9IDA7CiAgICAgICAgfQogICAgfQoKICAgIC8vIC0tLS0tIFJldHVybgogICAgcmV0dXJuICR2X3Jlc3VsdDsKfQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gRnVuY3Rpb24gOiBQY2xaaXBVdGlsT3B0aW9uVGV4dCgpCi8vIERlc2NyaXB0aW9uIDoKLy8gICAgIFRyYW5zbGF0ZSBvcHRpb24gdmFsdWUgaW4gdGV4dC4gTWFpbmx5IGZvciBkZWJ1ZyBwdXJwb3NlLgovLyBQYXJhbWV0ZXJzIDoKLy8gICAgICRwX29wdGlvbiA6IHRoZSBvcHRpb24gdmFsdWUuCi8vIFJldHVybiBWYWx1ZXMgOgovLyAgICAgVGhlIG9wdGlvbiB0ZXh0IHZhbHVlLgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpmdW5jdGlvbiBQY2xaaXBVdGlsT3B0aW9uVGV4dCgkcF9vcHRpb24pCnsKICAgICR2X2xpc3QgPSBnZXRfZGVmaW5lZF9jb25zdGFudHMoKTsKICAgIGZvciAocmVzZXQoJHZfbGlzdCk7ICR2X2tleSA9IGtleSgkdl9saXN0KTsgbmV4dCgkdl9saXN0KSkgewogICAgICAgICR2X3ByZWZpeCA9IHN1YnN0cigkdl9rZXksIDAsIDEwKTsKICAgICAgICBpZiAoKCgkdl9wcmVmaXggPT0gJ1BDTFpJUF9PUFQnKSB8fCAoJHZfcHJlZml4ID09ICdQQ0xaSVBfQ0JfJykgfHwgKCR2X3ByZWZpeCA9PSAnUENMWklQX0FUVCcpKSAmJiAoJHZfbGlzdFskdl9rZXldID09ICRwX29wdGlvbikpIHsKICAgICAgICAgICAgcmV0dXJuICR2X2tleTsKICAgICAgICB9CiAgICB9CgogICAgJHZfcmVzdWx0ID0gJ1Vua25vd24nOwoKICAgIHJldHVybiAkdl9yZXN1bHQ7Cn0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIEZ1bmN0aW9uIDogUGNsWmlwVXRpbFRyYW5zbGF0ZVdpblBhdGgoKQovLyBEZXNjcmlwdGlvbiA6Ci8vICAgICBUcmFuc2xhdGUgd2luZG93cyBwYXRoIGJ5IHJlcGxhY2luZyAnXCcgYnkgJy8nIGFuZCBvcHRpb25hbGx5IHJlbW92aW5nCi8vICAgICBkcml2ZSBsZXR0ZXIuCi8vIFBhcmFtZXRlcnMgOgovLyAgICAgJHBfcGF0aCA6IHBhdGggdG8gdHJhbnNsYXRlLgovLyAgICAgJHBfcmVtb3ZlX2Rpc2tfbGV0dGVyIDogdHJ1ZSB8IGZhbHNlCi8vIFJldHVybiBWYWx1ZXMgOgovLyAgICAgVGhlIHBhdGggdHJhbnNsYXRlZC4KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KZnVuY3Rpb24gUGNsWmlwVXRpbFRyYW5zbGF0ZVdpblBhdGgoJHBfcGF0aCwgJHBfcmVtb3ZlX2Rpc2tfbGV0dGVyID0gdHJ1ZSkKewogICAgaWYgKHN0cmlzdHIocGhwX3VuYW1lKCksICd3aW5kb3dzJykpIHsKICAgICAgICAvLyAtLS0tLSBMb29rIGZvciBwb3RlbnRpYWwgZGlzayBsZXR0ZXIKICAgICAgICBpZiAoKCRwX3JlbW92ZV9kaXNrX2xldHRlcikgJiYgKCgkdl9wb3NpdGlvbiA9IHN0cnBvcygkcF9wYXRoLCAnOicpKSAhPSBmYWxzZSkpIHsKICAgICAgICAgICAgJHBfcGF0aCA9IHN1YnN0cigkcF9wYXRoLCAkdl9wb3NpdGlvbisxKTsKICAgICAgICB9CiAgICAgICAgLy8gLS0tLS0gQ2hhbmdlIHBvdGVudGlhbCB3aW5kb3dzIGRpcmVjdG9yeSBzZXBhcmF0b3IKICAgICAgICBpZiAoKHN0cnBvcygkcF9wYXRoLCAnXFwnKSA+IDApIHx8IChzdWJzdHIoJHBfcGF0aCwgMCwgMSkgPT0gJ1xcJykpIHsKICAgICAgICAgICAgJHBfcGF0aCA9IHN0cnRyKCRwX3BhdGgsICdcXCcsICcvJyk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuICRwX3BhdGg7Cn0K",
    "size": "214239"
}