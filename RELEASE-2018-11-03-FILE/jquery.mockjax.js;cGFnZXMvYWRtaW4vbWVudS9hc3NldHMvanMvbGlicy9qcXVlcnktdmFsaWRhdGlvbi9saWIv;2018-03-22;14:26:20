{
    "namaFile": "pages\/admin\/menu\/assets\/js\/libs\/jquery-validation\/lib\/jquery.mockjax.js",
    "lastUpdate": "2018-03-22+14:26:20.05",
    "contentFile": "LyohCiAqIE1vY2tKYXggLSBqUXVlcnkgUGx1Z2luIHRvIE1vY2sgQWpheCByZXF1ZXN0cwogKgogKiBWZXJzaW9uOiAgMS41LjMKICogUmVsZWFzZWQ6CiAqIEhvbWU6ICAgaHR0cDovL2dpdGh1Yi5jb20vYXBwZW5kdG8vanF1ZXJ5LW1vY2tqYXgKICogQXV0aG9yOiAgIEpvbmF0aGFuIFNoYXJwIChodHRwOi8vamRzaGFycC5jb20pCiAqIExpY2Vuc2U6ICBNSVQsR1BMCiAqCiAqIENvcHlyaWdodCAoYykgMjAxMSBhcHBlbmRUbyBMTEMuCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgbGljZW5zZXMuCiAqIGh0dHA6Ly9hcHBlbmR0by5jb20vb3Blbi1zb3VyY2UtbGljZW5zZXMKICovCihmdW5jdGlvbigkKSB7Cgl2YXIgX2FqYXggPSAkLmFqYXgsCgkJbW9ja0hhbmRsZXJzID0gW10sCgkJbW9ja2VkQWpheENhbGxzID0gW10sCgkJQ0FMTEJBQ0tfUkVHRVggPSAvPVw\\/ICImIiA6ICI\/IikgKwoJCQkJCShyZXF1ZXN0U2V0dGluZ3MuanNvbnAgfHwgImNhbGxiYWNrIikgKyAiPT8iOwoJCQl9CgkJfSBlbHNlIGlmICggIXJlcXVlc3RTZXR0aW5ncy5kYXRhIHx8ICFDQUxMQkFDS19SRUdFWC50ZXN0KHJlcXVlc3RTZXR0aW5ncy5kYXRhKSApIHsKCQkJcmVxdWVzdFNldHRpbmdzLmRhdGEgPSAocmVxdWVzdFNldHRpbmdzLmRhdGEgPyByZXF1ZXN0U2V0dGluZ3MuZGF0YSArICImIiA6ICIiKSArIChyZXF1ZXN0U2V0dGluZ3MuanNvbnAgfHwgImNhbGxiYWNrIikgKyAiPT8iOwoJCX0KCX0KCgkvLyBQcm9jZXNzIGEgSlNPTlAgcmVxdWVzdCBieSBldmFsdWF0aW5nIHRoZSBtb2NrZWQgcmVzcG9uc2UgdGV4dAoJZnVuY3Rpb24gcHJvY2Vzc0pzb25wUmVxdWVzdCggcmVxdWVzdFNldHRpbmdzLCBtb2NrSGFuZGxlciwgb3JpZ1NldHRpbmdzICkgewoJCS8vIFN5bnRoZXNpemUgdGhlIG1vY2sgcmVxdWVzdCBmb3IgYWRkaW5nIGEgc2NyaXB0IHRhZwoJCXZhciBjYWxsYmFja0NvbnRleHQgPSBvcmlnU2V0dGluZ3MgJiYgb3JpZ1NldHRpbmdzLmNvbnRleHQgfHwgcmVxdWVzdFNldHRpbmdzLAoJCQluZXdNb2NrID0gbnVsbDsKCgoJCS8vIElmIHRoZSByZXNwb25zZSBoYW5kbGVyIG9uIHRoZSBtb29jayBpcyBhIGZ1bmN0aW9uLCBjYWxsIGl0CgkJaWYgKCBtb2NrSGFuZGxlci5yZXNwb25zZSAmJiAkLmlzRnVuY3Rpb24obW9ja0hhbmRsZXIucmVzcG9uc2UpICkgewoJCQltb2NrSGFuZGxlci5yZXNwb25zZShvcmlnU2V0dGluZ3MpOwoJCX0gZWxzZSB7CgoJCQkvLyBFdmFsdWF0ZSB0aGUgcmVzcG9uc2VUZXh0IGphdmFzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dAoJCQlpZiggdHlwZW9mIG1vY2tIYW5kbGVyLnJlc3BvbnNlVGV4dCA9PT0gJ29iamVjdCcgKSB7CgkJCQkkLmdsb2JhbEV2YWwoICcoJyArIEpTT04uc3RyaW5naWZ5KCBtb2NrSGFuZGxlci5yZXNwb25zZVRleHQgKSArICcpJyk7CgkJCX0gZWxzZSB7CgkJCQkkLmdsb2JhbEV2YWwoICcoJyArIG1vY2tIYW5kbGVyLnJlc3BvbnNlVGV4dCArICcpJyk7CgkJCX0KCQl9CgoJCS8vIFN1Y2Nlc3NmdWwgcmVzcG9uc2UKCQlqc29ucFN1Y2Nlc3MoIHJlcXVlc3RTZXR0aW5ncywgY2FsbGJhY2tDb250ZXh0LCBtb2NrSGFuZGxlciApOwoJCWpzb25wQ29tcGxldGUoIHJlcXVlc3RTZXR0aW5ncywgY2FsbGJhY2tDb250ZXh0LCBtb2NrSGFuZGxlciApOwoKCQkvLyBJZiB3ZSBhcmUgcnVubmluZyB1bmRlciBqUXVlcnkgMS41KywgcmV0dXJuIGEgZGVmZXJyZWQgb2JqZWN0CgkJaWYoJC5EZWZlcnJlZCl7CgkJCW5ld01vY2sgPSBuZXcgJC5EZWZlcnJlZCgpOwoJCQlpZih0eXBlb2YgbW9ja0hhbmRsZXIucmVzcG9uc2VUZXh0ID09ICJvYmplY3QiKXsKCQkJCW5ld01vY2sucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgW21vY2tIYW5kbGVyLnJlc3BvbnNlVGV4dF0gKTsKCQkJfQoJCQllbHNlewoJCQkJbmV3TW9jay5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbJC5wYXJzZUpTT04oIG1vY2tIYW5kbGVyLnJlc3BvbnNlVGV4dCApXSApOwoJCQl9CgkJfQoJCXJldHVybiBuZXdNb2NrOwoJfQoKCgkvLyBDcmVhdGUgdGhlIHJlcXVpcmVkIEpTT05QIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciB0aGUgcmVxdWVzdAoJZnVuY3Rpb24gY3JlYXRlSnNvbnBDYWxsYmFjayggcmVxdWVzdFNldHRpbmdzLCBtb2NrSGFuZGxlciwgb3JpZ1NldHRpbmdzICkgewoJCXZhciBjYWxsYmFja0NvbnRleHQgPSBvcmlnU2V0dGluZ3MgJiYgb3JpZ1NldHRpbmdzLmNvbnRleHQgfHwgcmVxdWVzdFNldHRpbmdzOwoJCXZhciBqc29ucCA9IHJlcXVlc3RTZXR0aW5ncy5qc29ucENhbGxiYWNrIHx8ICgianNvbnAiICsganNjKyspOwoKCQkvLyBSZXBsYWNlIHRoZSA9PyBzZXF1ZW5jZSBib3RoIGluIHRoZSBxdWVyeSBzdHJpbmcgYW5kIHRoZSBkYXRhCgkJaWYgKCByZXF1ZXN0U2V0dGluZ3MuZGF0YSApIHsKCQkJcmVxdWVzdFNldHRpbmdzLmRhdGEgPSAocmVxdWVzdFNldHRpbmdzLmRhdGEgKyAiIikucmVwbGFjZShDQUxMQkFDS19SRUdFWCwgIj0iICsganNvbnAgKyAiJDEiKTsKCQl9CgoJCXJlcXVlc3RTZXR0aW5ncy51cmwgPSByZXF1ZXN0U2V0dGluZ3MudXJsLnJlcGxhY2UoQ0FMTEJBQ0tfUkVHRVgsICI9IiArIGpzb25wICsgIiQxIik7CgoKCQkvLyBIYW5kbGUgSlNPTlAtc3R5bGUgbG9hZGluZwoJCXdpbmRvd1sganNvbnAgXSA9IHdpbmRvd1sganNvbnAgXSB8fCBmdW5jdGlvbiggdG1wICkgewoJCQlkYXRhID0gdG1wOwoJCQlqc29ucFN1Y2Nlc3MoIHJlcXVlc3RTZXR0aW5ncywgY2FsbGJhY2tDb250ZXh0LCBtb2NrSGFuZGxlciApOwoJCQlqc29ucENvbXBsZXRlKCByZXF1ZXN0U2V0dGluZ3MsIGNhbGxiYWNrQ29udGV4dCwgbW9ja0hhbmRsZXIgKTsKCQkJLy8gR2FyYmFnZSBjb2xsZWN0CgkJCXdpbmRvd1sganNvbnAgXSA9IHVuZGVmaW5lZDsKCgkJCXRyeSB7CgkJCQlkZWxldGUgd2luZG93WyBqc29ucCBdOwoJCQl9IGNhdGNoKGUpIHt9CgoJCQlpZiAoIGhlYWQgKSB7CgkJCQloZWFkLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTsKCQkJfQoJCX07Cgl9CgoJLy8gVGhlIEpTT05QIHJlcXVlc3Qgd2FzIHN1Y2Nlc3NmdWwKCWZ1bmN0aW9uIGpzb25wU3VjY2VzcyhyZXF1ZXN0U2V0dGluZ3MsIGNhbGxiYWNrQ29udGV4dCwgbW9ja0hhbmRsZXIpIHsKCQkvLyBJZiBhIGxvY2FsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIGZpcmUgaXQgYW5kIHBhc3MgaXQgdGhlIGRhdGEKCQlpZiAoIHJlcXVlc3RTZXR0aW5ncy5zdWNjZXNzICkgewoJCQlyZXF1ZXN0U2V0dGluZ3Muc3VjY2Vzcy5jYWxsKCBjYWxsYmFja0NvbnRleHQsIG1vY2tIYW5kbGVyLnJlc3BvbnNlVGV4dCB8fCAiIiwgc3RhdHVzLCB7fSApOwoJCX0KCgkJLy8gRmlyZSB0aGUgZ2xvYmFsIGNhbGxiYWNrCgkJaWYgKCByZXF1ZXN0U2V0dGluZ3MuZ2xvYmFsICkgewoJCQl0cmlnZ2VyKHJlcXVlc3RTZXR0aW5ncywgImFqYXhTdWNjZXNzIiwgW3t9LCByZXF1ZXN0U2V0dGluZ3NdICk7CgkJfQoJfQoKCS8vIFRoZSBKU09OUCByZXF1ZXN0IHdhcyBjb21wbGV0ZWQKCWZ1bmN0aW9uIGpzb25wQ29tcGxldGUocmVxdWVzdFNldHRpbmdzLCBjYWxsYmFja0NvbnRleHQpIHsKCQkvLyBQcm9jZXNzIHJlc3VsdAoJCWlmICggcmVxdWVzdFNldHRpbmdzLmNvbXBsZXRlICkgewoJCQlyZXF1ZXN0U2V0dGluZ3MuY29tcGxldGUuY2FsbCggY2FsbGJhY2tDb250ZXh0LCB7fSAsIHN0YXR1cyApOwoJCX0KCgkJLy8gVGhlIHJlcXVlc3Qgd2FzIGNvbXBsZXRlZAoJCWlmICggcmVxdWVzdFNldHRpbmdzLmdsb2JhbCApIHsKCQkJdHJpZ2dlciggImFqYXhDb21wbGV0ZSIsIFt7fSwgcmVxdWVzdFNldHRpbmdzXSApOwoJCX0KCgkJLy8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyCgkJaWYgKCByZXF1ZXN0U2V0dGluZ3MuZ2xvYmFsICYmICEgLS0kLmFjdGl2ZSApIHsKCQkJJC5ldmVudC50cmlnZ2VyKCAiYWpheFN0b3AiICk7CgkJfQoJfQoKCgkvLyBUaGUgY29yZSAkLmFqYXggcmVwbGFjZW1lbnQuCglmdW5jdGlvbiBoYW5kbGVBamF4KCB1cmwsIG9yaWdTZXR0aW5ncyApIHsKCQl2YXIgbW9ja1JlcXVlc3QsIHJlcXVlc3RTZXR0aW5ncywgbW9ja0hhbmRsZXI7CgoJCS8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlCgkJaWYgKCB0eXBlb2YgdXJsID09PSAib2JqZWN0IiApIHsKCQkJb3JpZ1NldHRpbmdzID0gdXJsOwoJCQl1cmwgPSB1bmRlZmluZWQ7CgkJfSBlbHNlIHsKCQkJLy8gd29yayBhcm91bmQgdG8gc3VwcG9ydCAxLjUgc2lnbmF0dXJlCgkJCW9yaWdTZXR0aW5ncy51cmwgPSB1cmw7CgkJfQoKCQkvLyBFeHRlbmQgdGhlIG9yaWdpbmFsIHNldHRpbmdzIGZvciB0aGUgcmVxdWVzdAoJCXJlcXVlc3RTZXR0aW5ncyA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLmFqYXhTZXR0aW5ncywgb3JpZ1NldHRpbmdzKTsKCgkJLy8gSXRlcmF0ZSBvdmVyIG91ciBtb2NrIGhhbmRsZXJzIChpbiByZWdpc3RyYXRpb24gb3JkZXIpIHVudGlsIHdlIGZpbmQKCQkvLyBvbmUgdGhhdCBpcyB3aWxsaW5nIHRvIGludGVyY2VwdCB0aGUgcmVxdWVzdAoJCWZvcih2YXIgayA9IDA7IGsgPCBtb2NrSGFuZGxlcnMubGVuZ3RoOyBrKyspIHsKCQkJaWYgKCAhbW9ja0hhbmRsZXJzW2tdICkgewoJCQkJY29udGludWU7CgkJCX0KCgkJCW1vY2tIYW5kbGVyID0gZ2V0TW9ja0ZvclJlcXVlc3QoIG1vY2tIYW5kbGVyc1trXSwgcmVxdWVzdFNldHRpbmdzICk7CgkJCWlmKCFtb2NrSGFuZGxlcikgewoJCQkJLy8gTm8gdmFsaWQgbW9jayBmb3VuZCBmb3IgdGhpcyByZXF1ZXN0CgkJCQljb250aW51ZTsKCQkJfQoKCQkJbW9ja2VkQWpheENhbGxzLnB1c2gocmVxdWVzdFNldHRpbmdzKTsKCgkJCS8vIElmIGxvZ2dpbmcgaXMgZW5hYmxlZCwgbG9nIHRoZSBtb2NrIHRvIHRoZSBjb25zb2xlCgkJCSQubW9ja2pheFNldHRpbmdzLmxvZyggbW9ja0hhbmRsZXIsIHJlcXVlc3RTZXR0aW5ncyApOwoKCgkJCWlmICggcmVxdWVzdFNldHRpbmdzLmRhdGFUeXBlID09PSAianNvbnAiICkgewoJCQkJaWYgKChtb2NrUmVxdWVzdCA9IHByb2Nlc3NKc29ucE1vY2soIHJlcXVlc3RTZXR0aW5ncywgbW9ja0hhbmRsZXIsIG9yaWdTZXR0aW5ncyApKSkgewoJCQkJCS8vIFRoaXMgbW9jayB3aWxsIGhhbmRsZSB0aGUgSlNPTlAgcmVxdWVzdAoJCQkJCXJldHVybiBtb2NrUmVxdWVzdDsKCQkJCX0KCQkJfQoKCgkJCS8vIFJlbW92ZWQgdG8gZml4ICM1NCAtIGtlZXAgdGhlIG1vY2tpbmcgZGF0YSBvYmplY3QgaW50YWN0CgkJCS8vbW9ja0hhbmRsZXIuZGF0YSA9IHJlcXVlc3RTZXR0aW5ncy5kYXRhOwoKCQkJbW9ja0hhbmRsZXIuY2FjaGUgPSByZXF1ZXN0U2V0dGluZ3MuY2FjaGU7CgkJCW1vY2tIYW5kbGVyLnRpbWVvdXQgPSByZXF1ZXN0U2V0dGluZ3MudGltZW91dDsKCQkJbW9ja0hhbmRsZXIuZ2xvYmFsID0gcmVxdWVzdFNldHRpbmdzLmdsb2JhbDsKCgkJCWNvcHlVcmxQYXJhbWV0ZXJzKG1vY2tIYW5kbGVyLCBvcmlnU2V0dGluZ3MpOwoKCQkJKGZ1bmN0aW9uKG1vY2tIYW5kbGVyLCByZXF1ZXN0U2V0dGluZ3MsIG9yaWdTZXR0aW5ncywgb3JpZ0hhbmRsZXIpIHsKCQkJCW1vY2tSZXF1ZXN0ID0gX2FqYXguY2FsbCgkLCAkLmV4dGVuZCh0cnVlLCB7fSwgb3JpZ1NldHRpbmdzLCB7CgkJCQkJLy8gTW9jayB0aGUgWEhSIG9iamVjdAoJCQkJCXhocjogZnVuY3Rpb24oKSB7IHJldHVybiB4aHIoIG1vY2tIYW5kbGVyLCByZXF1ZXN0U2V0dGluZ3MsIG9yaWdTZXR0aW5ncywgb3JpZ0hhbmRsZXIgKTsgfQoJCQkJfSkpOwoJCQl9KShtb2NrSGFuZGxlciwgcmVxdWVzdFNldHRpbmdzLCBvcmlnU2V0dGluZ3MsIG1vY2tIYW5kbGVyc1trXSk7CgoJCQlyZXR1cm4gbW9ja1JlcXVlc3Q7CgkJfQoKCQkvLyBXZSBkb24ndCBoYXZlIGEgbW9jayByZXF1ZXN0CgkJaWYoJC5tb2NramF4U2V0dGluZ3MudGhyb3dVbm1vY2tlZCA9PT0gdHJ1ZSkgewoJCQl0aHJvdygnQUpBWCBub3QgbW9ja2VkOiAnICsgb3JpZ1NldHRpbmdzLnVybCk7CgkJfQoJCWVsc2UgeyAvLyB0cmlnZ2VyIGEgbm9ybWFsIHJlcXVlc3QKCQkJcmV0dXJuIF9hamF4LmFwcGx5KCQsIFtvcmlnU2V0dGluZ3NdKTsKCQl9Cgl9CgoJLyoqCgkqIENvcGllcyBVUkwgcGFyYW1ldGVyIHZhbHVlcyBpZiB0aGV5IHdlcmUgY2FwdHVyZWQgYnkgYSByZWd1bGFyIGV4cHJlc3Npb24KCSogQHBhcmFtIHtPYmplY3R9IG1vY2tIYW5kbGVyCgkqIEBwYXJhbSB7T2JqZWN0fSBvcmlnU2V0dGluZ3MKCSovCglmdW5jdGlvbiBjb3B5VXJsUGFyYW1ldGVycyhtb2NrSGFuZGxlciwgb3JpZ1NldHRpbmdzKSB7CgkJLy9wYXJhbWV0ZXJzIGFyZW4ndCBjYXB0dXJlZCBpZiB0aGUgVVJMIGlzbid0IGEgUmVnRXhwCgkJaWYgKCEobW9ja0hhbmRsZXIudXJsIGluc3RhbmNlb2YgUmVnRXhwKSkgewoJCQlyZXR1cm47CgkJfQoJCS8vaWYgbm8gVVJMIHBhcmFtcyB3ZXJlIGRlZmluZWQgb24gdGhlIGhhbmRsZXIsIGRvbid0IGF0dGVtcHQgYSBjYXB0dXJlCgkJaWYgKCFtb2NrSGFuZGxlci5oYXNPd25Qcm9wZXJ0eSgndXJsUGFyYW1zJykpIHsKCQkJcmV0dXJuOwoJCX0KCQl2YXIgY2FwdHVyZXMgPSBtb2NrSGFuZGxlci51cmwuZXhlYyhvcmlnU2V0dGluZ3MudXJsKTsKCQkvL3RoZSB3aG9sZSBSZWdFeHAgbWF0Y2ggaXMgYWx3YXlzIHRoZSBmaXJzdCB2YWx1ZSBpbiB0aGUgY2FwdHVyZSByZXN1bHRzCgkJaWYgKGNhcHR1cmVzLmxlbmd0aCA9PT0gMSkgewoJCQlyZXR1cm47CgkJfQoJCWNhcHR1cmVzLnNoaWZ0KCk7CgkJLy91c2UgaGFuZGxlciBwYXJhbXMgYXMga2V5cyBhbmQgY2FwdHVyZSByZXN1dHMgYXMgdmFsdWVzCgkJdmFyIGkgPSAwLAoJCWNhcHR1cmVzTGVuZ3RoID0gY2FwdHVyZXMubGVuZ3RoLAoJCXBhcmFtc0xlbmd0aCA9IG1vY2tIYW5kbGVyLnVybFBhcmFtcy5sZW5ndGgsCgkJLy9pbiBjYXNlIHRoZSBudW1iZXIgb2YgcGFyYW1zIHNwZWNpZmllZCBpcyBsZXNzIHRoYW4gYWN0dWFsIGNhcHR1cmVzCgkJbWF4SXRlcmF0aW9ucyA9IE1hdGgubWluKGNhcHR1cmVzTGVuZ3RoLCBwYXJhbXNMZW5ndGgpLAoJCXBhcmFtVmFsdWVzID0ge307CgkJZm9yIChpOyBpIDwgbWF4SXRlcmF0aW9uczsgaSsrKSB7CgkJCXZhciBrZXkgPSBtb2NrSGFuZGxlci51cmxQYXJhbXNbaV07CgkJCXBhcmFtVmFsdWVzW2tleV0gPSBjYXB0dXJlc1tpXTsKCQl9CgkJb3JpZ1NldHRpbmdzLnVybFBhcmFtcyA9IHBhcmFtVmFsdWVzOwoJfQoKCgkvLyBQdWJsaWMKCgkkLmV4dGVuZCh7CgkJYWpheDogaGFuZGxlQWpheAoJfSk7CgoJJC5tb2NramF4U2V0dGluZ3MgPSB7CgkJLy91cmw6ICAgICAgICBudWxsLAoJCS8vdHlwZTogICAgICAgJ0dFVCcsCgkJbG9nOiAgICAgICAgICBmdW5jdGlvbiggbW9ja0hhbmRsZXIsIHJlcXVlc3RTZXR0aW5ncyApIHsKCQkJaWYgKCBtb2NrSGFuZGxlci5sb2dnaW5nID09PSBmYWxzZSB8fAoJCQkJICggdHlwZW9mIG1vY2tIYW5kbGVyLmxvZ2dpbmcgPT09ICd1bmRlZmluZWQnICYmICQubW9ja2pheFNldHRpbmdzLmxvZ2dpbmcgPT09IGZhbHNlICkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCQkJaWYgKCB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmxvZyApIHsKCQkJCXZhciBtZXNzYWdlID0gJ01PQ0sgJyArIHJlcXVlc3RTZXR0aW5ncy50eXBlLnRvVXBwZXJDYXNlKCkgKyAnOiAnICsgcmVxdWVzdFNldHRpbmdzLnVybDsKCQkJCXZhciByZXF1ZXN0ID0gJC5leHRlbmQoe30sIHJlcXVlc3RTZXR0aW5ncyk7CgoJCQkJaWYgKHR5cGVvZiBjb25zb2xlLmxvZyA9PT0gJ2Z1bmN0aW9uJykgewoJCQkJCWNvbnNvbGUubG9nKG1lc3NhZ2UsIHJlcXVlc3QpOwoJCQkJfSBlbHNlIHsKCQkJCQl0cnkgewoJCQkJCQljb25zb2xlLmxvZyggbWVzc2FnZSArICcgJyArIEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpICk7CgkJCQkJfSBjYXRjaCAoZSkgewoJCQkJCQljb25zb2xlLmxvZyhtZXNzYWdlKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9LAoJCWxvZ2dpbmc6ICAgICAgIHRydWUsCgkJc3RhdHVzOiAgICAgICAgMjAwLAoJCXN0YXR1c1RleHQ6ICAgICJPSyIsCgkJcmVzcG9uc2VUaW1lOiAgNTAwLAoJCWlzVGltZW91dDogICAgIGZhbHNlLAoJCXRocm93VW5tb2NrZWQ6IGZhbHNlLAoJCWNvbnRlbnRUeXBlOiAgICd0ZXh0L3BsYWluJywKCQlyZXNwb25zZTogICAgICAnJywKCQlyZXNwb25zZVRleHQ6ICAnJywKCQlyZXNwb25zZVhNTDogICAnJywKCQlwcm94eTogICAgICAgICAnJywKCQlwcm94eVR5cGU6ICAgICAnR0VUJywKCgkJbGFzdE1vZGlmaWVkOiAgbnVsbCwKCQlldGFnOiAgICAgICAgICAnJywKCQloZWFkZXJzOiB7CgkJCWV0YWc6ICdJSkZASCNAOTIzdWY4MDIzaEZPQEkjSCMnLAoJCQknY29udGVudC10eXBlJyA6ICd0ZXh0L3BsYWluJwoJCX0KCX07CgoJJC5tb2NramF4ID0gZnVuY3Rpb24oc2V0dGluZ3MpIHsKCQl2YXIgaSA9IG1vY2tIYW5kbGVycy5sZW5ndGg7CgkJbW9ja0hhbmRsZXJzW2ldID0gc2V0dGluZ3M7CgkJcmV0dXJuIGk7Cgl9OwoJJC5tb2NramF4Q2xlYXIgPSBmdW5jdGlvbihpKSB7CgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID09IDEgKSB7CgkJCW1vY2tIYW5kbGVyc1tpXSA9IG51bGw7CgkJfSBlbHNlIHsKCQkJbW9ja0hhbmRsZXJzID0gW107CgkJfQoJCW1vY2tlZEFqYXhDYWxscyA9IFtdOwoJfTsKCSQubW9ja2pheC5oYW5kbGVyID0gZnVuY3Rpb24oaSkgewoJCWlmICggYXJndW1lbnRzLmxlbmd0aCA9PSAxICkgewoJCQlyZXR1cm4gbW9ja0hhbmRsZXJzW2ldOwoJCX0KCX07CgkkLm1vY2tqYXgubW9ja2VkQWpheENhbGxzID0gZnVuY3Rpb24oKSB7CgkJcmV0dXJuIG1vY2tlZEFqYXhDYWxsczsKCX07Cn0pKGpRdWVyeSk7Cg==",
    "size": "18880"
}