{
    "namaFile": "lib\/PHPExcel\/Classes\/PHPExcel\/Calculation\/Logical.php",
    "lastUpdate": "2017-12-25+01:39:38.00",
    "contentFile": "PD9waHAKCi8qKiBQSFBFeGNlbCByb290IGRpcmVjdG9yeSAqLwppZiAoIWRlZmluZWQoJ1BIUEVYQ0VMX1JPT1QnKSkgewogICAgLyoqCiAgICAgKiBAaWdub3JlCiAgICAgKi8KICAgIGRlZmluZSgnUEhQRVhDRUxfUk9PVCcsIGRpcm5hbWUoX19GSUxFX18pIC4gJy8uLi8uLi8nKTsKICAgIHJlcXVpcmUoUEhQRVhDRUxfUk9PVCAuICdQSFBFeGNlbC9BdXRvbG9hZGVyLnBocCcpOwp9CgovKioKICogUEhQRXhjZWxfQ2FsY3VsYXRpb25fTG9naWNhbAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYwogKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIKICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiAqCiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VCiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCiAqCiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZQogKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBCiAqCiAqIEBjYXRlZ29yeSAgICBQSFBFeGNlbAogKiBAcGFja2FnZSAgICAgICAgUEhQRXhjZWxfQ2FsY3VsYXRpb24KICogQGNvcHlyaWdodCAgICBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDE1IFBIUEV4Y2VsIChodHRwOi8vd3d3LmNvZGVwbGV4LmNvbS9QSFBFeGNlbCkKICogQGxpY2Vuc2UgICAgICAgIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvbGdwbC0yLjEudHh0ICAgIExHUEwKICogQHZlcnNpb24gICAgICAgICMjVkVSU0lPTiMjLCAjI0RBVEUjIwogKi8KY2xhc3MgUEhQRXhjZWxfQ2FsY3VsYXRpb25fTG9naWNhbAp7CiAgICAvKioKICAgICAqIFRSVUUKICAgICAqCiAgICAgKiBSZXR1cm5zIHRoZSBib29sZWFuIFRSVUUuCiAgICAgKgogICAgICogRXhjZWwgRnVuY3Rpb246CiAgICAgKiAgICAgICAgPVRSVUUoKQogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAY2F0ZWdvcnkgTG9naWNhbCBGdW5jdGlvbnMKICAgICAqIEByZXR1cm4gICAgYm9vbGVhbiAgICAgICAgVHJ1ZQogICAgICovCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIFRSVUUoKQogICAgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCiAgICAvKioKICAgICAqIEZBTFNFCiAgICAgKgogICAgICogUmV0dXJucyB0aGUgYm9vbGVhbiBGQUxTRS4KICAgICAqCiAgICAgKiBFeGNlbCBGdW5jdGlvbjoKICAgICAqICAgICAgICA9RkFMU0UoKQogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAY2F0ZWdvcnkgTG9naWNhbCBGdW5jdGlvbnMKICAgICAqIEByZXR1cm4gICAgYm9vbGVhbiAgICAgICAgRmFsc2UKICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBGQUxTRSgpCiAgICB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKCiAgICAvKioKICAgICAqIExPR0lDQUxfQU5ECiAgICAgKgogICAgICogUmV0dXJucyBib29sZWFuIFRSVUUgaWYgYWxsIGl0cyBhcmd1bWVudHMgYXJlIFRSVUU7IHJldHVybnMgRkFMU0UgaWYgb25lIG9yIG1vcmUgYXJndW1lbnQgaXMgRkFMU0UuCiAgICAgKgogICAgICogRXhjZWwgRnVuY3Rpb246CiAgICAgKiAgICAgICAgPUFORChsb2dpY2FsMVssbG9naWNhbDJbLCAuLi5dXSkKICAgICAqCiAgICAgKiAgICAgICAgVGhlIGFyZ3VtZW50cyBtdXN0IGV2YWx1YXRlIHRvIGxvZ2ljYWwgdmFsdWVzIHN1Y2ggYXMgVFJVRSBvciBGQUxTRSwgb3IgdGhlIGFyZ3VtZW50cyBtdXN0IGJlIGFycmF5cwogICAgICogICAgICAgICAgICBvciByZWZlcmVuY2VzIHRoYXQgY29udGFpbiBsb2dpY2FsIHZhbHVlcy4KICAgICAqCiAgICAgKiAgICAgICAgQm9vbGVhbiBhcmd1bWVudHMgYXJlIHRyZWF0ZWQgYXMgVHJ1ZSBvciBGYWxzZSBhcyBhcHByb3ByaWF0ZQogICAgICogICAgICAgIEludGVnZXIgb3IgZmxvYXRpbmcgcG9pbnQgYXJndW1lbnRzIGFyZSB0cmVhdGVkIGFzIFRydWUsIGV4Y2VwdCBmb3IgMCBvciAwLjAgd2hpY2ggYXJlIEZhbHNlCiAgICAgKiAgICAgICAgSWYgYW55IGFyZ3VtZW50IHZhbHVlIGlzIGEgc3RyaW5nLCBvciBhIE51bGwsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGEgI1ZBTFVFISBlcnJvciwgdW5sZXNzIHRoZSBzdHJpbmcgaG9sZHMKICAgICAqICAgICAgICAgICAgdGhlIHZhbHVlIFRSVUUgb3IgRkFMU0UsIGluIHdoaWNoIGNhc2UgaXQgaXMgZXZhbHVhdGVkIGFzIHRoZSBjb3JyZXNwb25kaW5nIGJvb2xlYW4gdmFsdWUKICAgICAqCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYwogICAgICogQGNhdGVnb3J5IExvZ2ljYWwgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0gICAgbWl4ZWQgICAgICAgICRhcmcsLi4uICAgICAgICBEYXRhIHZhbHVlcwogICAgICogQHJldHVybiAgICBib29sZWFuICAgICAgICBUaGUgbG9naWNhbCBBTkQgb2YgdGhlIGFyZ3VtZW50cy4KICAgICAqLwogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBMT0dJQ0FMX0FORCgpCiAgICB7CiAgICAgICAgLy8gUmV0dXJuIHZhbHVlCiAgICAgICAgJHJldHVyblZhbHVlID0gdHJ1ZTsKCiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBhcmd1bWVudHMKICAgICAgICAkYUFyZ3MgPSBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5BcnJheShmdW5jX2dldF9hcmdzKCkpOwogICAgICAgICRhcmdDb3VudCA9IC0xOwogICAgICAgIGZvcmVhY2ggKCRhQXJncyBhcyAkYXJnQ291bnQgPT4gJGFyZykgewogICAgICAgICAgICAvLyBJcyBpdCBhIGJvb2xlYW4gdmFsdWU\\/IGZhbHNlIDogUEhQRXhjZWxfQ2FsY3VsYXRpb25fRnVuY3Rpb25zOjpmbGF0dGVuU2luZ2xlVmFsdWUoJHJldHVybklmRmFsc2UpOwoKICAgICAgICByZXR1cm4gKCRjb25kaXRpb24pID8gJHJldHVybklmVHJ1ZSA6ICRyZXR1cm5JZkZhbHNlOwogICAgfQoKCiAgICAvKioKICAgICAqIElGRVJST1IKICAgICAqCiAgICAgKiBFeGNlbCBGdW5jdGlvbjoKICAgICAqICAgICAgICA9SUZFUlJPUih0ZXN0VmFsdWUsZXJyb3JwYXJ0KQogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAY2F0ZWdvcnkgTG9naWNhbCBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSAgICBtaXhlZCAgICAkdGVzdFZhbHVlICAgIFZhbHVlIHRvIGNoZWNrLCBpcyBhbHNvIHRoZSB2YWx1ZSByZXR1cm5lZCB3aGVuIG5vIGVycm9yCiAgICAgKiBAcGFyYW0gICAgbWl4ZWQgICAgJGVycm9ycGFydCAgICBWYWx1ZSB0byByZXR1cm4gd2hlbiB0ZXN0VmFsdWUgaXMgYW4gZXJyb3IgY29uZGl0aW9uCiAgICAgKiBAcmV0dXJuICAgIG1peGVkICAgIFRoZSB2YWx1ZSBvZiBlcnJvcnBhcnQgb3IgdGVzdFZhbHVlIGRldGVybWluZWQgYnkgZXJyb3IgY29uZGl0aW9uCiAgICAgKi8KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gSUZFUlJPUigkdGVzdFZhbHVlID0gJycsICRlcnJvcnBhcnQgPSAnJykKICAgIHsKICAgICAgICAkdGVzdFZhbHVlID0gKGlzX251bGwoJHRlc3RWYWx1ZSkpID8gJycgOiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkdGVzdFZhbHVlKTsKICAgICAgICAkZXJyb3JwYXJ0ID0gKGlzX251bGwoJGVycm9ycGFydCkpID8gJycgOiBQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OmZsYXR0ZW5TaW5nbGVWYWx1ZSgkZXJyb3JwYXJ0KTsKCiAgICAgICAgcmV0dXJuIHNlbGY6OlNUQVRFTUVOVF9JRihQSFBFeGNlbF9DYWxjdWxhdGlvbl9GdW5jdGlvbnM6OklTX0VSUk9SKCR0ZXN0VmFsdWUpLCAkZXJyb3JwYXJ0LCAkdGVzdFZhbHVlKTsKICAgIH0KfQo=",
    "size": "11486"
}